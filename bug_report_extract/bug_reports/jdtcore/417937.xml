<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>417937</bug_id>
          
          <creation_ts>2013-09-24 11:35:00 -0400</creation_ts>
          <short_desc>[1.8] ImportRewrite#addImport(ITypeBinding, ...) drops TYPE_USE annotations</short_desc>
          <delta_ts>2014-01-31 07:25:55 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=426510</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>425741</dependson>
          <blocked>425949</blocked>
    
    <blocked>420116</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Manju Mathew">manju656</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59991"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2310347</commentid>
    <comment_count>0</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2013-09-24 11:35:14 -0400</bug_when>
    <thetext>Consider the below method:
public void foo(java.io.@TypeUse FileNotFoundException arg, A type){
}
When &apos;move&apos; refactoring is invoked on #foo:
ImportRewrite#addImport(ITypeBinding binding, AST ast, ImportRewriteContext context) is invoked with the VariableBinding corresponding to &lt;java.io.@TypeUse FileNotFoundException arg&gt;, where it is expected to return a PackageQualifiedType which contains the TYPE_USE annotation details as well. This is not currently handled in #addImport(...)and the method returns a SimpleType and the TYPE_USE annotation details are missing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310552</commentid>
    <comment_count>1</comment_count>
      <attachid>235789</attachid>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2013-09-25 00:44:06 -0400</bug_when>
    <thetext>Created attachment 235789
Test Data

Attaching the test data zip to reproduce the issue. This bug depends on the fix from bug 409586.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310572</commentid>
    <comment_count>2</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-09-25 03:10:41 -0400</bug_when>
    <thetext>(In reply to Manju Mathew from comment #0)
&gt; ImportRewrite#addImport(ITypeBinding binding, AST ast, ImportRewriteContext
&gt; context) is invoked with the VariableBinding corresponding to
&gt; &lt;java.io.@TypeUse FileNotFoundException arg&gt;, where it is expected to return
&gt; a PackageQualifiedType which contains the TYPE_USE annotation details as
&gt; well. This is not currently handled in #addImport(...)and the method returns
&gt; a SimpleType and the TYPE_USE annotation details are missing.

It is illegal to have  a TYPE_USE annotation in the import statement (Ref JSR 308 sec 2.1). So, from the import statement&apos;s perspective, this is the expected behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310592</commentid>
    <comment_count>3</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-09-25 04:04:19 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #2)
&gt; (In reply to Manju Mathew from comment #0)
the method returns
&gt; &gt; a SimpleType and the TYPE_USE annotation details are missing.
&gt; 
&gt; It is illegal to have  a TYPE_USE annotation in the import statement (Ref
&gt; JSR 308 sec 2.1). So, from the import statement&apos;s perspective, this is the
&gt; expected behavior.

I agree that the bug is that the return type should have the TYPE_USE annotation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310604</commentid>
    <comment_count>4</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-09-25 04:30:11 -0400</bug_when>
    <thetext>1) This issue is present in Qualified type TYPE_USE annotation as well.

consider the following code:

B1.java:
package packUp;
public class B1 {
	public class B2 {
		public class B3 {}
	}
}


A.java:
..
	public void foo( packUp.B1.B2.@TypeUse B3 arg, A_test803 a)
					throws java.io.@TypeUse EOFException {...}

move foo to A_803[some place other than B3] - Annotation is lost.

2) same code as above, but move to B3.
Here the type annotation is lost (there is no parameter here).. However, I believe this should have resulted in a receiver parameter with the TYPE_USE annotation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2312415</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-09-30 05:47:01 -0400</bug_when>
    <thetext>Same issue with type arguments as well.

package packUp;
public class C1 &lt;T&gt; {
	public class C2&lt;P&gt; {
		public class C3&lt;Q&gt; {
			
		}
	}
}

public void foo( packUp.C1&lt;Integer&gt;.C2&lt;Float&gt;.C3&lt;String&gt; arg, A a) {}

click on foo -&gt; refactor-&gt;move -&gt; Choose A -&gt; Preview/OK

Result:
import packUp.C1.C2.C3;

public class A {

	public void foo( C3&lt;String&gt; arg) {}}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315004</commentid>
    <comment_count>6</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-10-07 08:20:02 -0400</bug_when>
    <thetext>Creating Types from the Bindings may not be always accurate. In addition, these &quot;manufactured&quot; type would not be able answer resolve bindings. Proposal is to deprecate the current API</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315005</commentid>
    <comment_count>7</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-10-07 08:22:15 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #6)
&gt; Creating Types from the Bindings may not be always accurate. In addition,
&gt; these &quot;manufactured&quot; type would not be able answer resolve bindings.
&gt; Proposal is to deprecate the current API

And provide a new API that takes types (and not typeBindinds) as input for importRewrite(). 

UI team: your feedback appreciated here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315612</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 10:02:00 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #7)
&gt; (In reply to Manoj Palat from comment #6)
&gt; &gt; Creating Types from the Bindings may not be always accurate. In addition,
&gt; &gt; these &quot;manufactured&quot; type would not be able answer resolve bindings.
&gt; &gt; Proposal is to deprecate the current API
&gt; 
&gt; And provide a new API that takes types (and not typeBindinds) as input for
&gt; importRewrite(). 

Manoj, propose a new API with javadoc and let us bounce it across for opinions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315682</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-10-08 11:16:21 -0400</bug_when>
    <thetext>(In reply to Manoj Palat from comment #6)
&gt; Creating Types from the Bindings may not be always accurate.

Why not? Bindings are always accurate if the code compiles (and good enough if it doesn&apos;t). The cited API is the one we use everywhere, and that&apos;s the way to go. Definitely nothing to deprecate.

I didn&apos;t investigate comment 5, but it sounds like that&apos;s a bug in the refactoring implementation. The addImport API clearly specifies that it adds type arguments for parameterized types, but ignores them for generic types. I would expect the same add/ignore behavior for type-use annotations.


&gt; In addition,
&gt; these &quot;manufactured&quot; type would not be able answer resolve bindings.

Yes, like it is the case for all other AST nodes that are not created by an ASTParser.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315691</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 11:23:25 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #9)

&gt; &gt; In addition,
&gt; &gt; these &quot;manufactured&quot; type would not be able answer resolve bindings.
&gt; 
&gt; Yes, like it is the case for all other AST nodes that are not created by an
&gt; ASTParser.

So, this was the point that made us wonder if we should deprecate the old
API and suggest a new one which would pass in the AST with which we could
operate. If not being to answers bindings is not an issue, then the problem
goes away.

So Manoj, you are sure you can fabricate annotations from bindings so that
they would look exactly the same as before ? i.e I want to make sure attributes
which defaulted to their default values in the original program don&apos;t show up
explicitly in the reconstructed AST.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315748</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-10-08 12:21:26 -0400</bug_when>
    <thetext>&gt; So, this was the point that made us wonder if we should deprecate the old
&gt; API and suggest a new one which would pass in the AST with which we could
&gt; operate.

Note that we don&apos;t always have an AST handy. E.g. for Extract Local Variable we resolve the binding from the selected expression, and then use addImport to create a type reference. The expression can be anything. And if we don&apos;t get a binding for the expression, we try to make a guess that is based on other AST nodes. See e.g. ASTResolving#getPossibleReferenceBinding(ASTNode).

I think writing a new API that can support all these use cases is a lot more work than tweaking type bindings to include all relevant information. Furthermore, there are cases where types are inferred and there&apos;s no single AST node that carries all these annotations. Example:

public class TypeInference {
    @Target(ElementType.TYPE_USE)
    @interface NonNull { }
    
    static &lt;T&gt; List&lt;T&gt; pass(List&lt;T&gt; l) {
        return l;
    }
    
    static &lt;T&gt; List&lt;? extends T&gt; combine(List&lt;? extends T&gt; a, List&lt;? extends T&gt; b) {
        return new Random().nextBoolean() ? a : b;
    }
    
    void foo() {
        // type of pass(..) is List&lt;@NonNull Integer&gt;:
        pass(new ArrayList&lt;@NonNull Integer&gt;());
        
        // type of combine(..) is hard to tell. Maybe this:
        // List&lt;@NonNull ? extends Number&gt;
        combine(new ArrayList&lt;@NonNull Byte&gt;(), new ArrayList&lt;@NonNull Long&gt;());
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316112</commentid>
    <comment_count>12</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-10-09 07:17:55 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #9)
&gt; I didn&apos;t investigate comment 5, but it sounds like that&apos;s a bug in the
&gt; refactoring implementation.

That guess was wrong (thanks Noopor for investigating this!).

&gt; The addImport API clearly specifies that it adds
&gt; type arguments for parameterized types, but ignores them for generic types.
&gt; I would expect the same add/ignore behavior for type-use annotations.

For parameterized types, it only adds type arguments for the rightmost segment of a qualified type, but it misses type arguments in the qualifier. In that case, #addImport needs to be smarter and has to start the type reference with the first segment that has type arguments or type annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324202</commentid>
    <comment_count>13</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-10-28 23:34:28 -0400</bug_when>
    <thetext>See bug 420579 as well (came up during testing)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324204</commentid>
    <comment_count>14</comment_count>
      <attachid>236989</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-10-28 23:45:41 -0400</bug_when>
    <thetext>Created attachment 236989
Work in Progress patch

switching over for testing for M3, hence holding on to this bug until next week. Meanwhile, this is a wip patch to unblock for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334322</commentid>
    <comment_count>15</comment_count>
      <attachid>237709</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-11-25 23:11:50 -0500</bug_when>
    <thetext>Created attachment 237709
Proposed Patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334393</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-11-26 04:18:11 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #4)
&gt; 2) same code as above, but move to B3.
&gt; Here the type annotation is lost (there is no parameter here).. However, I
&gt; believe this should have resulted in a receiver parameter with the TYPE_USE
&gt; annotation.

In JLS7, we always removed the first parameter of the same type and treated that as implicit &apos;this&apos;. While I am wondering what made us take this approach (we could have simply kept the parameter and the code that references the parameter name inside the method being moved), this won&apos;t work for JSL8, i.e. with type annotations.

Going forward in JLS8, I think we should just retain the first parameter also (with the &apos;name&apos;) rather than making it an explicit &apos;this&apos;. It&apos;s unnecessary to treat the first parameter of current type as implicit/explicit &apos;this&apos; and touch all the code inside the method being moved. I might be missing something because I don&apos;t know the history behind this behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334396</commentid>
    <comment_count>17</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-11-26 04:25:53 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #16)
&gt; Going forward in JLS8, I think we should just retain the first parameter
&gt; also (with the &apos;name&apos;) rather than making it an explicit &apos;this&apos;. It&apos;s
&gt; unnecessary to treat the first parameter of current type as
&gt; implicit/explicit &apos;this&apos; and touch all the code inside the method being
&gt; moved. I might be missing something because I don&apos;t know the history behind
&gt; this behavior.

First, the patch does not address this scenario as it still not clear as to what is the right approach. One extreme approach is not to allow the movement if there are annotations. 

Second, on a general note, I think it would cause confusion if the behavior is different between &gt;= JLS8 and &lt; JLS8. Also, the current approach looks more intuitive since it equates (or implicitly takes) the enclosing type  as one of the parameters and removes the same from the function.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334454</commentid>
    <comment_count>18</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2013-11-26 06:54:30 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #16)
&gt; (In reply to Manoj Palat from comment #4)
&gt; &gt; 2) same code as above, but move to B3.
&gt; &gt; Here the type annotation is lost (there is no parameter here).. However, I
&gt; &gt; believe this should have resulted in a receiver parameter with the TYPE_USE
&gt; &gt; annotation.
&gt; 
&gt; In JLS7, we always removed the first parameter of the same type and treated
&gt; that as implicit &apos;this&apos;.

In Move instance method refactoring, we do not remove the *first* parameter of the target type. We get the option to choose the receiver and the chosen parameter is made as the implicit receiver parameter in the target type.
For example, you can move #foo to B3 by choosing arg1 or arg2 as the receiver and  check the corresponding #toString methods :
--------------------------------------
public class A {
	public void foo(packUp.B1.B2.@TypeUse B3 arg1, packUp.B1.B2.@TypeUse B3 arg2, A_test803 a) throws java.io.@TypeUse EOFException {
		this.toString();
		arg1.toString();
		arg2.toString();
	}
}
-------------------------------------- 

In my view, going forward in JLS8, in the move instance method refactoring, if the chosen receiver parameter has associated type use annotations, we can retain it as an explicit first parameter &apos;this&apos; along with the type use annotations. 
If the chosen receiver parameter has no type use annotation, the behavior can remain as before JLS8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334463</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-11-26 07:29:00 -0500</bug_when>
    <thetext>(In reply to Noopur Gupta from comment #18)
&gt; In Move instance method refactoring, we do not remove the *first* parameter
&gt; of the target type. We get the option to choose the receiver and the chosen
&gt; parameter is made as the implicit receiver parameter in the target type.
&gt; For example, you can move #foo to B3 by choosing arg1 or arg2 as the
&gt; receiver and  check the corresponding #toString methods :

I didn&apos;t know about this. Thanks. I should mention it though that looking at the UI it doesn&apos;t look very intuitive that there is a choice that the user is expected to make. Worse even when I was told that I can select one of the receiver, I was trying to move them up/down.

&gt; In my view, going forward in JLS8, in the move instance method refactoring,
&gt; if the chosen receiver parameter has associated type use annotations, we can
&gt; retain it as an explicit first parameter &apos;this&apos; along with the type use
&gt; annotations. 
&gt; If the chosen receiver parameter has no type use annotation, the behavior
&gt; can remain as before JLS8.

With my newly acquired knowledge, I agree this is the right approach.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2334896</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-11-27 05:24:54 -0500</bug_when>
    <thetext>Just had a quick look and here are my observations.

1. When I try to move a method with a parameter like below, I get a CCE:

      B1&lt;String&gt;.B2&lt;String&gt;.@Marker(true) B3&lt;String&gt; arg

2. I believe the addImport() methods which return a String should also be updated to produce similar result.

3. The documentation of addImport needs update. Esp. we should mention that we would retain the qualifier types in case of annotation or type arguments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335303</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-11-28 01:12:30 -0500</bug_when>
    <thetext>Couple more comments:

1. The following code completely ignores the values array.

  Object[] values= (Object[]) value;
  ...
  int size = expressions.size();
  for (int i = 0; i &lt; size; i++)
    expressions.add(newAnnotationValue(ast, expressions.get(i)));
  return initializer;

This results in annotation value being dropped altogether in cases like this:

  @Marker({&quot;1&quot;, &quot;2&quot;})

If you took this new code that create new annotations from the UI code, it may not be a bad idea to move that code to Core so both Core and UI could use that.

2. In method checkAnnotationAndGenerics(), param binding itself could be used instead of a new variable typeBinding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2349355</commentid>
    <comment_count>22</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-14 07:13:10 -0500</bug_when>
    <thetext>Manoj, please handle this bug with priority. I expect this to solve many 308-related problems in refactorings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350323</commentid>
    <comment_count>23</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-01-15 20:52:36 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #20)
&gt; Just had a quick look and here are my observations.
....
&gt; 2. I believe the addImport() methods which return a String should also be
&gt; updated to produce similar result.
=&gt; Does it require an update? The string that is returned by this method is either a simple name or a qualified name, can the annotation be part of this?

=&gt; The Javadoc of this method and other addImport() methods which return String needs an urgent update. Currently the Javadoc says it returns a type to which the type binding can be assigned to, which is wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351657</commentid>
    <comment_count>24</comment_count>
      <attachid>239125</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-20 02:04:44 -0500</bug_when>
    <thetext>Created attachment 239125
Proposed Patch

(In reply to Manju Mathew from comment #23)
&gt; (In reply to Jayaprakash Arthanareeswaran from comment #20)
&gt; &gt; Just had a quick look and here are my observations.
&gt; ....

Incorporated the review comments in the patch.

&gt; &gt; 2. I believe the addImport() methods which return a String should also be
&gt; &gt; updated to produce similar result.
&gt; =&gt; Does it require an update? The string that is returned by this method is
&gt; either a simple name or a qualified name, can the annotation be part of this?
&gt; 
Updated the java doc to reflect name/qualified name. If it is decided that we require a type to be return by the String addImport(), that can be done independently (either via this bug or preferably by a follow up bug).  Committing the current patch to unblock .</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351664</commentid>
    <comment_count>25</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-20 03:00:25 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #24)
&gt; Committing the current patch to unblock .
commit via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=605f0ee93693a2c3a651d9c4f6ced8379d7a4fcc</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353305</commentid>
    <comment_count>26</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-23 00:38:32 -0500</bug_when>
    <thetext>Moving to resolved post commit mentions in comment 25. Please raise follow up bugs for further issues
[Ref comment 24]
[ui - Ref bug 420116 comment 6]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353884</commentid>
    <comment_count>27</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-23 17:24:41 -0500</bug_when>
    <thetext>1.) These two methods in ImportRewrite are almost identical and should be merged back into one implementation:

- addImport(ITypeBinding, AST, ImportRewriteContext)
- createType(Type, ITypeBinding, AST, ImportRewriteContext)

The main differences are the isTypeVariable() and isParameterizedType() cases.

The code in isTypeVariable() looks wrong. Can you show an example where this is used? A type variable can only be referenced as a simple name; it can&apos;t be qualified.


2.) The code in createType(ITypeBinding, ITypeBinding, AST, ImportRewriteContext) causes exceptions even without type annotations:

package bug.imports;
import java.util.Set;
public class B {
    class Date {}
    Set&lt;java.util.Date&gt; s;
    {
        s2= s; // Quick Fix: Create local variable
    }
}

Fix: Use &quot;bindingPoint.getTypeDeclaration()&quot;. And please replace the part after &quot;if (dotIndex != -1) {&quot; with a simple 


3.) The type of an annotation is not properly imported:

package bug.qualified;
import java.lang.annotation.*;
@Target(ElementType.TYPE_USE)
public @interface Date { }

package bug.qualified;
import java.util.Date;
public class Clash {
    Date d= new Date();
    @bug.qualified.Date Object o;
    {
        o2= o; // Quick Fix: Create local variable
    }
}

It looks like the code in createType(ITypeBinding, ITypeBinding, AST, ImportRewriteContext) should actually go to the end of the combined createType/addImport method from problem (1.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353893</commentid>
    <comment_count>28</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-23 17:40:21 -0500</bug_when>
    <thetext>&gt; 2.) The code in createType(ITypeBinding, ITypeBinding, AST,
&gt; ImportRewriteContext) causes exceptions even without type annotations:
&gt; [..]
&gt; And please replace the part after &quot;if (dotIndex != -1) {&quot; with a simple 

Forgot the actual fix:

    str = str.substring(0, dotIndex);


&gt; 3.) The type of an annotation is not properly imported:
&gt; [..]
&gt; It looks like the code in createType(ITypeBinding, ITypeBinding, AST,
&gt; ImportRewriteContext) should actually go to the end of the combined
&gt; createType/addImport method from problem (1.)

And once that&apos;s fixed, you will see that the change you did in newAnnotation(AST, IAnnotationBinding, ImportRewriteContext) was not good, since the &apos;name&apos; node can be a qualified name.

Original code:
	// pay ransom to allow reuse of &apos;name&apos;:
	simpleType.setName(ast.newSimpleName(&quot;a&quot;)); //$NON-NLS-1$
Your code:
	[ useful comment removed ]
	simpleType.setName(ast.newSimpleName(name.toString()));

Maybe a better comment would be:
	// cut &apos;name&apos; loose from its parent, so that it can be reused

And the else branch (which shouldn&apos;t ever happen) would better be:
	name = ast.newSimpleName(&quot;invalid&quot;); //$NON-NLS-1$</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354928</commentid>
    <comment_count>29</comment_count>
      <attachid>239347</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-27 10:16:29 -0500</bug_when>
    <thetext>Created attachment 239347
Proposed Patch

Thanks Markus for the review. Comments incorporated.
Jay: Fix for bug 426094 is also combined in this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355934</commentid>
    <comment_count>30</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-29 08:41:09 -0500</bug_when>
    <thetext>Patch looks good to me. Just a couple of observations:

1. On cases where we have a wildcard import, it&apos;s left behind after the refactor even though it&apos;s no longer required.
2. In the following case, both the HashMap and HashMap.Entry are added to the imports section in the destination class.

    @Annot(0) HashMap.@Annot(1) Entry&lt;String, @Annot(2) ? extends int @Annot(3) []&gt; value

Both these cases are just as they were before Java 8. So, no complaints there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356030</commentid>
    <comment_count>31</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-29 10:38:39 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #30)
&gt; Patch looks good to me. 

Thanks Jay. Committed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=42a20f90363fe2e676c07d56364d6cc6b90a9458

Markus: Leaving the bug open in case if there are further comments.

&gt; Just a couple of observations:
&gt; .
&gt; Both these cases are just as they were before Java 8. So, no complaints
&gt; there.

These look like an issue wrt ui. However will investigate/triage further before raising the bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356288</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-29 16:12:15 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #31)
&gt; (In reply to Jayaprakash Arthanareeswaran from comment #30)
&gt; &gt; Patch looks good to me. 
&gt; 
&gt; Thanks Jay. Committed via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=42a20f90363fe2e676c07d56364d6cc6b90a9458
&gt; 
&gt; Markus: Leaving the bug open in case if there are further comments.

Since a fix has been released, lowering from critical to normal. If more
issues are discovered, adjust accordingly as required.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356374</commentid>
    <comment_count>33</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-30 01:03:33 -0500</bug_when>
    <thetext>Ref bug 426510 comment 1 - This is found to be a general issue and not annotation specific

package pack1;
public class X {
    public void foo004(pack2.ClashMarker o2, A arg) {}
}

package pack1;
public class A {}
class ClashMarker{}

package pack2;
public class ClashMarker {}


Move foo004 to A -&gt; clash of ClashMarker with the type defined in A.java is not taken care and import inserted with a clash with the local type ClashMarker</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356390</commentid>
    <comment_count>34</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-30 02:09:55 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #33)
This was already raised (by me) in bug 420579 - sorry for the noise - blame it on my 1.8 filter :(.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357130</commentid>
    <comment_count>35</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-31 07:25:55 -0500</bug_when>
    <thetext>ImportRewrite#newAnnotationValue(..) had the problem from comment 28 as well, e.g for member value pair &quot;state= Thread.State.BLOCKED&quot;.

The new API ITypeBinding#getTypeAnnotationsOnDimensions() was unnecessary, and I&apos;ve reverted those changes. Type annotations on dimensions can already be accessed via getComponentType().

I&apos;ve also reverted/fixed some of the Javadoc changes. The addImport methods can also produce parameterized types, array types, or annotated types, so it is wrong to just say they return either a simple name or a qualified name.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8771cbd26402d5e088df5bc8e18f1b0e8d601818</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>235789</attachid>
            <date>2013-09-25 00:44:00 -0400</date>
            <delta_ts>2013-09-25 00:44:06 -0400</delta_ts>
            <desc>Test Data</desc>
            <filename>TestData.zip</filename>
            <type>application/octet-stream</type>
            <size>3751</size>
            <attacher name="Manju Mathew">manju656</attacher>
            
              <data encoding="base64">UEsDBBQACAgIAIhyK0MAAAAAAAAAAAAAAAAaAAkAY29tLnRlc3QucmFuZG9uLy5jbGFzc3BhdGhV
VAUAAcguMFJ9j0sLwjAQhM8K/oeSu1u99dAqIhUUrKDVq8RkqdG4KXmI/nvfKILeZoZv2Zm0fzro
6IjWKUMZ60KHRUjCSEVVxpblqJ2wfq/VTIXmztXcb6+m8XZI3p6jvSKZMWcFi27hQ8a/SWHoRRpb
AQqtaoewkx40DyS21+8wmefr4awoB+Min8ffnCKPlrgGiZtQQVDPS7Sw8Jwkt3I1Lc81xhN+5Iu8
3YXkXyUTfB38q9VG0R1O48/dF1BLBwgNmiRCtgAAAC0BAABQSwMEFAAICAgAqGQmQwAAAAAAAAAA
AAAAABgACQBjb20udGVzdC5yYW5kb24vLnByb2plY3RVVAUAASV/KVJ1UEEOwiAQPGviHxrugt48
0HrQ+AH1AUg3DU2BZqGNzxcotamJt52Z3ZkBfn7rrhgBnbKmJEd6IAUYaWtlmpI8H7f9iZyr3Zb3
aFuQ/gpOoup92A7shhuhoZJWUw/OUxSmtoazxEY5KBqMrzibp8hmL5cAW6HXoLr63oOMKMNLOA3G
icmJFhsKslO9A9rWnkqLYRCjSAeAS4VwIbAZYrbLmK0Jzn5TMjPXCJF+QMjbE/jfYNJjgbSX7BaD
73PXH/kBUEsHCJqTrnLBAAAAhwEAAFBLAwQUAAgICACJcitDAAAAAAAAAAAAAAAANAAJAGNvbS50
ZXN0LnJhbmRvbi8uc2V0dGluZ3Mvb3JnLmVjbGlwc2UuamR0LmNvcmUucHJlZnNVVAUAAcsuMFKV
kLtqBDEMRftAfsWwXRo3KQIJIWyVXmPfmSj4MVzbC/n7aNj9AE9jhPDRlQ5C0r3B7cQKogQ0dwOb
1uIvz0+Vm8Pjy2/sLlTCnrxrAq2I2FCclqQFH42vfx1H06PIkhBnB2T0nxqvQrHK0r01QemYHdCF
G/o1SV8rs7+4l1lylNEQP2uQ5E1CA28TqXlPKiZrJiliGZs7DH2NvIDTxz3AY7VvoR5GT7KtDga8
6QlwZ7Wc7KSZiv4eUbqualuDrJylUUY+y96XvRv9B1BLBwigCXURywAAAJcCAABQSwMEFAAICAgA
550yQwAAAAAAAAAAAAAAACAACQBjb20udGVzdC5yYW5kb24vc3JjL3BhY2sxL0EuamF2YVVUBQAB
6rU5Uo1STY/aMBA9B4n/MMqJwG7Y0EulFRW0BZUemgPb06paeZMhuE3syJ7QohX/vWPHWnZLK1Vy
/JEZv/f8ZlpR/BAVQstrdjscDAeyabUh/2OW3h1b/GrRB9rusZYFFLWwFpbAeTU2qMjC+6fhIAph
S4J42UklapCKQM7hhu9HPKbjMc8whq1uED6Lgyh1AZVGC3s0mPbBfl4YpM4of5ie4R3iTuuRW0mT
qK9gS0aqCpRoMHFCosCaedpIzuU4bEOmnUNsWUHsf/Y8IP2Bv1OvdZEf0BhZ4iV3Ap5mOoW7/GMO
y470dYUKjSAsoUHa65J96B5fwHsBATrAHbQsPd53NiKVOl0Et2Eta/yiaa07Va5+FdiS1AqEqa5g
+UBo6e3NGyBOThxDRHujf1q4gFnl6/NtlhzonaV/Sri8/E8NPed/k7pUcwy7aHu0hE2qO0pbrgXV
ahS7B8WJtz86QSGo2MNfBG3ylTHaAAb7vZtuOrnm7LvyQwZP7n3rDchsDiPxYND1RZnA9Tt4Pk0m
t8DVu8++wSfNZQaWGouYC8zLZBIzwrMzgc0hzhzi7BVkryTU+Bzr4Wev4b3c0AY8+PVodqJgqzce
x7dX5jtbODs45zdQSwcIee2z7M8BAACeAwAAUEsDBBQACAgIANVWMUMAAAAAAAAAAAAAAAAoAAkA
Y29tLnRlc3QucmFuZG9uL3NyYy9wYWNrMS9BX3Rlc3Q4MDMuamF2YVVUBQABm+c3UitITM5OTE9V
KADShta8XAWlSTmZyQrJOYnFxQqO8SWpxSUWBsYKmbkFOam5qXklxQpO1bxcnGX5mSkKuRrBJUWZ
eenRsQp5ibmpxZoKIKlaIAYiB/+y1KKizJRUIBtqaGZeiUJafr4GRB1nUWpJaVGegoE1RBMvVy0A
UEsHCBX/rBF6AAAAjQAAAFBLAwQUAAgICACbmSpDAAAAAAAAAAAAAAAAIAAJAGNvbS50ZXN0LnJh
bmRvbi9zcmMvcGFjazEvQi5qYXZhVVQFAAHeIS9SK0hMzk5MT1UoANKG1lyZeSWpRWmJyakKTtVc
nECeQlp+voamNVctFwBQSwcICH55MikAAAAqAAAAUEsDBBQACAgIAIKlOEMAAAAAAAAAAAAAAAAm
AAkAY29tLnRlc3QucmFuZG9uL3NyYy9wYWNrMS9TbmlwcGV0LmphdmFVVAUAATysQVKtj8FOwzAM
hs+ZtHewekqlEmlciyYQVyQO4wW8LExmWRI5aRFCfXeSthtI0BuXP4m//PbvgPqERwMhn5t2vaJz
8JzgDXtUXSKrHpjx44liWoTxL/LorTU6kXcL+ByQMXnOdL0K3d6SBm0xRtg5CsEk+CxE9J4O8Oq9
rEtBiB+NVcxNpTPvcA15t0tM7riVUzKFsVRlpasGqn0RrOq6gWL6znB1zTPE/XNvmOlgxtecjlwC
PXqMnAzgNw1crrcXs2CTOnYZqvn7i5cZtyMdig71uPY/bTNNXch0s/0VpG6FyJ6hRMjyBVBLBwiy
JhuF5gAAAAMCAABQSwMEFAAICAgA51UxQwAAAAAAAAAAAAAAACgACQBjb20udGVzdC5yYW5kb24v
c3JjL3BhY2syL0ZpZWxkRGVjbC5qYXZhVVQFAAHb5TdSjY8xC8IwFIT3QP5DxrpkcO3SIS0UtEip
P+CZPkM0TUJIhSL+d1MFFQfr9O5xH8edB3kGhcynu84poUQP3oXITnABbsAqDta6CFE7y4WT44A2
Yp//BkuDM9dNHhfIFmMCk/qX2zmj5bRAdxAUxsee4qmzj0q8qsuNWCXvlZp95fN233T1tpyh92pK
/HhINit0esMRJLJKo+kFSsOulNzuUEsHCB8jcaWfAAAAUAEAAFBLAwQUAAgICADwVTFDAAAAAAAA
AAAAAAAAJwAJAGNvbS50ZXN0LnJhbmRvbi9zcmMvcGFjazIvVHlwZURlY2wuamF2YVVUBQAB7eU3
Uo3PsQ7CIBAG4J2Ed2CsC4OrS4d2cNA0DQ6OJ54EpUAINWmM7+6hiRqXOnHkvvx3F0FfwKCI9C5X
nNkhhpTFGa4gHXgjwfuQIdvgZRP0OKDPeJyBrcPi1BRxRvaYCVL1r+uCs3qa0QqSwUyIs/pVV18r
SbXv2gW13qHVT7zsd1u13jzR52jO4nigtqgtfdMJNIqS16B24laG3Tl7AFBLBwjo9QW5nAAAAFAB
AABQSwMEFAAICAgA91UxQwAAAAAAAAAAAAAAACYACQBjb20udGVzdC5yYW5kb24vc3JjL3BhY2sy
L1R5cGVVc2UuamF2YVVUBQAB++U3UitITM5OTE9VKADSRta8XJm5BflFJQpZiWWJejmJeel6iXl5
+SWJJZn5eXou+cmlual5JakpBBS65qSC1IVUFqQSUBmUWgJUCGQRqy4gPyczuZKA6pDEovTUEqAi
Xi4HCFsDyUl6IZEBrvGhwa6aQGm4wRpoVugFhfqFePqCFSE8zstVUJoElFZwyARyi9ISk1MVQGaG
FqcqVPNy1QIAUEsHCHjVgcieAAAATwEAAFBLAQIUABQACAgIAIhyK0MNmiRCtgAAAC0BAAAaAAkA
AAAAAAAAAAAAAAAAAABjb20udGVzdC5yYW5kb24vLmNsYXNzcGF0aFVUBQAByC4wUlBLAQIUABQA
CAgIAKhkJkOak65ywQAAAIcBAAAYAAkAAAAAAAAAAAAAAAcBAABjb20udGVzdC5yYW5kb24vLnBy
b2plY3RVVAUAASV/KVJQSwECFAAUAAgICACJcitDoAl1EcsAAACXAgAANAAJAAAAAAAAAAAAAAAX
AgAAY29tLnRlc3QucmFuZG9uLy5zZXR0aW5ncy9vcmcuZWNsaXBzZS5qZHQuY29yZS5wcmVmc1VU
BQAByy4wUlBLAQIUABQACAgIAOedMkN57bPszwEAAJ4DAAAgAAkAAAAAAAAAAAAAAE0DAABjb20u
dGVzdC5yYW5kb24vc3JjL3BhY2sxL0EuamF2YVVUBQAB6rU5UlBLAQIUABQACAgIANVWMUMV/6wR
egAAAI0AAAAoAAkAAAAAAAAAAAAAAHMFAABjb20udGVzdC5yYW5kb24vc3JjL3BhY2sxL0FfdGVz
dDgwMy5qYXZhVVQFAAGb5zdSUEsBAhQAFAAICAgAm5kqQwh+eTIpAAAAKgAAACAACQAAAAAAAAAA
AAAATAYAAGNvbS50ZXN0LnJhbmRvbi9zcmMvcGFjazEvQi5qYXZhVVQFAAHeIS9SUEsBAhQAFAAI
CAgAgqU4Q7ImG4XmAAAAAwIAACYACQAAAAAAAAAAAAAAzAYAAGNvbS50ZXN0LnJhbmRvbi9zcmMv
cGFjazEvU25pcHBldC5qYXZhVVQFAAE8rEFSUEsBAhQAFAAICAgA51UxQx8jcaWfAAAAUAEAACgA
CQAAAAAAAAAAAAAADwgAAGNvbS50ZXN0LnJhbmRvbi9zcmMvcGFjazIvRmllbGREZWNsLmphdmFV
VAUAAdvlN1JQSwECFAAUAAgICADwVTFD6PUFuZwAAABQAQAAJwAJAAAAAAAAAAAAAAANCQAAY29t
LnRlc3QucmFuZG9uL3NyYy9wYWNrMi9UeXBlRGVjbC5qYXZhVVQFAAHt5TdSUEsBAhQAFAAICAgA
91UxQ3jVgcieAAAATwEAACYACQAAAAAAAAAAAAAABwoAAGNvbS50ZXN0LnJhbmRvbi9zcmMvcGFj
azIvVHlwZVVzZS5qYXZhVVQFAAH75TdSUEsFBgAAAAAKAAoAjwMAAAILAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236989</attachid>
            <date>2013-10-28 23:45:00 -0400</date>
            <delta_ts>2013-11-25 23:11:50 -0500</delta_ts>
            <desc>Work in Progress patch</desc>
            <filename>417937qwip.patch</filename>
            <type>text/plain</type>
            <size>28336</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZW5hbWVUZXN0czUuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9SZW5hbWVUZXN0czUuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi44
NDlkMDcwCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9k
ZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1JlbmFtZVRlc3RzNS5qYXZh
CkBAIC0wLDAgKzEsMTk3IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwor
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwt
djEwLmh0bWwKKyAqCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
K3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWw7CisKK2ltcG9ydCBqdW5p
dC5mcmFtZXdvcmsuVGVzdDsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS4qOwor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLio7CisKK3B1YmxpYyBjbGFzcyBSZW5hbWVUZXN0
czUgZXh0ZW5kcyBDb3B5TW92ZVRlc3RzIHsKKwlJQ29tcGlsYXRpb25Vbml0IGN1OworLyoqCisg
Ki8KK3B1YmxpYyBSZW5hbWVUZXN0czUoU3RyaW5nIG5hbWUpIHsKKwlzdXBlcihuYW1lKTsKK30K
Ky8qKgorICogQXR0ZW1wdHMgdG8gcmVuYW1lIHRoZSBlbGVtZW50cyB3aXRoIG9wdGlvbmFsCisg
KiBmb3JjaW5nLiBUaGUgb3BlcmF0aW9uIHNob3VsZCBmYWlsIHdpdGggdGhlIGZhaWx1cmUgY29k
ZS4KKyAqLworcHVibGljIHZvaWQgcmVuYW1lTmVnYXRpdmUoSUphdmFFbGVtZW50W10gZWxlbWVu
dHMgLFN0cmluZ1tdIHJlbmFtaW5ncywgYm9vbGVhbiBmb3JjZSwgaW50IGZhaWx1cmVDb2RlKSB7
CisJdHJ5IHsKKwkJLy9yZW5hbWUKKwkgCWdldEphdmFNb2RlbCgpLnJlbmFtZShlbGVtZW50cywg
bmV3IElKYXZhRWxlbWVudFtde2VsZW1lbnRzWzBdLmdldFBhcmVudCgpfSwgcmVuYW1pbmdzLCBm
b3JjZSwgbnVsbCk7CisJfSBjYXRjaCAoSmF2YU1vZGVsRXhjZXB0aW9uIGptZSkgeworCQlhc3Nl
cnRUcnVlKCJDb2RlIG5vdCBjb3JyZWN0IGZvciBKYXZhTW9kZWxFeGNlcHRpb246ICIgICsgam1l
LCBqbWUuZ2V0U3RhdHVzKCkuZ2V0Q29kZSgpID09IGZhaWx1cmVDb2RlKTsKKwkJcmV0dXJuOwor
CX0KKwlhc3NlcnRUcnVlKCJUaGUgcmVuYW1lIHNob3VsZCBoYXZlIGZhaWxlZCBmb3IgbXVsdGlw
bGUgcmVuYW1pbmciLCBmYWxzZSk7CisJcmV0dXJuOworfQorLyoqCisgKiBBdHRlbXB0cyB0byBy
ZW5hbWUgdGhlIGVsZW1lbnQgd2l0aCBvcHRpb25hbAorICogZm9yY2luZy4gVGhlIG9wZXJhdGlv
biBzaG91bGQgZmFpbCB3aXRoIHRoZSBmYWlsdXJlIGNvZGUuCisgKi8KK3B1YmxpYyB2b2lkIHJl
bmFtZU5lZ2F0aXZlKElKYXZhRWxlbWVudCBlbGVtZW50LCBTdHJpbmcgcmVuYW1lLCBib29sZWFu
IGZvcmNlLCBpbnQgZmFpbHVyZUNvZGUpIHsKKwl0cnkgeworCQkvL3JlbmFtZQorCQlnZXRKYXZh
TW9kZWwoKS5yZW5hbWUobmV3IElKYXZhRWxlbWVudFtdIHtlbGVtZW50fSwgbmV3IElKYXZhRWxl
bWVudFtdIHtlbGVtZW50LmdldFBhcmVudCgpfSwgbmV3IFN0cmluZ1tdIHtyZW5hbWV9LCBmb3Jj
ZSwgbnVsbCk7CisJfSBjYXRjaCAoSmF2YU1vZGVsRXhjZXB0aW9uIGptZSkgeworCQlhc3NlcnRU
cnVlKCJDb2RlIG5vdCBjb3JyZWN0IGZvciBKYXZhTW9kZWxFeGNlcHRpb246ICIgKyBqbWUsIGpt
ZS5nZXRTdGF0dXMoKS5nZXRDb2RlKCkgPT0gZmFpbHVyZUNvZGUpOworCQlyZXR1cm47CisJfQor
CWFzc2VydFRydWUoIlRoZSByZW5hbWUgc2hvdWxkIGhhdmUgZmFpbGVkIGZvcjogIiArIGVsZW1l
bnQsIGZhbHNlKTsKKwlyZXR1cm47Cit9CisvKioKKyAqIFJlbmFtZXMgdGhlIGVsZW1lbnQgdG8g
dGhlIGNvbnRhaW5lciB3aXRoIG9wdGlvbmFsCisgKiBmb3JjaW5nLiBUaGUgb3BlcmF0aW9uIHNo
b3VsZCBzdWNjZWVkLCBzbyBhbnkgZXhjZXB0aW9ucworICogZW5jb3VudGVyZWQgYXJlIHRocm93
bi4KKyAqLworcHVibGljIHZvaWQgcmVuYW1lUG9zaXRpdmUoSUphdmFFbGVtZW50W10gZWxlbWVu
dHMsIFN0cmluZ1tdIG5hbWVzLCBib29sZWFuIGZvcmNlKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uIHsKKwlyZW5hbWVQb3NpdGl2ZShlbGVtZW50cywgbmV3IElKYXZhRWxlbWVudFtde2VsZW1l
bnRzWzBdLmdldFBhcmVudCgpfSwgbmFtZXMsIGZvcmNlKTsKK30KKy8qKgorICogUmVuYW1lcyB0
aGUgZWxlbWVudCB0byB0aGUgY29udGFpbmVyIHdpdGggb3B0aW9uYWwKKyAqIGZvcmNpbmcuIFRo
ZSBvcGVyYXRpb24gc2hvdWxkIHN1Y2NlZWQsIHNvIGFueSBleGNlcHRpb25zCisgKiBlbmNvdW50
ZXJlZCBhcmUgdGhyb3duLgorICovCitwdWJsaWMgdm9pZCByZW5hbWVQb3NpdGl2ZShJSmF2YUVs
ZW1lbnRbXSBlbGVtZW50cywgSUphdmFFbGVtZW50W10gZGVzdGluYXRpb25zLCBTdHJpbmdbXSBu
YW1lcywgYm9vbGVhbiBmb3JjZSkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJcmVuYW1l
UG9zaXRpdmUoZWxlbWVudHMsIGRlc3RpbmF0aW9ucywgbmFtZXMsIGZvcmNlLCBmYWxzZSk7Cit9
CisvKioKKyAqIFJlbmFtZXMgdGhlIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lciB3aXRoIG9wdGlv
bmFsCisgKiBmb3JjaW5nLiBUaGUgb3BlcmF0aW9uIHNob3VsZCBzdWNjZWVkLCBzbyBhbnkgZXhj
ZXB0aW9ucworICogZW5jb3VudGVyZWQgYXJlIHRocm93bi4KKyAqLworcHVibGljIHZvaWQgcmVu
YW1lUG9zaXRpdmUoSUphdmFFbGVtZW50W10gZWxlbWVudHMsIElKYXZhRWxlbWVudFtdIGRlc3Rp
bmF0aW9ucywgU3RyaW5nW10gbmFtZXMsIGJvb2xlYW4gZm9yY2UsIGJvb2xlYW4gb3JpZ2luYWxT
aG91bGRFeGlzdCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJcmVuYW1lUG9zaXRpdmUo
ZWxlbWVudHMsIGRlc3RpbmF0aW9ucywgbmFtZXMsIGZvcmNlLCBvcmlnaW5hbFNob3VsZEV4aXN0
LCBudWxsKTsKK30KKy8qKgorICogUmVuYW1lcyB0aGUgZWxlbWVudCB0byB0aGUgY29udGFpbmVy
IHdpdGggb3B0aW9uYWwKKyAqIGZvcmNpbmcuIFRoZSBvcGVyYXRpb24gc2hvdWxkIHN1Y2NlZWQs
IHNvIGFueSBleGNlcHRpb25zCisgKiBlbmNvdW50ZXJlZCBhcmUgdGhyb3duLgorICovCitwdWJs
aWMgdm9pZCByZW5hbWVQb3NpdGl2ZShJSmF2YUVsZW1lbnRbXSBlbGVtZW50cywgSUphdmFFbGVt
ZW50W10gZGVzdGluYXRpb25zLCBTdHJpbmdbXSBuYW1lcywgYm9vbGVhbiBmb3JjZSwgYm9vbGVh
biBvcmlnaW5hbFNob3VsZEV4aXN0LCBJUHJvZ3Jlc3NNb25pdG9yIG1vbml0b3IpIHRocm93cyBK
YXZhTW9kZWxFeGNlcHRpb24geworCS8vIGlmIGZvcmNpbmcsIGVuc3VyZSB0aGF0IGEgbmFtZSBj
b2xsaXNpb24gZXhpc3RzCisJaW50IGk7CisJaWYgKGZvcmNlKSB7CisJCWZvciAoaSA9IDA7IGkg
PCBlbGVtZW50cy5sZW5ndGg7IGkrKykgeworCQkJSUphdmFFbGVtZW50IGUgPSBlbGVtZW50c1tp
XTsKKwkJCUlKYXZhRWxlbWVudCBjb2xsaXNpb24gPSBnZW5lcmF0ZUhhbmRsZShlLCBuYW1lc1tp
XSwgZS5nZXRQYXJlbnQoKSk7CisJCQlhc3NlcnRUcnVlKCJDb2xsaXNpb24gZG9lcyBub3QgZXhp
c3QiLCBjb2xsaXNpb24uZXhpc3RzKCkpOworCQl9CisJfQorCisJLy8gcmVuYW1lCisJZ2V0SmF2
YU1vZGVsKCkucmVuYW1lKGVsZW1lbnRzLCBkZXN0aW5hdGlvbnMsIG5hbWVzLCBmb3JjZSwgbW9u
aXRvcik7CisJZm9yIChpID0gMDsgaSA8IGVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7CisJCS8vIGdl
bmVyYXRlIHRoZSBuZXcgZWxlbWVudAloYW5kbGUKKwkJSUphdmFFbGVtZW50IGUgPSBlbGVtZW50
c1tpXTsKKwkJSUphdmFFbGVtZW50IHJlbmFtZWQgPSBnZW5lcmF0ZUhhbmRsZShlLCBuYW1lc1tp
XSwgZS5nZXRQYXJlbnQoKSk7CisJCWFzc2VydFRydWUoIlJlbmFtZWQgZWxlbWVudCBzaG91bGQg
ZXhpc3QiLCByZW5hbWVkLmV4aXN0cygpKTsKKwkJaWYgKCFvcmlnaW5hbFNob3VsZEV4aXN0KSB7
CisJCQlhc3NlcnRUcnVlKCJPcmlnaW5hbCBlbGVtZW50IHNob3VsZCBub3QgZXhpc3QiLCAhZS5l
eGlzdHMoKSk7CisJCX0KKwkJSUphdmFFbGVtZW50RGVsdGEgZGVzdERlbHRhID0gdGhpcy5kZWx0
YUxpc3RlbmVyLmdldERlbHRhRm9yKHJlbmFtZWQuZ2V0UGFyZW50KCkpOworCQlpZiAoaXNNYWlu
VHlwZShlLCBlLmdldFBhcmVudCgpKSkgeworCQkJYXNzZXJ0VHJ1ZSgiUmVuYW1lZCBjb21waWxh
dGlvbiB1bml0IGFzIHJlc3VsdCBvZiBtYWluIHR5cGUgbm90IGFkZGVkIiwgZGVzdERlbHRhICE9
IG51bGwgJiYgZGVzdERlbHRhLmdldEtpbmQoKSA9PSBJSmF2YUVsZW1lbnREZWx0YS5BRERFRCk7
CisJCQlhc3NlcnRUcnVlKCJBZGRlZCBjaGlsZHJlbiBub3QgY29ycmVjdCBmb3IgZWxlbWVudCBj
b3B5IiwgZGVzdERlbHRhLmdldEVsZW1lbnQoKS5lcXVhbHMocmVuYW1lZC5nZXRQYXJlbnQoKSkp
OworCQkJYXNzZXJ0VHJ1ZSgiZmxhZyBzaG91bGQgYmUgRl9NT1ZFRF9GUk9NIiwgKGRlc3REZWx0
YS5nZXRGbGFncygpICYgSUphdmFFbGVtZW50RGVsdGEuRl9NT1ZFRF9GUk9NKSA+IDApOworCQkJ
YXNzZXJ0VHJ1ZSgibW92ZWQgZnJvbSBoYW5kbGUgc2hvdWxkIGJlIG9yaWdpbmFsIiwgZGVzdERl
bHRhLmdldE1vdmVkRnJvbUVsZW1lbnQoKS5lcXVhbHMoZS5nZXRQYXJlbnQoKSkpOworCQl9IGVs
c2UgeworCQkJYXNzZXJ0VHJ1ZSgiRGVzdGluYXRpb24gY29udGFpbmVyIG5vdCBjaGFuZ2VkIiwg
ZGVzdERlbHRhICE9IG51bGwgJiYgZGVsdGFDaGlsZHJlbkNoYW5nZWQoZGVzdERlbHRhKSk7CisJ
CQlJSmF2YUVsZW1lbnREZWx0YVtdIGRlbHRhcyA9IGZvcmNlID8gZGVzdERlbHRhLmdldENoYW5n
ZWRDaGlsZHJlbigpIDogZGVzdERlbHRhLmdldEFkZGVkQ2hpbGRyZW4oKTsKKwkJCWFzc2VydFRy
dWUoIkFkZGVkIGNoaWxkcmVuIG5vdCBjb3JyZWN0IGZvciBlbGVtZW50IHJlbmFtZSIsIGRlbHRh
cy5sZW5ndGggPiBpICYmIGRlbHRhc1tpXS5nZXRFbGVtZW50KCkuZXF1YWxzKHJlbmFtZWQpKTsK
KwkJCWFzc2VydFRydWUoImtpbmQgc2hvdWxkIGJlIEtfQURERUQiLCBkZWx0YXNbaV0uZ2V0S2lu
ZCgpID09IChmb3JjZT8gSUphdmFFbGVtZW50RGVsdGEuQ0hBTkdFRCA6IElKYXZhRWxlbWVudERl
bHRhLkFEREVEKSk7CisJCQlkZWx0YXMgPSBkZXN0RGVsdGEuZ2V0UmVtb3ZlZENoaWxkcmVuKCk7
CisJCQlhc3NlcnRUcnVlKCJSZW1vdmVkIGNoaWxkcmVuIG5vdCBjb3JyZWN0IGZvciBlbGVtZW50
IHJlbmFtZSIsIGRlbHRhcy5sZW5ndGggPiBpICYmIGRlbHRhc1tpXS5nZXRFbGVtZW50KCkuZXF1
YWxzKGUpKTsKKwkJCWFzc2VydFRydWUoImtpbmQgc2hvdWxkIGJlIEtfUkVNT1ZFRCIsIGRlbHRh
c1tpXS5nZXRLaW5kKCkgPT0gSUphdmFFbGVtZW50RGVsdGEuUkVNT1ZFRCk7CisJCX0KKwl9Cit9
CisvKioKKyAqIFJlbmFtZXMgdGhlIGVsZW1lbnQgdG8gdGhlIGNvbnRhaW5lciB3aXRoIG9wdGlv
bmFsCisgKiBmb3JjaW5nLiBUaGUgb3BlcmF0aW9uIHNob3VsZCBzdWNjZWVkLCBzbyBhbnkgZXhj
ZXB0aW9ucworICogZW5jb3VudGVyZWQgYXJlIHRocm93bi4KKyAqLworcHVibGljIHZvaWQgcmVu
YW1lUG9zaXRpdmUoSUphdmFFbGVtZW50IGVsZW1lbnQsIFN0cmluZyByZW5hbWUsIGJvb2xlYW4g
Zm9yY2UpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCXJlbmFtZVBvc2l0aXZlKG5ldyBJ
SmF2YUVsZW1lbnRbXSB7ZWxlbWVudH0sIG5ldyBTdHJpbmdbXSB7cmVuYW1lfSwgZm9yY2UpOwor
fQorLyoqCisgKiBTZXR1cCBmb3IgdGhlIG5leHQgdGVzdC4KKyAqLworcHVibGljIHZvaWQgc2V0
VXAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwlzdXBlci5zZXRVcCgpOworCisJdGhpcy5jcmVhdGVK
YXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0xf
TElCIn0sICJiaW4iLCAiMS41Iik7CisJdGhpcy5jcmVhdGVGaWxlKAorCQkiL1Avc3JjL1guamF2
YSIsCisJCSJpbnRlcmZhY2UgSTxUPiB7XG4iICsKKwkJIiAgICBpbnQgY29tcGFyZShUIG8xLCBU
IG8yKTtcbiIgKworCQkifVxuIiArCisJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJIiAgcHVi
bGljIEkgZm9vKFN0cmluZyBzKSB7XG4iICsKKwkJIiAgICBJIGkgPSBuZXcgSTxDb21wPigpIHtc
biIgKworCQkiICAgICAgICBwdWJsaWMgaW50IGNvbXBhcmUoQ29tcCBvMSwgQ29tcCBvMikge1xu
IiArCisJCSIgICAgICAgICAgICByZXR1cm4gMDtcbiIgKworCQkiICAgICAgICB9XG4iICsKKwkJ
IiAgICAgICAgcHVibGljIGludCBiYXIoaW50IGkpIHtyZXR1cm4gaTt9XG4iICsKKwkJIiAgICB9
XG4iICsKKwkJIiAgICByZXR1cm4gaTsiICsKKwkJIiAgfVxuIiArCisJCSJ9XG4iICsKKwkJImNs
YXNzIENvbXAge30iCisJKTsKKwl0aGlzLmN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMv
WC5qYXZhIik7CisKKwlzdGFydERlbHRhcygpOworfQorcHVibGljIHZvaWQgc2V0VXBTdWl0ZSgp
IHRocm93cyBFeGNlcHRpb24geworCXN1cGVyLnNldFVwU3VpdGUoKTsKK30KKy8vIFVzZSB0aGlz
IHN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHN1YnNldCBmb3IgdGVzdHMKKy8vIEFsbCBz
cGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBw
ZWQuLi4KK3N0YXRpYyB7CisJLy8gTmFtZXMgb2YgdGVzdHMgdG8gcnVuOiBjYW4gYmUgInRlc3RC
dWdYWFhYIiBvciAiQnVnWFhYWCIpCisvLwkJVEVTVFNfUFJFRklYID0gInRlc3RDb21iaW5lQWNj
ZXNzUmVzdHJpY3Rpb25zIjsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7InRlc3RS
ZW5hbWVGaWVsZEZyYWdtZW50In07CisvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDUs
IDYgfTsKKy8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDIxLCAzOCB9OworfQorcHVibGlj
IHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCXJldHVybiBidWlsZE1vZGVsVGVzdFN1aXRlKFJlbmFt
ZVRlc3RzNS5jbGFzcyk7Cit9CisvKioKKyAqIENsZWFudXAgYWZ0ZXIgdGhlIHByZXZpb3VzIHRl
c3QuCisgKi8KK3B1YmxpYyB2b2lkIHRlYXJEb3duKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJc3Rv
cERlbHRhcygpOworCXRoaXMuZGVsZXRlUHJvamVjdCgiUCIpOworCisJc3VwZXIudGVhckRvd24o
KTsKK30KK3B1YmxpYyB2b2lkIHRlYXJEb3duU3VpdGUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwl0
aGlzLmRlbGV0ZVByb2plY3QoIkJpbmFyeVByb2plY3QiKTsKKwlzdXBlci50ZWFyRG93blN1aXRl
KCk7Cit9CisvKioKKyAqIEVuc3VyZXMgdGhhdCBhIG1ldGhvZCBjYW4gYmUgcmVuYW1lZC4KKyAq
LworcHVibGljIHZvaWQgdGVzdFJlbmFtZU1ldGhvZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24geworCUlUeXBlIHR5cGUgPSB0aGlzLmN1LmdldFR5cGUoIlgiKTsKKwlJTWV0aG9kIG1ldGhv
ZCA9IHR5cGUuZ2V0TWV0aG9kKCJmb28iLCBuZXcgU3RyaW5nW10geyJRU3RyaW5nOyJ9KTsKKwlt
ZXRob2QgPSBtZXRob2QuZ2V0VHlwZSgiIiwgMSkuZ2V0TWV0aG9kKCJjb21wYXJlIiwgbmV3IFN0
cmluZ1tdIHsiUUNvbXA7IiwgIlFDb21wOyJ9KTsKKwlyZW5hbWVQb3NpdGl2ZShtZXRob2QsICJu
ZXdDb21wYXJlIiwgZmFsc2UpOworfQorCit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvcmV3cml0ZS9k
ZXNjcmliaW5nL0FTVFJld3JpdGluZ1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJp
bmcvQVNUUmV3cml0aW5nVGVzdC5qYXZhCmluZGV4IGUzNzFiNGQuLjg3YzA5MzcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvQVNUUmV3cml0aW5nVGVzdC5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvQVNUUmV3cml0aW5nVGVzdC5qYXZhCkBAIC0xMTgs
NiArMTE4LDcgQEAKIAkJc3VpdGUuYWRkVGVzdChBU1RSZXdyaXRpbmdSZWZlcmVuY2VFeHByZXNz
aW9uVGVzdC5zdWl0ZSgpKTsJCQogCQlzdWl0ZS5hZGRUZXN0KFNvdXJjZU1vZGlmaWVyVGVzdC5z
dWl0ZSgpKTsKIAkJc3VpdGUuYWRkVGVzdChJbXBvcnRSZXdyaXRlVGVzdC5zdWl0ZSgpKTsKKwkJ
c3VpdGUuYWRkVGVzdChJbXBvcnRSZXdyaXRlMThUZXN0LnN1aXRlKCkpOwogCQlyZXR1cm4gc3Vp
dGU7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvcmV3cml0ZS9kZXNjcmliaW5nL0ltcG9ydFJl
d3JpdGUxOFRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvSW1wb3J0UmV3cml0
ZTE4VGVzdC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjRmYTcwNzIK
LS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvcmV3cml0ZS9kZXNjcmliaW5nL0ltcG9ydFJld3Jp
dGUxOFRlc3QuamF2YQpAQCAtMCwwICsxLDI1MCBAQAorLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
KyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFs
bCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRl
cmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlw
c2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmli
dXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVn
YWwvZXBsLXYxMC5odG1sCisgKgorICogQ29udHJpYnV0b3JzOgorICoJCUlCTSBDb3Jwb3JhdGlv
biAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnJld3JpdGUuZGVzY3JpYmlu
ZzsKKworCisKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworCitpbXBvcnQganVuaXQuZnJh
bWV3b3JrLlRlc3Q7CitpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3RTdWl0ZTsKKworaW1wb3J0
IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLkJpbmRpbmdLZXk7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNv
bXBpbGF0aW9uVW5pdDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YUVsZW1lbnQ7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLklQYWNrYWdlRnJhZ21lbnRSb290OworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLklUeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOwor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BU1Q7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkFTVFBhcnNlcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
Q29tcGlsYXRpb25Vbml0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JVHlwZUJp
bmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLklWYXJpYWJsZUJpbmRpbmc7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZERlY2xhcmF0aW9uOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLlZhcmlhYmxlRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LnJld3JpdGUuSW1wb3J0UmV3cml0ZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5mb3Jt
YXR0ZXIuRGVmYXVsdENvZGVGb3JtYXR0ZXJDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMubW9kZWwuQWJzdHJhY3RKYXZhTW9kZWxUZXN0czsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZmFjZS50ZXh0LkJhZExvY2F0aW9uRXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpmYWNlLnRleHQuRG9jdW1lbnQ7CitpbXBvcnQgb3JnLmVjbGlwc2UudGV4dC5lZGl0cy5N
YWxmb3JtZWRUcmVlRXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLnRleHQuZWRpdHMuVGV4
dEVkaXQ7CitpbXBvcnQgb3JnLm9zZ2kuc2VydmljZS5wcmVmcy5CYWNraW5nU3RvcmVFeGNlcHRp
b247CisKKworcHVibGljIGNsYXNzIEltcG9ydFJld3JpdGUxOFRlc3QgZXh0ZW5kcyBBYnN0cmFj
dEphdmFNb2RlbFRlc3RzIHsKKworCQorCXByaXZhdGUgc3RhdGljIGZpbmFsIENsYXNzIFRISVM9
IEltcG9ydFJld3JpdGUxOFRlc3QuY2xhc3M7CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5n
IFBST0pFQ1QgPSAiSW1wb3J0UmV3cml0ZTE4VGVzdFByb2plY3QiOworCisJcHJvdGVjdGVkIElQ
YWNrYWdlRnJhZ21lbnRSb290IHNvdXJjZUZvbGRlcjsKKworCXB1YmxpYyBJbXBvcnRSZXdyaXRl
MThUZXN0KFN0cmluZyBuYW1lKSB7CisJCXN1cGVyKG5hbWUpOworCX0KKworCXB1YmxpYyBzdGF0
aWMgVGVzdCBhbGxUZXN0cygpIHsKKwkJcmV0dXJuIG5ldyBTdWl0ZShUSElTKTsKKwl9CisKKwlw
dWJsaWMgc3RhdGljIFRlc3Qgc2V0VXBUZXN0KFRlc3Qgc29tZVRlc3QpIHsKKwkJVGVzdFN1aXRl
IHN1aXRlPSBuZXcgU3VpdGUoIm9uZSB0ZXN0Iik7CisJCXN1aXRlLmFkZFRlc3Qoc29tZVRlc3Qp
OworCQlyZXR1cm4gc3VpdGU7CisJfQorCisJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewor
CQlyZXR1cm4gYWxsVGVzdHMoKTsKKwl9CisKKwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgpIHRocm93
cyBFeGNlcHRpb24geworCQlzdXBlci5zZXRVcCgpOworCisJCUlKYXZhUHJvamVjdCBwcm9qPSBj
cmVhdGVKYXZhUHJvamVjdChQUk9KRUNULCBuZXcgU3RyaW5nW10geyJzcmMifSwgbmV3IFN0cmlu
Z1tdIHsiSkNMX0xJQiJ9LCAiYmluIiwgIjEuOCIpOworCQlwcm9qLnNldE9wdGlvbihEZWZhdWx0
Q29kZUZvcm1hdHRlckNvbnN0YW50cy5GT1JNQVRURVJfVEFCX0NIQVIsIEphdmFDb3JlLlNQQUNF
KTsKKwkJcHJvai5zZXRPcHRpb24oRGVmYXVsdENvZGVGb3JtYXR0ZXJDb25zdGFudHMuRk9STUFU
VEVSX1RBQl9TSVpFLCAiNCIpOworCQlwcm9qLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9D
T01QTElBTkNFLCBKYXZhQ29yZS5WRVJTSU9OXzFfOCk7CisJCXByb2ouc2V0T3B0aW9uKEphdmFD
b3JlLkNPTVBJTEVSX1BCX0FTU0VSVF9JREVOVElGSUVSLCBKYXZhQ29yZS5FUlJPUik7CisJCXBy
b2ouc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1NPVVJDRSwgSmF2YUNvcmUuVkVSU0lPTl8x
XzgpOworCQlwcm9qLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9DT0RFR0VOX1RBUkdFVF9Q
TEFURk9STSwgSmF2YUNvcmUuVkVSU0lPTl8xXzgpOworCQlwcm9qLnNldE9wdGlvbihEZWZhdWx0
Q29kZUZvcm1hdHRlckNvbnN0YW50cy5GT1JNQVRURVJfTlVNQkVSX09GX0VNUFRZX0xJTkVTX1RP
X1BSRVNFUlZFLCBTdHJpbmcudmFsdWVPZig5OSkpOworCisJCXByb2ouc2V0T3B0aW9uKERlZmF1
bHRDb2RlRm9ybWF0dGVyQ29uc3RhbnRzLkZPUk1BVFRFUl9CTEFOS19MSU5FU19CRVRXRUVOX0lN
UE9SVF9HUk9VUFMsIFN0cmluZy52YWx1ZU9mKDEpKTsKKworCisJCXRoaXMuc291cmNlRm9sZGVy
ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdChQUk9KRUNULCAic3JjIik7CisKKwkJd2FpdFVudGls
SW5kZXhlc1JlYWR5KCk7CisJfQorCisJcHJvdGVjdGVkIHZvaWQgdGVhckRvd24oKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKKwkJZGVsZXRlUHJvamVjdChQUk9KRUNUKTsKKwkJc3VwZXIudGVhckRvd24o
KTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3X3NpbmNlXzgoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQki
cHVibGljIGNsYXNzIFh7CQkJXG4iICsKKwkJCQkiCXB1YmxpYyB2b2lkIGZvbyggcGFjazIuQE1h
cmtlciBCMS5ATWFya2VyIEIyLkBNYXJrZXIgQjMgYXJnLCBBIGEpIHt9XG4iICsKKwkJCQkifVxu
IiArCisJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0
aW9uLkVsZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2VyIHt9
XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxIik7CisJCWNy
ZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL1guamF2YSIsIGNvbnRlbnRzKTsK
KwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXt9
XG4iOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiLCBj
b250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGlj
IGNsYXNzIEF7fVxuIjsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMjtcbiIgKworCQkJCSJw
dWJsaWMgY2xhc3MgQjEge1xuIiArCisJCQkJIglwdWJsaWMgY2xhc3MgQjIge1xuIiArCisJCQkJ
IgkJcHVibGljIGNsYXNzIEIzIHtcbiIgKworCQkJCSIJCQlcbiIgKworCQkJCSIJCX1cbiIgKwor
CQkJCSIJfVxuIiArCisJCQkJIn1cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsg
Ii9zcmMvcGFjazIiKTsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIv
QjEuamF2YSIsIGNvbnRlbnRzKTsKKwkJCisJCUFTVFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIu
bmV3UGFyc2VyKEFTVC5KTFM4KTsKKwkJcGFyc2VyLnNldFNvdXJjZShnZXRDb21waWxhdGlvblVu
aXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpKTsKKwkJcGFyc2VyLnNldFJl
c29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJcGFyc2VyLnNldFN0YXRlbWVudHNSZWNvdmVyeSh0cnVl
KTsKKwkJQ29tcGlsYXRpb25Vbml0IGFzdFJvb3QgPSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIu
Y3JlYXRlQVNUKG51bGwpOwkKKworCQlJQ29tcGlsYXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRp
b25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiKTsKKwkJcGFyc2VyLnNl
dFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNl
ci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCWFzdFJvb3QgPSAoQ29tcGlsYXRpb25V
bml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwpOwkKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGU9IChU
eXBlRGVjbGFyYXRpb24pIGFzdFJvb3QudHlwZXMoKS5nZXQoMCk7CisJCU1ldGhvZERlY2xhcmF0
aW9uIFtdIG1ldGhvZHMgPSAgdHlwZS5nZXRNZXRob2RzKCk7CisJCU1ldGhvZERlY2xhcmF0aW9u
IG1ldGhvZCA9IG1ldGhvZHNbMF07CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGU9IChW
YXJpYWJsZURlY2xhcmF0aW9uKSBtZXRob2QucGFyYW1ldGVycygpLmdldCgwKTsKKwkJSVZhcmlh
YmxlQmluZGluZyBiaW5kaW5nID0gdmFyaWFibGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJSVR5cGVC
aW5kaW5nIHR5cGVCaW5kaW5nID0gYmluZGluZy5nZXRUeXBlKCk7CisJCUltcG9ydFJld3JpdGUg
cmV3cml0ZSA9IG5ld0ltcG9ydHNSZXdyaXRlKGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRy
dWUpOworCQlTdHJpbmcgYWN0dWFsID0gcmV3cml0ZS5hZGRJbXBvcnQodHlwZUJpbmRpbmcpOwor
Ly8JCWFzc2VydEVxdWFsU3RyaW5nKGFjdHVhbCwgIkBNYXJrZXIgQjEuQE1hcmtlciBCMi5ATWFy
a2VyIEIzIik7CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJld3JpdGUuYWRkSW1wb3J0KHR5cGVCaW5k
aW5nLCBhc3RSb290LmdldEFTVCgpKTsKKy8vCQlhc3NlcnRFcXVhbFN0cmluZyhhY3R1YWxUeXBl
LnRvU3RyaW5nKCksICJATWFya2VyIEIxLkBNYXJrZXIgQjIuQE1hcmtlciBCMyIpOworCQlhcHBs
eShyZXdyaXRlKTsKKwkJU3RyaW5nIGNvbnRlbnRzWCA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJ
CQkJIlxuIiArCisJCQkJImltcG9ydCBwYWNrMi5CMS5CMi5CMztcbiIgKworCQkJCSJcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWHsJCQlcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKCBwYWNr
Mi5ATWFya2VyIEIxLkBNYXJrZXIgQjIuQE1hcmtlciBCMyBhcmcsIEEgYSkge31cbiIgKworCQkJ
CSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldCAoamF2YS5sYW5nLmFu
bm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9VU0UpXG4iICsKKwkJCQkiQGludGVyZmFjZSBNYXJr
ZXIge31cbiI7CisJCWFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oY3UuZ2V0U291cmNlKCks
IGNvbnRlbnRzWCk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdEltcG9ydFN0cnVjdHVyZVdpdGhT
aWduYXR1cmVzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVN0cmluZyBjb250ZW50c1ggPSAicGFj
a2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWHsJCQlcbiIgKworCQkJCSIJcHVi
bGljIHZvaWQgZm9vKCBwYWNrMi5ATWFya2VyIEIxLkBNYXJrZXIgQjIuQE1hcmtlciBCMyBhcmcs
IEEgYSkge31cbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5hbm5vdGF0aW9uLlRh
cmdldCAoamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9VU0UpXG4iICsKKwkJ
CQkiQGludGVyZmFjZSBNYXJrZXIge31cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNU
ICsgIi9zcmMvcGFjazEiKTsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFj
azEvWC5qYXZhIiwgY29udGVudHNYKTsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgcGFj
azE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQ
Uk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJw
YWNrYWdlIHBhY2sxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBBe31cbiI7CisJCWNvbnRlbnRz
ID0gInBhY2thZ2UgcGFjazI7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEIxIHtcbiIgKworCQkJ
CSIJcHVibGljIGNsYXNzIEIyIHtcbiIgKworCQkJCSIJCXB1YmxpYyBjbGFzcyBCMyB7XG4iICsK
KwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iOwor
CQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syIik7CisJCWNyZWF0ZUZp
bGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syL0IxLmphdmEiLCBjb250ZW50cyk7CisJCUFT
VFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFTVC5KTFM4KTsKKwkJcGFyc2Vy
LnNldFNvdXJjZShnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sx
L0EuamF2YSIpKTsKKwkJcGFyc2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJcGFyc2Vy
LnNldFN0YXRlbWVudHNSZWNvdmVyeSh0cnVlKTsKKwkJQ29tcGlsYXRpb25Vbml0IGFzdFJvb3Qg
PSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwpOwkKKworCQlJQ29tcGls
YXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9w
YWNrMS9YLmphdmEiKTsKKwkJSW1wb3J0UmV3cml0ZSByZXdyaXRlID0gbmV3SW1wb3J0c1Jld3Jp
dGUoY3UsIG5ldyBTdHJpbmdbMF0sIDk5LCA5OSwgdHJ1ZSk7CisJCXBhcnNlci5zZXRTb3VyY2Uo
Y3UpOworCQlwYXJzZXIuc2V0UmVzb2x2ZUJpbmRpbmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3Rh
dGVtZW50c1JlY292ZXJ5KHRydWUpOworCQlhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFy
c2VyLmNyZWF0ZUFTVChudWxsKTsJCisJCXsKKwkJCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzPSBj
dS5jb2RlU2VsZWN0KGNvbnRlbnRzWC5pbmRleE9mKCJCMyIpLCAiQjMiLmxlbmd0aCgpKTsKKwkJ
CWFzc2VydEVxdWFscygxLCBlbGVtZW50cy5sZW5ndGgpOworCQkJU3RyaW5nIGtleT0gKChJVHlw
ZSkgZWxlbWVudHNbMF0pLmdldEtleSgpOworCQkJU3RyaW5nIHNpZ25hdHVyZT0gbmV3IEJpbmRp
bmdLZXkoa2V5KS50b1NpZ25hdHVyZSgpOworCisJCQlUeXBlIG5ld1R5cGUgPSByZXdyaXRlLmFk
ZEltcG9ydEZyb21TaWduYXR1cmUoc2lnbmF0dXJlLCBhc3RSb290LmdldEFTVCgpKTsKKwkJCWFz
c2VydEVxdWFsU3RyaW5nKG5ld1R5cGUudG9TdHJpbmcoKSwgIkIzIik7CisKKwkJfQorCisJCWFw
cGx5KHJld3JpdGUpOworCQljb250ZW50c1ggPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJc
biIgKworCQkJCSJpbXBvcnQgcGFjazIuQjEuQjIuQjM7XG4iICsKKwkJCQkiXG4iICsKKwkJCQki
cHVibGljIGNsYXNzIFh7CQkJXG4iICsKKwkJCQkiCXB1YmxpYyB2b2lkIGZvbyggcGFjazIuQE1h
cmtlciBCMS5ATWFya2VyIEIyLkBNYXJrZXIgQjMgYXJnLCBBIGEpIHt9XG4iICsKKwkJCQkifVxu
IiArCisJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0
aW9uLkVsZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2VyIHt9
XG4iOworCQlhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGN1LmdldFNvdXJjZSgpLCBjb250
ZW50c1gpOworCX0KKworCXByaXZhdGUgdm9pZCBhc3NlcnRFcXVhbFN0cmluZyhTdHJpbmcgYWN0
dWFsLCBTdHJpbmcgZXhwZWN0ZWQpIHsKKwkJU3RyaW5nQXNzZXJ0cy5hc3NlcnRFcXVhbFN0cmlu
ZyhhY3R1YWwsIGV4cGVjdGVkKTsKKwl9CisJcHJpdmF0ZSB2b2lkIGFzc2VydEVxdWFsU3RyaW5n
SWdub3JlRGVsaW0oU3RyaW5nIGFjdHVhbCwgU3RyaW5nIGV4cGVjdGVkKSB0aHJvd3MgSU9FeGNl
cHRpb24geworCQlTdHJpbmdBc3NlcnRzLmFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oYWN0
dWFsLCBleHBlY3RlZCk7CisJfQorCisKKwlwcml2YXRlIEltcG9ydFJld3JpdGUgbmV3SW1wb3J0
c1Jld3JpdGUoSUNvbXBpbGF0aW9uVW5pdCBjdSwgU3RyaW5nW10gb3JkZXIsIGludCBub3JtYWxU
aHJlc2hvbGQsIGludCBzdGF0aWNUaHJlc2hvbGQsIGJvb2xlYW4gcmVzdG9yZUV4aXN0aW5nSW1w
b3J0cykgdGhyb3dzIENvcmVFeGNlcHRpb24sIEJhY2tpbmdTdG9yZUV4Y2VwdGlvbiB7CisJCUlt
cG9ydFJld3JpdGUgcmV3cml0ZT0gSW1wb3J0UmV3cml0ZS5jcmVhdGUoY3UsIHJlc3RvcmVFeGlz
dGluZ0ltcG9ydHMpOworCQlyZXdyaXRlLnNldEltcG9ydE9yZGVyKG9yZGVyKTsKKwkJcmV3cml0
ZS5zZXRPbkRlbWFuZEltcG9ydFRocmVzaG9sZChub3JtYWxUaHJlc2hvbGQpOworCQlyZXdyaXRl
LnNldFN0YXRpY09uRGVtYW5kSW1wb3J0VGhyZXNob2xkKHN0YXRpY1RocmVzaG9sZCk7CisJCXJl
dHVybiByZXdyaXRlOworCX0KKwlwcm90ZWN0ZWQgSW1wb3J0UmV3cml0ZSBuZXdJbXBvcnRzUmV3
cml0ZShDb21waWxhdGlvblVuaXQgY3UsIFN0cmluZ1tdIG9yZGVyLCBpbnQgbm9ybWFsVGhyZXNo
b2xkLCBpbnQgc3RhdGljVGhyZXNob2xkLCBib29sZWFuIHJlc3RvcmVFeGlzdGluZ0ltcG9ydHMp
IHsKKwkJSW1wb3J0UmV3cml0ZSByZXdyaXRlPSBJbXBvcnRSZXdyaXRlLmNyZWF0ZShjdSwgcmVz
dG9yZUV4aXN0aW5nSW1wb3J0cyk7CisJCXJld3JpdGUuc2V0SW1wb3J0T3JkZXIob3JkZXIpOwor
CQlyZXdyaXRlLnNldE9uRGVtYW5kSW1wb3J0VGhyZXNob2xkKG5vcm1hbFRocmVzaG9sZCk7CisJ
CXJld3JpdGUuc2V0U3RhdGljT25EZW1hbmRJbXBvcnRUaHJlc2hvbGQoc3RhdGljVGhyZXNob2xk
KTsKKwkJcmV0dXJuIHJld3JpdGU7CisJfQorCXByaXZhdGUgdm9pZCBhcHBseShJbXBvcnRSZXdy
aXRlIHJld3JpdGUpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBNYWxmb3JtZWRUcmVlRXhjZXB0aW9u
LCBCYWRMb2NhdGlvbkV4Y2VwdGlvbiB7CisJCVRleHRFZGl0IGVkaXQ9IHJld3JpdGUucmV3cml0
ZUltcG9ydHMobnVsbCk7CisKKwkJLy8gbm90IHRoZSBlZmZpY2llbnQgd2F5IQorCQlJQ29tcGls
YXRpb25Vbml0IGNvbXBpbGF0aW9uVW5pdD0gcmV3cml0ZS5nZXRDb21waWxhdGlvblVuaXQoKTsK
KwkJRG9jdW1lbnQgZG9jdW1lbnQ9IG5ldyBEb2N1bWVudChjb21waWxhdGlvblVuaXQuZ2V0U291
cmNlKCkpOworCQllZGl0LmFwcGx5KGRvY3VtZW50KTsKKwkJY29tcGlsYXRpb25Vbml0LmdldEJ1
ZmZlcigpLnNldENvbnRlbnRzKGRvY3VtZW50LmdldCgpKTsKKwl9CisKK30KXCBObyBuZXdsaW5l
IGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL3Jld3JpdGUvSW1wb3J0UmV3cml0ZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9yZXdyaXRlL0ltcG9y
dFJld3JpdGUuamF2YQppbmRleCBhZTAzY2RhLi4zNzgwNGNiIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL3Jld3JpdGUvSW1wb3J0
UmV3cml0ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9kb20vcmV3cml0ZS9JbXBvcnRSZXdyaXRlLmphdmEKQEAgLTY4OSw2ICs2ODksMTAg
QEAKIAkgKiB3aGVuIGFuIGltcG9ydCBjb3VsZCBiZSBhZGRlZCBvciB3YXMgYWxyZWFkeSBrbm93
bi4gSXQgaXMgZnVsbHkgcXVhbGlmaWVkLCBpZiBhbiBpbXBvcnQgY29uZmxpY3QgcHJldmVudGVk
IHRoZSBpbXBvcnQuCiAJICovCiAJcHVibGljIFR5cGUgYWRkSW1wb3J0KElUeXBlQmluZGluZyBi
aW5kaW5nLCBBU1QgYXN0LCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CisJCUlUeXBl
QmluZGluZyBiaW5kaW5nUG9pbnQgPSBjaGVja0Fubm90YXRpb25BbmRHZW5lcmljcyhiaW5kaW5n
KTsKKwkJaWYgKGJpbmRpbmdQb2ludCAhPSBudWxsKSAKKwkJCXJldHVybiBjcmVhdGVUeXBlKGJp
bmRpbmcsIGJpbmRpbmdQb2ludCwgYXN0LCBjb250ZXh0KTsKKwogCQlpZiAoYmluZGluZy5pc1By
aW1pdGl2ZSgpKSB7CiAJCQlyZXR1cm4gYXN0Lm5ld1ByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlw
ZS50b0NvZGUoYmluZGluZy5nZXROYW1lKCkpKTsKIAkJfQpAQCAtMTE1OCw0ICsxMTYyLDIxMiBA
QAogCQlyZXR1cm4gKFN0cmluZ1tdKSByZXMudG9BcnJheShuZXcgU3RyaW5nW3Jlcy5zaXplKCld
KTsKIAl9CiAKLX0KKwlwcml2YXRlIElUeXBlQmluZGluZyBjaGVja0Fubm90YXRpb25BbmRHZW5l
cmljcyhJVHlwZUJpbmRpbmcgYmluZGluZykgeworCQlJVHlwZUJpbmRpbmcgdHlwZUJpbmRpbmcg
PSBiaW5kaW5nOworCQlJVHlwZUJpbmRpbmcgYmluZGluZ1BvaW50ID0gbnVsbDsKKwkJd2hpbGUg
KHR5cGVCaW5kaW5nICE9IG51bGwpIHsKKwkJCUlBbm5vdGF0aW9uQmluZGluZyBhbm5vdGF0aW9u
QmluZGluZyBbXSA9IHR5cGVCaW5kaW5nLmdldFR5cGVBbm5vdGF0aW9ucygpOworCQkJSVR5cGVC
aW5kaW5nIFtdICB0eXBlQXJndW1lbnRzID0gdHlwZUJpbmRpbmcuZ2V0VHlwZUFyZ3VtZW50cygp
OworCQkJaWYgKChhbm5vdGF0aW9uQmluZGluZyAhPSBudWxsICYmIGFubm90YXRpb25CaW5kaW5n
Lmxlbmd0aCA+IDApIHx8CisJCQkJCSh0eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZUFyZ3Vt
ZW50cy5sZW5ndGggPiAwKSkgeworCQkJCWJpbmRpbmdQb2ludCA9IHR5cGVCaW5kaW5nOworCQkJ
fQorCQkJaWYgKHR5cGVCaW5kaW5nLmlzTWVtYmVyKCkpIHsKKwkJCQl0eXBlQmluZGluZyA9IHR5
cGVCaW5kaW5nLmdldERlY2xhcmluZ0NsYXNzKCk7CisJCQl9IGVsc2UgeworCQkJCWJyZWFrOwor
CQkJfQorCQl9CisJCXJldHVybiBiaW5kaW5nUG9pbnQ7CisJfQorCisJcHJpdmF0ZSBUeXBlIGNy
ZWF0ZVR5cGUoSVR5cGVCaW5kaW5nIGJpbmRpbmcsIElUeXBlQmluZGluZyBiaW5kaW5nUG9pbnQs
IEFTVCBhc3QsIEltcG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQpIHsKKwkJU3RyaW5nIHN0ciA9
IGFkZEltcG9ydChiaW5kaW5nUG9pbnQpOworCQlpbnQgZG90SW5kZXggPSBzdHIgIT0gbnVsbCA/
IHN0ci5sYXN0SW5kZXhPZignLicpIDogLTE7CisJCVR5cGUgcXVhbGlmaWVyID0gbnVsbDsKKwkJ
aWYgKGRvdEluZGV4ICE9IC0xKSB7CisJCQljaGFyIGJ1ZiBbXSA9IG5ldyBjaGFyIFtkb3RJbmRl
eF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGRvdEluZGV4OyArK2kpIAorCQkJCWJ1ZltpXSA9
IHN0ci5jaGFyQXQoaSk7CisJCQlzdHIgPSBuZXcgU3RyaW5nKGJ1Zik7CisJCQlxdWFsaWZpZXIg
PSBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShzdHIpKTsKKwkJfQorCQlyZXR1cm4gY3Jl
YXRlVHlwZShiaW5kaW5nLCBiaW5kaW5nUG9pbnQsIGFzdCwgcXVhbGlmaWVyKTsKKwl9CisKKwlw
cml2YXRlIFR5cGUgY3JlYXRlVHlwZShJVHlwZUJpbmRpbmcgYmluZGluZywgSVR5cGVCaW5kaW5n
IGJpbmRpbmdQb2ludCwgQVNUIGFzdCwgVHlwZSBxdWFsaWZpZXIpIHsKKwkJVHlwZSB0eXBlID0g
bnVsbDsKKwkJaWYgKGJpbmRpbmcuZXF1YWxzKGJpbmRpbmdQb2ludCkpIHsKKwkJCXR5cGUgPSBj
cmVhdGVUeXBlKHF1YWxpZmllciwgYmluZGluZywgYXN0KTsKKwkJfSBlbHNlIHsKKwkJCVR5cGUg
Y3VycmVudFR5cGUgPSBiaW5kaW5nLmlzTWVtYmVyKCkgPyBjcmVhdGVUeXBlKGJpbmRpbmcuZ2V0
RGVjbGFyaW5nQ2xhc3MoKSwgYmluZGluZ1BvaW50LCBhc3QsIHF1YWxpZmllcikgOiBudWxsOwor
CQkJdHlwZSA9IGNyZWF0ZVR5cGUoY3VycmVudFR5cGUsIGJpbmRpbmcsIGFzdCk7CisJCX0KKwkJ
SUFubm90YXRpb25CaW5kaW5nIFtdIGFubm90YXRpb25CaW5kaW5ncyA9IGJpbmRpbmcuZ2V0VHlw
ZUFubm90YXRpb25zKCk7CisJCWlmIChhbm5vdGF0aW9uQmluZGluZ3MgIT0gbnVsbCAmJiBhbm5v
dGF0aW9uQmluZGluZ3MubGVuZ3RoID4gMCkgCisJCQlhbm5vdGF0ZVR5cGUoKEFubm90YXRhYmxl
VHlwZSkgdHlwZSwgYW5ub3RhdGlvbkJpbmRpbmdzLCBhc3QpOworCQlyZXR1cm4gdHlwZTsKKwl9
CisKKwlwcml2YXRlIFR5cGUgY3JlYXRlVHlwZShUeXBlIGN1cnJlbnRUeXBlLCBJVHlwZUJpbmRp
bmcgYmluZGluZywgQVNUIGFzdCkgeworCisJCWlmIChiaW5kaW5nLmlzUHJpbWl0aXZlKCkpIHsK
KwkJCXJldHVybiBhc3QubmV3UHJpbWl0aXZlVHlwZShQcmltaXRpdmVUeXBlLnRvQ29kZShiaW5k
aW5nLmdldE5hbWUoKSkpOworCQl9CisKKwkJSVR5cGVCaW5kaW5nIG5vcm1hbGl6ZWRCaW5kaW5n
PSBub3JtYWxpemVUeXBlQmluZGluZyhiaW5kaW5nKTsKKwkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5n
ID09IG51bGwpIHsKKwkJCXJldHVybiBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3U2ltcGxlTmFt
ZSgiaW52YWxpZCIpKTsgLy8kTk9OLU5MUy0xJAorCQl9CisKKwkJaWYgKG5vcm1hbGl6ZWRCaW5k
aW5nLmlzVHlwZVZhcmlhYmxlKCkpIHsKKwkJCWlmIChjdXJyZW50VHlwZSAhPSBudWxsKSB7CisJ
CQkJcmV0dXJuIGFzdC5uZXdRdWFsaWZpZWRUeXBlKGN1cnJlbnRUeXBlLCBhc3QubmV3U2ltcGxl
TmFtZShiaW5kaW5nLmdldE5hbWUoKSkpOworCQkJfQorCQkJcmV0dXJuIGFzdC5uZXdTaW1wbGVU
eXBlKGFzdC5uZXdTaW1wbGVOYW1lKGJpbmRpbmcuZ2V0TmFtZSgpKSk7CisJCX0KKworCQlpZiAo
bm9ybWFsaXplZEJpbmRpbmcuaXNXaWxkY2FyZFR5cGUoKSkgeworCQkJV2lsZGNhcmRUeXBlIHdj
VHlwZT0gYXN0Lm5ld1dpbGRjYXJkVHlwZSgpOworCQkJSVR5cGVCaW5kaW5nIGJvdW5kPSBub3Jt
YWxpemVkQmluZGluZy5nZXRCb3VuZCgpOworCQkJaWYgKGJvdW5kICE9IG51bGwgJiYgIWJvdW5k
LmlzV2lsZGNhcmRUeXBlKCkgJiYgIWJvdW5kLmlzQ2FwdHVyZSgpKSB7CisJCQkJVHlwZSBib3Vu
ZFR5cGU9IGNyZWF0ZVR5cGUoYm91bmQsIG51bGwsIGFzdCwgKFR5cGUpIG51bGwpOworCQkJCXdj
VHlwZS5zZXRCb3VuZChib3VuZFR5cGUsIG5vcm1hbGl6ZWRCaW5kaW5nLmlzVXBwZXJib3VuZCgp
KTsKKwkJCX0KKwkJCXJldHVybiB3Y1R5cGU7CisJCX0KKworCQlpZiAobm9ybWFsaXplZEJpbmRp
bmcuaXNBcnJheSgpKSB7CisJCQlUeXBlIGVsZW1lbnRUeXBlID0gY3JlYXRlVHlwZShjdXJyZW50
VHlwZSwgbm9ybWFsaXplZEJpbmRpbmcuZ2V0RWxlbWVudFR5cGUoKSwgYXN0KTsKKwkJCXJldHVy
biBhc3QubmV3QXJyYXlUeXBlKGVsZW1lbnRUeXBlLCBub3JtYWxpemVkQmluZGluZy5nZXREaW1l
bnNpb25zKCkpOworCQl9CisKKwkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5nLmlzUGFyYW1ldGVyaXpl
ZFR5cGUoKSkgeworCQkJSVR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cz0gbm9ybWFsaXplZEJp
bmRpbmcuZ2V0VHlwZUFyZ3VtZW50cygpOworCQkJaWYgKHR5cGVBcmd1bWVudHMubGVuZ3RoID4g
MCkgeworCQkJCVR5cGUgZXJhc3VyZVR5cGU9IGN1cnJlbnRUeXBlID09IG51bGwgPyAoVHlwZSkg
YXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5ld05hbWUoZ2V0UmF3TmFtZShub3JtYWxpemVkQmluZGlu
ZykpKSA6CisJCQkJCQkJKFR5cGUpIGFzdC5uZXdRdWFsaWZpZWRUeXBlKGN1cnJlbnRUeXBlLCBh
c3QubmV3U2ltcGxlTmFtZShnZXRSYXdOYW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCQkJCVBh
cmFtZXRlcml6ZWRUeXBlIHBhcmFtVHlwZT0gYXN0Lm5ld1BhcmFtZXRlcml6ZWRUeXBlKGVyYXN1
cmVUeXBlKTsKKwkJCQlMaXN0IGFyZ3VtZW50cz0gcGFyYW1UeXBlLnR5cGVBcmd1bWVudHMoKTsK
KwkJCQlmb3IgKGludCBpPSAwOyBpIDwgdHlwZUFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeworCQkJ
CQlJVHlwZUJpbmRpbmcgY3Vycj0gdHlwZUFyZ3VtZW50c1tpXTsKKwkJCQkJaWYgKGNvbnRhaW5z
TmVzdGVkQ2FwdHVyZShjdXJyLCBmYWxzZSkpIHsgLy8gc2VlIGJ1ZyAxMDMwNDQKKwkJCQkJCWFy
Z3VtZW50cy5hZGQoYXN0Lm5ld1dpbGRjYXJkVHlwZSgpKTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJ
CWFyZ3VtZW50cy5hZGQoY3JlYXRlVHlwZShjdXJyLCBiaW5kaW5nLCBhc3QsIChUeXBlKSBudWxs
KSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIHBhcmFtVHlwZTsKKwkJCX0KKwkJfQorCQlp
ZiAoY3VycmVudFR5cGUgIT0gbnVsbCkgCisJCQlyZXR1cm4gYXN0Lm5ld1F1YWxpZmllZFR5cGUo
Y3VycmVudFR5cGUsIGFzdC5uZXdTaW1wbGVOYW1lKGdldFJhd05hbWUobm9ybWFsaXplZEJpbmRp
bmcpKSk7CisJCisJCXJldHVybiBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShnZXRSYXdO
YW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCX0KKwkKKwlwcml2YXRlIHZvaWQgYW5ub3RhdGVU
eXBlKEFubm90YXRhYmxlVHlwZSB0eXBlLCBJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlv
bkJpbmRpbmdzLCBBU1QgYXN0KSB7CisJCWZvciAoaW50IGkgPSAwOyBpPCBhbm5vdGF0aW9uQmlu
ZGluZ3MubGVuZ3RoOyBpKyspIHsKKwkJCUFubm90YXRpb24gYW5ub3RhdGlvbiA9IG5ld0Fubm90
YXRpb24oYXN0LCBhbm5vdGF0aW9uQmluZGluZ3NbaV0pOworCQkJaWYgKGFubm90YXRpb24gIT0g
bnVsbCkgdHlwZS5hbm5vdGF0aW9ucygpLmFkZChhbm5vdGF0aW9uKTsKKwkJfQorCX0KKworCXBy
aXZhdGUgQW5ub3RhdGlvbiBuZXdBbm5vdGF0aW9uKEFTVCBhc3QsIElBbm5vdGF0aW9uQmluZGlu
ZyBhbm5vdGF0aW9uKSB7CisJCVR5cGUgdHlwZT0gY3JlYXRlVHlwZSgoVHlwZSkgbnVsbCwgYW5u
b3RhdGlvbi5nZXRBbm5vdGF0aW9uVHlwZSgpLCBhc3QpOworCQlOYW1lIG5hbWU7CisJCWlmICh0
eXBlIGluc3RhbmNlb2YgU2ltcGxlVHlwZSkgeworCQkJU2ltcGxlVHlwZSBzaW1wbGVUeXBlID0g
KFNpbXBsZVR5cGUpIHR5cGU7CisJCQluYW1lID0gc2ltcGxlVHlwZS5nZXROYW1lKCk7CisJCQlz
aW1wbGVUeXBlLnNldE5hbWUoYXN0Lm5ld1NpbXBsZU5hbWUobmFtZS50b1N0cmluZygpKSk7CisJ
CX0gZWxzZSB7CisJCQluYW1lID0gYXN0Lm5ld05hbWUodHlwZS50b1N0cmluZygpKTsKKwkJfQor
CisJCUlNZW1iZXJWYWx1ZVBhaXJCaW5kaW5nW10gbXZwcz0gYW5ub3RhdGlvbi5nZXREZWNsYXJl
ZE1lbWJlclZhbHVlUGFpcnMoKTsKKwkJaWYgKG12cHMubGVuZ3RoID09IDApIHsKKwkJCU1hcmtl
ckFubm90YXRpb24gcmVzdWx0PSBhc3QubmV3TWFya2VyQW5ub3RhdGlvbigpOworCQkJcmVzdWx0
LnNldFR5cGVOYW1lKG5hbWUpOworCQkJcmV0dXJuIHJlc3VsdDsKKwkJfSBlbHNlIGlmIChtdnBz
Lmxlbmd0aCA9PSAxICYmICJ2YWx1ZSIuZXF1YWxzKG12cHNbMF0uZ2V0TmFtZSgpKSkgeyAvLyRO
T04tTkxTLTEkCisJCQlTaW5nbGVNZW1iZXJBbm5vdGF0aW9uIHJlc3VsdD0gYXN0Lm5ld1Npbmds
ZU1lbWJlckFubm90YXRpb24oKTsKKwkJCXJlc3VsdC5zZXRUeXBlTmFtZShuYW1lKTsKKwkJCU9i
amVjdCB2YWx1ZT0gbXZwc1swXS5nZXRWYWx1ZSgpOworCQkJaWYgKHZhbHVlICE9IG51bGwpCisJ
CQkJcmVzdWx0LnNldFZhbHVlKG5ld0Fubm90YXRpb25WYWx1ZShhc3QsICB2YWx1ZSkpOworCQkJ
cmV0dXJuIHJlc3VsdDsKKwkJfSBlbHNlIHsKKwkJCU5vcm1hbEFubm90YXRpb24gcmVzdWx0PSBh
c3QubmV3Tm9ybWFsQW5ub3RhdGlvbigpOworCQkJcmVzdWx0LnNldFR5cGVOYW1lKG5hbWUpOwor
CQkJZm9yIChpbnQgaT0gMDsgaSA8IG12cHMubGVuZ3RoOyBpKyspIHsKKwkJCQlJTWVtYmVyVmFs
dWVQYWlyQmluZGluZyBtdnAgPSBtdnBzW2ldOworCQkJCU1lbWJlclZhbHVlUGFpciBtdnBOb2Rl
PSBhc3QubmV3TWVtYmVyVmFsdWVQYWlyKCk7CisJCQkJbXZwTm9kZS5zZXROYW1lKGFzdC5uZXdT
aW1wbGVOYW1lKG12cC5nZXROYW1lKCkpKTsKKwkJCQlPYmplY3QgdmFsdWU9IG12cC5nZXRWYWx1
ZSgpOworCQkJCWlmICh2YWx1ZSAhPSBudWxsKQorCQkJCQltdnBOb2RlLnNldFZhbHVlKG5ld0Fu
bm90YXRpb25WYWx1ZShhc3QsIHZhbHVlKSk7CisJCQkJcmVzdWx0LnZhbHVlcygpLmFkZChtdnBO
b2RlKTsKKwkJCX0KKwkJCXJldHVybiByZXN1bHQ7CisJCX0KKwl9CisKKwlwcml2YXRlIEV4cHJl
c3Npb24gbmV3QW5ub3RhdGlvblZhbHVlKEFTVCBhc3QsIE9iamVjdCB2YWx1ZSkgeworCQlpZiAo
dmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuKSB7CisJCQlyZXR1cm4gYXN0Lm5ld0Jvb2xlYW5MaXRl
cmFsKCgoQm9vbGVhbikgdmFsdWUpLmJvb2xlYW5WYWx1ZSgpKTsKKwkJCQorCQl9IGVsc2UgaWYg
KHZhbHVlIGluc3RhbmNlb2YgQnl0ZSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFNob3J0IHx8IHZhbHVl
IGluc3RhbmNlb2YgSW50ZWdlciB8fCB2YWx1ZSBpbnN0YW5jZW9mIExvbmcKKwkJCQl8fCB2YWx1
ZSBpbnN0YW5jZW9mIEZsb2F0IHx8IHZhbHVlIGluc3RhbmNlb2YgRG91YmxlKSB7CisJCQlyZXR1
cm4gYXN0Lm5ld051bWJlckxpdGVyYWwodmFsdWUudG9TdHJpbmcoKSk7CisJCQkKKwkJfSBlbHNl
IGlmICh2YWx1ZSBpbnN0YW5jZW9mIENoYXJhY3RlcikgeworCQkJQ2hhcmFjdGVyTGl0ZXJhbCBy
ZXN1bHQ9IGFzdC5uZXdDaGFyYWN0ZXJMaXRlcmFsKCk7CisJCQlyZXN1bHQuc2V0Q2hhclZhbHVl
KCgoQ2hhcmFjdGVyKSB2YWx1ZSkuY2hhclZhbHVlKCkpOworCQkJcmV0dXJuIHJlc3VsdDsKKwkJ
CQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSVR5cGVCaW5kaW5nKSB7CisJCQlUeXBl
TGl0ZXJhbCByZXN1bHQ9IGFzdC5uZXdUeXBlTGl0ZXJhbCgpOworCQkJcmVzdWx0LnNldFR5cGUo
Y3JlYXRlVHlwZSgoVHlwZSkgbnVsbCwgKElUeXBlQmluZGluZykgdmFsdWUsIGFzdCkpOworCQkJ
cmV0dXJuIHJlc3VsdDsKKwkJCQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5n
KSB7CisJCQlTdHJpbmdMaXRlcmFsIHJlc3VsdD0gYXN0Lm5ld1N0cmluZ0xpdGVyYWwoKTsKKwkJ
CXJlc3VsdC5zZXRMaXRlcmFsVmFsdWUoKFN0cmluZykgdmFsdWUpOworCQkJcmV0dXJuIHJlc3Vs
dDsKKwkJCQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSVZhcmlhYmxlQmluZGluZykg
eworCQkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZT0gKElWYXJpYWJsZUJpbmRpbmcpIHZhbHVl
OworCQkJCisJCQlGaWVsZEFjY2VzcyByZXN1bHQ9IGFzdC5uZXdGaWVsZEFjY2VzcygpOworCQkJ
cmVzdWx0LnNldE5hbWUoYXN0Lm5ld1NpbXBsZU5hbWUodmFyaWFibGUuZ2V0TmFtZSgpKSk7CisJ
CQlUeXBlIHR5cGU9IGNyZWF0ZVR5cGUoKFR5cGUpIG51bGwsIHZhcmlhYmxlLmdldFR5cGUoKSwg
YXN0KTsKKwkJCU5hbWUgbmFtZTsKKwkJCWlmICh0eXBlIGluc3RhbmNlb2YgU2ltcGxlVHlwZSkg
eworCQkJCVNpbXBsZVR5cGUgc2ltcGxlVHlwZT0gKFNpbXBsZVR5cGUpIHR5cGU7CisJCQkJbmFt
ZT0gc2ltcGxlVHlwZS5nZXROYW1lKCk7CisJCQkJc2ltcGxlVHlwZS5zZXROYW1lKGFzdC5uZXdT
aW1wbGVOYW1lKG5hbWUudG9TdHJpbmcoKSkpOworCQkJfSBlbHNlIHsKKwkJCQluYW1lPSBhc3Qu
bmV3TmFtZSh0eXBlLnRvU3RyaW5nKCkpOworCQkJfQorCQkJcmVzdWx0LnNldEV4cHJlc3Npb24o
bmFtZSk7CisJCQlyZXR1cm4gcmVzdWx0OworCQkJCisJCX0gZWxzZSBpZiAodmFsdWUgaW5zdGFu
Y2VvZiBJQW5ub3RhdGlvbkJpbmRpbmcpIHsKKwkJCXJldHVybiBuZXdBbm5vdGF0aW9uKGFzdCwg
KElBbm5vdGF0aW9uQmluZGluZykgdmFsdWUpOworCQkJCisJCX0gZWxzZSBpZiAodmFsdWUgaW5z
dGFuY2VvZiBPYmplY3RbXSkgeworCQkJT2JqZWN0W10gdmFsdWVzPSAoT2JqZWN0W10pIHZhbHVl
OworCQkJaWYgKHZhbHVlcy5sZW5ndGggPT0gMSkKKwkJCQlyZXR1cm4gbmV3QW5ub3RhdGlvblZh
bHVlKGFzdCwgdmFsdWVzWzBdKTsKKwkJCQorCQkJQXJyYXlJbml0aWFsaXplciBpbml0aWFsaXpl
cj0gYXN0Lm5ld0FycmF5SW5pdGlhbGl6ZXIoKTsKKwkJCUxpc3QgZXhwcmVzc2lvbnM9IGluaXRp
YWxpemVyLmV4cHJlc3Npb25zKCk7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGV4cHJlc3Npb25z
LnNpemUoKTsgaSsrKQorCQkJCWV4cHJlc3Npb25zLmFkZChuZXdBbm5vdGF0aW9uVmFsdWUoYXN0
LCBleHByZXNzaW9ucy5nZXQoaSkpKTsKKwkJCXJldHVybiBpbml0aWFsaXplcjsKKwkJCQorCQl9
IGVsc2UgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwl9Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQg
b2YgZmlsZQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>237709</attachid>
            <date>2013-11-25 23:11:00 -0500</date>
            <delta_ts>2014-01-20 02:04:44 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-417937-18-ImportRewriteaddImportITypeBin.patch</filename>
            <type>text/plain</type>
            <size>29269</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvQVNUUmV3cml0aW5nVGVzdC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9BU1RSZXdyaXRpbmdUZXN0LmphdmEKaW5k
ZXggNmY2YjcyYy4uYTI3MmMyNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmlu
Zy9BU1RSZXdyaXRpbmdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9B
U1RSZXdyaXRpbmdUZXN0LmphdmEKQEAgLTExOCw2ICsxMTgsNyBAQAogCQlzdWl0ZS5hZGRUZXN0
KEFTVFJld3JpdGluZ1JlZmVyZW5jZUV4cHJlc3Npb25UZXN0LnN1aXRlKCkpOwkJCiAJCXN1aXRl
LmFkZFRlc3QoU291cmNlTW9kaWZpZXJUZXN0LnN1aXRlKCkpOwogCQlzdWl0ZS5hZGRUZXN0KElt
cG9ydFJld3JpdGVUZXN0LnN1aXRlKCkpOworCQlzdWl0ZS5hZGRUZXN0KEltcG9ydFJld3JpdGUx
OFRlc3Quc3VpdGUoKSk7CiAJCXJldHVybiBzdWl0ZTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9yZXdyaXRlL2Rlc2NyaWJpbmcvSW1wb3J0UmV3cml0ZTE4VGVzdC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jl
d3JpdGUvZGVzY3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0LmphdmEKbmV3IGZpbGUgbW9kZSAx
MDA2NDQKaW5kZXggMDAwMDAwMC4uMTIzYTZlZgotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9y
ZXdyaXRlL2Rlc2NyaWJpbmcvSW1wb3J0UmV3cml0ZTE4VGVzdC5qYXZhCkBAIC0wLDAgKzEsNDM2
IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICoJCUlCTSBDb3Jwb3JhdGlvbiAtIGlu
aXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitw
YWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnJld3JpdGUuZGVzY3JpYmluZzsKKwor
CisKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworCitpbXBvcnQganVuaXQuZnJhbWV3b3Jr
LlRlc3Q7CitpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3RTdWl0ZTsKKworaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLklDb21waWxhdGlvblVuaXQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUph
dmFQcm9qZWN0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklQYWNrYWdlRnJhZ21lbnRS
b290OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5BU1Q7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkFTVFBhcnNlcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ29tcGlsYXRpb25V
bml0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JVHlwZUJpbmRpbmc7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLklWYXJpYWJsZUJpbmRpbmc7CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZERlY2xhcmF0aW9uOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5U
eXBlRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxl
RGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLnJld3JpdGUuSW1w
b3J0UmV3cml0ZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5mb3JtYXR0ZXIuRGVmYXVs
dENvZGVGb3JtYXR0ZXJDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwuQWJzdHJhY3RKYXZhTW9kZWxUZXN0czsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZmFj
ZS50ZXh0LkJhZExvY2F0aW9uRXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpmYWNlLnRl
eHQuRG9jdW1lbnQ7CitpbXBvcnQgb3JnLmVjbGlwc2UudGV4dC5lZGl0cy5NYWxmb3JtZWRUcmVl
RXhjZXB0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLnRleHQuZWRpdHMuVGV4dEVkaXQ7CitpbXBv
cnQgb3JnLm9zZ2kuc2VydmljZS5wcmVmcy5CYWNraW5nU3RvcmVFeGNlcHRpb247CisKKworcHVi
bGljIGNsYXNzIEltcG9ydFJld3JpdGUxOFRlc3QgZXh0ZW5kcyBBYnN0cmFjdEphdmFNb2RlbFRl
c3RzIHsKKworCQorCXByaXZhdGUgc3RhdGljIGZpbmFsIENsYXNzIFRISVM9IEltcG9ydFJld3Jp
dGUxOFRlc3QuY2xhc3M7CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFBST0pFQ1QgPSAi
SW1wb3J0UmV3cml0ZTE4VGVzdFByb2plY3QiOworCisJcHJvdGVjdGVkIElQYWNrYWdlRnJhZ21l
bnRSb290IHNvdXJjZUZvbGRlcjsKKworCXB1YmxpYyBJbXBvcnRSZXdyaXRlMThUZXN0KFN0cmlu
ZyBuYW1lKSB7CisJCXN1cGVyKG5hbWUpOworCX0KKworCXB1YmxpYyBzdGF0aWMgVGVzdCBhbGxU
ZXN0cygpIHsKKwkJcmV0dXJuIG5ldyBTdWl0ZShUSElTKTsKKwl9CisKKwlwdWJsaWMgc3RhdGlj
IFRlc3Qgc2V0VXBUZXN0KFRlc3Qgc29tZVRlc3QpIHsKKwkJVGVzdFN1aXRlIHN1aXRlPSBuZXcg
U3VpdGUoIm9uZSB0ZXN0Iik7CisJCXN1aXRlLmFkZFRlc3Qoc29tZVRlc3QpOworCQlyZXR1cm4g
c3VpdGU7CisJfQorCisJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCQlyZXR1cm4gYWxs
VGVzdHMoKTsKKwl9CisKKwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgpIHRocm93cyBFeGNlcHRpb24g
eworCQlzdXBlci5zZXRVcCgpOworCisJCUlKYXZhUHJvamVjdCBwcm9qPSBjcmVhdGVKYXZhUHJv
amVjdChQUk9KRUNULCBuZXcgU3RyaW5nW10geyJzcmMifSwgbmV3IFN0cmluZ1tdIHsiSkNMX0xJ
QiJ9LCAiYmluIiwgIjEuOCIpOworCQlwcm9qLnNldE9wdGlvbihEZWZhdWx0Q29kZUZvcm1hdHRl
ckNvbnN0YW50cy5GT1JNQVRURVJfVEFCX0NIQVIsIEphdmFDb3JlLlNQQUNFKTsKKwkJcHJvai5z
ZXRPcHRpb24oRGVmYXVsdENvZGVGb3JtYXR0ZXJDb25zdGFudHMuRk9STUFUVEVSX1RBQl9TSVpF
LCAiNCIpOworCQlwcm9qLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9DT01QTElBTkNFLCBK
YXZhQ29yZS5WRVJTSU9OXzFfOCk7CisJCXByb2ouc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVS
X1BCX0FTU0VSVF9JREVOVElGSUVSLCBKYXZhQ29yZS5FUlJPUik7CisJCXByb2ouc2V0T3B0aW9u
KEphdmFDb3JlLkNPTVBJTEVSX1NPVVJDRSwgSmF2YUNvcmUuVkVSU0lPTl8xXzgpOworCQlwcm9q
LnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9DT0RFR0VOX1RBUkdFVF9QTEFURk9STSwgSmF2
YUNvcmUuVkVSU0lPTl8xXzgpOworCQlwcm9qLnNldE9wdGlvbihEZWZhdWx0Q29kZUZvcm1hdHRl
ckNvbnN0YW50cy5GT1JNQVRURVJfTlVNQkVSX09GX0VNUFRZX0xJTkVTX1RPX1BSRVNFUlZFLCBT
dHJpbmcudmFsdWVPZig5OSkpOworCisJCXByb2ouc2V0T3B0aW9uKERlZmF1bHRDb2RlRm9ybWF0
dGVyQ29uc3RhbnRzLkZPUk1BVFRFUl9CTEFOS19MSU5FU19CRVRXRUVOX0lNUE9SVF9HUk9VUFMs
IFN0cmluZy52YWx1ZU9mKDEpKTsKKworCisJCXRoaXMuc291cmNlRm9sZGVyID0gZ2V0UGFja2Fn
ZUZyYWdtZW50Um9vdChQUk9KRUNULCAic3JjIik7CisKKwkJd2FpdFVudGlsSW5kZXhlc1JlYWR5
KCk7CisJfQorCisJcHJvdGVjdGVkIHZvaWQgdGVhckRvd24oKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJZGVsZXRlUHJvamVjdChQUk9KRUNUKTsKKwkJc3VwZXIudGVhckRvd24oKTsKKwl9CisKKwlw
dWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3YV9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJ
CVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJInB1YmxpYyBjbGFz
cyBYe1xuIiArCisJCQkJIglwdWJsaWMgdm9pZCBmb28oIHBhY2syLnBhY2szLkBNYXJrZXIgQiBh
cmcgLCBBIGEpIHt9XG4iICsKKwkJCQkifVxuIiArCisJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlv
bi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiAr
CisJCQkJIkBpbnRlcmZhY2UgTWFya2VyIHt9XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJP
SkVDVCArICIvc3JjL3BhY2sxIik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3Jj
L3BhY2sxL1guamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtc
biIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pF
Q1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2th
Z2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJY29udGVudHMgPSAi
cGFja2FnZSBwYWNrMi9wYWNrMztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQiB7fVxuIjsKKwkJ
Y3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMiIpOworCQljcmVhdGVGb2xk
ZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syL3BhY2szIik7CisJCWNyZWF0ZUZpbGUoIi8i
ICsgUFJPSkVDVCArICIvc3JjL3BhY2syL3BhY2szL0IuamF2YSIsIGNvbnRlbnRzKTsKKwkJCisJ
CUFTVFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFTVC5KTFM4KTsKKwkJcGFy
c2VyLnNldFNvdXJjZShnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3Bh
Y2sxL0EuamF2YSIpKTsKKwkJcGFyc2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJcGFy
c2VyLnNldFN0YXRlbWVudHNSZWNvdmVyeSh0cnVlKTsKKwkJQ29tcGlsYXRpb25Vbml0IGFzdFJv
b3QgPSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwpOwkKKworCQlJQ29t
cGlsYXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3Ny
Yy9wYWNrMS9YLmphdmEiKTsKKwkJcGFyc2VyLnNldFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRS
ZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNlci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1
ZSk7CisJCWFzdFJvb3QgPSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwp
OwkKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGU9IChUeXBlRGVjbGFyYXRpb24pIGFzdFJvb3QudHlw
ZXMoKS5nZXQoMCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIFtdIG1ldGhvZHMgPSAgdHlwZS5nZXRN
ZXRob2RzKCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZCA9IG1ldGhvZHNbMF07CisJCVZh
cmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGU9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBtZXRob2Qu
cGFyYW1ldGVycygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyBiaW5kaW5nID0gdmFyaWFi
bGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0gYmluZGlu
Zy5nZXRUeXBlKCk7CisJCUltcG9ydFJld3JpdGUgcmV3cml0ZSA9IG5ld0ltcG9ydHNSZXdyaXRl
KGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUpOworCQljdSA9IGdldENvbXBpbGF0aW9u
VW5pdCgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCXJld3JpdGUgPSBu
ZXdJbXBvcnRzUmV3cml0ZShjdSwgbmV3IFN0cmluZ1swXSwgOTksIDk5LCB0cnVlKTsKKwkJVHlw
ZSBhY3R1YWxUeXBlID0gcmV3cml0ZS5hZGRJbXBvcnQodHlwZUJpbmRpbmcsIGFzdFJvb3QuZ2V0
QVNUKCkpOworCQlhc3NlcnRFcXVhbHMoIkBNYXJrZXIgQiIsIGFjdHVhbFR5cGUudG9TdHJpbmco
KSk7CisJCWFzc2VydFRydWUoYWN0dWFsVHlwZS5pc1NpbXBsZVR5cGUoKSk7CQkKKwkJYXBwbHko
cmV3cml0ZSk7CisJCVN0cmluZyBjb250ZW50c0EgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJ
CSJcbiIgKworCQkJCSJpbXBvcnQgcGFjazIucGFjazMuQjtcbiIgKworCQkJCSJcbiIgKworCQkJ
CSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQlhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGN1
LmdldFNvdXJjZSgpLCBjb250ZW50c0EpOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RCdWc0MTc5
MzdiX3NpbmNlXzgoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBh
Y2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFh7XG4iICsKKwkJCQkiCXB1Ymxp
YyB2b2lkIGZvbyggcGFjazIucGFjazMuQE1hcmtlciBCIGFyZyAsIEEgYSkge31cbiIgKworCQkJ
CSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldCAoamF2YS5sYW5nLmFu
bm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9VU0UpXG4iICsKKwkJCQkiQGludGVyZmFjZSBNYXJr
ZXIge31cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEiKTsK
KwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvWC5qYXZhIiwgY29udGVu
dHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJImltcG9ydCBwYWNr
My5wYWNrNC5CO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBBe1xuIiArCisJCQkJIglwdWJsaWMg
dm9pZCBmb28oQiBhcmcpIHt9XG4iICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQ
Uk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJw
YWNrYWdlIHBhY2sxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBBe31cbiI7CisJCWNvbnRlbnRz
ID0gInBhY2thZ2UgcGFjazIvcGFjazM7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEIge31cbiI7
CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIiKTsKKwkJY3JlYXRl
Rm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9wYWNrMyIpOworCQljcmVhdGVGaWxl
KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9wYWNrMy9CLmphdmEiLCBjb250ZW50cyk7CisJ
CWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazMvcGFjazQ7XG4iICsKKwkJCQkicHVibGljIGNsYXNz
IEIge31cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMiKTsK
KwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMy9wYWNrNCIpOworCQlj
cmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMy9wYWNrNC9CLmphdmEiLCBjb250
ZW50cyk7CisJCQorCQlBU1RQYXJzZXIgcGFyc2VyID0gQVNUUGFyc2VyLm5ld1BhcnNlcihBU1Qu
SkxTOCk7CisJCXBhcnNlci5zZXRTb3VyY2UoZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pF
Q1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiKSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3Mo
dHJ1ZSk7CisJCXBhcnNlci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0
aW9uVW5pdCBhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxs
KTsJCisKKwkJSUNvbXBpbGF0aW9uVW5pdCBjdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQ
Uk9KRUNUICsgIi9zcmMvcGFjazEvWC5qYXZhIik7CisJCXBhcnNlci5zZXRTb3VyY2UoY3UpOwor
CQlwYXJzZXIuc2V0UmVzb2x2ZUJpbmRpbmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3RhdGVtZW50
c1JlY292ZXJ5KHRydWUpOworCQlhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNy
ZWF0ZUFTVChudWxsKTsJCisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlPSAoVHlwZURlY2xhcmF0aW9u
KSBhc3RSb290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRob2Rz
ID0gIHR5cGUuZ2V0TWV0aG9kcygpOworCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2QgPSBtZXRo
b2RzWzBdOworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFyaWFibGVEZWNsYXJh
dGlvbikgbWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJsZUJpbmRpbmcgYmlu
ZGluZyA9IHZhcmlhYmxlLnJlc29sdmVCaW5kaW5nKCk7CisJCUlUeXBlQmluZGluZyB0eXBlQmlu
ZGluZyA9IGJpbmRpbmcuZ2V0VHlwZSgpOworCQljdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIg
KyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCUltcG9ydFJld3JpdGUgcmV3cml0
ZSA9IG5ld0ltcG9ydHNSZXdyaXRlKGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUpOwor
CQlUeXBlIGFjdHVhbFR5cGUgPSByZXdyaXRlLmFkZEltcG9ydCh0eXBlQmluZGluZywgYXN0Um9v
dC5nZXRBU1QoKSk7CisJCWFzc2VydEVxdWFscygicGFjazIucGFjazMuQE1hcmtlciBCIiwgYWN0
dWFsVHlwZS50b1N0cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShhY3R1YWxUeXBlLmlzUGFja2FnZVF1
YWxpZmllZFR5cGUoKSk7CQkKKwkJYXBwbHkocmV3cml0ZSk7CisJCVN0cmluZyBjb250ZW50c0Eg
PSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJpbXBvcnQgcGFjazMucGFjazQuQjtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgQXtcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKEIgYXJnKSB7
fVxuIiArCisJCQkJIn1cbiI7CisJCWFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oY3UuZ2V0
U291cmNlKCksIGNvbnRlbnRzQSk7CisJfQorCisJcHJpdmF0ZSBUeXBlIHJ1blRlc3Q0MTc5Mzdj
YW5kR2V0VHlwZShpbnQgaSkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVN0cmluZyBjb250ZW50cyA9
ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYe1xuIiArCisJCQkJdGhp
cy5idWc0MTc5MzdjVGVzdElucHV0W2ldWzBdICsgIlxuIiArCisJCQkJIn1cbiIgKworCQkJCSJA
amF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50
VHlwZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlciB7fVxuIiArCisJCQkJ
IkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1l
bnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2VyMiB7fVxuIiArCisJ
CQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVs
ZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgQW5ub3QxIHtcbiIgKwor
CQkJCSIJaW50IHZhbHVlMSgpIGRlZmF1bHQgMTtcbiIgKworCQkJCSIJaW50IHZhbHVlMigpO1xu
IiArCisJCQkJIn1cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFj
azEiKTsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvWC5qYXZhIiwg
Y29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJInB1Ymxp
YyBjbGFzcyBBe31cbiI7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sx
L0EuamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2syO1xu
IiArCisJCQkJInB1YmxpYyBjbGFzcyBCMSB7XG4iICsKKwkJCQkiCXB1YmxpYyBjbGFzcyBCMiB7
XG4iICsKKwkJCQkiCQlwdWJsaWMgY2xhc3MgQjMge1xuIiArCisJCQkJIgkJCVxuIiArCisJCQkJ
IgkJfVxuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiAr
IFBST0pFQ1QgKyAiL3NyYy9wYWNrMiIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAi
L3NyYy9wYWNrMi9CMS5qYXZhIiwgY29udGVudHMpOwkJCisKKwkJQVNUUGFyc2VyIHBhcnNlciA9
IEFTVFBhcnNlci5uZXdQYXJzZXIoQVNULkpMUzgpOworCQlJQ29tcGlsYXRpb25Vbml0IGN1ID0g
Z2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiKTsK
KwkJcGFyc2VyLnNldFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1
ZSk7CisJCXBhcnNlci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0aW9u
VW5pdCBhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxsKTsJ
CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBh
c3RSb290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRob2RzID0g
IHR5cGVEZWNsYXJhdGlvbi5nZXRNZXRob2RzKCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhv
ZCA9IG1ldGhvZHNbMF07CisJCQorCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFy
aWFibGVEZWNsYXJhdGlvbikgbWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJs
ZUJpbmRpbmcgdmFyaWFibGVCaW5kaW5nID0gdmFyaWFibGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJ
SVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0gdmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJ
Y3UgPSBnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2
YSIpOworCQlJbXBvcnRSZXdyaXRlIHJld3JpdGUgPSBuZXdJbXBvcnRzUmV3cml0ZShjdSwgbmV3
IFN0cmluZ1swXSwgOTksIDk5LCB0cnVlKTsKKwkJVHlwZSBhY3R1YWxUeXBlID0gcmV3cml0ZS5h
ZGRJbXBvcnQodHlwZUJpbmRpbmcsIGFzdFJvb3QuZ2V0QVNUKCkpOworCQlhcHBseShyZXdyaXRl
KTsJCQkKKwkJU3RyaW5nIGNvbnRlbnRzQSA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJIlxu
IiArCisJCQkJImltcG9ydCAiICsgdGhpcy5idWc0MTc5MzdjVGVzdElucHV0W2ldWzFdICsgIjtc
biIgKworCQkJCSJcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQljdSA9IGdldENv
bXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCWFz
c2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oY3UuZ2V0U291cmNlKCksIGNvbnRlbnRzQSk7CQkK
KworCQlyZXR1cm4gYWN0dWFsVHlwZTsKKwl9CisJCisJU3RyaW5nW11bXSBidWc0MTc5MzdjVGVz
dElucHV0ID0geworCQkJeyJwdWJsaWMgdm9pZCBmb28wMDAoIHBhY2syLkBNYXJrZXIgQjEuQE1h
cmtlciBCMi5ATWFya2VyIEIzIGFyZywgQSBhKSB7fSIsICJwYWNrMi5CMSIsICJATWFya2VyIEIx
LkBNYXJrZXIgQjIuQE1hcmtlciBCMyJ9LAorCQkJeyJwdWJsaWMgdm9pZCBmb28wMDEoIHBhY2sy
LkBNYXJrZXIgQE1hcmtlcjIgQjEuQE1hcmtlciBCMi5CMyBhcmcsIEEgYSkge30iLCAicGFjazIu
QjEiLCAiQE1hcmtlciBATWFya2VyMiBCMS5ATWFya2VyIEIyLkIzIn0sCisJCQl7InB1YmxpYyB2
b2lkIGZvbzAwMiggcGFjazIuQjEuQE1hcmtlciBCMi5CMyBhcmcsIEBNYXJrZXIgaW50IGksIEEg
YSkiLCAicGFjazIuQjEuQjIiLCAiQE1hcmtlciBCMi5CMyJ9LAorCQkJeyJwdWJsaWMgdm9pZCBm
b28wMDMoIHBhY2syLkIxLkIyLkBNYXJrZXIgQjMgYXJnLCBBIGEpIHt9IiwgInBhY2syLkIxLkIy
LkIzIiwgIkBNYXJrZXIgQjMifSwKKwkJCXsicHVibGljIHZvaWQgZm9vMDA0KCBwYWNrMi5CMS5C
Mi5AQW5ub3QxKHZhbHVlMj0yKSBCMyBhcmcsIEEgYSkge30iLCAicGFjazIuQjEuQjIuQjMiLCAi
QEFubm90MSh2YWx1ZTI9MikgQjMifSwKKwkJCXsicHVibGljIHZvaWQgZm9vMDA1KCBwYWNrMi5C
MS5CMi5AQW5ub3QxKHZhbHVlMj0yLHZhbHVlMT0wKSBCMyBhcmcsIEEgYSkge30iLCAicGFjazIu
QjEuQjIuQjMiLCAiQEFubm90MSh2YWx1ZTI9Mix2YWx1ZTE9MCkgQjMifSwgCisJCQl7InB1Ymxp
YyB2b2lkIGZvbzAwNiggcGFjazIuQjEuQjIuQjMgYXJnLCBBIGEpIHt9IiwgInBhY2syLkIxLkIy
LkIzIiwgIkIzIn0sIAorCX07CQorCQorCXByaXZhdGUgVHlwZSBidWc0MTc5MzdjX3J1bmlfc2lu
Y2VfOChpbnQgaSkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJ1blRl
c3Q0MTc5MzdjYW5kR2V0VHlwZShpKTsKKwkJYXNzZXJ0RXF1YWxzKHRoaXMuYnVnNDE3OTM3Y1Rl
c3RJbnB1dFtpXVsyXSwgYWN0dWFsVHlwZS50b1N0cmluZygpKTsKKwkJcmV0dXJuIGFjdHVhbFR5
cGU7CisJfQorCisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2MwX3NpbmNlXzgoKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKKwkJVHlwZSB0eXBlID0gYnVnNDE3OTM3Y19ydW5pX3NpbmNlXzgoMCk7CisJ
CWFzc2VydFRydWUodHlwZS5pc1F1YWxpZmllZFR5cGUoKSk7CisJfQorCXB1YmxpYyB2b2lkIHRl
c3RCdWc0MTc5MzdjMV9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUgdHlwZSA9
IGJ1ZzQxNzkzN2NfcnVuaV9zaW5jZV84KDEpOworCQlhc3NlcnRUcnVlKHR5cGUuaXNRdWFsaWZp
ZWRUeXBlKCkpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3YzJfc2luY2VfOCgpIHRo
cm93cyBFeGNlcHRpb24geworCQlUeXBlIHR5cGUgPSBidWc0MTc5MzdjX3J1bmlfc2luY2VfOCgy
KTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlzUXVhbGlmaWVkVHlwZSgpKTsKKworCX0KKwlwdWJsaWMg
dm9pZCB0ZXN0QnVnNDE3OTM3YzNfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24geworCQlUeXBl
IHR5cGUgPSBidWc0MTc5MzdjX3J1bmlfc2luY2VfOCgzKTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlz
U2ltcGxlVHlwZSgpKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2M0X3NpbmNlXzgo
KSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJVHlwZSB0eXBlID0gYnVnNDE3OTM3Y19ydW5pX3NpbmNl
XzgoNCk7CisJCWFzc2VydFRydWUodHlwZS5pc1NpbXBsZVR5cGUoKSk7CisJfQorCXB1YmxpYyB2
b2lkIHRlc3RCdWc0MTc5MzdjNV9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUg
dHlwZSA9IGJ1ZzQxNzkzN2NfcnVuaV9zaW5jZV84KDUpOworCQlhc3NlcnRUcnVlKHR5cGUuaXNT
aW1wbGVUeXBlKCkpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3YzZfc2luY2VfOCgp
IHRocm93cyBFeGNlcHRpb24geworCQlUeXBlIHR5cGUgPSBidWc0MTc5MzdjX3J1bmlfc2luY2Vf
OCg2KTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlzU2ltcGxlVHlwZSgpKTsKKwl9CisKKwlwcml2YXRl
IFR5cGUgcnVuVGVzdDQxNzkzN2RhbmRHZXRUeXBlKGludCBpKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNs
YXNzIFh7XG4iICsKKwkJCQl0aGlzLmJ1ZzQxNzkzN2RUZXN0SW5wdXRbaV1bMF0gKyAiXG4iICsK
KwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMSIp
OworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiLCBjb250
ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNs
YXNzIEF7fVxuIjsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5q
YXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJ
InB1YmxpYyBjbGFzcyBBIGV4dGVuZHMgQjF7fVxuIjsKKwkJY29udGVudHMgPSAicGFja2FnZSBw
YWNrMjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQjEge1xuIiArCisJCQkJIglwdWJsaWMgY2xh
c3MgQjIge1xuIiArCisJCQkJIgkJcHVibGljIGNsYXNzIEIzIHtcbiIgKworCQkJCSIJCQlcbiIg
KworCQkJCSIJCX1cbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiI7CisJCWNyZWF0ZUZvbGRl
cigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIiKTsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9K
RUNUICsgIi9zcmMvcGFjazIvQjEuamF2YSIsIGNvbnRlbnRzKTsJCQorCQljb250ZW50cyA9ICJw
YWNrYWdlIHBhY2szO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBDMSA8VD4ge1xuIiArCisJCQkJ
IglwdWJsaWMgY2xhc3MgQzIgPFA+e1xuIiArCisJCQkJIgkJcHVibGljIGNsYXNzIEMzIDxRPiB7
XG4iICsKKwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9
XG4iICsgCisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMiKTsKKwkJ
Y3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMvQzEuamF2YSIsIGNvbnRlbnRz
KTsJCQorCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2s0O1xuIiArCisJCQkJInB1YmxpYyBjbGFz
cyBEMSB7XG4iICsKKwkJCQkiCXB1YmxpYyBjbGFzcyBEMiA8VD57XG4iICsKKwkJCQkiCQlwdWJs
aWMgY2xhc3MgRDMgPFM+IHtcbiIgKworCQkJCSIJCQlcbiIgKworCQkJCSIJCX1cbiIgKworCQkJ
CSIJfVxuIiArCisJCQkJIn1cbiIgKyAKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAi
L3NyYy9wYWNrNCIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrNC9E
MS5qYXZhIiwgY29udGVudHMpOwkJCisKKwkJQVNUUGFyc2VyIHBhcnNlciA9IEFTVFBhcnNlci5u
ZXdQYXJzZXIoQVNULkpMUzgpOworCQlJQ29tcGlsYXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRp
b25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiKTsKKwkJcGFyc2VyLnNl
dFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNl
ci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0aW9uVW5pdCBhc3RSb290
ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxsKTsJCisJCVR5cGVEZWNs
YXJhdGlvbiB0eXBlRGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBhc3RSb290LnR5cGVz
KCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRob2RzID0gIHR5cGVEZWNsYXJh
dGlvbi5nZXRNZXRob2RzKCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZCA9IG1ldGhvZHNb
MF07CisJCQorCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFyaWFibGVEZWNsYXJh
dGlvbikgbWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJsZUJpbmRpbmcgdmFy
aWFibGVCaW5kaW5nID0gdmFyaWFibGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJSVR5cGVCaW5kaW5n
IHR5cGVCaW5kaW5nID0gdmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJY3UgPSBnZXRDb21w
aWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpOworCQlJbXBv
cnRSZXdyaXRlIHJld3JpdGUgPSBuZXdJbXBvcnRzUmV3cml0ZShjdSwgbmV3IFN0cmluZ1swXSwg
OTksIDk5LCB0cnVlKTsKKwkJVHlwZSBhY3R1YWxUeXBlID0gcmV3cml0ZS5hZGRJbXBvcnQodHlw
ZUJpbmRpbmcsIGFzdFJvb3QuZ2V0QVNUKCkpOworCQlhcHBseShyZXdyaXRlKTsJCQkKKwkJU3Ry
aW5nIGNvbnRlbnRzQSA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJIlxuIiArCisJCQkJImlt
cG9ydCBwYWNrMi5CMTtcbiIgKworCQkJCSJpbXBvcnQgIiArIHRoaXMuYnVnNDE3OTM3ZFRlc3RJ
bnB1dFtpXVsxXSArICI7XG4iICsKKwkJCQkiXG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxu
IjsKKwkJY3UgPSBnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sx
L0EuamF2YSIpOworCQlhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGN1LmdldFNvdXJjZSgp
LCBjb250ZW50c0EpOwkJCisKKwkJcmV0dXJuIGFjdHVhbFR5cGU7CisJfQorCisJU3RyaW5nW11b
XSBidWc0MTc5MzdkVGVzdElucHV0ID0geworCQkJeyJwdWJsaWMgdm9pZCBmb28wMDAoIHBhY2sz
LkMxPHBhY2syLkIxPi5DMjxwYWNrMi5CMS5CMj4uQzM8cGFjazIuQjE+IGFyZywgQSBhKSB7fSIs
ICJwYWNrMy5DMSIsICJDMTxCMT4uQzI8QjEuQjI+LkMzPEIxPiJ9LCAKKwkJCXsicHVibGljIHZv
aWQgZm9vMDAxKCBwYWNrNC5EMS5EMjxwYWNrMi5CMT4uRDM8cGFjazIuQjE+IGFyZywgQSBhKSB7
fSIsICJwYWNrNC5EMS5EMiIsICJEMjxCMT4uRDM8QjE+In0sIAorCX07CQorCQorCXByaXZhdGUg
VHlwZSBidWc0MTc5MzdkX3J1bmlfc2luY2VfOChpbnQgaSkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJ
CVR5cGUgYWN0dWFsVHlwZSA9IHJ1blRlc3Q0MTc5MzdkYW5kR2V0VHlwZShpKTsKKwkJYXNzZXJ0
RXF1YWxzKHRoaXMuYnVnNDE3OTM3ZFRlc3RJbnB1dFtpXVsyXSwgYWN0dWFsVHlwZS50b1N0cmlu
ZygpKTsKKwkJcmV0dXJuIGFjdHVhbFR5cGU7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RCdWc0MTc5
MzdkMF9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUgdHlwZSA9IGJ1ZzQxNzkz
N2RfcnVuaV9zaW5jZV84KDApOworCQlhc3NlcnRUcnVlKHR5cGUuaXNQYXJhbWV0ZXJpemVkVHlw
ZSgpKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2QxX3NpbmNlXzgoKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKKwkJVHlwZSB0eXBlID0gYnVnNDE3OTM3ZF9ydW5pX3NpbmNlXzgoMSk7CisJ
CWFzc2VydFRydWUodHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlKCkpOworCX0KKworCXByaXZhdGUg
dm9pZCBhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKFN0cmluZyBhY3R1YWwsIFN0cmluZyBl
eHBlY3RlZCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nQXNzZXJ0cy5hc3NlcnRFcXVh
bFN0cmluZ0lnbm9yZURlbGltKGFjdHVhbCwgZXhwZWN0ZWQpOworCX0KKworCXByaXZhdGUgSW1w
b3J0UmV3cml0ZSBuZXdJbXBvcnRzUmV3cml0ZShJQ29tcGlsYXRpb25Vbml0IGN1LCBTdHJpbmdb
XSBvcmRlciwgaW50IG5vcm1hbFRocmVzaG9sZCwgaW50IHN0YXRpY1RocmVzaG9sZCwgYm9vbGVh
biByZXN0b3JlRXhpc3RpbmdJbXBvcnRzKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgQmFja2luZ1N0
b3JlRXhjZXB0aW9uIHsKKwkJSW1wb3J0UmV3cml0ZSByZXdyaXRlPSBJbXBvcnRSZXdyaXRlLmNy
ZWF0ZShjdSwgcmVzdG9yZUV4aXN0aW5nSW1wb3J0cyk7CisJCXJld3JpdGUuc2V0SW1wb3J0T3Jk
ZXIob3JkZXIpOworCQlyZXdyaXRlLnNldE9uRGVtYW5kSW1wb3J0VGhyZXNob2xkKG5vcm1hbFRo
cmVzaG9sZCk7CisJCXJld3JpdGUuc2V0U3RhdGljT25EZW1hbmRJbXBvcnRUaHJlc2hvbGQoc3Rh
dGljVGhyZXNob2xkKTsKKwkJcmV0dXJuIHJld3JpdGU7CisJfQorCisJcHJvdGVjdGVkIEltcG9y
dFJld3JpdGUgbmV3SW1wb3J0c1Jld3JpdGUoQ29tcGlsYXRpb25Vbml0IGN1LCBTdHJpbmdbXSBv
cmRlciwgaW50IG5vcm1hbFRocmVzaG9sZCwgaW50IHN0YXRpY1RocmVzaG9sZCwgYm9vbGVhbiBy
ZXN0b3JlRXhpc3RpbmdJbXBvcnRzKSB7CisJCUltcG9ydFJld3JpdGUgcmV3cml0ZT0gSW1wb3J0
UmV3cml0ZS5jcmVhdGUoY3UsIHJlc3RvcmVFeGlzdGluZ0ltcG9ydHMpOworCQlyZXdyaXRlLnNl
dEltcG9ydE9yZGVyKG9yZGVyKTsKKwkJcmV3cml0ZS5zZXRPbkRlbWFuZEltcG9ydFRocmVzaG9s
ZChub3JtYWxUaHJlc2hvbGQpOworCQlyZXdyaXRlLnNldFN0YXRpY09uRGVtYW5kSW1wb3J0VGhy
ZXNob2xkKHN0YXRpY1RocmVzaG9sZCk7CisJCXJldHVybiByZXdyaXRlOworCX0KKwkKKwlwcml2
YXRlIHZvaWQgYXBwbHkoSW1wb3J0UmV3cml0ZSByZXdyaXRlKSB0aHJvd3MgQ29yZUV4Y2VwdGlv
biwgTWFsZm9ybWVkVHJlZUV4Y2VwdGlvbiwgQmFkTG9jYXRpb25FeGNlcHRpb24geworCQlUZXh0
RWRpdCBlZGl0PSByZXdyaXRlLnJld3JpdGVJbXBvcnRzKG51bGwpOworCisJCS8vIG5vdCB0aGUg
ZWZmaWNpZW50IHdheSEKKwkJSUNvbXBpbGF0aW9uVW5pdCBjb21waWxhdGlvblVuaXQ9IHJld3Jp
dGUuZ2V0Q29tcGlsYXRpb25Vbml0KCk7CisJCURvY3VtZW50IGRvY3VtZW50PSBuZXcgRG9jdW1l
bnQoY29tcGlsYXRpb25Vbml0LmdldFNvdXJjZSgpKTsKKwkJZWRpdC5hcHBseShkb2N1bWVudCk7
CisJCWNvbXBpbGF0aW9uVW5pdC5nZXRCdWZmZXIoKS5zZXRDb250ZW50cyhkb2N1bWVudC5nZXQo
KSk7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vcmV3cml0ZS9JbXBv
cnRSZXdyaXRlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0
L2NvcmUvZG9tL3Jld3JpdGUvSW1wb3J0UmV3cml0ZS5qYXZhCmluZGV4IGFlMDNjZGEuLmU2Y2Yw
NmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vcmV3cml0ZS9JbXBvcnRSZXdyaXRlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9yZXdyaXRlL0ltcG9ydFJld3JpdGUu
amF2YQpAQCAtNSw2ICs1LDEwIEBACiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1
dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdh
bC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVh
cmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21t
dW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5k
IGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxl
IHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29udHJpYnV0b3Jz
OgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlv
bgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKiovCkBAIC0xMiw2ICsxNiw3IEBACiBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5yZXdyaXRlOwogCiBpbXBvcnQgamF2YS51dGlsLkFycmF5
TGlzdDsKK2ltcG9ydCBqYXZhLnV0aWwuQXJyYXlzOwogaW1wb3J0IGphdmEudXRpbC5IYXNoTWFw
OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogaW1wb3J0IGphdmEudXRpbC5NYXA7CkBAIC02ODks
NiArNjk0LDEwIEBACiAJICogd2hlbiBhbiBpbXBvcnQgY291bGQgYmUgYWRkZWQgb3Igd2FzIGFs
cmVhZHkga25vd24uIEl0IGlzIGZ1bGx5IHF1YWxpZmllZCwgaWYgYW4gaW1wb3J0IGNvbmZsaWN0
IHByZXZlbnRlZCB0aGUgaW1wb3J0LgogCSAqLwogCXB1YmxpYyBUeXBlIGFkZEltcG9ydChJVHlw
ZUJpbmRpbmcgYmluZGluZywgQVNUIGFzdCwgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCkg
eworCQlJVHlwZUJpbmRpbmcgYmluZGluZ1BvaW50ID0gY2hlY2tBbm5vdGF0aW9uQW5kR2VuZXJp
Y3MoYmluZGluZyk7CisJCWlmIChiaW5kaW5nUG9pbnQgIT0gbnVsbCkgCisJCQlyZXR1cm4gY3Jl
YXRlVHlwZShiaW5kaW5nLCBiaW5kaW5nUG9pbnQsIGFzdCwgY29udGV4dCk7CisKIAkJaWYgKGJp
bmRpbmcuaXNQcmltaXRpdmUoKSkgewogCQkJcmV0dXJuIGFzdC5uZXdQcmltaXRpdmVUeXBlKFBy
aW1pdGl2ZVR5cGUudG9Db2RlKGJpbmRpbmcuZ2V0TmFtZSgpKSk7CiAJCX0KQEAgLTExNTgsNCAr
MTE2NywyMjAgQEAKIAkJcmV0dXJuIChTdHJpbmdbXSkgcmVzLnRvQXJyYXkobmV3IFN0cmluZ1ty
ZXMuc2l6ZSgpXSk7CiAJfQogCi19CisJcHJpdmF0ZSBJVHlwZUJpbmRpbmcgY2hlY2tBbm5vdGF0
aW9uQW5kR2VuZXJpY3MoSVR5cGVCaW5kaW5nIGJpbmRpbmcpIHsKKwkJSVR5cGVCaW5kaW5nIHR5
cGVCaW5kaW5nID0gYmluZGluZzsKKwkJSVR5cGVCaW5kaW5nIGJpbmRpbmdQb2ludCA9IG51bGw7
CisJCXdoaWxlICh0eXBlQmluZGluZyAhPSBudWxsKSB7CisJCQlJQW5ub3RhdGlvbkJpbmRpbmcg
YW5ub3RhdGlvbkJpbmRpbmcgW10gPSB0eXBlQmluZGluZy5nZXRUeXBlQW5ub3RhdGlvbnMoKTsK
KwkJCUlUeXBlQmluZGluZyBbXSAgdHlwZUFyZ3VtZW50cyA9IHR5cGVCaW5kaW5nLmdldFR5cGVB
cmd1bWVudHMoKTsKKwkJCWlmICgoYW5ub3RhdGlvbkJpbmRpbmcgIT0gbnVsbCAmJiBhbm5vdGF0
aW9uQmluZGluZy5sZW5ndGggPiAwKSB8fAorCQkJCQkodHlwZUFyZ3VtZW50cyAhPSBudWxsICYm
IHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCkpIHsKKwkJCQliaW5kaW5nUG9pbnQgPSB0eXBlQmlu
ZGluZzsKKwkJCX0KKwkJCWlmICh0eXBlQmluZGluZy5pc01lbWJlcigpKSB7CisJCQkJdHlwZUJp
bmRpbmcgPSB0eXBlQmluZGluZy5nZXREZWNsYXJpbmdDbGFzcygpOworCQkJfSBlbHNlIHsKKwkJ
CQlicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gYmluZGluZ1BvaW50OworCX0KKworCXByaXZh
dGUgVHlwZSBjcmVhdGVUeXBlKElUeXBlQmluZGluZyBiaW5kaW5nLCBJVHlwZUJpbmRpbmcgYmlu
ZGluZ1BvaW50LCBBU1QgYXN0LCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CisJCVN0
cmluZyBzdHIgPSBhZGRJbXBvcnQoYmluZGluZ1BvaW50KTsKKwkJaW50IGRvdEluZGV4ID0gc3Ry
ICE9IG51bGwgPyBzdHIubGFzdEluZGV4T2YoJy4nKSA6IC0xOworCQlUeXBlIHF1YWxpZmllciA9
IG51bGw7CisJCWlmIChkb3RJbmRleCAhPSAtMSkgeworCQkJY2hhciBidWYgW10gPSBuZXcgY2hh
ciBbZG90SW5kZXhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBkb3RJbmRleDsgKytpKSAKKwkJ
CQlidWZbaV0gPSBzdHIuY2hhckF0KGkpOworCQkJc3RyID0gbmV3IFN0cmluZyhidWYpOworCQkJ
cXVhbGlmaWVyID0gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5ld05hbWUoc3RyKSk7CisJCX0KKwkJ
cmV0dXJuIGNyZWF0ZVR5cGUoYmluZGluZywgYmluZGluZ1BvaW50LCBhc3QsIHF1YWxpZmllcik7
CisJfQorCisJcHJpdmF0ZSBUeXBlIGNyZWF0ZVR5cGUoSVR5cGVCaW5kaW5nIGJpbmRpbmcsIElU
eXBlQmluZGluZyBiaW5kaW5nUG9pbnQsIEFTVCBhc3QsIFR5cGUgcXVhbGlmaWVyKSB7CisJCVR5
cGUgdHlwZSA9IG51bGw7CisJCWlmIChiaW5kaW5nLmVxdWFscyhiaW5kaW5nUG9pbnQpKSB7CisJ
CQl0eXBlID0gY3JlYXRlVHlwZShxdWFsaWZpZXIsIGJpbmRpbmcsIGFzdCk7CisJCX0gZWxzZSB7
CisJCQlUeXBlIGN1cnJlbnRUeXBlID0gYmluZGluZy5pc01lbWJlcigpID8gY3JlYXRlVHlwZShi
aW5kaW5nLmdldERlY2xhcmluZ0NsYXNzKCksIGJpbmRpbmdQb2ludCwgYXN0LCBxdWFsaWZpZXIp
IDogbnVsbDsKKwkJCXR5cGUgPSBjcmVhdGVUeXBlKGN1cnJlbnRUeXBlLCBiaW5kaW5nLCBhc3Qp
OworCQl9CisJCUlBbm5vdGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9uQmluZGluZ3MgPSBiaW5k
aW5nLmdldFR5cGVBbm5vdGF0aW9ucygpOworCQlpZiAoYW5ub3RhdGlvbkJpbmRpbmdzICE9IG51
bGwgJiYgYW5ub3RhdGlvbkJpbmRpbmdzLmxlbmd0aCA+IDApIAorCQkJYW5ub3RhdGVUeXBlKChB
bm5vdGF0YWJsZVR5cGUpIHR5cGUsIGFubm90YXRpb25CaW5kaW5ncywgYXN0KTsKKwkJcmV0dXJu
IHR5cGU7CisJfQorCisJcHJpdmF0ZSBUeXBlIGNyZWF0ZVR5cGUoVHlwZSBjdXJyZW50VHlwZSwg
SVR5cGVCaW5kaW5nIGJpbmRpbmcsIEFTVCBhc3QpIHsKKworCQlpZiAoYmluZGluZy5pc1ByaW1p
dGl2ZSgpKSB7CisJCQlyZXR1cm4gYXN0Lm5ld1ByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZS50
b0NvZGUoYmluZGluZy5nZXROYW1lKCkpKTsKKwkJfQorCisJCUlUeXBlQmluZGluZyBub3JtYWxp
emVkQmluZGluZz0gbm9ybWFsaXplVHlwZUJpbmRpbmcoYmluZGluZyk7CisJCWlmIChub3JtYWxp
emVkQmluZGluZyA9PSBudWxsKSB7CisJCQlyZXR1cm4gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5l
d1NpbXBsZU5hbWUoImludmFsaWQiKSk7IC8vJE5PTi1OTFMtMSQKKwkJfQorCisJCWlmIChub3Jt
YWxpemVkQmluZGluZy5pc1R5cGVWYXJpYWJsZSgpKSB7CisJCQlpZiAoY3VycmVudFR5cGUgIT0g
bnVsbCkgeworCQkJCXJldHVybiBhc3QubmV3UXVhbGlmaWVkVHlwZShjdXJyZW50VHlwZSwgYXN0
Lm5ld1NpbXBsZU5hbWUoYmluZGluZy5nZXROYW1lKCkpKTsKKwkJCX0KKwkJCXJldHVybiBhc3Qu
bmV3U2ltcGxlVHlwZShhc3QubmV3U2ltcGxlTmFtZShiaW5kaW5nLmdldE5hbWUoKSkpOworCQl9
CisKKwkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5nLmlzV2lsZGNhcmRUeXBlKCkpIHsKKwkJCVdpbGRj
YXJkVHlwZSB3Y1R5cGU9IGFzdC5uZXdXaWxkY2FyZFR5cGUoKTsKKwkJCUlUeXBlQmluZGluZyBi
b3VuZD0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0Qm91bmQoKTsKKwkJCWlmIChib3VuZCAhPSBudWxs
ICYmICFib3VuZC5pc1dpbGRjYXJkVHlwZSgpICYmICFib3VuZC5pc0NhcHR1cmUoKSkgeworCQkJ
CVR5cGUgYm91bmRUeXBlPSBjcmVhdGVUeXBlKGJvdW5kLCBudWxsLCBhc3QsIChUeXBlKSBudWxs
KTsKKwkJCQl3Y1R5cGUuc2V0Qm91bmQoYm91bmRUeXBlLCBub3JtYWxpemVkQmluZGluZy5pc1Vw
cGVyYm91bmQoKSk7CisJCQl9CisJCQlyZXR1cm4gd2NUeXBlOworCQl9CisKKwkJaWYgKG5vcm1h
bGl6ZWRCaW5kaW5nLmlzQXJyYXkoKSkgeworCQkJVHlwZSBlbGVtZW50VHlwZSA9IGNyZWF0ZVR5
cGUoY3VycmVudFR5cGUsIG5vcm1hbGl6ZWRCaW5kaW5nLmdldEVsZW1lbnRUeXBlKCksIGFzdCk7
CisJCQlyZXR1cm4gYXN0Lm5ld0FycmF5VHlwZShlbGVtZW50VHlwZSwgbm9ybWFsaXplZEJpbmRp
bmcuZ2V0RGltZW5zaW9ucygpKTsKKwkJfQorCisJCWlmIChub3JtYWxpemVkQmluZGluZy5pc1Bh
cmFtZXRlcml6ZWRUeXBlKCkpIHsKKwkJCUlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHM9IG5v
cm1hbGl6ZWRCaW5kaW5nLmdldFR5cGVBcmd1bWVudHMoKTsKKwkJCWlmICh0eXBlQXJndW1lbnRz
Lmxlbmd0aCA+IDApIHsKKwkJCQlUeXBlIGVyYXN1cmVUeXBlPSBjdXJyZW50VHlwZSA9PSBudWxs
ID8gKFR5cGUpIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdOYW1lKGdldFJhd05hbWUobm9ybWFs
aXplZEJpbmRpbmcpKSkgOgorCQkJCQkJCShUeXBlKSBhc3QubmV3UXVhbGlmaWVkVHlwZShjdXJy
ZW50VHlwZSwgYXN0Lm5ld1NpbXBsZU5hbWUoZ2V0UmF3TmFtZShub3JtYWxpemVkQmluZGluZykp
KTsKKwkJCQlQYXJhbWV0ZXJpemVkVHlwZSBwYXJhbVR5cGU9IGFzdC5uZXdQYXJhbWV0ZXJpemVk
VHlwZShlcmFzdXJlVHlwZSk7CisJCQkJTGlzdCBhcmd1bWVudHM9IHBhcmFtVHlwZS50eXBlQXJn
dW1lbnRzKCk7CisJCQkJZm9yIChpbnQgaT0gMDsgaSA8IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBp
KyspIHsKKwkJCQkJSVR5cGVCaW5kaW5nIGN1cnI9IHR5cGVBcmd1bWVudHNbaV07CisJCQkJCWlm
IChjb250YWluc05lc3RlZENhcHR1cmUoY3VyciwgZmFsc2UpKSB7IC8vIHNlZSBidWcgMTAzMDQ0
CisJCQkJCQlhcmd1bWVudHMuYWRkKGFzdC5uZXdXaWxkY2FyZFR5cGUoKSk7CisJCQkJCX0gZWxz
ZSB7CisJCQkJCQlhcmd1bWVudHMuYWRkKGNyZWF0ZVR5cGUoY3VyciwgYmluZGluZywgYXN0LCAo
VHlwZSkgbnVsbCkpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBwYXJhbVR5cGU7CisJCQl9
CisJCX0KKwkJCisJCWlmIChjdXJyZW50VHlwZSAhPSBudWxsKSB7CisJCQlJUGFja2FnZUJpbmRp
bmcgcGFja2FnZUJpbmRpbmcgPSBiaW5kaW5nLmdldFBhY2thZ2UoKTsKKwkJCVN0cmluZyBwYWNr
YWdlTmFtZSA9IHBhY2thZ2VCaW5kaW5nICE9IG51bGwgPyBwYWNrYWdlQmluZGluZy5nZXROYW1l
KCkgOiBudWxsOworCQkJaWYgKHBhY2thZ2VOYW1lICE9IG51bGwgJiYgQXJyYXlzLmVxdWFscyhw
YWNrYWdlTmFtZS50b0NoYXJBcnJheSgpLCBjdXJyZW50VHlwZS50b1N0cmluZygpLnRvQ2hhckFy
cmF5KCkpKSB7CisJCQkJcmV0dXJuIGFzdC5uZXdQYWNrYWdlUXVhbGlmaWVkVHlwZShhc3QubmV3
TmFtZShwYWNrYWdlTmFtZSksIGFzdC5uZXdTaW1wbGVOYW1lKGdldFJhd05hbWUobm9ybWFsaXpl
ZEJpbmRpbmcpKSk7CisJCQl9CisJCQlyZXR1cm4gYXN0Lm5ld1F1YWxpZmllZFR5cGUoY3VycmVu
dFR5cGUsIGFzdC5uZXdTaW1wbGVOYW1lKGdldFJhd05hbWUobm9ybWFsaXplZEJpbmRpbmcpKSk7
CisJCX0KKwkJCisJCXJldHVybiBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShnZXRSYXdO
YW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCX0KKwkKKwlwcml2YXRlIHZvaWQgYW5ub3RhdGVU
eXBlKEFubm90YXRhYmxlVHlwZSB0eXBlLCBJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlv
bkJpbmRpbmdzLCBBU1QgYXN0KSB7CisJCWZvciAoaW50IGkgPSAwOyBpPCBhbm5vdGF0aW9uQmlu
ZGluZ3MubGVuZ3RoOyBpKyspIHsKKwkJCUFubm90YXRpb24gYW5ub3RhdGlvbiA9IG5ld0Fubm90
YXRpb24oYXN0LCBhbm5vdGF0aW9uQmluZGluZ3NbaV0pOworCQkJaWYgKGFubm90YXRpb24gIT0g
bnVsbCkgdHlwZS5hbm5vdGF0aW9ucygpLmFkZChhbm5vdGF0aW9uKTsKKwkJfQorCX0KKworCXBy
aXZhdGUgQW5ub3RhdGlvbiBuZXdBbm5vdGF0aW9uKEFTVCBhc3QsIElBbm5vdGF0aW9uQmluZGlu
ZyBhbm5vdGF0aW9uKSB7CisJCVR5cGUgdHlwZT0gY3JlYXRlVHlwZSgoVHlwZSkgbnVsbCwgYW5u
b3RhdGlvbi5nZXRBbm5vdGF0aW9uVHlwZSgpLCBhc3QpOworCQlOYW1lIG5hbWU7CisJCWlmICh0
eXBlIGluc3RhbmNlb2YgU2ltcGxlVHlwZSkgeworCQkJU2ltcGxlVHlwZSBzaW1wbGVUeXBlID0g
KFNpbXBsZVR5cGUpIHR5cGU7CisJCQluYW1lID0gc2ltcGxlVHlwZS5nZXROYW1lKCk7CisJCQlz
aW1wbGVUeXBlLnNldE5hbWUoYXN0Lm5ld1NpbXBsZU5hbWUobmFtZS50b1N0cmluZygpKSk7CisJ
CX0gZWxzZSB7CisJCQluYW1lID0gYXN0Lm5ld05hbWUodHlwZS50b1N0cmluZygpKTsKKwkJfQor
CisJCUlNZW1iZXJWYWx1ZVBhaXJCaW5kaW5nW10gbXZwcz0gYW5ub3RhdGlvbi5nZXREZWNsYXJl
ZE1lbWJlclZhbHVlUGFpcnMoKTsKKwkJaWYgKG12cHMubGVuZ3RoID09IDApIHsKKwkJCU1hcmtl
ckFubm90YXRpb24gcmVzdWx0PSBhc3QubmV3TWFya2VyQW5ub3RhdGlvbigpOworCQkJcmVzdWx0
LnNldFR5cGVOYW1lKG5hbWUpOworCQkJcmV0dXJuIHJlc3VsdDsKKwkJfSBlbHNlIGlmIChtdnBz
Lmxlbmd0aCA9PSAxICYmICJ2YWx1ZSIuZXF1YWxzKG12cHNbMF0uZ2V0TmFtZSgpKSkgeyAvLyRO
T04tTkxTLTEkCisJCQlTaW5nbGVNZW1iZXJBbm5vdGF0aW9uIHJlc3VsdD0gYXN0Lm5ld1Npbmds
ZU1lbWJlckFubm90YXRpb24oKTsKKwkJCXJlc3VsdC5zZXRUeXBlTmFtZShuYW1lKTsKKwkJCU9i
amVjdCB2YWx1ZT0gbXZwc1swXS5nZXRWYWx1ZSgpOworCQkJaWYgKHZhbHVlICE9IG51bGwpCisJ
CQkJcmVzdWx0LnNldFZhbHVlKG5ld0Fubm90YXRpb25WYWx1ZShhc3QsICB2YWx1ZSkpOworCQkJ
cmV0dXJuIHJlc3VsdDsKKwkJfSBlbHNlIHsKKwkJCU5vcm1hbEFubm90YXRpb24gcmVzdWx0PSBh
c3QubmV3Tm9ybWFsQW5ub3RhdGlvbigpOworCQkJcmVzdWx0LnNldFR5cGVOYW1lKG5hbWUpOwor
CQkJZm9yIChpbnQgaT0gMDsgaSA8IG12cHMubGVuZ3RoOyBpKyspIHsKKwkJCQlJTWVtYmVyVmFs
dWVQYWlyQmluZGluZyBtdnAgPSBtdnBzW2ldOworCQkJCU1lbWJlclZhbHVlUGFpciBtdnBOb2Rl
PSBhc3QubmV3TWVtYmVyVmFsdWVQYWlyKCk7CisJCQkJbXZwTm9kZS5zZXROYW1lKGFzdC5uZXdT
aW1wbGVOYW1lKG12cC5nZXROYW1lKCkpKTsKKwkJCQlPYmplY3QgdmFsdWU9IG12cC5nZXRWYWx1
ZSgpOworCQkJCWlmICh2YWx1ZSAhPSBudWxsKQorCQkJCQltdnBOb2RlLnNldFZhbHVlKG5ld0Fu
bm90YXRpb25WYWx1ZShhc3QsIHZhbHVlKSk7CisJCQkJcmVzdWx0LnZhbHVlcygpLmFkZChtdnBO
b2RlKTsKKwkJCX0KKwkJCXJldHVybiByZXN1bHQ7CisJCX0KKwl9CisKKwlwcml2YXRlIEV4cHJl
c3Npb24gbmV3QW5ub3RhdGlvblZhbHVlKEFTVCBhc3QsIE9iamVjdCB2YWx1ZSkgeworCQlpZiAo
dmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuKSB7CisJCQlyZXR1cm4gYXN0Lm5ld0Jvb2xlYW5MaXRl
cmFsKCgoQm9vbGVhbikgdmFsdWUpLmJvb2xlYW5WYWx1ZSgpKTsKKwkJCQorCQl9IGVsc2UgaWYg
KHZhbHVlIGluc3RhbmNlb2YgQnl0ZSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFNob3J0IHx8IHZhbHVl
IGluc3RhbmNlb2YgSW50ZWdlciB8fCB2YWx1ZSBpbnN0YW5jZW9mIExvbmcKKwkJCQl8fCB2YWx1
ZSBpbnN0YW5jZW9mIEZsb2F0IHx8IHZhbHVlIGluc3RhbmNlb2YgRG91YmxlKSB7CisJCQlyZXR1
cm4gYXN0Lm5ld051bWJlckxpdGVyYWwodmFsdWUudG9TdHJpbmcoKSk7CisJCQkKKwkJfSBlbHNl
IGlmICh2YWx1ZSBpbnN0YW5jZW9mIENoYXJhY3RlcikgeworCQkJQ2hhcmFjdGVyTGl0ZXJhbCBy
ZXN1bHQ9IGFzdC5uZXdDaGFyYWN0ZXJMaXRlcmFsKCk7CisJCQlyZXN1bHQuc2V0Q2hhclZhbHVl
KCgoQ2hhcmFjdGVyKSB2YWx1ZSkuY2hhclZhbHVlKCkpOworCQkJcmV0dXJuIHJlc3VsdDsKKwkJ
CQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSVR5cGVCaW5kaW5nKSB7CisJCQlUeXBl
TGl0ZXJhbCByZXN1bHQ9IGFzdC5uZXdUeXBlTGl0ZXJhbCgpOworCQkJcmVzdWx0LnNldFR5cGUo
Y3JlYXRlVHlwZSgoVHlwZSkgbnVsbCwgKElUeXBlQmluZGluZykgdmFsdWUsIGFzdCkpOworCQkJ
cmV0dXJuIHJlc3VsdDsKKwkJCQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgU3RyaW5n
KSB7CisJCQlTdHJpbmdMaXRlcmFsIHJlc3VsdD0gYXN0Lm5ld1N0cmluZ0xpdGVyYWwoKTsKKwkJ
CXJlc3VsdC5zZXRMaXRlcmFsVmFsdWUoKFN0cmluZykgdmFsdWUpOworCQkJcmV0dXJuIHJlc3Vs
dDsKKwkJCQorCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSVZhcmlhYmxlQmluZGluZykg
eworCQkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZT0gKElWYXJpYWJsZUJpbmRpbmcpIHZhbHVl
OworCQkJCisJCQlGaWVsZEFjY2VzcyByZXN1bHQ9IGFzdC5uZXdGaWVsZEFjY2VzcygpOworCQkJ
cmVzdWx0LnNldE5hbWUoYXN0Lm5ld1NpbXBsZU5hbWUodmFyaWFibGUuZ2V0TmFtZSgpKSk7CisJ
CQlUeXBlIHR5cGU9IGNyZWF0ZVR5cGUoKFR5cGUpIG51bGwsIHZhcmlhYmxlLmdldFR5cGUoKSwg
YXN0KTsKKwkJCU5hbWUgbmFtZTsKKwkJCWlmICh0eXBlIGluc3RhbmNlb2YgU2ltcGxlVHlwZSkg
eworCQkJCVNpbXBsZVR5cGUgc2ltcGxlVHlwZT0gKFNpbXBsZVR5cGUpIHR5cGU7CisJCQkJbmFt
ZT0gc2ltcGxlVHlwZS5nZXROYW1lKCk7CisJCQkJc2ltcGxlVHlwZS5zZXROYW1lKGFzdC5uZXdT
aW1wbGVOYW1lKG5hbWUudG9TdHJpbmcoKSkpOworCQkJfSBlbHNlIHsKKwkJCQluYW1lPSBhc3Qu
bmV3TmFtZSh0eXBlLnRvU3RyaW5nKCkpOworCQkJfQorCQkJcmVzdWx0LnNldEV4cHJlc3Npb24o
bmFtZSk7CisJCQlyZXR1cm4gcmVzdWx0OworCQkJCisJCX0gZWxzZSBpZiAodmFsdWUgaW5zdGFu
Y2VvZiBJQW5ub3RhdGlvbkJpbmRpbmcpIHsKKwkJCXJldHVybiBuZXdBbm5vdGF0aW9uKGFzdCwg
KElBbm5vdGF0aW9uQmluZGluZykgdmFsdWUpOworCQkJCisJCX0gZWxzZSBpZiAodmFsdWUgaW5z
dGFuY2VvZiBPYmplY3RbXSkgeworCQkJT2JqZWN0W10gdmFsdWVzPSAoT2JqZWN0W10pIHZhbHVl
OworCQkJaWYgKHZhbHVlcy5sZW5ndGggPT0gMSkKKwkJCQlyZXR1cm4gbmV3QW5ub3RhdGlvblZh
bHVlKGFzdCwgdmFsdWVzWzBdKTsKKwkJCQorCQkJQXJyYXlJbml0aWFsaXplciBpbml0aWFsaXpl
cj0gYXN0Lm5ld0FycmF5SW5pdGlhbGl6ZXIoKTsKKwkJCUxpc3QgZXhwcmVzc2lvbnM9IGluaXRp
YWxpemVyLmV4cHJlc3Npb25zKCk7CisJCQlpbnQgc2l6ZSA9IGV4cHJlc3Npb25zLnNpemUoKTsK
KwkJCWZvciAoaW50IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKQorCQkJCWV4cHJlc3Npb25zLmFkZChu
ZXdBbm5vdGF0aW9uVmFsdWUoYXN0LCBleHByZXNzaW9ucy5nZXQoaSkpKTsKKwkJCXJldHVybiBp
bml0aWFsaXplcjsKKwkJCQorCQl9IGVsc2UgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwl9Cit9
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239125</attachid>
            <date>2014-01-20 02:04:00 -0500</date>
            <delta_ts>2014-01-27 10:16:29 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-417937-18-ImportRewriteaddImportITypeBin.patch</filename>
            <type>text/plain</type>
            <size>44928</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvQVNUUmV3cml0aW5nVGVzdC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9BU1RSZXdyaXRpbmdUZXN0LmphdmEKaW5k
ZXggNmY2YjcyYy4uNWMxY2IxMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmlu
Zy9BU1RSZXdyaXRpbmdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9B
U1RSZXdyaXRpbmdUZXN0LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTE4LDYgKzExOCw3IEBA
CiAJCXN1aXRlLmFkZFRlc3QoQVNUUmV3cml0aW5nUmVmZXJlbmNlRXhwcmVzc2lvblRlc3Quc3Vp
dGUoKSk7CQkKIAkJc3VpdGUuYWRkVGVzdChTb3VyY2VNb2RpZmllclRlc3Quc3VpdGUoKSk7CiAJ
CXN1aXRlLmFkZFRlc3QoSW1wb3J0UmV3cml0ZVRlc3Quc3VpdGUoKSk7CisJCXN1aXRlLmFkZFRl
c3QoSW1wb3J0UmV3cml0ZTE4VGVzdC5zdWl0ZSgpKTsKIAkJcmV0dXJuIHN1aXRlOwogCX0KIApk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvcmV3cml0ZS9kZXNjcmliaW5nL0ltcG9ydFJld3JpdGUxOFRlc3QuamF2
YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi45NjIwYzE1Ci0tLSAvZGV2L251
bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0Lmph
dmEKQEAgLTAsMCArMSw1MjMgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmln
aHQgKGMpIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAu
aHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQg
c3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9j
ZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlv
biBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkg
c3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKgkJSUJN
IENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMucmV3cml0
ZS5kZXNjcmliaW5nOworCisKKworaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247CisKK2ltcG9y
dCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKK2ltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdFN1aXRl
OworCitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkNvcmVFeGNlcHRpb247CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNvbXBpbGF0aW9uVW5pdDsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5JSmF2YVByb2plY3Q7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
SVBhY2thZ2VGcmFnbWVudFJvb3Q7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YUNv
cmU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVDsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uQVNUUGFyc2VyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5Db21waWxhdGlvblVuaXQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLklU
eXBlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSVZhcmlhYmxlQmlu
ZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0aG9kRGVjbGFyYXRpb247
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGU7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLlR5cGVEZWNsYXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uVmFyaWFibGVEZWNsYXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20ucmV3cml0ZS5JbXBvcnRSZXdyaXRlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmZvcm1hdHRlci5EZWZhdWx0Q29kZUZvcm1hdHRlckNvbnN0YW50czsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC5BYnN0cmFjdEphdmFNb2RlbFRlc3RzOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpmYWNlLnRleHQuQmFkTG9jYXRpb25FeGNlcHRpb247CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamZhY2UudGV4dC5Eb2N1bWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS50ZXh0LmVk
aXRzLk1hbGZvcm1lZFRyZWVFeGNlcHRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UudGV4dC5lZGl0
cy5UZXh0RWRpdDsKK2ltcG9ydCBvcmcub3NnaS5zZXJ2aWNlLnByZWZzLkJhY2tpbmdTdG9yZUV4
Y2VwdGlvbjsKKworCitwdWJsaWMgY2xhc3MgSW1wb3J0UmV3cml0ZTE4VGVzdCBleHRlbmRzIEFi
c3RyYWN0SmF2YU1vZGVsVGVzdHMgeworCisKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBDbGFzcyBU
SElTPSBJbXBvcnRSZXdyaXRlMThUZXN0LmNsYXNzOworCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0
cmluZyBQUk9KRUNUID0gIkltcG9ydFJld3JpdGUxOFRlc3RQcm9qZWN0IjsKKworCXByb3RlY3Rl
ZCBJUGFja2FnZUZyYWdtZW50Um9vdCBzb3VyY2VGb2xkZXI7CisKKwlwdWJsaWMgSW1wb3J0UmV3
cml0ZTE4VGVzdChTdHJpbmcgbmFtZSkgeworCQlzdXBlcihuYW1lKTsKKwl9CisKKwlwdWJsaWMg
c3RhdGljIFRlc3QgYWxsVGVzdHMoKSB7CisJCXJldHVybiBuZXcgU3VpdGUoVEhJUyk7CisJfQor
CisJcHVibGljIHN0YXRpYyBUZXN0IHNldFVwVGVzdChUZXN0IHNvbWVUZXN0KSB7CisJCVRlc3RT
dWl0ZSBzdWl0ZT0gbmV3IFN1aXRlKCJvbmUgdGVzdCIpOworCQlzdWl0ZS5hZGRUZXN0KHNvbWVU
ZXN0KTsKKwkJcmV0dXJuIHN1aXRlOworCX0KKworCXB1YmxpYyBzdGF0aWMgVGVzdCBzdWl0ZSgp
IHsKKwkJcmV0dXJuIGFsbFRlc3RzKCk7CisJfQorCisJcHJvdGVjdGVkIHZvaWQgc2V0VXAoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKwkJc3VwZXIuc2V0VXAoKTsKKworCQlJSmF2YVByb2plY3QgcHJv
aj0gY3JlYXRlSmF2YVByb2plY3QoUFJPSkVDVCwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBT
dHJpbmdbXSB7IkpDTF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJcHJvai5zZXRPcHRpb24oRGVm
YXVsdENvZGVGb3JtYXR0ZXJDb25zdGFudHMuRk9STUFUVEVSX1RBQl9DSEFSLCBKYXZhQ29yZS5T
UEFDRSk7CisJCXByb2ouc2V0T3B0aW9uKERlZmF1bHRDb2RlRm9ybWF0dGVyQ29uc3RhbnRzLkZP
Uk1BVFRFUl9UQUJfU0laRSwgIjQiKTsKKwkJcHJvai5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElM
RVJfQ09NUExJQU5DRSwgSmF2YUNvcmUuVkVSU0lPTl8xXzgpOworCQlwcm9qLnNldE9wdGlvbihK
YXZhQ29yZS5DT01QSUxFUl9QQl9BU1NFUlRfSURFTlRJRklFUiwgSmF2YUNvcmUuRVJST1IpOwor
CQlwcm9qLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9TT1VSQ0UsIEphdmFDb3JlLlZFUlNJ
T05fMV84KTsKKwkJcHJvai5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfQ09ERUdFTl9UQVJH
RVRfUExBVEZPUk0sIEphdmFDb3JlLlZFUlNJT05fMV84KTsKKwkJcHJvai5zZXRPcHRpb24oRGVm
YXVsdENvZGVGb3JtYXR0ZXJDb25zdGFudHMuRk9STUFUVEVSX05VTUJFUl9PRl9FTVBUWV9MSU5F
U19UT19QUkVTRVJWRSwgU3RyaW5nLnZhbHVlT2YoOTkpKTsKKworCQlwcm9qLnNldE9wdGlvbihE
ZWZhdWx0Q29kZUZvcm1hdHRlckNvbnN0YW50cy5GT1JNQVRURVJfQkxBTktfTElORVNfQkVUV0VF
Tl9JTVBPUlRfR1JPVVBTLCBTdHJpbmcudmFsdWVPZigxKSk7CisKKworCQl0aGlzLnNvdXJjZUZv
bGRlciA9IGdldFBhY2thZ2VGcmFnbWVudFJvb3QoUFJPSkVDVCwgInNyYyIpOworCisJCXdhaXRV
bnRpbEluZGV4ZXNSZWFkeSgpOworCX0KKworCXByb3RlY3RlZCB2b2lkIHRlYXJEb3duKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCWRlbGV0ZVByb2plY3QoUFJPSkVDVCk7CisJCXN1cGVyLnRlYXJE
b3duKCk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2Ffc2luY2VfOCgpIHRocm93
cyBFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKCBwYWNrMi5w
YWNrMy5ATWFya2VyIEIgYXJnICwgQSBhKSB7fVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJAamF2
YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlw
ZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlciB7fVxuIjsKKwkJY3JlYXRl
Rm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMSIpOworCQljcmVhdGVGaWxlKCIvIiAr
IFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRlbnRzID0g
InBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJY3JlYXRl
RmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIiwgY29udGVudHMpOworCQlj
b250ZW50cyA9ICJwYWNrYWdlIHBhY2syL3BhY2szO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBC
IHt9XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syIik7CisJ
CWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIvcGFjazMiKTsKKwkJY3Jl
YXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIvcGFjazMvQi5qYXZhIiwgY29udGVu
dHMpOworCisJCUFTVFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFTVC5KTFM4
KTsKKwkJcGFyc2VyLnNldFNvdXJjZShnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCAr
ICIvc3JjL3BhY2sxL0EuamF2YSIpKTsKKwkJcGFyc2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVl
KTsKKwkJcGFyc2VyLnNldFN0YXRlbWVudHNSZWNvdmVyeSh0cnVlKTsKKwkJQ29tcGlsYXRpb25V
bml0IGFzdFJvb3QgPSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwpOwor
CisJCUlDb21waWxhdGlvblVuaXQgY3UgPSBnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVD
VCArICIvc3JjL3BhY2sxL1guamF2YSIpOworCQlwYXJzZXIuc2V0U291cmNlKGN1KTsKKwkJcGFy
c2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJcGFyc2VyLnNldFN0YXRlbWVudHNSZWNv
dmVyeSh0cnVlKTsKKwkJYXN0Um9vdCA9IChDb21waWxhdGlvblVuaXQpIHBhcnNlci5jcmVhdGVB
U1QobnVsbCk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlPSAoVHlwZURlY2xhcmF0aW9uKSBhc3RS
b290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRob2RzID0gIHR5
cGUuZ2V0TWV0aG9kcygpOworCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2QgPSBtZXRob2RzWzBd
OworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFyaWFibGVEZWNsYXJhdGlvbikg
bWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJsZUJpbmRpbmcgYmluZGluZyA9
IHZhcmlhYmxlLnJlc29sdmVCaW5kaW5nKCk7CisJCUlUeXBlQmluZGluZyB0eXBlQmluZGluZyA9
IGJpbmRpbmcuZ2V0VHlwZSgpOworCQlJbXBvcnRSZXdyaXRlIHJld3JpdGUgPSBuZXdJbXBvcnRz
UmV3cml0ZShjdSwgbmV3IFN0cmluZ1swXSwgOTksIDk5LCB0cnVlKTsKKwkJY3UgPSBnZXRDb21w
aWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpOworCQlyZXdy
aXRlID0gbmV3SW1wb3J0c1Jld3JpdGUoY3UsIG5ldyBTdHJpbmdbMF0sIDk5LCA5OSwgdHJ1ZSk7
CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJld3JpdGUuYWRkSW1wb3J0KHR5cGVCaW5kaW5nLCBhc3RS
b290LmdldEFTVCgpKTsKKwkJYXNzZXJ0RXF1YWxzKCJATWFya2VyIEIiLCBhY3R1YWxUeXBlLnRv
U3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGFjdHVhbFR5cGUuaXNTaW1wbGVUeXBlKCkpOworCQlh
cHBseShyZXdyaXRlKTsKKwkJU3RyaW5nIGNvbnRlbnRzQSA9ICJwYWNrYWdlIHBhY2sxO1xuIiAr
CisJCQkJIlxuIiArCisJCQkJImltcG9ydCBwYWNrMi5wYWNrMy5CO1xuIiArCisJCQkJIlxuIiAr
CisJCQkJInB1YmxpYyBjbGFzcyBBe31cbiI7CisJCWFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVs
aW0oY3UuZ2V0U291cmNlKCksIGNvbnRlbnRzQSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdEJ1
ZzQxNzkzN2Jfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMg
PSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSIJ
cHVibGljIHZvaWQgZm9vKCBwYWNrMi5wYWNrMy5ATWFya2VyIEIgYXJnICwgQSBhKSB7fVxuIiAr
CisJCQkJIn1cbiIgKworCQkJCSJAamF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxh
bmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNl
IE1hcmtlciB7fVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNr
MSIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiLCBj
b250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkiaW1wb3J0
IHBhY2szLnBhY2s0LkI7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7XG4iICsKKwkJCQkiCXB1
YmxpYyB2b2lkIGZvbyhCIGFyZykge31cbiIgKworCQkJCSJ9XG4iOworCQljcmVhdGVGaWxlKCIv
IiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRlbnRz
ID0gInBhY2thZ2UgcGFjazIvcGFjazM7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEIge31cbiI7
CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIiKTsKKwkJY3JlYXRl
Rm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9wYWNrMyIpOworCQljcmVhdGVGaWxl
KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9wYWNrMy9CLmphdmEiLCBjb250ZW50cyk7CisJ
CWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazMvcGFjazQ7XG4iICsKKwkJCQkicHVibGljIGNsYXNz
IEIge31cbiI7CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMiKTsK
KwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMy9wYWNrNCIpOworCQlj
cmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMy9wYWNrNC9CLmphdmEiLCBjb250
ZW50cyk7CisKKwkJQVNUUGFyc2VyIHBhcnNlciA9IEFTVFBhcnNlci5uZXdQYXJzZXIoQVNULkpM
UzgpOworCQlwYXJzZXIuc2V0U291cmNlKGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9KRUNU
ICsgIi9zcmMvcGFjazEvQS5qYXZhIikpOworCQlwYXJzZXIuc2V0UmVzb2x2ZUJpbmRpbmdzKHRy
dWUpOworCQlwYXJzZXIuc2V0U3RhdGVtZW50c1JlY292ZXJ5KHRydWUpOworCQlDb21waWxhdGlv
blVuaXQgYXN0Um9vdCA9IChDb21waWxhdGlvblVuaXQpIHBhcnNlci5jcmVhdGVBU1QobnVsbCk7
CisKKwkJSUNvbXBpbGF0aW9uVW5pdCBjdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9K
RUNUICsgIi9zcmMvcGFjazEvWC5qYXZhIik7CisJCXBhcnNlci5zZXRTb3VyY2UoY3UpOworCQlw
YXJzZXIuc2V0UmVzb2x2ZUJpbmRpbmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3RhdGVtZW50c1Jl
Y292ZXJ5KHRydWUpOworCQlhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0
ZUFTVChudWxsKTsJCisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlPSAoVHlwZURlY2xhcmF0aW9uKSBh
c3RSb290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRob2RzID0g
IHR5cGUuZ2V0TWV0aG9kcygpOworCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2QgPSBtZXRob2Rz
WzBdOworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFyaWFibGVEZWNsYXJhdGlv
bikgbWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJsZUJpbmRpbmcgYmluZGlu
ZyA9IHZhcmlhYmxlLnJlc29sdmVCaW5kaW5nKCk7CisJCUlUeXBlQmluZGluZyB0eXBlQmluZGlu
ZyA9IGJpbmRpbmcuZ2V0VHlwZSgpOworCQljdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQ
Uk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCUltcG9ydFJld3JpdGUgcmV3cml0ZSA9
IG5ld0ltcG9ydHNSZXdyaXRlKGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUpOworCQlU
eXBlIGFjdHVhbFR5cGUgPSByZXdyaXRlLmFkZEltcG9ydCh0eXBlQmluZGluZywgYXN0Um9vdC5n
ZXRBU1QoKSk7CisJCWFzc2VydEVxdWFscygicGFjazIucGFjazMuQE1hcmtlciBCIiwgYWN0dWFs
VHlwZS50b1N0cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShhY3R1YWxUeXBlLmlzTmFtZVF1YWxpZmll
ZFR5cGUoKSk7CisJCWFwcGx5KHJld3JpdGUpOworCQlTdHJpbmcgY29udGVudHNBID0gInBhY2th
Z2UgcGFjazE7XG4iICsKKwkJCQkiaW1wb3J0IHBhY2szLnBhY2s0LkI7XG4iICsKKwkJCQkicHVi
bGljIGNsYXNzIEF7XG4iICsKKwkJCQkiCXB1YmxpYyB2b2lkIGZvbyhCIGFyZykge31cbiIgKwor
CQkJCSJ9XG4iOworCQlhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGN1LmdldFNvdXJjZSgp
LCBjb250ZW50c0EpOworCX0KKworCXByaXZhdGUgVHlwZSBydW5UZXN0NDE3OTM3Y2FuZEdldFR5
cGUoaW50IGkpIHRocm93cyBFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2Fn
ZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCXRoaXMuYnVnNDE3
OTM3Y1Rlc3RJbnB1dFtpXVswXSArICJcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFu
Zy5hbm5vdGF0aW9uLlRhcmdldCAoamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuVFlQ
RV9VU0UpXG4iICsKKwkJCQkiQGludGVyZmFjZSBNYXJrZXIge31cbiIgKworCQkJCSJAamF2YS5s
YW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5U
WVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjIge31cbiIgKworCQkJCSJAamF2
YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlw
ZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIEFubm90MSB7XG4iICsKKwkJCQkiCWlu
dCB2YWx1ZTEoKSBkZWZhdWx0IDE7XG4iICsKKwkJCQkiCWludCB2YWx1ZTIoKTtcbiIgKworCQkJ
CSJ9XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxIik7CisJ
CWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL1guamF2YSIsIGNvbnRlbnRz
KTsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3Mg
QXt9XG4iOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEi
LCBjb250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazI7XG4iICsKKwkJCQkicHVi
bGljIGNsYXNzIEIxIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNzIEIyIHtcbiIgKworCQkJCSIJ
CXB1YmxpYyBjbGFzcyBCMyB7XG4iICsKKwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4iICsKKwkJ
CQkiCX1cbiIgKworCQkJCSJ9XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIv
c3JjL3BhY2syIik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syL0Ix
LmphdmEiLCBjb250ZW50cyk7CisKKwkJQVNUUGFyc2VyIHBhcnNlciA9IEFTVFBhcnNlci5uZXdQ
YXJzZXIoQVNULkpMUzgpOworCQlJQ29tcGlsYXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRpb25V
bml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiKTsKKwkJcGFyc2VyLnNldFNv
dXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNlci5z
ZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0aW9uVW5pdCBhc3RSb290ID0g
KENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxsKTsKKwkJVHlwZURlY2xhcmF0
aW9uIHR5cGVEZWNsYXJhdGlvbiA9IChUeXBlRGVjbGFyYXRpb24pIGFzdFJvb3QudHlwZXMoKS5n
ZXQoMCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIFtdIG1ldGhvZHMgPSAgdHlwZURlY2xhcmF0aW9u
LmdldE1ldGhvZHMoKTsKKwkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kID0gbWV0aG9kc1swXTsK
KworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFyaWFibGVEZWNsYXJhdGlvbikg
bWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJsZUJpbmRpbmcgdmFyaWFibGVC
aW5kaW5nID0gdmFyaWFibGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJSVR5cGVCaW5kaW5nIHR5cGVC
aW5kaW5nID0gdmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJY3UgPSBnZXRDb21waWxhdGlv
blVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpOworCQlJbXBvcnRSZXdy
aXRlIHJld3JpdGUgPSBuZXdJbXBvcnRzUmV3cml0ZShjdSwgbmV3IFN0cmluZ1swXSwgOTksIDk5
LCB0cnVlKTsKKwkJVHlwZSBhY3R1YWxUeXBlID0gcmV3cml0ZS5hZGRJbXBvcnQodHlwZUJpbmRp
bmcsIGFzdFJvb3QuZ2V0QVNUKCkpOworCQlhcHBseShyZXdyaXRlKTsKKwkJU3RyaW5nIGNvbnRl
bnRzQSA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCisJCQkJIlxuIiArCisJCQkJImltcG9ydCAiICsg
dGhpcy5idWc0MTc5MzdjVGVzdElucHV0W2ldWzFdICsgIjtcbiIgKworCQkJCSJcbiIgKworCQkJ
CSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQljdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQ
Uk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCWFzc2VydEVxdWFsU3RyaW5nSWdub3Jl
RGVsaW0oY3UuZ2V0U291cmNlKCksIGNvbnRlbnRzQSk7CisKKwkJcmV0dXJuIGFjdHVhbFR5cGU7
CisJfQorCisJU3RyaW5nW11bXSBidWc0MTc5MzdjVGVzdElucHV0ID0geworCQkJeyJwdWJsaWMg
dm9pZCBmb28wMDAoIHBhY2syLkBNYXJrZXIgQjEuQE1hcmtlciBCMi5ATWFya2VyIEIzIGFyZywg
QSBhKSB7fSIsICJwYWNrMi5CMSIsICJATWFya2VyIEIxLkBNYXJrZXIgQjIuQE1hcmtlciBCMyJ9
LAorCQkJeyJwdWJsaWMgdm9pZCBmb28wMDEoIHBhY2syLkBNYXJrZXIgQE1hcmtlcjIgQjEuQE1h
cmtlciBCMi5CMyBhcmcsIEEgYSkge30iLCAicGFjazIuQjEiLCAiQE1hcmtlciBATWFya2VyMiBC
MS5ATWFya2VyIEIyLkIzIn0sCisJCQl7InB1YmxpYyB2b2lkIGZvbzAwMiggcGFjazIuQjEuQE1h
cmtlciBCMi5CMyBhcmcsIEBNYXJrZXIgaW50IGksIEEgYSkiLCAicGFjazIuQjEuQjIiLCAiQE1h
cmtlciBCMi5CMyJ9LAorCQkJeyJwdWJsaWMgdm9pZCBmb28wMDMoIHBhY2syLkIxLkIyLkBNYXJr
ZXIgQjMgYXJnLCBBIGEpIHt9IiwgInBhY2syLkIxLkIyLkIzIiwgIkBNYXJrZXIgQjMifSwKKwkJ
CXsicHVibGljIHZvaWQgZm9vMDA0KCBwYWNrMi5CMS5CMi5AQW5ub3QxKHZhbHVlMj0yKSBCMyBh
cmcsIEEgYSkge30iLCAicGFjazIuQjEuQjIuQjMiLCAiQEFubm90MSh2YWx1ZTI9MikgQjMifSwK
KwkJCXsicHVibGljIHZvaWQgZm9vMDA1KCBwYWNrMi5CMS5CMi5AQW5ub3QxKHZhbHVlMj0yLHZh
bHVlMT0wKSBCMyBhcmcsIEEgYSkge30iLCAicGFjazIuQjEuQjIuQjMiLCAiQEFubm90MSh2YWx1
ZTI9Mix2YWx1ZTE9MCkgQjMifSwKKwkJCXsicHVibGljIHZvaWQgZm9vMDA2KCBwYWNrMi5CMS5C
Mi5CMyBhcmcsIEEgYSkge30iLCAicGFjazIuQjEuQjIuQjMiLCAiQjMifSwKKwl9OworCisJcHJp
dmF0ZSBUeXBlIGJ1ZzQxNzkzN2NfcnVuaV9zaW5jZV84KGludCBpKSB0aHJvd3MgRXhjZXB0aW9u
IHsKKwkJVHlwZSBhY3R1YWxUeXBlID0gcnVuVGVzdDQxNzkzN2NhbmRHZXRUeXBlKGkpOworCQlh
c3NlcnRFcXVhbHModGhpcy5idWc0MTc5MzdjVGVzdElucHV0W2ldWzJdLCBhY3R1YWxUeXBlLnRv
U3RyaW5nKCkpOworCQlyZXR1cm4gYWN0dWFsVHlwZTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0
QnVnNDE3OTM3YzBfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24geworCQlUeXBlIHR5cGUgPSBi
dWc0MTc5MzdjX3J1bmlfc2luY2VfOCgwKTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlzUXVhbGlmaWVk
VHlwZSgpKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2MxX3NpbmNlXzgoKSB0aHJv
d3MgRXhjZXB0aW9uIHsKKwkJVHlwZSB0eXBlID0gYnVnNDE3OTM3Y19ydW5pX3NpbmNlXzgoMSk7
CisJCWFzc2VydFRydWUodHlwZS5pc1F1YWxpZmllZFR5cGUoKSk7CisJfQorCXB1YmxpYyB2b2lk
IHRlc3RCdWc0MTc5MzdjMl9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUgdHlw
ZSA9IGJ1ZzQxNzkzN2NfcnVuaV9zaW5jZV84KDIpOworCQlhc3NlcnRUcnVlKHR5cGUuaXNRdWFs
aWZpZWRUeXBlKCkpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3YzNfc2luY2VfOCgp
IHRocm93cyBFeGNlcHRpb24geworCQlUeXBlIHR5cGUgPSBidWc0MTc5MzdjX3J1bmlfc2luY2Vf
OCgzKTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlzU2ltcGxlVHlwZSgpKTsKKwl9CisJcHVibGljIHZv
aWQgdGVzdEJ1ZzQxNzkzN2M0X3NpbmNlXzgoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJVHlwZSB0
eXBlID0gYnVnNDE3OTM3Y19ydW5pX3NpbmNlXzgoNCk7CisJCWFzc2VydFRydWUodHlwZS5pc1Np
bXBsZVR5cGUoKSk7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RCdWc0MTc5MzdjNV9zaW5jZV84KCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisJCVR5cGUgdHlwZSA9IGJ1ZzQxNzkzN2NfcnVuaV9zaW5jZV84
KDUpOworCQlhc3NlcnRUcnVlKHR5cGUuaXNTaW1wbGVUeXBlKCkpOworCX0KKwlwdWJsaWMgdm9p
ZCB0ZXN0QnVnNDE3OTM3YzZfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24geworCQlUeXBlIHR5
cGUgPSBidWc0MTc5MzdjX3J1bmlfc2luY2VfOCg2KTsKKwkJYXNzZXJ0VHJ1ZSh0eXBlLmlzU2lt
cGxlVHlwZSgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3ZDAwMV9zaW5jZV84
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHBhY2sx
O1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYe1xuIiArCisJCQkJInB1YmxpYyB2b2lkIGZvbzAw
MCggcGFjazMuQzE8cGFjazIuQjE+LkMyPHBhY2syLkIxLkIyPi5DMzxwYWNrMi5CMT4gYXJnLCBB
IGEpIHt9XG4iICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAi
L3NyYy9wYWNrMSIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9Y
LmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJ
CQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9z
cmMvcGFjazEvQS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2sy
O1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBCMSB7XG4iICsKKwkJCQkiCXB1YmxpYyBjbGFzcyBC
MiB7XG4iICsKKwkJCQkiCQlwdWJsaWMgY2xhc3MgQjMge1xuIiArCisJCQkJIgkJCVxuIiArCisJ
CQkJIgkJfVxuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIv
IiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMiIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1Qg
KyAiL3NyYy9wYWNrMi9CMS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdl
IHBhY2szO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBDMSA8VD4ge1xuIiArCisJCQkJIglwdWJs
aWMgY2xhc3MgQzIgPFA+e1xuIiArCisJCQkJIgkJcHVibGljIGNsYXNzIEMzIDxRPiB7XG4iICsK
KwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iICsg
CisJCWNyZWF0ZUZvbGRlcigiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMiKTsKKwkJY3JlYXRl
RmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazMvQzEuamF2YSIsIGNvbnRlbnRzKTsKKwkJ
Y29udGVudHMgPSAicGFja2FnZSBwYWNrNDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRDEge1xu
IiArCisJCQkJIglwdWJsaWMgY2xhc3MgRDIgPFQ+e1xuIiArCisJCQkJIgkJcHVibGljIGNsYXNz
IEQzIDxTPiB7XG4iICsKKwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4iICsKKwkJCQkiCX1cbiIg
KworCQkJCSJ9XG4iICsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNr
NCIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrNC9EMS5qYXZhIiwg
Y29udGVudHMpOworCisJCUFTVFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFT
VC5KTFM4KTsKKwkJSUNvbXBpbGF0aW9uVW5pdCBjdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIg
KyBQUk9KRUNUICsgIi9zcmMvcGFjazEvWC5qYXZhIik7CisJCXBhcnNlci5zZXRTb3VyY2UoY3Up
OworCQlwYXJzZXIuc2V0UmVzb2x2ZUJpbmRpbmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3RhdGVt
ZW50c1JlY292ZXJ5KHRydWUpOworCQlDb21waWxhdGlvblVuaXQgYXN0Um9vdCA9IChDb21waWxh
dGlvblVuaXQpIHBhcnNlci5jcmVhdGVBU1QobnVsbCk7CQorCQlUeXBlRGVjbGFyYXRpb24gdHlw
ZURlY2xhcmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgYXN0Um9vdC50eXBlcygpLmdldCgwKTsK
KwkJTWV0aG9kRGVjbGFyYXRpb24gW10gbWV0aG9kcyA9ICB0eXBlRGVjbGFyYXRpb24uZ2V0TWV0
aG9kcygpOworCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2QgPSBtZXRob2RzWzBdOworCisJCVZh
cmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGU9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBtZXRob2Qu
cGFyYW1ldGVycygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZUJpbmRpbmcg
PSB2YXJpYWJsZS5yZXNvbHZlQmluZGluZygpOworCQlJVHlwZUJpbmRpbmcgdHlwZUJpbmRpbmcg
PSB2YXJpYWJsZUJpbmRpbmcuZ2V0VHlwZSgpOworCQljdSA9IGdldENvbXBpbGF0aW9uVW5pdCgi
LyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCUltcG9ydFJld3JpdGUgcmV3
cml0ZSA9IG5ld0ltcG9ydHNSZXdyaXRlKGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUp
OworCQlUeXBlIGFjdHVhbFR5cGUgPSByZXdyaXRlLmFkZEltcG9ydCh0eXBlQmluZGluZywgYXN0
Um9vdC5nZXRBU1QoKSk7CisJCWFwcGx5KHJld3JpdGUpOworCQlTdHJpbmcgY29udGVudHNBID0g
InBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkiXG4iICsKKwkJCQkiaW1wb3J0IHBhY2syLkIxO1xu
IiArCisJCQkJImltcG9ydCBwYWNrMi5CMS5CMjtcbiIgKworCQkJCSJpbXBvcnQgcGFjazMuQzE7
XG4iICsKKwkJCQkiXG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJY3UgPSBnZXRD
b21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpOworCQlh
c3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGN1LmdldFNvdXJjZSgpLCBjb250ZW50c0EpOwor
CQlhc3NlcnRFcXVhbHMoIkMxPEIxPi5DMjxCMj4uQzM8QjE+IiwgYWN0dWFsVHlwZS50b1N0cmlu
ZygpKTsKKwkJYXNzZXJ0VHJ1ZShhY3R1YWxUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSk7CisJ
fQorCisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2QwMDJfc2luY2VfOCgpIHRocm93cyBFeGNl
cHRpb24geworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJw
dWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSJwdWJsaWMgdm9pZCBmb28wMDEoIHBhY2s0LkQxLkQy
PHBhY2syLkIxPi5EMzxwYWNrMi5CMT4gYXJnLCBBIGEpIHt9XG4iICsKKwkJCQkifVxuIjsKKwkJ
Y3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMSIpOworCQljcmVhdGVGaWxl
KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRl
bnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEF7fVxuIjsKKwkJ
Y3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIiwgY29udGVudHMp
OworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2syO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBC
MSB7XG4iICsKKwkJCQkiCXB1YmxpYyBjbGFzcyBCMiB7XG4iICsKKwkJCQkiCQlwdWJsaWMgY2xh
c3MgQjMge1xuIiArCisJCQkJIgkJCVxuIiArCisJCQkJIgkJfVxuIiArCisJCQkJIgl9XG4iICsK
KwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMiIp
OworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9CMS5qYXZhIiwgY29u
dGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2szO1xuIiArCisJCQkJInB1YmxpYyBj
bGFzcyBDMSA8VD4ge1xuIiArCisJCQkJIglwdWJsaWMgY2xhc3MgQzIgPFA+e1xuIiArCisJCQkJ
IgkJcHVibGljIGNsYXNzIEMzIDxRPiB7XG4iICsKKwkJCQkiCQkJXG4iICsKKwkJCQkiCQl9XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iICsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pF
Q1QgKyAiL3NyYy9wYWNrMyIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9w
YWNrMy9DMS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2s0O1xu
IiArCisJCQkJInB1YmxpYyBjbGFzcyBEMSB7XG4iICsKKwkJCQkiCXB1YmxpYyBjbGFzcyBEMiA8
VD57XG4iICsKKwkJCQkiCQlwdWJsaWMgY2xhc3MgRDMgPFM+IHtcbiIgKworCQkJCSIJCQlcbiIg
KworCQkJCSIJCX1cbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIgKyAKKwkJY3JlYXRlRm9s
ZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrNCIpOworCQljcmVhdGVGaWxlKCIvIiArIFBS
T0pFQ1QgKyAiL3NyYy9wYWNrNC9EMS5qYXZhIiwgY29udGVudHMpOworCisJCUFTVFBhcnNlciBw
YXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFTVC5KTFM4KTsKKwkJSUNvbXBpbGF0aW9uVW5p
dCBjdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvWC5q
YXZhIik7CisJCXBhcnNlci5zZXRTb3VyY2UoY3UpOworCQlwYXJzZXIuc2V0UmVzb2x2ZUJpbmRp
bmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3RhdGVtZW50c1JlY292ZXJ5KHRydWUpOworCQlDb21w
aWxhdGlvblVuaXQgYXN0Um9vdCA9IChDb21waWxhdGlvblVuaXQpIHBhcnNlci5jcmVhdGVBU1Qo
bnVsbCk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0
aW9uKSBhc3RSb290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNsYXJhdGlvbiBbXSBtZXRo
b2RzID0gIHR5cGVEZWNsYXJhdGlvbi5nZXRNZXRob2RzKCk7CisJCU1ldGhvZERlY2xhcmF0aW9u
IG1ldGhvZCA9IG1ldGhvZHNbMF07CisKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiB2YXJpYWJsZT0g
KFZhcmlhYmxlRGVjbGFyYXRpb24pIG1ldGhvZC5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQlJVmFy
aWFibGVCaW5kaW5nIHZhcmlhYmxlQmluZGluZyA9IHZhcmlhYmxlLnJlc29sdmVCaW5kaW5nKCk7
CisJCUlUeXBlQmluZGluZyB0eXBlQmluZGluZyA9IHZhcmlhYmxlQmluZGluZy5nZXRUeXBlKCk7
CisJCWN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9B
LmphdmEiKTsKKwkJSW1wb3J0UmV3cml0ZSByZXdyaXRlID0gbmV3SW1wb3J0c1Jld3JpdGUoY3Us
IG5ldyBTdHJpbmdbMF0sIDk5LCA5OSwgdHJ1ZSk7CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJld3Jp
dGUuYWRkSW1wb3J0KHR5cGVCaW5kaW5nLCBhc3RSb290LmdldEFTVCgpKTsKKwkJYXBwbHkocmV3
cml0ZSk7CisJCVN0cmluZyBjb250ZW50c0EgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJc
biIgKworCQkJCSJpbXBvcnQgcGFjazIuQjE7XG4iICsKKwkJCQkiaW1wb3J0IHBhY2s0LkQxLkQy
O1xuIiArCisJCQkJIlxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBBe31cbiI7CisJCWN1ID0gZ2V0
Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiKTsKKwkJ
YXNzZXJ0RXF1YWxTdHJpbmdJZ25vcmVEZWxpbShjdS5nZXRTb3VyY2UoKSwgY29udGVudHNBKTsK
KwkJYXNzZXJ0RXF1YWxzKCJEMjxCMT4uRDM8QjE+IiwgYWN0dWFsVHlwZS50b1N0cmluZygpKTsK
KwkJYXNzZXJ0VHJ1ZShhY3R1YWxUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSk7CisJfQorCisJ
cHVibGljIHZvaWQgdGVzdEJ1ZzQxNzkzN2Vfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24gewor
CQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJpbXBvcnQgcGFj
azIuQjE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFh7XG4iICsKKwkJCQkiICAgIHB1YmxpYyB2
b2lkIGZvbzAwMShCMTxDMT4uQjI8QzE+LkBBbm5vdCh0cnVlKSBCMzxDMT4gYXJnLCBBIGEpIHt9
XG4iICsKKwkJCQkifVxuIiArCisJCQkJImNsYXNzIEMxe31cbiIgKworCQkJCSJAamF2YS5sYW5n
LmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBF
X1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIEFubm90IHtcbglib29sZWFuIHZhbHVlKCkgZGVm
YXVsdCBmYWxzZTtcbn1cbiIgKworCQkJCSJ9XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJP
SkVDVCArICIvc3JjL3BhY2sxIik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3Jj
L3BhY2sxL1guamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtc
biIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pF
Q1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiLCBjb250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2th
Z2UgcGFjazI7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEIxPFQ+IHtcbiIgKworCQkJCSIJcHVi
bGljIGNsYXNzIEIyPFA+IHtcbiIgKworCQkJCSIJCXB1YmxpYyBjbGFzcyBCMzxRPiB7XG4iICsK
KwkJCQkiCQl9XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iOworCQljcmVhdGVGb2xkZXIo
Ii8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syIik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVD
VCArICIvc3JjL3BhY2syL0IxLmphdmEiLCBjb250ZW50cyk7CisKKwkJQVNUUGFyc2VyIHBhcnNl
ciA9IEFTVFBhcnNlci5uZXdQYXJzZXIoQVNULkpMUzgpOworCQlJQ29tcGlsYXRpb25Vbml0IGN1
ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEi
KTsKKwkJcGFyc2VyLnNldFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3Mo
dHJ1ZSk7CisJCXBhcnNlci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0
aW9uVW5pdCBhc3RSb290ID0gKENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxs
KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsYXJhdGlvbiA9IChUeXBlRGVjbGFyYXRpb24p
IGFzdFJvb3QudHlwZXMoKS5nZXQoMCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIFtdIG1ldGhvZHMg
PSAgdHlwZURlY2xhcmF0aW9uLmdldE1ldGhvZHMoKTsKKwkJTWV0aG9kRGVjbGFyYXRpb24gbWV0
aG9kID0gbWV0aG9kc1swXTsKKworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlPSAoVmFy
aWFibGVEZWNsYXJhdGlvbikgbWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCUlWYXJpYWJs
ZUJpbmRpbmcgdmFyaWFibGVCaW5kaW5nID0gdmFyaWFibGUucmVzb2x2ZUJpbmRpbmcoKTsKKwkJ
SVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0gdmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJ
Y3UgPSBnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2
YSIpOworCQlJbXBvcnRSZXdyaXRlIHJld3JpdGUgPSBuZXdJbXBvcnRzUmV3cml0ZShjdSwgbmV3
IFN0cmluZ1swXSwgOTksIDk5LCB0cnVlKTsKKwkJVHlwZSBhY3R1YWxUeXBlID0gcmV3cml0ZS5h
ZGRJbXBvcnQodHlwZUJpbmRpbmcsIGFzdFJvb3QuZ2V0QVNUKCkpOworCQlhc3NlcnRUcnVlKGFj
dHVhbFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZSgpKTsKKwl9CisKKwlwcml2YXRlIHZvaWQgYXNz
ZXJ0RXF1YWxTdHJpbmdJZ25vcmVEZWxpbShTdHJpbmcgYWN0dWFsLCBTdHJpbmcgZXhwZWN0ZWQp
IHRocm93cyBJT0V4Y2VwdGlvbiB7CisJCVN0cmluZ0Fzc2VydHMuYXNzZXJ0RXF1YWxTdHJpbmdJ
Z25vcmVEZWxpbShhY3R1YWwsIGV4cGVjdGVkKTsKKwl9CisKKwlwcml2YXRlIEltcG9ydFJld3Jp
dGUgbmV3SW1wb3J0c1Jld3JpdGUoSUNvbXBpbGF0aW9uVW5pdCBjdSwgU3RyaW5nW10gb3JkZXIs
IGludCBub3JtYWxUaHJlc2hvbGQsIGludCBzdGF0aWNUaHJlc2hvbGQsIGJvb2xlYW4gcmVzdG9y
ZUV4aXN0aW5nSW1wb3J0cykgdGhyb3dzIENvcmVFeGNlcHRpb24sIEJhY2tpbmdTdG9yZUV4Y2Vw
dGlvbiB7CisJCUltcG9ydFJld3JpdGUgcmV3cml0ZT0gSW1wb3J0UmV3cml0ZS5jcmVhdGUoY3Us
IHJlc3RvcmVFeGlzdGluZ0ltcG9ydHMpOworCQlyZXdyaXRlLnNldEltcG9ydE9yZGVyKG9yZGVy
KTsKKwkJcmV3cml0ZS5zZXRPbkRlbWFuZEltcG9ydFRocmVzaG9sZChub3JtYWxUaHJlc2hvbGQp
OworCQlyZXdyaXRlLnNldFN0YXRpY09uRGVtYW5kSW1wb3J0VGhyZXNob2xkKHN0YXRpY1RocmVz
aG9sZCk7CisJCXJldHVybiByZXdyaXRlOworCX0KKworCXByb3RlY3RlZCBJbXBvcnRSZXdyaXRl
IG5ld0ltcG9ydHNSZXdyaXRlKENvbXBpbGF0aW9uVW5pdCBjdSwgU3RyaW5nW10gb3JkZXIsIGlu
dCBub3JtYWxUaHJlc2hvbGQsIGludCBzdGF0aWNUaHJlc2hvbGQsIGJvb2xlYW4gcmVzdG9yZUV4
aXN0aW5nSW1wb3J0cykgeworCQlJbXBvcnRSZXdyaXRlIHJld3JpdGU9IEltcG9ydFJld3JpdGUu
Y3JlYXRlKGN1LCByZXN0b3JlRXhpc3RpbmdJbXBvcnRzKTsKKwkJcmV3cml0ZS5zZXRJbXBvcnRP
cmRlcihvcmRlcik7CisJCXJld3JpdGUuc2V0T25EZW1hbmRJbXBvcnRUaHJlc2hvbGQobm9ybWFs
VGhyZXNob2xkKTsKKwkJcmV3cml0ZS5zZXRTdGF0aWNPbkRlbWFuZEltcG9ydFRocmVzaG9sZChz
dGF0aWNUaHJlc2hvbGQpOworCQlyZXR1cm4gcmV3cml0ZTsKKwl9CisKKwlwcml2YXRlIHZvaWQg
YXBwbHkoSW1wb3J0UmV3cml0ZSByZXdyaXRlKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgTWFsZm9y
bWVkVHJlZUV4Y2VwdGlvbiwgQmFkTG9jYXRpb25FeGNlcHRpb24geworCQlUZXh0RWRpdCBlZGl0
PSByZXdyaXRlLnJld3JpdGVJbXBvcnRzKG51bGwpOworCisJCS8vIG5vdCB0aGUgZWZmaWNpZW50
IHdheSEKKwkJSUNvbXBpbGF0aW9uVW5pdCBjb21waWxhdGlvblVuaXQ9IHJld3JpdGUuZ2V0Q29t
cGlsYXRpb25Vbml0KCk7CisJCURvY3VtZW50IGRvY3VtZW50PSBuZXcgRG9jdW1lbnQoY29tcGls
YXRpb25Vbml0LmdldFNvdXJjZSgpKTsKKwkJZWRpdC5hcHBseShkb2N1bWVudCk7CisJCWNvbXBp
bGF0aW9uVW5pdC5nZXRCdWZmZXIoKS5zZXRDb250ZW50cyhkb2N1bWVudC5nZXQoKSk7CisJfQor
fQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vcmV3cml0ZS9JbXBvcnRSZXdyaXRl
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L3Jld3JpdGUvSW1wb3J0UmV3cml0ZS5qYXZhCmluZGV4IGFlMDNjZGEuLjU0OGZkM2IgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
cmV3cml0ZS9JbXBvcnRSZXdyaXRlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9t
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9yZXdyaXRlL0ltcG9ydFJld3JpdGUuamF2YQpAQCAt
MSwxMCArMSwxNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBp
cyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5o
dG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBz
cGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nl
c3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9u
IHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBz
cGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJ
Qk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqLwpAQCAtNDIyLDggKzQyNiw4IEBACiAJICogPC9wPgogCSAqIEBwYXJh
bSB0eXBlU2lnIHRoZSBzaWduYXR1cmUgb2YgdGhlIHR5cGUgdG8gYmUgYWRkZWQuCiAJICogQHBh
cmFtIGFzdCB0aGUgQVNUIHRvIGNyZWF0ZSB0aGUgcmV0dXJuZWQgdHlwZSBmb3IuCi0JICogQHJl
dHVybiByZXR1cm5zIGEgdHlwZSB0byB3aGljaCB0aGUgdHlwZSBiaW5kaW5nIGNhbiBiZSBhc3Np
Z25lZCB0by4gVGhlIHJldHVybmVkIHR5cGUgY29udGFpbnMgaXMgdW5xdWFsaWZpZWQKLQkgKiB3
aGVuIGFuIGltcG9ydCBjb3VsZCBiZSBhZGRlZCBvciB3YXMgYWxyZWFkeSBrbm93bi4gSXQgaXMg
ZnVsbHkgcXVhbGlmaWVkLCBpZiBhbiBpbXBvcnQgY29uZmxpY3QgcHJldmVudGVkIHRoZSBpbXBv
cnQuCisJICogQHJldHVybiByZXR1cm5zIGVpdGhlciB0aGUgc2ltcGxlIG1lbWJlciBuYW1lIGlm
IHRoZSBpbXBvcnQgd2FzIHN1Y2Nlc3NmdWwgb3IgZWxzZSB0aGUgcXVhbGlmaWVkIG5hbWUgaWYK
KwkgKiBhbiBpbXBvcnQgY29uZmxpY3QgcHJldmVudGVkIHRoZSBpbXBvcnQuCiAJICovCiAJcHVi
bGljIFR5cGUgYWRkSW1wb3J0RnJvbVNpZ25hdHVyZShTdHJpbmcgdHlwZVNpZywgQVNUIGFzdCkg
ewogCQlyZXR1cm4gYWRkSW1wb3J0RnJvbVNpZ25hdHVyZSh0eXBlU2lnLCBhc3QsIHRoaXMuZGVm
YXVsdENvbnRleHQpOwpAQCAtNDQ2LDggKzQ1MCw4IEBACiAJICogQHBhcmFtIGFzdCB0aGUgQVNU
IHRvIGNyZWF0ZSB0aGUgcmV0dXJuZWQgdHlwZSBmb3IuCiAJICogQHBhcmFtIGNvbnRleHQgYW4g
b3B0aW9uYWwgY29udGV4dCB0aGF0IGtub3dzIGFib3V0IHR5cGVzIHZpc2libGUgaW4gdGhlIGN1
cnJlbnQgc2NvcGUgb3IgPGNvZGU+bnVsbDwvY29kZT4KIAkgKiB0byB1c2UgdGhlIGRlZmF1bHQg
Y29udGV4dCBvbmx5IHVzaW5nIHRoZSBhdmFpbGFibGUgaW1wb3J0cy4KLQkgKiBAcmV0dXJuIHJl
dHVybnMgYSB0eXBlIHRvIHdoaWNoIHRoZSB0eXBlIGJpbmRpbmcgY2FuIGJlIGFzc2lnbmVkIHRv
LiBUaGUgcmV0dXJuZWQgdHlwZSBjb250YWlucyBpcyB1bnF1YWxpZmllZAotCSAqIHdoZW4gYW4g
aW1wb3J0IGNvdWxkIGJlIGFkZGVkIG9yIHdhcyBhbHJlYWR5IGtub3duLiBJdCBpcyBmdWxseSBx
dWFsaWZpZWQsIGlmIGFuIGltcG9ydCBjb25mbGljdCBwcmV2ZW50ZWQgdGhlIGltcG9ydC4KKwkg
KiBAcmV0dXJuIHJldHVybnMgZWl0aGVyIHRoZSBzaW1wbGUgbWVtYmVyIG5hbWUgaWYgdGhlIGlt
cG9ydCB3YXMgc3VjY2Vzc2Z1bCBvciBlbHNlIHRoZSBxdWFsaWZpZWQgbmFtZSBpZgorCSAqIGFu
IGltcG9ydCBjb25mbGljdCBwcmV2ZW50ZWQgdGhlIGltcG9ydC4KIAkgKi8KIAlwdWJsaWMgVHlw
ZSBhZGRJbXBvcnRGcm9tU2lnbmF0dXJlKFN0cmluZyB0eXBlU2lnLCBBU1QgYXN0LCBJbXBvcnRS
ZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CiAJCWlmICh0eXBlU2lnID09IG51bGwgfHwgdHlwZVNp
Zy5sZW5ndGgoKSA9PSAwKSB7CkBAIC01MDMsOCArNTA3LDggQEAKIAogCiAJLyoqCi0JICogQWRk
cyBhIG5ldyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCByZXR1cm5zIGEgdHlw
ZSByZWZlcmVuY2UgdGhhdCBjYW4gYmUgdXNlZAotCSAqIGluIHRoZSBjb2RlLiBUaGUgdHlwZSBi
aW5kaW5nIGNhbiBiZSBhbiBhcnJheSBiaW5kaW5nLCB0eXBlIHZhcmlhYmxlIG9yIHdpbGRjYXJk
LgorCSAqIEFkZHMgYSBuZXcgaW1wb3J0IHRvIHRoZSByZXdyaXRlcidzIHJlY29yZCBhbmQgcmV0
dXJucyBhIG5hbWUgLSBzaW5nbGUgbWVtYmVyIG5hbWUgaWYKKwkgKiBpbXBvcnQgaXMgc3VjY2Vz
c2Z1bCwgZWxzZSBxdWFsaWZpZWQgbmFtZS4gVGhlIHR5cGUgYmluZGluZyBjYW4gYmUgYW4gYXJy
YXkgYmluZGluZywgdHlwZSB2YXJpYWJsZSBvciB3aWxkY2FyZC4KIAkgKiBJZiB0aGUgYmluZGlu
ZyBpcyBhIGdlbmVyaWMgdHlwZSwgdGhlIHR5cGUgcGFyYW1ldGVycyBhcmUgaWdub3JlZC4gRm9y
IHBhcmFtZXRlcml6ZWQgdHlwZXMsIGFsc28gdGhlIHR5cGUKIAkgKiBhcmd1bWVudHMgYXJlIHBy
b2Nlc3NlZCBhbmQgaW1wb3J0cyBhZGRlZCBpZiBuZWNlc3NhcnkuIEFub255bW91cyB0eXBlcyBp
bnNpZGUgdHlwZSBhcmd1bWVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gdGhlaXIgYmFzZSB0eXBlLCB3
aWxkY2FyZAogCSAqIG9mIHdpbGRjYXJkcyBhcmUgaWdub3JlZC4KQEAgLTUxNiwxNiArNTIwLDE2
IEBACiAJICogaW4gYW55IHdheSBieSB0aGlzIG1ldGhvZDsgcmF0aGVyLCB0aGUgcmV3cml0ZXIg
anVzdCByZWNvcmRzIHRoYXQgYSBuZXcgaW1wb3J0IGhhcyBiZWVuIGFkZGVkLgogCSAqIDwvcD4K
IAkgKiBAcGFyYW0gYmluZGluZyB0aGUgc2lnbmF0dXJlIG9mIHRoZSB0eXBlIHRvIGJlIGFkZGVk
LgotCSAqIEByZXR1cm4gcmV0dXJucyBhIHR5cGUgdG8gd2hpY2ggdGhlIHR5cGUgYmluZGluZyBj
YW4gYmUgYXNzaWduZWQgdG8uIFRoZSByZXR1cm5lZCB0eXBlIGNvbnRhaW5zIGlzIHVucXVhbGlm
aWVkCi0JICogd2hlbiBhbiBpbXBvcnQgY291bGQgYmUgYWRkZWQgb3Igd2FzIGFscmVhZHkga25v
d24uIEl0IGlzIGZ1bGx5IHF1YWxpZmllZCwgaWYgYW4gaW1wb3J0IGNvbmZsaWN0IHByZXZlbnRl
ZCB0aGUgaW1wb3J0LgorCSAqIEByZXR1cm4gcmV0dXJucyBlaXRoZXIgdGhlIHNpbXBsZSBtZW1i
ZXIgbmFtZSBpZiB0aGUgaW1wb3J0IHdhcyBzdWNjZXNzZnVsIG9yIGVsc2UgdGhlIHF1YWxpZmll
ZCBuYW1lIGlmCisJICogYW4gaW1wb3J0IGNvbmZsaWN0IHByZXZlbnRlZCB0aGUgaW1wb3J0Lgog
CSAqLwogCXB1YmxpYyBTdHJpbmcgYWRkSW1wb3J0KElUeXBlQmluZGluZyBiaW5kaW5nKSB7CiAJ
CXJldHVybiBhZGRJbXBvcnQoYmluZGluZywgdGhpcy5kZWZhdWx0Q29udGV4dCk7CiAJfQogCiAJ
LyoqCi0JICogQWRkcyBhIG5ldyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCBy
ZXR1cm5zIGEgdHlwZSByZWZlcmVuY2UgdGhhdCBjYW4gYmUgdXNlZAotCSAqIGluIHRoZSBjb2Rl
LiBUaGUgdHlwZSBiaW5kaW5nIGNhbiBiZSBhbiBhcnJheSBiaW5kaW5nLCB0eXBlIHZhcmlhYmxl
IG9yIHdpbGRjYXJkLgorCSAqIEFkZHMgYSBuZXcgaW1wb3J0IHRvIHRoZSByZXdyaXRlcidzIHJl
Y29yZCBhbmQgcmV0dXJucyBhIG5hbWUgLSBzaW5nbGUgbWVtYmVyIG5hbWUgaWYKKwkgKiBpbXBv
cnQgaXMgc3VjY2Vzc2Z1bCwgZWxzZSBxdWFsaWZpZWQgbmFtZS4gVGhlIHR5cGUgYmluZGluZyBj
YW4gYmUgYW4gYXJyYXkgYmluZGluZywgdHlwZSB2YXJpYWJsZSBvciB3aWxkY2FyZC4KIAkgKiBJ
ZiB0aGUgYmluZGluZyBpcyBhIGdlbmVyaWMgdHlwZSwgdGhlIHR5cGUgcGFyYW1ldGVycyBhcmUg
aWdub3JlZC4gRm9yIHBhcmFtZXRlcml6ZWQgdHlwZXMsIGFsc28gdGhlIHR5cGUKIAkgKiBhcmd1
bWVudHMgYXJlIHByb2Nlc3NlZCBhbmQgaW1wb3J0cyBhZGRlZCBpZiBuZWNlc3NhcnkuIEFub255
bW91cyB0eXBlcyBpbnNpZGUgdHlwZSBhcmd1bWVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gdGhlaXIg
YmFzZSB0eXBlLCB3aWxkY2FyZAogCSAqIG9mIHdpbGRjYXJkcyBhcmUgaWdub3JlZC4KQEAgLTUz
OSw4ICs1NDMsOCBAQAogCSAqIEBwYXJhbSBiaW5kaW5nIHRoZSBzaWduYXR1cmUgb2YgdGhlIHR5
cGUgdG8gYmUgYWRkZWQuCiAJICogQHBhcmFtIGNvbnRleHQgYW4gb3B0aW9uYWwgY29udGV4dCB0
aGF0IGtub3dzIGFib3V0IHR5cGVzIHZpc2libGUgaW4gdGhlIGN1cnJlbnQgc2NvcGUgb3IgPGNv
ZGU+bnVsbDwvY29kZT4KIAkgKiB0byB1c2UgdGhlIGRlZmF1bHQgY29udGV4dCBvbmx5IHVzaW5n
IHRoZSBhdmFpbGFibGUgaW1wb3J0cy4KLQkgKiBAcmV0dXJuIHJldHVybnMgYSB0eXBlIHRvIHdo
aWNoIHRoZSB0eXBlIGJpbmRpbmcgY2FuIGJlIGFzc2lnbmVkIHRvLiBUaGUgcmV0dXJuZWQgdHlw
ZSBjb250YWlucyBpcyB1bnF1YWxpZmllZAotCSAqIHdoZW4gYW4gaW1wb3J0IGNvdWxkIGJlIGFk
ZGVkIG9yIHdhcyBhbHJlYWR5IGtub3duLiBJdCBpcyBmdWxseSBxdWFsaWZpZWQsIGlmIGFuIGlt
cG9ydCBjb25mbGljdCBwcmV2ZW50ZWQgdGhlIGltcG9ydC4KKwkgKiBAcmV0dXJuIHJldHVybnMg
ZWl0aGVyIHRoZSBzaW1wbGUgbWVtYmVyIG5hbWUgaWYgdGhlIGltcG9ydCB3YXMgc3VjY2Vzc2Z1
bCBvciBlbHNlIHRoZSBxdWFsaWZpZWQgbmFtZSBpZgorCSAqIGFuIGltcG9ydCBjb25mbGljdCBw
cmV2ZW50ZWQgdGhlIGltcG9ydC4KIAkgKi8KIAlwdWJsaWMgU3RyaW5nIGFkZEltcG9ydChJVHlw
ZUJpbmRpbmcgYmluZGluZywgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCkgewogCQlpZiAo
YmluZGluZy5pc1ByaW1pdGl2ZSgpIHx8IGJpbmRpbmcuaXNUeXBlVmFyaWFibGUoKSB8fCBiaW5k
aW5nLmlzUmVjb3ZlcmVkKCkpIHsKQEAgLTY1MSw3ICs2NTUsOCBAQAogCSAqIGluIHRoZSBjb2Rl
LiBUaGUgdHlwZSBiaW5kaW5nIGNhbiBiZSBhbiBhcnJheSBiaW5kaW5nLCB0eXBlIHZhcmlhYmxl
IG9yIHdpbGRjYXJkLgogCSAqIElmIHRoZSBiaW5kaW5nIGlzIGEgZ2VuZXJpYyB0eXBlLCB0aGUg
dHlwZSBwYXJhbWV0ZXJzIGFyZSBpZ25vcmVkLiBGb3IgcGFyYW1ldGVyaXplZCB0eXBlcywgYWxz
byB0aGUgdHlwZQogCSAqIGFyZ3VtZW50cyBhcmUgcHJvY2Vzc2VkIGFuZCBpbXBvcnRzIGFkZGVk
IGlmIG5lY2Vzc2FyeS4gQW5vbnltb3VzIHR5cGVzIGluc2lkZSB0eXBlIGFyZ3VtZW50cyBhcmUg
bm9ybWFsaXplZCB0byB0aGVpciBiYXNlIHR5cGUsIHdpbGRjYXJkCi0JICogb2Ygd2lsZGNhcmRz
IGFyZSBpZ25vcmVkLgorCSAqIG9mIHdpbGRjYXJkcyBhcmUgaWdub3JlZC4gaWYgdHlwZSBhbm5v
dGF0aW9ucyBvciB0eXBlIGFyZ3VtZW50cyBhcmUgcHJlc2VudCBhdCBhbnkgcG9pbnQsIHRoZSBp
bXBvcnQgaXMgYWRkZWQgdXAgdG8gdGhhdCBwb2ludCBhbmQgCisJICogdGhlIHR5cGUgcmV0YWlu
ZWQgZnJvbSB0aGF0IHBvaW50IHdpdGggdHlwZSBhbm5vdGF0aW9ucyBhbmQgdHlwZSBhcmd1bWVu
dHMuCiAJICogCTxwPgogIAkgKiBObyBpbXBvcnRzIGFyZSBhZGRlZCBmb3IgdHlwZXMgdGhhdCBh
cmUgYWxyZWFkeSBrbm93bi4gSWYgYSBpbXBvcnQgZm9yIGEgdHlwZSBpcyByZWNvcmRlZCB0byBi
ZSByZW1vdmVkLCB0aGlzIHJlY29yZCBpcyBkaXNjYXJkZWQgaW5zdGVhZC4KIAkgKiA8L3A+CkBA
IC02NzMsNyArNjc4LDggQEAKIAkgKiBpbiB0aGUgY29kZS4gVGhlIHR5cGUgYmluZGluZyBjYW4g
YmUgYW4gYXJyYXkgYmluZGluZywgdHlwZSB2YXJpYWJsZSBvciB3aWxkY2FyZC4KIAkgKiBJZiB0
aGUgYmluZGluZyBpcyBhIGdlbmVyaWMgdHlwZSwgdGhlIHR5cGUgcGFyYW1ldGVycyBhcmUgaWdu
b3JlZC4gRm9yIHBhcmFtZXRlcml6ZWQgdHlwZXMsIGFsc28gdGhlIHR5cGUKIAkgKiBhcmd1bWVu
dHMgYXJlIHByb2Nlc3NlZCBhbmQgaW1wb3J0cyBhZGRlZCBpZiBuZWNlc3NhcnkuIEFub255bW91
cyB0eXBlcyBpbnNpZGUgdHlwZSBhcmd1bWVudHMgYXJlIG5vcm1hbGl6ZWQgdG8gdGhlaXIgYmFz
ZSB0eXBlLCB3aWxkY2FyZAotCSAqIG9mIHdpbGRjYXJkcyBhcmUgaWdub3JlZC4KKwkgKiBvZiB3
aWxkY2FyZHMgYXJlIGlnbm9yZWQuIGlmIHR5cGUgYW5ub3RhdGlvbnMgb3IgdHlwZSBhcmd1bWVu
dHMgYXJlIHByZXNlbnQgYXQgYW55IHBvaW50LCB0aGUgaW1wb3J0IGlzIGFkZGVkIHVwIHRvIHRo
YXQgcG9pbnQgYW5kIAorCSAqIHRoZSB0eXBlIHJldGFpbmVkIGZyb20gdGhhdCBwb2ludCB3aXRo
IHR5cGUgYW5ub3RhdGlvbnMgYW5kIHR5cGUgYXJndW1lbnRzCiAJICogCTxwPgogIAkgKiBObyBp
bXBvcnRzIGFyZSBhZGRlZCBmb3IgdHlwZXMgdGhhdCBhcmUgYWxyZWFkeSBrbm93bi4gSWYgYSBp
bXBvcnQgZm9yIGEgdHlwZSBpcyByZWNvcmRlZCB0byBiZSByZW1vdmVkLCB0aGlzIHJlY29yZCBp
cyBkaXNjYXJkZWQgaW5zdGVhZC4KIAkgKiA8L3A+CkBAIC02ODksNiArNjk1LDEwIEBACiAJICog
d2hlbiBhbiBpbXBvcnQgY291bGQgYmUgYWRkZWQgb3Igd2FzIGFscmVhZHkga25vd24uIEl0IGlz
IGZ1bGx5IHF1YWxpZmllZCwgaWYgYW4gaW1wb3J0IGNvbmZsaWN0IHByZXZlbnRlZCB0aGUgaW1w
b3J0LgogCSAqLwogCXB1YmxpYyBUeXBlIGFkZEltcG9ydChJVHlwZUJpbmRpbmcgYmluZGluZywg
QVNUIGFzdCwgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCkgeworCQlJVHlwZUJpbmRpbmcg
YmluZGluZ1BvaW50ID0gY2hlY2tBbm5vdGF0aW9uQW5kR2VuZXJpY3MoYmluZGluZyk7CisJCWlm
IChiaW5kaW5nUG9pbnQgIT0gbnVsbCkgeworCQkJcmV0dXJuIGNyZWF0ZVR5cGUoYmluZGluZywg
YmluZGluZ1BvaW50LCBhc3QsIGNvbnRleHQpOworCQl9CiAJCWlmIChiaW5kaW5nLmlzUHJpbWl0
aXZlKCkpIHsKIAkJCXJldHVybiBhc3QubmV3UHJpbWl0aXZlVHlwZShQcmltaXRpdmVUeXBlLnRv
Q29kZShiaW5kaW5nLmdldE5hbWUoKSkpOwogCQl9CkBAIC03NDMsOCArNzUzLDggQEAKIAogCiAJ
LyoqCi0JICogQWRkcyBhIG5ldyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCBy
ZXR1cm5zIGEgdHlwZSByZWZlcmVuY2UgdGhhdCBjYW4gYmUgdXNlZAotCSAqIGluIHRoZSBjb2Rl
LiBUaGUgdHlwZSBiaW5kaW5nIGNhbiBvbmx5IGJlIGFuIGFycmF5IG9yIG5vbi1nZW5lcmljIHR5
cGUuCisJICogQWRkcyBhIG5ldyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCBy
ZXR1cm5zIGEgbmFtZSAtIHNpbmdsZSBtZW1iZXIgbmFtZSBpZgorCSAqIGltcG9ydCBpcyBzdWNj
ZXNzZnVsLCBlbHNlIHF1YWxpZmllZCBuYW1lLiBUaGUgdHlwZSBiaW5kaW5nIGNhbiBvbmx5IGJl
IGFuIGFycmF5IG9yIG5vbi1nZW5lcmljIHR5cGUuCiAJICogCTxwPgogIAkgKiBObyBpbXBvcnRz
IGFyZSBhZGRlZCBmb3IgdHlwZXMgdGhhdCBhcmUgYWxyZWFkeSBrbm93bi4gSWYgYSBpbXBvcnQg
Zm9yIGEgdHlwZSBpcyByZWNvcmRlZCB0byBiZSByZW1vdmVkLCB0aGlzIHJlY29yZCBpcyBkaXNj
YXJkZWQgaW5zdGVhZC4KIAkgKiA8L3A+CkBAIC03NTUsOCArNzY1LDggQEAKIAkgKiBAcGFyYW0g
cXVhbGlmaWVkVHlwZU5hbWUgdGhlIHF1YWxpZmllZCB0eXBlIG5hbWUgb2YgdGhlIHR5cGUgdG8g
YmUgYWRkZWQKIAkgKiBAcGFyYW0gY29udGV4dCBhbiBvcHRpb25hbCBjb250ZXh0IHRoYXQga25v
d3MgYWJvdXQgdHlwZXMgdmlzaWJsZSBpbiB0aGUgY3VycmVudCBzY29wZSBvciA8Y29kZT5udWxs
PC9jb2RlPgogCSAqIHRvIHVzZSB0aGUgZGVmYXVsdCBjb250ZXh0IG9ubHkgdXNpbmcgdGhlIGF2
YWlsYWJsZSBpbXBvcnRzLgotCSAqIEByZXR1cm4gcmV0dXJucyBhIHR5cGUgdG8gd2hpY2ggdGhl
IHR5cGUgYmluZGluZyBjYW4gYmUgYXNzaWduZWQgdG8uIFRoZSByZXR1cm5lZCB0eXBlIGNvbnRh
aW5zIGlzIHVucXVhbGlmaWVkCi0JICogd2hlbiBhbiBpbXBvcnQgY291bGQgYmUgYWRkZWQgb3Ig
d2FzIGFscmVhZHkga25vd24uIEl0IGlzIGZ1bGx5IHF1YWxpZmllZCwgaWYgYW4gaW1wb3J0IGNv
bmZsaWN0IHByZXZlbnRlZCB0aGUgaW1wb3J0LgorCSAqIEByZXR1cm4gcmV0dXJucyBlaXRoZXIg
dGhlIHNpbXBsZSBtZW1iZXIgbmFtZSBpZiB0aGUgaW1wb3J0IHdhcyBzdWNjZXNzZnVsIG9yIGVs
c2UgdGhlIHF1YWxpZmllZCBuYW1lIGlmCisJICogYW4gaW1wb3J0IGNvbmZsaWN0IHByZXZlbnRl
ZCB0aGUgaW1wb3J0LgogCSAqLwogCXB1YmxpYyBTdHJpbmcgYWRkSW1wb3J0KFN0cmluZyBxdWFs
aWZpZWRUeXBlTmFtZSwgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCkgewogCQlpbnQgYW5n
bGVCcmFja2V0T2Zmc2V0PSBxdWFsaWZpZWRUeXBlTmFtZS5pbmRleE9mKCc8Jyk7CkBAIC03NzEs
OCArNzgxLDggQEAKIAl9CiAKIAkvKioKLQkgKiBBZGRzIGEgbmV3IGltcG9ydCB0byB0aGUgcmV3
cml0ZXIncyByZWNvcmQgYW5kIHJldHVybnMgYSB0eXBlIHJlZmVyZW5jZSB0aGF0IGNhbiBiZSB1
c2VkCi0JICogaW4gdGhlIGNvZGUuIFRoZSB0eXBlIGJpbmRpbmcgY2FuIG9ubHkgYmUgYW4gYXJy
YXkgb3Igbm9uLWdlbmVyaWMgdHlwZS4KKwkgKiBBZGRzIGEgbmV3IGltcG9ydCB0byB0aGUgcmV3
cml0ZXIncyByZWNvcmQgYW5kIHJldHVybnMgYSBuYW1lIC0gc2luZ2xlIG1lbWJlciBuYW1lIGlm
CisJICogaW1wb3J0IGlzIHN1Y2Nlc3NmdWwsIGVsc2UgcXVhbGlmaWVkIG5hbWUuIFRoZSB0eXBl
IGJpbmRpbmcgY2FuIG9ubHkgYmUgYW4gYXJyYXkgb3Igbm9uLWdlbmVyaWMgdHlwZS4KIAkgKiAJ
PHA+CiAgCSAqIE5vIGltcG9ydHMgYXJlIGFkZGVkIGZvciB0eXBlcyB0aGF0IGFyZSBhbHJlYWR5
IGtub3duLiBJZiBhIGltcG9ydCBmb3IgYSB0eXBlIGlzIHJlY29yZGVkIHRvIGJlIHJlbW92ZWQs
IHRoaXMgcmVjb3JkIGlzIGRpc2NhcmRlZCBpbnN0ZWFkLgogCSAqIDwvcD4KQEAgLTc4MSwxNyAr
NzkxLDE2IEBACiAJICogaW4gYW55IHdheSBieSB0aGlzIG1ldGhvZDsgcmF0aGVyLCB0aGUgcmV3
cml0ZXIganVzdCByZWNvcmRzIHRoYXQgYSBuZXcgaW1wb3J0IGhhcyBiZWVuIGFkZGVkLgogCSAq
IDwvcD4KIAkgKiBAcGFyYW0gcXVhbGlmaWVkVHlwZU5hbWUgdGhlIHF1YWxpZmllZCB0eXBlIG5h
bWUgb2YgdGhlIHR5cGUgdG8gYmUgYWRkZWQKLQkgKiBAcmV0dXJuIHJldHVybnMgYSB0eXBlIHRv
IHdoaWNoIHRoZSB0eXBlIGJpbmRpbmcgY2FuIGJlIGFzc2lnbmVkIHRvLiBUaGUgcmV0dXJuZWQg
dHlwZSBjb250YWlucyBpcyB1bnF1YWxpZmllZAotCSAqIHdoZW4gYW4gaW1wb3J0IGNvdWxkIGJl
IGFkZGVkIG9yIHdhcyBhbHJlYWR5IGtub3duLiBJdCBpcyBmdWxseSBxdWFsaWZpZWQsIGlmIGFu
IGltcG9ydCBjb25mbGljdCBwcmV2ZW50ZWQgdGhlIGltcG9ydC4KKwkgKiBAcmV0dXJuIHJldHVy
bnMgZWl0aGVyIHRoZSBzaW1wbGUgbWVtYmVyIG5hbWUgaWYgdGhlIGltcG9ydCB3YXMgc3VjY2Vz
c2Z1bCBvciBlbHNlIHRoZSBxdWFsaWZpZWQgbmFtZSBpZgorCSAqIGFuIGltcG9ydCBjb25mbGlj
dCBwcmV2ZW50ZWQgdGhlIGltcG9ydC4KIAkgKi8KIAlwdWJsaWMgU3RyaW5nIGFkZEltcG9ydChT
dHJpbmcgcXVhbGlmaWVkVHlwZU5hbWUpIHsKIAkJcmV0dXJuIGFkZEltcG9ydChxdWFsaWZpZWRU
eXBlTmFtZSwgdGhpcy5kZWZhdWx0Q29udGV4dCk7CiAJfQogCiAJLyoqCi0JICogQWRkcyBhIG5l
dyBzdGF0aWMgaW1wb3J0IHRvIHRoZSByZXdyaXRlcidzIHJlY29yZCBhbmQgcmV0dXJucyBhIHJl
ZmVyZW5jZSB0aGF0IGNhbiBiZSB1c2VkIGluIHRoZSBjb2RlLiBUaGUgcmVmZXJlbmNlIHdpbGwK
LQkgKiBiZSBmdWxseSBxdWFsaWZpZWQgaWYgYW4gaW1wb3J0IGNvbmZsaWN0IHByZXZlbnRlZCB0
aGUgaW1wb3J0IG9yIHVucXVhbGlmaWVkIGlmIHRoZSBpbXBvcnQgc3VjY2VlZGVkIG9yIHdhcyBh
bHJlYWR5Ci0JICogZXhpc3RpbmcuCisJICogQWRkcyBhIG5ldyBzdGF0aWMgaW1wb3J0IHRvIHRo
ZSByZXdyaXRlcidzIHJlY29yZCBhbmQgcmV0dXJucyByZXR1cm5zIGEgbmFtZSAtIHNpbmdsZSBt
ZW1iZXIgbmFtZSBpZgorCSAqIGltcG9ydCBpcyBzdWNjZXNzZnVsLCBlbHNlIHF1YWxpZmllZCBu
YW1lLgogCSAqIAk8cD4KICAJICogTm8gaW1wb3J0cyBhcmUgYWRkZWQgZm9yIG1lbWJlcnMgdGhh
dCBhcmUgYWxyZWFkeSBrbm93bi4gSWYgYSBpbXBvcnQgZm9yIGEgdHlwZSBpcyByZWNvcmRlZCB0
byBiZSByZW1vdmVkLCB0aGlzIHJlY29yZCBpcyBkaXNjYXJkZWQgaW5zdGVhZC4KIAkgKiA8L3A+
CkBAIC04MTAsOSArODE5LDggQEAKIAl9CiAKIAkvKioKLQkgKiBBZGRzIGEgbmV3IHN0YXRpYyBp
bXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRo
YXQgY2FuIGJlIHVzZWQgaW4gdGhlIGNvZGUuIFRoZSByZWZlcmVuY2Ugd2lsbAotCSAqIGJlIGZ1
bGx5IHF1YWxpZmllZCBpZiBhbiBpbXBvcnQgY29uZmxpY3QgcHJldmVudGVkIHRoZSBpbXBvcnQg
b3IgdW5xdWFsaWZpZWQgaWYgdGhlIGltcG9ydCBzdWNjZWVkZWQgb3Igd2FzIGFscmVhZHkKLQkg
KiBleGlzdGluZy4KKwkgKiBBZGRzIGEgbmV3IHN0YXRpYyBpbXBvcnQgdG8gdGhlIHJld3JpdGVy
J3MgcmVjb3JkIGFuZCByZXR1cm5zIGEgbmFtZSAtIHNpbmdsZSBtZW1iZXIgbmFtZSBpZgorCSAq
IGltcG9ydCBpcyBzdWNjZXNzZnVsLCBlbHNlIHF1YWxpZmllZCBuYW1lLgogCSAqIAk8cD4KICAJ
ICogTm8gaW1wb3J0cyBhcmUgYWRkZWQgZm9yIG1lbWJlcnMgdGhhdCBhcmUgYWxyZWFkeSBrbm93
bi4gSWYgYSBpbXBvcnQgZm9yIGEgdHlwZSBpcyByZWNvcmRlZCB0byBiZSByZW1vdmVkLCB0aGlz
IHJlY29yZCBpcyBkaXNjYXJkZWQgaW5zdGVhZC4KIAkgKiA8L3A+CkBAIC04NDUsOSArODUzLDgg
QEAKIAl9CiAKIAkvKioKLQkgKiBBZGRzIGEgbmV3IHN0YXRpYyBpbXBvcnQgdG8gdGhlIHJld3Jp
dGVyJ3MgcmVjb3JkIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRoYXQgY2FuIGJlIHVzZWQgaW4g
dGhlIGNvZGUuIFRoZSByZWZlcmVuY2Ugd2lsbAotCSAqIGJlIGZ1bGx5IHF1YWxpZmllZCBpZiBh
biBpbXBvcnQgY29uZmxpY3QgcHJldmVudGVkIHRoZSBpbXBvcnQgb3IgdW5xdWFsaWZpZWQgaWYg
dGhlIGltcG9ydCBzdWNjZWVkZWQgb3Igd2FzIGFscmVhZHkKLQkgKiBleGlzdGluZy4KKwkgKiBB
ZGRzIGEgbmV3IHN0YXRpYyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCByZXR1
cm5zIGEgbmFtZSAtIHNpbmdsZSBtZW1iZXIgbmFtZSBpZgorCSAqIGltcG9ydCBpcyBzdWNjZXNz
ZnVsLCBlbHNlIHF1YWxpZmllZCBuYW1lLgogCSAqIAk8cD4KICAJICogTm8gaW1wb3J0cyBhcmUg
YWRkZWQgZm9yIG1lbWJlcnMgdGhhdCBhcmUgYWxyZWFkeSBrbm93bi4gSWYgYSBpbXBvcnQgZm9y
IGEgdHlwZSBpcyByZWNvcmRlZCB0byBiZSByZW1vdmVkLCB0aGlzIHJlY29yZCBpcyBkaXNjYXJk
ZWQgaW5zdGVhZC4KIAkgKiA8L3A+CkBAIC04NjcsOSArODc0LDggQEAKIAl9CiAKIAkvKioKLQkg
KiBBZGRzIGEgbmV3IHN0YXRpYyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCBy
ZXR1cm5zIGEgcmVmZXJlbmNlIHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIGNvZGUuIFRoZSByZWZl
cmVuY2Ugd2lsbAotCSAqIGJlIGZ1bGx5IHF1YWxpZmllZCBpZiBhbiBpbXBvcnQgY29uZmxpY3Qg
cHJldmVudGVkIHRoZSBpbXBvcnQgb3IgdW5xdWFsaWZpZWQgaWYgdGhlIGltcG9ydCBzdWNjZWVk
ZWQgb3Igd2FzIGFscmVhZHkKLQkgKiBleGlzdGluZy4KKwkgKiBBZGRzIGEgbmV3IHN0YXRpYyBp
bXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkIGFuZCByZXR1cm5zIGEgbmFtZSAtIHNpbmds
ZSBtZW1iZXIgbmFtZSBpZgorCSAqIGltcG9ydCBpcyBzdWNjZXNzZnVsLCBlbHNlIHF1YWxpZmll
ZCBuYW1lLgogCSAqIAk8cD4KICAJICogTm8gaW1wb3J0cyBhcmUgYWRkZWQgZm9yIG1lbWJlcnMg
dGhhdCBhcmUgYWxyZWFkeSBrbm93bi4gSWYgYSBpbXBvcnQgZm9yIGEgdHlwZSBpcyByZWNvcmRl
ZCB0byBiZSByZW1vdmVkLCB0aGlzIHJlY29yZCBpcyBkaXNjYXJkZWQgaW5zdGVhZC4KIAkgKiA8
L3A+CkBAIC0xMTU4LDQgKzExNjQsMjE3IEBACiAJCXJldHVybiAoU3RyaW5nW10pIHJlcy50b0Fy
cmF5KG5ldyBTdHJpbmdbcmVzLnNpemUoKV0pOwogCX0KIAotfQorCXByaXZhdGUgSVR5cGVCaW5k
aW5nIGNoZWNrQW5ub3RhdGlvbkFuZEdlbmVyaWNzKElUeXBlQmluZGluZyBiaW5kaW5nKSB7CisJ
CUlUeXBlQmluZGluZyBiaW5kaW5nUG9pbnQgPSBudWxsOworCQl3aGlsZSAoYmluZGluZyAhPSBu
dWxsKSB7CisJCQlJQW5ub3RhdGlvbkJpbmRpbmcgYW5ub3RhdGlvbkJpbmRpbmcgW10gPSBiaW5k
aW5nLmdldFR5cGVBbm5vdGF0aW9ucygpOworCQkJSVR5cGVCaW5kaW5nIFtdICB0eXBlQXJndW1l
bnRzID0gYmluZGluZy5nZXRUeXBlQXJndW1lbnRzKCk7CisJCQlpZiAoKGFubm90YXRpb25CaW5k
aW5nICE9IG51bGwgJiYgYW5ub3RhdGlvbkJpbmRpbmcubGVuZ3RoID4gMCkgfHwKKwkJCQkJKHR5
cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlQXJndW1lbnRzLmxlbmd0aCA+IDApKSB7CisJCQkJ
YmluZGluZ1BvaW50ID0gYmluZGluZzsKKwkJCX0KKwkJCWlmIChiaW5kaW5nLmlzTWVtYmVyKCkp
IHsKKwkJCQliaW5kaW5nID0gYmluZGluZy5nZXREZWNsYXJpbmdDbGFzcygpOworCQkJfSBlbHNl
IHsKKwkJCQlicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gYmluZGluZ1BvaW50OworCX0KKwor
CXByaXZhdGUgVHlwZSBjcmVhdGVUeXBlKElUeXBlQmluZGluZyBiaW5kaW5nLCBJVHlwZUJpbmRp
bmcgYmluZGluZ1BvaW50LCBBU1QgYXN0LCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7
CisJCVN0cmluZyBzdHIgPSBhZGRJbXBvcnQoYmluZGluZ1BvaW50LCBjb250ZXh0KTsKKwkJaW50
IGRvdEluZGV4ID0gc3RyICE9IG51bGwgPyBzdHIubGFzdEluZGV4T2YoJy4nKSA6IC0xOworCQlU
eXBlIHF1YWxpZmllciA9IG51bGw7CisJCWlmIChkb3RJbmRleCAhPSAtMSkgeworCQkJY2hhciBi
dWYgW10gPSBuZXcgY2hhciBbZG90SW5kZXhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBkb3RJ
bmRleDsgKytpKQorCQkJCWJ1ZltpXSA9IHN0ci5jaGFyQXQoaSk7CisJCQlzdHIgPSBuZXcgU3Ry
aW5nKGJ1Zik7CisJCQlxdWFsaWZpZXIgPSBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShz
dHIpKTsKKwkJfQorCQlyZXR1cm4gY3JlYXRlVHlwZShiaW5kaW5nLCBiaW5kaW5nUG9pbnQsIGFz
dCwgcXVhbGlmaWVyLCBjb250ZXh0KTsKKwl9CisKKwlwcml2YXRlIFR5cGUgY3JlYXRlVHlwZShJ
VHlwZUJpbmRpbmcgYmluZGluZywgSVR5cGVCaW5kaW5nIGJpbmRpbmdQb2ludCwgQVNUIGFzdCwg
VHlwZSBxdWFsaWZpZXIsIEltcG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQpIHsKKwkJVHlwZSB0
eXBlID0gbnVsbDsKKwkJaWYgKGJpbmRpbmcuZXF1YWxzKGJpbmRpbmdQb2ludCkpIHsKKwkJCXR5
cGUgPSBjcmVhdGVUeXBlKHF1YWxpZmllciwgYmluZGluZywgYXN0LCBjb250ZXh0KTsKKwkJfSBl
bHNlIHsKKwkJCVR5cGUgY3VycmVudFR5cGUgPSBiaW5kaW5nLmlzTWVtYmVyKCkgPyBjcmVhdGVU
eXBlKGJpbmRpbmcuZ2V0RGVjbGFyaW5nQ2xhc3MoKSwgYmluZGluZ1BvaW50LCBhc3QsIHF1YWxp
ZmllciwgY29udGV4dCkgOiBudWxsOworCQkJdHlwZSA9IGNyZWF0ZVR5cGUoY3VycmVudFR5cGUs
IGJpbmRpbmcsIGFzdCwgY29udGV4dCk7CisJCX0KKwkJSUFubm90YXRpb25CaW5kaW5nIFtdIGFu
bm90YXRpb25CaW5kaW5ncyA9IGJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWlmIChh
bm5vdGF0aW9uQmluZGluZ3MgIT0gbnVsbCAmJiBhbm5vdGF0aW9uQmluZGluZ3MubGVuZ3RoID4g
MCkgeworCQkJQW5ub3RhdGFibGVUeXBlIGFUeXBlID0gdHlwZSBpbnN0YW5jZW9mIEFubm90YXRh
YmxlVHlwZSA/IChBbm5vdGF0YWJsZVR5cGUpIHR5cGUgOiAKKwkJCQl0eXBlIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZFR5cGUgPyAoQW5ub3RhdGFibGVUeXBlKSAoKFBhcmFtZXRlcml6ZWRUeXBl
KSB0eXBlKS5nZXRUeXBlKCkgOiBudWxsOworCQkJaWYgKGFUeXBlICE9IG51bGwpCisJCQkJYW5u
b3RhdGVUeXBlKGFUeXBlLCBhbm5vdGF0aW9uQmluZGluZ3MsIGFzdCwgY29udGV4dCk7CisJCX0K
KwkJcmV0dXJuIHR5cGU7CisJfQorCisJcHJpdmF0ZSBUeXBlIGNyZWF0ZVR5cGUoVHlwZSBjdXJy
ZW50VHlwZSwgSVR5cGVCaW5kaW5nIGJpbmRpbmcsIEFTVCBhc3QsIEltcG9ydFJld3JpdGVDb250
ZXh0IGNvbnRleHQpIHsKKworCQlpZiAoYmluZGluZy5pc1ByaW1pdGl2ZSgpKSB7CisJCQlyZXR1
cm4gYXN0Lm5ld1ByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZS50b0NvZGUoYmluZGluZy5nZXRO
YW1lKCkpKTsKKwkJfQorCisJCUlUeXBlQmluZGluZyBub3JtYWxpemVkQmluZGluZyA9IG5vcm1h
bGl6ZVR5cGVCaW5kaW5nKGJpbmRpbmcpOworCQlpZiAobm9ybWFsaXplZEJpbmRpbmcgPT0gbnVs
bCkgeworCQkJcmV0dXJuIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdTaW1wbGVOYW1lKCJpbnZh
bGlkIikpOyAvLyROT04tTkxTLTEkCisJCX0KKworCQlpZiAobm9ybWFsaXplZEJpbmRpbmcuaXNU
eXBlVmFyaWFibGUoKSkgeworCQkJaWYgKGN1cnJlbnRUeXBlICE9IG51bGwpIHsKKwkJCQlyZXR1
cm4gYXN0Lm5ld1F1YWxpZmllZFR5cGUoY3VycmVudFR5cGUsIGFzdC5uZXdTaW1wbGVOYW1lKGJp
bmRpbmcuZ2V0TmFtZSgpKSk7CisJCQl9CisJCQlyZXR1cm4gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0
Lm5ld1NpbXBsZU5hbWUoYmluZGluZy5nZXROYW1lKCkpKTsKKwkJfQorCisJCWlmIChub3JtYWxp
emVkQmluZGluZy5pc1dpbGRjYXJkVHlwZSgpKSB7CisJCQlXaWxkY2FyZFR5cGUgd2NUeXBlID0g
YXN0Lm5ld1dpbGRjYXJkVHlwZSgpOworCQkJSVR5cGVCaW5kaW5nIGJvdW5kID0gbm9ybWFsaXpl
ZEJpbmRpbmcuZ2V0Qm91bmQoKTsKKwkJCWlmIChib3VuZCAhPSBudWxsICYmICFib3VuZC5pc1dp
bGRjYXJkVHlwZSgpICYmICFib3VuZC5pc0NhcHR1cmUoKSkgeworCQkJCVR5cGUgYm91bmRUeXBl
ID0gY3JlYXRlVHlwZShib3VuZCwgbnVsbCwgYXN0LCAoVHlwZSkgbnVsbCwgY29udGV4dCk7CisJ
CQkJd2NUeXBlLnNldEJvdW5kKGJvdW5kVHlwZSwgbm9ybWFsaXplZEJpbmRpbmcuaXNVcHBlcmJv
dW5kKCkpOworCQkJfQorCQkJcmV0dXJuIHdjVHlwZTsKKwkJfQorCisJCWlmIChub3JtYWxpemVk
QmluZGluZy5pc0FycmF5KCkpIHsKKwkJCVR5cGUgZWxlbWVudFR5cGUgPSBjcmVhdGVUeXBlKGN1
cnJlbnRUeXBlLCBub3JtYWxpemVkQmluZGluZy5nZXRFbGVtZW50VHlwZSgpLCBhc3QsIGNvbnRl
eHQpOworCQkJcmV0dXJuIGFzdC5uZXdBcnJheVR5cGUoZWxlbWVudFR5cGUsIG5vcm1hbGl6ZWRC
aW5kaW5nLmdldERpbWVuc2lvbnMoKSk7CisJCX0KKworCQlpZiAobm9ybWFsaXplZEJpbmRpbmcu
aXNQYXJhbWV0ZXJpemVkVHlwZSgpKSB7CisJCQlJVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRz
ID0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0VHlwZUFyZ3VtZW50cygpOworCQkJaWYgKHR5cGVBcmd1
bWVudHMubGVuZ3RoID4gMCkgeworCQkJCVR5cGUgZXJhc3VyZVR5cGUgPSBjdXJyZW50VHlwZSA9
PSBudWxsID8gKFR5cGUpIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdOYW1lKGdldFJhd05hbWUo
bm9ybWFsaXplZEJpbmRpbmcpKSkgOgorCQkJCQkJCShUeXBlKSBhc3QubmV3UXVhbGlmaWVkVHlw
ZShjdXJyZW50VHlwZSwgYXN0Lm5ld1NpbXBsZU5hbWUoZ2V0UmF3TmFtZShub3JtYWxpemVkQmlu
ZGluZykpKTsKKwkJCQlQYXJhbWV0ZXJpemVkVHlwZSBwYXJhbVR5cGUgPSBhc3QubmV3UGFyYW1l
dGVyaXplZFR5cGUoZXJhc3VyZVR5cGUpOworCQkJCUxpc3QgYXJndW1lbnRzID0gcGFyYW1UeXBl
LnR5cGVBcmd1bWVudHMoKTsKKwkJCQlmb3IgKGludCBpID0gMDsgaSA8IHR5cGVBcmd1bWVudHMu
bGVuZ3RoOyBpKyspIHsKKwkJCQkJSVR5cGVCaW5kaW5nIGN1cnIgPSB0eXBlQXJndW1lbnRzW2ld
OworCQkJCQlpZiAoY29udGFpbnNOZXN0ZWRDYXB0dXJlKGN1cnIsIGZhbHNlKSkgeyAvLyBzZWUg
YnVnIDEwMzA0NAorCQkJCQkJYXJndW1lbnRzLmFkZChhc3QubmV3V2lsZGNhcmRUeXBlKCkpOwor
CQkJCQl9IGVsc2UgeworCQkJCQkJYXJndW1lbnRzLmFkZChhZGRJbXBvcnQoY3VyciwgYXN0LCBj
b250ZXh0KSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIHBhcmFtVHlwZTsKKwkJCX0KKwkJ
fQorCisJCWlmIChjdXJyZW50VHlwZSAhPSBudWxsKSB7CisJCQlpZiAoY3VycmVudFR5cGUgaW5z
dGFuY2VvZiBBbm5vdGF0YWJsZVR5cGUpIHsKKwkJCQlBbm5vdGF0YWJsZVR5cGUgYW5ub3RhdGFi
bGVUeXBlID0gKEFubm90YXRhYmxlVHlwZSkgY3VycmVudFR5cGU7CisJCQkJTGlzdCBhbm5vdGF0
aW9ucyA9IGFubm90YXRhYmxlVHlwZS5hbm5vdGF0aW9ucygpOworCQkJCWlmIChhbm5vdGF0aW9u
cyA9PSBudWxsIHx8IGFubm90YXRpb25zLnNpemUoKSA9PSAwKSB7CisJCQkJCU5hbWUgcXVhbGlm
aWVyTmFtZSA9IGFzdC5uZXdOYW1lKGN1cnJlbnRUeXBlLnRvU3RyaW5nKCkpOworCQkJCQlyZXR1
cm4gYXN0Lm5ld05hbWVRdWFsaWZpZWRUeXBlKHF1YWxpZmllck5hbWUsIGFzdC5uZXdTaW1wbGVO
YW1lKGdldFJhd05hbWUobm9ybWFsaXplZEJpbmRpbmcpKSk7CisJCQkJfQorCQkJfQorCQkJcmV0
dXJuIGFzdC5uZXdRdWFsaWZpZWRUeXBlKGN1cnJlbnRUeXBlLCBhc3QubmV3U2ltcGxlTmFtZShn
ZXRSYXdOYW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCQl9CisJCXJldHVybiBhc3QubmV3U2lt
cGxlVHlwZShhc3QubmV3TmFtZShnZXRSYXdOYW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCX0K
KworCXByaXZhdGUgdm9pZCBhbm5vdGF0ZVR5cGUoQW5ub3RhdGFibGVUeXBlIHR5cGUsIElBbm5v
dGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9uQmluZGluZ3MsIEFTVCBhc3QsIEltcG9ydFJld3Jp
dGVDb250ZXh0IGNvbnRleHQpIHsKKwkJZm9yIChpbnQgaSA9IDA7IGk8IGFubm90YXRpb25CaW5k
aW5ncy5sZW5ndGg7IGkrKykgeworCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gbmV3QW5ub3Rh
dGlvbihhc3QsIGFubm90YXRpb25CaW5kaW5nc1tpXSwgY29udGV4dCk7CisJCQlpZiAoYW5ub3Rh
dGlvbiAhPSBudWxsKSB0eXBlLmFubm90YXRpb25zKCkuYWRkKGFubm90YXRpb24pOworCQl9CisJ
fQorCisJcHJpdmF0ZSBBbm5vdGF0aW9uIG5ld0Fubm90YXRpb24oQVNUIGFzdCwgSUFubm90YXRp
b25CaW5kaW5nIGFubm90YXRpb24sIEltcG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQpIHsKKwkJ
VHlwZSB0eXBlID0gY3JlYXRlVHlwZSgoVHlwZSkgbnVsbCwgYW5ub3RhdGlvbi5nZXRBbm5vdGF0
aW9uVHlwZSgpLCBhc3QsIGNvbnRleHQpOworCQlOYW1lIG5hbWU7CisJCWlmICh0eXBlIGluc3Rh
bmNlb2YgU2ltcGxlVHlwZSkgeworCQkJU2ltcGxlVHlwZSBzaW1wbGVUeXBlID0gKFNpbXBsZVR5
cGUpIHR5cGU7CisJCQluYW1lID0gc2ltcGxlVHlwZS5nZXROYW1lKCk7CisJCQlzaW1wbGVUeXBl
LnNldE5hbWUoYXN0Lm5ld1NpbXBsZU5hbWUobmFtZS50b1N0cmluZygpKSk7CisJCX0gZWxzZSB7
CisJCQluYW1lID0gYXN0Lm5ld05hbWUodHlwZS50b1N0cmluZygpKTsKKwkJfQorCisJCUlNZW1i
ZXJWYWx1ZVBhaXJCaW5kaW5nW10gbXZwcz0gYW5ub3RhdGlvbi5nZXREZWNsYXJlZE1lbWJlclZh
bHVlUGFpcnMoKTsKKwkJaWYgKG12cHMubGVuZ3RoID09IDApIHsKKwkJCU1hcmtlckFubm90YXRp
b24gcmVzdWx0ID0gYXN0Lm5ld01hcmtlckFubm90YXRpb24oKTsKKwkJCXJlc3VsdC5zZXRUeXBl
TmFtZShuYW1lKTsKKwkJCXJldHVybiByZXN1bHQ7CisJCX0gZWxzZSBpZiAobXZwcy5sZW5ndGgg
PT0gMSAmJiAidmFsdWUiLmVxdWFscyhtdnBzWzBdLmdldE5hbWUoKSkpIHsgLy8kTk9OLU5MUy0x
JAorCQkJU2luZ2xlTWVtYmVyQW5ub3RhdGlvbiByZXN1bHQ9IGFzdC5uZXdTaW5nbGVNZW1iZXJB
bm5vdGF0aW9uKCk7CisJCQlyZXN1bHQuc2V0VHlwZU5hbWUobmFtZSk7CisJCQlPYmplY3QgdmFs
dWUgPSBtdnBzWzBdLmdldFZhbHVlKCk7CisJCQlpZiAodmFsdWUgIT0gbnVsbCkKKwkJCQlyZXN1
bHQuc2V0VmFsdWUobmV3QW5ub3RhdGlvblZhbHVlKGFzdCwgIHZhbHVlLCBjb250ZXh0KSk7CisJ
CQlyZXR1cm4gcmVzdWx0OworCQl9IGVsc2UgeworCQkJTm9ybWFsQW5ub3RhdGlvbiByZXN1bHQg
PSBhc3QubmV3Tm9ybWFsQW5ub3RhdGlvbigpOworCQkJcmVzdWx0LnNldFR5cGVOYW1lKG5hbWUp
OworCQkJZm9yIChpbnQgaT0gMDsgaSA8IG12cHMubGVuZ3RoOyBpKyspIHsKKwkJCQlJTWVtYmVy
VmFsdWVQYWlyQmluZGluZyBtdnAgPSBtdnBzW2ldOworCQkJCU1lbWJlclZhbHVlUGFpciBtdnBO
b2RlID0gYXN0Lm5ld01lbWJlclZhbHVlUGFpcigpOworCQkJCW12cE5vZGUuc2V0TmFtZShhc3Qu
bmV3U2ltcGxlTmFtZShtdnAuZ2V0TmFtZSgpKSk7CisJCQkJT2JqZWN0IHZhbHVlID0gbXZwLmdl
dFZhbHVlKCk7CisJCQkJaWYgKHZhbHVlICE9IG51bGwpCisJCQkJCW12cE5vZGUuc2V0VmFsdWUo
bmV3QW5ub3RhdGlvblZhbHVlKGFzdCwgdmFsdWUsIGNvbnRleHQpKTsKKwkJCQlyZXN1bHQudmFs
dWVzKCkuYWRkKG12cE5vZGUpOworCQkJfQorCQkJcmV0dXJuIHJlc3VsdDsKKwkJfQorCX0KKwor
CXByaXZhdGUgRXhwcmVzc2lvbiBuZXdBbm5vdGF0aW9uVmFsdWUoQVNUIGFzdCwgT2JqZWN0IHZh
bHVlLCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CisJCWlmICh2YWx1ZSBpbnN0YW5j
ZW9mIEJvb2xlYW4pIHsKKwkJCXJldHVybiBhc3QubmV3Qm9vbGVhbkxpdGVyYWwoKChCb29sZWFu
KSB2YWx1ZSkuYm9vbGVhblZhbHVlKCkpOworCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2Yg
Qnl0ZSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFNob3J0IHx8IHZhbHVlIGluc3RhbmNlb2YgSW50ZWdl
ciB8fCB2YWx1ZSBpbnN0YW5jZW9mIExvbmcKKwkJCQl8fCB2YWx1ZSBpbnN0YW5jZW9mIEZsb2F0
IHx8IHZhbHVlIGluc3RhbmNlb2YgRG91YmxlKSB7CisJCQlyZXR1cm4gYXN0Lm5ld051bWJlckxp
dGVyYWwodmFsdWUudG9TdHJpbmcoKSk7CisJCX0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBD
aGFyYWN0ZXIpIHsKKwkJCUNoYXJhY3RlckxpdGVyYWwgcmVzdWx0ID0gYXN0Lm5ld0NoYXJhY3Rl
ckxpdGVyYWwoKTsKKwkJCXJlc3VsdC5zZXRDaGFyVmFsdWUoKChDaGFyYWN0ZXIpIHZhbHVlKS5j
aGFyVmFsdWUoKSk7CisJCQlyZXR1cm4gcmVzdWx0OworCQl9IGVsc2UgaWYgKHZhbHVlIGluc3Rh
bmNlb2YgSVR5cGVCaW5kaW5nKSB7CisJCQlUeXBlTGl0ZXJhbCByZXN1bHQgPSBhc3QubmV3VHlw
ZUxpdGVyYWwoKTsKKwkJCXJlc3VsdC5zZXRUeXBlKGNyZWF0ZVR5cGUoKFR5cGUpIG51bGwsIChJ
VHlwZUJpbmRpbmcpIHZhbHVlLCBhc3QsIGNvbnRleHQpKTsKKwkJCXJldHVybiByZXN1bHQ7CisJ
CX0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpIHsKKwkJCVN0cmluZ0xpdGVyYWwg
cmVzdWx0ID0gYXN0Lm5ld1N0cmluZ0xpdGVyYWwoKTsKKwkJCXJlc3VsdC5zZXRMaXRlcmFsVmFs
dWUoKFN0cmluZykgdmFsdWUpOworCQkJcmV0dXJuIHJlc3VsdDsKKwkJfSBlbHNlIGlmICh2YWx1
ZSBpbnN0YW5jZW9mIElWYXJpYWJsZUJpbmRpbmcpIHsKKwkJCUlWYXJpYWJsZUJpbmRpbmcgdmFy
aWFibGUgPSAoSVZhcmlhYmxlQmluZGluZykgdmFsdWU7CisKKwkJCUZpZWxkQWNjZXNzIHJlc3Vs
dCA9IGFzdC5uZXdGaWVsZEFjY2VzcygpOworCQkJcmVzdWx0LnNldE5hbWUoYXN0Lm5ld1NpbXBs
ZU5hbWUodmFyaWFibGUuZ2V0TmFtZSgpKSk7CisJCQlUeXBlIHR5cGUgPSBjcmVhdGVUeXBlKChU
eXBlKSBudWxsLCB2YXJpYWJsZS5nZXRUeXBlKCksIGFzdCwgY29udGV4dCk7CisJCQlOYW1lIG5h
bWU7CisJCQlpZiAodHlwZSBpbnN0YW5jZW9mIFNpbXBsZVR5cGUpIHsKKwkJCQlTaW1wbGVUeXBl
IHNpbXBsZVR5cGUgPSAoU2ltcGxlVHlwZSkgdHlwZTsKKwkJCQluYW1lID0gc2ltcGxlVHlwZS5n
ZXROYW1lKCk7CisJCQkJc2ltcGxlVHlwZS5zZXROYW1lKGFzdC5uZXdTaW1wbGVOYW1lKG5hbWUu
dG9TdHJpbmcoKSkpOworCQkJfSBlbHNlIHsKKwkJCQluYW1lID0gYXN0Lm5ld05hbWUodHlwZS50
b1N0cmluZygpKTsKKwkJCX0KKwkJCXJlc3VsdC5zZXRFeHByZXNzaW9uKG5hbWUpOworCQkJcmV0
dXJuIHJlc3VsdDsKKwkJfSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIElBbm5vdGF0aW9uQmlu
ZGluZykgeworCQkJcmV0dXJuIG5ld0Fubm90YXRpb24oYXN0LCAoSUFubm90YXRpb25CaW5kaW5n
KSB2YWx1ZSwgY29udGV4dCk7CisJCX0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3Rb
XSkgeworCQkJT2JqZWN0W10gdmFsdWVzID0gKE9iamVjdFtdKSB2YWx1ZTsKKwkJCWlmICh2YWx1
ZXMubGVuZ3RoID09IDEpCisJCQkJcmV0dXJuIG5ld0Fubm90YXRpb25WYWx1ZShhc3QsIHZhbHVl
c1swXSwgY29udGV4dCk7CisKKwkJCUFycmF5SW5pdGlhbGl6ZXIgaW5pdGlhbGl6ZXIgPSBhc3Qu
bmV3QXJyYXlJbml0aWFsaXplcigpOworCQkJTGlzdCBleHByZXNzaW9ucyA9IGluaXRpYWxpemVy
LmV4cHJlc3Npb25zKCk7CisJCQlpbnQgc2l6ZSA9IHZhbHVlcy5sZW5ndGg7CisJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IHNpemU7IGkrKykKKwkJCQlleHByZXNzaW9ucy5hZGQobmV3QW5ub3RhdGlv
blZhbHVlKGFzdCwgdmFsdWVzW2ldLCBjb250ZXh0KSk7CisJCQlyZXR1cm4gaW5pdGlhbGl6ZXI7
CisJCX0gZWxzZSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KK30KXCBObyBuZXdsaW5lIGF0
IGVuZCBvZiBmaWxl
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239347</attachid>
            <date>2014-01-27 10:16:00 -0500</date>
            <delta_ts>2014-01-27 10:16:29 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-417937-18-ImportRewriteaddImportITypeBin.Latest.patch</filename>
            <type>text/plain</type>
            <size>28385</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvSW1wb3J0UmV3cml0ZTE4VGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0Lmph
dmEKaW5kZXggOTYyMGMxNS4uMWJmNmZkZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVz
Y3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVz
Y3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0LmphdmEKQEAgLTIwMyw2ICsyMDMsNjMgQEAKIAkJ
YXNzZXJ0RXF1YWxTdHJpbmdJZ25vcmVEZWxpbShjdS5nZXRTb3VyY2UoKSwgY29udGVudHNBKTsK
IAl9CiAKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE3OTM3YjFfc2luY2VfOCgpIHRocm93cyBFeGNl
cHRpb24geworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJw
dWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKCBwYWNrMi5wYWNrMy5A
TWFya2VyIEIgQE1hcmtlciBbXSBhcmcgLCBBIGEpIHt9XG4iICsKKwkJCQkifVxuIiArCisJCQkJ
IkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1l
bnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2VyIHt9XG4iOworCQlj
cmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxIik7CisJCWNyZWF0ZUZpbGUo
Ii8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL1guamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVu
dHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJpbXBvcnQgcGFjazMucGFjazQuQjtcbiIg
KworCQkJCSJwdWJsaWMgY2xhc3MgQXtcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKEIgYXJn
KSB7fVxuIiArCisJCQkJIn1cbiI7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3Jj
L3BhY2sxL0EuamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMi9w
YWNrMztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQiB7fVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIv
IiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMiIpOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVD
VCArICIvc3JjL3BhY2syL3BhY2szIik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIv
c3JjL3BhY2syL3BhY2szL0IuamF2YSIsIGNvbnRlbnRzKTsKKwkJY29udGVudHMgPSAicGFja2Fn
ZSBwYWNrMy9wYWNrNDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQiB7fVxuIjsKKwkJY3JlYXRl
Rm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMyIpOworCQljcmVhdGVGb2xkZXIoIi8i
ICsgUFJPSkVDVCArICIvc3JjL3BhY2szL3BhY2s0Iik7CisJCWNyZWF0ZUZpbGUoIi8iICsgUFJP
SkVDVCArICIvc3JjL3BhY2szL3BhY2s0L0IuamF2YSIsIGNvbnRlbnRzKTsKKworCQlBU1RQYXJz
ZXIgcGFyc2VyID0gQVNUUGFyc2VyLm5ld1BhcnNlcihBU1QuSkxTOCk7CisJCXBhcnNlci5zZXRT
b3VyY2UoZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmph
dmEiKSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNlci5zZXRT
dGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0aW9uVW5pdCBhc3RSb290ID0gKENv
bXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxsKTsKKworCQlJQ29tcGlsYXRpb25V
bml0IGN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9Y
LmphdmEiKTsKKwkJcGFyc2VyLnNldFNvdXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmlu
ZGluZ3ModHJ1ZSk7CisJCXBhcnNlci5zZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCWFz
dFJvb3QgPSAoQ29tcGlsYXRpb25Vbml0KSBwYXJzZXIuY3JlYXRlQVNUKG51bGwpOwkKKwkJVHlw
ZURlY2xhcmF0aW9uIHR5cGU9IChUeXBlRGVjbGFyYXRpb24pIGFzdFJvb3QudHlwZXMoKS5nZXQo
MCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIFtdIG1ldGhvZHMgPSAgdHlwZS5nZXRNZXRob2RzKCk7
CisJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZCA9IG1ldGhvZHNbMF07CisJCVZhcmlhYmxlRGVj
bGFyYXRpb24gdmFyaWFibGU9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBtZXRob2QucGFyYW1ldGVy
cygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyBiaW5kaW5nID0gdmFyaWFibGUucmVzb2x2
ZUJpbmRpbmcoKTsKKwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0gYmluZGluZy5nZXRUeXBl
KCk7CisJCWN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNr
MS9BLmphdmEiKTsKKwkJSW1wb3J0UmV3cml0ZSByZXdyaXRlID0gbmV3SW1wb3J0c1Jld3JpdGUo
Y3UsIG5ldyBTdHJpbmdbMF0sIDk5LCA5OSwgdHJ1ZSk7CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJl
d3JpdGUuYWRkSW1wb3J0KHR5cGVCaW5kaW5nLCBhc3RSb290LmdldEFTVCgpKTsKKwkJYXNzZXJ0
RXF1YWxzKCJwYWNrMi5wYWNrMy5ATWFya2VyIEIgQE1hcmtlciBbXSIsIGFjdHVhbFR5cGUudG9T
dHJpbmcoKSk7CisJCWFzc2VydFRydWUoYWN0dWFsVHlwZS5pc0FycmF5VHlwZSgpKTsKKwkJYXBw
bHkocmV3cml0ZSk7CisJCVN0cmluZyBjb250ZW50c0EgPSAicGFja2FnZSBwYWNrMTtcbiIgKwor
CQkJCSJpbXBvcnQgcGFjazMucGFjazQuQjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXtcbiIg
KworCQkJCSIJcHVibGljIHZvaWQgZm9vKEIgYXJnKSB7fVxuIiArCisJCQkJIn1cbiI7CisJCWFz
c2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oY3UuZ2V0U291cmNlKCksIGNvbnRlbnRzQSk7CisJ
fQorCiAJcHJpdmF0ZSBUeXBlIHJ1blRlc3Q0MTc5MzdjYW5kR2V0VHlwZShpbnQgaSkgdGhyb3dz
IEV4Y2VwdGlvbiB7CiAJCVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHBhY2sxO1xuIiArCiAJ
CQkJInB1YmxpYyBjbGFzcyBYe1xuIiArCkBAIC0yNjQsNyArMzIxLDcgQEAKIAlTdHJpbmdbXVtd
IGJ1ZzQxNzkzN2NUZXN0SW5wdXQgPSB7CiAJCQl7InB1YmxpYyB2b2lkIGZvbzAwMCggcGFjazIu
QE1hcmtlciBCMS5ATWFya2VyIEIyLkBNYXJrZXIgQjMgYXJnLCBBIGEpIHt9IiwgInBhY2syLkIx
IiwgIkBNYXJrZXIgQjEuQE1hcmtlciBCMi5ATWFya2VyIEIzIn0sCiAJCQl7InB1YmxpYyB2b2lk
IGZvbzAwMSggcGFjazIuQE1hcmtlciBATWFya2VyMiBCMS5ATWFya2VyIEIyLkIzIGFyZywgQSBh
KSB7fSIsICJwYWNrMi5CMSIsICJATWFya2VyIEBNYXJrZXIyIEIxLkBNYXJrZXIgQjIuQjMifSwK
LQkJCXsicHVibGljIHZvaWQgZm9vMDAyKCBwYWNrMi5CMS5ATWFya2VyIEIyLkIzIGFyZywgQE1h
cmtlciBpbnQgaSwgQSBhKSIsICJwYWNrMi5CMS5CMiIsICJATWFya2VyIEIyLkIzIn0sCisJCQl7
InB1YmxpYyB2b2lkIGZvbzAwMiggcGFjazIuQjEuQE1hcmtlciBCMi5CMyBhcmcsIEBNYXJrZXIg
aW50IGksIEEgYSl7fSIsICJwYWNrMi5CMS5CMiIsICJATWFya2VyIEIyLkIzIn0sCiAJCQl7InB1
YmxpYyB2b2lkIGZvbzAwMyggcGFjazIuQjEuQjIuQE1hcmtlciBCMyBhcmcsIEEgYSkge30iLCAi
cGFjazIuQjEuQjIuQjMiLCAiQE1hcmtlciBCMyJ9LAogCQkJeyJwdWJsaWMgdm9pZCBmb28wMDQo
IHBhY2syLkIxLkIyLkBBbm5vdDEodmFsdWUyPTIpIEIzIGFyZywgQSBhKSB7fSIsICJwYWNrMi5C
MS5CMi5CMyIsICJAQW5ub3QxKHZhbHVlMj0yKSBCMyJ9LAogCQkJeyJwdWJsaWMgdm9pZCBmb28w
MDUoIHBhY2syLkIxLkIyLkBBbm5vdDEodmFsdWUyPTIsdmFsdWUxPTApIEIzIGFyZywgQSBhKSB7
fSIsICJwYWNrMi5CMS5CMi5CMyIsICJAQW5ub3QxKHZhbHVlMj0yLHZhbHVlMT0wKSBCMyJ9LApA
QCAtNDkxLDYgKzU0OCwxMTQgQEAKIAkJYXNzZXJ0VHJ1ZShhY3R1YWxUeXBlLmlzUGFyYW1ldGVy
aXplZFR5cGUoKSk7CiAJfQogCisJcHJpdmF0ZSBUeXBlIHJ1blRlc3Q0MjYwOTRhbmRHZXRUeXBl
KGludCBpKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2Ug
cGFjazE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFh7XG4iICsKKwkJCQl0aGlzLmJ1ZzQyNjA5
NFRlc3RJbnB1dFtpXVswXSArICJcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5h
bm5vdGF0aW9uLlRhcmdldCAoamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9V
U0UpXG4iICsKKwkJCQkiQGludGVyZmFjZSBNYXJrZXIge31cbiIgKworCQkJCSJAamF2YS5sYW5n
LmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBF
X1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjEge31cbiIgKworCQkJCSJAamF2YS5s
YW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5U
WVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjIge31cbiIgKworCQkJCSJAamF2
YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlw
ZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjMge31cbiIgKworCQkJCSJA
amF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50
VHlwZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIEFubm90IHtcbiIgKworCQkJCSIJ
Ym9vbGVhbiB2YWx1ZSgpIGRlZmF1bHQgZmFsc2U7XG4iICsKKwkJCQkiCWludCB2YWx1ZTIoKTtc
biIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldCAoamF2
YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9VU0UpXG4iICsKKwkJCQkiQGludGVy
ZmFjZSBBbm5vdDIge1xuIiArCisJCQkJIglpbnRbXSB2YWx1ZSgpIGRlZmF1bHQgezEsMn07XG4i
ICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNr
MSIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiLCBj
b250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazE7XG4iICsKKwkJCQkicHVibGlj
IGNsYXNzIEF7fVxuIjsKKwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEv
QS5qYXZhIiwgY29udGVudHMpOworCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2syO1xuIiArCisJ
CQkJInB1YmxpYyBjbGFzcyBCIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNzIEMge1xuIiArCisJ
CQkJIgl9XG4iICsKKwkJCQkifVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvIiArIFBST0pFQ1QgKyAi
L3NyYy9wYWNrMiIpOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMi9C
LmphdmEiLCBjb250ZW50cyk7CisKKwkJQVNUUGFyc2VyIHBhcnNlciA9IEFTVFBhcnNlci5uZXdQ
YXJzZXIoQVNULkpMUzgpOworCQlJQ29tcGlsYXRpb25Vbml0IGN1ID0gZ2V0Q29tcGlsYXRpb25V
bml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9YLmphdmEiKTsKKwkJcGFyc2VyLnNldFNv
dXJjZShjdSk7CisJCXBhcnNlci5zZXRSZXNvbHZlQmluZGluZ3ModHJ1ZSk7CisJCXBhcnNlci5z
ZXRTdGF0ZW1lbnRzUmVjb3ZlcnkodHJ1ZSk7CisJCUNvbXBpbGF0aW9uVW5pdCBhc3RSb290ID0g
KENvbXBpbGF0aW9uVW5pdCkgcGFyc2VyLmNyZWF0ZUFTVChudWxsKTsKKwkJVHlwZURlY2xhcmF0
aW9uIHR5cGVEZWNsYXJhdGlvbiA9IChUeXBlRGVjbGFyYXRpb24pIGFzdFJvb3QudHlwZXMoKS5n
ZXQoMCk7CisJCU1ldGhvZERlY2xhcmF0aW9uIFtdIG1ldGhvZHMgPSAgdHlwZURlY2xhcmF0aW9u
LmdldE1ldGhvZHMoKTsKKwkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kID0gbWV0aG9kc1swXTsK
KworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlID0gKFZhcmlhYmxlRGVjbGFyYXRpb24p
IG1ldGhvZC5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQlJVmFyaWFibGVCaW5kaW5nIHZhcmlhYmxl
QmluZGluZyA9IHZhcmlhYmxlLnJlc29sdmVCaW5kaW5nKCk7CisJCUlUeXBlQmluZGluZyB0eXBl
QmluZGluZyA9IHZhcmlhYmxlQmluZGluZy5nZXRUeXBlKCk7CisJCWN1ID0gZ2V0Q29tcGlsYXRp
b25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiKTsKKwkJSW1wb3J0UmV3
cml0ZSByZXdyaXRlID0gbmV3SW1wb3J0c1Jld3JpdGUoY3UsIG5ldyBTdHJpbmdbMF0sIDk5LCA5
OSwgdHJ1ZSk7CisJCVR5cGUgYWN0dWFsVHlwZSA9IHJld3JpdGUuYWRkSW1wb3J0KHR5cGVCaW5k
aW5nLCBhc3RSb290LmdldEFTVCgpKTsKKwkJcmV0dXJuIGFjdHVhbFR5cGU7CisJfQorCisJU3Ry
aW5nW11bXSBidWc0MjYwOTRUZXN0SW5wdXQgPSB7CisJCQl7InB1YmxpYyB2b2lkIGZvbzAwMShw
YWNrMi5ATWFya2VyIEIgQE1hcmtlciBbXSBhcmcsICBBIGEpIHt9IiwgIkBNYXJrZXIgQiBATWFy
a2VyIFtdIn0sCisJCQl7InB1YmxpYyB2b2lkIGZvbzAwMihwYWNrMi5ATWFya2VyIEIuQyBATWFy
a2VyW10gYXJnLCAgQSBhKSB7fSIsICJATWFya2VyIEIuQyBATWFya2VyIFtdIn0sCisJCQl7InB1
YmxpYyB2b2lkIGZvbzAwMyhwYWNrMi5ATWFya2VyIEIgQE1hcmtlciBATWFya2VyMVtdIEBNYXJr
ZXIxIEBNYXJrZXIyIFtdYXJnLCAgQSBhKSB7fSIsICJATWFya2VyIEIgQE1hcmtlciBATWFya2Vy
MSBbXSBATWFya2VyMSBATWFya2VyMiBbXSJ9LAorCQkJeyJwdWJsaWMgdm9pZCBmb28wMDQocGFj
azIuQE1hcmtlciBCIEBNYXJrZXIgQE1hcmtlcjEgQEFubm90KHZhbHVlPXRydWUsIHZhbHVlMj0x
KSBbXSBAQW5ub3QodmFsdWU9dHJ1ZSwgdmFsdWUyPTEpIFtdYXJnLCAgQSBhKSB7fSIsICJATWFy
a2VyIEIgQE1hcmtlciBATWFya2VyMSBAQW5ub3QodmFsdWU9dHJ1ZSx2YWx1ZTI9MSkgW10gQEFu
bm90KHZhbHVlPXRydWUsdmFsdWUyPTEpIFtdIn0sCisJCQl7InB1YmxpYyB2b2lkIGZvbzAwNShw
YWNrMi5ATWFya2VyIEIgQE1hcmtlciBATWFya2VyMSBAQW5ub3QyKHsxLDJ9KVtdIEBBbm5vdDIo
ezEsMn0pIFtdYXJnLCAgQSBhKSB7fSIsICJATWFya2VyIEIgQE1hcmtlciBATWFya2VyMSBAQW5u
b3QyKHsxLDJ9KSBbXSBAQW5ub3QyKHsxLDJ9KSBbXSJ9LAorCQkJeyJwdWJsaWMgdm9pZCBmb28w
MDExKHBhY2syLkIgQE1hcmtlcltdIGFyZywgIEEgYSkge30iLCAiQiBATWFya2VyIFtdIn0sCisJ
CQl7InB1YmxpYyB2b2lkIGZvbzAwMjEocGFjazIuQi5DIEBNYXJrZXJbXSBhcmcsICBBIGEpIHt9
IiwgIkMgQE1hcmtlciBbXSJ9LAorCQkJeyJwdWJsaWMgdm9pZCBmb28wMDMxKHBhY2syLkIgQE1h
cmtlciBATWFya2VyMVtdIEBNYXJrZXIxIEBNYXJrZXIyIFtdYXJnLCAgQSBhKSB7fSIsICJCIEBN
YXJrZXIgQE1hcmtlcjEgW10gQE1hcmtlcjEgQE1hcmtlcjIgW10ifSwKKwkJCXsicHVibGljIHZv
aWQgZm9vMDA0MShwYWNrMi5CIEBNYXJrZXIgQE1hcmtlcjEgQEFubm90KHZhbHVlPXRydWUsIHZh
bHVlMj0xKSBbXSBAQW5ub3QodmFsdWU9dHJ1ZSx2YWx1ZTI9MSkgW11hcmcsICBBIGEpIHt9Iiwg
IkIgQE1hcmtlciBATWFya2VyMSBAQW5ub3QodmFsdWU9dHJ1ZSx2YWx1ZTI9MSkgW10gQEFubm90
KHZhbHVlPXRydWUsdmFsdWUyPTEpIFtdIn0sCisJCQl7InB1YmxpYyB2b2lkIGZvbzAwNTEocGFj
azIuQiBATWFya2VyIEBNYXJrZXIxIEBBbm5vdDIodmFsdWUgPSB7MSwyfSlbXSBAQW5ub3QyKHsx
LDJ9KSBbXWFyZywgIEEgYSkge30iLCAiQiBATWFya2VyIEBNYXJrZXIxIEBBbm5vdDIoezEsMn0p
IFtdIEBBbm5vdDIoezEsMn0pIFtdIn0sCisJCQl7InB1YmxpYyB2b2lkIGZvbzAwMChwYWNrMi5C
W10gYXJnLCAgQSBhKSB7fSIsICJCW10ifSwKKwl9OworCisJcHJpdmF0ZSBUeXBlIGJ1ZzQyNjA5
NF9ydW5pX3NpbmNlXzgoaW50IGkpIHRocm93cyBFeGNlcHRpb24geworCQlUeXBlIGFjdHVhbFR5
cGUgPSBydW5UZXN0NDI2MDk0YW5kR2V0VHlwZShpKTsKKwkJYXNzZXJ0RXF1YWxzKHRoaXMuYnVn
NDI2MDk0VGVzdElucHV0W2ldWzFdLCBhY3R1YWxUeXBlLnRvU3RyaW5nKCkpOworCQlyZXR1cm4g
YWN0dWFsVHlwZTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDI2MDk0MF9zaW5jZV84KCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisJCWJ1ZzQyNjA5NF9ydW5pX3NpbmNlXzgoMCk7CisJfQorCXB1
YmxpYyB2b2lkIHRlc3RCdWc0MjYwOTQxX3NpbmNlXzgoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
YnVnNDI2MDk0X3J1bmlfc2luY2VfOCgxKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjA5
NDJfc2luY2VfOCgpIHRocm93cyBFeGNlcHRpb24geworCQlidWc0MjYwOTRfcnVuaV9zaW5jZV84
KDIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDI2MDk0M19zaW5jZV84KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisJCWJ1ZzQyNjA5NF9ydW5pX3NpbmNlXzgoMyk7CisJfQorCXB1YmxpYyB2b2lk
IHRlc3RCdWc0MjYwOTQ0X3NpbmNlXzgoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJYnVnNDI2MDk0
X3J1bmlfc2luY2VfOCg0KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjA5NDVfc2luY2Vf
OCgpIHRocm93cyBFeGNlcHRpb24geworCQlidWc0MjYwOTRfcnVuaV9zaW5jZV84KDUpOworCX0K
KwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDI2MDk0Nl9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCWJ1ZzQyNjA5NF9ydW5pX3NpbmNlXzgoNik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RCdWc0
MjYwOTQ3X3NpbmNlXzgoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJYnVnNDI2MDk0X3J1bmlfc2lu
Y2VfOCg3KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjA5NDhfc2luY2VfOCgpIHRocm93
cyBFeGNlcHRpb24geworCQlidWc0MjYwOTRfcnVuaV9zaW5jZV84KDgpOworCX0KKwlwdWJsaWMg
dm9pZCB0ZXN0QnVnNDI2MDk0OV9zaW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWJ1ZzQy
NjA5NF9ydW5pX3NpbmNlXzgoOSk7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RCdWc0MjYwOTQxMF9z
aW5jZV84KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWJ1ZzQyNjA5NF9ydW5pX3NpbmNlXzgoMTAp
OworCX0KKwogCXByaXZhdGUgdm9pZCBhc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKFN0cmlu
ZyBhY3R1YWwsIFN0cmluZyBleHBlY3RlZCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKIAkJU3RyaW5n
QXNzZXJ0cy5hc3NlcnRFcXVhbFN0cmluZ0lnbm9yZURlbGltKGFjdHVhbCwgZXhwZWN0ZWQpOwog
CX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vSVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0lUeXBlQmluZGluZy5qYXZhCmluZGV4IDcwNGYxOGQuLjgw
YTJjYWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9kb20vSVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9JVHlwZUJpbmRpbmcuamF2YQpAQCAtOTk4LDQg
Kzk5OCwxMyBAQAogCSAqLwogCXB1YmxpYyBJQW5ub3RhdGlvbkJpbmRpbmdbXSBnZXRUeXBlQW5u
b3RhdGlvbnMoKTsKIAkKKwkvKioKKwkgKiBSZXR1cm5zIHRoZSBhbm5vdGF0aW9ucyBvbiBkaW1l
bnNpb25zIHRoYXQgdGhpcyB0eXBlIHJlZmVyZW5jZSBpcyBhbm5vdGF0ZWQgd2l0aC4gU2luY2Ug
SkxTOCwgCisJICogdHlwZSBhbm5vdGF0aW9ucyBhcmUgYWxsb3dlZCBvbiBkaW1lbnNpb25zLiAK
KwkgKiBAcmV0dXJuIGFycmF5IG9mIHR5cGUgdXNlIGFubm90YXRpb25zIHNwZWNpZmllZCBvbiB0
aGUgZGltZW5zaW9ucyBvZiB0aGlzIHR5cGUgcmVmZXJlbmNlLCBvciBhbiBlbXB0eSBhcnJheSBp
ZgorCSAqIG5vIHR5cGUgdXNlIGFubm90YXRpb25zIGFyZSBmb3VuZC4KKwkgKiBAc2luY2UgMy45
IEJFVEFfSkFWQTgKKwkgKi8KKwlwdWJsaWMgSUFubm90YXRpb25CaW5kaW5nW11bXSBnZXRUeXBl
QW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMoKTsKKwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9SZWNvdmVyZWRUeXBlQmluZGlu
Zy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9SZWNvdmVyZWRUeXBlQmluZGluZy5qYXZhCmluZGV4IDkwNjhhMTkuLjVkYzJlYWEgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
UmVjb3ZlcmVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1JlY292ZXJlZFR5cGVCaW5kaW5nLmphdmEKQEAgLTEs
NSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA3
LCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdApAQCAtNzI3LDQgKzcyNyw4IEBACiAJcHVibGljIElBbm5vdGF0aW9uQmluZGlu
Z1tdIGdldFR5cGVBbm5vdGF0aW9ucygpIHsKIAkJcmV0dXJuIEFubm90YXRpb25CaW5kaW5nLk5v
QW5ub3RhdGlvbnM7CiAJfQorCisJcHVibGljIElBbm5vdGF0aW9uQmluZGluZ1tdW10gZ2V0VHlw
ZUFubm90YXRpb25zT25EaW1lbnNpb25zKCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L1R5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL1R5cGVCaW5kaW5nLmphdmEKaW5kZXggZTg1YjIxMy4uM2I0Y2RlZSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9UeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vVHlwZUJpbmRpbmcuamF2YQpAQCAtNjQsNiArNjQsNyBAQAogCXBy
aXZhdGUgSVZhcmlhYmxlQmluZGluZ1tdIGZpZWxkczsKIAlwcml2YXRlIElBbm5vdGF0aW9uQmlu
ZGluZ1tdIGFubm90YXRpb25zOwogCXByaXZhdGUgSUFubm90YXRpb25CaW5kaW5nW10gdHlwZUFu
bm90YXRpb25zOworCXByaXZhdGUgSUFubm90YXRpb25CaW5kaW5nW11bXSB0eXBlQW5ub3RhdGlv
bnNPbkRpbWVuc2lvbnM7CiAJcHJpdmF0ZSBJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHM7CiAJcHJp
dmF0ZSBJVHlwZUJpbmRpbmdbXSBtZW1iZXJzOwogCXByaXZhdGUgSVR5cGVCaW5kaW5nW10gaW50
ZXJmYWNlczsKQEAgLTEzMCw2ICsxMzEsMjYgQEAKIAkJCXJldHVybiB0ZW1wQW5ub3RhdGlvbnM7
CiAJCX0KIAkJcmV0dXJuIEFubm90YXRpb25CaW5kaW5nLk5vQW5ub3RhdGlvbnM7CisJfQorCXBy
aXZhdGUgSUFubm90YXRpb25CaW5kaW5nW11bXSByZXNvbHZlQW5ub3RhdGlvbkJpbmRpbmdzT25E
aW1lbnNpb25zKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJp
bmRpbmcgdHlwZUJpbmRpbmcpIHsKKwkJaWYgKCF0eXBlQmluZGluZy5pc0FycmF5VHlwZSgpKSB7
CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCQlpbnQgZGltZW5zaW9ucyA9IHR5cGVCaW5kaW5nLmRp
bWVuc2lvbnMoKTsKKwkJSUFubm90YXRpb25CaW5kaW5nW11bXSBhbm5vdGF0aW9uc0JpbmRpbmdz
T25EaW1lbnNpb25zID0gbmV3IElBbm5vdGF0aW9uQmluZGluZ1tkaW1lbnNpb25zXVtdOworCQlv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25CaW5kaW5n
W10gYW5ub3RhdGlvbkJpbmRpbmdzID0gdHlwZUJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7
CisJCWZvciAoaW50IGkgPSAwLCBqID0gLTE7IGkgPCBkaW1lbnNpb25zOyBpKyspIHsKKwkJCWlm
IChhbm5vdGF0aW9uQmluZGluZ3MgIT0gbnVsbCkgeworCQkJCWludCBzdGFydCA9IGo7CisJCQkJ
d2hpbGUgKCsraiA8IGFubm90YXRpb25CaW5kaW5ncy5sZW5ndGggJiYgYW5ub3RhdGlvbkJpbmRp
bmdzW2pdICE9IG51bGwpIHsKKwkJCQkJaW50IGxlbmd0aCA9IGogLSBzdGFydDsKKwkJCQkJb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1td
IGN1cnJlbnREaW1lbnNpb24gPSBuZXcgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tsZW5ndGhdOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5
KGFubm90YXRpb25CaW5kaW5ncywgc3RhcnQgKyAxLCBjdXJyZW50RGltZW5zaW9uLCAwLCBsZW5n
dGgpOworCQkJCQlhbm5vdGF0aW9uc0JpbmRpbmdzT25EaW1lbnNpb25zW2ldID0gcmVzb2x2ZUFu
bm90YXRpb25CaW5kaW5ncyhjdXJyZW50RGltZW5zaW9uLCB0cnVlKTsKKwkJCQl9CisJCQl9CisJ
CX0KKwkJcmV0dXJuIGFubm90YXRpb25zQmluZGluZ3NPbkRpbWVuc2lvbnM7CiAJfQogCiAJLyoK
QEAgLTEzMzYsNCArMTM1NywxNSBAQAogCQl0aGlzLnR5cGVBbm5vdGF0aW9ucyA9IHJlc29sdmVB
bm5vdGF0aW9uQmluZGluZ3ModGhpcy5iaW5kaW5nLmdldFR5cGVBbm5vdGF0aW9ucygpLCB0cnVl
KTsKIAkJcmV0dXJuIHRoaXMudHlwZUFubm90YXRpb25zOwogCX0KKworCS8qCisJICogQHNlZSBJ
VHlwZUJpbmRpbmcjZ2V0VHlwZUFubm90YXRpb25zT25EaW1lbnNpb25zKCkKKwkgKi8KKwlwdWJs
aWMgSUFubm90YXRpb25CaW5kaW5nW11bXSBnZXRUeXBlQW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMo
KSB7CisJCWlmICh0aGlzLnR5cGVBbm5vdGF0aW9uc09uRGltZW5zaW9ucyAhPSBudWxsKSB7CisJ
CQlyZXR1cm4gdGhpcy50eXBlQW5ub3RhdGlvbnNPbkRpbWVuc2lvbnM7CisJCX0KKwkJdGhpcy50
eXBlQW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMgPSByZXNvbHZlQW5ub3RhdGlvbkJpbmRpbmdzT25E
aW1lbnNpb25zKHRoaXMuYmluZGluZyk7CisJCXJldHVybiB0aGlzLnR5cGVBbm5vdGF0aW9uc09u
RGltZW5zaW9uczsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL3Jld3JpdGUvSW1wb3J0UmV3cml0ZS5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9yZXdyaXRlL0lt
cG9ydFJld3JpdGUuamF2YQppbmRleCA1NDhmZDNiLi44M2NlNWQ0IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL3Jld3JpdGUvSW1w
b3J0UmV3cml0ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vcmV3cml0ZS9JbXBvcnRSZXdyaXRlLmphdmEKQEAgLTY5Niw2MSArNjk2
LDEyIEBACiAJICovCiAJcHVibGljIFR5cGUgYWRkSW1wb3J0KElUeXBlQmluZGluZyBiaW5kaW5n
LCBBU1QgYXN0LCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CiAJCUlUeXBlQmluZGlu
ZyBiaW5kaW5nUG9pbnQgPSBjaGVja0Fubm90YXRpb25BbmRHZW5lcmljcyhiaW5kaW5nKTsKLQkJ
aWYgKGJpbmRpbmdQb2ludCAhPSBudWxsKSB7Ci0JCQlyZXR1cm4gY3JlYXRlVHlwZShiaW5kaW5n
LCBiaW5kaW5nUG9pbnQsIGFzdCwgY29udGV4dCk7CisJCVR5cGUgdHlwZSA9IGludGVybmFsQWRk
SW1wb3J0KGJpbmRpbmdQb2ludCA9PSBudWxsID8gYmluZGluZyA6IGJpbmRpbmdQb2ludCwgYXN0
LCBjb250ZXh0LCBudWxsLCAvKiBnZXRCYXNlICovIHRydWUpOworCQlpZiAoYmluZGluZ1BvaW50
ICE9IG51bGwgJiYgIWJpbmRpbmdQb2ludC5lcXVhbHMoYmluZGluZykpIHsKKwkJCXR5cGUgPSBi
dWlsZFR5cGUoYmluZGluZywgYmluZGluZ1BvaW50LCBhc3QsIGNvbnRleHQsIHR5cGUpOwogCQl9
Ci0JCWlmIChiaW5kaW5nLmlzUHJpbWl0aXZlKCkpIHsKLQkJCXJldHVybiBhc3QubmV3UHJpbWl0
aXZlVHlwZShQcmltaXRpdmVUeXBlLnRvQ29kZShiaW5kaW5nLmdldE5hbWUoKSkpOwotCQl9Ci0K
LQkJSVR5cGVCaW5kaW5nIG5vcm1hbGl6ZWRCaW5kaW5nPSBub3JtYWxpemVUeXBlQmluZGluZyhi
aW5kaW5nKTsKLQkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5nID09IG51bGwpIHsKLQkJCXJldHVybiBh
c3QubmV3U2ltcGxlVHlwZShhc3QubmV3U2ltcGxlTmFtZSgiaW52YWxpZCIpKTsgLy8kTk9OLU5M
Uy0xJAotCQl9Ci0KLQkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5nLmlzVHlwZVZhcmlhYmxlKCkpIHsK
LQkJCS8vIG5vIGltcG9ydAotCQkJcmV0dXJuIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdTaW1w
bGVOYW1lKGJpbmRpbmcuZ2V0TmFtZSgpKSk7Ci0JCX0KLQkJaWYgKG5vcm1hbGl6ZWRCaW5kaW5n
LmlzV2lsZGNhcmRUeXBlKCkpIHsKLQkJCVdpbGRjYXJkVHlwZSB3Y1R5cGU9IGFzdC5uZXdXaWxk
Y2FyZFR5cGUoKTsKLQkJCUlUeXBlQmluZGluZyBib3VuZD0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0
Qm91bmQoKTsKLQkJCWlmIChib3VuZCAhPSBudWxsICYmICFib3VuZC5pc1dpbGRjYXJkVHlwZSgp
ICYmICFib3VuZC5pc0NhcHR1cmUoKSkgeyAvLyBidWcgOTY5NDIKLQkJCQlUeXBlIGJvdW5kVHlw
ZT0gYWRkSW1wb3J0KGJvdW5kLCBhc3QsIGNvbnRleHQpOwotCQkJCXdjVHlwZS5zZXRCb3VuZChi
b3VuZFR5cGUsIG5vcm1hbGl6ZWRCaW5kaW5nLmlzVXBwZXJib3VuZCgpKTsKLQkJCX0KLQkJCXJl
dHVybiB3Y1R5cGU7Ci0JCX0KLQotCQlpZiAobm9ybWFsaXplZEJpbmRpbmcuaXNBcnJheSgpKSB7
Ci0JCQlUeXBlIGVsZW1lbnRUeXBlPSBhZGRJbXBvcnQobm9ybWFsaXplZEJpbmRpbmcuZ2V0RWxl
bWVudFR5cGUoKSwgYXN0LCBjb250ZXh0KTsKLQkJCXJldHVybiBhc3QubmV3QXJyYXlUeXBlKGVs
ZW1lbnRUeXBlLCBub3JtYWxpemVkQmluZGluZy5nZXREaW1lbnNpb25zKCkpOwotCQl9Ci0KLQkJ
U3RyaW5nIHF1YWxpZmllZE5hbWU9IGdldFJhd1F1YWxpZmllZE5hbWUobm9ybWFsaXplZEJpbmRp
bmcpOwotCQlpZiAocXVhbGlmaWVkTmFtZS5sZW5ndGgoKSA+IDApIHsKLQkJCVN0cmluZyByZXM9
IGludGVybmFsQWRkSW1wb3J0KHF1YWxpZmllZE5hbWUsIGNvbnRleHQpOwotCi0JCQlJVHlwZUJp
bmRpbmdbXSB0eXBlQXJndW1lbnRzPSBub3JtYWxpemVkQmluZGluZy5nZXRUeXBlQXJndW1lbnRz
KCk7Ci0JCQlpZiAodHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwKSB7Ci0JCQkJVHlwZSBlcmFzdXJl
VHlwZT0gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5ld05hbWUocmVzKSk7Ci0JCQkJUGFyYW1ldGVy
aXplZFR5cGUgcGFyYW1UeXBlPSBhc3QubmV3UGFyYW1ldGVyaXplZFR5cGUoZXJhc3VyZVR5cGUp
OwotCQkJCUxpc3QgYXJndW1lbnRzPSBwYXJhbVR5cGUudHlwZUFyZ3VtZW50cygpOwotCQkJCWZv
ciAoaW50IGk9IDA7IGkgPCB0eXBlQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJCUlUeXBl
QmluZGluZyBjdXJyPSB0eXBlQXJndW1lbnRzW2ldOwotCQkJCQlpZiAoY29udGFpbnNOZXN0ZWRD
YXB0dXJlKGN1cnIsIGZhbHNlKSkgeyAvLyBzZWUgYnVnIDEwMzA0NAotCQkJCQkJYXJndW1lbnRz
LmFkZChhc3QubmV3V2lsZGNhcmRUeXBlKCkpOwotCQkJCQl9IGVsc2UgewotCQkJCQkJYXJndW1l
bnRzLmFkZChhZGRJbXBvcnQoY3VyciwgYXN0LCBjb250ZXh0KSk7Ci0JCQkJCX0KLQkJCQl9Ci0J
CQkJcmV0dXJuIHBhcmFtVHlwZTsKLQkJCX0KLQkJCXJldHVybiBhc3QubmV3U2ltcGxlVHlwZShh
c3QubmV3TmFtZShyZXMpKTsKLQkJfQotCQlyZXR1cm4gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5l
d05hbWUoZ2V0UmF3TmFtZShub3JtYWxpemVkQmluZGluZykpKTsKKwkJcmV0dXJuIHR5cGU7CiAJ
fQotCiAKIAkvKioKIAkgKiBBZGRzIGEgbmV3IGltcG9ydCB0byB0aGUgcmV3cml0ZXIncyByZWNv
cmQgYW5kIHJldHVybnMgYSBuYW1lIC0gc2luZ2xlIG1lbWJlciBuYW1lIGlmCkBAIC0xMTY0LDYg
KzExMTUsMzEgQEAKIAkJcmV0dXJuIChTdHJpbmdbXSkgcmVzLnRvQXJyYXkobmV3IFN0cmluZ1ty
ZXMuc2l6ZSgpXSk7CiAJfQogCisJcHJpdmF0ZSB2b2lkIGFubm90YXRlTGlzdChMaXN0IGFubm90
YXRpb25zLCBJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbkJpbmRpbmdzLCBBU1QgYXN0
LCBJbXBvcnRSZXdyaXRlQ29udGV4dCBjb250ZXh0KSB7CisJCWZvciAoaW50IGkgPSAwOyBpPCBh
bm5vdGF0aW9uQmluZGluZ3MubGVuZ3RoOyBpKyspIHsKKwkJCUFubm90YXRpb24gYW5ub3RhdGlv
biA9IG5ld0Fubm90YXRpb24oYXN0LCBhbm5vdGF0aW9uQmluZGluZ3NbaV0sIGNvbnRleHQpOwor
CQkJaWYgKGFubm90YXRpb24gIT0gbnVsbCkgYW5ub3RhdGlvbnMuYWRkKGFubm90YXRpb24pOwor
CQl9CisJfQorCisJcHJpdmF0ZSBUeXBlIGFubm90YXRlVHlwZShJVHlwZUJpbmRpbmcgYmluZGlu
ZywgQVNUIGFzdCwgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCwgVHlwZSB0eXBlKSB7CisJ
CUlBbm5vdGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9uQmluZGluZ3MgPSBiaW5kaW5nLmdldFR5
cGVBbm5vdGF0aW9ucygpOworCQlpZiAoYW5ub3RhdGlvbkJpbmRpbmdzICE9IG51bGwgJiYgYW5u
b3RhdGlvbkJpbmRpbmdzLmxlbmd0aCA+IDAgJiYgdHlwZSBpbnN0YW5jZW9mIEFubm90YXRhYmxl
VHlwZSkgeworCQkJYW5ub3RhdGVMaXN0KCgoQW5ub3RhdGFibGVUeXBlKSB0eXBlKS5hbm5vdGF0
aW9ucygpLCBhbm5vdGF0aW9uQmluZGluZ3MsIGFzdCwgY29udGV4dCk7CisJCX0KKwkJcmV0dXJu
IHR5cGU7CisJfQorCisJcHJpdmF0ZSBUeXBlIGJ1aWxkVHlwZShJVHlwZUJpbmRpbmcgYmluZGlu
ZywgSVR5cGVCaW5kaW5nIGJpbmRpbmdQb2ludCwgQVNUIGFzdCwgSW1wb3J0UmV3cml0ZUNvbnRl
eHQgY29udGV4dCwgVHlwZSBxdWFsaWZpZXIpIHsKKwkJaWYgKGJpbmRpbmcuZXF1YWxzKGJpbmRp
bmdQb2ludCkpIHsKKwkJCXJldHVybiBxdWFsaWZpZXI7CisJCX0KKwkJLy8gYnVpbGQgdGhlIHR5
cGUgcmVjdXJzaXZlbHkgZnJvbSBsZWZ0IHRvIHJpZ2h0CisJCVR5cGUgdHlwZSA9IGJpbmRpbmcu
aXNNZW1iZXIoKSA/IGJ1aWxkVHlwZShiaW5kaW5nLmdldERlY2xhcmluZ0NsYXNzKCksIGJpbmRp
bmdQb2ludCwgYXN0LCBjb250ZXh0LCBxdWFsaWZpZXIpIDogbnVsbDsKKwkJdHlwZSA9IGludGVy
bmFsQWRkSW1wb3J0KGJpbmRpbmcsIGFzdCwgY29udGV4dCwgdHlwZSwgZmFsc2UpOworCQlyZXR1
cm4gdHlwZTsKKwl9CisKIAlwcml2YXRlIElUeXBlQmluZGluZyBjaGVja0Fubm90YXRpb25BbmRH
ZW5lcmljcyhJVHlwZUJpbmRpbmcgYmluZGluZykgewogCQlJVHlwZUJpbmRpbmcgYmluZGluZ1Bv
aW50ID0gbnVsbDsKIAkJd2hpbGUgKGJpbmRpbmcgIT0gbnVsbCkgewpAQCAtMTE4MiwxMjAgKzEx
NTgsMTE1IEBACiAJCXJldHVybiBiaW5kaW5nUG9pbnQ7CiAJfQogCi0JcHJpdmF0ZSBUeXBlIGNy
ZWF0ZVR5cGUoSVR5cGVCaW5kaW5nIGJpbmRpbmcsIElUeXBlQmluZGluZyBiaW5kaW5nUG9pbnQs
IEFTVCBhc3QsIEltcG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQpIHsKLQkJU3RyaW5nIHN0ciA9
IGFkZEltcG9ydChiaW5kaW5nUG9pbnQsIGNvbnRleHQpOwotCQlpbnQgZG90SW5kZXggPSBzdHIg
IT0gbnVsbCA/IHN0ci5sYXN0SW5kZXhPZignLicpIDogLTE7Ci0JCVR5cGUgcXVhbGlmaWVyID0g
bnVsbDsKLQkJaWYgKGRvdEluZGV4ICE9IC0xKSB7Ci0JCQljaGFyIGJ1ZiBbXSA9IG5ldyBjaGFy
IFtkb3RJbmRleF07Ci0JCQlmb3IgKGludCBpID0gMDsgaSA8IGRvdEluZGV4OyArK2kpCi0JCQkJ
YnVmW2ldID0gc3RyLmNoYXJBdChpKTsKLQkJCXN0ciA9IG5ldyBTdHJpbmcoYnVmKTsKLQkJCXF1
YWxpZmllciA9IGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdOYW1lKHN0cikpOwotCQl9Ci0JCXJl
dHVybiBjcmVhdGVUeXBlKGJpbmRpbmcsIGJpbmRpbmdQb2ludCwgYXN0LCBxdWFsaWZpZXIsIGNv
bnRleHQpOwotCX0KKwlwcml2YXRlIFR5cGUgY3JlYXRlQmFzZVR5cGUoQVNUIGFzdCwgSW1wb3J0
UmV3cml0ZUNvbnRleHQgY29udGV4dCwgSVR5cGVCaW5kaW5nIG5vcm1hbGl6ZWRCaW5kaW5nKSB7
CisJCVR5cGUgdHlwZTsKKwkJSUFubm90YXRpb25CaW5kaW5nIGFubm90YXRpb25CaW5kaW5nIFtd
ID0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWJvb2xlYW4gYW5u
b3RzUHJlc2VudCA9IGFubm90YXRpb25CaW5kaW5nICE9IG51bGwgJiYgYW5ub3RhdGlvbkJpbmRp
bmcubGVuZ3RoID4gMDsKIAotCXByaXZhdGUgVHlwZSBjcmVhdGVUeXBlKElUeXBlQmluZGluZyBi
aW5kaW5nLCBJVHlwZUJpbmRpbmcgYmluZGluZ1BvaW50LCBBU1QgYXN0LCBUeXBlIHF1YWxpZmll
ciwgSW1wb3J0UmV3cml0ZUNvbnRleHQgY29udGV4dCkgewotCQlUeXBlIHR5cGUgPSBudWxsOwot
CQlpZiAoYmluZGluZy5lcXVhbHMoYmluZGluZ1BvaW50KSkgewotCQkJdHlwZSA9IGNyZWF0ZVR5
cGUocXVhbGlmaWVyLCBiaW5kaW5nLCBhc3QsIGNvbnRleHQpOworCQlTdHJpbmcgcXVhbGlmaWVk
TmFtZT0gZ2V0UmF3UXVhbGlmaWVkTmFtZShub3JtYWxpemVkQmluZGluZyk7CisJCVN0cmluZyBy
ZXMgPSBxdWFsaWZpZWROYW1lLmxlbmd0aCgpID4gMCA/IGludGVybmFsQWRkSW1wb3J0KHF1YWxp
ZmllZE5hbWUsIGNvbnRleHQpIDogZ2V0UmF3TmFtZShub3JtYWxpemVkQmluZGluZyk7CisJCisJ
CWlmIChhbm5vdHNQcmVzZW50KSB7CisJCQlpbnQgZG90SW5kZXggPSByZXMgIT0gbnVsbCA/IHJl
cy5sYXN0SW5kZXhPZignLicpIDogLTE7CisJCQlpZiAoZG90SW5kZXggPiAwKSB7CisJCQkJTmFt
ZSBuYW1lUXVhbGlmaWVyID0gYXN0Lm5ld05hbWUocmVzLnN1YnN0cmluZygwLCBkb3RJbmRleCkp
OworCQkJCVNpbXBsZU5hbWUgc2ltcGxlTmFtZSA9IGFzdC5uZXdTaW1wbGVOYW1lKHJlcy5zdWJz
dHJpbmcoZG90SW5kZXggKyAxKSk7CisJCQkJdHlwZSA9IGFzdC5uZXdOYW1lUXVhbGlmaWVkVHlw
ZShuYW1lUXVhbGlmaWVyLCBzaW1wbGVOYW1lKTsKKwkJCX0gZWxzZSB7CisJCQkJdHlwZSA9IGFz
dC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdOYW1lKHJlcykpOworCQkJfQorCQkJYW5ub3RhdGVMaXN0
KCgoQW5ub3RhdGFibGVUeXBlKSB0eXBlKS5hbm5vdGF0aW9ucygpLCBhbm5vdGF0aW9uQmluZGlu
ZywgYXN0LCBjb250ZXh0KTsKIAkJfSBlbHNlIHsKLQkJCVR5cGUgY3VycmVudFR5cGUgPSBiaW5k
aW5nLmlzTWVtYmVyKCkgPyBjcmVhdGVUeXBlKGJpbmRpbmcuZ2V0RGVjbGFyaW5nQ2xhc3MoKSwg
YmluZGluZ1BvaW50LCBhc3QsIHF1YWxpZmllciwgY29udGV4dCkgOiBudWxsOwotCQkJdHlwZSA9
IGNyZWF0ZVR5cGUoY3VycmVudFR5cGUsIGJpbmRpbmcsIGFzdCwgY29udGV4dCk7Ci0JCX0KLQkJ
SUFubm90YXRpb25CaW5kaW5nIFtdIGFubm90YXRpb25CaW5kaW5ncyA9IGJpbmRpbmcuZ2V0VHlw
ZUFubm90YXRpb25zKCk7Ci0JCWlmIChhbm5vdGF0aW9uQmluZGluZ3MgIT0gbnVsbCAmJiBhbm5v
dGF0aW9uQmluZGluZ3MubGVuZ3RoID4gMCkgewotCQkJQW5ub3RhdGFibGVUeXBlIGFUeXBlID0g
dHlwZSBpbnN0YW5jZW9mIEFubm90YXRhYmxlVHlwZSA/IChBbm5vdGF0YWJsZVR5cGUpIHR5cGUg
OiAKLQkJCQl0eXBlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFR5cGUgPyAoQW5ub3RhdGFibGVU
eXBlKSAoKFBhcmFtZXRlcml6ZWRUeXBlKSB0eXBlKS5nZXRUeXBlKCkgOiBudWxsOwotCQkJaWYg
KGFUeXBlICE9IG51bGwpCi0JCQkJYW5ub3RhdGVUeXBlKGFUeXBlLCBhbm5vdGF0aW9uQmluZGlu
Z3MsIGFzdCwgY29udGV4dCk7CisJCQl0eXBlID0gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5ld05h
bWUocmVzKSk7CiAJCX0KIAkJcmV0dXJuIHR5cGU7CiAJfQogCi0JcHJpdmF0ZSBUeXBlIGNyZWF0
ZVR5cGUoVHlwZSBjdXJyZW50VHlwZSwgSVR5cGVCaW5kaW5nIGJpbmRpbmcsIEFTVCBhc3QsIElt
cG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQpIHsKLQotCQlpZiAoYmluZGluZy5pc1ByaW1pdGl2
ZSgpKSB7Ci0JCQlyZXR1cm4gYXN0Lm5ld1ByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZS50b0Nv
ZGUoYmluZGluZy5nZXROYW1lKCkpKTsKLQkJfQotCi0JCUlUeXBlQmluZGluZyBub3JtYWxpemVk
QmluZGluZyA9IG5vcm1hbGl6ZVR5cGVCaW5kaW5nKGJpbmRpbmcpOwotCQlpZiAobm9ybWFsaXpl
ZEJpbmRpbmcgPT0gbnVsbCkgewotCQkJcmV0dXJuIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdT
aW1wbGVOYW1lKCJpbnZhbGlkIikpOyAvLyROT04tTkxTLTEkCi0JCX0KLQotCQlpZiAobm9ybWFs
aXplZEJpbmRpbmcuaXNUeXBlVmFyaWFibGUoKSkgewotCQkJaWYgKGN1cnJlbnRUeXBlICE9IG51
bGwpIHsKLQkJCQlyZXR1cm4gYXN0Lm5ld1F1YWxpZmllZFR5cGUoY3VycmVudFR5cGUsIGFzdC5u
ZXdTaW1wbGVOYW1lKGJpbmRpbmcuZ2V0TmFtZSgpKSk7Ci0JCQl9Ci0JCQlyZXR1cm4gYXN0Lm5l
d1NpbXBsZVR5cGUoYXN0Lm5ld1NpbXBsZU5hbWUoYmluZGluZy5nZXROYW1lKCkpKTsKLQkJfQot
Ci0JCWlmIChub3JtYWxpemVkQmluZGluZy5pc1dpbGRjYXJkVHlwZSgpKSB7Ci0JCQlXaWxkY2Fy
ZFR5cGUgd2NUeXBlID0gYXN0Lm5ld1dpbGRjYXJkVHlwZSgpOwotCQkJSVR5cGVCaW5kaW5nIGJv
dW5kID0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0Qm91bmQoKTsKLQkJCWlmIChib3VuZCAhPSBudWxs
ICYmICFib3VuZC5pc1dpbGRjYXJkVHlwZSgpICYmICFib3VuZC5pc0NhcHR1cmUoKSkgewotCQkJ
CVR5cGUgYm91bmRUeXBlID0gY3JlYXRlVHlwZShib3VuZCwgbnVsbCwgYXN0LCAoVHlwZSkgbnVs
bCwgY29udGV4dCk7Ci0JCQkJd2NUeXBlLnNldEJvdW5kKGJvdW5kVHlwZSwgbm9ybWFsaXplZEJp
bmRpbmcuaXNVcHBlcmJvdW5kKCkpOwotCQkJfQotCQkJcmV0dXJuIHdjVHlwZTsKLQkJfQotCi0J
CWlmIChub3JtYWxpemVkQmluZGluZy5pc0FycmF5KCkpIHsKLQkJCVR5cGUgZWxlbWVudFR5cGUg
PSBjcmVhdGVUeXBlKGN1cnJlbnRUeXBlLCBub3JtYWxpemVkQmluZGluZy5nZXRFbGVtZW50VHlw
ZSgpLCBhc3QsIGNvbnRleHQpOwotCQkJcmV0dXJuIGFzdC5uZXdBcnJheVR5cGUoZWxlbWVudFR5
cGUsIG5vcm1hbGl6ZWRCaW5kaW5nLmdldERpbWVuc2lvbnMoKSk7Ci0JCX0KLQotCQlpZiAobm9y
bWFsaXplZEJpbmRpbmcuaXNQYXJhbWV0ZXJpemVkVHlwZSgpKSB7Ci0JCQlJVHlwZUJpbmRpbmdb
XSB0eXBlQXJndW1lbnRzID0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0VHlwZUFyZ3VtZW50cygpOwot
CQkJaWYgKHR5cGVBcmd1bWVudHMubGVuZ3RoID4gMCkgewotCQkJCVR5cGUgZXJhc3VyZVR5cGUg
PSBjdXJyZW50VHlwZSA9PSBudWxsID8gKFR5cGUpIGFzdC5uZXdTaW1wbGVUeXBlKGFzdC5uZXdO
YW1lKGdldFJhd05hbWUobm9ybWFsaXplZEJpbmRpbmcpKSkgOgotCQkJCQkJCShUeXBlKSBhc3Qu
bmV3UXVhbGlmaWVkVHlwZShjdXJyZW50VHlwZSwgYXN0Lm5ld1NpbXBsZU5hbWUoZ2V0UmF3TmFt
ZShub3JtYWxpemVkQmluZGluZykpKTsKLQkJCQlQYXJhbWV0ZXJpemVkVHlwZSBwYXJhbVR5cGUg
PSBhc3QubmV3UGFyYW1ldGVyaXplZFR5cGUoZXJhc3VyZVR5cGUpOwotCQkJCUxpc3QgYXJndW1l
bnRzID0gcGFyYW1UeXBlLnR5cGVBcmd1bWVudHMoKTsKLQkJCQlmb3IgKGludCBpID0gMDsgaSA8
IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCQkJSVR5cGVCaW5kaW5nIGN1cnIgPSB0
eXBlQXJndW1lbnRzW2ldOwotCQkJCQlpZiAoY29udGFpbnNOZXN0ZWRDYXB0dXJlKGN1cnIsIGZh
bHNlKSkgeyAvLyBzZWUgYnVnIDEwMzA0NAotCQkJCQkJYXJndW1lbnRzLmFkZChhc3QubmV3V2ls
ZGNhcmRUeXBlKCkpOwotCQkJCQl9IGVsc2UgewotCQkJCQkJYXJndW1lbnRzLmFkZChhZGRJbXBv
cnQoY3VyciwgYXN0LCBjb250ZXh0KSk7Ci0JCQkJCX0KLQkJCQl9Ci0JCQkJcmV0dXJuIHBhcmFt
VHlwZTsKKwlwcml2YXRlIFR5cGUgZ2V0QXJyYXlUeXBlKFR5cGUgZWxlbWVudFR5cGUsIEFTVCBh
c3QsIEltcG9ydFJld3JpdGVDb250ZXh0IGNvbnRleHQsIElUeXBlQmluZGluZyBub3JtYWxpemVk
QmluZGluZykgeworCQlpbnQgbm9EaW1lbnNpb25zID0gbm9ybWFsaXplZEJpbmRpbmcuZ2V0RGlt
ZW5zaW9ucygpOworCQlBcnJheVR5cGUgYXJyYXlUeXBlID0gYXN0Lm5ld0FycmF5VHlwZShlbGVt
ZW50VHlwZSwgbm9EaW1lbnNpb25zKTsKKwkJaWYgKGFzdC5hcGlMZXZlbCgpID49IEFTVC5KTFM4
KSB7CisJCQlJQW5ub3RhdGlvbkJpbmRpbmdbXVtdIGFubm90YXRpb25zT25EaW1lbnNpb25zID0g
bm9ybWFsaXplZEJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zT25EaW1lbnNpb25zKCk7CisJCQlp
bnQgbGVuZ3RoID0gYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMgIT0gbnVsbCA/IGFubm90YXRpb25z
T25EaW1lbnNpb25zLmxlbmd0aCA6IDA7CisJCQlsZW5ndGggPSBsZW5ndGggPCBub0RpbWVuc2lv
bnMgPyBsZW5ndGggOiBub0RpbWVuc2lvbnM7IC8vIHNob3VsZCBub3QgYmUgPiwgYnV0IHByZXZl
bnRpdmUuCisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7CisJCQkJTGlzdCBk
aW1lbnNpb25zID0gYXJyYXlUeXBlLmRpbWVuc2lvbnMoKTsKKwkJCQlEaW1lbnNpb24gZGltZW5z
aW9uID0gKERpbWVuc2lvbikgZGltZW5zaW9ucy5nZXQoaSk7CisJCQkJSUFubm90YXRpb25CaW5k
aW5nW10gYW5ub3RhdGlvbk9uRGltZW5zaW9uID0gYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnNbaV07
CisJCQkJaWYgKGFubm90YXRpb25PbkRpbWVuc2lvbiA9PSBudWxsKSBjb250aW51ZTsKKwkJCQlh
bm5vdGF0ZUxpc3QoZGltZW5zaW9uLmFubm90YXRpb25zKCksIGFubm90YXRpb25PbkRpbWVuc2lv
biwgYXN0LCBjb250ZXh0KTsKIAkJCX0KIAkJfQotCi0JCWlmIChjdXJyZW50VHlwZSAhPSBudWxs
KSB7Ci0JCQlpZiAoY3VycmVudFR5cGUgaW5zdGFuY2VvZiBBbm5vdGF0YWJsZVR5cGUpIHsKLQkJ
CQlBbm5vdGF0YWJsZVR5cGUgYW5ub3RhdGFibGVUeXBlID0gKEFubm90YXRhYmxlVHlwZSkgY3Vy
cmVudFR5cGU7Ci0JCQkJTGlzdCBhbm5vdGF0aW9ucyA9IGFubm90YXRhYmxlVHlwZS5hbm5vdGF0
aW9ucygpOwotCQkJCWlmIChhbm5vdGF0aW9ucyA9PSBudWxsIHx8IGFubm90YXRpb25zLnNpemUo
KSA9PSAwKSB7Ci0JCQkJCU5hbWUgcXVhbGlmaWVyTmFtZSA9IGFzdC5uZXdOYW1lKGN1cnJlbnRU
eXBlLnRvU3RyaW5nKCkpOwotCQkJCQlyZXR1cm4gYXN0Lm5ld05hbWVRdWFsaWZpZWRUeXBlKHF1
YWxpZmllck5hbWUsIGFzdC5uZXdTaW1wbGVOYW1lKGdldFJhd05hbWUobm9ybWFsaXplZEJpbmRp
bmcpKSk7Ci0JCQkJfQotCQkJfQotCQkJcmV0dXJuIGFzdC5uZXdRdWFsaWZpZWRUeXBlKGN1cnJl
bnRUeXBlLCBhc3QubmV3U2ltcGxlTmFtZShnZXRSYXdOYW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkp
OwotCQl9Ci0JCXJldHVybiBhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShnZXRSYXdOYW1l
KG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCQlyZXR1cm4gYXJyYXlUeXBlOwogCX0KIAotCXByaXZh
dGUgdm9pZCBhbm5vdGF0ZVR5cGUoQW5ub3RhdGFibGVUeXBlIHR5cGUsIElBbm5vdGF0aW9uQmlu
ZGluZyBbXSBhbm5vdGF0aW9uQmluZGluZ3MsIEFTVCBhc3QsIEltcG9ydFJld3JpdGVDb250ZXh0
IGNvbnRleHQpIHsKLQkJZm9yIChpbnQgaSA9IDA7IGk8IGFubm90YXRpb25CaW5kaW5ncy5sZW5n
dGg7IGkrKykgewotCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gbmV3QW5ub3RhdGlvbihhc3Qs
IGFubm90YXRpb25CaW5kaW5nc1tpXSwgY29udGV4dCk7Ci0JCQlpZiAoYW5ub3RhdGlvbiAhPSBu
dWxsKSB0eXBlLmFubm90YXRpb25zKCkuYWRkKGFubm90YXRpb24pOworCXByaXZhdGUgVHlwZSBp
bnRlcm5hbEFkZEltcG9ydChJVHlwZUJpbmRpbmcgYmluZGluZywgQVNUIGFzdCwgSW1wb3J0UmV3
cml0ZUNvbnRleHQgY29udGV4dCwgVHlwZSBjdXJyZW50VHlwZSwgYm9vbGVhbiBnZXRCYXNlKSB7
CisJCVR5cGUgdHlwZSA9IG51bGw7CisJCUlUeXBlQmluZGluZyBub3JtYWxpemVkQmluZGluZyA9
IG51bGw7CisJCQorCQlpZiAoYmluZGluZy5pc1ByaW1pdGl2ZSgpKSB7CisJCQl0eXBlID0gYXN0
Lm5ld1ByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZS50b0NvZGUoYmluZGluZy5nZXROYW1lKCkp
KTsKKwkJCW5vcm1hbGl6ZWRCaW5kaW5nPSBiaW5kaW5nOworCQl9IGVsc2UgeworCQkJbm9ybWFs
aXplZEJpbmRpbmc9IG5vcm1hbGl6ZVR5cGVCaW5kaW5nKGJpbmRpbmcpOworCQkJaWYgKG5vcm1h
bGl6ZWRCaW5kaW5nID09IG51bGwpIHsKKwkJCQl0eXBlID0gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0
Lm5ld1NpbXBsZU5hbWUoImludmFsaWQiKSk7IC8vJE5PTi1OTFMtMSQKKwkJCX0gZWxzZSBpZiAo
bm9ybWFsaXplZEJpbmRpbmcuaXNUeXBlVmFyaWFibGUoKSkgeworCQkJCQkvLyBubyBpbXBvcnQK
KwkJCQl0eXBlID0gYXN0Lm5ld1NpbXBsZVR5cGUoYXN0Lm5ld1NpbXBsZU5hbWUoYmluZGluZy5n
ZXROYW1lKCkpKTsKKwkJCX0gZWxzZSBpZiAobm9ybWFsaXplZEJpbmRpbmcuaXNXaWxkY2FyZFR5
cGUoKSkgeworCQkJCVdpbGRjYXJkVHlwZSB3Y1R5cGU9IGFzdC5uZXdXaWxkY2FyZFR5cGUoKTsK
KwkJCQlJVHlwZUJpbmRpbmcgYm91bmQ9IG5vcm1hbGl6ZWRCaW5kaW5nLmdldEJvdW5kKCk7CisJ
CQkJaWYgKGJvdW5kICE9IG51bGwgJiYgIWJvdW5kLmlzV2lsZGNhcmRUeXBlKCkgJiYgIWJvdW5k
LmlzQ2FwdHVyZSgpKSB7IC8vIGJ1ZyA5Njk0MgorCQkJCQlUeXBlIGJvdW5kVHlwZT0gYWRkSW1w
b3J0KGJvdW5kLCBhc3QsIGNvbnRleHQpOworCQkJCQl3Y1R5cGUuc2V0Qm91bmQoYm91bmRUeXBl
LCBub3JtYWxpemVkQmluZGluZy5pc1VwcGVyYm91bmQoKSk7CisJCQkJfQorCQkJCXR5cGUgPSB3
Y1R5cGU7CisJCQl9IGVsc2UgaWYgKG5vcm1hbGl6ZWRCaW5kaW5nLmlzQXJyYXkoKSkgeworCQkJ
CVR5cGUgZWxlbWVudFR5cGU9IGFkZEltcG9ydChub3JtYWxpemVkQmluZGluZy5nZXRFbGVtZW50
VHlwZSgpLCBhc3QsIGNvbnRleHQpOworCQkJCXR5cGUgPSBnZXRBcnJheVR5cGUoZWxlbWVudFR5
cGUsIGFzdCwgY29udGV4dCwgbm9ybWFsaXplZEJpbmRpbmcpOworCQkJfQogCQl9CisKKwkJaWYg
KHR5cGUgIT0gbnVsbCkgeworCQkJcmV0dXJuIGFubm90YXRlVHlwZShub3JtYWxpemVkQmluZGlu
ZywgYXN0LCBjb250ZXh0LCB0eXBlKTsKKwkJfQorCisJCWlmIChnZXRCYXNlKSB7CisJCQl0eXBl
ID0gY3JlYXRlQmFzZVR5cGUoYXN0LCBjb250ZXh0LCBub3JtYWxpemVkQmluZGluZyk7CisJCX0g
ZWxzZSAgeworCQkJdHlwZSA9IGN1cnJlbnRUeXBlICE9IG51bGwgPyAoVHlwZSkgYXN0Lm5ld1F1
YWxpZmllZFR5cGUoY3VycmVudFR5cGUsIGFzdC5uZXdTaW1wbGVOYW1lKGdldFJhd05hbWUobm9y
bWFsaXplZEJpbmRpbmcpKSkgOiAKKwkJCQlhc3QubmV3U2ltcGxlVHlwZShhc3QubmV3TmFtZShn
ZXRSYXdOYW1lKG5vcm1hbGl6ZWRCaW5kaW5nKSkpOworCQkJdHlwZSA9IGFubm90YXRlVHlwZShu
b3JtYWxpemVkQmluZGluZywgYXN0LCBjb250ZXh0LCB0eXBlKTsKKwkJfQorCisJCUlUeXBlQmlu
ZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBub3JtYWxpemVkQmluZGluZy5nZXRUeXBlQXJndW1lbnRz
KCk7CisJCWlmICh0eXBlQXJndW1lbnRzLmxlbmd0aCA+IDApIHsKKwkJCVBhcmFtZXRlcml6ZWRU
eXBlIHBhcmFtVHlwZSA9IGFzdC5uZXdQYXJhbWV0ZXJpemVkVHlwZSh0eXBlKTsKKwkJCUxpc3Qg
YXJndW1lbnRzID0gcGFyYW1UeXBlLnR5cGVBcmd1bWVudHMoKTsKKwkJCWZvciAoaW50IGkgPSAw
OyBpIDwgdHlwZUFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeworCQkJCUlUeXBlQmluZGluZyBjdXJy
ID0gdHlwZUFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoY29udGFpbnNOZXN0ZWRDYXB0dXJlKGN1cnIs
IGZhbHNlKSkgeyAvLyBzZWUgYnVnIDEwMzA0NAorCQkJCQlhcmd1bWVudHMuYWRkKGFzdC5uZXdX
aWxkY2FyZFR5cGUoKSk7CisJCQkJfSBlbHNlIHsKKwkJCQkJYXJndW1lbnRzLmFkZChhZGRJbXBv
cnQoY3VyciwgYXN0LCBjb250ZXh0KSk7CisJCQkJfQorCQkJfQorCQkJdHlwZSA9IHBhcmFtVHlw
ZTsKKwkJfQorCQlyZXR1cm4gdHlwZTsKIAl9CiAKIAlwcml2YXRlIEFubm90YXRpb24gbmV3QW5u
b3RhdGlvbihBU1QgYXN0LCBJQW5ub3RhdGlvbkJpbmRpbmcgYW5ub3RhdGlvbiwgSW1wb3J0UmV3
cml0ZUNvbnRleHQgY29udGV4dCkgewotCQlUeXBlIHR5cGUgPSBjcmVhdGVUeXBlKChUeXBlKSBu
dWxsLCBhbm5vdGF0aW9uLmdldEFubm90YXRpb25UeXBlKCksIGFzdCwgY29udGV4dCk7CisJCVR5
cGUgdHlwZSA9IGFkZEltcG9ydChhbm5vdGF0aW9uLmdldEFubm90YXRpb25UeXBlKCksIGFzdCwg
Y29udGV4dCk7CiAJCU5hbWUgbmFtZTsKIAkJaWYgKHR5cGUgaW5zdGFuY2VvZiBTaW1wbGVUeXBl
KSB7CiAJCQlTaW1wbGVUeXBlIHNpbXBsZVR5cGUgPSAoU2ltcGxlVHlwZSkgdHlwZTsKIAkJCW5h
bWUgPSBzaW1wbGVUeXBlLmdldE5hbWUoKTsKLQkJCXNpbXBsZVR5cGUuc2V0TmFtZShhc3QubmV3
U2ltcGxlTmFtZShuYW1lLnRvU3RyaW5nKCkpKTsKKwkJCS8vIHJlcGxhY2UgbmFtZSB0byBhbGxv
dyByZXVzZSAtIHBheSByYW5zb20uCisJCQlzaW1wbGVUeXBlLnNldE5hbWUoYXN0Lm5ld05hbWUo
ImEiKSk7IC8vJE5PTi1OTFMtMSQKIAkJfSBlbHNlIHsKLQkJCW5hbWUgPSBhc3QubmV3TmFtZSh0
eXBlLnRvU3RyaW5nKCkpOworCQkJbmFtZSA9IGFzdC5uZXdOYW1lKCJpbnZhbGlkIik7IC8vJE5P
Ti1OTFMtMSQKIAkJfQogCiAJCUlNZW1iZXJWYWx1ZVBhaXJCaW5kaW5nW10gbXZwcz0gYW5ub3Rh
dGlvbi5nZXREZWNsYXJlZE1lbWJlclZhbHVlUGFpcnMoKTsKQEAgLTEzMzgsNyArMTMwOSw3IEBA
CiAJCQlyZXR1cm4gcmVzdWx0OwogCQl9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgSVR5cGVC
aW5kaW5nKSB7CiAJCQlUeXBlTGl0ZXJhbCByZXN1bHQgPSBhc3QubmV3VHlwZUxpdGVyYWwoKTsK
LQkJCXJlc3VsdC5zZXRUeXBlKGNyZWF0ZVR5cGUoKFR5cGUpIG51bGwsIChJVHlwZUJpbmRpbmcp
IHZhbHVlLCBhc3QsIGNvbnRleHQpKTsKKwkJCXJlc3VsdC5zZXRUeXBlKGFkZEltcG9ydCggKElU
eXBlQmluZGluZykgdmFsdWUsIGFzdCwgY29udGV4dCkpOwogCQkJcmV0dXJuIHJlc3VsdDsKIAkJ
fSBlbHNlIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykgewogCQkJU3RyaW5nTGl0ZXJhbCBy
ZXN1bHQgPSBhc3QubmV3U3RyaW5nTGl0ZXJhbCgpOwpAQCAtMTM0OSw3ICsxMzIwLDcgQEAKIAog
CQkJRmllbGRBY2Nlc3MgcmVzdWx0ID0gYXN0Lm5ld0ZpZWxkQWNjZXNzKCk7CiAJCQlyZXN1bHQu
c2V0TmFtZShhc3QubmV3U2ltcGxlTmFtZSh2YXJpYWJsZS5nZXROYW1lKCkpKTsKLQkJCVR5cGUg
dHlwZSA9IGNyZWF0ZVR5cGUoKFR5cGUpIG51bGwsIHZhcmlhYmxlLmdldFR5cGUoKSwgYXN0LCBj
b250ZXh0KTsKKwkJCVR5cGUgdHlwZSA9IGFkZEltcG9ydCh2YXJpYWJsZS5nZXRUeXBlKCksIGFz
dCwgY29udGV4dCk7CiAJCQlOYW1lIG5hbWU7CiAJCQlpZiAodHlwZSBpbnN0YW5jZW9mIFNpbXBs
ZVR5cGUpIHsKIAkJCQlTaW1wbGVUeXBlIHNpbXBsZVR5cGUgPSAoU2ltcGxlVHlwZSkgdHlwZTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>