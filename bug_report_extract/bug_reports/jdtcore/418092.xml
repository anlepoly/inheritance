<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>418092</bug_id>
          
          <creation_ts>2013-09-26 08:38:00 -0400</creation_ts>
          <short_desc>ArrayOutOfBoundException while autocompleting a jar library with attached javadoc</short_desc>
          <delta_ts>2014-05-19 05:01:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alex Falappa">alex.falappa</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>dirk.ziegenbalg</cc>
    
    <cc>jarthana</cc>
    
    <cc>javier.villa00</cc>
    
    <cc>jritchey</cc>
    
    <cc>manpalat</cc>
    
    <cc>tparker</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62204"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62222"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2311062</commentid>
    <comment_count>0</comment_count>
    <who name="Alex Falappa">alex.falappa</who>
    <bug_when>2013-09-26 08:38:43 -0400</bug_when>
    <thetext>Fresh install of Eclipse 4.3 with a new workspace.
Create a new maven based projects based on the quickstart archetype.
Add a dependency on org.jooq:jooq:3.1 (http://www.jooq.org/)
Create a new class with a main method.
In the method type:
    DSLContext ctx=DSL.using(SQLDialect.ORACLE);
    ctx.  &lt;- autocompletion pops up here
Press &apos;s&apos; (to look for &apos;select&apos; method)

Autocompletion stops working and the following exception is logged in the error.log:
Message: Unhandled event loop exception
Stack trace: org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.ArrayIndexOutOfBoundsException: 1)
	at org.eclipse.swt.SWT.error(SWT.java:4397)
	at org.eclipse.swt.SWT.error(SWT.java:4312)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3717)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3366)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
Caused by: java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.codeassist.InternalCompletionProposal.findMethodParameterNames(InternalCompletionProposal.java:314)
	at org.eclipse.jdt.internal.codeassist.InternalCompletionProposal.findParameterNames(InternalCompletionProposal.java:1440)
	at org.eclipse.jdt.ui.text.java.CompletionProposalLabelProvider.appendUnboundedParameterList(CompletionProposalLabelProvider.java:113)
	at org.eclipse.jdt.ui.text.java.CompletionProposalLabelProvider.createMethodProposalLabel(CompletionProposalLabelProvider.java:272)
	at org.eclipse.jdt.ui.text.java.CompletionProposalLabelProvider.createStyledLabel(CompletionProposalLabelProvider.java:570)
	at org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.computeDisplayString(LazyJavaCompletionProposal.java:263)
	at org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.getDisplayString(LazyJavaCompletionProposal.java:246)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.isValidPrefix(AbstractJavaCompletionProposal.java:802)
	at org.eclipse.jdt.internal.ui.text.java.LazyJavaCompletionProposal.isValidPrefix(LazyJavaCompletionProposal.java:378)
	at org.eclipse.jdt.internal.ui.text.java.JavaMethodCompletionProposal.isValidPrefix(JavaMethodCompletionProposal.java:289)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.validate(AbstractJavaCompletionProposal.java:754)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeFilteredProposals(CompletionProposalPopup.java:1486)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$4(CompletionProposalPopup.java:1449)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$1.run(CompletionProposalPopup.java:375)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	... 24 more

Googling for a solution I&apos;ve also found the same issue reported in the following bug report on a different library:
https://code.google.com/p/projectlombok/issues/detail?id=545

Session data:
eclipse.buildId=4.3.0.I20130605-2000
java.version=1.7.0_25
java.vendor=Oracle Corporation
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=it_IT
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2311396</commentid>
    <comment_count>1</comment_count>
    <who name="Alex Falappa">alex.falappa</who>
    <bug_when>2013-09-27 02:40:45 -0400</bug_when>
    <thetext>After additional investigation I&apos;ve found that the mentioned exception does not occur in a normal java project and if the jooq jar is manually added to the build path. This may mean that the problem may lie in the plugin that manages Maven dependencies (m2e plugin?).

Reassigning to m2e.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313082</commentid>
    <comment_count>2</comment_count>
    <who name="Alex Falappa">alex.falappa</who>
    <bug_when>2013-10-01 12:28:15 -0400</bug_when>
    <thetext>Further investigation after upgrading to Kepler 4.3 SR1 and downgrading jdk to 7u25 to prevent other anomalies.

The problem is not linked to maven projects, as it presents on normal java projects too, but to the presence of the javadoc attachment to the jooq library. If the javadoc attachment is removed completion works flawlessly.

Reassigning to JDT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313237</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-10-02 03:42:38 -0400</bug_when>
    <thetext>(In reply to Alex Falappa from comment #2)
&gt; Further investigation after upgrading to Kepler 4.3 SR1 and downgrading jdk
&gt; to 7u25 to prevent other anomalies.
&gt; 
&gt; The problem is not linked to maven projects, as it presents on normal java
&gt; projects too, but to the presence of the javadoc attachment to the jooq
&gt; library. If the javadoc attachment is removed completion works flawlessly.

I suspect that the attached Javadoc does not match the actual/binary code. Can you check that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314318</commentid>
    <comment_count>4</comment_count>
    <who name="Alex Falappa">alex.falappa</who>
    <bug_when>2013-10-04 08:57:03 -0400</bug_when>
    <thetext>Sorry for late feedback.

At a first glance the javadoc jar content seems to correspond (you can download it at http://repo1.maven.org/maven2/org/jooq/jooq/3.1.0/jooq-3.1.0-javadoc.jar).

As an additional note by attaching a remote javadoc to the jooq jar (pointing at http://www.jooq.org/javadoc/latest/) all works nicely.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347321</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-01-09 04:33:29 -0500</bug_when>
    <thetext>See bug 414024 comment 13 for a self-contained test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362617</commentid>
    <comment_count>6</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-02-12 19:47:48 -0500</bug_when>
    <thetext>*** Bug 414024 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371285</commentid>
    <comment_count>7</comment_count>
    <who name="Javier Villa">javier.villa00</who>
    <bug_when>2014-03-04 11:09:25 -0500</bug_when>
    <thetext>I noticed this with a project including the google guava libraries and can confirm the relation with Javadocs:

Bug happens with a user library configured with:

JAR file: guava-16.0.1.jar
Javadorc JAR file: guava-16.0.1-javadoc.jar

Obtained from google at https://code.google.com/p/guava-libraries/

Removing the Javadoc caused the bug to stop happening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372731</commentid>
    <comment_count>8</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-03-06 19:59:02 -0500</bug_when>
    <thetext>The issue here is an overly simplistic searching of Javadoc for the the function&apos;s parameter list. If you have a function signature like:

  @GwtIncompatible(&quot;NavigableSet&quot;)
  @SuppressWarnings(&quot;unchecked&quot;)
  public static &lt;E&gt; NavigableSet&lt;E&gt; filter(
      NavigableSet&lt;E&gt; unfiltered, Predicate&lt;? super E&gt; predicate) {
    ...
  }

the generated Javadoc is:
&lt;h4&gt;filter&lt;/h4&gt;
&lt;pre&gt;&lt;a href=&quot;../../../../com/google/common/annotations/GwtIncompatible.html&quot; title=&quot;annotation in com.google.common.annotations&quot;&gt;@GwtIncompatible&lt;/a&gt;(&lt;a href=&quot;../../../../com/google/common/annotations/GwtIncompatible.html#value()&quot;&gt;value&lt;/a&gt;=&quot;NavigableSet&quot;)
public static&amp;nbsp;&amp;lt;E&amp;gt;&amp;nbsp;java.util.NavigableSet&amp;lt;E&amp;gt;&amp;nbsp;filter(java.util.NavigableSet&amp;lt;E&amp;gt;&amp;nbsp;unfiltered,
                                                        &lt;a href=&quot;../../../../com/google/common/base/Predicate.html&quot; title=&quot;interface in com.google.common.base&quot;&gt;Predicate&lt;/a&gt;&amp;lt;? super E&amp;gt;&amp;nbsp;predicate)&lt;/pre&gt;

The code in BinaryMethod.getParameterNames() near line 352 extracts parameters by searching for the first occurrence of &quot;(&quot;, and thus extracts the single parameter to the first annotation, not the two parameters to the function. The array size mismatch is what causes the ArrayOutOfBoundException.

The second issue here is that once the runtime exception has been triggered, keyboard and mouse focus is lost, and the only recourse is to kill Eclipse. I&apos;m not as sure about the best way to protect against that, but it looks like the problem is that org.eclipse.jface.text.contentassist.CompletionProposalPopup never unregisters its fFocusHelper. Perhaps that can be remedied by wrapping the call to handleSetData() in CompletionProposalPopup&apos;s SetData listener in a try/catch block, catching RuntimeException and invoking hide() before rethrowing the exception?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373290</commentid>
    <comment_count>9</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-03-07 18:55:19 -0500</bug_when>
    <thetext>(In reply to Terry Parker from comment #8)
&gt; The issue here is an overly simplistic searching of Javadoc for the the
&gt; function&apos;s parameter list. If you have a function signature like:
&gt; 
&gt;   @GwtIncompatible(&quot;NavigableSet&quot;)
&gt;   @SuppressWarnings(&quot;unchecked&quot;)
&gt;   public static &lt;E&gt; NavigableSet&lt;E&gt; filter(
&gt;       NavigableSet&lt;E&gt; unfiltered, Predicate&lt;? super E&gt; predicate) {
&gt;     ...
&gt;   }
&gt; 
&gt; the generated Javadoc is:
&gt; &lt;h4&gt;filter&lt;/h4&gt;
&gt; &lt;pre&gt;&lt;a
&gt; href=&quot;../../../../com/google/common/annotations/GwtIncompatible.html&quot;
&gt; title=&quot;annotation in com.google.common.annotations&quot;&gt;@GwtIncompatible&lt;/a&gt;(&lt;a
&gt; href=&quot;../../../../com/google/common/annotations/GwtIncompatible.
&gt; html#value()&quot;&gt;value&lt;/a&gt;=&quot;NavigableSet&quot;)
&gt; public
&gt; static&amp;nbsp;&amp;lt;E&amp;gt;&amp;nbsp;java.util.NavigableSet&amp;lt;E&amp;gt;&amp;nbsp;filter(java.
&gt; util.NavigableSet&amp;lt;E&amp;gt;&amp;nbsp;unfiltered,
&gt;                                                         &lt;a
&gt; href=&quot;../../../../com/google/common/base/Predicate.html&quot; title=&quot;interface in
&gt; com.google.common.base&quot;&gt;Predicate&lt;/a&gt;&amp;lt;? super E&amp;gt;&amp;nbsp;predicate)&lt;/pre&gt;
&gt; 
&gt; The code in BinaryMethod.getParameterNames() near line 352 extracts
&gt; parameters by searching for the first occurrence of &quot;(&quot;, and thus extracts
&gt; the single parameter to the first annotation, not the two parameters to the
&gt; function. The array size mismatch is what causes the
&gt; ArrayOutOfBoundException.
&gt; 
&gt; The second issue here is that once the runtime exception has been triggered,
&gt; keyboard and mouse focus is lost, and the only recourse is to kill Eclipse.
&gt; I&apos;m not as sure about the best way to protect against that, but it looks
&gt; like the problem is that
&gt; org.eclipse.jface.text.contentassist.CompletionProposalPopup never
&gt; unregisters its fFocusHelper. Perhaps that can be remedied by wrapping the
&gt; call to handleSetData() in CompletionProposalPopup&apos;s SetData listener in a
&gt; try/catch block, catching RuntimeException and invoking hide() before
&gt; rethrowing the exception?

I filed bug 429925: &quot;Protect against poorly behaved completion proposers&quot; with a suggested patch for the second issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389872</commentid>
    <comment_count>10</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-04-16 12:03:57 -0400</bug_when>
    <thetext>*** Bug 432941 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396613</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-05 01:15:45 -0400</bug_when>
    <thetext>Looks like this has always been around and not sure if we have the time to take this up for Luna. Moving to 4.5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2397797</commentid>
    <comment_count>12</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-05-06 18:58:54 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #11)
&gt; Looks like this has always been around and not sure if we have the time to
&gt; take this up for Luna. Moving to 4.5.

I pushed up a patch for review at: https://git.eclipse.org/r/#/c/26082</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2397890</commentid>
    <comment_count>13</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-05-07 03:29:41 -0400</bug_when>
    <thetext>Jay, please take a look at the patch during RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398756</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 06:48:08 -0400</bug_when>
    <thetext>Patch looks good. One issue I found is, I can trick the code into failing by having something like this for the annotation value:

value=&quot;test)&gt;filter&lt;(&quot;

But I think the odds of someone using such code is very little.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399278</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-09 06:30:22 -0400</bug_when>
    <thetext>Thanks Manoj, the fix is in master now:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=1d3546ae21ffe0ff967875f1cabb468e47817326</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399555</commentid>
    <comment_count>16</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-05-09 12:41:19 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; Thanks Manoj, the fix is in master now:
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=1d3546ae21ffe0ff967875f1cabb468e47817326

Thanks for the review, Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403514</commentid>
    <comment_count>17</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-05-19 05:01:27 -0400</bug_when>
    <thetext>Verified for Luna 4.4 RC1 Build id: I20140518-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>