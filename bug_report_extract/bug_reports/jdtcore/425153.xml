<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425153</bug_id>
          
          <creation_ts>2014-01-09 01:25:00 -0500</creation_ts>
          <short_desc>[1.8] Having wildcard allows incompatible types in a lambda expression</short_desc>
          <delta_ts>2014-01-09 12:46:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347254</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-09 01:25:03 -0500</bug_when>
    <thetext>The following code should not be allowed, but ECJ compiles it:

class C1 {}
class C2 {}

interface I&lt;P1 extends C1, P2 extends P1&gt; {
    P2 foo(P1 p1);
}

public class Main  {
	    public static void main(String argv[]) {
	    	I&lt;?, ?&gt; i = (C1 c1) -&gt; { return new C2(); };
	        Object c2 = i.foo(null);
	    }
}

Note that C1 and C2 have no relationship and hence C2 can&apos;t be returned for P2 (which effectively extends C1). As you would expect, this throws up &quot;java.lang.VerifyError: Bad return type&quot; when the program is run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347260</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-09 01:45:24 -0500</bug_when>
    <thetext>(Removed by droy 2014-01-09 as requested by the project lead)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347268</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-09 02:42:08 -0500</bug_when>
    <thetext>Some bug in 18.5.3 Functional Interface Parameterization Inference ? Stephan,
Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347562</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-09 11:22:20 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Some bug in 18.5.3 Functional Interface Parameterization Inference ? Stephan,
&gt; Thanks for taking a look.

Right, in 0.7.0 Functional Interface Parameterization still allowed wildcards to survive inference (unless this was silently intended to be covered by requiring wellformedness). This has been fixed in 0.9.0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347617</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-09 12:46:01 -0500</bug_when>
    <thetext>Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=f000b81f70edf0fb40319f8edb7c5d0c8cfe94b6</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>