<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>441726</bug_id>
          
          <creation_ts>2014-08-13 14:30:00 -0400</creation_ts>
          <short_desc>JDT performance regression due to bug 410207</short_desc>
          <delta_ts>2014-09-16 18:17:00 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Terry Parker">tparker</reporter>
          <assigned_to name="Terry Parker">tparker</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>eclipse.sprigogin</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63200"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2438687</commentid>
    <comment_count>0</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-08-13 14:30:25 -0400</bug_when>
    <thetext>The following bug introduced a performance regression to many common JDT operations (e.g., refreshing the Package Explorer, which issues JavaProject.getAllPackageFragmentRoots() calls):
Bug 410207 - Compiler incorrectly reports error message &quot;X cannot be resolved. It is indirectly referenced from required .class files&quot;

That change added retrieval of a jar file&apos;s language level to the JarPackageFragmentRoot constructors, as can bee seen in the following stack trace:

main&quot; prio=10 tid=0x0000000001dba800 nid=0x38b8 runnable [0x00007fff0b08f000]
   java.lang.Thread.State: RUNNABLE
        at (C/C++) 0x00007f2633c40d2d (Unknown Source)
        at (C/C++) 0x00007f262a60acec (Unknown Source)
        at java.util.zip.ZipFile.open(Native Method)
        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:215)
        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:145)
        at java.util.zip.ZipFile.&lt;init&gt;(ZipFile.java:159)
        at org.eclipse.jdt.internal.core.JavaModelManager.getZipFile(JavaModelManager.java:2712)
        at org.eclipse.jdt.internal.core.util.Util.getJdkLevel(Util.java:846)
        at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.&lt;init&gt;(JarPackageFragmentRoot.java:65)
        at org.eclipse.jdt.internal.core.JavaProject.getPackageFragmentRoot0(JavaProject.java:1836)
        at org.eclipse.jdt.internal.core.JavaProject.getPackageFragmentRoot(JavaProject.java:1826)
        at org.eclipse.jdt.internal.core.DeltaProcessor$RootInfo.getPackageFragmentRoot(DeltaProcessor.java:138)
        at org.eclipse.jdt.internal.core.DeltaProcessor$RootInfo.&lt;init&gt;(DeltaProcessor.java:130)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.getRootInfos(DeltaProcessingState.java:336)
        at org.eclipse.jdt.internal.core.DeltaProcessingState.initializeRootsWithPreviousSession(DeltaProcessingState.java:278)
        - locked &lt;0x00000006e820a5e8&gt; (a org.eclipse.jdt.internal.core.DeltaProcessingState)
        at org.eclipse.jdt.internal.core.JavaModelManager.startup(JavaModelManager.java:5045)

I ran the FullSourceWorkspaceModelTests.testGetAllPackageFragmentRoots test on both Luna and our internal Kepler release and see a 5x performance degradation. Note that our internal Kepler release includes the cherry pick for bug 411423.

Version: Luna (4.4.0)
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Used default compliance: 1.4
Unzipping /usr/local/google/home/tparker/releng/eclipse.platform.releng.aggregator/eclipse.jdt.core.binaries/org.eclipse.jdt.core.tests.binaries/full-source-R3_0.zip
in /usr/local/google/home/tparker/workspace/junit-workspace... done in 1386ms.
Create and open projects in environment...(6456ms)
Create lib entries for the JDKs...5 found (0ms)
Set projects classpaths...(2537ms)
================================================================================
Running FullSourceWorkspaceModelTests#testGetAllPackageFragmentRoots...
Create project BigProject in /usr/local/google/home/tparker/workspace/junit-workspace:
- create 200 folders x 200 packages...
=&gt; global time = 1.851 seconds)
- add project to full source workspace...(1660ms)
- Create compilation unit with secondary type...(1ms)
Scenario &apos;org.eclipse.jdt.core.tests.performance.FullSourceWorkspaceModelTests#testGetAllPackageFragmentRoots()&apos; (average over 10 samples):
  System Time:             105ms        (95% in [89ms, 120ms])         Measurable effect: 26ms (1.3 SDs) (required sample size for an effect of 5% of mean: 259)
  Used Java Heap:         6.46M         (95% in [5.8M, 7.13M])         Measurable effect: 1.17M (1.3 SDs) (required sample size for an effect of 5% of mean: 132)
  Working Set:             8.4K         (95% in [-8.84K, 25.65K])      Measurable effect: 30.49K (1.3 SDs) (required sample size for an effect of 5% of stdev: 6401)
  Elapsed Process:         105ms        (95% in [89ms, 120ms])         Measurable effect: 26ms (1.3 SDs) (required sample size for an effect of 5% of mean: 259)
  Kernel time:              39ms        (95% in [33ms, 44ms])          Measurable effect: 9ms (1.3 SDs) (required sample size for an effect of 5% of mean: 230)
  CPU Time:                123ms        (95% in [101ms, 144ms])        Measurable effect: 37ms (1.3 SDs) (required sample size for an effect of 5% of mean: 368)
  Hard Page Faults:          0          (95% in [0, 0])              
  Soft Page Faults:       2.02K         (95% in [2K, 2.03K])           Measurable effect: 23 (1.3 SDs)
  Text Size:                 0          (95% in [0, 0])              
  Data Size:                 0          (95% in [0, 0])              
  Library Size:              0          (95% in [0, 0])              


Version: Kepler (4.3.2) (with cherry picks of JavaModelManager external file cache fixes)
OpenJDK 64-Bit Server VM warning: ignoring option MaxPermSize=256m; support was removed in 8.0
Used default compliance: 1.4
Unzipping /usr/local/google/home/tparker/releng/eclipse.platform.releng.aggregator/eclipse.jdt.core.binaries/org.eclipse.jdt.core.tests.binaries/full-source-R3_0.zip
in /usr/local/google/home/tparker/workspace/junit-workspace... done in 1407ms.
Create and open projects in environment...(5606ms)
Create lib entries for the JDKs...5 found (1ms)
Set projects classpaths...(1205ms)
================================================================================
Running FullSourceWorkspaceModelTests#testGetAllPackageFragmentRoots...
Create project BigProject in /usr/local/google/home/tparker/workspace/junit-workspace:
- create 200 folders x 200 packages...
=&gt; global time = 1.694 seconds)
- add project to full source workspace...(1322ms)
- Create compilation unit with secondary type...(2ms)
Scenario &apos;org.eclipse.jdt.core.tests.performance.FullSourceWorkspaceModelTests#testGetAllPackageFragmentRoots()&apos; (average over 10 samples):
  System Time:              20ms        (95% in [5ms, 35ms])           Measurable effect: 26ms (1.3 SDs) (required sample size for an effect of 5% of mean: 6367)
  Used Java Heap:         2.07M         (95% in [1.57M, 2.58M])        Measurable effect: 915.19K (1.3 SDs) (required sample size for an effect of 5% of mean: 744)
  Working Set:             9.2K         (95% in [-7.97K, 26.37K])      Measurable effect: 30.36K (1.3 SDs) (required sample size for an effect of 5% of stdev: 6400)
  Elapsed Process:          20ms        (95% in [5ms, 35ms])           Measurable effect: 26ms (1.3 SDs) (required sample size for an effect of 5% of mean: 6367)
  Kernel time:               3ms        (95% in [0ms, 6ms])            Measurable effect: 6ms (1.3 SDs) (required sample size for an effect of 5% of stdev: 6401)
  CPU Time:                 30ms        (95% in [21ms, 38ms])          Measurable effect: 14ms (1.3 SDs) (required sample size for an effect of 5% of mean: 949)
  Hard Page Faults:          0          (95% in [0, 0])              
  Soft Page Faults:         12          (95% in [0, 24])               Measurable effect: 21 (1.3 SDs) (required sample size for an effect of 5% of stdev: 6400)
  Text Size:                 0          (95% in [0, 0])              
  Data Size:                 0          (95% in [0, 0])              
  Library Size:              0          (95% in [0, 0])

I&apos;m investigating a fix for this regression by caching the language level for each jar so it is not so frequently computed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438842</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-14 01:00:55 -0400</bug_when>
    <thetext>(In reply to Terry Parker from comment #0)
&gt; I&apos;m investigating a fix for this regression by caching the language level
&gt; for each jar so it is not so frequently computed.

Thanks a lot, Terry!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439217</commentid>
    <comment_count>2</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-08-14 14:25:25 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #1)
&gt; (In reply to Terry Parker from comment #0)
&gt; &gt; I&apos;m investigating a fix for this regression by caching the language level
&gt; &gt; for each jar so it is not so frequently computed.
&gt; 
&gt; Thanks a lot, Terry!

Uploaded https://git.eclipse.org/r/#/c/31700</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439795</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-18 02:59:13 -0400</bug_when>
    <thetext>(In reply to Terry Parker from comment #2)
&gt; Uploaded https://git.eclipse.org/r/#/c/31700

I can clearly see the performance improvement - the results are very similar to the ones you reported in comment #0, which is good. I will release the patch after reviewing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440126</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-18 11:52:49 -0400</bug_when>
    <thetext>Thanks Terry, the fix has been released in master via: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=3d73760dc9e0c52d27b28aa6b5ee7c1a07bc4ccf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440163</commentid>
    <comment_count>5</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-08-18 13:10:24 -0400</bug_when>
    <thetext>Thanks for the quick review, Jay!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445520</commentid>
    <comment_count>6</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 10:50:40 -0400</bug_when>
    <thetext>I think this was a wrong solution, see bug 440470 comment 13.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452780</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-16 18:17:00 -0400</bug_when>
    <thetext>As this fix has been reverted (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=440470#c21), nothing to verify.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>