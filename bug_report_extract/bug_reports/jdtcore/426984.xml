<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426984</bug_id>
          
          <creation_ts>2014-01-30 06:24:00 -0500</creation_ts>
          <short_desc>[1.8][inference] Capture problem in GenericsRegressionTest_1_8.testBug424710()</short_desc>
          <delta_ts>2014-02-21 04:05:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>philipp</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2356526</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 06:24:28 -0500</bug_when>
    <thetext>Bug 420525 masked a problem in GenericsRegressionTest_1_8.testBug424710() so that fixing bug 420525 will create a regression in this test, saying:

Type mismatch: cannot convert from Stream&lt;capture#8-of ? extends Object&gt; to Stream&lt;? extends capture#4-of ? extends Object&gt;

I don&apos;t really know what &quot;? extends capture#4-of ? extends Object&quot; means and if we can avoid such beasts.

When releasing the fix for bug 420525 I will disable this test for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358747</commentid>
    <comment_count>1</comment_count>
    <who name="Philipp Keck">philipp</who>
    <bug_when>2014-02-04 14:48:37 -0500</bug_when>
    <thetext>I think I can provide an example to this bug (otherwise I found another similar one):

I use the latest Java8 JDT (Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140204-0108_BETA_JAVA8) and Hamcrest matchers 1.3 (verifyThat) and JavaFX (ObservableList).

For simplification, I call my own class &quot;X&quot;. I have an ObservableList&lt;X&gt; &quot;list&quot; and want to check, if it contains a certain element &quot;x&quot;:
assertThat(list, hasItem(x));

While the above line of code is accepted by Eclipse, this one is not:
assertThat(list, not(hasItem(x)));

Even though the not()-method returns the same type that it accepts as its parameter. So there is no apparent reason why only one of them should work. Everything worked fine in some previous version of JDT for Java8 and also in Java 7. The command line compiler of JDK 8 does not complain either. Eclipse says:
&quot;The method assertThat(T, Matcher&lt;? super T&gt;) in the type MatcherAssert is not applicable for the arguments (ObservableList&lt;X&gt;, Matcher&lt;Iterable&lt;? super X&gt;&gt;)&quot;.

But: Not everything got worse in terms of generics from that previous version of JDT to the latest one. Because of a very similar issue, I had some assertions commented out, which now work! Those are of the form:
assertThat(x, not(sameInstance(y));
where x and y are variables of the same (plain non-generic) type X.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358758</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-04 15:06:08 -0500</bug_when>
    <thetext>(In reply to Philipp Keck from comment #1)

Thanks for reporting.
As I don&apos;t see any captures in your error message, I doubt that it&apos;s the same issue, though.

May I ask you to:
- create a new bug
- paste a small self-contained program
This would greatly help us to reproduce your observations, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358779</commentid>
    <comment_count>3</comment_count>
    <who name="Philipp Keck">philipp</who>
    <bug_when>2014-02-04 15:29:35 -0500</bug_when>
    <thetext>There it is: https://bugs.eclipse.org/bugs/show_bug.cgi?id=427411</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361441</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 05:23:55 -0500</bug_when>
    <thetext>I think this is the same problem as https://bugs.eclipse.org/bugs/show_bug.cgi?id=425897.

I am prototyping a fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361461</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 05:47:30 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; I think this is the same problem as
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=425897.
&gt; 
&gt; I am prototyping a fix.

Cool!

Feel free to pass back to me if type inference is found to cause grief ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361504</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 07:48:57 -0500</bug_when>
    <thetext>Combined fix and tests for bug 425897 and bug 426984 released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=fbb76f52a30ee20f3d4a3f2f5f9a3d507821f378

Basically, it does not make sense for the target type of a poly expression
to contain wildcard captures. Only argument expressions can have captures,
parameter types cannot.

I invented a new IPI: TypeBinding.uncapture(Scope) for this purpose.

While the present fix addresses these two bugs, I actually think we need a
broader fix that addresses all poly expressions and overload resolution scenario.

I believe is is wrong for org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.getParameter(TypeBinding[], int, boolean) to return any captured types.

I will shortly try to construct some test cases where this could interfere
with overload resolution and if that claim proves true, will raise follow
up defects to address the broader issue. However the infrastructure to
solve the more general problem is already a part of this fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361516</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 08:07:18 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #6)
&gt; Combined fix and tests for bug 425897 and bug 426984 released here:
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=fbb76f52a30ee20f3d4a3f2f5f9a3d507821f378
&gt; 
&gt; Basically, it does not make sense for the target type of a poly expression
&gt; to contain wildcard captures. Only argument expressions can have captures,
&gt; parameter types cannot.
&gt; 
&gt; I invented a new IPI: TypeBinding.uncapture(Scope) for this purpose.
&gt; 
&gt; While the present fix addresses these two bugs, I actually think we need a
&gt; broader fix that addresses all poly expressions and overload resolution
&gt; scenario.
&gt; 
&gt; I believe is is wrong for
&gt; org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.
&gt; getParameter(TypeBinding[], int, boolean) to return any captured types.
&gt; 
&gt; I will shortly try to construct some test cases where this could interfere
&gt; with overload resolution and if that claim proves true, will raise follow
&gt; up defects to address the broader issue. However the infrastructure to
&gt; solve the more general problem is already a part of this fix.

Sounds good!

I made a quick scan regarding the role of IC18.getParameter(..). I guess the critical scenario is: outer inference has produced a final type containing captures (OK), and via the rebindInnerPolies family of methods these types are used as target types for finalizing inner inferences. Does this match your observation?

If so, adding the uncapturing into IC18.getParameter(..) might actually be a complete solution, since we consistently use this method for all paths that match the above description. Have you tried adding the uncapture call there? The only problem I see immediately: a little work is needed to feed a scope into this method on all paths.

Also Expression.setExpectedType(..) could be a gate through which all intruders must pass :)

Just mentioning so we have alternative places to evaluate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361526</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 08:15:06 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)

&gt; If so, adding the uncapturing into IC18.getParameter(..) might actually be a
&gt; complete solution, since we consistently use this method for all paths 

I think this is the right place and there should really be a single call
to uncapture from the entire project. ATM, this being a static method causes
more ripples than I was signing up today.

&gt; Also Expression.setExpectedType(..) could be a gate through which all
&gt; intruders must pass :)

I did consider this, yet again more ripples than ... in having to tunnel
scope. Those expressions that preserve scope in a field will still have
a problem in the very first call before initial resolve.

I&apos;ll pursue the IC18.getParameter(..) location if we can construct examples
that show this problem is more pervasive than what has been accounted for (likely)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361623</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 10:10:27 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; 
&gt; &gt; If so, adding the uncapturing into IC18.getParameter(..) might actually be a
&gt; &gt; complete solution, since we consistently use this method for all paths 
&gt; 
&gt; I think this is the right place and there should really be a single call
&gt; to uncapture from the entire project. ATM, this being a static method causes
&gt; more ripples than I was signing up today.

For the record, this causes problems in overload resolution. So I beat a
quick retreat and made a tiny follow up fix here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c1ee186c6c2310acb811595797e078d125bafaaf

We can consider this closed unless and until we see some real issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366549</commentid>
    <comment_count>10</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-21 04:05:32 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)   
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>