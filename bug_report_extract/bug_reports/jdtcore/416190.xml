<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>416190</bug_id>
          
          <creation_ts>2013-08-29 16:40:00 -0400</creation_ts>
          <short_desc>[1.8][null] detect incompatible overrides due to null type annotations</short_desc>
          <delta_ts>2014-03-07 03:06:39 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>sarika.sinha</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2300962</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 16:40:11 -0400</bug_when>
    <thetext>See NullTypeAnnotationTest#testBug416174() for a situation that is not yet detected.
Here the incompatibility is only by an annotation on a type parameter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300982</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 17:04:15 -0400</bug_when>
    <thetext>See bug 416182 comment 0 for an override that creates a contradiction only by a
specific type invocation.

Should be detectable when we instantiate the ParameterizedGenericMethodBinding, I hope.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300992</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 17:16:49 -0400</bug_when>
    <thetext>*** Bug 416182 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2321858</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-10-22 15:00:20 -0400</bug_when>
    <thetext>Another similar situation (from a technical p.o.v.):

  interface Function&lt;I,O&gt; { ... }
  class MyFunc implements Function&lt;@NonNull Object, @Nullable String&gt; { ... }
  
  &lt;@NonNull I,@Nullable O&gt; 
  Collection&lt;O&gt; map1(Collection&lt;I&gt; in, Function&lt;I, O&gt; f) { ... }
  
  map1(inList, new MyFunc());
  
During computeCompatibleMethod() for map1 we substitute the type parameter &apos;@NonNull I&apos; via the substitution &apos;@NonNull Object&apos; to produce &apos;@NonNull @NonNull Object&apos;. After substitution we should check to either filter duplicates or flag contradictions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369281</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-27 07:54:18 -0500</bug_when>
    <thetext>Implemented essentially by using the 1.8 specific utility NullAnnotationMatching also inside ImplicitNullAnnotationVerifier. For this purpose NullAnnotationMatching.analyse() now supports a &apos;strict&apos; mode, where mismatches between annotated and unannotated type parameters are not tolerated.

This part released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e9d42bfbf494b3bd89965c526aaae07d7189c12c

----

Next, I observed that we could end up creating type bindings with duplicate (same) type annotations. For the case of null annotations (if these are enabled) I&apos;m now filtering duplicates in LookupEnvironment.createAnnotatedType(TypeBinding,AnnotationBinding[]), released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c14c8093a10c10363866e505a62237c9c62b679e

----

In preparation for tackling comment 3 I released some refactoring via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=bc58ceae1b3691095e4db8bfcb9f2192eeaf077d

----

To fix the example from comment 3 it needs more like bug 428985:
- collect nullHints when recording a SAME-bound (and setting #instantiation)
- combine all collected nullHints when retrieving an instantiation
I also moved the check for contradictions from 18.5.1 to 18.5.2 inference.

This part released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=df9c3a401cd78995716c690f400af3a4d95f0187

----

Still need to look at the example from bug 416182 comment 0; I have reopened that bug for this purpose.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372828</commentid>
    <comment_count>5</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-03-07 03:06:39 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)
1.0.0.v20140306-1935</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>