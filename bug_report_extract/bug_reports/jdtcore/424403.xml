<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424403</bug_id>
          
          <creation_ts>2013-12-19 02:24:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Generic method call with method reference argument fails to resolve properly.</short_desc>
          <delta_ts>2014-01-23 13:08:00 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
    
    <blocked>424286</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2343649</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-12-19 02:24:14 -0500</bug_when>
    <thetext>This is the code causing the NPE:

interface Functional { int foo(); }

class X {
    static int bar() {
        return -1;
    }
    static &lt;T&gt; T consume(T t) { return null; }

    public static void main(String[] args) {
    	Functional f = consume(X::bar);
    }  
}

Not sure if the NPE is causing it, but we also report a compilation error.

And here&apos;s the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.recordQualifiedReference(CompilationUnitScope.java:636)
	at org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.getSingleAbstractMethod(ReferenceBinding.java:1861)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isPertinentToApplicability(ReferenceExpression.java:554)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.createInitialConstraintsForParameters(InferenceContext18.java:139)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.inferInvocationApplicability(ConstraintExpressionFormula.java:271)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationApplicability(InferenceContext18.java:217)
	at ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343686</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-19 04:02:30 -0500</bug_when>
    <thetext>I fixed the NPE here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=8da497be802fa99e80a3f90a1137af05842698d7

Program still does not compile though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343943</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 11:42:43 -0500</bug_when>
    <thetext>Thanks for the example. We report

&quot;The method consume(T) in the type X is not applicable for the arguments (X::bar)&quot;

I checked with the spec (0.8.0 even) and this seems to be the correct answer. Seeing javac deviate I requested clarification: http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000477.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344192</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-12-20 04:02:52 -0500</bug_when>
    <thetext>This somewhat similar code throws up an NPE in a different location:

interface Functional { int foo(); }

class X {
    static int bar() {
        return -1;
    }
    static &lt;T&gt; T consume(T t) { return null; }

    public static void main(String[] args) {
    	Functional f = consume(X::bar);
    }  
}

Stacktrace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.IntersectionCastTypeBinding.isCompatibleWith(IntersectionCastTypeBinding.java:120)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveType(ReferenceExpression.java:376)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.isCompatibleWith(ReferenceExpression.java:634)
	at org.eclipse.jdt.internal.compiler.lookup.PolyTypeBinding.isCompatibleWith(PolyTypeBinding.java:37)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4490)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344558</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 15:05:55 -0500</bug_when>
    <thetext>*** Bug 424521 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353743</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 13:08:00 -0500</bug_when>
    <thetext>Looking at the answer on the EG list (http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000478.html) we apparently never made that adjustment in ReferenceExpression.isPertinentToApplicability() - I checked: the addition is indeed present in 0.9.2.

Fixed and tests enabled via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5f8bc31fdd9227264ffdb0d653c171e78b54416c</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>