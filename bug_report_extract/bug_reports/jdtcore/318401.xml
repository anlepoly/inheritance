<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>318401</bug_id>
          
          <creation_ts>2010-06-29 22:32:00 -0400</creation_ts>
          <short_desc>FUP of 317858: Clarify eclipse compiler behavior on imports &amp; shadowing</short_desc>
          <delta_ts>2011-10-24 04:05:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>jtperr</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="46133"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1769887</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2010-06-29 22:32:09 -0400</bug_when>
    <thetext>(1) From bug 317858 comment 5:
------------------------------

This bug Eclipse also thinks it is importing a class when it shouldn&apos;t be (due
to obscuring).

I have 2 packages with the following classes:
================================
package p1;

import static p2.OuterClass.Inner;


public class myRunner {

        public static void main(String [] args)
        {
                System.out.println(&quot;Value1 = &quot; +          Inner().toString());
                System.out.println(&quot;Value2 = &quot; +      new Inner().toString());
        }        
}
------------------------

package p1;

public class Inner {

    public String toString()
    {
         return &quot;The Class -- p1.Inner&quot;;
    }

}

-------------------------

package p2;

public class OuterClass {

    public  class Inner{
        @Override
        public String toString()
        {
            return &quot;The Class -- p2.OuterClass.In&quot;;
        }
    }
    public static String Inner()
    {
        return  &quot;The Method -- p2.OuterClass.In()&quot;;

    }

}
----------------------------------
====================================
Since my import statement is STATIC, then it shouldn&apos;t be importing the
non-static class with the same name as the STATIC method.

&quot;Value1&quot; should be &quot;The Method -- p2.OuterClass.In()&quot;
and
&quot;Value2&quot; should be &quot;The Class -- p1.Inner&quot;

The problem is that on the line:

    System.out.println(&quot;Value2 = &quot; +      new Inner().toString());

It should be invoking the class p1.Inner, but Eclipse thinks it is referring to
p1.OuterClass.Inner (which isnt  static and shouldn&apos;t be imported)
And &quot;new Inner()&quot; is not a valid way to call an non-static inner Class; (thus
the error)

-----------------------------------------

(2) From bug 317858 comment 9:
------------------------------

I got the same bug, abused differently, to actually compile in Eclipse and give
a different answer, I thought you might like to see it:


------------------------------------
package p2;

import static p1.Bar.B;
import  p3.Foo.*;

public class OuterTest {

        public static void main(String [] args)
        {
            new OuterTest().beginTest();
         }
        public void beginTest(){
            System.out.print(&quot;1 + 1 =  &quot;);
            if(alwaysTrue()){
                System.out.println(&quot;2&quot;);
            }
            else{
                System.out.println(&quot;3&quot;);
            }
        }
        public boolean alwaysTrue(){ // Returns FALSE in Eclipse
            String myB   =        B.class.getCanonicalName();
            String realB = p1.Bar.B.class.getCanonicalName();
            return myB.equals(realB);
        }
}

------------------------------------
package p1;
public class Bar {
    public static class  B{}
    final public static String B = new String(&quot;random&quot;); 
}
------------------------------------
package p3;

public class Foo {
     public class  B {}
}
------------------------------------

Eclipse will print out &quot;1 + 1 = 3&quot;

-----------------------------------------------------------

(3) From bug 317858 comment 10:
------------------------------

In the above bug, it appears that in &quot;Bar&quot; the field &quot;B&quot; is obscuring the class
with the same name, and then it looks like the import-on-demand from &quot;Foo.*&quot; is
shadowing the single-import &quot;Bar.B&quot;. Perhaps the JSP is a bit to vague on these
corner cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926097</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-09 06:43:41 -0400</bug_when>
    <thetext>(1) I cannot reproduce this case any longer. I get the correct output.
Value1 = The Method -- p2.OuterClass.In()
Value2 = The Class -- p1.Inner

(2) Here also, eclipse behaviour is correct. There are 2 things mentioned in the JLS - shadowing (6.3.1) and obscuring(6.3.2). In this case, because the single static import &quot;import static p1.Bar.B&quot; imports two things with the same name &quot;B&quot;, obscuring rules come into play, which say &quot;a variable will be chosen in preference to a type&quot; when a simple name can be interpreted as the name of a variable, type, or a package. So the static import brings in the field Bar#B and not the type Bar.B. Now the on demand import &quot;import p3.Foo.*&quot; brings in the type Foo.B. So in our CU, there are two things named B - the field Bar#B and the type Foo.B. So, in alwaysTrue(),
myB refers to Foo.B.class 
and realB refers to Bar.B.class
(This is because .class can only be done on a type name and hence in the above 2 statements, the unqualified B is the type Foo.B, and the qualified B is ofcourse the type Bar.B)
Hence, output is correct.

In order to prove this hypothesis, consider what would happen if there was no &quot;import p3.Foo.*&quot;. As soon as I remove that statement, I get an error on the line &quot;String myB  =  B.class.getCanonicalName();&quot; because the unqualified B now only stands for the field Bar#B and we can&apos;t do a .class on it. Hence proved that obscuring rules come into play to import the field Bar#b and not the type  Bar.b. The rest of the analysis follows logically.

Closing as INVALID.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926507</commentid>
    <comment_count>2</comment_count>
    <who name="00jt">jtperr</who>
    <bug_when>2011-05-09 14:50:49 -0400</bug_when>
    <thetext>(1) agreed, it seems now to work with the latest Eclipse.

(2)You said:
&quot;In order to prove this hypothesis, consider what would happen if there was no
&quot;import p3.Foo.*&quot;. As soon as I remove that statement, I get an error on the
line &quot;String myB  =  B.class.getCanonicalName();&quot; &quot;

Yes you get an error, but thats the bug.
You get an error removing &quot;import p3.Foo.*&quot; in Eclipse, but not any other IDE, and it also compiles fine with javac.


You also said:
&quot; In this case, because the single static import &quot;import static p1.Bar.B&quot; imports two things with the same name &quot;B&quot;, obscuring rules come into play, which say &quot;a variable will be chosen in preference to a type&quot; when a simple name can be interpreted as the name of a variable, type, or a package. So the static import brings in the field Bar#B and not the type Bar.B.&quot;

This is wrong. The JLS specifically states:
&quot;A single-static-import declaration imports all accessible static members with a given simple name from a type.&quot;

AND it states:

&quot;Note that it is permissable for one single-static-import declaration to import several fields or types with the same name, or several methods with the same name and signature.&quot;

See:
http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.5.3

So the import statement SHOULD be importing BOTH the field and the class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926856</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-10 03:10:03 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; You also said:
&gt; &quot; In this case, because the single static import &quot;import static p1.Bar.B&quot;
&gt; imports two things with the same name &quot;B&quot;, obscuring rules come into play,
&gt; which say &quot;a variable will be chosen in preference to a type&quot; when a simple
&gt; name can be interpreted as the name of a variable, type, or a package. So the
&gt; static import brings in the field Bar#B and not the type Bar.B.&quot;
....
&gt; So the import statement SHOULD be importing BOTH the field and the class.

I think I wrote something other than what I wanted to imply. Yes I agree that the static import does import both the field and the class. But if we just stop here, our analysis won&apos;t be complete. We need to look at &quot;obscuring&quot; (JLS 6.3.2) also to determine what will be used when we refer to the name &quot;B&quot;, and those rules clearly state that a variable is preferred over a type. So, in the usage &quot;String myB  =  B.class.getCanonicalName();&quot;, B is actually resolved to the field Bar#B. I don&apos;t know why javac does not respect these rules here.

Anyway, looking at the way org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleStaticImport(char[][], int) is written, it seems like we only add either the field, or method, or type from a static import in the cache and not all three as should be expected. So maybe a bug there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927220</commentid>
    <comment_count>4</comment_count>
    <who name="00jt">jtperr</who>
    <bug_when>2011-05-10 11:20:00 -0400</bug_when>
    <thetext>&gt;(In reply to comment #3)
&gt; I think I wrote something other than what I wanted to imply. Yes I agree that
&gt; the static import does import both the field and the class. But if we just stop
&gt; here, our analysis won&apos;t be complete. We need to look at &quot;obscuring&quot; (JLS
&gt; 6.3.2) also to determine what will be used when we refer to the name &quot;B&quot;, and
&gt; those rules clearly state that a variable is preferred over a type. So, in the
&gt; usage &quot;String myB  =  B.class.getCanonicalName();&quot;, B is actually resolved to
&gt; the field Bar#B. I don&apos;t know why javac does not respect these rules here.
&gt; 
&gt; Anyway, looking at the way
&gt; org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.findSingleStaticImport(char[][],
&gt; int) is written, it seems like we only add either the field, or method, or type
&gt; from a static import in the cache and not all three as should be expected. So
&gt; maybe a bug there.


The key here is that in the expression &quot;B.class&quot;, the &quot;.class&quot; implies that &quot;B&quot; is a type, not a field.
So, since it cannot be a field, the obscuring rule doesn&apos;t come into play.

In the same way, I should also be able to say:

B myB = null; // B can only be a class here as well, and not obscured by the field.

or likewise:

class foo extends B{} // again B is not obscured, since it can only a type here.

That is how javac appears to be following these rules.

If i add a new method to use in &quot;OuterTest&quot;

 public void test2()
 {
    System.out.println(B.toString());// Field obscures class B
    System.out.println(p1.Bar.B.toString()); // Field obscures the class B
    System.out.println(B.class.getCanonicalName().toString());  // the class B
    System.out.println(p1.Bar.B.class.getCanonicalName().toString()); // class B
 }

running this method, Java gives me:

random
random
p1.Bar.B
p1.Bar.B

And Eclipse gives me:

random
random
p3.Foo.B
p1.Bar.B</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005081</commentid>
    <comment_count>5</comment_count>
      <attachid>204564</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-05 02:00:46 -0400</bug_when>
    <thetext>Created attachment 204564
proposed fix v1.0 + regression tests

Ok so there was a problem in type resolution. We were not traversing the static imports to look for a type (we need to do this because the resolved import binding may correspond to a field or a method, if a field or a method with the same name as the type exists in the unit being imported). Added that in Scope#getTypeOrPackage(..). 

The position of the code is interesting to note. It is added right after the single type imports are traversed, and just before other types with the same name are looked for in the same package. This is done to respect the hiding rules in http://java.sun.com/docs/books/jls/third_edition/html/packages.html#7.5.3 , i.e.:
&quot;A single-static-import declaration d in a compilation unit c of package p that imports a type named n shadows the declarations of:

-any static type named n imported by a static-import-on-demand declaration in c.
-any top level type (7.6) named n declared in another compilation unit (7.3) of p.
-any type named n imported by a type-import-on-demand declaration (7.5.2) in c.

throughout c.&quot;

Added tests and updated an old test, which now shows the right behaviour (checked against javac)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005082</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-05 02:02:18 -0400</bug_when>
    <thetext>Srikanth, I&apos;d prefer a review. Not so much for the implementation details as for the approach. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012103</commentid>
    <comment_count>7</comment_count>
      <attachid>205405</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-18 05:58:02 -0400</bug_when>
    <thetext>Created attachment 205405
Simpler patch (?)

Ayush, is this patch simpler while doing the same thing ? It passes all StaticImportTests (nothing else has been run)

    - It merges the blocks for method binding and field binding &quot;mis-hits&quot;
    - Removes what appears to be redundant calls to Charperation.equals
    - Fixes comments.
    - Fixes a potential problem with earlier patch regarding membertype
      lookups. The current patch looks up for member types in the leading
      import type component, while the earlier patch looks it up in the
      static method/field declaring class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012117</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-18 06:36:50 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Created attachment 205405 [details] [diff]
&gt; Simpler patch (?)

Thanks Stephan. I had an exact same patch on test when you submitted this one here! Srikanth&apos;s review had pointed out those problems already. 

&gt;     - Fixes a potential problem with earlier patch regarding membertype
&gt;       lookups. The current patch looks up for member types in the leading
&gt;       import type component, while the earlier patch looks it up in the
&gt;       static method/field declaring class.

Also wrote a test for this. So will submit a cumulative patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012144</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-18 07:15:36 -0400</bug_when>
    <thetext>Found another issue - we currently don&apos;t report an error in this scenario although 2 imports import a type with same name.

This happens if i take the comment 0 example (2), and change Foo.B to be a static class, and in OuterTest, I change &quot;import p3.Foo.*&quot; to &quot;import static p3.Foo.B&quot;.

Javac complains on this new import line saying that the type it imports has already been imported, but eclipse doesn&apos;t.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012278</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-18 09:39:31 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; Found another issue 

------------------------------------
package p2;

import static p1.Bar.B;
import static p3.Foo.B;   // javac complains, eclipse doesn&apos;t

public class OuterTest {

        public static void main(String [] args)
        {
            new OuterTest().beginTest();
         }
        public void beginTest(){
            System.out.print(&quot;1 + 1 =  &quot;);
            if(alwaysTrue()){
                System.out.println(&quot;2&quot;);
            }
            else{
                System.out.println(&quot;3&quot;);
            }
        }
        public boolean alwaysTrue(){ // Returns FALSE in Eclipse
            String myB   =        B.class.getCanonicalName();
            String realB = p1.Bar.B.class.getCanonicalName();
            return myB.equals(realB);
        }
}

------------------------------------
package p1;
public class Bar {
    public static class  B{}
    final public static String B = new String(&quot;random&quot;); 
}
------------------------------------
package p3;

public class Foo {
     public static class  B {}
}
------------------------------------</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012293</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-18 09:53:51 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; Found another issue - we currently don&apos;t report an error in this scenario
&gt; although 2 imports import a type with same name.

While it is tempting to pack related fixes into the same bug, if this
new issue isn&apos;t introduced by the patch we are considering, but rather
predates the candidate fix, I recommend that we maintain the concerns separate 
and address it via a new bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012736</commentid>
    <comment_count>12</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-19 01:20:22 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; I recommend that we maintain the concerns separate 
&gt; and address it via a new bug.

Opened bug 361327</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012737</commentid>
    <comment_count>13</comment_count>
      <attachid>205471</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-19 01:21:43 -0400</bug_when>
    <thetext>Created attachment 205471
proposed fix v1.1 + regression tests

This patch adds a regression test for the inheritance case, and removes some redundant parts of the above patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012755</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-19 02:05:13 -0400</bug_when>
    <thetext>Patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012758</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-19 02:26:04 -0400</bug_when>
    <thetext>Released in HEAD for 3.8M3 via commit 817ed71692e2e331f7e0ac3a90af87bc08553ba4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2015160</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-24 04:05:35 -0400</bug_when>
    <thetext>Verified for 3.8 M3 using build id: N20111022-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>204564</attachid>
            <date>2011-10-05 02:00:00 -0400</date>
            <delta_ts>2011-10-19 01:21:43 -0400</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>HEAD--Fixed-bug-318401-FUP-of-317858-Clarify-eclipse.patch</filename>
            <type>text/plain</type>
            <size>8875</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRlc3Qu
amF2YQppbmRleCBiYWU2YTNjLi5mMWRhN2RmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9TdGF0aWNJbXBvcnRUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vU3RhdGljSW1wb3J0VGVzdC5qYXZhCkBAIC0yNDg0LDEwICsyNDg0LDEw
IEBACiAJCQkJIn1cbiIsCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBFUlJP
UiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDcpXG4iICsgCi0JCQkiCWludCB2MiA9IGIuZm9vQztc
biIgKyAKKwkJCSIxLiBFUlJPUiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQki
CWludCB2MSA9IGIuZm9vQjtcbiIgKyAKIAkJCSIJICAgICAgICAgICBeXl5eXG4iICsgCi0JCQki
Zm9vQyBjYW5ub3QgYmUgcmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSJmb29C
IGNhbm5vdCBiZSByZXNvbHZlZCBvciBpcyBub3QgYSBmaWVsZFxuIiArIAogCQkJIi0tLS0tLS0t
LS1cbiIpOwogCX0JCiAJLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MjU2Mzc1CkBAIC0yNzIwLDUgKzI3MjAsMTMyIEBACiAJCQkiLS0tLS0tLS0tLVxuIgog
CQkpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzE4NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MSgpIHsKKwkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlRlc3QuamF2YSIsCisJCQkJImltcG9ydCBz
dGF0aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1
YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nIFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJ
CQkiCX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1
ZSgpKSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0u
b3V0LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xl
YW4gYWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJU3RyaW5nIG15QiAgID0gICAgICAgIEIuY2xh
c3MuZ2V0Q2Fub25pY2FsTmFtZSgpOztcbiIgKwkJLy8gcmVmZXJzIHRvIHAxLkJhci5CIChjbGFz
cykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1l
KCk7O1xuIiArICAgICAvLyByZWZlcnMgdG8gcDEuQmFyLkIgKGNsYXNzKQorCQkJCSIJCUIoKTtc
biIgKwkJCQkvLyByZWZlcnMgdG8gcDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCXJldHVybiBt
eUIuZXF1YWxzKHJlYWxCKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAx
L0Jhci5qYXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQmFy
e1xuIiArCisJCQkJIglwdWJsaWMgc3RhdGljIGNsYXNzIEJ7fVxuIiArCisJCQkJIglmaW5hbCBw
dWJsaWMgc3RhdGljIFN0cmluZyBCID0gbmV3IFN0cmluZyhcInJhbmRvbVwiKTtcbiIgKworCQkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIEIoKXt9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkicDMvRm9v
LmphdmEiLAorCQkJCSJwYWNrYWdlIHAzO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBGb28ge1xu
IiArCisJCQkJIglwdWJsaWMgY2xhc3MgQntcbiIgKworCQkJCSIJCXB1YmxpYyBpbnQgYTtcbiIg
KworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQkiMSArIDEgPSAgMiIpOworCX0K
KwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4
NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MigpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJwMS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4i
ICsKKwkJCQkicHVibGljIGNsYXNzIEJhcntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFz
cyBCe31cbiIgKworCQkJCSIJZmluYWwgcHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJp
bmcoXCJyYW5kb21cIik7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiAr
CisJCQkJIn1cbiIsCisJCQkJInAzL0Zvby5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsK
KwkJCQkiCQlwdWJsaWMgaW50IGE7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJ
CSJwMi9UZXN0LmphdmEiLAorCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJImltcG9ydCBzdGF0
aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1Ymxp
YyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5n
IFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJCQki
CX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlTeXN0
ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1ZSgp
KSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0ub3V0
LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xlYW4g
YWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJQiBiID0gbnVsbDtcbiIgKwkJLy8gcmVmZXJzIHRv
IHAxLkJhci5CIChjbGFzcykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBCO1xuIiArICAvLyByZWZl
cnMgdG8gcDEuQmFyLkIgKGZpZWxkKQorCQkJCSIJCUIoKTtcbiIgKwkJCQkvLyByZWZlcnMgdG8g
cDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCWludCBhYmMgPSBiLmE7XG47IiArCS8vIHN0YXRp
YyBpbXBvcnQgZm9yIEJhci5CIG92ZXJzaGFkb3dzIG9uIGRlbWFuZCBpbXBvcnQgRm9vLkIKKwkJ
CQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIx
LiBFUlJPUiBpbiBwMlxcVGVzdC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAorCQkJIglpbnQgYWJj
ID0gYi5hO1xuIiArIAorCQkJIgkgICAgICAgICAgICBeXG4iICsgCisJCQkiYSBjYW5ub3QgYmUg
cmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9
CisJCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMx
ODQwMQorCXB1YmxpYyB2b2lkIHRlc3QwODMoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJUZXN0LmphdmEiLAorCQkJCSJpbXBvcnQgc3RhdGljIHAx
LkJhci5CO1xuIiArCisJCQkJImltcG9ydCBwMy5Gb28uKjtcbiIgKworCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBbXSBh
cmdzKXtcbiIgKworCQkJCSIJCW5ldyBUZXN0KCkudGVzdDIoKTsiICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJcHVibGljIHZvaWQgdGVzdDIoKXtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihCLnRvU3RyaW5nKCkpO1xuIiArCQkvLyBGaWVsZCBvYnNjdXJlcyBjbGFzcyBCCisJCQkJIgkJ
U3lzdGVtLm91dC5wcmludGxuKHAxLkJhci5CLnRvU3RyaW5nKCkpO1xuIiArICAvLyBGaWVsZCBv
YnNjdXJlcyB0aGUgY2xhc3MgQgorCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihCLmNsYXNzLmdl
dENhbm9uaWNhbE5hbWUoKS50b1N0cmluZygpKTtcbiIgKwkvLyB0aGUgY2xhc3MgQgorCQkJCSIJ
CVN5c3RlbS5vdXQucHJpbnRsbihwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1lKCkudG9T
dHJpbmcoKSk7IiArCS8vIGNsYXNzIEIKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJCSJw
MS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEJh
cntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFzcyBCe31cbiIgKworCQkJCSIJZmluYWwg
cHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJpbmcoXCJyYW5kb21cIik7XG4iICsKKwkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAzL0Zv
by5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtc
biIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsKKwkJCQkiCQlwdWJsaWMgaW50IGE7XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iCisJCQl9LAorCQkJInJhbmRvbVxuIiArIAorCQkJ
InJhbmRvbVxuIiArIAorCQkJInAxLkJhci5CXG4iICsgCisJCQkicDEuQmFyLkIiKTsKKwl9CiB9
CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U2NvcGUuamF2YQppbmRleCA0ZWFkYTMxLi4yZTk0NWIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0yNzEyLDYg
KzI3MTIsNzcgQEAKIAkJCQkJfQogCQkJCX0KIAkJCX0KKwkJCS8vIHdhbGsgc2luZ2xlIHN0YXRp
YyBpbXBvcnRzLiBBIHR5cGUgZm91bmQgaGVyZSB3aWxsIHNoYWRvdyB0eXBlcyB3aXRoIHNhbWUg
bmFtZSBpbiBvdGhlciBDVSdzLCBvciB0eXBlcyBjb21pbmcKKwkJCS8vIGZyb20gb24tZGVtYW5k
IGltcG9ydHMuIEpMUyA3LjUuMworCQkJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTMxODQwMQorCQkJaWYgKGltcG9ydHMgIT0gbnVsbCkgeworCQkJCWJv
b2xlYW4gZm91bmRJbkltcG9ydCA9IGZhbHNlOworCQkJCVJlZmVyZW5jZUJpbmRpbmcgdHlwZSA9
IG51bGw7CisJCQkJbmV4dEltcG9ydCA6IGZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBpbXBvcnRz
Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJCUltcG9ydEJpbmRpbmcgaW1wb3J0Qmlu
ZGluZyA9IGltcG9ydHNbaV07CisJCQkJCWlmIChpbXBvcnRCaW5kaW5nLmlzU3RhdGljKCkpIHsK
KwkJCQkJCVJlZmVyZW5jZUJpbmRpbmcgdGVtcCA9IG51bGw7CisJCQkJCQlpZiAoQ2hhck9wZXJh
dGlvbi5lcXVhbHMoaW1wb3J0QmluZGluZy5jb21wb3VuZE5hbWVbaW1wb3J0QmluZGluZy5jb21w
b3VuZE5hbWUubGVuZ3RoIC0gMV0sIG5hbWUpKSB7CisJCQkJCQkJQmluZGluZyByZXNvbHZlZElt
cG9ydCA9IGltcG9ydEJpbmRpbmcucmVzb2x2ZWRJbXBvcnQ7CisJCQkJCQkJaWYgKHJlc29sdmVk
SW1wb3J0ID09IG51bGwpIGNvbnRpbnVlIG5leHRJbXBvcnQ7CisJCQkJCQkJaWYgKHJlc29sdmVk
SW1wb3J0IGluc3RhbmNlb2YgTWV0aG9kQmluZGluZykgeworCQkJCQkJCQkvLyBjaGVjayB0byBz
ZWUgaWYgdGhlcmUgYXJlIGFsc28gbWVtYmVyIHR5cGVzIHdpdGggdGhlIHNhbWUgbmFtZQorCQkJ
CQkJCQlNZXRob2RCaW5kaW5nIHN0YXRpY01ldGhvZCA9IChNZXRob2RCaW5kaW5nKSByZXNvbHZl
ZEltcG9ydDsKKwkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHN0YXRpY01ldGhvZC5z
ZWxlY3RvciwgbmFtZSkpIHsKKwkJCQkJCQkJCS8vIG11c3QgZmluZCB0aGUgaW1wb3J0UmVmJ3Mg
dHlwZSBhZ2FpbiBzaW5jZSB0aGUgZmllbGQgY2FuIGJlIGZyb20gYW4gaW5oZXJpdGVkIHR5cGUK
KwkJCQkJCQkJCWNoYXJbXVtdIGltcG9ydE5hbWUgPSBpbXBvcnRCaW5kaW5nLnJlZmVyZW5jZS50
b2tlbnM7CisJCQkJCQkJCQlUeXBlQmluZGluZyByZWZlcmVuY2VkVHlwZSA9IGdldFR5cGUoaW1w
b3J0TmFtZSwgaW1wb3J0TmFtZS5sZW5ndGggLSAxKTsKKwkJCQkJCQkJCWlmIChyZWZlcmVuY2Vk
VHlwZSAhPSBudWxsKSB7CisJCQkJCQkJCQkJdGVtcCA9IGZpbmRNZW1iZXJUeXBlKG5hbWUsIHN0
YXRpY01ldGhvZC5kZWNsYXJpbmdDbGFzcyk7CisJCQkJCQkJCQkJaWYgKHRlbXAgIT0gbnVsbCAm
JiAhdGVtcC5pc1N0YXRpYygpKSB0ZW1wID0gbnVsbDsKKwkJCQkJCQkJCX0KKwkJCQkJCQkJfQor
CQkJCQkJCX0gZWxzZSBpZiAocmVzb2x2ZWRJbXBvcnQgaW5zdGFuY2VvZiBGaWVsZEJpbmRpbmcp
IHsKKwkJCQkJCQkJLy8gY2hlY2sgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbHNvIG1lbWJlciB0eXBl
cyB3aXRoIHRoZSBzYW1lIG5hbWUKKwkJCQkJCQkJRmllbGRCaW5kaW5nIHN0YXRpY0ZpZWxkID0g
KEZpZWxkQmluZGluZykgcmVzb2x2ZWRJbXBvcnQ7CisJCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyhzdGF0aWNGaWVsZC5uYW1lLCBuYW1lKSkgeworCQkJCQkJCQkJLy8gbXVzdCBmaW5k
IHRoZSBpbXBvcnRSZWYncyB0eXBlIGFnYWluIHNpbmNlIHRoZSBmaWVsZCBjYW4gYmUgZnJvbSBh
biBpbmhlcml0ZWQgdHlwZQorCQkJCQkJCQkJY2hhcltdW10gaW1wb3J0TmFtZSA9IGltcG9ydEJp
bmRpbmcucmVmZXJlbmNlLnRva2VuczsKKwkJCQkJCQkJCVR5cGVCaW5kaW5nIHJlZmVyZW5jZWRU
eXBlID0gZ2V0VHlwZShpbXBvcnROYW1lLCBpbXBvcnROYW1lLmxlbmd0aCAtIDEpOworCQkJCQkJ
CQkJaWYgKHJlZmVyZW5jZWRUeXBlICE9IG51bGwpIHsKKwkJCQkJCQkJCQl0ZW1wID0gZmluZE1l
bWJlclR5cGUobmFtZSwgc3RhdGljRmllbGQuZGVjbGFyaW5nQ2xhc3MpOworCQkJCQkJCQkJCWlm
ICh0ZW1wICE9IG51bGwgJiYgIXRlbXAuaXNTdGF0aWMoKSkgdGVtcCA9IG51bGw7CisJCQkJCQkJ
CQl9CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJCQkJCQkJaWYgKHRlbXAgIT0gdHlwZSAmJiB0ZW1w
ICE9IG51bGwpIHsKKwkJCQkJCQkJaWYgKHRlbXAuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJ
CQkJaWYgKCF0ZW1wLmNhbkJlU2VlbkJ5KHVuaXRTY29wZS5mUGFja2FnZSkpIHsKKwkJCQkJCQkJ
CQkvLyBBbnN3ZXIgZXJyb3IgYmluZGluZyAtIHR5cGUgaXMgbm90IHZpc2libGUKKwkJCQkJCQkJ
CQlmb3VuZFR5cGUgPSBuZXcgUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcobmV3IGNoYXJbXVtde25h
bWV9LCB0eXBlLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTsKKwkJCQkJCQkJCX0gZWxzZSB7
CisJCQkJCQkJCQkJSW1wb3J0UmVmZXJlbmNlIGltcG9ydFJlZmVyZW5jZSA9IGltcG9ydEJpbmRp
bmcucmVmZXJlbmNlOworCQkJCQkJCQkJCWlmIChpbXBvcnRSZWZlcmVuY2UgIT0gbnVsbCkgewor
CQkJCQkJCQkJCQlpbXBvcnRSZWZlcmVuY2UuYml0cyB8PSBBU1ROb2RlLlVzZWQ7CisJCQkJCQkJ
CQkJfQorCQkJCQkJCQkJCWlmIChmb3VuZEluSW1wb3J0KSB7CisJCQkJCQkJCQkJCS8vIEFuc3dl
ciBlcnJvciBiaW5kaW5nIC0tIGltcG9ydCBvbiBkZW1hbmQgY29uZmxpY3Q7IG5hbWUgZm91bmQg
aW4gdHdvIGltcG9ydCBvbiBkZW1hbmQgcGFja2FnZXMuCisJCQkJCQkJCQkJCXRlbXAgPSBuZXcg
UHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcobmV3IGNoYXJbXVtde25hbWV9LCB0eXBlLCBQcm9ibGVt
UmVhc29ucy5BbWJpZ3VvdXMpOworCQkJCQkJCQkJCQlpZiAodHlwZU9yUGFja2FnZUNhY2hlICE9
IG51bGwpCisJCQkJCQkJCQkJCQl0eXBlT3JQYWNrYWdlQ2FjaGUucHV0KG5hbWUsIHRlbXApOwor
CQkJCQkJCQkJCQlyZXR1cm4gdGVtcDsKKwkJCQkJCQkJCQl9CisJCQkJCQkJCQkJdHlwZSA9IHRl
bXA7CisJCQkJCQkJCQkJZm91bmRJbkltcG9ydCA9IHRydWU7CisJCQkJCQkJCQl9CisJCQkJCQkJ
CX0gZWxzZSBpZiAoZm91bmRUeXBlID09IG51bGwpIHsKKwkJCQkJCQkJCWZvdW5kVHlwZSA9IHRl
bXA7CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJCQkJCQl9CisJCQkJCX0KKwkJCQl9CisJCQkJaWYg
KHR5cGUgIT0gbnVsbCkgeworCQkJCQlpZiAodHlwZU9yUGFja2FnZUNhY2hlICE9IG51bGwpCisJ
CQkJCQl0eXBlT3JQYWNrYWdlQ2FjaGUucHV0KG5hbWUsIHR5cGUpOworCQkJCQlyZXR1cm4gdHlw
ZTsKKwkJCQl9CisJCQl9CiAKIAkJCS8vIGNoZWNrIGlmIHRoZSBuYW1lIGlzIGluIHRoZSBjdXJy
ZW50IHBhY2thZ2UsIHNraXAgaXQgaWYgaXRzIGEgc3ViLXBhY2thZ2UKIAkJCVBhY2thZ2VCaW5k
aW5nIGN1cnJlbnRQYWNrYWdlID0gdW5pdFNjb3BlLmZQYWNrYWdlOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>205405</attachid>
            <date>2011-10-18 05:58:00 -0400</date>
            <delta_ts>2011-10-19 01:21:43 -0400</delta_ts>
            <desc>Simpler patch (?)</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>8188</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRlc3Qu
amF2YQppbmRleCBiYWU2YTNjLi5mMWRhN2RmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9TdGF0aWNJbXBvcnRUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vU3RhdGljSW1wb3J0VGVzdC5qYXZhCkBAIC0yNDg0LDEwICsyNDg0LDEw
IEBACiAJCQkJIn1cbiIsCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBFUlJP
UiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDcpXG4iICsgCi0JCQkiCWludCB2MiA9IGIuZm9vQztc
biIgKyAKKwkJCSIxLiBFUlJPUiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQki
CWludCB2MSA9IGIuZm9vQjtcbiIgKyAKIAkJCSIJICAgICAgICAgICBeXl5eXG4iICsgCi0JCQki
Zm9vQyBjYW5ub3QgYmUgcmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSJmb29C
IGNhbm5vdCBiZSByZXNvbHZlZCBvciBpcyBub3QgYSBmaWVsZFxuIiArIAogCQkJIi0tLS0tLS0t
LS1cbiIpOwogCX0JCiAJLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MjU2Mzc1CkBAIC0yNzIwLDUgKzI3MjAsMTMyIEBACiAJCQkiLS0tLS0tLS0tLVxuIgog
CQkpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzE4NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MSgpIHsKKwkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlRlc3QuamF2YSIsCisJCQkJImltcG9ydCBz
dGF0aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1
YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nIFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJ
CQkiCX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1
ZSgpKSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0u
b3V0LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xl
YW4gYWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJU3RyaW5nIG15QiAgID0gICAgICAgIEIuY2xh
c3MuZ2V0Q2Fub25pY2FsTmFtZSgpOztcbiIgKwkJLy8gcmVmZXJzIHRvIHAxLkJhci5CIChjbGFz
cykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1l
KCk7O1xuIiArICAgICAvLyByZWZlcnMgdG8gcDEuQmFyLkIgKGNsYXNzKQorCQkJCSIJCUIoKTtc
biIgKwkJCQkvLyByZWZlcnMgdG8gcDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCXJldHVybiBt
eUIuZXF1YWxzKHJlYWxCKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAx
L0Jhci5qYXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQmFy
e1xuIiArCisJCQkJIglwdWJsaWMgc3RhdGljIGNsYXNzIEJ7fVxuIiArCisJCQkJIglmaW5hbCBw
dWJsaWMgc3RhdGljIFN0cmluZyBCID0gbmV3IFN0cmluZyhcInJhbmRvbVwiKTtcbiIgKworCQkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIEIoKXt9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkicDMvRm9v
LmphdmEiLAorCQkJCSJwYWNrYWdlIHAzO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBGb28ge1xu
IiArCisJCQkJIglwdWJsaWMgY2xhc3MgQntcbiIgKworCQkJCSIJCXB1YmxpYyBpbnQgYTtcbiIg
KworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQkiMSArIDEgPSAgMiIpOworCX0K
KwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4
NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MigpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJwMS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4i
ICsKKwkJCQkicHVibGljIGNsYXNzIEJhcntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFz
cyBCe31cbiIgKworCQkJCSIJZmluYWwgcHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJp
bmcoXCJyYW5kb21cIik7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiAr
CisJCQkJIn1cbiIsCisJCQkJInAzL0Zvby5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsK
KwkJCQkiCQlwdWJsaWMgaW50IGE7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJ
CSJwMi9UZXN0LmphdmEiLAorCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJImltcG9ydCBzdGF0
aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1Ymxp
YyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5n
IFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJCQki
CX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlTeXN0
ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1ZSgp
KSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0ub3V0
LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xlYW4g
YWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJQiBiID0gbnVsbDtcbiIgKwkJLy8gcmVmZXJzIHRv
IHAxLkJhci5CIChjbGFzcykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBCO1xuIiArICAvLyByZWZl
cnMgdG8gcDEuQmFyLkIgKGZpZWxkKQorCQkJCSIJCUIoKTtcbiIgKwkJCQkvLyByZWZlcnMgdG8g
cDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCWludCBhYmMgPSBiLmE7XG47IiArCS8vIHN0YXRp
YyBpbXBvcnQgZm9yIEJhci5CIG92ZXJzaGFkb3dzIG9uIGRlbWFuZCBpbXBvcnQgRm9vLkIKKwkJ
CQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIx
LiBFUlJPUiBpbiBwMlxcVGVzdC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAorCQkJIglpbnQgYWJj
ID0gYi5hO1xuIiArIAorCQkJIgkgICAgICAgICAgICBeXG4iICsgCisJCQkiYSBjYW5ub3QgYmUg
cmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9
CisJCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMx
ODQwMQorCXB1YmxpYyB2b2lkIHRlc3QwODMoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJUZXN0LmphdmEiLAorCQkJCSJpbXBvcnQgc3RhdGljIHAx
LkJhci5CO1xuIiArCisJCQkJImltcG9ydCBwMy5Gb28uKjtcbiIgKworCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBbXSBh
cmdzKXtcbiIgKworCQkJCSIJCW5ldyBUZXN0KCkudGVzdDIoKTsiICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJcHVibGljIHZvaWQgdGVzdDIoKXtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihCLnRvU3RyaW5nKCkpO1xuIiArCQkvLyBGaWVsZCBvYnNjdXJlcyBjbGFzcyBCCisJCQkJIgkJ
U3lzdGVtLm91dC5wcmludGxuKHAxLkJhci5CLnRvU3RyaW5nKCkpO1xuIiArICAvLyBGaWVsZCBv
YnNjdXJlcyB0aGUgY2xhc3MgQgorCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihCLmNsYXNzLmdl
dENhbm9uaWNhbE5hbWUoKS50b1N0cmluZygpKTtcbiIgKwkvLyB0aGUgY2xhc3MgQgorCQkJCSIJ
CVN5c3RlbS5vdXQucHJpbnRsbihwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1lKCkudG9T
dHJpbmcoKSk7IiArCS8vIGNsYXNzIEIKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJCSJw
MS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEJh
cntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFzcyBCe31cbiIgKworCQkJCSIJZmluYWwg
cHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJpbmcoXCJyYW5kb21cIik7XG4iICsKKwkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAzL0Zv
by5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtc
biIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsKKwkJCQkiCQlwdWJsaWMgaW50IGE7XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iCisJCQl9LAorCQkJInJhbmRvbVxuIiArIAorCQkJ
InJhbmRvbVxuIiArIAorCQkJInAxLkJhci5CXG4iICsgCisJCQkicDEuQmFyLkIiKTsKKwl9CiB9
CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U2NvcGUuamF2YQppbmRleCA5ZWM3ZTBhLi41ZWRhZDRkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0yNzEyLDcg
KzI3MTIsNjIgQEAKIAkJCQkJfQogCQkJCX0KIAkJCX0KLQorCQkJLy8gd2FsayBzaW5nbGUgc3Rh
dGljIGltcG9ydHMuIEEgdHlwZSBmb3VuZCBoZXJlIHdpbGwgc2hhZG93IHR5cGVzIHdpdGggc2Ft
ZSBuYW1lIGluIG90aGVyIENVJ3MsIG9yIHR5cGVzIGNvbWluZworCQkJLy8gZnJvbSBvbi1kZW1h
bmQgaW1wb3J0cy4gSkxTIDcuNS4zCisJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9MzE4NDAxCisJCQlpZiAoaW1wb3J0cyAhPSBudWxsKSB7CisJCQkJ
Ym9vbGVhbiBmb3VuZEluSW1wb3J0ID0gZmFsc2U7CisJCQkJUmVmZXJlbmNlQmluZGluZyB0eXBl
ID0gbnVsbDsKKwkJCQluZXh0SW1wb3J0IDogZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGltcG9y
dHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJSW1wb3J0QmluZGluZyBpbXBvcnRC
aW5kaW5nID0gaW1wb3J0c1tpXTsKKwkJCQkJaWYgKGltcG9ydEJpbmRpbmcuaXNTdGF0aWMoKSkg
eworCQkJCQkJUmVmZXJlbmNlQmluZGluZyB0ZW1wID0gbnVsbDsKKwkJCQkJCWlmIChDaGFyT3Bl
cmF0aW9uLmVxdWFscyhpbXBvcnRCaW5kaW5nLmNvbXBvdW5kTmFtZVtpbXBvcnRCaW5kaW5nLmNv
bXBvdW5kTmFtZS5sZW5ndGggLSAxXSwgbmFtZSkpIHsKKwkJCQkJCQlCaW5kaW5nIHJlc29sdmVk
SW1wb3J0ID0gaW1wb3J0QmluZGluZy5yZXNvbHZlZEltcG9ydDsKKwkJCQkJCQlpZiAocmVzb2x2
ZWRJbXBvcnQgPT0gbnVsbCkgY29udGludWUgbmV4dEltcG9ydDsKKwkJCQkJCQlpZiAocmVzb2x2
ZWRJbXBvcnQgaW5zdGFuY2VvZiBNZXRob2RCaW5kaW5nIHx8IHJlc29sdmVkSW1wb3J0IGluc3Rh
bmNlb2YgRmllbGRCaW5kaW5nKSB7CisJCQkJCQkJCS8vIGNoZWNrIHRvIHNlZSBpZiB0aGVyZSBh
cmUgYWxzbyBtZW1iZXIgdHlwZXMgd2l0aCB0aGUgc2FtZSBuYW1lCisJCQkJCQkJCS8vIG11c3Qg
ZmluZCB0aGUgaW1wb3J0UmVmJ3MgdHlwZSBhZ2FpbiBzaW5jZSB0aGUgbWV0aG9kL2ZpZWxkIGNh
biBiZSBmcm9tIGFuIGluaGVyaXRlZCB0eXBlCisJCQkJCQkJCWNoYXJbXVtdIGltcG9ydE5hbWUg
PSBpbXBvcnRCaW5kaW5nLnJlZmVyZW5jZS50b2tlbnM7CisJCQkJCQkJCVR5cGVCaW5kaW5nIHJl
ZmVyZW5jZWRUeXBlID0gZ2V0VHlwZShpbXBvcnROYW1lLCBpbXBvcnROYW1lLmxlbmd0aCAtIDEp
OworCQkJCQkJCQlpZiAocmVmZXJlbmNlZFR5cGUgIT0gbnVsbCAmJiByZWZlcmVuY2VkVHlwZSBp
bnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJCQkJCXRlbXAgPSBmaW5kTWVtYmVy
VHlwZShuYW1lLCAoUmVmZXJlbmNlQmluZGluZykgcmVmZXJlbmNlZFR5cGUpOworCQkJCQkJCQkJ
aWYgKHRlbXAgIT0gbnVsbCAmJiAhdGVtcC5pc1N0YXRpYygpKSB0ZW1wID0gbnVsbDsKKwkJCQkJ
CQkJfQorCQkJCQkJCX0KKwkJCQkJCQlpZiAodGVtcCAhPSB0eXBlICYmIHRlbXAgIT0gbnVsbCkg
eworCQkJCQkJCQlpZiAodGVtcC5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJCQkJCQlpZiAoIXRl
bXAuY2FuQmVTZWVuQnkodW5pdFNjb3BlLmZQYWNrYWdlKSkgeworCQkJCQkJCQkJCS8vIEFuc3dl
ciBlcnJvciBiaW5kaW5nIC0gdHlwZSBpcyBub3QgdmlzaWJsZQorCQkJCQkJCQkJCWZvdW5kVHlw
ZSA9IG5ldyBQcm9ibGVtUmVmZXJlbmNlQmluZGluZyhuZXcgY2hhcltdW117bmFtZX0sIHR5cGUs
IFByb2JsZW1SZWFzb25zLk5vdFZpc2libGUpOworCQkJCQkJCQkJfSBlbHNlIHsKKwkJCQkJCQkJ
CQlJbXBvcnRSZWZlcmVuY2UgaW1wb3J0UmVmZXJlbmNlID0gaW1wb3J0QmluZGluZy5yZWZlcmVu
Y2U7CisJCQkJCQkJCQkJaWYgKGltcG9ydFJlZmVyZW5jZSAhPSBudWxsKSB7CisJCQkJCQkJCQkJ
CWltcG9ydFJlZmVyZW5jZS5iaXRzIHw9IEFTVE5vZGUuVXNlZDsKKwkJCQkJCQkJCQl9CisJCQkJ
CQkJCQkJaWYgKGZvdW5kSW5JbXBvcnQpIHsKKwkJCQkJCQkJCQkJLy8gQW5zd2VyIGVycm9yIGJp
bmRpbmcgLS0gaW1wb3J0IG9uIGRlbWFuZCBjb25mbGljdDsgbmFtZSBmb3VuZCBpbiB0d28gaW1w
b3J0IG9uIGRlbWFuZCBwYWNrYWdlcy4KKwkJCQkJCQkJCQkJdGVtcCA9IG5ldyBQcm9ibGVtUmVm
ZXJlbmNlQmluZGluZyhuZXcgY2hhcltdW117bmFtZX0sIHR5cGUsIFByb2JsZW1SZWFzb25zLkFt
YmlndW91cyk7CisJCQkJCQkJCQkJCWlmICh0eXBlT3JQYWNrYWdlQ2FjaGUgIT0gbnVsbCkKKwkJ
CQkJCQkJCQkJCXR5cGVPclBhY2thZ2VDYWNoZS5wdXQobmFtZSwgdGVtcCk7CisJCQkJCQkJCQkJ
CXJldHVybiB0ZW1wOworCQkJCQkJCQkJCX0KKwkJCQkJCQkJCQl0eXBlID0gdGVtcDsKKwkJCQkJ
CQkJCQlmb3VuZEluSW1wb3J0ID0gdHJ1ZTsKKwkJCQkJCQkJCX0KKwkJCQkJCQkJfSBlbHNlIGlm
IChmb3VuZFR5cGUgPT0gbnVsbCkgeworCQkJCQkJCQkJZm91bmRUeXBlID0gdGVtcDsKKwkJCQkJ
CQkJfQorCQkJCQkJCX0KKwkJCQkJCX0KKwkJCQkJfQorCQkJCX0KKwkJCQlpZiAodHlwZSAhPSBu
dWxsKSB7CisJCQkJCWlmICh0eXBlT3JQYWNrYWdlQ2FjaGUgIT0gbnVsbCkKKwkJCQkJCXR5cGVP
clBhY2thZ2VDYWNoZS5wdXQobmFtZSwgdHlwZSk7CisJCQkJCXJldHVybiB0eXBlOworCQkJCX0K
KwkJCX0KIAkJCS8vIGNoZWNrIGlmIHRoZSBuYW1lIGlzIGluIHRoZSBjdXJyZW50IHBhY2thZ2Us
IHNraXAgaXQgaWYgaXRzIGEgc3ViLXBhY2thZ2UKIAkJCVBhY2thZ2VCaW5kaW5nIGN1cnJlbnRQ
YWNrYWdlID0gdW5pdFNjb3BlLmZQYWNrYWdlOwogCQkJdW5pdFNjb3BlLnJlY29yZFJlZmVyZW5j
ZShjdXJyZW50UGFja2FnZS5jb21wb3VuZE5hbWUsIG5hbWUpOw==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>205471</attachid>
            <date>2011-10-19 01:21:00 -0400</date>
            <delta_ts>2011-10-19 01:21:43 -0400</delta_ts>
            <desc>proposed fix v1.1 + regression tests</desc>
            <filename>HEAD--Fixed-bug-318401-FUP-of-317858-Clarify-eclipse.patch</filename>
            <type>text/plain</type>
            <size>9071</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YXRpY0ltcG9ydFRlc3Qu
amF2YQppbmRleCBiYWU2YTNjLi43OGY4YmFkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9TdGF0aWNJbXBvcnRUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vU3RhdGljSW1wb3J0VGVzdC5qYXZhCkBAIC0yNDg0LDEwICsyNDg0LDEw
IEBACiAJCQkJIn1cbiIsCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBFUlJP
UiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDcpXG4iICsgCi0JCQkiCWludCB2MiA9IGIuZm9vQztc
biIgKyAKKwkJCSIxLiBFUlJPUiBpbiBwMVxcQS5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQki
CWludCB2MSA9IGIuZm9vQjtcbiIgKyAKIAkJCSIJICAgICAgICAgICBeXl5eXG4iICsgCi0JCQki
Zm9vQyBjYW5ub3QgYmUgcmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSJmb29C
IGNhbm5vdCBiZSByZXNvbHZlZCBvciBpcyBub3QgYSBmaWVsZFxuIiArIAogCQkJIi0tLS0tLS0t
LS1cbiIpOwogCX0JCiAJLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MjU2Mzc1CkBAIC0yNzIwLDUgKzI3MjAsMTc1IEBACiAJCQkiLS0tLS0tLS0tLVxuIgog
CQkpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzE4NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MSgpIHsKKwkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlRlc3QuamF2YSIsCisJCQkJImltcG9ydCBz
dGF0aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1
YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nIFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJ
CQkiCX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1
ZSgpKSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0u
b3V0LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xl
YW4gYWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJU3RyaW5nIG15QiAgID0gICAgICAgIEIuY2xh
c3MuZ2V0Q2Fub25pY2FsTmFtZSgpOztcbiIgKwkJLy8gcmVmZXJzIHRvIHAxLkJhci5CIChjbGFz
cykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1l
KCk7O1xuIiArICAgICAvLyByZWZlcnMgdG8gcDEuQmFyLkIgKGNsYXNzKQorCQkJCSIJCUIoKTtc
biIgKwkJCQkvLyByZWZlcnMgdG8gcDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCXJldHVybiBt
eUIuZXF1YWxzKHJlYWxCKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAx
L0Jhci5qYXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQmFy
e1xuIiArCisJCQkJIglwdWJsaWMgc3RhdGljIGNsYXNzIEJ7fVxuIiArCisJCQkJIglmaW5hbCBw
dWJsaWMgc3RhdGljIFN0cmluZyBCID0gbmV3IFN0cmluZyhcInJhbmRvbVwiKTtcbiIgKworCQkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIEIoKXt9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkicDMvRm9v
LmphdmEiLAorCQkJCSJwYWNrYWdlIHAzO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBGb28ge1xu
IiArCisJCQkJIglwdWJsaWMgY2xhc3MgQntcbiIgKworCQkJCSIJCXB1YmxpYyBpbnQgYTtcbiIg
KworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQkiMSArIDEgPSAgMiIpOworCX0K
KwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4
NDAxCisJcHVibGljIHZvaWQgdGVzdDA4MigpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJwMS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4i
ICsKKwkJCQkicHVibGljIGNsYXNzIEJhcntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFz
cyBCe31cbiIgKworCQkJCSIJZmluYWwgcHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJp
bmcoXCJyYW5kb21cIik7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiAr
CisJCQkJIn1cbiIsCisJCQkJInAzL0Zvby5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsK
KwkJCQkiCQlwdWJsaWMgaW50IGE7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJ
CSJwMi9UZXN0LmphdmEiLAorCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJImltcG9ydCBzdGF0
aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4qO1xuIiArCisJCQkJInB1Ymxp
YyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5n
IFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS5iZWdpblRlc3QoKTsiICsKKwkJCQki
CX1cbiIgKworCQkJCSIJcHVibGljIHZvaWQgYmVnaW5UZXN0KCl7XG4iICsKKwkJCQkiCQlTeXN0
ZW0ub3V0LnByaW50KFwiMSArIDEgPSAgXCIpO1xuIiArCisJCQkJIgkJaWYoYWx3YXlzVHJ1ZSgp
KSBTeXN0ZW0ub3V0LnByaW50bG4oXCIyXCIpO1xuIiArCisJCQkJIgkJZWxzZSBTeXN0ZW0ub3V0
LnByaW50bG4oXCIzXCIpOyAiICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIGJvb2xlYW4g
YWx3YXlzVHJ1ZSgpe1xuIiArCisJCQkJIgkJQiBiID0gbnVsbDtcbiIgKwkJLy8gcmVmZXJzIHRv
IHAxLkJhci5CIChjbGFzcykKKwkJCQkiCQlTdHJpbmcgcmVhbEIgPSBCO1xuIiArICAvLyByZWZl
cnMgdG8gcDEuQmFyLkIgKGZpZWxkKQorCQkJCSIJCUIoKTtcbiIgKwkJCQkvLyByZWZlcnMgdG8g
cDEuQmFyLkIoKSAobWV0aG9kKQorCQkJCSIJCWludCBhYmMgPSBiLmE7XG47IiArCS8vIHN0YXRp
YyBpbXBvcnQgZm9yIEJhci5CIG92ZXJzaGFkb3dzIG9uIGRlbWFuZCBpbXBvcnQgRm9vLkIKKwkJ
CQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIx
LiBFUlJPUiBpbiBwMlxcVGVzdC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAorCQkJIglpbnQgYWJj
ID0gYi5hO1xuIiArIAorCQkJIgkgICAgICAgICAgICBeXG4iICsgCisJCQkiYSBjYW5ub3QgYmUg
cmVzb2x2ZWQgb3IgaXMgbm90IGEgZmllbGRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9
CisJCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMx
ODQwMQorCXB1YmxpYyB2b2lkIHRlc3QwODMoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJUZXN0LmphdmEiLAorCQkJCSJpbXBvcnQgc3RhdGljIHAx
LkJhci5CO1xuIiArCisJCQkJImltcG9ydCBwMy5Gb28uKjtcbiIgKworCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBbXSBh
cmdzKXtcbiIgKworCQkJCSIJCW5ldyBUZXN0KCkudGVzdDIoKTsiICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJcHVibGljIHZvaWQgdGVzdDIoKXtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihCLnRvU3RyaW5nKCkpO1xuIiArCQkvLyBGaWVsZCBvYnNjdXJlcyBjbGFzcyBCCisJCQkJIgkJ
U3lzdGVtLm91dC5wcmludGxuKHAxLkJhci5CLnRvU3RyaW5nKCkpO1xuIiArICAvLyBGaWVsZCBv
YnNjdXJlcyB0aGUgY2xhc3MgQgorCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihCLmNsYXNzLmdl
dENhbm9uaWNhbE5hbWUoKS50b1N0cmluZygpKTtcbiIgKwkvLyB0aGUgY2xhc3MgQgorCQkJCSIJ
CVN5c3RlbS5vdXQucHJpbnRsbihwMS5CYXIuQi5jbGFzcy5nZXRDYW5vbmljYWxOYW1lKCkudG9T
dHJpbmcoKSk7IiArCS8vIGNsYXNzIEIKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJCSJw
MS9CYXIuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIEJh
cntcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyBjbGFzcyBCe31cbiIgKworCQkJCSIJZmluYWwg
cHVibGljIHN0YXRpYyBTdHJpbmcgQiA9IG5ldyBTdHJpbmcoXCJyYW5kb21cIik7XG4iICsKKwkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBCKCl7fVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAzL0Zv
by5qYXZhIiwKKwkJCQkicGFja2FnZSBwMztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtc
biIgKworCQkJCSIJcHVibGljIGNsYXNzIEJ7XG4iICsKKwkJCQkiCQlwdWJsaWMgaW50IGE7XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iCisJCQl9LAorCQkJInJhbmRvbVxuIiArIAorCQkJ
InJhbmRvbVxuIiArIAorCQkJInAxLkJhci5CXG4iICsgCisJCQkicDEuQmFyLkIiKTsKKwl9CisJ
CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODQw
MQorCS8vIENoZWNrIGlmIHdlJ3JlIGFibGUgdG8gZmluZCB0aGUgY29ycmVjdCBzdGF0aWMgbWVt
YmVyIHR5cGUgYmVpbmcgaW1wb3J0ZWQsCisJLy8gZXZlbiB0aG91Z2ggdGhlIGltcG9ydCBvcmln
aW5hbGx5IHJlc29sdmVkIHRvIHRoZSBzdGF0aWMgZmllbGQgb2YgdGhlIHNhbWUgbmFtZSwKKwkv
LyBjb21pbmcgZnJvbSB0aGUgc3VwZXJ0eXBlCisJcHVibGljIHZvaWQgdGVzdDA4NCgpIHsKKwkJ
dGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlRlc3QuamF2YSIs
CisJCQkJImltcG9ydCBzdGF0aWMgcDEuQmFyLkI7XG4iICsKKwkJCQkiaW1wb3J0IHAzLkZvby4q
O1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3Mpe1xuIiArCisJCQkJIgkJbmV3IFRlc3QoKS50ZXN0
MigpOyIgKworCQkJCSIJfVxuIiArCisJCQkJIglwdWJsaWMgdm9pZCB0ZXN0Migpe1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKEIuY2xhc3MuZ2V0Q2Fub25pY2FsTmFtZSgpLnRvU3Ry
aW5nKCkpO1xuIiArCS8vIHRoZSBjbGFzcyBCCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHAx
LkJhci5CLmNsYXNzLmdldENhbm9uaWNhbE5hbWUoKS50b1N0cmluZygpKTsiICsJLy8gY2xhc3Mg
QgorCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAxL0Jhci5qYXZhIiwKKwkJCQkicGFj
a2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQmFyIGV4dGVuZHMgU3VwZXJCYXJ7XG4i
ICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgY2xhc3MgQnt9XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBCKCl7fVxuIiArCisJCQkJIn1cbiIsCisJCQkJInAxL1N1cGVyQmFyLmphdmEiLAor
CQkJCSJwYWNrYWdlIHAxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBTdXBlckJhciB7XG4iICsK
KwkJCQkiCWZpbmFsIHB1YmxpYyBzdGF0aWMgU3RyaW5nIEIgPSBuZXcgU3RyaW5nKFwicmFuZG9t
XCIpO1xuIiArCisJCQkJIn1cbiIsCisJCQkJInAzL0Zvby5qYXZhIiwKKwkJCQkicGFja2FnZSBw
MztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRm9vIHtcbiIgKworCQkJCSIJcHVibGljIGNsYXNz
IEJ7XG4iICsKKwkJCQkiCQlwdWJsaWMgaW50IGE7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9
XG4iCisJCQl9LAorCQkJInAxLkJhci5CXG4iICsgCisJCQkicDEuQmFyLkIiKTsKKwl9CisKIH0K
IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9T
Y29wZS5qYXZhCmluZGV4IDllYzdlMGEuLmNhZDFiZGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTI3MTIsNyAr
MjcxMiw1MyBAQAogCQkJCQl9CiAJCQkJfQogCQkJfQotCisJCQkvLyB3YWxrIHNpbmdsZSBzdGF0
aWMgaW1wb3J0cy4gQSB0eXBlIGZvdW5kIGhlcmUgd2lsbCBzaGFkb3cgdHlwZXMgd2l0aCBzYW1l
IG5hbWUgaW4gb3RoZXIgQ1Uncywgb3IgdHlwZXMgY29taW5nCisJCQkvLyBmcm9tIG9uLWRlbWFu
ZCBpbXBvcnRzLiBKTFMgNy41LjMKKwkJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD0zMTg0MDEKKwkJCWlmIChpbXBvcnRzICE9IG51bGwpIHsKKwkJCQlS
ZWZlcmVuY2VCaW5kaW5nIHR5cGUgPSBudWxsOworCQkJCW5leHRJbXBvcnQgOiBmb3IgKGludCBp
ID0gMCwgbGVuZ3RoID0gaW1wb3J0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQlJ
bXBvcnRCaW5kaW5nIGltcG9ydEJpbmRpbmcgPSBpbXBvcnRzW2ldOworCQkJCQlpZiAoaW1wb3J0
QmluZGluZy5pc1N0YXRpYygpKSB7CisJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIHRlbXAgPSBudWxs
OworCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKGltcG9ydEJpbmRpbmcuY29tcG91bmRO
YW1lW2ltcG9ydEJpbmRpbmcuY29tcG91bmROYW1lLmxlbmd0aCAtIDFdLCBuYW1lKSkgeworCQkJ
CQkJCUJpbmRpbmcgcmVzb2x2ZWRJbXBvcnQgPSBpbXBvcnRCaW5kaW5nLnJlc29sdmVkSW1wb3J0
OworCQkJCQkJCWlmIChyZXNvbHZlZEltcG9ydCA9PSBudWxsKSBjb250aW51ZSBuZXh0SW1wb3J0
OworCQkJCQkJCWlmIChyZXNvbHZlZEltcG9ydCBpbnN0YW5jZW9mIE1ldGhvZEJpbmRpbmcgfHwg
cmVzb2x2ZWRJbXBvcnQgaW5zdGFuY2VvZiBGaWVsZEJpbmRpbmcpIHsKKwkJCQkJCQkJLy8gY2hl
Y2sgdG8gc2VlIGlmIHRoZXJlIGFyZSBhbHNvIG1lbWJlciB0eXBlcyB3aXRoIHRoZSBzYW1lIG5h
bWUKKwkJCQkJCQkJLy8gbXVzdCBmaW5kIHRoZSBpbXBvcnRSZWYncyB0eXBlIGFnYWluIHNpbmNl
IHRoZSBtZXRob2QvZmllbGQgY2FuIGJlIGZyb20gYW4gaW5oZXJpdGVkIHR5cGUKKwkJCQkJCQkJ
Ly8gc2VlIFN0YXRpY0ltcG9ydFRlc3QjdGVzdDA4NCBmb3IgbW9yZSBjbGFyaXR5CisJCQkJCQkJ
CWNoYXJbXVtdIGltcG9ydE5hbWUgPSBpbXBvcnRCaW5kaW5nLnJlZmVyZW5jZS50b2tlbnM7CisJ
CQkJCQkJCVR5cGVCaW5kaW5nIHJlZmVyZW5jZWRUeXBlID0gZ2V0VHlwZShpbXBvcnROYW1lLCBp
bXBvcnROYW1lLmxlbmd0aCAtIDEpOworCQkJCQkJCQlpZiAocmVmZXJlbmNlZFR5cGUgIT0gbnVs
bCAmJiByZWZlcmVuY2VkVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJ
CQkJCXRlbXAgPSBmaW5kTWVtYmVyVHlwZShuYW1lLCAoUmVmZXJlbmNlQmluZGluZykgcmVmZXJl
bmNlZFR5cGUpOworCQkJCQkJCQl9CisJCQkJCQkJfQorCQkJCQkJCWlmICh0ZW1wICE9IG51bGwg
JiYgdGVtcC5pc1N0YXRpYygpICYmIHRlbXAgIT0gdHlwZSkgeworCQkJCQkJCQlpZiAodGVtcC5p
c1ZhbGlkQmluZGluZygpKSB7CisJCQkJCQkJCQlpZiAoIXRlbXAuY2FuQmVTZWVuQnkodW5pdFNj
b3BlLmZQYWNrYWdlKSkgeworCQkJCQkJCQkJCS8vIEFuc3dlciBlcnJvciBiaW5kaW5nIC0gdHlw
ZSBpcyBub3QgdmlzaWJsZQorCQkJCQkJCQkJCWZvdW5kVHlwZSA9IG5ldyBQcm9ibGVtUmVmZXJl
bmNlQmluZGluZyhuZXcgY2hhcltdW117bmFtZX0sIHR5cGUsIFByb2JsZW1SZWFzb25zLk5vdFZp
c2libGUpOworCQkJCQkJCQkJfSBlbHNlIHsKKwkJCQkJCQkJCQlJbXBvcnRSZWZlcmVuY2UgaW1w
b3J0UmVmZXJlbmNlID0gaW1wb3J0QmluZGluZy5yZWZlcmVuY2U7CisJCQkJCQkJCQkJaWYgKGlt
cG9ydFJlZmVyZW5jZSAhPSBudWxsKSB7CisJCQkJCQkJCQkJCWltcG9ydFJlZmVyZW5jZS5iaXRz
IHw9IEFTVE5vZGUuVXNlZDsKKwkJCQkJCQkJCQl9CisJCQkJCQkJCQkJdHlwZSA9IHRlbXA7CisJ
CQkJCQkJCQl9CisJCQkJCQkJCX0gZWxzZSBpZiAoZm91bmRUeXBlID09IG51bGwpIHsKKwkJCQkJ
CQkJCWZvdW5kVHlwZSA9IHRlbXA7CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJCQkJCQl9CisJCQkJ
CX0KKwkJCQl9CisJCQkJaWYgKHR5cGUgIT0gbnVsbCkgeworCQkJCQlpZiAodHlwZU9yUGFja2Fn
ZUNhY2hlICE9IG51bGwpCisJCQkJCQl0eXBlT3JQYWNrYWdlQ2FjaGUucHV0KG5hbWUsIHR5cGUp
OworCQkJCQlyZXR1cm4gdHlwZTsKKwkJCQl9CisJCQl9CiAJCQkvLyBjaGVjayBpZiB0aGUgbmFt
ZSBpcyBpbiB0aGUgY3VycmVudCBwYWNrYWdlLCBza2lwIGl0IGlmIGl0cyBhIHN1Yi1wYWNrYWdl
CiAJCQlQYWNrYWdlQmluZGluZyBjdXJyZW50UGFja2FnZSA9IHVuaXRTY29wZS5mUGFja2FnZTsK
IAkJCXVuaXRTY29wZS5yZWNvcmRSZWZlcmVuY2UoY3VycmVudFBhY2thZ2UuY29tcG91bmROYW1l
LCBuYW1lKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>