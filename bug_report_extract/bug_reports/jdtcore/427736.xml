<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427736</bug_id>
          
          <creation_ts>2014-02-08 15:32:00 -0500</creation_ts>
          <short_desc>[1.8][generics] Method not applicable error with identical parameter types</short_desc>
          <delta_ts>2014-05-26 11:54:02 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>gautier.desaintmartinlacaze</cc>
    
    <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2360602</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-08 15:32:30 -0500</bug_when>
    <thetext>This is the code, comes from trying to compile JDK source code:

class Test1&lt;K, V&gt; {
  /**
   * @param &lt;K2&gt; unused
   * @param &lt;V2&gt; unused
   */
  private static class Node&lt;K2, V2&gt; {}
  
  @SuppressWarnings(&quot;unused&quot;)
  private KeySetView&lt;K, V&gt; keySet(V mappedValue) {return null;}
  
  /**
   * See {@link #keySet() keySet()},
   * @param &lt;K3&gt; unused
   * @param &lt;V3&gt; unused
   */
  private static class KeySetView&lt;K3, V3&gt; {}
  
  private static &lt;K4, V4&gt; Node&lt;K4, V4&gt; untree0(Node&lt;K4, V4&gt; hi) {return hi;}
  void untreesomething(Node&lt;K, V&gt; n) {
    // The method untree0(Test1.Node&lt;K4,V4&gt;) in the type Test1&lt;K,V&gt; is not 
    // applicable for the arguments (Test1.Node&lt;K,V&gt;)
    untree0(n);
  }
  
  private static &lt;K4, V4&gt; Node&lt;K4, V4&gt; tabAt0(Node&lt;K4, V4&gt;[] tab, int i) {return tab[i];}
  void tabatsomething(Node&lt;K, V&gt;[] t) {
    // The method tabAt0(Test2.Node&lt;K4,V4&gt;[], int) in the type Test2&lt;K,V&gt; is not 
    // applicable for the arguments (Test2.Node&lt;K,V&gt;[], int)
    tabAt0(t, 0);
  }
}

I thought this might be the same as bug 427411 but the the javadoc snippet with @link is giving me pause, and so I think this might be different. Tested with the latest BETA_JAVA8 branch updated couple of minutes ago.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360608</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-08 16:05:30 -0500</bug_when>
    <thetext>Hmm. Trying to write a junit, I see the test actually passes consistently.
I can see the problem in the IDE though - No idea what could be going on
here, yet.

junit released: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=b93a217fe6b68aa2016c37812b125d5d097ba1a3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360620</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-08 18:06:51 -0500</bug_when>
    <thetext>This one seems like it needs a little bit of everything before it occurs. I was at a loss trying to come up with a descriptive summary, hence the current that&apos;s not even completely accurate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360650</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-09 01:44:57 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Hmm. Trying to write a junit, I see the test actually passes consistently.
&gt; I can see the problem in the IDE though - No idea what could be going on
&gt; here, yet.

This reminded me of another bug and indeed, a quick test pinpointed that all other compile warnings don&apos;t have an effect except Unnecessary code - Unused import. When that&apos;s turned off then Package Explorer and Problems View no longer show errors (editor view still does). Maybe that&apos;s what&apos;s missing from the junit?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361027</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-10 10:18:00 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #3)

&gt; This reminded me of another bug and indeed, a quick test pinpointed that all
&gt; other compile warnings don&apos;t have an effect except Unnecessary code - Unused
&gt; import. When that&apos;s turned off then Package Explorer and Problems View no
&gt; longer show errors (editor view still does). Maybe that&apos;s what&apos;s missing
&gt; from the junit?

Close, but no cigar :) It is javadoc processing that is messing things up.
Will investigate why.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361063</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-10 10:56:37 -0500</bug_when>
    <thetext>Amended minimal junit that reproduces the problem released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=687ab8ff39714b5ce9983d7c352a9d12d477edc9

Stephan, I&apos;ll take a shot at it. Javadoc processing seems to be required for
it and the resolution goes awry and contributes to the problem. Clicking on
the @link takes me to the wrong symbol for one thing.

If it does get too deep into the code, will reassign back to you with a core
dump from my investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361120</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 12:09:08 -0500</bug_when>
    <thetext>FYI, there was exactly one change I made to Javadoc processing on behalf of new type inference, see http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Javadoc.java?h=BETA_JAVA8&amp;id=6940f5238f5f044dc7dc7f5472f64a2c5617a365</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361128</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-10 12:19:07 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; FYI, there was exactly one change I made to Javadoc processing on behalf of
&gt; new type inference, see

Thanks, this so far looks like an insidious problem in terms of
scope.getMethod() call from JavadocMessageSend not acting as a pure function
causing some side effects that impact subsequent invocations.

I am trying to short circuit various portions to narrow down. It looks like
if I can short circuit the call:

receiverType.getExactMethod(selector, argumentTypes, unitScope);

in 

Scope.findExactMethod() when invoked on behalf of the JavadocMessageSend
the problem vanishes.

Too bad Eclipse debugger has no support (?) for abrupt returns - I need to add
code in various places to achieve this - even good old gdb can do this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361146</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 12:45:30 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)
&gt; Thanks, this so far looks like an insidious problem in terms of
&gt; scope.getMethod() call from JavadocMessageSend not acting as a pure function
&gt; causing some side effects that impact subsequent invocations.

If javadoc would use the same (==) MessageSends as real code I wouldn&apos;t be surprised, but since that is not the case, this sounds strange.

If this is about inference, then the main point of reference is now MessageSend.inferenceContexts. Is that structure involved?

&gt; Too bad Eclipse debugger has no support (?) for abrupt returns - I need to
&gt; add
&gt; code in various places to achieve this - even good old gdb can do this.

You mean to force early returns? Like Alt-Shift-F (Force Return)? Or s.t. more automated?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361172</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-10 13:16:06 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)

&gt; Too bad Eclipse debugger has no support (?) for abrupt returns - I need to
&gt; add
&gt; code in various places to achieve this - even good old gdb can do this.

Thanks ! That is what I wanted - though it looks like I need to select a
value before I can use that from a non-void method - is there a way to provide
the value as an arbitrary expression in a dialog ?

Finding so far: The instantiation of methods in the RTB for the outer type
in javadoc somehow interferes with the normal generic message send subsequently.
(I forget why we even ended up with an RTB in the first place during javadoc
resolve)

Minimal test released as GRT.test427736. Will get back to this later</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361203</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 14:26:07 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; Thanks ! That is what I wanted - though it looks like I need to select a
&gt; value before I can use that from a non-void method - is there a way to
&gt; provide
&gt; the value as an arbitrary expression in a dialog ?

I haven&apos;t seen a dialog for this, but you may write such expression into the &quot;Display&quot; view (New &gt; Scrapbook Page should serve the same purpose).

(And do a Ctrl-Shift-I to inspect to be sure it&apos;s the desired value :) )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361777</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 13:39:09 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; (I forget why we even ended up with an RTB in the first place during javadoc
&gt; resolve)
&gt; 
&gt; Minimal test released as GRT.test427736. Will get back to this later

Using that test I see an anomaly during inference regarding the analysis of raw types. I have a patch under test ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361795</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 14:34:24 -0500</bug_when>
    <thetext>Here&apos;s what causes the mysterious side effect from javadoc resolving into code resolving:

We have a raw type Test1#RAW as the enclosing type of static inner Node.

RawTypeBindings have their arguments lazily initialized via initializeArguments(), which is only ever called from PTB.substitute(TVB).

If we observe the RTB before that initialization it has null arguments, after it has two times BTB for j.l.Object.

Clients shouldn&apos;t depend on this difference, but inference did.

Ah, and RTB.initializeArguments() is triggered along this stack:

RawTypeBinding.initializeArguments() line: 195	
RawTypeBinding(ParameterizedTypeBinding).substitute(TypeVariableBinding) line: 1164	
Scope$Substitutor.substitute(Substitution, TypeBinding) line: 485	
Scope$Substitutor.substitute(Substitution, TypeBinding[]) line: 613	
Scope.substitute(Substitution, TypeBinding[]) line: 438	
ParameterizedMethodBinding.&lt;init&gt;(ParameterizedTypeBinding, MethodBinding) line: 126	
RawTypeBinding(ParameterizedTypeBinding).createParameterizedMethod(MethodBinding) line: 357	
RawTypeBinding.createParameterizedMethod(MethodBinding) line: 91	
RawTypeBinding(ParameterizedTypeBinding).getMethods(char[]) line: 662	
RawTypeBinding(ParameterizedTypeBinding).getExactMethod(char[], TypeBinding[], CompilationUnitScope) line: 573	
ClassScope(Scope).findExactMethod(ReferenceBinding, char[], TypeBinding[], InvocationSite) line: 1320	
ClassScope(Scope).getMethod(TypeBinding, char[], TypeBinding[], InvocationSite) line: 2892	
JavadocMessageSend.internalResolveType(Scope) line: 99	

That&apos;s how javadoc resolving changed the game.


Fixed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2b388a4ff4c8fe51488a95b2626d01fa3ae58b63</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361930</commentid>
    <comment_count>13</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-11 21:48:46 -0500</bug_when>
    <thetext>No longer occurs on a new build from HEAD.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366724</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-21 07:34:49 -0500</bug_when>
    <thetext>Verified already by Timo. Changing state accordingly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400317</commentid>
    <comment_count>15</comment_count>
    <who name="Gautier de SAINT MARTIN LACAZE">gautier.desaintmartinlacaze</who>
    <bug_when>2014-05-12 10:41:12 -0400</bug_when>
    <thetext>I think there is always a problem. Maybe it&apos;s not exactly the same but when I get the source code from this github repository https://github.com/CodeStory/fluent-http, I have the following error : 

&quot;The method nameWithoutExtension(String) in the type Site is not applicable for the arguments (Object)&quot;

The sample code is : 

Supplier&lt;Map&lt;String, Object&gt;&gt; data = memoize(() -&gt; resourceList.get()
      .stream()
      .filter(path -&gt; path.startsWith(&quot;_data/&quot;))
      .collect(Collectors.toMap(path -&gt; nameWithoutExtension(path), path -&gt; readYaml(path))));

There is the same problem with readYaml(String). If I use maven to compile the source code, there is no compilation. Moreover, if I remove the call of memoize(Supplier&lt;T&gt;), there is no compilation error.

If it&apos;s not the same problem I can create a new bug on bugzilla.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400422</commentid>
    <comment_count>16</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-05-12 12:23:15 -0400</bug_when>
    <thetext>In the code example there is a lambda inside a lambda and the inner lambda(s) are implicitly typed so &quot;not pertinent to applicability&quot;. Maybe another facet of the bug 433158 and bug 433852 pair of bugs?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404131</commentid>
    <comment_count>17</comment_count>
    <who name="Gautier de SAINT MARTIN LACAZE">gautier.desaintmartinlacaze</who>
    <bug_when>2014-05-20 08:19:29 -0400</bug_when>
    <thetext>I will provide a little sample of the code this week. Should I create a new bug or comment one of the following bugs :  #433158 #433852</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404137</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 08:27:12 -0400</bug_when>
    <thetext>(In reply to Gautier de SAINT MARTIN LACAZE from comment #17)
&gt; I will provide a little sample of the code this week. Should I create a new
&gt; bug or comment one of the following bugs :  #433158 #433852

If it is the same problem as an existing, open bug, please just comment there. Otherwise I&apos;d prefer a new bug.

As you mention similarity to bug 433158: please first check if your example might be invalid for the same reasons.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405037</commentid>
    <comment_count>19</comment_count>
    <who name="Gautier de SAINT MARTIN LACAZE">gautier.desaintmartinlacaze</who>
    <bug_when>2014-05-21 12:33:45 -0400</bug_when>
    <thetext>In fact, I am not sure that is exactly the same problem. So please said me if you want I create a new bug.

As I promised, here a sample code to illustrate the bug.


public class DummyClass {

	public void method() {

		// Cases where there is no error
		final Supplier&lt;Set&lt;String&gt;&gt; suppliers = this.memoize(() -&gt; new HashSet&lt;&gt;());

		final Supplier&lt;Map&lt;Object, Object&gt;&gt; noMemoize = () -&gt; suppliers.get().stream()
				.filter(path -&gt; path.startsWith(&quot;&quot;))
				.collect(Collectors.toMap(path -&gt; this.getKey(path), path -&gt; this.getValue(path)));

		// Case where there is errors.
		final Supplier&lt;Map&lt;Object, Object&gt;&gt; memoize = this.memoize(() -&gt; suppliers.get().stream()
				.filter(path -&gt; path.startsWith(&quot;&quot;))
				.collect(Collectors.toMap(path -&gt; this.getKey(path), path -&gt; this.getValue(path))));

		// Error message are : Description
		// Resource	Path	Location	Type
		// The method getKey(String) in the type DummyTest is not applicable for the arguments (Object)	DummyClass.java line 23	Java Problem
		// The method getValue(String) in the type DummyTest is not applicable for the arguments (Object)	DummyClass.java line 23	Java Problem

	}

	private &lt;T&gt; Supplier&lt;T&gt; memoize(final Supplier&lt;T&gt; delegate) {
		return delegate;
	}

	private Object getKey(final String path) {
		return path;
	}

	private Object getValue(final String path) {
		return path;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405817</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:17:19 -0400</bug_when>
    <thetext>(In reply to Gautier de SAINT MARTIN LACAZE from comment #19)
&gt; In fact, I am not sure that is exactly the same problem. So please said me
&gt; if you want I create a new bug.

Since this current bug is resolved and verified, please file a new bug if you are convinced that ecj has a bug.

The difference looks fishy, indeed. But it doesn&apos;t look like an easy candidate for a final assessment (bug or no bug?). Easiest workaround for now: add an explicit type to one of the &apos;path&apos; lambda arguments inside Collectors.toMap</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407252</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-26 11:54:02 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #20)
&gt; (In reply to Gautier de SAINT MARTIN LACAZE from comment #19)
&gt; &gt; In fact, I am not sure that is exactly the same problem. So please said me
&gt; &gt; if you want I create a new bug.
&gt; 
&gt; Since this current bug is resolved and verified, please file a new bug if
&gt; you are convinced that ecj has a bug.

For reference: that bug has appeared as bug 435767.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>