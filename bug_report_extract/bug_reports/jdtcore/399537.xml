<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>399537</bug_id>
          
          <creation_ts>2013-01-30 13:53:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Exceptions thrown from lambda body must match specification per function descriptor</short_desc>
          <delta_ts>2013-02-05 20:49:03 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>382701</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2210062</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-30 13:53:08 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following program should trigger an error at the throw site as it illegal
to throw a checked exception from a lambda body that is not specified in the
function descriptor computed for the single abstract method of the functional
interface.

// -- 
import java.io.IOException;

interface I { void run(int x); }

class X {
	void foo() {
	    I r = (int y) -&gt; {
	    	throw new IOException();
	    };
        }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211235</commentid>
    <comment_count>1</comment_count>
      <attachid>226463</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-01 14:23:56 -0500</bug_when>
    <thetext>Created attachment 226463
Work in progress.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211352</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 07:01:30 -0500</bug_when>
    <thetext>Partial implementation released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a08e8dc8e9230a115f0cfdb4f78a05f8533a21b8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2212707</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-05 20:48:34 -0500</bug_when>
    <thetext>Tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e4130120ae791b6450af86266caf3711f6b81fa5</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226463</attachid>
            <date>2013-02-01 14:23:00 -0500</date>
            <delta_ts>2013-02-05 20:49:03 -0500</delta_ts>
            <desc>Work in progress.</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>12486</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCmluZGV4IDRk
NDlkY2QuLmI3ZTdlMzYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVBy
b2JsZW0uamF2YQpAQCAtMTMzNSw2ICsxMzM1LDggQEAKICAgICBpbnQgSWxsZWdhbFF1YWxpZmll
ckZvckV4cGxpY2l0VGhpczIgPSBJbnRlcm5hbCArIFN5bnRheCArIDY1MjsKICAgICAvKiogQHNp
bmNlIDMuOSAqLwogICAgIGludCBUYXJnZXRUeXBlTm90QUZ1bmN0aW9uYWxJbnRlcmZhY2UgPSBJ
bnRlcm5hbCArIFR5cGVSZWxhdGVkICsgNjUzOworICAgIC8qKiBAc2luY2UgMy45ICovCisgICAg
aW50IElsbGVnYWxWYXJhcmdJbkxhbWJkYSA9IEludGVybmFsICsgVHlwZVJlbGF0ZWQgKyA2NTQ7
CiAgICAgCiAJLyoqCiAJICogTW9yZSBwcm9ibGVtcyBpbiBnZW5lcmljcwpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fi
c3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YQppbmRleCBhNDIwY2YxLi44N2RiMGVkIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Fic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Fic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YQpAQCAtMTkwLDIxICsxOTAs
MjEgQEAKIAkvKioKIAkgKiBGZWVkIG51bGwgaW5mb3JtYXRpb24gZnJvbSBhcmd1bWVudCBhbm5v
dGF0aW9ucyBpbnRvIHRoZSBhbmFseXNpcyBhbmQgbWFyayBhcmd1bWVudHMgYXMgYXNzaWduZWQu
CiAJICovCi0Jdm9pZCBhbmFseXNlQXJndW1lbnRzKEZsb3dJbmZvIGZsb3dJbmZvKSB7Ci0JCWlm
ICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlmb3IgKGludCBpID0gMCwgY291bnQgPSB0
aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBjb3VudDsgaSsrKSB7Ci0JCQkJaWYgKHRoaXMuYmlu
ZGluZy5wYXJhbWV0ZXJOb25OdWxsbmVzcyAhPSBudWxsKSB7CisJc3RhdGljIHZvaWQgYW5hbHlz
ZUFyZ3VtZW50cyhGbG93SW5mbyBmbG93SW5mbywgQXJndW1lbnRbXSBtZXRob2RBcmd1bWVudHMs
IE1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZykgeworCQlpZiAobWV0aG9kQXJndW1lbnRzICE9
IG51bGwpIHsKKwkJCWZvciAoaW50IGkgPSAwLCBjb3VudCA9IG1ldGhvZEFyZ3VtZW50cy5sZW5n
dGg7IGkgPCBjb3VudDsgaSsrKSB7CisJCQkJaWYgKG1ldGhvZEJpbmRpbmcucGFyYW1ldGVyTm9u
TnVsbG5lc3MgIT0gbnVsbCkgewogCQkJCQkvLyBsZXZlcmFnZSBudWxsLWluZm8gZnJvbSBwYXJh
bWV0ZXIgYW5ub3RhdGlvbnM6Ci0JCQkJCUJvb2xlYW4gbm9uTnVsbE5lc3MgPSB0aGlzLmJpbmRp
bmcucGFyYW1ldGVyTm9uTnVsbG5lc3NbaV07CisJCQkJCUJvb2xlYW4gbm9uTnVsbE5lc3MgPSBt
ZXRob2RCaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzW2ldOwogCQkJCQlpZiAobm9uTnVsbE5l
c3MgIT0gbnVsbCkgewogCQkJCQkJaWYgKG5vbk51bGxOZXNzLmJvb2xlYW5WYWx1ZSgpKQotCQkJ
CQkJCWZsb3dJbmZvLm1hcmtBc0RlZmluaXRlbHlOb25OdWxsKHRoaXMuYXJndW1lbnRzW2ldLmJp
bmRpbmcpOworCQkJCQkJCWZsb3dJbmZvLm1hcmtBc0RlZmluaXRlbHlOb25OdWxsKG1ldGhvZEFy
Z3VtZW50c1tpXS5iaW5kaW5nKTsKIAkJCQkJCWVsc2UKLQkJCQkJCQlmbG93SW5mby5tYXJrUG90
ZW50aWFsbHlOdWxsQml0KHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcpOworCQkJCQkJCWZsb3dJ
bmZvLm1hcmtQb3RlbnRpYWxseU51bGxCaXQobWV0aG9kQXJndW1lbnRzW2ldLmJpbmRpbmcpOwog
CQkJCQl9CiAJCQkJfQogCQkJCS8vIHRhZyBwYXJhbWV0ZXJzIGFzIGJlaW5nIHNldDoKLQkJCQlm
bG93SW5mby5tYXJrQXNEZWZpbml0ZWx5QXNzaWduZWQodGhpcy5hcmd1bWVudHNbaV0uYmluZGlu
Zyk7CisJCQkJZmxvd0luZm8ubWFya0FzRGVmaW5pdGVseUFzc2lnbmVkKG1ldGhvZEFyZ3VtZW50
c1tpXS5iaW5kaW5nKTsKIAkJCX0KIAkJfQogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
c3RydWN0b3JEZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRlY2xhcmF0
aW9uLmphdmEKaW5kZXggNjNhMTk0OC4uMDBjMzhiOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9D
b25zdHJ1Y3RvckRlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRl
Y2xhcmF0aW9uLmphdmEKQEAgLTEyNyw3ICsxMjcsNyBAQAogCQl9CiAKIAkJLy8gbnVsbGl0eSBh
bmQgbWFyayBhcyBhc3NpZ25lZAotCQlhbmFseXNlQXJndW1lbnRzKGZsb3dJbmZvKTsKKwkJYW5h
bHlzZUFyZ3VtZW50cyhmbG93SW5mbywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYmluZGluZyk7CiAK
IAkJLy8gcHJvcGFnYXRlIHRvIGNvbnN0cnVjdG9yIGNhbGwKIAkJaWYgKHRoaXMuY29uc3RydWN0
b3JDYWxsICE9IG51bGwpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggNDc0MGNjMy4u
ZTU3NDhjOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTE5LDkgKzE5LDE1IEBACiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2F0ZWdvcml6ZWRQcm9ibGVtOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5Db21waWxhdGlvblJlc3VsdDsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5FeGNlcHRpb25I
YW5kbGluZ0Zsb3dDb250ZXh0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5mbG93LkZsb3dDb250ZXh0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5mbG93LkZsb3dJbmZvOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5pbXBsLlJlZmVyZW5jZUNvbnRleHQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuQmxvY2tTY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RTY29wZTsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmlu
ZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIucHJvYmxlbS5B
Ym9ydENvbXBpbGF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5wcm9ibGVtLkFib3J0Q29tcGlsYXRpb25Vbml0OwpAQCAtMzAsMTEgKzM2LDEyIEBACiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW0uUHJvYmxlbVNldmVy
aXRpZXM7CiAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25h
bEV4cHJlc3Npb24gaW1wbGVtZW50cyBQcm9ibGVtU2V2ZXJpdGllcywgUmVmZXJlbmNlQ29udGV4
dCB7Ci0JQXJndW1lbnQgW10gYXJndW1lbnRzOworCXB1YmxpYyBBcmd1bWVudCBbXSBhcmd1bWVu
dHM7CiAJU3RhdGVtZW50IGJvZHk7CiAJcHJpdmF0ZSBNZXRob2RTY29wZSBzY29wZTsKIAlwcml2
YXRlIENvbXBpbGF0aW9uUmVzdWx0IGNvbXBpbGF0aW9uUmVzdWx0OwogCXByaXZhdGUgYm9vbGVh
biBpZ25vcmVGdXJ0aGVySW52ZXN0aWdhdGlvbjsKKwlwcml2YXRlIE1ldGhvZEJpbmRpbmcgYmlu
ZGluZzsKIAkKIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbihDb21waWxhdGlvblJlc3VsdCBjb21w
aWxhdGlvblJlc3VsdCwgQXJndW1lbnQgW10gYXJndW1lbnRzLCBTdGF0ZW1lbnQgYm9keSkgewog
CQl0aGlzLmNvbXBpbGF0aW9uUmVzdWx0ID0gY29tcGlsYXRpb25SZXN1bHQ7CkBAIC00NSw4ICs1
Miw5IEBACiAJcHVibGljIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUgYmxvY2tT
Y29wZSkgewogCQlzdXBlci5yZXNvbHZlVHlwZShibG9ja1Njb3BlKTsKIAkJdGhpcy5zY29wZSA9
IG5ldyBNZXRob2RTY29wZShibG9ja1Njb3BlLCB0aGlzLCBibG9ja1Njb3BlLm1ldGhvZFNjb3Bl
KCkuaXNTdGF0aWMpOwotCisJCXRoaXMuYmluZGluZyA9IHRoaXMuc2NvcGUuY3JlYXRlQW5vbnlt
b3VzTWV0aG9kQmluZGluZyh0aGlzKTsKIAkJaWYgKHRoaXMuZnVuY3Rpb25hbEludGVyZmFjZVR5
cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlvbnMg
PSBjb21wdXRlS29zaGVyVGhyb3dhYmxlcygpOwogCQkJLy8gUmVzb2x2ZSBhcmd1bWVudHMsIHZh
bGlkYXRlIHNpZ25hdHVyZSAuLi4KIAkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsICYmIHRo
aXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgIT0gbnVsbCkgewogCQkJCWludCBwYXJhbWV0ZXJDb3Vu
dCA9IHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QucGFyYW1ldGVycyAhPSBudWxsID8gdGhpcy5z
aW5nbGVBYnN0cmFjdE1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aCA6IDA7CkBAIC03Niw2ICs4NCw0
OCBAQAogCQl9CiAJCXJldHVybiB0aGlzLmZ1bmN0aW9uYWxJbnRlcmZhY2VUeXBlOwogCX0KKwkK
Kwlwcml2YXRlIFJlZmVyZW5jZUJpbmRpbmdbXSBjb21wdXRlS29zaGVyVGhyb3dhYmxlcygpIHsK
KwkJcmV0dXJuIEJpbmRpbmcuTk9fRVhDRVBUSU9OUzsgLy8gZm9yIG5vdy4KKwl9CisKKwlwdWJs
aWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250
ZXh0IGZsb3dDb250ZXh0LCBmaW5hbCBGbG93SW5mbyBmbG93SW5mbykgeworCQlGbG93SW5mbyBs
YW1iZGFJbmZvID0gZmxvd0luZm8uY29weSgpOyAvLyBvY2N1cnJlbmNlIGNvbnRleHQgaW1tdW5l
IHRvIGRhdGEgZmxvdyBpbnNpZGUgbGFtYmRhLgorCQlFeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250
ZXh0IG1ldGhvZENvbnRleHQgPQorCQkJCW5ldyBFeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0
KAorCQkJCQkJZmxvd0NvbnRleHQsCisJCQkJCQl0aGlzLAorCQkJCQkJdGhpcy5iaW5kaW5nLnRo
cm93bkV4Y2VwdGlvbnMsCisJCQkJCQludWxsLAorCQkJCQkJdGhpcy5zY29wZSwKKwkJCQkJCUZs
b3dJbmZvLkRFQURfRU5EKTsKKworCQkvLyBudWxsaXR5IGFuZCBtYXJrIGFzIGFzc2lnbmVkCisJ
CUFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uYW5hbHlzZUFyZ3VtZW50cyhsYW1iZGFJbmZvLCB0
aGlzLmFyZ3VtZW50cywgdGhpcy5iaW5kaW5nKTsKKworCQlpZiAodGhpcy5hcmd1bWVudHMgIT0g
bnVsbCkgeworCQkJZm9yIChpbnQgaSA9IDAsIGNvdW50ID0gdGhpcy5hcmd1bWVudHMubGVuZ3Ro
OyBpIDwgY291bnQ7IGkrKykgeworCQkJCXRoaXMuYml0cyB8PSAodGhpcy5hcmd1bWVudHNbaV0u
Yml0cyAmIEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zKTsKKwkJCX0KKwkJfQorCQkKKwkJbGFt
YmRhSW5mbyA9IHRoaXMuYm9keS5hbmFseXNlQ29kZSh0aGlzLnNjb3BlLCBtZXRob2RDb250ZXh0
LCBsYW1iZGFJbmZvKTsKKwkJCisJCS8vIGNoZWNrIGZvciBtaXNzaW5nIHJldHVybmluZyBwYXRo
IGZvciBibG9jayBib2R5J3MgLi4uCisJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBCbG9jaykg
eworCQkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZUJpbmRpbmcgPSBleHBlY3RlZFJlc3VsdFR5cGUo
KTsKKwkJCWlmICgocmV0dXJuVHlwZUJpbmRpbmcgPT0gVHlwZUJpbmRpbmcuVk9JRCkpIHsKKwkJ
CQlpZiAoKGxhbWJkYUluZm8udGFnQml0cyAmIEZsb3dJbmZvLlVOUkVBQ0hBQkxFX09SX0RFQUQp
ID09IDApIHsKKwkJCQkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuTmVlZEZyZWVSZXR1cm47CisJCQkJ
fQorCQkJfSBlbHNlIHsKKwkJCQlpZiAobGFtYmRhSW5mbyAhPSBGbG93SW5mby5ERUFEX0VORCkg
eworCQkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnNob3VsZFJldHVybihyZXR1cm5U
eXBlQmluZGluZywgdGhpcyk7CisJCQkJfQorCQkJfQorCQl9CisJCXJldHVybiBmbG93SW5mbzsK
Kwl9CiAKIAlwdWJsaWMgU3RyaW5nQnVmZmVyIHByaW50RXhwcmVzc2lvbihpbnQgdGFiLCBTdHJp
bmdCdWZmZXIgb3V0cHV0KSB7CiAJCWludCBwYXJlbnRoZXNlc0NvdW50ID0gKHRoaXMuYml0cyAm
IEFTVE5vZGUuUGFyZW50aGVzaXplZE1BU0spID4+IEFTVE5vZGUuUGFyZW50aGVzaXplZFNISUZU
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCmluZGV4IGQzNmFiOTguLjQ1ODkyNGUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01ldGhvZERlY2xhcmF0aW9uLmphdmEKQEAgLTEwMyw3ICsxMDMsNyBAQAogCQkJCQlGbG93SW5m
by5ERUFEX0VORCk7CiAKIAkJCS8vIG51bGxpdHkgYW5kIG1hcmsgYXMgYXNzaWduZWQKLQkJCWFu
YWx5c2VBcmd1bWVudHMoZmxvd0luZm8pOworCQkJYW5hbHlzZUFyZ3VtZW50cyhmbG93SW5mbywg
dGhpcy5hcmd1bWVudHMsIHRoaXMuYmluZGluZyk7CiAKIAkJCWlmICh0aGlzLmFyZ3VtZW50cyAh
PSBudWxsKSB7CiAJCQkJZm9yIChpbnQgaSA9IDAsIGNvdW50ID0gdGhpcy5hcmd1bWVudHMubGVu
Z3RoOyBpIDwgY291bnQ7IGkrKykgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RT
Y29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RTY29wZS5qYXZhCmluZGV4IDI5ZWY2YTYu
LmFiOTU3YWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kU2NvcGUuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL01ldGhvZFNjb3BlLmphdmEKQEAgLTM4Nyw2ICszODcsMzMgQEAKIAly
ZXR1cm4gbWV0aG9kLmJpbmRpbmc7CiB9CiAKK3B1YmxpYyBNZXRob2RCaW5kaW5nIGNyZWF0ZUFu
b255bW91c01ldGhvZEJpbmRpbmcoTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkKKwlTb3Vy
Y2VUeXBlQmluZGluZyBkZWNsYXJpbmdDbGFzcyA9IG51bGw7IC8vIGZvciBub3cuCisJaW50IG1v
ZGlmaWVycyA9IENsYXNzRmlsZUNvbnN0YW50cy5BY2NQdWJsaWMgfCBFeHRyYUNvbXBpbGVyTW9k
aWZpZXJzLkFjY1VucmVzb2x2ZWQ7CisJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gbmV3IE1ldGhv
ZEJpbmRpbmcobW9kaWZpZXJzLCBUeXBlQ29uc3RhbnRzLkFOT05ZTU9VU19NRVRIT0QsIG51bGws
IG51bGwsIG51bGwsIGRlY2xhcmluZ0NsYXNzKTsKKworCUFyZ3VtZW50W10gYXJndW1lbnRzID0g
bGFtYmRhLmFyZ3VtZW50czsKKwlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAw
IDogYXJndW1lbnRzLmxlbmd0aDsKKwlpZiAoYXJnTGVuZ3RoID4gMCkgeworCQlBcmd1bWVudCBh
cmd1bWVudCA9IGFyZ3VtZW50c1stLWFyZ0xlbmd0aF07CisJCWlmIChhcmd1bWVudC5pc1ZhckFy
Z3MoKSkKKwkJCWJpbmRpbmcubW9kaWZpZXJzIHw9IENsYXNzRmlsZUNvbnN0YW50cy5BY2NWYXJh
cmdzOworCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoYXJndW1lbnQubmFtZSwgQ29uc3RhbnRQ
b29sLlRoaXMpKSB7CisJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVGhpc0RlY2xhcmF0aW9u
KGFyZ3VtZW50KTsKKwkJfQorCQl3aGlsZSAoLS1hcmdMZW5ndGggPj0gMCkgeworCQkJYXJndW1l
bnQgPSBhcmd1bWVudHNbYXJnTGVuZ3RoXTsKKwkJCWlmIChhcmd1bWVudC5pc1ZhckFyZ3MoKSkK
KwkJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVmFyYXJnSW5MYW1iZGEoYXJndW1lbnQpOwor
CQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKGFyZ3VtZW50Lm5hbWUsIENvbnN0YW50UG9vbC5U
aGlzKSkgeworCQkJCXByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxUaGlzRGVjbGFyYXRpb24oYXJn
dW1lbnQpOworCQkJfQorCQl9CisJfQorCXJldHVybiBiaW5kaW5nOworfQorCiAvKioKICAqIE92
ZXJyaWRkZW4gdG8gZGV0ZWN0IHRoZSBlcnJvciBjYXNlIGluc2lkZSBhbiBleHBsaWNpdCBjb25z
dHJ1Y3RvciBjYWxsOgogY2xhc3MgWCB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVD
b25zdGFudHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUNvbnN0YW50cy5qYXZhCmluZGV4IGE5
ODc1YmEuLjgyMDVkNjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUNvbnN0YW50cy5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUNvbnN0YW50cy5qYXZhCkBAIC04NSw3ICs4NSw3
IEBACiAgICAgY2hhcltdIFVQUEVSX0xPQ0FMX1ZBUklBQkxFID0gIkxPQ0FMX1ZBUklBQkxFIi50
b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCiAgICAgY2hhcltdIFVQUEVSX0FOTk9UQVRJT05f
VFlQRSA9ICJBTk5PVEFUSU9OX1RZUEUiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKICAg
ICBjaGFyW10gVVBQRVJfUEFDS0FHRSA9ICJQQUNLQUdFIi50b0NoYXJBcnJheSgpOyAvLyROT04t
TkxTLTEkCi0gICAgY2hhcltdIEFOT05ZTU9VU19NRVRIT0QgPSAiIGFub255bW91cyAiLnRvQ2hh
ckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKyAgICBjaGFyW10gQU5PTllNT1VTX01FVEhPRCA9ICIg
YW5vbnltb3VzICIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJCAvLyBmb3Igbm93IC0gc2Vy
aWFsaXphdGlvbiBpc3N1ZXMgPwogICAgIAogCS8vIGpzcjMwOAogCWNoYXJbXSBUWVBFX1VTRV9U
QVJHRVQgID0gIlRZUEVfVVNFIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDlmNjNhY2IuLjU1M2YzOTAgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yNzAzLDYgKzI3MDMsMTUgQEAKIAkJYXJnVHlwZS5z
b3VyY2VTdGFydCwKIAkJYXJnVHlwZS5zb3VyY2VFbmQpOwogfQorcHVibGljIHZvaWQgaWxsZWdh
bFZhcmFyZ0luTGFtYmRhKEFyZ3VtZW50IGFyZ1R5cGUpIHsKKwlTdHJpbmdbXSBhcmd1bWVudHMg
PSBuZXcgU3RyaW5nW10geyBDaGFyT3BlcmF0aW9uLnRvU3RyaW5nKGFyZ1R5cGUudHlwZS5nZXRU
eXBlTmFtZSgpKX07CisJdGhpcy5oYW5kbGUoCisJCUlQcm9ibGVtLklsbGVnYWxWYXJhcmdJbkxh
bWJkYSwKKwkJYXJndW1lbnRzLAorCQlhcmd1bWVudHMsCisJCWFyZ1R5cGUuc291cmNlU3RhcnQs
CisJCWFyZ1R5cGUuc291cmNlRW5kKTsKK30KIHB1YmxpYyB2b2lkIGlsbGVnYWxUaGlzRGVjbGFy
YXRpb24oQXJndW1lbnQgYXJndW1lbnQpIHsKIAlTdHJpbmdbXSBhcmd1bWVudHMgPSBOb0FyZ3Vt
ZW50OwogCXRoaXMuaGFuZGxlKApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMu
cHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZGRl
NDkxZS4uZTRjMjhmMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVy
dGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC02MDksNiAr
NjA5LDcgQEAKIDY1MSA9IFRoZSBleHBsaWNpdCAnJ3RoaXMnJyBwYXJhbWV0ZXIgaXMgZXhwZWN0
ZWQgdG8gYmUgcXVhbGlmaWVkIHdpdGggezB9CiA2NTIgPSBUaGUgZXhwbGljaXQgJyd0aGlzJycg
cGFyYW1ldGVyIGZvciBhIG1ldGhvZCBjYW5ub3QgaGF2ZSBhIHF1YWxpZnlpbmcgbmFtZQogNjUz
ID0gVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25h
bCBpbnRlcmZhY2UKKzY1NCA9IFRoZSB2YXJpYWJsZSBhcmd1bWVudCB0eXBlIHswfSBvZiB0aGUg
bGFtYmRhIGV4cHJlc3Npb24gbXVzdCBiZSB0aGUgbGFzdCBwYXJhbWV0ZXIKICMjIyBNT1JFIEdF
TkVSSUNTCiA2NjAgPSBVbnVzZWQgdHlwZSBhcmd1bWVudHMgZm9yIHRoZSBub24gZ2VuZXJpYyBj
b25zdHJ1Y3RvciB7MH0oezF9KSBvZiB0eXBlIHsyfTsgaXQgc2hvdWxkIG5vdCBiZSBwYXJhbWV0
ZXJpemVkIHdpdGggYXJndW1lbnRzIDx7M30+CiA2NjEgPSBVbnVzZWQgdHlwZSBwYXJhbWV0ZXIg
ezB9
</data>

          </attachment>
      

    </bug>

</bugzilla>