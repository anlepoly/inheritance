<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401610</bug_id>
          
          <creation_ts>2013-02-24 01:07:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Allow lambda expressions in non-overloaded method invocation contexts</short_desc>
          <delta_ts>2013-02-26 08:31:42 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400871</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2221199</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-24 01:07:54 -0500</bug_when>
    <thetext>BETA_JAVA8:
-----------

While the broader issue of overload resolution is the subject matter
of bug 400871, we can already enable lambda/reference expressions in
non-overloaded scenarios : i.e where we have just a single candidate
method that is both potentially applicable and applicable under one
of strict, loose or variable arity invocation. This would enable us
to compile the following program which fails to compile as of now:

// ---
interface I {
    void foo();
}
public class X {

  void foo(I i) {
    System.out.println(&quot;foo&quot;);
  }
	
  public static void main(String[] args) {
    new X().foo(()-&gt;{}); // incorrect complaint about non-functional interface.
  }
}
// -----

This solution would also outline how the concern raised in
https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701 could be
readily addressed and can serve as a sketch for how the overall
overload resolution problem is planned to be tackled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221227</commentid>
    <comment_count>1</comment_count>
      <attachid>227507</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-24 08:05:58 -0500</bug_when>
    <thetext>Created attachment 227507
Work in progress

Not fully polished/tested, but basically the solution is in place.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221320</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-24 22:29:03 -0500</bug_when>
    <thetext>I&apos;ll split this ER into two - one each for lambdas and reference expressions
and retain the present one for lambdas. Adjusted the title accordingly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221932</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 04:56:01 -0500</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=df9615ffbbc7235a218c4e9aa88ba85075714875

Recording for posterity: A lot of discussion that should have happened 
here ended up happening here: https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874.

Finally I implemented the solution outlined in https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874#c18 to handle having
to type check the lambda method multiple times.

We have a very clean solution now - though perhaps not the best perforing
solution from the set of solutions. I have raised a follow up bug to
address performance improvement explorations separately: https://bugs.eclipse.org/bugs/show_bug.cgi?id=401769</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221933</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 04:57:19 -0500</bug_when>
    <thetext>.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222015</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 08:31:42 -0500</bug_when>
    <thetext>Additional tests and some clean up released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=77ac300d6d124e9b071b4e62fab3a583e6eecdc4

For the record, this fix allows lambda methods to feature even in
overloaded situations as long as there is only one applicable
method. i.e most specific method search is yet to be implemented
for lambdas.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227507</attachid>
            <date>2013-02-24 08:05:00 -0500</date>
            <delta_ts>2013-02-24 08:05:58 -0500</delta_ts>
            <desc>Work in progress</desc>
            <filename>Preview.patch</filename>
            <type>text/plain</type>
            <size>21770</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDA0ODhkMDIuLjU4OWViYjIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNDk3Niw2ICs0OTc2LDE1MyBAQAog
CQkJCSJUaGUgdHlwZSBvZiBmb28oKSBmcm9tIHRoZSB0eXBlIFggaXMgWm9yaywgdGhpcyBpcyBp
bmNvbXBhdGlibGUgd2l0aCB0aGUgZGVzY3JpcHRvclwncyByZXR1cm4gdHlwZTogaW50W11cbiIg
KyAKIAkJCQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDAxNjEwLCBbMS44XVtjb21waWxlcl0gQWxsb3cgbGFtYmRh
L3JlZmVyZW5jZSBleHByZXNzaW9ucyBpbiBub24tb3ZlcmxvYWRlZCBtZXRob2QgaW52b2NhdGlv
biBjb250ZXh0cworcHVibGljIHZvaWQgdGVzdDQwMTYxMCgpIHsKK3RoaXMucnVuQ29uZm9ybVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImludGVyZmFjZSBJIHtc
biIgKworCQkJCSIgICAgdm9pZCBmb28oKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkJIgl2b2lkIGZvbyhJIGkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvb1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIglwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiCQluZXcgWCgpLmZv
bygoKS0+e30pO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIiwKKwkJCQl9LAorCQkJCSJm
b28iKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00MDE2MTAsIFsxLjhdW2NvbXBpbGVyXSBBbGxvdyBsYW1iZGEvcmVmZXJlbmNlIGV4cHJlc3Np
b25zIGluIG5vbi1vdmVybG9hZGVkIG1ldGhvZCBpbnZvY2F0aW9uIGNvbnRleHRzCitwdWJsaWMg
dm9pZCB0ZXN0NDAxNjEwYSgpIHsKK3RoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkJIlguamF2YSIsCisJCQkJImludGVyZmFjZSBJIHtcbiIgKworCQkJCSIgICAgdm9p
ZCBmb28oKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEoge1xuIiArCisJCQkJ
IiAgICB2b2lkIGZvbyhpbnQgeCwgaW50IHkpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRl
cmZhY2UgSyB7XG4iICsKKwkJCQkiICAgIHZvaWQgZm9vKFN0cmluZyBzKTtcbiIgKworCQkJCSJ9
XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIgl2b2lkIGZvbyhJIGkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbyhJKVwiKTtcbiIgKworCQkJCSIJ
fVxuIiArCisJCQkJIgl2b2lkIGZvbyhKIGopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJp
bnRsbihcImZvbyhKKVwiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbyhLIGsp
IHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbyhLKVwiKTtcbiIgKworCQkJ
CSIJfVxuIiArCisJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCQkiCQluZXcgWCgpLmZvbygoKS0+e30pO1xuIiArCisJCQkJIgkJbmV3IFgoKS5m
b28oKHgsIHkpLT57fSk7XG4iICsKKwkJCQkiCQluZXcgWCgpLmZvbygocyktPnt9KTtcbiIgKwor
CQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQkJfSwKKwkJCQkiZm9vKEkpXG4iICsgCisJCQkJ
ImZvbyhKKVxuIiArIAorCQkJCSJmb28oSykiKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDE2MTAsIFsxLjhdW2NvbXBpbGVyXSBBbGxvdyBs
YW1iZGEvcmVmZXJlbmNlIGV4cHJlc3Npb25zIGluIG5vbi1vdmVybG9hZGVkIG1ldGhvZCBpbnZv
Y2F0aW9uIGNvbnRleHRzCitwdWJsaWMgdm9pZCB0ZXN0NDAxNjEwYigpIHsKK3RoaXMucnVuTmVn
YXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbnRlcmZh
Y2UgSSB7XG4iICsKKwkJCQkiICAgIHZvaWQgZm9vKCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJ
ImludGVyZmFjZSBKIHtcbiIgKworCQkJCSIgICAgdm9pZCBmb28oaW50IHgsIGludCB5KTtcbiIg
KworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEsge1xuIiArCisJCQkJIiAgICB2b2lkIGZv
byhTdHJpbmcgcyk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KworCQkJCSIJdm9pZCBmb28oSSBpKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4o
XCJmb28oSSlcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJdm9pZCBmb28oSiBqKSB7XG4i
ICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb28oSilcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiAr
CisJCQkJIgkJbmV3IFgoKS5mb28oKCktPnt9KTtcbiIgKworCQkJCSIJCW5ldyBYKCkuZm9vKCh4
LCB5KS0+e30pO1xuIiArCisJCQkJIgkJbmV3IFgoKS5mb28oKHMpLT57fSk7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSJ9XG4iLAorCQkJCX0sCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAorCQkJCSIJbmV3IFgoKS5mb28o
KHMpLT57fSk7XG4iICsgCisJCQkJIgkgICAgICAgIF5eXlxuIiArIAorCQkJCSJUaGUgbWV0aG9k
IGZvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
ICgoPG5vIHR5cGU+IHMpIC0+IHtcbiIgKyAKKwkJCQkifSlcbiIgKyAKKwkJCQkiLS0tLS0tLS0t
LVxuIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDAxNjEwLCBbMS44XVtjb21waWxlcl0gQWxsb3cgbGFtYmRhL3JlZmVyZW5jZSBleHByZXNz
aW9ucyBpbiBub24tb3ZlcmxvYWRlZCBtZXRob2QgaW52b2NhdGlvbiBjb250ZXh0cworcHVibGlj
IHZvaWQgdGVzdDQwMTYxMGMoKSB7Cit0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJIiAgICB2
b2lkIGZvbygpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgSyB7XG4iICsKKwkJ
CQkiICAgIFN0cmluZyBmb28oU3RyaW5nIHMpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiCXZvaWQgZm9vKEkgaSkge1xuIiArCisJCQkJIgkJU3lz
dGVtLm91dC5wcmludGxuKFwiZm9vKEkpXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZv
aWQgZm9vKEsgaykge1xuIiArCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vKEspXCIp
O1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKworCQkJCSIJCW5ldyBYKCkuZm9vKCgpLT57IHJldHVybiBcIlwiO30p
O1xuIiArCisJCQkJIgkJbmV3IFgoKS5mb28oKCktPiAxMCk7XG4iICsKKwkJCQkiCQluZXcgWCgp
LmZvbygocyktPnt9KTtcbiIgKworCQkJCSIJCW5ldyBYKCkuZm9vKChzKS0+eyByZXR1cm47fSk7
XG4iICsKKwkJCQkiCQluZXcgWCgpLmZvbygocyktPnsgcmV0dXJuIFwiXCI7fSk7XG4iICsKKwkJ
CQkiCQluZXcgWCgpLmZvbygocyktPiBcImhlbGxvXCIpO1xuIiArCisJCQkJIgkJbmV3IFgoKS5m
b28oKCktPnsgcmV0dXJuO30pO1xuIiArCisJCQkJIgkJbmV3IFgoKS5mb28oKCktPiBTeXN0ZW0u
b3V0LnByaW50bG4oKSk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJCX0sCisJ
CQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE1
KVxuIiArIAorCQkJCSIJbmV3IFgoKS5mb28oKCktPnsgcmV0dXJuIFwiXCI7fSk7XG4iICsgCisJ
CQkJIgkgICAgICAgIF5eXlxuIiArIAorCQkJCSJUaGUgbWV0aG9kIGZvbyhJKSBpbiB0aGUgdHlw
ZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoKSAtPiB7XG4iICsgCisJ
CQkJIiAgcmV0dXJuIFwiXCI7XG4iICsgCisJCQkJIn0pXG4iICsgCisJCQkJIi0tLS0tLS0tLS1c
biIgKyAKKwkJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE2KVxuIiArIAorCQkJCSIJ
bmV3IFgoKS5mb28oKCktPiAxMCk7XG4iICsgCisJCQkJIgkgICAgICAgIF5eXlxuIiArIAorCQkJ
CSJUaGUgbWV0aG9kIGZvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0
aGUgYXJndW1lbnRzICgoKSAtPiAxMClcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJ
CSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCisJCQkJIgluZXcgWCgpLmZv
bygocyktPnt9KTtcbiIgKyAKKwkJCQkiCSAgICAgICAgXl5eXG4iICsgCisJCQkJIlRoZSBtZXRo
b2QgZm9vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4gcykgLT4ge1xuIiArIAorCQkJCSJ9KVxuIiArIAorCQkJCSItLS0tLS0t
LS0tXG4iICsgCisJCQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIgKyAKKwkJ
CQkiCW5ldyBYKCkuZm9vKChzKS0+eyByZXR1cm47fSk7XG4iICsgCisJCQkJIgkgICAgICAgIF5e
XlxuIiArIAorCQkJCSJUaGUgbWV0aG9kIGZvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBs
aWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHMpIC0+IHtcbiIgKyAKKwkJCQki
ICByZXR1cm4gO1xuIiArIAorCQkJCSJ9KVxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4iKTsKK30K
IHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJk
YUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQppbmRleCAxYTYxNjZiLi5iZGYwNTI4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhCkBAIC0zNCw3ICszNCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLnByb2JsZW0uUHJvYmxlbVJlcG9ydGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5wcm9ibGVtLlByb2JsZW1TZXZlcml0aWVzOwogCi1wdWJsaWMgY2xh
c3MgQWxsb2NhdGlvbkV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSW52
b2NhdGlvblNpdGUgeworcHVibGljIGNsYXNzIEFsbG9jYXRpb25FeHByZXNzaW9uIGV4dGVuZHMg
RXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXRpb25TaXRlLCBQb2x5RXhwcmVzc2lvbiB7CiAK
IAlwdWJsaWMgVHlwZVJlZmVyZW5jZSB0eXBlOwogCXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1l
bnRzOwpAQCAtNTQ0LDQgKzU0NCw5IEBACiAJcmV0dXJuIHRydWU7CiB9CiAKK3B1YmxpYyBib29s
ZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKKwkv
LyBUT0RPIEF1dG8tZ2VuZXJhdGVkIG1ldGhvZCBzdHViCisJcmV0dXJuIGZhbHNlOworfQorCiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCBkYWFmYzZkLi42MzM4ZDRk
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTI5LDcgKzI5LDcgQEAK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy4qOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuKjsKIAotcHVibGljIGNs
YXNzIENvbmRpdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIE9wZXJhdG9yRXhwcmVzc2lvbiB7Citw
dWJsaWMgY2xhc3MgQ29uZGl0aW9uYWxFeHByZXNzaW9uIGV4dGVuZHMgT3BlcmF0b3JFeHByZXNz
aW9uIGltcGxlbWVudHMgUG9seUV4cHJlc3Npb24gewogCiAJcHVibGljIEV4cHJlc3Npb24gY29u
ZGl0aW9uLCB2YWx1ZUlmVHJ1ZSwgdmFsdWVJZkZhbHNlOwogCXB1YmxpYyBDb25zdGFudCBvcHRp
bWl6ZWRCb29sZWFuQ29uc3RhbnQ7CkBAIC02NzUsNCArNjc1LDkgQEAKIAkJfQogCQl2aXNpdG9y
LmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsKIAl9CisKKwlwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGli
bGVXaXRoKFR5cGVCaW5kaW5nIGxlZnQsIFNjb3BlIHNjb3BlKSB7CisJCS8vIFRPRE8gQXV0by1n
ZW5lcmF0ZWQgbWV0aG9kIHN0dWIKKwkJcmV0dXJuIGZhbHNlOworCX0KIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rp
b25hbEV4cHJlc3Npb24uamF2YQppbmRleCAxYjAwMDgzLi4yZTRlOWU0IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5j
dGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0yMiw2ICsyMiw3IEBACiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CbG9ja1Njb3BlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlByb2JsZW1SZWFzb25zOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUmF3VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwpAQCAtMjksMTIg
KzMwLDEyIEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5UeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlR5cGVCaW5kaW5nVmlzaXRvcjsKIAotcHVibGljIGFic3RyYWN0IGNsYXNzIEZ1bmN0
aW9uYWxFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7CitwdWJsaWMgYWJzdHJhY3QgY2xh
c3MgRnVuY3Rpb25hbEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgUG9s
eUV4cHJlc3Npb24gewogCQogCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZTsKIAlNZXRob2RCaW5k
aW5nIGRlc2NyaXB0b3I7CiAJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZzsKLQlwcml2YXRl
IEV4cHJlc3Npb25Db250ZXh0IGV4cHJlc3Npb25Db250ZXh0ID0gVkFOSUxMQV9DT05URVhUOwor
CXByb3RlY3RlZCBFeHByZXNzaW9uQ29udGV4dCBleHByZXNzaW9uQ29udGV4dCA9IFZBTklMTEFf
Q09OVEVYVDsKIAkKIAlwdWJsaWMgRnVuY3Rpb25hbEV4cHJlc3Npb24oKSB7CiAJCXN1cGVyKCk7
CkBAIC01Niw3ICs1NywxNiBAQAogCQlyZXR1cm4gdGhpcy5leHBlY3RlZFR5cGU7CiAJfQogCQor
CXB1YmxpYyB2b2lkIGRpc2NvdmVyU2hhcGUoQmxvY2tTY29wZSBibG9ja1Njb3BlKSB7CisJCS8v
IEZvciBsYW1iZGEgY29tcHV0ZSB2b2lkIGFuZC9vciB2YWx1ZSBjb21wYXRpYmlsaXR5LiBOb3Ag
Zm9yIFJlZmVyZW5jZUV4cHJlc3Npb25zLgorCX0KKwogCXB1YmxpYyBUeXBlQmluZGluZyByZXNv
bHZlVHlwZShCbG9ja1Njb3BlIGJsb2NrU2NvcGUpIHsKKwkKKwkJZGlzY292ZXJTaGFwZShibG9j
a1Njb3BlKTsKKwkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgdGhpcy5leHByZXNz
aW9uQ29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQpIHsKKwkJCXJldHVybiBuZXcgUG9seVR5
cGVCaW5kaW5nKHRoaXMpOworCQl9CiAJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29u
c3RhbnQ7CiAJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/
IG51bGwgOiB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChibG9ja1Nj
b3BlKTsKIAkJaWYgKHNhbSA9PSBudWxsKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJk
YUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4
IDYyNDQ1OTkuLmViZjYwY2QgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0zMiwxMSAr
MzIsMTMgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kU2NvcGU7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU2NvcGU7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UYWdCaXRzOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRp
bmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
Q29uc3RhbnRzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIucHJv
YmxlbS5BYm9ydENvbXBpbGF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5wcm9ibGVtLkFib3J0Q29tcGlsYXRpb25Vbml0OwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVtLkFib3J0TWV0aG9kOwpAQCAtNDksNiArNTEs
OCBAQAogCXByaXZhdGUgTWV0aG9kU2NvcGUgc2NvcGU7CiAJcHJpdmF0ZSBDb21waWxhdGlvblJl
c3VsdCBjb21waWxhdGlvblJlc3VsdDsKIAlwcml2YXRlIGJvb2xlYW4gaWdub3JlRnVydGhlcklu
dmVzdGlnYXRpb247CisJYm9vbGVhbiB2b2lkQ29tcGF0aWJsZSA9IHRydWU7CisJYm9vbGVhbiB2
YWx1ZUNvbXBhdGlibGUgPSBmYWxzZTsKIAkKIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbihDb21w
aWxhdGlvblJlc3VsdCBjb21waWxhdGlvblJlc3VsdCwgQXJndW1lbnQgW10gYXJndW1lbnRzLCBT
dGF0ZW1lbnQgYm9keSkgewogCQl0aGlzLmNvbXBpbGF0aW9uUmVzdWx0ID0gY29tcGlsYXRpb25S
ZXN1bHQ7CkBAIC04MSw3ICs4NSw5IEBACiAJICovCiAJcHVibGljIFR5cGVCaW5kaW5nIHJlc29s
dmVUeXBlKEJsb2NrU2NvcGUgYmxvY2tTY29wZSkgewogCQkKLQkJc3VwZXIucmVzb2x2ZVR5cGUo
YmxvY2tTY29wZSk7IC8vIGNvbXB1dGUgJiBjYXB0dXJlIGludGVyZmFjZSBmdW5jdGlvbiBkZXNj
cmlwdG9yIGluIHNpbmdsZUFic3RyYWN0TWV0aG9kLgorCQlUeXBlQmluZGluZyB0eXBlID0gc3Vw
ZXIucmVzb2x2ZVR5cGUoYmxvY2tTY29wZSk7IC8vIGNvbXB1dGUgJiBjYXB0dXJlIGludGVyZmFj
ZSBmdW5jdGlvbiBkZXNjcmlwdG9yIGluIHNpbmdsZUFic3RyYWN0TWV0aG9kLgorCQlpZiAodHlw
ZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykKKwkJCXJldHVybiB0eXBlOwogCQkKIAkJZmlu
YWwgYm9vbGVhbiBhcmd1bWVudHNUeXBlRWxpZGVkID0gYXJndW1lbnRzVHlwZUVsaWRlZCgpOwog
CQlmaW5hbCBib29sZWFuIGhhdmVEZXNjcmlwdG9yID0gdGhpcy5kZXNjcmlwdG9yICE9IG51bGw7
CkBAIC0zMzYsNCArMzQyLDQ3IEBACiAJCQl9CiAJCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIGJs
b2NrU2NvcGUpOwogCX0KKwkKKwlwdWJsaWMgdm9pZCBkaXNjb3ZlclNoYXBlKEJsb2NrU2NvcGUg
YmxvY2tTY29wZSkgeworCQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgQmxvY2spIHsKKwkJCS8v
IFRPRE86IHByb2Nlc3MgZGVjbGFyYXRpb25zLCBhbmFseXplIGZvciBkZWFkIGNvZGUgKD8pLCBn
YXRoZXIgcmV0dXJuIGV4cHJlc3Npb25zIGV0Yy4KKwkJCUFTVFZpc2l0b3IgdmlzaXRvciA9IG5l
dyBBU1RWaXNpdG9yKCkgeworCQkJCWJvb2xlYW4gdmFsdWVSZXR1cm5TZWVuID0gZmFsc2U7CisJ
CQkJYm9vbGVhbiB2b2lkUmV0dXJuU2VlbiA9IGZhbHNlOworCQkJCXB1YmxpYyBib29sZWFuIHZp
c2l0KFJldHVyblN0YXRlbWVudCByZXR1cm5TdGF0ZW1lbnQsIEJsb2NrU2NvcGUgZG9udENhcmUp
IHsKKwkJCQkJaWYgKHJldHVyblN0YXRlbWVudC5leHByZXNzaW9uICE9IG51bGwpIHsKKwkJCQkJ
CXRoaXMudmFsdWVSZXR1cm5TZWVuID0gdHJ1ZTsKKwkJCQkJCUxhbWJkYUV4cHJlc3Npb24udGhp
cy52b2lkQ29tcGF0aWJsZSA9IGZhbHNlOworCQkJCQkJTGFtYmRhRXhwcmVzc2lvbi50aGlzLnZh
bHVlQ29tcGF0aWJsZSA9ICF0aGlzLnZvaWRSZXR1cm5TZWVuOworCQkJCQl9IGVsc2UgeworCQkJ
CQkJdGhpcy52b2lkUmV0dXJuU2VlbiA9IHRydWU7CisJCQkJCQlMYW1iZGFFeHByZXNzaW9uLnRo
aXMudmFsdWVDb21wYXRpYmxlID0gZmFsc2U7CisJCQkJCQlpZiAodGhpcy52YWx1ZVJldHVyblNl
ZW4pIHsKKwkJCQkJCQlMYW1iZGFFeHByZXNzaW9uLnRoaXMudm9pZENvbXBhdGlibGUgPSBmYWxz
ZTsKKwkJCQkJCX0KKwkJCQkJfQorCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJfQorCQkJfTsKKwkJ
CXRoaXMudHJhdmVyc2UodmlzaXRvciwgYmxvY2tTY29wZSk7CisJCX0gZWxzZSB7CisJCQlFeHBy
ZXNzaW9uIGV4cHJlc3Npb24gPSAoRXhwcmVzc2lvbikgdGhpcy5ib2R5OworCQkJdGhpcy52b2lk
Q29tcGF0aWJsZSA9IGV4cHJlc3Npb24uc3RhdGVtZW50RXhwcmVzc2lvbigpOworCQkJdGhpcy52
YWx1ZUNvbXBhdGlibGUgPSB0cnVlOworCQl9CisJfQorCisJcHVibGljIGJvb2xlYW4gaXNDb21w
YXRpYmxlV2l0aChUeXBlQmluZGluZyBsZWZ0LCBTY29wZSBzb21lU2NvcGUgLyogPyAqLykgewor
CQlNZXRob2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qoc29tZVNj
b3BlKTsKKwkJaWYgKHNhbSA9PSBudWxsIHx8ICFzYW0uaXNWYWxpZEJpbmRpbmcoKSkKKwkJCXJl
dHVybiBmYWxzZTsKKwkJaWYgKHNhbS5wYXJhbWV0ZXJzLmxlbmd0aCAhPSB0aGlzLmFyZ3VtZW50
cy5sZW5ndGgpCisJCQlyZXR1cm4gZmFsc2U7CisJCWlmIChzYW0ucmV0dXJuVHlwZS5pZCA9PSBU
eXBlSWRzLlRfdm9pZCkgeworCQkJaWYgKHRoaXMudm9pZENvbXBhdGlibGUpCisJCQkJcmV0dXJu
IHRydWU7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0gCisJCXJldHVybiB0aGlzLnZhbHVlQ29tcGF0
aWJsZTsKKwl9CiB9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmlu
ZGV4IDEzYjRhYjAuLmU0NDk0NTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTUxLDYgKzUxLDcgQEAK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1pc3NpbmdU
eXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBv
bHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlBvbHltb3JwaGljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CkBA
IC02NSw3ICs2Niw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5wcm9ibGVtLlByb2JsZW1TZXZlcml0aWVzOwogCi1wdWJsaWMgY2xhc3MgTWVzc2FnZVNlbmQg
ZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdGlvblNpdGUgeworcHVibGljIGNs
YXNzIE1lc3NhZ2VTZW5kIGV4dGVuZHMgRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXRpb25T
aXRlLCBQb2x5RXhwcmVzc2lvbiB7CiAKIAlwdWJsaWMgRXhwcmVzc2lvbiByZWNlaXZlcjsKIAlw
dWJsaWMgY2hhcltdIHNlbGVjdG9yOwpAQCAtNTc0LDYgKzU3NSwxNCBAQAogCQkJCQkJPyB0aGlz
LnJlc29sdmVkVHlwZQogCQkJCQkJOiBudWxsOwogCX0KKwlmb3IgKGludCBpID0gMCwgbGVuZ3Ro
ID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkg
PCBsZW5ndGg7IGkrKyl7CisJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tp
XTsKKwkJaWYgKGFyZ3VtZW50VHlwZXNbaV0gaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpIHsK
KwkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJ
CQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUodGhpcy5iaW5kaW5nLnBhcmFtZXRlcnNbaV0pOwor
CQkJYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJfQor
CX0KIAlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGls
ZXJPcHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPD0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNgogCQkJJiYgdGhpcy5iaW5kaW5nLmlzUG9seW1vcnBoaWMo
KSkgewpAQCAtNzUwLDQgKzc1OSw4IEBACiBwdWJsaWMgYm9vbGVhbiBzdGF0ZW1lbnRFeHByZXNz
aW9uKCkgewogCXJldHVybiB0cnVlOwogfQorcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0
aChUeXBlQmluZGluZyBsZWZ0LCBTY29wZSBzY29wZSkgeworCS8vIFRPRE8gQXV0by1nZW5lcmF0
ZWQgbWV0aG9kIHN0dWIKKwlyZXR1cm4gZmFsc2U7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1BvbHlFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BvbHlFeHByZXNzaW9uLmphdmEK
bmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uYjlhNzkzNAotLS0gL2Rldi9udWxs
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUG9seUV4cHJlc3Npb24uamF2YQpAQCAtMCwwICsxLDI1IEBACisv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0
cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFu
IGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVk
IHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBh
dmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRo
ZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpD
UC4KKyAqCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlh
bCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OworCitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOworCitwdWJs
aWMgaW50ZXJmYWNlIFBvbHlFeHByZXNzaW9uIHsKKworCWJvb2xlYW4gaXNDb21wYXRpYmxlV2l0
aChUeXBlQmluZGluZyBsZWZ0LCBTY29wZSBzY29wZSk7CisJcHVibGljIFN0cmluZ0J1ZmZlciBw
cmludEV4cHJlc3Npb24oaW50IHRhYiwgU3RyaW5nQnVmZmVyIG91dHB1dCk7Cit9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVm
ZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4IDhiNjEyOGUuLmFiY2I5NDkgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVm
ZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC0zMjcsNCArMzI3LDkgQEAKIAkJfQogCQl2aXNpdG9y
LmVuZFZpc2l0KHRoaXMsIGJsb2NrU2NvcGUpOwogCX0KKworCXB1YmxpYyBib29sZWFuIGlzQ29t
cGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKKwkJLy8gVE9ETyBB
dXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gZmFsc2U7CisJfQogfQpcIE5vIG5l
d2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluZGluZy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5kaW5nLmphdmEKaW5kZXggN2M5ZTMzNC4uMjg0YjU4MCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9CaW5kaW5nLmphdmEKQEAgLTM5LDYgKzM5LDcgQEAKIAkvLyBqc3IgMzA4CiAJcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgVFlQRV9VU0UgPSBUWVBFIHwgQVNUTm9kZS5CaXQxNTsKIAlwdWJsaWMg
c3RhdGljIGZpbmFsIGludCBJTlRFUlNFQ1RJT05fQ0FTVF9UWVBFID0gVFlQRSB8IEFTVE5vZGUu
Qml0MTY7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUE9MWV9UWVBFID0gVFlQRSB8IEFTVE5v
ZGUuQml0MTc7CiAJCiAJLy8gSW4gdGhlIHVubGlrZWx5IGV2ZW50IHlvdSBhZGQgYSBuZXcgdHlw
ZSBiaW5kaW5nLCByZW1lbWJlciB0byB1cGRhdGUgVHlwZUJpbmRpbmdWaXNpdG9yIGFuZCBTY29w
ZS5zdWJzdGl0dXRlIG1ldGhvZHMuIAogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbXBp
bGF0aW9uVW5pdFNjb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3Bl
LmphdmEKaW5kZXggNjU1MzlkYy4uOWQ2ZmQzZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b21waWxhdGlvblVuaXRTY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29tcGlsYXRpb25V
bml0U2NvcGUuamF2YQpAQCAtNzgyLDEyICs3ODIsMTMgQEAKIAkJY2FzZSBCaW5kaW5nLlRZUEVf
UEFSQU1FVEVSIDoKIAkJY2FzZSBCaW5kaW5nLldJTERDQVJEX1RZUEUgOgogCQljYXNlIEJpbmRp
bmcuSU5URVJTRUNUSU9OX1RZUEUgOgorCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX0NBU1Rf
VFlQRTogLy8gY29uc3RpdHVlbnRzIHdvdWxkIGhhdmUgYmVlbiByZWNvcmRlZC4KKwkJY2FzZSBC
aW5kaW5nLlBPTFlfVFlQRTogLy8gbm90IGEgcmVhbCB0eXBlLCB3aWxsIG11dGF0ZSBpbnRvIG9u
ZSwgaG9wZWZ1bGx5IHNvb24uCiAJCQlyZXR1cm4gbnVsbDsKIAkJY2FzZSBCaW5kaW5nLlBBUkFN
RVRFUklaRURfVFlQRSA6CiAJCWNhc2UgQmluZGluZy5SQVdfVFlQRSA6CiAJCQl0eXBlID0gdHlw
ZS5lcmFzdXJlKCk7CiAJfQotCWlmICh0eXBlLmlzSW50ZXJzZWN0aW9uQ2FzdFR5cGUoKSkgcmV0
dXJuIG51bGw7ICAvLyBjb25zdGl0dWVudHMgd291bGQgaGF2ZSBiZWVuIHJlY29yZGVkLiAKIAlS
ZWZlcmVuY2VCaW5kaW5nIHJlZlR5cGUgPSAoUmVmZXJlbmNlQmluZGluZykgdHlwZTsKIAlpZiAo
cmVmVHlwZS5pc0xvY2FsVHlwZSgpKSByZXR1cm4gbnVsbDsKIAlyZXR1cm4gcmVmVHlwZTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAuLjg5ZTc4ZmEKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmlu
ZGluZy5qYXZhCkBAIC0wLDAgKzEsNjAgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBD
b3B5cmlnaHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2Vw
bC12MTAuaHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHkt
ZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0
eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZh
bHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0
aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoKKyAqIENvbnRyaWJ1dG9yczoKKyAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLworCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXA7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LlBvbHlFeHByZXNzaW9uOworCitwdWJsaWMgY2xhc3MgUG9seVR5cGVCaW5kaW5n
IGV4dGVuZHMgVHlwZUJpbmRpbmcgeworCisJUG9seUV4cHJlc3Npb24gZXhwcmVzc2lvbjsKKwkK
KwlwdWJsaWMgUG9seVR5cGVCaW5kaW5nKFBvbHlFeHByZXNzaW9uIGV4cHJlc3Npb24pIHsKKwkJ
dGhpcy5leHByZXNzaW9uID0gZXhwcmVzc2lvbjsKKwl9CisJCisJcHVibGljIGNoYXJbXSBjb25z
dGFudFBvb2xOYW1lKCkgeworCQl0aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRp
b24oKTsgIC8vIHNob3VsZCBuZXZlciByZWFjaCBjb2RlIGdlbmVyYXRpb24KKwl9CisKKwlwdWJs
aWMgUGFja2FnZUJpbmRpbmcgZ2V0UGFja2FnZSgpIHsKKwkJdGhyb3cgbmV3IFVuc3VwcG9ydGVk
T3BlcmF0aW9uRXhjZXB0aW9uKCk7ICAvLyBub2JvZHkgc2hvdWxkIGJlIGFza2luZyB0aGlzIHF1
ZXN0aW9uLgorCX0KKworCXB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRp
bmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKKwkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5pc0NvbXBh
dGlibGVXaXRoKGxlZnQsIHNjb3BlKTsKKwl9CisKKwlwdWJsaWMgY2hhcltdIHF1YWxpZmllZFNv
dXJjZU5hbWUoKSB7CisJCXJldHVybiByZWFkYWJsZU5hbWUoKTsKKwl9CisKKwlwdWJsaWMgY2hh
cltdIHNvdXJjZU5hbWUoKSB7CisJCXJldHVybiByZWFkYWJsZU5hbWUoKTsKKwl9CisKKwlwdWJs
aWMgY2hhcltdIHJlYWRhYmxlTmFtZSgpIHsKKwkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5wcmlu
dEV4cHJlc3Npb24oMCwgIG5ldyBTdHJpbmdCdWZmZXIoKSkudG9TdHJpbmcoKS50b0NoYXJBcnJh
eSgpOworCX0KKwkKKwlwdWJsaWMgU3RyaW5nIHRvU3RyaW5nKCkgeworCQlTdHJpbmdCdWZmZXIg
YnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigiUG9seVR5cGVCaW5kaW5nIGZvcjogIik7IC8vJE5P
Ti1OTFMtMSQKKwkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5wcmludEV4cHJlc3Npb24oMCwgIGJ1
ZmZlcikudG9TdHJpbmcoKTsKKwl9CisJCisJcHVibGljIGludCBraW5kKCkgeworCQlyZXR1cm4g
QmluZGluZy5QT0xZX1RZUEU7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGU=
</data>

          </attachment>
      

    </bug>

</bugzilla>