<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>438458</bug_id>
          
          <creation_ts>2014-06-28 13:15:00 -0400</creation_ts>
          <short_desc>[1.8][null] clean up handling of null type annotations wrt type variables</short_desc>
          <delta_ts>2014-08-06 05:36:54 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M1</target_milestone>
          <dependson>434602</dependson>
    
    <dependson>435570</dependson>
    
    <dependson>438012</dependson>
    
    <dependson>438179</dependson>
    
    <dependson>438250</dependson>
    
    <dependson>439516</dependson>
    
    <dependson>440143</dependson>
    
    <dependson>440759</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>clovis.seragiotto</cc>
    
    <cc>jarthana</cc>
    
    <cc>siegmaralber</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2421841</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-28 13:15:36 -0400</bug_when>
    <thetext>After bug 430150 has introduced stricter null checking against type variables, some previous decisions need to be reconsidered. In particular the integration with type inference and type substitution need to be revisited.

The principles to follow are:

(A) A type parameter with a null type annotation does not participate in nullness inference, i.e., any inference solution must match exactly with the type annotation on the type parameter:
  interface I1 &lt;@NonNull T&gt; { ... }
  ...
  &lt;U&gt; void m(I1&lt;U&gt; in) { ... }
  ...
  m(x); // inference here
When inferring U as the type argument to I1, it must be ensured that U is a nonnull type.  
  

(B) A null type annotation on a type variable (use) overrides any nullness associated with the type variable, be it declared on the type parameter or via client side substitution, i.e., the type after substitution has the same null type annotation as the declaration.
  interface I1 &lt;T&gt; {
     @Nullable T maybeGet(List&lt;T&gt; in);
  }
  ...
  List&lt;@NonNull String&gt; strings = ...
  x = someI1.maybeGet(strings);
Here the substituted return type of maybeGet() must be &apos;@Nullable String&apos; even if x has a nonnull type and tries to direct inference into answering &apos;@NonNull String&apos;. The explicit type annotation on &apos;T&apos; overrides the nullness of &apos;T&apos; and excludes that particular occurrence of &apos;T&apos; from null type inference.

As one consequence we will avoid inferring contradictory null type annotations in many cases (need to check if that error can still be triggered and when). Instead, we give precedence to null type annotations in the locations (A) and (B) and prefer blaming the client in terms of null type mismatch against the arguments or return of the given invocation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421846</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-28 13:32:18 -0400</bug_when>
    <thetext>Some prior art to be reconsidered here was done via bug 416176.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421847</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-28 13:38:35 -0400</bug_when>
    <thetext>As per bug 438012 also application of nullness defaults needs another look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2424792</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-06 11:48:37 -0400</bug_when>
    <thetext>See also bug 438971 Problem 1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2430402</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-22 12:12:58 -0400</bug_when>
    <thetext>This bug and its dependents has been resolved by a batch of commits.

Changes to be booked on this bug are:


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=1ab17a7eba14d35875267cc7b416da000a14dc1e
A facility to remove only null type annotations from a TypeBinding: I added parameter &apos;boolean removeOnlyNullAnnotations&apos; to TypeBinding.unannotated().
This is relevant to let explicit null type annotations override some that are passed down via substitution etc. without disturbing unrelated type annotations for which we don&apos;t have specific substitution semantics. Also used for cleanup after reporting a null-related error.


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b1c69f20f23ddb575225e5b5cb5d470714f41aad
Let InferenceVariable participate in deep encoding of type annotations. Previously, InferenceVariables did not exist in different variants for different sets of type annotations. This is insufficient if an inference variable represents a type variable which occurs with an explicit null annotation. E.g. in:
    &lt;T&gt; @Nullable T get(T in);
we must be able to distinguish input parameter and return type in terms of their nullness, even during inference where T is represented by an InferenceVariable (T#0 vs. &apos;@Nullable T#0&apos;).
This implies that all &apos;==&apos; comparisons of InferenceVariables had to be replaced with TB.equalsEquals() etc.
OTOH, TypeBounds are stored only per prototype of InferenceVariable, to ensure that type inference proper is not disturbed by this duplication.


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0d60094dd9c1c614c9f260f13ccbc556ab13b245
To avoid some situations of inferring contradictory nullness I activated null-bound-checks also for unannotated type arguments. I.e. the following is now flagged, too:
   interface I&lt;@NonNull T&gt; { ... }
   ...
   &lt;U&gt; U m(I&lt;U&gt; arg) { ... }
Here U is not a good type argument for I, because U could be substituted with a nullable type, thus violating the constraint on T.
Previously, an application of m with a nullable type as the invocation&apos;s target type would infer U to be nullable and thus create a contradiction on I&lt;U&gt;.
Reporting the incompatibility against the U in I&lt;U&gt; is much more straight forward.



http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=82adc87bce1ed4088802638154568eeec8ab8e88
More tests and test adjustments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434994</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-03 16:34:34 -0400</bug_when>
    <thetext>Re-opening because:

(In reply to Stephan Herrmann from comment #4)
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=1ab17a7eba14d35875267cc7b416da000a14dc1e
&gt; A facility to remove only null type annotations from a TypeBinding: I added
&gt; parameter &apos;boolean removeOnlyNullAnnotations&apos; to TypeBinding.unannotated().
&gt; This is relevant to let explicit null type annotations override some that
&gt; are passed down via substitution etc. without disturbing unrelated type
&gt; annotations for which we don&apos;t have specific substitution semantics. Also
&gt; used for cleanup after reporting a null-related error.

this patch can trigger NPE.

witness:

//---
import java.util.*;
import org.eclipse.jdt.annotation.*;

interface Lib1 {
    &lt;T extends Collection&lt;?&gt;&gt; T constrainedTypeParameter(@NonNull T in);
}

public class Test {
  @NonNull Collection&lt;?&gt; test4(Lib1 lib, @Nullable Collection&lt;String&gt; in) {
    return lib.constrainedTypeParameter(in);
  }
}
//---

Exception is:
java.lang.NullPointerException
        at org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.unannotated(ParameterizedTypeBinding.java:890)
        at org.eclipse.jdt.internal.compiler.lookup.BoundSet$ThreeSets.useNullHints(BoundSet.java:241)
        at org.eclipse.jdt.internal.compiler.lookup.BoundSet$ThreeSets.lowerBounds(BoundSet.java:85)
        at org.eclipse.jdt.internal.compiler.lookup.BoundSet.lowerBounds(BoundSet.java:864)
        at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.resolve(InferenceContext18.java:949)
        at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.solve(InferenceContext18.java:854)
        at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:118)
        at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:739)
        at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:695)
        at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1761)
        at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1662)
        at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2936)
        at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:867)
        at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:698)
        at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.resolve(ReturnStatement.java:331)
        at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
        at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:306)
        at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:530)
        at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
        at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
        at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
        at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:770)
        at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
        at java.lang.Thread.run(Thread.java:722)

enclosing type is null, which should be expected indeed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435002</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-03 18:23:01 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Re-opening because:
&gt; 
&gt; [...]
&gt;
&gt; this patch can trigger NPE.

Fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=96aefcf71308a63ca037558f00b8c7e24e992667

- handle enclosingType == null &amp; argumentTypes == null

While I was at it I found two related issues, also fixed in the given commit:
- use the generic type for creating a new PTB (saw type created with wrong id)
- add a similar method to RawTypeBinding, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436179</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-06 05:36:54 -0400</bug_when>
    <thetext>Verified for 4.5 M1 with build I20140804-2000.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>