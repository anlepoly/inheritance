<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>387956</bug_id>
          
          <creation_ts>2012-08-24 04:58:00 -0400</creation_ts>
          <short_desc>Cannot resolve import for generated class IF processing annotations with parameters referencing constants</short_desc>
          <delta_ts>2015-01-18 12:30:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Pierre-Yves Ricau">py.ricau</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>cody.lerum</cc>
    
    <cc>e.lucash</cc>
    
    <cc>eclipse</cc>
    
    <cc>emond.papegaaij</cc>
    
    <cc>jarthana</cc>
    
    <cc>jimisola</cc>
    
    <cc>lxbzmy</cc>
    
    <cc>manpalat</cc>
    
    <cc>mat.boniface</cc>
    
    <cc>matthias.keller</cc>
    
    <cc>matthias.otterbach</cc>
    
    <cc>nandor.fekete+eclipse</cc>
    
    <cc>robin</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>7</votes>

      

      

      <flag name="review"
          id="62221"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2151945</commentid>
    <comment_count>0</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-08-24 04:58:44 -0400</bug_when>
    <thetext>Simple steps to reproduce :

* Use any java 6 annotation processor that generates classes (e.g. &quot;generated.GeneratedEntity&quot;)

* In a class &quot;SomeClass&quot;, import the generated class:

import generated.GeneratedEntity;
public class SomeClass {
}

* In the same class, annotate an element. You can use any annotation that has parameters:
import generated.GeneratedEntity;
public class SomeClass {
	@SomeAnnotation(42)
	Object none;
}

* In the annotation parameters, reference a constant that lives outside the class. This is the KEY step. Resolving the constant at compile time causes the bug.

import generated.GeneratedEntity;
public class SomeClass {
	@SomeAnnotation(Integer.MAX_VALUE)
	Object none;
}

* &quot;Project &gt; Clean&quot; causes a compile error on the import: 

The import generated.GeneratedEntity cannot be resolved

* Modify the SomeClass class and save it (incremental compilation): the compile error disappears.

* If you replace the references constant with its value and then &quot;Project &gt; Clean&quot;, no error occurs :

import generated.GeneratedEntity;
public class SomeClass {
	@SomeAnnotation(2147483647)
	Object none;
}

I have created a sample project that contains a simple annotation processor that demonstrates the bug: https://github.com/pyricau/BugAptEclipse.

You just need to git clone https://github.com/pyricau/BugAptEclipse.git, open the project in Eclipse Juno, and do a &quot;Project &gt; Clean&quot;.

Here is the class that has the compile error : https://github.com/pyricau/BugAptEclipse/blob/master/src/com/bug/apt/SomeClass.java

This bug has been reproduced at 100% at least in 4.2 and 3.7. It had initially been reported by someone here : https://bugs.eclipse.org/bugs/show_bug.cgi?id=350378 . I am creating a new bug for clarity purposes, since it is now isolated with a very simple use case.

Here is how I understand it so far: when doing a &quot;Project &gt; Clean&quot;, the generated files are removed, which is why the import cannot be resolved. 
JDT can work around that, and everything usually compiles right. In this specific case, though, there is an annotation in the class so the annotation processing processes it (even when no annotation processor is interested in the annotation).
The annotation processing tries to resolve the annotation parameter. Since it&apos;s referencing a constant in another class, the annotation processing tries to resolve the imports. However, at that time, the import that references the generated file cannot be resolved. Which generates a compile error.

Please let me know if you need further details. I started debugging JDT / ADT on Eclipse 3.7 (as you can see in https://bugs.eclipse.org/bugs/show_bug.cgi?id=350378), and I will keep trying if no one knows what to do, but I&apos;d appreciate some help :) .</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2151946</commentid>
    <comment_count>1</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-08-24 05:08:05 -0400</bug_when>
    <thetext>Move on to a new bug, Juno related, since this one cannot be updated : https://bugs.eclipse.org/bugs/show_bug.cgi?id=387956</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2151949</commentid>
    <comment_count>2</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-08-24 05:09:18 -0400</bug_when>
    <thetext>Woops, please ignore last comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155079</commentid>
    <comment_count>3</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2012-08-31 20:52:23 -0400</bug_when>
    <thetext>Facing exactly the same bug with my annotation processor. Java files, that have annotations with imported constants, have trouble to resolve imports to generated classes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155162</commentid>
    <comment_count>4</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-01 15:13:57 -0400</bug_when>
    <thetext>Generating files that you refer to from the same file has been a problem all along with the APT structure (both in javac and in Eclipse, but more so in Eclipse because of the challenges of incremental compilation).

That is: if A generates G, and A also imports G, you basically have an unstable situation.  It&apos;s not possible to fully compile A without knowing the shape of G, but it&apos;s not possible to generate G until you have at least the shape of A.  In some cases the compiler succeeds... sounds like you found a tipping point.

I don&apos;t know if it is possible to resolve this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155164</commentid>
    <comment_count>5</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-01 15:15:57 -0400</bug_when>
    <thetext>That said, I would have thought this case (where the import is unused) would be possible.  But I assume that in your actual application the import is used.  So while you&apos;ve created a very elegant repro case, for which I thank you, I suspect that even if we got this repro case working it might not solve your actual problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155182</commentid>
    <comment_count>6</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-01 16:45:31 -0400</bug_when>
    <thetext>Thank you for looking at this :) .

&quot;if A generates G, and A also imports G&quot;

I agree with you that this would be a tricky case to solve, but it&apos;s not what we are trying to do :) .

Here, we have :

A generates G. B imports G. B cannot compile, and there is no relation between A and B.

The problem only happens on doing a &quot;Project &gt; Clean&quot;, which means it&apos;s a full build, not an incremental build. This bug doesn&apos;t happen with javac, so this means it could be solved even with Eclipse compiler.

Eugene Lucash summarized it very well :

Java files that have annotations with imported constants cannot resolve imports to generated classes.

This is the what the provided use case demonstrate.

&quot;I suspect that even if we got this repro case working it might not solve your actual problem.&quot;

I am sorry but I think otherwise. I took a real project with a real annotation processor which reproduced the bug. I progressively slimmed down the whole project, trying to keep the error alive while removing stuff. I was then able to replace the annotation processor with a really simple one. The same error stills shows up. I ended up keeping only the unused import because I realized I didn&apos;t even need to use it to have the error.

&quot;I would have thought this case (where the import is unused) would be possible.  But I assume that in your actual application the import is used.&quot;
You are right with both statements :) . This case is possible and works, regardless of whether the import is used or not, as long as you don&apos;t have any unrelated annotation with imported constants in the class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155183</commentid>
    <comment_count>7</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-01 16:51:12 -0400</bug_when>
    <thetext>I did some Eclipse compiler debugging with some older eclipse version (see https://bugs.eclipse.org/bugs/show_bug.cgi?id=350378). Although the sources probably have changed, I think the core cause of this bug remains.

Considering that A generates G and B imports G.

When doing a clean build, G is removed but the compiler still manages to compile A, generate G, and then compile B (I&apos;m not sure about the order and the exact process, you&apos;re the expert :) ).

BUT if there is an annotation in B, then annotation processing is started on B before G is known to the system. This wouldn&apos;t be a problem in general, except that here the processed annotation has an imported constant. So, when processing annotations, the compiler tries to resolve imports. And encounters G, which it doesn&apos;t know yet. =&gt; compile error on the import.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155184</commentid>
    <comment_count>8</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-01 17:00:29 -0400</bug_when>
    <thetext>One more thing : I know that this looks like a complex bug that is very unlikely to happen. And I also know you don&apos;t have unlimited time, and everybody wants their own bug fixed.

In fact, this bug may impact all Eclipse + annotation processors users. The only reason why it&apos;s quite rare is that not that much people use annotations with values that are imported constants.

This happens more then usual on AndroidAnnotations because we have things such as &quot;@ViewById(R.id.someId)&quot; to inject views with specific ids in a field.

This is quite an important bug for us because people get this error, can&apos;t find any way to solve it, and conclude that this is way too unstable and they shouldn&apos;t use it.

I have already spent a lot of hours on this, and I will continue trying, even if that means getting dirty with the Eclipse compiler :) .</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155188</commentid>
    <comment_count>9</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-01 17:38:53 -0400</bug_when>
    <thetext>An even simpler way to reproduce this : take any project of yours that uses a java6 annotation processor that generates classes. Open a class that uses a generated class (and imports it), and add &quot;@SuppressWarning(&quot;&quot; + Integer.MAX_VALUE)&quot; anywhere. &quot;Project &gt; Clean&quot; =&gt; Import cannot be resolved

For anyone having this bug, here are some workarounds :

* Don&apos;t use annotations referencing constants in classes that are importing generated classes (quite obvious)
* Import all classes in the package of the generated classes (provided that such package exists and isn&apos;t generated) : &quot;import com.company.*;&quot;
* Use qualified names for the generated classes : &quot;new com.company.MyBean_()&quot;
* Put the generated class in the same package as the class using it.

Sorry for the spam, I should have written this whole in one comment but I keep having new thoughts each time I hit &quot;send&quot; ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155196</commentid>
    <comment_count>10</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-01 19:54:01 -0400</bug_when>
    <thetext>My apologies, I didn&apos;t understand your case well enough and thought that @SomeAnnotation was what was causing GeneratedEntity to be generated.  

I think what you&apos;re saying is that it doesn&apos;t matter what annotation (if any) is causing GeneratedEntity to be generated, the problem just happens whenever you have both a generated class imported and another annotation with a value defined outside the class.

I agree, this is a much more mainstream case and it should be able to work.

There is nobody at present dedicated to working on APT; it&apos;s not so much an issue of &quot;everybody wants their bug fixed&quot; as it is &quot;there is almost no one to fix bugs.&quot;  It sounds like you&apos;re comfortable getting your hands a bit dirty in the compiler - if you&apos;re able to propose a patch, that would be great.  If not, I&apos;m hoping to be able to put in a few days on APT during a vacation later this fall, and this would certainly be a good bug to fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155223</commentid>
    <comment_count>11</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-02 01:14:38 -0400</bug_when>
    <thetext>Ok :) . I&apos;m having a 7day code retreat in two weeks, which may be a good opportunity to convince some other guys to look at the compiler with me and try to solve this as a challenge... We&apos;ll see.

I&apos;ll keep you posted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155226</commentid>
    <comment_count>12</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-02 02:37:59 -0400</bug_when>
    <thetext>If you get it solved in the first two days, there are some more bugs on the APT bug list...  :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155253</commentid>
    <comment_count>13</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2012-09-02 12:51:21 -0400</bug_when>
    <thetext>Hi. Thanks to previous investigation by Pierre-Yves and others, we found a cause of the bug.

So, basically, Eclipse JDT apt works correctly with rounds, file generation, recompiling after files are generated, but...
There&apos;s early phase where annotations are being discovered (see constructor of org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl).
At this early stage files are not generated yet. But when annotations contains imported types (as constant references), import resolution finalized early. The problem is that once imports resolved for CompilationUnitScope, results are cached and further resolution attempts short circuited if cache already built; See org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInImports(). So newly generated types never gets the chance to be resolved as all import resolution was finalized at annotation discovery for particular compilation unit.

I&apos;ve made hack-fix for my jdt fork to solve the bug:
https://github.com/elucash/macparadise/commit/ae35aca7fcbb2c5daa1375db1657047e2c1311c8

It would be great if people, who have imagination now to properly abstract import resolution on different stages of annotation processing, join to resolve this issue!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155259</commentid>
    <comment_count>14</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-02 13:27:23 -0400</bug_when>
    <thetext>Moving this bug over to JDT/Core so that folks there can give this some thought.  (Please move back to APT when appropriate - this is just easier than adding individual recipients.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155265</commentid>
    <comment_count>15</comment_count>
    <who name="Pierre-Yves Ricau">py.ricau</who>
    <bug_when>2012-09-02 14:18:33 -0400</bug_when>
    <thetext>Congratulations Eugene, that&apos;s impressive! You really nailed it :) .

Do you have any pointer on how to build a custom jdt core plugin and replace the one in eclipse ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155278</commentid>
    <comment_count>16</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2012-09-02 16:11:25 -0400</bug_when>
    <thetext>Hi Pierre-Yves,
Basically all instructions boils down to PDE usage, what I really can advise for a quick turnaround:
1. Using your version of Eclipse SDK import following projects to workspace org.eclipse.jdt.compiler.apt
org.eclipse.jdt.core

&quot;Import -&gt; Plugin and fragments - &gt; (*) Projects with source folders...&quot;

2. Change the source code
3. Adjust(Increment micro version for example) plugin versions in MANIFEST.MF
4. Then you need to build and install them into eclipse. Simplest way is to use: &quot;Export -&gt; Deployable plugin and fragments -&gt; (*) Install into host. Repository&quot;
to install directly into your SDK.

Idea is that you install forked plugin with the version that is greater to existing one.

See https://github.com/elucash/lambda4jdt for an example how one could use update site with forked plugins.

Well, I wish that there will be no need to use this technique often )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169337</commentid>
    <comment_count>17</comment_count>
    <who name="Missing name">matthias.keller</who>
    <bug_when>2012-10-09 06:23:07 -0400</bug_when>
    <thetext>Is there any news about this issue? We just ran into it as well and it&apos;s very inconvenient if eclipse keeps marking errors in those classes for every developer!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169378</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-09 07:35:53 -0400</bug_when>
    <thetext>Jay, can you take a look at this please ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210214</commentid>
    <comment_count>19</comment_count>
    <who name="Missing name">mat.boniface</who>
    <bug_when>2013-01-30 18:34:26 -0500</bug_when>
    <thetext>We are always facing that issue.

Do you have some news related to that issue ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210226</commentid>
    <comment_count>20</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2013-01-30 19:35:28 -0500</bug_when>
    <thetext>I was revising my thoughts on this. So given that we have solid apt implementation; no one of original developers working on it; relative complexity of implementation and so on.. I no longer believe that where some &quot;proper&quot; way to implement this, because &quot;proper&quot; way will require a lot efforts that is bigger than expected outcome. But it&apos;s a bug, and it easy to reproduce and javac able to compile all correctly. So the best way is just re-resolve failed imports in a way that was demonstrated in fix (https://github.com/elucash/macparadise/commit/ae35aca7fcbb2c5daa1375db1657047e2c1311c8)

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211571</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-02-04 05:07:28 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; I was revising my thoughts on this. So given that we have solid apt
&gt; implementation; no one of original developers working on it; relative
&gt; complexity of implementation and so on.. I no longer believe that where some
&gt; &quot;proper&quot; way to implement this, because &quot;proper&quot; way will require a lot
&gt; efforts that is bigger than expected outcome. But it&apos;s a bug, and it easy to
&gt; reproduce and javac able to compile all correctly. So the best way is just
&gt; re-resolve failed imports in a way that was demonstrated in fix
&gt; (https://github.com/elucash/macparadise/commit/
&gt; ae35aca7fcbb2c5daa1375db1657047e2c1311c8)
&gt; 
&gt; Thanks

I totally agree with you and sorry to say that we have not been able to look at this yet.

Walter, I am no expert in this area and I will leave it to you to take a call on the solution shared with us via git hub.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2277390</commentid>
    <comment_count>22</comment_count>
    <who name="Cody Lerum">cody.lerum</who>
    <bug_when>2013-06-26 10:31:43 -0400</bug_when>
    <thetext>Sorry to +1 this, but I&apos;m looking for an update as this is still an issue in Kepler. In my case every time a I do a full build I have to go into 3 separate classes and:

1. Add a meaningless edit.
2. Save. Triggers incremental build to clear errors this class.
3. Erase meaningless edit.
4. Save again.
5 Repeat two more times.

While a workaround it does make one grow to dislike the software they are using and look for alternatives.

This case is caused by the JPA2 metamodel generation from hibernate and the increasing adoption of JPA2 criteria queries is only going cause more and more users to hit this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305791</commentid>
    <comment_count>23</comment_count>
    <who name="Emond Papegaaij">emond.papegaaij</who>
    <bug_when>2013-09-12 07:50:58 -0400</bug_when>
    <thetext>We are hitting this problem as well, also with JPA2 metamodel classes. We can confirm that the import on a FQN is the problem. For now, we work around this by either changing the import to .* or not importing at all (using the FQN in the code).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307604</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-17 01:39:20 -0400</bug_when>
    <thetext>I will look at this sometime during Luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342216</commentid>
    <comment_count>25</comment_count>
      <attachid>238366</attachid>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2013-12-16 06:07:41 -0500</bug_when>
    <thetext>Created attachment 238366
jdt part patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342217</commentid>
    <comment_count>26</comment_count>
      <attachid>238367</attachid>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2013-12-16 06:08:14 -0500</bug_when>
    <thetext>Created attachment 238367
apt part patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342218</commentid>
    <comment_count>27</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2013-12-16 06:12:53 -0500</bug_when>
    <thetext>Hi
I&apos;ve recently remerged my old fix for this issue on top of 4.3 SR1.
Attaching apt and jdt patches in case it may be useful to create &quot;real&quot; fix.
Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398250</commentid>
    <comment_count>28</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-07 10:15:29 -0400</bug_when>
    <thetext>Patch looks good. I will see if a test can be added to the fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398620</commentid>
    <comment_count>29</comment_count>
      <attachid>242818</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 02:07:39 -0400</bug_when>
    <thetext>Created attachment 242818
Test patch

Patch contains new apt.pluggable tests. All current tests pass with the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398622</commentid>
    <comment_count>30</comment_count>
      <attachid>242819</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 02:12:29 -0400</bug_when>
    <thetext>Created attachment 242819
JDT and APT parts combined

Ievgen, thanks for the patches. I have moved both your patches into a single one as APT projects also now reside in the same git repository. I made one minor change to the patch - shortened the new variable names. Please let me know if this looks alright to you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398623</commentid>
    <comment_count>31</comment_count>
    <who name="Alex Lei">lxbzmy</who>
    <bug_when>2014-05-08 02:14:27 -0400</bug_when>
    <thetext>Good news to hear it fixed in luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398709</commentid>
    <comment_count>32</comment_count>
    <who name="Ievgen Lukash">e.lucash</who>
    <bug_when>2014-05-08 05:38:01 -0400</bug_when>
    <thetext>100% ok, hope this will see the light soon :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398730</commentid>
    <comment_count>33</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 05:52:02 -0400</bug_when>
    <thetext>Manoj, please review the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399379</commentid>
    <comment_count>34</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-09 09:37:30 -0400</bug_when>
    <thetext>Thanks for the help everyone, the fix has been released in master:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=202289a0f3ae102df5a7d1850f83bca79293b678

And the test added via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=27c1920f64a582c8b3fb2e33913ab524b814896a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403415</commentid>
    <comment_count>35</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-05-19 02:50:42 -0400</bug_when>
    <thetext>Verified for Luna 4.4 RC1 Build id: I20140518-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238366</attachid>
            <date>2013-12-16 06:07:00 -0500</date>
            <delta_ts>2014-05-08 02:12:29 -0400</delta_ts>
            <desc>jdt part patch</desc>
            <filename>CompilationUnitScope.java.patch</filename>
            <type>text/plain</type>
            <size>2510</size>
            <attacher name="Ievgen Lukash">e.lucash</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NyYy9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9zcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db21waWxhdGlvblVuaXRTY29wZS5qYXZhCmluZGV4IGQ2ZmNjYzIuLmY2MWI0N2QgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29tcGlsYXRpb25Vbml0U2NvcGUuamF2YQpAQCAtNDEsNiArNDEsMTggQEAKIAkKIAlwcml2YXRl
IEltcG9ydEJpbmRpbmdbXSB0ZW1wSW1wb3J0czsJLy8gdG8ga2VlcCBhIHJlY29yZCBvZiByZXNv
bHZlZCBpbXBvcnRzIHdoaWxlIHRyYXZlcnNpbmcgYWxsIGluIGZhdWx0SW5JbXBvcnRzKCkKIAkK
KwkvKioKKwkgKiBGbGFnIHRoYXQgc2hvdWxkIGJlIHNldCBkdXJpbmcgYW5ub3RhdGlvbiB0cmF2
ZXJzYWwgb3Igc2ltaWxhciBydW5zCisJICogdG8gcHJldmVudCBjYWNoaW5nIG9mIGZhaWx1cmVz
IHJlZ2FyZGluZyBpbXBvcnRzIG9mIHlldCB0byBiZSBnZW5lcmF0ZWQgY2xhc3NlcyAKKwkgKi8K
KwlwdWJsaWMgYm9vbGVhbiBzdXBwcmVzc1VucmVzb2x2ZWRJbXBvcnRGYWlsdXJlczsKKwkKKwkv
KioKKwkgKiBTa2lwcyBpbXBvcnQgcmVzb2x1dGlvbiBjYWNoZSBpZiB1bnJlc29sdmVkIGltcG9y
dHMgd2FzCisJICogZm91bmQgbGFzdCB0aW1lCisJICovCisJcHJpdmF0ZSBib29sZWFuIHNraXBJ
bXBvcnRSZXNvbHV0aW9uQ2FjaGU7CisJCiBwdWJsaWMgQ29tcGlsYXRpb25Vbml0U2NvcGUoQ29t
cGlsYXRpb25Vbml0RGVjbGFyYXRpb24gdW5pdCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1l
bnQpIHsKIAlzdXBlcihDT01QSUxBVElPTl9VTklUX1NDT1BFLCBudWxsKTsKIAl0aGlzLmVudmly
b25tZW50ID0gZW52aXJvbm1lbnQ7CkBAIC0zMDQsNyArMzE2LDExIEBACiAJCXRoaXMudG9wTGV2
ZWxUeXBlc1tpXS5zY29wZS5jb25uZWN0VHlwZUhpZXJhcmNoeSgpOwogfQogdm9pZCBmYXVsdElu
SW1wb3J0cygpIHsKLQlpZiAodGhpcy50eXBlT3JQYWNrYWdlQ2FjaGUgIT0gbnVsbCkKKwlib29s
ZWFuIHVucmVzb2x2ZWRGb3VuZCA9IGZhbHNlOworCS8vIHNob3VsZCByZXBvcnQgdW5yZXNvbHZl
ZCBvbmx5IGlmIHdlIGFyZSBub3Qgc3VwcHJlc3NpbmcgY2FjaGluZyBvZiBmYWlsZWQgcmVzb2x1
dGlvbnMKKyAgICBib29sZWFuIHJlcG9ydFVucmVzb2x2ZWQgPSAhdGhpcy5zdXBwcmVzc1VucmVz
b2x2ZWRJbXBvcnRGYWlsdXJlczsKKwkKKwlpZiAodGhpcy50eXBlT3JQYWNrYWdlQ2FjaGUgIT0g
bnVsbCAmJiAhdGhpcy5za2lwSW1wb3J0UmVzb2x1dGlvbkNhY2hlKQogCQlyZXR1cm47IC8vIGNh
biBiZSBjYWxsZWQgd2hlbiBhIGZpZWxkIGNvbnN0YW50IGlzIHJlc29sdmVkIGJlZm9yZSBzdGF0
aWMgaW1wb3J0cwogCWlmICh0aGlzLnJlZmVyZW5jZUNvbnRleHQuaW1wb3J0cyA9PSBudWxsKSB7
CiAJCXRoaXMudHlwZU9yUGFja2FnZUNhY2hlID0gbmV3IEhhc2h0YWJsZU9mT2JqZWN0KDEpOwpA
QCAtMzc1LDcgKzM5MSwxMCBAQAogCQkJCWlmIChpbXBvcnRCaW5kaW5nLnByb2JsZW1JZCgpID09
IFByb2JsZW1SZWFzb25zLkFtYmlndW91cykgewogCQkJCQkvLyBrZWVwIGl0IHVubGVzcyBhIGR1
cGxpY2F0ZSBjYW4gYmUgZm91bmQgYmVsb3cKIAkJCQl9IGVsc2UgewotCQkJCQlwcm9ibGVtUmVw
b3J0ZXIoKS5pbXBvcnRQcm9ibGVtKGltcG9ydFJlZmVyZW5jZSwgaW1wb3J0QmluZGluZyk7CisJ
CQkJCXVucmVzb2x2ZWRGb3VuZCA9IHRydWU7CisJCQkJCWlmIChyZXBvcnRVbnJlc29sdmVkKSB7
CisJCQkJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbXBvcnRQcm9ibGVtKGltcG9ydFJlZmVyZW5jZSwg
aW1wb3J0QmluZGluZyk7CisJCQkJCX0KIAkJCQkJY29udGludWUgbmV4dEltcG9ydDsKIAkJCQl9
CiAJCQl9CkBAIC00MTIsNiArNDMxLDggQEAKIAkJaWYgKCFiaW5kaW5nLm9uRGVtYW5kICYmIGJp
bmRpbmcucmVzb2x2ZWRJbXBvcnQgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nIHx8IGJpbmRp
bmcgaW5zdGFuY2VvZiBJbXBvcnRDb25mbGljdEJpbmRpbmcpCiAJCQl0aGlzLnR5cGVPclBhY2th
Z2VDYWNoZS5wdXQoYmluZGluZy5jb21wb3VuZE5hbWVbYmluZGluZy5jb21wb3VuZE5hbWUubGVu
Z3RoIC0gMV0sIGJpbmRpbmcpOwogCX0KKwkKKwl0aGlzLnNraXBJbXBvcnRSZXNvbHV0aW9uQ2Fj
aGUgPSB0aGlzLnN1cHByZXNzVW5yZXNvbHZlZEltcG9ydEZhaWx1cmVzICYmIHVucmVzb2x2ZWRG
b3VuZDsKIH0KIHB1YmxpYyB2b2lkIGZhdWx0SW5UeXBlcygpIHsKIAlmYXVsdEluSW1wb3J0cygp
Owo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238367</attachid>
            <date>2013-12-16 06:08:00 -0500</date>
            <delta_ts>2014-05-08 02:12:29 -0400</delta_ts>
            <desc>apt part patch</desc>
            <filename>RoundEnvImpl.java.patch</filename>
            <type>text/plain</type>
            <size>840</size>
            <attacher name="Ievgen Lukash">e.lucash</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQvc3JjL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvUm91bmRFbnZJbXBsLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0L3NyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXB0L2Rpc3BhdGNoL1JvdW5kRW52SW1wbC5qYXZhCmluZGV4IDhmNDRlNGEuLjZm
NTEyMTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQvc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvUm91bmRFbnZJbXBsLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC9zcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Sb3VuZEVudkltcGwuamF2YQpAQCAtNTUs
NyArNTUsOSBAQAogCQlBbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvciB2aXNpdG9yID0gbmV3IEFu
bm90YXRpb25EaXNjb3ZlcnlWaXNpdG9yKF9wcm9jZXNzaW5nRW52KTsKIAkJaWYgKF91bml0cyAh
PSBudWxsKSB7CiAJCQlmb3IgKENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uIHVuaXQgOiBfdW5p
dHMpIHsKKwkJCQl1bml0LnNjb3BlLnN1cHByZXNzVW5yZXNvbHZlZEltcG9ydEZhaWx1cmVzID0g
dHJ1ZTsKIAkJCQl1bml0LnRyYXZlcnNlKHZpc2l0b3IsIHVuaXQuc2NvcGUpOworCQkJCXVuaXQu
c2NvcGUuc3VwcHJlc3NVbnJlc29sdmVkSW1wb3J0RmFpbHVyZXMgPSBmYWxzZTsKIAkJCX0KIAkJ
fQogCQlfYW5ub1RvVW5pdCA9IHZpc2l0b3IuX2Fubm9Ub0VsZW1lbnQ7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242818</attachid>
            <date>2014-05-08 02:07:00 -0400</date>
            <delta_ts>2014-05-08 02:07:39 -0400</delta_ts>
            <desc>Test patch</desc>
            <filename>Fix-for-bug-Bug-387956--Adding-tests.patch</filename>
            <type>text/plain</type>
            <size>8236</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuYXB0LnBs
dWdnYWJsZS50ZXN0cwpkaWZmIC0tZ2l0IE1FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRp
b24ucHJvY2Vzc2luZy5Qcm9jZXNzb3IgTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5ub3RhdGlv
bi5wcm9jZXNzaW5nLlByb2Nlc3NvcgppbmRleCAyOGEyM2NmLi5mZWVlYjhjIDEwMDY0NAotLS0g
TUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3Nvcgor
KysgTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3Nv
cgpAQCAtNiwyICs2LDMgQEAKIG9yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnBy
b2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5CdWdzUHJvYwogb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVn
Z2FibGUudGVzdHMucHJvY2Vzc29ycy5tb2RlbHRlc3Rlci5Nb2RlbFRlc3RlclByb2MKK29yZy5l
Y2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5C
dWczODc5NTZQcm9jZXNzb3IKZGlmZiAtLWdpdCBsaWIvYW5ub3RhdGlvbnMuamFyIGxpYi9hbm5v
dGF0aW9ucy5qYXIKaW5kZXggZDUzZGNiNy4uNjI0ZmJjNCAxMDA2NDQKLS0tIGxpYi9hbm5vdGF0
aW9ucy5qYXIKKysrIGxpYi9hbm5vdGF0aW9ucy5qYXIKQmluYXJ5IGZpbGVzIGRpZmZlcgpkaWZm
IC0tZ2l0IHBsdWdpbi54bWwgcGx1Z2luLnhtbAppbmRleCBjYzk4OGJkLi41MzkzY2FlIDEwMDY0
NAotLS0gcGx1Z2luLnhtbAorKysgcGx1Z2luLnhtbApAQCAtNDEsNCArNDEsNyBAQAogICAgICAg
ICAgICAgICAgY2xhc3M9Im9yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nl
c3NvcnMubW9kZWx0ZXN0ZXIuTW9kZWxUZXN0ZXI4UHJvYyI+CiAgICAgICAgICA8L2phdmE2cHJv
Y2Vzc29yPgorICAgICAgICAgPGphdmE2cHJvY2Vzc29yCisgICAgICAgICAgICAgICBjbGFzcz0i
b3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJvY2Vzc29ycy5idWlsZGVydGVz
dGVyLkJ1ZzM4Nzk1NlByb2Nlc3NvciI+CisgICAgICAgICA8L2phdmE2cHJvY2Vzc29yPgogICAg
ICAgPC9qYXZhNnByb2Nlc3NvcnM+CiAgICA8L2V4dGVuc2lvbj4KZGlmZiAtLWdpdCByZXNvdXJj
ZXMvdGFyZ2V0cy9idWczODc5NTYvRW50aXR5LmphdmEgcmVzb3VyY2VzL3RhcmdldHMvYnVnMzg3
OTU2L0VudGl0eS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmI5ZWUy
YTcKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMvYnVnMzg3OTU2L0VudGl0eS5q
YXZhCkBAIC0wLDAgKzEsMTIgQEAKK3BhY2thZ2UgdGFyZ2V0cy5idWczODc5NTY7CisKK2ltcG9y
dCB0YXJnZXRzLmJ1ZzM4Nzk1Ni5HZW5lcmF0ZTsKKworLyoqCisgKiBVc2luZyB7QGxpbmsgR2Vu
ZXJhdGV9IG9uIHtAbGluayBFbnRpdHl9IHdpbGwgZ2VuZXJhdGUgdGhlIGVtcHR5CisgKiB7QGxp
bmsgZ2VuZXJhdGVkLkdlbmVyYXRlZEVudGl0eX0gY2xhc3MuCisgKi8KK0BHZW5lcmF0ZQorcHVi
bGljIGNsYXNzIEVudGl0eSB7CisKK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYg
LS1naXQgcmVzb3VyY2VzL3RhcmdldHMvYnVnMzg3OTU2L0dlbmVyYXRlLmphdmEgcmVzb3VyY2Vz
L3RhcmdldHMvYnVnMzg3OTU2L0dlbmVyYXRlLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5k
ZXggMDAwMDAwMC4uMWZhZTkyMwotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9i
dWczODc5NTYvR2VuZXJhdGUuamF2YQpAQCAtMCwwICsxLDE1IEBACitwYWNrYWdlIHRhcmdldHMu
YnVnMzg3OTU2OworCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGU7Citp
bXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uUmV0ZW50aW9uOworaW1wb3J0IGphdmEubGFuZy5h
bm5vdGF0aW9uLlJldGVudGlvblBvbGljeTsKK2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5U
YXJnZXQ7CisKKy8qKgorICogVXNlZCBvbiBhIHR5cGUgIlNvbWVUeXBlIiwgZ2VuZXJhdGVzIGEg
bmV3IGVtcHR5IGNsYXNzIG5hbWVkCisgKiAiZ2VuZXJhdGVkLkdlbmVyYXRlZFNvbWVUeXBlIgor
ICovCitAUmV0ZW50aW9uKFJldGVudGlvblBvbGljeS5TT1VSQ0UpCitAVGFyZ2V0KEVsZW1lbnRU
eXBlLlRZUEUpCitwdWJsaWMgQGludGVyZmFjZSBHZW5lcmF0ZSB7Cit9CmRpZmYgLS1naXQgcmVz
b3VyY2VzL3RhcmdldHMvYnVnMzg3OTU2L1NvbWVBbm5vdGF0aW9uLmphdmEgcmVzb3VyY2VzL3Rh
cmdldHMvYnVnMzg3OTU2L1NvbWVBbm5vdGF0aW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMC4uOTUzODk2MAotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0
cy9idWczODc5NTYvU29tZUFubm90YXRpb24uamF2YQpAQCAtMCwwICsxLDE4IEBACitwYWNrYWdl
IHRhcmdldHMuYnVnMzg3OTU2OworCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVu
dFR5cGU7CitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uUmV0ZW50aW9uOworaW1wb3J0IGph
dmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlvblBvbGljeTsKK2ltcG9ydCBqYXZhLmxhbmcuYW5u
b3RhdGlvbi5UYXJnZXQ7CisKKy8qKgorICogQSB1c2VsZXNzIGFubm90YXRpb24gdGhhdCBpcyBu
b3QgcHJvY2Vzc2VkIGJ5IHRoZSBhbm5vdGF0aW9uIHByb2Nlc3Nvci4gQW55CisgKiBhbm5vdGF0
aW9uIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgdGhpcyBvbmUgdG8gcmVwcm9kdWNlIHRoZSBidWcu
CisgKi8KK0BSZXRlbnRpb24oUmV0ZW50aW9uUG9saWN5LkNMQVNTKQorQFRhcmdldChFbGVtZW50
VHlwZS5GSUVMRCkKK3B1YmxpYyBAaW50ZXJmYWNlIFNvbWVBbm5vdGF0aW9uIHsKKworCWludCB2
YWx1ZSgpOworCit9CmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvYnVnMzg3OTU2L1NvbWVD
bGFzcy5qYXZhIHJlc291cmNlcy90YXJnZXRzL2J1ZzM4Nzk1Ni9Tb21lQ2xhc3MuamF2YQpuZXcg
ZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5hZDRmNzg5Ci0tLSAvZGV2L251bGwKKysr
IHJlc291cmNlcy90YXJnZXRzL2J1ZzM4Nzk1Ni9Tb21lQ2xhc3MuamF2YQpAQCAtMCwwICsxLDM1
IEBACitwYWNrYWdlIHRhcmdldHMuYnVnMzg3OTU2OworCisvKgorICogVGhlIGltcG9ydCB0cmln
Z2VycyBhIGNvbXBpbGF0aW9uIGVycm9yLCBpZiBTb21lQW5ub3RhdGlvbiBoYXMgYSByZWZlcmVu
Y2UgdG8KKyAqIEludGVnZXIuTUFYX1ZBTFVFOiAiVGhlIGltcG9ydCBnZW5lcmF0ZWQuR2VuZXJh
dGVkRW50aXR5IGNhbm5vdCBiZSByZXNvbHZlZCIKKyAqLworaW1wb3J0IGdlbmVyYXRlZC5HZW5l
cmF0ZWRFbnRpdHk7CisgCisKK0BTdXBwcmVzc1dhcm5pbmdzKCJ1bnVzZWQiKQorcHVibGljIGNs
YXNzIFNvbWVDbGFzcyB7CisKKwkvKioKKwkgKiBUaGUgcHJvYmxlbSBvbmx5IG9jY3VycyB3aGVu
IHlvdSBkbyBhIFByb2plY3QgPiBDbGVhbi4gSXQgZG9lc24ndCBvY2N1cgorCSAqIHdoZW4gc2F2
aW5nIHRoZSBmaWxlIHdpdGhvdXQgY2xlYW5pbmcgKGluY3JlbWVudGFsIGNvbXBpbGF0aW9uKSwg
YmVjYXVzZQorCSAqIGNsZWFuaW5nIHJlbW92ZXMgZ2VuZXJhdGVkLkdlbmVyYXRlZEVudGl0eSwg
d2hpY2ggaXMgdGhlbiBnZW5lcmF0ZWQKKwkgKiBhZ2Fpbi4KKwkgKiAKKwkgKiBJZiB5b3UgY29t
bWVudCAiQFNvbWVBbm5vdGF0aW9uKEludGVnZXIuTUFYX1ZBTFVFKSIsIHRoZSBlcnJvcgorCSAq
IGRpc2FwcGVhcnMuCisJICogCisJICogSWYgeW91IHJlcGxhY2UgSW50ZWdlci5NQVhfVkFMVUUg
d2l0aCBpdHMgdmFsdWUsIHRoZSBlcnJvciBkaXNhcHBlYXJzLgorCSAqIAorCSAqIFRoaXMgc2Vl
bXMgdG8gYmUgYmVjYXVzZSB7QGxpbmsgU29tZUFubm90YXRpb259IGZpcmVzIHRoZSBFY2xpcHNl
CisJICogYW5ub3RhdGlvbiBwcm9jZXNzaW5nLCB3aGljaCBzZWVzIGEgcmVmZXJlbmNlIHRoYXQg
bmVlZHMgdG8gYmUgcmVzb2x2ZWQKKwkgKiAoSW50ZWdlci5NQVhfVkFMVUUpLCBhbmQgdGhlcmVm
b3JlIHRyaWVzIHRvIHJlc29sdmUgaW1wb3J0cywgd2hlcmUgaXQKKwkgKiBmaW5kcyBpbXBvcnQg
e0BsaW5rIGdlbmVyYXRlZC5HZW5lcmF0ZWRFbnRpdHl9IGFuZCBjYW5ub3QgcmVzb2x2ZSBpdC4K
KwkgKiAKKwkgKiBUaGlzIGNhbiBoYXBwZW4gd2l0aCBhbnkgYW5ub3RhdGlvbiBqYXZhIDYgcHJv
Y2Vzc29yIHRoYXQgZ2VuZXJhdGVzIGNvZGUuCisJICogQWxzbyBub3RlIHRoYXQgSSBjb3VsZG4n
dCByZXByb2R1Y2UgdGhpcyBvbiB0aGUgc2ltcGxlIGphdmEgNSBwcm9jZXNzb3IKKwkgKiBnaXZl
biBoZXJlOiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2pkdC9hcHQvaW50cm9Ub0FQVC5odG1sCisJ
ICovCisJQFNvbWVBbm5vdGF0aW9uKEludGVnZXIuTUFYX1ZBTFVFKQorCU9iamVjdCBub25lOwor
fQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2Uv
amR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvQnVpbGRlclRlc3RzLmphdmEgc3JjL29yZy9lY2xpcHNl
L2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL0J1aWxkZXJUZXN0cy5qYXZhCmluZGV4IGY0ZDMwOGQu
Ljk2YmMxYmUgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVz
dHMvQnVpbGRlclRlc3RzLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJs
ZS90ZXN0cy9CdWlsZGVyVGVzdHMuamF2YQpAQCAtMTkyLDUgKzE5Miw1IEBACiAJfQkKIAkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA3ODQxCi0JcHVi
bGljIHZvaWQgdGVzdEJidWc0MDc4NDEoKSB0aHJvd3MgVGhyb3dhYmxlIHsKKwlwdWJsaWMgdm9p
ZCB0ZXN0QnVnNDA3ODQxKCkgdGhyb3dzIFRocm93YWJsZSB7CiAJCWludCBvbGQgPSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS5idWlsZGVyLkFic3RyYWN0SW1hZ2VCdWlsZGVyLk1BWF9B
VF9PTkNFOwogCQl0cnkgewpAQCAtMjEyLDMgKzIxMiwxNSBAQAogCX0KIAkKKwlwdWJsaWMgdm9p
ZCB0ZXN0QnVnMzg3OTU2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVByb2Nlc3NvclRlc3RTdGF0
dXMucmVzZXQoKTsKKwkJSUphdmFQcm9qZWN0IGpwcm9qID0gY3JlYXRlSmF2YVByb2plY3QoX3By
b2plY3ROYW1lKTsKKwkJZGlzYWJsZUphdmE1RmFjdG9yaWVzKGpwcm9qKTsKKwkJSVByb2plY3Qg
cHJvaiA9IGpwcm9qLmdldFByb2plY3QoKTsKKwkJSWRlVGVzdFV0aWxzLmNvcHlSZXNvdXJjZXMo
cHJvaiwgInRhcmdldHMvYnVnMzg3OTU2IiwgInNyYy90YXJnZXRzL2J1ZzM4Nzk1NiIpOworCisJ
CUFwdENvbmZpZy5zZXRFbmFibGVkKGpwcm9qLCB0cnVlKTsKKwkJZnVsbEJ1aWxkKCk7CisJCWV4
cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisJCiB9CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNl
L2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL3Byb2Nlc3NvcnMvYnVpbGRlcnRlc3Rlci9CdWczODc5
NTZQcm9jZXNzb3IuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMv
cHJvY2Vzc29ycy9idWlsZGVydGVzdGVyL0J1ZzM4Nzk1NlByb2Nlc3Nvci5qYXZhCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjYyZDc5ZmEKLS0tIC9kZXYvbnVsbAorKysgc3Jj
L29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL3Byb2Nlc3NvcnMvYnVpbGRlcnRl
c3Rlci9CdWczODc5NTZQcm9jZXNzb3IuamF2YQpAQCAtMCwwICsxLDU5IEBACisvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDE0IElCTSBDb3Jwb3JhdGlvbi4KKyAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcv
bGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29y
cG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5w
cm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0ZXI7CisKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOwor
aW1wb3J0IGphdmEudXRpbC5TZXQ7CisKK2ltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3Np
bmcuQWJzdHJhY3RQcm9jZXNzb3I7CitpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5n
LkZpbGVyOworaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5NZXNzYWdlcjsKK2lt
cG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuUm91bmRFbnZpcm9ubWVudDsKK2ltcG9y
dCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuU3VwcG9ydGVkQW5ub3RhdGlvblR5cGVzOwor
aW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0ZWRTb3VyY2VWZXJzaW9u
OworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuU291cmNlVmVyc2lvbjsKK2ltcG9ydCBqYXZheC5s
YW5nLm1vZGVsLmVsZW1lbnQuRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1l
bnQuVHlwZUVsZW1lbnQ7CitpbXBvcnQgamF2YXgudG9vbHMuRGlhZ25vc3RpYzsKK2ltcG9ydCBq
YXZheC50b29scy5KYXZhRmlsZU9iamVjdDsKKworQFN1cHBvcnRlZEFubm90YXRpb25UeXBlcygi
dGFyZ2V0cy5idWczODc5NTYuR2VuZXJhdGUiKQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24oU291
cmNlVmVyc2lvbi5SRUxFQVNFXzYpCitwdWJsaWMgY2xhc3MgQnVnMzg3OTU2UHJvY2Vzc29yIGV4
dGVuZHMgQWJzdHJhY3RQcm9jZXNzb3IgeworCQorCVJvdW5kRW52aXJvbm1lbnQgcm91bmRFbnYg
PSBudWxsOworCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gcHJvY2VzcyhTZXQ8PyBleHRl
bmRzIFR5cGVFbGVtZW50PiBhbm5vdGF0aW9ucywgUm91bmRFbnZpcm9ubWVudCByb3VuZEVudikg
eworCisJCWZvciAoVHlwZUVsZW1lbnQgYW5ub3RhdGlvbiA6IGFubm90YXRpb25zKSB7CisJCQlT
ZXQ8PyBleHRlbmRzIEVsZW1lbnQ+IGFubm90YXRlZEVsZW1lbnRzID0gcm91bmRFbnYuZ2V0RWxl
bWVudHNBbm5vdGF0ZWRXaXRoKGFubm90YXRpb24pOworCQkJZm9yIChFbGVtZW50IGFubm90YXRl
ZEVsZW1lbnQgOiBhbm5vdGF0ZWRFbGVtZW50cykgeworCQkJCUZpbGVyIGZpbGVyID0gcHJvY2Vz
c2luZ0Vudi5nZXRGaWxlcigpOworCQkJCVN0cmluZyBnZW5lcmF0ZWRDbGFzc1NpbXBsZU5hbWUg
PSAiR2VuZXJhdGVkIiArIGFubm90YXRlZEVsZW1lbnQuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5n
KCk7CisJCQkJdHJ5IHsKKwkJCQkJSmF2YUZpbGVPYmplY3QgZmlsZSA9IGZpbGVyLmNyZWF0ZVNv
dXJjZUZpbGUoImdlbmVyYXRlZC8iICsgZ2VuZXJhdGVkQ2xhc3NTaW1wbGVOYW1lLCBhbm5vdGF0
ZWRFbGVtZW50KTsKKwkJCQkJZmlsZS5vcGVuV3JpdGVyKCkgLy8KKwkJCQkJCQkuYXBwZW5kKCJw
YWNrYWdlIGdlbmVyYXRlZDtcbiIgLy8KKwkJCQkJCQkJCSsgIlxuIiAvLworCQkJCQkJCQkJKyAi
cHVibGljIGNsYXNzICIgKyBnZW5lcmF0ZWRDbGFzc1NpbXBsZU5hbWUgKyAiIHtcbiIgLy8KKwkJ
CQkJCQkJCSsgIlxuIiAvLworCQkJCQkJCQkJKyAifVxuIikgLy8KKwkJCQkJCQkuY2xvc2UoKTsK
KwkJCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CisJCQkJCU1lc3NhZ2VyIG1lc3NhZ2VyID0g
cHJvY2Vzc2luZ0Vudi5nZXRNZXNzYWdlcigpOworCQkJCQltZXNzYWdlci5wcmludE1lc3NhZ2Uo
RGlhZ25vc3RpYy5LaW5kLkVSUk9SLCAiSU9FeGNlcHRpb246ICIgKyBlKTsKKwkJCQl9CisJCQl9
CisJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorfQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>242819</attachid>
            <date>2014-05-08 02:12:00 -0400</date>
            <delta_ts>2014-05-08 02:12:29 -0400</delta_ts>
            <desc>JDT and APT parts combined</desc>
            <filename>Fix-for-bug-387956.patch</filename>
            <type>application/octet-stream</type>
            <size>2664</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvZGlzcGF0Y2gvUm91bmRFbnZJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvZGlzcGF0Y2gvUm91bmRFbnZJbXBsLmphdmEKaW5kZXggZGFjNTJjYS4u
MmVmMDNlMSAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXB0L2Rpc3BhdGNoL1JvdW5kRW52SW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Sb3VuZEVudkltcGwuamF2YQpAQCAtNTYsNSAr
NTYsNyBAQAogCQlpZiAoX3VuaXRzICE9IG51bGwpIHsKIAkJCWZvciAoQ29tcGlsYXRpb25Vbml0
RGVjbGFyYXRpb24gdW5pdCA6IF91bml0cykgeworCQkJCXVuaXQuc2NvcGUuc3VwcHJlc3NJbXBv
cnRFcnJvcnMgPSB0cnVlOwogCQkJCXVuaXQudHJhdmVyc2UodmlzaXRvciwgdW5pdC5zY29wZSk7
CisJCQkJdW5pdC5zY29wZS5zdXBwcmVzc0ltcG9ydEVycm9ycyA9IGZhbHNlOwogCQkJfQogCQl9
CiNQIG9yZy5lY2xpcHNlLmpkdC5jb3JlCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db21waWxhdGlvblVuaXRTY29wZS5qYXZhIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29tcGlsYXRp
b25Vbml0U2NvcGUuamF2YQppbmRleCAwZWEwNGM0Li5mOGZiNjE4IDEwMDY0NAotLS0gY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db21waWxhdGlvblVu
aXRTY29wZS5qYXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEKQEAgLTQ0LDQgKzQ0LDE2IEBACiAJ
cHJpdmF0ZSBJbXBvcnRCaW5kaW5nW10gdGVtcEltcG9ydHM7CS8vIHRvIGtlZXAgYSByZWNvcmQg
b2YgcmVzb2x2ZWQgaW1wb3J0cyB3aGlsZSB0cmF2ZXJzaW5nIGFsbCBpbiBmYXVsdEluSW1wb3J0
cygpCiAJCisJCS8qKgorCQkgKiBGbGFnIHRoYXQgc2hvdWxkIGJlIHNldCBkdXJpbmcgYW5ub3Rh
dGlvbiB0cmF2ZXJzYWwgb3Igc2ltaWxhciBydW5zCisJCSAqIHRvIHByZXZlbnQgY2FjaGluZyBv
ZiBmYWlsdXJlcyByZWdhcmRpbmcgaW1wb3J0cyBvZiB5ZXQgdG8gYmUgZ2VuZXJhdGVkIGNsYXNz
ZXMuCisJCSAqLworCQlwdWJsaWMgYm9vbGVhbiBzdXBwcmVzc0ltcG9ydEVycm9yczsKKwkJCisJ
CS8qKgorCQkgKiBTa2lwcyBpbXBvcnQgY2FjaGluZyBpZiB1bnJlc29sdmVkIGltcG9ydHMgd2Vy
ZQorCQkgKiBmb3VuZCBsYXN0IHRpbWUuCisJCSAqLworCQlwcml2YXRlIGJvb2xlYW4gc2tpcENh
Y2hpbmdJbXBvcnRzOworCQogcHVibGljIENvbXBpbGF0aW9uVW5pdFNjb3BlKENvbXBpbGF0aW9u
VW5pdERlY2xhcmF0aW9uIHVuaXQsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJ
c3VwZXIoQ09NUElMQVRJT05fVU5JVF9TQ09QRSwgbnVsbCk7CkBAIC0zMDcsNSArMzE5LDkgQEAK
IH0KIHZvaWQgZmF1bHRJbkltcG9ydHMoKSB7Ci0JaWYgKHRoaXMudHlwZU9yUGFja2FnZUNhY2hl
ICE9IG51bGwpCisJYm9vbGVhbiB1bnJlc29sdmVkRm91bmQgPSBmYWxzZTsKKwkvLyBzaG91bGQg
cmVwb3J0IHVucmVzb2x2ZWQgb25seSBpZiB3ZSBhcmUgbm90IHN1cHByZXNzaW5nIGNhY2hpbmcg
b2YgZmFpbGVkIHJlc29sdXRpb25zCisJYm9vbGVhbiByZXBvcnRVbnJlc29sdmVkID0gIXRoaXMu
c3VwcHJlc3NJbXBvcnRFcnJvcnM7CisKKwlpZiAodGhpcy50eXBlT3JQYWNrYWdlQ2FjaGUgIT0g
bnVsbCAmJiAhdGhpcy5za2lwQ2FjaGluZ0ltcG9ydHMpCiAJCXJldHVybjsgLy8gY2FuIGJlIGNh
bGxlZCB3aGVuIGEgZmllbGQgY29uc3RhbnQgaXMgcmVzb2x2ZWQgYmVmb3JlIHN0YXRpYyBpbXBv
cnRzCiAJaWYgKHRoaXMucmVmZXJlbmNlQ29udGV4dC5pbXBvcnRzID09IG51bGwpIHsKQEAgLTM3
OCw1ICszOTQsOCBAQAogCQkJCQkvLyBrZWVwIGl0IHVubGVzcyBhIGR1cGxpY2F0ZSBjYW4gYmUg
Zm91bmQgYmVsb3cKIAkJCQl9IGVsc2UgewotCQkJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbXBvcnRQ
cm9ibGVtKGltcG9ydFJlZmVyZW5jZSwgaW1wb3J0QmluZGluZyk7CisJCQkJCXVucmVzb2x2ZWRG
b3VuZCA9IHRydWU7CisJCQkJCWlmIChyZXBvcnRVbnJlc29sdmVkKSB7CisJCQkJCQlwcm9ibGVt
UmVwb3J0ZXIoKS5pbXBvcnRQcm9ibGVtKGltcG9ydFJlZmVyZW5jZSwgaW1wb3J0QmluZGluZyk7
CisJCQkJCX0KIAkJCQkJY29udGludWUgbmV4dEltcG9ydDsKIAkJCQl9CkBAIC00MTUsNCArNDM0
LDUgQEAKIAkJCXRoaXMudHlwZU9yUGFja2FnZUNhY2hlLnB1dChiaW5kaW5nLmNvbXBvdW5kTmFt
ZVtiaW5kaW5nLmNvbXBvdW5kTmFtZS5sZW5ndGggLSAxXSwgYmluZGluZyk7CiAJfQorCXRoaXMu
c2tpcENhY2hpbmdJbXBvcnRzID0gdGhpcy5zdXBwcmVzc0ltcG9ydEVycm9ycyAmJiB1bnJlc29s
dmVkRm91bmQ7CiB9CiBwdWJsaWMgdm9pZCBmYXVsdEluVHlwZXMoKSB7
</data>

          </attachment>
      

    </bug>

</bugzilla>