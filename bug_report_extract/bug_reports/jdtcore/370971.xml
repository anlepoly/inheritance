<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>370971</bug_id>
          
          <creation_ts>2012-02-08 11:21:00 -0500</creation_ts>
          <short_desc>Content Assist autocomplete broken within an array of anonymous classes instances</short_desc>
          <delta_ts>2013-05-17 02:28:18 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Desislava Hristova">desi.hristova</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>andy.m.sheldon</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>h.klene</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>mauromol</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>2</votes>

      

      

      <flag name="review"
          id="56663"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2062816</commentid>
    <comment_count>0</comment_count>
    <who name="Desislava Hristova">desi.hristova</who>
    <bug_when>2012-02-08 11:21:25 -0500</bug_when>
    <thetext>Build Identifier: Version: 3.7.1 Build id: M20110909-1335

Autocomplete doesn&apos;t work when more then one anonymous classes&apos; instances are instantiated in an array.

See the code snippet below:

	 // --------------- start of test snippet ---------------
	 private Object[] items = new Object[] {
             new Object() {
                     @Override
                     public String toString() {
                             // [1] Try completion here
                             //super.
                             return super.toString();
                     }
             },
             // If I uncomment the line below the completion in [1] stops working
             //new Object() { }
             } ;
	// --------------- end of test snippet ---------------

Reproducible: Always

Steps to Reproduce:
1. Uncomment the //new Object() { } line
2. Try autocompletion in [1]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2063261</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-02-09 05:00:27 -0500</bug_when>
    <thetext>Thanks for the nice test case.
Can reproduce using 3.8 M5.

Similar to bug 306908, bug 311356, bug 318192, bug 336620 and bug 367612.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2063262</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-02-09 05:00:54 -0500</bug_when>
    <thetext>Srikanth, that could be a nice polish item for M7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134051</commentid>
    <comment_count>3</comment_count>
    <who name="Holger Klene">h.klene</who>
    <bug_when>2012-07-08 17:21:32 -0400</bug_when>
    <thetext>Here is another somewhat similar test case trying to initialize multiple fields in one go (instead of an array, though it shares the delimiting comma right after the anonymous inner class):



import java.awt.event.ActionEvent;

import javax.swing.AbstractAction;
import javax.swing.Action;

public class CodeCompletion {

    private Action first = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
		// completed fine
                someMethod();
            }
    
        }

        , second = new AbstractAction() {

            @Override
            public void actionPerformed(ActionEvent e) {
                // someM // -&gt; A) no completion on methods
                // sysout // -&gt; B) would expand fine
            }

        }

     // , third = new AbstractA // -&gt; C) no completion on further initialization
        ;

    protected void someMethod() {
    }

}

Uncomment any one line at A) B) or C) and try code completion right before the marker // -&gt;

This is not related to the other cases given in comment 1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134089</commentid>
    <comment_count>4</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-09 01:12:11 -0400</bug_when>
    <thetext>Thanks for the test cases. 
All of these cases with anonymous class initializations are recovery related issues and will be investigated together.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160505</commentid>
    <comment_count>5</comment_count>
    <who name="Andy Sheldon">andy.m.sheldon</who>
    <bug_when>2012-09-16 14:49:21 -0400</bug_when>
    <thetext>(In reply to comment #3)

If you reverse the order, and put the declaration of someMethod() above the member variable declarations, then completion works correctly in &quot;second&quot;
  
&gt;     private Action first = new AbstractAction() {
&gt;         ...
&gt;        , second = new AbstractAction() {
&gt;         ...

&gt;     protected void someMethod() {
&gt;     }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2201222</commentid>
    <comment_count>6</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2013-01-10 09:49:55 -0500</bug_when>
    <thetext>Is there any progress on this? We have found another problematic case much similar to this one, however I was not successful in extracting it in a simple test case.
Using Eclipse 4.2.1, build id M20121107-1200, JDT 3.8.2.v20121002-144154-8-8nFqrFNOfwKDTWtsXHi6xm0834.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2201575</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-01-10 23:21:47 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Is there any progress on this? We have found another problematic case much
&gt; similar to this one, however I was not successful in extracting it in a
&gt; simple test case.
&gt; Using Eclipse 4.2.1, build id M20121107-1200, JDT
&gt; 3.8.2.v20121002-144154-8-8nFqrFNOfwKDTWtsXHi6xm0834.

I am afraid, no. The engineer who was assigned this bug is no longer with the team and there is none in the team who can spend time on this. But if anyone can provide a patch, that will be welcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2201613</commentid>
    <comment_count>8</comment_count>
    <who name="Mauro Molinari">mauromol</who>
    <bug_when>2013-01-11 02:21:37 -0500</bug_when>
    <thetext>I see. But isn&apos;t this bug severe enough to put it in the 4.3 roadmap? When you have a complex class with hundreds of line of code where completion doesn&apos;t work because of this bug it&apos;s quite hard to work... :-(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2201622</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-01-11 02:47:04 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; I see. But isn&apos;t this bug severe enough to put it in the 4.3 roadmap? When
&gt; you have a complex class with hundreds of line of code where completion
&gt; doesn&apos;t work because of this bug it&apos;s quite hard to work... :-(

I do understand your concern and the bug still has 4.3 as the target. We&apos;ll see if we can take it up during the next milestone.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234726</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-21 04:43:33 -0400</bug_when>
    <thetext>I&apos;ll take a look at this. My plan is to spend a bounded amount of time
on this task to see if it can be addressed within that time. To see if
this ever worked and if so what caused the breakage. If it looks more
involved, it will have to wait till later as we are focused on Java 8 work
and havinb a bit of catching up to do there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240496</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-06 05:25:08 -0400</bug_when>
    <thetext>Assigning to Anirban as he is the code completion owner now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246511</commentid>
    <comment_count>12</comment_count>
      <attachid>229939</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-04-21 16:13:52 -0400</bug_when>
    <thetext>Created attachment 229939
Patch for the fix

Patch for the fix. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2255785</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-13 03:12:03 -0400</bug_when>
    <thetext>Patch looks safe. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=4cf047ed8142f9c3048e153b5178c9b3d96df1fb.

Anirban, please see if any of the bugs referenced in comment#1 get fixed
by this patch, if so add suitable test cases and mark them as duplicates.

I&apos;ll mark the present bug as resolved, but problem reported in comment#3 is 
not fixed by this patch. We should open a fresh issue for that and carry 
over the test case. Please CC the commenter from comment#3 on the new bug.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2256555</commentid>
    <comment_count>14</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-05-14 05:45:13 -0400</bug_when>
    <thetext>Hello,
Bug 407979 is filed on the basis of comment 3.

Bugs in comment 1 are existing, and I&apos;ll be happy to look into them if there are parties still interested in their solutions.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2258528</commentid>
    <comment_count>15</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-05-17 02:28:18 -0400</bug_when>
    <thetext>Verified for RC1 Version: 4.3.0 Build id: I20130516-2200</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>229939</attachid>
            <date>2013-04-21 16:13:00 -0400</date>
            <delta_ts>2013-04-21 16:13:52 -0400</delta_ts>
            <desc>Patch for the fix</desc>
            <filename>Bug370971master.patch</filename>
            <type>text/plain</type>
            <size>6190</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YQppbmRleCA1NmVjYThhLi4xYWFmYzBjIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVs
L0NvbXBsZXRpb25UZXN0cy5qYXZhCkBAIC0xMDQ0LDEwICsxMDQ0LDExIEBACiAJc3VpdGUuYWRk
VGVzdChuZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzg1ODU4YSIpKTsKIAlzdWl0ZS5hZGRU
ZXN0KG5ldyBDb21wbGV0aW9uVGVzdHMoInRlc3RCdWczODU4NThiIikpOwogCXN1aXRlLmFkZFRl
c3QobmV3IENvbXBsZXRpb25UZXN0cygidGVzdEJ1ZzM4NTg1OGMiKSk7CiAJc3VpdGUuYWRkVGVz
dChuZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzg1ODU4ZCIpKTsKIAlzdWl0ZS5hZGRUZXN0
KG5ldyBDb21wbGV0aW9uVGVzdHMoInRlc3RCdWc0MDI1NzQiKSk7CisJc3VpdGUuYWRkVGVzdChu
ZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzcwOTcxIikpOwogCXJldHVybiBzdWl0ZTsKIH0K
IHB1YmxpYyBDb21wbGV0aW9uVGVzdHMoU3RyaW5nIG5hbWUpIHsKIAlzdXBlcihuYW1lKTsKIH0K
QEAgLTI1OTAyLDYgKzI1OTAzLDQ5IEBACiAJCS8vIFJlc3RvcmUgY29tcGxpYW5jZSBzZXR0aW5n
cy4KIAkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Tb3VyY2UsIHNhdmVkT3B0
aW9uQ29tcGxpYW5jZSk7CiAJCUNPTVBMRVRJT05fUFJPSkVDVC5zZXRPcHRpb25zKG9wdGlvbnMp
OwkKIAl9CiB9CisvL0J1ZyAzNzA5NzEgLSBDb250ZW50IEFzc2lzdCBhdXRvY29tcGxldGUgYnJv
a2VuIHdpdGhpbiBhbiBhcnJheSBvZiBhbm9ueW1vdXMgY2xhc3NlcyBpbnN0YW5jZXMKKy8vaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MDk3MQorcHVibGlj
IHZvaWQgdGVzdEJ1ZzM3MDk3MSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCU1hcCBv
cHRpb25zID0gQ09NUExFVElPTl9QUk9KRUNULmdldE9wdGlvbnModHJ1ZSk7CisJT2JqZWN0IHNh
dmVkT3B0aW9uQ29tcGxpYW5jZSA9IG9wdGlvbnMuZ2V0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
U291cmNlKTsKKwl0cnkgeworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1Nv
dXJjZSwgQ29tcGlsZXJPcHRpb25zLlZFUlNJT05fMV83KTsKKwkJQ09NUExFVElPTl9QUk9KRUNU
LnNldE9wdGlvbnMob3B0aW9ucyk7CisJCXRoaXMud29ya2luZ0NvcGllcyA9IG5ldyBJQ29tcGls
YXRpb25Vbml0WzFdOworCQl0aGlzLndvcmtpbmdDb3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgK
KwkJCSIvQ29tcGxldGlvbi9zcmMvdGVzdC9FeGFtcGxlRW51bU5vQXV0b2NvbXBsZXRlLmphdmEi
LAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcml2YXRlIE9iamVjdFtdIGl0ZW1z
ID0gbmV3IE9iamVjdFtdIHtcbiIgKworCQkJIiAgICAgICAgbmV3IE9iamVjdCgpIHtcbiIgKwor
CQkJIiAgICAgICAgICAgICAgQE92ZXJyaWRlXG4iICsKKwkJCSIgICAgICAgICAgICAgIHB1Ymxp
YyBTdHJpbmcgdG9TdHJpbmcoKSB7XG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICByZXR1cm4g
c3VwZXIudG9TO1xuIiArCisJCQkiICAgICAgICAgICAgICB9XG4iICsKKwkJCSIgICAgICAgIH0s
XG4iICsKKwkJCSIgICAgICAgIG5ldyBPYmplY3QoKSB7IH1cbiIgKworCQkJIiAgICB9IDtcbiIg
KworCQkJIn1cbiIpOworCQlDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyIHJlcXVlc3RvciA9IG5l
dyBDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyKHRydWUsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIHRy
dWUpOworCQlyZXF1ZXN0b3IuYWxsb3dBbGxSZXF1aXJlZFByb3Bvc2FscygpOworCQlyZXF1ZXN0
b3Iuc2V0UmVxdWlyZUV4dGVuZGVkQ29udGV4dCh0cnVlKTsKKwkJcmVxdWVzdG9yLnNldENvbXB1
dGVFbmNsb3NpbmdFbGVtZW50KHRydWUpOworCQlOdWxsUHJvZ3Jlc3NNb25pdG9yIG1vbml0b3Ig
PSBuZXcgTnVsbFByb2dyZXNzTW9uaXRvcigpOworCQlTdHJpbmcgc3RyID0gdGhpcy53b3JraW5n
Q29waWVzWzBdLmdldFNvdXJjZSgpOworCQlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAicmV0dXJu
IHN1cGVyLnRvUyI7CisJCWludCBjdXJzb3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21w
bGV0ZUJlaGluZCkgKyBjb21wbGV0ZUJlaGluZC5sZW5ndGgoKTsKKwkJdGhpcy53b3JraW5nQ29w
aWVzWzBdLmNvZGVDb21wbGV0ZShjdXJzb3JMb2NhdGlvbiwgcmVxdWVzdG9yLCB0aGlzLndjT3du
ZXIsIG1vbml0b3IpOworCQkKKwkJYXNzZXJ0UmVzdWx0cygKKwkJCQkidG9TdHJpbmdbTUVUSE9E
X1JFRl17dG9TdHJpbmcoKSwgTGphdmEubGFuZy5PYmplY3Q7LCAoKUxqYXZhLmxhbmcuU3RyaW5n
OywgdG9TdHJpbmcsIG51bGwsIDY1fSIsCisJCQkJcmVxdWVzdG9yLmdldFJlc3VsdHMoKSk7CisJ
CWFzc2VydEVxdWFscyhmYWxzZSwKKwkJCXJlcXVlc3Rvci5jYW5Vc2VEaWFtb25kKDApKTsKKwl9
IGZpbmFsbHkgeworCQkvLyBSZXN0b3JlIGNvbXBsaWFuY2Ugc2V0dGluZ3MuCisJCW9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fU291cmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFuY2Up
OworCQlDT01QTEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJCisJfQorfQogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRGaWVsZC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Bh
cnNlci9SZWNvdmVyZWRGaWVsZC5qYXZhCmluZGV4IDM3ZTkyMmEuLmI0NDIzYWEgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkRmllbGQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1JlY292ZXJlZEZpZWxkLmphdmEKQEAgLTEsNyArMSw3IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xp
cHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCkBAIC0xNywxMCArMTcsMTEgQEAKIGltcG9y
dCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQWJzdHJhY3RWYXJpYWJsZURlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3QuQW5ub3RhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFycmF5SW5pdGlhbGl6ZXI7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BcnJheVF1YWxpZmllZFR5cGVSZWZlcmVu
Y2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BcnJheVR5
cGVSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuRmllbGREZWNsYXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LlN0YXRlbWVudDsKQEAgLTE5NiwyMSArMTk3LDM1IEBACiAJCX0KIAl9CiAKIAlp
ZiAodGhpcy5hbm9ueW1vdXNUeXBlcyAhPSBudWxsKSB7CiAJCWlmKHRoaXMuZmllbGREZWNsYXJh
dGlvbi5pbml0aWFsaXphdGlvbiA9PSBudWxsKSB7CisJCQlBcnJheUluaXRpYWxpemVyIHJlY292
ZXJlZEluaXRpYWxpemVycyA9IG51bGw7CisJCQlpbnQgcmVjb3ZlcmVkSW5pdGlhbGl6ZXJzQ291
bnQgPSAwOworCQkJaWYgKHRoaXMuYW5vbnltb3VzVHlwZUNvdW50ID4gMSkgeworCQkJCXJlY292
ZXJlZEluaXRpYWxpemVycyA9IG5ldyBBcnJheUluaXRpYWxpemVyKCk7CisJCQkJcmVjb3ZlcmVk
SW5pdGlhbGl6ZXJzLmV4cHJlc3Npb25zID0gbmV3IEV4cHJlc3Npb25bdGhpcy5hbm9ueW1vdXNU
eXBlQ291bnRdOworCQkJfQogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmFub255bW91c1R5
cGVDb3VudDsgaSsrKXsKIAkJCQlSZWNvdmVyZWRUeXBlIHJlY292ZXJlZFR5cGUgPSB0aGlzLmFu
b255bW91c1R5cGVzW2ldOwogCQkJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24gPSBy
ZWNvdmVyZWRUeXBlLnR5cGVEZWNsYXJhdGlvbjsKIAkJCQlpZih0eXBlRGVjbGFyYXRpb24uZGVj
bGFyYXRpb25Tb3VyY2VFbmQgPT0gMCkgewogCQkJCQl0eXBlRGVjbGFyYXRpb24uZGVjbGFyYXRp
b25Tb3VyY2VFbmQgPSB0aGlzLmZpZWxkRGVjbGFyYXRpb24uZGVjbGFyYXRpb25Tb3VyY2VFbmQ7
CiAJCQkJCXR5cGVEZWNsYXJhdGlvbi5ib2R5RW5kID0gdGhpcy5maWVsZERlY2xhcmF0aW9uLmRl
Y2xhcmF0aW9uU291cmNlRW5kOwogCQkJCX0KIAkJCQlpZiAocmVjb3ZlcmVkVHlwZS5wcmVzZXJ2
ZUNvbnRlbnQpewogCQkJCQlUeXBlRGVjbGFyYXRpb24gYW5vbnltb3VzVHlwZSA9IHJlY292ZXJl
ZFR5cGUudXBkYXRlZFR5cGVEZWNsYXJhdGlvbihkZXB0aCArIDEsIGtub3duVHlwZXMpOwogCQkJ
CQlpZiAoYW5vbnltb3VzVHlwZSAhPSBudWxsKSB7Ci0JCQkJCQl0aGlzLmZpZWxkRGVjbGFyYXRp
b24uaW5pdGlhbGl6YXRpb24gPSBhbm9ueW1vdXNUeXBlLmFsbG9jYXRpb247CisJCQkJCQlpZiAo
dGhpcy5hbm9ueW1vdXNUeXBlQ291bnQgPiAxKSB7CisJCQkJCQkJaWYgKHJlY292ZXJlZEluaXRp
YWxpemVyc0NvdW50ID09IDApIHsKKwkJCQkJCQkJdGhpcy5maWVsZERlY2xhcmF0aW9uLmluaXRp
YWxpemF0aW9uID0gcmVjb3ZlcmVkSW5pdGlhbGl6ZXJzOworCQkJCQkJCX0KKwkJCQkJCQlyZWNv
dmVyZWRJbml0aWFsaXplcnMuZXhwcmVzc2lvbnNbcmVjb3ZlcmVkSW5pdGlhbGl6ZXJzQ291bnQr
K10gPSBhbm9ueW1vdXNUeXBlLmFsbG9jYXRpb247CisJCQkJCQl9CisJCQkJCQllbHNlIHsKKwkJ
CQkJCQl0aGlzLmZpZWxkRGVjbGFyYXRpb24uaW5pdGlhbGl6YXRpb24gPSBhbm9ueW1vdXNUeXBl
LmFsbG9jYXRpb247CQkJCQkJCQorCQkJCQkJfQogCQkJCQkJaW50IGVuZCA9IGFub255bW91c1R5
cGUuZGVjbGFyYXRpb25Tb3VyY2VFbmQ7CiAJCQkJCQlpZiAoZW5kID4gdGhpcy5maWVsZERlY2xh
cmF0aW9uLmRlY2xhcmF0aW9uU291cmNlRW5kKSB7IC8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMDczMzcKIAkJCQkJCQl0aGlzLmZpZWxkRGVjbGFyYXRp
b24uZGVjbGFyYXRpb25Tb3VyY2VFbmQgPSBlbmQ7CiAJCQkJCQkJdGhpcy5maWVsZERlY2xhcmF0
aW9uLmRlY2xhcmF0aW9uRW5kID0gZW5kOwogCQkJCQkJfQ==
</data>
<flag name="review"
          id="56662"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
      

    </bug>

</bugzilla>