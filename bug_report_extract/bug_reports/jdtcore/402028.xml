<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402028</bug_id>
          
          <creation_ts>2013-02-28 11:22:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] null analysis for reference expressions</short_desc>
          <delta_ts>2013-03-02 11:38:23 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2223957</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 11:22:42 -0500</bug_when>
    <thetext>Bug 401030 comment 9 raised a question regarding null annotations on reference expressions.

This bug to address any interaction between null analysis (w/ or w/o annotations) and reference expressions.

One thing clearly calls for action:

  X x = null;
  I i = x::bar;
  
This should report a null reference against x but doesn&apos;t.


As for null annotations on reference expressions it takes more investigation to see how and why this could be useful.

The easiest solution would be to let the target functional type completely determine any null contracts, and use only inference to see if the reference expressions meets the required null contract.
I&apos;ll need to play with this a bit more to see if explicit null annotations on a reference expression will be needed in some cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223984</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 12:02:04 -0500</bug_when>
    <thetext>(In reply to comment #0)
&gt; Bug 401030 comment 9 raised a question regarding null annotations on
&gt; reference expressions.

[...]

&gt; As for null annotations on reference expressions it takes more investigation
&gt; to see how and why this could be useful.

The scenario I had in mind was:

interface I {
    @NonNull String foo(@Nullable String x);
}

class X {
    @Nullable public static String goo(@NonNull String x) {
        return null;
    }

    I i = X::goo;
}

As for any annotations on the reference expression itself, I need to
double check if this is allowed at all. There was some going back and
forth on this in the 308 EG and I don&apos;t recall the final word. ECJ
grammar is permissive and allows them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224191</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 16:54:01 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; The scenario I had in mind was:

Thanks for the example.
Yep, that should be honored with a few new error messages.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224236</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 18:24:21 -0500</bug_when>
    <thetext>I&apos;ve released a first little batch via commit feb469be2ad91987262f94d747dca34c598d919d.
This wires reference expressions into flow analysis, more precisely the receiver expression if we have one.
So we now detect:
- dereference of uninitialized receiver
- dereference of (pot) null receiver
and a reference expression also prevents its receiver from being reported as unused.

More to follow...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224271</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 21:04:46 -0500</bug_when>
    <thetext>(In reply to comment #3)

&gt; So we now detect:
&gt; - dereference of uninitialized receiver
&gt; - dereference of (pot) null receiver
&gt; and a reference expression also prevents its receiver from being reported as
&gt; unused.

Thanks! I had already declared completion of this project overlooking this :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224976</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-02 11:38:23 -0500</bug_when>
    <thetext>I&apos;ve released a fix for issues a la comment 1 via commit db5b57ec76798735e1deba7d6189161973304788

This patch includes a refactoring of tests:
- extracted Java8 specific tests regarding various kinds of flow analysis into a new FlowAnalysisTest8 (wired both into RunAllJava8Tests and TestAll).
- after this, some tests no longer contain Java8 specific additions: FlowAnalysisTest, NullReferenceTest, NullAnnotationTest.
This avoids runtime checking of compliance levels (generating lots of empty test runs at levels &lt; 1.8).

I introduced 4 new IProblems, with the following association to Irritants:

IProblem.ReferenceExpressionParameterMismatchPromisedNullable
IProblem.ReferenceExpressionReturnNullRedef
Irritant: CompilerOptions.NullSpecViolation
-&gt; These break the inter-procedural wiring of null analysis. Default to Error.

IProblem.ReferenceExpressionParameterRequiredNonnullUnchecked
IProblem.ReferenceExpressionReturnNullRedefUnchecked
Irritant: CompilerOptions.NullUncheckedConversion
-&gt; Application of the method reference will require unchecked conversions to @NonNull
-&gt; Strictly speaking, these are null contract violations, too, but unlike in the regular inheritance case, the implementing class need not have knowledge about the declaring interface. That&apos;s why I believe that this problem should be &quot;easier to suppress&quot;, so defaulting to warning is good here.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>