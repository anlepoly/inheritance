<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426652</bug_id>
          
          <creation_ts>2014-01-25 15:42:00 -0500</creation_ts>
          <short_desc>[1.8][inference] inference loops infinitely on unconstrained inference variable</short_desc>
          <delta_ts>2014-01-25 16:04:18 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354572</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-25 15:42:40 -0500</bug_when>
    <thetext>On this example:

import static java.util.stream.Collectors.toList;
public class Y {
        Object o = toList();
}

inference never terminates, because some inference variable has neither lower nor upper bounds, and hence no progress is made during resolution.

One could argue, that this rule
 * Otherwise, where i has proper upper bounds U1, ..., Uk, Ti = glb(U1, ..., Uk).

implicitly includes the case of k=0, where glb() is probably assumed to answer j.l.Object.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354574</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-25 16:01:29 -0500</bug_when>
    <thetext>Hm, actually I would assume glb() (of empty input) to be the null-type, but let&apos;s not deliberately re-introduce this type into inference which would likely lead to bogus class files... inferring an unconstrained inference variable to Object shouldn&apos;t hurt anyway.

Additionally, while fixing this issue, I came across a call to CaptureBinding18.initializeBounds - NPE on .wildcard ... I&apos;m fixing this for now by overriding initializeBounds() with an empty implementation, we already do our initialization in setUpperBounds().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354575</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-25 16:04:18 -0500</bug_when>
    <thetext>Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=b25ae5a7f576e7bd1b9d0730e14ef7742dcae3eb

(Change in inferInvocationType() is unrelated: fixes a CCE I once saw during experiments).</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>