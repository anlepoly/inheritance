<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427438</bug_id>
          
          <creation_ts>2014-02-05 03:22:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)</short_desc>
          <delta_ts>2014-02-06 07:09:33 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mathieu Croizard">mcr</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2358922</commentid>
    <comment_count>0</comment_count>
    <who name="Mathieu Croizard">mcr</who>
    <bug_when>2014-02-05 03:22:42 -0500</bug_when>
    <thetext>Hello,
I have an NPE while compiling this code :

public class C {
	
	public C(Class clazz)
	{
		 
	}
	
	public void error()
	{
		boolean test = false;
		int i = 1;
		
		new C(
		test
		? (i == 2
		   ? D.class
	       : E.class)
	    : null);
	}
	
	
	public class D{}
	public class E{}
	
}



I am using :

  Eclipse Java Development Tools Patch for Java 8 Support (BETA)		1.0.0.v20140205-0104_BETA_JAVA8
  Eclipse Plugin-in Development Environment Patch for Java 8 Support (BETA)	1.0.0.v20140205-0104_BETA_JAVA8
  Eclipse RCP Patch for Java 8 Support (BETA)					1.0.0.v20140205-0104_BETA_JAVA8



This is the stack :

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:272)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:265)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:210)
	at org.eclipse.jdt.internal.compiler.ast.Expression.generateCode(Expression.java:698)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:328)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:273)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:639)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:370)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1214)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:484)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358940</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 03:57:37 -0500</bug_when>
    <thetext>Thanks, I have a fix - there was a gap in CE.isPolyExpression() that was covered
for by code elsewhere. In a recent cleanup and reorganization of that code, the
original gap has come re-exposed. Fix should be trivial and will follow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358949</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 04:15:12 -0500</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=0c70d1e0debf14f8c28e75a1e2f40d2fbafab00f</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359461</commentid>
    <comment_count>3</comment_count>
    <who name="Mathieu Croizard">mcr</who>
    <bug_when>2014-02-06 03:16:29 -0500</bug_when>
    <thetext>Hello,
I still have an NPE at the same line (but the stack is different). Should I post a new bug or continue this one ?
I am using now : 
  Eclipse Java Development Tools Patch for Java 8 Support (BETA)            1.0.0.v20140206-0106_BETA_JAVA8
  Eclipse Plugin-in Development Environment Patch for Java 8 Support (BETA) 1.0.0.v20140206-0106_BETA_JAVA8
  Eclipse RCP Patch for Java 8 Support (BETA)                               1.0.0.v20140206-0106_BETA_JAVA8




java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:280)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:265)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.generateCode(MessageSend.java:421)
	at org.eclipse.jdt.internal.compiler.ast.CastExpression.generateCode(CastExpression.java:454)
	at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.generateCode(ReturnStatement.java:213)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:328)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:273)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:639)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:370)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1214)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:484)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:474)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)




with that piece of code :
import java.io.Serializable;
import java.util.List;


public class F {

	boolean b;
    public List&lt;A&gt; getLignes()
    {
    	return (List&lt;A&gt;) data(b ? (Serializable) get() : null);
    }
	
    
    public List&lt;A&gt; get()
    {
    	return null;
    }
    
    public &lt;T extends Serializable&gt; T data(T data)
    {
		return data;
    }
	
	
	public class A implements Serializable
	{
		
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359468</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 03:25:38 -0500</bug_when>
    <thetext>(In reply to Mathieu Croizard from comment #3)
&gt; Hello,
&gt; I still have an NPE at the same line (but the stack is different). Should I
&gt; post a new bug or continue this one ?

Thanks, This one is fine for the moment, if after analysis it is felt a
different one is required, I&apos;ll do so.

I get NPEs from two different stacks: (a) the one you reported and if
null annotation analysis is on from:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.analyse(NullAnnotationMatching.java:123)
	at org.eclipse.jdt.internal.compiler.ast.Statement.analyseOneArgument18(Statement.java:153)
	at org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments(Statement.java:122)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:177)
	at org.eclipse.jdt.internal.compiler.ast.CastExpression.analyseCode(CastExpression.java:71)
	at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.analyseCode(ReturnStatement.java:83)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)


I&apos;ll investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359485</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 03:51:50 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)

&gt; Thanks, This one is fine for the moment, if after analysis it is felt a
&gt; different one is required, I&apos;ll do so.

This is a different problem, but we will let it slide.

Stephan, eventual evaluation of conditional is bypassed due to:

InferenceContext18 infCtx = null;
			if (candidateMethod instanceof ParameterizedMethodBinding) {
				infCtx = invocation.getInferenceContext((ParameterizedMethodBinding) candidateMethod);
				if (infCtx != null) {
					if (infCtx.stepCompleted != InferenceContext18.TYPE_INFERRED) {
						// only work in the exact state of TYPE_INFERRED
						// - below we&apos;re not yet ready
						// - above we&apos;re already done-done
						return;
					}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359487</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 03:53:15 -0500</bug_when>
    <thetext>Regression test here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=97479fa13695f697962836d4fefd338d91a156e3

(Just a reminder that there are two problems one with null analysis enabled
and one without. Both could really be due to the same underlying reason)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359560</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-06 07:09:33 -0500</bug_when>
    <thetext>Thanks, this test was highly valuable in that it revealed a hidden but wrong assumption in the inference: I used checks &quot;expressionContext == VANILLA_CONTEXT&quot; to test for contexts not providing a target type. This missed the case of cast contexts, which, too, don&apos;t strictly provide a target type.
As a result the inference in this example was never finished, because it fell in neither bucket: neither having a target type, nor being a vanilla context.

The bulk of my change is a refactoring of interface ExpressionContext into an enum (plus corresponding &quot;import static&quot; instead of &quot;implements&quot;) - hurray, long live Java 5! :)

The payload is the introduction and usage of a new function ExpressionContext.definesTargetType().

One test now shows two more errors (javac only shows one of them but I hold that both are valid indeed).

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=1d1b85ba11568f78a124441d6eb86af75fb135ca</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>