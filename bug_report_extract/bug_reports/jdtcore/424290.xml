<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424290</bug_id>
          
          <creation_ts>2013-12-17 21:44:00 -0500</creation_ts>
          <short_desc>[1.8] Evaluate alternate options for lambda shape analysis.</short_desc>
          <delta_ts>2014-12-10 07:38:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manju656</cc>
    
    <cc>saammana</cc>
    
    <cc>srikanth_sankaran</cc>
          <qa_contact name="Srikanth Sankaran">srikanth_sankaran</qa_contact>
          <votes>0</votes>

      

      

      <flag name="review"
          id="63744"
          type_id="1"
          status="+"
          setter="saammana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2343058</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-17 21:44:18 -0500</bug_when>
    <thetext>When applying attachment 238421 from bug 424167 comment 5, OverloadResolutionTest8.test004() starts failing.

I believe this is caused by the way how lambda shape analysis surrenders when enclosingScopesHaveErrors().

The test contains three almost identical method calls with a lambda as their argument. In all three cases inference wants to detect an incompatibility because the function type returns an int but the lambdas are not value-compatible. However, only the first occurrence succeeds to report this, because subsequent occurrences will detect the first error in some outer scope and refuse to complete its analysis. IMHO these statements should be fully independent.

I know that this area is close to impossible to get right and fully spec-compliant, but the result in this test looks wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343061</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-17 21:50:35 -0500</bug_when>
    <thetext>In the same patch attachment 238421 LE.getResolvedCopyForInferenceTargeting() has a line setting valueCompatible to true, which carries this comment:

 // optimistically, TODO: is this OK??

Pragmatically I think this is OK, but I don&apos;t know whether the spec allows such optimism.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344150</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-19 20:46:30 -0500</bug_when>
    <thetext>Orthogonal, but unrelated problem: for code assist, in particular for code
completion copy() would fail as is for most cases. Because completion scenario
would most often leave the program with syntax errors. As far I as I experimented
statement recovery + diagnostic parser drops too many constructs.

We need to solve this so we lose minimal nodes and recover as much of lambda
body as we can.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344151</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-19 20:58:48 -0500</bug_when>
    <thetext>Certain heuristics can be relied upon for approximate shape analysis:
Obviously:

    - For expression body lambdas we don&apos;t have any issues.

For block bodied lambdas:

   1. The presence of a plain return statement implies the method is not
value compatible and is void compatible  (see (3))
   2. The presence of an expression returning return statement implies the
method is not void compatible and is value compatible. (see (3))
   3. Presence of both indicates it is broken.
   4. A lambda with all returns returning expressions can be deemed to be
value compatible - i.e we don&apos;t really have to check if the lambda&apos;s }
is reachable. If it is, then the lambda is not value compatible, but we
can still treat it as value compatible. This has the effect of simply 
shifting/altering the error reporting. No real harm will result (i.e we will 
not compile illegal program or reject legal programs)

The problem is when neither form of return is seen:

    - Such a lambda is always void compatible.

We can heuristically detect some patterns to ascertain value compatibility: 
Examples:

    - Ultimate statement is a throw
    - Ultimate statement is a control structure that has no embedded breaks,
      and the controlling condition is a compile time constant that is true.

etc.

That said, I am considering a new phase analyzeShape() that would side step
all these issues and always compute the shape whether the lambda has resolve
errors or not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344152</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-19 21:00:59 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)

&gt; The problem is when neither form of return is seen:
&gt; 
&gt;     - Such a lambda is always void compatible.
&gt; 
&gt; We can heuristically detect some patterns to ascertain value compatibility: 
&gt; Examples:

I think this case is really a corner case. In reality, we will ever encounter
a value returning lambda without a return statement - that makes no sense.
So absence of a return expression form ==&gt; !value compatible in practice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357427</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 19:08:13 -0500</bug_when>
    <thetext>We seem to have managed so far well into feature completion. This would be nice 
to have, but implementing a full phase affecting many node types is risky for 
Java 8 GA and even for 4.4.

If testing reveals this to be a necessity will pull this up suitably.
See that javac completely ignores shape for potential compatibility
analysis. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=422810#c1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357428</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 19:10:07 -0500</bug_when>
    <thetext>We will use https://bugs.eclipse.org/bugs/show_bug.cgi?id=423429 to address
issues in the current implementation of shape analysis. I will add a link
to comment#0 from here, there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375249</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 22:49:04 -0400</bug_when>
    <thetext>*** Bug 430239 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449679</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-10 06:09:03 -0400</bug_when>
    <thetext>Stephan - FYI. Sasi will implement a new shape analysis from the ground
up that will not rely on analyzeCode() and so will not have all the attendant
problems we have been facing. This is likely to be completed in early M3.

The new analysis will analyze block bodied lambdas and gather

    - value/void compatibility information
    - return expressions,
    - thrown exception information.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453466</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-18 01:12:52 -0400</bug_when>
    <thetext>*** Bug 423429 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453469</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-18 01:21:11 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; *** Bug 423429 has been marked as a duplicate of this bug. ***

Please see this bug for some pertinent discussion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455565</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 21:42:15 -0400</bug_when>
    <thetext>Sasi, please attach a patch if you are ready with phase I implementation. TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455635</commentid>
    <comment_count>12</comment_count>
      <attachid>247325</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-24 03:44:04 -0400</bug_when>
    <thetext>Created attachment 247325
Alternate analysis of Lambda void/value compatibility - Phase1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455636</commentid>
    <comment_count>13</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-24 03:48:06 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; Sasi, please attach a patch if you are ready with phase I implementation. TIA
Attached phase 1 implementation of void/value compatibility determination.  Patch includes new tests in LambdaShapeTests for all (most) constructs modified in this patch.
All java8 tests pass</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471910</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 06:41:05 -0400</bug_when>
    <thetext>Sasi, I misspoke, we do need exception analysis as part of shape analysis.
After M3 ships, I&apos;ll start integrating this in phases, sorry for the delay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471911</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 06:43:03 -0400</bug_when>
    <thetext>i.e https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430 itself works now,
but if the exception is caught, we have a problem. See GRT1_8._testBug429430b</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472078</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 21:04:35 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #15)
&gt; i.e https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430 itself works now,
&gt; but if the exception is caught, we have a problem. See GRT1_8._testBug429430b

So this bug can be closed when we compile GRT1_8._testBug429430b
correctly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477612</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-06 00:59:01 -0500</bug_when>
    <thetext>Sasi, I am sorry I was too busy with the work on alternate integration
between overload resolution and type inference. In the last 6 weeks there
have massive changes on master. Could you please refresh the patch and
repost ? I am done with all planned items for M4 and this is the top
priority for me now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477629</commentid>
    <comment_count>18</comment_count>
      <attachid>248429</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-06 02:03:01 -0500</bug_when>
    <thetext>Created attachment 248429
Patch aligned to latest master

Patch aligned to latest master</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477630</commentid>
    <comment_count>19</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-06 02:04:13 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; Could you please refresh the patch and
&gt; repost ? 
Attached patch on latest master</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477639</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-06 02:14:41 -0500</bug_when>
    <thetext>Thanks Sasi. BTW, I misspoke earlier - we do need try block analysis.
see comment#14 onwards. You can make progress on that along with the
other tasks while I review and integrate this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479221</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 22:20:58 -0500</bug_when>
    <thetext>Thanks for the patch and the excellent set of tests Sasi. I made some
simplifying assumptions that allow us to get rid of the ShapeInfo type
being passed around: 

    - Basically, we can assume that the lambda body is free of structural
errors - that there are no unreachable statements, no shape errors of the
form where there is/are return statements with *and* without expressions.
Such errors where they exist can be ignored by this phase and will anyway
surface later.

    - So, if we assume the lambda is free of such structural intrinsic errors,
then the problem reduces to finding out if the last statement of the block
lambda in which there is no return statement of any form completes normally
or not.

This assumption allows for simplification in the solution. So essentially
the kernel of the solution is from your patch with certain complexities
removed.

Please review this commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=a52f17f8883dd812875c341ff752527a9011d961

carefully to see if I have oversimplified things at the expense of 
correctness. In particular, loops + try + break + continue + labels:
have I missed some nuance ? TIA.

I&apos;ll leave the bug open till the exception problem is resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479222</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 22:22:31 -0500</bug_when>
    <thetext>Stephan, this has non-trivial changes to LE. Please glance through.
isCompatibleWith() and resolveExpressionExpecting() (e.k.a getResolvedCopyForInference*()) look significantly cleaner.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479230</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-08 01:35:38 -0500</bug_when>
    <thetext>I seem to have released it with authorship claiming to be me - apologize.

A tiny follow on fix here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=47fec6f9bf985f83eeb8e1c5ce1ae9eaeda93048</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479419</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-08 13:22:32 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; (In reply to Srikanth Sankaran from comment #15)
&gt; &gt; i.e https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430 itself works now,
&gt; &gt; but if the exception is caught, we have a problem. See GRT1_8._testBug429430b
&gt; 
&gt; So this bug can be closed when we compile GRT1_8._testBug429430b
&gt; correctly.

I implemented support for precise exception inference and released the
changes with enabled tests here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=48a78bfcb529886e24e5f62b1bc56f7d3678e46a

This concludes this project - I think implementing exception analysis
in an alternate frame work is a lot of work to build, test and stabilize.
So, we will continue to use the time tested flow analysis enhanced to
support lambdas as this patch does.

Which means we will continue to operate on the twin constraints that
precise exception analysis is possible only when the lambda is free of
ignored mandatory errors and enclosing scopes don&apos;t have errors. This
can in the worst case scenario result in secondary incorrect errors being
reported - nothing we can&apos;t live with.

Marking as RESOLVED. Sasi, please prioritize the close scrutiny of the
two commits so we can consider this done done asap. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479878</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-10 02:54:48 -0500</bug_when>
    <thetext>Several more tests and a few bug fixes here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=3b34d278ba258a10a58d188a2047da908229b941.

Sasi, sorry for the piece meal updates.

For review here is what I would recommend:

(1) All overrides of Statement.doesNotCompleteNormally() and
Statement.completesByContinue() need to be studied closely along
with their called methods. 

(2) LE.isCompatibleWith() and LE.cachedResolvedCopy

(3) I have added about 50+ tests to LST. Could you pick a random sample
of 10 of the new tests and compare behavior against javac ? (I did this
myself, but there are many cases and it is worth having a double check point
to make sure bad expectations are not codified)

Of the random samples, it would be good to divide them equally between
positive and negative tests.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479881</commentid>
    <comment_count>26</comment_count>
      <attachid>248429</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-10 02:59:38 -0500</bug_when>
    <thetext>Comment on attachment 248429
Patch aligned to latest master

This patch minus the shape info abstraction is already released, obsoleting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479986</commentid>
    <comment_count>27</comment_count>
      <attachid>248538</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-10 07:17:20 -0500</bug_when>
    <thetext>Created attachment 248538
Alternate exception analysis - sketch

Stephan &amp; Sasi,

Here is a sketch of how alternate exception analysis would look like
if it ever becomes important to gather this information unimpeded by
enclosing scopes having errors.

This is just a sketch - so is unfinished and untested - I don&apos;t plan to
complete/release it. 

Just uploading a patch so if there is ever a need in future, you could
leverage this.

I think we can live with the constraints that precise exception information
will be there for inference to use only when the lambda body is free of
errors and enclosing scopes are free of errors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2482643</commentid>
    <comment_count>28</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-14 03:23:22 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; (1) All overrides of Statement.doesNotCompleteNormally() and
&gt; Statement.completesByContinue() need to be studied closely along
&gt; with their called methods.
&gt; 
I managed to find one problem with LabeledStatement &amp; Continue. Example at the end. Continuing investigation

&gt; (3) I have added about 50+ tests to LST. Could you pick a random sample
&gt; of 10 of the new tests and compare behavior against javac ? (I did this
&gt; myself, but there are many cases and it is worth having a double check point
&gt; to make sure bad expectations are not codified)
&gt; 
I have compared behavior of all tests with javac and all are in sync

Here&apos;s the example that we accept but that is rejected by javac with the following errors
TestFor.java:46: error: lambda body is neither value nor void compatible
                goo((x) -&gt; {
                    ^
TestFor.java:46: error: method goo in class TestFor cannot be applied to given types;
                goo((x) -&gt; {
                ^
  required: I
  found: (x)-&gt;{ int[...]0); }
  reason: argument mismatch; bad return type in lambda expression
      missing return value


package shapeAnalysis.testFor;

interface I { 
	String foo(int x) throws Exception; 
}
public class TestFor {

	void goo(I i) {}
	void test() {
		goo((x) -&gt; {
			int i = 0;
			outer:
			do
				{
					check:
						for(;true;) {
							if(false) continue outer;
							return &quot;&quot;;
						}			
				}while(++i &lt; 100);
		});
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2482837</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-14 05:50:33 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #28)
&gt; (In reply to comment #25)
&gt; &gt; (1) All overrides of Statement.doesNotCompleteNormally() and
&gt; &gt; Statement.completesByContinue() need to be studied closely along
&gt; &gt; with their called methods.
&gt; &gt; 
&gt; I managed to find one problem with LabeledStatement &amp; Continue. Example at
&gt; the end. Continuing investigation

Good one, thanks. I&apos;ll add a fix for that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2482840</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-14 05:58:51 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #29)
&gt; (In reply to Sasikanth Bharadwaj from comment #28)
&gt; &gt; (In reply to comment #25)
&gt; &gt; &gt; (1) All overrides of Statement.doesNotCompleteNormally() and
&gt; &gt; &gt; Statement.completesByContinue() need to be studied closely along
&gt; &gt; &gt; with their called methods.
&gt; &gt; &gt; 
&gt; &gt; I managed to find one problem with LabeledStatement &amp; Continue. Example at
&gt; &gt; the end. Continuing investigation
&gt; 
&gt; Good one, thanks. I&apos;ll add a fix for that.

Hmm, this one seems interesting. Eclipse really seems to think the lambda
is value compatible - i.e that control does not reach the } of the lambda.

Compare this:

// --
public class X {
	
	String test() {
		
			int i = 0;
			outer:
			do
				{
					check:
						for(;true;) {
							if(false) continue outer;
							return &quot;&quot;;
						}			
				}while(++i &lt; 100);
	}
}




javac does not compile this code, while eclipse does.

Sasi, arguments in favor/against either of the compilers for this case ? 
(because this pre 1.8 behavior carries over to lambdas)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483743</commentid>
    <comment_count>31</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-17 01:15:07 -0500</bug_when>
    <thetext>Here goes a slight variation of the previous example 

interface I { 
	String foo(int x) throws Exception; 
}
public class TestFor {

	void goo(I i) {}
	void test() {
		goo((x) -&gt; {
			int i = 0;
			outer:
			do
				{
					check:
						for(;true;) {
							if(i &lt; 50) continue outer;
						}			
				}while(++i &lt; 100);
		});
	}
}
This lambda is also treated as value compatible by eclipse and compiling this code gives out the error &quot;This method must return a result of type String&quot; while javac correctly identifies that the method isn&apos;t applicable .</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483745</commentid>
    <comment_count>32</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-17 01:21:29 -0500</bug_when>
    <thetext>(In reply to comment #30)
&gt; (In reply to Srikanth Sankaran from comment #29)
&gt;
&gt; Sasi, arguments in favor/against either of the compilers for this case ?
&gt; (because this pre 1.8 behavior carries over to lambdas)
Given that this code

public class X {
	
	String test() {
		
			int i = 0;
			outer:
			do
				{
					check:
						for(;true;) {
							if(false) return &quot;&quot;;
						}			
				}while(++i &lt; 100);
	}
}

is accepted by both compilers, I&apos;m inclined to say that the code in comment 30 should be rejected by both. Irrespective of it&apos;s reachability, the continue statement would render the body value incompatible</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484582</commentid>
    <comment_count>33</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-18 00:55:42 -0500</bug_when>
    <thetext>@Srikanth, I have completed the review and couldn&apos;t find anything else to report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484679</commentid>
    <comment_count>34</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-18 04:31:22 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #33)
&gt; @Srikanth, I have completed the review and couldn&apos;t find anything else to
&gt; report.

This was a review of the released state, right?
So, the patch in comment 27 is just a spare part in case we may need it in the future?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484707</commentid>
    <comment_count>35</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-18 05:12:05 -0500</bug_when>
    <thetext>(In reply to comment #34)
&gt; (In reply to Sasikanth Bharadwaj from comment #33)
&gt; &gt; @Srikanth, I have completed the review and couldn&apos;t find anything else to
&gt; &gt; report.
&gt; 
&gt; This was a review of the released state, right?
&gt; So, the patch in comment 27 is just a spare part in case we may need it in the
&gt; future?
Yes</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484723</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-18 05:30:09 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #35)
&gt; (In reply to comment #34)
&gt; &gt; (In reply to Sasikanth Bharadwaj from comment #33)
&gt; &gt; &gt; @Srikanth, I have completed the review and couldn&apos;t find anything else to
&gt; &gt; &gt; report.
&gt; &gt; 
&gt; &gt; This was a review of the released state, right?
&gt; &gt; So, the patch in comment 27 is just a spare part in case we may need it in the
&gt; &gt; future?
&gt; Yes

Yes, No plans to release this patch - it is still incomplete with TODOs called
out.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484937</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-18 08:47:55 -0500</bug_when>
    <thetext>Sasi, can you raise follow up tickets for the distinct issues from
comment#28 onwards ? These are ultra corner cases that can be dealt
with on a leisuredly basis. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2485293</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-18 20:36:51 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #37)
&gt; Sasi, can you raise follow up tickets for the distinct issues from
&gt; comment#28 onwards ? These are ultra corner cases that can be dealt
&gt; with on a leisuredly basis. TIA.

I myself raised: https://bugs.eclipse.org/bugs/show_bug.cgi?id=452192</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495170</commentid>
    <comment_count>39</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-10 07:38:01 -0500</bug_when>
    <thetext>Verified for 4.5 M4 with build I20141209-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247325</attachid>
            <date>2014-09-24 03:44:00 -0400</date>
            <delta_ts>2014-11-10 02:59:01 -0500</delta_ts>
            <desc>Alternate analysis of Lambda void/value compatibility - Phase1</desc>
            <filename>Phase1-Lambda-void-value-compatibility.patch</filename>
            <type>text/plain</type>
            <size>75646</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVNoYXBlVGVz
dHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVNoYXBlVGVzdHMu
amF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4xMzgwOWU5Ci0tLSAvZGV2
L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhU2hhcGVUZXN0
cy5qYXZhCkBAIC0wLDAgKzEsMTQ4MSBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENv
cHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
KyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9u
OworCitpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3Q7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFT
aGFwZVRlc3RzIGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CitzdGF0aWMgeworLy8J
CVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RSZWZlcmVuY2VFeHByZXNzaW9uSW5m
ZXJlbmNlMSJ9OworLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA1MCB9OworLy8JCVRF
U1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTEsIC0xIH07Cit9CitwdWJsaWMgTGFtYmRhU2hhcGVU
ZXN0cyhTdHJpbmcgbmFtZSkgeworCXN1cGVyKG5hbWUpOworfQorcHVibGljIHN0YXRpYyBUZXN0
IHN1aXRlKCkgeworCXJldHVybiBidWlsZE1pbmltYWxDb21wbGlhbmNlVGVzdFN1aXRlKHRlc3RD
bGFzcygpLCBGXzFfOCk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDAxKCkgeworCXRoaXMucnVuQ29u
Zm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2Ug
Vm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQkifVxuIiAr
IAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1ZvaWQoVm9p
ZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtc
biIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0ZXN0Lmdv
b1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAoZmFsc2UpIHtcbiIgKyAKKwkJCSIJCQkJ
eCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJ
CXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh0cnVlKTtcbiIgKyAKKwkJ
CSIJCX0pO1xuIiArIAorCQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
aWYgKHRydWUpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4i
ICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAor
CQkJIgkJCWZpbmFsIGJvb2xlYW4gdmFsID0gdHJ1ZTtcbiIgKworCQkJIgkJCWlmICh2YWwpIHtc
biIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9
KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWZpbmFs
IGJvb2xlYW4gdmFsID0gdHJ1ZTtcbiIgKworCQkJIgkJCWlmICh2YWwpO1xuIiArIAorCQkJIgkJ
fSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmaW5h
bCBib29sZWFuIHZhbCA9IGZhbHNlO1xuIiArCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJ
IgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJaWYgKHggIT0gbnVsbCkg
e1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJ
CX0pO1xuIiArIAorCQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJZmlu
YWwgYm9vbGVhbiB2YWwgPSB0cnVlO1xuIiArCisJCQkiCQkJaWYgKHggIT0gbnVsbCk7XG4iICsg
CisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCWlmIChmYWxzZSkge1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJ
CX0gZWxzZSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJiXCI7XG4iICsgCisJCQkiCQkJfVxuIiAr
IAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJ
CSIJCQlpZiAoZmFsc2UpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJ
CQl9IGVsc2U7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkg
LT4ge1xuIiArIAorCQkJIgkJCWZpbmFsIGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsKKwkJCSIJ
CQlpZiAodmFsKSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBl
bHNlIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImJcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWZpbmFsIGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsKKwkJCSIJCQlpZiAodmFsKSB7XG4iICsg
CisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBlbHNlO1xuIiArIAorCQkJIgkJ
fSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAo
eCAhPSBudWxsKSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBl
bHNlIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImJcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWlmICh4ICE9IG51bGwpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJ
CQl9IGVsc2U7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIs
CisJCX0pOworfQorcHVibGljIHZvaWQgdGVzdDAwMigpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0
KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiAr
IAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lk
IHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZBTFNFID0gZmFsc2U7XG4iICsg
CisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZih0cnVlKSByZXR1cm4gXCJcIjtc
biIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZihmYWxzZSkgcmV0dXJuIFwiXCI7XG4i
ICsgCisJCQkiCQkJZWxzZSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJ
IgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHJldHVybiBcIlwiO1xuIiAr
IAorCQkJIgkJCWVsc2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJ
CWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKEZBTFNFKSByZXR1cm4gXCJcIjtcbiIgKyAK
KwkJCSIJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQln
b28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZighRkFMU0UpIHJldHVybiBcIlwiO1xuIiArIAor
CQkJIgkJCWVsc2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCWdv
bygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKCFGQUxTRSkgcmV0dXJuIFwiXCI7XG4iICsgCisJ
CQkiCQkJZWxzZSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDMoKSB7CisJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRl
cmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQki
fVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1Zv
aWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFy
Z3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0
ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAodHJ1ZSkge1xuIiArIAorCQkJ
IgkJCQlyZXR1cm4gMDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJ
CSIJfVxuIiArIAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAt
PiB7XG4iICsgCisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQo
Vm9pZEkpIGluIHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCSIJcmV0dXJuIDA7XG4iICsg
CisJCSIJXl5eXl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZh
bHVlXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDQoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4i
ICsgCisJCQkifVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3Ry
aW5nIGdvb1ZvaWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsg
CisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmaW5hbCBib29sZWFu
IHZhbCA9IHRydWU7XG4iICsgCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJIgkJCQlyZXR1
cm4geDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsg
CisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQoVm9pZEkpIGlu
IHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8g
dHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIJcmV0dXJuIHg7XG4iICsgCisJCSIJXl5e
Xl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZhbHVlXG4iICsg
CisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDUoKSB7CisJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRl
cmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQki
fVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1Zv
aWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFy
Z3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0
ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAoeCAhPSBudWxsKSB7XG4iICsg
CisJCQkiCQkJCXJldHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1ZvaWQo
KHgpIC0+IHtcbiIgKyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
Vm9pZChWb2lkSSkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFy
Z3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIglyZXR1cm4gMDtc
biIgKyAKKwkJIgleXl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0dXJu
IGEgdmFsdWVcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAw
NigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmph
dmEiLAorCQkJImludGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmluZyBz
KTtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1Ymxp
YyBTdHJpbmcgZ29vVm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3QoKTtc
biIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmIChmYWxz
ZSkge1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX0gZWxzZSB7XG4i
ICsgCisJCQkiCQkJCXJldHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1Zv
aWQoKHgpIC0+IHtcbiIgKyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vVm9pZChWb2lkSSkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkJIglyZXR1cm4g
MDtcbiIgKyAKKwkJIgleXl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0
dXJuIGEgdmFsdWVcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVz
dDAwNygpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJY
LmphdmEiLAorCQkJImludGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmlu
ZyBzKTtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1
YmxpYyBTdHJpbmcgZ29vVm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxu
IiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3Qo
KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWZpbmFs
IGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsgCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJ
IgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX0gZWxzZSB7XG4iICsgCisJCQkiCQkJCXJl
dHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIg
KyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vVm9pZChWb2lkSSkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxu
byB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKKwkJIglyZXR1cm4gMDtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0dXJuIGEgdmFsdWVcbiIg
KyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAwOCgpIHsKKwl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImlu
dGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmluZyBzKTtcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1YmxpYyBTdHJpbmcgZ29v
Vm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3QoKTtcbiIgKyAKKwkJCSIJ
CXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh4ICE9IG51bGwpIHtcbiIg
KyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9IGVsc2Uge1xuIiArIAorCQkJ
IgkJCQlyZXR1cm4gMDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJ
CSIJfVxuIiArIAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAt
PiB7XG4iICsgCisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQo
Vm9pZEkpIGluIHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIDA7XG4iICsg
CisJCSIJXl5eXl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZh
bHVlXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDkoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAK
KwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJ
IGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWZpbmFsIGJvb2xl
YW4gRkFMU0UgPSBmYWxzZTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWlmKEZBTFNFKSByZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5e
XG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDEwKCkgeworCXRoaXMucnVuTmVnYXRp
dmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkg
e1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQkifVxuIiArIAorCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJ
Igl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlp
Zih0cnVlKTtcbiIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7
XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+
IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBl
IFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4g
e30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTEoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAK
KwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJ
IGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4g
e1xuIiArIAorCQkJIgkJCWlmKGZhbHNlKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCQllbHNl
O1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1Ymxp
YyB2b2lkIHRlc3QwMTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBm
b28oaW50IHgpOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSByZXR1cm4gXCJcIjtc
biIgKyAKKwkJCSIJCQllbHNlO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTMoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4i
ICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKHgg
PiAwKTtcbiIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7XG4i
ICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtc
biIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFgg
aXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30p
XG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTQoKSB7CisJ
dGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJ
CSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkp
IHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xu
IiArIAorCQkJIgkJCWlmKHggPCAwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDE1KCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQki
aW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQki
fVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7
fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZB
TFNFID0gZmFsc2U7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZigh
RkFMU0UpIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTYoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4i
ICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJCQki
fVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7
fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZB
TFNFID0gZmFsc2U7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHt3aGlsZSAoRkFMU0UpIHRocm93
IG5ldyBFeGNlcHRpb24oKTt9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJfSwK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxu
IiArIAorCQkiCWdvbygoeCkgLT4ge3doaWxlIChGQUxTRSkgdGhyb3cgbmV3IEV4Y2VwdGlvbigp
O30pO1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5
cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAt
PiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAxNygp
IHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dz
IEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWdvbygoeCkgLT4ge3doaWxlIChmYWxzZSkgcmV0dXJuIFwiXCI7fSk7XG4iICsgCisJ
CQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHt3aGlsZSAo
ZmFsc2UpIHJldHVybiBcIlwiO30pO1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhv
ZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50
cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVi
bGljIHZvaWQgdGVzdDAxOCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5n
IGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge3doaWxlICh4ID4gMCkge1xuIiAr
IAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fSBlbHNlIHticmVhazt9XG4iICsgCisJ
CQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJ
Z29vKCh4KSAtPiB7d2hpbGUgKHggPiAwKSB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgdm9pZCB0ZXN0MDE5KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglT
dHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJ
CSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7d2hpbGUgKHggPiAwKSB7
XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkiCQl9fSk7
XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+
IHt3aGlsZSAoeCA+IDApIHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
KEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8
bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2
b2lkIHRlc3QwMjAoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhp
bnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVz
dCgpIHtcbiIgKyAKKwkJCSIJCWZpbmFsIGJvb2xlYW4gVFJVRSA9IHRydWU7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHt3aGlsZSAoVFJVRSkge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7U3lz
dGVtLm91dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJCX19KTtcbiIgKyAKKwkJCSIJCWdvbygo
eCkgLT4ge3doaWxlICh0cnVlKSB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtTeXN0ZW0ub3V0
LnByaW50bG4oKTt9XG4iICsgCisJCQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQki
fVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMjEoKSB7CisJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7
XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJ
CQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBp
KSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtc
biIgKyAKKwkJCSIJCQlpbnQgaSA9IDEwMDtcbiIgKyAKKwkJCSIJCQlvdXRlcjogd2hpbGUoeCA+
IDApIHtcbiIgKyAKKwkJCSIJCQkJaW5uZXI6IHdoaWxlKGkgPiAwKSB7XG4iICsgCisJCQkiCQkJ
CWlmKC0taSA+IDUwKSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJ
CQkJfVxuIiArIAorCQkJIgkJCQlpZihpID4gOTApIHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91
dGVyO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAor
CQkJIgkJCQl9XG4iICsgCisJCQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxu
IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJU
aGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUg
YXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7
Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDIyKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQki
CXZvaWQgZm9vKFN0cmluZyBzKSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgem9vKEkgaSkge31cbiIgKyAK
KwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBGQUxTRSA9IGZh
bHNlO1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTtcbiIgKyAKKwkJCSIJ
CXpvbygoeCkgLT4ge3doaWxlIChUUlVFKSB0aHJvdyBuZXcgRXhjZXB0aW9uKCk7fSk7XG4iICsg
CisJCQkiCQl6b28oKHgpIC0+IHt3aGlsZSAoIUZBTFNFKSByZXR1cm4gO30pO1xuIiArIAorCQkJ
IgkJem9vKCh4KSAtPiB7d2hpbGUgKHgubGVuZ3RoKCkgPiAwKSB7XG4iICsgCisJCQkiCQkJaWYo
eC5sZW5ndGgoKSA+IDApIHtyZXR1cm4gO30gZWxzZSB7YnJlYWs7fVxuIiArIAorCQkJIgkJCX19
KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge3doaWxlICh4Lmxlbmd0aCgpID4gMCkge1xuIiAr
IAorCQkJIgkJCWlmKHgubGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9XG4iICsgCisJCQkiCQkJfX0p
O1xuIiArIAorCQkJIgkJem9vKCh4KSAtPiB7d2hpbGUgKHRydWUpIHtcbiIgKyAKKwkJCSIJCQlp
Zih4Lmxlbmd0aCgpID4gMCkge1N5c3RlbS5vdXQucHJpbnRsbigpO31cbiIgKyAKKwkJCSIJCQl9
fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+IHt3aGlsZSAoVFJVRSkge1xuIiArIAorCQkJIgkJ
CWlmKHgubGVuZ3RoKCkgPiAwKSB7U3lzdGVtLm91dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJ
CX19KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWludCBpID0gMTAw
O1xuIiArIAorCQkJIgkJCW91dGVyOiB3aGlsZSh4Lmxlbmd0aCgpID4gMCkge1xuIiArIAorCQkJ
IgkJCQlpbm5lcjogd2hpbGUoaSA+IDApIHtcbiIgKyAKKwkJCSIJCQkJaWYoLS1pID4gNTApIHtc
biIgKyAKKwkJCSIJCQkJCWJyZWFrIGlubmVyIDtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJ
IgkJCQlpZihpID4gOTApIHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91dGVyO1xuIiArIAorCQkJ
IgkJCQl9XG4iICsgCisJCQkiCQkJCXJldHVybiA7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJ
CSIJCQl9fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0pOworfQorcHVibGlj
IHZvaWQgdGVzdDAyMygpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9v
KGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0
ZXN0KCkge1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBGQUxTRSA9IGZhbHNlO1xuIiArIAor
CQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4g
e2RvIHt0aHJvdyBuZXcgRXhjZXB0aW9uKCk7fXdoaWxlIChGQUxTRSk7fSk7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtkbyB7IHJldHVybiBcIlwiO313aGlsZSAoZmFsc2UpO30pO1xuIiArIAor
CQkJIgkJZ29vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7U3lzdGVtLm91
dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJCX13aGlsZSAodHJ1ZSk7fSk7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtkbyB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtTeXN0ZW0ub3V0LnBy
aW50bG4oKTt9XG4iICsgCisJCQkiCQkJfXdoaWxlIChUUlVFKTt9KTtcbiIgKyAKKwkJCSIJfVxu
IiArIAorCQkJIn1cbiIKKwkJfSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDI0KCkgeworCXRoaXMu
cnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50
ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9u
O1xuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZv
aWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29v
KCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fSBlbHNl
IHticmVhazt9XG4iICsgCisJCQkiCQkJfXdoaWxlICh4ID4gMCk7fSk7XG4iICsgCisJCQkiCX1c
biIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtkbyB7XG4iICsgCisJ
CSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBh
cHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDI1KCkgeworCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJm
YWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xu
IiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQg
Z29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29vKCh4
KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fVxuIiArIAor
CQkJIgkJCX13aGlsZSAoeCA+IDApO30pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkiCV5eXlxuIiArIAorCQki
VGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIp
OworfQorcHVibGljIHZvaWQgdGVzdDAyNigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJ
bmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJ
CSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsg
CisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsg
CisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCWludCBpID0gMTAwO1xuIiArIAorCQkJIgkJCW91dGVyOiBkbyB7XG4iICsgCisJCQkiCQkJ
CWlubmVyOiBkbyB7XG4iICsgCisJCQkiCQkJCWlmKC0taSA+IDUwKSB7XG4iICsgCisJCQkiCQkJ
CQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJCQlpZihpID4gOTAp
IHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91dGVyO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJ
CQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQl9d2hpbGUoaSA+IDApO1xuIiArIAor
CQkJIgkJCX13aGlsZSh4ID4gMCk7fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJ
CX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBt
ZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30K
K3B1YmxpYyB2b2lkIHRlc3QwMjcoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJdm9p
ZCBmb28oU3RyaW5nIHMpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJCQkifVxuIiArIAorCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCB6b28oSSBpKSB7fVxuIiArIAorCQkJ
Igl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+IHtkbyB7XG4iICsgCisJCQki
CQkJaWYoeC5sZW5ndGgoKSA+IDApIHtTeXN0ZW0ub3V0LnByaW50bG4oKTt9XG4iICsgCisJCQki
CQkJfXdoaWxlICh0cnVlKTt9KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge2RvIHt0aHJvdyBu
ZXcgRXhjZXB0aW9uKCk7fXdoaWxlIChmYWxzZSk7fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+
IHtkbyB7IHJldHVybiA7fXdoaWxlIChmYWxzZSk7fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+
IHtkbyB7IGNvbnRpbnVlIDt9d2hpbGUgKHRydWUpO30pO1xuIiArIAorCQkJIgkJem9vKCh4KSAt
PiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHgubGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9IGVsc2Ug
e2JyZWFrO31cbiIgKyAKKwkJCSIJCQl9d2hpbGUgKHgubGVuZ3RoKCkgPiAwKTtcbiIgKyAKKwkJ
CSIJCX0pO1xuIiArIAorCQkJIgkJem9vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHgu
bGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9XG4iICsgCisJCQkiCQkJfXdoaWxlICh4Lmxlbmd0aCgp
ID4gMCk7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge1xuIiArIAor
CQkJIgkJaW50IGkgPSAxMDA7XG4iICsgCisJCQkiCQlvdXRlcjogZG8ge1xuIiArIAorCQkJIgkJ
CWlubmVyOiBkbyB7XG4iICsgCisJCQkiCQkJaWYoLS1pID4gNTApIHtcbiIgKyAKKwkJCSIJCQkJ
YnJlYWsgaW5uZXIgO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCQlpZihpID4gOTApIHtc
biIgKyAKKwkJCSIJCQkJYnJlYWsgb3V0ZXI7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJ
CXJldHVybiA7XG4iICsgCisJCQkiCQkJfXdoaWxlKGkgPiAwKTtcbiIgKyAKKwkJCSIJCX13aGls
ZSh4Lmxlbmd0aCgpID4gMCk7fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0p
OworfQorcHVibGljIHZvaWQgdGVzdDAyOCgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQlu
ZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJ
CSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiAr
IAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZBTFNFID0g
ZmFsc2U7IFxuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTsgXG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO1RSVUU7KXtcbiIgKyAKKwkJCSIJ
CQl9fSk7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoaW50IGkg
PSAwO2kgPCAxMDA7IGkrPSAxMCl7XG4iICsgCisJCQkiCQkJCXN3aXRjaChpKSB7XG4iICsgCisJ
CQkiCQkJCWNhc2UgOTA6IHtcbiIgKyAKKwkJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRsbigpO1xu
IiArIAorCQkJIgkJCQkJYnJlYWs7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJY2Fz
ZSA4MDoge1xuIiArIAorCQkJIgkJCQkJaWYoeCA+IDEwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJ
CSIJCQkJCWJyZWFrO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCWRlZmF1bHQ6XG4i
ICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJ
CX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJ
IgkJXG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO1RSVUU7KXtc
biIgKyAKKwkJCSIJCQkJaWYoeCA8IDEwMCkgcmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQkJCWVs
c2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9fSk7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+
IHtcbiIgKyAKKwkJCSIJCQlmb3IoO3ggPiAwOyl7XG4iICsgCisJCQkiCQkJCWlmKHggPCAxMDAp
IHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJ
IgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMjkoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3Mg
RXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWZpbmFsIGJvb2xlYW4gRkFMU0UgPSBmYWxzZTsgXG4iICsgCisJCQkiCQlnb28oKHgp
IC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO0ZBTFNFOyl7XG4iICsgCisJCQkiCQkJfX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDMwKCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQki
aW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2Vw
dGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJ
CSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO3ggPiAwOyl7XG4iICsgCisJCQkiCQkJ
CWlmKHggPCAxMDApIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQllbHNlIHJldHVybiBudWxs
O1xuIiArIAorCQkJIgkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4i
ICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9k
IGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
ICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJs
aWMgdm9pZCB0ZXN0MDMxKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5n
W10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5n
IGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2
b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3Io
aW50IGkgPSAwO2kgPCAxMDA7IGkrPSAxMCl7XG4iICsgCisJCQkiCQkJCXN3aXRjaChpKSB7XG4i
ICsgCisJCQkiCQkJCWNhc2UgOTA6IHtcbiIgKyAKKwkJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRs
bigpO1xuIiArIAorCQkJIgkJCQkJYnJlYWs7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJ
CQkJY2FzZSA4MDoge1xuIiArIAorCQkJIgkJCQkJaWYoeCA+IDEwKSByZXR1cm4gbnVsbDtcbiIg
KyAKKwkJCSIJCQkJCWJyZWFrO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCWRlZmF1
bHQ6XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAor
CQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgdm9pZCB0ZXN0MDMyKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJ
U3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAor
CQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJ
CQlvdXRlcjogZm9yKGludCBpID0gMDtpIDwgMTAwOyBpKz0gMTApe1xuIiArIAorCQkJIgkJCQlp
bm5lciA6IGZvcihpbnQgaiA9IHg7IGogPiAwOyBqLS0pIHtcbiIgKyAKKwkJCSIJCQkJCXN3aXRj
aChpKSB7XG4iICsgCisJCQkiCQkJCQljYXNlIDkwOiB7XG4iICsgCisJCQkiCQkJCQkJU3lzdGVt
Lm91dC5wcmludGxuKCk7XG4iICsgCisJCQkiCQkJCQkJYnJlYWsgaW5uZXI7XG4iICsgCisJCQki
CQkJCQl9XG4iICsgCisJCQkiCQkJCQljYXNlIDgwOiB7XG4iICsgCisJCQkiCQkJCQkJaWYoeCA+
IDEwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCQkJCQlicmVhayBvdXRlcjtcbiIgKyAKKwkJ
CSIJCQkJCX1cbiIgKyAKKwkJCSIJCQkJCWRlZmF1bHQ6XG4iICsgCisJCQkiCQkJCQkJcmV0dXJu
IFwiXCI7XG4iICsgCisJCQkiCQkJCQl9XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJ
XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJ
CSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAK
KwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9y
IHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0t
XG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzMoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgK
KwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsg
CisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1c
biIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31c
biIgKyAKKwkJCSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygo
eCkgLT4ge1xuIiArIAorCQkJIgkJCWZvcihTdHJpbmcgc3RyIDogc3Rycyl7XG4iICsgCisJCQki
CQkJCWlmKHN0ci5sZW5ndGgoKSA+IDApIHtcbiIgKyAKKwkJCSIJCQkJCXJldHVybiBcInllc1wi
O1xuIiArIAorCQkJIgkJCQl9IGVsc2Uge1xuIiArIAorCQkJIgkJCQkJcmV0dXJuIFwibm9cIjtc
biIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVs
bDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQki
CQkJZm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJcmV0dXJuIFwibm9cIjtc
biIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQkJcmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQl9
KTtcbiIgKyAKKwkJCSIJCVxuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
Zm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJaWYoc3RyLmxlbmd0aCgpID4g
MCkgYnJlYWs7XG4iICsgCisJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbigpO1xuIiArIAorCQkJ
IgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzQoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3Mg
RXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBz
dHJzKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoU3RyaW5n
IHN0ciA6IHN0cnMpe1xuIiArIAorCQkJIgkJCQlpZihzdHIubGVuZ3RoKCkgPiAwKSB7XG4iICsg
CisJCQkiCQkJCQlyZXR1cm4gXCJ5ZXNcIjtcbiIgKyAKKwkJCSIJCQkJfSBlbHNlIHtcbiIgKyAK
KwkJCSIJCQkJCXJldHVybiBcIm5vXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQl9
XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJfSwKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiAr
IAorCQkiCWdvbygoeCkgLT4ge1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBn
b28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAo
KDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGlj
IHZvaWQgdGVzdDAzNSgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0cmluZyBm
b28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9p
ZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAor
CQkJIgkJCWZvcihTdHJpbmcgc3RyIDogc3Rycyl7XG4iICsgCisJCQkiCQkJCXJldHVybiBcIm5v
XCI7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzYoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxu
IiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkp
IHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgCisJCQkiCQln
b28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoU3RyaW5nIHN0ciA6IHN0cnMpe1xuIiArIAor
CQkJIgkJCQlzd2l0Y2goc3RyLmxlbmd0aCgpKSB7XG4iICsgCisJCQkiCQkJCWNhc2UgOToge1xu
IiArIAorCQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKCk7XG4iICsgCisJCQkiCQkJCQlyZXR1
cm4gXCJuaW5lXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJY2FzZSAxOiB7XG4i
ICsgCisJCQkiCQkJCQlpZih4ID4gMTApIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJCQkJcmV0
dXJuIFwib25lXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJZGVmYXVsdDpcbiIg
KyAKKwkJCSIJCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJ
fVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1Ymxp
YyB2b2lkIHRlc3QwMzcoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcg
Zm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAK
KwkJCSIJCQlvdXRlcjogZm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJaW5u
ZXIgOiBmb3IoaW50IGogPSB4OyBqID4gMDsgai0tKSB7XG4iICsgCisJCQkiCQkJCQlzd2l0Y2go
c3RyLmxlbmd0aCgpKSB7XG4iICsgCisJCQkiCQkJCQljYXNlIDk6IHtcbiIgKyAKKwkJCSIJCQkJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oKTtcbiIgKyAKKwkJCSIJCQkJCQlicmVhayBpbm5lcjtcbiIg
KyAKKwkJCSIJCQkJCX1cbiIgKyAKKwkJCSIJCQkJCWNhc2UgODoge1xuIiArIAorCQkJIgkJCQkJ
CWlmKHggPiAxMCkgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQkJCQkJYnJlYWsgb3V0ZXI7XG4i
ICsgCisJCQkiCQkJCQl9XG4iICsgCisJCQkiCQkJCQlkZWZhdWx0OlxuIiArIAorCQkJIgkJCQkJ
CXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQkJfVxuIiArIAorCQkJIgkJCQl9XG4iICsgCisJ
CQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJ
CX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBt
ZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30K
K3B1YmxpYyB2b2lkIHRlc3QwMzgoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0
cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJ
CSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xu
IiArIAorCQkJIgkJCXN3aXRjaCh4KSB7XG4iICsgCisJCQkiCQkJY2FzZSAwIDogaWYoeCA+IDEw
KSByZXR1cm4gXCI+MTBcIjtcbiIgKyAKKwkJCSIJCQljYXNlIDE6IHJldHVybiBcIjFcIjtcbiIg
KyAKKwkJCSIJCQlkZWZhdWx0OiByZXR1cm4gXCItMVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAK
KwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJU3RyaW5n
IHN0ciA9IFwiXCI7XG4iICsgCisJCQkiCQkJc3dpdGNoKHgpIHtcbiIgKyAKKwkJCSIJCQljYXNl
IDAgOiBpZih4ID4gMTApIGJyZWFrOyBlbHNlIHtzdHIgPSBcIjBcIjsgYnJlYWs7fVxuIiArIAor
CQkJIgkJCWNhc2UgMTogc3RyID0gXCIxXCI7YnJlYWs7XG4iICsgCisJCQkiCQkJZGVmYXVsdDog
YnJlYWs7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJCXJldHVybiBzdHI7XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCVN0cmluZyBz
dHIgPSBcIlwiO1xuIiArIAorCQkJIgkJCXN3aXRjaCh4KXt9XG4iICsgCisJCQkiCQkJcmV0dXJu
IHN0cjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArICAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJ
fSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDM5KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAor
CQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAK
KwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxu
IiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxu
IiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10gc3Rycykge1xuIiArIAorCQkJIgkJZ29vKCh4
KSAtPiB7XG4iICsgCisJCQkiCQkJc3dpdGNoKHgpIHtcbiIgKyAKKwkJCSIJCQljYXNlIDAgOiBp
Zih4ID4gMTApIHJldHVybiBcIj4xMFwiO1xuIiArIAorCQkJIgkJCWNhc2UgMTogcmV0dXJuIFwi
MVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArICAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkiCWdvbygoeCkgLT4ge1xuIiArIAorCQkiCV5eXlxu
IiArIAorCQkiVGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0t
LS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDA0MCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsg
XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAor
CQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkg
aSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJ
CWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCVN0cmluZyBzdHIgPSBcIlwiO1xuIiArIAorCQkJ
IgkJCXN3aXRjaCh4KSB7XG4iICsgCisJCQkiCQkJY2FzZSAwIDogaWYoeCA+IDEwKSBicmVhazsg
ZWxzZSB7c3RyID0gXCIwXCI7IGJyZWFrO31cbiIgKyAKKwkJCSIJCQljYXNlIDE6IHN0ciA9IFwi
MVwiO2JyZWFrO1xuIiArIAorCQkJIgkJCWRlZmF1bHQ6IGJyZWFrO1xuIiArIAorCQkJIgkJCX1c
biIgKyAKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSIt
LS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAK
KwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
KEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8
bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2
b2lkIHRlc3QwNDEoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0cmluZyBmb28o
aW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0
ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCXRyeSB7XG4iICsgCisJCQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCX0gZmlu
YWxseSB7XG4iICsgCisJCQkiCQkJCVxuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQki
CQkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCk7XG4iICsgCisJCQkiCQkJCX0gZmluYWxseSB7XG4i
ICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7
XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlpZih4ID4gMCkgXG4iICsgCisJ
CQkiCQkJCQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIJCQkJfSBj
YXRjaCAoTnVsbFBvaW50ZXJFeGNlcHRpb24gZSkge3JldHVybiBudWxsO30gXG4iICsgCisJCQki
CQkJCWNhdGNoKENsYXNzQ2FzdEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAK
KwkJCSIJCQkJZmluYWxseSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJ
CSIJCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQlcbiIgKyAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIKKwkJfSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDQyKCkgeworCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJm
YWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsg
XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9p
ZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10gc3Rycykge1xuIiAr
ICAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCXRyeSB7XG4iICsgCisJCQkiCQkJ
CWlmKHggPiAwKSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJ
fVxuIiArIAorCQkJIgkJCX0gZmluYWxseSB7fVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQki
CX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJ
IgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFw
cGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJ
CSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwNDMoKSB7CisJdGhpcy5ydW5O
ZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZh
Y2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBc
biIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lk
IGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsg
IAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJdHJ5IHtcbiIgKyAKKwkJCSIJCQkJ
cmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQkJfWNhdGNoIChFeGNlcHRpb24gZSkge31cbiIgKyAK
KwkJCSIJCQlmaW5hbGx5IHtcbiIgKyAKKwkJCSIJCQkJXG4iICsgCisJCQkiCQkJfVxuIiArIAor
CQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0t
LS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIgln
b28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlw
ZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRl
c3QwNDQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQki
WC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4
KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNz
IFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChT
dHJpbmdbXSBzdHJzKSB7XG4iICsgIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
dHJ5IHtcbiIgKyAKKwkJCSIJCQkJLy9pZih4ID4gMCkgXG4iICsgCisJCQkiCQkJCQl0aHJvdyBu
ZXcgUnVudGltZUV4Y2VwdGlvbigpO1xuIiArIAorCQkJIgkJCX0gY2F0Y2ggKE51bGxQb2ludGVy
RXhjZXB0aW9uIGUpIHtyZXR1cm4gbnVsbDt9IFxuIiArIAorCQkJIgkJCWNhdGNoKENsYXNzQ2Fz
dEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQl0cnkge1xuIiArIAorCQkJIgkJCQlpZih4
ID4gMCkgXG4iICsgCisJCQkiCQkJCQl0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigpO1xuIiAr
IAorCQkJIgkJCX0gY2F0Y2ggKE51bGxQb2ludGVyRXhjZXB0aW9uIGUpIHtyZXR1cm4gbnVsbDt9
IFxuIiArIAorCQkJIgkJCWNhdGNoKENsYXNzQ2FzdEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQki
CQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0s
CisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylc
biIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRo
b2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1
YmxpYyB2b2lkIHRlc3QwNDUoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJp
bmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQki
CXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCQkiCQkJdHJ5IHtcbiIgKyAKKwkJCSIJCQkJaWYoeCA+IDApIFxuIiArIAorCQkJIgkJ
CQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIJCQl9IGNhdGNoIChO
dWxsUG9pbnRlckV4Y2VwdGlvbiBlKSB7cmV0dXJuIG51bGw7fSBcbiIgKyAKKwkJCSIJCQljYXRj
aChDbGFzc0Nhc3RFeGNlcHRpb24gYykge1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0p
O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAt
PiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlw
ZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+
IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDQ2KCkg
eworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIs
CisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dz
IEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10g
c3Rycykge1xuIiArICAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh0cnVl
KSB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlpZih4ID4gMClcbiIgKyAK
KwkJCSIJCQkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCk7XG4iICsgCisJCQkiCQkJCX0gZmluYWxs
eSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAor
CQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKKwlyZXR1cm4gTGFtYmRhU2hhcGVU
ZXN0cy5jbGFzczsKK30KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1Rlc3RBbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwu
amF2YQppbmRleCA2NzM4MWZiLi5lYWJmNmQxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vVGVzdEFsbC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE0Niw2ICsxNDYsNyBAQAog
CXNpbmNlXzFfOC5hZGQoUmVwZWF0YWJsZUFubm90YXRpb25UZXN0LmNsYXNzKTsKIAlzaW5jZV8x
XzguYWRkKEdlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmNsYXNzKTsKIAlzaW5jZV8xXzguYWRk
KFVuaWNvZGUxOFRlc3QuY2xhc3MpOworCXNpbmNlXzFfOC5hZGQoTGFtYmRhU2hhcGVUZXN0cy5j
bGFzcyk7CiAKIAkvLyBCdWlsZCBmaW5hbCB0ZXN0IHN1aXRlCiAJVGVzdFN1aXRlIGFsbCA9IG5l
dyBUZXN0U3VpdGUoVGVzdEFsbC5jbGFzcy5nZXROYW1lKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFz
c2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uT25CcmFuY2hTdGF0ZW1lbnRMYWJlbC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29k
ZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uT25CcmFuY2hTdGF0ZW1lbnRMYWJlbC5qYXZhCmlu
ZGV4IDFjOTQwZDUuLmYwMTdmNjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
ZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29t
cGxldGlvbk9uQnJhbmNoU3RhdGVtZW50TGFiZWwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2NvbXBs
ZXRlL0NvbXBsZXRpb25PbkJyYW5jaFN0YXRlbWVudExhYmVsLmphdmEKQEAgLTQ5LDQgKzQ5LDEw
IEBACiAJCXJldHVybiBvdXRwdXQuYXBwZW5kKCI+OyIpOyAvLyROT04tTkxTLTEkCiAJfQogCisJ
QE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJ
bmZvIHNoYXBlSW5mbykgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJhdGVkIG1ldGhvZCBzdHViCisJ
CXJldHVybiBmYWxzZTsKKwl9CisKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpp
bmRleCBiMmZlMDQzLi4xZGUwNzIyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25F
eHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZh
CkBAIC02OTgsNyArNjk4LDExIEBACiBwdWJsaWMgYm9vbGVhbiBzdGF0ZW1lbnRFeHByZXNzaW9u
KCkgewogCXJldHVybiB0cnVlOwogfQotCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRvZXNO
b3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwkvLworCXJldHVybiBm
YWxzZTsKK30KIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCiBwdWJsaWMgTWV0aG9kQmlu
ZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3Jz
LCBTY29wZSBzY29wZSkgewogCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBu
dWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3Nl
cnRTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzZXJ0U3RhdGVtZW50LmphdmEKaW5kZXgg
MTdjYmMwMS4uNTZkNWZkMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NlcnRTdGF0ZW1lbnQu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2VydFN0YXRlbWVudC5qYXZhCkBAIC0yMTMsNCArMjEz
LDE3IEBACiAJfQogCXJldHVybiBvdXRwdXQuYXBwZW5kKCc7Jyk7CiB9CisKK0BPdmVycmlkZQor
cHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5m
bykgeworCUNvbnN0YW50IGNzdCA9IHRoaXMuYXNzZXJ0RXhwcmVzc2lvbi5vcHRpbWl6ZWRCb29s
ZWFuQ29uc3RhbnQoKTsKKwlib29sZWFuIGlzT3B0aW1pemVkVHJ1ZUFzc2VydGlvbiA9IGNzdCAh
PSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IHRydWU7CisJ
Ym9vbGVhbiBpc09wdGltaXplZEZhbHNlQXNzZXJ0aW9uID0gY3N0ICE9IENvbnN0YW50Lk5vdEFD
b25zdGFudCAmJiBjc3QuYm9vbGVhblZhbHVlKCkgPT0gZmFsc2U7CisJaWYoaXNPcHRpbWl6ZWRU
cnVlQXNzZXJ0aW9uKQorCQlyZXR1cm4gZmFsc2U7CisJaWYoaXNPcHRpbWl6ZWRGYWxzZUFzc2Vy
dGlvbikKKwkJcmV0dXJuIHRydWU7CisJLy8gVE9ETyAtIGhvdyBkbyB3ZSBrbm93Pz8KKwlyZXR1
cm4gZmFsc2U7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCmluZGV4IDY5OWI0Y2YuLjdmMzI3NmMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdu
bWVudC5qYXZhCkBAIC0yNjcsNCArMjY3LDkgQEAKIHB1YmxpYyBib29sZWFuIHN0YXRlbWVudEV4
cHJlc3Npb24oKSB7CiAJcmV0dXJuIHRydWU7CiB9CitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFu
IGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwkvLworCXJl
dHVybiBmYWxzZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQmxvY2suamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQmxvY2suamF2YQppbmRleCAxOWM5MTJjLi42MzcwM2FhIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Jsb2NrLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9CbG9jay5qYXZhCkBAIC0xLDUg
KzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKQEAgLTE1Miw0ICsxNTIsMTUgQEAKIAkJdGhpcy5zdGF0ZW1lbnRzW3RoaXMuc3Rh
dGVtZW50cy5sZW5ndGggLSAxXS5icmFuY2hDaGFpblRvKGxhYmVsKTsKIAl9CiB9CitAT3ZlcnJp
ZGUKK3B1YmxpYyBib29sZWFuIGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFw
ZUluZm8pIHsKKwlpZiAoKHRoaXMuc3RhdGVtZW50cyA9PSBudWxsKSB8fCB0aGlzLnN0YXRlbWVu
dHMubGVuZ3RoID09IDApCisJCXJldHVybiBmYWxzZTsKKwlib29sZWFuIGJsb2NrQ29tcGxldGVz
QWJydXB0bHkgPSBmYWxzZTsKKwlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5zdGF0ZW1lbnRz
Lmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCVN0YXRlbWVudCBzdGF0ID0gdGhpcy5zdGF0ZW1l
bnRzW2ldOworCQlibG9ja0NvbXBsZXRlc0FicnVwdGx5IHw9IHN0YXQuZG9lc05vdENvbXBsZXRl
Tm9ybWFsbHkoc2hhcGVJbmZvKTsKKwl9CisJcmV0dXJuIGJsb2NrQ29tcGxldGVzQWJydXB0bHk7
Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0JyZWFrU3RhdGVtZW50LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0JyZWFrU3RhdGVtZW50LmphdmEKaW5kZXggNzlmMmViMC4uNWYyODM5MCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9CcmVha1N0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQnJl
YWtTdGF0ZW1lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05NSw0ICs5NSwxMyBAQAogCXZp
c2l0b3IudmlzaXQodGhpcywgYmxvY2tzY29wZSk7CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBi
bG9ja3Njb3BlKTsKIH0KKworQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxl
dGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJc2hhcGVJbmZvLmNvbXBsZXRpb25G
bGFncyB8PSB0aGlzLmxhYmVsICE9IG51bGwgPyBTaGFwZUluZm8uQlJFQUtfV0lUSF9MQUJFTCA6
IFNoYXBlSW5mby5CUkVBSzsKKwlpZiAodGhpcy5sYWJlbCAhPSBudWxsKSB7CisJCXNoYXBlSW5m
by5hZGRCcmVha0xhYmVsKG5ldyBTdHJpbmcodGhpcy5sYWJlbCkpOworCX0KKwlyZXR1cm4gdHJ1
ZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzZVN0YXRlbWVudC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9DYXNlU3RhdGVtZW50LmphdmEKaW5kZXggMTNiMjc4OS4uZDk3MjAwYiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9DYXNlU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXNl
U3RhdGVtZW50LmphdmEKQEAgLTE0MSw0ICsxNDEsOSBAQAogCX0KIAl2aXNpdG9yLmVuZFZpc2l0
KHRoaXMsIGJsb2NrU2NvcGUpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRvZXNO
b3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlyZXR1cm4gZmFsc2U7
Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbnRpbnVlU3RhdGVtZW50LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0NvbnRpbnVlU3RhdGVtZW50LmphdmEKaW5kZXggMTMzN2NkZC4uOTdlY2ZmMCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db250aW51ZVN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQ29udGludWVTdGF0ZW1lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05OCw0ICs5
OCw5IEBACiAJdmlzaXRvci52aXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIAl2aXNpdG9yLmVuZFZp
c2l0KHRoaXMsIGJsb2NrU2NvcGUpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlyZXR1cm4gdHJ1
ZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRG9TdGF0ZW1lbnQuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRG9TdGF0ZW1lbnQuamF2YQppbmRleCAyNjdiYTE1Li5jN2VjOWQxIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0RvU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Eb1N0YXRlbWVu
dC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2Ug
UHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRp
b24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTIyNiw0ICsyMjYsMzAgQEAKIAl9CiAJdmlzaXRv
ci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiB9CisKK0BPdmVycmlkZQorcHVibGljIGJvb2xlYW4g
ZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCUNvbnN0YW50
IGNzdCA9IHRoaXMuY29uZGl0aW9uLmNvbnN0YW50OworCWJvb2xlYW4gaXNDb25kaXRpb25UcnVl
ID0gY3N0ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCAmJiBjc3QuYm9vbGVhblZhbHVlKCkgPT0g
dHJ1ZTsKKwlib29sZWFuIGlzQ29uZGl0aW9uRmFsc2UgPSBjc3QgIT0gQ29uc3RhbnQuTm90QUNv
bnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9PSBmYWxzZTsKKwljc3QgPSB0aGlzLmNvbmRp
dGlvbi5vcHRpbWl6ZWRCb29sZWFuQ29uc3RhbnQoKTsKKwlib29sZWFuIGlzQ29uZGl0aW9uT3B0
aW1pemVkVHJ1ZSA9IGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5W
YWx1ZSgpID09IHRydWU7CisJYm9vbGVhbiBpc0NvbmRpdGlvbk9wdGltaXplZEZhbHNlID0gY3N0
ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCAmJiBjc3QuYm9vbGVhblZhbHVlKCkgPT0gZmFsc2U7
CisJYm9vbGVhbiBhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSA9IGZhbHNlOworCWlmICgodGhpcy5h
Y3Rpb24gIT0gbnVsbCkgJiYgIXRoaXMuYWN0aW9uLmlzRW1wdHlCbG9jaygpKSB7CisJCWFjdGlv
bkNvbXBsZXRlc0FicnVwdGx5ID0gdGhpcy5hY3Rpb24uZG9lc05vdENvbXBsZXRlTm9ybWFsbHko
c2hhcGVJbmZvKTsKKwkJaWYoYWN0aW9uQ29tcGxldGVzQWJydXB0bHkpIHsKKwkJCWlmICgoc2hh
cGVJbmZvLmNvbXBsZXRpb25GbGFncyAmIFNoYXBlSW5mby5CUkVBSykgIT0gMCkKKwkJCQlyZXR1
cm4gZmFsc2U7CisJCQlpZiAoKHNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgJiBTaGFwZUluZm8u
Q09OVElOVUUpICE9IDApIHsKKwkJCQlpZiAoaXNDb25kaXRpb25GYWxzZSB8fCBpc0NvbmRpdGlv
bk9wdGltaXplZEZhbHNlKQorCQkJCQlyZXR1cm4gZmFsc2U7CisJCQl9CisJCQlyZXR1cm4gdHJ1
ZTsKKwkJfQorCQlpZiAoaXNDb25kaXRpb25GYWxzZSB8fCBpc0NvbmRpdGlvbk9wdGltaXplZEZh
bHNlKQorCQkJcmV0dXJuIGZhbHNlOworCX0KKwlyZXR1cm4gaXNDb25kaXRpb25UcnVlIHx8IGlz
Q29uZGl0aW9uT3B0aW1pemVkVHJ1ZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRW1w
dHlTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRW1wdHlTdGF0ZW1lbnQuamF2YQppbmRleCA5
MDRlNTY0Li41NGQzY2I4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0VtcHR5U3RhdGVtZW50Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9FbXB0eVN0YXRlbWVudC5qYXZhCkBAIC01OSw2ICs1OSwxMSBA
QAogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsKIAl9CiAKKwlAT3ZlcnJpZGUKKwlw
dWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZv
KSB7CisJCXJldHVybiBmYWxzZTsKKwl9CisKIAogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3Ry
dWN0b3JDYWxsLmphdmEKaW5kZXggMjQzNDkxNS4uYmU0MzY3MiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwuamF2YQpAQCAtNTUyLDQgKzU1Miw5IEBACiAJcHVibGljIEluZmVy
ZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKIAkJcmV0
dXJuIG5ldyBJbmZlcmVuY2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsK
IAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxs
eShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCXJldHVybiBmYWxzZTsKKwl9CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5q
YXZhCmluZGV4IDkxOGIxYjQuLmM1NWM2ZTggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVz
c2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCkBAIC0yMzEsNiArMjMx
LDEyIEBACiAJcmV0dXJuIGZsb3dJbmZvOwogfQogCisKK0BPdmVycmlkZQorcHVibGljIGJvb2xl
YW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCXRocm93
IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIkludmFsaWQgY29udHJvbCBmbG93Iik7IC8vJE5P
Ti1OTFMtMSQKK30KKwogLyoqCiAgKiBNb3JlIHNvcGhpc3RpY2F0ZWQgZm9yIG9mIHRoZSBmbG93
IGFuYWx5c2lzIHVzZWQgZm9yIGFuYWx5emluZyBleHByZXNzaW9ucywgYW5kIGJlIGFibGUgdG8g
b3B0aW1pemUgb3V0CiAgKiBwb3J0aW9ucyBvZiBleHByZXNzaW9ucyB3aGVyZSBubyBhY3R1YWwg
dmFsdWUgaXMgcmVxdWlyZWQuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZpZWxkRGVjbGFyYXRp
b24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRmllbGREZWNsYXJhdGlvbi5qYXZhCmluZGV4IGNhNzgzODAu
LmM1NmNhMDEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmllbGREZWNsYXJhdGlvbi5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvRmllbGREZWNsYXJhdGlvbi5qYXZhCkBAIC0zNDAsNCArMzQwLDkgQEAK
IAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiB9CisKK0BPdmVycmlkZQorcHVi
bGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykg
eworCXJldHVybiBmYWxzZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yU3RhdGVt
ZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZvclN0YXRlbWVudC5qYXZhCmluZGV4IDM3ZGFjOGUuLmEy
ZmYyNmMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yU3RhdGVtZW50LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Gb3JTdGF0ZW1lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC00MjcsNCArNDI3
LDQ0IEBACiAJCX0KIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIAl9CisK
KwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFw
ZUluZm8gc2hhcGVJbmZvKSB7CisJCWJvb2xlYW4gaW5pdHNDb21wbGV0ZUFicnVwdGx5ID0gZmFs
c2U7CisJCWlmICh0aGlzLmluaXRpYWxpemF0aW9ucyAhPSBudWxsKSB7CisJCQlmb3IgKGludCBp
ID0gMCwgY291bnQgPSB0aGlzLmluaXRpYWxpemF0aW9ucy5sZW5ndGg7IGkgPCBjb3VudDsgaSsr
KSB7CisJCQkJaW5pdHNDb21wbGV0ZUFicnVwdGx5IHw9IHRoaXMuaW5pdGlhbGl6YXRpb25zW2ld
LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJCQl9CisJCX0KKwkJQ29uc3Rh
bnQgY3N0ID0gdGhpcy5jb25kaXRpb24gPT0gbnVsbCA/IG51bGwgOiB0aGlzLmNvbmRpdGlvbi5j
b25zdGFudDsKKwkJYm9vbGVhbiBpc0NvbmRpdGlvblRydWUgPSBjc3QgPT0gbnVsbCB8fCAoY3N0
ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCAmJiBjc3QuYm9vbGVhblZhbHVlKCkgPT0gdHJ1ZSk7
CisJCWJvb2xlYW4gaXNDb25kaXRpb25GYWxzZSA9IGNzdCAhPSBudWxsICYmIChjc3QgIT0gQ29u
c3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9PSBmYWxzZSk7CisKKwkJ
Y3N0ID0gdGhpcy5jb25kaXRpb24gPT0gbnVsbCA/IG51bGwgOiB0aGlzLmNvbmRpdGlvbi5vcHRp
bWl6ZWRCb29sZWFuQ29uc3RhbnQoKTsKKwkJYm9vbGVhbiBpc0NvbmRpdGlvbk9wdGltaXplZFRy
dWUgPSBjc3QgPT0gbnVsbCB8fCAoY3N0ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCAmJiBjc3Qu
Ym9vbGVhblZhbHVlKCkgPT0gdHJ1ZSk7CisJCWJvb2xlYW4gaXNDb25kaXRpb25PcHRpbWl6ZWRG
YWxzZSA9IGNzdCAhPSBudWxsCisJCQkJJiYgKGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQg
JiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IGZhbHNlKTsKKworCQlib29sZWFuIGFjdGlvbkNvbXBs
ZXRlc0FicnVwdGx5ID0gZmFsc2U7CisJCWlmIChpc0NvbmRpdGlvblRydWUgfHwgaXNDb25kaXRp
b25PcHRpbWl6ZWRUcnVlKSB7CisJCQlpZiAodGhpcy5hY3Rpb24gPT0gbnVsbCB8fCB0aGlzLmFj
dGlvbi5pc0VtcHR5QmxvY2soKSkgeworCQkJCWFjdGlvbkNvbXBsZXRlc0FicnVwdGx5ID0gdHJ1
ZTsKKwkJCX0gZWxzZSB7CisJCQkJYWN0aW9uQ29tcGxldGVzQWJydXB0bHkgPSB0aGlzLmFjdGlv
bi5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8pOworCQkJCWlmIChhY3Rpb25Db21w
bGV0ZXNBYnJ1cHRseSAmJiAoc2hhcGVJbmZvLmNvbXBsZXRpb25GbGFncyAmIFNoYXBlSW5mby5C
UkVBSykgIT0gMCkgeworCQkJCQlhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSA9IGZhbHNlOworCQkJ
CX0KKwkJCX0KKwkJfSBlbHNlIGlmIChpc0NvbmRpdGlvbkZhbHNlIHx8IGlzQ29uZGl0aW9uT3B0
aW1pemVkRmFsc2UpIHsKKwkJCWFjdGlvbkNvbXBsZXRlc0FicnVwdGx5ID0gZmFsc2U7CisJCX0K
KwkJYm9vbGVhbiBpbmNyZW1lbnRzQ29tcGxldGVBYnJ1cHRseSA9IGZhbHNlOworCQlpZiAodGhp
cy5pbmNyZW1lbnRzICE9IG51bGwpIHsKKwkJCWludCBpbmNyZW1lbnRzTGVuZ3RoID0gdGhpcy5p
bmNyZW1lbnRzLmxlbmd0aDsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgaW5jcmVtZW50c0xlbmd0
aDsgaSsrKSB7CisJCQkJaW5jcmVtZW50c0NvbXBsZXRlQWJydXB0bHkgfD0gdGhpcy5pbmNyZW1l
bnRzW2ldLmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJCQl9CisJCX0KKwkJ
cmV0dXJuIGluaXRzQ29tcGxldGVBYnJ1cHRseSB8fCBhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSB8
fCBpbmNyZW1lbnRzQ29tcGxldGVBYnJ1cHRseTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0ZvcmVhY2hTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yZWFjaFN0YXRlbWVudC5q
YXZhCmluZGV4IGU3OTRiMDcuLjUzNjFkNTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yZWFj
aFN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yZWFjaFN0YXRlbWVudC5qYXZhCkBA
IC01NzYsNCArNTc2LDE5IEBACiAJCX0KIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Nj
b3BlKTsKIAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVO
b3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCWlmICh0aGlzLmVsZW1lbnRWYXJpYWJs
ZS5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8pKSB7CisJCQlyZXR1cm4gdHJ1ZTsK
KwkJfQorCQlpZiAodGhpcy5hY3Rpb24gIT0gbnVsbCAmJiAhdGhpcy5hY3Rpb24uaXNFbXB0eUJs
b2NrKCkpIHsKKwkJCWlmICh0aGlzLmFjdGlvbi5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFw
ZUluZm8pKSB7CisJCQkJaWYgKChzaGFwZUluZm8uY29tcGxldGlvbkZsYWdzICYgU2hhcGVJbmZv
LkJSRUFLKSAhPSAwKSB7CisJCQkJCXJldHVybiBmYWxzZTsKKwkJCQl9CisJCQl9CisJCX0KKwkJ
cmV0dXJuIGZhbHNlOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSWZTdGF0ZW1lbnQu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvSWZTdGF0ZW1lbnQuamF2YQppbmRleCAyNTRmZjcxLi5hZWNlODVi
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lmU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9JZlN0YXRlbWVudC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI4NCw0ICsyODQsMTEgQEAK
IAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIH0KKworQE92ZXJyaWRl
CitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJ
bmZvKSB7CisJYm9vbGVhbiB0aGVuQ29tcGxldGVzQWJydXB0bHkgPSB0aGlzLnRoZW5TdGF0ZW1l
bnQgPT0gbnVsbCA/IGZhbHNlIDogdGhpcy50aGVuU3RhdGVtZW50LmRvZXNOb3RDb21wbGV0ZU5v
cm1hbGx5KHNoYXBlSW5mbyk7CisJYm9vbGVhbiBlbHNlQ29tcGxldGVzQWJydXB0bHkgPSB0aGlz
LmVsc2VTdGF0ZW1lbnQgPT0gbnVsbCA/IGZhbHNlIDogdGhpcy5lbHNlU3RhdGVtZW50LmRvZXNO
b3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJcmV0dXJuIHRoZW5Db21wbGV0ZXNBYnJ1
cHRseSAmJiBlbHNlQ29tcGxldGVzQWJydXB0bHk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0luaXRpYWxpemVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0luaXRpYWxpemVyLmphdmEKaW5kZXgg
ZWY2MGQyNS4uMzUyOTRkYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbml0aWFsaXplci5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvSW5pdGlhbGl6ZXIuamF2YQpAQCAtMTMxLDQgKzEzMSw5IEBACiAJ
CX0KIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJfQorCisJQE92ZXJyaWRlCisJ
cHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5m
bykgeworCQlyZXR1cm4gdGhpcy5ibG9jayA9PSBudWxsID8gZmFsc2UgOiB0aGlzLmJsb2NrLmRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9MYWJlbGVkU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhYmVsZWRTdGF0ZW1l
bnQuamF2YQppbmRleCA5ZmZmYTNlLi4zNTJlOTc1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xh
YmVsZWRTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhYmVsZWRTdGF0ZW1lbnQuamF2
YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBh
bmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNDAsNCArMTQwLDE2IEBACiAJCX0KIAkJdmlzaXRvci5l
bmRWaXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9v
bGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCWJv
b2xlYW4gaW5uZXJDb21wbGV0ZXNBYnJ1cHRseSA9IHRoaXMuc3RhdGVtZW50LmRvZXNOb3RDb21w
bGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJCWlmIChpbm5lckNvbXBsZXRlc0FicnVwdGx5KSB7
CisJCQlpZiAoKHNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgJiBTaGFwZUluZm8uQlJFQUtfV0lU
SF9MQUJFTCkgIT0gMCAmJiBzaGFwZUluZm8uY29udGFpbnNCcmVha0xhYmVsKHRoaXMubGFiZWwp
KSB7CisJCQkJc2hhcGVJbmZvLnJlbW92ZUJyZWFrTGFiZWwodGhpcy5sYWJlbCk7CisJCQkJcmV0
dXJuIGZhbHNlOworCQkJfQorCQl9CisJCXJldHVybiBpbm5lckNvbXBsZXRlc0FicnVwdGx5Owor
CX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggOTU3MDVhOC4uYWFhMGU3YiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTU4LDcgKzU4LDYgQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5FeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250
ZXh0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZsb3dD
b250ZXh0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZs
b3dJbmZvOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LlVu
Y29uZGl0aW9uYWxGbG93SW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmltcGwuQ29uc3RhbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmltcGwuUmVmZXJlbmNlQ29udGV4dDsKQEAgLTQ0NCwyMSArNDQzLDggQEAK
IAkJcmV0dXJuIHRoaXMuYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5hcmd1bWVudHNbMF0u
aGFzRWxpZGVkVHlwZSgpOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVO
b3JtYWxseSgpIHsKLQkJdHJ5IHsKLQkJCXJldHVybiB0aGlzLmJvZHkuYW5hbHlzZUNvZGUodGhp
cy5zY29wZSwgCi0JCQkJCQkJCQkgbmV3IEV4Y2VwdGlvbkhhbmRsaW5nRmxvd0NvbnRleHQobnVs
bCwgdGhpcywgQmluZGluZy5OT19FWENFUFRJT05TLCBudWxsLCB0aGlzLnNjb3BlLCBGbG93SW5m
by5ERUFEX0VORCksIAotCQkJCQkJCQkJIFVuY29uZGl0aW9uYWxGbG93SW5mby5mYWtlSW5pdGlh
bGl6ZWRGbG93SW5mbyh0aGlzLnNjb3BlLm91dGVyTW9zdE1ldGhvZFNjb3BlKCkuYW5hbHlzaXNJ
bmRleCwgdGhpcy5zY29wZS5yZWZlcmVuY2VUeXBlKCkubWF4RmllbGRDb3VudCkpID09IEZsb3dJ
bmZvLkRFQURfRU5EOwotCQl9IGNhdGNoIChSdW50aW1lRXhjZXB0aW9uIGUpIHsKLQkJCS8qIFNl
ZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyMTEwIGZv
ciBhbiBleGFtcGxlIG9mIHdoZXJlIHRoZSBmbG93IGFuYWx5c2lzIGNhbiByZXN1bHQgaW4gcnVu
IHRpbWUgZXJyb3IuCi0JCQkgICBXZSBjYW4gcmVjb3ZlciBhbmQgZG8gdGhlIHJpZ2h0IHRoaW5n
IGJ5IGZhbGxpbmcgYmFjayBvbiB0aGUgcmVzdWx0cyBvZiB0aGUgc3RydWN0dXJhbCBhbmFseXNp
cyBkb25lIGFscmVhZHkgYW5kIGJlIHJpZ2h0IDk5Ljk5JQotCQkJICAgb2YgdGhlIHRpbWUuIFN0
cmljdGx5IHNwZWFraW5nIHZvaWQvdmFsdWUgY29tcGF0aWJpbGl0eSBpcyBub3QgYSBzdHJ1Y3R1
cmFsIHByb3BlcnR5LiB7IHRocm93IE5QRSgpOyB9IGlzIHZhbHVlIGNvbXBhdGlibGUgZGVzcGl0
ZQotCQkJICAgc3RydWN0dXJhbGx5IHRoZXJlIG5vdCBiZWluZyBhIHJldHVybiBzdGF0ZW1lbnQu
IExpa2V3aXNlIHsgaWYgKHgpIHJldHVybiB2YWx1ZTsgfSBpcyBub3QgdmFsdWUgY29tcGF0aWJs
ZSBkZXNwaXRlIHRoZXJlIGJlaW5nIGEKLQkJCSAgIHJldHVybiBzdGF0ZW1lbnQuIFdlIHdpbGwg
bWlzcyB0aGUgZm9ybWVyIGNhc2UsIGJ1dCB0aGF0IGlzIG1vc3RseSBwZWRhbnRpYy4gV2Ugd291
bGQgbWlzY2xhc3NpZnkgdGhlIGxhdHRlciBjYXNlICpoZXJlKiwgYnV0IGl0Ci0JCQkgICB3b3Vs
ZCBiZSBjYXVnaHQgZWxzZXdoZXJlLCBzbyBpdCBzaG91bGQgYWxsIHdhc2ggb3V0IGluIHRoZSBl
bmQuIAotCQkJKi8gCi0JCQlyZXR1cm4gdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGU7Ci0J
CX0KKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hh
cGVJbmZvKSB7CisJCXJldHVybiB0aGlzLmJvZHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hh
cGVJbmZvKTsKIAl9CiAJcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3Vy
cmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgZmluYWwgRmxvd0luZm8gZmxvd0lu
Zm8pIHsKIAkJCkBAIC03NTEsOCArNzM3LDEzIEBACiAJCQkJfQogCQkJCQogCQkJCS8vIHZhbHVl
IGNvbXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlv
bi4KLQkJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJCQl0aGlzLnZhbHVl
Q29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsKKwkJCQlpZiAoIXRo
aXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKSB7CisJCQkJCVNoYXBlSW5mbyBzaGFwZUluZm8gPSBu
ZXcgU2hhcGVJbmZvKCk7CisJCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gY29weS5kb2VzTm90
Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8pOworCQkJCQl0aGlzLnJlc3VsdEV4cHJlc3Npb25z
ID0gc2hhcGVJbmZvLnJldHVybkV4cHJlc3Npb25zOworCQkJCQl0aGlzLnJldHVybnNWYWx1ZSA9
IHNoYXBlSW5mby5yZXR1cm5zVmFsdWU7CisJCQkJCXRoaXMucmV0dXJuc1ZvaWQgPSBzaGFwZUlu
Zm8ucmV0dXJuc1ZvaWQ7CisJCQkJfQogCQkJCQogCQkJCXRoaXMuc2hhcGVBbmFseXNpc0NvbXBs
ZXRlID0gdHJ1ZTsKIAkJCX0gZmluYWxseSB7CkBAIC04NTYsOCArODQ3LDExIEBACiAJCQkvLyBE
byBub3QgcHJvY2VlZCB3aXRoIGRhdGEvY29udHJvbCBmbG93IGFuYWx5c2lzIGlmIHJlc29sdmUg
ZW5jb3VudGVyZWQgZXJyb3JzLgogCQkJaWYgKCF0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJv
cnMgJiYgIWVuY2xvc2luZ1Njb3Blc0hhdmVFcnJvcnMoKSkgewogCQkJCS8vIHZhbHVlIGNvbXBh
dGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlvbi4KLQkJ
CQlpZiAoIWNvcHkuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJCQljb3B5LnZhbHVlQ29tcGF0
aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsKKwkJCQlpZiAoIWNvcHkuc2hh
cGVBbmFseXNpc0NvbXBsZXRlKSB7CisJCQkJCVNoYXBlSW5mbyBzaGFwZUluZm8gPSBuZXcgU2hh
cGVJbmZvKCk7CisJCQkJCWNvcHkudmFsdWVDb21wYXRpYmxlID0gY29weS5kb2VzTm90Q29tcGxl
dGVOb3JtYWxseShzaGFwZUluZm8pOworCQkJCQl0aGlzLnJlc3VsdEV4cHJlc3Npb25zID0gc2hh
cGVJbmZvLnJldHVybkV4cHJlc3Npb25zOworCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJaWYgKCFj
b3B5LnJldHVybnNWb2lkKQogCQkJCQljb3B5LnZhbHVlQ29tcGF0aWJsZSA9IHRydWU7IC8vIG9w
dGltaXN0aWNhbGx5LCBUT0RPOiBpcyB0aGlzIE9LPz8KQEAgLTg5Nyw4ICs4OTEsOCBAQAogCQlp
ZiAocjIuaWQgPT0gVHlwZUlkcy5UX3ZvaWQpCiAJCQlyZXR1cm4gdHJ1ZTsKIAkJCi0JCWlmIChy
MS5pZCA9PSBUeXBlSWRzLlRfdm9pZCkKLQkJCXJldHVybiBmYWxzZTsKKy8vCQlpZiAocjEuaWQg
PT0gVHlwZUlkcy5UX3ZvaWQpCisvLwkJCXJldHVybiBmYWxzZTsKIAkJCiAJCS8vIHIxIDw6IHIy
CiAJCWlmIChyMS5pc0NvbXBhdGlibGVXaXRoKHIyLCBza29wZSkpCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlv
bi5qYXZhCmluZGV4IDQ2MmE4NDEuLmY1NzE4MGUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9j
YWxEZWNsYXJhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZh
CkBAIC0zMjYsNCArMzI2LDkgQEAKIAkJcmV0dXJuIHRoaXMubmFtZSA9PSBSZWNvdmVyeVNjYW5u
ZXIuRkFLRV9JREVOVElGSUVSICYmIAogCQkJCSh0aGlzLnR5cGUgaW5zdGFuY2VvZiBTaW5nbGVU
eXBlUmVmZXJlbmNlIHx8ICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBRdWFsaWZpZWRUeXBlUmVmZXJl
bmNlICYmICEodGhpcy50eXBlIGluc3RhbmNlb2YgQXJyYXlRdWFsaWZpZWRUeXBlUmVmZXJlbmNl
KSkpICYmIHRoaXMuaW5pdGlhbGl6YXRpb24gPT0gbnVsbCAmJiAhdGhpcy50eXBlLmlzQmFzZVR5
cGVSZWZlcmVuY2UoKTsKIAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90
Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCXJldHVybiBmYWxzZTsK
Kwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggMTViNmNhZC4uMzJiODM1NCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQu
amF2YQpAQCAtMTAyMSw2ICsxMDIxLDExIEBACiBwdWJsaWMgYm9vbGVhbiBzdGF0ZW1lbnRFeHBy
ZXNzaW9uKCkgewogCXJldHVybiB0cnVlOwogfQorQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBk
b2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJLy8KKwlyZXR1
cm4gZmFsc2U7Cit9CiBwdWJsaWMgYm9vbGVhbiByZWNlaXZlcklzSW1wbGljaXRUaGlzKCkgewog
CXJldHVybiB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCk7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1JldHVyblN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZXR1cm5TdGF0ZW1l
bnQuamF2YQppbmRleCAwMzhlODYwLi5kY2ExOTUxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Jl
dHVyblN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmV0dXJuU3RhdGVtZW50LmphdmEK
QEAgLTM3NCw0ICszNzQsMTEgQEAKIAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7
CiB9CisKK0BPdmVycmlkZQorcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHko
U2hhcGVJbmZvIHNoYXBlSW5mbykgeworCXNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgfD0gKHRo
aXMuZXhwcmVzc2lvbiA9PSBudWxsKSA/IFNoYXBlSW5mby5SRVRVUk4gOiBTaGFwZUluZm8uUkVU
VVJOX1dJVEhfVkFMVUU7CisJc2hhcGVJbmZvLnJldHVybnNFeHByZXNzaW9uKHRoaXMuZXhwcmVz
c2lvbik7CisJcmV0dXJuIHRydWU7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRl
bWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQppbmRleCAxZWFiNDlhLi5kZmNh
YjgwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvU3RhdGVtZW50LmphdmEKQEAgLTM1LDYgKzM1LDcgQEAKICAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogCitp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29u
c3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jb2RlZ2Vu
Lio7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuKjsKQEAg
LTc3LDYgKzc4LDcxIEBACiAJfQogcHVibGljIGFic3RyYWN0IEZsb3dJbmZvIGFuYWx5c2VDb2Rl
KEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0lu
Zm8gZmxvd0luZm8pOwogCitwdWJsaWMgYWJzdHJhY3QgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVO
b3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKTsKK3B1YmxpYyBjbGFzcyBTaGFwZUluZm8gewor
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IEJSRUFLID0gMTsKKwlwdWJsaWMgc3RhdGljIGZpbmFs
IGludCBCUkVBS19XSVRIX0xBQkVMID0gMjsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDT05U
SU5VRSA9IDQ7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ09OVElOVUVfV0lUSF9MQUJFTCA9
IDg7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUkVUVVJOID0gMTY7CisJcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgUkVUVVJOX1dJVEhfVkFMVUUgPSAzMjsKKwlwdWJsaWMgc3RhdGljIGZpbmFs
IGludCBUSFJPVyA9IDY0OworCQorCXB1YmxpYyBpbnQgY29tcGxldGlvbkZsYWdzOworCXB1Ymxp
YyBTdHJpbmdbXSBicmVha0xhYmVscyA9IG5ldyBTdHJpbmdbMF07CisJcHVibGljIEV4cHJlc3Np
b24gW10gcmV0dXJuRXhwcmVzc2lvbnMgPSBGdW5jdGlvbmFsRXhwcmVzc2lvbi5OT19FWFBSRVNT
SU9OUzsKKwlwdWJsaWMgYm9vbGVhbiByZXR1cm5zVm9pZDsKKwlwdWJsaWMgYm9vbGVhbiByZXR1
cm5zVmFsdWU7CisJcHVibGljIGJvb2xlYW4gdm9pZENvbXBhdGlibGU7CisJcHVibGljIGJvb2xl
YW4gdmFsdWVDb21wYXRpYmxlOworCXB1YmxpYyB2b2lkIHJldHVybnNFeHByZXNzaW9uKEV4cHJl
c3Npb24gZXhwcmVzc2lvbikgeworCQlpZiAoZXhwcmVzc2lvbiA9PSBudWxsKSB7CisJCQl0aGlz
LnJldHVybnNWb2lkID0gdHJ1ZTsKKwkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gZmFsc2U7CisJ
CQl0aGlzLnZvaWRDb21wYXRpYmxlID0gIXRoaXMucmV0dXJuc1ZhbHVlOworCQl9IGVsc2Ugewor
CQkJRXhwcmVzc2lvbltdIHJldHVybnMgPSB0aGlzLnJldHVybkV4cHJlc3Npb25zOworCQkJaW50
IHJlc3VsdHNMZW5ndGggPSByZXR1cm5zLmxlbmd0aDsKKwkJCVN5c3RlbS5hcnJheWNvcHkocmV0
dXJucywgMCwgcmV0dXJucyA9IG5ldyBFeHByZXNzaW9uW3Jlc3VsdHNMZW5ndGggKyAxXSwgMCwg
cmVzdWx0c0xlbmd0aCk7CisJCQlyZXR1cm5zW3Jlc3VsdHNMZW5ndGhdID0gZXhwcmVzc2lvbjsK
KwkJCXRoaXMucmV0dXJuRXhwcmVzc2lvbnMgPSByZXR1cm5zOworCQkJdGhpcy5yZXR1cm5zVmFs
dWUgPSB0cnVlOworCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9IGZhbHNlOworCQkJdGhpcy52YWx1
ZUNvbXBhdGlibGUgPSAhdGhpcy5yZXR1cm5zVm9pZDsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBh
ZGRCcmVha0xhYmVsKFN0cmluZyBsYWJlbCkgeworCQlpZiAobGFiZWwgPT0gbnVsbCkgeworCQkJ
cmV0dXJuOworCQl9CisJCVN0cmluZ1tdIGxhYmVscyA9IHRoaXMuYnJlYWtMYWJlbHM7CisJCWlu
dCBsYWJlbHNMZW5ndGggPSBsYWJlbHMubGVuZ3RoOworCQlTeXN0ZW0uYXJyYXljb3B5KGxhYmVs
cywgMCwgbGFiZWxzID0gbmV3IFN0cmluZ1tsYWJlbHNMZW5ndGggKyAxXSwgMCwgbGFiZWxzTGVu
Z3RoKTsKKwkJbGFiZWxzW2xhYmVsc0xlbmd0aF0gPSBsYWJlbDsKKwkJdGhpcy5icmVha0xhYmVs
cyA9IGxhYmVsczsKKwl9CisJcHVibGljIHZvaWQgcmVtb3ZlQnJlYWtMYWJlbChjaGFyW10gbGFi
ZWwpIHsKKwkJaWYgKGxhYmVsID09IG51bGwpCisJCQlyZXR1cm47CisJCVN0cmluZ1tdIGxhYmVs
cyA9IHRoaXMuYnJlYWtMYWJlbHM7CisJCWludCBsYWJlbHNMZW5ndGggPSBsYWJlbHMubGVuZ3Ro
OworCQlmb3IgKGludCBpID0gMDsgaSA8IGxhYmVsc0xlbmd0aDsgaSsrKSB7CisJCQlpZiAoQ2hh
ck9wZXJhdGlvbi5lcXVhbHMobGFiZWwsIGxhYmVsc1tpXS50b0NoYXJBcnJheSgpKSkgeworCQkJ
CVN5c3RlbS5hcnJheWNvcHkobGFiZWxzLCAwLCBsYWJlbHMgPSBuZXcgU3RyaW5nW2xhYmVsc0xl
bmd0aCAtIDFdLCAwLCBpKTsKKwkJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuYnJlYWtMYWJlbHMs
IGkgKyAxLCBsYWJlbHMsIGksIGxhYmVsc0xlbmd0aCAtIGkgLSAxKTsKKwkJCQl0aGlzLmJyZWFr
TGFiZWxzID0gbGFiZWxzOworCQkJCWJyZWFrOworCQkJfQorCQl9CisJfQorCXB1YmxpYyBib29s
ZWFuIGNvbnRhaW5zQnJlYWtMYWJlbChjaGFyW10gbGFiZWwpIHsKKwkJZm9yIChpbnQgaSA9IDA7
IGkgPCB0aGlzLmJyZWFrTGFiZWxzLmxlbmd0aDsgaSsrKSB7CisJCQlpZiAoQ2hhck9wZXJhdGlv
bi5lcXVhbHMobGFiZWwsIHRoaXMuYnJlYWtMYWJlbHNbaV0udG9DaGFyQXJyYXkoKSkpCisJCQkJ
cmV0dXJuIHRydWU7CisJCX0KKwkJcmV0dXJuIGZhbHNlOworCX0KK30KIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBOT1RfQ09NUExBSU5FRCA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
Q09NUExBSU5FRF9GQUtFX1JFQUNIQUJMRSA9IDE7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
Q09NUExBSU5FRF9VTlJFQUNIQUJMRSA9IDI7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3aXRj
aFN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2YQppbmRleCA5
MGYzODQyLi40MTNhODBhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50LmphdmEKQEAgLTYzMiw0ICs2MzIs
MjAgQEAKIAkJCWxhYmVsLmJlY29tZURlbGVnYXRlRm9yKHRoaXMuYnJlYWtMYWJlbCk7CiAJCX0K
IAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxs
eShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCWlmICh0aGlzLnN0YXRlbWVudHMgIT0gbnVsbCkg
eworCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuc3RhdGVtZW50cy5sZW5ndGg7IGkgPCBt
YXg7IGkrKykgeworCQkJCVN0YXRlbWVudCBzdGF0ZW1lbnQgPSB0aGlzLnN0YXRlbWVudHNbaV07
CisJCQkJaWYgKHN0YXRlbWVudC5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8pKSB7
CisJCQkJCWlmICgoc2hhcGVJbmZvLmNvbXBsZXRpb25GbGFncyAmIFNoYXBlSW5mby5CUkVBSykg
IT0gMCkgeworCQkJCQkJcmV0dXJuIGZhbHNlOworCQkJCQl9CisJCQkJfQorCQkJfQorCQkJcmV0
dXJuIHRoaXMuZGVmYXVsdENhc2UgIT0gbnVsbDsKKwkJfQorCQlyZXR1cm4gZmFsc2U7CisJfQog
fQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TeW5jaHJvbml6ZWRTdGF0ZW1lbnQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvU3luY2hyb25pemVkU3RhdGVtZW50LmphdmEKaW5kZXggYjJjNmRmZC4uOGU0NTZl
OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TeW5jaHJvbml6ZWRTdGF0ZW1lbnQuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1N5bmNocm9uaXplZFN0YXRlbWVudC5qYXZhCkBAIC0yMTMsNCArMjEzLDkg
QEAKIAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIH0KKworQE92ZXJy
aWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hh
cGVJbmZvKSB7CisJcmV0dXJuIHRoaXMuYmxvY2suZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hh
cGVJbmZvKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhyb3dTdGF0ZW1lbnQuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvVGhyb3dTdGF0ZW1lbnQuamF2YQppbmRleCAzMjk2N2NhLi4wZWU0MTgz
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Rocm93U3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9UaHJvd1N0YXRlbWVudC5qYXZhCkBAIC04Nyw0ICs4NywxMCBAQAogCQl0aGlzLmV4Y2Vw
dGlvbi50cmF2ZXJzZSh2aXNpdG9yLCBibG9ja1Njb3BlKTsKIAl2aXNpdG9yLmVuZFZpc2l0KHRo
aXMsIGJsb2NrU2NvcGUpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRvZXNOb3RD
b21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlzaGFwZUluZm8uY29tcGxl
dGlvbkZsYWdzIHw9IFNoYXBlSW5mby5USFJPVzsKKwlyZXR1cm4gdHJ1ZTsKK30KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1RyeVN0YXRl
bWVudC5qYXZhCmluZGV4IGY2OTZmYWQuLjU2MWVhZGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
VHJ5U3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UcnlTdGF0ZW1lbnQuamF2YQpAQCAt
MTIxMCw0ICsxMjEwLDIyIEBACiAJCX0KIAl9CiB9CitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFu
IGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlpZiAoIXRo
aXMudHJ5QmxvY2suZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSkgeworCQlyZXR1
cm4gKHRoaXMuZmluYWxseUJsb2NrICE9IG51bGwpID8gdGhpcy5maW5hbGx5QmxvY2suZG9lc05v
dENvbXBsZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSA6IGZhbHNlOworCX0KKwlpZiAodGhpcy5jYXRj
aEJsb2NrcyAhPSBudWxsKSB7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5jYXRjaEJsb2Nr
cy5sZW5ndGg7IGkrKykgeworCQkJaWYgKCF0aGlzLmNhdGNoQmxvY2tzW2ldLmRvZXNOb3RDb21w
bGV0ZU5vcm1hbGx5KHNoYXBlSW5mbykpIHsKKwkJCQlpZiAoKHNoYXBlSW5mby5jb21wbGV0aW9u
RmxhZ3MgJiBTaGFwZUluZm8uVEhST1cpICE9IDApIHsKKwkJCQkJcmV0dXJuICh0aGlzLmZpbmFs
bHlCbG9jayAhPSBudWxsKSA/IHRoaXMuZmluYWxseUJsb2NrLmRvZXNOb3RDb21wbGV0ZU5vcm1h
bGx5KHNoYXBlSW5mbykKKwkJCQkJCQk6IGZhbHNlOworCQkJCX0KKwkJCQlyZXR1cm4gZmFsc2U7
CisJCQl9CisJCX0KKwl9CisJcmV0dXJuIHRydWU7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1R5cGVEZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlRGVjbGFyYXRpb24uamF2
YQppbmRleCAyMjM3ZTQ4Li44YzM5MGQzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVEZWNs
YXJhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZURlY2xhcmF0aW9uLmphdmEKQEAgLTE1
MjcsNCArMTUyNyw5IEBACiAJcmV0dXJuICh0aGlzLmJpdHMgJiBBU1ROb2RlLklzU2Vjb25kYXJ5
VHlwZSkgIT0gMDsKIH0KIAorQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxl
dGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJcmV0dXJuIGZhbHNlOworfQorCiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
VHlwZVBhcmFtZXRlci5qYXZhCmluZGV4IDk0MzhhMmEuLjUxOTMyZTYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvVHlwZVBhcmFtZXRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVBhcmFtZXRl
ci5qYXZhCkBAIC0xOTAsNCArMTkwLDkgQEAKIAkJfQogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMs
IHNjb3BlKTsKIAl9CisKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxl
dGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJCXJldHVybiBmYWxzZTsKKwl9CiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1doaWxlU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1doaWxlU3RhdGVtZW50LmphdmEKaW5kZXggODM3ZjQzMi4uYTQ1YmZhOCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9XaGlsZVN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvV2hpbGVTdGF0
ZW1lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBD
b3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBD
b3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yODUsNCArMjg1LDI0IEBACiAJCX0KIAkJ
dmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIAl9CisKKwlAT3ZlcnJpZGUKKwlw
dWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZv
KSB7CisJCUNvbnN0YW50IGNzdCA9IHRoaXMuY29uZGl0aW9uLmNvbnN0YW50OworCQlib29sZWFu
IGlzQ29uZGl0aW9uVHJ1ZSA9IGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJv
b2xlYW5WYWx1ZSgpID09IHRydWU7CisJCWJvb2xlYW4gaXNDb25kaXRpb25GYWxzZSA9IGNzdCAh
PSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IGZhbHNlOwor
CisJCWNzdCA9IHRoaXMuY29uZGl0aW9uLm9wdGltaXplZEJvb2xlYW5Db25zdGFudCgpOworCQli
b29sZWFuIGlzQ29uZGl0aW9uT3B0aW1pemVkVHJ1ZSA9IGNzdCAhPSBDb25zdGFudC5Ob3RBQ29u
c3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IHRydWU7CisJCWJvb2xlYW4gaXNDb25kaXRp
b25PcHRpbWl6ZWRGYWxzZSA9IGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJv
b2xlYW5WYWx1ZSgpID09IGZhbHNlOworCQlpZiAoaXNDb25kaXRpb25GYWxzZSB8fCBpc0NvbmRp
dGlvbk9wdGltaXplZEZhbHNlKQorCQkJcmV0dXJuIGZhbHNlOworCQlpZiAoKGlzQ29uZGl0aW9u
VHJ1ZSB8fCBpc0NvbmRpdGlvbk9wdGltaXplZFRydWUpICYmIHRoaXMuYWN0aW9uICE9IG51bGwp
IHsKKwkJCWlmICh0aGlzLmFjdGlvbi5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8p
KSB7CisJCQkJcmV0dXJuICgoc2hhcGVJbmZvLmNvbXBsZXRpb25GbGFncyAmIFNoYXBlSW5mby5C
UkVBSykgPT0gMCk7CisJCQl9CisJCQlyZXR1cm4gdHJ1ZTsKKwkJfQorCQlyZXR1cm4gZmFsc2U7
CisJfQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248429</attachid>
            <date>2014-11-06 02:03:00 -0500</date>
            <delta_ts>2014-11-10 02:59:38 -0500</delta_ts>
            <desc>Patch aligned to latest master</desc>
            <filename>Lambda-void-value-compatibility_alignedtolatestmaster.patch</filename>
            <type>text/plain</type>
            <size>76772</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVNoYXBlVGVz
dHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVNoYXBlVGVzdHMu
amF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4xMzgwOWU5Ci0tLSAvZGV2
L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhU2hhcGVUZXN0
cy5qYXZhCkBAIC0wLDAgKzEsMTQ4MSBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENv
cHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
KyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9u
OworCitpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3Q7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFT
aGFwZVRlc3RzIGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CitzdGF0aWMgeworLy8J
CVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RSZWZlcmVuY2VFeHByZXNzaW9uSW5m
ZXJlbmNlMSJ9OworLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA1MCB9OworLy8JCVRF
U1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTEsIC0xIH07Cit9CitwdWJsaWMgTGFtYmRhU2hhcGVU
ZXN0cyhTdHJpbmcgbmFtZSkgeworCXN1cGVyKG5hbWUpOworfQorcHVibGljIHN0YXRpYyBUZXN0
IHN1aXRlKCkgeworCXJldHVybiBidWlsZE1pbmltYWxDb21wbGlhbmNlVGVzdFN1aXRlKHRlc3RD
bGFzcygpLCBGXzFfOCk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDAxKCkgeworCXRoaXMucnVuQ29u
Zm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2Ug
Vm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQkifVxuIiAr
IAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1ZvaWQoVm9p
ZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtc
biIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0ZXN0Lmdv
b1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAoZmFsc2UpIHtcbiIgKyAKKwkJCSIJCQkJ
eCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJ
CXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh0cnVlKTtcbiIgKyAKKwkJ
CSIJCX0pO1xuIiArIAorCQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
aWYgKHRydWUpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4i
ICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAor
CQkJIgkJCWZpbmFsIGJvb2xlYW4gdmFsID0gdHJ1ZTtcbiIgKworCQkJIgkJCWlmICh2YWwpIHtc
biIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9
KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWZpbmFs
IGJvb2xlYW4gdmFsID0gdHJ1ZTtcbiIgKworCQkJIgkJCWlmICh2YWwpO1xuIiArIAorCQkJIgkJ
fSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmaW5h
bCBib29sZWFuIHZhbCA9IGZhbHNlO1xuIiArCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJ
IgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJaWYgKHggIT0gbnVsbCkg
e1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJ
CX0pO1xuIiArIAorCQkJIgkJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJZmlu
YWwgYm9vbGVhbiB2YWwgPSB0cnVlO1xuIiArCisJCQkiCQkJaWYgKHggIT0gbnVsbCk7XG4iICsg
CisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCWlmIChmYWxzZSkge1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJ
CX0gZWxzZSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJiXCI7XG4iICsgCisJCQkiCQkJfVxuIiAr
IAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJ
CSIJCQlpZiAoZmFsc2UpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJ
CQl9IGVsc2U7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkg
LT4ge1xuIiArIAorCQkJIgkJCWZpbmFsIGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsKKwkJCSIJ
CQlpZiAodmFsKSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBl
bHNlIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImJcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWZpbmFsIGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsKKwkJCSIJCQlpZiAodmFsKSB7XG4iICsg
CisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBlbHNlO1xuIiArIAorCQkJIgkJ
fSk7XG4iICsgCisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAo
eCAhPSBudWxsKSB7XG4iICsgCisJCQkiCQkJCXggKz0gXCJhXCI7XG4iICsgCisJCQkiCQkJfSBl
bHNlIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImJcIjtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWlmICh4ICE9IG51bGwpIHtcbiIgKyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJ
CQl9IGVsc2U7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIs
CisJCX0pOworfQorcHVibGljIHZvaWQgdGVzdDAwMigpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0
KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiAr
IAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lk
IHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZBTFNFID0gZmFsc2U7XG4iICsg
CisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZih0cnVlKSByZXR1cm4gXCJcIjtc
biIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZihmYWxzZSkgcmV0dXJuIFwiXCI7XG4i
ICsgCisJCQkiCQkJZWxzZSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJ
IgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHJldHVybiBcIlwiO1xuIiAr
IAorCQkJIgkJCWVsc2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJ
CWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKEZBTFNFKSByZXR1cm4gXCJcIjtcbiIgKyAK
KwkJCSIJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQln
b28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZighRkFMU0UpIHJldHVybiBcIlwiO1xuIiArIAor
CQkJIgkJCWVsc2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCWdv
bygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKCFGQUxTRSkgcmV0dXJuIFwiXCI7XG4iICsgCisJ
CQkiCQkJZWxzZSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDMoKSB7CisJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRl
cmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQki
fVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1Zv
aWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFy
Z3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0
ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAodHJ1ZSkge1xuIiArIAorCQkJ
IgkJCQlyZXR1cm4gMDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJ
CSIJfVxuIiArIAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAt
PiB7XG4iICsgCisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQo
Vm9pZEkpIGluIHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCSIJcmV0dXJuIDA7XG4iICsg
CisJCSIJXl5eXl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZh
bHVlXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDQoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4i
ICsgCisJCQkifVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3Ry
aW5nIGdvb1ZvaWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsg
CisJCQkiCQl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmaW5hbCBib29sZWFu
IHZhbCA9IHRydWU7XG4iICsgCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJIgkJCQlyZXR1
cm4geDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAtPiB7XG4iICsg
CisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQoVm9pZEkpIGlu
IHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8g
dHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIJcmV0dXJuIHg7XG4iICsgCisJCSIJXl5e
Xl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZhbHVlXG4iICsg
CisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDUoKSB7CisJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRl
cmZhY2UgVm9pZEkge1xuIiArIAorCQkJIgl2b2lkIGZvbyhTdHJpbmcgcyk7XG4iICsgCisJCQki
fVxuIiArIAorCQkJImNsYXNzIFRlc3Qge1xuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIGdvb1Zv
aWQoVm9pZEkgaSl7cmV0dXJuIFwiXCI7fVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFy
Z3MpIHtcbiIgKyAKKwkJCSIJCVRlc3QgdGVzdCA9IG5ldyBUZXN0KCk7XG4iICsgCisJCQkiCQl0
ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZiAoeCAhPSBudWxsKSB7XG4iICsg
CisJCQkiCQkJCXJldHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1ZvaWQo
KHgpIC0+IHtcbiIgKyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
Vm9pZChWb2lkSSkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFy
Z3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIglyZXR1cm4gMDtc
biIgKyAKKwkJIgleXl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0dXJu
IGEgdmFsdWVcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAw
NigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmph
dmEiLAorCQkJImludGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmluZyBz
KTtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1Ymxp
YyBTdHJpbmcgZ29vVm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3QoKTtc
biIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmIChmYWxz
ZSkge1xuIiArIAorCQkJIgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX0gZWxzZSB7XG4i
ICsgCisJCQkiCQkJCXJldHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1Zv
aWQoKHgpIC0+IHtcbiIgKyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vVm9pZChWb2lkSSkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkJIglyZXR1cm4g
MDtcbiIgKyAKKwkJIgleXl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0
dXJuIGEgdmFsdWVcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVz
dDAwNygpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJY
LmphdmEiLAorCQkJImludGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmlu
ZyBzKTtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1
YmxpYyBTdHJpbmcgZ29vVm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxu
IiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3Qo
KTtcbiIgKyAKKwkJCSIJCXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWZpbmFs
IGJvb2xlYW4gdmFsID0gZmFsc2U7XG4iICsgCisJCQkiCQkJaWYgKHZhbCkge1xuIiArIAorCQkJ
IgkJCQl4ICs9IFwiYVwiO1xuIiArIAorCQkJIgkJCX0gZWxzZSB7XG4iICsgCisJCQkiCQkJCXJl
dHVybiAwO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIiwKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJIgl0ZXN0Lmdvb1ZvaWQoKHgpIC0+IHtcbiIg
KyAKKwkJIgkgICAgIF5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vVm9pZChWb2lkSSkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxu
byB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKKwkJIglyZXR1cm4gMDtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5cbiIgKyAKKwkJIlZvaWQgbWV0aG9kcyBjYW5ub3QgcmV0dXJuIGEgdmFsdWVcbiIg
KyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAwOCgpIHsKKwl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImlu
dGVyZmFjZSBWb2lkSSB7XG4iICsgCisJCQkiCXZvaWQgZm9vKFN0cmluZyBzKTtcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkiY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiCXB1YmxpYyBTdHJpbmcgZ29v
Vm9pZChWb2lkSSBpKXtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArIAorCQkJIgkJVGVzdCB0ZXN0ID0gbmV3IFRlc3QoKTtcbiIgKyAKKwkJCSIJ
CXRlc3QuZ29vVm9pZCgoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh4ICE9IG51bGwpIHtcbiIg
KyAKKwkJCSIJCQkJeCArPSBcImFcIjtcbiIgKyAKKwkJCSIJCQl9IGVsc2Uge1xuIiArIAorCQkJ
IgkJCQlyZXR1cm4gMDtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJ
CSIJfVxuIiArIAorCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJdGVzdC5nb29Wb2lkKCh4KSAt
PiB7XG4iICsgCisJCSIJICAgICBeXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvb1ZvaWQo
Vm9pZEkpIGluIHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIDA7XG4iICsg
CisJCSIJXl5eXl5eXl5eXG4iICsgCisJCSJWb2lkIG1ldGhvZHMgY2Fubm90IHJldHVybiBhIHZh
bHVlXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMDkoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAK
KwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJ
IGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWZpbmFsIGJvb2xl
YW4gRkFMU0UgPSBmYWxzZTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJ
CWlmKEZBTFNFKSByZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5e
XG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDEwKCkgeworCXRoaXMucnVuTmVnYXRp
dmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkg
e1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQkifVxuIiArIAorCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJ
Igl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlp
Zih0cnVlKTtcbiIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7
XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+
IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBl
IFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4g
e30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTEoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAK
KwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJ
IGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4g
e1xuIiArIAorCQkJIgkJCWlmKGZhbHNlKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCQllbHNl
O1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1Ymxp
YyB2b2lkIHRlc3QwMTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBm
b28oaW50IHgpOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSByZXR1cm4gXCJcIjtc
biIgKyAKKwkJCSIJCQllbHNlO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTMoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4i
ICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmKHgg
PiAwKTtcbiIgKyAKKwkJCSIJCQllbHNlIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7XG4i
ICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtc
biIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFgg
aXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30p
XG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTQoKSB7CisJ
dGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJ
CSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpOyBcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkp
IHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xu
IiArIAorCQkJIgkJCWlmKHggPCAwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDE1KCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQki
aW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KTsgXG4iICsgCisJCQki
fVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7
fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZB
TFNFID0gZmFsc2U7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlpZigh
RkFMU0UpIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMTYoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4i
ICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJCQki
fVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7
fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZB
TFNFID0gZmFsc2U7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHt3aGlsZSAoRkFMU0UpIHRocm93
IG5ldyBFeGNlcHRpb24oKTt9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJfSwK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxu
IiArIAorCQkiCWdvbygoeCkgLT4ge3doaWxlIChGQUxTRSkgdGhyb3cgbmV3IEV4Y2VwdGlvbigp
O30pO1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5
cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAt
PiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDAxNygp
IHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dz
IEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWdvbygoeCkgLT4ge3doaWxlIChmYWxzZSkgcmV0dXJuIFwiXCI7fSk7XG4iICsgCisJ
CQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHt3aGlsZSAo
ZmFsc2UpIHJldHVybiBcIlwiO30pO1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhv
ZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50
cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVi
bGljIHZvaWQgdGVzdDAxOCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5n
IGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge3doaWxlICh4ID4gMCkge1xuIiAr
IAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fSBlbHNlIHticmVhazt9XG4iICsgCisJ
CQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJ
Z29vKCh4KSAtPiB7d2hpbGUgKHggPiAwKSB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgdm9pZCB0ZXN0MDE5KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglT
dHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJ
CSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7d2hpbGUgKHggPiAwKSB7
XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtyZXR1cm4gXCJcIjt9XG4iICsgCisJCQkiCQl9fSk7
XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+
IHt3aGlsZSAoeCA+IDApIHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
KEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8
bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2
b2lkIHRlc3QwMjAoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhp
bnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVz
dCgpIHtcbiIgKyAKKwkJCSIJCWZpbmFsIGJvb2xlYW4gVFJVRSA9IHRydWU7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHt3aGlsZSAoVFJVRSkge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7U3lz
dGVtLm91dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJCX19KTtcbiIgKyAKKwkJCSIJCWdvbygo
eCkgLT4ge3doaWxlICh0cnVlKSB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtTeXN0ZW0ub3V0
LnByaW50bG4oKTt9XG4iICsgCisJCQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQki
fVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMjEoKSB7CisJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7
XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJ
CQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBp
KSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtc
biIgKyAKKwkJCSIJCQlpbnQgaSA9IDEwMDtcbiIgKyAKKwkJCSIJCQlvdXRlcjogd2hpbGUoeCA+
IDApIHtcbiIgKyAKKwkJCSIJCQkJaW5uZXI6IHdoaWxlKGkgPiAwKSB7XG4iICsgCisJCQkiCQkJ
CWlmKC0taSA+IDUwKSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJ
CQkJfVxuIiArIAorCQkJIgkJCQlpZihpID4gOTApIHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91
dGVyO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAor
CQkJIgkJCQl9XG4iICsgCisJCQkiCQkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxu
IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJU
aGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUg
YXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7
Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDIyKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQki
CXZvaWQgZm9vKFN0cmluZyBzKSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgem9vKEkgaSkge31cbiIgKyAK
KwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBGQUxTRSA9IGZh
bHNlO1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTtcbiIgKyAKKwkJCSIJ
CXpvbygoeCkgLT4ge3doaWxlIChUUlVFKSB0aHJvdyBuZXcgRXhjZXB0aW9uKCk7fSk7XG4iICsg
CisJCQkiCQl6b28oKHgpIC0+IHt3aGlsZSAoIUZBTFNFKSByZXR1cm4gO30pO1xuIiArIAorCQkJ
IgkJem9vKCh4KSAtPiB7d2hpbGUgKHgubGVuZ3RoKCkgPiAwKSB7XG4iICsgCisJCQkiCQkJaWYo
eC5sZW5ndGgoKSA+IDApIHtyZXR1cm4gO30gZWxzZSB7YnJlYWs7fVxuIiArIAorCQkJIgkJCX19
KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge3doaWxlICh4Lmxlbmd0aCgpID4gMCkge1xuIiAr
IAorCQkJIgkJCWlmKHgubGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9XG4iICsgCisJCQkiCQkJfX0p
O1xuIiArIAorCQkJIgkJem9vKCh4KSAtPiB7d2hpbGUgKHRydWUpIHtcbiIgKyAKKwkJCSIJCQlp
Zih4Lmxlbmd0aCgpID4gMCkge1N5c3RlbS5vdXQucHJpbnRsbigpO31cbiIgKyAKKwkJCSIJCQl9
fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+IHt3aGlsZSAoVFJVRSkge1xuIiArIAorCQkJIgkJ
CWlmKHgubGVuZ3RoKCkgPiAwKSB7U3lzdGVtLm91dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJ
CX19KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWludCBpID0gMTAw
O1xuIiArIAorCQkJIgkJCW91dGVyOiB3aGlsZSh4Lmxlbmd0aCgpID4gMCkge1xuIiArIAorCQkJ
IgkJCQlpbm5lcjogd2hpbGUoaSA+IDApIHtcbiIgKyAKKwkJCSIJCQkJaWYoLS1pID4gNTApIHtc
biIgKyAKKwkJCSIJCQkJCWJyZWFrIGlubmVyIDtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJ
IgkJCQlpZihpID4gOTApIHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91dGVyO1xuIiArIAorCQkJ
IgkJCQl9XG4iICsgCisJCQkiCQkJCXJldHVybiA7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJ
CSIJCQl9fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0pOworfQorcHVibGlj
IHZvaWQgdGVzdDAyMygpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9v
KGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0
ZXN0KCkge1xuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBGQUxTRSA9IGZhbHNlO1xuIiArIAor
CQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4g
e2RvIHt0aHJvdyBuZXcgRXhjZXB0aW9uKCk7fXdoaWxlIChGQUxTRSk7fSk7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtkbyB7IHJldHVybiBcIlwiO313aGlsZSAoZmFsc2UpO30pO1xuIiArIAor
CQkJIgkJZ29vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7U3lzdGVtLm91
dC5wcmludGxuKCk7fVxuIiArIAorCQkJIgkJCX13aGlsZSAodHJ1ZSk7fSk7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtkbyB7XG4iICsgCisJCQkiCQkJaWYoeCA+IDApIHtTeXN0ZW0ub3V0LnBy
aW50bG4oKTt9XG4iICsgCisJCQkiCQkJfXdoaWxlIChUUlVFKTt9KTtcbiIgKyAKKwkJCSIJfVxu
IiArIAorCQkJIn1cbiIKKwkJfSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDI0KCkgeworCXRoaXMu
cnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50
ZXJmYWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9u
O1xuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZv
aWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29v
KCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fSBlbHNl
IHticmVhazt9XG4iICsgCisJCQkiCQkJfXdoaWxlICh4ID4gMCk7fSk7XG4iICsgCisJCQkiCX1c
biIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtkbyB7XG4iICsgCisJ
CSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBh
cHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDI1KCkgeworCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJm
YWNlIEkge1xuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uO1xu
IiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQg
Z29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIgkJZ29vKCh4
KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHggPiAwKSB7cmV0dXJuIFwiXCI7fVxuIiArIAor
CQkJIgkJCX13aGlsZSAoeCA+IDApO30pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkiCV5eXlxuIiArIAorCQki
VGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIp
OworfQorcHVibGljIHZvaWQgdGVzdDAyNigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJ
bmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJ
CSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjtcbiIgKyAKKwkJCSJ9XG4iICsg
CisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsg
CisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCWludCBpID0gMTAwO1xuIiArIAorCQkJIgkJCW91dGVyOiBkbyB7XG4iICsgCisJCQkiCQkJ
CWlubmVyOiBkbyB7XG4iICsgCisJCQkiCQkJCWlmKC0taSA+IDUwKSB7XG4iICsgCisJCQkiCQkJ
CQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJCQlpZihpID4gOTAp
IHtcbiIgKyAKKwkJCSIJCQkJCWJyZWFrIG91dGVyO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJ
CQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQl9d2hpbGUoaSA+IDApO1xuIiArIAor
CQkJIgkJCX13aGlsZSh4ID4gMCk7fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJ
CX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBt
ZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30K
K3B1YmxpYyB2b2lkIHRlc3QwMjcoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCSIJdm9p
ZCBmb28oU3RyaW5nIHMpIHRocm93cyBFeGNlcHRpb247XG4iICsgCisJCQkifVxuIiArIAorCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCB6b28oSSBpKSB7fVxuIiArIAorCQkJ
Igl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+IHtkbyB7XG4iICsgCisJCQki
CQkJaWYoeC5sZW5ndGgoKSA+IDApIHtTeXN0ZW0ub3V0LnByaW50bG4oKTt9XG4iICsgCisJCQki
CQkJfXdoaWxlICh0cnVlKTt9KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge2RvIHt0aHJvdyBu
ZXcgRXhjZXB0aW9uKCk7fXdoaWxlIChmYWxzZSk7fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+
IHtkbyB7IHJldHVybiA7fXdoaWxlIChmYWxzZSk7fSk7XG4iICsgCisJCQkiCQl6b28oKHgpIC0+
IHtkbyB7IGNvbnRpbnVlIDt9d2hpbGUgKHRydWUpO30pO1xuIiArIAorCQkJIgkJem9vKCh4KSAt
PiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHgubGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9IGVsc2Ug
e2JyZWFrO31cbiIgKyAKKwkJCSIJCQl9d2hpbGUgKHgubGVuZ3RoKCkgPiAwKTtcbiIgKyAKKwkJ
CSIJCX0pO1xuIiArIAorCQkJIgkJem9vKCh4KSAtPiB7ZG8ge1xuIiArIAorCQkJIgkJCWlmKHgu
bGVuZ3RoKCkgPiAwKSB7cmV0dXJuIDt9XG4iICsgCisJCQkiCQkJfXdoaWxlICh4Lmxlbmd0aCgp
ID4gMCk7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJCXpvbygoeCkgLT4ge1xuIiArIAor
CQkJIgkJaW50IGkgPSAxMDA7XG4iICsgCisJCQkiCQlvdXRlcjogZG8ge1xuIiArIAorCQkJIgkJ
CWlubmVyOiBkbyB7XG4iICsgCisJCQkiCQkJaWYoLS1pID4gNTApIHtcbiIgKyAKKwkJCSIJCQkJ
YnJlYWsgaW5uZXIgO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCQlpZihpID4gOTApIHtc
biIgKyAKKwkJCSIJCQkJYnJlYWsgb3V0ZXI7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJ
CXJldHVybiA7XG4iICsgCisJCQkiCQkJfXdoaWxlKGkgPiAwKTtcbiIgKyAKKwkJCSIJCX13aGls
ZSh4Lmxlbmd0aCgpID4gMCk7fSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0p
OworfQorcHVibGljIHZvaWQgdGVzdDAyOCgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQlu
ZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJ
CSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiAr
IAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlmaW5hbCBib29sZWFuIEZBTFNFID0g
ZmFsc2U7IFxuIiArIAorCQkJIgkJZmluYWwgYm9vbGVhbiBUUlVFID0gdHJ1ZTsgXG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO1RSVUU7KXtcbiIgKyAKKwkJCSIJ
CQl9fSk7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoaW50IGkg
PSAwO2kgPCAxMDA7IGkrPSAxMCl7XG4iICsgCisJCQkiCQkJCXN3aXRjaChpKSB7XG4iICsgCisJ
CQkiCQkJCWNhc2UgOTA6IHtcbiIgKyAKKwkJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRsbigpO1xu
IiArIAorCQkJIgkJCQkJYnJlYWs7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJY2Fz
ZSA4MDoge1xuIiArIAorCQkJIgkJCQkJaWYoeCA+IDEwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJ
CSIJCQkJCWJyZWFrO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCWRlZmF1bHQ6XG4i
ICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJ
CX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJ
IgkJXG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO1RSVUU7KXtc
biIgKyAKKwkJCSIJCQkJaWYoeCA8IDEwMCkgcmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQkJCWVs
c2UgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9fSk7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+
IHtcbiIgKyAKKwkJCSIJCQlmb3IoO3ggPiAwOyl7XG4iICsgCisJCQkiCQkJCWlmKHggPCAxMDAp
IHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQllbHNlIHJldHVybiBudWxsO1xuIiArIAorCQkJ
IgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMjkoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3Mg
RXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdCgpIHtcbiIgKyAK
KwkJCSIJCWZpbmFsIGJvb2xlYW4gRkFMU0UgPSBmYWxzZTsgXG4iICsgCisJCQkiCQlnb28oKHgp
IC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO0ZBTFNFOyl7XG4iICsgCisJCQkiCQkJfX0pO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDMwKCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQki
aW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2Vw
dGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJ
CSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQki
CQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoO3ggPiAwOyl7XG4iICsgCisJCQkiCQkJ
CWlmKHggPCAxMDApIHJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQllbHNlIHJldHVybiBudWxs
O1xuIiArIAorCQkJIgkJfX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4i
ICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9k
IGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
ICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJs
aWMgdm9pZCB0ZXN0MDMxKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5n
W10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5n
IGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2
b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3Io
aW50IGkgPSAwO2kgPCAxMDA7IGkrPSAxMCl7XG4iICsgCisJCQkiCQkJCXN3aXRjaChpKSB7XG4i
ICsgCisJCQkiCQkJCWNhc2UgOTA6IHtcbiIgKyAKKwkJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRs
bigpO1xuIiArIAorCQkJIgkJCQkJYnJlYWs7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJ
CQkJY2FzZSA4MDoge1xuIiArIAorCQkJIgkJCQkJaWYoeCA+IDEwKSByZXR1cm4gbnVsbDtcbiIg
KyAKKwkJCSIJCQkJCWJyZWFrO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJCWRlZmF1
bHQ6XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAor
CQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgdm9pZCB0ZXN0MDMyKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJ
U3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAor
CQkJIgl2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJ
CQlvdXRlcjogZm9yKGludCBpID0gMDtpIDwgMTAwOyBpKz0gMTApe1xuIiArIAorCQkJIgkJCQlp
bm5lciA6IGZvcihpbnQgaiA9IHg7IGogPiAwOyBqLS0pIHtcbiIgKyAKKwkJCSIJCQkJCXN3aXRj
aChpKSB7XG4iICsgCisJCQkiCQkJCQljYXNlIDkwOiB7XG4iICsgCisJCQkiCQkJCQkJU3lzdGVt
Lm91dC5wcmludGxuKCk7XG4iICsgCisJCQkiCQkJCQkJYnJlYWsgaW5uZXI7XG4iICsgCisJCQki
CQkJCQl9XG4iICsgCisJCQkiCQkJCQljYXNlIDgwOiB7XG4iICsgCisJCQkiCQkJCQkJaWYoeCA+
IDEwKSByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCQkJCQlicmVhayBvdXRlcjtcbiIgKyAKKwkJ
CSIJCQkJCX1cbiIgKyAKKwkJCSIJCQkJCWRlZmF1bHQ6XG4iICsgCisJCQkiCQkJCQkJcmV0dXJu
IFwiXCI7XG4iICsgCisJCQkiCQkJCQl9XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJ
XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJ
CSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAK
KwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9y
IHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0t
XG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzMoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgK
KwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsg
CisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1c
biIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31c
biIgKyAKKwkJCSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygo
eCkgLT4ge1xuIiArIAorCQkJIgkJCWZvcihTdHJpbmcgc3RyIDogc3Rycyl7XG4iICsgCisJCQki
CQkJCWlmKHN0ci5sZW5ndGgoKSA+IDApIHtcbiIgKyAKKwkJCSIJCQkJCXJldHVybiBcInllc1wi
O1xuIiArIAorCQkJIgkJCQl9IGVsc2Uge1xuIiArIAorCQkJIgkJCQkJcmV0dXJuIFwibm9cIjtc
biIgKyAKKwkJCSIJCQkJfVxuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVs
bDtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQki
CQkJZm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJcmV0dXJuIFwibm9cIjtc
biIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQkJcmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQl9
KTtcbiIgKyAKKwkJCSIJCVxuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
Zm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJaWYoc3RyLmxlbmd0aCgpID4g
MCkgYnJlYWs7XG4iICsgCisJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbigpO1xuIiArIAorCQkJ
IgkJCX1cbiIgKyAKKwkJCSIJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArIAor
CQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzQoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3Mg
RXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBz
dHJzKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoU3RyaW5n
IHN0ciA6IHN0cnMpe1xuIiArIAorCQkJIgkJCQlpZihzdHIubGVuZ3RoKCkgPiAwKSB7XG4iICsg
CisJCQkiCQkJCQlyZXR1cm4gXCJ5ZXNcIjtcbiIgKyAKKwkJCSIJCQkJfSBlbHNlIHtcbiIgKyAK
KwkJCSIJCQkJCXJldHVybiBcIm5vXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQl9
XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJfSwKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiAr
IAorCQkiCWdvbygoeCkgLT4ge1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBn
b28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAo
KDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorcHVibGlj
IHZvaWQgdGVzdDAzNSgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0cmluZyBm
b28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9p
ZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAor
CQkJIgkJCWZvcihTdHJpbmcgc3RyIDogc3Rycyl7XG4iICsgCisJCQkiCQkJCXJldHVybiBcIm5v
XCI7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIg
KyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwMzYoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxu
IiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJ
CSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkp
IHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgCisJCQkiCQln
b28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQlmb3IoU3RyaW5nIHN0ciA6IHN0cnMpe1xuIiArIAor
CQkJIgkJCQlzd2l0Y2goc3RyLmxlbmd0aCgpKSB7XG4iICsgCisJCQkiCQkJCWNhc2UgOToge1xu
IiArIAorCQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKCk7XG4iICsgCisJCQkiCQkJCQlyZXR1
cm4gXCJuaW5lXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJY2FzZSAxOiB7XG4i
ICsgCisJCQkiCQkJCQlpZih4ID4gMTApIHJldHVybiBudWxsO1xuIiArIAorCQkJIgkJCQkJcmV0
dXJuIFwib25lXCI7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQkJZGVmYXVsdDpcbiIg
KyAKKwkJCSIJCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQl9XG4iICsgCisJCQkiCQkJ
fVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qg
Z29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1Ymxp
YyB2b2lkIHRlc3QwMzcoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcg
Zm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZv
aWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgCisJCQkiCQlnb28oKHgpIC0+IHtcbiIgKyAK
KwkJCSIJCQlvdXRlcjogZm9yKFN0cmluZyBzdHIgOiBzdHJzKXtcbiIgKyAKKwkJCSIJCQkJaW5u
ZXIgOiBmb3IoaW50IGogPSB4OyBqID4gMDsgai0tKSB7XG4iICsgCisJCQkiCQkJCQlzd2l0Y2go
c3RyLmxlbmd0aCgpKSB7XG4iICsgCisJCQkiCQkJCQljYXNlIDk6IHtcbiIgKyAKKwkJCSIJCQkJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oKTtcbiIgKyAKKwkJCSIJCQkJCQlicmVhayBpbm5lcjtcbiIg
KyAKKwkJCSIJCQkJCX1cbiIgKyAKKwkJCSIJCQkJCWNhc2UgODoge1xuIiArIAorCQkJIgkJCQkJ
CWlmKHggPiAxMCkgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQkJCQkJYnJlYWsgb3V0ZXI7XG4i
ICsgCisJCQkiCQkJCQl9XG4iICsgCisJCQkiCQkJCQlkZWZhdWx0OlxuIiArIAorCQkJIgkJCQkJ
CXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCQkJfVxuIiArIAorCQkJIgkJCQl9XG4iICsgCisJ
CQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJ
CX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBt
ZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30K
K3B1YmxpYyB2b2lkIHRlc3QwMzgoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0
cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJ
CSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xu
IiArIAorCQkJIgkJCXN3aXRjaCh4KSB7XG4iICsgCisJCQkiCQkJY2FzZSAwIDogaWYoeCA+IDEw
KSByZXR1cm4gXCI+MTBcIjtcbiIgKyAKKwkJCSIJCQljYXNlIDE6IHJldHVybiBcIjFcIjtcbiIg
KyAKKwkJCSIJCQlkZWZhdWx0OiByZXR1cm4gXCItMVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAK
KwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJU3RyaW5n
IHN0ciA9IFwiXCI7XG4iICsgCisJCQkiCQkJc3dpdGNoKHgpIHtcbiIgKyAKKwkJCSIJCQljYXNl
IDAgOiBpZih4ID4gMTApIGJyZWFrOyBlbHNlIHtzdHIgPSBcIjBcIjsgYnJlYWs7fVxuIiArIAor
CQkJIgkJCWNhc2UgMTogc3RyID0gXCIxXCI7YnJlYWs7XG4iICsgCisJCQkiCQkJZGVmYXVsdDog
YnJlYWs7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJCXJldHVybiBzdHI7XG4iICsgCisJ
CQkiCQl9KTtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCVN0cmluZyBz
dHIgPSBcIlwiO1xuIiArIAorCQkJIgkJCXN3aXRjaCh4KXt9XG4iICsgCisJCQkiCQkJcmV0dXJu
IHN0cjtcbiIgKyAKKwkJCSIJCX0pO1xuIiArICAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJ
fSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDM5KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAor
CQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAK
KwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxu
IiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxu
IiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10gc3Rycykge1xuIiArIAorCQkJIgkJZ29vKCh4
KSAtPiB7XG4iICsgCisJCQkiCQkJc3dpdGNoKHgpIHtcbiIgKyAKKwkJCSIJCQljYXNlIDAgOiBp
Zih4ID4gMTApIHJldHVybiBcIj4xMFwiO1xuIiArIAorCQkJIgkJCWNhc2UgMTogcmV0dXJuIFwi
MVwiO1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArICAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkiCWdvbygoeCkgLT4ge1xuIiArIAorCQkiCV5eXlxu
IiArIAorCQkiVGhlIG1ldGhvZCBnb28oSSkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoKDxubyB0eXBlPiB4KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0t
LS0tLS1cbiIpOworfQorcHVibGljIHZvaWQgdGVzdDA0MCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsg
XG4iICsgCisJCQkiCVN0cmluZyBmb28oaW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAor
CQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkg
aSkge31cbiIgKyAKKwkJCSIJdm9pZCB0ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJ
CWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCVN0cmluZyBzdHIgPSBcIlwiO1xuIiArIAorCQkJ
IgkJCXN3aXRjaCh4KSB7XG4iICsgCisJCQkiCQkJY2FzZSAwIDogaWYoeCA+IDEwKSBicmVhazsg
ZWxzZSB7c3RyID0gXCIwXCI7IGJyZWFrO31cbiIgKyAKKwkJCSIJCQljYXNlIDE6IHN0ciA9IFwi
MVwiO2JyZWFrO1xuIiArIAorCQkJIgkJCWRlZmF1bHQ6IGJyZWFrO1xuIiArIAorCQkJIgkJCX1c
biIgKyAKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSIt
LS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAK
KwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29v
KEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8
bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2
b2lkIHRlc3QwNDEoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImludGVyZmFjZSBJIHsgXG4iICsgCisJCQkiCVN0cmluZyBmb28o
aW50IHgpIHRocm93cyBFeGNlcHRpb247IFxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZ29vKEkgaSkge31cbiIgKyAKKwkJCSIJdm9pZCB0
ZXN0KFN0cmluZ1tdIHN0cnMpIHtcbiIgKyAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJ
IgkJCXRyeSB7XG4iICsgCisJCQkiCQkJCXJldHVybiBcIlwiO1xuIiArIAorCQkJIgkJCX0gZmlu
YWxseSB7XG4iICsgCisJCQkiCQkJCVxuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQki
CQkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCk7XG4iICsgCisJCQkiCQkJCX0gZmluYWxseSB7XG4i
ICsgCisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgkJZ29vKCh4KSAtPiB7
XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlpZih4ID4gMCkgXG4iICsgCisJ
CQkiCQkJCQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIJCQkJfSBj
YXRjaCAoTnVsbFBvaW50ZXJFeGNlcHRpb24gZSkge3JldHVybiBudWxsO30gXG4iICsgCisJCQki
CQkJCWNhdGNoKENsYXNzQ2FzdEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQkiCQkJCX1cbiIgKyAK
KwkJCSIJCQkJZmluYWxseSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJ
CSIJCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCQlcbiIgKyAKKwkJCSIJfVxuIiAr
IAorCQkJIn1cbiIKKwkJfSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDQyKCkgeworCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJm
YWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dzIEV4Y2VwdGlvbjsg
XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9p
ZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10gc3Rycykge1xuIiAr
ICAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCXRyeSB7XG4iICsgCisJCQkiCQkJ
CWlmKHggPiAwKSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJ
fVxuIiArIAorCQkJIgkJCX0gZmluYWxseSB7fVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQki
CX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJ
IgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFw
cGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJ
CSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRlc3QwNDMoKSB7CisJdGhpcy5ydW5O
ZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZh
Y2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBc
biIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lk
IGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsg
IAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJdHJ5IHtcbiIgKyAKKwkJCSIJCQkJ
cmV0dXJuIFwiXCI7XG4iICsgCisJCQkiCQkJfWNhdGNoIChFeGNlcHRpb24gZSkge31cbiIgKyAK
KwkJCSIJCQlmaW5hbGx5IHtcbiIgKyAKKwkJCSIJCQkJXG4iICsgCisJCQkiCQkJfVxuIiArIAor
CQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0t
LS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJIgln
b28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZ29vKEkpIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCg8bm8gdHlw
ZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1YmxpYyB2b2lkIHRl
c3QwNDQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQki
WC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJpbmcgZm9vKGludCB4
KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNz
IFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQkiCXZvaWQgdGVzdChT
dHJpbmdbXSBzdHJzKSB7XG4iICsgIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4iICsgCisJCQkiCQkJ
dHJ5IHtcbiIgKyAKKwkJCSIJCQkJLy9pZih4ID4gMCkgXG4iICsgCisJCQkiCQkJCQl0aHJvdyBu
ZXcgUnVudGltZUV4Y2VwdGlvbigpO1xuIiArIAorCQkJIgkJCX0gY2F0Y2ggKE51bGxQb2ludGVy
RXhjZXB0aW9uIGUpIHtyZXR1cm4gbnVsbDt9IFxuIiArIAorCQkJIgkJCWNhdGNoKENsYXNzQ2Fz
dEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJ
CQkiCQlnb28oKHgpIC0+IHtcbiIgKyAKKwkJCSIJCQl0cnkge1xuIiArIAorCQkJIgkJCQlpZih4
ID4gMCkgXG4iICsgCisJCQkiCQkJCQl0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigpO1xuIiAr
IAorCQkJIgkJCX0gY2F0Y2ggKE51bGxQb2ludGVyRXhjZXB0aW9uIGUpIHtyZXR1cm4gbnVsbDt9
IFxuIiArIAorCQkJIgkJCWNhdGNoKENsYXNzQ2FzdEV4Y2VwdGlvbiBjKSB7XG4iICsgCisJCQki
CQkJfVxuIiArIAorCQkJIgkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0s
CisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylc
biIgKyAKKwkJIglnb28oKHgpIC0+IHtcbiIgKyAKKwkJIgleXl5cbiIgKyAKKwkJIlRoZSBtZXRo
b2QgZ29vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKCg8bm8gdHlwZT4geCkgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KK3B1
YmxpYyB2b2lkIHRlc3QwNDUoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7IFxuIiArIAorCQkJIglTdHJp
bmcgZm9vKGludCB4KSB0aHJvd3MgRXhjZXB0aW9uOyBcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIgl2b2lkIGdvbyhJIGkpIHt9XG4iICsgCisJCQki
CXZvaWQgdGVzdChTdHJpbmdbXSBzdHJzKSB7XG4iICsgIAorCQkJIgkJZ29vKCh4KSAtPiB7XG4i
ICsgCisJCQkiCQkJdHJ5IHtcbiIgKyAKKwkJCSIJCQkJaWYoeCA+IDApIFxuIiArIAorCQkJIgkJ
CQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIJCQl9IGNhdGNoIChO
dWxsUG9pbnRlckV4Y2VwdGlvbiBlKSB7cmV0dXJuIG51bGw7fSBcbiIgKyAKKwkJCSIJCQljYXRj
aChDbGFzc0Nhc3RFeGNlcHRpb24gYykge1xuIiArIAorCQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0p
O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJZ29vKCh4KSAt
PiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlw
ZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+
IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0MDQ2KCkg
eworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIs
CisJCQkiaW50ZXJmYWNlIEkgeyBcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhpbnQgeCkgdGhyb3dz
IEV4Y2VwdGlvbjsgXG4iICsgCisJCQkifVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KyAKKwkJCSIJdm9pZCBnb28oSSBpKSB7fVxuIiArIAorCQkJIgl2b2lkIHRlc3QoU3RyaW5nW10g
c3Rycykge1xuIiArICAKKwkJCSIJCWdvbygoeCkgLT4ge1xuIiArIAorCQkJIgkJCWlmICh0cnVl
KSB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlpZih4ID4gMClcbiIgKyAK
KwkJCSIJCQkJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCk7XG4iICsgCisJCQkiCQkJCX0gZmluYWxs
eSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gXCJcIjtcbiIgKyAKKwkJCSIJCQkJfVxuIiArIAor
CQkJIgkJCX1cbiIgKyAKKwkJCSIJCX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgor
CQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDcpXG4iICsgCisJCSIJZ29vKCh4KSAtPiB7XG4iICsgCisJCSIJXl5eXG4iICsgCisJCSJUaGUg
bWV0aG9kIGdvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzICgoPG5vIHR5cGU+IHgpIC0+IHt9KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9
CitwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKKwlyZXR1cm4gTGFtYmRhU2hhcGVU
ZXN0cy5jbGFzczsKK30KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1Rlc3RBbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwu
amF2YQppbmRleCAyYzBiYTA2Li5mZTUyNjM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vVGVzdEFsbC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE0Nyw2ICsxNDcsNyBAQAog
CXNpbmNlXzFfOC5hZGQoUmVwZWF0YWJsZUFubm90YXRpb25UZXN0LmNsYXNzKTsKIAlzaW5jZV8x
XzguYWRkKEdlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmNsYXNzKTsKIAlzaW5jZV8xXzguYWRk
KFVuaWNvZGUxOFRlc3QuY2xhc3MpOworCXNpbmNlXzFfOC5hZGQoTGFtYmRhU2hhcGVUZXN0cy5j
bGFzcyk7CiAKIAkvLyBCdWlsZCBmaW5hbCB0ZXN0IHN1aXRlCiAJVGVzdFN1aXRlIGFsbCA9IG5l
dyBUZXN0U3VpdGUoVGVzdEFsbC5jbGFzcy5nZXROYW1lKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L1J1bk9ubHlKYXZhOFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2Rl
bC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvUnVuT25seUphdmE4VGVzdHMuamF2YQpp
bmRleCAzMjg4ODk1Li45ZjM3NjY0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvUnVuT25seUphdmE4VGVz
dHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvUnVuT25seUphdmE4VGVzdHMuamF2YQpAQCAtNDEsNiArNDEs
NyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Np
b24uSlNSMzM1Q2xhc3NGaWxlVGVzdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci5yZWdyZXNzaW9uLkxhbWJkYUV4cHJlc3Npb25zVGVzdDsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLkxhbWJkYVJlZ3Jlc3Np
b25UZXN0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jl
c3Npb24uTGFtYmRhU2hhcGVUZXN0czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci5yZWdyZXNzaW9uLk1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0OwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uTmVnYXRp
dmVMYW1iZGFFeHByZXNzaW9uc1Rlc3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIucmVncmVzc2lvbi5OZWdhdGl2ZVR5cGVBbm5vdGF0aW9uVGVzdDsKQEAgLTc4
LDYgKzc5LDcgQEAKIAkJCU5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzLAogCQkJ
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzLAogCQkJTGFtYmRhUmVncmVzc2lvblRlc3QuY2xh
c3MsCisJCQlMYW1iZGFTaGFwZVRlc3RzLmNsYXNzLAogCQkJU2VyaWFsaXphYmxlTGFtYmRhVGVz
dC5jbGFzcywKIAkJCU92ZXJsb2FkUmVzb2x1dGlvblRlc3Q4LmNsYXNzLAogCQkJSlNSMzM1Q2xh
c3NGaWxlVGVzdC5jbGFzcywKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVh
c3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxl
dGlvbk9uQnJhbmNoU3RhdGVtZW50TGFiZWwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
ZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29t
cGxldGlvbk9uQnJhbmNoU3RhdGVtZW50TGFiZWwuamF2YQppbmRleCAxYzk0MGQ1Li5mMDE3ZjYx
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2NvbXBsZXRlL0NvbXBsZXRpb25PbkJyYW5jaFN0YXRl
bWVudExhYmVsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uT25CcmFu
Y2hTdGF0ZW1lbnRMYWJlbC5qYXZhCkBAIC00OSw0ICs0OSwxMCBAQAogCQlyZXR1cm4gb3V0cHV0
LmFwcGVuZCgiPjsiKTsgLy8kTk9OLU5MUy0xJAogCX0KIAorCUBPdmVycmlkZQorCXB1YmxpYyBi
b29sZWFuIGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwkJ
Ly8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gZmFsc2U7CisJfQor
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggZmQ1ZWEyNS4uMDFhMzQz
OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNjkwLDcgKzY5MCwxMCBA
QAogcHVibGljIGJvb2xlYW4gc3RhdGVtZW50RXhwcmVzc2lvbigpIHsKIAlyZXR1cm4gdHJ1ZTsK
IH0KLQorQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShT
aGFwZUluZm8gc2hhcGVJbmZvKSB7CisJcmV0dXJuIGZhbHNlOworfQogLy8tLSBpbnRlcmZhY2Ug
SW52b2NhdGlvbjogLS0KIHB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoKSB7CiAJcmV0dXJu
IHRoaXMuYmluZGluZzsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzZXJ0U3RhdGVtZW50Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0Fzc2VydFN0YXRlbWVudC5qYXZhCmluZGV4IDE3Y2JjMDEuLjU2ZDVm
ZDAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzZXJ0U3RhdGVtZW50LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Bc3NlcnRTdGF0ZW1lbnQuamF2YQpAQCAtMjEzLDQgKzIxMywxNyBAQAogCX0KIAly
ZXR1cm4gb3V0cHV0LmFwcGVuZCgnOycpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFu
IGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlDb25zdGFu
dCBjc3QgPSB0aGlzLmFzc2VydEV4cHJlc3Npb24ub3B0aW1pemVkQm9vbGVhbkNvbnN0YW50KCk7
CisJYm9vbGVhbiBpc09wdGltaXplZFRydWVBc3NlcnRpb24gPSBjc3QgIT0gQ29uc3RhbnQuTm90
QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9PSB0cnVlOworCWJvb2xlYW4gaXNPcHRp
bWl6ZWRGYWxzZUFzc2VydGlvbiA9IGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0
LmJvb2xlYW5WYWx1ZSgpID09IGZhbHNlOworCWlmKGlzT3B0aW1pemVkVHJ1ZUFzc2VydGlvbikK
KwkJcmV0dXJuIGZhbHNlOworCWlmKGlzT3B0aW1pemVkRmFsc2VBc3NlcnRpb24pCisJCXJldHVy
biB0cnVlOworCS8vIFRPRE8gLSBob3cgZG8gd2Uga25vdz8/CisJcmV0dXJuIGZhbHNlOworfQog
fQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fz
c2lnbm1lbnQuamF2YQppbmRleCBjZjg2ZDMwLi5hMTEzMDJjIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0Fzc2lnbm1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQpAQCAt
MjY3LDQgKzI2Nyw5IEBACiBwdWJsaWMgYm9vbGVhbiBzdGF0ZW1lbnRFeHByZXNzaW9uKCkgewog
CXJldHVybiB0cnVlOwogfQorQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxl
dGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJLy8KKwlyZXR1cm4gZmFsc2U7Cit9
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2NrLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2Nr
LmphdmEKaW5kZXggZTdhZjgyZi4uZGJlMjNkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9CbG9j
ay5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQmxvY2suamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0x
NDcsNCArMTQ3LDE1IEBACiAJCXRoaXMuc3RhdGVtZW50c1t0aGlzLnN0YXRlbWVudHMubGVuZ3Ro
IC0gMV0uYnJhbmNoQ2hhaW5UbyhsYWJlbCk7CiAJfQogfQorQE92ZXJyaWRlCitwdWJsaWMgYm9v
bGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJaWYg
KCh0aGlzLnN0YXRlbWVudHMgPT0gbnVsbCkgfHwgdGhpcy5zdGF0ZW1lbnRzLmxlbmd0aCA9PSAw
KQorCQlyZXR1cm4gZmFsc2U7CisJYm9vbGVhbiBibG9ja0NvbXBsZXRlc0FicnVwdGx5ID0gZmFs
c2U7CisJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuc3RhdGVtZW50cy5sZW5ndGg7IGkgPCBt
YXg7IGkrKykgeworCQlTdGF0ZW1lbnQgc3RhdCA9IHRoaXMuc3RhdGVtZW50c1tpXTsKKwkJYmxv
Y2tDb21wbGV0ZXNBYnJ1cHRseSB8PSBzdGF0LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBl
SW5mbyk7CisJfQorCXJldHVybiBibG9ja0NvbXBsZXRlc0FicnVwdGx5OworfQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9CcmVha1N0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9CcmVha1N0
YXRlbWVudC5qYXZhCmluZGV4IDc5ZjJlYjAuLjVmMjgzOTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQnJlYWtTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0JyZWFrU3RhdGVtZW50Lmph
dmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtOTUsNCArOTUsMTMgQEAKIAl2aXNpdG9yLnZpc2l0KHRo
aXMsIGJsb2Nrc2NvcGUpOwogCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgYmxvY2tzY29wZSk7CiB9
CisKK0BPdmVycmlkZQorcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hh
cGVJbmZvIHNoYXBlSW5mbykgeworCXNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgfD0gdGhpcy5s
YWJlbCAhPSBudWxsID8gU2hhcGVJbmZvLkJSRUFLX1dJVEhfTEFCRUwgOiBTaGFwZUluZm8uQlJF
QUs7CisJaWYgKHRoaXMubGFiZWwgIT0gbnVsbCkgeworCQlzaGFwZUluZm8uYWRkQnJlYWtMYWJl
bChuZXcgU3RyaW5nKHRoaXMubGFiZWwpKTsKKwl9CisJcmV0dXJuIHRydWU7Cit9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc2VTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzZVN0
YXRlbWVudC5qYXZhCmluZGV4IDEzYjI3ODkuLmQ5NzIwMGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQ2FzZVN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzZVN0YXRlbWVudC5qYXZh
CkBAIC0xNDEsNCArMTQxLDkgQEAKIAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Nj
b3BlKTsKIH0KKworQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3Jt
YWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJcmV0dXJuIGZhbHNlOworfQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9Db250aW51ZVN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db250
aW51ZVN0YXRlbWVudC5qYXZhCmluZGV4IDEzMzdjZGQuLjk3ZWNmZjAgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQ29udGludWVTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbnRpbnVl
U3RhdGVtZW50LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtOTgsNCArOTgsOSBAQAogCXZpc2l0
b3IudmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9j
a1Njb3BlKTsKIH0KKworQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVO
b3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJcmV0dXJuIHRydWU7Cit9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0RvU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0RvU3RhdGVt
ZW50LmphdmEKaW5kZXggMjY3YmExNS4uYzdlYzlkMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9E
b1N0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRG9TdGF0ZW1lbnQuamF2YQpAQCAtMSw1
ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CkBAIC0yMjYsNCArMjI2LDMwIEBACiAJfQogCXZpc2l0b3IuZW5kVmlzaXQodGhp
cywgc2NvcGUpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRvZXNOb3RDb21wbGV0
ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlDb25zdGFudCBjc3QgPSB0aGlzLmNv
bmRpdGlvbi5jb25zdGFudDsKKwlib29sZWFuIGlzQ29uZGl0aW9uVHJ1ZSA9IGNzdCAhPSBDb25z
dGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IHRydWU7CisJYm9vbGVh
biBpc0NvbmRpdGlvbkZhbHNlID0gY3N0ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCAmJiBjc3Qu
Ym9vbGVhblZhbHVlKCkgPT0gZmFsc2U7CisJY3N0ID0gdGhpcy5jb25kaXRpb24ub3B0aW1pemVk
Qm9vbGVhbkNvbnN0YW50KCk7CisJYm9vbGVhbiBpc0NvbmRpdGlvbk9wdGltaXplZFRydWUgPSBj
c3QgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9PSB0cnVl
OworCWJvb2xlYW4gaXNDb25kaXRpb25PcHRpbWl6ZWRGYWxzZSA9IGNzdCAhPSBDb25zdGFudC5O
b3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IGZhbHNlOworCWJvb2xlYW4gYWN0
aW9uQ29tcGxldGVzQWJydXB0bHkgPSBmYWxzZTsKKwlpZiAoKHRoaXMuYWN0aW9uICE9IG51bGwp
ICYmICF0aGlzLmFjdGlvbi5pc0VtcHR5QmxvY2soKSkgeworCQlhY3Rpb25Db21wbGV0ZXNBYnJ1
cHRseSA9IHRoaXMuYWN0aW9uLmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CisJ
CWlmKGFjdGlvbkNvbXBsZXRlc0FicnVwdGx5KSB7CisJCQlpZiAoKHNoYXBlSW5mby5jb21wbGV0
aW9uRmxhZ3MgJiBTaGFwZUluZm8uQlJFQUspICE9IDApCisJCQkJcmV0dXJuIGZhbHNlOworCQkJ
aWYgKChzaGFwZUluZm8uY29tcGxldGlvbkZsYWdzICYgU2hhcGVJbmZvLkNPTlRJTlVFKSAhPSAw
KSB7CisJCQkJaWYgKGlzQ29uZGl0aW9uRmFsc2UgfHwgaXNDb25kaXRpb25PcHRpbWl6ZWRGYWxz
ZSkKKwkJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQkJcmV0dXJuIHRydWU7CisJCX0KKwkJaWYg
KGlzQ29uZGl0aW9uRmFsc2UgfHwgaXNDb25kaXRpb25PcHRpbWl6ZWRGYWxzZSkKKwkJCXJldHVy
biBmYWxzZTsKKwl9CisJcmV0dXJuIGlzQ29uZGl0aW9uVHJ1ZSB8fCBpc0NvbmRpdGlvbk9wdGlt
aXplZFRydWU7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0VtcHR5U3RhdGVtZW50Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0VtcHR5U3RhdGVtZW50LmphdmEKaW5kZXggOTA0ZTU2NC4uNTRkM2Ni
OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FbXB0eVN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRW1wdHlTdGF0ZW1lbnQuamF2YQpAQCAtNTksNiArNTksMTEgQEAKIAkJdmlzaXRvci5l
bmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJfQogCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4g
ZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCQlyZXR1cm4g
ZmFsc2U7CisJfQorCiAKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0
cnVjdG9yQ2FsbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZh
CmluZGV4IDY1ZjZkMmMuLmQ3MWI0NGQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRD
b25zdHJ1Y3RvckNhbGwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JD
YWxsLmphdmEKQEAgLTUxNCw0ICs1MTQsOSBAQAogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
ZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJCXJldHVybiBuZXcgSW5mZXJl
bmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CiAJfQorCisJQE92ZXJy
aWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNo
YXBlSW5mbykgeworCQlyZXR1cm4gZmFsc2U7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRleCAyZTJj
ODFjLi4wZjM0YzRiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQpAQCAtMjM0LDYgKzIzNCwxMiBAQAogCXJldHVy
biBmbG93SW5mbzsKIH0KIAorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRvZXNOb3RDb21w
bGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwl0aHJvdyBuZXcgSWxsZWdhbFN0
YXRlRXhjZXB0aW9uKCJJbnZhbGlkIGNvbnRyb2wgZmxvdyIpOyAvLyROT04tTkxTLTEkCit9CisK
IC8qKgogICogTW9yZSBzb3BoaXN0aWNhdGVkIGZvciBvZiB0aGUgZmxvdyBhbmFseXNpcyB1c2Vk
IGZvciBhbmFseXppbmcgZXhwcmVzc2lvbnMsIGFuZCBiZSBhYmxlIHRvIG9wdGltaXplIG91dAog
ICogcG9ydGlvbnMgb2YgZXhwcmVzc2lvbnMgd2hlcmUgbm8gYWN0dWFsIHZhbHVlIGlzIHJlcXVp
cmVkLgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GaWVsZERlY2xhcmF0aW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0ZpZWxkRGVjbGFyYXRpb24uamF2YQppbmRleCBjYTc4MzgwLi5jNTZjYTAxIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0ZpZWxkRGVjbGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0ZpZWxkRGVjbGFyYXRpb24uamF2YQpAQCAtMzQwLDQgKzM0MCw5IEBACiAJfQogCXZpc2l0b3Iu
ZW5kVmlzaXQodGhpcywgc2NvcGUpOwogfQorCitAT3ZlcnJpZGUKK3B1YmxpYyBib29sZWFuIGRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwlyZXR1cm4gZmFs
c2U7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZvclN0YXRlbWVudC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Gb3JTdGF0ZW1lbnQuamF2YQppbmRleCAzN2RhYzhlLi5hMmZmMjZjIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0ZvclN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yU3Rh
dGVtZW50LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNDI3LDQgKzQyNyw0NCBAQAogCQl9CiAJ
CXZpc2l0b3IuZW5kVmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiAJfQorCisJQE92ZXJyaWRlCisJ
cHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5m
bykgeworCQlib29sZWFuIGluaXRzQ29tcGxldGVBYnJ1cHRseSA9IGZhbHNlOworCQlpZiAodGhp
cy5pbml0aWFsaXphdGlvbnMgIT0gbnVsbCkgeworCQkJZm9yIChpbnQgaSA9IDAsIGNvdW50ID0g
dGhpcy5pbml0aWFsaXphdGlvbnMubGVuZ3RoOyBpIDwgY291bnQ7IGkrKykgeworCQkJCWluaXRz
Q29tcGxldGVBYnJ1cHRseSB8PSB0aGlzLmluaXRpYWxpemF0aW9uc1tpXS5kb2VzTm90Q29tcGxl
dGVOb3JtYWxseShzaGFwZUluZm8pOworCQkJfQorCQl9CisJCUNvbnN0YW50IGNzdCA9IHRoaXMu
Y29uZGl0aW9uID09IG51bGwgPyBudWxsIDogdGhpcy5jb25kaXRpb24uY29uc3RhbnQ7CisJCWJv
b2xlYW4gaXNDb25kaXRpb25UcnVlID0gY3N0ID09IG51bGwgfHwgKGNzdCAhPSBDb25zdGFudC5O
b3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgpID09IHRydWUpOworCQlib29sZWFuIGlz
Q29uZGl0aW9uRmFsc2UgPSBjc3QgIT0gbnVsbCAmJiAoY3N0ICE9IENvbnN0YW50Lk5vdEFDb25z
dGFudCAmJiBjc3QuYm9vbGVhblZhbHVlKCkgPT0gZmFsc2UpOworCisJCWNzdCA9IHRoaXMuY29u
ZGl0aW9uID09IG51bGwgPyBudWxsIDogdGhpcy5jb25kaXRpb24ub3B0aW1pemVkQm9vbGVhbkNv
bnN0YW50KCk7CisJCWJvb2xlYW4gaXNDb25kaXRpb25PcHRpbWl6ZWRUcnVlID0gY3N0ID09IG51
bGwgfHwgKGNzdCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQgJiYgY3N0LmJvb2xlYW5WYWx1ZSgp
ID09IHRydWUpOworCQlib29sZWFuIGlzQ29uZGl0aW9uT3B0aW1pemVkRmFsc2UgPSBjc3QgIT0g
bnVsbAorCQkJCSYmIChjc3QgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5ib29sZWFu
VmFsdWUoKSA9PSBmYWxzZSk7CisKKwkJYm9vbGVhbiBhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSA9
IGZhbHNlOworCQlpZiAoaXNDb25kaXRpb25UcnVlIHx8IGlzQ29uZGl0aW9uT3B0aW1pemVkVHJ1
ZSkgeworCQkJaWYgKHRoaXMuYWN0aW9uID09IG51bGwgfHwgdGhpcy5hY3Rpb24uaXNFbXB0eUJs
b2NrKCkpIHsKKwkJCQlhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSA9IHRydWU7CisJCQl9IGVsc2Ug
eworCQkJCWFjdGlvbkNvbXBsZXRlc0FicnVwdGx5ID0gdGhpcy5hY3Rpb24uZG9lc05vdENvbXBs
ZXRlTm9ybWFsbHkoc2hhcGVJbmZvKTsKKwkJCQlpZiAoYWN0aW9uQ29tcGxldGVzQWJydXB0bHkg
JiYgKHNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgJiBTaGFwZUluZm8uQlJFQUspICE9IDApIHsK
KwkJCQkJYWN0aW9uQ29tcGxldGVzQWJydXB0bHkgPSBmYWxzZTsKKwkJCQl9CisJCQl9CisJCX0g
ZWxzZSBpZiAoaXNDb25kaXRpb25GYWxzZSB8fCBpc0NvbmRpdGlvbk9wdGltaXplZEZhbHNlKSB7
CisJCQlhY3Rpb25Db21wbGV0ZXNBYnJ1cHRseSA9IGZhbHNlOworCQl9CisJCWJvb2xlYW4gaW5j
cmVtZW50c0NvbXBsZXRlQWJydXB0bHkgPSBmYWxzZTsKKwkJaWYgKHRoaXMuaW5jcmVtZW50cyAh
PSBudWxsKSB7CisJCQlpbnQgaW5jcmVtZW50c0xlbmd0aCA9IHRoaXMuaW5jcmVtZW50cy5sZW5n
dGg7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGluY3JlbWVudHNMZW5ndGg7IGkrKykgeworCQkJ
CWluY3JlbWVudHNDb21wbGV0ZUFicnVwdGx5IHw9IHRoaXMuaW5jcmVtZW50c1tpXS5kb2VzTm90
Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8pOworCQkJfQorCQl9CisJCXJldHVybiBpbml0c0Nv
bXBsZXRlQWJydXB0bHkgfHwgYWN0aW9uQ29tcGxldGVzQWJydXB0bHkgfHwgaW5jcmVtZW50c0Nv
bXBsZXRlQWJydXB0bHk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Gb3JlYWNoU3Rh
dGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZvcmVhY2hTdGF0ZW1lbnQuamF2YQppbmRleCBlNzk0
YjA3Li41MzYxZDU3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZvcmVhY2hTdGF0ZW1lbnQuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0ZvcmVhY2hTdGF0ZW1lbnQuamF2YQpAQCAtNTc2LDQgKzU3Niwx
OSBAQAogCQl9CiAJCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiAJfQorCisJ
QE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJ
bmZvIHNoYXBlSW5mbykgeworCQlpZiAodGhpcy5lbGVtZW50VmFyaWFibGUuZG9lc05vdENvbXBs
ZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSkgeworCQkJcmV0dXJuIHRydWU7CisJCX0KKwkJaWYgKHRo
aXMuYWN0aW9uICE9IG51bGwgJiYgIXRoaXMuYWN0aW9uLmlzRW1wdHlCbG9jaygpKSB7CisJCQlp
ZiAodGhpcy5hY3Rpb24uZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSkgeworCQkJ
CWlmICgoc2hhcGVJbmZvLmNvbXBsZXRpb25GbGFncyAmIFNoYXBlSW5mby5CUkVBSykgIT0gMCkg
eworCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJfQorCQkJfQorCQl9CisJCXJldHVybiBmYWxzZTsK
Kwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lmU3RhdGVtZW50LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0lmU3RhdGVtZW50LmphdmEKaW5kZXggMjU0ZmY3MS4uYWVjZTg1YiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9JZlN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSWZTdGF0ZW1lbnQu
amF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yODQsNCArMjg0LDExIEBACiAJfQogCXZpc2l0b3Iu
ZW5kVmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiB9CisKK0BPdmVycmlkZQorcHVibGljIGJvb2xl
YW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCWJvb2xl
YW4gdGhlbkNvbXBsZXRlc0FicnVwdGx5ID0gdGhpcy50aGVuU3RhdGVtZW50ID09IG51bGwgPyBm
YWxzZSA6IHRoaXMudGhlblN0YXRlbWVudC5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUlu
Zm8pOworCWJvb2xlYW4gZWxzZUNvbXBsZXRlc0FicnVwdGx5ID0gdGhpcy5lbHNlU3RhdGVtZW50
ID09IG51bGwgPyBmYWxzZSA6IHRoaXMuZWxzZVN0YXRlbWVudC5kb2VzTm90Q29tcGxldGVOb3Jt
YWxseShzaGFwZUluZm8pOworCXJldHVybiB0aGVuQ29tcGxldGVzQWJydXB0bHkgJiYgZWxzZUNv
bXBsZXRlc0FicnVwdGx5OworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbml0aWFsaXpl
ci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Jbml0aWFsaXplci5qYXZhCmluZGV4IGVmNjBkMjUuLjM1Mjk0
ZGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5pdGlhbGl6ZXIuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0luaXRpYWxpemVyLmphdmEKQEAgLTEzMSw0ICsxMzEsOSBAQAogCQl9CiAJCXZpc2l0b3Iu
ZW5kVmlzaXQodGhpcywgc2NvcGUpOwogCX0KKworCUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFu
IGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFwZUluZm8pIHsKKwkJcmV0dXJu
IHRoaXMuYmxvY2sgPT0gbnVsbCA/IGZhbHNlIDogdGhpcy5ibG9jay5kb2VzTm90Q29tcGxldGVO
b3JtYWxseShzaGFwZUluZm8pOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFiZWxl
ZFN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYWJlbGVkU3RhdGVtZW50LmphdmEKaW5kZXgg
OWZmZmEzZS4uMzUyZTk3NSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYWJlbGVkU3RhdGVtZW50
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYWJlbGVkU3RhdGVtZW50LmphdmEKQEAgLTEsNSArMSw1
IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA4
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdApAQCAtMTQwLDQgKzE0MCwxNiBAQAogCQl9CiAJCXZpc2l0b3IuZW5kVmlzaXQodGhpcywg
YmxvY2tTY29wZSk7CiAJfQorCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENv
bXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCQlib29sZWFuIGlubmVyQ29t
cGxldGVzQWJydXB0bHkgPSB0aGlzLnN0YXRlbWVudC5kb2VzTm90Q29tcGxldGVOb3JtYWxseShz
aGFwZUluZm8pOworCQlpZiAoaW5uZXJDb21wbGV0ZXNBYnJ1cHRseSkgeworCQkJaWYgKChzaGFw
ZUluZm8uY29tcGxldGlvbkZsYWdzICYgU2hhcGVJbmZvLkJSRUFLX1dJVEhfTEFCRUwpICE9IDAg
JiYgc2hhcGVJbmZvLmNvbnRhaW5zQnJlYWtMYWJlbCh0aGlzLmxhYmVsKSkgeworCQkJCXNoYXBl
SW5mby5yZW1vdmVCcmVha0xhYmVsKHRoaXMubGFiZWwpOworCQkJCXJldHVybiBmYWxzZTsKKwkJ
CX0KKwkJfQorCQlyZXR1cm4gaW5uZXJDb21wbGV0ZXNBYnJ1cHRseTsKKwl9CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhCmluZGV4IGYzNDI4YWYuLjYwMWMwYmMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVz
c2lvbi5qYXZhCkBAIC01OSw3ICs1OSw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmZsb3cuRXhjZXB0aW9uSGFuZGxpbmdGbG93Q29udGV4dDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93Q29udGV4dDsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93SW5mbzsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5VbmNvbmRpdGlvbmFsRmxv
d0luZm87CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29t
cGlsZXJPcHRpb25zOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5p
bXBsLkNvbnN0YW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5p
bXBsLlJlZmVyZW5jZUNvbnRleHQ7CkBAIC00NzEsMjEgKzQ3MCw4IEBACiAJCXJldHVybiB0aGlz
LmFyZ3VtZW50cy5sZW5ndGggPiAwICYmIHRoaXMuYXJndW1lbnRzWzBdLmhhc0VsaWRlZFR5cGUo
KTsKIAl9CiAKLQlwcml2YXRlIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKSB7Ci0J
CXRyeSB7Ci0JCQlyZXR1cm4gdGhpcy5ib2R5LmFuYWx5c2VDb2RlKHRoaXMuc2NvcGUsIAotCQkJ
CQkJCQkJIG5ldyBFeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0KG51bGwsIHRoaXMsIEJpbmRp
bmcuTk9fRVhDRVBUSU9OUywgbnVsbCwgdGhpcy5zY29wZSwgRmxvd0luZm8uREVBRF9FTkQpLCAK
LQkJCQkJCQkJCSBVbmNvbmRpdGlvbmFsRmxvd0luZm8uZmFrZUluaXRpYWxpemVkRmxvd0luZm8o
dGhpcy5zY29wZS5vdXRlck1vc3RNZXRob2RTY29wZSgpLmFuYWx5c2lzSW5kZXgsIHRoaXMuc2Nv
cGUucmVmZXJlbmNlVHlwZSgpLm1heEZpZWxkQ291bnQpKSA9PSBGbG93SW5mby5ERUFEX0VORDsK
LQkJfSBjYXRjaCAoUnVudGltZUV4Y2VwdGlvbiBlKSB7Ci0JCQkvKiBTZWUgaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMjExMCBmb3IgYW4gZXhhbXBsZSBv
ZiB3aGVyZSB0aGUgZmxvdyBhbmFseXNpcyBjYW4gcmVzdWx0IGluIHJ1biB0aW1lIGVycm9yLgot
CQkJICAgV2UgY2FuIHJlY292ZXIgYW5kIGRvIHRoZSByaWdodCB0aGluZyBieSBmYWxsaW5nIGJh
Y2sgb24gdGhlIHJlc3VsdHMgb2YgdGhlIHN0cnVjdHVyYWwgYW5hbHlzaXMgZG9uZSBhbHJlYWR5
IGFuZCBiZSByaWdodCA5OS45OSUKLQkJCSAgIG9mIHRoZSB0aW1lLiBTdHJpY3RseSBzcGVha2lu
ZyB2b2lkL3ZhbHVlIGNvbXBhdGliaWxpdHkgaXMgbm90IGEgc3RydWN0dXJhbCBwcm9wZXJ0eS4g
eyB0aHJvdyBOUEUoKTsgfSBpcyB2YWx1ZSBjb21wYXRpYmxlIGRlc3BpdGUKLQkJCSAgIHN0cnVj
dHVyYWxseSB0aGVyZSBub3QgYmVpbmcgYSByZXR1cm4gc3RhdGVtZW50LiBMaWtld2lzZSB7IGlm
ICh4KSByZXR1cm4gdmFsdWU7IH0gaXMgbm90IHZhbHVlIGNvbXBhdGlibGUgZGVzcGl0ZSB0aGVy
ZSBiZWluZyBhCi0JCQkgICByZXR1cm4gc3RhdGVtZW50LiBXZSB3aWxsIG1pc3MgdGhlIGZvcm1l
ciBjYXNlLCBidXQgdGhhdCBpcyBtb3N0bHkgcGVkYW50aWMuIFdlIHdvdWxkIG1pc2NsYXNzaWZ5
IHRoZSBsYXR0ZXIgY2FzZSAqaGVyZSosIGJ1dCBpdAotCQkJICAgd291bGQgYmUgY2F1Z2h0IGVs
c2V3aGVyZSwgc28gaXQgc2hvdWxkIGFsbCB3YXNoIG91dCBpbiB0aGUgZW5kLiAKLQkJCSovIAot
CQkJcmV0dXJuIHRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlOwotCQl9CisJcHVibGljIGJv
b2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCQly
ZXR1cm4gdGhpcy5ib2R5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7CiAJfQog
CXB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxv
d0NvbnRleHQgZmxvd0NvbnRleHQsIGZpbmFsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJCQpAQCAt
ODE2LDggKzgwMiwxMyBAQAogCQkJCX0KIAkJCQkKIAkJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5
IG9mIGJsb2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCi0JCQkJaWYgKCF0
aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkKLQkJCQkJdGhpcy52YWx1ZUNvbXBhdGlibGUgPSBj
b3B5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7CisJCQkJaWYgKCF0aGlzLnNoYXBlQW5hbHlz
aXNDb21wbGV0ZSkgeworCQkJCQlTaGFwZUluZm8gc2hhcGVJbmZvID0gbmV3IFNoYXBlSW5mbygp
OworCQkJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFs
bHkoc2hhcGVJbmZvKTsKKwkJCQkJdGhpcy5yZXN1bHRFeHByZXNzaW9ucyA9IHNoYXBlSW5mby5y
ZXR1cm5FeHByZXNzaW9uczsKKwkJCQkJdGhpcy5yZXR1cm5zVmFsdWUgPSBzaGFwZUluZm8ucmV0
dXJuc1ZhbHVlOworCQkJCQl0aGlzLnJldHVybnNWb2lkID0gc2hhcGVJbmZvLnJldHVybnNWb2lk
OworCQkJCX0KIAkJCQkKIAkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7CiAJ
CQl9IGZpbmFsbHkgewpAQCAtOTMzLDggKzkyNCwxMSBAQAogCQkJLy8gRG8gbm90IHByb2NlZWQg
d2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVuY291bnRlcmVkIGVy
cm9ycy4KIAkJCWlmICghdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzICYmICFlbmNsb3Np
bmdTY29wZXNIYXZlRXJyb3JzKCkpIHsKIAkJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5IG9mIGJs
b2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCi0JCQkJaWYgKCFjb3B5LnNo
YXBlQW5hbHlzaXNDb21wbGV0ZSkKLQkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSBjb3B5LmRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7CisJCQkJaWYgKCFjb3B5LnNoYXBlQW5hbHlzaXNDb21w
bGV0ZSkgeworCQkJCQlTaGFwZUluZm8gc2hhcGVJbmZvID0gbmV3IFNoYXBlSW5mbygpOworCQkJ
CQljb3B5LnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hh
cGVJbmZvKTsKKwkJCQkJdGhpcy5yZXN1bHRFeHByZXNzaW9ucyA9IHNoYXBlSW5mby5yZXR1cm5F
eHByZXNzaW9uczsKKwkJCQl9CiAJCQl9IGVsc2UgewogCQkJCWlmICghY29weS5yZXR1cm5zVm9p
ZCkKIAkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSB0cnVlOyAvLyBvcHRpbWlzdGljYWxseSwg
VE9ETzogaXMgdGhpcyBPSz8/CkBAIC05NzQsOCArOTY4LDggQEAKIAkJaWYgKHIyLmlkID09IFR5
cGVJZHMuVF92b2lkKQogCQkJcmV0dXJuIHRydWU7CiAJCQotCQlpZiAocjEuaWQgPT0gVHlwZUlk
cy5UX3ZvaWQpCi0JCQlyZXR1cm4gZmFsc2U7CisvLwkJaWYgKHIxLmlkID09IFR5cGVJZHMuVF92
b2lkKQorLy8JCQlyZXR1cm4gZmFsc2U7CiAJCQogCQkvLyByMSA8OiByMgogCQlpZiAocjEuaXND
b21wYXRpYmxlV2l0aChyMiwgc2tvcGUpKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERl
Y2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQppbmRleCA0
NjJhODQxLi5mNTcxODBlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24u
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQpAQCAtMzI2LDQgKzMy
Niw5IEBACiAJCXJldHVybiB0aGlzLm5hbWUgPT0gUmVjb3ZlcnlTY2FubmVyLkZBS0VfSURFTlRJ
RklFUiAmJiAKIAkJCQkodGhpcy50eXBlIGluc3RhbmNlb2YgU2luZ2xlVHlwZVJlZmVyZW5jZSB8
fCAodGhpcy50eXBlIGluc3RhbmNlb2YgUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSAmJiAhKHRoaXMu
dHlwZSBpbnN0YW5jZW9mIEFycmF5UXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkpKSAmJiB0aGlzLmlu
aXRpYWxpemF0aW9uID09IG51bGwgJiYgIXRoaXMudHlwZS5pc0Jhc2VUeXBlUmVmZXJlbmNlKCk7
CiAJfQorCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFs
bHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCQlyZXR1cm4gZmFsc2U7CisJfQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2Vu
ZC5qYXZhCmluZGV4IDUwMDM0M2YuLjk0NjQ2ODkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVz
c2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTEwMjYs
NiArMTAyNiwxMSBAQAogcHVibGljIGJvb2xlYW4gc3RhdGVtZW50RXhwcmVzc2lvbigpIHsKIAly
ZXR1cm4gdHJ1ZTsKIH0KK0BPdmVycmlkZQorcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRl
Tm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCS8vCisJcmV0dXJuIGZhbHNlOworfQog
cHVibGljIGJvb2xlYW4gcmVjZWl2ZXJJc0ltcGxpY2l0VGhpcygpIHsKIAlyZXR1cm4gdGhpcy5y
ZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZXR1
cm5TdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmV0dXJuU3RhdGVtZW50LmphdmEKaW5kZXgg
MGFhZmJjMS4uMzg4OTUzYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZXR1cm5TdGF0ZW1lbnQu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JldHVyblN0YXRlbWVudC5qYXZhCkBAIC0zNzQsNCArMzc0
LDExIEBACiAJfQogCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgc2NvcGUpOwogfQorCitAT3ZlcnJp
ZGUKK3B1YmxpYyBib29sZWFuIGRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KFNoYXBlSW5mbyBzaGFw
ZUluZm8pIHsKKwlzaGFwZUluZm8uY29tcGxldGlvbkZsYWdzIHw9ICh0aGlzLmV4cHJlc3Npb24g
PT0gbnVsbCkgPyBTaGFwZUluZm8uUkVUVVJOIDogU2hhcGVJbmZvLlJFVFVSTl9XSVRIX1ZBTFVF
OworCXNoYXBlSW5mby5yZXR1cm5zRXhwcmVzc2lvbih0aGlzLmV4cHJlc3Npb24pOworCXJldHVy
biB0cnVlOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvU3RhdGVtZW50LmphdmEKaW5kZXggYmZhNTBkYS4uNzY0MzM0NiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5q
YXZhCkBAIC0zNiw2ICszNiw3IEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIAoraW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY29kZWdlbi4qOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93Lio7CkBAIC03OCw2ICs3OSw3MSBA
QAogCX0KIHB1YmxpYyBhYnN0cmFjdCBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1
cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKTsK
IAorcHVibGljIGFic3RyYWN0IGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJ
bmZvIHNoYXBlSW5mbyk7CitwdWJsaWMgY2xhc3MgU2hhcGVJbmZvIHsKKwlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBCUkVBSyA9IDE7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQlJFQUtfV0lU
SF9MQUJFTCA9IDI7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ09OVElOVUUgPSA0OworCXB1
YmxpYyBzdGF0aWMgZmluYWwgaW50IENPTlRJTlVFX1dJVEhfTEFCRUwgPSA4OworCXB1YmxpYyBz
dGF0aWMgZmluYWwgaW50IFJFVFVSTiA9IDE2OworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFJF
VFVSTl9XSVRIX1ZBTFVFID0gMzI7CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVEhST1cgPSA2
NDsKKwkKKwlwdWJsaWMgaW50IGNvbXBsZXRpb25GbGFnczsKKwlwdWJsaWMgU3RyaW5nW10gYnJl
YWtMYWJlbHMgPSBuZXcgU3RyaW5nWzBdOworCXB1YmxpYyBFeHByZXNzaW9uIFtdIHJldHVybkV4
cHJlc3Npb25zID0gRnVuY3Rpb25hbEV4cHJlc3Npb24uTk9fRVhQUkVTU0lPTlM7CisJcHVibGlj
IGJvb2xlYW4gcmV0dXJuc1ZvaWQ7CisJcHVibGljIGJvb2xlYW4gcmV0dXJuc1ZhbHVlOworCXB1
YmxpYyBib29sZWFuIHZvaWRDb21wYXRpYmxlOworCXB1YmxpYyBib29sZWFuIHZhbHVlQ29tcGF0
aWJsZTsKKwlwdWJsaWMgdm9pZCByZXR1cm5zRXhwcmVzc2lvbihFeHByZXNzaW9uIGV4cHJlc3Np
b24pIHsKKwkJaWYgKGV4cHJlc3Npb24gPT0gbnVsbCkgeworCQkJdGhpcy5yZXR1cm5zVm9pZCA9
IHRydWU7CisJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGZhbHNlOworCQkJdGhpcy52b2lkQ29t
cGF0aWJsZSA9ICF0aGlzLnJldHVybnNWYWx1ZTsKKwkJfSBlbHNlIHsKKwkJCUV4cHJlc3Npb25b
XSByZXR1cm5zID0gdGhpcy5yZXR1cm5FeHByZXNzaW9uczsKKwkJCWludCByZXN1bHRzTGVuZ3Ro
ID0gcmV0dXJucy5sZW5ndGg7CisJCQlTeXN0ZW0uYXJyYXljb3B5KHJldHVybnMsIDAsIHJldHVy
bnMgPSBuZXcgRXhwcmVzc2lvbltyZXN1bHRzTGVuZ3RoICsgMV0sIDAsIHJlc3VsdHNMZW5ndGgp
OworCQkJcmV0dXJuc1tyZXN1bHRzTGVuZ3RoXSA9IGV4cHJlc3Npb247CisJCQl0aGlzLnJldHVy
bkV4cHJlc3Npb25zID0gcmV0dXJuczsKKwkJCXRoaXMucmV0dXJuc1ZhbHVlID0gdHJ1ZTsKKwkJ
CXRoaXMudm9pZENvbXBhdGlibGUgPSBmYWxzZTsKKwkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0g
IXRoaXMucmV0dXJuc1ZvaWQ7CisJCX0KKwl9CisJcHVibGljIHZvaWQgYWRkQnJlYWtMYWJlbChT
dHJpbmcgbGFiZWwpIHsKKwkJaWYgKGxhYmVsID09IG51bGwpIHsKKwkJCXJldHVybjsKKwkJfQor
CQlTdHJpbmdbXSBsYWJlbHMgPSB0aGlzLmJyZWFrTGFiZWxzOworCQlpbnQgbGFiZWxzTGVuZ3Ro
ID0gbGFiZWxzLmxlbmd0aDsKKwkJU3lzdGVtLmFycmF5Y29weShsYWJlbHMsIDAsIGxhYmVscyA9
IG5ldyBTdHJpbmdbbGFiZWxzTGVuZ3RoICsgMV0sIDAsIGxhYmVsc0xlbmd0aCk7CisJCWxhYmVs
c1tsYWJlbHNMZW5ndGhdID0gbGFiZWw7CisJCXRoaXMuYnJlYWtMYWJlbHMgPSBsYWJlbHM7CisJ
fQorCXB1YmxpYyB2b2lkIHJlbW92ZUJyZWFrTGFiZWwoY2hhcltdIGxhYmVsKSB7CisJCWlmIChs
YWJlbCA9PSBudWxsKQorCQkJcmV0dXJuOworCQlTdHJpbmdbXSBsYWJlbHMgPSB0aGlzLmJyZWFr
TGFiZWxzOworCQlpbnQgbGFiZWxzTGVuZ3RoID0gbGFiZWxzLmxlbmd0aDsKKwkJZm9yIChpbnQg
aSA9IDA7IGkgPCBsYWJlbHNMZW5ndGg7IGkrKykgeworCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1
YWxzKGxhYmVsLCBsYWJlbHNbaV0udG9DaGFyQXJyYXkoKSkpIHsKKwkJCQlTeXN0ZW0uYXJyYXlj
b3B5KGxhYmVscywgMCwgbGFiZWxzID0gbmV3IFN0cmluZ1tsYWJlbHNMZW5ndGggLSAxXSwgMCwg
aSk7CisJCQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmJyZWFrTGFiZWxzLCBpICsgMSwgbGFiZWxz
LCBpLCBsYWJlbHNMZW5ndGggLSBpIC0gMSk7CisJCQkJdGhpcy5icmVha0xhYmVscyA9IGxhYmVs
czsKKwkJCQlicmVhazsKKwkJCX0KKwkJfQorCX0KKwlwdWJsaWMgYm9vbGVhbiBjb250YWluc0Jy
ZWFrTGFiZWwoY2hhcltdIGxhYmVsKSB7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5icmVh
a0xhYmVscy5sZW5ndGg7IGkrKykgeworCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKGxhYmVs
LCB0aGlzLmJyZWFrTGFiZWxzW2ldLnRvQ2hhckFycmF5KCkpKQorCQkJCXJldHVybiB0cnVlOwor
CQl9CisJCXJldHVybiBmYWxzZTsKKwl9Cit9CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTk9U
X0NPTVBMQUlORUQgPSAwOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENPTVBMQUlORURfRkFL
RV9SRUFDSEFCTEUgPSAxOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENPTVBMQUlORURfVU5S
RUFDSEFCTEUgPSAyOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50LmphdmEKaW5kZXggOTBmMzg0Mi4uNDEzYTgw
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZhCkBAIC02MzIsNCArNjMyLDIwIEBACiAJCQlsYWJl
bC5iZWNvbWVEZWxlZ2F0ZUZvcih0aGlzLmJyZWFrTGFiZWwpOwogCQl9CiAJfQorCisJQE92ZXJy
aWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNo
YXBlSW5mbykgeworCQlpZiAodGhpcy5zdGF0ZW1lbnRzICE9IG51bGwpIHsKKwkJCWZvciAoaW50
IGkgPSAwLCBtYXggPSB0aGlzLnN0YXRlbWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJ
CQlTdGF0ZW1lbnQgc3RhdGVtZW50ID0gdGhpcy5zdGF0ZW1lbnRzW2ldOworCQkJCWlmIChzdGF0
ZW1lbnQuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSkgeworCQkJCQlpZiAoKHNo
YXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgJiBTaGFwZUluZm8uQlJFQUspICE9IDApIHsKKwkJCQkJ
CXJldHVybiBmYWxzZTsKKwkJCQkJfQorCQkJCX0KKwkJCX0KKwkJCXJldHVybiB0aGlzLmRlZmF1
bHRDYXNlICE9IG51bGw7CisJCX0KKwkJcmV0dXJuIGZhbHNlOworCX0KIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvU3luY2hyb25pemVkU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N5bmNo
cm9uaXplZFN0YXRlbWVudC5qYXZhCmluZGV4IGIyYzZkZmQuLjhlNDU2ZTkgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvU3luY2hyb25pemVkU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9T
eW5jaHJvbml6ZWRTdGF0ZW1lbnQuamF2YQpAQCAtMjEzLDQgKzIxMyw5IEBACiAJfQogCXZpc2l0
b3IuZW5kVmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiB9CisKK0BPdmVycmlkZQorcHVibGljIGJv
b2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCXJl
dHVybiB0aGlzLmJsb2NrLmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbyk7Cit9CiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Rocm93U3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1Rocm93U3RhdGVtZW50LmphdmEKaW5kZXggMzI5NjdjYS4uMGVlNDE4MyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9UaHJvd1N0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhyb3dTdGF0
ZW1lbnQuamF2YQpAQCAtODcsNCArODcsMTAgQEAKIAkJdGhpcy5leGNlcHRpb24udHJhdmVyc2Uo
dmlzaXRvciwgYmxvY2tTY29wZSk7CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Njb3Bl
KTsKIH0KKworQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxldGVOb3JtYWxs
eShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJc2hhcGVJbmZvLmNvbXBsZXRpb25GbGFncyB8PSBT
aGFwZUluZm8uVEhST1c7CisJcmV0dXJuIHRydWU7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1RyeVN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UcnlTdGF0ZW1lbnQuamF2YQppbmRl
eCBmNjk2ZmFkLi41NjFlYWRjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1RyeVN0YXRlbWVudC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEKQEAgLTEyMTAsNCArMTIxMCwy
MiBAQAogCQl9CiAJfQogfQorQE92ZXJyaWRlCitwdWJsaWMgYm9vbGVhbiBkb2VzTm90Q29tcGxl
dGVOb3JtYWxseShTaGFwZUluZm8gc2hhcGVJbmZvKSB7CisJaWYgKCF0aGlzLnRyeUJsb2NrLmRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KHNoYXBlSW5mbykpIHsKKwkJcmV0dXJuICh0aGlzLmZpbmFs
bHlCbG9jayAhPSBudWxsKSA/IHRoaXMuZmluYWxseUJsb2NrLmRvZXNOb3RDb21wbGV0ZU5vcm1h
bGx5KHNoYXBlSW5mbykgOiBmYWxzZTsKKwl9CisJaWYgKHRoaXMuY2F0Y2hCbG9ja3MgIT0gbnVs
bCkgeworCQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMuY2F0Y2hCbG9ja3MubGVuZ3RoOyBpKysp
IHsKKwkJCWlmICghdGhpcy5jYXRjaEJsb2Nrc1tpXS5kb2VzTm90Q29tcGxldGVOb3JtYWxseShz
aGFwZUluZm8pKSB7CisJCQkJaWYgKChzaGFwZUluZm8uY29tcGxldGlvbkZsYWdzICYgU2hhcGVJ
bmZvLlRIUk9XKSAhPSAwKSB7CisJCQkJCXJldHVybiAodGhpcy5maW5hbGx5QmxvY2sgIT0gbnVs
bCkgPyB0aGlzLmZpbmFsbHlCbG9jay5kb2VzTm90Q29tcGxldGVOb3JtYWxseShzaGFwZUluZm8p
CisJCQkJCQkJOiBmYWxzZTsKKwkJCQl9CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQl9CisJ
fQorCXJldHVybiB0cnVlOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlRGVjbGFy
YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZURlY2xhcmF0aW9uLmphdmEKaW5kZXggMjIzN2U0
OC4uOGMzOTBkMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlRGVjbGFyYXRpb24uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1R5cGVEZWNsYXJhdGlvbi5qYXZhCkBAIC0xNTI3LDQgKzE1MjcsOSBA
QAogCXJldHVybiAodGhpcy5iaXRzICYgQVNUTm9kZS5Jc1NlY29uZGFyeVR5cGUpICE9IDA7CiB9
CiAKK0BPdmVycmlkZQorcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hh
cGVJbmZvIHNoYXBlSW5mbykgeworCXJldHVybiBmYWxzZTsKK30KKwogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9UeXBlUGFyYW1ldGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIu
amF2YQppbmRleCA5NDM4YTJhLi41MTkzMmU2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQ
YXJhbWV0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIuamF2YQpAQCAtMTkw
LDQgKzE5MCw5IEBACiAJCX0KIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJfQor
CisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hh
cGVJbmZvIHNoYXBlSW5mbykgeworCQlyZXR1cm4gZmFsc2U7CisJfQogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9XaGlsZVN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9XaGlsZVN0YXRlbWVu
dC5qYXZhCmluZGV4IDgzN2Y0MzIuLmE0NWJmYTggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvV2hp
bGVTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1doaWxlU3RhdGVtZW50LmphdmEKQEAg
LTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlz
IGF2YWlsYWJsZSBhdApAQCAtMjg1LDQgKzI4NSwyNCBAQAogCQl9CiAJCXZpc2l0b3IuZW5kVmlz
aXQodGhpcywgYmxvY2tTY29wZSk7CiAJfQorCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4g
ZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoU2hhcGVJbmZvIHNoYXBlSW5mbykgeworCQlDb25zdGFu
dCBjc3QgPSB0aGlzLmNvbmRpdGlvbi5jb25zdGFudDsKKwkJYm9vbGVhbiBpc0NvbmRpdGlvblRy
dWUgPSBjc3QgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9
PSB0cnVlOworCQlib29sZWFuIGlzQ29uZGl0aW9uRmFsc2UgPSBjc3QgIT0gQ29uc3RhbnQuTm90
QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9PSBmYWxzZTsKKworCQljc3QgPSB0aGlz
LmNvbmRpdGlvbi5vcHRpbWl6ZWRCb29sZWFuQ29uc3RhbnQoKTsKKwkJYm9vbGVhbiBpc0NvbmRp
dGlvbk9wdGltaXplZFRydWUgPSBjc3QgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5i
b29sZWFuVmFsdWUoKSA9PSB0cnVlOworCQlib29sZWFuIGlzQ29uZGl0aW9uT3B0aW1pemVkRmFs
c2UgPSBjc3QgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50ICYmIGNzdC5ib29sZWFuVmFsdWUoKSA9
PSBmYWxzZTsKKwkJaWYgKGlzQ29uZGl0aW9uRmFsc2UgfHwgaXNDb25kaXRpb25PcHRpbWl6ZWRG
YWxzZSkKKwkJCXJldHVybiBmYWxzZTsKKwkJaWYgKChpc0NvbmRpdGlvblRydWUgfHwgaXNDb25k
aXRpb25PcHRpbWl6ZWRUcnVlKSAmJiB0aGlzLmFjdGlvbiAhPSBudWxsKSB7CisJCQlpZiAodGhp
cy5hY3Rpb24uZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoc2hhcGVJbmZvKSkgeworCQkJCXJldHVy
biAoKHNoYXBlSW5mby5jb21wbGV0aW9uRmxhZ3MgJiBTaGFwZUluZm8uQlJFQUspID09IDApOwor
CQkJfQorCQkJcmV0dXJuIHRydWU7CisJCX0KKwkJcmV0dXJuIGZhbHNlOworCX0KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248538</attachid>
            <date>2014-11-10 07:17:00 -0500</date>
            <delta_ts>2014-11-10 07:17:20 -0500</delta_ts>
            <desc>Alternate exception analysis - sketch</desc>
            <filename>ExceptionAnalysis.patch</filename>
            <type>text/plain</type>
            <size>5841</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggMzU3ODk4Ni4uN2Q0NzYzYSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTQwLDYgKzQwLDcgQEAKIAogaW1wb3J0IHN0YXRpYyBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9D
QVRJT05fQ09OVEVYVDsKIAoraW1wb3J0IGphdmEudXRpbC5BcnJheXM7CiBpbXBvcnQgamF2YS51
dGlsLkNvbGxlY3Rpb25zOwogaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwogaW1wb3J0IGphdmEu
dXRpbC5IYXNoU2V0OwpAQCAtNDgyLDE2ICs0ODMsODYgQEAKIAkJcmV0dXJuIHRoaXMuYXJndW1l
bnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5hcmd1bWVudHNbMF0uaGFzRWxpZGVkVHlwZSgpOwogCX0K
IAotCXByaXZhdGUgdm9pZCBhbmFseXplRXhjZXB0aW9ucygpIHsKLQkJRXhjZXB0aW9uSGFuZGxp
bmdGbG93Q29udGV4dCBlaGZjOwotCQl0cnkgewotCQkJdGhpcy5ib2R5LmFuYWx5c2VDb2RlKHRo
aXMuc2NvcGUsIAotCQkJCQkJCQkJIGVoZmMgPSBuZXcgRXhjZXB0aW9uSW5mZXJlbmNlRmxvd0Nv
bnRleHQobnVsbCwgdGhpcywgQmluZGluZy5OT19FWENFUFRJT05TLCBudWxsLCB0aGlzLnNjb3Bl
LCBGbG93SW5mby5ERUFEX0VORCksIAotCQkJCQkJCQkJIFVuY29uZGl0aW9uYWxGbG93SW5mby5m
YWtlSW5pdGlhbGl6ZWRGbG93SW5mbyh0aGlzLnNjb3BlLm91dGVyTW9zdE1ldGhvZFNjb3BlKCku
YW5hbHlzaXNJbmRleCwgdGhpcy5zY29wZS5yZWZlcmVuY2VUeXBlKCkubWF4RmllbGRDb3VudCkp
OwotCQkJdGhpcy50aHJvd25FeGNlcHRpb25zID0gZWhmYy5leHRlbmRlZEV4Y2VwdGlvbnMgPT0g
bnVsbCA/IENvbGxlY3Rpb25zLmVtcHR5U2V0KCkgOiBuZXcgSGFzaFNldDxUeXBlQmluZGluZz4o
ZWhmYy5leHRlbmRlZEV4Y2VwdGlvbnMpOwotCQl9IGNhdGNoIChFeGNlcHRpb24gZSkgewotCQkJ
Ly8gZHJvcCBzaWxlbnRseS4KKwlwcml2YXRlIHZvaWQgYW5hbHl6ZUV4Y2VwdGlvbnMoYm9vbGVh
biB1c2VGbG93QW5hbHlzaXMpIHsKKwkJCisJCWlmICh1c2VGbG93QW5hbHlzaXMpIHsgLy8gbGFt
YmRhIGlzIGVycm9yIGZyZWUsIGVuY2xvc2luZyBzY29wZXMgYXJlIGVycm9yIGZyZWUuCisJCQlF
eGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0IGVoZmM7CisJCQl0cnkgeworCQkJCXRoaXMuYm9k
eS5hbmFseXNlQ29kZSh0aGlzLnNjb3BlLCAKKwkJCQkJCWVoZmMgPSBuZXcgRXhjZXB0aW9uSW5m
ZXJlbmNlRmxvd0NvbnRleHQobnVsbCwgdGhpcywgQmluZGluZy5OT19FWENFUFRJT05TLCBudWxs
LCB0aGlzLnNjb3BlLCBGbG93SW5mby5ERUFEX0VORCksIAorCQkJCQkJVW5jb25kaXRpb25hbEZs
b3dJbmZvLmZha2VJbml0aWFsaXplZEZsb3dJbmZvKHRoaXMuc2NvcGUub3V0ZXJNb3N0TWV0aG9k
U2NvcGUoKS5hbmFseXNpc0luZGV4LCB0aGlzLnNjb3BlLnJlZmVyZW5jZVR5cGUoKS5tYXhGaWVs
ZENvdW50KSk7CisJCQkJdGhpcy50aHJvd25FeGNlcHRpb25zID0gZWhmYy5leHRlbmRlZEV4Y2Vw
dGlvbnMgPT0gbnVsbCA/IENvbGxlY3Rpb25zLmVtcHR5U2V0KCkgOiBuZXcgSGFzaFNldDxUeXBl
QmluZGluZz4oZWhmYy5leHRlbmRlZEV4Y2VwdGlvbnMpOworCQkJfSBjYXRjaCAoRXhjZXB0aW9u
IGUpIHsKKwkJCQkvLyBkcm9wIHNpbGVudGx5LgorCQkJfQorCQkJcmV0dXJuOwogCQl9CisJCQor
CQkvKiBBbmFseXplIGEgbGFtYmRhIHRoYXQgaXMgZXJyb3IgZnJlZSBmb3IgZXhjZXB0aW9ucyB0
aHJvd24uIEVuY2xvc2luZyBzY29wZVMgaGF2ZSBlcnJvcnMuIE90aGVyd2lzZSwgd2UgdXNlIGZs
b3cgYW5hbHlzaXMgYWJvdmUuCisJCSAgIFdoZW4gZW5jbG9zaW5nIHNjb3BlcyBoYXZlIGVycm9y
cywgaXQgaXMgZGFuZ2Vyb3VzIHRvIHBlcmZvcm0gZmxvdyBhbmFseXNpcyB3aGljaCBpcyB3cml0
dGVuIHdpdGggdGhlIGFzc3VtcHRpb24gdGhhdCBpdCB3aWxsCisJCSAgIG5vdCBiZSBjYWxsZWQg
d2hlbiB0aGVyZSBhcmUgcmVzb2x1dGlvbiBlcnJvcnMuIChUaGVyZSBhcmUgYWxsIGtpbmRzIG9m
IGxhbmQgbWluZXMgdGhhdCB0cmlnZ2VyIE5QRSwgQ0NFIGV0Yy4pCisJCSovCisJCWZpbmFsIExv
b2t1cEVudmlyb25tZW50IGVudmlyb25tZW50ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5lbnZpcm9u
bWVudCgpOworCQluZXcgQVNUVmlzaXRvcigpIHsKKwkJCVNldDxSZWZlcmVuY2VCaW5kaW5nPiBj
YXVnaHQ7CisJCQlwcml2YXRlIHZvaWQgYW5hbHl6ZUV4Y2VwdGlvbnMoUmVmZXJlbmNlQmluZGlu
Z1tdIGV4Y2VwdGlvbnMpIHsKKwkJCQkvLyB3ZSBoYXZlIHRoZSBjYXVnaHQgZXhjZXB0aW9ucywg
d2UgaGF2ZSB0aGUgdGhyb3duIGV4Y2VwdGlvbnMsIGNvbXB1dGUgZGVsdGEgbWltaWNraW5nIEZs
b3dDb250ZXh0LmNoZWNrRXhjZXB0aW9uSGFuZGxlcnMoKQorCQkJfQorCQkJcHVibGljIGJvb2xl
YW4gdmlzaXQoVHlwZURlY2xhcmF0aW9uIHR5cGUsIEJsb2NrU2NvcGUgc2tvcGUpIHsKKwkJCQly
ZXR1cm4gZmFsc2U7IC8vIGRvbid0IGRlc2NlbmQgaW50byBuZXN0ZWQgdHlwZXMuCisJCQl9CisJ
CQlwdWJsaWMgYm9vbGVhbiB2aXNpdChUeXBlRGVjbGFyYXRpb24gdHlwZSwgQ2xhc3NTY29wZSBz
a29wZSkgeworCQkJCXJldHVybiBmYWxzZTsgLy8gZG9uJ3QgZGVzY2VuZCBpbnRvIG5lc3RlZCB0
eXBlcy4KKwkJCX0KKwkJCXB1YmxpYyBib29sZWFuIHZpc2l0KExhbWJkYUV4cHJlc3Npb24gdHlw
ZSwgQmxvY2tTY29wZSBza29wZSkgeworCQkJCXJldHVybiBmYWxzZTsgLy8gZG9uJ3QgZGVzY2Vu
ZCBpbnRvIG5lc3RlZCB0eXBlcy4KKwkJCX0KKwkJCXB1YmxpYyBib29sZWFuIHZpc2l0KE1lc3Nh
Z2VTZW5kIG1lc3NhZ2VTZW5kLCBCbG9ja1Njb3BlIHNrb3BlKSB7CisJCQkJUmVmZXJlbmNlQmlu
ZGluZ1tdIGV4Y2VwdGlvbnMgPSBtZXNzYWdlU2VuZC5iaW5kaW5nLnRocm93bkV4Y2VwdGlvbnM7
CisJCQkJaWYgKGV4Y2VwdGlvbnMubGVuZ3RoICE9IDApIHsKKwkJCQkJaWYgKChtZXNzYWdlU2Vu
ZC5iaXRzICYgQVNUTm9kZS5VbmNoZWNrZWQpICE9IDAgJiYgbWVzc2FnZVNlbmQuZ2VuZXJpY1R5
cGVBcmd1bWVudHMgPT0gbnVsbCkgeworCQkJCQkJZXhjZXB0aW9ucyA9IGVudmlyb25tZW50LmNv
bnZlcnRUb1Jhd1R5cGVzKGV4Y2VwdGlvbnMsIHRydWUsIHRydWUpOworCQkJCQl9CQkKKwkJCQkJ
YW5hbHl6ZUV4Y2VwdGlvbnMoZXhjZXB0aW9ucyk7CisJCQkJfQorCQkJCXJldHVybiB0cnVlOyAv
LyB2aXNpdCBhcmd1bWVudHMgd2hpY2ggbWF5IHRocm93IGV4Y2VwdGlvbnMuCisJCQl9CisJCQlw
dWJsaWMgYm9vbGVhbiB2aXNpdChBbGxvY2F0aW9uRXhwcmVzc2lvbiBhbGxvY2F0aW9uLCBCbG9j
a1Njb3BlIHNrb3BlKSB7CisJCQkJUmVmZXJlbmNlQmluZGluZ1tdIGV4Y2VwdGlvbnMgPSBhbGxv
Y2F0aW9uLmJpbmRpbmcudGhyb3duRXhjZXB0aW9uczsKKwkJCQlpZiAoZXhjZXB0aW9ucy5sZW5n
dGggIT0gMCkgeworCQkJCQlpZiAoKGFsbG9jYXRpb24uYml0cyAmIEFTVE5vZGUuVW5jaGVja2Vk
KSAhPSAwICYmIGFsbG9jYXRpb24uZ2VuZXJpY1R5cGVBcmd1bWVudHMgPT0gbnVsbCkgeworCQkJ
CQkJZXhjZXB0aW9ucyA9IGVudmlyb25tZW50LmNvbnZlcnRUb1Jhd1R5cGVzKGV4Y2VwdGlvbnMs
IHRydWUsIHRydWUpOworCQkJCQl9CQkKKwkJCQkJYW5hbHl6ZUV4Y2VwdGlvbnMoZXhjZXB0aW9u
cyk7CisJCQkJfQorCQkJCXJldHVybiB0cnVlOyAvLyB2aXNpdCBhcmd1bWVudHMgd2hpY2ggbWF5
IHRocm93IGV4Y2VwdGlvbnMuCisJCQl9CisJCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChRdWFsaWZp
ZWRBbGxvY2F0aW9uRXhwcmVzc2lvbiBxdWFsaWZpZWRBbGxvY2F0aW9uLCBCbG9ja1Njb3BlIHNr
b3BlKSB7CisJCQkJUmVmZXJlbmNlQmluZGluZ1tdIGV4Y2VwdGlvbnMgPSBxdWFsaWZpZWRBbGxv
Y2F0aW9uLmJpbmRpbmcudGhyb3duRXhjZXB0aW9uczsKKwkJCQlpZiAoZXhjZXB0aW9ucy5sZW5n
dGggIT0gMCkgeworCQkJCQlpZiAoKHF1YWxpZmllZEFsbG9jYXRpb24uYml0cyAmIEFTVE5vZGUu
VW5jaGVja2VkKSAhPSAwICYmIHF1YWxpZmllZEFsbG9jYXRpb24uZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgPT0gbnVsbCkgeworCQkJCQkJZXhjZXB0aW9ucyA9IGVudmlyb25tZW50LmNvbnZlcnRUb1Jh
d1R5cGVzKGV4Y2VwdGlvbnMsIHRydWUsIHRydWUpOworCQkJCQl9CQkJCisJCQkJCWFuYWx5emVF
eGNlcHRpb25zKGV4Y2VwdGlvbnMpOworCQkJCX0KKwkJCQlyZXR1cm4gdHJ1ZTsgLy8gdmlzaXQg
YXJndW1lbnRzIHdoaWNoIG1heSB0aHJvdyBleGNlcHRpb25zLgorCQkJfQorCQkJcHVibGljIGJv
b2xlYW4gdmlzaXQoVGhyb3dTdGF0ZW1lbnQgdGhyb3dTdGF0ZW1lbnQsIEJsb2NrU2NvcGUgc2tv
cGUpIHsKKwkJCQlhbmFseXplRXhjZXB0aW9ucyhuZXcgUmVmZXJlbmNlQmluZGluZyBbXSB7IChS
ZWZlcmVuY2VCaW5kaW5nKSB0aHJvd1N0YXRlbWVudC5leGNlcHRpb24ucmVzb2x2ZWRUeXBlIH0p
OworCQkJCXJldHVybiBmYWxzZTsKKwkJCX0KKwkJCXB1YmxpYyBib29sZWFuIHZpc2l0KFRyeVN0
YXRlbWVudCB0cnlTdGF0ZW1lbnQsIEJsb2NrU2NvcGUgc2tvcGUpIHsKKwkJCQlpZiAodGhpcy5j
YXVnaHQgPT0gbnVsbCkgeworCQkJCQl0aGlzLmNhdWdodCA9IG5ldyBIYXNoU2V0PFJlZmVyZW5j
ZUJpbmRpbmc+KCk7CisJCQkJfQorCQkJCXRoaXMuY2F1Z2h0LmFkZEFsbChBcnJheXMuYXNMaXN0
KHRyeVN0YXRlbWVudC5jYXVnaHRFeGNlcHRpb25UeXBlcykpOworCQkJCXJldHVybiB0cnVlOwor
CQkJfQorCQkJcHVibGljIHZvaWQgYW5hbHl6ZUV4Y2VwdGlvbnMoKSB7CisJCQkJTGFtYmRhRXhw
cmVzc2lvbi50aGlzLmJvZHkudHJhdmVyc2UodGhpcywgbnVsbCk7CisJCQl9CisJCQkKKwkJfS5h
bmFseXplRXhjZXB0aW9ucygpOwkKIAl9CiAJcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJs
b2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgZmluYWwgRmxv
d0luZm8gZmxvd0luZm8pIHsKIAkJCkBAIC04NTgsOSArOTI5LDggQEAKIAkJCX0KIAkJCWlmICgh
cmVxdWlyZUV4Y2VwdGlvbkFuYWx5c2lzKQogCQkJCXJldHVybiBjb3B5OwotCQkJaWYgKGNvcHku
dGhyb3duRXhjZXB0aW9ucyA9PSBudWxsKQotCQkJCWlmICghY29weS5oYXNJZ25vcmVkTWFuZGF0
b3J5RXJyb3JzICYmICFlbmNsb3NpbmdTY29wZXNIYXZlRXJyb3JzKCkpCi0JCQkJCWNvcHkuYW5h
bHl6ZUV4Y2VwdGlvbnMoKTsKKwkJCWlmIChjb3B5LnRocm93bkV4Y2VwdGlvbnMgPT0gbnVsbCAm
JiAhY29weS5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzKQorCQkJCWNvcHkuYW5hbHl6ZUV4Y2Vw
dGlvbnMoIWVuY2xvc2luZ1Njb3Blc0hhdmVFcnJvcnMoKSk7CQkKIAkJCXJldHVybiBjb3B5Owog
CQl9IGZpbmFsbHkgewogCQkJY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFu
YWx5c2lzRW5hYmxlZCA9IGFuYWx5emVOUEU7
</data>

          </attachment>
      

    </bug>

</bugzilla>