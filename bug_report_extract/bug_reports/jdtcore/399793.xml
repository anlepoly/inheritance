<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>399793</bug_id>
          
          <creation_ts>2013-02-02 23:24:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] Add a new node type for compiler node LambdaExpression</short_desc>
          <delta_ts>2013-03-06 16:04:44 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>399790</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="55445"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2211416</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 23:24:36 -0500</bug_when>
    <thetext>BETA_JAVA8:

The compiler node type LambdaExpression needs a corresponding DOM/AST node.
The interesting properties are arguments (which may have types or type and 
parenthesis elided) and body.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2212153</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-05 03:49:30 -0500</bug_when>
    <thetext>Manoj, please take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213297</commentid>
    <comment_count>2</comment_count>
      <attachid>226670</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-02-06 20:31:10 -0500</bug_when>
    <thetext>Created attachment 226670
WIP Patch for Structural Review

Srikanth: Please comment on the structural aspect of the LambdaExpression and TypeElidedVariableDeclaration. The javadoc, methods and other fields (including getType()) are WIP. Body will have Expression and Block as valid values in coversion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213597</commentid>
    <comment_count>3</comment_count>
      <attachid>226701</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-02-07 10:20:21 -0500</bug_when>
    <thetext>Created attachment 226701
Patch - wip

This is a working prototype patch with a few ASTConverter test cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214405</commentid>
    <comment_count>4</comment_count>
      <attachid>226802</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-02-08 21:19:34 -0500</bug_when>
    <thetext>Created attachment 226802
Patch - WIP

Implementation coding done (save doc and format) with a few tests - both convert and match. Need to add more tests and cleanup. Comments welcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2215842</commentid>
    <comment_count>5</comment_count>
      <attachid>226974</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-02-12 18:51:15 -0500</bug_when>
    <thetext>Created attachment 226974
Proposed Patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2215869</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-12 22:51:32 -0500</bug_when>
    <thetext>Review is blocked due to non-compliance with the 3 jokes per patch review
requirement.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2220660</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-22 04:25:11 -0500</bug_when>
    <thetext>@Markus, comments (0), (6), (10) below need your weighing in - TIA.

Comments:

(0) Markus, Manoj and I discussed and prototyped a version that introduces
a new node type TypeElidedVariableDeclaration (apart from LambdaExpression)
that is a subtype of VariableDeclaration to represent a lambda type elided 
parameter. The alternative is to use SimpleName for these and have a 
boolean in LambdaExpression that informs a client which form to expect. 
What has been prototyped looks like a workable model, but from a client 
side perspective do you have different opinions ? 

(1) Per the documentation in ASTNode, any time a new node is added, we need
to add an entry for ASTNode.nodeClassForType(int) - this needs to be taken
care of

(2) Does org.eclipse.jdt.core.dom.SimpleName.isDeclaration() needs to
cover TypeElidedVar* ? 

(3) public Expression convert(org.eclipse.jdt.internal.compiler.ast.LambdaExpression lambda)
should return a LambdaExpression ? 

(4) Javadoc of Expression needs to be updated to mention LE.

(5) NaiveASTFlattener:

This block:

		// https://bugs.eclipse.org/bugs/show_bug.cgi?id=399793 
		// For nested lambda expressions a semicolon with &lt;CR&gt; results in unclean display, best avoided.
		// example test: I I = () -&gt; () -&gt; 10;
		Expression expression = node.getAST().apiLevel() &gt;= AST.JLS8 ? node.getExpression() : null;
		LambdaExpression lambdaExpression = expression != null &amp;&amp; expression instanceof LambdaExpression ? (LambdaExpression)expression : null;
		if (lambdaExpression == null) {
			this.buffer.append(&quot;;\n&quot;);//$NON-NLS-1$
		}

could be written simply as:

      if (!(node.getExpression() instanceof LambdaExpression))
          this.buffer.append(&quot;;\n&quot;);//$NON-NLS-1$

(6) That said, this seems indicative of abstraction/modelling problem.
In the compiler AST Expression is a subtype of Statement and Block is
also a subtype of Statement - In the DOM universe this is not the case.
So either, we have to resort to approximations/wrappers like this or
Change LE to have Block body and expression body and select the body
type via a boolean property - This may be an overkill - Markus do you
have a preference/recommendation from client side ? I am mildly uncomfortable
that the flattener issue is not only about printing some extra semicolons.

Thinking a bit more, it looks like the ExpressionStatement class was
introduced precisely to address these kinds of situations, if so,
this could just be a semicolon printing issue.

(7) for loop in LE visitor calls hasNext() twice - can be restructured.

(8) Object creation can be avoided in single char string literals by
using character literals instead. e.g &quot;(&quot; ==&gt; &apos;(&apos;

(9) org.eclipse.jdt.internal.core.dom.NaiveASTFlattener.visit(TypeElidedVariableDeclaration) should not return false. 

(10) Markus, for binding resolution on lambda what would you like to see.
In the patch, presently I see (in BindingResolver boiler plate)

IMethodBinding resolveMethod(LambdaExpression lambda) {
		return null;
	}

A lambda stands for both the method and the type that implements the
single abstract method from the functional interface. So there should
probably me a resolveExpressionType(LambdaExpression) ??

(11) Javadoc of org.eclipse.jdt.core.dom.BindingResolver.resolveMethod(LambdaExpression) has
copy + paste hangover, Also lambdaexpression is misspelt.

(12) LambdaExpression javadoc needs clean up for grammar and precision.
We should use kind instead of type as it is confusing.

(13) Javadoc of org.eclipse.jdt.core.dom.LambdaExpression.ARGUMENTS_PROPERTY
mentions Variable structural property - it should be arguments

(14) I think ASTRewrite would need to know if the lambda argument list is
parenthesized or not - right now the compiler AST does not capture this.

I&apos;ll continue the review after these are addressed and a fresh patch is
posted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2220947</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-02-22 13:03:28 -0500</bug_when>
    <thetext>Re (0): The proposed LambdaExpression is incomplete. There are actually 3 forms:
 *    Identifier &lt;b&gt;-&gt;&lt;/b&gt; Body
 *    &lt;b&gt;(&lt;/b&gt; [ Identifier { &lt;b&gt;,&lt;/b&gt; Identifier } ] &lt;b&gt;)&lt;/b&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body
 *    &lt;b&gt;(&lt;/b&gt; [ FormalParameter { &lt;b&gt;,&lt;/b&gt; FormalParameter } ] &lt;b&gt;)&lt;/b&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body

I think we need separate types like this:

Expression
+ LambdaExpression -- declares body property and resolveMethodBinding()
  + SingleParameterLambdaExpression -- first form
  + NormalLambdaExpression -- second and third form

We could also split NormalLambdaExpression into two types, but I think a parameters() property with element type VariableDeclaration is fine.
Note that &quot;arguments&quot; is not the right name here.

I chose the type names in analogy to the Annotation node types. We could also go the other direction and call the top type AbstractLambdaExpression and the subtypes SimpleLambdaExpression and LambdaExpression.

I don&apos;t see a big difference between VariableDeclarationFragment and TypeElidedVariableDeclaration. Once the latter is finished, it will look the same as the former, so I think we should just use VariableDeclarationFragment for the second form.


Re (6): The body is either a Block or an Expression. We cannot use ExpressionStatement, since that node includes a &quot;;&quot;, which is wrong at the end of a LambdaExpression. I don&apos;t think it&apos;s worth creating even more node types, so I&apos;d just declare the node type of the body property as ASTNode and explain the allowed types in the Javadoc.

Note that Statement as child type of body was already way too broad in the proposed solution, since only Block and ExpressionStatement are actually legal.

An alternative would be to change the type hierarchy like this, but that&apos;s overkill, IMHO:
Statement
+ Body -- new abstract type, no properties nor child nodes
  + Block
  + ExpressionBody -- new node type, similar to ExpressionStatement, but w/o &quot;;&quot;

Note that both property descriptors need the CYCLE_RISK flag.


Re (10): LambdaExpression already inherits Expression#resolveTypeBinding(), so the type of the lambda expression is already covered by the API. Similar to (Super)MethodInvocation#resolveMethodBinding(), the additional resolve method in LambdaExpression should be called resolveMethodBinding() (not resolveBinding).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221085</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-22 22:17:26 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; Re (0): The proposed LambdaExpression is incomplete. There are actually 3
&gt; forms:
&gt;  *    Identifier &lt;b&gt;-&gt;&lt;/b&gt; Body
&gt;  *    &lt;b&gt;(&lt;/b&gt; [ Identifier { &lt;b&gt;,&lt;/b&gt; Identifier } ] &lt;b&gt;)&lt;/b&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body
&gt;  *    &lt;b&gt;(&lt;/b&gt; [ FormalParameter { &lt;b&gt;,&lt;/b&gt; FormalParameter } ] &lt;b&gt;)&lt;/b&gt;
&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body

This was pointed out in the review, but I forgot to capture it in the
review comments. Manoj, the first thing a client side programmer is going
to look at is the javadoc so we should strive for as much precision as
possible there.
 
&gt; I think we need separate types like this:
&gt; 
&gt; Expression
&gt; + LambdaExpression -- declares body property and resolveMethodBinding()
&gt;   + SingleParameterLambdaExpression -- first form
&gt;   + NormalLambdaExpression -- second and third form

Let us discuss this further. Since a singleton type elided parameter could
also feature in the proposed NormalLambdaExpression, the only distinction
between SingleParameterLambdaExpression and NormalLambdaExpression for
that scenario would be a boolean discriminating the presence or lack of
parenthesis. 

This could easily be captured either as a boolean or as &quot;suitable&quot; source 
position values in the NormalLambdaExpression form obviating the need for a 
separate node type SingleParameterLambdaExpression. And if we do that the 
need for the hierarchy goes away and the whole thing collapses into a single, 
simple class avoiding proliferation.

This boolean does not even have to a property - clients should not care
only the rewriter could/would want to know.

&gt; We could also split NormalLambdaExpression into two types, but I think a
&gt; parameters() property with element type VariableDeclaration is fine.
&gt; Note that &quot;arguments&quot; is not the right name here.

Yes, we discussed about how the confusion between arguments and parameters
is all pervsaive in JDT/Core code. But APIs should not perpetuate improper
form - Manoj, please follow up.

&gt; I don&apos;t see a big difference between VariableDeclarationFragment and
&gt; TypeElidedVariableDeclaration. Once the latter is finished, it will look the
&gt; same as the former, so I think we should just use
&gt; VariableDeclarationFragment for the second form.

This needs some further thought: A type elided method parameter is a new
&quot;concept&quot; in the domain and so is worth modeling as a new abstraction.
A type elided lambda parameter is not a VariableDeclarationFragment,
in that it is not a part of a larger declaration with some elements of
which it shares some properties, while being unique on its own wrt
to some other properties. Some operations like setting initializers and
extra dimensions(info), does not make sense for this case and are
not conveniently rejected. We &quot;document it away&quot;, but why do that and
why not retain the new abstraction ?

The other alternative we considered was to make the type elided 
parameter be represented as a SimpleName - this would require
argument list to be a ASTNode list loosening precision needlessly.

&gt; Re (6): The body is either a Block or an Expression. We cannot use
&gt; ExpressionStatement, since that node includes a &quot;;&quot;, which is wrong at the
&gt; end of a LambdaExpression. I don&apos;t think it&apos;s worth creating even more node
&gt; types, so I&apos;d just declare the node type of the body property as ASTNode and
&gt; explain the allowed types in the Javadoc.

I wonder if the existing ExpressionStatement itself is an overkill.
Why didn&apos;t we simply make Expression extend Statement ??? This is what
is done in the compiler side. After all the language allows certain
expressions to qualify as statements and any illegitimate attempt on
the part of an expression to posture itself as a statement would be
rejected by the compiler.

Is it too late/complicated to reparent Expression to extend Statement
on the DOM side ? What are the complications ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221086</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-22 22:24:13 -0500</bug_when>
    <thetext>(In reply to comment #9)

&gt; not conveniently rejected. We &quot;document it away&quot;, but why do that and
&gt; why not retain the new abstraction ?

Read as: We could &quot;document it away&quot;.

Manoj, TEVD should silently accept some invalid operations like set 
initializer. It should throw IAE where the API would allow. If the
API is new it should be documented as throwing IAE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221094</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-23 02:27:31 -0500</bug_when>
    <thetext>(In reply to comment #10)

&gt; The other alternative we considered was to make the type elided 
&gt; parameter be represented as a SimpleName - this would require
&gt; argument list to be a ASTNode list loosening precision needlessly.

Are these other alternatives acceptable:

(1) Could the lambda parameters be SingleVariableDeclarations with
SingleVariableDeclaration&apos;s getType() returning null ? I see that
this is tagged as MANDATORY in SVD at the moment.

(2) If returning null is not acceptable, would a singleton object of
type ElidedType be acceptable ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221202</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-24 01:45:22 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; 
&gt; &gt; not conveniently rejected. We &quot;document it away&quot;, but why do that and
&gt; &gt; why not retain the new abstraction ?
&gt; 
&gt; Read as: We could &quot;document it away&quot;.
&gt; 
&gt; Manoj, TEVD should silently accept some invalid operations like set 
&gt; initializer. It should throw IAE where the API would allow. If the
&gt; API is new it should be documented as throwing IAE.

This may be need to be UnsupportedOperationException and not IAE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222407</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-27 02:04:47 -0500</bug_when>
    <thetext>Gentlemen, can we decide what we are agreeing to ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223555</commentid>
    <comment_count>14</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-02-27 20:25:55 -0500</bug_when>
    <thetext>The single LambdaExpression node with a boolean &quot;parameterParentheses&quot; property sounds good. The property should be explicit and settable, since clients of the DOM API should have full control over the presentation.


Re element type of the &quot;parameters&quot; property: The element type should always be a VariableDeclaration (and not a SimpleName), see that class&apos;s Javadoc:
 * Abstract base class of all AST node types that declare a single
 * variable.

VariableDeclaration also has #resolveBinding(), which should stay the only way to get a variable declaration&apos;s IVariableBinding.

The alternatives from comment 11 won&apos;t work:
(1) SingleVariableDeclaration with null type: Would be a breaking change.
(2) Singleton object of type ElidedType: Nope, see e.g. PrimitiveType&apos;s Javadoc:
 * Note that due to the fact that AST nodes belong to a specific AST and
 * have a specific parent, there needs to multiple instances of these nodes.

I agree that VariableDeclarationFragment was not originally intended as a TypeElidedVariableDeclaration, but the two are not that much different: They both don&apos;t declare a type but get it from the context. Yes, the latter doesn&apos;t have an explicit node for the type, but for a client of the DOM API, this doesn&apos;t really matter. VariableDeclarationFragment is already used as child of three different node types, and a fourth usage doesn&apos;t hurt. Clients that process this node have to check getLocationInParent() anyway, and then they immediately see whether it&apos;s used as a LambdaExpression&apos;s parameter or not.

And since we can&apos;t do away with the existing properties of VariableDeclaration, adding a third subtype TypeElidedVariableDeclaration and deprecating most of its properties doesn&apos;t help much in terms of a better abstraction. Compare this to SingleVariableDeclaration, which is also restricted in practice, e.g. when used as a CatchClause parameter (no varargs, no extra dimensions, no initializer).


&gt; I wonder if the existing ExpressionStatement itself is an overkill.
&gt; Why didn&apos;t we simply make Expression extend Statement ?[..]

That view is probably fine in the compiler, but less so for ASTRewrite. After the compiler has passed syntax validation, it doesn&apos;t have to care about &apos;;&apos; and other syntactic details any more. But in the DOM AST up to JLS7, an Expression cannot serve as a Statement without a &apos;;&apos;. The ASTRewrite should not insert/remove &apos;;&apos; behind the scenes when nodes are moved around.

Furthermore, I quickly looked for places in the jdt.ui code where we walk up the hierarchy until we find a Statement. I found at least 4 usages of &quot;ASTNodes.getParent(node, Statement.class)&quot;, and there are probably more places where we expect that an Expression is not a Statement. Given that this would also affect clients that request a JLS4 AST, I don&apos;t think we should do that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223568</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-27 22:18:58 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; The single LambdaExpression node with a boolean &quot;parameterParentheses&quot;
&gt; property sounds good. The property should be explicit and settable, since
&gt; clients of the DOM API should have full control over the presentation.

Sounds good.

&gt; Re element type of the &quot;parameters&quot; property: The element type should always
&gt; be a VariableDeclaration (and not a SimpleName), see that class&apos;s Javadoc:
&gt;  * Abstract base class of all AST node types that declare a single
&gt;  * variable.

Agreed. Without having studied the cited javadoc, I was recommending that
it be a VariableDeclaration, because it sounded the right model.

&gt; The alternatives from comment 11 won&apos;t work:
&gt; (1) SingleVariableDeclaration with null type: Would be a breaking change.
&gt; (2) Singleton object of type ElidedType: Nope, see e.g. PrimitiveType&apos;s
&gt; Javadoc:
&gt;  * Note that due to the fact that AST nodes belong to a specific AST and
&gt;  * have a specific parent, there needs to multiple instances of these nodes.

These context citations are useful, thanks.

&gt; I agree that VariableDeclarationFragment was not originally intended as a
&gt; TypeElidedVariableDeclaration, but the two are not that much different: They
&gt; both don&apos;t declare a type but get it from the context. Yes, the latter
&gt; doesn&apos;t have an explicit node for the type, but for a client of the DOM API,
&gt; this doesn&apos;t really matter. VariableDeclarationFragment is already used as
&gt; child of three different node types, and a fourth usage doesn&apos;t hurt.
&gt; Clients that process this node have to check getLocationInParent() anyway,
&gt; and then they immediately see whether it&apos;s used as a LambdaExpression&apos;s
&gt; parameter or not.
&gt; 
&gt; And since we can&apos;t do away with the existing properties of
&gt; VariableDeclaration, adding a third subtype TypeElidedVariableDeclaration
&gt; and deprecating most of its properties doesn&apos;t help much in terms of a
&gt; better abstraction. Compare this to SingleVariableDeclaration, which is also
&gt; restricted in practice, e.g. when used as a CatchClause parameter (no
&gt; varargs, no extra dimensions, no initializer).

This is not very clean, but I concur that it is &quot;clean enough&quot; and practical 
enough.

&gt; Given that
&gt; this would also affect clients that request a JLS4 AST, I don&apos;t think we
&gt; should do that.

Great, again these client side perspectives are very useful.

Manoj, I think you have all the answers, so please proceed to wrap this
up. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223788</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 08:06:48 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (6) That said, this seems indicative of abstraction/modelling problem.
&gt; In the compiler AST Expression is a subtype of Statement and Block is
&gt; also a subtype of Statement - In the DOM universe this is not the case.

[...]


(In reply to comment #8)
&gt; Re (6): The body is either a Block or an Expression. We cannot use
&gt; ExpressionStatement, since that node includes a &quot;;&quot;, which is wrong at the
&gt; end of a LambdaExpression. I don&apos;t think it&apos;s worth creating even more node
&gt; types, so I&apos;d just declare the node type of the body property as ASTNode and
&gt; explain the allowed types in the Javadoc.

[...]

This whole confusion around semicolon printing is arising because the proposed
patch does not discriminate between Block and Expression forms of lambda body:
The fix is trivial:

Instead of in the converter trying to do this:

lambdaExpression.setBody(convert(lambda.body));  // always goes to convert(Statement)

do this:

lambdaExpression.setBody(lambda.body instanceof Expression ?
                          convert((Expression) lambda.body) :
                          convert((Block) lambda.body);

You need to spell out the fully qualified Expression and Block of course.

// ------------  detour ------
It would be neat if Java allowed me to say:

lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
                          (Expression) lambda.body) :
                          (Block) lambda.body);

but because of the way the conditional expression&apos;s overall type is
defined this won&apos;t work of course.

Perhaps there could be a ?? operator that can allow the new semantics.
May be this could be proposed for a coins items for Java9
----------------------------------------</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223792</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 08:11:15 -0500</bug_when>
    <thetext>(In reply to comment #16)

&gt; &gt; types, so I&apos;d just declare the node type of the body property as ASTNode and
&gt; &gt; explain the allowed types in the Javadoc.

Manoj, you still need to do this of course.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223859</commentid>
    <comment_count>18</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-02-28 09:39:51 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; // ------------  detour ------
&gt; It would be neat if Java allowed me to say:
&gt; 
&gt; lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
&gt;                           (Expression) lambda.body) :
&gt;                           (Block) lambda.body);

Java only supports polymorphic dispatch on the receiver of a method invocation, but doesn&apos;t do pattern matching on the types of the arguments. Other languages support such &quot;multiple dispatch&quot;, but I don&apos;t think this should be added to Java (since it makes method dispatch even harder to understand).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223884</commentid>
    <comment_count>19</comment_count>
      <attachid>227733</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-02-28 10:18:05 -0500</bug_when>
    <thetext>Created attachment 227733
Proposed Patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223975</commentid>
    <comment_count>20</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-02-28 11:47:26 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; Created attachment 227733 [details] [diff]
&gt; Proposed Patch

* AST:
- newLambdaExpression() misses:
 * @exception UnsupportedOperationException if this operation is used below JLS8
- please sort the new*() methods alphabetically (newExtraDimension() and newUnionType() as well).

* ASTVisitor, ASTMatcher, NaiveASTFlattener:
- order

* LambdaExpression:
- duplicated header comment after first import
- parenthesis =&gt; parentheses (everywhere)
- please sort everything according to source order: constant declarations, field declarations, property descriptor list. Move has/setParentheses(..) down to before the parameters() method.
- bad line comment in setBody()
- setBody(..) should throw an IAE if the node is not a Block or Expression
- handling of &quot;null&quot; for body doesn&apos;t makes sense. Look for another child property that cannot be null and copy lazy initialization and all comments from there.
- clean up Javadocs: No . or - etc. at the end of a tag description that is not a full sentence. Full stop at the end of main description.
- has/setParentheses(..) Javadoc: &quot;this has parenthesis&quot; =&gt; &quot;this lambda expression has parentheses around the parameters&quot;
- class Javadoc: explain that first two forms use VariableDeclarationFragment as parameter type, and the third form uses SingleVariableDeclaration. Explain what happens if #hasParentheses is set to false and #parameters contains SingleVariableDeclarations: Is this illegal, or will #hasParentheses just not be used?

I didn&apos;t look at the other (non-API) changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224003</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 12:30:19 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #16)
&gt; &gt; // ------------  detour ------
&gt; &gt; It would be neat if Java allowed me to say:
&gt; &gt; 
&gt; &gt; lambdaExpression.setBody(convert(lambda.body instanceof Expression ?
&gt; &gt;                           (Expression) lambda.body) :
&gt; &gt;                           (Block) lambda.body);
&gt; 
&gt; Java only supports polymorphic dispatch on the receiver of a method
&gt; invocation, but doesn&apos;t do pattern matching on the types of the arguments.
&gt; Other languages support such &quot;multiple dispatch&quot;, but I don&apos;t think this
&gt; should be added to Java (since it makes method dispatch even harder to
&gt; understand).

I simply meant it as syntactic sugar with no new dispatch semantics, 
hence the mention of coin. So I would have expected the compiler to
have transformed this code into the code suggested as the one to be
done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224041</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 13:12:00 -0500</bug_when>
    <thetext>(In reply to comment #20)

&gt; * AST:
&gt; - newLambdaExpression() misses:
&gt;  * @exception UnsupportedOperationException if this operation is used below
&gt; JLS8

(1) and actually throw the exception from the constructor. See UnionType.

(2) Expression.java is missing JCP disclaimer.

(3) ASTConverter: lambda conversion method: case argument.type == null:
Should use internalSetIdentifier like the other places rather than go 
through API. The name would have been validated by the compiler.

(4) Same place, SimpleName&apos;s source ranges are not set. (Search for other
uses of &quot;new SimpleName(this.ast)&quot; in the converter.)

(5) lambdaExpression.setBody call is better written with an if-else:
the line as is runs to 270 columns (!) 

(6) hasParens - can be renamed to the same name used on the DOM side.

(7) DOM LambdaExpression copyright: I believe the right thing to do is
to mention only 2013 for new files and not 2011 - 2013.

(8) getBody() javadoc mentions it will throw NPE is body is null, this
does not sound right.

(9) setBody javadoc: @param body the block node, or &lt;code&gt;null&lt;/code&gt; if there is none: Misses mention that body can be an expression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224063</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 13:43:46 -0500</bug_when>
    <thetext>(10) getBody javadoc: a expression =&gt; an expression

(11) setBody javadoc: presently mentions &quot;Sets or clears the body of this 
lambda expression.&quot; and then throws an exception if body is null. As was
pointed earlier, null handling here does not make sense here, when that is
fixed, remember to fix the javadoc also.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224322</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-01 02:22:10 -0500</bug_when>
    <thetext>(In reply to comment #20)

&gt; - handling of &quot;null&quot; for body doesn&apos;t makes sense. Look for another child
&gt; property that cannot be null and copy lazy initialization and all comments
&gt; from there.

I think what Markus is trying to say here is that body being a mandatory
property for the structural integrity of the node type, getBody() should
not return null.

In LambdaExpression.java: this piece of code:

	/**
	 * The method body.
	 * Defaults to none.
	 */
	private ASTNode body = null;

should be changed to:

	/**
	 * The method body; lazily initialized, defaults to an empty Block
	 */
	private ASTNode body = null;

and getBody should synthesize an empty body and return it if body == null.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224472</commentid>
    <comment_count>25</comment_count>
      <attachid>227789</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-01 07:07:54 -0500</bug_when>
    <thetext>Created attachment 227789
Proposed Patch - In Progress

Most of the comments addressed, eyeballing and possible cleanup left.

A couple of points need more clarification:

Markus and Srikanth: 
1) =&gt; Explain what happens if #hasParentheses is set to false and #parameters contains SingleVariableDeclarations: Is this illegal, or will #hasParentheses just not be used?
 - The above has been addressed in the patch as 
&quot;	 * Indicates the presence or absence of parenthesis.
	 * defaults to false. In case of parameters having no elements,
	 * {@link SingleVariableDeclaration} elements or
	 * more than one {@link VariableDeclarationFragment}, this field is 
	 * ignored; ie this field is ignored in case of illegal false value.
&quot;
Srikanth:
2) =&gt;(3) ASTConverter: lambda conversion method: case argument.type == null:
Should use internalSetIdentifier like the other places rather than go 
through API. The name would have been validated by the compiler.

internalSetIdentifier has been added, but what is the case when argument.type == null?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224525</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-01 08:04:36 -0500</bug_when>
    <thetext>(In reply to comment #25)

&gt; A couple of points need more clarification:
&gt; 
&gt; Markus and Srikanth: 
&gt; 1) =&gt; Explain what happens if #hasParentheses is set to false and
&gt; #parameters contains SingleVariableDeclarations: Is this illegal, or will
&gt; #hasParentheses just not be used?
&gt;  - The above has been addressed in the patch as 
&gt; &quot;	 * Indicates the presence or absence of parenthesis.

Should be parentheses. It is better phrased as: Indicates whether or
not the lambda parameters are parenthesized.

&gt; 	 * defaults to false. In case of parameters having no elements,

Defaults to true is more natural and less burdensome some for clients 
I think. Also leads to less prone-to-error situations as it is always
legal to parenthesize.

&gt; 	 * {@link SingleVariableDeclaration} elements or
&gt; 	 * more than one {@link VariableDeclarationFragment}, this field is 
&gt; 	 * ignored; ie this field is ignored in case of illegal false value.
&gt; &quot;

ie =&gt; i.e., 

Such a disclaimer is more useful in the API than just in the private field
declaration. 

&gt; Srikanth:
&gt; 2) =&gt;(3) ASTConverter: lambda conversion method: case argument.type == null:
&gt; Should use internalSetIdentifier like the other places rather than go 
&gt; through API. The name would have been validated by the compiler.
&gt; 
&gt; internalSetIdentifier has been added, but what is the case when
&gt; argument.type == null?

I don&apos;t see a call to internalSetIdentifier in the patch.

In ASTConverter:

if (argument.type == null) {
+					VariableDeclarationFragment variableDeclarationFragment = new VariableDeclarationFragment(this.ast);
+					SimpleName simpleName = new SimpleName(this.ast);
+					int start = argument.sourceStart;
+					int end = argument.sourceEnd;
+					simpleName.setSourceRange(start, end - start + 1);
+					simpleName.setIdentifier(new String(argument.name));

does the last line quoted have to be setIndentifier ? Can it be internalSetIdentifier as is the case for the other SimpleName&apos;s created in
the converter ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224724</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-01 12:41:55 -0500</bug_when>
    <thetext>The latest patch also generates an additional warning, which is a no-no.
Please address that also before reposting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224909</commentid>
    <comment_count>28</comment_count>
      <attachid>227839</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-01 21:14:44 -0500</bug_when>
    <thetext>Created attachment 227839
Proposed Patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224970</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 09:43:27 -0500</bug_when>
    <thetext>(0) For committers, the recommended way to handle code reordering (moving
methods around to maintain sort order etc) changes is to make an altogether
separate commit that clearly calls out the nature of the change. We should 
not piggy back such non-material changes on top of implementation of some 
capability since it makes it hard for some one to understand the change set
in future.

(1) Javadoc on AST.newLambdaExpression() claims &quot;By default, the declaration 
is for a lambda expression with an empty argument list and no body.&quot; The word
declaration is a hangover from copy/paste and I changed it to:

&quot;By default, the new lambda expression contains an empty argument list and 
the body is an empty block.&quot;

(2) Deleted the new method AST.unsupportedIn2_3_4() and removed the call to
it from the factory method. The constructor already throws it properly using
ASTNode.unsup* - why invent a new method ? 

(3) The pre-existing UnionType factory method claims it return a do statement
(!) - Fixed.

(4) In future, please declare variables as closes to their usage as required.
in ASTConverter.convert(LE), the first line starts with:
int sourceStart = lambda.sourceStart;
The first usage of this variable is 35 lines below. It can be distraction
to somebofy studying the code - Fixed.

(5) BindingResolver.resolveMethod(LambdaExpression lambda) mentions that
&quot;The implementation of &lt;code&gt;LambdaExpression.resolveMethod&lt;/code&gt;
forwards to this method.&quot; - this should be LambdaExpression.resolveMethodBinding
- Fixed. I left the mentions of &quot;method&quot; and &quot;method declarations&quot; as is

(6) LambdaExpression top level Javadoc mentions:

* LambdaExpression:
 *    Identifier &lt;b&gt;-&gt;&lt;/b&gt; Body
 *    &lt;b&gt;(&lt;/b&gt; [ Identifier { &lt;b&gt;,&lt;/b&gt; Identifier } ] &lt;b&gt;)&lt;/b&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body
 *    &lt;b&gt;(&lt;/b&gt; [ FormalParameter { &lt;b&gt;,&lt;/b&gt; FormalParameter } ] &lt;b&gt;)&lt;/b&gt; &lt;b&gt;-&gt;&lt;/b&gt; Body
 * &lt;/pre&gt;
 * 
 *&lt;p&gt; 
 * First two forms use {@link SingleVariableDeclaration} while the third form
 * uses {@link VariableDeclarationFragment}.&lt;/p&gt;

This should be:

 * First two forms use {@link VariableDeclarationFragment} while the third form
 * uses {@link SingleVariableDeclaration}.&lt;/p&gt;

- Fixed.

(7) Fixed javadoc on LE.body from being:

        /**
	 * The method body.
	 * The method body; lazily initialized, defaults to an empty Block.
	 */
	private ASTNode body = null;

to

        /**
	 * The method body; lazily initialized, defaults to an empty Block.
	 */

(8) I don&apos;t think the method LambdaExpression.hasParentheses() should be
doing what it is doing: You have implemented the logic for 
shouldHaveParentheses(). This was never agreed upon in earlier comments. 
This method should just faithfully report whether or not the lambda 
parameters are parenthesized - Fixed.

(9) @return &lt;code&gt;true&lt;/code&gt; if this lambda expression has parentheses an,
	 *    and &lt;code&gt;false&lt;/code&gt; if it does not have parentheses legally

an and =&gt; and - fixed.

Also changed the comment to reflect (8)

(10) Changed the javadoc of setParentheses from being:

	/**
	 * Sets whether this has parentheses or not.
	 *
	 * @param hasParentheses &lt;code&gt;true&lt;/code&gt; if this lambda expression has parentheses around parameters
	 *  and &lt;code&gt;false&lt;/code&gt; otherwise
	 */

to

/**
	 * Sets whether this lambda expression should have parentheses around its parameters or not.
	 *
	 * @param hasParentheses &lt;code&gt;true&lt;/code&gt; if this lambda expression should have parentheses around parameters
	 *  and &lt;code&gt;false&lt;/code&gt; otherwise. Note: Illegal value settings are silently ignored.
	 */

(11) Fixed LE.memSize from being 3 * 4 to:
BASE_NODE_SIZE + 3 * 4;

Tests are running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224974</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 10:51:25 -0500</bug_when>
    <thetext>(In reply to comment #29)

&gt; Tests are running.

(12) Please run all tests before posting a patch. The following test was failing
and I have fixed it:

ASTStructuralPropertyTest.testNodeClassForType()

(13) I think in converter tests we should not be overly relying on
toString output comparisons. These are welcome, but there should be
more of structural verification.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=85d82ef92c86e257cfcb71c0ec95b6b64432a5cb</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224978</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 11:48:53 -0500</bug_when>
    <thetext>(In reply to comment #20)

&gt; - handling of &quot;null&quot; for body doesn&apos;t makes sense. Look for another child
&gt; property that cannot be null and copy lazy initialization and all comments
&gt; from there.

Manoj, you have forgotten to incorporate this correction.

if (this.body == null) this.body = new Block(this.ast);

is not the right way of doing this - Fixed and released.

Please run through all the comments to make sure nothing got dropped, Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225680</commentid>
    <comment_count>32</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-04 10:31:21 -0500</bug_when>
    <thetext>Fixed various remaining problems: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f041a95e804fa0b26cd4f55b03c8572e9e742dad</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226565</commentid>
    <comment_count>33</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-06 00:28:44 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; Fixed various remaining problems:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=f041a95e804fa0b26cd4f55b03c8572e9e742dad

-		while (hasNext) {
-			VariableDeclaration  variableDeclaration =VariableDeclaration) it.next();
-			variableDeclaration.accept(this);
-			if ((hasNext = it.hasNext()) == true)
-				this.buffer.append(&apos;,&apos;);
-		}
-	

+		for (Iterator it = node.parameters().iterator(); it.hasNext(); ) {
+			VariableDeclaration v = (VariableDeclaration) it.next();
+			v.accept(this);
+			if (it.hasNext()) {
+				this.buffer.append(&quot;,&quot;);//$NON-NLS-1$
+			}

Though the initial patch contained for loop, later it was changed to a while loop (after a review) since the hasNext() call is done only once per iteration in the while loop.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226753</commentid>
    <comment_count>34</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-06 09:55:13 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; Though the initial patch contained for loop, later it was changed to a while
&gt; loop (after a review) since the hasNext() call is done only once per
&gt; iteration in the while loop.

That&apos;s correct. But the same pattern is used everywhere else in this class, so we should keep things regular and avoid surprises for the next one who touches this code.

If we really measured a performance difference and decided this is a critical region, then we would probably iterate over toArray() and not use an Iterator. And we would do that change globally (or at least in the whole class).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227049</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-06 16:04:44 -0500</bug_when>
    <thetext>(In reply to comment #34)
&gt; (In reply to comment #33)
&gt; &gt; Though the initial patch contained for loop, later it was changed to a while
&gt; &gt; loop (after a review) since the hasNext() call is done only once per
&gt; &gt; iteration in the while loop.
&gt; 
&gt; That&apos;s correct. But the same pattern is used everywhere else in this class,
&gt; so we should keep things regular and avoid surprises for the next one who
&gt; touches this code.

Manoj is caught between a rock and a hard place with there being two
reviewers :) - Sorry for subjecting you to pulls in different directions. 

I don&apos;t fully agree with the point about regularity(regularness ?), but it 
is not a strong enough disagreement that I can leave it as is.

&gt; If we really measured a performance difference and decided this is a
&gt; critical region

There is a general belief that programmers are poor judges of program hotspots
and sometimes come up with contorted code full of micro-optimizations with
the aim of improving performance where there is no real benefit. While that
sort of &quot;optimizations&quot; should be avoided, the case at hand is not that.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226670</attachid>
            <date>2013-02-06 20:31:00 -0500</date>
            <delta_ts>2013-02-07 10:20:21 -0500</delta_ts>
            <desc>WIP Patch for Structural Review</desc>
            <filename>BUG-399793--18dom-ast-Add-a-new-node-type-for-compil.WIP.patch</filename>
            <type>text/plain</type>
            <size>16699</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vQVNUTWF0Y2hlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmphdmEKaW5kZXggYzZmY2I0NC4uOTQxYjZkYSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9BU1RNYXRjaGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmphdmEKQEAgLTE5MjEsNiArMTkyMSwzMSBA
QAogCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywg
b3IKIAkgKiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUg
b3RoZXIgb2JqZWN0IGhhcyBhCiAJICogICBkaWZmZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxjb2Rl
Pm51bGw8L2NvZGU+CisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIG1hdGNo
KFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQlp
ZiAoIShvdGhlciBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKSkgewor
CQkJcmV0dXJuIGZhbHNlOworCQl9CisJCVR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG8g
PSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pIG90aGVyOworCQlyZXR1cm4KKwkJICAg
IHNhZmVTdWJ0cmVlTWF0Y2gobm9kZS5nZXRUeXBlKCksIG8uZ2V0VHlwZSgpKQorCQkJCSYmIHNh
ZmVTdWJ0cmVlTWF0Y2gobm9kZS5nZXROYW1lKCksIG8uZ2V0TmFtZSgpKTsKKwl9CisKKwkvKioK
KwkgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgYW5kIHRoZSBvdGhlciBvYmplY3Qg
bWF0Y2guCisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcHJvdmlkZWQg
YnkgdGhpcyBjbGFzcyB0ZXN0cyB3aGV0aGVyIHRoZQorCSAqIG90aGVyIG9iamVjdCBpcyBhIG5v
ZGUgb2YgdGhlIHNhbWUgdHlwZSB3aXRoIHN0cnVjdHVyYWxseSBpc29tb3JwaGljCisJICogY2hp
bGQgc3VidHJlZXMuIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIGFzIG5lZWRl
ZC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZQorCSAqIEBwYXJhbSBv
dGhlciB0aGUgb3RoZXIgb2JqZWN0LCBvciA8Y29kZT5udWxsPC9jb2RlPgorCSAqIEByZXR1cm4g
PGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywgb3IKKwkgKiAgIDxjb2Rl
PmZhbHNlPC9jb2RlPiBpZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUgb3RoZXIgb2JqZWN0IGhh
cyBhCisJICogICBkaWZmZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxjb2RlPm51bGw8L2NvZGU+CiAJ
ICovCiAJcHVibGljIGJvb2xlYW4gbWF0Y2goU3RyaW5nTGl0ZXJhbCBub2RlLCBPYmplY3Qgb3Ro
ZXIpIHsKIAkJaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTdHJpbmdMaXRlcmFsKSkgewpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9B
U1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0FTVE5vZGUuamF2YQppbmRleCBmNzllNmVkLi4wN2ZiY2M2IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUv
ZG9tL0FTVE5vZGUuamF2YQpAQCAtNzgyLDYgKzc4MiwxMyBAQAogCXB1YmxpYyBzdGF0aWMgZmlu
YWwgaW50IEVYVFJBX0RJTUVOU0lPTiA9IDg1OwogCiAJLyoqCisJICogTm9kZSB0eXBlIGNvbnN0
YW50IGluZGljYXRpbmcgYSBub2RlIG9mIHR5cGUKKwkgKiA8Y29kZT5UeXBlRWxpZGVkVmFyaWFi
bGVEZWNsYXJhdGlvbjwvY29kZT4uCisJICogQHNlZSBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJh
dGlvbgorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFRZUEVfRUxJREVEX1ZBUklBQkxF
X0RFQ0xBUkFUSU9OID0gODY7CisKKwkvKioKIAkgKiBSZXR1cm5zIHRoZSBub2RlIGNsYXNzIGZv
ciB0aGUgY29ycmVzcG9uZGluZyBub2RlIHR5cGUuCiAJICoKIAkgKiBAcGFyYW0gbm9kZVR5cGUg
QVNUIG5vZGUgdHlwZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQppbmRleCAyNjJk
NTg0Li42MmQ3MGIxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQpAQCAtMTI1
Miw2ICsxMjUyLDIzIEBACiAJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgY2hp
bGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZCBiZQogCSAqIHZpc2l0ZWQsIGFuZCA8Y29kZT5mYWxz
ZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQKIAkgKiBiZSBza2lw
cGVkCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIHZpc2l0KFR5cGVFbGlk
ZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUpIHsKKwkJcmV0dXJuIHRydWU7CisJfQorCisJLyoq
CisJICogVmlzaXRzIHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgor
CSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyBhbmQgcmV0dXJuIHRy
dWUuCisJICogU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICog
QHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2Nv
ZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlCisJICogdmlzaXRlZCwg
YW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3Vs
ZAorCSAqIGJlIHNraXBwZWQKIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiB2aXNpdChTdHJpbmdMaXRl
cmFsIG5vZGUpIHsKIAkJcmV0dXJuIHRydWU7CkBAIC0yMzkyLDYgKzI0MDksMTggQEAKIAkgKgog
CSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CiAJICovCisJcHVibGljIHZvaWQgZW5k
VmlzaXQoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gbm9kZSkgeworCQkvLyBkZWZhdWx0
IGltcGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCisJfQorCisJLyoqCisJICogRW5kIG9mIHZpc2l0
IHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRoZSBkZWZh
dWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZy4gU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1l
bnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkg
Ki8KIAlwdWJsaWMgdm9pZCBlbmRWaXNpdChTdHJpbmdMaXRlcmFsIG5vZGUpIHsKIAkJLy8gZGVm
YXVsdCBpbXBsZW1lbnRhdGlvbjogZG8gbm90aGluZwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9MYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MC4uYWU3NDYyMgotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0wLDAgKzEs
MTQxIEBACitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbTsKKworaW1wb3J0IGphdmEu
dXRpbC5BcnJheUxpc3Q7CisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5k
IGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEw
Lmh0bWwKKyAqIAorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAg
ICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLworaW1wb3J0IGphdmEudXRpbC5MaXN0OworCisvKioKKyAqIExh
bWJkYSBleHByZXNzaW9uIEFTVCBub2RlIHR5cGUuCisgKiA8cD4KKyAqIFRoaXMgbm9kZSByZXBy
ZXNlbnRzIGxhbWJkYSBleHByZXNzaW9ucyAKKyAqIFRPRE8gOiBBZGQgcHJvcGVyIGphdmFkb2Mg
ZGVzY3JpcHRpb24uCisgKiA8L3A+CisgKiAKKyAqIEBzaW5jZSAzLjkKKyAqIAorICogQG5vaW5z
dGFudGlhdGUgVGhpcyBjbGFzcyBpcyBub3QgaW50ZW5kZWQgdG8gYmUgaW5zdGFudGlhdGVkIGJ5
IGNsaWVudHMuIAorICovCisKK3B1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMg
U3RhdGVtZW50IHsKKworCS8qKgorCSAqIFRoZSAiVmFyaWFibGUiIHN0cnVjdHVyYWwgcHJvcGVy
dHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0
aW9ufSkuCisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBDaGlsZExpc3RQcm9wZXJ0eURlc2Ny
aXB0b3IgUEFSQU1FVEVSU19QUk9QRVJUWSA9CisJCW5ldyBDaGlsZExpc3RQcm9wZXJ0eURlc2Ny
aXB0b3IoTGFtYmRhRXhwcmVzc2lvbi5jbGFzcywgInBhcmFtZXRlcnMiLCBWYXJpYWJsZURlY2xh
cmF0aW9uLmNsYXNzLCBOT19DWUNMRV9SSVNLKTsgLy8kTk9OLU5MUy0xJAorCQorCS8qKgorCSAq
IFRoZSAiYm9keSIgc3RydWN0dXJhbCBwcm9wZXJ0eSBvZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQg
dHlwZToge0BsaW5rIFN0YXRlbWVudH0pLgorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hp
bGRQcm9wZXJ0eURlc2NyaXB0b3IgQk9EWV9QUk9QRVJUWSA9CisJCW5ldyBDaGlsZFByb3BlcnR5
RGVzY3JpcHRvcihMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCAiYm9keSIsIFN0YXRlbWVudC5jbGFz
cywgTUFOREFUT1JZLCBOT19DWUNMRV9SSVNLKTsgLy8kTk9OLU5MUy0xJAorCisJLyoqCisJICog
QSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5r
IFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KSwKKwkgKiBvciBudWxsIGlmIHVuaW5pdGlh
bGl6ZWQuCisJICogQHNpbmNlIDMuOQorCSAqLworCXByaXZhdGUgc3RhdGljIGZpbmFsIExpc3Qg
UFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOworCQorCXN0YXRpYyB7CisJCUxpc3QgcHJvcGVydHlM
aXN0ID0gbmV3IEFycmF5TGlzdCgyKTsKKwkJY3JlYXRlUHJvcGVydHlMaXN0KExhbWJkYUV4cHJl
c3Npb24uY2xhc3MsIHByb3BlcnR5TGlzdCk7CisJCWFkZFByb3BlcnR5KFBBUkFNRVRFUlNfUFJP
UEVSVFksIHByb3BlcnR5TGlzdCk7CisJCWFkZFByb3BlcnR5KEJPRFlfUFJPUEVSVFksIHByb3Bl
cnR5TGlzdCk7CisJCVBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3Qo
cHJvcGVydHlMaXN0KTsKKwl9CisJCisJLyoqCisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0
dXJhbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50
cyBtdXN0IG5vdCBtb2RpZnkgdGhlIHJlc3VsdC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0
aGUgQVBJIGxldmVsOyBvbmUgb2YgdGhlIEFTVC5KTFMqIGNvbnN0YW50cworCSAqIEByZXR1cm4g
YSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5r
IFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KQorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlw
dWJsaWMgc3RhdGljIExpc3QgcHJvcGVydHlEZXNjcmlwdG9ycyhpbnQgYXBpTGV2ZWwpIHsKKwkJ
cmV0dXJuIFBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsKKwl9CisKKwkvKioKKwkgKiBUaGUgcGFy
YW1ldGVyIGRlY2xhcmF0aW9ucworCSAqIChlbGVtZW50IHR5cGU6IHtAbGluayBTaW5nbGVWYXJp
YWJsZURlY2xhcmF0aW9ufSkuCisJICogRGVmYXVsdHMgdG8gYW4gZW1wdHkgbGlzdC4KKwkgKi8K
Kwlwcml2YXRlIEFTVE5vZGUuTm9kZUxpc3QgcGFyYW1ldGVycyA9CisJCW5ldyBBU1ROb2RlLk5v
ZGVMaXN0KFBBUkFNRVRFUlNfUFJPUEVSVFkpOworCisJLyoqCisJICogVGhlIHJldHVybiB0eXBl
LgorCSAqIE5vdGUgdGhhdCB0aGlzIGZpZWxkIGlzIGlnbm9yZWQgZm9yIGNvbnN0cnVjdG9yIGRl
Y2xhcmF0aW9ucy4KKwkgKi8KKwlwcml2YXRlIFR5cGUgcmV0dXJuVHlwZSA9IG51bGw7CisKKwkv
KioKKwkgKiBUaGUgbWV0aG9kIGJvZHksIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmIG5vbmUuCisJ
ICogRGVmYXVsdHMgdG8gbm9uZS4KKwkgKi8KKwlwcml2YXRlIFN0YXRlbWVudCBib2R5ID0gbnVs
bDsKKworCS8qKgorCSAqIENyZWF0ZXMgYSBuZXcgQVNUIG5vZGUgZm9yIGEgTGFtYmRhRXhwcmVz
c2lvbiBkZWNsYXJhdGlvbiBvd25lZAorCSAqIGJ5IHRoZSBnaXZlbiBBU1QuCisJICogPHA+CisJ
ICogTi5CLiBUaGlzIGNvbnN0cnVjdG9yIGlzIHBhY2thZ2UtcHJpdmF0ZTsgYWxsIHN1YmNsYXNz
ZXMgbXVzdCBiZQorCSAqIGRlY2xhcmVkIGluIHRoZSBzYW1lIHBhY2thZ2U7IGNsaWVudHMgYXJl
IHVuYWJsZSB0byBkZWNsYXJlCisJICogYWRkaXRpb25hbCBzdWJjbGFzc2VzLgorCSAqIDwvcD4K
KwkgKgorCSAqIEBwYXJhbSBhc3QgdGhlIEFTVCB0aGF0IGlzIHRvIG93biB0aGlzIG5vZGUKKwkg
Ki8KKwlMYW1iZGFFeHByZXNzaW9uKEFTVCBhc3QpIHsKKwkJc3VwZXIoYXN0KTsKKwkJdGhpcy5w
YXJhbWV0ZXJzID0gbmV3IEFTVE5vZGUuTm9kZUxpc3QoUEFSQU1FVEVSU19QUk9QRVJUWSk7CisJ
fQorCisJTGlzdCBpbnRlcm5hbFN0cnVjdHVyYWxQcm9wZXJ0aWVzRm9yVHlwZShpbnQgYXBpTGV2
ZWwpIHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gbnVs
bDsKKwl9CisKKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJhdGVk
IG1ldGhvZCBzdHViCisJCXJldHVybiAwOworCX0KKworCWJvb2xlYW4gc3VidHJlZU1hdGNoMChB
U1RNYXRjaGVyIG1hdGNoZXIsIE9iamVjdCBvdGhlcikgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJh
dGVkIG1ldGhvZCBzdHViCisJCXJldHVybiBmYWxzZTsKKwl9CisKKwlBU1ROb2RlIGNsb25lMChB
U1QgdGFyZ2V0KSB7CisJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgbWV0aG9kIHN0dWIKKwkJcmV0
dXJuIG51bGw7CisJfQorCisJdm9pZCBhY2NlcHQwKEFTVFZpc2l0b3IgdmlzaXRvcikgeworCQkv
LyBUT0RPIEF1dG8tZ2VuZXJhdGVkIG1ldGhvZCBzdHViCisJCQorCX0KKworCWludCB0cmVlU2l6
ZSgpIHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gMDsK
Kwl9CisJCit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL1R5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVFbGlkZWRW
YXJpYWJsZURlY2xhcmF0aW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MC4uYjllZWIyNgotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uamF2
YQpAQCAtMCwwICsxLDI3NSBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
KyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1k
cmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5
IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFs
dWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRo
IGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb207
CisKK2ltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OworaW1wb3J0IGphdmEudXRpbC5MaXN0Owor
CisvKioKKyAqIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUgdHlwZS4gVHlwZUVs
aWRlVmFyaWFibGVEZWNsYXJhdGlvbiBub2RlcyBhcmUgdXNlZCBpbiB0aGUgCisgKiBkZWNsYXJh
dGlvbiBvZiB2YXJpYWJsZXMgaW4gTGFtYmRhRXhwcmVzc2lvbi4gVHlwZSBpcyBlbGlkZWQgYW5k
IGRldGVybWluZWQgZnJvbSB0aGUgZGVjbGFyYXRpb24KKyAqIG9mIHRoZSBpbnRlcmZhY2UgZnVu
Y3Rpb24gd2hpY2ggYmluZHMgdGhlIExhbWJkYUV4cHJlc3Npb24uIEF2YWlsYWJsZSBmcm9tIEpM
Uzggb253YXJkcy4KKyAqIAorICogVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb246CisgKiAg
ICAgSWRlbnRpZmllciAKKyAqIEBzaW5jZSAzLjkKKyAqLworcHVibGljIGNsYXNzIFR5cGVFbGlk
ZWRWYXJpYWJsZURlY2xhcmF0aW9uIGV4dGVuZHMgVmFyaWFibGVEZWNsYXJhdGlvbiB7CisKKwkv
KioKKwkgKiBUaGUgIm5hbWUiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUg
KGNoaWxkIHR5cGU6IHtAbGluayBTaW1wbGVOYW1lfSkuCisJICogQHNpbmNlIDMuOQorCSAqLwor
CXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgTkFNRV9QUk9QRVJU
WSA9CisJCQluZXcgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IoU2luZ2xlVmFyaWFibGVEZWNsYXJh
dGlvbi5jbGFzcywgIm5hbWUiLCBTaW1wbGVOYW1lLmNsYXNzLCBNQU5EQVRPUlksIE5PX0NZQ0xF
X1JJU0spOyAvLyROT04tTkxTLTEkCisKKwkvKioKKwkgKiBUaGUgInR5cGUiIHN0cnVjdHVyYWwg
cHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBUeXBlfSkuIElu
aXRpYWxseSB0aGlzIHdvdWxkIGJlIG51bGwgYW5kIHdvdWxkIGJlIGRldGVybWluZWQgaWYgcmVx
dWlyZWQKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBDaGlsZFBy
b3BlcnR5RGVzY3JpcHRvciBUWVBFX1BST1BFUlRZID0KKwkJbmV3IENoaWxkUHJvcGVydHlEZXNj
cmlwdG9yKFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24uY2xhc3MsICJ0eXBlIiwgVHlwZS5jbGFz
cywgT1BUSU9OQUwsIE5PX0NZQ0xFX1JJU0spOyAvLyROT04tTkxTLTEkCisKKwkvKioKKwkgKiBB
IGxpc3Qgb2YgcHJvcGVydHkgZGVzY3JpcHRvcnMgKGVsZW1lbnQgdHlwZToKKwkgKiB7QGxpbmsg
U3RydWN0dXJhbFByb3BlcnR5RGVzY3JpcHRvcn0pLAorCSAqIG9yIG51bGwgaWYgdW5pbml0aWFs
aXplZC4KKwkgKiBAc2luY2UgMy45CisJICovCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgTGlzdCBQ
Uk9QRVJUWV9ERVNDUklQVE9SU184XzA7CisKKwlzdGF0aWMgeworCQlMaXN0IHByb3BlcnR5TGlz
dCA9IG5ldyBBcnJheUxpc3QoMik7CisJCWNyZWF0ZVByb3BlcnR5TGlzdChUeXBlRWxpZGVkVmFy
aWFibGVEZWNsYXJhdGlvbi5jbGFzcywgcHJvcGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoTkFN
RV9QUk9QRVJUWSwgcHJvcGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoVFlQRV9QUk9QRVJUWSwg
cHJvcGVydHlMaXN0KTsKKwkJUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wID0gcmVhcFByb3BlcnR5
TGlzdChwcm9wZXJ0eUxpc3QpOworCX0KKwkKKwkvKioKKwkgKiBSZXR1cm5zIGEgbGlzdCBvZiBz
dHJ1Y3R1cmFsIHByb3BlcnR5IGRlc2NyaXB0b3JzIGZvciB0aGlzIG5vZGUgdHlwZS4KKwkgKiBD
bGllbnRzIG11c3Qgbm90IG1vZGlmeSB0aGUgcmVzdWx0LgorCSAqCisJICogQHBhcmFtIGFwaUxl
dmVsIHRoZSBBUEkgbGV2ZWw7IG9uZSBvZiB0aGUKKwkgKiA8Y29kZT5BU1QuSkxTKjwvY29kZT4g
Y29uc3RhbnRzCisJICogQHJldHVybiBhIGxpc3Qgb2YgcHJvcGVydHkgZGVzY3JpcHRvcnMgKGVs
ZW1lbnQgdHlwZToKKwkgKiB7QGxpbmsgU3RydWN0dXJhbFByb3BlcnR5RGVzY3JpcHRvcn0pCisJ
ICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBzdGF0aWMgTGlzdCBwcm9wZXJ0eURlc2NyaXB0
b3JzKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOwor
CX0KKworCS8qKgorCSAqIFRoZSB2YXJpYWJsZSBuYW1lOyBsYXppbHkgaW5pdGlhbGl6ZWQ7IGRl
ZmF1bHRzIHRvIGEgdW5zcGVjaWZpZWQsCisJICogbGVnYWwgSmF2YSBpZGVudGlmaWVyLgorCSAq
LworCXByaXZhdGUgU2ltcGxlTmFtZSB2YXJpYWJsZU5hbWUgPSBudWxsOworCisJLyoqCisJICog
VGhlIHR5cGU7IGxhemlseSBpbml0aWFsaXplZDsgZGVmYXVsdHMgdG8gYSB1bnNwZWNpZmllZCwK
KwkgKiBsZWdhbCB0eXBlLgorCSAqLworCXByaXZhdGUgVHlwZSB0eXBlID0gbnVsbDsKKworCVR5
cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKEFTVCBhc3QpIHsKKwkJc3VwZXIoYXN0KTsKKwl9
CisKKwlTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxFeHRyYURpbWVuc2lvbnNQcm9w
ZXJ0eSgpIHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4g
bnVsbDsKKwl9CisKKwlDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBpbnRlcm5hbEluaXRpYWxpemVy
UHJvcGVydHkoKSB7CisJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgbWV0aG9kIHN0dWIKKwkJcmV0
dXJuIG51bGw7CisJfQorCisJQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxOYW1lUHJv
cGVydHkoKSB7CisJCXJldHVybiBOQU1FX1BST1BFUlRZOworCX0KKworCXB1YmxpYyBpbnQgZ2V0
RXh0cmFEaW1lbnNpb25zKCkgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJhdGVkIG1ldGhvZCBzdHVi
CisJCXJldHVybiAwOworCX0KKworCXB1YmxpYyB2b2lkIHNldEV4dHJhRGltZW5zaW9ucyhpbnQg
ZGltZW5zaW9ucykgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJhdGVkIG1ldGhvZCBzdHViCisKKwl9
CisKKwlwdWJsaWMgRXhwcmVzc2lvbiBnZXRJbml0aWFsaXplcigpIHsKKwkJLy8gVE9ETyBBdXRv
LWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlwdWJsaWMgdm9p
ZCBzZXRJbml0aWFsaXplcihFeHByZXNzaW9uIGluaXRpYWxpemVyKSB7CisJCS8vIFRPRE8gQXV0
by1nZW5lcmF0ZWQgbWV0aG9kIHN0dWIKKworCX0KKworCUxpc3QgaW50ZXJuYWxTdHJ1Y3R1cmFs
UHJvcGVydGllc0ZvclR5cGUoaW50IGFwaUxldmVsKSB7CisJCXJldHVybiBwcm9wZXJ0eURlc2Ny
aXB0b3JzKGFwaUxldmVsKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhv
ZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBBU1ROb2Rl
IGludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBwcm9w
ZXJ0eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hpbGQpIHsKKwkJaWYgKHByb3BlcnR5ID09IE5B
TUVfUFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1cm4gZ2V0TmFtZSgpOworCQkJ
fSBlbHNlIHsKKwkJCQlzZXROYW1lKChTaW1wbGVOYW1lKSBjaGlsZCk7CisJCQkJcmV0dXJuIG51
bGw7CisJCQl9CisJCX0KKwkJaWYgKHByb3BlcnR5ID09IFRZUEVfUFJPUEVSVFkpIHsKKwkJCWlm
IChnZXQpIHsKKwkJCQlyZXR1cm4gZ2V0VHlwZSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXRUeXBl
KChUeXBlKSBjaGlsZCk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJLy8gYWxsb3cg
ZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBmbGFnIHRoZSBlcnJvcgorCQlyZXR1cm4gc3VwZXIu
aW50ZXJuYWxHZXRTZXRDaGlsZFByb3BlcnR5KHByb3BlcnR5LCBnZXQsIGNoaWxkKTsKKwl9CisK
KwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQg
b24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gVFlQRV9F
TElERURfVkFSSUFCTEVfREVDTEFSQVRJT047CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3Ig
dGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJYm9v
bGVhbiBzdWJ0cmVlTWF0Y2gwKEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7CisJ
CS8vIGRpc3BhdGNoIHRvIGNvcnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0dXJu
IG1hdGNoZXIubWF0Y2godGhpcywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9y
IHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCUFT
VE5vZGUgY2xvbmUwKEFTVCB0YXJnZXQpIHsKKwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRp
b24gcmVzdWx0ID0gbmV3IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKHRhcmdldCk7CisJ
CXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsK
KwkJcmVzdWx0LnNldFR5cGUoKFR5cGUpIGdldFR5cGUoKS5jbG9uZSh0YXJnZXQpKTsKKwkJcmVz
dWx0LnNldE5hbWUoKFNpbXBsZU5hbWUpIGdldE5hbWUoKS5jbG9uZSh0YXJnZXQpKTsKKwkJcmV0
dXJuIHJlc3VsdDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkg
KiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwl2b2lkIGFjY2VwdDAoQVNUVmlz
aXRvciB2aXNpdG9yKSB7CisJCXZpc2l0b3IudmlzaXQodGhpcyk7CisJCXZpc2l0b3IuZW5kVmlz
aXQodGhpcyk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICog
TWV0aG9kIGRlY2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJcHVibGljIFNp
bXBsZU5hbWUgZ2V0TmFtZSgpIHsKKwkJaWYgKHRoaXMudmFyaWFibGVOYW1lID09IG51bGwpIHsK
KwkJCS8vIGxhenkgaW5pdCBtdXN0IGJlIHRocmVhZC1zYWZlIGZvciByZWFkZXJzCisJCQlzeW5j
aHJvbml6ZWQgKHRoaXMpIHsKKwkJCQlpZiAodGhpcy52YXJpYWJsZU5hbWUgPT0gbnVsbCkgewor
CQkJCQlwcmVMYXp5SW5pdCgpOworCQkJCQl0aGlzLnZhcmlhYmxlTmFtZSA9IG5ldyBTaW1wbGVO
YW1lKHRoaXMuYXN0KTsKKwkJCQkJcG9zdExhenlJbml0KHRoaXMudmFyaWFibGVOYW1lLCBOQU1F
X1BST1BFUlRZKTsKKwkJCQl9CisJCQl9CisJCX0KKwkJcmV0dXJuIHRoaXMudmFyaWFibGVOYW1l
OworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBk
ZWNsYXJlZCBvbiBWYXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyB2b2lkIHNldE5h
bWUoU2ltcGxlTmFtZSB2YXJpYWJsZU5hbWUpIHsKKwkJaWYgKHZhcmlhYmxlTmFtZSA9PSBudWxs
KSB7CisJCQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7CisJCX0KKwkJQVNU
Tm9kZSBvbGRDaGlsZCA9IHRoaXMudmFyaWFibGVOYW1lOworCQlwcmVSZXBsYWNlQ2hpbGQob2xk
Q2hpbGQsIHZhcmlhYmxlTmFtZSwgTkFNRV9QUk9QRVJUWSk7CisJCXRoaXMudmFyaWFibGVOYW1l
ID0gdmFyaWFibGVOYW1lOworCQlwb3N0UmVwbGFjZUNoaWxkKG9sZENoaWxkLCB2YXJpYWJsZU5h
bWUsIE5BTUVfUFJPUEVSVFkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIHR5cGUgb2Yg
dGhlIHZhcmlhYmxlIGRlY2xhcmVkIGluIHRoaXMgdmFyaWFibGUgZGVjbGFyYXRpb24sCisJICog
ZXhjbHVzaXZlIG9mIGFueSBleHRyYSBhcnJheSBkaW1lbnNpb25zLgorCSAqCisJICogQHJldHVy
biB0aGUgdHlwZQorCSAqLworCXB1YmxpYyBUeXBlIGdldFR5cGUoKSB7CisJCWlmICh0aGlzLnR5
cGUgPT0gbnVsbCkgeworCQkJLy8gbGF6eSBpbml0IG11c3QgYmUgdGhyZWFkLXNhZmUgZm9yIHJl
YWRlcnMKKwkJCXN5bmNocm9uaXplZCAodGhpcykgeworCQkJCWlmICh0aGlzLnR5cGUgPT0gbnVs
bCkgeworCQkJCQlwcmVMYXp5SW5pdCgpOworCQkJCQl0aGlzLnR5cGUgPSB0aGlzLmFzdC5uZXdQ
cmltaXRpdmVUeXBlKFByaW1pdGl2ZVR5cGUuSU5UKTsKKwkJCQkJcG9zdExhenlJbml0KHRoaXMu
dHlwZSwgVFlQRV9QUk9QRVJUWSk7CisJCQkJfQorCQkJfQorCQl9CisJCXJldHVybiB0aGlzLnR5
cGU7CisJfQorCisJLyoqCisJICogU2V0cyB0aGUgdHlwZSBvZiB0aGUgdmFyaWFibGUgZGVjbGFy
ZWQgaW4gdGhpcyB2YXJpYWJsZSBkZWNsYXJhdGlvbiB0bworCSAqIHRoZSBnaXZlbiB0eXBlLCBl
eGNsdXNpdmUgb2YgYW55IGV4dHJhIGFycmF5IGRpbWVuc2lvbnMuCisJICoKKwkgKiBAcGFyYW0g
dHlwZSB0aGUgbmV3IHR5cGUKKwkgKiBAZXhjZXB0aW9uIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlv
biBpZjoKKwkgKiA8dWw+CisJICogPGxpPnRoZSBub2RlIGJlbG9uZ3MgdG8gYSBkaWZmZXJlbnQg
QVNUPC9saT4KKwkgKiA8bGk+dGhlIG5vZGUgYWxyZWFkeSBoYXMgYSBwYXJlbnQ8L2xpPgorCSAq
IDwvdWw+CisJICovCisJcHVibGljIHZvaWQgc2V0VHlwZShUeXBlIHR5cGUpIHsKKwkJaWYgKHR5
cGUgPT0gbnVsbCkgeworCQkJdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOwor
CQl9CisJCUFTVE5vZGUgb2xkQ2hpbGQgPSB0aGlzLnR5cGU7CisJCXByZVJlcGxhY2VDaGlsZChv
bGRDaGlsZCwgdHlwZSwgVFlQRV9QUk9QRVJUWSk7CisJCXRoaXMudHlwZSA9IHR5cGU7CisJCXBv
c3RSZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIHR5cGUsIFRZUEVfUFJPUEVSVFkpOworCX0KKworCS8q
IChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBB
U1ROb2RlLgorCSAqLworCWludCBtZW1TaXplKCkgeworCQkvLyB0cmVhdCBPcGVyYXRvciBhcyBm
cmVlCisJCXJldHVybiBCQVNFX05PREVfU0laRSArIDIgKiA0OworCX0KKworCS8qIChvbWl0IGph
dmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgor
CSAqLworCWludCB0cmVlU2l6ZSgpIHsKKwkJcmV0dXJuCisJCQltZW1TaXplKCkKKwkJCSsgKHRo
aXMudHlwZSA9PSBudWxsID8gMCA6IGdldFR5cGUoKS50cmVlU2l6ZSgpKQorCQkJKyAodGhpcy52
YXJpYWJsZU5hbWUgPT0gbnVsbCA/IDAgOiBnZXROYW1lKCkudHJlZVNpemUoKSk7CisJfQorfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226701</attachid>
            <date>2013-02-07 10:20:00 -0500</date>
            <delta_ts>2013-02-08 21:19:34 -0500</delta_ts>
            <desc>Patch - wip</desc>
            <filename>BUG-399793--18dom-ast-Add-a-new-node-type-for-compil.proto.wip.patch</filename>
            <type>text/plain</type>
            <size>41460</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDZlOTEzMzYuLjRkZWZmYWMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE2MSBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QwMTE1KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkg
PSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0MDExNS9YLmphdmEiLAorCQkJ
CXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDAx
MTU7IgorCQkJCSsgImludGVyZmFjZSBJIHtcbiIKKwkJCQkrICIJaW50IGZvbyhpbnQgeCk7XG4i
CisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9
ICB2bGFtYmRhIC0+IHtyZXR1cm4gMjAwO307XG4iCisJCQkJKyJ9XG4iOworCQlDb21waWxhdGlv
blVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywgdGhpcy53b3Jr
aW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xh
cmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAxKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xh
cmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRp
b25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAo
VmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJhZ21lbnRzKCku
Z2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXpl
cigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9u
KTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJkYUV4cHJlc3Np
b24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIC0+IHtcbiAgcmV0dXJuIDIw
MDtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFt
YmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5zaXplKCkgPT0gMSk7CisJCVZhcmlhYmxlRGVjbGFy
YXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBsYW1iZGFF
eHByZXNzaW9uLmFyZ3VtZW50cygpLmdldCgwKTsKKwkJYXNzZXJ0VHJ1ZSh2YXJpYWJsZURlY2xh
cmF0aW9uIGluc3RhbmNlb2YgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pOworCQlUeXBl
RWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiA9
IChUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbil2YXJpYWJsZURlY2xhcmF0aW9uOworCQlh
c3NlcnRFcXVhbHMoInZsYW1iZGEiLCB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbi50b1N0
cmluZygpKTsJCQorCX0KKworCS8qKgorCSAqIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3QwMTE2KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4
L3NyYy90ZXN0MDExNi9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5n
IGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDAxMTY7IgorCQkJCSsgImludGVyZmFjZSBJIHtcbiIK
KwkJCQkrICIJaW50IGZvbyhpbnQgeCk7XG4iCisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMg
Y2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9ICB2bGFtYmRhIC0+IDIwMDtcbiIKKwkJCQkrIn1c
biI7CisJCUNvbXBpbGF0aW9uVW5pdCBjdSA9IChDb21waWxhdGlvblVuaXQpIGJ1aWxkQVNUKGNv
bnRlbnRzLCB0aGlzLndvcmtpbmdDb3B5KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVkZWNsYXJh
dGlvbiA9IChUeXBlRGVjbGFyYXRpb24pIGdldEFTVE5vZGUoY3UsIDEpOworCQlGaWVsZERlY2xh
cmF0aW9uIGZpZWxkRGVjbGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0
aW9uLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFn
bWVudCBmcmFnbWVudCA9IChWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQpZmllbGREZWNsYXJh
dGlvbi5mcmFnbWVudHMoKS5nZXQoMCk7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IGZyYWdt
ZW50LmdldEluaXRpYWxpemVyKCk7CisJCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9m
IExhbWJkYUV4cHJlc3Npb24pOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24g
PSAoTGFtYmRhRXhwcmVzc2lvbilleHByZXNzaW9uOworCQlhc3NlcnRFcXVhbHMoIih2bGFtYmRh
KSAtPiAyMDA7XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVl
KGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURl
Y2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFt
YmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5nZXQoMCk7CisJCWFzc2VydFRydWUodmFyaWFibGVE
ZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJ
VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRp
b24gPSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsK
KwkJYXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIiwgdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24u
dG9TdHJpbmcoKSk7CQkKKwl9CisJCisJLyoqCisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCSAqIAorCSAqIEB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uCisJICovCisJcHVibGljIHZvaWQgdGVzdDAxMTcoKSB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uIHsKKwkJdGhpcy53b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVy
dGVyMTgvc3JjL3Rlc3QwMTE3L1guamF2YSIsCisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlT
dHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0ZXN0MDExNzsiCisJCQkJKyAiaW50ZXJmYWNlIEkg
e1xuIgorCQkJCSsgIglPYmplY3QgZm9vKGludCBbXSBpYSk7XG4iCisJCQkJKyAifVxuIiAKKwkJ
CQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IChpbnQgW10gaWEpIC0+e1xu
IgorCQkJCSsgIiAgCXJldHVybiBpYS5jbG9uZSgpOyIKKwkJCQkrICJ9O1xuIgorCQkJCSsifVxu
IjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29u
dGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0
aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFy
YXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRp
b24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdt
ZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0
aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21l
bnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2Yg
TGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9
IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKGludFtdIGlh
KSAtPiB7XG4gIHJldHVybiBpYS5jbG9uZSgpO1xufVxuIiwgbGFtYmRhRXhwcmVzc2lvbi50b1N0
cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50cygpLnNpemUo
KSA9PSAxKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiB2YXJpYWJsZURlY2xhcmF0aW9uID0gKFZh
cmlhYmxlRGVjbGFyYXRpb24pIGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuZ2V0KDApOwor
CQlhc3NlcnRUcnVlKHZhcmlhYmxlRGVjbGFyYXRpb24gaW5zdGFuY2VvZiBTaW5nbGVWYXJpYWJs
ZURlY2xhcmF0aW9uKTsKKwkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJpYWJs
ZURlY2xhcmF0aW9uID0gKFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJh
dGlvbjsKKwkJYXNzZXJ0RXF1YWxzKCJpbnRbXSBpYSIsIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRp
b24udG9TdHJpbmcoKSk7CQkKKwl9CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0MDExOCgpIHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252
ZXJ0ZXIxOC9zcmMvdGVzdDAxMTgvWC5qYXZhIiwKKwkJCQl0cnVlLyogcmVzb2x2ZSAqLyk7CisJ
CVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHRlc3QwMTE4OyIgKworCQkJCSJpbnRlcmZhY2Ug
SSB7XG4iICsKKwkJCQkiCXZvaWQgZG9pdCgpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiCQlJIGkgPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJU3lz
dGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCUkgaiA9ICgpIC0+IHtcbiIgKwor
CQkJCSIJCQkJU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQlJIGsgPSAo
KSAtPiB7XG4iICsKKwkJCQkiCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4odGhpcyk7XG4iICsKKwkJ
CQkiCQkJCX07XG4iICsKKwkJCQkiCQkJfTtcbiIgKworCQkJCSIJCX07XG4iICsKKwkJCQkiCX1c
biI7IAorCQlDb21waWxhdGlvblVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChj
b250ZW50cywgdGhpcy53b3JraW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFy
YXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAxKTsKKwkJRmllbGREZWNs
YXJhdGlvbiBmaWVsZERlY2xhcmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJh
dGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJh
Z21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFy
YXRpb24uZnJhZ21lbnRzKCkuZ2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9u
ID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiB7
XG4gIFN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiAgSSBqPSgpIC0+IHtcbiAgICBTeXN0ZW0u
b3V0LnByaW50bG4odGhpcyk7XG4gICAgSSBrPSgpIC0+IHtcbiAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih0aGlzKTtcbiAgICB9XG47XG4gIH1cbjtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5zaXpl
KCkgPT0gMCk7CisJfQorCisJLyoqCisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM5OTc5MworCSAqIAorCSAqIEB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uCisJICovCisJcHVibGljIHZvaWQgX3Rlc3QwMTE3YSgpIHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIx
OC9zcmMvdGVzdDAxMTcvWC5qYXZhIiwKKwkJCQl0cnVlLyogcmVzb2x2ZSAqLyk7CisJCVN0cmlu
ZyBjb250ZW50cyA9ICJwYWNrYWdlIHRlc3QwMTE3OyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4i
CisJCQkJKyAiCXZvaWQgZm9vKCk7XG4iCisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMgY2xh
c3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IHN1cGVyOjp0b1N0cmluZztcbiIKKwkJCQkrIn1cbiI7
CisJCUNvbXBpbGF0aW9uVW5pdCBjdSA9IChDb21waWxhdGlvblVuaXQpIGJ1aWxkQVNUKGNvbnRl
bnRzLCB0aGlzLndvcmtpbmdDb3B5KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVkZWNsYXJhdGlv
biA9IChUeXBlRGVjbGFyYXRpb24pIGdldEFTVE5vZGUoY3UsIDEpOworCQlGaWVsZERlY2xhcmF0
aW9uIGZpZWxkRGVjbGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0aW9u
LmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dCBmcmFnbWVudCA9IChWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQpZmllbGREZWNsYXJhdGlv
bi5mcmFnbWVudHMoKS5nZXQoMCk7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IGZyYWdtZW50
LmdldEluaXRpYWxpemVyKCk7CisJCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExh
bWJkYUV4cHJlc3Npb24pOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24gPSAo
TGFtYmRhRXhwcmVzc2lvbilleHByZXNzaW9uOworCQlhc3NlcnRFcXVhbHMoIih2bGFtYmRhKSAt
PiAyMDA7XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGxh
bWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURlY2xh
cmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFtYmRh
RXhwcmVzc2lvbi5hcmd1bWVudHMoKS5nZXQoMCk7CisJCWFzc2VydFRydWUodmFyaWFibGVEZWNs
YXJhdGlvbiBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJVHlw
ZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24g
PSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJ
YXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIiwgdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24udG9T
dHJpbmcoKSk7CQkKKwl9CisJCiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IGIzZDIx
OGIuLmM0NzU3MmMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC00Miw3ICs0Miw3IEBA
CiAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJl
c3Npb24gaW1wbGVtZW50cyBQcm9ibGVtU2V2ZXJpdGllcywgUmVmZXJlbmNlQ29udGV4dCB7CiAJ
cHVibGljIEFyZ3VtZW50IFtdIGFyZ3VtZW50czsKLQlTdGF0ZW1lbnQgYm9keTsKKwlwdWJsaWMg
U3RhdGVtZW50IGJvZHk7CiAJcHJpdmF0ZSBNZXRob2RTY29wZSBzY29wZTsKIAlwcml2YXRlIENv
bXBpbGF0aW9uUmVzdWx0IGNvbXBpbGF0aW9uUmVzdWx0OwogCXByaXZhdGUgYm9vbGVhbiBpZ25v
cmVGdXJ0aGVySW52ZXN0aWdhdGlvbjsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2Vy
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCmluZGV4IGY5ZDRkYzQuLmYyMTk3YmMg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNl
ci9QYXJzZXIuamF2YQpAQCAtNzY5NSw3ICs3Njk1LDcgQEAKIAkJaWYgKHRoaXMub3B0aW9ucy5p
Z25vcmVNZXRob2RCb2RpZXMpIHsKIAkJCWJvZHkgPSBuZXcgQmxvY2soMCk7CiAJCX0KLQl9CisJ
fSAKIAlBcmd1bWVudCBbXSBhcmd1bWVudHMgPSBudWxsOwogCWludCBsZW5ndGggPSB0aGlzLmFz
dExlbmd0aFN0YWNrW3RoaXMuYXN0TGVuZ3RoUHRyLS1dOwogCXRoaXMuYXN0UHRyIC09IGxlbmd0
aDsKQEAgLTc3MTcsNiArNzcxNywxMCBAQAogCXRoaXMuaW50UHRyLS07ICAvLyAnKScgcG9zaXRp
b24sIGRpc2NhcmQgZm9yIG5vdy4KIAlsZXhwLnNvdXJjZVN0YXJ0ID0gdGhpcy5pbnRTdGFja1t0
aGlzLmludFB0ci0tXTsgLy8gJygnIHBvc2l0aW9uIG9yIGlkZW50aWZpZXIgcG9zaXRpb24uCiAJ
bGV4cC5zb3VyY2VFbmQgPSBib2R5LnNvdXJjZUVuZDsKKwlpZiAoYm9keSBpbnN0YW5jZW9mIEV4
cHJlc3Npb24pIHsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gKEV4cHJlc3Npb24pIGJvZHk7
CisJCWV4cHJlc3Npb24uc3RhdGVtZW50RW5kID0gYm9keS5zb3VyY2VFbmQ7CisJfQogCXB1c2hP
bkV4cHJlc3Npb25TdGFjayhsZXhwKTsKIAlpZiAoIXRoaXMucGFyc2luZ0phdmE4UGx1cykgewog
CQlwcm9ibGVtUmVwb3J0ZXIoKS5sYW1iZGFFeHByZXNzaW9uc05vdEJlbG93MTgobGV4cCk7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUv
ZG9tL0FTVENvbnZlcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQppbmRleCBiZTQ2NjVjLi5mNjRiMjc2
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKQEAgLTE3MjAsNiArMTcy
MCw5IEBACiAJCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2Ygb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlKSB7CiAJCQlyZXR1cm4gY29udmVydCgob3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlKSBleHByZXNz
aW9uKTsKIAkJfQorCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbikgeworCQkJcmV0dXJuIGNvbnZl
cnQoKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lv
bikgZXhwcmVzc2lvbik7CisJCX0KIAkJcmV0dXJuIG51bGw7CiAJfQogCkBAIC0yMTM3LDYgKzIx
NDAsNDUgQEAKIAkJcmV0dXJuIGV4cHI7CiAJfQogCisJcHVibGljIEV4cHJlc3Npb24gY29udmVy
dChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24g
bGFtYmRhKSB7CisJCS8vIHdpbGwgcmV0dXJuIGEgTGFtYmRhRXhwcmVzc2lvbgorCQlFeHByZXNz
aW9uIGV4cHI7CisJCWludCBzb3VyY2VTdGFydCA9IGxhbWJkYS5zb3VyY2VTdGFydDsKKworCQkv
LyByZXR1cm5zIGEgTWV0aG9kSW52b2NhdGlvbgorCQlmaW5hbCBMYW1iZGFFeHByZXNzaW9uCWxh
bWJkYUV4cHJlc3Npb24gPSBuZXcgTGFtYmRhRXhwcmVzc2lvbih0aGlzLmFzdCk7CisJCWlmICh0
aGlzLnJlc29sdmVCaW5kaW5ncykgeworCQkJcmVjb3JkTm9kZXMobGFtYmRhRXhwcmVzc2lvbiwg
bGFtYmRhKTsKKwkJfQorCQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFy
Z3VtZW50W10gYXJndW1lbnRzID0gbGFtYmRhLmFyZ3VtZW50czsKKwkJaWYgKGFyZ3VtZW50cyAh
PSBudWxsKSB7CisJCQlpbnQgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKKwkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRzTGVuZ3RoOyBpKyspIHsKKwkJCQlvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50IGFyZ3VtZW50ID0gYXJndW1l
bnRzW2ldOworCQkJCWlmIChhcmd1bWVudC50eXBlID09IG51bGwpIHsKKwkJCQkJLy8gY3JlYXRl
IGEgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gT2JqZWN0LgorCQkJCQlUeXBlRWxpZGVk
VmFyaWFibGVEZWNsYXJhdGlvbiB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiA9IG5ldyBU
eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbih0aGlzLmFzdCk7CisJCQkJCVNpbXBsZU5hbWUg
c2ltcGxlTmFtZSA9IG5ldyBTaW1wbGVOYW1lKHRoaXMuYXN0KTsKKwkJCQkJU3RyaW5nIHMgPSBu
ZXcgU3RyaW5nKGFyZ3VtZW50c1tpXS5uYW1lKTsKKwkJCQkJc2ltcGxlTmFtZS5zZXRJZGVudGlm
aWVyKHMpOworCQkJCQlpZiAodGhpcy5yZXNvbHZlQmluZGluZ3MpIHsKKwkJCQkJCXJlY29yZE5v
ZGVzKHNpbXBsZU5hbWUsIGFyZ3VtZW50KTsKKwkJCQkJCXJlY29yZE5vZGVzKHR5cGVFbGlkZWRW
YXJpYWJsZURlY2xhcmF0aW9uLCBhcmd1bWVudCk7CisJCQkJCX0KKwkJCQkJdHlwZUVsaWRlZFZh
cmlhYmxlRGVjbGFyYXRpb24uc2V0TmFtZShzaW1wbGVOYW1lKTsKKwkJCQkJbGFtYmRhRXhwcmVz
c2lvbi5hcmd1bWVudHMoKS5hZGQodHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pOwkJCQkJ
CisJCQkJfSBlbHNlIHsKKwkJCQkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJp
YWJsZURlY2xhcmF0aW9uID0gY29udmVydChhcmd1bWVudCk7CisJCQkJCWxhbWJkYUV4cHJlc3Np
b24uYXJndW1lbnRzKCkuYWRkKHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24pOwkJCQkJCisJCQkJ
fQorCQkJfQorCQl9CisJCWxhbWJkYUV4cHJlc3Npb24uc2V0Qm9keShjb252ZXJ0KGxhbWJkYS5i
b2R5KSk7CisJCWV4cHIgPSBsYW1iZGFFeHByZXNzaW9uOworCQlleHByLnNldFNvdXJjZVJhbmdl
KHNvdXJjZVN0YXJ0LCBsYW1iZGEuc291cmNlRW5kIC0gc291cmNlU3RhcnQgKyAxKTsKKwkJcmV0
dXJuIGV4cHI7CisJfQorCiAJcHVibGljIE1hcmtlckFubm90YXRpb24gY29udmVydChvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1hcmtlckFubm90YXRpb24gYW5ub3RhdGlv
bikgewogCQlmaW5hbCBNYXJrZXJBbm5vdGF0aW9uIG1hcmtlckFubm90YXRpb24gPSBuZXcgTWFy
a2VyQW5ub3RhdGlvbih0aGlzLmFzdCk7CiAJCXNldFR5cGVOYW1lRm9yQW5ub3RhdGlvbihhbm5v
dGF0aW9uLCBtYXJrZXJBbm5vdGF0aW9uKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTWF0Y2hlci5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmph
dmEKaW5kZXggYzZmY2I0NC4uM2JmNjMzZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVy
LmphdmEKQEAgLTE5MjEsNiArMTkyMSw1MiBAQAogCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywgb3IKIAkgKiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBp
ZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUgb3RoZXIgb2JqZWN0IGhhcyBhCiAJICogICBkaWZm
ZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxjb2RlPm51bGw8L2NvZGU+CisJICogQHNpbmNlIDMuOQor
CSAqLworCXB1YmxpYyBib29sZWFuIG1hdGNoKFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9u
IG5vZGUsIE9iamVjdCBvdGhlcikgeworCQlpZiAoIShvdGhlciBpbnN0YW5jZW9mIFR5cGVFbGlk
ZWRWYXJpYWJsZURlY2xhcmF0aW9uKSkgeworCQkJcmV0dXJuIGZhbHNlOworCQl9CisJCVR5cGVF
bGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG8gPSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRp
b24pIG90aGVyOworCQlyZXR1cm4gc2FmZVN1YnRyZWVNYXRjaChub2RlLmdldE5hbWUoKSwgby5n
ZXROYW1lKCkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gbm9k
ZSBhbmQgdGhlIG90aGVyIG9iamVjdCBtYXRjaC4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBp
bXBsZW1lbnRhdGlvbiBwcm92aWRlZCBieSB0aGlzIGNsYXNzIHRlc3RzIHdoZXRoZXIgdGhlCisJ
ICogb3RoZXIgb2JqZWN0IGlzIGEgbm9kZSBvZiB0aGUgc2FtZSB0eXBlIHdpdGggc3RydWN0dXJh
bGx5IGlzb21vcnBoaWMKKwkgKiBjaGlsZCBzdWJ0cmVlcy4gU3ViY2xhc3NlcyBtYXkgb3ZlcnJp
ZGUgdGhpcyBtZXRob2QgYXMgbmVlZGVkLgorCSAqIDwvcD4KKwkgKiBAcGFyYW0gbm9kZSB0aGUg
bm9kZQorCSAqIEBwYXJhbSBvdGhlciB0aGUgb3RoZXIgb2JqZWN0LCBvciA8Y29kZT5udWxsPC9j
b2RlPgorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hl
cywgb3IKKwkgKiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0
aGUgb3RoZXIgb2JqZWN0IGhhcyBhCisJICogICBkaWZmZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxj
b2RlPm51bGw8L2NvZGU+CisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIG1h
dGNoKExhbWJkYUV4cHJlc3Npb24gbm9kZSwgT2JqZWN0IG90aGVyKSB7CisJCWlmICghKG90aGVy
IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikpIHsKKwkJCXJldHVybiBmYWxzZTsKKwkJfQor
CQlMYW1iZGFFeHByZXNzaW9uIG8gPSAoTGFtYmRhRXhwcmVzc2lvbikgb3RoZXI7CisJCXJldHVy
bglzYWZlU3VidHJlZUxpc3RNYXRjaChub2RlLmFyZ3VtZW50cygpLCBvLmFyZ3VtZW50cygpKQor
CQkJCSYmIHNhZmVTdWJ0cmVlTWF0Y2gobm9kZS5nZXRCb2R5KCksIG8uZ2V0Qm9keSgpKTsKKwl9
CisKKwkvKioKKwkgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgYW5kIHRoZSBvdGhl
ciBvYmplY3QgbWF0Y2guCisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24g
cHJvdmlkZWQgYnkgdGhpcyBjbGFzcyB0ZXN0cyB3aGV0aGVyIHRoZQorCSAqIG90aGVyIG9iamVj
dCBpcyBhIG5vZGUgb2YgdGhlIHNhbWUgdHlwZSB3aXRoIHN0cnVjdHVyYWxseSBpc29tb3JwaGlj
CisJICogY2hpbGQgc3VidHJlZXMuIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9k
IGFzIG5lZWRlZC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZQorCSAq
IEBwYXJhbSBvdGhlciB0aGUgb3RoZXIgb2JqZWN0LCBvciA8Y29kZT5udWxsPC9jb2RlPgorCSAq
IEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywgb3IKKwkg
KiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUgb3RoZXIg
b2JqZWN0IGhhcyBhCisJICogICBkaWZmZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxjb2RlPm51bGw8
L2NvZGU+CiAJICovCiAJcHVibGljIGJvb2xlYW4gbWF0Y2goU3RyaW5nTGl0ZXJhbCBub2RlLCBP
YmplY3Qgb3RoZXIpIHsKIAkJaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBTdHJpbmdMaXRlcmFsKSkg
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQppbmRleCBmNzllNmVkLi45OWQwODY1IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0FTVE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQpAQCAtNzgyLDYgKzc4MiwyMiBAQAogCXB1YmxpYyBz
dGF0aWMgZmluYWwgaW50IEVYVFJBX0RJTUVOU0lPTiA9IDg1OwogCiAJLyoqCisJICogTm9kZSB0
eXBlIGNvbnN0YW50IGluZGljYXRpbmcgYSBub2RlIG9mIHR5cGUKKwkgKiA8Y29kZT5UeXBlRWxp
ZGVkVmFyaWFibGVEZWNsYXJhdGlvbjwvY29kZT4uCisJICogQHNlZSBUeXBlRWxpZGVkVmFyaWFi
bGVEZWNsYXJhdGlvbgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFs
IGludCBUWVBFX0VMSURFRF9WQVJJQUJMRV9ERUNMQVJBVElPTiA9IDg2OworCisJLyoqCisJICog
Tm9kZSB0eXBlIGNvbnN0YW50IGluZGljYXRpbmcgYSBub2RlIG9mIHR5cGUKKwkgKiA8Y29kZT5M
YW1iZGFFeHByZXNzaW9uPC9jb2RlPi4KKwkgKiBAc2VlIExhbWJkYUV4cHJlc3Npb24KKwkgKiBA
c2luY2UgMy45CisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTEFNQkRBX0VYUFJFU1NJ
T04gPSA4NzsKKworCS8qKgogCSAqIFJldHVybnMgdGhlIG5vZGUgY2xhc3MgZm9yIHRoZSBjb3Jy
ZXNwb25kaW5nIG5vZGUgdHlwZS4KIAkgKgogCSAqIEBwYXJhbSBub2RlVHlwZSBBU1Qgbm9kZSB0
eXBlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0
L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5qYXZhCmluZGV4IDI2MmQ1ODQuLjBiZTRm
OWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vQVNUVmlzaXRvci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5qYXZhCkBAIC0xMjUyLDggKzEyNTIs
NDIgQEAKIAkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0
aGlzIG5vZGUgc2hvdWxkIGJlCiAJICogdmlzaXRlZCwgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBp
ZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZAogCSAqIGJlIHNraXBwZWQKKwkgKiBA
c2luY2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZUVsaWRlZFZhcmlhYmxl
RGVjbGFyYXRpb24gbm9kZSkgeworCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwkvKioKKwkgKiBWaXNp
dHMgdGhlIGdpdmVuIHR5cGUtc3BlY2lmaWMgQVNUIG5vZGUuCisJICogPHA+CisJICogVGhlIGRl
ZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nIGFuZCByZXR1cm4gdHJ1ZS4KKwkgKiBT
dWJjbGFzc2VzIG1heSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9k
ZSB0aGUgbm9kZSB0byB2aXNpdAorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhl
IGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUKKwkgKiB2aXNpdGVkLCBhbmQgPGNvZGU+
ZmFsc2U8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkCisJICogYmUg
c2tpcHBlZAogCSAqLwogCXB1YmxpYyBib29sZWFuIHZpc2l0KFN0cmluZ0xpdGVyYWwgbm9kZSkg
eworCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwkvKioKKwkgKiBWaXNpdHMgdGhlIGdpdmVuIHR5cGUt
c3BlY2lmaWMgQVNUIG5vZGUuCisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRp
b24gZG9lcyBub3RoaW5nIGFuZCByZXR1cm4gdHJ1ZS4KKwkgKiBTdWJjbGFzc2VzIG1heSByZWlt
cGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZSB0byB2aXNp
dAorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMg
bm9kZSBzaG91bGQgYmUKKwkgKiB2aXNpdGVkLCBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIHRo
ZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkCisJICogYmUgc2tpcHBlZAorCSAqIEBzaW5j
ZSAzLjkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChMYW1iZGFFeHByZXNzaW9uIG5vZGUp
IHsKIAkJcmV0dXJuIHRydWU7CiAJfQogCkBAIC0yMzkxLDYgKzI0MjUsMzIgQEAKIAkgKiA8L3A+
CiAJICoKIAkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZSB0byB2aXNpdAorCSAqIEBzaW5jZSAzLjkK
KwkgKi8KKwlwdWJsaWMgdm9pZCBlbmRWaXNpdChUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlv
biBub2RlKSB7CisJCS8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb246IGRvIG5vdGhpbmcKKwl9CisK
KwkvKioKKwkgKiBFbmQgb2YgdmlzaXQgdGhlIGdpdmVuIHR5cGUtc3BlY2lmaWMgQVNUIG5vZGUu
CisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nLiBT
dWJjbGFzc2VzIG1heSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9k
ZSB0aGUgbm9kZSB0byB2aXNpdAorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgdm9pZCBl
bmRWaXNpdChMYW1iZGFFeHByZXNzaW9uIG5vZGUpIHsKKwkJLy8gZGVmYXVsdCBpbXBsZW1lbnRh
dGlvbjogZG8gbm90aGluZworCX0KKworCS8qKgorCSAqIEVuZCBvZiB2aXNpdCB0aGUgZ2l2ZW4g
dHlwZS1zcGVjaWZpYyBBU1Qgbm9kZS4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1l
bnRhdGlvbiBkb2VzIG5vdGhpbmcuIFN1YmNsYXNzZXMgbWF5IHJlaW1wbGVtZW50LgorCSAqIDwv
cD4KKwkgKgorCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CiAJICovCiAJcHVibGlj
IHZvaWQgZW5kVmlzaXQoU3RyaW5nTGl0ZXJhbCBub2RlKSB7CiAJCS8vIGRlZmF1bHQgaW1wbGVt
ZW50YXRpb246IGRvIG5vdGhpbmcKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Rv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0JpbmRpbmdSZXNvbHZl
ci5qYXZhCmluZGV4IGQyMmNiNmIuLjE4NTc1MTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9C
aW5kaW5nUmVzb2x2ZXIuamF2YQpAQCAtNTc3LDYgKzU3NywyNyBAQAogCX0KIAogCS8qKgorCSAq
IFJlc29sdmVzIHRoZSBnaXZlbiBMYW1iZGEgRXhwcmVzc2lvbiBhbmQgcmV0dXJucyB0aGUgYmlu
ZGluZyBmb3IgaXQuCisJICogPHA+CisJICogVGhlIGltcGxlbWVudGF0aW9uIG9mIDxjb2RlPkxh
bWJkYUV4cHJlc3Npb24ucmVzb2x2ZUJpbmRpbmc8L2NvZGU+CisJICogZm9yd2FyZHMgdG8gdGhp
cyBtZXRob2QuIEhvdyB0aGUgbWV0aG9kIHJlc29sdmVzIGlzIG9mdGVuIGEgZnVuY3Rpb24gb2YK
KwkgKiB0aGUgY29udGV4dCBpbiB3aGljaCB0aGUgbWV0aG9kIGRlY2xhcmF0aW9uIG5vZGUgaXMg
ZW1iZWRkZWQgYXMgd2VsbCBhcworCSAqIHRoZSBtZXRob2QgZGVjbGFyYXRpb24gc3VidHJlZSBp
dHNlbGYuCisJICogPC9wPgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9u
IG9mIHRoaXMgbWV0aG9kIHJldHVybnMgPGNvZGU+bnVsbDwvY29kZT4uCisJICogU3ViY2xhc3Nl
cyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFtIGxhbWJkYSBMYW1i
ZGFFeHJlc3Npb24gb2YgaW50ZXJlc3QKKwkgKiBAcmV0dXJuIHRoZSBiaW5kaW5nIGZvciB0aGUg
Z2l2ZW4gbGFtYmRhIGV4cHJlc3Npb24KKwkgKiAgICA8Y29kZT5udWxsPC9jb2RlPiBpZiBubyBi
aW5kaW5nIGlzIGF2YWlsYWJsZQorCSAqLworCUlNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2Qo
TGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCisJLyoqCiAJ
ICogUmVzb2x2ZXMgdGhlIGdpdmVuIG1ldGhvZCBpbnZvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBi
aW5kaW5nIGZvciBpdC4KIAkgKiA8cD4KIAkgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgPGNvZGU+
TWV0aG9kSW52b2NhdGlvbi5yZXNvbHZlTWV0aG9kQmluZGluZzwvY29kZT4KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRGVmYXVs
dEJpbmRpbmdSZXNvbHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKaW5kZXggMDU1Y2Q4
NS4uNjdlOTg2MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGlu
Z1Jlc29sdmVyLmphdmEKQEAgLTg5MSw5ICs4OTEsMzAgQEAKIAkJfQogCQlyZXR1cm4gbnVsbDsK
IAl9CisKIAkvKgogCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBCaW5kaW5nUmVzb2x2ZXIuCiAJICov
CisJc3luY2hyb25pemVkIElNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2QoTGFtYmRhRXhwcmVz
c2lvbiBsYW1iZGEpIHsKKwkJT2JqZWN0IG9sZE5vZGUgPSB0aGlzLm5ld0FzdFRvT2xkQXN0Lmdl
dChsYW1iZGEpOworCQlpZiAob2xkTm9kZSBpbnN0YW5jZW9mIEFic3RyYWN0TWV0aG9kRGVjbGFy
YXRpb24pIHsKKwkJCUFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kRGVjbGFyYXRpb24g
PSAoQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbikgb2xkTm9kZTsKKwkJCUlNZXRob2RCaW5kaW5n
IG1ldGhvZEJpbmRpbmcgPSBnZXRNZXRob2RCaW5kaW5nKG1ldGhvZERlY2xhcmF0aW9uLmJpbmRp
bmcpOworCQkJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkgeworCQkJCXJldHVybiBudWxsOwor
CQkJfQorCQkJdGhpcy5iaW5kaW5nc1RvQXN0Tm9kZXMucHV0KG1ldGhvZEJpbmRpbmcsIGxhbWJk
YSk7CisJCQlTdHJpbmcga2V5ID0gbWV0aG9kQmluZGluZy5nZXRLZXkoKTsKKwkJCWlmIChrZXkg
IT0gbnVsbCkgeworCQkJCXRoaXMuYmluZGluZ1RhYmxlcy5iaW5kaW5nS2V5c1RvQmluZGluZ3Mu
cHV0KGtleSwgbWV0aG9kQmluZGluZyk7CisJCQl9CisJCQlyZXR1cm4gbWV0aG9kQmluZGluZzsK
KwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisvKgorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBCaW5k
aW5nUmVzb2x2ZXIuCisJICovCiAJc3luY2hyb25pemVkIElNZXRob2RCaW5kaW5nIHJlc29sdmVN
ZXRob2QoTWV0aG9kSW52b2NhdGlvbiBtZXRob2QpIHsKIAkJT2JqZWN0IG9sZE5vZGUgPSB0aGlz
Lm5ld0FzdFRvT2xkQXN0LmdldChtZXRob2QpOwogCQlpZiAob2xkTm9kZSBpbnN0YW5jZW9mIE1l
c3NhZ2VTZW5kKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5qYXZh
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjI1MDFlOTQKLS0tIC9kZXYvbnVs
bAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMCwwICsxLDI1NiBAQAorcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb207CisKK2ltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OworLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBh
bmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2gg
YWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0
dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMg
YW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9w
ZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRl
IGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4g
VGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUg
SkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5p
dGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK2lt
cG9ydCBqYXZhLnV0aWwuTGlzdDsKKworLyoqCisgKiBMYW1iZGEgZXhwcmVzc2lvbiBBU1Qgbm9k
ZSB0eXBlLgorICogPHA+CisgKiBUaGlzIG5vZGUgcmVwcmVzZW50cyBsYW1iZGEgZXhwcmVzc2lv
bnMgCisgKiBUT0RPIDogQWRkIHByb3BlciBqYXZhZG9jIGRlc2NyaXB0aW9uLgorICogPC9wPgor
ICogCisgKiBAc2luY2UgMy45CisgKiAKKyAqIEBub2luc3RhbnRpYXRlIFRoaXMgY2xhc3MgaXMg
bm90IGludGVuZGVkIHRvIGJlIGluc3RhbnRpYXRlZCBieSBjbGllbnRzLiAKKyAqLworCitwdWJs
aWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24geworCisJLyoqCisJ
ICogVGhlICJWYXJpYWJsZSIgc3RydWN0dXJhbCBwcm9wZXJ0eSBvZiB0aGlzIG5vZGUgdHlwZSAo
Y2hpbGQgdHlwZToge0BsaW5rIFZhcmlhYmxlRGVjbGFyYXRpb259KS4KKwkgKi8KKwlwdWJsaWMg
c3RhdGljIGZpbmFsIENoaWxkTGlzdFByb3BlcnR5RGVzY3JpcHRvciBBUkdVTUVOVFNfUFJPUEVS
VFkgPQorCQluZXcgQ2hpbGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yKExhbWJkYUV4cHJlc3Npb24u
Y2xhc3MsICJhcmd1bWVudHMiLCBWYXJpYWJsZURlY2xhcmF0aW9uLmNsYXNzLCBOT19DWUNMRV9S
SVNLKTsgLy8kTk9OLU5MUy0xJAorCQorCS8qKgorCSAqIFRoZSAiYm9keSIgc3RydWN0dXJhbCBw
cm9wZXJ0eSBvZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQgdHlwZToge0BsaW5rIFN0YXRlbWVudH0p
LgorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgQk9E
WV9QUk9QRVJUWSA9CisJCW5ldyBDaGlsZFByb3BlcnR5RGVzY3JpcHRvcihMYW1iZGFFeHByZXNz
aW9uLmNsYXNzLCAiYm9keSIsIFN0YXRlbWVudC5jbGFzcywgTUFOREFUT1JZLCBOT19DWUNMRV9S
SVNLKTsgLy8kTk9OLU5MUy0xJAorCisJLyoqCisJICogQSBsaXN0IG9mIHByb3BlcnR5IGRlc2Ny
aXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2Ny
aXB0b3J9KSwKKwkgKiBvciBudWxsIGlmIHVuaW5pdGlhbGl6ZWQuCisJICogQHNpbmNlIDMuOQor
CSAqLworCXByaXZhdGUgc3RhdGljIGZpbmFsIExpc3QgUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8w
OworCQorCXN0YXRpYyB7CisJCUxpc3QgcHJvcGVydHlMaXN0ID0gbmV3IEFycmF5TGlzdCgzKTsK
KwkJY3JlYXRlUHJvcGVydHlMaXN0KExhbWJkYUV4cHJlc3Npb24uY2xhc3MsIHByb3BlcnR5TGlz
dCk7CisJCWFkZFByb3BlcnR5KEFSR1VNRU5UU19QUk9QRVJUWSwgcHJvcGVydHlMaXN0KTsKKwkJ
YWRkUHJvcGVydHkoQk9EWV9QUk9QRVJUWSwgcHJvcGVydHlMaXN0KTsKKwkJUFJPUEVSVFlfREVT
Q1JJUFRPUlNfOF8wID0gcmVhcFByb3BlcnR5TGlzdChwcm9wZXJ0eUxpc3QpOworCX0KKwkKKwkv
KioKKwkgKiBSZXR1cm5zIGEgbGlzdCBvZiBzdHJ1Y3R1cmFsIHByb3BlcnR5IGRlc2NyaXB0b3Jz
IGZvciB0aGlzIG5vZGUgdHlwZS4KKwkgKiBDbGllbnRzIG11c3Qgbm90IG1vZGlmeSB0aGUgcmVz
dWx0LgorCSAqCisJICogQHBhcmFtIGFwaUxldmVsIHRoZSBBUEkgbGV2ZWw7IG9uZSBvZiB0aGUg
QVNULkpMUyogY29uc3RhbnRzCisJICogQHJldHVybiBhIGxpc3Qgb2YgcHJvcGVydHkgZGVzY3Jp
cHRvcnMgKGVsZW1lbnQgdHlwZToKKwkgKiB7QGxpbmsgU3RydWN0dXJhbFByb3BlcnR5RGVzY3Jp
cHRvcn0pCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBzdGF0aWMgTGlzdCBwcm9wZXJ0
eURlc2NyaXB0b3JzKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gUFJPUEVSVFlfREVTQ1JJUFRP
UlNfOF8wOworCX0KKworCS8qKgorCSAqIFRoZSBwYXJhbWV0ZXIgZGVjbGFyYXRpb25zCisJICog
KGVsZW1lbnQgdHlwZToge0BsaW5rIFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb259KS4KKwkgKiBE
ZWZhdWx0cyB0byBhbiBlbXB0eSBsaXN0LgorCSAqLworCXByaXZhdGUgQVNUTm9kZS5Ob2RlTGlz
dCBhcmd1bWVudHMgPQorCQluZXcgQVNUTm9kZS5Ob2RlTGlzdChBUkdVTUVOVFNfUFJPUEVSVFkp
OworCisJLyoqCisJICogVGhlIG1ldGhvZCBib2R5LCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiBu
b25lLgorCSAqIERlZmF1bHRzIHRvIG5vbmUuCisJICovCisJcHJpdmF0ZSBTdGF0ZW1lbnQgYm9k
eSA9IG51bGw7CisKKwkvKioKKwkgKiBDcmVhdGVzIGEgbmV3IEFTVCBub2RlIGZvciBhIExhbWJk
YUV4cHJlc3Npb24gZGVjbGFyYXRpb24gb3duZWQKKwkgKiBieSB0aGUgZ2l2ZW4gQVNULgorCSAq
IDxwPgorCSAqIE4uQi4gVGhpcyBjb25zdHJ1Y3RvciBpcyBwYWNrYWdlLXByaXZhdGU7IGFsbCBz
dWJjbGFzc2VzIG11c3QgYmUKKwkgKiBkZWNsYXJlZCBpbiB0aGUgc2FtZSBwYWNrYWdlOyBjbGll
bnRzIGFyZSB1bmFibGUgdG8gZGVjbGFyZQorCSAqIGFkZGl0aW9uYWwgc3ViY2xhc3Nlcy4KKwkg
KiA8L3A+CisJICoKKwkgKiBAcGFyYW0gYXN0IHRoZSBBU1QgdGhhdCBpcyB0byBvd24gdGhpcyBu
b2RlCisJICovCisJTGFtYmRhRXhwcmVzc2lvbihBU1QgYXN0KSB7CisJCXN1cGVyKGFzdCk7CisJ
CXRoaXMuYXJndW1lbnRzID0gbmV3IEFTVE5vZGUuTm9kZUxpc3QoQVJHVU1FTlRTX1BST1BFUlRZ
KTsKKwl9CisKKwlMaXN0IGludGVybmFsU3RydWN0dXJhbFByb3BlcnRpZXNGb3JUeXBlKGludCBh
cGlMZXZlbCkgeworCQlyZXR1cm4gcHJvcGVydHlEZXNjcmlwdG9ycyhhcGlMZXZlbCk7CisJfQor
CisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVk
IG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgQVNUTm9kZSBpbnRlcm5hbEdldFNldENoaWxkUHJv
cGVydHkoQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgcHJvcGVydHksIGJvb2xlYW4gZ2V0LCBBU1RO
b2RlIGNoaWxkKSB7CisJCWlmIChwcm9wZXJ0eSA9PSBCT0RZX1BST1BFUlRZKSB7CisJCQlpZiAo
Z2V0KSB7CisJCQkJcmV0dXJuIGdldEJvZHkoKTsKKwkJCX0gZWxzZSB7CisJCQkJc2V0Qm9keSgo
U3RhdGVtZW50KSBjaGlsZCk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJLy8gYWxs
b3cgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBmbGFnIHRoZSBlcnJvcgorCQlyZXR1cm4gc3Vw
ZXIuaW50ZXJuYWxHZXRTZXRDaGlsZFByb3BlcnR5KHByb3BlcnR5LCBnZXQsIGNoaWxkKTsKKwl9
CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFy
ZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBMaXN0IGludGVybmFsR2V0Q2hpbGRMaXN0UHJv
cGVydHkoQ2hpbGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yIHByb3BlcnR5KSB7CisJCWlmIChwcm9w
ZXJ0eSA9PSBBUkdVTUVOVFNfUFJPUEVSVFkpIHsKKwkJCXJldHVybiBhcmd1bWVudHMoKTsKKwkJ
fQorCQkvLyBhbGxvdyBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIGZsYWcgdGhlIGVycm9yCisJ
CXJldHVybiBzdXBlci5pbnRlcm5hbEdldENoaWxkTGlzdFByb3BlcnR5KHByb3BlcnR5KTsKKwl9
CisJCisJaW50IGdldE5vZGVUeXBlMCgpIHsKKwkJcmV0dXJuIE1FVEhPRF9ERUNMQVJBVElPTjsK
Kwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVj
bGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlBU1ROb2RlIGNsb25lMChBU1QgdGFyZ2V0KSB7CisJ
CUxhbWJkYUV4cHJlc3Npb24gcmVzdWx0ID0gbmV3IExhbWJkYUV4cHJlc3Npb24odGFyZ2V0KTsK
KwkJcmVzdWx0LnNldFNvdXJjZVJhbmdlKGdldFN0YXJ0UG9zaXRpb24oKSwgZ2V0TGVuZ3RoKCkp
OworCQlyZXN1bHQuYXJndW1lbnRzKCkuYWRkQWxsKEFTVE5vZGUuY29weVN1YnRyZWVzKHRhcmdl
dCwgYXJndW1lbnRzKCkpKTsKKwkJcmVzdWx0LnNldEJvZHkoKFN0YXRlbWVudCkgQVNUTm9kZS5j
b3B5U3VidHJlZSh0YXJnZXQsIGdldEJvZHkoKSkpOworCQlyZXR1cm4gcmVzdWx0OworCX0KKwor
CS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBv
biBBU1ROb2RlLgorCSAqLworCWZpbmFsIGJvb2xlYW4gc3VidHJlZU1hdGNoMChBU1RNYXRjaGVy
IG1hdGNoZXIsIE9iamVjdCBvdGhlcikgeworCQkvLyBkaXNwYXRjaCB0byBjb3JyZWN0IG92ZXJs
b2FkZWQgbWF0Y2ggbWV0aG9kCisJCXJldHVybiBtYXRjaGVyLm1hdGNoKHRoaXMsIG90aGVyKTsK
Kwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVj
bGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwl2b2lkIGFjY2VwdDAoQVNUVmlzaXRvciB2aXNpdG9y
KSB7CisJCWJvb2xlYW4gdmlzaXRDaGlsZHJlbiA9IHZpc2l0b3IudmlzaXQodGhpcyk7CisJCWlm
ICh2aXNpdENoaWxkcmVuKSB7CisJCQkvLyB2aXNpdCBjaGlsZHJlbiBpbiBub3JtYWwgbGVmdCB0
byByaWdodCByZWFkaW5nIG9yZGVyCisJCQlhY2NlcHRDaGlsZHJlbih2aXNpdG9yLCB0aGlzLmFy
Z3VtZW50cyk7CisJCQlhY2NlcHRDaGlsZCh2aXNpdG9yLCBnZXRCb2R5KCkpOworCQl9CisJCXZp
c2l0b3IuZW5kVmlzaXQodGhpcyk7CisJfQorCisJLyoqCisJICogUmV0dXJucyB0aGUgbGl2ZSBv
cmRlcmVkIGxpc3Qgb2YgbWV0aG9kIHBhcmFtZXRlciBkZWNsYXJhdGlvbnMgZm9yIHRoaXMKKwkg
KiBtZXRob2QgZGVjbGFyYXRpb24uCisJICoKKwkgKiBAcmV0dXJuIHRoZSBsaXZlIGxpc3Qgb2Yg
bWV0aG9kIHBhcmFtZXRlciBkZWNsYXJhdGlvbnMKKwkgKiAgICAoZWxlbWVudCB0eXBlOiB7QGxp
bmsgVmFyaWFibGVEZWNsYXJhdGlvbn0gLQorCSAqICAgICBjYW4gYmUgZWl0aGVyIGEge0BsaW5r
IFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb259IG9yCisJICogICAgICBhIHtAbGluayBUeXBlRWxp
ZGVkVmFyaWFibGVEZWNsYXJhdGlvbn0KKwkgKi8KKwlwdWJsaWMgTGlzdCBhcmd1bWVudHMoKSB7
CisJCXJldHVybiB0aGlzLmFyZ3VtZW50czsKKwl9CisKKwkvKioKKwkgKiBSZXR1cm5zIHRoZSBi
b2R5IG9mIHRoaXMgbWV0aG9kIGRlY2xhcmF0aW9uLCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZgor
CSAqIHRoaXMgbWV0aG9kIGhhcyA8Yj5ubzwvYj4gYm9keS4KKwkgKiA8cD4KKwkgKiA8L3A+CisJ
ICogQGV4Y2VwdGlvbiBOdWxsUG9pbnRlckV4Y2VwdGlvbiBpZjoKKwkgKjx1bD4KKwkgKiA8bGk+
IGJvZHkgaXMgbnVsbC4gPC9saT4KKwkgKjwvdWw+CisJICogQHJldHVybiB0aGUgbWV0aG9kIGJv
ZHksIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmIHRoaXMgbWV0aG9kIGhhcyBubworCSAqICAgIGJv
ZHkKKwkgKi8KKwlwdWJsaWMgU3RhdGVtZW50IGdldEJvZHkoKSB7CisJCXJldHVybiB0aGlzLmJv
ZHk7CisJfQorCisJLyoqCisJICogU2V0cyBvciBjbGVhcnMgdGhlIGJvZHkgb2YgdGhpcyBtZXRo
b2QgZGVjbGFyYXRpb24uCisJICoKKwkgKiBAcGFyYW0gYm9keSB0aGUgYmxvY2sgbm9kZSwgb3Ig
PGNvZGU+bnVsbDwvY29kZT4gaWYKKwkgKiAgICB0aGVyZSBpcyBub25lCisJICogQGV4Y2VwdGlv
biBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWY6CisJICogPHVsPgorCSAqIDxsaT50aGUgbm9k
ZSBiZWxvbmdzIHRvIGEgZGlmZmVyZW50IEFTVDwvbGk+CisJICogPGxpPnRoZSBub2RlIGFscmVh
ZHkgaGFzIGEgcGFyZW50PC9saT4KKwkgKiA8bGk+YSBjeWNsZSBpbiB3b3VsZCBiZSBjcmVhdGVk
PC9saT4KKwkgKiA8bGk+IGJvZHkgaXMgbnVsbCA8L2xpPgorCSAqIDwvdWw+CisJICovCisJcHVi
bGljIHZvaWQgc2V0Qm9keShTdGF0ZW1lbnQgYm9keSkgeworCQlpZiAoYm9keSA9PSBudWxsKSB7
CisJCQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7CisJCX0KKwkJLy8gYSBN
ZXRob2REZWNsYXJhdGlvbiBtYXkgb2NjdXIgaW4gYSBCbG9jayAtIG11c3QgY2hlY2sgY3ljbGVz
CisJCUFTVE5vZGUgb2xkQ2hpbGQgPSB0aGlzLmJvZHk7CisJCXByZVJlcGxhY2VDaGlsZChvbGRD
aGlsZCwgYm9keSwgQk9EWV9QUk9QRVJUWSk7CisJCXRoaXMuYm9keSA9IGJvZHk7CisJCXBvc3RS
ZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIGJvZHksIEJPRFlfUFJPUEVSVFkpOworCX0KKworCS8qKgor
CSAqIFJlc29sdmVzIGFuZCByZXR1cm5zIHRoZSBiaW5kaW5nIGZvciB0aGUgbWV0aG9kIG9yIGNv
bnN0cnVjdG9yIGRlY2xhcmVkCisJICogaW4gdGhpcyBtZXRob2Qgb3IgY29uc3RydWN0b3IgZGVj
bGFyYXRpb24uCisJICogPHA+CisJICogTm90ZSB0aGF0IGJpbmRpbmdzIGFyZSBnZW5lcmFsbHkg
dW5hdmFpbGFibGUgdW5sZXNzIHJlcXVlc3RlZCB3aGVuIHRoZQorCSAqIEFTVCBpcyBiZWluZyBi
dWlsdC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcmV0dXJuIHRoZSBiaW5kaW5nLCBvciA8Y29kZT5u
dWxsPC9jb2RlPiBpZiB0aGUgYmluZGluZyBjYW5ub3QgYmUKKwkgKiAgICByZXNvbHZlZAorCSAq
LworCXB1YmxpYyBJTWV0aG9kQmluZGluZyByZXNvbHZlQmluZGluZygpIHsKKwkJcmV0dXJuIHRo
aXMuYXN0LmdldEJpbmRpbmdSZXNvbHZlcigpLnJlc29sdmVNZXRob2QodGhpcyk7CisJfQorCisJ
LyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9u
IEFTVE5vZGUuCisJICovCisJaW50IG1lbVNpemUoKSB7CisJCXJldHVybiAzICogNDsKKwl9CisK
KwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQg
b24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgdHJlZVNpemUoKSB7CisJCXJldHVybgorCQkJbWVtU2l6
ZSgpCisJCQkrIHRoaXMuYXJndW1lbnRzLmxpc3RTaXplKCkKKwkJCSsgKHRoaXMuYm9keSA9PSBu
dWxsID8gMCA6IGdldEJvZHkoKS50cmVlU2l6ZSgpKTsKKwl9Cit9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVFbGlkZWRW
YXJpYWJsZURlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL1R5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uLmphdmEKbmV3
IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uN2ZlODExOQotLS0gL2Rldi9udWxsCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vVHlw
ZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uamF2YQpAQCAtMCwwICsxLDIwOSBAQAorLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBh
bmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2gg
YWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0
dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBh
biBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3Bl
ZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUg
YXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBU
aGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBK
Q1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb207CisKK2ltcG9ydCBqYXZhLnV0aWwuQXJyYXlM
aXN0OworaW1wb3J0IGphdmEudXRpbC5MaXN0OworCisvKioKKyAqIFR5cGVFbGlkZWRWYXJpYWJs
ZURlY2xhcmF0aW9uIG5vZGUgdHlwZS4gVHlwZUVsaWRlVmFyaWFibGVEZWNsYXJhdGlvbiBub2Rl
cyBhcmUgdXNlZCBpbiB0aGUgCisgKiBkZWNsYXJhdGlvbiBvZiB2YXJpYWJsZXMgaW4gTGFtYmRh
RXhwcmVzc2lvbi4gVHlwZSBpcyBlbGlkZWQgYW5kIGRldGVybWluZWQgZnJvbSB0aGUgZGVjbGFy
YXRpb24KKyAqIG9mIHRoZSBpbnRlcmZhY2UgZnVuY3Rpb24gd2hpY2ggYmluZHMgdGhlIExhbWJk
YUV4cHJlc3Npb24uIEF2YWlsYWJsZSBmcm9tIEpMUzggb253YXJkcy4KKyAqIAorICogVHlwZUVs
aWRlZFZhcmlhYmxlRGVjbGFyYXRpb246CisgKiAgICAgSWRlbnRpZmllciAKKyAqIEBzaW5jZSAz
LjkKKyAqLworcHVibGljIGNsYXNzIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIGV4dGVu
ZHMgVmFyaWFibGVEZWNsYXJhdGlvbiB7CisKKwkvKioKKwkgKiBUaGUgIm5hbWUiIHN0cnVjdHVy
YWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBTaW1wbGVO
YW1lfSkuCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hpbGRQ
cm9wZXJ0eURlc2NyaXB0b3IgTkFNRV9QUk9QRVJUWSA9CisJCQluZXcgQ2hpbGRQcm9wZXJ0eURl
c2NyaXB0b3IoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uY2xhc3MsICJuYW1lIiwgU2lt
cGxlTmFtZS5jbGFzcywgTUFOREFUT1JZLCBOT19DWUNMRV9SSVNLKTsgLy8kTk9OLU5MUy0xJAor
CisJLyoqCisJICogQSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6
CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KSwKKwkgKiBvciBudWxs
IGlmIHVuaW5pdGlhbGl6ZWQuCisJICogQHNpbmNlIDMuOQorCSAqLworCXByaXZhdGUgc3RhdGlj
IGZpbmFsIExpc3QgUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOworCisJc3RhdGljIHsKKwkJTGlz
dCBwcm9wZXJ0eUxpc3QgPSBuZXcgQXJyYXlMaXN0KDIpOworCQljcmVhdGVQcm9wZXJ0eUxpc3Qo
VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uY2xhc3MsIHByb3BlcnR5TGlzdCk7CisJCWFk
ZFByb3BlcnR5KE5BTUVfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCVBST1BFUlRZX0RFU0NS
SVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3QocHJvcGVydHlMaXN0KTsKKwl9CisJCisJLyoq
CisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0dXJhbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBm
b3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50cyBtdXN0IG5vdCBtb2RpZnkgdGhlIHJlc3Vs
dC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0aGUgQVBJIGxldmVsOyBvbmUgb2YgdGhlCisJ
ICogPGNvZGU+QVNULkpMUyo8L2NvZGU+IGNvbnN0YW50cworCSAqIEByZXR1cm4gYSBsaXN0IG9m
IHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVy
YWxQcm9wZXJ0eURlc2NyaXB0b3J9KQorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3Rh
dGljIExpc3QgcHJvcGVydHlEZXNjcmlwdG9ycyhpbnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIFBS
T1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsKKwl9CisKKwkvKioKKwkgKiBUaGUgdmFyaWFibGUgbmFt
ZTsgbGF6aWx5IGluaXRpYWxpemVkOyBkZWZhdWx0cyB0byBhIHVuc3BlY2lmaWVkLAorCSAqIGxl
Z2FsIEphdmEgaWRlbnRpZmllci4KKwkgKi8KKwlwcml2YXRlIFNpbXBsZU5hbWUgdmFyaWFibGVO
YW1lID0gbnVsbDsKKworCVR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKEFTVCBhc3QpIHsK
KwkJc3VwZXIoYXN0KTsKKwl9CisKKwlTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxF
eHRyYURpbWVuc2lvbnNQcm9wZXJ0eSgpIHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRo
b2Qgc3R1YgorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBp
bnRlcm5hbEluaXRpYWxpemVyUHJvcGVydHkoKSB7CisJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQg
bWV0aG9kIHN0dWIKKwkJcmV0dXJuIG51bGw7CisJfQorCisJQ2hpbGRQcm9wZXJ0eURlc2NyaXB0
b3IgaW50ZXJuYWxOYW1lUHJvcGVydHkoKSB7CisJCXJldHVybiBOQU1FX1BST1BFUlRZOworCX0K
KworCXB1YmxpYyBpbnQgZ2V0RXh0cmFEaW1lbnNpb25zKCkgeworCQkvLyBUT0RPIEF1dG8tZ2Vu
ZXJhdGVkIG1ldGhvZCBzdHViCisJCXJldHVybiAwOworCX0KKworCXB1YmxpYyB2b2lkIHNldEV4
dHJhRGltZW5zaW9ucyhpbnQgZGltZW5zaW9ucykgeworCQkvLyBUT0RPIEF1dG8tZ2VuZXJhdGVk
IG1ldGhvZCBzdHViCisKKwl9CisKKwlwdWJsaWMgRXhwcmVzc2lvbiBnZXRJbml0aWFsaXplcigp
IHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gbnVsbDsK
Kwl9CisKKwlwdWJsaWMgdm9pZCBzZXRJbml0aWFsaXplcihFeHByZXNzaW9uIGluaXRpYWxpemVy
KSB7CisJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgbWV0aG9kIHN0dWIKKworCX0KKworCUxpc3Qg
aW50ZXJuYWxTdHJ1Y3R1cmFsUHJvcGVydGllc0ZvclR5cGUoaW50IGFwaUxldmVsKSB7CisJCXJl
dHVybiBwcm9wZXJ0eURlc2NyaXB0b3JzKGFwaUxldmVsKTsKKwl9CisKKwkvKiAob21pdCBqYXZh
ZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkg
Ki8KKwlmaW5hbCBBU1ROb2RlIGludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShDaGlsZFByb3Bl
cnR5RGVzY3JpcHRvciBwcm9wZXJ0eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hpbGQpIHsKKwkJ
aWYgKHByb3BlcnR5ID09IE5BTUVfUFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1
cm4gZ2V0TmFtZSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXROYW1lKChTaW1wbGVOYW1lKSBjaGls
ZCk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJLy8gYWxsb3cgZGVmYXVsdCBpbXBs
ZW1lbnRhdGlvbiB0byBmbGFnIHRoZSBlcnJvcgorCQlyZXR1cm4gc3VwZXIuaW50ZXJuYWxHZXRT
ZXRDaGlsZFByb3BlcnR5KHByb3BlcnR5LCBnZXQsIGNoaWxkKTsKKwl9CisKKwkvKiAob21pdCBq
YXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4K
KwkgKi8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gVFlQRV9FTElERURfVkFSSUFC
TEVfREVDTEFSQVRJT047CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2Qp
CisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJYm9vbGVhbiBzdWJ0cmVl
TWF0Y2gwKEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7CisJCS8vIGRpc3BhdGNo
IHRvIGNvcnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0dXJuIG1hdGNoZXIubWF0
Y2godGhpcywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9k
KQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCUFTVE5vZGUgY2xvbmUw
KEFTVCB0YXJnZXQpIHsKKwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gcmVzdWx0ID0g
bmV3IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKHRhcmdldCk7CisJCXJlc3VsdC5zZXRT
b3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsKKwkJcmVzdWx0LnNl
dE5hbWUoKFNpbXBsZU5hbWUpIGdldE5hbWUoKS5jbG9uZSh0YXJnZXQpKTsKKwkJcmV0dXJuIHJl
c3VsdDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRo
b2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwl2b2lkIGFjY2VwdDAoQVNUVmlzaXRvciB2
aXNpdG9yKSB7CisJCXZpc2l0b3IudmlzaXQodGhpcyk7CisJCXZpc2l0b3IuZW5kVmlzaXQodGhp
cyk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9k
IGRlY2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJcHVibGljIFNpbXBsZU5h
bWUgZ2V0TmFtZSgpIHsKKwkJaWYgKHRoaXMudmFyaWFibGVOYW1lID09IG51bGwpIHsKKwkJCS8v
IGxhenkgaW5pdCBtdXN0IGJlIHRocmVhZC1zYWZlIGZvciByZWFkZXJzCisJCQlzeW5jaHJvbml6
ZWQgKHRoaXMpIHsKKwkJCQlpZiAodGhpcy52YXJpYWJsZU5hbWUgPT0gbnVsbCkgeworCQkJCQlw
cmVMYXp5SW5pdCgpOworCQkJCQl0aGlzLnZhcmlhYmxlTmFtZSA9IG5ldyBTaW1wbGVOYW1lKHRo
aXMuYXN0KTsKKwkJCQkJcG9zdExhenlJbml0KHRoaXMudmFyaWFibGVOYW1lLCBOQU1FX1BST1BF
UlRZKTsKKwkJCQl9CisJCQl9CisJCX0KKwkJcmV0dXJuIHRoaXMudmFyaWFibGVOYW1lOworCX0K
KworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJl
ZCBvbiBWYXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyB2b2lkIHNldE5hbWUoU2lt
cGxlTmFtZSB2YXJpYWJsZU5hbWUpIHsKKwkJaWYgKHZhcmlhYmxlTmFtZSA9PSBudWxsKSB7CisJ
CQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7CisJCX0KKwkJQVNUTm9kZSBv
bGRDaGlsZCA9IHRoaXMudmFyaWFibGVOYW1lOworCQlwcmVSZXBsYWNlQ2hpbGQob2xkQ2hpbGQs
IHZhcmlhYmxlTmFtZSwgTkFNRV9QUk9QRVJUWSk7CisJCXRoaXMudmFyaWFibGVOYW1lID0gdmFy
aWFibGVOYW1lOworCQlwb3N0UmVwbGFjZUNoaWxkKG9sZENoaWxkLCB2YXJpYWJsZU5hbWUsIE5B
TUVfUFJPUEVSVFkpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQor
CSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCWludCBtZW1TaXplKCkgewor
CQlyZXR1cm4gQkFTRV9OT0RFX1NJWkUgKyAxICogNDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9j
IGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8K
KwlpbnQgdHJlZVNpemUoKSB7CisJCXJldHVybgorCQkJbWVtU2l6ZSgpCisJCQkrICh0aGlzLnZh
cmlhYmxlTmFtZSA9PSBudWxsID8gMCA6IGdldE5hbWUoKS50cmVlU2l6ZSgpKTsKKwl9Cit9Clwg
Tm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5l
ci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZhCmluZGV4IGIyNzAxNDIuLmU2OWVhMDQg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxh
dHRlbmVyLmphdmEKQEAgLTE3LDEwMiArMTcsNyBAQAogaW1wb3J0IGphdmEudXRpbC5JdGVyYXRv
cjsKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5BU1Q7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVE5vZGU7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVFZpc2l0b3I7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkFic3RyYWN0VHlwZURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5Bbm5vdGF0YWJsZVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFu
bm90YXRpb25UeXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkFubm90YXRpb25UeXBlTWVtYmVyRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkFub255bW91c0NsYXNzRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkFycmF5QWNjZXNzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5BcnJheUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BcnJheUlu
aXRpYWxpemVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BcnJheVR5cGU7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFzc2VydFN0YXRlbWVudDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXNzaWdubWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uQmxvY2s7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkJsb2Nr
Q29tbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQm9keURlY2xhcmF0aW9u
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Cb29sZWFuTGl0ZXJhbDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQnJlYWtTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLkNhc3RFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5DYXRjaENsYXVzZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
Q2hhcmFjdGVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2xhc3NJ
bnN0YW5jZUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Db21waWxh
dGlvblVuaXQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNvbmRpdGlvbmFsRXhw
cmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ29uc3RydWN0b3JJbnZv
Y2F0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Db250aW51ZVN0YXRlbWVu
dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXh0cmFEaW1lbnNpb247Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlVuaW9uVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uRG9TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLkVtcHR5U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Fbmhh
bmNlZEZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW51bUNv
bnN0YW50RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkVudW1E
ZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXhwcmVzc2lvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXhwcmVzc2lvblN0YXRlbWVudDsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRmllbGRBY2Nlc3M7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLkZpZWxkRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uSWZTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkltcG9ydERl
Y2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JbmZpeEV4cHJlc3Np
b247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkluaXRpYWxpemVyOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JbnN0YW5jZW9mRXhwcmVzc2lvbjsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSmF2YWRvYzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uTGFiZWxlZFN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uTGluZUNvbW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1hcmtlckFu
bm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1lbWJlclJlZjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWVtYmVyVmFsdWVQYWlyOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2REZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uTWV0aG9kSW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uTWV0aG9kUmVmOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5N
ZXRob2RSZWZQYXJhbWV0ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1vZGlm
aWVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OYW1lOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5Ob3JtYWxBbm5vdGF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5OdWxsTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uTnVtYmVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUGFja2Fn
ZURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QYXJhbWV0ZXJp
emVkVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUGFyZW50aGVzaXplZEV4
cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlBvc3RmaXhFeHByZXNz
aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmVmaXhFeHByZXNzaW9uOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmltaXRpdmVUeXBlOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5RdWFsaWZpZWROYW1lOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5RdWFsaWZpZWRUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5SZXR1cm5TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNp
bXBsZU5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbXBsZVR5cGU7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZU1lbWJlckFubm90YXRpb247Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb247
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN0YXRlbWVudDsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uU3RyaW5nTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uU3VwZXJDb25zdHJ1Y3Rvckludm9jYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLlN1cGVyRmllbGRBY2Nlc3M7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLlN1cGVyTWV0aG9kSW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uU3dpdGNoQ2FzZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3dp
dGNoU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TeW5jaHJvbml6
ZWRTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRhZ0VsZW1lbnQ7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRleHRFbGVtZW50OwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UaGlzRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uVGhyb3dTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLlRyeVN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlw
ZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZURlY2xhcmF0aW9uOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRpb25TdGF0ZW1lbnQ7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVMaXRlcmFsOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlUGFyYW1ldGVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50OwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uU3RhdGVtZW50OwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5XaGlsZVN0YXRlbWVudDsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uV2lsZGNhcmRUeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS4qOwogCiAvKioKICAqIEludGVybmFsIEFTVCB2aXNpdG9yIGZvciBzZXJpYWxp
emluZyBhbiBBU1QgaW4gYSBxdWljayBhbmQgZGlydHkgZmFzaGlvbi4KQEAgLTE5MDUsNCArMTgx
MCwyOSBAQAogCQkJfQogCQl9CiAJfQorCisJLyoKKwkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQo
TGFtYmRhRXhwcmVzc2lvbikKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChMYW1iZGFFeHBy
ZXNzaW9uIG5vZGUpIHsKKwkJdGhpcy5idWZmZXIuYXBwZW5kKCIoIik7Ly8kTk9OLU5MUy0xJAor
CQlmb3IgKEl0ZXJhdG9yIGl0ID0gbm9kZS5hcmd1bWVudHMoKS5pdGVyYXRvcigpOyBpdC5oYXNO
ZXh0KCk7ICkgeworCQkJVmFyaWFibGVEZWNsYXJhdGlvbiAgdmFyaWFibGVEZWNsYXJhdGlvbiA9
IChWYXJpYWJsZURlY2xhcmF0aW9uKSBpdC5uZXh0KCk7CisJCQl2YXJpYWJsZURlY2xhcmF0aW9u
LmFjY2VwdCh0aGlzKTsKKwkJCWlmIChpdC5oYXNOZXh0KCkpIHsKKwkJCQl0aGlzLmJ1ZmZlci5h
cHBlbmQoIiwiKTsvLyROT04tTkxTLTEkCisJCQl9CisJCX0KKwkJdGhpcy5idWZmZXIuYXBwZW5k
KCIpIik7Ly8kTk9OLU5MUy0xJAkJCQorCQl0aGlzLmJ1ZmZlci5hcHBlbmQoIiAtPiAiKTsgLy8k
Tk9OLU5MUy0xJAorCQlub2RlLmdldEJvZHkoKS5hY2NlcHQodGhpcyk7CisJCXJldHVybiBmYWxz
ZTsKKwl9CisJLyoKKwkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQoVHlwZUVsaWRlZFZhcmlhYmxl
RGVjbGFyYXRpb24pCisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZUVsaWRlZFZhcmlh
YmxlRGVjbGFyYXRpb24gbm9kZSkgeworCQlub2RlLmdldE5hbWUoKS5hY2NlcHQodGhpcyk7CisJ
CXJldHVybiBmYWxzZTsKKwl9CiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226802</attachid>
            <date>2013-02-08 21:19:00 -0500</date>
            <delta_ts>2013-02-12 18:51:15 -0500</delta_ts>
            <desc>Patch - WIP</desc>
            <filename>Bug-399793---18dom-ast-Add-a-new-node-type-for-compi.patch</filename>
            <type>text/plain</type>
            <size>45706</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDZlOTEzMzYuLjRkZWZmYWMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE2MSBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QwMTE1KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkg
PSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0MDExNS9YLmphdmEiLAorCQkJ
CXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDAx
MTU7IgorCQkJCSsgImludGVyZmFjZSBJIHtcbiIKKwkJCQkrICIJaW50IGZvbyhpbnQgeCk7XG4i
CisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9
ICB2bGFtYmRhIC0+IHtyZXR1cm4gMjAwO307XG4iCisJCQkJKyJ9XG4iOworCQlDb21waWxhdGlv
blVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywgdGhpcy53b3Jr
aW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xh
cmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAxKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xh
cmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRp
b25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAo
VmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJhZ21lbnRzKCku
Z2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXpl
cigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9u
KTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJkYUV4cHJlc3Np
b24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIC0+IHtcbiAgcmV0dXJuIDIw
MDtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFt
YmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5zaXplKCkgPT0gMSk7CisJCVZhcmlhYmxlRGVjbGFy
YXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBsYW1iZGFF
eHByZXNzaW9uLmFyZ3VtZW50cygpLmdldCgwKTsKKwkJYXNzZXJ0VHJ1ZSh2YXJpYWJsZURlY2xh
cmF0aW9uIGluc3RhbmNlb2YgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pOworCQlUeXBl
RWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiA9
IChUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbil2YXJpYWJsZURlY2xhcmF0aW9uOworCQlh
c3NlcnRFcXVhbHMoInZsYW1iZGEiLCB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbi50b1N0
cmluZygpKTsJCQorCX0KKworCS8qKgorCSAqIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3QwMTE2KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4
L3NyYy90ZXN0MDExNi9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5n
IGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDAxMTY7IgorCQkJCSsgImludGVyZmFjZSBJIHtcbiIK
KwkJCQkrICIJaW50IGZvbyhpbnQgeCk7XG4iCisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMg
Y2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9ICB2bGFtYmRhIC0+IDIwMDtcbiIKKwkJCQkrIn1c
biI7CisJCUNvbXBpbGF0aW9uVW5pdCBjdSA9IChDb21waWxhdGlvblVuaXQpIGJ1aWxkQVNUKGNv
bnRlbnRzLCB0aGlzLndvcmtpbmdDb3B5KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVkZWNsYXJh
dGlvbiA9IChUeXBlRGVjbGFyYXRpb24pIGdldEFTVE5vZGUoY3UsIDEpOworCQlGaWVsZERlY2xh
cmF0aW9uIGZpZWxkRGVjbGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0
aW9uLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFn
bWVudCBmcmFnbWVudCA9IChWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQpZmllbGREZWNsYXJh
dGlvbi5mcmFnbWVudHMoKS5nZXQoMCk7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IGZyYWdt
ZW50LmdldEluaXRpYWxpemVyKCk7CisJCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9m
IExhbWJkYUV4cHJlc3Npb24pOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24g
PSAoTGFtYmRhRXhwcmVzc2lvbilleHByZXNzaW9uOworCQlhc3NlcnRFcXVhbHMoIih2bGFtYmRh
KSAtPiAyMDA7XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVl
KGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURl
Y2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFt
YmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5nZXQoMCk7CisJCWFzc2VydFRydWUodmFyaWFibGVE
ZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJ
VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRp
b24gPSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsK
KwkJYXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIiwgdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24u
dG9TdHJpbmcoKSk7CQkKKwl9CisJCisJLyoqCisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCSAqIAorCSAqIEB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uCisJICovCisJcHVibGljIHZvaWQgdGVzdDAxMTcoKSB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uIHsKKwkJdGhpcy53b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVy
dGVyMTgvc3JjL3Rlc3QwMTE3L1guamF2YSIsCisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlT
dHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0ZXN0MDExNzsiCisJCQkJKyAiaW50ZXJmYWNlIEkg
e1xuIgorCQkJCSsgIglPYmplY3QgZm9vKGludCBbXSBpYSk7XG4iCisJCQkJKyAifVxuIiAKKwkJ
CQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IChpbnQgW10gaWEpIC0+e1xu
IgorCQkJCSsgIiAgCXJldHVybiBpYS5jbG9uZSgpOyIKKwkJCQkrICJ9O1xuIgorCQkJCSsifVxu
IjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29u
dGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0
aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFy
YXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRp
b24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdt
ZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0
aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21l
bnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2Yg
TGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9
IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKGludFtdIGlh
KSAtPiB7XG4gIHJldHVybiBpYS5jbG9uZSgpO1xufVxuIiwgbGFtYmRhRXhwcmVzc2lvbi50b1N0
cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50cygpLnNpemUo
KSA9PSAxKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiB2YXJpYWJsZURlY2xhcmF0aW9uID0gKFZh
cmlhYmxlRGVjbGFyYXRpb24pIGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuZ2V0KDApOwor
CQlhc3NlcnRUcnVlKHZhcmlhYmxlRGVjbGFyYXRpb24gaW5zdGFuY2VvZiBTaW5nbGVWYXJpYWJs
ZURlY2xhcmF0aW9uKTsKKwkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJpYWJs
ZURlY2xhcmF0aW9uID0gKFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJh
dGlvbjsKKwkJYXNzZXJ0RXF1YWxzKCJpbnRbXSBpYSIsIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRp
b24udG9TdHJpbmcoKSk7CQkKKwl9CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0MDExOCgpIHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252
ZXJ0ZXIxOC9zcmMvdGVzdDAxMTgvWC5qYXZhIiwKKwkJCQl0cnVlLyogcmVzb2x2ZSAqLyk7CisJ
CVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHRlc3QwMTE4OyIgKworCQkJCSJpbnRlcmZhY2Ug
SSB7XG4iICsKKwkJCQkiCXZvaWQgZG9pdCgpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiCQlJIGkgPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJU3lz
dGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCUkgaiA9ICgpIC0+IHtcbiIgKwor
CQkJCSIJCQkJU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQlJIGsgPSAo
KSAtPiB7XG4iICsKKwkJCQkiCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4odGhpcyk7XG4iICsKKwkJ
CQkiCQkJCX07XG4iICsKKwkJCQkiCQkJfTtcbiIgKworCQkJCSIJCX07XG4iICsKKwkJCQkiCX1c
biI7IAorCQlDb21waWxhdGlvblVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChj
b250ZW50cywgdGhpcy53b3JraW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFy
YXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAxKTsKKwkJRmllbGREZWNs
YXJhdGlvbiBmaWVsZERlY2xhcmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJh
dGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJh
Z21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFy
YXRpb24uZnJhZ21lbnRzKCkuZ2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9u
ID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiB7
XG4gIFN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiAgSSBqPSgpIC0+IHtcbiAgICBTeXN0ZW0u
b3V0LnByaW50bG4odGhpcyk7XG4gICAgSSBrPSgpIC0+IHtcbiAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih0aGlzKTtcbiAgICB9XG47XG4gIH1cbjtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5zaXpl
KCkgPT0gMCk7CisJfQorCisJLyoqCisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM5OTc5MworCSAqIAorCSAqIEB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uCisJICovCisJcHVibGljIHZvaWQgX3Rlc3QwMTE3YSgpIHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIx
OC9zcmMvdGVzdDAxMTcvWC5qYXZhIiwKKwkJCQl0cnVlLyogcmVzb2x2ZSAqLyk7CisJCVN0cmlu
ZyBjb250ZW50cyA9ICJwYWNrYWdlIHRlc3QwMTE3OyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4i
CisJCQkJKyAiCXZvaWQgZm9vKCk7XG4iCisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMgY2xh
c3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IHN1cGVyOjp0b1N0cmluZztcbiIKKwkJCQkrIn1cbiI7
CisJCUNvbXBpbGF0aW9uVW5pdCBjdSA9IChDb21waWxhdGlvblVuaXQpIGJ1aWxkQVNUKGNvbnRl
bnRzLCB0aGlzLndvcmtpbmdDb3B5KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVkZWNsYXJhdGlv
biA9IChUeXBlRGVjbGFyYXRpb24pIGdldEFTVE5vZGUoY3UsIDEpOworCQlGaWVsZERlY2xhcmF0
aW9uIGZpZWxkRGVjbGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0aW9u
LmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dCBmcmFnbWVudCA9IChWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQpZmllbGREZWNsYXJhdGlv
bi5mcmFnbWVudHMoKS5nZXQoMCk7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IGZyYWdtZW50
LmdldEluaXRpYWxpemVyKCk7CisJCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExh
bWJkYUV4cHJlc3Npb24pOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24gPSAo
TGFtYmRhRXhwcmVzc2lvbilleHByZXNzaW9uOworCQlhc3NlcnRFcXVhbHMoIih2bGFtYmRhKSAt
PiAyMDA7XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGxh
bWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURlY2xh
cmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFtYmRh
RXhwcmVzc2lvbi5hcmd1bWVudHMoKS5nZXQoMCk7CisJCWFzc2VydFRydWUodmFyaWFibGVEZWNs
YXJhdGlvbiBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJVHlw
ZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24g
PSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJ
YXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIiwgdHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24udG9T
dHJpbmcoKSk7CQkKKwl9CisJCiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJUZXN0LmphdmEKaW5kZXggZTUzMTFkZC4u
NGExYjI0ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9kb20vQVNUTWF0Y2hlclRlc3QuamF2YQpAQCAtNTUxLDYgKzU1MSwxMiBAQAogCQlw
dWJsaWMgYm9vbGVhbiBtYXRjaChJbnN0YW5jZW9mRXhwcmVzc2lvbiBub2RlLCBPYmplY3Qgb3Ro
ZXIpIHsKIAkJCXJldHVybiBzdGFuZGFyZEJvZHkobm9kZSwgb3RoZXIsIHRoaXMuc3VwZXJNYXRj
aCA/IHN1cGVyLm1hdGNoKG5vZGUsIG90aGVyKSA6IGZhbHNlKTsKIAkJfQorCQlwdWJsaWMgYm9v
bGVhbiBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQkJcmV0
dXJuIHN0YW5kYXJkQm9keShub2RlLCBvdGhlciwgdGhpcy5zdXBlck1hdGNoID8gc3VwZXIubWF0
Y2gobm9kZSwgb3RoZXIpIDogZmFsc2UpOworCQl9CisJCXB1YmxpYyBib29sZWFuIG1hdGNoKFR5
cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQkJcmV0
dXJuIHN0YW5kYXJkQm9keShub2RlLCBvdGhlciwgdGhpcy5zdXBlck1hdGNoID8gc3VwZXIubWF0
Y2gobm9kZSwgb3RoZXIpIDogZmFsc2UpOworCQl9CiAJfQogCiAJLyoqCkBAIC0xNTYzLDQgKzE1
NjksNTMgQEAKIAkJeDEuZXh0cmFEaW1lbnNpb25JbmZvcygpLmFkZCh4Mik7CiAJCWJhc2ljTWF0
Y2goeDEpOwogCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zOTk3OTMKKwlwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhRXhwcmVzc2lvbnMxKCkgewor
CQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwoKSA8IEFTVC5KTFM4KSB7CisJCQlyZXR1cm47CisJCX0K
KwkJTGFtYmRhRXhwcmVzc2lvbiB4MSA9IHRoaXMuYXN0Lm5ld0xhbWJkYUV4cHJlc3Npb24oKTsK
KwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24geDIgPSB0aGlzLmFzdC5uZXdUeXBlRWxp
ZGVkVmFyaWFibGVEZWNsYXJhdGlvbigpOworCQl4Mi5zZXROYW1lKHRoaXMuTjEpOworCQl4MS5h
cmd1bWVudHMoKS5hZGQoeDIpOworCQl4MS5zZXRCb2R5KHRoaXMuYXN0Lm5ld0Jsb2NrKCkpOwor
CQliYXNpY01hdGNoKHgxKTsKKwl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJcHVibGljIHZvaWQgdGVzdExhbWJkYUV4cHJlc3Np
b25zMigpIHsKKwkJaWYgKHRoaXMuYXN0LmFwaUxldmVsKCkgPCBBU1QuSkxTOCkgeworCQkJcmV0
dXJuOworCQl9CisJCUxhbWJkYUV4cHJlc3Npb24geDEgPSB0aGlzLmFzdC5uZXdMYW1iZGFFeHBy
ZXNzaW9uKCk7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3QmxvY2soKSk7CisJCWJhc2ljTWF0
Y2goeDEpOworCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zOTk3OTMKKwlwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhRXhwcmVzc2lvbnMzKCkgewor
CQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwoKSA8IEFTVC5KTFM4KSB7CisJCQlyZXR1cm47CisJCX0K
KwkJTGFtYmRhRXhwcmVzc2lvbiB4MSA9IHRoaXMuYXN0Lm5ld0xhbWJkYUV4cHJlc3Npb24oKTsK
KwkJeDEuc2V0Qm9keSh0aGlzLmFzdC5uZXdFeHByZXNzaW9uU3RhdGVtZW50KHRoaXMuTjIpKTsK
KwkJYmFzaWNNYXRjaCh4MSk7CisJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHByZXNz
aW9uczQoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJCXJl
dHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRhRXhw
cmVzc2lvbigpOworCQlTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uIHgyID0gdGhpcy5hc3QubmV3
U2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbigpOworCQl4Mi5tb2RpZmllcnMoKS5hZGQodGhpcy5N
T0QxKTsKKwkJeDIubW9kaWZpZXJzKCkuYWRkKHRoaXMuTU9EMik7CisJCXgyLnNldFR5cGUodGhp
cy5UMSk7CisJCXgyLnNldE5hbWUodGhpcy5OMSk7CisJCXgxLmFyZ3VtZW50cygpLmFkZCh4Mik7
CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3RXhwcmVzc2lvblN0YXRlbWVudCh0aGlzLk4yKSk7
CisJCWJhc2ljTWF0Y2goeDEpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFy
c2VyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCmluZGV4IDI4NzQ4NTAuLjQxYjYx
YWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Bh
cnNlci9QYXJzZXIuamF2YQpAQCAtNzgxMCw2ICs3ODEwLDEwIEBACiAJdGhpcy5pbnRQdHItLTsg
IC8vICcpJyBwb3NpdGlvbiwgZGlzY2FyZCBmb3Igbm93LgogCWxleHAuc291cmNlU3RhcnQgPSB0
aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dOyAvLyAnKCcgcG9zaXRpb24gb3IgaWRlbnRpZmll
ciBwb3NpdGlvbi4KIAlsZXhwLnNvdXJjZUVuZCA9IGJvZHkuc291cmNlRW5kOworCWlmIChib2R5
IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgeworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSAoRXhw
cmVzc2lvbikgYm9keTsKKwkJZXhwcmVzc2lvbi5zdGF0ZW1lbnRFbmQgPSBib2R5LnNvdXJjZUVu
ZDsKKwl9CiAJcHVzaE9uRXhwcmVzc2lvblN0YWNrKGxleHApOwogCWlmICghdGhpcy5wYXJzaW5n
SmF2YThQbHVzKSB7CiAJCXByb2JsZW1SZXBvcnRlcigpLmxhbWJkYUV4cHJlc3Npb25zTm90QmVs
b3cxOChsZXhwKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCmluZGV4IGExNWU2NzcuLjYwYjJhZjcgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vQVNULmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2RvbS9BU1QuamF2YQpAQCAtMjE0OCw2ICsyMTQ4LDE4IEBACiAJCXJldHVybiByZXN1
bHQ7CiAJfQogCisJLyoqCisJICogQ3JlYXRlcyBhbiB1bnBhcmVudGVkIHR5cGUgZWxpZGVkIHZh
cmlhYmxlIGRlY2xhcmF0aW9uIG5vZGUgb3duZWQgYnkgdGhpcyBBU1QuCisJICogQnkgZGVmYXVs
dCwgdGhlIGRlY2xhcmF0aW9uIGlzIGZvciBhIHZhcmlhYmxlIHdpdGggYW4gdW5zcGVjaWZpZWQs
IGJ1dAorCSAqIGxlZ2FsLCBuYW1lLgorCSAqCisJICogQHJldHVybiBhIG5ldyB1bnBhcmVudGVk
IHR5cGUgZWxpZGVkIHZhcmlhYmxlIGRlY2xhcmF0aW9uIG5vZGUKKwkgKiBAc2luY2UgMy45CisJ
ICovCisJcHVibGljIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5ld1R5cGVFbGlkZWRW
YXJpYWJsZURlY2xhcmF0aW9uKCkgeworCQlUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiBy
ZXN1bHQgPSBuZXcgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24odGhpcyk7CisJCXJldHVy
biByZXN1bHQ7CisJfQogCS8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSBFWFBSRVNT
SU9OUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0KIAkvKioKIAkgKiBDcmVhdGVzIGFuZCBy
ZXR1cm5zIGEgbmV3IHVucGFyZW50ZWQgc3RyaW5nIGxpdGVyYWwgbm9kZSBmb3IKQEAgLTI0NDAs
NiArMjQ1MiwxOSBAQAogCQlyZXR1cm4gcmVzdWx0OwogCX0KIAorCS8qKgorCSAqIENyZWF0ZXMg
YW4gdW5wYXJlbnRlZCBsYW1iZGEgZXhwcmVzc2lvbiBub2RlIG93bmVkIGJ5IHRoaXMgQVNULgor
CSAqIEJ5IGRlZmF1bHQsIHRoZSBkZWNsYXJhdGlvbiBpcyBmb3IgYSBsYW1iZGEgZXhwcmVzc2lv
biB3aXRoIGFyZ3VtZW50CisJICogbGlzdCBhbmQgbm8gYm9keS4KKwkgKiAKKwkgKiBAcmV0dXJu
IGEgbmV3IHVucGFyZW50ZWQgbGFtYmRhIGV4cHJlc3Npb24gbm9kZQorCSAqIEBzaW5jZSAzLjkK
KwkgKi8KKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBuZXdMYW1iZGFFeHByZXNzaW9uKCkgewor
CQlMYW1iZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRoaXMpOwor
CQlyZXR1cm4gcmVzdWx0OworCX0KKwkKIAkvLz09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0gU1RBVEVNRU5UUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0KIAkvKioKIAkgKiBDcmVh
dGVzIGEgbmV3IHVucGFyZW50ZWQgbG9jYWwgdmFyaWFibGUgZGVjbGFyYXRpb24gc3RhdGVtZW50
IG5vZGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCmluZGV4IGJlNDY2NWMu
LmY2NGIyNzYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQpAQCAtMTcy
MCw2ICsxNzIwLDkgQEAKIAkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2UpIHsKIAkJCXJldHVybiBjb252
ZXJ0KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2Up
IGV4cHJlc3Npb24pOwogCQl9CisJCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2Ygb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uKSB7CisJCQlyZXR1
cm4gY29udmVydCgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFF
eHByZXNzaW9uKSBleHByZXNzaW9uKTsKKwkJfQogCQlyZXR1cm4gbnVsbDsKIAl9CiAKQEAgLTIx
MzcsNiArMjE0MCw0NSBAQAogCQlyZXR1cm4gZXhwcjsKIAl9CiAKKwlwdWJsaWMgRXhwcmVzc2lv
biBjb252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhw
cmVzc2lvbiBsYW1iZGEpIHsKKwkJLy8gd2lsbCByZXR1cm4gYSBMYW1iZGFFeHByZXNzaW9uCisJ
CUV4cHJlc3Npb24gZXhwcjsKKwkJaW50IHNvdXJjZVN0YXJ0ID0gbGFtYmRhLnNvdXJjZVN0YXJ0
OworCisJCS8vIHJldHVybnMgYSBNZXRob2RJbnZvY2F0aW9uCisJCWZpbmFsIExhbWJkYUV4cHJl
c3Npb24JbGFtYmRhRXhwcmVzc2lvbiA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRoaXMuYXN0KTsK
KwkJaWYgKHRoaXMucmVzb2x2ZUJpbmRpbmdzKSB7CisJCQlyZWNvcmROb2RlcyhsYW1iZGFFeHBy
ZXNzaW9uLCBsYW1iZGEpOworCQl9CisJCW9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQXJndW1lbnRbXSBhcmd1bWVudHMgPSBsYW1iZGEuYXJndW1lbnRzOworCQlpZiAoYXJn
dW1lbnRzICE9IG51bGwpIHsKKwkJCWludCBhcmd1bWVudHNMZW5ndGggPSBhcmd1bWVudHMubGVu
Z3RoOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudHNMZW5ndGg7IGkrKykgeworCQkJ
CW9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQXJndW1lbnQgYXJndW1lbnQg
PSBhcmd1bWVudHNbaV07CisJCQkJaWYgKGFyZ3VtZW50LnR5cGUgPT0gbnVsbCkgeworCQkJCQkv
LyBjcmVhdGUgYSBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiBPYmplY3QuCisJCQkJCVR5
cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIHR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9u
ID0gbmV3IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKHRoaXMuYXN0KTsKKwkJCQkJU2lt
cGxlTmFtZSBzaW1wbGVOYW1lID0gbmV3IFNpbXBsZU5hbWUodGhpcy5hc3QpOworCQkJCQlTdHJp
bmcgcyA9IG5ldyBTdHJpbmcoYXJndW1lbnRzW2ldLm5hbWUpOworCQkJCQlzaW1wbGVOYW1lLnNl
dElkZW50aWZpZXIocyk7CisJCQkJCWlmICh0aGlzLnJlc29sdmVCaW5kaW5ncykgeworCQkJCQkJ
cmVjb3JkTm9kZXMoc2ltcGxlTmFtZSwgYXJndW1lbnQpOworCQkJCQkJcmVjb3JkTm9kZXModHlw
ZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24sIGFyZ3VtZW50KTsKKwkJCQkJfQorCQkJCQl0eXBl
RWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbi5zZXROYW1lKHNpbXBsZU5hbWUpOworCQkJCQlsYW1i
ZGFFeHByZXNzaW9uLmFyZ3VtZW50cygpLmFkZCh0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlv
bik7CQkJCQkKKwkJCQl9IGVsc2UgeworCQkJCQlTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uIHNp
bmdsZVZhcmlhYmxlRGVjbGFyYXRpb24gPSBjb252ZXJ0KGFyZ3VtZW50KTsKKwkJCQkJbGFtYmRh
RXhwcmVzc2lvbi5hcmd1bWVudHMoKS5hZGQoc2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbik7CQkJ
CQkKKwkJCQl9CisJCQl9CisJCX0KKwkJbGFtYmRhRXhwcmVzc2lvbi5zZXRCb2R5KGNvbnZlcnQo
bGFtYmRhLmJvZHkpKTsKKwkJZXhwciA9IGxhbWJkYUV4cHJlc3Npb247CisJCWV4cHIuc2V0U291
cmNlUmFuZ2Uoc291cmNlU3RhcnQsIGxhbWJkYS5zb3VyY2VFbmQgLSBzb3VyY2VTdGFydCArIDEp
OworCQlyZXR1cm4gZXhwcjsKKwl9CisKIAlwdWJsaWMgTWFya2VyQW5ub3RhdGlvbiBjb252ZXJ0
KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTWFya2VyQW5ub3RhdGlvbiBh
bm5vdGF0aW9uKSB7CiAJCWZpbmFsIE1hcmtlckFubm90YXRpb24gbWFya2VyQW5ub3RhdGlvbiA9
IG5ldyBNYXJrZXJBbm5vdGF0aW9uKHRoaXMuYXN0KTsKIAkJc2V0VHlwZU5hbWVGb3JBbm5vdGF0
aW9uKGFubm90YXRpb24sIG1hcmtlckFubm90YXRpb24pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE1h
dGNoZXIuamF2YQppbmRleCBjNmZjYjQ0Li4zYmY2MzNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE1hdGNoZXIuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VE1hdGNoZXIuamF2YQpAQCAtMTkyMSw2ICsxOTIxLDUyIEBACiAJICogQHJldHVybiA8Y29kZT50
cnVlPC9jb2RlPiBpZiB0aGUgc3VidHJlZSBtYXRjaGVzLCBvcgogCSAqICAgPGNvZGU+ZmFsc2U8
L2NvZGU+IGlmIHRoZXkgZG8gbm90IG1hdGNoIG9yIHRoZSBvdGhlciBvYmplY3QgaGFzIGEKIAkg
KiAgIGRpZmZlcmVudCBub2RlIHR5cGUgb3IgaXMgPGNvZGU+bnVsbDwvY29kZT4KKwkgKiBAc2lu
Y2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gbWF0Y2goVHlwZUVsaWRlZFZhcmlhYmxlRGVj
bGFyYXRpb24gbm9kZSwgT2JqZWN0IG90aGVyKSB7CisJCWlmICghKG90aGVyIGluc3RhbmNlb2Yg
VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0K
KwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gbyA9IChUeXBlRWxpZGVkVmFyaWFibGVE
ZWNsYXJhdGlvbikgb3RoZXI7CisJCXJldHVybiBzYWZlU3VidHJlZU1hdGNoKG5vZGUuZ2V0TmFt
ZSgpLCBvLmdldE5hbWUoKSk7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVyIHRoZSBn
aXZlbiBub2RlIGFuZCB0aGUgb3RoZXIgb2JqZWN0IG1hdGNoLgorCSAqIDxwPgorCSAqIFRoZSBk
ZWZhdWx0IGltcGxlbWVudGF0aW9uIHByb3ZpZGVkIGJ5IHRoaXMgY2xhc3MgdGVzdHMgd2hldGhl
ciB0aGUKKwkgKiBvdGhlciBvYmplY3QgaXMgYSBub2RlIG9mIHRoZSBzYW1lIHR5cGUgd2l0aCBz
dHJ1Y3R1cmFsbHkgaXNvbW9ycGhpYworCSAqIGNoaWxkIHN1YnRyZWVzLiBTdWJjbGFzc2VzIG1h
eSBvdmVycmlkZSB0aGlzIG1ldGhvZCBhcyBuZWVkZWQuCisJICogPC9wPgorCSAqIEBwYXJhbSBu
b2RlIHRoZSBub2RlCisJICogQHBhcmFtIG90aGVyIHRoZSBvdGhlciBvYmplY3QsIG9yIDxjb2Rl
Pm51bGw8L2NvZGU+CisJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgc3VidHJl
ZSBtYXRjaGVzLCBvcgorCSAqICAgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIHRoZXkgZG8gbm90IG1h
dGNoIG9yIHRoZSBvdGhlciBvYmplY3QgaGFzIGEKKwkgKiAgIGRpZmZlcmVudCBub2RlIHR5cGUg
b3IgaXMgPGNvZGU+bnVsbDwvY29kZT4KKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIGJv
b2xlYW4gbWF0Y2goTGFtYmRhRXhwcmVzc2lvbiBub2RlLCBPYmplY3Qgb3RoZXIpIHsKKwkJaWYg
KCEob3RoZXIgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSkgeworCQkJcmV0dXJuIGZhbHNl
OworCQl9CisJCUxhbWJkYUV4cHJlc3Npb24gbyA9IChMYW1iZGFFeHByZXNzaW9uKSBvdGhlcjsK
KwkJcmV0dXJuCXNhZmVTdWJ0cmVlTGlzdE1hdGNoKG5vZGUuYXJndW1lbnRzKCksIG8uYXJndW1l
bnRzKCkpCisJCQkJJiYgc2FmZVN1YnRyZWVNYXRjaChub2RlLmdldEJvZHkoKSwgby5nZXRCb2R5
KCkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gbm9kZSBhbmQg
dGhlIG90aGVyIG9iamVjdCBtYXRjaC4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1l
bnRhdGlvbiBwcm92aWRlZCBieSB0aGlzIGNsYXNzIHRlc3RzIHdoZXRoZXIgdGhlCisJICogb3Ro
ZXIgb2JqZWN0IGlzIGEgbm9kZSBvZiB0aGUgc2FtZSB0eXBlIHdpdGggc3RydWN0dXJhbGx5IGlz
b21vcnBoaWMKKwkgKiBjaGlsZCBzdWJ0cmVlcy4gU3ViY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhp
cyBtZXRob2QgYXMgbmVlZGVkLgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBub2RlIHRoZSBu
b2RlCisJICogQHBhcmFtIG90aGVyIHRoZSBvdGhlciBvYmplY3QsIG9yIDxjb2RlPm51bGw8L2Nv
ZGU+CisJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgc3VidHJlZSBtYXRjaGVz
LCBvcgorCSAqICAgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIHRoZXkgZG8gbm90IG1hdGNoIG9yIHRo
ZSBvdGhlciBvYmplY3QgaGFzIGEKKwkgKiAgIGRpZmZlcmVudCBub2RlIHR5cGUgb3IgaXMgPGNv
ZGU+bnVsbDwvY29kZT4KIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiBtYXRjaChTdHJpbmdMaXRlcmFs
IG5vZGUsIE9iamVjdCBvdGhlcikgewogCQlpZiAoIShvdGhlciBpbnN0YW5jZW9mIFN0cmluZ0xp
dGVyYWwpKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCmluZGV4IGY3OWU2ZWQuLjk5ZDA4
NjUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCkBAIC03ODIsNiArNzgyLDIyIEBACiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRVhUUkFfRElNRU5TSU9OID0gODU7CiAKIAkvKioKKwkg
KiBOb2RlIHR5cGUgY29uc3RhbnQgaW5kaWNhdGluZyBhIG5vZGUgb2YgdHlwZQorCSAqIDxjb2Rl
PlR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uPC9jb2RlPi4KKwkgKiBAc2VlIFR5cGVFbGlk
ZWRWYXJpYWJsZURlY2xhcmF0aW9uCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBzdGF0
aWMgZmluYWwgaW50IFRZUEVfRUxJREVEX1ZBUklBQkxFX0RFQ0xBUkFUSU9OID0gODY7CisKKwkv
KioKKwkgKiBOb2RlIHR5cGUgY29uc3RhbnQgaW5kaWNhdGluZyBhIG5vZGUgb2YgdHlwZQorCSAq
IDxjb2RlPkxhbWJkYUV4cHJlc3Npb248L2NvZGU+LgorCSAqIEBzZWUgTGFtYmRhRXhwcmVzc2lv
bgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBMQU1CREFf
RVhQUkVTU0lPTiA9IDg3OworCisJLyoqCiAJICogUmV0dXJucyB0aGUgbm9kZSBjbGFzcyBmb3Ig
dGhlIGNvcnJlc3BvbmRpbmcgbm9kZSB0eXBlLgogCSAqCiAJICogQHBhcmFtIG5vZGVUeXBlIEFT
VCBub2RlIHR5cGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKaW5kZXggMjYyZDU4
NC4uMGJlNGY5ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKQEAgLTEyNTIs
OCArMTI1Miw0MiBAQAogCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIGNoaWxk
cmVuIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUKIAkgKiB2aXNpdGVkLCBhbmQgPGNvZGU+ZmFsc2U8
L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkCiAJICogYmUgc2tpcHBl
ZAorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChUeXBlRWxpZGVk
VmFyaWFibGVEZWNsYXJhdGlvbiBub2RlKSB7CisJCXJldHVybiB0cnVlOworCX0KKworCS8qKgor
CSAqIFZpc2l0cyB0aGUgZ2l2ZW4gdHlwZS1zcGVjaWZpYyBBU1Qgbm9kZS4KKwkgKiA8cD4KKwkg
KiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcgYW5kIHJldHVybiB0cnVl
LgorCSAqIFN1YmNsYXNzZXMgbWF5IHJlaW1wbGVtZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBw
YXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CisJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2Rl
PiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZCBiZQorCSAqIHZpc2l0ZWQsIGFu
ZCA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQK
KwkgKiBiZSBza2lwcGVkCiAJICovCiAJcHVibGljIGJvb2xlYW4gdmlzaXQoU3RyaW5nTGl0ZXJh
bCBub2RlKSB7CisJCXJldHVybiB0cnVlOworCX0KKworCS8qKgorCSAqIFZpc2l0cyB0aGUgZ2l2
ZW4gdHlwZS1zcGVjaWZpYyBBU1Qgbm9kZS4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBs
ZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcgYW5kIHJldHVybiB0cnVlLgorCSAqIFN1YmNsYXNzZXMg
bWF5IHJlaW1wbGVtZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBub2RlIHRoZSBub2Rl
IHRvIHZpc2l0CisJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4g
b2YgdGhpcyBub2RlIHNob3VsZCBiZQorCSAqIHZpc2l0ZWQsIGFuZCA8Y29kZT5mYWxzZTwvY29k
ZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQKKwkgKiBiZSBza2lwcGVkCisJ
ICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIHZpc2l0KExhbWJkYUV4cHJlc3Np
b24gbm9kZSkgewogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKQEAgLTIzOTEsNiArMjQyNSwzMiBAQAog
CSAqIDwvcD4KIAkgKgogCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CisJICogQHNp
bmNlIDMuOQorCSAqLworCXB1YmxpYyB2b2lkIGVuZFZpc2l0KFR5cGVFbGlkZWRWYXJpYWJsZURl
Y2xhcmF0aW9uIG5vZGUpIHsKKwkJLy8gZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjogZG8gbm90aGlu
ZworCX0KKworCS8qKgorCSAqIEVuZCBvZiB2aXNpdCB0aGUgZ2l2ZW4gdHlwZS1zcGVjaWZpYyBB
U1Qgbm9kZS4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5v
dGhpbmcuIFN1YmNsYXNzZXMgbWF5IHJlaW1wbGVtZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBw
YXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CisJICogQHNpbmNlIDMuOQorCSAqLworCXB1Ymxp
YyB2b2lkIGVuZFZpc2l0KExhbWJkYUV4cHJlc3Npb24gbm9kZSkgeworCQkvLyBkZWZhdWx0IGlt
cGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCisJfQorCisJLyoqCisJICogRW5kIG9mIHZpc2l0IHRo
ZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0
IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZy4gU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQu
CisJICogPC9wPgorCSAqCisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKIAkgKi8K
IAlwdWJsaWMgdm9pZCBlbmRWaXNpdChTdHJpbmdMaXRlcmFsIG5vZGUpIHsKIAkJLy8gZGVmYXVs
dCBpbXBsZW1lbnRhdGlvbjogZG8gbm90aGluZwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9CaW5kaW5nUmVzb2x2ZXIuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQmluZGlu
Z1Jlc29sdmVyLmphdmEKaW5kZXggZDIyY2I2Yi4uMTg1NzUxNyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9CaW5kaW5nUmVzb2x2
ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0JpbmRpbmdSZXNvbHZlci5qYXZhCkBAIC01NzcsNiArNTc3LDI3IEBACiAJfQogCiAJ
LyoqCisJICogUmVzb2x2ZXMgdGhlIGdpdmVuIExhbWJkYSBFeHByZXNzaW9uIGFuZCByZXR1cm5z
IHRoZSBiaW5kaW5nIGZvciBpdC4KKwkgKiA8cD4KKwkgKiBUaGUgaW1wbGVtZW50YXRpb24gb2Yg
PGNvZGU+TGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZlQmluZGluZzwvY29kZT4KKwkgKiBmb3J3YXJk
cyB0byB0aGlzIG1ldGhvZC4gSG93IHRoZSBtZXRob2QgcmVzb2x2ZXMgaXMgb2Z0ZW4gYSBmdW5j
dGlvbiBvZgorCSAqIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBtZXRob2QgZGVjbGFyYXRpb24g
bm9kZSBpcyBlbWJlZGRlZCBhcyB3ZWxsIGFzCisJICogdGhlIG1ldGhvZCBkZWNsYXJhdGlvbiBz
dWJ0cmVlIGl0c2VsZi4KKwkgKiA8L3A+CisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVt
ZW50YXRpb24gb2YgdGhpcyBtZXRob2QgcmV0dXJucyA8Y29kZT5udWxsPC9jb2RlPi4KKwkgKiBT
dWJjbGFzc2VzIG1heSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbGFt
YmRhIExhbWJkYUV4cmVzc2lvbiBvZiBpbnRlcmVzdAorCSAqIEByZXR1cm4gdGhlIGJpbmRpbmcg
Zm9yIHRoZSBnaXZlbiBsYW1iZGEgZXhwcmVzc2lvbgorCSAqICAgIDxjb2RlPm51bGw8L2NvZGU+
IGlmIG5vIGJpbmRpbmcgaXMgYXZhaWxhYmxlCisJICovCisJSU1ldGhvZEJpbmRpbmcgcmVzb2x2
ZU1ldGhvZChMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisK
KwkvKioKIAkgKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gbWV0aG9kIGludm9jYXRpb24gYW5kIHJldHVy
bnMgdGhlIGJpbmRpbmcgZm9yIGl0LgogCSAqIDxwPgogCSAqIFRoZSBpbXBsZW1lbnRhdGlvbiBv
ZiA8Y29kZT5NZXRob2RJbnZvY2F0aW9uLnJlc29sdmVNZXRob2RCaW5kaW5nPC9jb2RlPgpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRCaW5kaW5nUmVzb2x2ZXIuamF2YQppbmRl
eCAwNTVjZDg1Li40YjUxMDQxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRCaW5kaW5nUmVzb2x2ZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1
bHRCaW5kaW5nUmVzb2x2ZXIuamF2YQpAQCAtODk0LDYgKzg5NCwyNiBAQAogCS8qCiAJICogTWV0
aG9kIGRlY2xhcmVkIG9uIEJpbmRpbmdSZXNvbHZlci4KIAkgKi8KKwlzeW5jaHJvbml6ZWQgSU1l
dGhvZEJpbmRpbmcgcmVzb2x2ZU1ldGhvZChMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCQlP
YmplY3Qgb2xkTm9kZSA9IHRoaXMubmV3QXN0VG9PbGRBc3QuZ2V0KGxhbWJkYSk7CisJCWlmIChv
bGROb2RlIGluc3RhbmNlb2YgQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbikgeworCQkJQWJzdHJh
Y3RNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsYXJhdGlvbiA9IChBYnN0cmFjdE1ldGhvZERl
Y2xhcmF0aW9uKSBvbGROb2RlOworCQkJSU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IGdl
dE1ldGhvZEJpbmRpbmcobWV0aG9kRGVjbGFyYXRpb24uYmluZGluZyk7CisJCQlpZiAobWV0aG9k
QmluZGluZyA9PSBudWxsKSB7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQl0aGlzLmJpbmRp
bmdzVG9Bc3ROb2Rlcy5wdXQobWV0aG9kQmluZGluZywgbGFtYmRhKTsKKwkJCVN0cmluZyBrZXkg
PSBtZXRob2RCaW5kaW5nLmdldEtleSgpOworCQkJaWYgKGtleSAhPSBudWxsKSB7CisJCQkJdGhp
cy5iaW5kaW5nVGFibGVzLmJpbmRpbmdLZXlzVG9CaW5kaW5ncy5wdXQoa2V5LCBtZXRob2RCaW5k
aW5nKTsKKwkJCX0KKwkJCXJldHVybiBtZXRob2RCaW5kaW5nOworCQl9CisJCXJldHVybiBudWxs
OworCX0KKy8qCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEJpbmRpbmdSZXNvbHZlci4KKwkgKi8K
IAlzeW5jaHJvbml6ZWQgSU1ldGhvZEJpbmRpbmcgcmVzb2x2ZU1ldGhvZChNZXRob2RJbnZvY2F0
aW9uIG1ldGhvZCkgewogCQlPYmplY3Qgb2xkTm9kZSA9IHRoaXMubmV3QXN0VG9PbGRBc3QuZ2V0
KG1ldGhvZCk7CiAJCWlmIChvbGROb2RlIGluc3RhbmNlb2YgTWVzc2FnZVNlbmQpIHsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
TGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9MYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMC4uODQ0ZjRjZgotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5q
YXZhCkBAIC0wLDAgKzEsMjYzIEBACitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbTsK
KworaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CisvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBv
ZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQor
ICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0
aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29t
cGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqIENvbnRy
aWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVt
ZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworaW1wb3J0IGphdmEudXRpbC5MaXN0
OworCisvKioKKyAqIExhbWJkYSBleHByZXNzaW9uIEFTVCBub2RlIHR5cGUuCisgKiA8cHJlPgor
ICogTGFtYmRhRXhwcmVzc2lvbjoKKyAqICAgIDxiPig8L2I+IEFyZ3VtZW50cyA8Yj4pPC9iPiA8
Yj4tPjwvYj4gU3RhdGVtZW50CisgKiBBcmd1bWVudHM6IAorICogICAgWyBTaW5nbGVWYXJpYWJs
ZURlY2xhcmF0aW9uLCB7IFNpbmdsZVZhcmlibGVEZWNsYXJhdGlvbiB9IF0gfCBbIFR5cGVFbGlk
ZWRWYXJpYWJsZURlY2xhcmF0aW9uLCB7IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIH0g
XQorICogU3RhdGVtZW50OgorICogCUJsb2NrIHwgRXhwcmVzc2lvbgorICogPC9wcmU+CisgKiAK
KyAqIEBzaW5jZSAzLjkgCisgKiBAbm9pbnN0YW50aWF0ZSBUaGlzIGNsYXNzIGlzIG5vdCBpbnRl
bmRlZCB0byBiZSBpbnN0YW50aWF0ZWQgYnkgY2xpZW50cy4gCisgKi8KKworcHVibGljIGNsYXNz
IExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsKKworCS8qKgorCSAqIFRoZSAi
VmFyaWFibGUiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5
cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0aW9ufSkuCisJICovCisJcHVibGljIHN0YXRpYyBm
aW5hbCBDaGlsZExpc3RQcm9wZXJ0eURlc2NyaXB0b3IgQVJHVU1FTlRTX1BST1BFUlRZID0KKwkJ
bmV3IENoaWxkTGlzdFByb3BlcnR5RGVzY3JpcHRvcihMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCAi
YXJndW1lbnRzIiwgVmFyaWFibGVEZWNsYXJhdGlvbi5jbGFzcywgTk9fQ1lDTEVfUklTSyk7IC8v
JE5PTi1OTFMtMSQKKwkKKwkvKioKKwkgKiBUaGUgImJvZHkiIHN0cnVjdHVyYWwgcHJvcGVydHkg
b2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBTdGF0ZW1lbnR9KS4KKwkgKi8K
KwlwdWJsaWMgc3RhdGljIGZpbmFsIENoaWxkUHJvcGVydHlEZXNjcmlwdG9yIEJPRFlfUFJPUEVS
VFkgPQorCQluZXcgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IoTGFtYmRhRXhwcmVzc2lvbi5jbGFz
cywgImJvZHkiLCBTdGF0ZW1lbnQuY2xhc3MsIE1BTkRBVE9SWSwgTk9fQ1lDTEVfUklTSyk7IC8v
JE5PTi1OTFMtMSQKKworCS8qKgorCSAqIEEgbGlzdCBvZiBwcm9wZXJ0eSBkZXNjcmlwdG9ycyAo
ZWxlbWVudCB0eXBlOgorCSAqIHtAbGluayBTdHJ1Y3R1cmFsUHJvcGVydHlEZXNjcmlwdG9yfSks
CisJICogb3IgbnVsbCBpZiB1bmluaXRpYWxpemVkLgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlw
cml2YXRlIHN0YXRpYyBmaW5hbCBMaXN0IFBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsKKwkKKwlz
dGF0aWMgeworCQlMaXN0IHByb3BlcnR5TGlzdCA9IG5ldyBBcnJheUxpc3QoMyk7CisJCWNyZWF0
ZVByb3BlcnR5TGlzdChMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCBwcm9wZXJ0eUxpc3QpOworCQlh
ZGRQcm9wZXJ0eShBUkdVTUVOVFNfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCWFkZFByb3Bl
cnR5KEJPRFlfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCVBST1BFUlRZX0RFU0NSSVBUT1JT
XzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3QocHJvcGVydHlMaXN0KTsKKwl9CisJCisJLyoqCisJICog
UmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0dXJhbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBmb3IgdGhp
cyBub2RlIHR5cGUuCisJICogQ2xpZW50cyBtdXN0IG5vdCBtb2RpZnkgdGhlIHJlc3VsdC4KKwkg
KgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0aGUgQVBJIGxldmVsOyBvbmUgb2YgdGhlIEFTVC5KTFMq
IGNvbnN0YW50cworCSAqIEByZXR1cm4gYSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChl
bGVtZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KQor
CSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIExpc3QgcHJvcGVydHlEZXNjcmlw
dG9ycyhpbnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIFBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsK
Kwl9CisKKwkvKioKKwkgKiBUaGUgcGFyYW1ldGVyIGRlY2xhcmF0aW9ucworCSAqIChlbGVtZW50
IHR5cGU6IHtAbGluayBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9ufSB8IHtAbGluayBUeXBlRWxp
ZGVkVmFyaWFibGVEZWNsYXJhdGlvbn0pLgorCSAqIERlZmF1bHRzIHRvIGFuIGVtcHR5IGxpc3Qu
CisJICovCisJcHJpdmF0ZSBBU1ROb2RlLk5vZGVMaXN0IGFyZ3VtZW50cyA9CisJCW5ldyBBU1RO
b2RlLk5vZGVMaXN0KEFSR1VNRU5UU19QUk9QRVJUWSk7CisKKwkvKioKKwkgKiBUaGUgbWV0aG9k
IGJvZHksIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmIG5vbmUuCisJICogRGVmYXVsdHMgdG8gbm9u
ZS4KKwkgKi8KKwlwcml2YXRlIFN0YXRlbWVudCBib2R5ID0gbnVsbDsKKworCS8qKgorCSAqIENy
ZWF0ZXMgYSBuZXcgQVNUIG5vZGUgZm9yIGEgTGFtYmRhRXhwcmVzc2lvbiBkZWNsYXJhdGlvbiBv
d25lZAorCSAqIGJ5IHRoZSBnaXZlbiBBU1QuCisJICogPHA+CisJICogTi5CLiBUaGlzIGNvbnN0
cnVjdG9yIGlzIHBhY2thZ2UtcHJpdmF0ZTsgYWxsIHN1YmNsYXNzZXMgbXVzdCBiZQorCSAqIGRl
Y2xhcmVkIGluIHRoZSBzYW1lIHBhY2thZ2U7IGNsaWVudHMgYXJlIHVuYWJsZSB0byBkZWNsYXJl
CisJICogYWRkaXRpb25hbCBzdWJjbGFzc2VzLgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBh
c3QgdGhlIEFTVCB0aGF0IGlzIHRvIG93biB0aGlzIG5vZGUKKwkgKi8KKwlMYW1iZGFFeHByZXNz
aW9uKEFTVCBhc3QpIHsKKwkJc3VwZXIoYXN0KTsKKwkJdGhpcy5hcmd1bWVudHMgPSBuZXcgQVNU
Tm9kZS5Ob2RlTGlzdChBUkdVTUVOVFNfUFJPUEVSVFkpOworCX0KKworCS8qIChvbWl0IGphdmFk
b2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAq
LworCUxpc3QgaW50ZXJuYWxTdHJ1Y3R1cmFsUHJvcGVydGllc0ZvclR5cGUoaW50IGFwaUxldmVs
KSB7CisJCXJldHVybiBwcm9wZXJ0eURlc2NyaXB0b3JzKGFwaUxldmVsKTsKKwl9CisKKwkvKiAo
b21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNU
Tm9kZS4KKwkgKi8KKwlmaW5hbCBBU1ROb2RlIGludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShD
aGlsZFByb3BlcnR5RGVzY3JpcHRvciBwcm9wZXJ0eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hp
bGQpIHsKKwkJaWYgKHByb3BlcnR5ID09IEJPRFlfUFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsK
KwkJCQlyZXR1cm4gZ2V0Qm9keSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXRCb2R5KChTdGF0ZW1l
bnQpIGNoaWxkKTsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJfQorCQkvLyBhbGxvdyBkZWZh
dWx0IGltcGxlbWVudGF0aW9uIHRvIGZsYWcgdGhlIGVycm9yCisJCXJldHVybiBzdXBlci5pbnRl
cm5hbEdldFNldENoaWxkUHJvcGVydHkocHJvcGVydHksIGdldCwgY2hpbGQpOworCX0KKworCS8q
IChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBB
U1ROb2RlLgorCSAqLworCWZpbmFsIExpc3QgaW50ZXJuYWxHZXRDaGlsZExpc3RQcm9wZXJ0eShD
aGlsZExpc3RQcm9wZXJ0eURlc2NyaXB0b3IgcHJvcGVydHkpIHsKKwkJaWYgKHByb3BlcnR5ID09
IEFSR1VNRU5UU19QUk9QRVJUWSkgeworCQkJcmV0dXJuIGFyZ3VtZW50cygpOworCQl9CisJCS8v
IGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJu
IHN1cGVyLmludGVybmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkocHJvcGVydHkpOworCX0KKwkKKwkv
KiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24g
QVNUTm9kZS4KKwkgKi8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gTUVUSE9EX0RF
Q0xBUkFUSU9OOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAq
IE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCUFTVE5vZGUgY2xvbmUwKEFTVCB0
YXJnZXQpIHsKKwkJTGFtYmRhRXhwcmVzc2lvbiByZXN1bHQgPSBuZXcgTGFtYmRhRXhwcmVzc2lv
bih0YXJnZXQpOworCQlyZXN1bHQuc2V0U291cmNlUmFuZ2UoZ2V0U3RhcnRQb3NpdGlvbigpLCBn
ZXRMZW5ndGgoKSk7CisJCXJlc3VsdC5hcmd1bWVudHMoKS5hZGRBbGwoQVNUTm9kZS5jb3B5U3Vi
dHJlZXModGFyZ2V0LCBhcmd1bWVudHMoKSkpOworCQlyZXN1bHQuc2V0Qm9keSgoU3RhdGVtZW50
KSBBU1ROb2RlLmNvcHlTdWJ0cmVlKHRhcmdldCwgZ2V0Qm9keSgpKSk7CisJCXJldHVybiByZXN1
bHQ7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9k
IGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgYm9vbGVhbiBzdWJ0cmVlTWF0Y2gw
KEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7CisJCS8vIGRpc3BhdGNoIHRvIGNv
cnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0dXJuIG1hdGNoZXIubWF0Y2godGhp
cywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAq
IE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCXZvaWQgYWNjZXB0MChBU1RWaXNp
dG9yIHZpc2l0b3IpIHsKKwkJYm9vbGVhbiB2aXNpdENoaWxkcmVuID0gdmlzaXRvci52aXNpdCh0
aGlzKTsKKwkJaWYgKHZpc2l0Q2hpbGRyZW4pIHsKKwkJCS8vIHZpc2l0IGNoaWxkcmVuIGluIG5v
cm1hbCBsZWZ0IHRvIHJpZ2h0IHJlYWRpbmcgb3JkZXIKKwkJCWFjY2VwdENoaWxkcmVuKHZpc2l0
b3IsIHRoaXMuYXJndW1lbnRzKTsKKwkJCWFjY2VwdENoaWxkKHZpc2l0b3IsIGdldEJvZHkoKSk7
CisJCX0KKwkJdmlzaXRvci5lbmRWaXNpdCh0aGlzKTsKKwl9CisKKwkvKioKKwkgKiBSZXR1cm5z
IHRoZSBsaXZlIG9yZGVyZWQgbGlzdCBvZiBhcmd1bWVudHMgb2YgdGhpcyBsYW1iZGEgZXhwcmVz
c2lvbi4KKwkgKgorCSAqIEByZXR1cm4gdGhlIGxpdmUgbGlzdCBvZiBhcmd1bWVudHMgb2YgdGhp
cyBsYW1iZGEgZXhwcmVzc2lvbi4KKwkgKiAgICAoZWxlbWVudCB0eXBlOiB7QGxpbmsgVmFyaWFi
bGVEZWNsYXJhdGlvbn0gLQorCSAqICAgICBjYW4gYmUgZWl0aGVyIGEge0BsaW5rIFNpbmdsZVZh
cmlhYmxlRGVjbGFyYXRpb259IG9yCisJICogICAgICBhIHtAbGluayBUeXBlRWxpZGVkVmFyaWFi
bGVEZWNsYXJhdGlvbn0KKwkgKi8KKwlwdWJsaWMgTGlzdCBhcmd1bWVudHMoKSB7CisJCXJldHVy
biB0aGlzLmFyZ3VtZW50czsKKwl9CisKKwkvKioKKwkgKiBSZXR1cm5zIHRoZSBib2R5IG9mIHRo
aXMgbGFtYmRhIGV4cHJlc3Npb24sIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmCisJICogdGhpcyBs
YW1iZGEgZXhwcmVzc2lvbiBoYXMgPGI+bm88L2I+IGJvZHkuCisJICogPHA+CisJICogPC9wPgor
CSAqIEBleGNlcHRpb24gTnVsbFBvaW50ZXJFeGNlcHRpb24gaWY6CisJICo8dWw+CisJICogPGxp
PiBib2R5IGlzIG51bGwuIDwvbGk+CisJICo8L3VsPgorCSAqIEByZXR1cm4gdGhlIGxhbWJkYSBl
eHByZXNzaW9uIGJvZHksIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmIHRoaXMgbGFtYmRhIGV4cHJl
c3Npb24gaGFzIG5vCisJICogICAgYm9keQorCSAqLworCXB1YmxpYyBTdGF0ZW1lbnQgZ2V0Qm9k
eSgpIHsKKwkJcmV0dXJuIHRoaXMuYm9keTsKKwl9CisKKwkvKioKKwkgKiBTZXRzIG9yIGNsZWFy
cyB0aGUgYm9keSBvZiB0aGlzIGxhbWJkYSBleHByZXNzaW9uLgorCSAqCisJICogQHBhcmFtIGJv
ZHkgdGhlIGJsb2NrIG5vZGUsIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmCisJICogICAgdGhlcmUg
aXMgbm9uZQorCSAqIEBleGNlcHRpb24gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmOgorCSAq
IDx1bD4KKwkgKiA8bGk+dGhlIG5vZGUgYmVsb25ncyB0byBhIGRpZmZlcmVudCBBU1Q8L2xpPgor
CSAqIDxsaT50aGUgbm9kZSBhbHJlYWR5IGhhcyBhIHBhcmVudDwvbGk+CisJICogPGxpPmEgY3lj
bGUgaW4gd291bGQgYmUgY3JlYXRlZDwvbGk+CisJICogPGxpPiBib2R5IGlzIG51bGwgPC9saT4K
KwkgKiA8L3VsPgorCSAqLworCXB1YmxpYyB2b2lkIHNldEJvZHkoU3RhdGVtZW50IGJvZHkpIHsK
KwkJaWYgKGJvZHkgPT0gbnVsbCkgeworCQkJdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2Vw
dGlvbigpOworCQl9CisJCS8vIGEgTWV0aG9kRGVjbGFyYXRpb24gbWF5IG9jY3VyIGluIGEgQmxv
Y2sgLSBtdXN0IGNoZWNrIGN5Y2xlcworCQlBU1ROb2RlIG9sZENoaWxkID0gdGhpcy5ib2R5Owor
CQlwcmVSZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIGJvZHksIEJPRFlfUFJPUEVSVFkpOworCQl0aGlz
LmJvZHkgPSBib2R5OworCQlwb3N0UmVwbGFjZUNoaWxkKG9sZENoaWxkLCBib2R5LCBCT0RZX1BS
T1BFUlRZKTsKKwl9CisKKwkvKioKKwkgKiBSZXNvbHZlcyBhbmQgcmV0dXJucyB0aGUgYmluZGlu
ZyBmb3IgdGhlIGxhbWJkYSBleHByZXNzaW9uCisJICogPHA+CisJICogTm90ZSB0aGF0IGJpbmRp
bmdzIGFyZSBnZW5lcmFsbHkgdW5hdmFpbGFibGUgdW5sZXNzIHJlcXVlc3RlZCB3aGVuIHRoZQor
CSAqIEFTVCBpcyBiZWluZyBidWlsdC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcmV0dXJuIHRoZSBi
aW5kaW5nLCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGUgYmluZGluZyBjYW5ub3QgYmUKKwkg
KiAgICByZXNvbHZlZAorCSAqLworCXB1YmxpYyBJTWV0aG9kQmluZGluZyByZXNvbHZlQmluZGlu
ZygpIHsKKwkJcmV0dXJuIHRoaXMuYXN0LmdldEJpbmRpbmdSZXNvbHZlcigpLnJlc29sdmVNZXRo
b2QodGhpcyk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICog
TWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJaW50IG1lbVNpemUoKSB7CisJCXJl
dHVybiAzICogNDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkg
KiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgdHJlZVNpemUoKSB7CisJ
CXJldHVybgorCQkJbWVtU2l6ZSgpCisJCQkrIHRoaXMuYXJndW1lbnRzLmxpc3RTaXplKCkKKwkJ
CSsgKHRoaXMuYm9keSA9PSBudWxsID8gMCA6IGdldEJvZHkoKS50cmVlU2l6ZSgpKTsKKwl9Cit9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL1R5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVFbGlkZWRWYXJpYWJsZURl
Y2xhcmF0aW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjZlMGE3
MwotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uamF2YQpAQCAtMCww
ICsxLDIzNiBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1s
CisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVj
aWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3Mg
KEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1
cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVj
aWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0g
Q29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb207CisKK2ltcG9y
dCBqYXZhLnV0aWwuQXJyYXlMaXN0OworaW1wb3J0IGphdmEudXRpbC5MaXN0OworCisvKioKKyAq
IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUgdHlwZS4gVHlwZUVsaWRlVmFyaWFi
bGVEZWNsYXJhdGlvbiBub2RlcyBhcmUgdXNlZCBpbiB0aGUgCisgKiBkZWNsYXJhdGlvbiBvZiB2
YXJpYWJsZXMgaW4gTGFtYmRhRXhwcmVzc2lvbi4gVHlwZSBpcyBlbGlkZWQgYW5kIGRldGVybWlu
ZWQgZnJvbSB0aGUgZGVjbGFyYXRpb24KKyAqIG9mIHRoZSBpbnRlcmZhY2UgZnVuY3Rpb24gd2hp
Y2ggYmluZHMgdGhlIExhbWJkYUV4cHJlc3Npb24uIEF2YWlsYWJsZSBmcm9tIEpMUzggb253YXJk
cy4KKyAqIAorICogVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb246CisgKiAgICAgSWRlbnRp
ZmllciAKKyAqIEBzaW5jZSAzLjkKKyAqLworcHVibGljIGNsYXNzIFR5cGVFbGlkZWRWYXJpYWJs
ZURlY2xhcmF0aW9uIGV4dGVuZHMgVmFyaWFibGVEZWNsYXJhdGlvbiB7CisKKwkvKioKKwkgKiBU
aGUgIm5hbWUiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5
cGU6IHtAbGluayBTaW1wbGVOYW1lfSkuCisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBDaGls
ZFByb3BlcnR5RGVzY3JpcHRvciBOQU1FX1BST1BFUlRZID0KKwkJCW5ldyBDaGlsZFByb3BlcnR5
RGVzY3JpcHRvcihUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbi5jbGFzcywgIm5hbWUiLCBT
aW1wbGVOYW1lLmNsYXNzLCBNQU5EQVRPUlksIE5PX0NZQ0xFX1JJU0spOyAvLyROT04tTkxTLTEk
CisKKwkvKioKKwkgKiBBIGxpc3Qgb2YgcHJvcGVydHkgZGVzY3JpcHRvcnMgKGVsZW1lbnQgdHlw
ZToKKwkgKiB7QGxpbmsgU3RydWN0dXJhbFByb3BlcnR5RGVzY3JpcHRvcn0pLAorCSAqIG9yIG51
bGwgaWYgdW5pbml0aWFsaXplZC4KKwkgKi8KKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBMaXN0IFBS
T1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsKKworCXN0YXRpYyB7CisJCUxpc3QgcHJvcGVydHlMaXN0
ID0gbmV3IEFycmF5TGlzdCgyKTsKKwkJY3JlYXRlUHJvcGVydHlMaXN0KFR5cGVFbGlkZWRWYXJp
YWJsZURlY2xhcmF0aW9uLmNsYXNzLCBwcm9wZXJ0eUxpc3QpOworCQlhZGRQcm9wZXJ0eShOQU1F
X1BST1BFUlRZLCBwcm9wZXJ0eUxpc3QpOworCQlQUk9QRVJUWV9ERVNDUklQVE9SU184XzAgPSBy
ZWFwUHJvcGVydHlMaXN0KHByb3BlcnR5TGlzdCk7CisJfQorCQorCS8qKgorCSAqIFJldHVybnMg
YSBsaXN0IG9mIHN0cnVjdHVyYWwgcHJvcGVydHkgZGVzY3JpcHRvcnMgZm9yIHRoaXMgbm9kZSB0
eXBlLgorCSAqIENsaWVudHMgbXVzdCBub3QgbW9kaWZ5IHRoZSByZXN1bHQuCisJICoKKwkgKiBA
cGFyYW0gYXBpTGV2ZWwgdGhlIEFQSSBsZXZlbDsgb25lIG9mIHRoZQorCSAqIDxjb2RlPkFTVC5K
TFMqPC9jb2RlPiBjb25zdGFudHMKKwkgKiBAcmV0dXJuIGEgbGlzdCBvZiBwcm9wZXJ0eSBkZXNj
cmlwdG9ycyAoZWxlbWVudCB0eXBlOgorCSAqIHtAbGluayBTdHJ1Y3R1cmFsUHJvcGVydHlEZXNj
cmlwdG9yfSkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIExpc3QgcHJvcGVydHlEZXNjcmlwdG9ycyhp
bnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIFBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMDsKKwl9CisK
KwkvKioKKwkgKiBUaGUgdmFyaWFibGUgbmFtZTsgbGF6aWx5IGluaXRpYWxpemVkOyBkZWZhdWx0
cyB0byBhIHVuc3BlY2lmaWVkLAorCSAqIGxlZ2FsIEphdmEgaWRlbnRpZmllci4KKwkgKi8KKwlw
cml2YXRlIFNpbXBsZU5hbWUgdmFyaWFibGVOYW1lID0gbnVsbDsKKworCS8qKgorCSAqIENyZWF0
ZXMgYSBuZXcgQVNUIG5vZGUgZm9yIGEgdHlwZSBlbGlkZWQgdmFyaWFibGUgZGVjbGFyYXRpb24g
b3duZWQgYnkgdGhlIGdpdmVuCisJICogQVNULiBCeSBkZWZhdWx0LCB0aGUgdHlwZSBlbGlkZWQg
dmFyaWFibGUgZGVjbGFyYXRpb24gaGFzOiBhbiAKKwkgKiB1bnNwZWNpZmllZCAoYnV0IGxlZ2Fs
KSB2YXJpYWJsZSBuYW1lIG9ubHkuCisJICogT3RoZXIgZmllbGRzIGluaGVyaXRlZCBmcm9tIHZh
cmlhYmxlIGRlY2xhcmF0aW9uIGFyZSBub3QgdXNlZC4KKwkgKiA8cD4KKwkgKiBOLkIuIFRoaXMg
Y29uc3RydWN0b3IgaXMgcGFja2FnZS1wcml2YXRlLgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJh
bSBhc3QgdGhlIEFTVCB0aGF0IGlzIHRvIG93biB0aGlzIG5vZGUKKwkgKi8KKwlUeXBlRWxpZGVk
VmFyaWFibGVEZWNsYXJhdGlvbihBU1QgYXN0KSB7CisJCXN1cGVyKGFzdCk7CisJfQorCisJLyog
KG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIFZh
cmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJU2ltcGxlUHJvcGVydHlEZXNjcmlwdG9yIGludGVy
bmFsRXh0cmFEaW1lbnNpb25zUHJvcGVydHkoKSB7CisJCXJldHVybiBudWxsOworCX0KKworCS8q
IChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBW
YXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCUNoaWxkUHJvcGVydHlEZXNjcmlwdG9yIGludGVy
bmFsSW5pdGlhbGl6ZXJQcm9wZXJ0eSgpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCisJLyogKG9t
aXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIFZhcmlh
YmxlRGVjbGFyYXRpb24uCisJICovCisJQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxO
YW1lUHJvcGVydHkoKSB7CisJCXJldHVybiBOQU1FX1BST1BFUlRZOworCX0KKworCS8qIChvbWl0
IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBWYXJpYWJs
ZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyBpbnQgZ2V0RXh0cmFEaW1lbnNpb25zKCkgewor
CQlyZXR1cm4gMDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkg
KiBNZXRob2QgZGVjbGFyZWQgb24gVmFyaWFibGVEZWNsYXJhdGlvbi4KKwkgKi8KKwlwdWJsaWMg
dm9pZCBzZXRFeHRyYURpbWVuc2lvbnMoaW50IGRpbWVuc2lvbnMpIHsKKwkJcmV0dXJuOworCX0K
KworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJl
ZCBvbiBWYXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyBFeHByZXNzaW9uIGdldElu
aXRpYWxpemVyKCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZv
ciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gVmFyaWFibGVEZWNsYXJhdGlv
bi4KKwkgKi8KKwlwdWJsaWMgdm9pZCBzZXRJbml0aWFsaXplcihFeHByZXNzaW9uIGluaXRpYWxp
emVyKSB7CisJCXJldHVybjsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhv
ZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlMaXN0IGludGVybmFs
U3RydWN0dXJhbFByb3BlcnRpZXNGb3JUeXBlKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gcHJv
cGVydHlEZXNjcmlwdG9ycyhhcGlMZXZlbCk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3Ig
dGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmlu
YWwgQVNUTm9kZSBpbnRlcm5hbEdldFNldENoaWxkUHJvcGVydHkoQ2hpbGRQcm9wZXJ0eURlc2Ny
aXB0b3IgcHJvcGVydHksIGJvb2xlYW4gZ2V0LCBBU1ROb2RlIGNoaWxkKSB7CisJCWlmIChwcm9w
ZXJ0eSA9PSBOQU1FX1BST1BFUlRZKSB7CisJCQlpZiAoZ2V0KSB7CisJCQkJcmV0dXJuIGdldE5h
bWUoKTsKKwkJCX0gZWxzZSB7CisJCQkJc2V0TmFtZSgoU2ltcGxlTmFtZSkgY2hpbGQpOworCQkJ
CXJldHVybiBudWxsOworCQkJfQorCQl9CisJCS8vIGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRp
b24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0U2V0Q2hpbGRQ
cm9wZXJ0eShwcm9wZXJ0eSwgZ2V0LCBjaGlsZCk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBm
b3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJ
aW50IGdldE5vZGVUeXBlMCgpIHsKKwkJcmV0dXJuIFRZUEVfRUxJREVEX1ZBUklBQkxFX0RFQ0xB
UkFUSU9OOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1l
dGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCWJvb2xlYW4gc3VidHJlZU1hdGNoMChB
U1RNYXRjaGVyIG1hdGNoZXIsIE9iamVjdCBvdGhlcikgeworCQkvLyBkaXNwYXRjaCB0byBjb3Jy
ZWN0IG92ZXJsb2FkZWQgbWF0Y2ggbWV0aG9kCisJCXJldHVybiBtYXRjaGVyLm1hdGNoKHRoaXMs
IG90aGVyKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBN
ZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlBU1ROb2RlIGNsb25lMChBU1QgdGFy
Z2V0KSB7CisJCVR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIHJlc3VsdCA9IG5ldyBUeXBl
RWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbih0YXJnZXQpOworCQlyZXN1bHQuc2V0U291cmNlUmFu
Z2UoZ2V0U3RhcnRQb3NpdGlvbigpLCBnZXRMZW5ndGgoKSk7CisJCXJlc3VsdC5zZXROYW1lKChT
aW1wbGVOYW1lKSBnZXROYW1lKCkuY2xvbmUodGFyZ2V0KSk7CisJCXJldHVybiByZXN1bHQ7CisJ
fQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xh
cmVkIG9uIEFTVE5vZGUuCisJICovCisJdm9pZCBhY2NlcHQwKEFTVFZpc2l0b3IgdmlzaXRvcikg
eworCQl2aXNpdG9yLnZpc2l0KHRoaXMpOworCQlhY2NlcHRDaGlsZCh2aXNpdG9yLCBnZXROYW1l
KCkpOworCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMpOworCX0KKworCS8qIChvbWl0IGphdmFkb2Mg
Zm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBWYXJpYWJsZURlY2xhcmF0
aW9uLgorCSAqLworCXB1YmxpYyBTaW1wbGVOYW1lIGdldE5hbWUoKSB7CisJCWlmICh0aGlzLnZh
cmlhYmxlTmFtZSA9PSBudWxsKSB7CisJCQkvLyBsYXp5IGluaXQgbXVzdCBiZSB0aHJlYWQtc2Fm
ZSBmb3IgcmVhZGVycworCQkJc3luY2hyb25pemVkICh0aGlzKSB7CisJCQkJaWYgKHRoaXMudmFy
aWFibGVOYW1lID09IG51bGwpIHsKKwkJCQkJcHJlTGF6eUluaXQoKTsKKwkJCQkJdGhpcy52YXJp
YWJsZU5hbWUgPSBuZXcgU2ltcGxlTmFtZSh0aGlzLmFzdCk7CisJCQkJCXBvc3RMYXp5SW5pdCh0
aGlzLnZhcmlhYmxlTmFtZSwgTkFNRV9QUk9QRVJUWSk7CisJCQkJfQorCQkJfQorCQl9CisJCXJl
dHVybiB0aGlzLnZhcmlhYmxlTmFtZTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlz
IG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gVmFyaWFibGVEZWNsYXJhdGlvbi4KKwkg
Ki8KKwlwdWJsaWMgdm9pZCBzZXROYW1lKFNpbXBsZU5hbWUgdmFyaWFibGVOYW1lKSB7CisJCWlm
ICh2YXJpYWJsZU5hbWUgPT0gbnVsbCkgeworCQkJdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4
Y2VwdGlvbigpOworCQl9CisJCUFTVE5vZGUgb2xkQ2hpbGQgPSB0aGlzLnZhcmlhYmxlTmFtZTsK
KwkJcHJlUmVwbGFjZUNoaWxkKG9sZENoaWxkLCB2YXJpYWJsZU5hbWUsIE5BTUVfUFJPUEVSVFkp
OworCQl0aGlzLnZhcmlhYmxlTmFtZSA9IHZhcmlhYmxlTmFtZTsKKwkJcG9zdFJlcGxhY2VDaGls
ZChvbGRDaGlsZCwgdmFyaWFibGVOYW1lLCBOQU1FX1BST1BFUlRZKTsKKwl9CisKKwkvKiAob21p
dCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9k
ZS4KKwkgKi8KKwlpbnQgbWVtU2l6ZSgpIHsKKwkJcmV0dXJuIEJBU0VfTk9ERV9TSVpFICsgMSAq
IDQ7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9k
IGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJaW50IHRyZWVTaXplKCkgeworCQlyZXR1cm4K
KwkJCW1lbVNpemUoKQorCQkJKyAodGhpcy52YXJpYWJsZU5hbWUgPT0gbnVsbCA/IDAgOiBnZXRO
YW1lKCkudHJlZVNpemUoKSk7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIu
amF2YQppbmRleCBiMjcwMTQyLi5lNjllYTA0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRl
bmVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZhCkBAIC0xNywxMDIgKzE3LDcg
QEAKIGltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiAK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5BU1ROb2RlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5B
U1RWaXNpdG9yOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BYnN0cmFjdFR5cGVE
ZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGFibGVU
eXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bbm5vdGF0aW9uOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bbm5vdGF0aW9uVHlwZURlY2xhcmF0aW9uOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bbm5vdGF0aW9uVHlwZU1lbWJlckRlY2xhcmF0
aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bbm9ueW1vdXNDbGFzc0RlY2xh
cmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BcnJheUFjY2VzczsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXJyYXlDcmVhdGlvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uQXJyYXlJbml0aWFsaXplcjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uQXJyYXlUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5Bc3NlcnRTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFzc2ln
bm1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkJsb2NrOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5CbG9ja0NvbW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkJvZHlEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uQm9vbGVhbkxpdGVyYWw7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkJy
ZWFrU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5DYXN0RXhwcmVz
c2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2F0Y2hDbGF1c2U7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNoYXJhY3RlckxpdGVyYWw7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLkNsYXNzSW5zdGFuY2VDcmVhdGlvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uQ29tcGlsYXRpb25Vbml0OwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5Db25kaXRpb25hbEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkNvbnN0cnVjdG9ySW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uQ29udGludWVTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkV4dHJhRGltZW5zaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5V
bmlvblR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkRvU3RhdGVtZW50Owot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5FbXB0eVN0YXRlbWVudDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW5oYW5jZWRGb3JTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLkVudW1Db25zdGFudERlY2xhcmF0aW9uOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5FbnVtRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLkV4cHJlc3Npb25TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkZpZWxkQWNjZXNzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5GaWVsZERlY2xh
cmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Gb3JTdGF0ZW1lbnQ7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLklmU3RhdGVtZW50OwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5JbXBvcnREZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uSW5maXhFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5Jbml0aWFsaXplcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSW5z
dGFuY2VvZkV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkphdmFk
b2M7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkxhYmVsZWRTdGF0ZW1lbnQ7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkxpbmVDb21tZW50OwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5NYXJrZXJBbm5vdGF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5NZW1iZXJSZWY7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
Lk1lbWJlclZhbHVlUGFpcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0aG9k
RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZEludm9j
YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZFJlZjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0aG9kUmVmUGFyYW1ldGVyOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Nb2RpZmllcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uTmFtZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTm9ybWFsQW5u
b3RhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTnVsbExpdGVyYWw7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk51bWJlckxpdGVyYWw7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLlBhY2thZ2VEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uUGFyYW1ldGVyaXplZFR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLlBhcmVudGhlc2l6ZWRFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5Qb3N0Zml4RXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uUHJlZml4RXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uUHJpbWl0aXZlVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUXVhbGlm
aWVkTmFtZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUXVhbGlmaWVkVHlwZTsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUmV0dXJuU3RhdGVtZW50OwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TaW1wbGVOYW1lOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5TaW1wbGVUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5TaW5nbGVNZW1iZXJBbm5vdGF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5TaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN0cmluZ0xp
dGVyYWw7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN1cGVyQ29uc3RydWN0b3JJ
bnZvY2F0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdXBlckZpZWxkQWNj
ZXNzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdXBlck1ldGhvZEludm9jYXRp
b247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN3aXRjaENhc2U7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN3aXRjaFN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uU3luY2hyb25pemVkU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5UYWdFbGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5UZXh0RWxlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVGhpc0V4
cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRocm93U3RhdGVtZW50
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UcnlTdGF0ZW1lbnQ7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLlR5cGVEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
VHlwZURlY2xhcmF0aW9uU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5UeXBlTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZVBhcmFt
ZXRlcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVmFyaWFibGVEZWNsYXJhdGlv
bkV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVj
bGFyYXRpb25GcmFnbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVmFyaWFi
bGVEZWNsYXJhdGlvblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
V2hpbGVTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLldpbGRjYXJk
VHlwZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uKjsKIAogLyoqCiAgKiBJbnRl
cm5hbCBBU1QgdmlzaXRvciBmb3Igc2VyaWFsaXppbmcgYW4gQVNUIGluIGEgcXVpY2sgYW5kIGRp
cnR5IGZhc2hpb24uCkBAIC0xOTA1LDQgKzE4MTAsMjkgQEAKIAkJCX0KIAkJfQogCX0KKworCS8q
CisJICogQHNlZSBBU1RWaXNpdG9yI3Zpc2l0KExhbWJkYUV4cHJlc3Npb24pCisJICovCisJcHVi
bGljIGJvb2xlYW4gdmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBub2RlKSB7CisJCXRoaXMuYnVmZmVy
LmFwcGVuZCgiKCIpOy8vJE5PTi1OTFMtMSQKKwkJZm9yIChJdGVyYXRvciBpdCA9IG5vZGUuYXJn
dW1lbnRzKCkuaXRlcmF0b3IoKTsgaXQuaGFzTmV4dCgpOyApIHsKKwkJCVZhcmlhYmxlRGVjbGFy
YXRpb24gIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgaXQubmV4
dCgpOworCQkJdmFyaWFibGVEZWNsYXJhdGlvbi5hY2NlcHQodGhpcyk7CisJCQlpZiAoaXQuaGFz
TmV4dCgpKSB7CisJCQkJdGhpcy5idWZmZXIuYXBwZW5kKCIsIik7Ly8kTk9OLU5MUy0xJAorCQkJ
fQorCQl9CisJCXRoaXMuYnVmZmVyLmFwcGVuZCgiKSIpOy8vJE5PTi1OTFMtMSQJCQkKKwkJdGhp
cy5idWZmZXIuYXBwZW5kKCIgLT4gIik7IC8vJE5PTi1OTFMtMSQKKwkJbm9kZS5nZXRCb2R5KCku
YWNjZXB0KHRoaXMpOworCQlyZXR1cm4gZmFsc2U7CisJfQorCS8qCisJICogQHNlZSBBU1RWaXNp
dG9yI3Zpc2l0KFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKQorCSAqLworCXB1YmxpYyBi
b29sZWFuIHZpc2l0KFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUpIHsKKwkJbm9k
ZS5nZXROYW1lKCkuYWNjZXB0KHRoaXMpOworCQlyZXR1cm4gZmFsc2U7CisJfQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226974</attachid>
            <date>2013-02-12 18:51:00 -0500</date>
            <delta_ts>2013-02-28 10:18:05 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-399793--18dom-ast-Add-a-new-node-type-fo.patch</filename>
            <type>text/plain</type>
            <size>49720</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDZlOTEzMzYuLmMzNTIzNmEgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE3NCBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QzOTk3OTNhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0Nv
cHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIs
CisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0
ZXN0Mzk5NzkzOyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4iCisJCQkJKyAiCWludCBmb28oaW50
IHgpO1xuIgorCQkJCSsgIn1cbiIgCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsg
IiBJIGkgPSAgdmxhbWJkYSAtPiB7cmV0dXJuIDIwMDt9O1xuIgorCQkJCSsifVxuIjsKKwkJQ29t
cGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRo
aXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5
cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmll
bGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURl
Y2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdt
ZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdt
ZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21lbnQuZ2V0SW5p
dGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhw
cmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFF
eHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKHZsYW1iZGEpIC0+IHtcbiAg
cmV0dXJuIDIwMDtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9TdHJpbmcoKSk7CisJCWFzc2Vy
dFRydWUobGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5zaXplKCkgPT0gMSk7CisJCUlNZXRo
b2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJlc29sdmVCaW5kaW5nKCk7CisJ
CWFzc2VydEVxdWFscygicHVibGljIGludCBmb28oaW50KSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkp
OworCQlWYXJpYWJsZURlY2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVE
ZWNsYXJhdGlvbikgbGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVudHMoKS5nZXQoMCk7CisJCWFzc2Vy
dFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFR5cGVFbGlkZWRWYXJpYWJsZURl
Y2xhcmF0aW9uKTsKKwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZh
cmlhYmxlRGVjbGFyYXRpb24gPSAoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFi
bGVEZWNsYXJhdGlvbjsKKwkJYXNzZXJ0RXF1YWxzKCJ2bGFtYmRhIiwgdHlwZUVsaWRlZFZhcmlh
YmxlRGVjbGFyYXRpb24udG9TdHJpbmcoKSk7CQkKKwkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJs
ZUJpbmRpbmcgPSB0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbi5yZXNvbHZlQmluZGluZygp
OwkJCisJCUlUeXBlQmluZGluZyB0eXBlQmluZGluZyA9IHZhcmlhYmxlQmluZGluZy5nZXRUeXBl
KCk7CisJCWFzc2VydE5vdE51bGwoIk51bGwgQmluZGluZyBmb3IgbGFtYmRhIGFyZ3VtZW50Iiwg
dHlwZUJpbmRpbmcpOworCQlhc3NlcnRFcXVhbHMoImJpbmRpbmcgb2YgaW50IGV4cGVjdGVkIGZv
ciBsYW1iZGEiLCJpbnQiLHR5cGVCaW5kaW5nLmdldE5hbWUoKSk7CisJfQorCisJLyoqCisJICog
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCSAq
IAorCSAqIEB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uCisJICovCisJcHVibGljIHZvaWQgdGVz
dDM5OTc5M2IoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJdGhpcy53b3JraW5nQ29w
eSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTgvc3JjL3Rlc3QzOTk3OTMvWC5qYXZhIiwK
KwkJCQl0cnVlLyogcmVzb2x2ZSAqLyk7CisJCVN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHRl
c3QzOTk3OTM7IgorCQkJCSsgImludGVyZmFjZSBJIHtcbiIKKwkJCQkrICIJaW50IGZvbyhpbnQg
eCk7XG4iCisJCQkJKyAifVxuIiAKKwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAi
IEkgaSA9ICB2bGFtYmRhIC0+IDIwMDtcbiIKKwkJCQkrIn1cbiI7CisJCUNvbXBpbGF0aW9uVW5p
dCBjdSA9IChDb21waWxhdGlvblVuaXQpIGJ1aWxkQVNUKGNvbnRlbnRzLCB0aGlzLndvcmtpbmdD
b3B5KTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVkZWNsYXJhdGlvbiA9IChUeXBlRGVjbGFyYXRp
b24pIGdldEFTVE5vZGUoY3UsIDEpOworCQlGaWVsZERlY2xhcmF0aW9uIGZpZWxkRGVjbGFyYXRp
b24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0aW9uLmJvZHlEZWNsYXJhdGlvbnMo
KS5nZXQoMCk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCBmcmFnbWVudCA9IChWYXJp
YWJsZURlY2xhcmF0aW9uRnJhZ21lbnQpZmllbGREZWNsYXJhdGlvbi5mcmFnbWVudHMoKS5nZXQo
MCk7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IGZyYWdtZW50LmdldEluaXRpYWxpemVyKCk7
CisJCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pOwor
CQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24gPSAoTGFtYmRhRXhwcmVzc2lvbill
eHByZXNzaW9uOworCQlhc3NlcnRFcXVhbHMoIih2bGFtYmRhKSAtPiAyMDA7XG4iLCBsYW1iZGFF
eHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gbGFtYmRh
RXhwcmVzc2lvbi5yZXNvbHZlQmluZGluZygpOworCQlhc3NlcnRFcXVhbHMoInB1YmxpYyBpbnQg
Zm9vKGludCkgIiwgYmluZGluZy50b1N0cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHBy
ZXNzaW9uLmFyZ3VtZW50cygpLnNpemUoKSA9PSAxKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiB2
YXJpYWJsZURlY2xhcmF0aW9uID0gKFZhcmlhYmxlRGVjbGFyYXRpb24pIGxhbWJkYUV4cHJlc3Np
b24uYXJndW1lbnRzKCkuZ2V0KDApOworCQlhc3NlcnRUcnVlKHZhcmlhYmxlRGVjbGFyYXRpb24g
aW5zdGFuY2VvZiBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbik7CisJCVR5cGVFbGlkZWRW
YXJpYWJsZURlY2xhcmF0aW9uIHR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uID0gKFR5cGVF
bGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKXZhcmlhYmxlRGVjbGFyYXRpb247CisJCWFzc2VydEVx
dWFscygidmxhbWJkYSIsIHR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uLnRvU3RyaW5nKCkp
OwkJCisJfQorCQorCS8qKgorCSAqIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgor
CSAqLworCXB1YmxpYyB2b2lkIHRlc3QzOTk3OTNjKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlv
biB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3Ny
Yy90ZXN0Mzk5NzkzL1guamF2YSIsCisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcg
Y29udGVudHMgPSAicGFja2FnZSB0ZXN0Mzk5NzkzOyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4i
CisJCQkJKyAiCU9iamVjdCBmb28oaW50IFtdIGlhKTtcbiIKKwkJCQkrICJ9XG4iIAorCQkJCSsg
InB1YmxpYyBjbGFzcyBYIHtcbiIKKwkJCQkrICIgSSBpID0gKGludCBbXSBpYSkgLT57XG4iCisJ
CQkJKyAiICAJcmV0dXJuIGlhLmNsb25lKCk7IgorCQkJCSsgIn07XG4iCisJCQkJKyJ9XG4iOwor
CQlDb21waWxhdGlvblVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50
cywgdGhpcy53b3JraW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24g
PSAoVHlwZURlY2xhcmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAxKTsKKwkJRmllbGREZWNsYXJhdGlv
biBmaWVsZERlY2xhcmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5i
b2R5RGVjbGFyYXRpb25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQg
ZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24u
ZnJhZ21lbnRzKCkuZ2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5n
ZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1i
ZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExh
bWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoaW50W10gaWEpIC0+
IHtcbiAgcmV0dXJuIGlhLmNsb25lKCk7XG59XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5n
KCkpOworCQlJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gbGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZl
QmluZGluZygpOworCQlhc3NlcnRFcXVhbHMoInB1YmxpYyBqYXZhLmxhbmcuT2JqZWN0IGZvbyhp
bnRbXSkgIiwgYmluZGluZy50b1N0cmluZygpKTsKKwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNz
aW9uLmFyZ3VtZW50cygpLnNpemUoKSA9PSAxKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiB2YXJp
YWJsZURlY2xhcmF0aW9uID0gKFZhcmlhYmxlRGVjbGFyYXRpb24pIGxhbWJkYUV4cHJlc3Npb24u
YXJndW1lbnRzKCkuZ2V0KDApOworCQlhc3NlcnRUcnVlKHZhcmlhYmxlRGVjbGFyYXRpb24gaW5z
dGFuY2VvZiBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJU2luZ2xlVmFyaWFibGVEZWNs
YXJhdGlvbiBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gKFNpbmdsZVZhcmlhYmxlRGVjbGFy
YXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJYXNzZXJ0RXF1YWxzKCJpbnRbXSBpYSIsIHNp
bmdsZVZhcmlhYmxlRGVjbGFyYXRpb24udG9TdHJpbmcoKSk7CQkKKwl9CisKKwkvKioKKwkgKiBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICog
CisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0
Mzk5NzkzZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5
ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9zcmMvdGVzdDM5OTc5My9YLmphdmEiLAor
CQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVz
dDM5OTc5MzsiICsKKwkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJIgl2b2lkIGRvaXQoKTtc
biIgKworCQkJCSJ9XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIgkJSSBp
ID0gKCkgLT4ge1xuIiArCisJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiIgKwor
CQkJCSIJCQlJIGogPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbih0
aGlzKTtcbiIgKworCQkJCSIJCQkJSSBrID0gKCkgLT4ge1xuIiArCisJCQkJIgkJCQkJU3lzdGVt
Lm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQl9O1xuIiArCisJCQkJIgkJCX07XG4i
ICsKKwkJCQkiCQl9O1xuIiArCisJCQkJIgl9XG4iOyAKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0g
KENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOwor
CQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0
QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChG
aWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgw
KTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVj
bGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJ
RXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNz
ZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJk
YUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Np
b247CisJCWFzc2VydEVxdWFscygiKCkgLT4ge1xuICBTeXN0ZW0ub3V0LnByaW50bG4odGhpcyk7
XG4gIEkgaj0oKSAtPiB7XG4gICAgU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuICAgIEkgaz0o
KSAtPiB7XG4gICAgICBTeXN0ZW0ub3V0LnByaW50bG4odGhpcyk7XG4gICAgfVxuO1xuICB9XG47
XG59XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlJTWV0aG9kQmluZGluZyBi
aW5kaW5nID0gbGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZlQmluZGluZygpOworCQlhc3NlcnRFcXVh
bHMoInB1YmxpYyB2b2lkIGRvaXQoKSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkpOworCQlhc3NlcnRU
cnVlKGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDApOworCX0KKworCS8q
KgorCSAqIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3
OTMKKwkgKiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2
b2lkIHRlc3QzOTk3OTNlKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29y
a2luZ0NvcHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1gu
amF2YSIsCisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFj
a2FnZSB0ZXN0Mzk5NzkzOyIgKworCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkiICBKIGZv
bygpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgSiB7XG4iICsKKwkJCQkiICBp
bnQgZm9vKCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCSIgICAgSSBJID0gKCkgLT4gKCkgLT4gMTA7XG4iICsKKwkJCQkifVxuIjsKKwkJCQorCQlD
b21waWxhdGlvblVuaXQgY3UgPSAoQ29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywg
dGhpcy53b3JraW5nQ29weSk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAo
VHlwZURlY2xhcmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAyKTsKKwkJRmllbGREZWNsYXJhdGlvbiBm
aWVsZERlY2xhcmF0aW9uID0gKEZpZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5
RGVjbGFyYXRpb25zKCkuZ2V0KDApOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJh
Z21lbnQgPSAoVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJh
Z21lbnRzKCkuZ2V0KDApOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJ
bml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFF
eHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJk
YUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiAoKSAtPiAxMDtc
biIsIGxhbWJkYUV4cHJlc3Npb24udG9TdHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRp
bmcgPSBsYW1iZGFFeHByZXNzaW9uLnJlc29sdmVCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygi
cHVibGljIHRlc3QzOTk3OTMuSiBmb28oKSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkpOworCQlhc3Nl
cnRUcnVlKGxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuc2l6ZSgpID09IDApOworCX0JCiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJUZXN0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9t
L0FTVE1hdGNoZXJUZXN0LmphdmEKaW5kZXggZTUzMTFkZC4uNGExYjI0ZiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUTWF0Y2hl
clRlc3QuamF2YQpAQCAtNTUxLDYgKzU1MSwxMiBAQAogCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChJ
bnN0YW5jZW9mRXhwcmVzc2lvbiBub2RlLCBPYmplY3Qgb3RoZXIpIHsKIAkJCXJldHVybiBzdGFu
ZGFyZEJvZHkobm9kZSwgb3RoZXIsIHRoaXMuc3VwZXJNYXRjaCA/IHN1cGVyLm1hdGNoKG5vZGUs
IG90aGVyKSA6IGZhbHNlKTsKIAkJfQorCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChMYW1iZGFFeHBy
ZXNzaW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQkJcmV0dXJuIHN0YW5kYXJkQm9keShub2Rl
LCBvdGhlciwgdGhpcy5zdXBlck1hdGNoID8gc3VwZXIubWF0Y2gobm9kZSwgb3RoZXIpIDogZmFs
c2UpOworCQl9CisJCXB1YmxpYyBib29sZWFuIG1hdGNoKFR5cGVFbGlkZWRWYXJpYWJsZURlY2xh
cmF0aW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQkJcmV0dXJuIHN0YW5kYXJkQm9keShub2Rl
LCBvdGhlciwgdGhpcy5zdXBlck1hdGNoID8gc3VwZXIubWF0Y2gobm9kZSwgb3RoZXIpIDogZmFs
c2UpOworCQl9CiAJfQogCiAJLyoqCkBAIC0xNTYzLDQgKzE1NjksNTMgQEAKIAkJeDEuZXh0cmFE
aW1lbnNpb25JbmZvcygpLmFkZCh4Mik7CiAJCWJhc2ljTWF0Y2goeDEpOwogCX0KKworCS8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwlwdWJs
aWMgdm9pZCB0ZXN0TGFtYmRhRXhwcmVzc2lvbnMxKCkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2
ZWwoKSA8IEFTVC5KTFM4KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiB4
MSA9IHRoaXMuYXN0Lm5ld0xhbWJkYUV4cHJlc3Npb24oKTsKKwkJVHlwZUVsaWRlZFZhcmlhYmxl
RGVjbGFyYXRpb24geDIgPSB0aGlzLmFzdC5uZXdUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlv
bigpOworCQl4Mi5zZXROYW1lKHRoaXMuTjEpOworCQl4MS5hcmd1bWVudHMoKS5hZGQoeDIpOwor
CQl4MS5zZXRCb2R5KHRoaXMuYXN0Lm5ld0Jsb2NrKCkpOworCQliYXNpY01hdGNoKHgxKTsKKwl9
CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5
NzkzCisJcHVibGljIHZvaWQgdGVzdExhbWJkYUV4cHJlc3Npb25zMigpIHsKKwkJaWYgKHRoaXMu
YXN0LmFwaUxldmVsKCkgPCBBU1QuSkxTOCkgeworCQkJcmV0dXJuOworCQl9CisJCUxhbWJkYUV4
cHJlc3Npb24geDEgPSB0aGlzLmFzdC5uZXdMYW1iZGFFeHByZXNzaW9uKCk7CisJCXgxLnNldEJv
ZHkodGhpcy5hc3QubmV3QmxvY2soKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KKworCS8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwlwdWJs
aWMgdm9pZCB0ZXN0TGFtYmRhRXhwcmVzc2lvbnMzKCkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2
ZWwoKSA8IEFTVC5KTFM4KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiB4
MSA9IHRoaXMuYXN0Lm5ld0xhbWJkYUV4cHJlc3Npb24oKTsKKwkJeDEuc2V0Qm9keSh0aGlzLmFz
dC5uZXdFeHByZXNzaW9uU3RhdGVtZW50KHRoaXMuTjIpKTsKKwkJYmFzaWNNYXRjaCh4MSk7CisJ
fQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5
OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHByZXNzaW9uczQoKSB7CisJCWlmICh0aGlz
LmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJCXJldHVybjsKKwkJfQorCQlMYW1iZGFF
eHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRhRXhwcmVzc2lvbigpOworCQlTaW5nbGVW
YXJpYWJsZURlY2xhcmF0aW9uIHgyID0gdGhpcy5hc3QubmV3U2luZ2xlVmFyaWFibGVEZWNsYXJh
dGlvbigpOworCQl4Mi5tb2RpZmllcnMoKS5hZGQodGhpcy5NT0QxKTsKKwkJeDIubW9kaWZpZXJz
KCkuYWRkKHRoaXMuTU9EMik7CisJCXgyLnNldFR5cGUodGhpcy5UMSk7CisJCXgyLnNldE5hbWUo
dGhpcy5OMSk7CisJCXgxLmFyZ3VtZW50cygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5h
c3QubmV3RXhwcmVzc2lvblN0YXRlbWVudCh0aGlzLk4yKSk7CisJCWJhc2ljTWF0Y2goeDEpOwor
CX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggZjU0ZTYzMy4uNTdhZjgwYSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTQ5LDcgKzQ5LDcgQEAKIAlwcml2YXRlIE1ldGhv
ZFNjb3BlIHNjb3BlOwogCXByaXZhdGUgQ29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRpb25SZXN1
bHQ7CiAJcHJpdmF0ZSBib29sZWFuIGlnbm9yZUZ1cnRoZXJJbnZlc3RpZ2F0aW9uOwotCXByaXZh
dGUgTWV0aG9kQmluZGluZyBiaW5kaW5nOworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmc7
CiAJCiAJcHVibGljIExhbWJkYUV4cHJlc3Npb24oQ29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRp
b25SZXN1bHQsIEFyZ3VtZW50IFtdIGFyZ3VtZW50cywgU3RhdGVtZW50IGJvZHkpIHsKIAkJdGhp
cy5jb21waWxhdGlvblJlc3VsdCA9IGNvbXBpbGF0aW9uUmVzdWx0OwpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3BhcnNlci9QYXJzZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEKaW5kZXgg
MTE5OTkzZi4uNDM5Y2FiNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCkBAIC03ODEyLDYgKzc4MTIsMTAgQEAKIAl0
aGlzLmludFB0ci0tOyAgLy8gJyknIHBvc2l0aW9uLCBkaXNjYXJkIGZvciBub3cuCiAJbGV4cC5z
b3VyY2VTdGFydCA9IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07IC8vICcoJyBwb3NpdGlv
biBvciBpZGVudGlmaWVyIHBvc2l0aW9uLgogCWxleHAuc291cmNlRW5kID0gYm9keS5zb3VyY2VF
bmQ7CisJaWYgKGJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7CisJCUV4cHJlc3Npb24gZXhw
cmVzc2lvbiA9IChFeHByZXNzaW9uKSBib2R5OworCQlleHByZXNzaW9uLnN0YXRlbWVudEVuZCA9
IGJvZHkuc291cmNlRW5kOworCX0KIAlwdXNoT25FeHByZXNzaW9uU3RhY2sobGV4cCk7CiAJaWYg
KCF0aGlzLnBhcnNpbmdKYXZhOFBsdXMpIHsKIAkJcHJvYmxlbVJlcG9ydGVyKCkubGFtYmRhRXhw
cmVzc2lvbnNOb3RCZWxvdzE4KGxleHApOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEKaW5kZXggYTE1ZTY3
Ny4uNjBiMmFmNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCkBAIC0yMTQ4LDYgKzIxNDgsMTggQEAK
IAkJcmV0dXJuIHJlc3VsdDsKIAl9CiAKKwkvKioKKwkgKiBDcmVhdGVzIGFuIHVucGFyZW50ZWQg
dHlwZSBlbGlkZWQgdmFyaWFibGUgZGVjbGFyYXRpb24gbm9kZSBvd25lZCBieSB0aGlzIEFTVC4K
KwkgKiBCeSBkZWZhdWx0LCB0aGUgZGVjbGFyYXRpb24gaXMgZm9yIGEgdmFyaWFibGUgd2l0aCBh
biB1bnNwZWNpZmllZCwgYnV0CisJICogbGVnYWwsIG5hbWUuCisJICoKKwkgKiBAcmV0dXJuIGEg
bmV3IHVucGFyZW50ZWQgdHlwZSBlbGlkZWQgdmFyaWFibGUgZGVjbGFyYXRpb24gbm9kZQorCSAq
IEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24g
bmV3VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24oKSB7CisJCVR5cGVFbGlkZWRWYXJpYWJs
ZURlY2xhcmF0aW9uIHJlc3VsdCA9IG5ldyBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbih0
aGlzKTsKKwkJcmV0dXJuIHJlc3VsdDsKKwl9CiAJLy89PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09IEVYUFJFU1NJT05TID09PT09PT09PT09PT09PT09PT09PT09PT09PQogCS8qKgogCSAq
IENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgdW5wYXJlbnRlZCBzdHJpbmcgbGl0ZXJhbCBub2Rl
IGZvcgpAQCAtMjQ0MCw2ICsyNDUyLDE5IEBACiAJCXJldHVybiByZXN1bHQ7CiAJfQogCisJLyoq
CisJICogQ3JlYXRlcyBhbiB1bnBhcmVudGVkIGxhbWJkYSBleHByZXNzaW9uIG5vZGUgb3duZWQg
YnkgdGhpcyBBU1QuCisJICogQnkgZGVmYXVsdCwgdGhlIGRlY2xhcmF0aW9uIGlzIGZvciBhIGxh
bWJkYSBleHByZXNzaW9uIHdpdGggYXJndW1lbnQKKwkgKiBsaXN0IGFuZCBubyBib2R5LgorCSAq
IAorCSAqIEByZXR1cm4gYSBuZXcgdW5wYXJlbnRlZCBsYW1iZGEgZXhwcmVzc2lvbiBub2RlCisJ
ICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uIG5ld0xhbWJkYUV4
cHJlc3Npb24oKSB7CisJCUxhbWJkYUV4cHJlc3Npb24gcmVzdWx0ID0gbmV3IExhbWJkYUV4cHJl
c3Npb24odGhpcyk7CisJCXJldHVybiByZXN1bHQ7CisJfQorCQogCS8vPT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PSBTVEFURU1FTlRTID09PT09PT09PT09PT09PT09PT09PT09PT09PQog
CS8qKgogCSAqIENyZWF0ZXMgYSBuZXcgdW5wYXJlbnRlZCBsb2NhbCB2YXJpYWJsZSBkZWNsYXJh
dGlvbiBzdGF0ZW1lbnQgbm9kZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9t
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEK
aW5kZXggYmU0NjY1Yy4uZjY0YjI3NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRl
ci5qYXZhCkBAIC0xNzIwLDYgKzE3MjAsOSBAQAogCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9m
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5jZSkgewog
CQkJcmV0dXJuIGNvbnZlcnQoKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
VHlwZVJlZmVyZW5jZSkgZXhwcmVzc2lvbik7CiAJCX0KKwkJaWYgKGV4cHJlc3Npb24gaW5zdGFu
Y2VvZiBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Np
b24pIHsKKwkJCXJldHVybiBjb252ZXJ0KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24pIGV4cHJlc3Npb24pOworCQl9CiAJCXJldHVybiBudWxs
OwogCX0KIApAQCAtMjEzNyw2ICsyMTQwLDQ1IEBACiAJCXJldHVybiBleHByOwogCX0KIAorCXB1
YmxpYyBFeHByZXNzaW9uIGNvbnZlcnQob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5MYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCQkvLyB3aWxsIHJldHVybiBhIExhbWJk
YUV4cHJlc3Npb24KKwkJRXhwcmVzc2lvbiBleHByOworCQlpbnQgc291cmNlU3RhcnQgPSBsYW1i
ZGEuc291cmNlU3RhcnQ7CisKKwkJLy8gcmV0dXJucyBhIE1ldGhvZEludm9jYXRpb24KKwkJZmlu
YWwgTGFtYmRhRXhwcmVzc2lvbglsYW1iZGFFeHByZXNzaW9uID0gbmV3IExhbWJkYUV4cHJlc3Np
b24odGhpcy5hc3QpOworCQlpZiAodGhpcy5yZXNvbHZlQmluZGluZ3MpIHsKKwkJCXJlY29yZE5v
ZGVzKGxhbWJkYUV4cHJlc3Npb24sIGxhbWJkYSk7CisJCX0KKwkJb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudFtdIGFyZ3VtZW50cyA9IGxhbWJkYS5hcmd1bWVu
dHM7CisJCWlmIChhcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGFyZ3VtZW50c0xlbmd0aCA9
IGFyZ3VtZW50cy5sZW5ndGg7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50c0xlbmd0
aDsgaSsrKSB7CisJCQkJb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1
bWVudCBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJndW1lbnQudHlwZSA9PSBu
dWxsKSB7CisJCQkJCS8vIGNyZWF0ZSBhIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIE9i
amVjdC4KKwkJCQkJVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gdHlwZUVsaWRlZFZhcmlh
YmxlRGVjbGFyYXRpb24gPSBuZXcgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24odGhpcy5h
c3QpOworCQkJCQlTaW1wbGVOYW1lIHNpbXBsZU5hbWUgPSBuZXcgU2ltcGxlTmFtZSh0aGlzLmFz
dCk7CisJCQkJCVN0cmluZyBzID0gbmV3IFN0cmluZyhhcmd1bWVudHNbaV0ubmFtZSk7CisJCQkJ
CXNpbXBsZU5hbWUuc2V0SWRlbnRpZmllcihzKTsKKwkJCQkJaWYgKHRoaXMucmVzb2x2ZUJpbmRp
bmdzKSB7CisJCQkJCQlyZWNvcmROb2RlcyhzaW1wbGVOYW1lLCBhcmd1bWVudCk7CisJCQkJCQly
ZWNvcmROb2Rlcyh0eXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiwgYXJndW1lbnQpOworCQkJ
CQl9CisJCQkJCXR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uLnNldE5hbWUoc2ltcGxlTmFt
ZSk7CisJCQkJCWxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRzKCkuYWRkKHR5cGVFbGlkZWRWYXJp
YWJsZURlY2xhcmF0aW9uKTsJCQkJCQorCQkJCX0gZWxzZSB7CisJCQkJCVNpbmdsZVZhcmlhYmxl
RGVjbGFyYXRpb24gc2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbiA9IGNvbnZlcnQoYXJndW1lbnQp
OworCQkJCQlsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50cygpLmFkZChzaW5nbGVWYXJpYWJsZURl
Y2xhcmF0aW9uKTsJCQkJCQorCQkJCX0KKwkJCX0KKwkJfQorCQlsYW1iZGFFeHByZXNzaW9uLnNl
dEJvZHkoY29udmVydChsYW1iZGEuYm9keSkpOworCQlleHByID0gbGFtYmRhRXhwcmVzc2lvbjsK
KwkJZXhwci5zZXRTb3VyY2VSYW5nZShzb3VyY2VTdGFydCwgbGFtYmRhLnNvdXJjZUVuZCAtIHNv
dXJjZVN0YXJ0ICsgMSk7CisJCXJldHVybiBleHByOworCX0KKwogCXB1YmxpYyBNYXJrZXJBbm5v
dGF0aW9uIGNvbnZlcnQob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5NYXJr
ZXJBbm5vdGF0aW9uIGFubm90YXRpb24pIHsKIAkJZmluYWwgTWFya2VyQW5ub3RhdGlvbiBtYXJr
ZXJBbm5vdGF0aW9uID0gbmV3IE1hcmtlckFubm90YXRpb24odGhpcy5hc3QpOwogCQlzZXRUeXBl
TmFtZUZvckFubm90YXRpb24oYW5ub3RhdGlvbiwgbWFya2VyQW5ub3RhdGlvbik7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VE1hdGNoZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vQVNUTWF0Y2hlci5qYXZhCmluZGV4IGM2ZmNiNDQuLjNiZjYzM2QgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNU
TWF0Y2hlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9kb20vQVNUTWF0Y2hlci5qYXZhCkBAIC0xOTIxLDYgKzE5MjEsNTIgQEAKIAkgKiBA
cmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBzdWJ0cmVlIG1hdGNoZXMsIG9yCiAJICog
ICA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhleSBkbyBub3QgbWF0Y2ggb3IgdGhlIG90aGVyIG9i
amVjdCBoYXMgYQogCSAqICAgZGlmZmVyZW50IG5vZGUgdHlwZSBvciBpcyA8Y29kZT5udWxsPC9j
b2RlPgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiBtYXRjaChUeXBlRWxp
ZGVkVmFyaWFibGVEZWNsYXJhdGlvbiBub2RlLCBPYmplY3Qgb3RoZXIpIHsKKwkJaWYgKCEob3Ro
ZXIgaW5zdGFuY2VvZiBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbikpIHsKKwkJCXJldHVy
biBmYWxzZTsKKwkJfQorCQlUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbiBvID0gKFR5cGVF
bGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKSBvdGhlcjsKKwkJcmV0dXJuIHNhZmVTdWJ0cmVlTWF0
Y2gobm9kZS5nZXROYW1lKCksIG8uZ2V0TmFtZSgpKTsKKwl9CisKKwkvKioKKwkgKiBSZXR1cm5z
IHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgYW5kIHRoZSBvdGhlciBvYmplY3QgbWF0Y2guCisJICog
PHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gcHJvdmlkZWQgYnkgdGhpcyBjbGFz
cyB0ZXN0cyB3aGV0aGVyIHRoZQorCSAqIG90aGVyIG9iamVjdCBpcyBhIG5vZGUgb2YgdGhlIHNh
bWUgdHlwZSB3aXRoIHN0cnVjdHVyYWxseSBpc29tb3JwaGljCisJICogY2hpbGQgc3VidHJlZXMu
IFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0aG9kIGFzIG5lZWRlZC4KKwkgKiA8L3A+
CisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUKKwkgKiBAcGFyYW0gb3RoZXIgdGhlIG90aGVyIG9i
amVjdCwgb3IgPGNvZGU+bnVsbDwvY29kZT4KKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+
IGlmIHRoZSBzdWJ0cmVlIG1hdGNoZXMsIG9yCisJICogICA8Y29kZT5mYWxzZTwvY29kZT4gaWYg
dGhleSBkbyBub3QgbWF0Y2ggb3IgdGhlIG90aGVyIG9iamVjdCBoYXMgYQorCSAqICAgZGlmZmVy
ZW50IG5vZGUgdHlwZSBvciBpcyA8Y29kZT5udWxsPC9jb2RlPgorCSAqIEBzaW5jZSAzLjkKKwkg
Ki8KKwlwdWJsaWMgYm9vbGVhbiBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVjdCBv
dGhlcikgeworCQlpZiAoIShvdGhlciBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pKSB7CisJ
CQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiBvID0gKExhbWJkYUV4cHJl
c3Npb24pIG90aGVyOworCQlyZXR1cm4Jc2FmZVN1YnRyZWVMaXN0TWF0Y2gobm9kZS5hcmd1bWVu
dHMoKSwgby5hcmd1bWVudHMoKSkKKwkJCQkmJiBzYWZlU3VidHJlZU1hdGNoKG5vZGUuZ2V0Qm9k
eSgpLCBvLmdldEJvZHkoKSk7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVyIHRoZSBn
aXZlbiBub2RlIGFuZCB0aGUgb3RoZXIgb2JqZWN0IG1hdGNoLgorCSAqIDxwPgorCSAqIFRoZSBk
ZWZhdWx0IGltcGxlbWVudGF0aW9uIHByb3ZpZGVkIGJ5IHRoaXMgY2xhc3MgdGVzdHMgd2hldGhl
ciB0aGUKKwkgKiBvdGhlciBvYmplY3QgaXMgYSBub2RlIG9mIHRoZSBzYW1lIHR5cGUgd2l0aCBz
dHJ1Y3R1cmFsbHkgaXNvbW9ycGhpYworCSAqIGNoaWxkIHN1YnRyZWVzLiBTdWJjbGFzc2VzIG1h
eSBvdmVycmlkZSB0aGlzIG1ldGhvZCBhcyBuZWVkZWQuCisJICogPC9wPgorCSAqCisJICogQHBh
cmFtIG5vZGUgdGhlIG5vZGUKKwkgKiBAcGFyYW0gb3RoZXIgdGhlIG90aGVyIG9iamVjdCwgb3Ig
PGNvZGU+bnVsbDwvY29kZT4KKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBz
dWJ0cmVlIG1hdGNoZXMsIG9yCisJICogICA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhleSBkbyBu
b3QgbWF0Y2ggb3IgdGhlIG90aGVyIG9iamVjdCBoYXMgYQorCSAqICAgZGlmZmVyZW50IG5vZGUg
dHlwZSBvciBpcyA8Y29kZT5udWxsPC9jb2RlPgogCSAqLwogCXB1YmxpYyBib29sZWFuIG1hdGNo
KFN0cmluZ0xpdGVyYWwgbm9kZSwgT2JqZWN0IG90aGVyKSB7CiAJCWlmICghKG90aGVyIGluc3Rh
bmNlb2YgU3RyaW5nTGl0ZXJhbCkpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1ROb2RlLmphdmEKaW5kZXgg
Zjc5ZTZlZC4uOTlkMDg2NSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1ROb2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1ROb2RlLmphdmEKQEAgLTc4Miw2
ICs3ODIsMjIgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBFWFRSQV9ESU1FTlNJT04gPSA4
NTsKIAogCS8qKgorCSAqIE5vZGUgdHlwZSBjb25zdGFudCBpbmRpY2F0aW5nIGEgbm9kZSBvZiB0
eXBlCisJICogPGNvZGU+VHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb248L2NvZGU+LgorCSAq
IEBzZWUgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24KKwkgKiBAc2luY2UgMy45CisJICov
CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVFlQRV9FTElERURfVkFSSUFCTEVfREVDTEFSQVRJ
T04gPSA4NjsKKworCS8qKgorCSAqIE5vZGUgdHlwZSBjb25zdGFudCBpbmRpY2F0aW5nIGEgbm9k
ZSBvZiB0eXBlCisJICogPGNvZGU+TGFtYmRhRXhwcmVzc2lvbjwvY29kZT4uCisJICogQHNlZSBM
YW1iZGFFeHByZXNzaW9uCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBzdGF0aWMgZmlu
YWwgaW50IExBTUJEQV9FWFBSRVNTSU9OID0gODc7CisKKwkvKioKIAkgKiBSZXR1cm5zIHRoZSBu
b2RlIGNsYXNzIGZvciB0aGUgY29ycmVzcG9uZGluZyBub2RlIHR5cGUuCiAJICoKIAkgKiBAcGFy
YW0gbm9kZVR5cGUgQVNUIG5vZGUgdHlwZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2
YQppbmRleCAyNjJkNTg0Li4wYmU0ZjlkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3Iu
amF2YQpAQCAtMTI1Miw4ICsxMjUyLDQyIEBACiAJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2Rl
PiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZCBiZQogCSAqIHZpc2l0ZWQsIGFu
ZCA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQK
IAkgKiBiZSBza2lwcGVkCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIHZp
c2l0KFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGUpIHsKKwkJcmV0dXJuIHRydWU7
CisJfQorCisJLyoqCisJICogVmlzaXRzIHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2Rl
LgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyBh
bmQgcmV0dXJuIHRydWUuCisJICogU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9w
PgorCSAqCisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAcmV0dXJuIDxj
b2RlPnRydWU8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlCisJ
ICogdmlzaXRlZCwgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhp
cyBub2RlIHNob3VsZAorCSAqIGJlIHNraXBwZWQKIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiB2aXNp
dChTdHJpbmdMaXRlcmFsIG5vZGUpIHsKKwkJcmV0dXJuIHRydWU7CisJfQorCisJLyoqCisJICog
VmlzaXRzIHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRo
ZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyBhbmQgcmV0dXJuIHRydWUuCisJ
ICogU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFt
IG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlm
IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlCisJICogdmlzaXRlZCwgYW5kIDxj
b2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZAorCSAq
IGJlIHNraXBwZWQKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQo
TGFtYmRhRXhwcmVzc2lvbiBub2RlKSB7CiAJCXJldHVybiB0cnVlOwogCX0KIApAQCAtMjM5MSw2
ICsyNDI1LDMyIEBACiAJICogPC9wPgogCSAqCiAJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8g
dmlzaXQKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHZvaWQgZW5kVmlzaXQoVHlwZUVs
aWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gbm9kZSkgeworCQkvLyBkZWZhdWx0IGltcGxlbWVudGF0
aW9uOiBkbyBub3RoaW5nCisJfQorCisJLyoqCisJICogRW5kIG9mIHZpc2l0IHRoZSBnaXZlbiB0
eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVu
dGF0aW9uIGRvZXMgbm90aGluZy4gU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9w
PgorCSAqCisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAc2luY2UgMy45
CisJICovCisJcHVibGljIHZvaWQgZW5kVmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBub2RlKSB7CisJ
CS8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb246IGRvIG5vdGhpbmcKKwl9CisKKwkvKioKKwkgKiBF
bmQgb2YgdmlzaXQgdGhlIGdpdmVuIHR5cGUtc3BlY2lmaWMgQVNUIG5vZGUuCisJICogPHA+CisJ
ICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nLiBTdWJjbGFzc2VzIG1h
eSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZSB0
byB2aXNpdAogCSAqLwogCXB1YmxpYyB2b2lkIGVuZFZpc2l0KFN0cmluZ0xpdGVyYWwgbm9kZSkg
ewogCQkvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0JpbmRpbmdS
ZXNvbHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9CaW5kaW5nUmVzb2x2ZXIuamF2YQppbmRleCBkMjJjYjZiLi42NmE5OGMzIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0JpbmRpbmdSZXNvbHZlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEKQEAgLTEsMTAgKzEsMTQg
QEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
ICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxl
IGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KQEAgLTU3Nyw2ICs1ODEsMjcgQEAKIAl9CiAKIAkvKioKKwkgKiBSZXNvbHZlcyB0aGUg
Z2l2ZW4gTGFtYmRhIEV4cHJlc3Npb24gYW5kIHJldHVybnMgdGhlIGJpbmRpbmcgZm9yIGl0Lgor
CSAqIDxwPgorCSAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiA8Y29kZT5MYW1iZGFFeHByZXNzaW9u
LnJlc29sdmVCaW5kaW5nPC9jb2RlPgorCSAqIGZvcndhcmRzIHRvIHRoaXMgbWV0aG9kLiBIb3cg
dGhlIG1ldGhvZCByZXNvbHZlcyBpcyBvZnRlbiBhIGZ1bmN0aW9uIG9mCisJICogdGhlIGNvbnRl
eHQgaW4gd2hpY2ggdGhlIG1ldGhvZCBkZWNsYXJhdGlvbiBub2RlIGlzIGVtYmVkZGVkIGFzIHdl
bGwgYXMKKwkgKiB0aGUgbWV0aG9kIGRlY2xhcmF0aW9uIHN1YnRyZWUgaXRzZWxmLgorCSAqIDwv
cD4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB0aGlzIG1ldGhv
ZCByZXR1cm5zIDxjb2RlPm51bGw8L2NvZGU+LgorCSAqIFN1YmNsYXNzZXMgbWF5IHJlaW1wbGVt
ZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBsYW1iZGEgTGFtYmRhRXhyZXNzaW9uIG9m
IGludGVyZXN0CisJICogQHJldHVybiB0aGUgYmluZGluZyBmb3IgdGhlIGdpdmVuIGxhbWJkYSBl
eHByZXNzaW9uCisJICogICAgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm8gYmluZGluZyBpcyBhdmFp
bGFibGUKKwkgKi8KKwlJTWV0aG9kQmluZGluZyByZXNvbHZlTWV0aG9kKExhbWJkYUV4cHJlc3Np
b24gbGFtYmRhKSB7CisJCXJldHVybiBudWxsOworCX0KKworCS8qKgogCSAqIFJlc29sdmVzIHRo
ZSBnaXZlbiBtZXRob2QgaW52b2NhdGlvbiBhbmQgcmV0dXJucyB0aGUgYmluZGluZyBmb3IgaXQu
CiAJICogPHA+CiAJICogVGhlIGltcGxlbWVudGF0aW9uIG9mIDxjb2RlPk1ldGhvZEludm9jYXRp
b24ucmVzb2x2ZU1ldGhvZEJpbmRpbmc8L2NvZGU+CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRCaW5kaW5nUmVzb2x2
ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vRGVmYXVsdEJpbmRpbmdSZXNvbHZlci5qYXZhCmluZGV4IDA1NWNkODUuLjY5YzM5M2QgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vRGVmYXVsdEJpbmRpbmdSZXNvbHZlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRGVmYXVsdEJpbmRpbmdSZXNvbHZlci5qYXZh
CkBAIC04OTQsNiArODk0LDI2IEBACiAJLyoKIAkgKiBNZXRob2QgZGVjbGFyZWQgb24gQmluZGlu
Z1Jlc29sdmVyLgogCSAqLworCXN5bmNocm9uaXplZCBJTWV0aG9kQmluZGluZyByZXNvbHZlTWV0
aG9kKExhbWJkYUV4cHJlc3Npb24gbGFtYmRhKSB7CisJCU9iamVjdCBvbGROb2RlID0gdGhpcy5u
ZXdBc3RUb09sZEFzdC5nZXQobGFtYmRhKTsKKwkJaWYgKG9sZE5vZGUgaW5zdGFuY2VvZiBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24pIHsKKwkJ
CW9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbiBs
YW1iZGFFeHByZXNzaW9uID0gKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TGFtYmRhRXhwcmVzc2lvbikgb2xkTm9kZTsKKwkJCUlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRp
bmcgPSBnZXRNZXRob2RCaW5kaW5nKGxhbWJkYUV4cHJlc3Npb24uYmluZGluZyk7CisJCQlpZiAo
bWV0aG9kQmluZGluZyA9PSBudWxsKSB7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQl0aGlz
LmJpbmRpbmdzVG9Bc3ROb2Rlcy5wdXQobWV0aG9kQmluZGluZywgbGFtYmRhKTsKKwkJCVN0cmlu
ZyBrZXkgPSBtZXRob2RCaW5kaW5nLmdldEtleSgpOworCQkJaWYgKGtleSAhPSBudWxsKSB7CisJ
CQkJdGhpcy5iaW5kaW5nVGFibGVzLmJpbmRpbmdLZXlzVG9CaW5kaW5ncy5wdXQoa2V5LCBtZXRo
b2RCaW5kaW5nKTsKKwkJCX0KKwkJCXJldHVybiBtZXRob2RCaW5kaW5nOworCQl9CisJCXJldHVy
biBudWxsOworCX0KKy8qCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEJpbmRpbmdSZXNvbHZlci4K
KwkgKi8KIAlzeW5jaHJvbml6ZWQgSU1ldGhvZEJpbmRpbmcgcmVzb2x2ZU1ldGhvZChNZXRob2RJ
bnZvY2F0aW9uIG1ldGhvZCkgewogCQlPYmplY3Qgb2xkTm9kZSA9IHRoaXMubmV3QXN0VG9PbGRB
c3QuZ2V0KG1ldGhvZCk7CiAJCWlmIChvbGROb2RlIGluc3RhbmNlb2YgTWVzc2FnZVNlbmQpIHsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9MYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3IGZpbGUgbW9k
ZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNjI5N2YxZQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVz
c2lvbi5qYXZhCkBAIC0wLDAgKzEsMjc1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICog
Q29weXJpZ2h0IChjKSAyMDExLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9s
ZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFu
IGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBD
b21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rpbmcg
YW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRp
YmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0
b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbTsKKworaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CisvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5l
Y2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBpcyBhbiBpbXBsZW1l
bnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0
aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxl
IGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBp
cyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAK
KyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworaW1wb3J0IGphdmEu
dXRpbC5MaXN0OworCisvKioKKyAqIExhbWJkYSBleHByZXNzaW9uIEFTVCBub2RlIHR5cGUuCisg
KiA8cHJlPgorICogTGFtYmRhRXhwcmVzc2lvbjoKKyAqICAgIDxiPig8L2I+IFsgQXJndW1lbnRz
IF0gPGI+KTwvYj4gPGI+LT48L2I+IEJvZHkKKyAqIDwvcHJlPgorICogCisgKjxwPiBBcmd1bWVu
dHMgYXJlIHJlcHJlc2VudGVkIGJ5IGFuIG9wdGlvbmFsIGxpc3Qgb2YgY29tbWEtc2VwYXJhdGVk
IGVsZW1lbnRzLgorICogQWxsIHRoZSBlbGVtZW50cyBvZiB0aGUgbGlzdHMgc2hvdWxkIGJlIGhh
dmluZyB0aGUgc2FtZSB0eXBlIHdoaWNoIGNhbiBiZSBlaXRoZXIgCisgKiBhIHtAbGluayBTaW5n
bGVWYXJpYWJsZURlY2xhcmF0aW9ufSBvciBhIHtAbGluayBUeXBlRWxpZGVkVmFyaWFibGVEZWNs
YXJhdGlvbn0uPC9wPgorICo8cD5Cb2R5IGNhbiBiZSBhbiBlaXRoZXIgZW1wdHkgYm9keSBvciBi
ZSBvbmUgb2YgdGhlIAorICoge0BsaW5rIEJsb2NrfSBhbmQge0BsaW5rIEV4cHJlc3Npb25TdGF0
ZW1lbnR9IHR5cGVzLjwvcD4KKyAqIEBzaW5jZSAzLjkgCisgKiBAbm9pbnN0YW50aWF0ZSBUaGlz
IGNsYXNzIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBpbnN0YW50aWF0ZWQgYnkgY2xpZW50cy4gCisg
Ki8KKworcHVibGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsK
KworCS8qKgorCSAqIFRoZSAiVmFyaWFibGUiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBu
b2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0aW9ufSkuCisJICov
CisJcHVibGljIHN0YXRpYyBmaW5hbCBDaGlsZExpc3RQcm9wZXJ0eURlc2NyaXB0b3IgQVJHVU1F
TlRTX1BST1BFUlRZID0KKwkJbmV3IENoaWxkTGlzdFByb3BlcnR5RGVzY3JpcHRvcihMYW1iZGFF
eHByZXNzaW9uLmNsYXNzLCAiYXJndW1lbnRzIiwgVmFyaWFibGVEZWNsYXJhdGlvbi5jbGFzcywg
Tk9fQ1lDTEVfUklTSyk7IC8vJE5PTi1OTFMtMSQKKwkKKwkvKioKKwkgKiBUaGUgImJvZHkiIHN0
cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBT
dGF0ZW1lbnR9KS4KKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIENoaWxkUHJvcGVydHlEZXNj
cmlwdG9yIEJPRFlfUFJPUEVSVFkgPQorCQluZXcgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IoTGFt
YmRhRXhwcmVzc2lvbi5jbGFzcywgImJvZHkiLCBTdGF0ZW1lbnQuY2xhc3MsIE1BTkRBVE9SWSwg
Tk9fQ1lDTEVfUklTSyk7IC8vJE5PTi1OTFMtMSQKKworCS8qKgorCSAqIEEgbGlzdCBvZiBwcm9w
ZXJ0eSBkZXNjcmlwdG9ycyAoZWxlbWVudCB0eXBlOgorCSAqIHtAbGluayBTdHJ1Y3R1cmFsUHJv
cGVydHlEZXNjcmlwdG9yfSksCisJICogb3IgbnVsbCBpZiB1bmluaXRpYWxpemVkLgorCSAqIEBz
aW5jZSAzLjkKKwkgKi8KKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBMaXN0IFBST1BFUlRZX0RFU0NS
SVBUT1JTXzhfMDsKKwkKKwlzdGF0aWMgeworCQlMaXN0IHByb3BlcnR5TGlzdCA9IG5ldyBBcnJh
eUxpc3QoMyk7CisJCWNyZWF0ZVByb3BlcnR5TGlzdChMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCBw
cm9wZXJ0eUxpc3QpOworCQlhZGRQcm9wZXJ0eShBUkdVTUVOVFNfUFJPUEVSVFksIHByb3BlcnR5
TGlzdCk7CisJCWFkZFByb3BlcnR5KEJPRFlfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCVBS
T1BFUlRZX0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3QocHJvcGVydHlMaXN0KTsK
Kwl9CisJCisJLyoqCisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0dXJhbCBwcm9wZXJ0eSBk
ZXNjcmlwdG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50cyBtdXN0IG5vdCBtb2Rp
ZnkgdGhlIHJlc3VsdC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0aGUgQVBJIGxldmVsOyBv
bmUgb2YgdGhlIEFTVC5KTFMqIGNvbnN0YW50cworCSAqIEByZXR1cm4gYSBsaXN0IG9mIHByb3Bl
cnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9w
ZXJ0eURlc2NyaXB0b3J9KQorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIExp
c3QgcHJvcGVydHlEZXNjcmlwdG9ycyhpbnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIFBST1BFUlRZ
X0RFU0NSSVBUT1JTXzhfMDsKKwl9CisKKwkvKioKKwkgKiBUaGUgcGFyYW1ldGVyIGRlY2xhcmF0
aW9ucworCSAqIChlbGVtZW50IHR5cGU6IHtAbGluayBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9u
fSB8IHtAbGluayBUeXBlRWxpZGVkVmFyaWFibGVEZWNsYXJhdGlvbn0pLgorCSAqIERlZmF1bHRz
IHRvIGFuIGVtcHR5IGxpc3QuCisJICovCisJcHJpdmF0ZSBBU1ROb2RlLk5vZGVMaXN0IGFyZ3Vt
ZW50cyA9CisJCW5ldyBBU1ROb2RlLk5vZGVMaXN0KEFSR1VNRU5UU19QUk9QRVJUWSk7CisKKwkv
KioKKwkgKiBUaGUgbWV0aG9kIGJvZHkuCisJICogRGVmYXVsdHMgdG8gbm9uZS4KKwkgKi8KKwlw
cml2YXRlIFN0YXRlbWVudCBib2R5ID0gbnVsbDsKKworCS8qKgorCSAqIENyZWF0ZXMgYSBuZXcg
QVNUIG5vZGUgZm9yIGEgTGFtYmRhRXhwcmVzc2lvbiBkZWNsYXJhdGlvbiBvd25lZAorCSAqIGJ5
IHRoZSBnaXZlbiBBU1QuCisJICogPHA+CisJICogTi5CLiBUaGlzIGNvbnN0cnVjdG9yIGlzIHBh
Y2thZ2UtcHJpdmF0ZTsgYWxsIHN1YmNsYXNzZXMgbXVzdCBiZQorCSAqIGRlY2xhcmVkIGluIHRo
ZSBzYW1lIHBhY2thZ2U7IGNsaWVudHMgYXJlIHVuYWJsZSB0byBkZWNsYXJlCisJICogYWRkaXRp
b25hbCBzdWJjbGFzc2VzLgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBhc3QgdGhlIEFTVCB0
aGF0IGlzIHRvIG93biB0aGlzIG5vZGUKKwkgKi8KKwlMYW1iZGFFeHByZXNzaW9uKEFTVCBhc3Qp
IHsKKwkJc3VwZXIoYXN0KTsKKwkJdGhpcy5hcmd1bWVudHMgPSBuZXcgQVNUTm9kZS5Ob2RlTGlz
dChBUkdVTUVOVFNfUFJPUEVSVFkpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMg
bWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCUxpc3QgaW50
ZXJuYWxTdHJ1Y3R1cmFsUHJvcGVydGllc0ZvclR5cGUoaW50IGFwaUxldmVsKSB7CisJCXJldHVy
biBwcm9wZXJ0eURlc2NyaXB0b3JzKGFwaUxldmVsKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9j
IGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8K
KwlmaW5hbCBBU1ROb2RlIGludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShDaGlsZFByb3BlcnR5
RGVzY3JpcHRvciBwcm9wZXJ0eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hpbGQpIHsKKwkJaWYg
KHByb3BlcnR5ID09IEJPRFlfUFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1cm4g
Z2V0Qm9keSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXRCb2R5KChTdGF0ZW1lbnQpIGNoaWxkKTsK
KwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJfQorCQkvLyBhbGxvdyBkZWZhdWx0IGltcGxlbWVu
dGF0aW9uIHRvIGZsYWcgdGhlIGVycm9yCisJCXJldHVybiBzdXBlci5pbnRlcm5hbEdldFNldENo
aWxkUHJvcGVydHkocHJvcGVydHksIGdldCwgY2hpbGQpOworCX0KKworCS8qIChvbWl0IGphdmFk
b2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAq
LworCWZpbmFsIExpc3QgaW50ZXJuYWxHZXRDaGlsZExpc3RQcm9wZXJ0eShDaGlsZExpc3RQcm9w
ZXJ0eURlc2NyaXB0b3IgcHJvcGVydHkpIHsKKwkJaWYgKHByb3BlcnR5ID09IEFSR1VNRU5UU19Q
Uk9QRVJUWSkgeworCQkJcmV0dXJuIGFyZ3VtZW50cygpOworCQl9CisJCS8vIGFsbG93IGRlZmF1
bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVy
bmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkocHJvcGVydHkpOworCX0KKwkKKwkvKiAob21pdCBqYXZh
ZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkg
Ki8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gTEFNQkRBX0VYUFJFU1NJT047CisJ
fQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xh
cmVkIG9uIEFTVE5vZGUuCisJICovCisJQVNUTm9kZSBjbG9uZTAoQVNUIHRhcmdldCkgeworCQlM
YW1iZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRhcmdldCk7CisJ
CXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsK
KwkJcmVzdWx0LmFyZ3VtZW50cygpLmFkZEFsbChBU1ROb2RlLmNvcHlTdWJ0cmVlcyh0YXJnZXQs
IGFyZ3VtZW50cygpKSk7CisJCXJlc3VsdC5zZXRCb2R5KChTdGF0ZW1lbnQpIEFTVE5vZGUuY29w
eVN1YnRyZWUodGFyZ2V0LCBnZXRCb2R5KCkpKTsKKwkJcmV0dXJuIHJlc3VsdDsKKwl9CisKKwkv
KiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24g
QVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBib29sZWFuIHN1YnRyZWVNYXRjaDAoQVNUTWF0Y2hlciBt
YXRjaGVyLCBPYmplY3Qgb3RoZXIpIHsKKwkJLy8gZGlzcGF0Y2ggdG8gY29ycmVjdCBvdmVybG9h
ZGVkIG1hdGNoIG1ldGhvZAorCQlyZXR1cm4gbWF0Y2hlci5tYXRjaCh0aGlzLCBvdGhlcik7CisJ
fQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xh
cmVkIG9uIEFTVE5vZGUuCisJICovCisJdm9pZCBhY2NlcHQwKEFTVFZpc2l0b3IgdmlzaXRvcikg
eworCQlib29sZWFuIHZpc2l0Q2hpbGRyZW4gPSB2aXNpdG9yLnZpc2l0KHRoaXMpOworCQlpZiAo
dmlzaXRDaGlsZHJlbikgeworCQkJLy8gdmlzaXQgY2hpbGRyZW4gaW4gbm9ybWFsIGxlZnQgdG8g
cmlnaHQgcmVhZGluZyBvcmRlcgorCQkJYWNjZXB0Q2hpbGRyZW4odmlzaXRvciwgdGhpcy5hcmd1
bWVudHMpOworCQkJYWNjZXB0Q2hpbGQodmlzaXRvciwgZ2V0Qm9keSgpKTsKKwkJfQorCQl2aXNp
dG9yLmVuZFZpc2l0KHRoaXMpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGxpdmUgb3Jk
ZXJlZCBsaXN0IG9mIGFyZ3VtZW50cyBvZiB0aGlzIGxhbWJkYSBleHByZXNzaW9uLgorCSAqCisJ
ICogQHJldHVybiB0aGUgbGl2ZSBsaXN0IG9mIGFyZ3VtZW50cyBvZiB0aGlzIGxhbWJkYSBleHBy
ZXNzaW9uLgorCSAqICAgIChlbGVtZW50IHR5cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0aW9u
fSAtCisJICogICAgIGNhbiBiZSBlaXRoZXIgYSB7QGxpbmsgU2luZ2xlVmFyaWFibGVEZWNsYXJh
dGlvbn0gb3IKKwkgKiAgICAgIGEge0BsaW5rIFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9u
fQorCSAqLworCXB1YmxpYyBMaXN0IGFyZ3VtZW50cygpIHsKKwkJcmV0dXJuIHRoaXMuYXJndW1l
bnRzOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGJvZHkgb2YgdGhpcyBsYW1iZGEgZXhw
cmVzc2lvbi4KKwkgKiA8cD4KKwkgKiA8L3A+CisJICogQGV4Y2VwdGlvbiBOdWxsUG9pbnRlckV4
Y2VwdGlvbiBpZjoKKwkgKjx1bD4KKwkgKiA8bGk+IGJvZHkgaXMgbnVsbC4gPC9saT4KKwkgKjwv
dWw+CisJICogQHJldHVybiB0aGUgbGFtYmRhIGV4cHJlc3Npb24gYm9keSB3aGljaCBjYW4gYmUg
ZWl0aGVyIGEge0BsaW5rIEJsb2NrfSBvciBhIHtAbGluayBFeHByZXNzaW9uU3RhdGVtZW50fS4g
CisJICovCisJcHVibGljIFN0YXRlbWVudCBnZXRCb2R5KCkgeworCQlyZXR1cm4gdGhpcy5ib2R5
OworCX0KKworCS8qKgorCSAqIFNldHMgb3IgY2xlYXJzIHRoZSBib2R5IG9mIHRoaXMgbGFtYmRh
IGV4cHJlc3Npb24uCisJICoKKwkgKiBAcGFyYW0gYm9keSB0aGUgYmxvY2sgbm9kZSwgb3IgPGNv
ZGU+bnVsbDwvY29kZT4gaWYgdGhlcmUgaXMgbm9uZQorCSAqIEBleGNlcHRpb24gSWxsZWdhbEFy
Z3VtZW50RXhjZXB0aW9uIGlmOgorCSAqIDx1bD4KKwkgKiA8bGk+dGhlIG5vZGUgYmVsb25ncyB0
byBhIGRpZmZlcmVudCBBU1Q8L2xpPgorCSAqIDxsaT50aGUgbm9kZSBhbHJlYWR5IGhhcyBhIHBh
cmVudDwvbGk+CisJICogPGxpPmEgY3ljbGUgaW4gd291bGQgYmUgY3JlYXRlZDwvbGk+CisJICog
PGxpPiBib2R5IGlzIG51bGwgPC9saT4KKwkgKiA8L3VsPgorCSAqLworCXB1YmxpYyB2b2lkIHNl
dEJvZHkoU3RhdGVtZW50IGJvZHkpIHsKKwkJaWYgKGJvZHkgPT0gbnVsbCkgeworCQkJdGhyb3cg
bmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOworCQl9CisJCS8vIGEgTWV0aG9kRGVjbGFy
YXRpb24gbWF5IG9jY3VyIGluIGEgQmxvY2sgLSBtdXN0IGNoZWNrIGN5Y2xlcworCQlBU1ROb2Rl
IG9sZENoaWxkID0gdGhpcy5ib2R5OworCQlwcmVSZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIGJvZHks
IEJPRFlfUFJPUEVSVFkpOworCQl0aGlzLmJvZHkgPSBib2R5OworCQlwb3N0UmVwbGFjZUNoaWxk
KG9sZENoaWxkLCBib2R5LCBCT0RZX1BST1BFUlRZKTsKKwl9CisKKwkvKioKKwkgKiBSZXNvbHZl
cyBhbmQgcmV0dXJucyB0aGUgYmluZGluZyBmb3IgdGhlIGxhbWJkYSBleHByZXNzaW9uCisJICog
PHA+CisJICogTm90ZSB0aGF0IGJpbmRpbmdzIGFyZSBnZW5lcmFsbHkgdW5hdmFpbGFibGUgdW5s
ZXNzIHJlcXVlc3RlZCB3aGVuIHRoZQorCSAqIEFTVCBpcyBiZWluZyBidWlsdC4KKwkgKiA8L3A+
CisJICoKKwkgKiBAcmV0dXJuIHRoZSBiaW5kaW5nLCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0
aGUgYmluZGluZyBjYW5ub3QgYmUKKwkgKiAgICByZXNvbHZlZAorCSAqLworCXB1YmxpYyBJTWV0
aG9kQmluZGluZyByZXNvbHZlQmluZGluZygpIHsKKwkJcmV0dXJuIHRoaXMuYXN0LmdldEJpbmRp
bmdSZXNvbHZlcigpLnJlc29sdmVNZXRob2QodGhpcyk7CisJfQorCisJLyogKG9taXQgamF2YWRv
YyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICov
CisJaW50IG1lbVNpemUoKSB7CisJCXJldHVybiAyICogNDsKKwl9CisKKwkvKiAob21pdCBqYXZh
ZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkg
Ki8KKwlpbnQgdHJlZVNpemUoKSB7CisJCXJldHVybgorCQkJbWVtU2l6ZSgpCisJCQkrICh0aGlz
LmFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxpc3RTaXplKCkpCisJCQkr
ICh0aGlzLmJvZHkgPT0gbnVsbCA/IDAgOiBnZXRCb2R5KCkudHJlZVNpemUoKSk7CisJfQorfQpc
IE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFy
YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uamF2YQpuZXcgZmlsZSBtb2RlIDEw
MDY0NAppbmRleCAwMDAwMDAwLi4yNmUwYTczCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlRWxpZGVkVmFyaWFi
bGVEZWNsYXJhdGlvbi5qYXZhCkBAIC0wLDAgKzEsMjM2IEBACisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xp
cHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0
aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBK
YXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9y
IHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5v
dCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICog
Q29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbTsKKworaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CitpbXBvcnQg
amF2YS51dGlsLkxpc3Q7CisKKy8qKgorICogVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24g
bm9kZSB0eXBlLiBUeXBlRWxpZGVWYXJpYWJsZURlY2xhcmF0aW9uIG5vZGVzIGFyZSB1c2VkIGlu
IHRoZSAKKyAqIGRlY2xhcmF0aW9uIG9mIHZhcmlhYmxlcyBpbiBMYW1iZGFFeHByZXNzaW9uLiBU
eXBlIGlzIGVsaWRlZCBhbmQgZGV0ZXJtaW5lZCBmcm9tIHRoZSBkZWNsYXJhdGlvbgorICogb2Yg
dGhlIGludGVyZmFjZSBmdW5jdGlvbiB3aGljaCBiaW5kcyB0aGUgTGFtYmRhRXhwcmVzc2lvbi4g
QXZhaWxhYmxlIGZyb20gSkxTOCBvbndhcmRzLgorICogCisgKiBUeXBlRWxpZGVkVmFyaWFibGVE
ZWNsYXJhdGlvbjoKKyAqICAgICBJZGVudGlmaWVyIAorICogQHNpbmNlIDMuOQorICovCitwdWJs
aWMgY2xhc3MgVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gZXh0ZW5kcyBWYXJpYWJsZURl
Y2xhcmF0aW9uIHsKKworCS8qKgorCSAqIFRoZSAibmFtZSIgc3RydWN0dXJhbCBwcm9wZXJ0eSBv
ZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQgdHlwZToge0BsaW5rIFNpbXBsZU5hbWV9KS4KKwkgKi8K
KwlwdWJsaWMgc3RhdGljIGZpbmFsIENoaWxkUHJvcGVydHlEZXNjcmlwdG9yIE5BTUVfUFJPUEVS
VFkgPQorCQkJbmV3IENoaWxkUHJvcGVydHlEZXNjcmlwdG9yKFR5cGVFbGlkZWRWYXJpYWJsZURl
Y2xhcmF0aW9uLmNsYXNzLCAibmFtZSIsIFNpbXBsZU5hbWUuY2xhc3MsIE1BTkRBVE9SWSwgTk9f
Q1lDTEVfUklTSyk7IC8vJE5PTi1OTFMtMSQKKworCS8qKgorCSAqIEEgbGlzdCBvZiBwcm9wZXJ0
eSBkZXNjcmlwdG9ycyAoZWxlbWVudCB0eXBlOgorCSAqIHtAbGluayBTdHJ1Y3R1cmFsUHJvcGVy
dHlEZXNjcmlwdG9yfSksCisJICogb3IgbnVsbCBpZiB1bmluaXRpYWxpemVkLgorCSAqLworCXBy
aXZhdGUgc3RhdGljIGZpbmFsIExpc3QgUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOworCisJc3Rh
dGljIHsKKwkJTGlzdCBwcm9wZXJ0eUxpc3QgPSBuZXcgQXJyYXlMaXN0KDIpOworCQljcmVhdGVQ
cm9wZXJ0eUxpc3QoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24uY2xhc3MsIHByb3BlcnR5
TGlzdCk7CisJCWFkZFByb3BlcnR5KE5BTUVfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCVBS
T1BFUlRZX0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3QocHJvcGVydHlMaXN0KTsK
Kwl9CisJCisJLyoqCisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0dXJhbCBwcm9wZXJ0eSBk
ZXNjcmlwdG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50cyBtdXN0IG5vdCBtb2Rp
ZnkgdGhlIHJlc3VsdC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0aGUgQVBJIGxldmVsOyBv
bmUgb2YgdGhlCisJICogPGNvZGU+QVNULkpMUyo8L2NvZGU+IGNvbnN0YW50cworCSAqIEByZXR1
cm4gYSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0Bs
aW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KQorCSAqLworCXB1YmxpYyBzdGF0aWMg
TGlzdCBwcm9wZXJ0eURlc2NyaXB0b3JzKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gUFJPUEVS
VFlfREVTQ1JJUFRPUlNfOF8wOworCX0KKworCS8qKgorCSAqIFRoZSB2YXJpYWJsZSBuYW1lOyBs
YXppbHkgaW5pdGlhbGl6ZWQ7IGRlZmF1bHRzIHRvIGEgdW5zcGVjaWZpZWQsCisJICogbGVnYWwg
SmF2YSBpZGVudGlmaWVyLgorCSAqLworCXByaXZhdGUgU2ltcGxlTmFtZSB2YXJpYWJsZU5hbWUg
PSBudWxsOworCisJLyoqCisJICogQ3JlYXRlcyBhIG5ldyBBU1Qgbm9kZSBmb3IgYSB0eXBlIGVs
aWRlZCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBvd25lZCBieSB0aGUgZ2l2ZW4KKwkgKiBBU1QuIEJ5
IGRlZmF1bHQsIHRoZSB0eXBlIGVsaWRlZCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBoYXM6IGFuIAor
CSAqIHVuc3BlY2lmaWVkIChidXQgbGVnYWwpIHZhcmlhYmxlIG5hbWUgb25seS4KKwkgKiBPdGhl
ciBmaWVsZHMgaW5oZXJpdGVkIGZyb20gdmFyaWFibGUgZGVjbGFyYXRpb24gYXJlIG5vdCB1c2Vk
LgorCSAqIDxwPgorCSAqIE4uQi4gVGhpcyBjb25zdHJ1Y3RvciBpcyBwYWNrYWdlLXByaXZhdGUu
CisJICogPC9wPgorCSAqCisJICogQHBhcmFtIGFzdCB0aGUgQVNUIHRoYXQgaXMgdG8gb3duIHRo
aXMgbm9kZQorCSAqLworCVR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKEFTVCBhc3QpIHsK
KwkJc3VwZXIoYXN0KTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkK
KwkgKiBNZXRob2QgZGVjbGFyZWQgb24gVmFyaWFibGVEZWNsYXJhdGlvbi4KKwkgKi8KKwlTaW1w
bGVQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxFeHRyYURpbWVuc2lvbnNQcm9wZXJ0eSgpIHsK
KwkJcmV0dXJuIG51bGw7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2Qp
CisJICogTWV0aG9kIGRlY2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJQ2hp
bGRQcm9wZXJ0eURlc2NyaXB0b3IgaW50ZXJuYWxJbml0aWFsaXplclByb3BlcnR5KCkgeworCQly
ZXR1cm4gbnVsbDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkg
KiBNZXRob2QgZGVjbGFyZWQgb24gVmFyaWFibGVEZWNsYXJhdGlvbi4KKwkgKi8KKwlDaGlsZFBy
b3BlcnR5RGVzY3JpcHRvciBpbnRlcm5hbE5hbWVQcm9wZXJ0eSgpIHsKKwkJcmV0dXJuIE5BTUVf
UFJPUEVSVFk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICog
TWV0aG9kIGRlY2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJcHVibGljIGlu
dCBnZXRFeHRyYURpbWVuc2lvbnMoKSB7CisJCXJldHVybiAwOworCX0KKworCS8qIChvbWl0IGph
dmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBWYXJpYWJsZURl
Y2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyB2b2lkIHNldEV4dHJhRGltZW5zaW9ucyhpbnQgZGlt
ZW5zaW9ucykgeworCQlyZXR1cm47CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBt
ZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICov
CisJcHVibGljIEV4cHJlc3Npb24gZ2V0SW5pdGlhbGl6ZXIoKSB7CisJCXJldHVybiBudWxsOwor
CX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNs
YXJlZCBvbiBWYXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyB2b2lkIHNldEluaXRp
YWxpemVyKEV4cHJlc3Npb24gaW5pdGlhbGl6ZXIpIHsKKwkJcmV0dXJuOworCX0KKworCS8qIChv
bWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1RO
b2RlLgorCSAqLworCUxpc3QgaW50ZXJuYWxTdHJ1Y3R1cmFsUHJvcGVydGllc0ZvclR5cGUoaW50
IGFwaUxldmVsKSB7CisJCXJldHVybiBwcm9wZXJ0eURlc2NyaXB0b3JzKGFwaUxldmVsKTsKKwl9
CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFy
ZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBBU1ROb2RlIGludGVybmFsR2V0U2V0Q2hpbGRQ
cm9wZXJ0eShDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBwcm9wZXJ0eSwgYm9vbGVhbiBnZXQsIEFT
VE5vZGUgY2hpbGQpIHsKKwkJaWYgKHByb3BlcnR5ID09IE5BTUVfUFJPUEVSVFkpIHsKKwkJCWlm
IChnZXQpIHsKKwkJCQlyZXR1cm4gZ2V0TmFtZSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXROYW1l
KChTaW1wbGVOYW1lKSBjaGlsZCk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJLy8g
YWxsb3cgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBmbGFnIHRoZSBlcnJvcgorCQlyZXR1cm4g
c3VwZXIuaW50ZXJuYWxHZXRTZXRDaGlsZFByb3BlcnR5KHByb3BlcnR5LCBnZXQsIGNoaWxkKTsK
Kwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVj
bGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4g
VFlQRV9FTElERURfVkFSSUFCTEVfREVDTEFSQVRJT047CisJfQorCisJLyogKG9taXQgamF2YWRv
YyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICov
CisJYm9vbGVhbiBzdWJ0cmVlTWF0Y2gwKEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVy
KSB7CisJCS8vIGRpc3BhdGNoIHRvIGNvcnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJ
cmV0dXJuIG1hdGNoZXIubWF0Y2godGhpcywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFk
b2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAq
LworCUFTVE5vZGUgY2xvbmUwKEFTVCB0YXJnZXQpIHsKKwkJVHlwZUVsaWRlZFZhcmlhYmxlRGVj
bGFyYXRpb24gcmVzdWx0ID0gbmV3IFR5cGVFbGlkZWRWYXJpYWJsZURlY2xhcmF0aW9uKHRhcmdl
dCk7CisJCXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0
aCgpKTsKKwkJcmVzdWx0LnNldE5hbWUoKFNpbXBsZU5hbWUpIGdldE5hbWUoKS5jbG9uZSh0YXJn
ZXQpKTsKKwkJcmV0dXJuIHJlc3VsdDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlz
IG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwl2b2lkIGFj
Y2VwdDAoQVNUVmlzaXRvciB2aXNpdG9yKSB7CisJCXZpc2l0b3IudmlzaXQodGhpcyk7CisJCWFj
Y2VwdENoaWxkKHZpc2l0b3IsIGdldE5hbWUoKSk7CisJCXZpc2l0b3IuZW5kVmlzaXQodGhpcyk7
CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRl
Y2xhcmVkIG9uIFZhcmlhYmxlRGVjbGFyYXRpb24uCisJICovCisJcHVibGljIFNpbXBsZU5hbWUg
Z2V0TmFtZSgpIHsKKwkJaWYgKHRoaXMudmFyaWFibGVOYW1lID09IG51bGwpIHsKKwkJCS8vIGxh
enkgaW5pdCBtdXN0IGJlIHRocmVhZC1zYWZlIGZvciByZWFkZXJzCisJCQlzeW5jaHJvbml6ZWQg
KHRoaXMpIHsKKwkJCQlpZiAodGhpcy52YXJpYWJsZU5hbWUgPT0gbnVsbCkgeworCQkJCQlwcmVM
YXp5SW5pdCgpOworCQkJCQl0aGlzLnZhcmlhYmxlTmFtZSA9IG5ldyBTaW1wbGVOYW1lKHRoaXMu
YXN0KTsKKwkJCQkJcG9zdExhenlJbml0KHRoaXMudmFyaWFibGVOYW1lLCBOQU1FX1BST1BFUlRZ
KTsKKwkJCQl9CisJCQl9CisJCX0KKwkJcmV0dXJuIHRoaXMudmFyaWFibGVOYW1lOworCX0KKwor
CS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBv
biBWYXJpYWJsZURlY2xhcmF0aW9uLgorCSAqLworCXB1YmxpYyB2b2lkIHNldE5hbWUoU2ltcGxl
TmFtZSB2YXJpYWJsZU5hbWUpIHsKKwkJaWYgKHZhcmlhYmxlTmFtZSA9PSBudWxsKSB7CisJCQl0
aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7CisJCX0KKwkJQVNUTm9kZSBvbGRD
aGlsZCA9IHRoaXMudmFyaWFibGVOYW1lOworCQlwcmVSZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIHZh
cmlhYmxlTmFtZSwgTkFNRV9QUk9QRVJUWSk7CisJCXRoaXMudmFyaWFibGVOYW1lID0gdmFyaWFi
bGVOYW1lOworCQlwb3N0UmVwbGFjZUNoaWxkKG9sZENoaWxkLCB2YXJpYWJsZU5hbWUsIE5BTUVf
UFJPUEVSVFkpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAq
IE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCWludCBtZW1TaXplKCkgeworCQly
ZXR1cm4gQkFTRV9OT0RFX1NJWkUgKyAxICogNDsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZv
ciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlp
bnQgdHJlZVNpemUoKSB7CisJCXJldHVybgorCQkJbWVtU2l6ZSgpCisJCQkrICh0aGlzLnZhcmlh
YmxlTmFtZSA9PSBudWxsID8gMCA6IGdldE5hbWUoKS50cmVlU2l6ZSgpKTsKKwl9Cit9ClwgTm8g
bmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZhCmluZGV4IGIyNzAxNDIuLjNkOWI3MGUgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRl
bmVyLmphdmEKQEAgLTE3LDEwMiArMTcsNyBAQAogaW1wb3J0IGphdmEudXRpbC5JdGVyYXRvcjsK
IGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5BU1Q7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVE5vZGU7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVFZpc2l0b3I7Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkFic3RyYWN0VHlwZURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5Bbm5vdGF0YWJsZVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFubm90
YXRpb25UeXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFu
bm90YXRpb25UeXBlTWVtYmVyRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkFub255bW91c0NsYXNzRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkFycmF5QWNjZXNzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5B
cnJheUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BcnJheUluaXRp
YWxpemVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BcnJheVR5cGU7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFzc2VydFN0YXRlbWVudDsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uQXNzaWdubWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uQmxvY2s7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkJsb2NrQ29t
bWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQm9keURlY2xhcmF0aW9uOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Cb29sZWFuTGl0ZXJhbDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQnJlYWtTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkNhc3RFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5DYXRjaENsYXVzZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2hh
cmFjdGVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2xhc3NJbnN0
YW5jZUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Db21waWxhdGlv
blVuaXQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNvbmRpdGlvbmFsRXhwcmVz
c2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ29uc3RydWN0b3JJbnZvY2F0
aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Db250aW51ZVN0YXRlbWVudDsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXh0cmFEaW1lbnNpb247Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlVuaW9uVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uRG9TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkVtcHR5U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5FbmhhbmNl
ZEZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW51bUNvbnN0
YW50RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkVudW1EZWNs
YXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXhwcmVzc2lvbjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXhwcmVzc2lvblN0YXRlbWVudDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRmllbGRBY2Nlc3M7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkZpZWxkRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
SWZTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkltcG9ydERlY2xh
cmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JbmZpeEV4cHJlc3Npb247
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkluaXRpYWxpemVyOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JbnN0YW5jZW9mRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uSmF2YWRvYzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uTGFiZWxlZFN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
TGluZUNvbW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1hcmtlckFubm90
YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1lbWJlclJlZjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWVtYmVyVmFsdWVQYWlyOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2REZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uTWV0aG9kSW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uTWV0aG9kUmVmOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRo
b2RSZWZQYXJhbWV0ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1vZGlmaWVy
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OYW1lOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5Ob3JtYWxBbm5vdGF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5OdWxsTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
TnVtYmVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUGFja2FnZURl
Y2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QYXJhbWV0ZXJpemVk
VHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uUGFyZW50aGVzaXplZEV4cHJl
c3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlBvc3RmaXhFeHByZXNzaW9u
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmVmaXhFeHByZXNzaW9uOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmltaXRpdmVUeXBlOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5RdWFsaWZpZWROYW1lOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5RdWFsaWZpZWRUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5SZXR1cm5TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbXBs
ZU5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbXBsZVR5cGU7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZU1lbWJlckFubm90YXRpb247Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb247Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uU3RyaW5nTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uU3VwZXJDb25zdHJ1Y3Rvckludm9jYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLlN1cGVyRmllbGRBY2Nlc3M7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLlN1cGVyTWV0aG9kSW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uU3dpdGNoQ2FzZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3dpdGNo
U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TeW5jaHJvbml6ZWRT
dGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRhZ0VsZW1lbnQ7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRleHRFbGVtZW50OwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5UaGlzRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uVGhyb3dTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLlRyeVN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZTsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZURlY2xhcmF0aW9uOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRpb25TdGF0ZW1lbnQ7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVMaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5UeXBlUGFyYW1ldGVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50OwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uU3RhdGVtZW50OwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5XaGlsZVN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uV2lsZGNhcmRUeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS4qOwogCiAvKioKICAqIEludGVybmFsIEFTVCB2aXNpdG9yIGZvciBzZXJpYWxpemlu
ZyBhbiBBU1QgaW4gYSBxdWljayBhbmQgZGlydHkgZmFzaGlvbi4KQEAgLTc2Myw3ICs2NjgsMTQg
QEAKIAlwdWJsaWMgYm9vbGVhbiB2aXNpdChFeHByZXNzaW9uU3RhdGVtZW50IG5vZGUpIHsKIAkJ
cHJpbnRJbmRlbnQoKTsKIAkJbm9kZS5nZXRFeHByZXNzaW9uKCkuYWNjZXB0KHRoaXMpOwotCQl0
aGlzLmJ1ZmZlci5hcHBlbmQoIjtcbiIpOy8vJE5PTi1OTFMtMSQKKwkJLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MyAKKwkJLy8gRm9yIG5lc3Rl
ZCBsYW1iZGEgZXhwcmVzc2lvbnMgYSBzZW1pY29sb24gd2l0aCA8Q1I+IHJlc3VsdHMgaW4gdW5j
bGVhbiBkaXNwbGF5LCBiZXN0IGF2b2lkZWQuCisJCS8vIGV4YW1wbGUgdGVzdDogSSBJID0gKCkg
LT4gKCkgLT4gMTA7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IG5vZGUuZ2V0QVNUKCkuYXBp
TGV2ZWwoKSA+PSBBU1QuSkxTOCA/IG5vZGUuZ2V0RXhwcmVzc2lvbigpIDogbnVsbDsKKwkJTGFt
YmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gZXhwcmVzc2lvbiAhPSBudWxsICYmIGV4
cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uID8gKExhbWJkYUV4cHJlc3Npb24p
ZXhwcmVzc2lvbiA6IG51bGw7CisJCWlmIChsYW1iZGFFeHByZXNzaW9uID09IG51bGwpIHsKKwkJ
CXRoaXMuYnVmZmVyLmFwcGVuZCgiO1xuIik7Ly8kTk9OLU5MUy0xJAorCQl9CiAJCXJldHVybiBm
YWxzZTsKIAl9CiAKQEAgLTE5MDUsNCArMTgxNywyOCBAQAogCQkJfQogCQl9CiAJfQorCisJLyoK
KwkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQoTGFtYmRhRXhwcmVzc2lvbikKKwkgKi8KKwlwdWJs
aWMgYm9vbGVhbiB2aXNpdChMYW1iZGFFeHByZXNzaW9uIG5vZGUpIHsKKwkJdGhpcy5idWZmZXIu
YXBwZW5kKCIoIik7Ly8kTk9OLU5MUy0xJAorCQlmb3IgKEl0ZXJhdG9yIGl0ID0gbm9kZS5hcmd1
bWVudHMoKS5pdGVyYXRvcigpOyBpdC5oYXNOZXh0KCk7ICkgeworCQkJVmFyaWFibGVEZWNsYXJh
dGlvbiAgdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURlY2xhcmF0aW9uKSBpdC5uZXh0
KCk7CisJCQl2YXJpYWJsZURlY2xhcmF0aW9uLmFjY2VwdCh0aGlzKTsKKwkJCWlmIChpdC5oYXNO
ZXh0KCkpIHsKKwkJCQl0aGlzLmJ1ZmZlci5hcHBlbmQoIiwiKTsvLyROT04tTkxTLTEkCisJCQl9
CisJCX0KKwkJdGhpcy5idWZmZXIuYXBwZW5kKCIpIik7Ly8kTk9OLU5MUy0xJAkJCQorCQl0aGlz
LmJ1ZmZlci5hcHBlbmQoIiAtPiAiKTsgLy8kTk9OLU5MUy0xJAorCQlub2RlLmdldEJvZHkoKS5h
Y2NlcHQodGhpcyk7CisJCXJldHVybiBmYWxzZTsKKwl9CisJLyoKKwkgKiBAc2VlIEFTVFZpc2l0
b3IjdmlzaXQoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24pCisJICovCisJcHVibGljIGJv
b2xlYW4gdmlzaXQoVHlwZUVsaWRlZFZhcmlhYmxlRGVjbGFyYXRpb24gbm9kZSkgeworCQlyZXR1
cm4gZmFsc2U7CisJfQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227733</attachid>
            <date>2013-02-28 10:18:00 -0500</date>
            <delta_ts>2013-03-01 07:07:54 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-399793---18dom-ast-Add-a-new-node-type-f.patch</filename>
            <type>text/plain</type>
            <size>41554</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IGI5ZjUxMzQuLmM1ZjJhYzAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE3NiBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QzOTk3OTNhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0Nv
cHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIs
CisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0
ZXN0Mzk5NzkzOyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4iCisJCQkJKyAiCWludCBmb28oaW50
IHgpO1xuIgorCQkJCSsgIn1cbiIgCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsg
IiBJIGkgPSAgdmxhbWJkYSAtPiB7cmV0dXJuIDIwMDt9O1xuIgorCQkJCSsifVxuIjsKKwkJQ29t
cGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRo
aXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5
cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmll
bGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURl
Y2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdt
ZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdt
ZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21lbnQuZ2V0SW5p
dGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhw
cmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFF
eHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJkYSAtPiB7XG4gIHJl
dHVybiAyMDA7XG59XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRU
cnVlKGxhbWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAxKTsKKwkJSU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24ucmVzb2x2ZU1ldGhvZEJpbmRpbmco
KTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgaW50IGZvbyhpbnQpICIsIGJpbmRpbmcudG9TdHJp
bmcoKSk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJp
YWJsZURlY2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJ
CWFzc2VydFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFy
YXRpb25GcmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dCl2YXJpYWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVu
dC50b1N0cmluZygpKTsJCQorCQlJVmFyaWFibGVCaW5kaW5nIHZhcmlhYmxlQmluZGluZyA9IGZy
YWdtZW50LnJlc29sdmVCaW5kaW5nKCk7CQkKKwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0g
dmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJYXNzZXJ0Tm90TnVsbCgiTnVsbCBCaW5kaW5n
IGZvciBsYW1iZGEgYXJndW1lbnQiLCB0eXBlQmluZGluZyk7CisJCWFzc2VydEVxdWFscygiYmlu
ZGluZyBvZiBpbnQgZXhwZWN0ZWQgZm9yIGxhbWJkYSIsImludCIsdHlwZUJpbmRpbmcuZ2V0TmFt
ZSgpKTsKKwl9CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24K
KwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9z
cmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5n
IGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNlIEkge1xu
IgorCQkJCSsgIglpbnQgZm9vKGludCB4KTtcbiIKKwkJCQkrICJ9XG4iIAorCQkJCSsgInB1Ymxp
YyBjbGFzcyBYIHtcbiIKKwkJCQkrICIgSSBpID0gIHZsYW1iZGEgLT4gMjAwO1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJk
YSAtPiAyMDAiLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlJTWV0aG9kQmluZGlu
ZyBiaW5kaW5nID0gbGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZlTWV0aG9kQmluZGluZygpOworCQlh
c3NlcnRFcXVhbHMoInB1YmxpYyBpbnQgZm9vKGludCkgIiwgYmluZGluZy50b1N0cmluZygpKTsK
KwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5zaXplKCkgPT0gMSk7
CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURl
Y2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCWFzc2Vy
dFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFyYXRpb25G
cmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCl2YXJp
YWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVudC50b1N0
cmluZygpKTsJCQorCX0KKwkKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYygpIHRocm93cyBKYXZhTW9kZWxF
eGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0
ZXIxOC9zcmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJ
U3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNl
IEkge1xuIgorCQkJCSsgIglPYmplY3QgZm9vKGludCBbXSBpYSk7XG4iCisJCQkJKyAifVxuIiAK
KwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IChpbnQgW10gaWEpIC0+
e1xuIgorCQkJCSsgIiAgCXJldHVybiBpYS5jbG9uZSgpOyIKKwkJCQkrICJ9O1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKGludFtd
IGlhKSAtPiB7XG4gIHJldHVybiBpYS5jbG9uZSgpO1xufVxuIiwgbGFtYmRhRXhwcmVzc2lvbi50
b1N0cmluZygpKTsKKwkJSU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24u
cmVzb2x2ZU1ldGhvZEJpbmRpbmcoKTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgamF2YS5sYW5n
Lk9iamVjdCBmb28oaW50W10pICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUo
bGFtYmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURl
Y2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFt
YmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQlhc3NlcnRUcnVlKHZhcmlhYmxl
RGVjbGFyYXRpb24gaW5zdGFuY2VvZiBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJU2lu
Z2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gKFNpbmds
ZVZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJYXNzZXJ0RXF1YWxz
KCJpbnRbXSBpYSIsIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24udG9TdHJpbmcoKSk7CQkKKwl9
CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24KKwkgKi8KKwlw
dWJsaWMgdm9pZCB0ZXN0Mzk5NzkzZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQl0
aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9zcmMvdGVzdDM5
OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRz
ID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiICsKKwkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJ
Igl2b2lkIGRvaXQoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJIgkJSSBpID0gKCkgLT4ge1xuIiArCisJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bih0aGlzKTtcbiIgKworCQkJCSIJCQlJIGogPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJCVN5c3Rl
bS5vdXQucHJpbnRsbih0aGlzKTtcbiIgKworCQkJCSIJCQkJSSBrID0gKCkgLT4ge1xuIiArCisJ
CQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQl9O1xuIiAr
CisJCQkJIgkJCX07XG4iICsKKwkJCQkiCQl9O1xuIiArCisJCQkJIgl9XG4iOyAKKwkJQ29tcGls
YXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRoaXMu
d29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5cGVE
ZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmllbGRE
ZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURlY2xh
cmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdtZW50
ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdtZW50
cygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZUJpbmRpbmcgPSBmcmFnbWVu
dC5yZXNvbHZlQmluZGluZygpOworCQlhc3NlcnRFcXVhbHMoInRlc3QzOTk3OTMuSSBpIiwgdmFy
aWFibGVCaW5kaW5nLnRvU3RyaW5nKCkpOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9u
ID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiB7
XG4gIFN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiAgSSBqPSgpIC0+IHtcbiAgICBTeXN0ZW0u
b3V0LnByaW50bG4odGhpcyk7XG4gICAgSSBrPSgpIC0+IHtcbiAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih0aGlzKTtcbiAgICB9XG47XG4gIH1cbjtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHZvaWQgZG9pdCgp
ICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFtYmRhRXhwcmVzc2lvbi5w
YXJhbWV0ZXJzKCkuc2l6ZSgpID09IDApOworCX0KKworCS8qKgorCSAqIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3QzOTk3OTNlKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5n
Q29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIsCisJCQkJdHJ1ZS8qIHJl
c29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0ZXN0Mzk5NzkzOyIgKwor
CQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkiICBKIGZvbygpO1xuIiArCisJCQkJIn1cbiIg
KworCQkJCSJpbnRlcmZhY2UgSiB7XG4iICsKKwkJCQkiICBpbnQgZm9vKCk7XG4iICsKKwkJCQki
fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgICAgSSBJID0gKCkgLT4g
KCkgLT4gMTA7XG4iICsKKwkJCQkifVxuIjsKKwkJCQorCQlDb21waWxhdGlvblVuaXQgY3UgPSAo
Q29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywgdGhpcy53b3JraW5nQ29weSk7CisJ
CVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRB
U1ROb2RlKGN1LCAyKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xhcmF0aW9uID0gKEZp
ZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDAp
OworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNs
YXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJhZ21lbnRzKCkuZ2V0KDApOworCQlF
eHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3Nl
cnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRh
RXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lv
bjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiAoKSAtPiAxMCIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHRlc3QzOTk3OTMu
SiBmb28oKSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGxhbWJkYUV4cHJl
c3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAwKTsKKwl9CQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5q
YXZhCmluZGV4IDlkMzhkNmQuLmZkNTQ0ZTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUTWF0
Y2hlclRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJUZXN0LmphdmEKQEAgLTU1
MSw2ICs1NTEsOSBAQAogCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChJbnN0YW5jZW9mRXhwcmVzc2lv
biBub2RlLCBPYmplY3Qgb3RoZXIpIHsKIAkJCXJldHVybiBzdGFuZGFyZEJvZHkobm9kZSwgb3Ro
ZXIsIHRoaXMuc3VwZXJNYXRjaCA/IHN1cGVyLm1hdGNoKG5vZGUsIG90aGVyKSA6IGZhbHNlKTsK
IAkJfQorCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVj
dCBvdGhlcikgeworCQkJcmV0dXJuIHN0YW5kYXJkQm9keShub2RlLCBvdGhlciwgdGhpcy5zdXBl
ck1hdGNoID8gc3VwZXIubWF0Y2gobm9kZSwgb3RoZXIpIDogZmFsc2UpOworCQl9CiAJfQogCiAJ
LyoqCkBAIC0xNTYzLDQgKzE1NjYsNTMgQEAKIAkJeDEuZXh0cmFEaW1lbnNpb25zKCkuYWRkKHgy
KTsKIAkJYmFzaWNNYXRjaCh4MSk7CiAJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHBy
ZXNzaW9uczEoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJ
CXJldHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRh
RXhwcmVzc2lvbigpOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgeDIgPSB0aGlzLmFz
dC5uZXdWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQoKTsKKwkJeDIuc2V0TmFtZSh0aGlzLk4x
KTsKKwkJeDEucGFyYW1ldGVycygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3
QmxvY2soKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwlwdWJsaWMgdm9pZCB0ZXN0TGFt
YmRhRXhwcmVzc2lvbnMyKCkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwoKSA8IEFTVC5KTFM4
KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiB4MSA9IHRoaXMuYXN0Lm5l
d0xhbWJkYUV4cHJlc3Npb24oKTsKKwkJeDEuc2V0Qm9keSh0aGlzLmFzdC5uZXdCbG9jaygpKTsK
KwkJYmFzaWNNYXRjaCh4MSk7CisJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHByZXNz
aW9uczMoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJCXJl
dHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRhRXhw
cmVzc2lvbigpOworCQl4MS5zZXRCb2R5KHRoaXMuYXN0Lm5ld0V4cHJlc3Npb25TdGF0ZW1lbnQo
dGhpcy5OMikpOworCQliYXNpY01hdGNoKHgxKTsKKwl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJcHVibGljIHZvaWQgdGVzdExh
bWJkYUV4cHJlc3Npb25zNCgpIHsKKwkJaWYgKHRoaXMuYXN0LmFwaUxldmVsKCkgPCBBU1QuSkxT
OCkgeworCQkJcmV0dXJuOworCQl9CisJCUxhbWJkYUV4cHJlc3Npb24geDEgPSB0aGlzLmFzdC5u
ZXdMYW1iZGFFeHByZXNzaW9uKCk7CisJCVNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24geDIgPSB0
aGlzLmFzdC5uZXdTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKCk7CisJCXgyLm1vZGlmaWVycygp
LmFkZCh0aGlzLk1PRDEpOworCQl4Mi5tb2RpZmllcnMoKS5hZGQodGhpcy5NT0QyKTsKKwkJeDIu
c2V0VHlwZSh0aGlzLlQxKTsKKwkJeDIuc2V0TmFtZSh0aGlzLk4xKTsKKwkJeDEucGFyYW1ldGVy
cygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3RXhwcmVzc2lvblN0YXRlbWVu
dCh0aGlzLk4yKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9u
LmphdmEKaW5kZXggZmIxZGYxZC4uNTFhYWIwMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEK
QEAgLTQ2LDYgKzQ2LDcgQEAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMg
RnVuY3Rpb25hbEV4cHJlc3Npb24gewogCXB1YmxpYyBBcmd1bWVudCBbXSBhcmd1bWVudHM7CiAJ
cHVibGljIFN0YXRlbWVudCBib2R5OworCXB1YmxpYyBib29sZWFuIGhhc1BhcmVuczsKIAlNZXRo
b2RTY29wZSBzY29wZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiB2b2lkQ29tcGF0aWJsZSA9IHRydWU7
CiAJcHJvdGVjdGVkIGJvb2xlYW4gdmFsdWVDb21wYXRpYmxlID0gZmFsc2U7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQpp
bmRleCA5YjVjNDFjLi5hNWU2MmNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEKQEAgLTc4NjUsNiArNzg2NSwxMSBA
QAogCXRoaXMuaW50UHRyLS07ICAvLyAnKScgcG9zaXRpb24sIGRpc2NhcmQgZm9yIG5vdy4KIAls
ZXhwLnNvdXJjZVN0YXJ0ID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsgLy8gJygnIHBv
c2l0aW9uIG9yIGlkZW50aWZpZXIgcG9zaXRpb24uCiAJbGV4cC5zb3VyY2VFbmQgPSBib2R5LnNv
dXJjZUVuZDsKKwlsZXhwLmhhc1BhcmVucyA9ICh0aGlzLnNjYW5uZXIuZ2V0U291cmNlKClbbGV4
cC5zb3VyY2VTdGFydF0gPT0gJygnKTsKKwlpZiAoYm9keSBpbnN0YW5jZW9mIEV4cHJlc3Npb24p
IHsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gKEV4cHJlc3Npb24pIGJvZHk7CisJCWV4cHJl
c3Npb24uc3RhdGVtZW50RW5kID0gYm9keS5zb3VyY2VFbmQ7CisJfQogCXB1c2hPbkV4cHJlc3Np
b25TdGFjayhsZXhwKTsKIAlpZiAoIXRoaXMucGFyc2luZ0phdmE4UGx1cykgewogCQlwcm9ibGVt
UmVwb3J0ZXIoKS5sYW1iZGFFeHByZXNzaW9uc05vdEJlbG93MTgobGV4cCk7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9B
U1QuamF2YQppbmRleCA5NWI5MGVjLi42MmRiZjBlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEKQEAg
LTI0NDIsNiArMjQ0MiwxOSBAQAogCQlyZXR1cm4gcmVzdWx0OwogCX0KIAorCS8qKgorCSAqIENy
ZWF0ZXMgYW4gdW5wYXJlbnRlZCBsYW1iZGEgZXhwcmVzc2lvbiBub2RlIG93bmVkIGJ5IHRoaXMg
QVNULgorCSAqIEJ5IGRlZmF1bHQsIHRoZSBkZWNsYXJhdGlvbiBpcyBmb3IgYSBsYW1iZGEgZXhw
cmVzc2lvbiB3aXRoIGFuIGVtcHR5IGFyZ3VtZW50CisJICogbGlzdCBhbmQgbm8gYm9keS4KKwkg
KiAKKwkgKiBAcmV0dXJuIGEgbmV3IHVucGFyZW50ZWQgbGFtYmRhIGV4cHJlc3Npb24gbm9kZQor
CSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBuZXdMYW1iZGFF
eHByZXNzaW9uKCkgeworCQlMYW1iZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHBy
ZXNzaW9uKHRoaXMpOworCQlyZXR1cm4gcmVzdWx0OworCX0KKwkKIAkvLz09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT0gU1RBVEVNRU5UUyA9PT09PT09PT09PT09PT09PT09PT09PT09PT0K
IAkvKioKIAkgKiBDcmVhdGVzIGEgbmV3IHVucGFyZW50ZWQgbG9jYWwgdmFyaWFibGUgZGVjbGFy
YXRpb24gc3RhdGVtZW50IG5vZGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Rv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZh
CmluZGV4IDMzNTE5M2QuLjEwMzQ3M2MgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0
ZXIuamF2YQpAQCAtMTcyMCw2ICsxNzIwLDkgQEAKIAkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2UpIHsK
IAkJCXJldHVybiBjb252ZXJ0KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LlR5cGVSZWZlcmVuY2UpIGV4cHJlc3Npb24pOwogCQl9CisJCWlmIChleHByZXNzaW9uIGluc3Rh
bmNlb2Ygb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNz
aW9uKSB7CisJCQlyZXR1cm4gY29udmVydCgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uKSBleHByZXNzaW9uKTsKKwkJfQogCQlyZXR1cm4gbnVs
bDsKIAl9CiAKQEAgLTIxMzcsNiArMjE0MCw0MCBAQAogCQlyZXR1cm4gZXhwcjsKIAl9CiAKKwlw
dWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBjb252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkJaW50IHNvdXJjZVN0YXJ0
ID0gbGFtYmRhLnNvdXJjZVN0YXJ0OworCQlmaW5hbCBMYW1iZGFFeHByZXNzaW9uCWxhbWJkYUV4
cHJlc3Npb24gPSBuZXcgTGFtYmRhRXhwcmVzc2lvbih0aGlzLmFzdCk7CisJCWlmICh0aGlzLnJl
c29sdmVCaW5kaW5ncykgeworCQkJcmVjb3JkTm9kZXMobGFtYmRhRXhwcmVzc2lvbiwgbGFtYmRh
KTsKKwkJfQorCQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50
W10gYXJndW1lbnRzID0gbGFtYmRhLmFyZ3VtZW50czsKKwkJaWYgKGFyZ3VtZW50cyAhPSBudWxs
KSB7CisJCQlpbnQgYXJndW1lbnRzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKKwkJCWZvciAo
aW50IGkgPSAwOyBpIDwgYXJndW1lbnRzTGVuZ3RoOyBpKyspIHsKKwkJCQlvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50IGFyZ3VtZW50ID0gYXJndW1lbnRzW2ld
OworCQkJCWlmIChhcmd1bWVudC50eXBlID09IG51bGwpIHsKKwkJCQkJVmFyaWFibGVEZWNsYXJh
dGlvbkZyYWdtZW50IHZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCA9IG5ldyBWYXJpYWJsZURl
Y2xhcmF0aW9uRnJhZ21lbnQodGhpcy5hc3QpOworCQkJCQlTaW1wbGVOYW1lIHNpbXBsZU5hbWUg
PSBuZXcgU2ltcGxlTmFtZSh0aGlzLmFzdCk7CisJCQkJCVN0cmluZyBzID0gbmV3IFN0cmluZyhh
cmd1bWVudHNbaV0ubmFtZSk7CisJCQkJCXNpbXBsZU5hbWUuc2V0SWRlbnRpZmllcihzKTsKKwkJ
CQkJaWYgKHRoaXMucmVzb2x2ZUJpbmRpbmdzKSB7CisJCQkJCQlyZWNvcmROb2RlcyhzaW1wbGVO
YW1lLCBhcmd1bWVudCk7CisJCQkJCQlyZWNvcmROb2Rlcyh2YXJpYWJsZURlY2xhcmF0aW9uRnJh
Z21lbnQsIGFyZ3VtZW50KTsKKwkJCQkJfQorCQkJCQl2YXJpYWJsZURlY2xhcmF0aW9uRnJhZ21l
bnQuc2V0TmFtZShzaW1wbGVOYW1lKTsKKwkJCQkJbGFtYmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJz
KCkuYWRkKHZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCk7CQkJCQkKKwkJCQl9IGVsc2Ugewor
CQkJCQlTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24g
PSBjb252ZXJ0KGFyZ3VtZW50KTsKKwkJCQkJbGFtYmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCku
YWRkKHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24pOwkJCQkJCisJCQkJfQorCQkJfQorCQl9CisJ
CWxhbWJkYUV4cHJlc3Npb24uc2V0Qm9keShsYW1iZGEuYm9keSBpbnN0YW5jZW9mIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbiA/IAkoQVNUTm9kZSljb252
ZXJ0KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb24pIGxh
bWJkYS5ib2R5KSA6IChBU1ROb2RlKWNvbnZlcnQoKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuQmxvY2spIGxhbWJkYS5ib2R5KSk7CisJCWxhbWJkYUV4cHJlc3Npb24uc2V0
U291cmNlUmFuZ2Uoc291cmNlU3RhcnQsIGxhbWJkYS5zb3VyY2VFbmQgLSBzb3VyY2VTdGFydCAr
IDEpOworCQlsYW1iZGFFeHByZXNzaW9uLnNldFBhcmVudGhlc2lzKGxhbWJkYS5oYXNQYXJlbnMp
OworCQlyZXR1cm4gbGFtYmRhRXhwcmVzc2lvbjsKKwl9CisKIAlwdWJsaWMgTWFya2VyQW5ub3Rh
dGlvbiBjb252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTWFya2Vy
QW5ub3RhdGlvbiBhbm5vdGF0aW9uKSB7CiAJCWZpbmFsIE1hcmtlckFubm90YXRpb24gbWFya2Vy
QW5ub3RhdGlvbiA9IG5ldyBNYXJrZXJBbm5vdGF0aW9uKHRoaXMuYXN0KTsKIAkJc2V0VHlwZU5h
bWVGb3JBbm5vdGF0aW9uKGFubm90YXRpb24sIG1hcmtlckFubm90YXRpb24pOwpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RN
YXRjaGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0FTVE1hdGNoZXIuamF2YQppbmRleCAwNmJhMjNmLi4zYjRhMjQyIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE1h
dGNoZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0
L2NvcmUvZG9tL0FTVE1hdGNoZXIuamF2YQpAQCAtMTgzOCw2ICsxODM4LDMwIEBACiAJICogb3Ro
ZXIgb2JqZWN0IGlzIGEgbm9kZSBvZiB0aGUgc2FtZSB0eXBlIHdpdGggc3RydWN0dXJhbGx5IGlz
b21vcnBoaWMKIAkgKiBjaGlsZCBzdWJ0cmVlcy4gU3ViY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhp
cyBtZXRob2QgYXMgbmVlZGVkLgogCSAqIDwvcD4KKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZQor
CSAqIEBwYXJhbSBvdGhlciB0aGUgb3RoZXIgb2JqZWN0LCBvciA8Y29kZT5udWxsPC9jb2RlPgor
CSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywgb3IK
KwkgKiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUgb3Ro
ZXIgb2JqZWN0IGhhcyBhCisJICogICBkaWZmZXJlbnQgbm9kZSB0eXBlIG9yIGlzIDxjb2RlPm51
bGw8L2NvZGU+CisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIG1hdGNoKExh
bWJkYUV4cHJlc3Npb24gbm9kZSwgT2JqZWN0IG90aGVyKSB7CisJCWlmICghKG90aGVyIGluc3Rh
bmNlb2YgTGFtYmRhRXhwcmVzc2lvbikpIHsKKwkJCXJldHVybiBmYWxzZTsKKwkJfQorCQlMYW1i
ZGFFeHByZXNzaW9uIG8gPSAoTGFtYmRhRXhwcmVzc2lvbikgb3RoZXI7CisJCXJldHVybgkobm9k
ZS5oYXNQYXJlbnRoZXNpcygpID09IG8uaGFzUGFyZW50aGVzaXMoKSkKKwkJCQkmJiBzYWZlU3Vi
dHJlZUxpc3RNYXRjaChub2RlLnBhcmFtZXRlcnMoKSwgby5wYXJhbWV0ZXJzKCkpCisJCQkJJiYg
c2FmZVN1YnRyZWVNYXRjaChub2RlLmdldEJvZHkoKSwgby5nZXRCb2R5KCkpOworCX0KKworCS8q
KgorCSAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gbm9kZSBhbmQgdGhlIG90aGVyIG9iamVj
dCBtYXRjaC4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBwcm92aWRl
ZCBieSB0aGlzIGNsYXNzIHRlc3RzIHdoZXRoZXIgdGhlCisJICogb3RoZXIgb2JqZWN0IGlzIGEg
bm9kZSBvZiB0aGUgc2FtZSB0eXBlIHdpdGggc3RydWN0dXJhbGx5IGlzb21vcnBoaWMKKwkgKiBj
aGlsZCBzdWJ0cmVlcy4gU3ViY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgYXMgbmVl
ZGVkLgorCSAqIDwvcD4KIAkgKgogCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlCiAJICogQHBhcmFt
IG90aGVyIHRoZSBvdGhlciBvYmplY3QsIG9yIDxjb2RlPm51bGw8L2NvZGU+CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5v
ZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vQVNUTm9kZS5qYXZhCmluZGV4IGI1NTE5YWYuLmIzOTFkMDMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
QVNUTm9kZS5qYXZhCkBAIC04NDMsNiArODQzLDE0IEBACiAJcHVibGljIHN0YXRpYyBmaW5hbCBp
bnQgRVhUUkFfRElNRU5TSU9OID0gODU7CiAKIAkvKioKKwkgKiBOb2RlIHR5cGUgY29uc3RhbnQg
aW5kaWNhdGluZyBhIG5vZGUgb2YgdHlwZQorCSAqIDxjb2RlPkxhbWJkYUV4cHJlc3Npb248L2Nv
ZGU+LgorCSAqIEBzZWUgTGFtYmRhRXhwcmVzc2lvbgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlw
dWJsaWMgc3RhdGljIGZpbmFsIGludCBMQU1CREFfRVhQUkVTU0lPTiA9IDg2OworCisJLyoqCiAJ
ICogUmV0dXJucyB0aGUgbm9kZSBjbGFzcyBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgbm9kZSB0eXBl
LgogCSAqCiAJICogQHBhcmFtIG5vZGVUeXBlIEFTVCBub2RlIHR5cGUKQEAgLTkzMiw2ICs5NDAs
OCBAQAogCQkJCXJldHVybiBKYXZhZG9jLmNsYXNzOwogCQkJY2FzZSBMQUJFTEVEX1NUQVRFTUVO
VCA6CiAJCQkJcmV0dXJuIExhYmVsZWRTdGF0ZW1lbnQuY2xhc3M7CisJCQljYXNlIExBTUJEQV9F
WFBSRVNTSU9OIDoKKwkJCQlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbi5jbGFzczsKIAkJCWNhc2Ug
TElORV9DT01NRU5UIDoKIAkJCQlyZXR1cm4gTGluZUNvbW1lbnQuY2xhc3M7CiAJCQljYXNlIE1B
UktFUl9BTk5PVEFUSU9OIDoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKaW5kZXgg
YjJjMDgzNC4uMjFiZGRjMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKQEAg
LTEyNjgsNiArMTI2OCwyMyBAQAogCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhl
IGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUKIAkgKiB2aXNpdGVkLCBhbmQgPGNvZGU+
ZmFsc2U8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkCiAJICogYmUg
c2tpcHBlZAorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChMYW1i
ZGFFeHByZXNzaW9uIG5vZGUpIHsKKwkJcmV0dXJuIHRydWU7CisJfQorCisJLyoqCisJICogVmlz
aXRzIHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRoZSBk
ZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGluZyBhbmQgcmV0dXJuIHRydWUuCisJICog
U3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFtIG5v
ZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRo
ZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkIGJlCisJICogdmlzaXRlZCwgYW5kIDxjb2Rl
PmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZAorCSAqIGJl
IHNraXBwZWQKIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiB2aXNpdChTdXBlckNvbnN0cnVjdG9ySW52
b2NhdGlvbiBub2RlKSB7CiAJCXJldHVybiB0cnVlOwpAQCAtMjM5MSw2ICsyNDA4LDE5IEBACiAJ
ICogPC9wPgogCSAqCiAJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKKwkgKiBAc2lu
Y2UgMy45CisJICovCisJcHVibGljIHZvaWQgZW5kVmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBub2Rl
KSB7CisJCS8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb246IGRvIG5vdGhpbmcKKwl9CisKKwkvKioK
KwkgKiBFbmQgb2YgdmlzaXQgdGhlIGdpdmVuIHR5cGUtc3BlY2lmaWMgQVNUIG5vZGUuCisJICog
PHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nLiBTdWJjbGFz
c2VzIG1heSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUg
bm9kZSB0byB2aXNpdAogCSAqLwogCXB1YmxpYyB2b2lkIGVuZFZpc2l0KFN0cmluZ0xpdGVyYWwg
bm9kZSkgewogCQkvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0Jp
bmRpbmdSZXNvbHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9CaW5kaW5nUmVzb2x2ZXIuamF2YQppbmRleCBkMjJjYjZiLi5mNGE0YzYz
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0JpbmRpbmdSZXNvbHZlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Rv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEKQEAgLTEsMTAg
KzEsMTQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAog
ICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lm
aWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChK
Q1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJw
b3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lm
aWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KQEAgLTU3Nyw2ICs1ODEsMjcgQEAKIAl9CiAKIAkvKioKKwkgKiBSZXNvbHZl
cyB0aGUgZ2l2ZW4gTGFtYmRhIEV4cHJlc3Npb24gYW5kIHJldHVybnMgdGhlIGJpbmRpbmcgZm9y
IGl0LgorCSAqIDxwPgorCSAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiA8Y29kZT5MYW1iZGFFeHBy
ZXNzaW9uLnJlc29sdmVNZXRob2Q8L2NvZGU+CisJICogZm9yd2FyZHMgdG8gdGhpcyBtZXRob2Qu
IEhvdyB0aGUgbWV0aG9kIHJlc29sdmVzIGlzIG9mdGVuIGEgZnVuY3Rpb24gb2YKKwkgKiB0aGUg
Y29udGV4dCBpbiB3aGljaCB0aGUgbWV0aG9kIGRlY2xhcmF0aW9uIG5vZGUgaXMgZW1iZWRkZWQg
YXMgd2VsbCBhcworCSAqIHRoZSBtZXRob2QgZGVjbGFyYXRpb24gc3VidHJlZSBpdHNlbGYuCisJ
ICogPC9wPgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoaXMg
bWV0aG9kIHJldHVybnMgPGNvZGU+bnVsbDwvY29kZT4uCisJICogU3ViY2xhc3NlcyBtYXkgcmUt
aW1wbGVtZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBsYW1iZGEgTGFtYmRhRXhwcmVz
c2lvbiBvZiBpbnRlcmVzdAorCSAqIEByZXR1cm4gdGhlIGJpbmRpbmcgZm9yIHRoZSBnaXZlbiBs
YW1iZGEgZXhwcmVzc2lvbiwgb3IKKwkgKiAgICA8Y29kZT5udWxsPC9jb2RlPiBpZiBubyBiaW5k
aW5nIGlzIGF2YWlsYWJsZQorCSAqLworCUlNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2QoTGFt
YmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCisJLyoqCiAJICog
UmVzb2x2ZXMgdGhlIGdpdmVuIG1ldGhvZCBpbnZvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBiaW5k
aW5nIGZvciBpdC4KIAkgKiA8cD4KIAkgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgPGNvZGU+TWV0
aG9kSW52b2NhdGlvbi5yZXNvbHZlTWV0aG9kQmluZGluZzwvY29kZT4KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRGVmYXVsdEJp
bmRpbmdSZXNvbHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKaW5kZXggMDU1Y2Q4NS4u
NjljMzkzZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jl
c29sdmVyLmphdmEKQEAgLTg5NCw2ICs4OTQsMjYgQEAKIAkvKgogCSAqIE1ldGhvZCBkZWNsYXJl
ZCBvbiBCaW5kaW5nUmVzb2x2ZXIuCiAJICovCisJc3luY2hyb25pemVkIElNZXRob2RCaW5kaW5n
IHJlc29sdmVNZXRob2QoTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkJT2JqZWN0IG9sZE5v
ZGUgPSB0aGlzLm5ld0FzdFRvT2xkQXN0LmdldChsYW1iZGEpOworCQlpZiAob2xkTm9kZSBpbnN0
YW5jZW9mIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVz
c2lvbikgeworCQkJb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFF
eHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24gPSAob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uKSBvbGROb2RlOworCQkJSU1ldGhvZEJpbmRpbmcg
bWV0aG9kQmluZGluZyA9IGdldE1ldGhvZEJpbmRpbmcobGFtYmRhRXhwcmVzc2lvbi5iaW5kaW5n
KTsKKwkJCWlmIChtZXRob2RCaW5kaW5nID09IG51bGwpIHsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJ
CX0KKwkJCXRoaXMuYmluZGluZ3NUb0FzdE5vZGVzLnB1dChtZXRob2RCaW5kaW5nLCBsYW1iZGEp
OworCQkJU3RyaW5nIGtleSA9IG1ldGhvZEJpbmRpbmcuZ2V0S2V5KCk7CisJCQlpZiAoa2V5ICE9
IG51bGwpIHsKKwkJCQl0aGlzLmJpbmRpbmdUYWJsZXMuYmluZGluZ0tleXNUb0JpbmRpbmdzLnB1
dChrZXksIG1ldGhvZEJpbmRpbmcpOworCQkJfQorCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CisJ
CX0KKwkJcmV0dXJuIG51bGw7CisJfQorLyoKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQmluZGlu
Z1Jlc29sdmVyLgorCSAqLwogCXN5bmNocm9uaXplZCBJTWV0aG9kQmluZGluZyByZXNvbHZlTWV0
aG9kKE1ldGhvZEludm9jYXRpb24gbWV0aG9kKSB7CiAJCU9iamVjdCBvbGROb2RlID0gdGhpcy5u
ZXdBc3RUb09sZEFzdC5nZXQobWV0aG9kKTsKIAkJaWYgKG9sZE5vZGUgaW5zdGFuY2VvZiBNZXNz
YWdlU2VuZCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9k
b20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YQppbmRleCAyMDAzZDlh
Li42YTYwY2NkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0zMCw2ICszMCw3IEBACiAgKiAgICB7QGxpbmsgRmllbGRBY2Nlc3N9LAogICog
ICAge0BsaW5rIEluZml4RXhwcmVzc2lvbn0sCiAgKiAgICB7QGxpbmsgSW5zdGFuY2VvZkV4cHJl
c3Npb259LAorICogICAge0BsaW5rIExhbWJkYUV4cHJlc3Npb259LAogICogICAge0BsaW5rIE1l
dGhvZEludm9jYXRpb259LAogICogICAge0BsaW5rIE5hbWV9LAogICogICAge0BsaW5rIE51bGxM
aXRlcmFsfSwKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9MYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3
IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uOWFmYTBhYgotLS0gL2Rldi9udWxsCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFt
YmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0wLDAgKzEsMzIxIEBACisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgorICogQ29weXJpZ2h0IChjKSAyMDExLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xp
cHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0
aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBK
YXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9y
IHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5v
dCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICog
Q29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbTsKKworaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CisvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0
cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBpcyBh
biBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3Bl
ZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUg
YXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBU
aGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBK
Q1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworaW1w
b3J0IGphdmEudXRpbC5MaXN0OworCisvKioKKyAqIExhbWJkYSBleHByZXNzaW9uIEFTVCBub2Rl
IHR5cGUuCisgKiA8cHJlPgorICogTGFtYmRhRXhwcmVzc2lvbjoKKyAqICAgIElkZW50aWZpZXIg
PGI+LT48L2I+IEJvZHkKKyAqICAgIDxiPig8L2I+IFsgSWRlbnRpZmllciB7IDxiPiw8L2I+IElk
ZW50aWZpZXIgfSBdIDxiPik8L2I+IDxiPi0+PC9iPiBCb2R5CisgKiAgICA8Yj4oPC9iPiBbIEZv
cm1hbFBhcmFtZXRlciB7IDxiPiw8L2I+IEZvcm1hbFBhcmFtZXRlciB9IF0gPGI+KTwvYj4gPGI+
LT48L2I+IEJvZHkKKyAqIDwvcHJlPgorICogCisgKjxwPiAKKyAqIEFsbCB0aGUgZWxlbWVudHMg
b2YgdGhlIGxpc3RzIHNob3VsZCBiZSBvZiB0aGUgc2FtZSBraW5kIHdoaWNoIGNhbiBiZSBlaXRo
ZXIgCisgKiBhIHtAbGluayBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9ufSBvciBhIHtAbGluayBW
YXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnR9LjwvcD4KKyAqPHA+Qm9keSBjYW4gYmUgZWl0aGVy
IGEge0BsaW5rIEJsb2NrfSBvciBhbiB7QGxpbmsgRXhwcmVzc2lvbn0uPC9wPgorICogQHNpbmNl
IDMuOSAKKyAqIEBub2luc3RhbnRpYXRlIFRoaXMgY2xhc3MgaXMgbm90IGludGVuZGVkIHRvIGJl
IGluc3RhbnRpYXRlZCBieSBjbGllbnRzLiAKKyAqLworCitwdWJsaWMgY2xhc3MgTGFtYmRhRXhw
cmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24geworCisJLyoqCisJICogVGhlICJwYXJhbWV0ZXJz
IiBzdHJ1Y3R1cmFsIHByb3BlcnR5IG9mIHRoaXMgbm9kZSB0eXBlIChjaGlsZCB0eXBlOiB7QGxp
bmsgVmFyaWFibGVEZWNsYXJhdGlvbn0pLgorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hp
bGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yIFBBUkFNRVRFUlNfUFJPUEVSVFkgPQorCQluZXcgQ2hp
bGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yKExhbWJkYUV4cHJlc3Npb24uY2xhc3MsICJwYXJhbWV0
ZXJzIiwgVmFyaWFibGVEZWNsYXJhdGlvbi5jbGFzcywgTk9fQ1lDTEVfUklTSyk7IC8vJE5PTi1O
TFMtMSQKKwkKKwkvKioKKwkgKiBUaGUgImJvZHkiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhp
cyBub2RlIHR5cGUgKGNoaWxkIHR5cGU6IHtAbGluayBBU1ROb2RlfSkgOiBjYW4KKwkgKiAgYmUg
ZWl0aGVyIGEge0BsaW5rIEJsb2NrfSBvciBhbiB7QGxpbmsgRXhwcmVzc2lvbn0uCisJICovCisJ
cHVibGljIHN0YXRpYyBmaW5hbCBDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBCT0RZX1BST1BFUlRZ
ID0KKwkJbmV3IENoaWxkUHJvcGVydHlEZXNjcmlwdG9yKExhbWJkYUV4cHJlc3Npb24uY2xhc3Ms
ICJib2R5IiwgQVNUTm9kZS5jbGFzcywgTUFOREFUT1JZLCBDWUNMRV9SSVNLKTsgLy8kTk9OLU5M
Uy0xJAorCisJLyoqCisJICogVGhlICJwYXJlbnRoZXNpcyIgc3RydWN0dXJhbCBwcm9wZXJ0eSBv
ZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQgdHlwZToge0BsaW5rIEJvb2xlYW59KSAKKwkgKi8KKwlw
dWJsaWMgc3RhdGljIGZpbmFsIFNpbXBsZVByb3BlcnR5RGVzY3JpcHRvciBQQVJFTlRIRVNJU19Q
Uk9QRVJUWSA9CisJCW5ldyBTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IoTGFtYmRhRXhwcmVzc2lv
bi5jbGFzcywgInBhcmVudGhlc2lzIiwgYm9vbGVhbi5jbGFzcywgTUFOREFUT1JZKTsgLy8kTk9O
LU5MUy0xJAorCisJLyoqCisJICogQSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVt
ZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KSwKKwkg
KiBvciBudWxsIGlmIHVuaW5pdGlhbGl6ZWQuCisJICovCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwg
TGlzdCBQUk9QRVJUWV9ERVNDUklQVE9SU184XzA7CisJCisJc3RhdGljIHsKKwkJTGlzdCBwcm9w
ZXJ0eUxpc3QgPSBuZXcgQXJyYXlMaXN0KDQpOworCQljcmVhdGVQcm9wZXJ0eUxpc3QoTGFtYmRh
RXhwcmVzc2lvbi5jbGFzcywgcHJvcGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoUEFSQU1FVEVS
U19QUk9QRVJUWSwgcHJvcGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoQk9EWV9QUk9QRVJUWSwg
cHJvcGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoUEFSRU5USEVTSVNfUFJPUEVSVFksIHByb3Bl
cnR5TGlzdCk7CisJCVBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3Qo
cHJvcGVydHlMaXN0KTsKKwl9CisJCisJLyoqCisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0
dXJhbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50
cyBtdXN0IG5vdCBtb2RpZnkgdGhlIHJlc3VsdC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0
aGUgQVBJIGxldmVsOyBvbmUgb2YgdGhlIEFTVC5KTFMqIGNvbnN0YW50cworCSAqIEByZXR1cm4g
YSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5r
IFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KQorCSAqLworCXB1YmxpYyBzdGF0aWMgTGlz
dCBwcm9wZXJ0eURlc2NyaXB0b3JzKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gUFJPUEVSVFlf
REVTQ1JJUFRPUlNfOF8wOworCX0KKworCS8qKgorCSAqIFRoZSBwYXJhbWV0ZXIgZGVjbGFyYXRp
b25zCisJICogKGVsZW1lbnQgdHlwZToge0BsaW5rIFZhcmlhYmxlRGVjbGFyYXRpb259KS4KKwkg
KiBEZWZhdWx0cyB0byBhbiBlbXB0eSBsaXN0LgorCSAqLworCXByaXZhdGUgQVNUTm9kZS5Ob2Rl
TGlzdCBwYXJhbWV0ZXJzID0KKwkJbmV3IEFTVE5vZGUuTm9kZUxpc3QoUEFSQU1FVEVSU19QUk9Q
RVJUWSk7CisKKwkvKioKKwkgKiBUaGUgbWV0aG9kIGJvZHkuCisJICogRGVmYXVsdHMgdG8gbm9u
ZS4KKwkgKi8KKwlwcml2YXRlIEFTVE5vZGUgYm9keSA9IG51bGw7CisKKwkvKioKKwkgKiBJbmRp
Y2F0ZXMgdGhlIHByZXNlbmNlIG9yIGFic2VuY2Ugb2YgcGFyZW50aGVzaXMuCisJICogZGVmYXVs
dHMgdG8gZmFsc2UuCisJICovCisJcHJpdmF0ZSBib29sZWFuIGhhc1BhcmVudGhlc2lzID0gZmFs
c2U7CisKKwkvKioKKwkgKiBDcmVhdGVzIGEgbmV3IEFTVCBub2RlIGZvciBhIExhbWJkYUV4cHJl
c3Npb24gZGVjbGFyYXRpb24gb3duZWQKKwkgKiBieSB0aGUgZ2l2ZW4gQVNULgorCSAqIDxwPgor
CSAqIE4uQi4gVGhpcyBjb25zdHJ1Y3RvciBpcyBwYWNrYWdlLXByaXZhdGU7IGFsbCBzdWJjbGFz
c2VzIG11c3QgYmUKKwkgKiBkZWNsYXJlZCBpbiB0aGUgc2FtZSBwYWNrYWdlOyBjbGllbnRzIGFy
ZSB1bmFibGUgdG8gZGVjbGFyZQorCSAqIGFkZGl0aW9uYWwgc3ViY2xhc3Nlcy4KKwkgKiA8L3A+
CisJICoKKwkgKiBAcGFyYW0gYXN0IHRoZSBBU1QgdGhhdCBpcyB0byBvd24gdGhpcyBub2RlCisJ
ICovCisJTGFtYmRhRXhwcmVzc2lvbihBU1QgYXN0KSB7CisJCXN1cGVyKGFzdCk7CisJfQorCisJ
LyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9u
IEFTVE5vZGUuCisJICovCisJTGlzdCBpbnRlcm5hbFN0cnVjdHVyYWxQcm9wZXJ0aWVzRm9yVHlw
ZShpbnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIHByb3BlcnR5RGVzY3JpcHRvcnMoYXBpTGV2ZWwp
OworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBk
ZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCWZpbmFsIGJvb2xlYW4gaW50ZXJuYWxHZXRTZXRC
b29sZWFuUHJvcGVydHkoU2ltcGxlUHJvcGVydHlEZXNjcmlwdG9yIHByb3BlcnR5LCBib29sZWFu
IGdldCwgYm9vbGVhbiB2YWx1ZSkgeworCQlpZiAocHJvcGVydHkgPT0gUEFSRU5USEVTSVNfUFJP
UEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1cm4gaGFzUGFyZW50aGVzaXMoKTsKKwkJ
CX0gZWxzZSB7CisJCQkJc2V0UGFyZW50aGVzaXModmFsdWUpOworCQkJCXJldHVybiBmYWxzZTsK
KwkJCX0KKwkJfQorCQkvLyBhbGxvdyBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHRvIGZsYWcgdGhl
IGVycm9yCisJCXJldHVybiBzdXBlci5pbnRlcm5hbEdldFNldEJvb2xlYW5Qcm9wZXJ0eShwcm9w
ZXJ0eSwgZ2V0LCB2YWx1ZSk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRo
b2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgQVNUTm9k
ZSBpbnRlcm5hbEdldFNldENoaWxkUHJvcGVydHkoQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgcHJv
cGVydHksIGJvb2xlYW4gZ2V0LCBBU1ROb2RlIGNoaWxkKSB7CisJCWlmIChwcm9wZXJ0eSA9PSBC
T0RZX1BST1BFUlRZKSB7CisJCQlpZiAoZ2V0KSB7CisJCQkJcmV0dXJuIGdldEJvZHkoKTsKKwkJ
CX0gZWxzZSB7CisJCQkJc2V0Qm9keSggY2hpbGQpOworCQkJCXJldHVybiBudWxsOworCQkJfQor
CQl9CisJCS8vIGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IK
KwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShwcm9wZXJ0eSwgZ2V0
LCBjaGlsZCk7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVyIHRoaXMgaGFzIHBhcmVu
dGhlc2lzIG9yIG5vdAorCSAqCisJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGlz
IGhhcyBwYXJlbnRoZXNpcywKKwkgKiAgICBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lz
ZQorCSAqLworCXB1YmxpYyBib29sZWFuIGhhc1BhcmVudGhlc2lzKCkgeworCQlyZXR1cm4gdGhp
cy5oYXNQYXJlbnRoZXNpczsKKwl9CisKKwkvKioKKwkgKiBTZXRzIHdoZXRoZXIgdGhpcyBoYXMg
cGFyZW50aGVzaXMgb3Igbm90LgorCSAqCisJICogQHBhcmFtIGhhc1BhcmVudGhlc2lzIDxjb2Rl
PnRydWU8L2NvZGU+IGlmIHRoaXMgaGFzIHBhcmVudGhlc2lzCisJICogIGFuZCA8Y29kZT5mYWxz
ZTwvY29kZT4gb3RoZXJ3aXNlCisJICovCisJcHVibGljIHZvaWQgc2V0UGFyZW50aGVzaXMoYm9v
bGVhbiBoYXNQYXJlbnRoZXNpcykgeworCQlwcmVWYWx1ZUNoYW5nZShQQVJFTlRIRVNJU19QUk9Q
RVJUWSk7CisJCXRoaXMuaGFzUGFyZW50aGVzaXMgPSBoYXNQYXJlbnRoZXNpczsKKwkJcG9zdFZh
bHVlQ2hhbmdlKFBBUkVOVEhFU0lTX1BST1BFUlRZKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9j
IGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8K
KwlmaW5hbCBMaXN0IGludGVybmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkoQ2hpbGRMaXN0UHJvcGVy
dHlEZXNjcmlwdG9yIHByb3BlcnR5KSB7CisJCWlmIChwcm9wZXJ0eSA9PSBQQVJBTUVURVJTX1BS
T1BFUlRZKSB7CisJCQlyZXR1cm4gcGFyYW1ldGVycygpOworCQl9CisJCS8vIGFsbG93IGRlZmF1
bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVy
bmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkocHJvcGVydHkpOworCX0KKwkKKwkvKiAob21pdCBqYXZh
ZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkg
Ki8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gTEFNQkRBX0VYUFJFU1NJT047CisJ
fQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xh
cmVkIG9uIEFTVE5vZGUuCisJICovCisJQVNUTm9kZSBjbG9uZTAoQVNUIHRhcmdldCkgeworCQlM
YW1iZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRhcmdldCk7CisJ
CXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsK
KwkJcmVzdWx0LnNldFBhcmVudGhlc2lzKGhhc1BhcmVudGhlc2lzKCkpOworCQlyZXN1bHQucGFy
YW1ldGVycygpLmFkZEFsbChBU1ROb2RlLmNvcHlTdWJ0cmVlcyh0YXJnZXQsIHBhcmFtZXRlcnMo
KSkpOworCQlyZXN1bHQuc2V0Qm9keShBU1ROb2RlLmNvcHlTdWJ0cmVlKHRhcmdldCwgZ2V0Qm9k
eSgpKSk7CisJCXJldHVybiByZXN1bHQ7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhp
cyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmluYWwg
Ym9vbGVhbiBzdWJ0cmVlTWF0Y2gwKEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7
CisJCS8vIGRpc3BhdGNoIHRvIGNvcnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0
dXJuIG1hdGNoZXIubWF0Y2godGhpcywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFkb2Mg
Zm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLwor
CXZvaWQgYWNjZXB0MChBU1RWaXNpdG9yIHZpc2l0b3IpIHsKKwkJYm9vbGVhbiB2aXNpdENoaWxk
cmVuID0gdmlzaXRvci52aXNpdCh0aGlzKTsKKwkJaWYgKHZpc2l0Q2hpbGRyZW4pIHsKKwkJCS8v
IHZpc2l0IGNoaWxkcmVuIGluIG5vcm1hbCBsZWZ0IHRvIHJpZ2h0IHJlYWRpbmcgb3JkZXIKKwkJ
CWFjY2VwdENoaWxkcmVuKHZpc2l0b3IsIHRoaXMucGFyYW1ldGVycyk7CisJCQlhY2NlcHRDaGls
ZCh2aXNpdG9yLCBnZXRCb2R5KCkpOworCQl9CisJCXZpc2l0b3IuZW5kVmlzaXQodGhpcyk7CisJ
fQorCisJLyoqCisJICogUmV0dXJucyB0aGUgbGl2ZSBvcmRlcmVkIGxpc3Qgb2YgZm9ybWFsIHBh
cmFtZXRlcnMgb2YgdGhpcyBsYW1iZGEgZXhwcmVzc2lvbi4KKwkgKgorCSAqIEByZXR1cm4gdGhl
IGxpdmUgbGlzdCBvZiBmb3JtYWwgcGFyYW1ldGVycyBvZiB0aGlzIGxhbWJkYSBleHByZXNzaW9u
LgorCSAqICAgIChlbGVtZW50IHR5cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0aW9ufSAtCisJ
ICovCisJcHVibGljIExpc3QgcGFyYW1ldGVycygpIHsKKwkJcmV0dXJuIHRoaXMucGFyYW1ldGVy
czsKKwl9CisKKwkvKioKKwkgKiBSZXR1cm5zIHRoZSBib2R5IG9mIHRoaXMgbGFtYmRhIGV4cHJl
c3Npb24uCisJICogPHA+CisJICogPC9wPgorCSAqIEBleGNlcHRpb24gTnVsbFBvaW50ZXJFeGNl
cHRpb24gaWYgYm9keSBpcyBudWxsLgorCSAqIEByZXR1cm4gdGhlIGxhbWJkYSBleHByZXNzaW9u
IGJvZHkgd2hpY2ggY2FuIGJlIGVpdGhlciBhIHtAbGluayBCbG9ja30gb3IgYSB7QGxpbmsgRXhw
cmVzc2lvbn0uIAorCSAqLworCXB1YmxpYyBBU1ROb2RlIGdldEJvZHkoKSB7CisJCXJldHVybiB0
aGlzLmJvZHk7CisJfQorCisJLyoqCisJICogU2V0cyBvciBjbGVhcnMgdGhlIGJvZHkgb2YgdGhp
cyBsYW1iZGEgZXhwcmVzc2lvbi4KKwkgKgorCSAqIEBwYXJhbSBib2R5IHRoZSBibG9jayBub2Rl
LCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGVyZSBpcyBub25lCisJICogQGV4Y2VwdGlvbiBJ
bGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWY6CisJICogPHVsPgorCSAqIDxsaT50aGUgbm9kZSBi
ZWxvbmdzIHRvIGEgZGlmZmVyZW50IEFTVDwvbGk+CisJICogPGxpPnRoZSBub2RlIGFscmVhZHkg
aGFzIGEgcGFyZW50PC9saT4KKwkgKiA8bGk+YSBjeWNsZSBpbiB3b3VsZCBiZSBjcmVhdGVkPC9s
aT4KKwkgKiA8bGk+IGJvZHkgaXMgbnVsbCA8L2xpPgorCSAqIDwvdWw+CisJICovCisJcHVibGlj
IHZvaWQgc2V0Qm9keShBU1ROb2RlIGJvZHkpIHsKKwkJaWYgKGJvZHkgPT0gbnVsbCkgeworCQkJ
dGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOworCQl9CisJCS8vIGEgTWV0aG9k
RGVjbGFyYXRpb24gbWF5IG9jY3VyIGluIGEgQmxvY2sgLSBtdXN0IGNoZWNrIGN5Y2xlcworCQlB
U1ROb2RlIG9sZENoaWxkID0gdGhpcy5ib2R5OworCQlwcmVSZXBsYWNlQ2hpbGQob2xkQ2hpbGQs
IGJvZHksIEJPRFlfUFJPUEVSVFkpOworCQl0aGlzLmJvZHkgPSBib2R5OworCQlwb3N0UmVwbGFj
ZUNoaWxkKG9sZENoaWxkLCBib2R5LCBCT0RZX1BST1BFUlRZKTsKKwl9CisKKwkvKioKKwkgKiBS
ZXNvbHZlcyBhbmQgcmV0dXJucyB0aGUgYmluZGluZyBmb3IgdGhlIGxhbWJkYSBleHByZXNzaW9u
CisJICogPHA+CisJICogTm90ZSB0aGF0IGJpbmRpbmdzIGFyZSBnZW5lcmFsbHkgdW5hdmFpbGFi
bGUgdW5sZXNzIHJlcXVlc3RlZCB3aGVuIHRoZQorCSAqIEFTVCBpcyBiZWluZyBidWlsdC4KKwkg
KiA8L3A+CisJICoKKwkgKiBAcmV0dXJuIHRoZSBiaW5kaW5nLCBvciA8Y29kZT5udWxsPC9jb2Rl
PiBpZiB0aGUgYmluZGluZyBjYW5ub3QgYmUKKwkgKiAgICByZXNvbHZlZAorCSAqLworCXB1Ymxp
YyBJTWV0aG9kQmluZGluZyByZXNvbHZlTWV0aG9kQmluZGluZygpIHsKKwkJcmV0dXJuIHRoaXMu
YXN0LmdldEJpbmRpbmdSZXNvbHZlcigpLnJlc29sdmVNZXRob2QodGhpcyk7CisJfQorCisJLyog
KG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFT
VE5vZGUuCisJICovCisJaW50IG1lbVNpemUoKSB7CisJCXJldHVybiAzICogNDsKKwl9CisKKwkv
KiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24g
QVNUTm9kZS4KKwkgKi8KKwlpbnQgdHJlZVNpemUoKSB7CisJCXJldHVybgorCQkJbWVtU2l6ZSgp
CisJCQkrICh0aGlzLnBhcmFtZXRlcnMgPT0gbnVsbCA/IDAgOiB0aGlzLnBhcmFtZXRlcnMubGlz
dFNpemUoKSkKKwkJCSsgKHRoaXMuYm9keSA9PSBudWxsID8gMCA6IGdldEJvZHkoKS50cmVlU2l6
ZSgpKTsKKwl9Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9O
YWl2ZUFTVEZsYXR0ZW5lci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZhCmluZGV4IDA5
MDVkNmEuLmE3M2ZhYzkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
ZG9tL05haXZlQVNURmxhdHRlbmVyLmphdmEKQEAgLTE3LDEwMiArMTcsNyBAQAogaW1wb3J0IGph
dmEudXRpbC5JdGVyYXRvcjsKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5BU1Q7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkFTVE5vZGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVFZpc2l0b3I7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFic3RyYWN0VHlwZURlY2xhcmF0aW9uOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bbm5vdGF0YWJsZVR5cGU7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkFubm90YXRpb25UeXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkFubm90YXRpb25UeXBlTWVtYmVyRGVjbGFyYXRpb247Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFub255bW91c0NsYXNzRGVjbGFyYXRpb247Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFycmF5QWNjZXNzOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5BcnJheUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5BcnJheUluaXRpYWxpemVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5BcnJheVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFzc2VydFN0YXRl
bWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXNzaWdubWVudDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQmxvY2s7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkJsb2NrQ29tbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
Qm9keURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Cb29sZWFu
TGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQnJlYWtTdGF0ZW1lbnQ7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNhc3RFeHByZXNzaW9uOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5DYXRjaENsYXVzZTsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uQ2hhcmFjdGVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uQ2xhc3NJbnN0YW5jZUNyZWF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5Db21waWxhdGlvblVuaXQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
Q29uc3RydWN0b3JJbnZvY2F0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5D
b250aW51ZVN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXh0cmFE
aW1lbnNpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlVuaW9uVHlwZTsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRG9TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLkVtcHR5U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5FbmhhbmNlZEZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uRW51bUNvbnN0YW50RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkVudW1EZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRXhwcmVzc2lv
blN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRmllbGRBY2Nlc3M7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkZpZWxkRGVjbGFyYXRpb247Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkZvclN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uSWZTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkltcG9ydERlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5JbmZpeEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkluaXRp
YWxpemVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JbnN0YW5jZW9mRXhwcmVz
c2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSmF2YWRvYzsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTGFiZWxlZFN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uTGluZUNvbW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLk1hcmtlckFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
Lk1lbWJlclJlZjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWVtYmVyVmFsdWVQ
YWlyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2REZWNsYXJhdGlvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0aG9kSW52b2NhdGlvbjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0aG9kUmVmOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5NZXRob2RSZWZQYXJhbWV0ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLk1vZGlmaWVyOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OYW1l
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Ob3JtYWxBbm5vdGF0aW9uOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OdWxsTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uTnVtYmVyTGl0ZXJhbDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uUGFja2FnZURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5QYXJhbWV0ZXJpemVkVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
UGFyZW50aGVzaXplZEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LlBvc3RmaXhFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmVm
aXhFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QcmltaXRpdmVU
eXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5RdWFsaWZpZWROYW1lOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5RdWFsaWZpZWRUeXBlOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5SZXR1cm5TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLlNpbXBsZU5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LlNpbXBsZVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZU1lbWJl
ckFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZVZhcmlh
YmxlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN0YXRlbWVu
dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3RyaW5nTGl0ZXJhbDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3VwZXJDb25zdHJ1Y3Rvckludm9jYXRpb247Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN1cGVyRmllbGRBY2Nlc3M7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN1cGVyTWV0aG9kSW52b2NhdGlvbjsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3dpdGNoQ2FzZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uU3dpdGNoU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5TeW5jaHJvbml6ZWRTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLlRhZ0VsZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRleHRFbGVt
ZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UaGlzRXhwcmVzc2lvbjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVGhyb3dTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLlRyeVN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZURl
Y2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRp
b25TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVMaXRlcmFs
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlUGFyYW1ldGVyOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdt
ZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9u
U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5XaGlsZVN0YXRlbWVu
dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uV2lsZGNhcmRUeXBlOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS4qOwogCiAvKioKICAqIEludGVybmFsIEFTVCB2aXNp
dG9yIGZvciBzZXJpYWxpemluZyBhbiBBU1QgaW4gYSBxdWljayBhbmQgZGlydHkgZmFzaGlvbi4K
QEAgLTE4OTMsNCArMTc5OCwyNiBAQAogCQkJfQogCQl9CiAJfQorCisJLyoKKwkgKiBAc2VlIEFT
VFZpc2l0b3IjdmlzaXQoTGFtYmRhRXhwcmVzc2lvbikKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2
aXNpdChMYW1iZGFFeHByZXNzaW9uIG5vZGUpIHsKKwkJYm9vbGVhbiBoYXNQYXJlbnMgPSBub2Rl
Lmhhc1BhcmVudGhlc2lzKCk7IAorCQlpZiAoaGFzUGFyZW5zKQorCQkJdGhpcy5idWZmZXIuYXBw
ZW5kKCcoJyk7CisJCUl0ZXJhdG9yIGl0ID0gbm9kZS5wYXJhbWV0ZXJzKCkuaXRlcmF0b3IoKTsK
KwkJYm9vbGVhbiBoYXNOZXh0ID0gaXQuaGFzTmV4dCgpOworCQl3aGlsZSAoaGFzTmV4dCkgewor
CQkJVmFyaWFibGVEZWNsYXJhdGlvbiAgdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURl
Y2xhcmF0aW9uKSBpdC5uZXh0KCk7CisJCQl2YXJpYWJsZURlY2xhcmF0aW9uLmFjY2VwdCh0aGlz
KTsKKwkJCWlmICgoaGFzTmV4dCA9IGl0Lmhhc05leHQoKSkgPT0gdHJ1ZSkKKwkJCQl0aGlzLmJ1
ZmZlci5hcHBlbmQoJywnKTsKKwkJfQorCQlpZiAoaGFzUGFyZW5zKSAKKwkJCXRoaXMuYnVmZmVy
LmFwcGVuZCgnKScpOwkKKwkJdGhpcy5idWZmZXIuYXBwZW5kKCIgLT4gIik7IC8vJE5PTi1OTFMt
MSQKKwkJbm9kZS5nZXRCb2R5KCkuYWNjZXB0KHRoaXMpOworCQlyZXR1cm4gZmFsc2U7CisJfQog
fQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227789</attachid>
            <date>2013-03-01 07:07:00 -0500</date>
            <delta_ts>2013-03-01 21:14:44 -0500</delta_ts>
            <desc>Proposed Patch - In Progress</desc>
            <filename>Fix-for-Bug-399793--18dom-ast-Add-a-new-node-type-fo.patch</filename>
            <type>text/plain</type>
            <size>46111</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IGI5ZjUxMzQuLmM1ZjJhYzAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE3NiBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QzOTk3OTNhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0Nv
cHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIs
CisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0
ZXN0Mzk5NzkzOyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4iCisJCQkJKyAiCWludCBmb28oaW50
IHgpO1xuIgorCQkJCSsgIn1cbiIgCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsg
IiBJIGkgPSAgdmxhbWJkYSAtPiB7cmV0dXJuIDIwMDt9O1xuIgorCQkJCSsifVxuIjsKKwkJQ29t
cGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRo
aXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5
cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmll
bGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURl
Y2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdt
ZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdt
ZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21lbnQuZ2V0SW5p
dGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhw
cmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFF
eHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJkYSAtPiB7XG4gIHJl
dHVybiAyMDA7XG59XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRU
cnVlKGxhbWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAxKTsKKwkJSU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24ucmVzb2x2ZU1ldGhvZEJpbmRpbmco
KTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgaW50IGZvbyhpbnQpICIsIGJpbmRpbmcudG9TdHJp
bmcoKSk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJp
YWJsZURlY2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJ
CWFzc2VydFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFy
YXRpb25GcmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dCl2YXJpYWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVu
dC50b1N0cmluZygpKTsJCQorCQlJVmFyaWFibGVCaW5kaW5nIHZhcmlhYmxlQmluZGluZyA9IGZy
YWdtZW50LnJlc29sdmVCaW5kaW5nKCk7CQkKKwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0g
dmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJYXNzZXJ0Tm90TnVsbCgiTnVsbCBCaW5kaW5n
IGZvciBsYW1iZGEgYXJndW1lbnQiLCB0eXBlQmluZGluZyk7CisJCWFzc2VydEVxdWFscygiYmlu
ZGluZyBvZiBpbnQgZXhwZWN0ZWQgZm9yIGxhbWJkYSIsImludCIsdHlwZUJpbmRpbmcuZ2V0TmFt
ZSgpKTsKKwl9CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24K
KwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9z
cmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5n
IGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNlIEkge1xu
IgorCQkJCSsgIglpbnQgZm9vKGludCB4KTtcbiIKKwkJCQkrICJ9XG4iIAorCQkJCSsgInB1Ymxp
YyBjbGFzcyBYIHtcbiIKKwkJCQkrICIgSSBpID0gIHZsYW1iZGEgLT4gMjAwO1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJk
YSAtPiAyMDAiLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlJTWV0aG9kQmluZGlu
ZyBiaW5kaW5nID0gbGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZlTWV0aG9kQmluZGluZygpOworCQlh
c3NlcnRFcXVhbHMoInB1YmxpYyBpbnQgZm9vKGludCkgIiwgYmluZGluZy50b1N0cmluZygpKTsK
KwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5zaXplKCkgPT0gMSk7
CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURl
Y2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCWFzc2Vy
dFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFyYXRpb25G
cmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCl2YXJp
YWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVudC50b1N0
cmluZygpKTsJCQorCX0KKwkKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYygpIHRocm93cyBKYXZhTW9kZWxF
eGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0
ZXIxOC9zcmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJ
U3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNl
IEkge1xuIgorCQkJCSsgIglPYmplY3QgZm9vKGludCBbXSBpYSk7XG4iCisJCQkJKyAifVxuIiAK
KwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IChpbnQgW10gaWEpIC0+
e1xuIgorCQkJCSsgIiAgCXJldHVybiBpYS5jbG9uZSgpOyIKKwkJCQkrICJ9O1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKGludFtd
IGlhKSAtPiB7XG4gIHJldHVybiBpYS5jbG9uZSgpO1xufVxuIiwgbGFtYmRhRXhwcmVzc2lvbi50
b1N0cmluZygpKTsKKwkJSU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24u
cmVzb2x2ZU1ldGhvZEJpbmRpbmcoKTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgamF2YS5sYW5n
Lk9iamVjdCBmb28oaW50W10pICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUo
bGFtYmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURl
Y2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFt
YmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQlhc3NlcnRUcnVlKHZhcmlhYmxl
RGVjbGFyYXRpb24gaW5zdGFuY2VvZiBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJU2lu
Z2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gKFNpbmds
ZVZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJYXNzZXJ0RXF1YWxz
KCJpbnRbXSBpYSIsIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24udG9TdHJpbmcoKSk7CQkKKwl9
CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24KKwkgKi8KKwlw
dWJsaWMgdm9pZCB0ZXN0Mzk5NzkzZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQl0
aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9zcmMvdGVzdDM5
OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRz
ID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiICsKKwkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJ
Igl2b2lkIGRvaXQoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJIgkJSSBpID0gKCkgLT4ge1xuIiArCisJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bih0aGlzKTtcbiIgKworCQkJCSIJCQlJIGogPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJCVN5c3Rl
bS5vdXQucHJpbnRsbih0aGlzKTtcbiIgKworCQkJCSIJCQkJSSBrID0gKCkgLT4ge1xuIiArCisJ
CQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQl9O1xuIiAr
CisJCQkJIgkJCX07XG4iICsKKwkJCQkiCQl9O1xuIiArCisJCQkJIgl9XG4iOyAKKwkJQ29tcGls
YXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRoaXMu
d29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5cGVE
ZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmllbGRE
ZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURlY2xh
cmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdtZW50
ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdtZW50
cygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZUJpbmRpbmcgPSBmcmFnbWVu
dC5yZXNvbHZlQmluZGluZygpOworCQlhc3NlcnRFcXVhbHMoInRlc3QzOTk3OTMuSSBpIiwgdmFy
aWFibGVCaW5kaW5nLnRvU3RyaW5nKCkpOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9u
ID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiB7
XG4gIFN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiAgSSBqPSgpIC0+IHtcbiAgICBTeXN0ZW0u
b3V0LnByaW50bG4odGhpcyk7XG4gICAgSSBrPSgpIC0+IHtcbiAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih0aGlzKTtcbiAgICB9XG47XG4gIH1cbjtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHZvaWQgZG9pdCgp
ICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFtYmRhRXhwcmVzc2lvbi5w
YXJhbWV0ZXJzKCkuc2l6ZSgpID09IDApOworCX0KKworCS8qKgorCSAqIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3QzOTk3OTNlKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5n
Q29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIsCisJCQkJdHJ1ZS8qIHJl
c29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0ZXN0Mzk5NzkzOyIgKwor
CQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkiICBKIGZvbygpO1xuIiArCisJCQkJIn1cbiIg
KworCQkJCSJpbnRlcmZhY2UgSiB7XG4iICsKKwkJCQkiICBpbnQgZm9vKCk7XG4iICsKKwkJCQki
fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgICAgSSBJID0gKCkgLT4g
KCkgLT4gMTA7XG4iICsKKwkJCQkifVxuIjsKKwkJCQorCQlDb21waWxhdGlvblVuaXQgY3UgPSAo
Q29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywgdGhpcy53b3JraW5nQ29weSk7CisJ
CVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRB
U1ROb2RlKGN1LCAyKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xhcmF0aW9uID0gKEZp
ZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDAp
OworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNs
YXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJhZ21lbnRzKCkuZ2V0KDApOworCQlF
eHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3Nl
cnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRh
RXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lv
bjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiAoKSAtPiAxMCIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHRlc3QzOTk3OTMu
SiBmb28oKSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGxhbWJkYUV4cHJl
c3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAwKTsKKwl9CQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5q
YXZhCmluZGV4IDlkMzhkNmQuLmZkNTQ0ZTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUTWF0
Y2hlclRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJUZXN0LmphdmEKQEAgLTU1
MSw2ICs1NTEsOSBAQAogCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChJbnN0YW5jZW9mRXhwcmVzc2lv
biBub2RlLCBPYmplY3Qgb3RoZXIpIHsKIAkJCXJldHVybiBzdGFuZGFyZEJvZHkobm9kZSwgb3Ro
ZXIsIHRoaXMuc3VwZXJNYXRjaCA/IHN1cGVyLm1hdGNoKG5vZGUsIG90aGVyKSA6IGZhbHNlKTsK
IAkJfQorCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVj
dCBvdGhlcikgeworCQkJcmV0dXJuIHN0YW5kYXJkQm9keShub2RlLCBvdGhlciwgdGhpcy5zdXBl
ck1hdGNoID8gc3VwZXIubWF0Y2gobm9kZSwgb3RoZXIpIDogZmFsc2UpOworCQl9CiAJfQogCiAJ
LyoqCkBAIC0xNTYzLDQgKzE1NjYsNTMgQEAKIAkJeDEuZXh0cmFEaW1lbnNpb25zKCkuYWRkKHgy
KTsKIAkJYmFzaWNNYXRjaCh4MSk7CiAJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHBy
ZXNzaW9uczEoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJ
CXJldHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRh
RXhwcmVzc2lvbigpOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgeDIgPSB0aGlzLmFz
dC5uZXdWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQoKTsKKwkJeDIuc2V0TmFtZSh0aGlzLk4x
KTsKKwkJeDEucGFyYW1ldGVycygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3
QmxvY2soKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwlwdWJsaWMgdm9pZCB0ZXN0TGFt
YmRhRXhwcmVzc2lvbnMyKCkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwoKSA8IEFTVC5KTFM4
KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiB4MSA9IHRoaXMuYXN0Lm5l
d0xhbWJkYUV4cHJlc3Npb24oKTsKKwkJeDEuc2V0Qm9keSh0aGlzLmFzdC5uZXdCbG9jaygpKTsK
KwkJYmFzaWNNYXRjaCh4MSk7CisJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHByZXNz
aW9uczMoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJCXJl
dHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRhRXhw
cmVzc2lvbigpOworCQl4MS5zZXRCb2R5KHRoaXMuYXN0Lm5ld0V4cHJlc3Npb25TdGF0ZW1lbnQo
dGhpcy5OMikpOworCQliYXNpY01hdGNoKHgxKTsKKwl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJcHVibGljIHZvaWQgdGVzdExh
bWJkYUV4cHJlc3Npb25zNCgpIHsKKwkJaWYgKHRoaXMuYXN0LmFwaUxldmVsKCkgPCBBU1QuSkxT
OCkgeworCQkJcmV0dXJuOworCQl9CisJCUxhbWJkYUV4cHJlc3Npb24geDEgPSB0aGlzLmFzdC5u
ZXdMYW1iZGFFeHByZXNzaW9uKCk7CisJCVNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24geDIgPSB0
aGlzLmFzdC5uZXdTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKCk7CisJCXgyLm1vZGlmaWVycygp
LmFkZCh0aGlzLk1PRDEpOworCQl4Mi5tb2RpZmllcnMoKS5hZGQodGhpcy5NT0QyKTsKKwkJeDIu
c2V0VHlwZSh0aGlzLlQxKTsKKwkJeDIuc2V0TmFtZSh0aGlzLk4xKTsKKwkJeDEucGFyYW1ldGVy
cygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3RXhwcmVzc2lvblN0YXRlbWVu
dCh0aGlzLk4yKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9u
LmphdmEKaW5kZXggZmIxZGYxZC4uYWFjOGJiMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEK
QEAgLTQ2LDYgKzQ2LDcgQEAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMg
RnVuY3Rpb25hbEV4cHJlc3Npb24gewogCXB1YmxpYyBBcmd1bWVudCBbXSBhcmd1bWVudHM7CiAJ
cHVibGljIFN0YXRlbWVudCBib2R5OworCXB1YmxpYyBib29sZWFuIGhhc1BhcmVudGhlc2VzOwog
CU1ldGhvZFNjb3BlIHNjb3BlOwogCXByb3RlY3RlZCBib29sZWFuIHZvaWRDb21wYXRpYmxlID0g
dHJ1ZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiB2YWx1ZUNvbXBhdGlibGUgPSBmYWxzZTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5q
YXZhCmluZGV4IDliNWM0MWMuLjgyODg5YjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFy
c2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQpAQCAtNzg2NSw2ICs3ODY1
LDExIEBACiAJdGhpcy5pbnRQdHItLTsgIC8vICcpJyBwb3NpdGlvbiwgZGlzY2FyZCBmb3Igbm93
LgogCWxleHAuc291cmNlU3RhcnQgPSB0aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dOyAvLyAn
KCcgcG9zaXRpb24gb3IgaWRlbnRpZmllciBwb3NpdGlvbi4KIAlsZXhwLnNvdXJjZUVuZCA9IGJv
ZHkuc291cmNlRW5kOworCWxleHAuaGFzUGFyZW50aGVzZXMgPSAodGhpcy5zY2FubmVyLmdldFNv
dXJjZSgpW2xleHAuc291cmNlU3RhcnRdID09ICcoJyk7CisJaWYgKGJvZHkgaW5zdGFuY2VvZiBF
eHByZXNzaW9uKSB7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IChFeHByZXNzaW9uKSBib2R5
OworCQlleHByZXNzaW9uLnN0YXRlbWVudEVuZCA9IGJvZHkuc291cmNlRW5kOworCX0KIAlwdXNo
T25FeHByZXNzaW9uU3RhY2sobGV4cCk7CiAJaWYgKCF0aGlzLnBhcnNpbmdKYXZhOFBsdXMpIHsK
IAkJcHJvYmxlbVJlcG9ydGVyKCkubGFtYmRhRXhwcmVzc2lvbnNOb3RCZWxvdzE4KGxleHApOwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9BU1QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vQVNULmphdmEKaW5kZXggOTViOTBlYy4uMTc5YjUwZCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VC5qYXZhCkBAIC0yMyw3ICsyMyw2IEBACiBpbXBvcnQgamF2YS51dGlsLlN0cmluZ1Rva2VuaXpl
cjsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUHJvZ3Jlc3NNb25pdG9yOwot
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzRmlsZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5JQ29tcGlsYXRpb25Vbml0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLklKYXZhUHJvamVjdDsKQEAgLTExMTYsMjUgKzExMTUsNiBAQAogCX0KIAogCS8qKgotCSAq
IENyZWF0ZXMgYW5kIHJldHVybnMgYSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBk
aW1lbnNpb24gbm9kZQotCSAqIChTdXBwb3J0ZWQgb25seSBpbiBKTFM4IGxldmVsKS4KLQkgKgot
CSAqIEByZXR1cm4gYSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24g
bm9kZQotCSAqIEBleGNlcHRpb24gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmOgotCSAqIDx1
bD4KLQkgKiA8bGk+dGhlIG5vZGUgYmVsb25ncyB0byBhIGRpZmZlcmVudCBBU1Q8L2xpPgotCSAq
IDxsaT50aGUgbm9kZSBhbHJlYWR5IGhhcyBhIHBhcmVudDwvbGk+Ci0JICogPC91bD4KLQkgKiBA
ZXhjZXB0aW9uIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9u
IGlzIHVzZWQKLQkgKiAgICAgICAgICAgIGluIGEgSkxTMiwgSkxTMyBvciBKTFM0IEFTVAotCSAq
IEBzaW5jZSAzLjkKLQkgKi8KLQlwdWJsaWMgRXh0cmFEaW1lbnNpb24gbmV3RXh0cmFEaW1lbnNp
b24oKSB7Ci0JCUV4dHJhRGltZW5zaW9uIHJlc3VsdCA9IG5ldyBFeHRyYURpbWVuc2lvbih0aGlz
KTsKLQkJcmV0dXJuIHJlc3VsdDsKLQl9Ci0KLQkvKioKIAkgKiBDcmVhdGVzIGFuZCByZXR1cm5z
IGEgbmV3IHVucGFyZW50ZWQgYXJyYXkgdHlwZSBub2RlIHdpdGggdGhlIGdpdmVuCiAJICogZWxl
bWVudCB0eXBlIGFuZCBudW1iZXIgb2YgKGFkZGl0aW9uYWwpIGRpbWVuc2lvbnMuCiAJICogPHA+
CkBAIC0xMzU1LDE5ICsxMzM1LDYgQEAKIAl9CiAKIAkvKioKLQkgKiBDcmVhdGVzIGEgbmV3IHVu
cGFyZW50ZWQgdW5pb24gdHlwZSBub2RlIG93bmVkIGJ5IHRoaXMgQVNULgotCSAqIEJ5IGRlZmF1
bHQsIHRoZSB1bmlvbiB0eXBlIGhhcyBubyB0eXBlcy4KLQkgKgotCSAqIEByZXR1cm4gYSBuZXcg
dW5wYXJlbnRlZCBkbyBzdGF0ZW1lbnQgbm9kZQotCSAqIEBleGNlcHRpb24gVW5zdXBwb3J0ZWRP
cGVyYXRpb25FeGNlcHRpb24gaWYgdGhpcyBvcGVyYXRpb24gaXMgdXNlZCBpbgotCSAqIGEgSkxT
MiBvciBKTFMzIEFTVAotCSAqIEBzaW5jZSAzLjcuMQotCSAqLwotCXB1YmxpYyBVbmlvblR5cGUg
bmV3VW5pb25UeXBlKCkgewotCQlyZXR1cm4gbmV3IFVuaW9uVHlwZSh0aGlzKTsKLQl9Ci0KLQkv
KioKIAkgKiBDcmVhdGVzIGEgbmV3IHVucGFyZW50ZWQgZG8gc3RhdGVtZW50IG5vZGUgb3duZWQg
YnkgdGhpcyBBU1QuCiAJICogQnkgZGVmYXVsdCwgdGhlIGV4cHJlc3Npb24gaXMgdW5zcGVjaWZp
ZWQgKGJ1dCBsZWdhbCksIGFuZAogCSAqIHRoZSBib2R5IHN0YXRlbWVudCBpcyBhbiBlbXB0eSBi
bG9jay4KQEAgLTE0NjAsNiArMTQyNywyNSBAQAogCX0KIAogCS8qKgorCSAqIENyZWF0ZXMgYW5k
IHJldHVybnMgYSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24gbm9k
ZQorCSAqIChTdXBwb3J0ZWQgb25seSBpbiBKTFM4IGxldmVsKS4KKwkgKgorCSAqIEByZXR1cm4g
YSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24gbm9kZQorCSAqIEBl
eGNlcHRpb24gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmOgorCSAqIDx1bD4KKwkgKiA8bGk+
dGhlIG5vZGUgYmVsb25ncyB0byBhIGRpZmZlcmVudCBBU1Q8L2xpPgorCSAqIDxsaT50aGUgbm9k
ZSBhbHJlYWR5IGhhcyBhIHBhcmVudDwvbGk+CisJICogPC91bD4KKwkgKiBAZXhjZXB0aW9uIFVu
c3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9uIGlzIHVzZWQKKwkg
KiAgICAgICAgICAgIGluIGEgSkxTMiwgSkxTMyBvciBKTFM0IEFTVAorCSAqIEBzaW5jZSAzLjkK
KwkgKi8KKwlwdWJsaWMgRXh0cmFEaW1lbnNpb24gbmV3RXh0cmFEaW1lbnNpb24oKSB7CisJCUV4
dHJhRGltZW5zaW9uIHJlc3VsdCA9IG5ldyBFeHRyYURpbWVuc2lvbih0aGlzKTsKKwkJcmV0dXJu
IHJlc3VsdDsKKwl9CisKKwkvKioKIAkgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHVucGFy
ZW50ZWQgZmllbGQgYWNjZXNzIGV4cHJlc3Npb24gbm9kZQogCSAqIG93bmVkIGJ5IHRoaXMgQVNU
LiBCeSBkZWZhdWx0LCB0aGUgZXhwcmVzc2lvbiBhbmQgZmllbGQgYXJlIGJvdGgKIAkgKiB1bnNw
ZWNpZmllZCwgYnV0IGxlZ2FsLCBuYW1lcy4KQEAgLTE1MjIsNiArMTUwOCwyMiBAQAogCSAqLwog
CXB1YmxpYyBJZlN0YXRlbWVudCBuZXdJZlN0YXRlbWVudCgpIHsKIAkJcmV0dXJuIG5ldyBJZlN0
YXRlbWVudCh0aGlzKTsKKwl9CisKKworCS8qKgorCSAqIENyZWF0ZXMgYW4gdW5wYXJlbnRlZCBs
YW1iZGEgZXhwcmVzc2lvbiBub2RlIG93bmVkIGJ5IHRoaXMgQVNULgorCSAqIEJ5IGRlZmF1bHQs
IHRoZSBkZWNsYXJhdGlvbiBpcyBmb3IgYSBsYW1iZGEgZXhwcmVzc2lvbiB3aXRoIGFuIGVtcHR5
IGFyZ3VtZW50CisJICogbGlzdCBhbmQgbm8gYm9keS4KKwkgKiAKKwkgKiBAcmV0dXJuIGEgbmV3
IHVucGFyZW50ZWQgbGFtYmRhIGV4cHJlc3Npb24gbm9kZQorCSAqIEBleGNlcHRpb24gVW5zdXBw
b3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gaWYgdGhpcyBvcGVyYXRpb24gaXMgdXNlZCBpbiBhIEpM
UzIsIEpMUzMgb3IgSkxTNCBBU1QKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIExhbWJk
YUV4cHJlc3Npb24gbmV3TGFtYmRhRXhwcmVzc2lvbigpIHsKKwkJdW5zdXBwb3J0ZWRJbjJfM180
KCk7CisJCUxhbWJkYUV4cHJlc3Npb24gcmVzdWx0ID0gbmV3IExhbWJkYUV4cHJlc3Npb24odGhp
cyk7CisJCXJldHVybiByZXN1bHQ7CiAJfQogCiAJLyoqCkBAIC0yMzk5LDYgKzI0MDEsMTkgQEAK
IAl9CiAKIAkvKioKKwkgKiBDcmVhdGVzIGEgbmV3IHVucGFyZW50ZWQgdW5pb24gdHlwZSBub2Rl
IG93bmVkIGJ5IHRoaXMgQVNULgorCSAqIEJ5IGRlZmF1bHQsIHRoZSB1bmlvbiB0eXBlIGhhcyBu
byB0eXBlcy4KKwkgKgorCSAqIEByZXR1cm4gYSBuZXcgdW5wYXJlbnRlZCBkbyBzdGF0ZW1lbnQg
bm9kZQorCSAqIEBleGNlcHRpb24gVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gaWYgdGhp
cyBvcGVyYXRpb24gaXMgdXNlZCBpbgorCSAqIGEgSkxTMiBvciBKTFMzIEFTVAorCSAqIEBzaW5j
ZSAzLjcuMQorCSAqLworCXB1YmxpYyBVbmlvblR5cGUgbmV3VW5pb25UeXBlKCkgeworCQlyZXR1
cm4gbmV3IFVuaW9uVHlwZSh0aGlzKTsKKwl9CisKKwkvKioKIAkgKiBDcmVhdGVzIGEgbmV3IHVu
cGFyZW50ZWQgbG9jYWwgdmFyaWFibGUgZGVjbGFyYXRpb24gZXhwcmVzc2lvbiBub2RlCiAJICog
b3duZWQgYnkgdGhpcyBBU1QsIGZvciB0aGUgZ2l2ZW4gdmFyaWFibGUgZGVjbGFyYXRpb24gZnJh
Z21lbnQuIEJ5CiAJICogZGVmYXVsdCwgdGhlcmUgYXJlIG5vIG1vZGlmaWVycyBhbmQgdGhlIGJh
c2UgdHlwZSBpcyB1bnNwZWNpZmllZApAQCAtMjQ0MSw3ICsyNDU2LDcgQEAKIAkJVmFyaWFibGVE
ZWNsYXJhdGlvbkZyYWdtZW50IHJlc3VsdCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21l
bnQodGhpcyk7CiAJCXJldHVybiByZXN1bHQ7CiAJfQotCisJCiAJLy89PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09IFNUQVRFTUVOVFMgPT09PT09PT09PT09PT09PT09PT09PT09PT09CiAJ
LyoqCiAJICogQ3JlYXRlcyBhIG5ldyB1bnBhcmVudGVkIGxvY2FsIHZhcmlhYmxlIGRlY2xhcmF0
aW9uIHN0YXRlbWVudCBub2RlCkBAIC0yOTk0LDUgKzMwMDksMTcgQEAKIAkgIAl0aHJvdyBuZXcg
VW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24oIk9wZXJhdGlvbiBub3Qgc3VwcG9ydGVkIGlu
IEpMUzIgQVNUIik7IC8vJE5PTi1OTFMtMSQKIAkgIH0KIAl9Ci19CisKKwkvKioKKyAgICAgKiBD
aGVja3MgdGhhdCB0aGlzIEFTVCBvcGVyYXRpb24gaXMgbm90IHVzZWQgd2hlbgorICAgICAqIGJ1
aWxkaW5nIEpMUzIsIEpMUzMgb3IgSkxTNCBsZXZlbCBBU1RzLgorICAgICAqIAorCSAqIEBleGNl
cHRpb24gVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gaWYgdGhpcyBvcGVyYXRpb24gaXMg
dXNlZCBiZWxvdyBKTFM4CisJICogQHNpbmNlIDMuOQorCSAqLworCSB2b2lkIHVuc3VwcG9ydGVk
SW4yXzNfNCgpIHsKKwkJaWYgKHRoaXMuYXBpTGV2ZWwgPCBBU1QuSkxTOCkgeworCQkJdGhyb3cg
bmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uKCJPcGVyYXRpb24gb25seSBzdXBwb3J0
ZWQgaW4gSkxTOCBhbmQgbGF0ZXIgQVNUIik7IC8vJE5PTi1OTFMtMSQKKwkJfQorCX19CiAKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vQVNUQ29udmVydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCmluZGV4IDMzNTE5M2QuLmE0ZWZkYzYg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vQVNUQ29udmVydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQpAQCAtMTcyMCw2ICsxNzIw
LDkgQEAKIAkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2UpIHsKIAkJCXJldHVybiBjb252ZXJ0KChvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2UpIGV4cHJlc3Np
b24pOwogCQl9CisJCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2Ygb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uKSB7CisJCQlyZXR1cm4gY29udmVy
dCgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9u
KSBleHByZXNzaW9uKTsKKwkJfQogCQlyZXR1cm4gbnVsbDsKIAl9CiAKQEAgLTIxMzcsNiArMjE0
MCw0NyBAQAogCQlyZXR1cm4gZXhwcjsKIAl9CiAKKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBj
b252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVz
c2lvbiBsYW1iZGEpIHsKKwkJaW50IHNvdXJjZVN0YXJ0ID0gbGFtYmRhLnNvdXJjZVN0YXJ0Owor
CQlmaW5hbCBMYW1iZGFFeHByZXNzaW9uCWxhbWJkYUV4cHJlc3Npb24gPSBuZXcgTGFtYmRhRXhw
cmVzc2lvbih0aGlzLmFzdCk7CisJCWlmICh0aGlzLnJlc29sdmVCaW5kaW5ncykgeworCQkJcmVj
b3JkTm9kZXMobGFtYmRhRXhwcmVzc2lvbiwgbGFtYmRhKTsKKwkJfQorCQlvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50W10gYXJndW1lbnRzID0gbGFtYmRhLmFy
Z3VtZW50czsKKwkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgYXJndW1lbnRzTGVu
Z3RoID0gYXJndW1lbnRzLmxlbmd0aDsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRz
TGVuZ3RoOyBpKyspIHsKKwkJCQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkFyZ3VtZW50IGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJCWlmIChhcmd1bWVudC50eXBl
ID09IG51bGwpIHsKKwkJCQkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IHZhcmlhYmxlRGVj
bGFyYXRpb25GcmFnbWVudCA9IG5ldyBWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQodGhpcy5h
c3QpOworCQkJCQlTaW1wbGVOYW1lIHNpbXBsZU5hbWUgPSBuZXcgU2ltcGxlTmFtZSh0aGlzLmFz
dCk7CisJCQkJCWludCBzdGFydCA9IGFyZ3VtZW50LnNvdXJjZVN0YXJ0OworCQkJCQlpbnQgZW5k
ID0gYXJndW1lbnQuc291cmNlRW5kOworCQkJCQlzaW1wbGVOYW1lLnNldFNvdXJjZVJhbmdlKHN0
YXJ0LCBlbmQgLSBzdGFydCArIDEpOworCQkJCQlzaW1wbGVOYW1lLnNldElkZW50aWZpZXIobmV3
IFN0cmluZyhhcmd1bWVudC5uYW1lKSk7CisJCQkJCWlmICh0aGlzLnJlc29sdmVCaW5kaW5ncykg
eworCQkJCQkJcmVjb3JkTm9kZXMoc2ltcGxlTmFtZSwgYXJndW1lbnQpOworCQkJCQkJcmVjb3Jk
Tm9kZXModmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LCBhcmd1bWVudCk7CisJCQkJCX0KKwkJ
CQkJdmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LnNldE5hbWUoc2ltcGxlTmFtZSk7CisJCQkJ
CWxhbWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLmFkZCh2YXJpYWJsZURlY2xhcmF0aW9uRnJh
Z21lbnQpOwkJCQkJCisJCQkJfSBlbHNlIHsKKwkJCQkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlv
biBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gY29udmVydChhcmd1bWVudCk7CisJCQkJCWxh
bWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLmFkZChzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9u
KTsJCQkJCQorCQkJCX0KKwkJCX0KKwkJfQorCQlBU1ROb2RlIGJvZHk7CisJCWlmIChsYW1iZGEu
Ym9keSBpbnN0YW5jZW9mIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhw
cmVzc2lvbikgeworCQkJbGFtYmRhRXhwcmVzc2lvbi5zZXRCb2R5KGNvbnZlcnQoKG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbikgbGFtYmRhLmJvZHkpKTsK
KwkJfSBlbHNlIHsKKwkJCWxhbWJkYUV4cHJlc3Npb24uc2V0Qm9keShjb252ZXJ0KChvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkJsb2NrKSBsYW1iZGEuYm9keSkpOworCQl9
CisJCWxhbWJkYUV4cHJlc3Npb24uc2V0U291cmNlUmFuZ2Uoc291cmNlU3RhcnQsIGxhbWJkYS5z
b3VyY2VFbmQgLSBzb3VyY2VTdGFydCArIDEpOworCQlsYW1iZGFFeHByZXNzaW9uLnNldFBhcmVu
dGhlc2VzKGxhbWJkYS5oYXNQYXJlbnRoZXNlcyk7CisJCXJldHVybiBsYW1iZGFFeHByZXNzaW9u
OworCX0KKwogCXB1YmxpYyBNYXJrZXJBbm5vdGF0aW9uIGNvbnZlcnQob3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5NYXJrZXJBbm5vdGF0aW9uIGFubm90YXRpb24pIHsKIAkJ
ZmluYWwgTWFya2VyQW5ub3RhdGlvbiBtYXJrZXJBbm5vdGF0aW9uID0gbmV3IE1hcmtlckFubm90
YXRpb24odGhpcy5hc3QpOwogCQlzZXRUeXBlTmFtZUZvckFubm90YXRpb24oYW5ub3RhdGlvbiwg
bWFya2VyQW5ub3RhdGlvbik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE1hdGNoZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTWF0Y2hlci5qYXZhCmluZGV4
IDA2YmEyM2YuLmEwOWFlMzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTWF0Y2hlci5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTWF0Y2hlci5qYXZhCkBA
IC05NTcsNiArOTU3LDMwIEBACiAJICogb3RoZXIgb2JqZWN0IGlzIGEgbm9kZSBvZiB0aGUgc2Ft
ZSB0eXBlIHdpdGggc3RydWN0dXJhbGx5IGlzb21vcnBoaWMKIAkgKiBjaGlsZCBzdWJ0cmVlcy4g
U3ViY2xhc3NlcyBtYXkgb3ZlcnJpZGUgdGhpcyBtZXRob2QgYXMgbmVlZGVkLgogCSAqIDwvcD4K
KwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZQorCSAqIEBwYXJhbSBvdGhlciB0aGUgb3RoZXIgb2Jq
ZWN0LCBvciA8Y29kZT5udWxsPC9jb2RlPgorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4g
aWYgdGhlIHN1YnRyZWUgbWF0Y2hlcywgb3IKKwkgKiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0
aGV5IGRvIG5vdCBtYXRjaCBvciB0aGUgb3RoZXIgb2JqZWN0IGhhcyBhCisJICogICBkaWZmZXJl
bnQgbm9kZSB0eXBlIG9yIGlzIDxjb2RlPm51bGw8L2NvZGU+CisJICogQHNpbmNlIDMuOQorCSAq
LworCXB1YmxpYyBib29sZWFuIG1hdGNoKExhbWJkYUV4cHJlc3Npb24gbm9kZSwgT2JqZWN0IG90
aGVyKSB7CisJCWlmICghKG90aGVyIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikpIHsKKwkJ
CXJldHVybiBmYWxzZTsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIG8gPSAoTGFtYmRhRXhwcmVz
c2lvbikgb3RoZXI7CisJCXJldHVybgkobm9kZS5oYXNQYXJlbnRoZXNlcygpID09IG8uaGFzUGFy
ZW50aGVzZXMoKSkKKwkJCQkmJiBzYWZlU3VidHJlZUxpc3RNYXRjaChub2RlLnBhcmFtZXRlcnMo
KSwgby5wYXJhbWV0ZXJzKCkpCisJCQkJJiYgc2FmZVN1YnRyZWVNYXRjaChub2RlLmdldEJvZHko
KSwgby5nZXRCb2R5KCkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2
ZW4gbm9kZSBhbmQgdGhlIG90aGVyIG9iamVjdCBtYXRjaC4KKwkgKiA8cD4KKwkgKiBUaGUgZGVm
YXVsdCBpbXBsZW1lbnRhdGlvbiBwcm92aWRlZCBieSB0aGlzIGNsYXNzIHRlc3RzIHdoZXRoZXIg
dGhlCisJICogb3RoZXIgb2JqZWN0IGlzIGEgbm9kZSBvZiB0aGUgc2FtZSB0eXBlIHdpdGggc3Ry
dWN0dXJhbGx5IGlzb21vcnBoaWMKKwkgKiBjaGlsZCBzdWJ0cmVlcy4gU3ViY2xhc3NlcyBtYXkg
b3ZlcnJpZGUgdGhpcyBtZXRob2QgYXMgbmVlZGVkLgorCSAqIDwvcD4KIAkgKgogCSAqIEBwYXJh
bSBub2RlIHRoZSBub2RlCiAJICogQHBhcmFtIG90aGVyIHRoZSBvdGhlciBvYmplY3QsIG9yIDxj
b2RlPm51bGw8L2NvZGU+CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCmluZGV4IDdiODAzOTEu
LmY3ZGM5MGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Rv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCkBAIC04NDMsNiArODQzLDE0
IEBACiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRVhUUkFfRElNRU5TSU9OID0gODU7CiAKIAkv
KioKKwkgKiBOb2RlIHR5cGUgY29uc3RhbnQgaW5kaWNhdGluZyBhIG5vZGUgb2YgdHlwZQorCSAq
IDxjb2RlPkxhbWJkYUV4cHJlc3Npb248L2NvZGU+LgorCSAqIEBzZWUgTGFtYmRhRXhwcmVzc2lv
bgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBMQU1CREFf
RVhQUkVTU0lPTiA9IDg2OworCisJLyoqCiAJICogUmV0dXJucyB0aGUgbm9kZSBjbGFzcyBmb3Ig
dGhlIGNvcnJlc3BvbmRpbmcgbm9kZSB0eXBlLgogCSAqCiAJICogQHBhcmFtIG5vZGVUeXBlIEFT
VCBub2RlIHR5cGUKQEAgLTkzMiw2ICs5NDAsOCBAQAogCQkJCXJldHVybiBKYXZhZG9jLmNsYXNz
OwogCQkJY2FzZSBMQUJFTEVEX1NUQVRFTUVOVCA6CiAJCQkJcmV0dXJuIExhYmVsZWRTdGF0ZW1l
bnQuY2xhc3M7CisJCQljYXNlIExBTUJEQV9FWFBSRVNTSU9OIDoKKwkJCQlyZXR1cm4gTGFtYmRh
RXhwcmVzc2lvbi5jbGFzczsKIAkJCWNhc2UgTElORV9DT01NRU5UIDoKIAkJCQlyZXR1cm4gTGlu
ZUNvbW1lbnQuY2xhc3M7CiAJCQljYXNlIE1BUktFUl9BTk5PVEFUSU9OIDoKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlz
aXRvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9BU1RWaXNpdG9yLmphdmEKaW5kZXggYjJjMDgzNC4uM2RhNzExMyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RWaXNp
dG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9BU1RWaXNpdG9yLmphdmEKQEAgLTcwNiw2ICs3MDYsMjMgQEAKIAkgKiBAcmV0dXJu
IDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkIGJl
CiAJICogdmlzaXRlZCwgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2Yg
dGhpcyBub2RlIHNob3VsZAogCSAqIGJlIHNraXBwZWQKKwkgKiBAc2luY2UgMy45CisJICovCisJ
cHVibGljIGJvb2xlYW4gdmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBub2RlKSB7CisJCXJldHVybiB0
cnVlOworCX0KKworCS8qKgorCSAqIFZpc2l0cyB0aGUgZ2l2ZW4gdHlwZS1zcGVjaWZpYyBBU1Qg
bm9kZS4KKwkgKiA8cD4KKwkgKiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhp
bmcgYW5kIHJldHVybiB0cnVlLgorCSAqIFN1YmNsYXNzZXMgbWF5IHJlaW1wbGVtZW50LgorCSAq
IDwvcD4KKwkgKgorCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0CisJICogQHJldHVy
biA8Y29kZT50cnVlPC9jb2RlPiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZCBi
ZQorCSAqIHZpc2l0ZWQsIGFuZCA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9m
IHRoaXMgbm9kZSBzaG91bGQKKwkgKiBiZSBza2lwcGVkCiAJICovCiAJcHVibGljIGJvb2xlYW4g
dmlzaXQoSWZTdGF0ZW1lbnQgbm9kZSkgewogCQlyZXR1cm4gdHJ1ZTsKQEAgLTE5OTEsNiArMjAw
OCwxOSBAQAogCSAqIDwvcD4KIAkgKgogCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRvIHZpc2l0
CisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyB2b2lkIGVuZFZpc2l0KExhbWJkYUV4cHJl
c3Npb24gbm9kZSkgeworCQkvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCisJ
fQorCisJLyoqCisJICogRW5kIG9mIHZpc2l0IHRoZSBnaXZlbiB0eXBlLXNwZWNpZmljIEFTVCBu
b2RlLgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRvZXMgbm90aGlu
Zy4gU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFt
IG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKIAkgKi8KIAlwdWJsaWMgdm9pZCBlbmRWaXNpdChJZlN0
YXRlbWVudCBub2RlKSB7CiAJCS8vIGRlZmF1bHQgaW1wbGVtZW50YXRpb246IGRvIG5vdGhpbmcK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0JpbmRpbmdSZXNvbHZlci5qYXZhCmluZGV4IGQyMmNiNmIu
LmY0YTRjNjMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9CaW5kaW5nUmVzb2x2ZXIuamF2YQpA
QCAtMSwxMCArMSwxNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAg
ICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwpAQCAtNTc3LDYgKzU4MSwyNyBAQAogCX0KIAogCS8qKgorCSAq
IFJlc29sdmVzIHRoZSBnaXZlbiBMYW1iZGEgRXhwcmVzc2lvbiBhbmQgcmV0dXJucyB0aGUgYmlu
ZGluZyBmb3IgaXQuCisJICogPHA+CisJICogVGhlIGltcGxlbWVudGF0aW9uIG9mIDxjb2RlPkxh
bWJkYUV4cHJlc3Npb24ucmVzb2x2ZU1ldGhvZDwvY29kZT4KKwkgKiBmb3J3YXJkcyB0byB0aGlz
IG1ldGhvZC4gSG93IHRoZSBtZXRob2QgcmVzb2x2ZXMgaXMgb2Z0ZW4gYSBmdW5jdGlvbiBvZgor
CSAqIHRoZSBjb250ZXh0IGluIHdoaWNoIHRoZSBtZXRob2QgZGVjbGFyYXRpb24gbm9kZSBpcyBl
bWJlZGRlZCBhcyB3ZWxsIGFzCisJICogdGhlIG1ldGhvZCBkZWNsYXJhdGlvbiBzdWJ0cmVlIGl0
c2VsZi4KKwkgKiA8L3A+CisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24g
b2YgdGhpcyBtZXRob2QgcmV0dXJucyA8Y29kZT5udWxsPC9jb2RlPi4KKwkgKiBTdWJjbGFzc2Vz
IG1heSByZS1pbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJICogQHBhcmFtIGxhbWJkYSBMYW1i
ZGFFeHByZXNzaW9uIG9mIGludGVyZXN0CisJICogQHJldHVybiB0aGUgYmluZGluZyBmb3IgdGhl
IGdpdmVuIGxhbWJkYSBleHByZXNzaW9uLCBvcgorCSAqICAgIDxjb2RlPm51bGw8L2NvZGU+IGlm
IG5vIGJpbmRpbmcgaXMgYXZhaWxhYmxlCisJICovCisJSU1ldGhvZEJpbmRpbmcgcmVzb2x2ZU1l
dGhvZChMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisKKwkv
KioKIAkgKiBSZXNvbHZlcyB0aGUgZ2l2ZW4gbWV0aG9kIGludm9jYXRpb24gYW5kIHJldHVybnMg
dGhlIGJpbmRpbmcgZm9yIGl0LgogCSAqIDxwPgogCSAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiA8
Y29kZT5NZXRob2RJbnZvY2F0aW9uLnJlc29sdmVNZXRob2RCaW5kaW5nPC9jb2RlPgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9E
ZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRCaW5kaW5nUmVzb2x2ZXIuamF2YQppbmRleCAw
NTVjZDg1Li42OWMzOTNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRCaW5kaW5nUmVzb2x2ZXIuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0RlZmF1bHRC
aW5kaW5nUmVzb2x2ZXIuamF2YQpAQCAtODk0LDYgKzg5NCwyNiBAQAogCS8qCiAJICogTWV0aG9k
IGRlY2xhcmVkIG9uIEJpbmRpbmdSZXNvbHZlci4KIAkgKi8KKwlzeW5jaHJvbml6ZWQgSU1ldGhv
ZEJpbmRpbmcgcmVzb2x2ZU1ldGhvZChMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCQlPYmpl
Y3Qgb2xkTm9kZSA9IHRoaXMubmV3QXN0VG9PbGRBc3QuZ2V0KGxhbWJkYSk7CisJCWlmIChvbGRO
b2RlIGluc3RhbmNlb2Ygb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1i
ZGFFeHByZXNzaW9uKSB7CisJCQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24pIG9sZE5vZGU7CisJCQlJTWV0aG9k
QmluZGluZyBtZXRob2RCaW5kaW5nID0gZ2V0TWV0aG9kQmluZGluZyhsYW1iZGFFeHByZXNzaW9u
LmJpbmRpbmcpOworCQkJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkgeworCQkJCXJldHVybiBu
dWxsOworCQkJfQorCQkJdGhpcy5iaW5kaW5nc1RvQXN0Tm9kZXMucHV0KG1ldGhvZEJpbmRpbmcs
IGxhbWJkYSk7CisJCQlTdHJpbmcga2V5ID0gbWV0aG9kQmluZGluZy5nZXRLZXkoKTsKKwkJCWlm
IChrZXkgIT0gbnVsbCkgeworCQkJCXRoaXMuYmluZGluZ1RhYmxlcy5iaW5kaW5nS2V5c1RvQmlu
ZGluZ3MucHV0KGtleSwgbWV0aG9kQmluZGluZyk7CisJCQl9CisJCQlyZXR1cm4gbWV0aG9kQmlu
ZGluZzsKKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisvKgorCSAqIE1ldGhvZCBkZWNsYXJlZCBv
biBCaW5kaW5nUmVzb2x2ZXIuCisJICovCiAJc3luY2hyb25pemVkIElNZXRob2RCaW5kaW5nIHJl
c29sdmVNZXRob2QoTWV0aG9kSW52b2NhdGlvbiBtZXRob2QpIHsKIAkJT2JqZWN0IG9sZE5vZGUg
PSB0aGlzLm5ld0FzdFRvT2xkQXN0LmdldChtZXRob2QpOwogCQlpZiAob2xkTm9kZSBpbnN0YW5j
ZW9mIE1lc3NhZ2VTZW5kKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRXhwcmVzc2lvbi5qYXZhCmluZGV4
IDIwMDNkOWEuLjZmZDc2ZmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRXhwcmVzc2lvbi5qYXZhCkBA
IC0xLDkgKzEsMTMgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAu
aHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQg
c3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9j
ZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlv
biBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkg
c3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJ
Qk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KQEAgLTMwLDYg
KzM0LDcgQEAKICAqICAgIHtAbGluayBGaWVsZEFjY2Vzc30sCiAgKiAgICB7QGxpbmsgSW5maXhF
eHByZXNzaW9ufSwKICAqICAgIHtAbGluayBJbnN0YW5jZW9mRXhwcmVzc2lvbn0sCisgKiAgICB7
QGxpbmsgTGFtYmRhRXhwcmVzc2lvbn0sCiAgKiAgICB7QGxpbmsgTWV0aG9kSW52b2NhdGlvbn0s
CiAgKiAgICB7QGxpbmsgTmFtZX0sCiAgKiAgICB7QGxpbmsgTnVsbExpdGVyYWx9LApkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9M
YW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0xhbWJkYUV4cHJlc3Npb24uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0
NAppbmRleCAwMDAwMDAwLi40MGY5NTFjCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9MYW1iZGFFeHByZXNzaW9uLmph
dmEKQEAgLTAsMCArMSwzMjEgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmln
aHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAu
aHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQg
c3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9j
ZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlv
biBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkg
c3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tOworCitp
bXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsKK2ltcG9ydCBqYXZhLnV0aWwuTGlzdDsKKworLyoq
CisgKiBMYW1iZGEgZXhwcmVzc2lvbiBBU1Qgbm9kZSB0eXBlLgorICogPHByZT4KKyAqIExhbWJk
YUV4cHJlc3Npb246CisgKiAgICBJZGVudGlmaWVyIDxiPi0+PC9iPiBCb2R5CisgKiAgICA8Yj4o
PC9iPiBbIElkZW50aWZpZXIgeyA8Yj4sPC9iPiBJZGVudGlmaWVyIH0gXSA8Yj4pPC9iPiA8Yj4t
PjwvYj4gQm9keQorICogICAgPGI+KDwvYj4gWyBGb3JtYWxQYXJhbWV0ZXIgeyA8Yj4sPC9iPiBG
b3JtYWxQYXJhbWV0ZXIgfSBdIDxiPik8L2I+IDxiPi0+PC9iPiBCb2R5CisgKiA8L3ByZT4KKyAq
IAorICo8cD4gCisgKiBGaXJzdCB0d28gZm9ybXMgdXNlIHtAbGluayBTaW5nbGVWYXJpYWJsZURl
Y2xhcmF0aW9ufSB3aGlsZSB0aGUgdGhpcmQgZm9ybQorICogdXNlcyB7QGxpbmsgVmFyaWFibGVE
ZWNsYXJhdGlvbkZyYWdtZW50fS48L3A+CisgKjxwPkJvZHkgY2FuIGJlIGVpdGhlciBhIHtAbGlu
ayBCbG9ja30gb3IgYW4ge0BsaW5rIEV4cHJlc3Npb259LjwvcD4KKyAqIEBzaW5jZSAzLjkgCisg
KiBAbm9pbnN0YW50aWF0ZSBUaGlzIGNsYXNzIGlzIG5vdCBpbnRlbmRlZCB0byBiZSBpbnN0YW50
aWF0ZWQgYnkgY2xpZW50cyAKKyAqLworCitwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBl
eHRlbmRzIEV4cHJlc3Npb24geworCisJLyoqCisJICogVGhlICJwYXJlbnRoZXNlcyIgc3RydWN0
dXJhbCBwcm9wZXJ0eSBvZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQgdHlwZToge0BsaW5rIEJvb2xl
YW59KS4gCisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBTaW1wbGVQcm9wZXJ0eURlc2NyaXB0
b3IgUEFSRU5USEVTRVNfUFJPUEVSVFkgPQorCQluZXcgU2ltcGxlUHJvcGVydHlEZXNjcmlwdG9y
KExhbWJkYUV4cHJlc3Npb24uY2xhc3MsICJwYXJlbnRoZXNlcyIsIGJvb2xlYW4uY2xhc3MsIE1B
TkRBVE9SWSk7IC8vJE5PTi1OTFMtMSQKKworCS8qKgorCSAqIFRoZSAicGFyYW1ldGVycyIgc3Ry
dWN0dXJhbCBwcm9wZXJ0eSBvZiB0aGlzIG5vZGUgdHlwZSAoY2hpbGQgdHlwZToge0BsaW5rIFZh
cmlhYmxlRGVjbGFyYXRpb259KS4KKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIENoaWxkTGlz
dFByb3BlcnR5RGVzY3JpcHRvciBQQVJBTUVURVJTX1BST1BFUlRZID0KKwkJbmV3IENoaWxkTGlz
dFByb3BlcnR5RGVzY3JpcHRvcihMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCAicGFyYW1ldGVycyIs
IFZhcmlhYmxlRGVjbGFyYXRpb24uY2xhc3MsIE5PX0NZQ0xFX1JJU0spOyAvLyROT04tTkxTLTEk
CisJCisJLyoqCisJICogVGhlICJib2R5IiBzdHJ1Y3R1cmFsIHByb3BlcnR5IG9mIHRoaXMgbm9k
ZSB0eXBlIChjaGlsZCB0eXBlOiB7QGxpbmsgQVNUTm9kZX0pIDogY2FuCisJICogIGJlIGVpdGhl
ciBhIHtAbGluayBCbG9ja30gb3IgYW4ge0BsaW5rIEV4cHJlc3Npb259LgorCSAqLworCXB1Ymxp
YyBzdGF0aWMgZmluYWwgQ2hpbGRQcm9wZXJ0eURlc2NyaXB0b3IgQk9EWV9QUk9QRVJUWSA9CisJ
CW5ldyBDaGlsZFByb3BlcnR5RGVzY3JpcHRvcihMYW1iZGFFeHByZXNzaW9uLmNsYXNzLCAiYm9k
eSIsIEFTVE5vZGUuY2xhc3MsIE1BTkRBVE9SWSwgQ1lDTEVfUklTSyk7IC8vJE5PTi1OTFMtMSQK
KworCS8qKgorCSAqIEEgbGlzdCBvZiBwcm9wZXJ0eSBkZXNjcmlwdG9ycyAoZWxlbWVudCB0eXBl
OgorCSAqIHtAbGluayBTdHJ1Y3R1cmFsUHJvcGVydHlEZXNjcmlwdG9yfSksCisJICogb3IgbnVs
bCBpZiB1bmluaXRpYWxpemVkLgorCSAqLworCXByaXZhdGUgc3RhdGljIGZpbmFsIExpc3QgUFJP
UEVSVFlfREVTQ1JJUFRPUlNfOF8wOworCQorCXN0YXRpYyB7CisJCUxpc3QgcHJvcGVydHlMaXN0
ID0gbmV3IEFycmF5TGlzdCg0KTsKKwkJY3JlYXRlUHJvcGVydHlMaXN0KExhbWJkYUV4cHJlc3Np
b24uY2xhc3MsIHByb3BlcnR5TGlzdCk7CisJCWFkZFByb3BlcnR5KFBBUkVOVEhFU0VTX1BST1BF
UlRZLCBwcm9wZXJ0eUxpc3QpOworCQlhZGRQcm9wZXJ0eShQQVJBTUVURVJTX1BST1BFUlRZLCBw
cm9wZXJ0eUxpc3QpOworCQlhZGRQcm9wZXJ0eShCT0RZX1BST1BFUlRZLCBwcm9wZXJ0eUxpc3Qp
OworCQlQUk9QRVJUWV9ERVNDUklQVE9SU184XzAgPSByZWFwUHJvcGVydHlMaXN0KHByb3BlcnR5
TGlzdCk7CisJfQorCQorCS8qKgorCSAqIFJldHVybnMgYSBsaXN0IG9mIHN0cnVjdHVyYWwgcHJv
cGVydHkgZGVzY3JpcHRvcnMgZm9yIHRoaXMgbm9kZSB0eXBlLgorCSAqIENsaWVudHMgbXVzdCBu
b3QgbW9kaWZ5IHRoZSByZXN1bHQuCisJICoKKwkgKiBAcGFyYW0gYXBpTGV2ZWwgdGhlIEFQSSBs
ZXZlbDsgb25lIG9mIHRoZSBBU1QuSkxTKiBjb25zdGFudHMKKwkgKiBAcmV0dXJuIGEgbGlzdCBv
ZiBwcm9wZXJ0eSBkZXNjcmlwdG9ycyAoZWxlbWVudCB0eXBlOgorCSAqIHtAbGluayBTdHJ1Y3R1
cmFsUHJvcGVydHlEZXNjcmlwdG9yfSkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIExpc3QgcHJvcGVy
dHlEZXNjcmlwdG9ycyhpbnQgYXBpTGV2ZWwpIHsKKwkJcmV0dXJuIFBST1BFUlRZX0RFU0NSSVBU
T1JTXzhfMDsKKwl9CisKKwkvKioKKwkgKiBJbmRpY2F0ZXMgdGhlIHByZXNlbmNlIG9yIGFic2Vu
Y2Ugb2YgcGFyZW50aGVzaXMuCisJICogZGVmYXVsdHMgdG8gZmFsc2UuIEluIGNhc2Ugb2YgcGFy
YW1ldGVycyBoYXZpbmcgbm8gZWxlbWVudHMsCisJICoge0BsaW5rIFNpbmdsZVZhcmlhYmxlRGVj
bGFyYXRpb259IGVsZW1lbnRzIG9yCisJICogbW9yZSB0aGFuIG9uZSB7QGxpbmsgVmFyaWFibGVE
ZWNsYXJhdGlvbkZyYWdtZW50fSwgdGhpcyBmaWVsZCBpcyAKKwkgKiBpZ25vcmVkOyBpZSB0aGlz
IGZpZWxkIGlzIGlnbm9yZWQgaW4gY2FzZSBvZiBpbGxlZ2FsIGZhbHNlIHZhbHVlLgorCSAqLwor
CXByaXZhdGUgYm9vbGVhbiBoYXNQYXJlbnRoZXNlcyA9IGZhbHNlOworCisJLyoqCisJICogVGhl
IHBhcmFtZXRlciBkZWNsYXJhdGlvbnMKKwkgKiAoZWxlbWVudCB0eXBlOiB7QGxpbmsgVmFyaWFi
bGVEZWNsYXJhdGlvbn0pLgorCSAqIERlZmF1bHRzIHRvIGFuIGVtcHR5IGxpc3QuCisJICovCisJ
cHJpdmF0ZSBBU1ROb2RlLk5vZGVMaXN0IHBhcmFtZXRlcnMgPQorCQluZXcgQVNUTm9kZS5Ob2Rl
TGlzdChQQVJBTUVURVJTX1BST1BFUlRZKTsKKworCS8qKgorCSAqIFRoZSBtZXRob2QgYm9keS4K
KwkgKiBUaGUgbWV0aG9kIGJvZHk7IGxhemlseSBpbml0aWFsaXplZCwgZGVmYXVsdHMgdG8gYW4g
ZW1wdHkgQmxvY2suCisJICovCisJcHJpdmF0ZSBBU1ROb2RlIGJvZHkgPSBudWxsOworCisJLyoq
CisJICogQ3JlYXRlcyBhIG5ldyBBU1Qgbm9kZSBmb3IgYSBMYW1iZGFFeHByZXNzaW9uIGRlY2xh
cmF0aW9uIG93bmVkCisJICogYnkgdGhlIGdpdmVuIEFTVC4KKwkgKiA8cD4KKwkgKiBOLkIuIFRo
aXMgY29uc3RydWN0b3IgaXMgcGFja2FnZS1wcml2YXRlOyBhbGwgc3ViY2xhc3NlcyBtdXN0IGJl
CisJICogZGVjbGFyZWQgaW4gdGhlIHNhbWUgcGFja2FnZTsgY2xpZW50cyBhcmUgdW5hYmxlIHRv
IGRlY2xhcmUKKwkgKiBhZGRpdGlvbmFsIHN1YmNsYXNzZXMuCisJICogPC9wPgorCSAqCisJICog
QHBhcmFtIGFzdCB0aGUgQVNUIHRoYXQgaXMgdG8gb3duIHRoaXMgbm9kZQorCSAqLworCUxhbWJk
YUV4cHJlc3Npb24oQVNUIGFzdCkgeworCQlzdXBlcihhc3QpOworCQl1bnN1cHBvcnRlZEluMl8z
XzQoKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRo
b2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlMaXN0IGludGVybmFsU3RydWN0dXJhbFBy
b3BlcnRpZXNGb3JUeXBlKGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gcHJvcGVydHlEZXNjcmlw
dG9ycyhhcGlMZXZlbCk7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2Qp
CisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgYm9vbGVhbiBp
bnRlcm5hbEdldFNldEJvb2xlYW5Qcm9wZXJ0eShTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IgcHJv
cGVydHksIGJvb2xlYW4gZ2V0LCBib29sZWFuIHZhbHVlKSB7CisJCWlmIChwcm9wZXJ0eSA9PSBQ
QVJFTlRIRVNFU19QUk9QRVJUWSkgeworCQkJaWYgKGdldCkgeworCQkJCXJldHVybiBoYXNQYXJl
bnRoZXNlcygpOworCQkJfSBlbHNlIHsKKwkJCQlzZXRQYXJlbnRoZXNlcyh2YWx1ZSk7CisJCQkJ
cmV0dXJuIGZhbHNlOworCQkJfQorCQl9CisJCS8vIGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRp
b24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0U2V0Qm9vbGVh
blByb3BlcnR5KHByb3BlcnR5LCBnZXQsIHZhbHVlKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9j
IGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8K
KwlmaW5hbCBMaXN0IGludGVybmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkoQ2hpbGRMaXN0UHJvcGVy
dHlEZXNjcmlwdG9yIHByb3BlcnR5KSB7CisJCWlmIChwcm9wZXJ0eSA9PSBQQVJBTUVURVJTX1BS
T1BFUlRZKSB7CisJCQlyZXR1cm4gcGFyYW1ldGVycygpOworCQl9CisJCS8vIGFsbG93IGRlZmF1
bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVy
bmFsR2V0Q2hpbGRMaXN0UHJvcGVydHkocHJvcGVydHkpOworCX0KKwkKKwkvKiAob21pdCBqYXZh
ZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkg
Ki8KKwlmaW5hbCBBU1ROb2RlIGludGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShDaGlsZFByb3Bl
cnR5RGVzY3JpcHRvciBwcm9wZXJ0eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hpbGQpIHsKKwkJ
aWYgKHByb3BlcnR5ID09IEJPRFlfUFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1
cm4gZ2V0Qm9keSgpOworCQkJfSBlbHNlIHsKKwkJCQlzZXRCb2R5KCBjaGlsZCk7CisJCQkJcmV0
dXJuIG51bGw7CisJCQl9CisJCX0KKwkJLy8gYWxsb3cgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0
byBmbGFnIHRoZSBlcnJvcgorCQlyZXR1cm4gc3VwZXIuaW50ZXJuYWxHZXRTZXRDaGlsZFByb3Bl
cnR5KHByb3BlcnR5LCBnZXQsIGNoaWxkKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0
aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlpbnQg
Z2V0Tm9kZVR5cGUwKCkgeworCQlyZXR1cm4gTEFNQkRBX0VYUFJFU1NJT047CisJfQorCisJLyog
KG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFT
VE5vZGUuCisJICovCisJQVNUTm9kZSBjbG9uZTAoQVNUIHRhcmdldCkgeworCQlMYW1iZGFFeHBy
ZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRhcmdldCk7CisJCXJlc3VsdC5z
ZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsKKwkJcmVzdWx0
LnNldFBhcmVudGhlc2VzKGhhc1BhcmVudGhlc2VzKCkpOworCQlyZXN1bHQucGFyYW1ldGVycygp
LmFkZEFsbChBU1ROb2RlLmNvcHlTdWJ0cmVlcyh0YXJnZXQsIHBhcmFtZXRlcnMoKSkpOworCQly
ZXN1bHQuc2V0Qm9keShBU1ROb2RlLmNvcHlTdWJ0cmVlKHRhcmdldCwgZ2V0Qm9keSgpKSk7CisJ
CXJldHVybiByZXN1bHQ7CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2Qp
CisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgYm9vbGVhbiBz
dWJ0cmVlTWF0Y2gwKEFTVE1hdGNoZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7CisJCS8vIGRp
c3BhdGNoIHRvIGNvcnJlY3Qgb3ZlcmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0dXJuIG1hdGNo
ZXIubWF0Y2godGhpcywgb3RoZXIpOworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMg
bWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCXZvaWQgYWNj
ZXB0MChBU1RWaXNpdG9yIHZpc2l0b3IpIHsKKwkJYm9vbGVhbiB2aXNpdENoaWxkcmVuID0gdmlz
aXRvci52aXNpdCh0aGlzKTsKKwkJaWYgKHZpc2l0Q2hpbGRyZW4pIHsKKwkJCS8vIHZpc2l0IGNo
aWxkcmVuIGluIG5vcm1hbCBsZWZ0IHRvIHJpZ2h0IHJlYWRpbmcgb3JkZXIKKwkJCWFjY2VwdENo
aWxkcmVuKHZpc2l0b3IsIHRoaXMucGFyYW1ldGVycyk7CisJCQlhY2NlcHRDaGlsZCh2aXNpdG9y
LCBnZXRCb2R5KCkpOworCQl9CisJCXZpc2l0b3IuZW5kVmlzaXQodGhpcyk7CisJfQorCisJLyoq
CisJICogUmV0dXJucyB3aGV0aGVyIHRoaXMgbGFtYmRhIGV4cHJlc3Npb24gaGFzIHBhcmVudGhl
c2lzIGFyb3VuZCBwYXJhbWV0ZXJzLgorCSAqIElmIHRoZSBmaWVsZCBoYXNQYXJlbnRoZXNpcyBp
cyBmYWxzZSwgYnV0IHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBpcworCSAqIG5vdCBvbmUgb3Ig
dGhlIHBhcmFtZXRlciBpcyBub3Qge0BsaW5rIFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudH0g
dGhlbgorCSAqIGl0cyBpbGxlZ2FsIGZvciB0aGUgbGFtYmRhIGV4cHJlc3Npb24gbm90IHRvIGhh
dmUgcGFyZW50aGVzZXMgYW5kIGhlbmNlCisJICogdGhpcyByZXR1cm5zIHRydWUuCisJICoKKwkg
KiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoaXMgbGFtYmRhIGV4cHJlc3Npb24gaGFz
IHBhcmVudGhlc2VzIGFuLAorCSAqICAgIGFuZCA8Y29kZT5mYWxzZTwvY29kZT4gaWYgaXQgbGVn
YWxseSBkb2VzIG5vdCBoYXZlIHBhcmVudGhlc2VzLgorCSAqLworCXB1YmxpYyBib29sZWFuIGhh
c1BhcmVudGhlc2VzKCkgeworCQlib29sZWFuIHJlc3VsdCA9IHRydWU7CisJCWlmIChwYXJhbWV0
ZXJzKCkuc2l6ZSgpID09IDEgJiYgcGFyYW1ldGVycygpLmdldCgwKSBpbnN0YW5jZW9mIFZhcmlh
YmxlRGVjbGFyYXRpb25GcmFnbWVudCkgeworCQkJcmVzdWx0ID0gdGhpcy5oYXNQYXJlbnRoZXNl
czsKKwkJfQorCQlyZXR1cm4gcmVzdWx0OworCX0KKworCS8qKgorCSAqIFNldHMgd2hldGhlciB0
aGlzIGhhcyBwYXJlbnRoZXNpcyBvciBub3QuCisJICoKKwkgKiBAcGFyYW0gaGFzUGFyZW50aGVz
ZXMgPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhpcyBsYW1iZGEgZXhwcmVzc2lvbiBoYXMgcGFyZW50
aGVzaXMgYXJvdW5kIHBhcmFtZXRlcnMKKwkgKiAgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhl
cndpc2UKKwkgKi8KKwlwdWJsaWMgdm9pZCBzZXRQYXJlbnRoZXNlcyhib29sZWFuIGhhc1BhcmVu
dGhlc2VzKSB7CisJCXByZVZhbHVlQ2hhbmdlKFBBUkVOVEhFU0VTX1BST1BFUlRZKTsKKwkJdGhp
cy5oYXNQYXJlbnRoZXNlcyA9IGhhc1BhcmVudGhlc2VzOworCQlwb3N0VmFsdWVDaGFuZ2UoUEFS
RU5USEVTRVNfUFJPUEVSVFkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGxpdmUgb3Jk
ZXJlZCBsaXN0IG9mIGZvcm1hbCBwYXJhbWV0ZXJzIG9mIHRoaXMgbGFtYmRhIGV4cHJlc3Npb24u
CisJICoKKwkgKiBAcmV0dXJuIHRoZSBsaXZlIGxpc3Qgb2YgZm9ybWFsIHBhcmFtZXRlcnMgb2Yg
dGhpcyBsYW1iZGEgZXhwcmVzc2lvbgorCSAqICAgIChlbGVtZW50IHR5cGU6IHtAbGluayBWYXJp
YWJsZURlY2xhcmF0aW9ufSAKKwkgKi8KKwlwdWJsaWMgTGlzdCBwYXJhbWV0ZXJzKCkgeworCQly
ZXR1cm4gdGhpcy5wYXJhbWV0ZXJzOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGJvZHkg
b2YgdGhpcyBsYW1iZGEgZXhwcmVzc2lvbi4KKwkgKiA8cD4KKwkgKiBkZWZhdWx0cyB0byBhbiBl
bXB0eSBibG9jayBpZiBib2R5IGlzIG51bGwuCisJICogPC9wPgorCSAqIEByZXR1cm4gdGhlIGxh
bWJkYSBleHByZXNzaW9uIGJvZHkgd2hpY2ggY2FuIGJlIGVpdGhlciBhIHtAbGluayBCbG9ja30g
b3IgYSB7QGxpbmsgRXhwcmVzc2lvbn0KKwkgKi8KKwlwdWJsaWMgQVNUTm9kZSBnZXRCb2R5KCkg
eworCQlpZiAodGhpcy5ib2R5ID09IG51bGwpIHsKKwkJCXRoaXMuYm9keSA9IG5ldyBCbG9jayh0
aGlzLmFzdCk7CisJCX0KKwkJcmV0dXJuIHRoaXMuYm9keTsKKwl9CisKKwkvKioKKwkgKiBTZXRz
IHRoZSBib2R5IG9mIHRoaXMgbGFtYmRhIGV4cHJlc3Npb24uCisJICoKKwkgKiBAcGFyYW0gYm9k
eSBhIGJsb2NrIG5vZGUgb3IgYW4gZXhwcmVzc2lvbiBub2RlCisJICogQGV4Y2VwdGlvbiBJbGxl
Z2FsQXJndW1lbnRFeGNlcHRpb24gaWY6CisJICogPHVsPgorCSAqIDxsaT50aGUgbm9kZSBiZWxv
bmdzIHRvIGEgZGlmZmVyZW50IEFTVDwvbGk+CisJICogPGxpPnRoZSBub2RlIGFscmVhZHkgaGFz
IGEgcGFyZW50PC9saT4KKwkgKiA8bGk+YSBjeWNsZSBpbiB3b3VsZCBiZSBjcmVhdGVkPC9saT4K
KwkgKiA8bGk+IGJvZHkgaXMgbmVpdGhlciBhbiB7QGxpbmsgRXhwcmVzc2lvbn0gbm9yIGEge0Bs
aW5rIEJsb2NrfSA8L2xpPgorCSAqIDwvdWw+CisJICovCisJcHVibGljIHZvaWQgc2V0Qm9keShB
U1ROb2RlIGJvZHkpIHsKKwkJaWYgKCEoYm9keSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gfHwgYm9k
eSBpbnN0YW5jZW9mIEJsb2NrKSkgeworCQkJdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2Vw
dGlvbigpOworCQl9CisJCUFTVE5vZGUgb2xkQ2hpbGQgPSB0aGlzLmJvZHk7CisJCXByZVJlcGxh
Y2VDaGlsZChvbGRDaGlsZCwgYm9keSwgQk9EWV9QUk9QRVJUWSk7CisJCXRoaXMuYm9keSA9IGJv
ZHk7CisJCXBvc3RSZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIGJvZHksIEJPRFlfUFJPUEVSVFkpOwor
CX0KKworCS8qKgorCSAqIFJlc29sdmVzIGFuZCByZXR1cm5zIHRoZSBiaW5kaW5nIGZvciB0aGUg
bGFtYmRhIGV4cHJlc3Npb24KKwkgKiA8cD4KKwkgKiBOb3RlIHRoYXQgYmluZGluZ3MgYXJlIGdl
bmVyYWxseSB1bmF2YWlsYWJsZSB1bmxlc3MgcmVxdWVzdGVkIHdoZW4gdGhlCisJICogQVNUIGlz
IGJlaW5nIGJ1aWx0LgorCSAqIDwvcD4KKwkgKgorCSAqIEByZXR1cm4gdGhlIGJpbmRpbmcsIG9y
IDxjb2RlPm51bGw8L2NvZGU+IGlmIHRoZSBiaW5kaW5nIGNhbm5vdCBiZQorCSAqICAgIHJlc29s
dmVkCisJICovCisJcHVibGljIElNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2RCaW5kaW5nKCkg
eworCQlyZXR1cm4gdGhpcy5hc3QuZ2V0QmluZGluZ1Jlc29sdmVyKCkucmVzb2x2ZU1ldGhvZCh0
aGlzKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRo
b2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgbWVtU2l6ZSgpIHsKKwkJcmV0dXJu
IDMgKiA0OworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1l
dGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCWludCB0cmVlU2l6ZSgpIHsKKwkJcmV0
dXJuCisJCQltZW1TaXplKCkKKwkJCSsgKHRoaXMucGFyYW1ldGVycyA9PSBudWxsID8gMCA6IHRo
aXMucGFyYW1ldGVycy5saXN0U2l6ZSgpKQorCQkJKyAodGhpcy5ib2R5ID09IG51bGwgPyAwIDog
Z2V0Qm9keSgpLnRyZWVTaXplKCkpOworCX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxl
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRlbmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRl
bmVyLmphdmEKaW5kZXggMDkwNWQ2YS4uYWFhYTk2ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZs
YXR0ZW5lci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQpAQCAtMTcsMTAyICsx
Nyw3IEBACiBpbXBvcnQgamF2YS51dGlsLkl0ZXJhdG9yOwogaW1wb3J0IGphdmEudXRpbC5MaXN0
OwogCi1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uQVNUTm9kZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uQVNUVmlzaXRvcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQWJzdHJhY3RU
eXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFubm90YXRh
YmxlVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvbjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvblR5cGVEZWNsYXJhdGlvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvblR5cGVNZW1iZXJEZWNs
YXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5vbnltb3VzQ2xhc3NE
ZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXJyYXlBY2Nlc3M7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFycmF5Q3JlYXRpb247Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFycmF5SW5pdGlhbGl6ZXI7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLkFycmF5VHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uQXNzZXJ0U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5B
c3NpZ25tZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5CbG9jazsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQmxvY2tDb21tZW50OwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5Cb2R5RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLkJvb2xlYW5MaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRv
bS5CcmVha1N0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2FzdEV4
cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNhdGNoQ2xhdXNlOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5DaGFyYWN0ZXJMaXRlcmFsOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5DbGFzc0luc3RhbmNlQ3JlYXRpb247Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNvbXBpbGF0aW9uVW5pdDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uQ29uZGl0aW9uYWxFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5Db25zdHJ1Y3Rvckludm9jYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkNvbnRpbnVlU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5FeHRyYURpbWVuc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uVW5pb25UeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Eb1N0YXRlbWVu
dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW1wdHlTdGF0ZW1lbnQ7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkVuaGFuY2VkRm9yU3RhdGVtZW50OwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5FbnVtQ29uc3RhbnREZWNsYXJhdGlvbjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW51bURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5FeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5FeHByZXNzaW9uU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5GaWVsZEFjY2VzczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRmllbGRE
ZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRm9yU3RhdGVtZW50
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JZlN0YXRlbWVudDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSW1wb3J0RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLkluZml4RXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uSW5pdGlhbGl6ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
Lkluc3RhbmNlb2ZFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5K
YXZhZG9jOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5MYWJlbGVkU3RhdGVtZW50
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5MaW5lQ29tbWVudDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWFya2VyQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uTWVtYmVyUmVmOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5NZW1iZXJWYWx1ZVBhaXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1l
dGhvZERlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2RJ
bnZvY2F0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2RSZWY7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZFJlZlBhcmFtZXRlcjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTW9kaWZpZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLk5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk5vcm1h
bEFubm90YXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk51bGxMaXRlcmFs
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OdW1iZXJMaXRlcmFsOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5QYWNrYWdlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLlBhcmFtZXRlcml6ZWRUeXBlOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5QYXJlbnRoZXNpemVkRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uUG9zdGZpeEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLlByZWZpeEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLlByaW1pdGl2ZVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlF1
YWxpZmllZE5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlF1YWxpZmllZFR5
cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlJldHVyblN0YXRlbWVudDsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU2ltcGxlTmFtZTsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uU2ltcGxlVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uU2luZ2xlTWVtYmVyQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdHJp
bmdMaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdXBlckNvbnN0cnVj
dG9ySW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3VwZXJGaWVs
ZEFjY2VzczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3VwZXJNZXRob2RJbnZv
Y2F0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Td2l0Y2hDYXNlOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Td2l0Y2hTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLlN5bmNocm9uaXplZFN0YXRlbWVudDsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uVGFnRWxlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uVGV4dEVsZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRo
aXNFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UaHJvd1N0YXRl
bWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHJ5U3RhdGVtZW50OwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLlR5cGVEZWNsYXJhdGlvblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uVHlwZUxpdGVyYWw7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVQ
YXJhbWV0ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVjbGFy
YXRpb25FeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJs
ZURlY2xhcmF0aW9uRnJhZ21lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZh
cmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLldoaWxlU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5XaWxk
Y2FyZFR5cGU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLio7CiAKIC8qKgogICog
SW50ZXJuYWwgQVNUIHZpc2l0b3IgZm9yIHNlcmlhbGl6aW5nIGFuIEFTVCBpbiBhIHF1aWNrIGFu
ZCBkaXJ0eSBmYXNoaW9uLgpAQCAtODMxLDYgKzczNiwyOCBAQAogCX0KIAogCS8qCisJICogQHNl
ZSBBU1RWaXNpdG9yI3Zpc2l0KExhbWJkYUV4cHJlc3Npb24pCisJICovCisJcHVibGljIGJvb2xl
YW4gdmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBub2RlKSB7CisJCWJvb2xlYW4gaGFzUGFyZW50aGVz
ZXMgPSBub2RlLmhhc1BhcmVudGhlc2VzKCk7CisJCWlmIChoYXNQYXJlbnRoZXNlcykKKwkJCXRo
aXMuYnVmZmVyLmFwcGVuZCgnKCcpOworCQlJdGVyYXRvciBpdCA9IG5vZGUucGFyYW1ldGVycygp
Lml0ZXJhdG9yKCk7CisJCWJvb2xlYW4gaGFzTmV4dCA9IGl0Lmhhc05leHQoKTsKKwkJd2hpbGUg
KGhhc05leHQpIHsKKwkJCVZhcmlhYmxlRGVjbGFyYXRpb24gIHZhcmlhYmxlRGVjbGFyYXRpb24g
PSAoVmFyaWFibGVEZWNsYXJhdGlvbikgaXQubmV4dCgpOworCQkJdmFyaWFibGVEZWNsYXJhdGlv
bi5hY2NlcHQodGhpcyk7CisJCQlpZiAoKGhhc05leHQgPSBpdC5oYXNOZXh0KCkpID09IHRydWUp
CisJCQkJdGhpcy5idWZmZXIuYXBwZW5kKCcsJyk7CisJCX0KKwkJaWYgKGhhc1BhcmVudGhlc2Vz
KSAKKwkJCXRoaXMuYnVmZmVyLmFwcGVuZCgnKScpOwkKKwkJdGhpcy5idWZmZXIuYXBwZW5kKCIg
LT4gIik7IC8vJE5PTi1OTFMtMSQKKwkJbm9kZS5nZXRCb2R5KCkuYWNjZXB0KHRoaXMpOworCQly
ZXR1cm4gZmFsc2U7CisJfQorCisJLyoKIAkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQoSWZTdGF0
ZW1lbnQpCiAJICovCiAJcHVibGljIGJvb2xlYW4gdmlzaXQoSWZTdGF0ZW1lbnQgbm9kZSkgew==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227839</attachid>
            <date>2013-03-01 21:14:00 -0500</date>
            <delta_ts>2013-03-01 21:14:44 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-forBg-399793--18dom-ast-Add-a-new-node-type-for-.patch</filename>
            <type>text/plain</type>
            <size>45529</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IGI5ZjUxMzQuLmM1ZjJhYzAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTUyMCw0ICsxNTIwLDE3NiBAQAogCQlhYmlu
ZGluZyA9IGFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCk7CiAJCWFzc2VydEVx
dWFscygiQE1hcmtlcjEoKSIsIGFiaW5kaW5nLnRvU3RyaW5nKCkpOwogCX0KKworCS8qKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkg
KiAKKwkgKiBAdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRl
c3QzOTk3OTNhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0Nv
cHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIs
CisJCQkJdHJ1ZS8qIHJlc29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0
ZXN0Mzk5NzkzOyIKKwkJCQkrICJpbnRlcmZhY2UgSSB7XG4iCisJCQkJKyAiCWludCBmb28oaW50
IHgpO1xuIgorCQkJCSsgIn1cbiIgCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsg
IiBJIGkgPSAgdmxhbWJkYSAtPiB7cmV0dXJuIDIwMDt9O1xuIgorCQkJCSsifVxuIjsKKwkJQ29t
cGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRo
aXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5
cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmll
bGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURl
Y2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdt
ZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdt
ZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJhZ21lbnQuZ2V0SW5p
dGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhw
cmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFF
eHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJkYSAtPiB7XG4gIHJl
dHVybiAyMDA7XG59XG4iLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlhc3NlcnRU
cnVlKGxhbWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAxKTsKKwkJSU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24ucmVzb2x2ZU1ldGhvZEJpbmRpbmco
KTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgaW50IGZvbyhpbnQpICIsIGJpbmRpbmcudG9TdHJp
bmcoKSk7CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJp
YWJsZURlY2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJ
CWFzc2VydFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFy
YXRpb25GcmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dCl2YXJpYWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVu
dC50b1N0cmluZygpKTsJCQorCQlJVmFyaWFibGVCaW5kaW5nIHZhcmlhYmxlQmluZGluZyA9IGZy
YWdtZW50LnJlc29sdmVCaW5kaW5nKCk7CQkKKwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0g
dmFyaWFibGVCaW5kaW5nLmdldFR5cGUoKTsKKwkJYXNzZXJ0Tm90TnVsbCgiTnVsbCBCaW5kaW5n
IGZvciBsYW1iZGEgYXJndW1lbnQiLCB0eXBlQmluZGluZyk7CisJCWFzc2VydEVxdWFscygiYmlu
ZGluZyBvZiBpbnQgZXhwZWN0ZWQgZm9yIGxhbWJkYSIsImludCIsdHlwZUJpbmRpbmcuZ2V0TmFt
ZSgpKTsKKwl9CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24K
KwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9z
cmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5n
IGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNlIEkge1xu
IgorCQkJCSsgIglpbnQgZm9vKGludCB4KTtcbiIKKwkJCQkrICJ9XG4iIAorCQkJCSsgInB1Ymxp
YyBjbGFzcyBYIHtcbiIKKwkJCQkrICIgSSBpID0gIHZsYW1iZGEgLT4gMjAwO1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygidmxhbWJk
YSAtPiAyMDAiLCBsYW1iZGFFeHByZXNzaW9uLnRvU3RyaW5nKCkpOworCQlJTWV0aG9kQmluZGlu
ZyBiaW5kaW5nID0gbGFtYmRhRXhwcmVzc2lvbi5yZXNvbHZlTWV0aG9kQmluZGluZygpOworCQlh
c3NlcnRFcXVhbHMoInB1YmxpYyBpbnQgZm9vKGludCkgIiwgYmluZGluZy50b1N0cmluZygpKTsK
KwkJYXNzZXJ0VHJ1ZShsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5zaXplKCkgPT0gMSk7
CisJCVZhcmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURl
Y2xhcmF0aW9uKSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCWFzc2Vy
dFRydWUodmFyaWFibGVEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFyYXRpb25G
cmFnbWVudCk7CisJCWZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCl2YXJp
YWJsZURlY2xhcmF0aW9uOworCQlhc3NlcnRFcXVhbHMoInZsYW1iZGEiLCBmcmFnbWVudC50b1N0
cmluZygpKTsJCQorCX0KKwkKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24KKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0Mzk5NzkzYygpIHRocm93cyBKYXZhTW9kZWxF
eGNlcHRpb24geworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0
ZXIxOC9zcmMvdGVzdDM5OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJ
U3RyaW5nIGNvbnRlbnRzID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiCisJCQkJKyAiaW50ZXJmYWNl
IEkge1xuIgorCQkJCSsgIglPYmplY3QgZm9vKGludCBbXSBpYSk7XG4iCisJCQkJKyAifVxuIiAK
KwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiIEkgaSA9IChpbnQgW10gaWEpIC0+
e1xuIgorCQkJCSsgIiAgCXJldHVybiBpYS5jbG9uZSgpOyIKKwkJCQkrICJ9O1xuIgorCQkJCSsi
fVxuIjsKKwkJQ29tcGlsYXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1Qo
Y29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xh
cmF0aW9uID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVj
bGFyYXRpb24gZmllbGREZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFy
YXRpb24uYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZy
YWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xh
cmF0aW9uLmZyYWdtZW50cygpLmdldCgwKTsKKwkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gZnJh
Z21lbnQuZ2V0SW5pdGlhbGl6ZXIoKTsKKwkJYXNzZXJ0VHJ1ZShleHByZXNzaW9uIGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbik7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
biA9IChMYW1iZGFFeHByZXNzaW9uKWV4cHJlc3Npb247CisJCWFzc2VydEVxdWFscygiKGludFtd
IGlhKSAtPiB7XG4gIHJldHVybiBpYS5jbG9uZSgpO1xufVxuIiwgbGFtYmRhRXhwcmVzc2lvbi50
b1N0cmluZygpKTsKKwkJSU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGxhbWJkYUV4cHJlc3Npb24u
cmVzb2x2ZU1ldGhvZEJpbmRpbmcoKTsKKwkJYXNzZXJ0RXF1YWxzKCJwdWJsaWMgamF2YS5sYW5n
Lk9iamVjdCBmb28oaW50W10pICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUo
bGFtYmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuc2l6ZSgpID09IDEpOworCQlWYXJpYWJsZURl
Y2xhcmF0aW9uIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVEZWNsYXJhdGlvbikgbGFt
YmRhRXhwcmVzc2lvbi5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQlhc3NlcnRUcnVlKHZhcmlhYmxl
RGVjbGFyYXRpb24gaW5zdGFuY2VvZiBTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKTsKKwkJU2lu
Z2xlVmFyaWFibGVEZWNsYXJhdGlvbiBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gKFNpbmds
ZVZhcmlhYmxlRGVjbGFyYXRpb24pdmFyaWFibGVEZWNsYXJhdGlvbjsKKwkJYXNzZXJ0RXF1YWxz
KCJpbnRbXSBpYSIsIHNpbmdsZVZhcmlhYmxlRGVjbGFyYXRpb24udG9TdHJpbmcoKSk7CQkKKwl9
CisKKwkvKioKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9Mzk5NzkzCisJICogCisJICogQHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24KKwkgKi8KKwlw
dWJsaWMgdm9pZCB0ZXN0Mzk5NzkzZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQl0
aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxOC9zcmMvdGVzdDM5
OTc5My9YLmphdmEiLAorCQkJCXRydWUvKiByZXNvbHZlICovKTsKKwkJU3RyaW5nIGNvbnRlbnRz
ID0gInBhY2thZ2UgdGVzdDM5OTc5MzsiICsKKwkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJ
Igl2b2lkIGRvaXQoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJIgkJSSBpID0gKCkgLT4ge1xuIiArCisJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bih0aGlzKTtcbiIgKworCQkJCSIJCQlJIGogPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkJCVN5c3Rl
bS5vdXQucHJpbnRsbih0aGlzKTtcbiIgKworCQkJCSIJCQkJSSBrID0gKCkgLT4ge1xuIiArCisJ
CQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKHRoaXMpO1xuIiArCisJCQkJIgkJCQl9O1xuIiAr
CisJCQkJIgkJCX07XG4iICsKKwkJCQkiCQl9O1xuIiArCisJCQkJIgl9XG4iOyAKKwkJQ29tcGls
YXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRoaXMu
d29ya2luZ0NvcHkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZWRlY2xhcmF0aW9uID0gKFR5cGVE
ZWNsYXJhdGlvbikgZ2V0QVNUTm9kZShjdSwgMSk7CisJCUZpZWxkRGVjbGFyYXRpb24gZmllbGRE
ZWNsYXJhdGlvbiA9IChGaWVsZERlY2xhcmF0aW9uKSB0eXBlZGVjbGFyYXRpb24uYm9keURlY2xh
cmF0aW9ucygpLmdldCgwKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdtZW50
ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdtZW50
cygpLmdldCgwKTsKKwkJSVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZUJpbmRpbmcgPSBmcmFnbWVu
dC5yZXNvbHZlQmluZGluZygpOworCQlhc3NlcnRFcXVhbHMoInRlc3QzOTk3OTMuSSBpIiwgdmFy
aWFibGVCaW5kaW5nLnRvU3RyaW5nKCkpOworCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3NlcnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9u
ID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lvbjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiB7
XG4gIFN5c3RlbS5vdXQucHJpbnRsbih0aGlzKTtcbiAgSSBqPSgpIC0+IHtcbiAgICBTeXN0ZW0u
b3V0LnByaW50bG4odGhpcyk7XG4gICAgSSBrPSgpIC0+IHtcbiAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih0aGlzKTtcbiAgICB9XG47XG4gIH1cbjtcbn1cbiIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHZvaWQgZG9pdCgp
ICIsIGJpbmRpbmcudG9TdHJpbmcoKSk7CisJCWFzc2VydFRydWUobGFtYmRhRXhwcmVzc2lvbi5w
YXJhbWV0ZXJzKCkuc2l6ZSgpID09IDApOworCX0KKworCS8qKgorCSAqIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwkgKiAKKwkgKiBAdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3QzOTk3OTNlKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRXb3JraW5n
Q29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0Mzk5NzkzL1guamF2YSIsCisJCQkJdHJ1ZS8qIHJl
c29sdmUgKi8pOworCQlTdHJpbmcgY29udGVudHMgPSAicGFja2FnZSB0ZXN0Mzk5NzkzOyIgKwor
CQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkiICBKIGZvbygpO1xuIiArCisJCQkJIn1cbiIg
KworCQkJCSJpbnRlcmZhY2UgSiB7XG4iICsKKwkJCQkiICBpbnQgZm9vKCk7XG4iICsKKwkJCQki
fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgICAgSSBJID0gKCkgLT4g
KCkgLT4gMTA7XG4iICsKKwkJCQkifVxuIjsKKwkJCQorCQlDb21waWxhdGlvblVuaXQgY3UgPSAo
Q29tcGlsYXRpb25Vbml0KSBidWlsZEFTVChjb250ZW50cywgdGhpcy53b3JraW5nQ29weSk7CisJ
CVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRB
U1ROb2RlKGN1LCAyKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xhcmF0aW9uID0gKEZp
ZWxkRGVjbGFyYXRpb24pIHR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDAp
OworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNs
YXJhdGlvbkZyYWdtZW50KWZpZWxkRGVjbGFyYXRpb24uZnJhZ21lbnRzKCkuZ2V0KDApOworCQlF
eHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXplcigpOworCQlhc3Nl
cnRUcnVlKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKTsKKwkJTGFtYmRh
RXhwcmVzc2lvbiBsYW1iZGFFeHByZXNzaW9uID0gKExhbWJkYUV4cHJlc3Npb24pZXhwcmVzc2lv
bjsKKwkJYXNzZXJ0RXF1YWxzKCIoKSAtPiAoKSAtPiAxMCIsIGxhbWJkYUV4cHJlc3Npb24udG9T
dHJpbmcoKSk7CisJCUlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBsYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2RCaW5kaW5nKCk7CisJCWFzc2VydEVxdWFscygicHVibGljIHRlc3QzOTk3OTMu
SiBmb28oKSAiLCBiaW5kaW5nLnRvU3RyaW5nKCkpOworCQlhc3NlcnRUcnVlKGxhbWJkYUV4cHJl
c3Npb24ucGFyYW1ldGVycygpLnNpemUoKSA9PSAwKTsKKwl9CQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RNYXRjaGVyVGVzdC5q
YXZhCmluZGV4IDlkMzhkNmQuLmU1ZmU3OTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUTWF0
Y2hlclRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVE1hdGNoZXJUZXN0LmphdmEKQEAgLTU1
MSw2ICs1NTEsOSBAQAogCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChJbnN0YW5jZW9mRXhwcmVzc2lv
biBub2RlLCBPYmplY3Qgb3RoZXIpIHsKIAkJCXJldHVybiBzdGFuZGFyZEJvZHkobm9kZSwgb3Ro
ZXIsIHRoaXMuc3VwZXJNYXRjaCA/IHN1cGVyLm1hdGNoKG5vZGUsIG90aGVyKSA6IGZhbHNlKTsK
IAkJfQorCQlwdWJsaWMgYm9vbGVhbiBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVj
dCBvdGhlcikgeworCQkJcmV0dXJuIHN0YW5kYXJkQm9keShub2RlLCBvdGhlciwgdGhpcy5zdXBl
ck1hdGNoID8gc3VwZXIubWF0Y2gobm9kZSwgb3RoZXIpIDogZmFsc2UpOworCQl9CiAJfQogCiAJ
LyoqCkBAIC0xNTYzLDQgKzE1NjYsNTMgQEAKIAkJeDEuZXh0cmFEaW1lbnNpb25zKCkuYWRkKHgy
KTsKIAkJYmFzaWNNYXRjaCh4MSk7CiAJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHBy
ZXNzaW9uczEoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJ
CXJldHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRh
RXhwcmVzc2lvbigpOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgeDIgPSB0aGlzLmFz
dC5uZXdWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQoKTsKKwkJeDIuc2V0TmFtZSh0aGlzLk4x
KTsKKwkJeDEucGFyYW1ldGVycygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5hc3QubmV3
QmxvY2soKSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTMKKwlwdWJsaWMgdm9pZCB0ZXN0TGFt
YmRhRXhwcmVzc2lvbnMyKCkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwoKSA8IEFTVC5KTFM4
KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTGFtYmRhRXhwcmVzc2lvbiB4MSA9IHRoaXMuYXN0Lm5l
d0xhbWJkYUV4cHJlc3Npb24oKTsKKwkJeDEuc2V0Qm9keSh0aGlzLmFzdC5uZXdCbG9jaygpKTsK
KwkJYmFzaWNNYXRjaCh4MSk7CisJfQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MworCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFFeHByZXNz
aW9uczMoKSB7CisJCWlmICh0aGlzLmFzdC5hcGlMZXZlbCgpIDwgQVNULkpMUzgpIHsKKwkJCXJl
dHVybjsKKwkJfQorCQlMYW1iZGFFeHByZXNzaW9uIHgxID0gdGhpcy5hc3QubmV3TGFtYmRhRXhw
cmVzc2lvbigpOworCQl4MS5zZXRCb2R5KHRoaXMuRTEpOworCQliYXNpY01hdGNoKHgxKTsKKwl9
CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5
NzkzCisJcHVibGljIHZvaWQgdGVzdExhbWJkYUV4cHJlc3Npb25zNCgpIHsKKwkJaWYgKHRoaXMu
YXN0LmFwaUxldmVsKCkgPCBBU1QuSkxTOCkgeworCQkJcmV0dXJuOworCQl9CisJCUxhbWJkYUV4
cHJlc3Npb24geDEgPSB0aGlzLmFzdC5uZXdMYW1iZGFFeHByZXNzaW9uKCk7CisJCVNpbmdsZVZh
cmlhYmxlRGVjbGFyYXRpb24geDIgPSB0aGlzLmFzdC5uZXdTaW5nbGVWYXJpYWJsZURlY2xhcmF0
aW9uKCk7CisJCXgyLm1vZGlmaWVycygpLmFkZCh0aGlzLk1PRDEpOworCQl4Mi5tb2RpZmllcnMo
KS5hZGQodGhpcy5NT0QyKTsKKwkJeDIuc2V0VHlwZSh0aGlzLlQxKTsKKwkJeDIuc2V0TmFtZSh0
aGlzLk4xKTsKKwkJeDEucGFyYW1ldGVycygpLmFkZCh4Mik7CisJCXgxLnNldEJvZHkodGhpcy5F
MSk7CisJCWJhc2ljTWF0Y2goeDEpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFt
YmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5k
ZXggZmIxZGYxZC4uYWFjOGJiMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTQ2LDYg
KzQ2LDcgQEAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25h
bEV4cHJlc3Npb24gewogCXB1YmxpYyBBcmd1bWVudCBbXSBhcmd1bWVudHM7CiAJcHVibGljIFN0
YXRlbWVudCBib2R5OworCXB1YmxpYyBib29sZWFuIGhhc1BhcmVudGhlc2VzOwogCU1ldGhvZFNj
b3BlIHNjb3BlOwogCXByb3RlY3RlZCBib29sZWFuIHZvaWRDb21wYXRpYmxlID0gdHJ1ZTsKIAlw
cm90ZWN0ZWQgYm9vbGVhbiB2YWx1ZUNvbXBhdGlibGUgPSBmYWxzZTsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvUGFyc2VyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCmluZGV4
IDliNWM0MWMuLjgyODg5YjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQpAQCAtNzg2NSw2ICs3ODY1LDExIEBACiAJ
dGhpcy5pbnRQdHItLTsgIC8vICcpJyBwb3NpdGlvbiwgZGlzY2FyZCBmb3Igbm93LgogCWxleHAu
c291cmNlU3RhcnQgPSB0aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dOyAvLyAnKCcgcG9zaXRp
b24gb3IgaWRlbnRpZmllciBwb3NpdGlvbi4KIAlsZXhwLnNvdXJjZUVuZCA9IGJvZHkuc291cmNl
RW5kOworCWxleHAuaGFzUGFyZW50aGVzZXMgPSAodGhpcy5zY2FubmVyLmdldFNvdXJjZSgpW2xl
eHAuc291cmNlU3RhcnRdID09ICcoJyk7CisJaWYgKGJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9u
KSB7CisJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IChFeHByZXNzaW9uKSBib2R5OworCQlleHBy
ZXNzaW9uLnN0YXRlbWVudEVuZCA9IGJvZHkuc291cmNlRW5kOworCX0KIAlwdXNoT25FeHByZXNz
aW9uU3RhY2sobGV4cCk7CiAJaWYgKCF0aGlzLnBhcnNpbmdKYXZhOFBsdXMpIHsKIAkJcHJvYmxl
bVJlcG9ydGVyKCkubGFtYmRhRXhwcmVzc2lvbnNOb3RCZWxvdzE4KGxleHApOwpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1Qu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
QVNULmphdmEKaW5kZXggOTViOTBlYy4uZTMxNDk1YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCkBA
IC0yMyw3ICsyMyw2IEBACiBpbXBvcnQgamF2YS51dGlsLlN0cmluZ1Rva2VuaXplcjsKIAogaW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUHJvZ3Jlc3NNb25pdG9yOwotCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzRmlsZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5JQ29tcGlsYXRpb25Vbml0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZh
UHJvamVjdDsKQEAgLTExMTYsMjUgKzExMTUsNiBAQAogCX0KIAogCS8qKgotCSAqIENyZWF0ZXMg
YW5kIHJldHVybnMgYSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24g
bm9kZQotCSAqIChTdXBwb3J0ZWQgb25seSBpbiBKTFM4IGxldmVsKS4KLQkgKgotCSAqIEByZXR1
cm4gYSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24gbm9kZQotCSAq
IEBleGNlcHRpb24gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmOgotCSAqIDx1bD4KLQkgKiA8
bGk+dGhlIG5vZGUgYmVsb25ncyB0byBhIGRpZmZlcmVudCBBU1Q8L2xpPgotCSAqIDxsaT50aGUg
bm9kZSBhbHJlYWR5IGhhcyBhIHBhcmVudDwvbGk+Ci0JICogPC91bD4KLQkgKiBAZXhjZXB0aW9u
IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9uIGlzIHVzZWQK
LQkgKiAgICAgICAgICAgIGluIGEgSkxTMiwgSkxTMyBvciBKTFM0IEFTVAotCSAqIEBzaW5jZSAz
LjkKLQkgKi8KLQlwdWJsaWMgRXh0cmFEaW1lbnNpb24gbmV3RXh0cmFEaW1lbnNpb24oKSB7Ci0J
CUV4dHJhRGltZW5zaW9uIHJlc3VsdCA9IG5ldyBFeHRyYURpbWVuc2lvbih0aGlzKTsKLQkJcmV0
dXJuIHJlc3VsdDsKLQl9Ci0KLQkvKioKIAkgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHVu
cGFyZW50ZWQgYXJyYXkgdHlwZSBub2RlIHdpdGggdGhlIGdpdmVuCiAJICogZWxlbWVudCB0eXBl
IGFuZCBudW1iZXIgb2YgKGFkZGl0aW9uYWwpIGRpbWVuc2lvbnMuCiAJICogPHA+CkBAIC0xMzU1
LDE5ICsxMzM1LDYgQEAKIAl9CiAKIAkvKioKLQkgKiBDcmVhdGVzIGEgbmV3IHVucGFyZW50ZWQg
dW5pb24gdHlwZSBub2RlIG93bmVkIGJ5IHRoaXMgQVNULgotCSAqIEJ5IGRlZmF1bHQsIHRoZSB1
bmlvbiB0eXBlIGhhcyBubyB0eXBlcy4KLQkgKgotCSAqIEByZXR1cm4gYSBuZXcgdW5wYXJlbnRl
ZCBkbyBzdGF0ZW1lbnQgbm9kZQotCSAqIEBleGNlcHRpb24gVW5zdXBwb3J0ZWRPcGVyYXRpb25F
eGNlcHRpb24gaWYgdGhpcyBvcGVyYXRpb24gaXMgdXNlZCBpbgotCSAqIGEgSkxTMiBvciBKTFMz
IEFTVAotCSAqIEBzaW5jZSAzLjcuMQotCSAqLwotCXB1YmxpYyBVbmlvblR5cGUgbmV3VW5pb25U
eXBlKCkgewotCQlyZXR1cm4gbmV3IFVuaW9uVHlwZSh0aGlzKTsKLQl9Ci0KLQkvKioKIAkgKiBD
cmVhdGVzIGEgbmV3IHVucGFyZW50ZWQgZG8gc3RhdGVtZW50IG5vZGUgb3duZWQgYnkgdGhpcyBB
U1QuCiAJICogQnkgZGVmYXVsdCwgdGhlIGV4cHJlc3Npb24gaXMgdW5zcGVjaWZpZWQgKGJ1dCBs
ZWdhbCksIGFuZAogCSAqIHRoZSBib2R5IHN0YXRlbWVudCBpcyBhbiBlbXB0eSBibG9jay4KQEAg
LTE0NjAsNiArMTQyNywyNSBAQAogCX0KIAogCS8qKgorCSAqIENyZWF0ZXMgYW5kIHJldHVybnMg
YSBuZXcgdW5wYXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24gbm9kZQorCSAqIChT
dXBwb3J0ZWQgb25seSBpbiBKTFM4IGxldmVsKS4KKwkgKgorCSAqIEByZXR1cm4gYSBuZXcgdW5w
YXJlbnRlZCBhbm5vdGF0YWJsZSBleHRyYSBkaW1lbnNpb24gbm9kZQorCSAqIEBleGNlcHRpb24g
SWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uIGlmOgorCSAqIDx1bD4KKwkgKiA8bGk+dGhlIG5vZGUg
YmVsb25ncyB0byBhIGRpZmZlcmVudCBBU1Q8L2xpPgorCSAqIDxsaT50aGUgbm9kZSBhbHJlYWR5
IGhhcyBhIHBhcmVudDwvbGk+CisJICogPC91bD4KKwkgKiBAZXhjZXB0aW9uIFVuc3VwcG9ydGVk
T3BlcmF0aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9uIGlzIHVzZWQKKwkgKiAgICAgICAg
ICAgIGluIGEgSkxTMiwgSkxTMyBvciBKTFM0IEFTVAorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlw
dWJsaWMgRXh0cmFEaW1lbnNpb24gbmV3RXh0cmFEaW1lbnNpb24oKSB7CisJCUV4dHJhRGltZW5z
aW9uIHJlc3VsdCA9IG5ldyBFeHRyYURpbWVuc2lvbih0aGlzKTsKKwkJcmV0dXJuIHJlc3VsdDsK
Kwl9CisKKwkvKioKIAkgKiBDcmVhdGVzIGFuZCByZXR1cm5zIGEgbmV3IHVucGFyZW50ZWQgZmll
bGQgYWNjZXNzIGV4cHJlc3Npb24gbm9kZQogCSAqIG93bmVkIGJ5IHRoaXMgQVNULiBCeSBkZWZh
dWx0LCB0aGUgZXhwcmVzc2lvbiBhbmQgZmllbGQgYXJlIGJvdGgKIAkgKiB1bnNwZWNpZmllZCwg
YnV0IGxlZ2FsLCBuYW1lcy4KQEAgLTE1MjIsNiArMTUwOCwyMSBAQAogCSAqLwogCXB1YmxpYyBJ
ZlN0YXRlbWVudCBuZXdJZlN0YXRlbWVudCgpIHsKIAkJcmV0dXJuIG5ldyBJZlN0YXRlbWVudCh0
aGlzKTsKKwl9CisKKwkvKioKKwkgKiBDcmVhdGVzIGFuIHVucGFyZW50ZWQgbGFtYmRhIGV4cHJl
c3Npb24gbm9kZSBvd25lZCBieSB0aGlzIEFTVC4KKwkgKiBCeSBkZWZhdWx0LCB0aGUgZGVjbGFy
YXRpb24gaXMgZm9yIGEgbGFtYmRhIGV4cHJlc3Npb24gd2l0aCBhbiBlbXB0eSBhcmd1bWVudAor
CSAqIGxpc3QgYW5kIG5vIGJvZHkuCisJICogCisJICogQHJldHVybiBhIG5ldyB1bnBhcmVudGVk
IGxhbWJkYSBleHByZXNzaW9uIG5vZGUKKwkgKiBAZXhjZXB0aW9uIFVuc3VwcG9ydGVkT3BlcmF0
aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9uIGlzIHVzZWQgaW4gYSBKTFMyLCBKTFMzIG9y
IEpMUzQgQVNUCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9u
IG5ld0xhbWJkYUV4cHJlc3Npb24oKSB7CisJCXVuc3VwcG9ydGVkSW4yXzNfNCgpOworCQlMYW1i
ZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRoaXMpOworCQlyZXR1
cm4gcmVzdWx0OwogCX0KIAogCS8qKgpAQCAtMjM5OSw2ICsyNDAwLDE5IEBACiAJfQogCiAJLyoq
CisJICogQ3JlYXRlcyBhIG5ldyB1bnBhcmVudGVkIHVuaW9uIHR5cGUgbm9kZSBvd25lZCBieSB0
aGlzIEFTVC4KKwkgKiBCeSBkZWZhdWx0LCB0aGUgdW5pb24gdHlwZSBoYXMgbm8gdHlwZXMuCisJ
ICoKKwkgKiBAcmV0dXJuIGEgbmV3IHVucGFyZW50ZWQgZG8gc3RhdGVtZW50IG5vZGUKKwkgKiBA
ZXhjZXB0aW9uIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIGlmIHRoaXMgb3BlcmF0aW9u
IGlzIHVzZWQgaW4KKwkgKiBhIEpMUzIgb3IgSkxTMyBBU1QKKwkgKiBAc2luY2UgMy43LjEKKwkg
Ki8KKwlwdWJsaWMgVW5pb25UeXBlIG5ld1VuaW9uVHlwZSgpIHsKKwkJcmV0dXJuIG5ldyBVbmlv
blR5cGUodGhpcyk7CisJfQorCisJLyoqCiAJICogQ3JlYXRlcyBhIG5ldyB1bnBhcmVudGVkIGxv
Y2FsIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGV4cHJlc3Npb24gbm9kZQogCSAqIG93bmVkIGJ5IHRo
aXMgQVNULCBmb3IgdGhlIGdpdmVuIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGZyYWdtZW50LiBCeQog
CSAqIGRlZmF1bHQsIHRoZXJlIGFyZSBubyBtb2RpZmllcnMgYW5kIHRoZSBiYXNlIHR5cGUgaXMg
dW5zcGVjaWZpZWQKQEAgLTI5OTQsNSArMzAwOCwxOCBAQAogCSAgCXRocm93IG5ldyBVbnN1cHBv
cnRlZE9wZXJhdGlvbkV4Y2VwdGlvbigiT3BlcmF0aW9uIG5vdCBzdXBwb3J0ZWQgaW4gSkxTMiBB
U1QiKTsgLy8kTk9OLU5MUy0xJAogCSAgfQogCX0KKworCS8qKgorICAgICAqIENoZWNrcyB0aGF0
IHRoaXMgQVNUIG9wZXJhdGlvbiBpcyBub3QgdXNlZCB3aGVuCisgICAgICogYnVpbGRpbmcgSkxT
MiwgSkxTMyBvciBKTFM0IGxldmVsIEFTVHMuCisgICAgICogCisJICogQGV4Y2VwdGlvbiBVbnN1
cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbiBpZiB0aGlzIG9wZXJhdGlvbiBpcyB1c2VkIGJlbG93
IEpMUzgKKwkgKiBAc2luY2UgMy45CisJICovCisJIHZvaWQgdW5zdXBwb3J0ZWRJbjJfM180KCkg
eworCQlpZiAodGhpcy5hcGlMZXZlbCA8IEFTVC5KTFM4KSB7CisJCQl0aHJvdyBuZXcgVW5zdXBw
b3J0ZWRPcGVyYXRpb25FeGNlcHRpb24oIk9wZXJhdGlvbiBvbmx5IHN1cHBvcnRlZCBpbiBKTFM4
IGFuZCBsYXRlciBBU1QiKTsgLy8kTk9OLU5MUy0xJAorCQl9CisJfQogfQogCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENv
bnZlcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQppbmRleCAzMzUxOTNkLi40N2JhMmQ4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VENvbnZlcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKQEAgLTE3MjAsNiArMTcyMCw5IEBACiAJ
CWlmIChleHByZXNzaW9uIGluc3RhbmNlb2Ygb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5UeXBlUmVmZXJlbmNlKSB7CiAJCQlyZXR1cm4gY29udmVydCgob3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlKSBleHByZXNzaW9uKTsKIAkJ
fQorCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbikgeworCQkJcmV0dXJuIGNvbnZlcnQoKG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbikgZXhwcmVz
c2lvbik7CisJCX0KIAkJcmV0dXJuIG51bGw7CiAJfQogCkBAIC0yMTM3LDYgKzIxNDAsNDYgQEAK
IAkJcmV0dXJuIGV4cHI7CiAJfQogCisJcHVibGljIExhbWJkYUV4cHJlc3Npb24gY29udmVydChv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24gbGFt
YmRhKSB7CisJCWludCBzb3VyY2VTdGFydCA9IGxhbWJkYS5zb3VyY2VTdGFydDsKKwkJZmluYWwg
TGFtYmRhRXhwcmVzc2lvbglsYW1iZGFFeHByZXNzaW9uID0gbmV3IExhbWJkYUV4cHJlc3Npb24o
dGhpcy5hc3QpOworCQlpZiAodGhpcy5yZXNvbHZlQmluZGluZ3MpIHsKKwkJCXJlY29yZE5vZGVz
KGxhbWJkYUV4cHJlc3Npb24sIGxhbWJkYSk7CisJCX0KKwkJb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudFtdIGFyZ3VtZW50cyA9IGxhbWJkYS5hcmd1bWVudHM7
CisJCWlmIChhcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGFyZ3VtZW50c0xlbmd0aCA9IGFy
Z3VtZW50cy5sZW5ndGg7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50c0xlbmd0aDsg
aSsrKSB7CisJCQkJb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVu
dCBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJndW1lbnQudHlwZSA9PSBudWxs
KSB7CisJCQkJCVZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCB2YXJpYWJsZURlY2xhcmF0aW9u
RnJhZ21lbnQgPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KHRoaXMuYXN0KTsKKwkJ
CQkJU2ltcGxlTmFtZSBzaW1wbGVOYW1lID0gbmV3IFNpbXBsZU5hbWUodGhpcy5hc3QpOworCQkJ
CQlzaW1wbGVOYW1lLmludGVybmFsU2V0SWRlbnRpZmllcihuZXcgU3RyaW5nKGFyZ3VtZW50Lm5h
bWUpKTsKKwkJCQkJaW50IHN0YXJ0ID0gYXJndW1lbnQuc291cmNlU3RhcnQ7CisJCQkJCWludCBl
bmQgPSBhcmd1bWVudC5zb3VyY2VFbmQ7CisJCQkJCXNpbXBsZU5hbWUuc2V0U291cmNlUmFuZ2Uo
c3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7CisJCQkJCWlmICh0aGlzLnJlc29sdmVCaW5kaW5ncykg
eworCQkJCQkJcmVjb3JkTm9kZXMoc2ltcGxlTmFtZSwgYXJndW1lbnQpOworCQkJCQkJcmVjb3Jk
Tm9kZXModmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LCBhcmd1bWVudCk7CisJCQkJCX0KKwkJ
CQkJdmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LnNldE5hbWUoc2ltcGxlTmFtZSk7CisJCQkJ
CWxhbWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLmFkZCh2YXJpYWJsZURlY2xhcmF0aW9uRnJh
Z21lbnQpOwkJCQkJCisJCQkJfSBlbHNlIHsKKwkJCQkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlv
biBzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uID0gY29udmVydChhcmd1bWVudCk7CisJCQkJCWxh
bWJkYUV4cHJlc3Npb24ucGFyYW1ldGVycygpLmFkZChzaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9u
KTsJCQkJCQorCQkJCX0KKwkJCX0KKwkJfQorCQlpZiAobGFtYmRhLmJvZHkgaW5zdGFuY2VvZiBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb24pIHsKKwkJCWxh
bWJkYUV4cHJlc3Npb24uc2V0Qm9keShjb252ZXJ0KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LkV4cHJlc3Npb24pIGxhbWJkYS5ib2R5KSk7CisJCX0gZWxzZSB7CisJCQls
YW1iZGFFeHByZXNzaW9uLnNldEJvZHkoY29udmVydCgob3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5CbG9jaykgbGFtYmRhLmJvZHkpKTsKKwkJfQorCQlsYW1iZGFFeHByZXNz
aW9uLnNldFNvdXJjZVJhbmdlKHNvdXJjZVN0YXJ0LCBsYW1iZGEuc291cmNlRW5kIC0gc291cmNl
U3RhcnQgKyAxKTsKKwkJbGFtYmRhRXhwcmVzc2lvbi5zZXRQYXJlbnRoZXNlcyhsYW1iZGEuaGFz
UGFyZW50aGVzZXMpOworCQlyZXR1cm4gbGFtYmRhRXhwcmVzc2lvbjsKKwl9CisKIAlwdWJsaWMg
TWFya2VyQW5ub3RhdGlvbiBjb252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuTWFya2VyQW5ub3RhdGlvbiBhbm5vdGF0aW9uKSB7CiAJCWZpbmFsIE1hcmtlckFubm90
YXRpb24gbWFya2VyQW5ub3RhdGlvbiA9IG5ldyBNYXJrZXJBbm5vdGF0aW9uKHRoaXMuYXN0KTsK
IAkJc2V0VHlwZU5hbWVGb3JBbm5vdGF0aW9uKGFubm90YXRpb24sIG1hcmtlckFubm90YXRpb24p
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9BU1RNYXRjaGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0FTVE1hdGNoZXIuamF2YQppbmRleCAwNmJhMjNmLi5hMDlhZTM0
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0FTVE1hdGNoZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE1hdGNoZXIuamF2YQpAQCAtOTU3LDYgKzk1NywzMCBA
QAogCSAqIG90aGVyIG9iamVjdCBpcyBhIG5vZGUgb2YgdGhlIHNhbWUgdHlwZSB3aXRoIHN0cnVj
dHVyYWxseSBpc29tb3JwaGljCiAJICogY2hpbGQgc3VidHJlZXMuIFN1YmNsYXNzZXMgbWF5IG92
ZXJyaWRlIHRoaXMgbWV0aG9kIGFzIG5lZWRlZC4KIAkgKiA8L3A+CisJICogQHBhcmFtIG5vZGUg
dGhlIG5vZGUKKwkgKiBAcGFyYW0gb3RoZXIgdGhlIG90aGVyIG9iamVjdCwgb3IgPGNvZGU+bnVs
bDwvY29kZT4KKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSBzdWJ0cmVlIG1h
dGNoZXMsIG9yCisJICogICA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhleSBkbyBub3QgbWF0Y2gg
b3IgdGhlIG90aGVyIG9iamVjdCBoYXMgYQorCSAqICAgZGlmZmVyZW50IG5vZGUgdHlwZSBvciBp
cyA8Y29kZT5udWxsPC9jb2RlPgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgYm9vbGVh
biBtYXRjaChMYW1iZGFFeHByZXNzaW9uIG5vZGUsIE9iamVjdCBvdGhlcikgeworCQlpZiAoIShv
dGhlciBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJ
CX0KKwkJTGFtYmRhRXhwcmVzc2lvbiBvID0gKExhbWJkYUV4cHJlc3Npb24pIG90aGVyOworCQly
ZXR1cm4JKG5vZGUuaGFzUGFyZW50aGVzZXMoKSA9PSBvLmhhc1BhcmVudGhlc2VzKCkpCisJCQkJ
JiYgc2FmZVN1YnRyZWVMaXN0TWF0Y2gobm9kZS5wYXJhbWV0ZXJzKCksIG8ucGFyYW1ldGVycygp
KQorCQkJCSYmIHNhZmVTdWJ0cmVlTWF0Y2gobm9kZS5nZXRCb2R5KCksIG8uZ2V0Qm9keSgpKTsK
Kwl9CisKKwkvKioKKwkgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdpdmVuIG5vZGUgYW5kIHRoZSBv
dGhlciBvYmplY3QgbWF0Y2guCisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRp
b24gcHJvdmlkZWQgYnkgdGhpcyBjbGFzcyB0ZXN0cyB3aGV0aGVyIHRoZQorCSAqIG90aGVyIG9i
amVjdCBpcyBhIG5vZGUgb2YgdGhlIHNhbWUgdHlwZSB3aXRoIHN0cnVjdHVyYWxseSBpc29tb3Jw
aGljCisJICogY2hpbGQgc3VidHJlZXMuIFN1YmNsYXNzZXMgbWF5IG92ZXJyaWRlIHRoaXMgbWV0
aG9kIGFzIG5lZWRlZC4KKwkgKiA8L3A+CiAJICoKIAkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZQog
CSAqIEBwYXJhbSBvdGhlciB0aGUgb3RoZXIgb2JqZWN0LCBvciA8Y29kZT5udWxsPC9jb2RlPgpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQppbmRleCA3YjgwMzkxLi5mN2RjOTBjIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0
L2NvcmUvZG9tL0FTVE5vZGUuamF2YQpAQCAtODQzLDYgKzg0MywxNCBAQAogCXB1YmxpYyBzdGF0
aWMgZmluYWwgaW50IEVYVFJBX0RJTUVOU0lPTiA9IDg1OwogCiAJLyoqCisJICogTm9kZSB0eXBl
IGNvbnN0YW50IGluZGljYXRpbmcgYSBub2RlIG9mIHR5cGUKKwkgKiA8Y29kZT5MYW1iZGFFeHBy
ZXNzaW9uPC9jb2RlPi4KKwkgKiBAc2VlIExhbWJkYUV4cHJlc3Npb24KKwkgKiBAc2luY2UgMy45
CisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTEFNQkRBX0VYUFJFU1NJT04gPSA4NjsK
KworCS8qKgogCSAqIFJldHVybnMgdGhlIG5vZGUgY2xhc3MgZm9yIHRoZSBjb3JyZXNwb25kaW5n
IG5vZGUgdHlwZS4KIAkgKgogCSAqIEBwYXJhbSBub2RlVHlwZSBBU1Qgbm9kZSB0eXBlCkBAIC05
MzIsNiArOTQwLDggQEAKIAkJCQlyZXR1cm4gSmF2YWRvYy5jbGFzczsKIAkJCWNhc2UgTEFCRUxF
RF9TVEFURU1FTlQgOgogCQkJCXJldHVybiBMYWJlbGVkU3RhdGVtZW50LmNsYXNzOworCQkJY2Fz
ZSBMQU1CREFfRVhQUkVTU0lPTiA6CisJCQkJcmV0dXJuIExhbWJkYUV4cHJlc3Npb24uY2xhc3M7
CiAJCQljYXNlIExJTkVfQ09NTUVOVCA6CiAJCQkJcmV0dXJuIExpbmVDb21tZW50LmNsYXNzOwog
CQkJY2FzZSBNQVJLRVJfQU5OT1RBVElPTiA6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5q
YXZhCmluZGV4IGIyYzA4MzQuLjNkYTcxMTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRvci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUVmlzaXRv
ci5qYXZhCkBAIC03MDYsNiArNzA2LDIzIEBACiAJICogQHJldHVybiA8Y29kZT50cnVlPC9jb2Rl
PiBpZiB0aGUgY2hpbGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZCBiZQogCSAqIHZpc2l0ZWQsIGFu
ZCA8Y29kZT5mYWxzZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQK
IAkgKiBiZSBza2lwcGVkCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIHZp
c2l0KExhbWJkYUV4cHJlc3Npb24gbm9kZSkgeworCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwkvKioK
KwkgKiBWaXNpdHMgdGhlIGdpdmVuIHR5cGUtc3BlY2lmaWMgQVNUIG5vZGUuCisJICogPHA+CisJ
ICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gZG9lcyBub3RoaW5nIGFuZCByZXR1cm4gdHJ1
ZS4KKwkgKiBTdWJjbGFzc2VzIG1heSByZWltcGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBA
cGFyYW0gbm9kZSB0aGUgbm9kZSB0byB2aXNpdAorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSBzaG91bGQgYmUKKwkgKiB2aXNpdGVkLCBh
bmQgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxk
CisJICogYmUgc2tpcHBlZAogCSAqLwogCXB1YmxpYyBib29sZWFuIHZpc2l0KElmU3RhdGVtZW50
IG5vZGUpIHsKIAkJcmV0dXJuIHRydWU7CkBAIC0xOTkxLDYgKzIwMDgsMTkgQEAKIAkgKiA8L3A+
CiAJICoKIAkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZSB0byB2aXNpdAorCSAqIEBzaW5jZSAzLjkK
KwkgKi8KKwlwdWJsaWMgdm9pZCBlbmRWaXNpdChMYW1iZGFFeHByZXNzaW9uIG5vZGUpIHsKKwkJ
Ly8gZGVmYXVsdCBpbXBsZW1lbnRhdGlvbjogZG8gbm90aGluZworCX0KKworCS8qKgorCSAqIEVu
ZCBvZiB2aXNpdCB0aGUgZ2l2ZW4gdHlwZS1zcGVjaWZpYyBBU1Qgbm9kZS4KKwkgKiA8cD4KKwkg
KiBUaGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBkb2VzIG5vdGhpbmcuIFN1YmNsYXNzZXMgbWF5
IHJlaW1wbGVtZW50LgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBub2RlIHRoZSBub2RlIHRv
IHZpc2l0CiAJICovCiAJcHVibGljIHZvaWQgZW5kVmlzaXQoSWZTdGF0ZW1lbnQgbm9kZSkgewog
CQkvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uOiBkbyBub3RoaW5nCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0JpbmRpbmdSZXNv
bHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9CaW5kaW5nUmVzb2x2ZXIuamF2YQppbmRleCBkMjJjYjZiLi5mNGE0YzYzIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0Jp
bmRpbmdSZXNvbHZlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vQmluZGluZ1Jlc29sdmVyLmphdmEKQEAgLTEsMTAgKzEsMTQgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRo
aXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBk
ZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBp
cyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICog
b25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBv
ZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9u
IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KQEAgLTU3Nyw2ICs1ODEsMjcgQEAKIAl9CiAKIAkvKioKKwkgKiBSZXNvbHZlcyB0aGUgZ2l2
ZW4gTGFtYmRhIEV4cHJlc3Npb24gYW5kIHJldHVybnMgdGhlIGJpbmRpbmcgZm9yIGl0LgorCSAq
IDxwPgorCSAqIFRoZSBpbXBsZW1lbnRhdGlvbiBvZiA8Y29kZT5MYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVNZXRob2Q8L2NvZGU+CisJICogZm9yd2FyZHMgdG8gdGhpcyBtZXRob2QuIEhvdyB0aGUg
bWV0aG9kIHJlc29sdmVzIGlzIG9mdGVuIGEgZnVuY3Rpb24gb2YKKwkgKiB0aGUgY29udGV4dCBp
biB3aGljaCB0aGUgbWV0aG9kIGRlY2xhcmF0aW9uIG5vZGUgaXMgZW1iZWRkZWQgYXMgd2VsbCBh
cworCSAqIHRoZSBtZXRob2QgZGVjbGFyYXRpb24gc3VidHJlZSBpdHNlbGYuCisJICogPC9wPgor
CSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIG9mIHRoaXMgbWV0aG9kIHJl
dHVybnMgPGNvZGU+bnVsbDwvY29kZT4uCisJICogU3ViY2xhc3NlcyBtYXkgcmUtaW1wbGVtZW50
LgorCSAqIDwvcD4KKwkgKgorCSAqIEBwYXJhbSBsYW1iZGEgTGFtYmRhRXhwcmVzc2lvbiBvZiBp
bnRlcmVzdAorCSAqIEByZXR1cm4gdGhlIGJpbmRpbmcgZm9yIHRoZSBnaXZlbiBsYW1iZGEgZXhw
cmVzc2lvbiwgb3IKKwkgKiAgICA8Y29kZT5udWxsPC9jb2RlPiBpZiBubyBiaW5kaW5nIGlzIGF2
YWlsYWJsZQorCSAqLworCUlNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2QoTGFtYmRhRXhwcmVz
c2lvbiBsYW1iZGEpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCisJLyoqCiAJICogUmVzb2x2ZXMg
dGhlIGdpdmVuIG1ldGhvZCBpbnZvY2F0aW9uIGFuZCByZXR1cm5zIHRoZSBiaW5kaW5nIGZvciBp
dC4KIAkgKiA8cD4KIAkgKiBUaGUgaW1wbGVtZW50YXRpb24gb2YgPGNvZGU+TWV0aG9kSW52b2Nh
dGlvbi5yZXNvbHZlTWV0aG9kQmluZGluZzwvY29kZT4KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vRGVmYXVsdEJpbmRpbmdSZXNv
bHZlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKaW5kZXggMDU1Y2Q4NS4uNjljMzkzZCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9EZWZhdWx0QmluZGluZ1Jlc29sdmVyLmph
dmEKQEAgLTg5NCw2ICs4OTQsMjYgQEAKIAkvKgogCSAqIE1ldGhvZCBkZWNsYXJlZCBvbiBCaW5k
aW5nUmVzb2x2ZXIuCiAJICovCisJc3luY2hyb25pemVkIElNZXRob2RCaW5kaW5nIHJlc29sdmVN
ZXRob2QoTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEpIHsKKwkJT2JqZWN0IG9sZE5vZGUgPSB0aGlz
Lm5ld0FzdFRvT2xkQXN0LmdldChsYW1iZGEpOworCQlpZiAob2xkTm9kZSBpbnN0YW5jZW9mIG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbikgewor
CQkJb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9u
IGxhbWJkYUV4cHJlc3Npb24gPSAob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5MYW1iZGFFeHByZXNzaW9uKSBvbGROb2RlOworCQkJSU1ldGhvZEJpbmRpbmcgbWV0aG9kQmlu
ZGluZyA9IGdldE1ldGhvZEJpbmRpbmcobGFtYmRhRXhwcmVzc2lvbi5iaW5kaW5nKTsKKwkJCWlm
IChtZXRob2RCaW5kaW5nID09IG51bGwpIHsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJCXRo
aXMuYmluZGluZ3NUb0FzdE5vZGVzLnB1dChtZXRob2RCaW5kaW5nLCBsYW1iZGEpOworCQkJU3Ry
aW5nIGtleSA9IG1ldGhvZEJpbmRpbmcuZ2V0S2V5KCk7CisJCQlpZiAoa2V5ICE9IG51bGwpIHsK
KwkJCQl0aGlzLmJpbmRpbmdUYWJsZXMuYmluZGluZ0tleXNUb0JpbmRpbmdzLnB1dChrZXksIG1l
dGhvZEJpbmRpbmcpOworCQkJfQorCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CisJCX0KKwkJcmV0
dXJuIG51bGw7CisJfQorLyoKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQmluZGluZ1Jlc29sdmVy
LgorCSAqLwogCXN5bmNocm9uaXplZCBJTWV0aG9kQmluZGluZyByZXNvbHZlTWV0aG9kKE1ldGhv
ZEludm9jYXRpb24gbWV0aG9kKSB7CiAJCU9iamVjdCBvbGROb2RlID0gdGhpcy5uZXdBc3RUb09s
ZEFzdC5nZXQobWV0aG9kKTsKIAkJaWYgKG9sZE5vZGUgaW5zdGFuY2VvZiBNZXNzYWdlU2VuZCkg
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2RvbS9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YQppbmRleCAyMDAzZDlhLi42ZmQ3NmZh
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2Nv
cmUvZG9tL0V4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0V4cHJlc3Npb24uamF2YQpAQCAtMSw5ICsxLDEzIEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAog
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCkBAIC0zMCw2ICszNCw3IEBACiAgKiAgICB7
QGxpbmsgRmllbGRBY2Nlc3N9LAogICogICAge0BsaW5rIEluZml4RXhwcmVzc2lvbn0sCiAgKiAg
ICB7QGxpbmsgSW5zdGFuY2VvZkV4cHJlc3Npb259LAorICogICAge0BsaW5rIExhbWJkYUV4cHJl
c3Npb259LAogICogICAge0BsaW5rIE1ldGhvZEludm9jYXRpb259LAogICogICAge0BsaW5rIE5h
bWV9LAogICogICAge0BsaW5rIE51bGxMaXRlcmFsfSwKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9M
YW1iZGFFeHByZXNzaW9uLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4u
Nzg3MWFiNQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0wLDAgKzEsMzE5
IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAt
IGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbTsKKworaW1wb3J0IGphdmEudXRpbC5B
cnJheUxpc3Q7CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKKy8qKgorICogTGFtYmRhIGV4cHJl
c3Npb24gQVNUIG5vZGUgdHlwZS4KKyAqIDxwcmU+CisgKiBMYW1iZGFFeHByZXNzaW9uOgorICog
ICAgSWRlbnRpZmllciA8Yj4tPjwvYj4gQm9keQorICogICAgPGI+KDwvYj4gWyBJZGVudGlmaWVy
IHsgPGI+LDwvYj4gSWRlbnRpZmllciB9IF0gPGI+KTwvYj4gPGI+LT48L2I+IEJvZHkKKyAqICAg
IDxiPig8L2I+IFsgRm9ybWFsUGFyYW1ldGVyIHsgPGI+LDwvYj4gRm9ybWFsUGFyYW1ldGVyIH0g
XSA8Yj4pPC9iPiA8Yj4tPjwvYj4gQm9keQorICogPC9wcmU+CisgKiAKKyAqPHA+IAorICogRmly
c3QgdHdvIGZvcm1zIHVzZSB7QGxpbmsgU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbn0gd2hpbGUg
dGhlIHRoaXJkIGZvcm0KKyAqIHVzZXMge0BsaW5rIFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVu
dH0uPC9wPgorICo8cD5Cb2R5IGNhbiBiZSBlaXRoZXIgYSB7QGxpbmsgQmxvY2t9IG9yIGFuIHtA
bGluayBFeHByZXNzaW9ufS48L3A+CisgKgorICogQHNpbmNlIDMuOSAKKyAqIEBub2luc3RhbnRp
YXRlIFRoaXMgY2xhc3MgaXMgbm90IGludGVuZGVkIHRvIGJlIGluc3RhbnRpYXRlZCBieSBjbGll
bnRzIAorICovCisKK3B1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVz
c2lvbiB7CisKKwkvKioKKwkgKiBUaGUgInBhcmVudGhlc2VzIiBzdHJ1Y3R1cmFsIHByb3BlcnR5
IG9mIHRoaXMgbm9kZSB0eXBlIChjaGlsZCB0eXBlOiB7QGxpbmsgQm9vbGVhbn0pLiAKKwkgKi8K
KwlwdWJsaWMgc3RhdGljIGZpbmFsIFNpbXBsZVByb3BlcnR5RGVzY3JpcHRvciBQQVJFTlRIRVNF
U19QUk9QRVJUWSA9CisJCW5ldyBTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IoTGFtYmRhRXhwcmVz
c2lvbi5jbGFzcywgInBhcmVudGhlc2VzIiwgYm9vbGVhbi5jbGFzcywgTUFOREFUT1JZKTsgLy8k
Tk9OLU5MUy0xJAorCisJLyoqCisJICogVGhlICJwYXJhbWV0ZXJzIiBzdHJ1Y3R1cmFsIHByb3Bl
cnR5IG9mIHRoaXMgbm9kZSB0eXBlIChjaGlsZCB0eXBlOiB7QGxpbmsgVmFyaWFibGVEZWNsYXJh
dGlvbn0pLgorCSAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hpbGRMaXN0UHJvcGVydHlEZXNj
cmlwdG9yIFBBUkFNRVRFUlNfUFJPUEVSVFkgPQorCQluZXcgQ2hpbGRMaXN0UHJvcGVydHlEZXNj
cmlwdG9yKExhbWJkYUV4cHJlc3Npb24uY2xhc3MsICJwYXJhbWV0ZXJzIiwgVmFyaWFibGVEZWNs
YXJhdGlvbi5jbGFzcywgTk9fQ1lDTEVfUklTSyk7IC8vJE5PTi1OTFMtMSQKKwkKKwkvKioKKwkg
KiBUaGUgImJvZHkiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGNoaWxk
IHR5cGU6IHtAbGluayBBU1ROb2RlfSkgOiBjYW4KKwkgKiAgYmUgZWl0aGVyIGEge0BsaW5rIEJs
b2NrfSBvciBhbiB7QGxpbmsgRXhwcmVzc2lvbn0uCisJICovCisJcHVibGljIHN0YXRpYyBmaW5h
bCBDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBCT0RZX1BST1BFUlRZID0KKwkJbmV3IENoaWxkUHJv
cGVydHlEZXNjcmlwdG9yKExhbWJkYUV4cHJlc3Npb24uY2xhc3MsICJib2R5IiwgQVNUTm9kZS5j
bGFzcywgTUFOREFUT1JZLCBDWUNMRV9SSVNLKTsgLy8kTk9OLU5MUy0xJAorCisJLyoqCisJICog
QSBsaXN0IG9mIHByb3BlcnR5IGRlc2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5r
IFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KSwKKwkgKiBvciBudWxsIGlmIHVuaW5pdGlh
bGl6ZWQuCisJICovCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgTGlzdCBQUk9QRVJUWV9ERVNDUklQ
VE9SU184XzA7CisJCisJc3RhdGljIHsKKwkJTGlzdCBwcm9wZXJ0eUxpc3QgPSBuZXcgQXJyYXlM
aXN0KDQpOworCQljcmVhdGVQcm9wZXJ0eUxpc3QoTGFtYmRhRXhwcmVzc2lvbi5jbGFzcywgcHJv
cGVydHlMaXN0KTsKKwkJYWRkUHJvcGVydHkoUEFSRU5USEVTRVNfUFJPUEVSVFksIHByb3BlcnR5
TGlzdCk7CisJCWFkZFByb3BlcnR5KFBBUkFNRVRFUlNfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7
CisJCWFkZFByb3BlcnR5KEJPRFlfUFJPUEVSVFksIHByb3BlcnR5TGlzdCk7CisJCVBST1BFUlRZ
X0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxpc3QocHJvcGVydHlMaXN0KTsKKwl9CisJ
CisJLyoqCisJICogUmV0dXJucyBhIGxpc3Qgb2Ygc3RydWN0dXJhbCBwcm9wZXJ0eSBkZXNjcmlw
dG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuCisJICogQ2xpZW50cyBtdXN0IG5vdCBtb2RpZnkgdGhl
IHJlc3VsdC4KKwkgKgorCSAqIEBwYXJhbSBhcGlMZXZlbCB0aGUgQVBJIGxldmVsOyBvbmUgb2Yg
dGhlIEFTVC5KTFMqIGNvbnN0YW50cworCSAqIEByZXR1cm4gYSBsaXN0IG9mIHByb3BlcnR5IGRl
c2NyaXB0b3JzIChlbGVtZW50IHR5cGU6CisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURl
c2NyaXB0b3J9KQorCSAqLworCXB1YmxpYyBzdGF0aWMgTGlzdCBwcm9wZXJ0eURlc2NyaXB0b3Jz
KGludCBhcGlMZXZlbCkgeworCQlyZXR1cm4gUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOworCX0K
KworCS8qKgorCSAqIEluZGljYXRlcyB0aGUgcHJlc2VuY2Ugb3IgYWJzZW5jZSBvZiBwYXJlbnRo
ZXNlcy4KKwkgKiBkZWZhdWx0cyB0byB0cnVlLiAKKwkgKi8KKwlwcml2YXRlIGJvb2xlYW4gaGFz
UGFyZW50aGVzZXMgPSB0cnVlOworCisJLyoqCisJICogVGhlIHBhcmFtZXRlciBkZWNsYXJhdGlv
bnMKKwkgKiAoZWxlbWVudCB0eXBlOiB7QGxpbmsgVmFyaWFibGVEZWNsYXJhdGlvbn0pLgorCSAq
IERlZmF1bHRzIHRvIGFuIGVtcHR5IGxpc3QuCisJICovCisJcHJpdmF0ZSBBU1ROb2RlLk5vZGVM
aXN0IHBhcmFtZXRlcnMgPQorCQluZXcgQVNUTm9kZS5Ob2RlTGlzdChQQVJBTUVURVJTX1BST1BF
UlRZKTsKKworCS8qKgorCSAqIFRoZSBtZXRob2QgYm9keS4KKwkgKiBUaGUgbWV0aG9kIGJvZHk7
IGxhemlseSBpbml0aWFsaXplZCwgZGVmYXVsdHMgdG8gYW4gZW1wdHkgQmxvY2suCisJICovCisJ
cHJpdmF0ZSBBU1ROb2RlIGJvZHkgPSBudWxsOworCisJLyoqCisJICogQ3JlYXRlcyBhIG5ldyBB
U1Qgbm9kZSBmb3IgYSBMYW1iZGFFeHByZXNzaW9uIGRlY2xhcmF0aW9uIG93bmVkCisJICogYnkg
dGhlIGdpdmVuIEFTVC4KKwkgKiA8cD4KKwkgKiBOLkIuIFRoaXMgY29uc3RydWN0b3IgaXMgcGFj
a2FnZS1wcml2YXRlOyBhbGwgc3ViY2xhc3NlcyBtdXN0IGJlCisJICogZGVjbGFyZWQgaW4gdGhl
IHNhbWUgcGFja2FnZTsgY2xpZW50cyBhcmUgdW5hYmxlIHRvIGRlY2xhcmUKKwkgKiBhZGRpdGlv
bmFsIHN1YmNsYXNzZXMuCisJICogPC9wPgorCSAqCisJICogQHBhcmFtIGFzdCB0aGUgQVNUIHRo
YXQgaXMgdG8gb3duIHRoaXMgbm9kZQorCSAqLworCUxhbWJkYUV4cHJlc3Npb24oQVNUIGFzdCkg
eworCQlzdXBlcihhc3QpOworCQl1bnN1cHBvcnRlZEluMl8zXzQoKTsKKwl9CisKKwkvKiAob21p
dCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9k
ZS4KKwkgKi8KKwlMaXN0IGludGVybmFsU3RydWN0dXJhbFByb3BlcnRpZXNGb3JUeXBlKGludCBh
cGlMZXZlbCkgeworCQlyZXR1cm4gcHJvcGVydHlEZXNjcmlwdG9ycyhhcGlMZXZlbCk7CisJfQor
CisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVk
IG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgYm9vbGVhbiBpbnRlcm5hbEdldFNldEJvb2xlYW5Q
cm9wZXJ0eShTaW1wbGVQcm9wZXJ0eURlc2NyaXB0b3IgcHJvcGVydHksIGJvb2xlYW4gZ2V0LCBi
b29sZWFuIHZhbHVlKSB7CisJCWlmIChwcm9wZXJ0eSA9PSBQQVJFTlRIRVNFU19QUk9QRVJUWSkg
eworCQkJaWYgKGdldCkgeworCQkJCXJldHVybiBoYXNQYXJlbnRoZXNlcygpOworCQkJfSBlbHNl
IHsKKwkJCQlzZXRQYXJlbnRoZXNlcyh2YWx1ZSk7CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQor
CQl9CisJCS8vIGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8gZmxhZyB0aGUgZXJyb3IK
KwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0U2V0Qm9vbGVhblByb3BlcnR5KHByb3BlcnR5LCBn
ZXQsIHZhbHVlKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkg
KiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBMaXN0IGludGVybmFs
R2V0Q2hpbGRMaXN0UHJvcGVydHkoQ2hpbGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yIHByb3BlcnR5
KSB7CisJCWlmIChwcm9wZXJ0eSA9PSBQQVJBTUVURVJTX1BST1BFUlRZKSB7CisJCQlyZXR1cm4g
cGFyYW1ldGVycygpOworCQl9CisJCS8vIGFsbG93IGRlZmF1bHQgaW1wbGVtZW50YXRpb24gdG8g
ZmxhZyB0aGUgZXJyb3IKKwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0Q2hpbGRMaXN0UHJvcGVy
dHkocHJvcGVydHkpOworCX0KKwkKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkK
KwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlmaW5hbCBBU1ROb2RlIGlu
dGVybmFsR2V0U2V0Q2hpbGRQcm9wZXJ0eShDaGlsZFByb3BlcnR5RGVzY3JpcHRvciBwcm9wZXJ0
eSwgYm9vbGVhbiBnZXQsIEFTVE5vZGUgY2hpbGQpIHsKKwkJaWYgKHByb3BlcnR5ID09IEJPRFlf
UFJPUEVSVFkpIHsKKwkJCWlmIChnZXQpIHsKKwkJCQlyZXR1cm4gZ2V0Qm9keSgpOworCQkJfSBl
bHNlIHsKKwkJCQlzZXRCb2R5KCBjaGlsZCk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0K
KwkJLy8gYWxsb3cgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiB0byBmbGFnIHRoZSBlcnJvcgorCQly
ZXR1cm4gc3VwZXIuaW50ZXJuYWxHZXRTZXRDaGlsZFByb3BlcnR5KHByb3BlcnR5LCBnZXQsIGNo
aWxkKTsKKwl9CisKKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRo
b2QgZGVjbGFyZWQgb24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgZ2V0Tm9kZVR5cGUwKCkgeworCQly
ZXR1cm4gTEFNQkRBX0VYUFJFU1NJT047CisJfQorCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhp
cyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCisJICovCisJQVNUTm9k
ZSBjbG9uZTAoQVNUIHRhcmdldCkgeworCQlMYW1iZGFFeHByZXNzaW9uIHJlc3VsdCA9IG5ldyBM
YW1iZGFFeHByZXNzaW9uKHRhcmdldCk7CisJCXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFy
dFBvc2l0aW9uKCksIGdldExlbmd0aCgpKTsKKwkJcmVzdWx0LnNldFBhcmVudGhlc2VzKGhhc1Bh
cmVudGhlc2VzKCkpOworCQlyZXN1bHQucGFyYW1ldGVycygpLmFkZEFsbChBU1ROb2RlLmNvcHlT
dWJ0cmVlcyh0YXJnZXQsIHBhcmFtZXRlcnMoKSkpOworCQlyZXN1bHQuc2V0Qm9keShBU1ROb2Rl
LmNvcHlTdWJ0cmVlKHRhcmdldCwgZ2V0Qm9keSgpKSk7CisJCXJldHVybiByZXN1bHQ7CisJfQor
CisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpCisJICogTWV0aG9kIGRlY2xhcmVk
IG9uIEFTVE5vZGUuCisJICovCisJZmluYWwgYm9vbGVhbiBzdWJ0cmVlTWF0Y2gwKEFTVE1hdGNo
ZXIgbWF0Y2hlciwgT2JqZWN0IG90aGVyKSB7CisJCS8vIGRpc3BhdGNoIHRvIGNvcnJlY3Qgb3Zl
cmxvYWRlZCBtYXRjaCBtZXRob2QKKwkJcmV0dXJuIG1hdGNoZXIubWF0Y2godGhpcywgb3RoZXIp
OworCX0KKworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBk
ZWNsYXJlZCBvbiBBU1ROb2RlLgorCSAqLworCXZvaWQgYWNjZXB0MChBU1RWaXNpdG9yIHZpc2l0
b3IpIHsKKwkJYm9vbGVhbiB2aXNpdENoaWxkcmVuID0gdmlzaXRvci52aXNpdCh0aGlzKTsKKwkJ
aWYgKHZpc2l0Q2hpbGRyZW4pIHsKKwkJCS8vIHZpc2l0IGNoaWxkcmVuIGluIG5vcm1hbCBsZWZ0
IHRvIHJpZ2h0IHJlYWRpbmcgb3JkZXIKKwkJCWFjY2VwdENoaWxkcmVuKHZpc2l0b3IsIHRoaXMu
cGFyYW1ldGVycyk7CisJCQlhY2NlcHRDaGlsZCh2aXNpdG9yLCBnZXRCb2R5KCkpOworCQl9CisJ
CXZpc2l0b3IuZW5kVmlzaXQodGhpcyk7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVy
IHRoaXMgbGFtYmRhIGV4cHJlc3Npb24gaGFzIHBhcmVudGhlc2VzIGFyb3VuZCBwYXJhbWV0ZXJz
LgorCSAqIElmIHRoZSBmaWVsZCBoYXNQYXJlbnRoZXNlcyBpcyBmYWxzZSwgYnV0IHRoZSBudW1i
ZXIgb2YgcGFyYW1ldGVycyBpcworCSAqIG5vdCBvbmUgYW5kIHRoZSBwYXJhbWV0ZXIgaXMgbm90
IHtAbGluayBWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnR9IHRoZW4KKwkgKiBpdHMgaWxsZWdh
bCBmb3IgdGhlIGxhbWJkYSBleHByZXNzaW9uIG5vdCB0byBoYXZlIHBhcmVudGhlc2VzIGFuZCBo
ZW5jZQorCSAqIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0cnVlLgorCSAqCisJICogQHJldHVybiA8
Y29kZT50cnVlPC9jb2RlPiBpZiB0aGlzIGxhbWJkYSBleHByZXNzaW9uIGhhcyBwYXJlbnRoZXNl
cyBhbiwKKwkgKiAgICBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIGl0IGRvZXMgbm90IGhhdmUg
cGFyZW50aGVzZXMgbGVnYWxseQorCSAqLworCXB1YmxpYyBib29sZWFuIGhhc1BhcmVudGhlc2Vz
KCkgeworCQlib29sZWFuIHJlc3VsdCA9IHRydWU7CisJCWlmIChwYXJhbWV0ZXJzKCkuc2l6ZSgp
ID09IDEgJiYgcGFyYW1ldGVycygpLmdldCgwKSBpbnN0YW5jZW9mIFZhcmlhYmxlRGVjbGFyYXRp
b25GcmFnbWVudCkgeworCQkJcmVzdWx0ID0gdGhpcy5oYXNQYXJlbnRoZXNlczsKKwkJfQorCQly
ZXR1cm4gcmVzdWx0OworCX0KKworCS8qKgorCSAqIFNldHMgd2hldGhlciB0aGlzIGhhcyBwYXJl
bnRoZXNlcyBvciBub3QuCisJICoKKwkgKiBAcGFyYW0gaGFzUGFyZW50aGVzZXMgPGNvZGU+dHJ1
ZTwvY29kZT4gaWYgdGhpcyBsYW1iZGEgZXhwcmVzc2lvbiBoYXMgcGFyZW50aGVzZXMgYXJvdW5k
IHBhcmFtZXRlcnMKKwkgKiAgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndpc2UKKwkgKi8K
KwlwdWJsaWMgdm9pZCBzZXRQYXJlbnRoZXNlcyhib29sZWFuIGhhc1BhcmVudGhlc2VzKSB7CisJ
CXByZVZhbHVlQ2hhbmdlKFBBUkVOVEhFU0VTX1BST1BFUlRZKTsKKwkJdGhpcy5oYXNQYXJlbnRo
ZXNlcyA9IGhhc1BhcmVudGhlc2VzOworCQlwb3N0VmFsdWVDaGFuZ2UoUEFSRU5USEVTRVNfUFJP
UEVSVFkpOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGxpdmUgb3JkZXJlZCBsaXN0IG9m
IGZvcm1hbCBwYXJhbWV0ZXJzIG9mIHRoaXMgbGFtYmRhIGV4cHJlc3Npb24uCisJICoKKwkgKiBA
cmV0dXJuIHRoZSBsaXZlIGxpc3Qgb2YgZm9ybWFsIHBhcmFtZXRlcnMgb2YgdGhpcyBsYW1iZGEg
ZXhwcmVzc2lvbgorCSAqICAgIChlbGVtZW50IHR5cGU6IHtAbGluayBWYXJpYWJsZURlY2xhcmF0
aW9ufSAKKwkgKi8KKwlwdWJsaWMgTGlzdCBwYXJhbWV0ZXJzKCkgeworCQlyZXR1cm4gdGhpcy5w
YXJhbWV0ZXJzOworCX0KKworCS8qKgorCSAqIFJldHVybnMgdGhlIGJvZHkgb2YgdGhpcyBsYW1i
ZGEgZXhwcmVzc2lvbi4KKwkgKiA8cD4KKwkgKiBkZWZhdWx0cyB0byBhbiBlbXB0eSBibG9jayBp
ZiBib2R5IGlzIG51bGwuCisJICogPC9wPgorCSAqIEByZXR1cm4gdGhlIGxhbWJkYSBleHByZXNz
aW9uIGJvZHkgd2hpY2ggY2FuIGJlIGVpdGhlciBhIHtAbGluayBCbG9ja30gb3IgYSB7QGxpbmsg
RXhwcmVzc2lvbn0KKwkgKi8KKwlwdWJsaWMgQVNUTm9kZSBnZXRCb2R5KCkgeworCQlpZiAodGhp
cy5ib2R5ID09IG51bGwpIHsKKwkJCXRoaXMuYm9keSA9IG5ldyBCbG9jayh0aGlzLmFzdCk7CisJ
CX0KKwkJcmV0dXJuIHRoaXMuYm9keTsKKwl9CisKKwkvKioKKwkgKiBTZXRzIHRoZSBib2R5IG9m
IHRoaXMgbGFtYmRhIGV4cHJlc3Npb24uCisJICoKKwkgKiBAcGFyYW0gYm9keSBhIGJsb2NrIG5v
ZGUgb3IgYW4gZXhwcmVzc2lvbiBub2RlCisJICogQGV4Y2VwdGlvbiBJbGxlZ2FsQXJndW1lbnRF
eGNlcHRpb24gaWY6CisJICogPHVsPgorCSAqIDxsaT50aGUgbm9kZSBiZWxvbmdzIHRvIGEgZGlm
ZmVyZW50IEFTVDwvbGk+CisJICogPGxpPnRoZSBub2RlIGFscmVhZHkgaGFzIGEgcGFyZW50PC9s
aT4KKwkgKiA8bGk+YSBjeWNsZSBpbiB3b3VsZCBiZSBjcmVhdGVkPC9saT4KKwkgKiA8bGk+IGJv
ZHkgaXMgbmVpdGhlciBhbiB7QGxpbmsgRXhwcmVzc2lvbn0gbm9yIGEge0BsaW5rIEJsb2NrfSA8
L2xpPgorCSAqIDwvdWw+CisJICovCisJcHVibGljIHZvaWQgc2V0Qm9keShBU1ROb2RlIGJvZHkp
IHsKKwkJaWYgKCEoYm9keSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gfHwgYm9keSBpbnN0YW5jZW9m
IEJsb2NrKSkgeworCQkJdGhyb3cgbmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOworCQl9
CisJCUFTVE5vZGUgb2xkQ2hpbGQgPSB0aGlzLmJvZHk7CisJCXByZVJlcGxhY2VDaGlsZChvbGRD
aGlsZCwgYm9keSwgQk9EWV9QUk9QRVJUWSk7CisJCXRoaXMuYm9keSA9IGJvZHk7CisJCXBvc3RS
ZXBsYWNlQ2hpbGQob2xkQ2hpbGQsIGJvZHksIEJPRFlfUFJPUEVSVFkpOworCX0KKworCS8qKgor
CSAqIFJlc29sdmVzIGFuZCByZXR1cm5zIHRoZSBiaW5kaW5nIGZvciB0aGUgbGFtYmRhIGV4cHJl
c3Npb24KKwkgKiA8cD4KKwkgKiBOb3RlIHRoYXQgYmluZGluZ3MgYXJlIGdlbmVyYWxseSB1bmF2
YWlsYWJsZSB1bmxlc3MgcmVxdWVzdGVkIHdoZW4gdGhlCisJICogQVNUIGlzIGJlaW5nIGJ1aWx0
LgorCSAqIDwvcD4KKwkgKgorCSAqIEByZXR1cm4gdGhlIGJpbmRpbmcsIG9yIDxjb2RlPm51bGw8
L2NvZGU+IGlmIHRoZSBiaW5kaW5nIGNhbm5vdCBiZQorCSAqICAgIHJlc29sdmVkCisJICovCisJ
cHVibGljIElNZXRob2RCaW5kaW5nIHJlc29sdmVNZXRob2RCaW5kaW5nKCkgeworCQlyZXR1cm4g
dGhpcy5hc3QuZ2V0QmluZGluZ1Jlc29sdmVyKCkucmVzb2x2ZU1ldGhvZCh0aGlzKTsKKwl9CisK
KwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKKwkgKiBNZXRob2QgZGVjbGFyZWQg
b24gQVNUTm9kZS4KKwkgKi8KKwlpbnQgbWVtU2l6ZSgpIHsKKwkJcmV0dXJuIDMgKiA0OworCX0K
KworCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQorCSAqIE1ldGhvZCBkZWNsYXJl
ZCBvbiBBU1ROb2RlLgorCSAqLworCWludCB0cmVlU2l6ZSgpIHsKKwkJcmV0dXJuCisJCQltZW1T
aXplKCkKKwkJCSsgKHRoaXMucGFyYW1ldGVycyA9PSBudWxsID8gMCA6IHRoaXMucGFyYW1ldGVy
cy5saXN0U2l6ZSgpKQorCQkJKyAodGhpcy5ib2R5ID09IG51bGwgPyAwIDogZ2V0Qm9keSgpLnRy
ZWVTaXplKCkpOworCX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
ZG9tL05haXZlQVNURmxhdHRlbmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRlbmVyLmphdmEKaW5k
ZXggMDkwNWQ2YS4uYWFhYTk2ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9t
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQpAQCAtMTcsMTAyICsxNyw3IEBACiBpbXBv
cnQgamF2YS51dGlsLkl0ZXJhdG9yOwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCi1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uQVNUTm9kZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUVmlzaXRv
cjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQWJzdHJhY3RUeXBlRGVjbGFyYXRp
b247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFubm90YXRhYmxlVHlwZTsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvblR5cGVEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvblR5cGVNZW1iZXJEZWNsYXJhdGlvbjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5vbnltb3VzQ2xhc3NEZWNsYXJhdGlvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXJyYXlBY2Nlc3M7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLkFycmF5Q3JlYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkFycmF5SW5pdGlhbGl6ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkFycmF5VHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQXNzZXJ0
U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Bc3NpZ25tZW50Owot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5CbG9jazsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uQmxvY2tDb21tZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5Cb2R5RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkJv
b2xlYW5MaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5CcmVha1N0YXRl
bWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ2FzdEV4cHJlc3Npb247Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkNhdGNoQ2xhdXNlOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5DaGFyYWN0ZXJMaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5DbGFzc0luc3RhbmNlQ3JlYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLkNvbXBpbGF0aW9uVW5pdDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uQ29uZGl0aW9uYWxFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5Db25zdHJ1Y3Rvckludm9jYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUu
ZG9tLkNvbnRpbnVlU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5F
eHRyYURpbWVuc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVW5pb25UeXBl
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Eb1N0YXRlbWVudDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRW1wdHlTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLkVuaGFuY2VkRm9yU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5FbnVtQ29uc3RhbnREZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uRW51bURlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5FeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5FeHBy
ZXNzaW9uU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5GaWVsZEFj
Y2VzczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRmllbGREZWNsYXJhdGlvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uRm9yU3RhdGVtZW50OwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JZlN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uSW1wb3J0RGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLkluZml4RXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20u
SW5pdGlhbGl6ZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkluc3RhbmNlb2ZF
eHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5KYXZhZG9jOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5MYWJlbGVkU3RhdGVtZW50OwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5MaW5lQ29tbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20uTWFya2VyQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uTWVtYmVyUmVmOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZW1iZXJW
YWx1ZVBhaXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZERlY2xhcmF0
aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2RJbnZvY2F0aW9uOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5NZXRob2RSZWY7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZFJlZlBhcmFtZXRlcjsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5kb20uTW9kaWZpZXI7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
Lk5hbWU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk5vcm1hbEFubm90YXRpb247
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk51bGxMaXRlcmFsOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5OdW1iZXJMaXRlcmFsOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5QYWNrYWdlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLlBhcmFtZXRlcml6ZWRUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmRvbS5QYXJlbnRoZXNpemVkRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uUG9zdGZpeEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LlByZWZpeEV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlByaW1p
dGl2ZVR5cGU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlF1YWxpZmllZE5hbWU7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlF1YWxpZmllZFR5cGU7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlJldHVyblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uU2ltcGxlTmFtZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uU2ltcGxlVHlwZTsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU2luZ2xl
TWVtYmVyQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU2luZ2xl
VmFyaWFibGVEZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3Rh
dGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdHJpbmdMaXRlcmFsOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TdXBlckNvbnN0cnVjdG9ySW52b2NhdGlv
bjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3VwZXJGaWVsZEFjY2VzczsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uU3VwZXJNZXRob2RJbnZvY2F0aW9uOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Td2l0Y2hDYXNlOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5Td2l0Y2hTdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuZG9tLlN5bmNocm9uaXplZFN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uVGFnRWxlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVGV4
dEVsZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRoaXNFeHByZXNzaW9u
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UaHJvd1N0YXRlbWVudDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHJ5U3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5UeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5U
eXBlRGVjbGFyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVEZWNs
YXJhdGlvblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZUxp
dGVyYWw7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlR5cGVQYXJhbWV0ZXI7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVjbGFyYXRpb25FeHByZXNz
aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9u
RnJhZ21lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVjbGFy
YXRpb25TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLldoaWxlU3Rh
dGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5XaWxkY2FyZFR5cGU7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLio7CiAKIC8qKgogICogSW50ZXJuYWwgQVNU
IHZpc2l0b3IgZm9yIHNlcmlhbGl6aW5nIGFuIEFTVCBpbiBhIHF1aWNrIGFuZCBkaXJ0eSBmYXNo
aW9uLgpAQCAtODMxLDYgKzczNiwyOCBAQAogCX0KIAogCS8qCisJICogQHNlZSBBU1RWaXNpdG9y
I3Zpc2l0KExhbWJkYUV4cHJlc3Npb24pCisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQoTGFt
YmRhRXhwcmVzc2lvbiBub2RlKSB7CisJCWJvb2xlYW4gaGFzUGFyZW50aGVzZXMgPSBub2RlLmhh
c1BhcmVudGhlc2VzKCk7CisJCWlmIChoYXNQYXJlbnRoZXNlcykKKwkJCXRoaXMuYnVmZmVyLmFw
cGVuZCgnKCcpOworCQlJdGVyYXRvciBpdCA9IG5vZGUucGFyYW1ldGVycygpLml0ZXJhdG9yKCk7
CisJCWJvb2xlYW4gaGFzTmV4dCA9IGl0Lmhhc05leHQoKTsKKwkJd2hpbGUgKGhhc05leHQpIHsK
KwkJCVZhcmlhYmxlRGVjbGFyYXRpb24gIHZhcmlhYmxlRGVjbGFyYXRpb24gPSAoVmFyaWFibGVE
ZWNsYXJhdGlvbikgaXQubmV4dCgpOworCQkJdmFyaWFibGVEZWNsYXJhdGlvbi5hY2NlcHQodGhp
cyk7CisJCQlpZiAoKGhhc05leHQgPSBpdC5oYXNOZXh0KCkpID09IHRydWUpCisJCQkJdGhpcy5i
dWZmZXIuYXBwZW5kKCcsJyk7CisJCX0KKwkJaWYgKGhhc1BhcmVudGhlc2VzKSAKKwkJCXRoaXMu
YnVmZmVyLmFwcGVuZCgnKScpOwkKKwkJdGhpcy5idWZmZXIuYXBwZW5kKCIgLT4gIik7IC8vJE5P
Ti1OTFMtMSQKKwkJbm9kZS5nZXRCb2R5KCkuYWNjZXB0KHRoaXMpOworCQlyZXR1cm4gZmFsc2U7
CisJfQorCisJLyoKIAkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQoSWZTdGF0ZW1lbnQpCiAJICov
CiAJcHVibGljIGJvb2xlYW4gdmlzaXQoSWZTdGF0ZW1lbnQgbm9kZSkgew==
</data>

          </attachment>
      

    </bug>

</bugzilla>