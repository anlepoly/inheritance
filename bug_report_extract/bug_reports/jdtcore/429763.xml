<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429763</bug_id>
          
          <creation_ts>2014-03-06 07:51:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Incompatible type specified for lambda expression&apos;s parameter</short_desc>
          <delta_ts>2014-03-06 22:48:25 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Dietrich">daniel.dietrich</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>manju656</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2372385</commentid>
    <comment_count>0</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 07:51:06 -0500</bug_when>
    <thetext>stumbled upon this one...

public class Main {

	public static void main(String[] args) {
		
		// does not compile
		final int i = new Test&lt;Integer&gt;().test((Byte b) -&gt; (int) b);
		
	}
	
	static class Test&lt;R&gt; {
		
		&lt;T&gt; R test(Function&lt;T,R&gt; f) {
			return null;
		}
		
	}
	
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372442</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 09:27:04 -0500</bug_when>
    <thetext>Thanks, will take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372444</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 09:33:57 -0500</bug_when>
    <thetext>Daniel, is this the full code ? 

I am getting three errors:


Description	Resource	Path	Location	Type
The method test(Function&lt;T,Integer&gt;) from the type X.Test&lt;Integer&gt; refers to the missing type Function	X.java	/P/src	line 6	Java Problem
The target type of this expression must be a functional interface	X.java	/P/src	line 6	Java Problem
Function cannot be resolved to a type	X.java	/P/src	line 12	Java Problem


javac compiles this code and that is a bug ?? Where is Function coming from ???

If I add the import, I still see a compile error with ECJ - Looking into it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372479</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 10:17:47 -0500</bug_when>
    <thetext>Inference fails. Stephan Thanks for taking a look.

Disabled tests released as 
org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest._test429763()

Daniel, it seems to compile fine if you elide the type of the lambda parameter,
This could be a workaround until resolution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372485</commentid>
    <comment_count>4</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 10:22:26 -0500</bug_when>
    <thetext>Yes, sorry, I ommitted the java8 imports (java.util.*)

Thanks for the workaround.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372499</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 10:35:41 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)

&gt; javac compiles this code and that is a bug ?? Where is Function coming from
&gt; ???

From my class path which is littered with a bunch of classes among them
Function.class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372545</commentid>
    <comment_count>6</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 11:16:46 -0500</bug_when>
    <thetext>To be clear, the following compiles with JDK8 but not with ECJ. Sorry for all the confusion. I&apos;ve no direct access to Internet at work and it&apos;s difficult for me to post via mobile phone o_O


public class Main {

	public static void main(String[] args) {
		
		// does not compile
		new Test&lt;Integer&gt;().test((Byte b) -&gt; (int) b);
		
	}
	
	static class Test&lt;R&gt; {
		
		&lt;T&gt; void test(java.util.function.Function&lt;T,R&gt; f) {
		}
		
	}
	
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372559</commentid>
    <comment_count>7</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-03-06 11:43:57 -0500</bug_when>
    <thetext>There&apos;s an additional wrinkle or two to that example code. If I copy-paste it onto one mavenized [JavaSE-1.8] project an import is added for Function and the cast in (int) b is removed. If I use a different mavenized [JavaSE-1.8] project the cast is again removed but no import is added. And if I use a non-mavenized [jdk1.8.0] project the cast remains intact and no import is added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372564</commentid>
    <comment_count>8</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 11:49:03 -0500</bug_when>
    <thetext>I would suggest to use a non-mavenized [jdk1.8.0] project and copy-paste the following code, which already contains the import:


import java.util.function.Function;

public class Main {

	public static void main(String[] args) {
		
		// does not compile
		new Test&lt;Integer&gt;().test((Byte b) -&gt; (int) b);
		
	}
	
	static class Test&lt;R&gt; {
		
		&lt;T&gt; void test(Function&lt;T,R&gt; f) {
		}
		
	}
	
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372588</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 12:46:52 -0500</bug_when>
    <thetext>Tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=30b1616d05268db216baae30701adfe909a87912

This was subsumed by the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=429759</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372765</commentid>
    <comment_count>10</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-03-06 22:48:25 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA) 
1.0.0.v20140306-1935
The code snippet provided in comment 8 compiles and execute using ECJ.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>