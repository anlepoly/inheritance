<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>385593</bug_id>
          
          <creation_ts>2012-07-20 08:40:00 -0400</creation_ts>
          <short_desc>[compiler] Unexpected stackmap frames</short_desc>
          <delta_ts>2012-10-30 11:26:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>4.3 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marc R. Hoffmann">hoffmann</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2139531</commentid>
    <comment_count>0</comment_count>
    <who name="Marc R. Hoffmann">hoffmann</who>
    <bug_when>2012-07-20 08:40:22 -0400</bug_when>
    <thetext>Build Identifier: Version: 3.7.2 build M20120208-0800 and version 4.2.0 build I20120531-1500

In certain situations it looks like ECJ adds stackmap frames where no frames are expected according to the class file format specification. The JVM seems to ignore these frames. I came across this when debugging an issue with JaCoCo which seems so get confused by such extra frames.

Also this makes class files bigger than necessary and I#m not sure whether such extra frames violate the VM spec.

Reproducible: Always

Steps to Reproduce:
STEPS TO REPRODUCE

Compile the attached source file with Eclipse 3.7.2 or 4.2.0 with class file version set to 1.6 or 1.7.

EXPECTED

Method exec() has no stackmap frame for offset 31, as the instruction at this position

  1) does not follow an unconditional branch instruction,
  2) is not the target of a jump instruction and
  3) does not start an exception handler block.
  
ACTUAL

Method exec() has an stackmap frame at offset 31.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2139532</commentid>
    <comment_count>1</comment_count>
      <attachid>218987</attachid>
    <who name="Marc R. Hoffmann">hoffmann</who>
    <bug_when>2012-07-20 08:41:53 -0400</bug_when>
    <thetext>Created attachment 218987
Source code to reproduce the compile issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2140242</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-23 11:12:08 -0400</bug_when>
    <thetext>I&apos;ll take a quick look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2140252</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-23 11:31:15 -0400</bug_when>
    <thetext>  // Method descriptor #15 (Ljava/util/Collection;Ljava/lang/Object;Z)Ljava/lang/Object;
  // Signature: (Ljava/util/Collection&lt;Ljava/lang/Object;&gt;;Ljava/lang/Object;Z)Ljava/lang/Object;
  // Stack: 1, Locals: 5
  public static java.lang.Object exec(java.util.Collection set, java.lang.Object a, boolean b);
     0  aload_0 [set]
     1  invokeinterface java.util.Collection.iterator() : java.util.Iterator [18] [nargs: 1]
     6  astore 4
     8  goto 36
    11  aload 4
    13  invokeinterface java.util.Iterator.next() : java.lang.Object [24] [nargs: 1]
    18  astore_3 [e]
    19  aload_1 [a]
    20  ifnull 34
    23  aload_3 [e]
    24  ifnull 36
    27  iload_2 [b]
    28  ifeq 34
    31  goto 36
    34  aconst_null
    35  areturn
    36  aload 4
    38  invokeinterface java.util.Iterator.hasNext() : boolean [30] [nargs: 1]
    43  ifne 11
    46  aconst_null
    47  areturn
      Stack map table: number of frames 4
        [pc: 11, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, _, java.util.Iterator}]
        [pc: 31, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, java.lang.Object, java.util.Iterator}]
        [pc: 34, same]
        [pc: 36, full, stack: {}, locals: {java.util.Collection, java.lang.Object, int, _, java.util.Iterator}]

31 is not a jump target anymore and therefore should not have a stack map frame. I am investigating why pc 31 is still listed as a jump target.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2140288</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-23 12:23:58 -0400</bug_when>
    <thetext>Originally the pc 31 is reached with a jump from:
24  ifnull 36

But this is also another label that when placed override the jump to 31 to directly jump to 36. When the second label is placed, the jump target of the first one is not removed so 31 is still seen as a jump target. The second label is the continue label from the ForeachStatement node.

The only way I see to fix this kind of cases is to change the implementation inside:
org.eclipse.jdt.internal.compiler.ClassFile.traverse(MethodBinding, int, byte[], int, int, ArrayList, boolean)
to record the &quot;real&quot; jumping positions after the code generation is done (so while walking the bytecodes) and then dump the stack map entries based on these jump locations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2140473</commentid>
    <comment_count>5</comment_count>
      <attachid>219078</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-23 17:02:26 -0400</bug_when>
    <thetext>Created attachment 219078
Proposed fix + regression tests updated

This is a first draft of one way to fix this issue of removing unnecessary stack frames.
Marc, would it be possible for you to patch your org.eclipse.jdt.core bundle and verify that this works in your case?
This patch might need some polishing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2141392</commentid>
    <comment_count>6</comment_count>
    <who name="Marc R. Hoffmann">hoffmann</who>
    <bug_when>2012-07-24 15:03:45 -0400</bug_when>
    <thetext>I tried your patch and it works for my test case. Great!

Note that the test case has been extracted from a project I do not have access to (the issue was reported by JaCoCo users). So there might still be other cases with unexpected frames.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2141713</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-25 10:21:37 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; I tried your patch and it works for my test case. Great!
This is a good news. I tried your test case so I was not worried about this one. I hoped you had the real test case to verify it.

&gt; Note that the test case has been extracted from a project I do not have access
&gt; to (the issue was reported by JaCoCo users). So there might still be other
&gt; cases with unexpected frames.
The purpose of the patch is to record all &quot;real&quot; jump targets and make sure that stack frames are persisted only if they match one of these targets.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2141823</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-25 12:38:28 -0400</bug_when>
    <thetext>Thanks once again for following this up Olivier. I&apos;ll try to get this into M1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2141989</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-26 00:00:12 -0400</bug_when>
    <thetext>(In reply to comment #0)

&gt; In certain situations it looks like ECJ adds stackmap frames where no frames
&gt; are expected according to the class file format specification. The JVM seems to
&gt; ignore these frames.

Ayush, could you confirm this assertion against both J9VM and Hotspot ?
While compiled as 1.6, 1.7 and 1.8 projects ? If none of the VMs complain
under any of the configurations, I would leave the target as M1 for this
to see some testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142123</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-26 07:00:00 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; [..]
&gt; Ayush, could you confirm this assertion against both J9VM and Hotspot ?
&gt; While compiled as 1.6, 1.7 and 1.8 projects ? If none of the VMs complain
&gt; under any of the configurations, I would leave the target as M1 for this
&gt; to see some testing.

Yup, all VM&apos;s run the code fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142306</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-26 12:18:04 -0400</bug_when>
    <thetext>Olivier, for one case I&apos;m not sure if we&apos;re generating the correct stack map with the patch:

package snippet;

public class X { 
	private void foo(boolean delete) { 
		 
		String s = bar(); 
		StringBuffer buffer =new StringBuffer(); 
		 
		try { 
			 
			String[] datas = new String[] { &quot;&quot; }; 
			Object[] data= new Object[] { s }; 
			try { 
				buffer.append(datas).append(data); 
			} catch (Exception e) { 
				if (e != null) 
					throw e; 
				return; 
			} 
				 
			if (delete) 
				buffer.delete(0, buffer.length()); 
			 
		} catch (Exception x) { 
		} finally { 
			buffer = null; 
		} 
	} 
	 
	String bar() { 
		return &quot;&quot;; 
	} 
	 
	public static void main(String[] args) { 
		new X().foo(false); 
		System.out.println(&quot;SUCCESS&quot;); 
	} 
}

The stackmap produced by javac 7 is
      StackMapTable: number_of_entries = 7
           frame_type = 255 /* full_frame */
          offset_delta = 49
          locals = [ class snippet/X, int, class java/lang/String, class java/la
ng/StringBuffer, class &quot;[Ljava/lang/String;&quot;, class &quot;[Ljava/lang/Object;&quot; ]
          stack = [ class java/lang/Exception ]
           frame_type = 252 /* append */
             offset_delta = 9
        locals = [ class java/lang/Exception ]
           frame_type = 250 /* chop */
          offset_delta = 2
           frame_type = 249 /* chop */
          offset_delta = 13
           frame_type = 68 /* same_locals_1_stack_item */
          stack = [ class java/lang/Exception ]
           frame_type = 70 /* same_locals_1_stack_item */
          stack = [ class java/lang/Throwable ]
           frame_type = 6 /* same */

while the one produced by javac in 1.7 mode is
      Stack map table: number of frames 7\n
        [pc: 49, full, stack: {java.lang.Exception}, locals: {X, int, java.lang.String, java.lang.StringBuffer, java.lang.String[], java.lang.Object[]}]\n
        [pc: 59, append: {java.lang.Exception}]\n
        [pc: 62, chop 1 local(s)]\n
        [pc: 79, full, stack: {java.lang.Exception}, locals: {X, int, java.lang.String, java.lang.StringBuffer}]\n
        [pc: 86, same_locals_1_stack_item, stack: {java.lang.Throwable}]\n
        [pc: 93, same]\n
        [pc: 95, same]\n

So while we eliminated one frame, I&apos;m not sure if that&apos;s the correct one. Can you please check?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142468</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-26 20:44:22 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; Olivier, for one case I&apos;m not sure if we&apos;re generating the correct stack map
&gt; with the patch:


Olivier is on vacation till Aug 20th. Since we are not targetting this
for 3.8.1, this can wait, but you can also propose an amended patch and
have it reviewed upon his return.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145092</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-06 02:18:50 -0400</bug_when>
    <thetext>Moving it out to 4.3M2 to wait for clarification of comment 11.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2150241</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-08-20 15:00:46 -0400</bug_when>
    <thetext>I&apos;ll double check this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2150656</commentid>
    <comment_count>15</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-08-21 11:55:09 -0400</bug_when>
    <thetext>Without the patch we generate:
        [pc: 49, full, stack: {java.lang.Exception}, locals: {X, int, java.lang.String, java.lang.StringBuffer, java.lang.String[], java.lang.Object[]}]
        [pc: 59, append: {java.lang.Exception}]
        [pc: 62, chop 1 local(s)]
        [pc: 76, chop 2 local(s)]
        [pc: 79, same_locals_1_stack_item, stack: {java.lang.Exception}]
        [pc: 86, same_locals_1_stack_item, stack: {java.lang.Throwable}]
        [pc: 93, same]
        [pc: 95, same]

but there is no jump target for 76. So this stack frame is technically not required.

With the fix we generate:
        [pc: 49, full, stack: {java.lang.Exception}, locals: {X, int, java.lang.String, java.lang.StringBuffer, java.lang.String[], java.lang.Object[]}]
        [pc: 59, append: {java.lang.Exception}]
        [pc: 62, chop 1 local(s)]
        [pc: 79, full, stack: {java.lang.Exception}, locals: {X, int, java.lang.String, java.lang.StringBuffer}]
        [pc: 86, same_locals_1_stack_item, stack: {java.lang.Throwable}]
        [pc: 93, same]
        [pc: 95, same]

which looks better.
The stack frames are not exactly the same for the frame at location 79 as the previous one is not the same. The shape of the frame depends on the differences with the previous one.
I would say that the patch improves the code generation for the test case provided in comment 11.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2161353</commentid>
    <comment_count>16</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-09-18 11:38:05 -0400</bug_when>
    <thetext>Ayushman, I think this is ready to be released unless you see something wrong with it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2162117</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-20 01:24:39 -0400</bug_when>
    <thetext>Jay, please release once M2 is out of the door. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164578</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-09-26 04:49:56 -0400</bug_when>
    <thetext>Released it on master:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c330a629b2e57a349c9f1b78416b69b069678655</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174527</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-20 23:30:22 -0400</bug_when>
    <thetext>(In reply to comment #18)
&gt; Released it on master:

Jay, you forgot to adjust the test Ayush was complaining about and Olivier
analyzed and verified to be the right behavior in comment#15.

I have massaged the tests and released them - with this both master and
BETA_JAVA8 should be all green. Next time you run all tests, please confirm.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174681</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-22 06:01:18 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; I have massaged the tests and released them - with this both master and
&gt; BETA_JAVA8 should be all green. Next time you run all tests, please confirm.

Yes, I confirm. The tests are all green now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177510</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-30 11:26:27 -0400</bug_when>
    <thetext>I&apos;ve verified for 4.3 M3 that:

- the change in StackMapAttributeTest.test011() makes sense.

- the examples from comment 1 and comment 11 produce the results mentioned here
  both using HEAD from master and using ecj-I20121029-2000.jar

Note, that the original commit did not contain any new regression tests.
I&apos;ve added these and released for posterity via commit 30a87361ca1a3810d60c69d18b1e1fb90c3948ab</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>218987</attachid>
            <date>2012-07-20 08:41:00 -0400</date>
            <delta_ts>2012-07-20 08:41:53 -0400</delta_ts>
            <desc>Source code to reproduce the compile issue.</desc>
            <filename>StackMapTableFormatError.java</filename>
            <type>text/plain</type>
            <size>712</size>
            <attacher name="Marc R. Hoffmann">hoffmann</attacher>
            
              <data encoding="base64">cGFja2FnZSBzdGFja21hcDsKCmltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjsKaW1wb3J0IGph
dmEudXRpbC5Db2xsZWN0aW9uczsKCi8qKgogKiBJZiBjb21waWxlZCB3aXRoIEVjbGlwc2UgKGNv
bXBpbGVyIHRhcmdldCA+PSAxLjYpIHRoaXMgc25pcHBldCBjYXVzZXMgdGhlCiAqIGVycm9yICJq
YXZhLmxhbmcuQ2xhc3NGb3JtYXRFcnJvcjogU3RhY2tNYXBUYWJsZSBmb3JtYXQgZXJyb3I6IGJh
ZAogKiB2ZXJpZmljYXRpb24gdHlwZSIgd2hlbiBleGVjdXRlZCB3aXRoIEphQ29DbyBjb2RlIGNv
dmVyYWdlLiBKYUNvQ28gc2VlbXMgdG8KICogZ2V0IGNvbmZ1c2VkIGJ5IHVuZXhwZWN0ZWQgc3Rh
Y2ttYXAgZnJhbWVzIGdlbmVyYXRlZCBieSBFQ0ouCiAqLwpwdWJsaWMgY2xhc3MgU3RhY2tNYXBU
YWJsZUZvcm1hdEVycm9yIHsKCglwdWJsaWMgc3RhdGljIE9iamVjdCBleGVjKENvbGxlY3Rpb248
T2JqZWN0PiBzZXQsIE9iamVjdCBhLAoJCQlib29sZWFuIGIpIHsKCQlmb3IgKE9iamVjdCBlIDog
c2V0KSB7CgkJCWlmIChhICE9IG51bGwgJiYgKGUgPT0gbnVsbCB8fCBiKSkgewoJCQkJY29udGlu
dWU7CgkJCX0KCQkJcmV0dXJuIG51bGw7CgkJfQoJCXJldHVybiBudWxsOwoJfQoJCglwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7CgkJZXhlYyhDb2xsZWN0aW9ucy5lbXB0
eVNldCgpLCBudWxsLCBmYWxzZSk7Cgl9Cgp9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>219078</attachid>
            <date>2012-07-23 17:02:00 -0400</date>
            <delta_ts>2012-07-23 17:02:26 -0400</delta_ts>
            <desc>Proposed fix + regression tests updated</desc>
            <filename>patch_git_385593.txt</filename>
            <type>text/plain</type>
            <size>13033</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmli
dXRlVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRy
aWJ1dGVUZXN0LmphdmEKaW5kZXggMzVkNTZhNS4uM2VjM2Q0YyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEK
QEAgLTExNTYsMTIgKzExNTYsMTEgQEAgcHVibGljIGNsYXNzIFN0YWNrTWFwQXR0cmlidXRlVGVz
dCBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCQkJCSIgICAgICAgIFtwYzogMTks
IHBjOiAxMDJdIGxvY2FsOiB4IGluZGV4OiAxIHR5cGU6IFhcbiIgKwogCQkJCSIgICAgICAgIFtw
YzogMiwgcGM6IDExMV0gbG9jYWw6IGkgaW5kZXg6IDIgdHlwZTogaW50XG4iICsKIAkJCQkiICAg
ICAgICBbcGM6IDkwLCBwYzogMTAyXSBsb2NhbDogZGlmZiBpbmRleDogMyB0eXBlOiBqYXZhLmxh
bmcuT2JqZWN0XG4iICsKLQkJCQkiICAgICAgU3RhY2sgbWFwIHRhYmxlOiBudW1iZXIgb2YgZnJh
bWVzIDhcbiIgKworCQkJCSIgICAgICBTdGFjayBtYXAgdGFibGU6IG51bWJlciBvZiBmcmFtZXMg
N1xuIiArCiAJCQkJIiAgICAgICAgW3BjOiA1LCBmdWxsLCBzdGFjazoge30sIGxvY2Fsczoge2ph
dmEubGFuZy5TdHJpbmdbXSwgXywgaW50fV1cbiIgKwogCQkJCSIgICAgICAgIFtwYzogMzgsIGZ1
bGwsIHN0YWNrOiB7fSwgbG9jYWxzOiB7amF2YS5sYW5nLlN0cmluZ1tdLCBYLCBpbnR9XVxuIiAr
CiAJCQkJIiAgICAgICAgW3BjOiA0NCwgc2FtZV1cbiIgKwogCQkJCSIgICAgICAgIFtwYzogNjQs
IHNhbWVdXG4iICsKLQkJCQkiICAgICAgICBbcGM6IDgyLCBzYW1lXVxuIiArCiAJCQkJIiAgICAg
ICAgW3BjOiA4NSwgc2FtZV1cbiIgKwogCQkJCSIgICAgICAgIFtwYzogMTAyLCBmdWxsLCBzdGFj
azoge30sIGxvY2Fsczoge2phdmEubGFuZy5TdHJpbmdbXSwgXywgaW50fV1cbiIgKwogCQkJCSIg
ICAgICAgIFtwYzogMTA1LCBzYW1lXVxuIjsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2YQppbmRleCAwNzRkZDU2Li41YTA4ODUwIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZh
CkBAIC0xNCw4ICsxNCwxMSBAQCBpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsKIGltcG9ydCBq
YXZhLnV0aWwuQXJyYXlzOwogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKIGltcG9ydCBq
YXZhLnV0aWwuQ29tcGFyYXRvcjsKK2ltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIGltcG9ydCBq
YXZhLnV0aWwuSGFzaFNldDsKK2ltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7CiBpbXBvcnQgamF2
YS51dGlsLkxpc3Q7CitpbXBvcnQgamF2YS51dGlsLk1hcDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0
OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2F0ZWdvcml6ZWRQcm9i
bGVtOwpAQCAtMzE4Miw5ICszMTg1LDkgQEAgcHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1l
bnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewogCQlTdGFja01hcEZyYW1lQ29kZVN0cmVhbSBz
dGFja01hcEZyYW1lQ29kZVN0cmVhbSA9IChTdGFja01hcEZyYW1lQ29kZVN0cmVhbSkgdGhpcy5j
b2RlU3RyZWFtOwogCQlzdGFja01hcEZyYW1lQ29kZVN0cmVhbS5yZW1vdmVGcmFtZVBvc2l0aW9u
KGNvZGVfbGVuZ3RoKTsKIAkJaWYgKHN0YWNrTWFwRnJhbWVDb2RlU3RyZWFtLmhhc0ZyYW1lUG9z
aXRpb25zKCkpIHsKLQkJCUFycmF5TGlzdCBmcmFtZXMgPSBuZXcgQXJyYXlMaXN0KCk7Ci0JCQl0
cmF2ZXJzZShpc0NsaW5pdCA/IG51bGwgOiBtZXRob2RCaW5kaW5nLCBtYXhfbG9jYWxzLCB0aGlz
LmNvbnRlbnRzLCBjb2RlQXR0cmlidXRlT2Zmc2V0ICsgMTQsIGNvZGVfbGVuZ3RoLCBmcmFtZXMs
IGlzQ2xpbml0KTsKLQkJCWludCBudW1iZXJPZkZyYW1lcyA9IGZyYW1lcy5zaXplKCk7CisJCQlN
YXAgZnJhbWVzID0gbmV3IEhhc2hNYXAoKTsKKwkJCUxpc3QgcmVhbEZyYW1lcyA9IHRyYXZlcnNl
KGlzQ2xpbml0ID8gbnVsbCA6IG1ldGhvZEJpbmRpbmcsIG1heF9sb2NhbHMsIHRoaXMuY29udGVu
dHMsIGNvZGVBdHRyaWJ1dGVPZmZzZXQgKyAxNCwgY29kZV9sZW5ndGgsIGZyYW1lcywgaXNDbGlu
aXQpOworCQkJaW50IG51bWJlck9mRnJhbWVzID0gcmVhbEZyYW1lcy5zaXplKCk7CiAJCQlpZiAo
bnVtYmVyT2ZGcmFtZXMgPiAxKSB7CiAJCQkJaW50IHN0YWNrTWFwVGFibGVBdHRyaWJ1dGVPZmZz
ZXQgPSBsb2NhbENvbnRlbnRzT2Zmc2V0OwogCQkJCS8vIGFkZCB0aGUgc3RhY2sgbWFwIHRhYmxl
IGF0dHJpYnV0ZQpAQCAtMzIwNywxMCArMzIxMCwxMCBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NGaWxl
IGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJaWYgKGxvY2FsQ29udGVu
dHNPZmZzZXQgKyAyID49IHRoaXMuY29udGVudHMubGVuZ3RoKSB7CiAJCQkJCXJlc2l6ZUNvbnRl
bnRzKDIpOwogCQkJCX0KLQkJCQlTdGFja01hcEZyYW1lIGN1cnJlbnRGcmFtZSA9IChTdGFja01h
cEZyYW1lKSBmcmFtZXMuZ2V0KDApOworCQkJCVN0YWNrTWFwRnJhbWUgY3VycmVudEZyYW1lID0g
KFN0YWNrTWFwRnJhbWUpIHJlYWxGcmFtZXMuZ2V0KDApOwogCQkJCWZvciAoaW50IGogPSAxOyBq
IDwgbnVtYmVyT2ZGcmFtZXM7IGorKykgewogCQkJCQkvLyBzZWxlY3QgbmV4dCBmcmFtZQotCQkJ
CQljdXJyZW50RnJhbWUgPSAoU3RhY2tNYXBGcmFtZSkgZnJhbWVzLmdldChqKTsKKwkJCQkJY3Vy
cmVudEZyYW1lID0gKFN0YWNrTWFwRnJhbWUpIHJlYWxGcmFtZXMuZ2V0KGopOwogCQkJCQkvLyBn
ZW5lcmF0ZSBjdXJyZW50IGZyYW1lCiAJCQkJCS8vIG5lZWQgdG8gZmluZCBkaWZmZXJlbmNlcyBi
ZXR3ZWVuIHRoZSBjdXJyZW50IGZyYW1lIGFuZCB0aGUgcHJldmlvdXMgZnJhbWUKIAkJCQkJaW50
IGZyYW1lT2Zmc2V0ID0gY3VycmVudEZyYW1lLnBjOwpAQCAtMzM1OSw5ICszMzYyLDkgQEAgcHVi
bGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewog
CQlTdGFja01hcEZyYW1lQ29kZVN0cmVhbSBzdGFja01hcEZyYW1lQ29kZVN0cmVhbSA9IChTdGFj
a01hcEZyYW1lQ29kZVN0cmVhbSkgdGhpcy5jb2RlU3RyZWFtOwogCQlzdGFja01hcEZyYW1lQ29k
ZVN0cmVhbS5yZW1vdmVGcmFtZVBvc2l0aW9uKGNvZGVfbGVuZ3RoKTsKIAkJaWYgKHN0YWNrTWFw
RnJhbWVDb2RlU3RyZWFtLmhhc0ZyYW1lUG9zaXRpb25zKCkpIHsKLQkJCUFycmF5TGlzdCBmcmFt
ZXMgPSBuZXcgQXJyYXlMaXN0KCk7Ci0JCQl0cmF2ZXJzZShpc0NsaW5pdCA/IG51bGw6IG1ldGhv
ZEJpbmRpbmcsIG1heF9sb2NhbHMsIHRoaXMuY29udGVudHMsIGNvZGVBdHRyaWJ1dGVPZmZzZXQg
KyAxNCwgY29kZV9sZW5ndGgsIGZyYW1lcywgaXNDbGluaXQpOwotCQkJaW50IG51bWJlck9mRnJh
bWVzID0gZnJhbWVzLnNpemUoKTsKKwkJCU1hcCBmcmFtZXMgPSBuZXcgSGFzaE1hcCgpOworCQkJ
TGlzdCByZWFsRnJhbWVzID0gdHJhdmVyc2UoaXNDbGluaXQgPyBudWxsOiBtZXRob2RCaW5kaW5n
LCBtYXhfbG9jYWxzLCB0aGlzLmNvbnRlbnRzLCBjb2RlQXR0cmlidXRlT2Zmc2V0ICsgMTQsIGNv
ZGVfbGVuZ3RoLCBmcmFtZXMsIGlzQ2xpbml0KTsKKwkJCWludCBudW1iZXJPZkZyYW1lcyA9IHJl
YWxGcmFtZXMuc2l6ZSgpOwogCQkJaWYgKG51bWJlck9mRnJhbWVzID4gMSkgewogCQkJCWludCBz
dGFja01hcFRhYmxlQXR0cmlidXRlT2Zmc2V0ID0gbG9jYWxDb250ZW50c09mZnNldDsKIAkJCQkv
LyBhZGQgdGhlIHN0YWNrIG1hcCB0YWJsZSBhdHRyaWJ1dGUKQEAgLTMzODQsMTIgKzMzODcsMTIg
QEAgcHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJ
ZHMgewogCQkJCWlmIChsb2NhbENvbnRlbnRzT2Zmc2V0ICsgMiA+PSB0aGlzLmNvbnRlbnRzLmxl
bmd0aCkgewogCQkJCQlyZXNpemVDb250ZW50cygyKTsKIAkJCQl9Ci0JCQkJU3RhY2tNYXBGcmFt
ZSBjdXJyZW50RnJhbWUgPSAoU3RhY2tNYXBGcmFtZSkgZnJhbWVzLmdldCgwKTsKKwkJCQlTdGFj
a01hcEZyYW1lIGN1cnJlbnRGcmFtZSA9IChTdGFja01hcEZyYW1lKSByZWFsRnJhbWVzLmdldCgw
KTsKIAkJCQlTdGFja01hcEZyYW1lIHByZXZGcmFtZSA9IG51bGw7CiAJCQkJZm9yIChpbnQgaiA9
IDE7IGogPCBudW1iZXJPZkZyYW1lczsgaisrKSB7CiAJCQkJCS8vIHNlbGVjdCBuZXh0IGZyYW1l
CiAJCQkJCXByZXZGcmFtZSA9IGN1cnJlbnRGcmFtZTsKLQkJCQkJY3VycmVudEZyYW1lID0gKFN0
YWNrTWFwRnJhbWUpIGZyYW1lcy5nZXQoaik7CisJCQkJCWN1cnJlbnRGcmFtZSA9IChTdGFja01h
cEZyYW1lKSByZWFsRnJhbWVzLmdldChqKTsKIAkJCQkJLy8gZ2VuZXJhdGUgY3VycmVudCBmcmFt
ZQogCQkJCQkvLyBuZWVkIHRvIGZpbmQgZGlmZmVyZW5jZXMgYmV0d2VlbiB0aGUgY3VycmVudCBm
cmFtZSBhbmQgdGhlIHByZXZpb3VzIGZyYW1lCiAJCQkJCWludCBvZmZzZXREZWx0YSA9IGN1cnJl
bnRGcmFtZS5nZXRPZmZzZXREZWx0YShwcmV2RnJhbWUpOwpAQCAtMzgyNiw3ICszODI5LDYgQEAg
cHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMg
ewogCQkJCW1ldGhvZFNpZ25hdHVyZS5sZW5ndGgpOwogCX0KIAotCiAJcHJpdmF0ZSBmaW5hbCBp
bnQgaTRBdChieXRlW10gcmVmZXJlbmNlLCBpbnQgcmVsYXRpdmVPZmZzZXQsCiAJCQlpbnQgc3Ry
dWN0T2Zmc2V0KSB7CiAJCWludCBwb3NpdGlvbiA9IHJlbGF0aXZlT2Zmc2V0ICsgc3RydWN0T2Zm
c2V0OwpAQCAtNDIzMCw4ICs0MjMyLDMyIEBAIHB1YmxpYyBjbGFzcyBDbGFzc0ZpbGUgaW1wbGVt
ZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJdGhpcy5tZXRob2RDb3VudE9mZnNldCA9
IHRoaXMuY29udGVudHNPZmZzZXQ7CiAJCXRoaXMuY29udGVudHNPZmZzZXQgKz0gMjsKIAl9CisJ
CisJcHJpdmF0ZSBMaXN0IGZpbHRlckZha2VGcmFtZXMoU2V0IHJlYWxKdW1wVGFyZ2V0cywgTWFw
IGZyYW1lcywgaW50IGNvZGVMZW5ndGgpIHsKKwkJLy8gbm8gbW9yZSBmcmFtZSB0byBnZW5lcmF0
ZQorCQkvLyBmaWx0ZXIgb3V0ICJmYWtlIiBmcmFtZXMKKwkJcmVhbEp1bXBUYXJnZXRzLnJlbW92
ZShuZXcgSW50ZWdlcihjb2RlTGVuZ3RoKSk7CisJCUxpc3QgcmVzdWx0ID0gbmV3IEFycmF5TGlz
dCgpOworCQlmb3IgKEl0ZXJhdG9yIGl0ZXJhdG9yID0gcmVhbEp1bXBUYXJnZXRzLml0ZXJhdG9y
KCk7IGl0ZXJhdG9yLmhhc05leHQoKTsgKSB7CisJCQlJbnRlZ2VyIGp1bXBUYXJnZXQgPSAoSW50
ZWdlcikgaXRlcmF0b3IubmV4dCgpOworCQkJU3RhY2tNYXBGcmFtZSBmcmFtZSA9IChTdGFja01h
cEZyYW1lKSBmcmFtZXMuZ2V0KGp1bXBUYXJnZXQpOworCQkJaWYgKGZyYW1lICE9IG51bGwpIHsK
KwkJCQlyZXN1bHQuYWRkKGZyYW1lKTsKKwkJCX0KKwkJfQorCQlDb2xsZWN0aW9ucy5zb3J0KHJl
c3VsdCwgbmV3IENvbXBhcmF0b3IoKSB7CisJCQlwdWJsaWMgaW50IGNvbXBhcmUoT2JqZWN0IG8x
LCBPYmplY3QgbzIpIHsKKwkJCQlTdGFja01hcEZyYW1lIGZyYW1lID0gKFN0YWNrTWFwRnJhbWUp
IG8xOworCQkJCVN0YWNrTWFwRnJhbWUgZnJhbWUyID0gKFN0YWNrTWFwRnJhbWUpIG8yOworCQkJ
CXJldHVybiBmcmFtZS5wYyAtIGZyYW1lMi5wYzsKKwkJCX0KKwkJfSk7CisJCXJldHVybiByZXN1
bHQ7CisJfQorCisJcHVibGljIExpc3QgdHJhdmVyc2UoTWV0aG9kQmluZGluZyBtZXRob2RCaW5k
aW5nLCBpbnQgbWF4TG9jYWxzLCBieXRlW10gYnl0ZWNvZGVzLCBpbnQgY29kZU9mZnNldCwgaW50
IGNvZGVMZW5ndGgsIE1hcCBmcmFtZXMsIGJvb2xlYW4gaXNDbGluaXQpIHsKKwkJU2V0IHJlYWxK
dW1wVGFyZ2V0ID0gbmV3IEhhc2hTZXQoKTsgCiAKLQlwdWJsaWMgdm9pZCB0cmF2ZXJzZShNZXRo
b2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIGludCBtYXhMb2NhbHMsIGJ5dGVbXSBieXRlY29kZXMs
IGludCBjb2RlT2Zmc2V0LCBpbnQgY29kZUxlbmd0aCwgQXJyYXlMaXN0IGZyYW1lcywgYm9vbGVh
biBpc0NsaW5pdCkgewogCQlTdGFja01hcEZyYW1lQ29kZVN0cmVhbSBzdGFja01hcEZyYW1lQ29k
ZVN0cmVhbSA9IChTdGFja01hcEZyYW1lQ29kZVN0cmVhbSkgdGhpcy5jb2RlU3RyZWFtOwogCQlp
bnRbXSBmcmFtZVBvc2l0aW9ucyA9IHN0YWNrTWFwRnJhbWVDb2RlU3RyZWFtLmdldEZyYW1lUG9z
aXRpb25zKCk7CiAJCWludCBwYyA9IGNvZGVPZmZzZXQ7CkBAIC00Mjc5LDcgKzQzMDUsMTQgQEAg
cHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMg
ewogCQkJaW5pdGlhbGl6ZURlZmF1bHRMb2NhbHMoZnJhbWUsIG1ldGhvZEJpbmRpbmcsIG1heExv
Y2FscywgY29kZUxlbmd0aCk7CiAJCX0KIAkJZnJhbWUucGMgPSAtMTsKLQkJZnJhbWVzLmFkZChm
cmFtZS5kdXBsaWNhdGUoKSk7CisJCWFkZChmcmFtZXMsIGZyYW1lLmR1cGxpY2F0ZSgpKTsKKwkJ
YWRkUmVhbEp1bXBUYXJnZXQocmVhbEp1bXBUYXJnZXQsIC0xKTsKKwkJZm9yIChpbnQgaSA9IDAs
IG1heCA9IHRoaXMuY29kZVN0cmVhbS5leGNlcHRpb25MYWJlbHNDb3VudGVyOyBpIDwgbWF4OyBp
KyspIHsKKwkJCUV4Y2VwdGlvbkxhYmVsIGV4Y2VwdGlvbkxhYmVsID0gdGhpcy5jb2RlU3RyZWFt
LmV4Y2VwdGlvbkxhYmVsc1tpXTsKKwkJCWlmIChleGNlcHRpb25MYWJlbCAhPSBudWxsKSB7CisJ
CQkJYWRkUmVhbEp1bXBUYXJnZXQocmVhbEp1bXBUYXJnZXQsIGV4Y2VwdGlvbkxhYmVsLnBvc2l0
aW9uKTsKKwkJCX0KKwkJfQogCQl3aGlsZSAodHJ1ZSkgewogCQkJaW50IGN1cnJlbnRQQyA9IHBj
IC0gY29kZU9mZnNldDsKIAkJCWlmIChoYXNTdGFja01hcmtlcnMgJiYgc3RhY2tNYXJrZXIucGMg
PT0gY3VycmVudFBDKSB7CkBAIC00MzMyLDggKzQzNjUsNyBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NG
aWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJCWlmIChpbmRleElu
RnJhbWVQb3NpdGlvbnMgPCBmcmFtZVBvc2l0aW9uc0xlbmd0aCkgewogCQkJCQkJY3VycmVudEZy
YW1lUG9zaXRpb24gPSBmcmFtZVBvc2l0aW9uc1tpbmRleEluRnJhbWVQb3NpdGlvbnNdOwogCQkJ
CQl9IGVsc2UgewotCQkJCQkJLy8gbm8gbW9yZSBmcmFtZSB0byBnZW5lcmF0ZQotCQkJCQkJcmV0
dXJuOworCQkJCQkJY3VycmVudEZyYW1lUG9zaXRpb24gPSBJbnRlZ2VyLk1BWF9WQUxVRTsKIAkJ
CQkJfQogCQkJCX0gd2hpbGUgKGN1cnJlbnRGcmFtZVBvc2l0aW9uIDwgY3VycmVudFBDKTsKIAkJ
CX0KQEAgLTQzNDQsMTMgKzQzNzYsMTIgQEAgcHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1l
bnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewogCQkJCS8vIGluaXRpYWxpemUgbG9jYWxzCiAJ
CQkJaW5pdGlhbGl6ZUxvY2Fscyhpc0NsaW5pdCA/IHRydWUgOiBtZXRob2RCaW5kaW5nLmlzU3Rh
dGljKCksIGN1cnJlbnRQQywgY3VycmVudEZyYW1lKTsKIAkJCQkvLyBpbnNlcnQgYSBuZXcgZnJh
bWUKLQkJCQlmcmFtZXMuYWRkKGN1cnJlbnRGcmFtZSk7CisJCQkJYWRkKGZyYW1lcywgY3VycmVu
dEZyYW1lKTsKIAkJCQlpbmRleEluRnJhbWVQb3NpdGlvbnMrKzsKIAkJCQlpZiAoaW5kZXhJbkZy
YW1lUG9zaXRpb25zIDwgZnJhbWVQb3NpdGlvbnNMZW5ndGgpIHsKIAkJCQkJY3VycmVudEZyYW1l
UG9zaXRpb24gPSBmcmFtZVBvc2l0aW9uc1tpbmRleEluRnJhbWVQb3NpdGlvbnNdOwogCQkJCX0g
ZWxzZSB7Ci0JCQkJCS8vIG5vIG1vcmUgZnJhbWUgdG8gZ2VuZXJhdGUKLQkJCQkJcmV0dXJuOwor
CQkJCQljdXJyZW50RnJhbWVQb3NpdGlvbiA9IEludGVnZXIuTUFYX1ZBTFVFOwogCQkJCX0KIAkJ
CX0KIAkJCWJ5dGUgb3Bjb2RlID0gKGJ5dGUpIHUxQXQoYnl0ZWNvZGVzLCAwLCBwYyk7CkBAIC00
ODk2LDYgKzQ5MjcsNyBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NGaWxlIGltcGxlbWVudHMgVHlwZUNv
bnN0YW50cywgVHlwZUlkcyB7CiAJCQkJY2FzZSBPcGNvZGVzLk9QQ19pZmd0OgogCQkJCWNhc2Ug
T3Bjb2Rlcy5PUENfaWZsZToKIAkJCQkJZnJhbWUubnVtYmVyT2ZTdGFja0l0ZW1zLS07CisJCQkJ
CWFkZFJlYWxKdW1wVGFyZ2V0KHJlYWxKdW1wVGFyZ2V0LCBjdXJyZW50UEMgKyBpMkF0KGJ5dGVj
b2RlcywgMSwgcGMpKTsKIAkJCQkJcGMgKz0gMzsKIAkJCQkJYnJlYWs7CiAJCQkJY2FzZSBPcGNv
ZGVzLk9QQ19pZl9pY21wZXE6CkBAIC00OTA3LDIzICs0OTM5LDMyIEBAIHB1YmxpYyBjbGFzcyBD
bGFzc0ZpbGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJCQljYXNlIE9w
Y29kZXMuT1BDX2lmX2FjbXBlcToKIAkJCQljYXNlIE9wY29kZXMuT1BDX2lmX2FjbXBuZToKIAkJ
CQkJZnJhbWUubnVtYmVyT2ZTdGFja0l0ZW1zIC09IDI7CisJCQkJCWFkZFJlYWxKdW1wVGFyZ2V0
KHJlYWxKdW1wVGFyZ2V0LCBjdXJyZW50UEMgKyBpMkF0KGJ5dGVjb2RlcywgMSwgcGMpKTsKIAkJ
CQkJcGMgKz0gMzsKIAkJCQkJYnJlYWs7CiAJCQkJY2FzZSBPcGNvZGVzLk9QQ19nb3RvOgorCQkJ
CQlhZGRSZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgY3VycmVudFBDICsgaTJBdChieXRl
Y29kZXMsIDEsIHBjKSk7CiAJCQkJCXBjICs9IDM7CisJCQkJCWFkZFJlYWxKdW1wVGFyZ2V0KHJl
YWxKdW1wVGFyZ2V0LCBwYyAtIGNvZGVPZmZzZXQpOwogCQkJCQlicmVhazsKIAkJCQljYXNlIE9w
Y29kZXMuT1BDX3RhYmxlc3dpdGNoOgogCQkJCQlwYysrOwogCQkJCQl3aGlsZSAoKChwYyAtIGNv
ZGVPZmZzZXQpICYgMHgwMykgIT0gMCkgewogCQkJCQkJcGMrKzsKIAkJCQkJfQorCQkJCQkvLyBk
ZWZhdWx0IG9mZnNldAorCQkJCQlhZGRSZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgY3Vy
cmVudFBDICsgaTRBdChieXRlY29kZXMsIDAsIHBjKSk7CiAJCQkJCXBjICs9IDQ7IC8vIGRlZmF1
bHQKIAkJCQkJaW50IGxvdyA9IGk0QXQoYnl0ZWNvZGVzLCAwLCBwYyk7CiAJCQkJCXBjICs9IDQ7
CiAJCQkJCWludCBoaWdoID0gaTRBdChieXRlY29kZXMsIDAsIHBjKTsKIAkJCQkJcGMgKz0gNDsK
IAkJCQkJaW50IGxlbmd0aCA9IGhpZ2ggLSBsb3cgKyAxOwotCQkJCQlwYyArPSAobGVuZ3RoICog
NCk7CisJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCS8vIHBh
aXIgb2Zmc2V0CisJCQkJCQlhZGRSZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgY3VycmVu
dFBDICsgaTRBdChieXRlY29kZXMsIDAsIHBjKSk7CisJCQkJCQlwYyArPSA0OworCQkJCQl9CiAJ
CQkJCWZyYW1lLm51bWJlck9mU3RhY2tJdGVtcy0tOwogCQkJCQlicmVhazsKIAkJCQljYXNlIE9w
Y29kZXMuT1BDX2xvb2t1cHN3aXRjaDoKQEAgLTQ5MzEsOSArNDk3MiwxNiBAQCBwdWJsaWMgY2xh
c3MgQ2xhc3NGaWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJCXdo
aWxlICgoKHBjIC0gY29kZU9mZnNldCkgJiAweDAzKSAhPSAwKSB7CiAJCQkJCQlwYysrOwogCQkJ
CQl9Ci0JCQkJCXBjICs9IDQ7IC8vIGRlZmF1bHQKKwkJCQkJYWRkUmVhbEp1bXBUYXJnZXQocmVh
bEp1bXBUYXJnZXQsIGN1cnJlbnRQQyArIGk0QXQoYnl0ZWNvZGVzLCAwLCBwYykpOworCQkJCQlw
YyArPSA0OyAvLyBkZWZhdWx0IG9mZnNldAogCQkJCQlpbnQgbnBhaXJzID0gKGludCkgdTRBdChi
eXRlY29kZXMsIDAsIHBjKTsKLQkJCQkJcGMgKz0gKDQgKyBucGFpcnMgKiA4KTsKKwkJCQkJcGMg
Kz0gNDsgLy8gbnBhaXIgdmFsdWUKKwkJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBucGFpcnM7IGkr
KykgeworCQkJCQkJcGMgKz0gNDsgLy8gY2FzZSB2YWx1ZQorCQkJCQkJLy8gcGFpciBvZmZzZXQK
KwkJCQkJCWFkZFJlYWxKdW1wVGFyZ2V0KHJlYWxKdW1wVGFyZ2V0LCBjdXJyZW50UEMgKyBpNEF0
KGJ5dGVjb2RlcywgMCwgcGMpKTsKKwkJCQkJCXBjICs9IDQ7CisJCQkJCX0KIAkJCQkJZnJhbWUu
bnVtYmVyT2ZTdGFja0l0ZW1zLS07CiAJCQkJCWJyZWFrOwogCQkJCWNhc2UgT3Bjb2Rlcy5PUENf
aXJldHVybjoKQEAgLTQ5NDMsOSArNDk5MSwxMSBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NGaWxlIGlt
cGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJY2FzZSBPcGNvZGVzLk9QQ19h
cmV0dXJuOgogCQkJCQlmcmFtZS5udW1iZXJPZlN0YWNrSXRlbXMtLTsKIAkJCQkJcGMrKzsKKwkJ
CQkJYWRkUmVhbEp1bXBUYXJnZXQocmVhbEp1bXBUYXJnZXQsIHBjIC0gY29kZU9mZnNldCk7CiAJ
CQkJCWJyZWFrOwogCQkJCWNhc2UgT3Bjb2Rlcy5PUENfcmV0dXJuOgogCQkJCQlwYysrOworCQkJ
CQlhZGRSZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgcGMgLSBjb2RlT2Zmc2V0KTsKIAkJ
CQkJYnJlYWs7CiAJCQkJY2FzZSBPcGNvZGVzLk9QQ19nZXRzdGF0aWM6CiAJCQkJCWluZGV4ID0g
dTJBdChieXRlY29kZXMsIDEsIHBjKTsKQEAgLTUzNDgsNiArNTM5OCw3IEBAIHB1YmxpYyBjbGFz
cyBDbGFzc0ZpbGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJCQljYXNl
IE9wY29kZXMuT1BDX2F0aHJvdzoKIAkJCQkJZnJhbWUubnVtYmVyT2ZTdGFja0l0ZW1zLS07CiAJ
CQkJCXBjKys7CisJCQkJCWFkZFJlYWxKdW1wVGFyZ2V0KHJlYWxKdW1wVGFyZ2V0LCBwYyAtIGNv
ZGVPZmZzZXQpOwogCQkJCQlicmVhazsKIAkJCQljYXNlIE9wY29kZXMuT1BDX2NoZWNrY2FzdDoK
IAkJCQkJaW5kZXggPSB1MkF0KGJ5dGVjb2RlcywgMSwgcGMpOwpAQCAtNTQ0MiwxMCArNTQ5Mywx
MyBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NGaWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlw
ZUlkcyB7CiAJCQkJY2FzZSBPcGNvZGVzLk9QQ19pZm51bGw6CiAJCQkJY2FzZSBPcGNvZGVzLk9Q
Q19pZm5vbm51bGw6CiAJCQkJCWZyYW1lLm51bWJlck9mU3RhY2tJdGVtcy0tOworCQkJCQlhZGRS
ZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgY3VycmVudFBDICsgaTJBdChieXRlY29kZXMs
IDEsIHBjKSk7CiAJCQkJCXBjICs9IDM7CiAJCQkJCWJyZWFrOwogCQkJCWNhc2UgT3Bjb2Rlcy5P
UENfZ290b193OgorCQkJCQlhZGRSZWFsSnVtcFRhcmdldChyZWFsSnVtcFRhcmdldCwgY3VycmVu
dFBDICsgaTRBdChieXRlY29kZXMsIDEsIHBjKSk7CiAJCQkJCXBjICs9IDU7CisJCQkJCWFkZFJl
YWxKdW1wVGFyZ2V0KHJlYWxKdW1wVGFyZ2V0LCBwYyAtIGNvZGVPZmZzZXQpOyAvLyBoYW5kbGUg
aW5maW5pdGUgbG9vcAogCQkJCQlicmVhazsKIAkJCQlkZWZhdWx0OiAvLyBzaG91bGQgbm90IG9j
Y3VyCiAJCQkJCXRoaXMuY29kZVN0cmVhbS5tZXRob2REZWNsYXJhdGlvbi5zY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5hYm9ydER1ZVRvSW50ZXJuYWxFcnJvcigKQEAgLTU0NjMsOCArNTUxNywxNSBA
QCBwdWJsaWMgY2xhc3MgQ2xhc3NGaWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlk
cyB7CiAJCQkJYnJlYWs7CiAJCQl9CiAJCX0KKwkJcmV0dXJuIGZpbHRlckZha2VGcmFtZXMocmVh
bEp1bXBUYXJnZXQsIGZyYW1lcywgY29kZUxlbmd0aCk7CiAJfQogCisJcHJpdmF0ZSB2b2lkIGFk
ZFJlYWxKdW1wVGFyZ2V0KFNldCByZWFsSnVtcFRhcmdldCwgaW50IHBjKSB7CisJCXJlYWxKdW1w
VGFyZ2V0LmFkZChuZXcgSW50ZWdlcihwYykpOworCX0KKwlwcml2YXRlIHZvaWQgYWRkKE1hcCBm
cmFtZXMsIFN0YWNrTWFwRnJhbWUgZnJhbWUpIHsKKwkJZnJhbWVzLnB1dChuZXcgSW50ZWdlcihm
cmFtZS5wYyksIGZyYW1lKTsKKwl9CiAJcHJpdmF0ZSBmaW5hbCBpbnQgdTFBdChieXRlW10gcmVm
ZXJlbmNlLCBpbnQgcmVsYXRpdmVPZmZzZXQsCiAJCQlpbnQgc3RydWN0T2Zmc2V0KSB7CiAJCXJl
dHVybiAocmVmZXJlbmNlW3JlbGF0aXZlT2Zmc2V0ICsgc3RydWN0T2Zmc2V0XSAmIDB4RkYpOwpA
QCAtNTQ4NSw2ICs1NTQ2LDExIEBAIHB1YmxpYyBjbGFzcyBDbGFzc0ZpbGUgaW1wbGVtZW50cyBU
eXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJCQkrICgocmVmZXJlbmNlW3Bvc2l0aW9uKytdICYg
MHhGRikgPDwgOCkgKyAocmVmZXJlbmNlW3Bvc2l0aW9uXSAmIDB4RkYpKTsKIAl9CiAKKwlwcml2
YXRlIGZpbmFsIGludCBpMkF0KGJ5dGVbXSByZWZlcmVuY2UsIGludCByZWxhdGl2ZU9mZnNldCwg
aW50IHN0cnVjdE9mZnNldCkgeworCQlpbnQgcG9zaXRpb24gPSByZWxhdGl2ZU9mZnNldCArIHN0
cnVjdE9mZnNldDsKKwkJcmV0dXJuIChyZWZlcmVuY2VbcG9zaXRpb24rK10gPDwgOCkgKyAocmVm
ZXJlbmNlW3Bvc2l0aW9uXSAmIDB4RkYpOworCX0KKwogCXB1YmxpYyBjaGFyW10gdXRmOEF0KGJ5
dGVbXSByZWZlcmVuY2UsIGludCBhYnNvbHV0ZU9mZnNldCwKIAkJCWludCBieXRlc0F2YWlsYWJs
ZSkgewogCQlpbnQgbGVuZ3RoID0gYnl0ZXNBdmFpbGFibGU7Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>