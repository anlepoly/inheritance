<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401141</bug_id>
          
          <creation_ts>2013-02-19 00:21:00 -0500</creation_ts>
          <short_desc>[CBI] Inner jars are not signed in CBI based build</short_desc>
          <delta_ts>2013-10-22 21:55:24 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>5</classification_id>
          <classification>Technology</classification>
          <product>CBI</product>
          <component>signing</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>---</target_milestone>
          
          <blocked>401098</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="David Williams">david_williams</reporter>
          <assigned_to name="CBI Inbox">cbi-inbox</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>david_williams</cc>
    
    <cc>jan.sievers</cc>
    
    <cc>john_arthorne</cc>
    
    <cc>pwebster</cc>
    
    <cc>thanh.ha</cc>
    
    <cc>tjwatson</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2218365</commentid>
    <comment_count>0</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-02-19 00:21:57 -0500</bug_when>
    <thetext>+++ This bug was initially created as a clone of Bug #401098 +++

Looking at the osgi.tests logs for the test failures of the latest CBI based builds [1] I noticed that the following exception is getting thrown when trying to launch a session of eclipse with some security options enabled:

Caused by: java.lang.SecurityException: class &quot;org.eclipse.core.runtime.IExtension&quot;&apos;s signer information does not match signer information of other classes in the same package
	at java.lang.ClassLoader.checkCerts(ClassLoader.java:806)
	at java.lang.ClassLoader.preDefineClass(ClassLoader.java:487)
	at java.lang.ClassLoader.defineClassCond(ClassLoader.java:625)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:615)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.defineClass(DefaultClassLoader.java:188)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClassHoldingLock(ClasspathManager.java:638)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.defineClass(ClasspathManager.java:620)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findClassImpl(ClasspathManager.java:574)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClassImpl(ClasspathManager.java:492)
	at org.eclipse.osgi.baseadaptor.loader.ClasspathManager.findLocalClass(ClasspathManager.java:465)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.findLocalClass(DefaultClassLoader.java:216)
	at org.eclipse.osgi.internal.loader.BundleLoader.findLocalClass(BundleLoader.java:395)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClassInternal(BundleLoader.java:464)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:421)
	at org.eclipse.osgi.internal.loader.BundleLoader.findClass(BundleLoader.java:412)
	at org.eclipse.osgi.internal.baseadaptor.DefaultClassLoader.loadClass(DefaultClassLoader.java:107)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:247)
	at org.eclipse.core.runtime.RegistryFactory.createRegistry(RegistryFactory.java:58)
	at org.eclipse.core.internal.registry.osgi.Activator.startRegistry(Activator.java:137)
	at org.eclipse.core.internal.registry.osgi.Activator.start(Activator.java:56)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl$1.run(BundleContextImpl.java:711)
	at java.security.AccessController.doPrivileged(Native Method)
	at org.eclipse.osgi.framework.internal.core.BundleContextImpl.startActivator(BundleContextImpl.java:702)
	... 69 more


This is an indication that the org.eclipse.equinox.registry bundle is not signed with the same signer as the org.eclipse.core.runtime.compatibility.registry bundle.  As it turns out both bundles ARE signed with the same signer, but the difference is the inner jar (runtime_registry_compatibility.jar) for the org.eclipse.core.runtime.compatibility.registry bundle is no longer signed in the CBI based build, but it is signed in the PDE based build.

[1] - http://download.eclipse.org/eclipse/downloads/drops4cbibased/I20130216-2011/testresults/linux.gtk.x86_6.0/org.eclipse.osgi.tests.AutomatedTests.txt</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218366</commentid>
    <comment_count>1</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-02-19 00:24:01 -0500</bug_when>
    <thetext>Igor, or Thanh, I&apos;m assuming this is a matter of how the &quot;jar signer&quot; plugin works. Is there a &apos;configuration&apos; we need to specify, or something?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218370</commentid>
    <comment_count>2</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2013-02-19 00:39:55 -0500</bug_when>
    <thetext>I am not sure I understand the question. Tycho does not sign nested jars, it is not possible to enable this and there are no plans to implement this. I thought we discussed this in details when I implemented jarsigning last year... or did I completely misunderstand the problem? (sorry, it&apos;s been a long day)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218396</commentid>
    <comment_count>3</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-02-19 03:12:47 -0500</bug_when>
    <thetext>Are you saying this is a CBI issue, not Tycho? If so, fine by me, as long as someone pays attention it it.

I do remember long &quot;talks&quot; in bugzilla (or, somewhere) that you could not pack200 inner jars but, I thought, could still sign as long as not pack200&apos;d. 

Perhaps others will have even other memories, but, that&apos;s mine. And, I tend to trust Tom&apos;s, when it comes down to low level OSGi security issues. (i.e. that it is important in some scenarios).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218577</commentid>
    <comment_count>4</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-02-19 09:18:04 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Perhaps others will have even other memories, but, that&apos;s mine. And, I tend
&gt; to trust Tom&apos;s, when it comes down to low level OSGi security issues. (i.e.
&gt; that it is important in some scenarios).

I do not want to overstate the importants of this issue.  The signing of inner jars has always been a bit of a grey area for how an OSGi framework should handle it.  The OSGi specification is clear on the handling of signed root bundle file but makes very little or no instructions for how signing of inner jars are handled.  For equinox the signature of the inner jar is used for two purposes.

1) If runtime verification is enabled the framework will verify the signed entries of the jar file are not corrupted.

2) If class certificates is enabled the framework will use the signing certificates of the signed jar to construct a proper CodeSource that answers the CodeSource.getCertificates() (see bug 110846 and bug 115719

For 2) it probably would be valid to simply use the signing certificates of the root bundle file, this would require a behavior change to the framework.

For 1) it could prove more problematic if a runtime really wants runtime verification of the jar content.  Without the signing of the inner jar it will be difficult to verify the jar is not corrupted.  Difficult but perhaps not impossible, but it would require a complete reading and verifying of the whole jar file against the signed entry for the jar file from the root bundle.  This would be very costly and we would not be able to provide any details on why a jar is corrupt (what files inside of it etc.) only that the whole jar is corrupted.  I would opt to not do any jar content verification at runtime unless the jar is signed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218593</commentid>
    <comment_count>5</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2013-02-19 09:27:49 -0500</bug_when>
    <thetext>Fair enough. Signing of nested jars should not be hard to implemented as long as it is not used together with pack200. The relevant code can be found in [1]

[1] https://git.eclipse.org/c/cbi/org.eclipse.cbi.maven.plugins.git/tree/eclipse-jarsigner-plugin/src/main/java/org/eclipse/cbi/maven/plugins/jarsigner/SignMojo.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218607</commentid>
    <comment_count>6</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-02-19 09:35:41 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Fair enough. Signing of nested jars should not be hard to implemented as
&gt; long as it is not used together with pack200. The relevant code can be found
&gt; in [1]

I think pack200 of inner jars causes pain for other reasons (build with Java 6 but provision on Java 7) and I would be for disabling pack200 of inner jars altogether.

&gt; 
&gt; [1]
&gt; https://git.eclipse.org/c/cbi/org.eclipse.cbi.maven.plugins.git/tree/eclipse-
&gt; jarsigner-plugin/src/main/java/org/eclipse/cbi/maven/plugins/jarsigner/
&gt; SignMojo.java

I think it would be &quot;good&quot; to get this working, but if this proves to be a difficult thing to get correct then I am also willing to make the behavior change to the framework from comment 2 to provide a proper CodeSource certificates in the case where the root bundle file is signed but the inner jars are not.  But I will still not do any runtime content validation unless the inner jar is signed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218615</commentid>
    <comment_count>7</comment_count>
    <who name="Igor Fedorenko">igor</who>
    <bug_when>2013-02-19 09:42:32 -0500</bug_when>
    <thetext>Changing cbi jarsigner to sign nested jars should not be hard, and this is what I would recommend. The signer is ~200 LOC now and pretty much any java developer should be able to add logic to extract, sign and repack nested jars to the signer.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2263040</commentid>
    <comment_count>8</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-05-24 23:46:25 -0400</bug_when>
    <thetext>On behalf of a Platform client, there&apos;s certain classes of &quot;JUnit tests&quot; which can no longer be ran, without having our own (Platform&apos;s) inner jars signed. 

The user (see bug 406942) actually thinks it is a &quot;blocker&quot;, but I do not know, yet, if there are work arounds. But, may change it to blocker, if I find there are not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2263284</commentid>
    <comment_count>9</comment_count>
    <who name="Jan Sievers">jan.sievers</who>
    <bug_when>2013-05-27 01:45:00 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; The user (see bug 406942) actually thinks it is a &quot;blocker&quot;

hm. seems bug 406942 is unrelated to signing. maybe a typo?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2263286</commentid>
    <comment_count>10</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-05-27 01:53:51 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; (In reply to comment #8)
&gt; &gt; The user (see bug 406942) actually thinks it is a &quot;blocker&quot;
&gt; 
&gt; hm. seems bug 406942 is unrelated to signing. maybe a typo?

Yes, sorry, meant bug 408901.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267035</commentid>
    <comment_count>11</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-03 10:26:06 -0400</bug_when>
    <thetext>I spent some time working on a patch for this and finally came up with a working solution. I will attach the patch for review on Gerrit once I clean it up.

I have a concern however after reading about pack200 normalize. Since we run the pack200a first before the signing plugin, if we sign inner jars we will have to extract the jar to get to the inner jars, sign them and pack a new outer jar. Which means the work done by the pack200a is now undone.

Should the signing of the inner jars really be done in this step? or maybe we need to add an execution before pack200a happens to sign the inner jars first?


Some other questions I had while working on this:

Should we sign all inner jars? or should the user provide a list of inner jars to sign?

Can there be inner, inner jars? how recursive does this need to be?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267110</commentid>
    <comment_count>12</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-03 11:35:53 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; Should the signing of the inner jars really be done in this step? or maybe
&gt; we need to add an execution before pack200a happens to sign the inner jars
&gt; first?

Went back and reread the previous comments, sounds like if we want to sign inner jars, we should not enable pack200 for the jar (does this mean the outer jar, or the inner jar?). Unless I misunderstood?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267238</commentid>
    <comment_count>13</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-03 14:00:55 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; I will attach the patch for review on Gerrit once I clean it up.

Pushed the patch to Gerrit:

https://git.eclipse.org/r/13514</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267264</commentid>
    <comment_count>14</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-06-03 14:32:59 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; (In reply to comment #11)
&gt; &gt; Should the signing of the inner jars really be done in this step? or maybe
&gt; &gt; we need to add an execution before pack200a happens to sign the inner jars
&gt; &gt; first?
&gt; 
&gt; Went back and reread the previous comments, sounds like if we want to sign
&gt; inner jars, we should not enable pack200 for the jar (does this mean the
&gt; outer jar, or the inner jar?). Unless I misunderstood?

It means the inner jar. In short, we never want to pack200 inner jars, so we do not need to &quot;condition&quot; them first. We just want them signed. 

The &quot;outter jar&quot;, as a whole, still needs to be conditioned, as a whole, before doing any signing ... but, that doesn&apos;t need to be done to the inner jars.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267272</commentid>
    <comment_count>15</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-06-03 14:47:20 -0400</bug_when>
    <thetext>(In reply to comment #11)

&gt; 
&gt; Should we sign all inner jars? or should the user provide a list of inner
&gt; jars to sign?

I think the default should be to sign all inner jars. BUT, there is already a mechanism for users (bundle providers) to say &quot;do not sign inner jars&quot;. It is part of the eclipse.inf file. The significant properties are, from 
http://wiki.eclipse.org/JarProcessor_Options, 

jarprocessor.exclude.children.sign
jarprocessor.exclude.children

And, the ones already looked at by that code
jarprocessor.exclude.sign
jarprocessor.exclude

imply &quot;not children either&quot;. 

I have sometimes wondered if the deluxe solution is to also provide some &quot;plugin configuration&quot;, but I don&apos;t think that&apos;s necessary since there is already a mechanism, and then you&apos;d have to check if if they contradicted each other and give a warning if they did, etc. That&apos;s my advice, anyway, is just to use the existing eclipse.inf file. 

&gt; 
&gt; Can there be inner, inner jars? how recursive does this need to be?

This, I am not sure about. Assuming you mean a jar inside the jar that is already in the bundled jar ... As far as I know, that has not been done in the past, but am not sure and would have to study &quot;jarprocessor&quot; code to know for sure. [But, I&apos;d suggest not to worry about it, in the &quot;first draft&quot; of the fix.]. 

HTH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272589</commentid>
    <comment_count>16</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-13 16:18:05 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; The &quot;outter jar&quot;, as a whole, still needs to be conditioned, as a whole,
&gt; before doing any signing ... but, that doesn&apos;t need to be done to the inner
&gt; jars.

Hmm I&apos;m not sure what the best solution here is now. Here&apos;s how the process today works (without signing inner jars).

1. run tycho-pack200a-plugin (normalize)
2. run eclipse-jarsigner-plugin (sign)
3. run tycho-pack200b-plugin (pack)

My current proposed implementation invalidates the work done by pack200a since to sign the inner jars I&apos;m extracting the jar and and creating a new jar. If I reimplement what the pack200a plugin is doing inside jarsigner to normalize after signing the inner jars that seems redundant to me.

I feel like there should be a step before pack200a which signs the inner jars rather than having the jarsigner do that. Maybe either implementing inner jar signing as a new &quot;goal&quot; that&apos;s part of the jarsigner and run multiple executions, or implementing it as a new plugin. In either case this new step would be inserted before pack200a executes.

To recap I think these are the options for implementation:

1. Implement the pack200 normalize in jarsigner and use it after inner jars are signed (seems like redundant effort?)
2. Implement inner jarsigner as a new goal to run before (tycho-pack200a-plugin)
3. Implement inner jarsigner as a new plugin to run before (tycho-pack200a-plugin)

At this point I think I will try implementing option 3 to try it out and see what happens.


(In reply to comment #15)
&gt; I have sometimes wondered if the deluxe solution is to also provide some
&gt; &quot;plugin configuration&quot;, but I don&apos;t think that&apos;s necessary since there is
&gt; already a mechanism, and then you&apos;d have to check if if they contradicted
&gt; each other and give a warning if they did, etc. That&apos;s my advice, anyway, is
&gt; just to use the existing eclipse.inf file. 

Agreed I think using existing mechanisms is best.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272596</commentid>
    <comment_count>17</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-06-13 16:35:39 -0400</bug_when>
    <thetext>(In reply to comment #16)
&gt; (In reply to comment #14)

&gt; My current proposed implementation invalidates the work done by pack200a
&gt; since to sign the inner jars I&apos;m extracting the jar and and creating a new
&gt; jar. 

No, I think that&apos;s fine, it does not invalidate it (I don&apos;t think). Conceptually, all the pack200a does (well, I&apos;m assuming all it does :) is call pack200 and it &quot;adjusts&quot; the .class files it can find exactly like the pack200b step does but leaves the bundle jar in an un-gzipped form (and pretty sure it ignores inner jars, just like it would ignore .gif files or similar). Its the &quot;adjustment&quot; or normalization of the .class files that&apos;s important, so that then later, when it is done again during pack200b, there is really no change to those .class files, hence they do not invalidate the signing. Might take some code digging or testing to confirm, but pretty sure the first pack200a would not do anything &quot;recursively into inner jars&quot; and otherwise, its perfectly valid to change that &quot;blob of data&quot; inside the outer jar. 

That&apos;s my theory, anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272609</commentid>
    <comment_count>18</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-13 16:55:45 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #16)
&gt; &gt; (In reply to comment #14)
&gt; 
&gt; &gt; My current proposed implementation invalidates the work done by pack200a
&gt; &gt; since to sign the inner jars I&apos;m extracting the jar and and creating a new
&gt; &gt; jar. 
&gt; 
&gt; No, I think that&apos;s fine, it does not invalidate it (I don&apos;t think).
&gt; Conceptually, all the pack200a does (well, I&apos;m assuming all it does :) is
&gt; call pack200 and it &quot;adjusts&quot; the .class files it can find exactly like the
&gt; pack200b step does but leaves the bundle jar in an un-gzipped form (and
&gt; pretty sure it ignores inner jars, just like it would ignore .gif files or
&gt; similar). Its the &quot;adjustment&quot; or normalization of the .class files that&apos;s
&gt; important, so that then later, when it is done again during pack200b, there
&gt; is really no change to those .class files, hence they do not invalidate the
&gt; signing. Might take some code digging or testing to confirm, but pretty sure
&gt; the first pack200a would not do anything &quot;recursively into inner jars&quot; and
&gt; otherwise, its perfectly valid to change that &quot;blob of data&quot; inside the
&gt; outer jar. 
&gt; 

Just want to make sure I understand... I was worried about the outer jar because the way I&apos;m doing it is I extract all the data in the outer jar, and create a brand new outer jar. I figure since it produces a brand new outer jar the work that pack200a did is no longer valid because it did processing on the old outer jar. The reason I did this was because I couldn&apos;t find a way in Java to update a jar, so I opted to extract, do what&apos;s necessary to sign inner jars and create a new jar from the extracted folder.

I guess my assumption here maybe incorrect?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272617</commentid>
    <comment_count>19</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-06-13 17:35:04 -0400</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #17)
&gt; &gt; (In reply to comment #16)
&gt; &gt; &gt; (In reply to comment #14)
&gt; &gt; 

&gt; 
&gt; I guess my assumption here maybe incorrect?

I think so. There&apos;s nothing really wrong with your option 3 either ... but, it has the same assumption ... that pack200a does not touch the &quot;inner jars&quot; ... if it did, that&apos;d invalidate the signature. The initial &quot;conditioning&quot; doesn&apos;t do anything &quot;sensitive&quot;, just &quot;moves around&quot; some .class data so it will compress better (once it is compressed in stepb) so as long as you use the same .class files when you &quot;recreate&quot; the jar, i think it&apos;ll be fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272624</commentid>
    <comment_count>20</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-13 17:55:35 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; I think so. There&apos;s nothing really wrong with your option 3 either ... but,
&gt; it has the same assumption ... that pack200a does not touch the &quot;inner jars&quot;
&gt; ... if it did, that&apos;d invalidate the signature. The initial &quot;conditioning&quot;
&gt; doesn&apos;t do anything &quot;sensitive&quot;, just &quot;moves around&quot; some .class data so it
&gt; will compress better (once it is compressed in stepb) so as long as you use
&gt; the same .class files when you &quot;recreate&quot; the jar, i think it&apos;ll be fine.

Thanks, I think I have a better understanding of what pack200 is doing now (or should). I guess I need to run some tests to make sure the current proposed code works as we expect.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274088</commentid>
    <comment_count>21</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-06-18 14:41:28 -0400</bug_when>
    <thetext>I ran a full build with my patch from https://git.eclipse.org/r/13514 and it ran successfully. Unfortunately the final produced Eclipse SDK didn&apos;t include the jars with the signed inner jars which likely has to do with the baseline comparator getting in the way and replacing my jars.

Interestingly I was able to reproduce the exception:

    &quot;org.eclipse.core.runtime.IExtension&quot;&apos;s signer information does not match signer


and saw it disappear when I manually copied my custom built org.eclipse.core.runtime.compatibility.registry with signed inner jar over and saw the exception not appear.
(I used Fabio&apos;s steps from bug 408901 comment 3)

I think next steps is to merge the code and test this plugin in a production build. I&apos;ll do this when the Luna branch is ready.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283352</commentid>
    <comment_count>22</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-11 10:26:11 -0400</bug_when>
    <thetext>As a consequence of my plan to push changes for bug 388878 changing CBI plugins version to 1.0.4-SNAPSHOT, this new jarsigner plugin will also get tested in the next build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283481</commentid>
    <comment_count>23</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-11 13:48:39 -0400</bug_when>
    <thetext>Was running a local test build before I push the changes and noticed this snippet of output below. The tests bundles have numerous inner jars that will get signed during the build. I&apos;m not sure if test inner jars need to be signed but it&apos;s adding quite a bit of time to the build.




[INFO] --- eclipse-jarsigner-plugin:1.0.4-SNAPSHOT:sign (sign) @ org.eclipse.equinox.p2.tests ---
[INFO] Searching org.eclipse.equinox.p2.tests-1.5.0-SNAPSHOT.jar for inner jars...
[INFO] Signed testData/directorywatcher2/org.junit_3.8.2.v200706111738/junit.jar in 2 seconds.
[INFO] Signed testData/directorywatcher2/org.eclipse.osgi.services_3.1.200.v20070605.jar in 1 seconds.
[INFO] Signed testData/directorywatcher2/org.eclipse.equinox.jsp.jasper.registry_1.0.0.v20070827.jar in 1 seconds.
[INFO] Signed testData/VerifierBundle35/org.eclipse.equinox.p2.tests.verifier_1.0.0.jar in 1 seconds.
[INFO] Signed testData/bug306279/repo/helios/content.jar in 7 seconds.
[INFO] Signed testData/bug306279/repo/riena/content.jar in 1 seconds.
[INFO] Signed testData/bug306279/repo/rienatoolbox-a/content.jar in 7 seconds.
[INFO] Signed testData/permissiveSlicer/content.jar in 2 seconds.
[INFO] Signed testData/testLargeConflict/repo2/content.jar in 2 seconds.
[INFO] Signed testData/testLargeConflict/repo1/content.jar in 2 seconds.
[INFO] Signed testData/updatesite/siteurl2/siteurl/plugins/test.fragment_1.0.0.jar in 1 seconds.
[INFO] Signed testData/updatesite/siteurl2/siteurl/plugins/test.bundle_1.0.0.jar in 1 seconds.
[INFO] Signed testData/updatesite/siteurl2/siteurl/features/test.feature_1.0.0.jar in 1 seconds.
[INFO] Signed testData/updatesite/missingUpdateURLFeature/features/test.featurewithmissingupdateurl_1.0.0.jar in 1 seconds.
[INFO] Signed testData/updatesite/baddigestbadsite/plugins/test.fragment_1.0.0.jar in 1 seconds.
[INFO] Signed testData/updatesite/baddigestbadsite/plugins/test.bundle_1.0.0.jar in 2 seconds.
[INFO] Signed testData/updatesite/baddigestbadsite/features/test.feature_1.0.0.jar in 2 seconds.
[INFO] Signed testData/updatesite/digesturl2/plugins/test.fragment_1.0.0.jar in 2 seconds.
[INFO] Signed testData/updatesite/digesturl2/plugins/test.bundle_1.0.0.jar in 2 seconds.
[INFO] Signed testData/updatesite/digesturl2/features-usedigestinstead/test.feature_1.0.0.jar in 3 seconds.
[INFO] Signed testData/updatesite/siteFeatureReferences/plugins/test.fragment_1.0.0.jar in 3 seconds.
[INFO] Signed testData/updatesite/siteFeatureReferences/plugins/test.bundle_1.0.0.jar in 1 seconds.
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283514</commentid>
    <comment_count>24</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-07-11 14:48:29 -0400</bug_when>
    <thetext>(In reply to comment #23)
&gt; Was running a local test build before I push the changes and noticed this
&gt; snippet of output below. The tests bundles have numerous inner jars that
&gt; will get signed during the build. I&apos;m not sure if test inner jars need to be
&gt; signed but it&apos;s adding quite a bit of time to the build.
&gt; 
&gt; 
&gt; [INFO] Signed testData/testLargeConflict/repo2/content.jar in 2 seconds.
&gt; [INFO] Signed testData/testLargeConflict/repo1/content.jar in 2 seconds.

It seems you are signing jars that are pre-built and in our source git repo, I would guess that in most all cases we did not intend for these pre-built test jars to be signed.  My initial reaction is that you should only sign jars that are built during the build process, but I&apos;m not sure you know the difference at this point in the build.  I&apos;m not sure what inner jars the old PDE-Build process decided to sign or not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283533</commentid>
    <comment_count>25</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-11 15:10:53 -0400</bug_when>
    <thetext>The next Luna build should include the inner jarsigner feature:

http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/commit/?id=9a393d0206a08ce987fbbe043b4ad63303ecfd80



(In reply to comment #24)
&gt; It seems you are signing jars that are pre-built and in our source git repo,
&gt; I would guess that in most all cases we did not intend for these pre-built
&gt; test jars to be signed.  My initial reaction is that you should only sign
&gt; jars that are built during the build process, but I&apos;m not sure you know the
&gt; difference at this point in the build.  I&apos;m not sure what inner jars the old
&gt; PDE-Build process decided to sign or not.

Your right, my code at this point doesn&apos;t know the difference. Maybe we need to add eclipse.inf file options for test bundles that shouldn&apos;t be signed?

http://wiki.eclipse.org/JarProcessor_Options</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283598</commentid>
    <comment_count>26</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-07-11 15:40:54 -0400</bug_when>
    <thetext>(In reply to comment #25)
&gt; The next Luna build should include the inner jarsigner feature:
&gt; 
&gt; ... Maybe we need
&gt; to add eclipse.inf file options for test bundles that shouldn&apos;t be signed?
&gt; 
&gt; http://wiki.eclipse.org/JarProcessor_Options

General reminder, we don&apos;t sign nightlies, so won&apos;t be until I or M build before we &quot;see in action&quot; (right?) ... I assume the executable signing is controlled by same profile? I&apos;ve not looked at aggregator code yet, but that&apos;s the way we would want it. 

Guess I could ... and will plan to ... change that &quot;don&apos;t sign nightlies&quot; switch for a week or so, to help flush out any issues before I-build. 

Agree we should not try to be clever about when to sign and when not ... just go by what the eclipse.inf file says. In most cases, I can&apos;t imagine it hurting anything (and time doesn&apos;t seem that much extra) ... but an announcement to platform-releng-dev should be made for those that want/need to not sign inner jars in test bundles. This is &quot;special&quot; for test bundles, because with PDE build, we did not sign any of the test bundles. So code bundles should already be &quot;marked&quot; correctly in their eclipse.inf files.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283616</commentid>
    <comment_count>27</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-07-11 15:58:44 -0400</bug_when>
    <thetext>Here&apos;s the commit that will cause nightlies to be signed: 

http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/commit/?id=d845cbe182aabed32fa561eae145832f4f43f2e3

It can be reverted after we confirm &quot;all is well&quot;. 

(I&apos;ll send note to covering this, and the eclipse.inf issue).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283618</commentid>
    <comment_count>28</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-07-11 16:00:49 -0400</bug_when>
    <thetext>I&apos;ve marked as backport, since I think once we confirm all is working as expected, we&apos;d want to put &quot;signing&quot; in maintenance branch too, for Kepler SR1. We can open a new bug for that ... but, just marking whiteboard to help not to forget.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283621</commentid>
    <comment_count>29</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-11 16:02:44 -0400</bug_when>
    <thetext>(In reply to comment #27)
&gt; Here&apos;s the commit that will cause nightlies to be signed: 
&gt; 
&gt; http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/
&gt; commit/?id=d845cbe182aabed32fa561eae145832f4f43f2e3
&gt; 
&gt; It can be reverted after we confirm &quot;all is well&quot;. 
&gt; 
&gt; (I&apos;ll send note to covering this, and the eclipse.inf issue).

Thanks David, one other thought I just had is we might not see any inner jars signed in the final product for most bundles as well, unless their qualifiers are forced to update due to the comparator replacing issue. Would it be worth disabling the comparator or bumping a few bundles we know have inner jars?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283635</commentid>
    <comment_count>30</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-07-11 16:23:39 -0400</bug_when>
    <thetext>(In reply to comment #29)
&gt; (In reply to comment #27)
&gt; &gt; Here&apos;s the commit that will cause nightlies to be signed: 
&gt; &gt; 
&gt; &gt; http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/
&gt; &gt; commit/?id=d845cbe182aabed32fa561eae145832f4f43f2e3
&gt; &gt; 
&gt; &gt; It can be reverted after we confirm &quot;all is well&quot;. 
&gt; &gt; 
&gt; &gt; (I&apos;ll send note to covering this, and the eclipse.inf issue).
&gt; 
&gt; Thanks David, one other thought I just had is we might not see any inner
&gt; jars signed in the final product for most bundles as well, unless their
&gt; qualifiers are forced to update due to the comparator replacing issue. Would
&gt; it be worth disabling the comparator or bumping a few bundles we know have
&gt; inner jars?

Good reminder. I think we&apos;ll let that &quot;shake out&quot; in comparator ... I think Tom is the only one that really &quot;needs&quot; this for one of his bundles so he might want to ... and eventually he may want to restore the test cases he changed that showed the issue in the first place. 

[And, glad I read this before sending my reminder note :) ]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283891</commentid>
    <comment_count>31</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-07-12 09:21:30 -0400</bug_when>
    <thetext>(In reply to comment #30)

&gt; Good reminder. I think we&apos;ll let that &quot;shake out&quot; in comparator ... I think
&gt; Tom is the only one that really &quot;needs&quot; this for one of his bundles so he
&gt; might want to ... and eventually he may want to restore the test cases he
&gt; changed that showed the issue in the first place. 

Done in bug 412852 for the org.eclipse.core.runtime.compatibility.registry bundle.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284599</commentid>
    <comment_count>32</comment_count>
    <who name="John Arthorne">john_arthorne</who>
    <bug_when>2013-07-15 14:33:24 -0400</bug_when>
    <thetext>From bug 412850 it sounds like we don&apos;t currently have a viable way to exclude child jars from being signed in our CBI build? If I understand that correctly, should we revert this change until we sort that out? If the current choice is between signing all inner jars, or none, I think none is better.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284611</commentid>
    <comment_count>33</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-15 15:00:05 -0400</bug_when>
    <thetext>(In reply to comment #32)
&gt; From bug 412850 it sounds like we don&apos;t currently have a viable way to
&gt; exclude child jars from being signed in our CBI build? If I understand that
&gt; correctly, should we revert this change until we sort that out? If the
&gt; current choice is between signing all inner jars, or none, I think none is
&gt; better.

I can back this patch out of CBI until we find a Tycho fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284632</commentid>
    <comment_count>34</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-07-15 15:42:11 -0400</bug_when>
    <thetext>(In reply to comment #33)
&gt; (In reply to comment #32)
&gt; &gt; From bug 412850 it sounds like we don&apos;t currently have a viable way to
&gt; &gt; exclude child jars from being signed in our CBI build? If I understand that
&gt; &gt; correctly, should we revert this change until we sort that out? If the
&gt; &gt; current choice is between signing all inner jars, or none, I think none is
&gt; &gt; better.
&gt; 
&gt; I can back this patch out of CBI until we find a Tycho fix.

I agree, best to back out for I and M builds (Tuesday and Wednesday). 

Feel free to add back Wednesday afternoon if you/we have figured out how to &quot;exclude children&quot; by then.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284675</commentid>
    <comment_count>35</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-07-15 16:38:25 -0400</bug_when>
    <thetext>I went ahead and reverted this patch, it should be removed in the next 1.0.4-SNAPSHOT build.

http://git.eclipse.org/c/cbi/org.eclipse.cbi.maven.plugins.git/commit/?id=5fc9caf7d49996134a53c0fb5f8be492174ef02d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318929</commentid>
    <comment_count>36</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-10-16 09:54:46 -0400</bug_when>
    <thetext>David, do we still need to backport this or can this bug closed?


I think we&apos;ve been successfully signing inner jars for awhile now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318936</commentid>
    <comment_count>37</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-10-16 10:06:03 -0400</bug_when>
    <thetext>I can&apos;t speak for CBI, but in the SDK there were quite some changes involved and distributed over several repos to achieve the current state. So, unless there&apos;s a really critical bug we fix with this, I&apos;ll -1 the backport for the SDK.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318939</commentid>
    <comment_count>38</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-10-16 10:17:10 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #37)
&gt; I can&apos;t speak for CBI, but in the SDK there were quite some changes involved
&gt; and distributed over several repos to achieve the current state. So, unless
&gt; there&apos;s a really critical bug we fix with this, I&apos;ll -1 the backport for the
&gt; SDK.

And, I&apos;ll punt to Tom. I know there are some things that &quot;just don&apos;t work&quot;, if some of the core inner jars are not signed (such as, if I recall, some test frameworks ... I don&apos;t recall which ... won&apos;t work with 4.3.x) ... but not sure how &quot;main stream&quot; those cases are. (I personally would like to see it fixed, since it&apos;s a regression compared to earlier releases where we used PDE to do builds ... but, again, don&apos;t recall use-cases right off ... hoping Tom knows off the top of his head).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318994</commentid>
    <comment_count>39</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-10-16 11:20:36 -0400</bug_when>
    <thetext>(In reply to David Williams from comment #38)
&gt; ... but, again, don&apos;t recall use-cases right off ... hoping
&gt; Tom knows off the top of his head).

See bug 408901 for the details.  The use-case is running the extension registry AND its compatibility fragment org.eclipse.core.runtime.compatibility.registry jars outside of OSGi.  For example, using a URLClassLoader.  In this case the URLClassLoader will fail to load classes from the same package which are not signed by the same certificate.

The org.eclipse.core.runtime.compatibility.registry fragment contains an inner jar that is not signed, but org.eclipse.equinox.registry jar is signed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319000</commentid>
    <comment_count>40</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-10-16 11:29:09 -0400</bug_when>
    <thetext>(In reply to Thomas Watson from comment #39)
&gt; (In reply to David Williams from comment #38)
&gt; &gt; ... but, again, don&apos;t recall use-cases right off ... hoping
&gt; &gt; Tom knows off the top of his head).
&gt; 
&gt; See bug 408901 for the details.  The use-case is running the extension
&gt; registry AND its compatibility fragment
&gt; org.eclipse.core.runtime.compatibility.registry jars outside of OSGi.  For
&gt; example, using a URLClassLoader.  In this case the URLClassLoader will fail
&gt; to load classes from the same package which are not signed by the same
&gt; certificate.
&gt; 
&gt; The org.eclipse.core.runtime.compatibility.registry fragment contains an
&gt; inner jar that is not signed, but org.eclipse.equinox.registry jar is signed.

Tom, do you consider this critical enough for SR2? The problem is, that if we switch the policy, all other bundles also have to spend time and backport their changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319023</commentid>
    <comment_count>41</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2013-10-16 12:07:08 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #40)
&gt; Tom, do you consider this critical enough for SR2? The problem is, that if
&gt; we switch the policy, all other bundles also have to spend time and backport
&gt; their changes.

The only workaround for the use-case is to either stop using the compatibility fragment jar (that is not signed) or to strip the signatures from all the other jars that contribute to the org.eclipse.core.runtime package.

Its not really a super great work around, but I also fear that the level of work required to fix this is not well suited for SR2.  Especially because this is not really considered a main stream use-case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319310</commentid>
    <comment_count>42</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-10-17 03:42:21 -0400</bug_when>
    <thetext>(In reply to Thomas Watson from comment #41)
&gt; (In reply to Dani Megert from comment #40)
&gt; &gt; Tom, do you consider this critical enough for SR2? The problem is, that if
&gt; &gt; we switch the policy, all other bundles also have to spend time and backport
&gt; &gt; their changes.
&gt; 
&gt; The only workaround for the use-case is to either stop using the
&gt; compatibility fragment jar (that is not signed) or to strip the signatures
&gt; from all the other jars that contribute to the org.eclipse.core.runtime
&gt; package.
&gt; 
&gt; Its not really a super great work around, but I also fear that the level of
&gt; work required to fix this is not well suited for SR2.  Especially because
&gt; this is not really considered a main stream use-case.

David, maybe we could address this in a different way for SR2: instead of signing by default with opt-out (&lt;defaultSigning-excludeInnerJars&gt;), allow to opt-in in SR2. That would allow to only fix Tom&apos;s issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319502</commentid>
    <comment_count>43</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2013-10-17 09:09:51 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #42)
&gt; (In reply to Thomas Watson from comment #41)
&gt; &gt; (In reply to Dani Megert from comment #40)
&gt; &gt; &gt; Tom, do you consider this critical enough for SR2? The problem is, that if
&gt; &gt; &gt; we switch the policy, all other bundles also have to spend time and backport
&gt; &gt; &gt; their changes.
&gt; &gt; 
&gt; &gt; The only workaround for the use-case is to either stop using the
&gt; &gt; compatibility fragment jar (that is not signed) or to strip the signatures
&gt; &gt; from all the other jars that contribute to the org.eclipse.core.runtime
&gt; &gt; package.
&gt; &gt; 
&gt; &gt; Its not really a super great work around, but I also fear that the level of
&gt; &gt; work required to fix this is not well suited for SR2.  Especially because
&gt; &gt; this is not really considered a main stream use-case.
&gt; 
&gt; David, maybe we could address this in a different way for SR2: instead of
&gt; signing by default with opt-out (&lt;defaultSigning-excludeInnerJars&gt;), allow
&gt; to opt-in in SR2. That would allow to only fix Tom&apos;s issue.

I don&apos;t recall why we didn&apos;t do it that way in the first place, but I&apos;d hesitate to &quot;diverge&quot; the streams ... that&apos;ll just get more confusing in the long run. Guess I was hoping we&apos;d have a nice list of where it had been fixed in Luna stream, and it&apos;d be simpler, second time around, to cherry pick those fixes back to Kepler. If even that is too much work for our committers, I&apos;d skip it, unless/until there was a more definitive need requested by community or adopters. 

If/When there is any interest, I&apos;d be glad to write a script to &apos;git log grep&apos; to find where changed for Luna. 

Otherwise I&apos;d count as fixed and not worry about the regression in Kepler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2320595</commentid>
    <comment_count>44</comment_count>
    <who name="Thanh Ha">thanh.ha</who>
    <bug_when>2013-10-18 22:18:54 -0400</bug_when>
    <thetext>Thanks everyone. I guess I&apos;ll just consider this fixed. If there&apos;s something more to do lets do it in new bug.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>