<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425741</bug_id>
          
          <creation_ts>2014-01-15 07:07:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] ITypeBinding#getTypeDeclaration() doesn&apos;t strip off type annotations</short_desc>
          <delta_ts>2014-01-23 11:53:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>409586</dependson>
          <blocked>417937</blocked>
    
    <blocked>421628</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>manju656</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2349889</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-15 07:07:18 -0500</bug_when>
    <thetext>As far as I understood bug 409586, ITypeBinding#getTypeDeclaration() should always strip off type annotations from an ITypeBinding.

This currently works fine for a parameterized type binding, but it doesn&apos;t work for other kinds (primitive, class, interface, raw, array, ...).


package bug;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
import java.util.List;

@Target(ElementType.TYPE_USE)  
@interface A {
    int value() default 0;
}

public class GetTypeDeclarationProblems {
    @A int primitive;
    @A Object clazz;
    java.lang.@A Object qualified;
    @A List raw;
    @A List&lt;@A(1) String&gt; parameterized;
    @A List&lt;@A(1) ?&gt; wild;
    @A String @A(1) [] array;
    @A List&lt;@A(1) String&gt; @A(2) [] array2;
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2349942</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-15 08:20:17 -0500</bug_when>
    <thetext>Srikanth, this is blocking progress in JDT UI w.r.t. jsr308.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350067</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-15 10:54:29 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #0)
&gt; As far as I understood bug 409586, ITypeBinding#getTypeDeclaration() should
&gt; always strip off type annotations from an ITypeBinding.

If you want this behavior, it can be implemented. Note that as per the present
javadoc: (for non parameterized types) &quot;this returns the same binding.&quot;

It does make sense to amend the javadoc and introduce the behavior you want.
A note about bug 409586: Annotated types are not implemented using ParameterizedTypeBinding - that was the old design. The present design and
implementation which was the subject of bug 409586 retains binding classification, while binding identity could change between annotated and
unannotated types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350258</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-15 15:29:50 -0500</bug_when>
    <thetext>One intended use case of #getTypeDeclaration() was to get rid of type annotations, so that ImportRewrite#addImport(..) wouldn&apos;t add annotations any more (bug 417937).

However, the example from bug 425216 comment 6 shows that a declaration binding can still carry type annotations if they are in the type declaration&apos;s modifier list.

Do the internal compiler bindings have a way to distinguish between
a) type annotations that stem from an annotated type reference
b) type annotations that stem from an annotated type declaration ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350472</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-16 06:00:09 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #3)
After a good night of sleep, I realized that this is not an issue.
&quot;ITypeBinding b&quot; is a declaration binding iff &quot;b.getTypeDeclaration() == b&quot;. In that case, the addImport operation should not add the type annotations.

Please implement the &quot;strip type annotations&quot; behavior for other type binding kinds as well. The #getTypeDeclaration() method already has the right name for this, and it makes sense to handle all cases where &quot;reference binding != declaration binding&quot; in the same way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2350914</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-16 23:10:07 -0500</bug_when>
    <thetext>Jay, please follow up - 

org.eclipse.jdt.core.dom.TypeBinding.getTypeDeclaration():

instead of 

return this;

we need to do:

return this.resolver.getTypeBinding(this.binding.unannotated())

that should be it + javadoc adjustments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353309</commentid>
    <comment_count>6</comment_count>
      <attachid>239246</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-23 00:55:59 -0500</bug_when>
    <thetext>Created attachment 239246
Fix with test + Javadoc update

Running the tests, will release after they complete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353366</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-23 04:06:30 -0500</bug_when>
    <thetext>Pushed the fix via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=68f185fc63132d7b106a1c7ca52ed6d004b96329</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353694</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-23 11:53:01 -0500</bug_when>
    <thetext>Looks good, thanks!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239246</attachid>
            <date>2014-01-23 00:55:00 -0500</date>
            <delta_ts>2014-01-23 03:45:35 -0500</delta_ts>
            <desc>Fix with test + Javadoc update</desc>
            <filename>Bug-425741.patch</filename>
            <type>text/plain</type>
            <size>4791</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDVhNjU5NTYuLjQ5Y2ZmMjQgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMzg2OSwzICszODY5LDQ0IEBACiAJCWFzc2Vy
dFRydWUoYXJyYXlUeXBlLmdldERpbWVuc2lvbnMoKSA9PSAzKTsKIAl9CisJLyoKKwkgKiBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDIwNDU4CisJICovCisJ
cHVibGljIHZvaWQgdGVzdEJ1ZzQyNTc0MSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewor
CQlTdHJpbmcgY29udGVudHMgPQorCQkJCSJAamF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChq
YXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBFX1VTRSlcbiIgKworCQkJCSJAaW50
ZXJmYWNlIEFubm90IHsgU3RyaW5nIHZhbHVlKCk7IH1cbiIgKworCQkJCSJAQW5ub3QoXCJkZWNs
XCIpIHB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJQEFubm90KFwiZmllbGRcIikgWCB4ID0g
bnVsbDtcbiIgKworCQkJCSIJcHVibGljIHZvaWQgZm9vKEBBbm5vdChcInBhcmFtXCIpIFggaSkg
e1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifSI7CisJCXRoaXMud29ya2luZ0NvcHkgPSBnZXRX
b3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0L1guamF2YSIsIHRydWUvKnJlc29sdmUq
Lyk7CisJCUFTVE5vZGUgbm9kZSA9IGJ1aWxkQVNUKGNvbnRlbnRzLCB0aGlzLndvcmtpbmdDb3B5
LCBmYWxzZSk7CisJCWFzc2VydEVxdWFscygiTm90IGEgY29tcGlsYXRpb24gdW5pdCIsIEFTVE5v
ZGUuQ09NUElMQVRJT05fVU5JVCwgbm9kZS5nZXROb2RlVHlwZSgpKTsKKwkJQ29tcGlsYXRpb25V
bml0IGNvbXBpbGF0aW9uVW5pdCA9IChDb21waWxhdGlvblVuaXQpIG5vZGU7CisJCW5vZGUgPSBn
ZXRBU1ROb2RlKGNvbXBpbGF0aW9uVW5pdCwgMSk7CisJCWFzc2VydEVxdWFscygiTm90IGEgdHlw
ZSBkZWNsYXJhdGlvbiIsIEFTVE5vZGUuVFlQRV9ERUNMQVJBVElPTiwgbm9kZS5nZXROb2RlVHlw
ZSgpKTsKKwkJRmllbGREZWNsYXJhdGlvbiBmaWVsZCA9ICgoVHlwZURlY2xhcmF0aW9uKSBub2Rl
KS5nZXRGaWVsZHMoKVswXTsKKwkJTGlzdCBmcmFnbWVudHMgPSBmaWVsZC5mcmFnbWVudHMoKTsK
KwkJSVR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nID0gZmllbGQuZ2V0VHlwZSgpLnJlc29sdmVCaW5k
aW5nKCk7CisJCUlBbm5vdGF0aW9uQmluZGluZ1tdIGFubm90cyA9IHR5cGVCaW5kaW5nLmdldFR5
cGVBbm5vdGF0aW9ucygpOworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCB0eXBlIGFubm90YXRp
b25zIiwgMSwgYW5ub3RzLmxlbmd0aCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IGFubm90
YXRpb24iLCAiQEFubm90KHZhbHVlID0gZmllbGQpIiwgYW5ub3RzWzBdLnRvU3RyaW5nKCkpOwor
CQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNsYXJh
dGlvbkZyYWdtZW50KSBmcmFnbWVudHMuZ2V0KDApOworCQl0eXBlQmluZGluZyA9IHR5cGVCaW5k
aW5nLmdldFR5cGVEZWNsYXJhdGlvbigpOworCQlhbm5vdHMgPSB0eXBlQmluZGluZy5nZXRUeXBl
QW5ub3RhdGlvbnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3QgdHlwZSBhbm5vdGF0aW9u
cyIsIDAsIGFubm90cy5sZW5ndGgpOworCQl0eXBlQmluZGluZyA9IGZyYWdtZW50LnJlc29sdmVC
aW5kaW5nKCkuZ2V0VHlwZSgpLmdldFR5cGVEZWNsYXJhdGlvbigpOworCQlhbm5vdHMgPSB0eXBl
QmluZGluZy5nZXRUeXBlQW5ub3RhdGlvbnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qg
dHlwZSBhbm5vdGF0aW9ucyIsIDAsIGFubm90cy5sZW5ndGgpOworCQlNZXRob2REZWNsYXJhdGlv
biBtZXRob2QgPSAoKFR5cGVEZWNsYXJhdGlvbikgbm9kZSkuZ2V0TWV0aG9kcygpWzBdOworCQlT
aW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uIHBhcmFtID0gKFNpbmdsZVZhcmlhYmxlRGVjbGFyYXRp
b24pIG1ldGhvZC5wYXJhbWV0ZXJzKCkuZ2V0KDApOworCQl0eXBlQmluZGluZyA9IHBhcmFtLmdl
dFR5cGUoKS5yZXNvbHZlQmluZGluZygpOworCQlhbm5vdHMgPSB0eXBlQmluZGluZy5nZXRUeXBl
QW5ub3RhdGlvbnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3QgdHlwZSBhbm5vdGF0aW9u
cyIsIDEsIGFubm90cy5sZW5ndGgpOworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBhbm5vdGF0
aW9uIiwgIkBBbm5vdCh2YWx1ZSA9IHBhcmFtKSIsIGFubm90c1swXS50b1N0cmluZygpKTsKKwkJ
dHlwZUJpbmRpbmcgPSB0eXBlQmluZGluZy5nZXRUeXBlRGVjbGFyYXRpb24oKTsKKwkJYW5ub3Rz
ID0gdHlwZUJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IHR5cGUgYW5ub3RhdGlvbnMiLCAwLCBhbm5vdHMubGVuZ3RoKTsKKwl9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0lUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9JVHlwZUJpbmRpbmcuamF2YQppbmRleCAxM2M5NmY4Li44NDIyZDcwIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUv
ZG9tL0lUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vSVR5cGVCaW5kaW5nLmphdmEKQEAgLTEsNCArMSw0IEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC01
NjIsNSArNTYyLDYgQEAKIAkgKiA8cD5BIGRpZmZlcmVudCBub24tZ2VuZXJpYyBiaW5kaW5nIHdp
bGwgYmUgcmV0dXJuZWQgd2hlbiBvbmUgb2YgdGhlIGRlY2xhcmluZwogCSAqIHR5cGVzL21ldGhv
ZHMgd2FzIHBhcmFtZXRlcml6ZWQuPC9wPgotCSAqIDxwPkZvciBvdGhlciB0eXBlIGJpbmRpbmdz
LCB0aGlzIHJldHVybnMgdGhlIHNhbWUgYmluZGluZy48L3A+CisJICogPHA+Rm9yIG90aGVyIHR5
cGUgYmluZGluZ3MsIHRoaXMgcmV0dXJucyB0aGUgYmluZGluZyBmb3IgdGhlIHR5cGUgZGVjbGFy
YXRpb24KKwkgKiBjb3JyZXNwb25kaW5nIHRvIHRoaXMgdHlwZSBiaW5kaW5nLjwvcD4KIAkgKgog
CSAqIEByZXR1cm4gdGhlIHR5cGUgYmluZGluZwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlQmluZGluZy5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlQmluZGlu
Zy5qYXZhCmluZGV4IDE0MGQzZTIuLmU4NWIyMTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vVHlwZUJpbmRpbmcuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVC
aW5kaW5nLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC00NjgsNSArNDY4LDUgQEAKIAkJaWYgKHRoaXMu
YmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykKIAkJCXJldHVybiB0
aGlzLnJlc29sdmVyLmdldFR5cGVCaW5kaW5nKCgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKXRo
aXMuYmluZGluZykuZ2VuZXJpY1R5cGUoKSk7Ci0JCXJldHVybiB0aGlzOworCQlyZXR1cm4gdGhp
cy5yZXNvbHZlci5nZXRUeXBlQmluZGluZyh0aGlzLmJpbmRpbmcudW5hbm5vdGF0ZWQoKSk7CiAJ
fQog
</data>

          </attachment>
      

    </bug>

</bugzilla>