<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>338118</bug_id>
          
          <creation_ts>2011-02-24 11:36:00 -0500</creation_ts>
          <short_desc>[compiler] CastExpression type should be changed to be a type reference and not an expression</short_desc>
          <delta_ts>2011-03-08 10:15:14 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Olivier Thomann">Olivier_Thomann</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>deepakazad</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="39500"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1888582</commentid>
    <comment_count>0</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-24 11:36:51 -0500</bug_when>
    <thetext>By construction, the type is always a type reference. So we should make this clear inside the CastExpression type itself so that we can actually remove a bunch of instanceof checks and clean up some code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888664</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-02-24 13:27:19 -0500</bug_when>
    <thetext>That cleanup would be great, but in my understanding the parser 
can NOT guarantee that the type is actually a type 
(that&apos;s how I read consumeCastExpressionLL1()).

Are you thinking of making the grammar smarter or of converting the expression
into a type reference inside CastExpression(Expression,Expression) ?

Excuse my curiosity :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888677</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-24 13:45:05 -0500</bug_when>
    <thetext>This is what I thought initially as well, but in order to get into consumeCastExpressionLL1(), it means that the rule InsideCastExpressionLL1 was called.
And this rule calls:
org.eclipse.jdt.internal.compiler.parser.Parser.consumeInsideCastExpressionLL1()
where the name is actually converted to a type reference.

So I believe that the parser can make sure that it is always a type reference. So there is no need to change the existing grammar.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888697</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-02-24 14:10:33 -0500</bug_when>
    <thetext>(In reply to comment #2)

cool!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888714</commentid>
    <comment_count>4</comment_count>
      <attachid>189730</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-24 14:23:50 -0500</bug_when>
    <thetext>Created attachment 189730
Possible fix

First draft.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888717</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-24 14:30:08 -0500</bug_when>
    <thetext>Another good reason to fix this is that this is actually mandatory to support jsr 308 (annotations on type).
Srikanth, I let you review the patch.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888753</commentid>
    <comment_count>6</comment_count>
      <attachid>189740</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-24 15:02:24 -0500</bug_when>
    <thetext>Created attachment 189740
Proposed fix

Same as before with some additional cleanup.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888960</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-25 00:24:19 -0500</bug_when>
    <thetext>Olivier, is this the same issue discussed here:
http://dev.eclipse.org/mhonarc/lists/jdt-core-dev/msg01909.html
or a different one ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1888961</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-25 00:26:18 -0500</bug_when>
    <thetext>May be not, as that issue was resolved under https://bugs.eclipse.org/bugs/show_bug.cgi?id=292364.

I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1889149</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-25 08:48:07 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; Olivier, is this the same issue discussed here:
&gt; http://dev.eclipse.org/mhonarc/lists/jdt-core-dev/msg01909.html
&gt; or a different one ?
yes, but to the difference that the fix for bug 292364 didn&apos;t go as far as this one does which means that the corresponding field inside the CastExpression class should be a type refererence and not a name reference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1890592</commentid>
    <comment_count>10</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-28 13:28:42 -0500</bug_when>
    <thetext>Released for 3.7M6.
Srikanth, this will be verified in the verification phase.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1894986</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-03-08 09:48:45 -0500</bug_when>
    <thetext>For the records:

For a minute I was puzzled about the additional casts to TypeReference
inside CompletionParser. It turns out these are safe based on the assumption
that consumeInsideCastExpression() has been called before, which in the
case of the CompletionParser indeed pushes a type reference onto the
expression stack.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1894987</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-03-08 09:50:27 -0500</bug_when>
    <thetext>Verified for 3.7 M6 via code inspection.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>189730</attachid>
            <date>2011-02-24 14:23:00 -0500</date>
            <delta_ts>2011-02-24 15:02:24 -0500</delta_ts>
            <desc>Possible fix</desc>
            <filename>patch_338118.txt</filename>
            <type>text/plain</type>
            <size>23518</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2Nv
bXBsZXRlL0NvbXBsZXRpb25QYXJzZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNy
b290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uUGFyc2VyLmphdmEsdg0K
cmV0cmlldmluZyByZXZpc2lvbiAxLjIxOQ0KZGlmZiAtdSAtcjEuMjE5IENvbXBsZXRpb25QYXJz
ZXIuamF2YQ0KLS0tIGNvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Np
c3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCTMgRmViIDIwMTEgMTY6NDM6MjMgLTAw
MDAJMS4yMTkNCisrKyBjb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNz
aXN0L2NvbXBsZXRlL0NvbXBsZXRpb25QYXJzZXIuamF2YQkyNCBGZWIgMjAxMSAxOToyMjowOSAt
MDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFs
bCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRl
cmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTc5OSw3ICs3OTksNyBAQA0KIAkJCQlF
eHByZXNzaW9uIGNhc3RUeXBlOw0KIAkJCQlpZih0aGlzLmV4cHJlc3Npb25QdHIgPiAwDQogCQkJ
CQkmJiAoKGNhc3RUeXBlID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRy
LTFdKSBpbnN0YW5jZW9mIFR5cGVSZWZlcmVuY2UpKSB7DQotCQkJCQlDYXN0RXhwcmVzc2lvbiBj
YXN0ID0gbmV3IENhc3RFeHByZXNzaW9uKGV4cHJlc3Npb24sIGNhc3RUeXBlKTsNCisJCQkJCUNh
c3RFeHByZXNzaW9uIGNhc3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhwcmVzc2lvbiwgKFR5cGVS
ZWZlcmVuY2UpIGNhc3RUeXBlKTsNCiAJCQkJCWNhc3Quc291cmNlU3RhcnQgPSBjYXN0VHlwZS5z
b3VyY2VTdGFydDsNCiAJCQkJCWNhc3Quc291cmNlRW5kPSBleHByZXNzaW9uLnNvdXJjZUVuZDsN
CiAJCQkJCXRoaXMuYXNzaXN0Tm9kZVBhcmVudCA9IGNhc3Q7DQpAQCAtMjA1NiwyMCArMjA1Niwy
NCBAQA0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVDYXN0RXhwcmVzc2lvbldpdGhQcmltaXRpdmVU
eXBlKCkgew0KIAlwb3BFbGVtZW50KEtfQ0FTVF9TVEFURU1FTlQpOw0KIA0KLQlFeHByZXNzaW9u
IGV4cCwgY2FzdCwgY2FzdFR5cGU7DQorCUV4cHJlc3Npb24gZXhwOw0KKwlFeHByZXNzaW9uIGNh
c3Q7DQorCVR5cGVSZWZlcmVuY2UgY2FzdFR5cGU7DQogCXRoaXMuZXhwcmVzc2lvblB0ci0tOw0K
IAl0aGlzLmV4cHJlc3Npb25MZW5ndGhQdHItLTsNCi0JdGhpcy5leHByZXNzaW9uU3RhY2tbdGhp
cy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhwID0gdGhpcy5l
eHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyKzFdLCBjYXN0VHlwZSA9IHRoaXMuZXhw
cmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0pOw0KKwl0aGlzLmV4cHJlc3Npb25TdGFj
a1t0aGlzLmV4cHJlc3Npb25QdHJdID0gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lvbihleHAgPSB0
aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHIrMV0sIGNhc3RUeXBlID0gKFR5
cGVSZWZlcmVuY2UpIHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0pOw0K
IAljYXN0LnNvdXJjZVN0YXJ0ID0gY2FzdFR5cGUuc291cmNlU3RhcnQgLSAxOw0KIAljYXN0LnNv
dXJjZUVuZCA9IGV4cC5zb3VyY2VFbmQ7DQogfQ0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVDYXN0
RXhwcmVzc2lvbldpdGhHZW5lcmljc0FycmF5KCkgew0KIAlwb3BFbGVtZW50KEtfQ0FTVF9TVEFU
RU1FTlQpOw0KIA0KLQlFeHByZXNzaW9uIGV4cCwgY2FzdCwgY2FzdFR5cGU7DQorCUV4cHJlc3Np
b24gZXhwOw0KKwlFeHByZXNzaW9uIGNhc3Q7DQorCVR5cGVSZWZlcmVuY2UgY2FzdFR5cGU7DQog
CXRoaXMuZXhwcmVzc2lvblB0ci0tOw0KIAl0aGlzLmV4cHJlc3Npb25MZW5ndGhQdHItLTsNCi0J
dGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2Fz
dEV4cHJlc3Npb24oZXhwID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRy
ICsgMV0sIGNhc3RUeXBlID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRy
XSk7DQorCXRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0gPSBjYXN0ID0g
bmV3IENhc3RFeHByZXNzaW9uKGV4cCA9IHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVz
c2lvblB0ciArIDFdLCBjYXN0VHlwZSA9IChUeXBlUmVmZXJlbmNlKSB0aGlzLmV4cHJlc3Npb25T
dGFja1t0aGlzLmV4cHJlc3Npb25QdHJdKTsNCiAJY2FzdC5zb3VyY2VTdGFydCA9IGNhc3RUeXBl
LnNvdXJjZVN0YXJ0IC0gMTsNCiAJY2FzdC5zb3VyY2VFbmQgPSBleHAuc291cmNlRW5kOw0KIH0N
CkBAIC0yMDc3LDEwICsyMDgxLDEyIEBADQogcHJvdGVjdGVkIHZvaWQgY29uc3VtZUNhc3RFeHBy
ZXNzaW9uV2l0aFF1YWxpZmllZEdlbmVyaWNzQXJyYXkoKSB7DQogCXBvcEVsZW1lbnQoS19DQVNU
X1NUQVRFTUVOVCk7DQogDQotCUV4cHJlc3Npb24gZXhwLCBjYXN0LCBjYXN0VHlwZTsNCisJRXhw
cmVzc2lvbiBleHA7DQorCUV4cHJlc3Npb24gY2FzdDsNCisJVHlwZVJlZmVyZW5jZSBjYXN0VHlw
ZTsNCiAJdGhpcy5leHByZXNzaW9uUHRyLS07DQogCXRoaXMuZXhwcmVzc2lvbkxlbmd0aFB0ci0t
Ow0KLQl0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdID0gY2FzdCA9IG5l
dyBDYXN0RXhwcmVzc2lvbihleHAgPSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Np
b25QdHIgKyAxXSwgY2FzdFR5cGUgPSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Np
b25QdHJdKTsNCisJdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNh
c3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhwID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5l
eHByZXNzaW9uUHRyICsgMV0sIGNhc3RUeXBlID0gKFR5cGVSZWZlcmVuY2UpIHRoaXMuZXhwcmVz
c2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0pOw0KIAljYXN0LnNvdXJjZVN0YXJ0ID0gY2Fz
dFR5cGUuc291cmNlU3RhcnQgLSAxOw0KIAljYXN0LnNvdXJjZUVuZCA9IGV4cC5zb3VyY2VFbmQ7
DQogfQ0KQEAgLTIwODgsMTEgKzIwOTQsMTIgQEANCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9IFB1
c2hMUEFSRU4gTmFtZSBEaW1zIFB1c2hSUEFSRU4gSW5zaWRlQ2FzdEV4cHJlc3Npb24gVW5hcnlF
eHByZXNzaW9uTm90UGx1c01pbnVzDQogCXBvcEVsZW1lbnQoS19DQVNUX1NUQVRFTUVOVCk7DQog
DQotCUV4cHJlc3Npb24gZXhwLCBjYXN0LCBjYXN0VHlwZTsNCi0NCisJRXhwcmVzc2lvbiBleHA7
DQorCUV4cHJlc3Npb24gY2FzdDsNCisJVHlwZVJlZmVyZW5jZSBjYXN0VHlwZTsNCiAJdGhpcy5l
eHByZXNzaW9uUHRyLS07DQogCXRoaXMuZXhwcmVzc2lvbkxlbmd0aFB0ci0tOw0KLQl0aGlzLmV4
cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdID0gY2FzdCA9IG5ldyBDYXN0RXhwcmVz
c2lvbihleHAgPSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHIrMV0sIGNh
c3RUeXBlID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSk7DQorCXRo
aXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0gPSBjYXN0ID0gbmV3IENhc3RF
eHByZXNzaW9uKGV4cCA9IHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cisx
XSwgY2FzdFR5cGUgPSAoVHlwZVJlZmVyZW5jZSkgdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5l
eHByZXNzaW9uUHRyXSk7DQogCWNhc3Quc291cmNlU3RhcnQgPSBjYXN0VHlwZS5zb3VyY2VTdGFy
dCAtIDE7DQogCWNhc3Quc291cmNlRW5kID0gZXhwLnNvdXJjZUVuZDsNCiB9DQpJbmRleDogY29k
ZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0
aW9uUGFyc2VyLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
ZGVhc3Npc3Qvc2VsZWN0L1NlbGVjdGlvblBhcnNlci5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNp
b24gMS45Mg0KZGlmZiAtdSAtcjEuOTIgU2VsZWN0aW9uUGFyc2VyLmphdmENCi0tLSBjb2RlYXNz
aXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L3NlbGVjdC9TZWxlY3Rpb25Q
YXJzZXIuamF2YQkyOCBKdWwgMjAxMCAxNjoxNzowNCAtMDAwMAkxLjkyDQorKysgY29kZWFzc2lz
dC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFy
c2VyLmphdmEJMjQgRmViIDIwMTEgMTk6MjI6MDkgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQNCkBAIC0xMzQsNyArMTM0LDcgQEANCiAJCQkJRXhwcmVzc2lvbiBjYXN0VHlwZTsNCiAJCQkJ
aWYodGhpcy5leHByZXNzaW9uUHRyID4gMA0KIAkJCQkJJiYgKChjYXN0VHlwZSA9IHRoaXMuZXhw
cmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0ci0xXSkgaW5zdGFuY2VvZiBUeXBlUmVmZXJl
bmNlKSkgew0KLQkJCQkJQ2FzdEV4cHJlc3Npb24gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lvbihl
eHByZXNzaW9uLCBjYXN0VHlwZSk7DQorCQkJCQlDYXN0RXhwcmVzc2lvbiBjYXN0ID0gbmV3IENh
c3RFeHByZXNzaW9uKGV4cHJlc3Npb24sIChUeXBlUmVmZXJlbmNlKSBjYXN0VHlwZSk7DQogCQkJ
CQljYXN0LnNvdXJjZVN0YXJ0ID0gY2FzdFR5cGUuc291cmNlU3RhcnQ7DQogCQkJCQljYXN0LnNv
dXJjZUVuZD0gZXhwcmVzc2lvbi5zb3VyY2VFbmQ7DQogCQkJCQlwYXJlbnROb2RlID0gY2FzdDsN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4yMjYNCmRpZmYgLXUgLXIxLjIyNiBJUHJvYmxl
bS5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2Js
ZW0uamF2YQkxNiBGZWIgMjAxMSAwNzo1Njo1MSAtMDAwMAkxLjIyNg0KKysrIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEJMjQgRmViIDIwMTEgMTk6
MjI6MDkgLTAwMDANCkBAIC01MjYsNiArNTI2LDcgQEANCiAJaW50IFRoaXNJblN0YXRpY0NvbnRl
eHQgPSBJbnRlcm5hbCArIDIwMDsNCiAJaW50IFN0YXRpY01ldGhvZFJlcXVlc3RlZCA9IEludGVy
bmFsICsgTWV0aG9kUmVsYXRlZCArIDIwMTsNCiAJaW50IElsbGVnYWxEaW1lbnNpb24gPSBJbnRl
cm5hbCArIDIwMjsNCisJLyoqIEBkZXByZWNhdGVkIC0gcHJvYmxlbSBpcyBubyBsb25nZXIgZ2Vu
ZXJhdGVkICovDQogCWludCBJbnZhbGlkVHlwZUV4cHJlc3Npb24gPSBJbnRlcm5hbCArIDIwMzsN
CiAJaW50IFBhcnNpbmdFcnJvciA9IFN5bnRheCArIEludGVybmFsICsgMjA0Ow0KIAlpbnQgUGFy
c2luZ0Vycm9yTm9TdWdnZXN0aW9uID0gU3ludGF4ICsgSW50ZXJuYWwgKyAyMDU7DQpJbmRleDog
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVz
c2lvbi5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0Nhc3RFeHByZXNzaW9uLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjEzNw0KZGlm
ZiAtdSAtcjEuMTM3IENhc3RFeHByZXNzaW9uLmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEJMTcgRGVjIDIw
MTAgMDY6NDA6MTIgLTAwMDAJMS4xMzcNCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEJMjQgRmViIDIwMTEgMTk6MjI6
MDkgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAg
KiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcg
bWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC0zNywxMSArMzcsMTEgQEANCiBw
dWJsaWMgY2xhc3MgQ2FzdEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsNCiANCiAJcHVi
bGljIEV4cHJlc3Npb24gZXhwcmVzc2lvbjsNCi0JcHVibGljIEV4cHJlc3Npb24gdHlwZTsNCisJ
cHVibGljIFR5cGVSZWZlcmVuY2UgdHlwZTsNCiAJcHVibGljIFR5cGVCaW5kaW5nIGV4cGVjdGVk
VHlwZTsgLy8gd2hlbiBhc3NpZ25tZW50IGNvbnZlcnNpb24gdG8gYSBnaXZlbiBleHBlY3RlZCB0
eXBlOiBTdHJpbmcgcyA9IChTdHJpbmcpIHQ7DQogDQogLy9leHByZXNzaW9uLmltcGxpY2l0Q29u
dmVyc2lvbiBob2xkcyB0aGUgY2FzdCBmb3IgYmFzZVR5cGUgY2FzdGluZw0KLXB1YmxpYyBDYXN0
RXhwcmVzc2lvbihFeHByZXNzaW9uIGV4cHJlc3Npb24sIEV4cHJlc3Npb24gdHlwZSkgew0KK3B1
YmxpYyBDYXN0RXhwcmVzc2lvbihFeHByZXNzaW9uIGV4cHJlc3Npb24sIFR5cGVSZWZlcmVuY2Ug
dHlwZSkgew0KIAl0aGlzLmV4cHJlc3Npb24gPSBleHByZXNzaW9uOw0KIAl0aGlzLnR5cGUgPSB0
eXBlOw0KIAl0eXBlLmJpdHMgfD0gQVNUTm9kZS5JZ25vcmVSYXdUeXBlQ2hlY2s7IC8vIG5vIG5l
ZWQgdG8gd29ycnkgYWJvdXQgcmF3IHR5cGUgdXNhZ2UNCkBAIC00NzYsNTUgKzQ3Niw0NiBAQA0K
IAl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50Ow0KIAl0aGlzLmltcGxpY2l0
Q29udmVyc2lvbiA9IFR5cGVJZHMuVF91bmRlZmluZWQ7DQogDQotCWlmICgodGhpcy50eXBlIGlu
c3RhbmNlb2YgVHlwZVJlZmVyZW5jZSkgfHwgKHRoaXMudHlwZSBpbnN0YW5jZW9mIE5hbWVSZWZl
cmVuY2UpDQotCQkJJiYgKCh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuUGFyZW50aGVzaXplZE1B
U0spID4+IEFTVE5vZGUuUGFyZW50aGVzaXplZFNISUZUKSA9PSAwKSB7IC8vIG5vIGV4dHJhIHBh
cmVudGhlc2lzIGFyb3VuZCB0eXBlOiAoKEEpKWV4cA0KKwlib29sZWFuIGV4cHJDb250YWluQ2Fz
dCA9IGZhbHNlOw0KIA0KLQkJYm9vbGVhbiBleHByQ29udGFpbkNhc3QgPSBmYWxzZTsNCi0NCi0J
CVR5cGVCaW5kaW5nIGNhc3RUeXBlID0gdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVz
b2x2ZVR5cGUoc2NvcGUpOw0KLQkJLy9leHByZXNzaW9uLnNldEV4cGVjdGVkVHlwZSh0aGlzLnJl
c29sdmVkVHlwZSk7IC8vIG5lZWRlZCBpbiBjYXNlIG9mIGdlbmVyaWMgbWV0aG9kIGludm9jYXRp
b24NCi0JCWlmICh0aGlzLmV4cHJlc3Npb24gaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgew0K
LQkJCXRoaXMuZXhwcmVzc2lvbi5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2Fz
dENoZWNrOw0KLQkJCWV4cHJDb250YWluQ2FzdCA9IHRydWU7DQotCQl9DQotCQlUeXBlQmluZGlu
ZyBleHByZXNzaW9uVHlwZSA9IHRoaXMuZXhwcmVzc2lvbi5yZXNvbHZlVHlwZShzY29wZSk7DQot
CQlpZiAoY2FzdFR5cGUgIT0gbnVsbCkgew0KLQkJCWlmIChleHByZXNzaW9uVHlwZSAhPSBudWxs
KSB7DQotCQkJCWJvb2xlYW4gaXNMZWdhbCA9IGNoZWNrQ2FzdFR5cGVzQ29tcGF0aWJpbGl0eShz
Y29wZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlLCB0aGlzLmV4cHJlc3Npb24pOw0KLQkJCQlp
ZiAoaXNMZWdhbCkgew0KLQkJCQkJdGhpcy5leHByZXNzaW9uLmNvbXB1dGVDb252ZXJzaW9uKHNj
b3BlLCBjYXN0VHlwZSwgZXhwcmVzc2lvblR5cGUpOw0KLQkJCQkJaWYgKCh0aGlzLmJpdHMgJiBB
U1ROb2RlLlVuc2FmZUNhc3QpICE9IDApIHsgLy8gdW5zYWZlIGNhc3QNCi0JCQkJCQlpZiAoc2Nv
cGUuY29tcGlsZXJPcHRpb25zKCkucmVwb3J0VW5hdm9pZGFibGVHZW5lcmljVHlwZVByb2JsZW1z
IHx8ICF0aGlzLmV4cHJlc3Npb24uZm9yY2VkVG9CZVJhdyhzY29wZS5yZWZlcmVuY2VDb250ZXh0
KCkpKSB7DQotCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuc2FmZUNhc3QodGhpcywg
c2NvcGUpOw0KLQkJCQkJCX0NCi0JCQkJCX0gZWxzZSB7DQotCQkJCQkJaWYgKGNhc3RUeXBlLmlz
UmF3VHlwZSgpICYmIHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmdldFNldmVyaXR5KENvbXBpbGVy
T3B0aW9ucy5SYXdUeXBlUmVmZXJlbmNlKSAhPSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25vcmUpew0K
LQkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5yYXdUeXBlUmVmZXJlbmNlKHRoaXMudHlw
ZSwgY2FzdFR5cGUpOw0KLQkJCQkJCX0NCi0JCQkJCQlpZiAoKHRoaXMuYml0cyAmIChBU1ROb2Rl
LlVubmVjZXNzYXJ5Q2FzdHxBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjaykpID09
IEFTVE5vZGUuVW5uZWNlc3NhcnlDYXN0KSB7IC8vIHVubmVjZXNzYXJ5IGNhc3QNCi0JCQkJCQkJ
aWYgKCFpc0luZGlyZWN0bHlVc2VkKCkpIC8vIHVzZWQgZm9yIGdlbmVyaWMgdHlwZSBpbmZlcmVu
Y2Ugb3IgYm94aW5nID8NCi0JCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNz
YXJ5Q2FzdCh0aGlzKTsNCi0JCQkJCQl9DQorCVR5cGVCaW5kaW5nIGNhc3RUeXBlID0gdGhpcy5y
ZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZVR5cGUoc2NvcGUpOw0KKwkvL2V4cHJlc3Np
b24uc2V0RXhwZWN0ZWRUeXBlKHRoaXMucmVzb2x2ZWRUeXBlKTsgLy8gbmVlZGVkIGluIGNhc2Ug
b2YgZ2VuZXJpYyBtZXRob2QgaW52b2NhdGlvbg0KKwlpZiAodGhpcy5leHByZXNzaW9uIGluc3Rh
bmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsNCisJCXRoaXMuZXhwcmVzc2lvbi5iaXRzIHw9IEFTVE5v
ZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOw0KKwkJZXhwckNvbnRhaW5DYXN0ID0gdHJ1
ZTsNCisJfQ0KKwlUeXBlQmluZGluZyBleHByZXNzaW9uVHlwZSA9IHRoaXMuZXhwcmVzc2lvbi5y
ZXNvbHZlVHlwZShzY29wZSk7DQorCWlmIChjYXN0VHlwZSAhPSBudWxsKSB7DQorCQlpZiAoZXhw
cmVzc2lvblR5cGUgIT0gbnVsbCkgew0KKwkJCWJvb2xlYW4gaXNMZWdhbCA9IGNoZWNrQ2FzdFR5
cGVzQ29tcGF0aWJpbGl0eShzY29wZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlLCB0aGlzLmV4
cHJlc3Npb24pOw0KKwkJCWlmIChpc0xlZ2FsKSB7DQorCQkJCXRoaXMuZXhwcmVzc2lvbi5jb21w
dXRlQ29udmVyc2lvbihzY29wZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlKTsNCisJCQkJaWYg
KCh0aGlzLmJpdHMgJiBBU1ROb2RlLlVuc2FmZUNhc3QpICE9IDApIHsgLy8gdW5zYWZlIGNhc3QN
CisJCQkJCWlmIChzY29wZS5jb21waWxlck9wdGlvbnMoKS5yZXBvcnRVbmF2b2lkYWJsZUdlbmVy
aWNUeXBlUHJvYmxlbXMgfHwgIXRoaXMuZXhwcmVzc2lvbi5mb3JjZWRUb0JlUmF3KHNjb3BlLnJl
ZmVyZW5jZUNvbnRleHQoKSkpIHsNCisJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bnNh
ZmVDYXN0KHRoaXMsIHNjb3BlKTsNCiAJCQkJCX0NCi0JCQkJfSBlbHNlIHsgLy8gaWxsZWdhbCBj
YXN0DQotCQkJCQlpZiAoKGNhc3RUeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBl
KSA9PSAwKSB7IC8vIG5vIGNvbXBsYWludCBpZiBzZWNvbmRhcnkgZXJyb3INCi0JCQkJCQlzY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBlQ2FzdEVycm9yKHRoaXMsIGNhc3RUeXBlLCBleHByZXNz
aW9uVHlwZSk7DQorCQkJCX0gZWxzZSB7DQorCQkJCQlpZiAoY2FzdFR5cGUuaXNSYXdUeXBlKCkg
JiYgc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuZ2V0U2V2ZXJpdHkoQ29tcGlsZXJPcHRpb25zLlJh
d1R5cGVSZWZlcmVuY2UpICE9IFByb2JsZW1TZXZlcml0aWVzLklnbm9yZSl7DQorCQkJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkucmF3VHlwZVJlZmVyZW5jZSh0aGlzLnR5cGUsIGNhc3RUeXBl
KTsNCisJCQkJCX0NCisJCQkJCWlmICgodGhpcy5iaXRzICYgKEFTVE5vZGUuVW5uZWNlc3NhcnlD
YXN0fEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrKSkgPT0gQVNUTm9kZS5Vbm5l
Y2Vzc2FyeUNhc3QpIHsgLy8gdW5uZWNlc3NhcnkgY2FzdA0KKwkJCQkJCWlmICghaXNJbmRpcmVj
dGx5VXNlZCgpKSAvLyB1c2VkIGZvciBnZW5lcmljIHR5cGUgaW5mZXJlbmNlIG9yIGJveGluZyA/
DQorCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCh0aGlzKTsN
CiAJCQkJCX0NCi0JCQkJCXRoaXMuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNh
c3RDaGVjazsgLy8gZGlzYWJsZSBmdXJ0aGVyIHNlY29uZGFyeSBkaWFnbm9zaXMNCiAJCQkJfQ0K
KwkJCX0gZWxzZSB7IC8vIGlsbGVnYWwgY2FzdA0KKwkJCQlpZiAoKGNhc3RUeXBlLnRhZ0JpdHMg
JiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSA9PSAwKSB7IC8vIG5vIGNvbXBsYWludCBpZiBzZWNv
bmRhcnkgZXJyb3INCisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVDYXN0RXJyb3Io
dGhpcywgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlKTsNCisJCQkJfQ0KKwkJCQl0aGlzLmJpdHMg
fD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIGRpc2FibGUgZnVydGhl
ciBzZWNvbmRhcnkgZGlhZ25vc2lzDQogCQkJfQ0KLQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gY2Fz
dFR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOw0KLQkJCWlmIChleHByQ29udGFp
bkNhc3QpIHsNCi0JCQkJY2hlY2tOZWVkRm9yQ2FzdENhc3Qoc2NvcGUsIHRoaXMpOw0KLQkJCX0N
CiAJCX0NCi0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsNCi0JfSBlbHNlIHsgLy8gZXhwcmVz
c2lvbiBhcyBhIGNhc3QNCi0JCVR5cGVCaW5kaW5nIGV4cHJlc3Npb25UeXBlID0gdGhpcy5leHBy
ZXNzaW9uLnJlc29sdmVUeXBlKHNjb3BlKTsNCi0JCWlmIChleHByZXNzaW9uVHlwZSA9PSBudWxs
KSByZXR1cm4gbnVsbDsNCi0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRUeXBlUmVm
ZXJlbmNlKHRoaXMudHlwZSk7DQotCQlyZXR1cm4gbnVsbDsNCisJCXRoaXMucmVzb2x2ZWRUeXBl
ID0gY2FzdFR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOw0KKwkJaWYgKGV4cHJD
b250YWluQ2FzdCkgew0KKwkJCWNoZWNrTmVlZEZvckNhc3RDYXN0KHNjb3BlLCB0aGlzKTsNCisJ
CX0NCiAJfQ0KKwlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7DQogfQ0KIA0KIC8qKg0KSW5kZXg6
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2Vy
LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJz
ZXIvUGFyc2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQyMg0KZGlmZiAtdSAtcjEu
NDIyIFBhcnNlci5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQk1IEphbiAyMDExIDE5OjU3OjI2IC0wMDAwCTEuNDIy
DQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9Q
YXJzZXIuamF2YQkyNCBGZWIgMjAxMSAxOToyMjowOSAtMDAwMA0KQEAgLTIwMjYsMTIgKzIwMjYs
MTMgQEANCiANCiAJLy9vcHRpbWl6ZSBwdXNoL3BvcA0KIA0KLQlFeHByZXNzaW9uIGNhc3QsZXhw
Ow0KKwlFeHByZXNzaW9uIGNhc3Q7DQorCUV4cHJlc3Npb24gZXhwOw0KIAl0aGlzLmV4cHJlc3Np
b25QdHItLTsNCiAJdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9DQog
CQljYXN0ID0gbmV3IENhc3RFeHByZXNzaW9uKA0KIAkJCWV4cD10aGlzLmV4cHJlc3Npb25TdGFj
a1t0aGlzLmV4cHJlc3Npb25QdHIrMV0gLA0KLQkJCXRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMu
ZXhwcmVzc2lvblB0cl0pOw0KKwkJCShUeXBlUmVmZXJlbmNlKSB0aGlzLmV4cHJlc3Npb25TdGFj
a1t0aGlzLmV4cHJlc3Npb25QdHJdKTsNCiAJdGhpcy5leHByZXNzaW9uTGVuZ3RoUHRyIC0tIDsN
CiAJdXBkYXRlU291cmNlUG9zaXRpb24oY2FzdCk7DQogCWNhc3Quc291cmNlRW5kPWV4cC5zb3Vy
Y2VFbmQ7DQpAQCAtMjAzOSw3ICsyMDQwLDkgQEANCiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQ2Fz
dEV4cHJlc3Npb25XaXRoR2VuZXJpY3NBcnJheSgpIHsNCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9
IFB1c2hMUEFSRU4gTmFtZSBUeXBlQXJndW1lbnRzIERpbXMgUHVzaFJQQVJFTiBJbnNpZGVDYXN0
RXhwcmVzc2lvbiBVbmFyeUV4cHJlc3Npb25Ob3RQbHVzTWludXMNCiANCi0JRXhwcmVzc2lvbiBl
eHAsIGNhc3QsIGNhc3RUeXBlOw0KKwlFeHByZXNzaW9uIGV4cDsNCisJRXhwcmVzc2lvbiBjYXN0
Ow0KKwlUeXBlUmVmZXJlbmNlIGNhc3RUeXBlOw0KIAlpbnQgZW5kID0gdGhpcy5pbnRTdGFja1t0
aGlzLmludFB0ci0tXTsNCiANCiAJaW50IGRpbSA9IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHIt
LV07DQpAQCAtMjA1NCw3ICsyMDU3LDkgQEANCiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQ2FzdEV4
cHJlc3Npb25XaXRoTmFtZUFycmF5KCkgew0KIAkvLyBDYXN0RXhwcmVzc2lvbiA6Oj0gUHVzaExQ
QVJFTiBOYW1lIERpbXMgUHVzaFJQQVJFTiBJbnNpZGVDYXN0RXhwcmVzc2lvbiBVbmFyeUV4cHJl
c3Npb25Ob3RQbHVzTWludXMNCiANCi0JRXhwcmVzc2lvbiBleHAsIGNhc3QsIGNhc3RUeXBlOw0K
KwlFeHByZXNzaW9uIGV4cDsNCisJRXhwcmVzc2lvbiBjYXN0Ow0KKwlUeXBlUmVmZXJlbmNlIGNh
c3RUeXBlOw0KIAlpbnQgZW5kID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsNCiANCiAJ
Ly8gaGFuZGxlIHR5cGUgYXJndW1lbnRzDQpAQCAtMjA3Myw3ICsyMDc4LDkgQEANCiANCiAJLy9v
cHRpbWl6ZSB0aGUgcHVzaC9wb3ANCiANCi0JRXhwcmVzc2lvbiBleHAsIGNhc3QsIGNhc3RUeXBl
Ow0KKwlFeHByZXNzaW9uIGV4cDsNCisJRXhwcmVzc2lvbiBjYXN0Ow0KKwlUeXBlUmVmZXJlbmNl
IGNhc3RUeXBlOw0KIAlpbnQgZW5kID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsNCiAJ
dGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2Fz
dEV4cHJlc3Npb24oZXhwID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRy
XSwgY2FzdFR5cGUgPSBnZXRUeXBlUmVmZXJlbmNlKHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHIt
LV0pKTsNCiAJY2FzdFR5cGUuc291cmNlRW5kID0gZW5kIC0gMTsNCkBAIC0yMDgyLDcgKzIwODks
OSBAQA0KIH0NCiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoUXVhbGlm
aWVkR2VuZXJpY3NBcnJheSgpIHsNCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9IFB1c2hMUEFSRU4g
TmFtZSBPbmx5VHlwZUFyZ3VtZW50cyAnLicgQ2xhc3NPckludGVyZmFjZVR5cGUgRGltcyBQdXNo
UlBBUkVOIEluc2lkZUNhc3RFeHByZXNzaW9uIFVuYXJ5RXhwcmVzc2lvbk5vdFBsdXNNaW51cw0K
LQlFeHByZXNzaW9uIGV4cCwgY2FzdCwgY2FzdFR5cGU7DQorCUV4cHJlc3Npb24gZXhwOw0KKwlF
eHByZXNzaW9uIGNhc3Q7DQorCVR5cGVSZWZlcmVuY2UgY2FzdFR5cGU7DQogCWludCBlbmQgPSB0
aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dOw0KIA0KIAlpbnQgZGltID0gdGhpcy5pbnRTdGFj
a1t0aGlzLmludFB0ci0tXTsNCkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQ0KPT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNT
IGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQzMg0KZGlmZiAtdSAtcjEuNDMyIFByb2JsZW1S
ZXBvcnRlci5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEJMTYgRmViIDIwMTEgMDc6NTY6NTAgLTAw
MDAJMS40MzINCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
cHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQkyNCBGZWIgMjAxMSAxOToyMjowOSAtMDAwMA0K
QEAgLTM4MDcsMTQgKzM4MDcsNiBAQA0KIAkJCWV4cHJlc3Npb24uc291cmNlU3RhcnQsDQogCQkJ
ZXhwcmVzc2lvbi5zb3VyY2VFbmQpOw0KIH0NCi1wdWJsaWMgdm9pZCBpbnZhbGlkVHlwZVJlZmVy
ZW5jZShFeHByZXNzaW9uIGV4cHJlc3Npb24pIHsNCi0JdGhpcy5oYW5kbGUoDQotCQlJUHJvYmxl
bS5JbnZhbGlkVHlwZUV4cHJlc3Npb24sDQotCQlOb0FyZ3VtZW50LA0KLQkJTm9Bcmd1bWVudCwN
Ci0JCWV4cHJlc3Npb24uc291cmNlU3RhcnQsDQotCQlleHByZXNzaW9uLnNvdXJjZUVuZCk7DQot
fQ0KIHB1YmxpYyB2b2lkIGludmFsaWRUeXBlVG9TeW5jaHJvbml6ZShFeHByZXNzaW9uIGV4cHJl
c3Npb24sIFR5cGVCaW5kaW5nIHR5cGUpIHsNCiAJdGhpcy5oYW5kbGUoDQogCQlJUHJvYmxlbS5J
bnZhbGlkVHlwZVRvU3luY2hyb25pemVkLA0KSW5kZXg6IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMNCj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnBy
b3BlcnRpZXMsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjI2Mw0KZGlmZiAtdSAtcjEuMjYzIG1l
c3NhZ2VzLnByb3BlcnRpZXMNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCTE2IEZlYiAyMDExIDA3OjU2OjUw
IC0wMDAwCTEuMjYzDQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwkyNCBGZWIgMjAxMSAxOToyMjowOSAtMDAw
MA0KQEAgLTE4MSw3ICsxODEsNyBAQA0KIDIwMCA9IENhbm5vdCB1c2UgezB9IGluIGEgc3RhdGlj
IGNvbnRleHQNCiAyMDEgPSBDYW5ub3QgbWFrZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5v
bi1zdGF0aWMgbWV0aG9kIHsxfSh7Mn0pIGZyb20gdGhlIHR5cGUgezB9DQogMjAyID0gQ2Fubm90
IHNwZWNpZnkgYW4gYXJyYXkgZGltZW5zaW9uIGFmdGVyIGFuIGVtcHR5IGRpbWVuc2lvbg0KLTIw
MyA9IEludmFsaWQgY2FzdCBleHByZXNzaW9uDQorIzIwMyA9IEludmFsaWQgY2FzdCBleHByZXNz
aW9uDQogMjA0ID0gU3ludGF4IGVycm9yIG9uIHRva2VuICJ7MH0iLCB7MX0gZXhwZWN0ZWQNCiAy
MDUgPSBTeW50YXggZXJyb3Igb24gdG9rZW4gInswfSIsIG5vIGFjY3VyYXRlIGNvcnJlY3Rpb24g
YXZhaWxhYmxlDQogMjA2ID0gSW52YWxpZCBhcmd1bWVudCB0byBvcGVyYXRpb24gKysvLS0NCklu
ZGV4OiBkb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhDQo9PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9k
b20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhLHYNCnJldHJpZXZp
bmcgcmV2aXNpb24gMS4yNzMNCmRpZmYgLXUgLXIxLjI3MyBBU1RDb252ZXJ0ZXIuamF2YQ0KLS0t
IGRvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEJMTMgRGVjIDIw
MTAgMTQ6NDQ6MjIgLTAwMDAJMS4yNzMNCisrKyBkb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0FTVENvbnZlcnRlci5qYXZhCTI0IEZlYiAyMDExIDE5OjIyOjEwIC0wMDAwDQpAQCAtMSw1ICsx
LDUgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMg
YXZhaWxhYmxlIGF0DQpAQCAtMTE5OCwxMSArMTE5OCw3IEBADQogCQljYXN0RXhwcmVzc2lvbi5z
ZXRTb3VyY2VSYW5nZShleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVu
ZCAtIGV4cHJlc3Npb24uc291cmNlU3RhcnQgKyAxKTsNCiAJCW9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbiB0eXBlID0gZXhwcmVzc2lvbi50eXBlOw0KIAkJ
dHJpbVdoaXRlU3BhY2VzQW5kQ29tbWVudHModHlwZSk7DQotCQlpZiAodHlwZSBpbnN0YW5jZW9m
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5jZSApIHsN
Ci0JCQljYXN0RXhwcmVzc2lvbi5zZXRUeXBlKGNvbnZlcnRUeXBlKChvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2UpdHlwZSkpOw0KLQkJfSBlbHNlIGlm
ICh0eXBlIGluc3RhbmNlb2Ygb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5O
YW1lUmVmZXJlbmNlKSB7DQotCQkJY2FzdEV4cHJlc3Npb24uc2V0VHlwZShjb252ZXJ0VG9UeXBl
KChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk5hbWVSZWZlcmVuY2UpdHlw
ZSkpOw0KLQkJfQ0KKwkJY2FzdEV4cHJlc3Npb24uc2V0VHlwZShjb252ZXJ0VHlwZSgob3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlKXR5cGUpKTsNCiAJ
CWNhc3RFeHByZXNzaW9uLnNldEV4cHJlc3Npb24oY29udmVydChleHByZXNzaW9uLmV4cHJlc3Np
b24pKTsNCiAJCWlmICh0aGlzLnJlc29sdmVCaW5kaW5ncykgew0KIAkJCXJlY29yZE5vZGVzKGNh
c3RFeHByZXNzaW9uLCBleHByZXNzaW9uKTsNCkBAIC0yOTY1LDE3ICsyOTYxLDYgQEANCiAJCXJl
dHVybiBwYXJlbnRoZXNpemVkRXhwcmVzc2lvbjsNCiAJfQ0KIA0KLQlwdWJsaWMgVHlwZSBjb252
ZXJ0VG9UeXBlKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTmFtZVJlZmVy
ZW5jZSByZWZlcmVuY2UpIHsNCi0JCU5hbWUgbmFtZSA9IGNvbnZlcnQocmVmZXJlbmNlKTsNCi0J
CWZpbmFsIFNpbXBsZVR5cGUgdHlwZSA9IG5ldyBTaW1wbGVUeXBlKHRoaXMuYXN0KTsNCi0JCXR5
cGUuc2V0TmFtZShuYW1lKTsNCi0JCXR5cGUuc2V0U291cmNlUmFuZ2UobmFtZS5nZXRTdGFydFBv
c2l0aW9uKCksIG5hbWUuZ2V0TGVuZ3RoKCkpOw0KLQkJaWYgKHRoaXMucmVzb2x2ZUJpbmRpbmdz
KSB7DQotCQkJdGhpcy5yZWNvcmROb2Rlcyh0eXBlLCByZWZlcmVuY2UpOw0KLQkJfQ0KLQkJcmV0
dXJuIHR5cGU7DQotCX0NCi0NCiAJcHJvdGVjdGVkIFZhcmlhYmxlRGVjbGFyYXRpb25FeHByZXNz
aW9uIGNvbnZlcnRUb1ZhcmlhYmxlRGVjbGFyYXRpb25FeHByZXNzaW9uKG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3QuTG9jYWxEZWNsYXJhdGlvbiBsb2NhbERlY2xhcmF0aW9u
KSB7DQogCQlmaW5hbCBWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgdmFyaWFibGVEZWNsYXJh
dGlvbkZyYWdtZW50ID0gY29udmVydFRvVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KGxvY2Fs
RGVjbGFyYXRpb24pOw0KIAkJZmluYWwgVmFyaWFibGVEZWNsYXJhdGlvbkV4cHJlc3Npb24gdmFy
aWFibGVEZWNsYXJhdGlvbkV4cHJlc3Npb24gPSBuZXcgVmFyaWFibGVEZWNsYXJhdGlvbkV4cHJl
c3Npb24odGhpcy5hc3QpOw0KSW5kZXg6IHNlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9zZWFyY2gvbWF0Y2hpbmcvTWF0Y2hMb2NhdG9yUGFyc2VyLmphdmENCj09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0N
ClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvTWF0Y2hMb2NhdG9y
UGFyc2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjg4DQpkaWZmIC11IC1yMS44OCBN
YXRjaExvY2F0b3JQYXJzZXIuamF2YQ0KLS0tIHNlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvTWF0Y2hMb2NhdG9yUGFyc2VyLmphdmEJNyBTZXAgMjAx
MCAwODoxNjoxOSAtMDAwMAkxLjg4DQorKysgc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9tYXRjaGluZy9NYXRjaExvY2F0b3JQYXJzZXIuamF2YQkyNCBGZWIgMjAx
MSAxOToyMjoxMCAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTIxMyw0NSArMjEz
LDM1IEBADQogCXN1cGVyLmNvbnN1bWVDYXN0RXhwcmVzc2lvbkxMMSgpOw0KIAlpZiAoKHRoaXMu
cGF0dGVybkZpbmVHcmFpbiAmIElKYXZhU2VhcmNoQ29uc3RhbnRzLkNBU1RfVFlQRV9SRUZFUkVO
Q0UpICE9IDApIHsNCiAJCUNhc3RFeHByZXNzaW9uIGNhc3RFeHByZXNzaW9uID0gKENhc3RFeHBy
ZXNzaW9uKSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdOw0KLQkJaWYg
KGNhc3RFeHByZXNzaW9uLnR5cGUgaW5zdGFuY2VvZiBUeXBlUmVmZXJlbmNlKSB7DQotCQkJdGhp
cy5wYXR0ZXJuTG9jYXRvci5tYXRjaCgoVHlwZVJlZmVyZW5jZSkgY2FzdEV4cHJlc3Npb24udHlw
ZSwgdGhpcy5ub2RlU2V0KTsNCi0gICAgICAgIH0NCisJCXRoaXMucGF0dGVybkxvY2F0b3IubWF0
Y2goY2FzdEV4cHJlc3Npb24udHlwZSwgdGhpcy5ub2RlU2V0KTsNCiAJfQ0KIH0NCiBwcm90ZWN0
ZWQgdm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoR2VuZXJpY3NBcnJheSgpIHsNCiAJc3Vw
ZXIuY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aEdlbmVyaWNzQXJyYXkoKTsNCiAJaWYgKCh0aGlz
LnBhdHRlcm5GaW5lR3JhaW4gJiBJSmF2YVNlYXJjaENvbnN0YW50cy5DQVNUX1RZUEVfUkVGRVJF
TkNFKSAhPSAwKSB7DQogCQlDYXN0RXhwcmVzc2lvbiBjYXN0RXhwcmVzc2lvbiA9IChDYXN0RXhw
cmVzc2lvbikgdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXTsNCi0JCWlm
IChjYXN0RXhwcmVzc2lvbi50eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlKSB7DQotCQkJdGhpcy5w
YXR0ZXJuTG9jYXRvci5tYXRjaCgoUmVmZXJlbmNlKSBjYXN0RXhwcmVzc2lvbi50eXBlLCB0aGlz
Lm5vZGVTZXQpOw0KLSAgICAgICAgfQ0KKwkJdGhpcy5wYXR0ZXJuTG9jYXRvci5tYXRjaChjYXN0
RXhwcmVzc2lvbi50eXBlLCB0aGlzLm5vZGVTZXQpOw0KIAl9DQogfQ0KIHByb3RlY3RlZCB2b2lk
IGNvbnN1bWVDYXN0RXhwcmVzc2lvbldpdGhOYW1lQXJyYXkoKSB7DQogCXN1cGVyLmNvbnN1bWVD
YXN0RXhwcmVzc2lvbldpdGhOYW1lQXJyYXkoKTsNCiAJaWYgKCh0aGlzLnBhdHRlcm5GaW5lR3Jh
aW4gJiBJSmF2YVNlYXJjaENvbnN0YW50cy5DQVNUX1RZUEVfUkVGRVJFTkNFKSAhPSAwKSB7DQog
CQlDYXN0RXhwcmVzc2lvbiBjYXN0RXhwcmVzc2lvbiA9IChDYXN0RXhwcmVzc2lvbikgdGhpcy5l
eHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXTsNCi0JCWlmIChjYXN0RXhwcmVzc2lv
bi50eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlKSB7DQotCQkJdGhpcy5wYXR0ZXJuTG9jYXRvci5t
YXRjaCgoUmVmZXJlbmNlKSBjYXN0RXhwcmVzc2lvbi50eXBlLCB0aGlzLm5vZGVTZXQpOw0KLSAg
ICAgICAgfQ0KKwkJdGhpcy5wYXR0ZXJuTG9jYXRvci5tYXRjaChjYXN0RXhwcmVzc2lvbi50eXBl
LCB0aGlzLm5vZGVTZXQpOw0KIAl9DQogfQ0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVDYXN0RXhw
cmVzc2lvbldpdGhQcmltaXRpdmVUeXBlKCkgew0KIAlzdXBlci5jb25zdW1lQ2FzdEV4cHJlc3Np
b25XaXRoUHJpbWl0aXZlVHlwZSgpOw0KIAlpZiAoKHRoaXMucGF0dGVybkZpbmVHcmFpbiAmIElK
YXZhU2VhcmNoQ29uc3RhbnRzLkNBU1RfVFlQRV9SRUZFUkVOQ0UpICE9IDApIHsNCiAJCUNhc3RF
eHByZXNzaW9uIGNhc3RFeHByZXNzaW9uID0gKENhc3RFeHByZXNzaW9uKSB0aGlzLmV4cHJlc3Np
b25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdOw0KLQkJaWYgKGNhc3RFeHByZXNzaW9uLnR5cGUg
aW5zdGFuY2VvZiBSZWZlcmVuY2UpIHsNCi0JCQl0aGlzLnBhdHRlcm5Mb2NhdG9yLm1hdGNoKChS
ZWZlcmVuY2UpIGNhc3RFeHByZXNzaW9uLnR5cGUsIHRoaXMubm9kZVNldCk7DQotICAgICAgICB9
DQorCQl0aGlzLnBhdHRlcm5Mb2NhdG9yLm1hdGNoKGNhc3RFeHByZXNzaW9uLnR5cGUsIHRoaXMu
bm9kZVNldCk7DQogCX0NCiB9DQogcHJvdGVjdGVkIHZvaWQgY29uc3VtZUNhc3RFeHByZXNzaW9u
V2l0aFF1YWxpZmllZEdlbmVyaWNzQXJyYXkoKSB7DQogCXN1cGVyLmNvbnN1bWVDYXN0RXhwcmVz
c2lvbldpdGhRdWFsaWZpZWRHZW5lcmljc0FycmF5KCk7DQogCWlmICgodGhpcy5wYXR0ZXJuRmlu
ZUdyYWluICYgSUphdmFTZWFyY2hDb25zdGFudHMuQ0FTVF9UWVBFX1JFRkVSRU5DRSkgIT0gMCkg
ew0KIAkJQ2FzdEV4cHJlc3Npb24gY2FzdEV4cHJlc3Npb24gPSAoQ2FzdEV4cHJlc3Npb24pIHRo
aXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl07DQotCQlpZiAoY2FzdEV4cHJl
c3Npb24udHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZSkgew0KLQkJCXRoaXMucGF0dGVybkxvY2F0
b3IubWF0Y2goKFJlZmVyZW5jZSkgY2FzdEV4cHJlc3Npb24udHlwZSwgdGhpcy5ub2RlU2V0KTsN
Ci0gICAgICAgIH0NCisJCXRoaXMucGF0dGVybkxvY2F0b3IubWF0Y2goY2FzdEV4cHJlc3Npb24u
dHlwZSwgdGhpcy5ub2RlU2V0KTsNCiAJfQ0KIH0NCiANCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>189740</attachid>
            <date>2011-02-24 15:02:00 -0500</date>
            <delta_ts>2011-02-24 15:02:24 -0500</delta_ts>
            <desc>Proposed fix</desc>
            <filename>patch_338118.txt</filename>
            <type>text/plain</type>
            <size>24513</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L0Nv
bXBsZXRpb25FbmdpbmUuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlw
c2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29kZWFzc2lzdC9Db21wbGV0aW9uRW5naW5lLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lv
biAxLjQyNg0KZGlmZiAtdSAtcjEuNDI2IENvbXBsZXRpb25FbmdpbmUuamF2YQ0KLS0tIGNvZGVh
c3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvQ29tcGxldGlvbkVuZ2lu
ZS5qYXZhCTMgRmViIDIwMTEgMTY6NDM6MjMgLTAwMDAJMS40MjYNCisrKyBjb2RlYXNzaXN0L29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L0NvbXBsZXRpb25FbmdpbmUuamF2YQky
NCBGZWIgMjAxMSAyMDowMTo0MSAtMDAwMA0KQEAgLTM0NTEsNyArMzQ1MSw3IEBADQogCQkJCX0N
CiAJCQl9DQogCQl9IGVsc2UgaWYocGFyZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsN
Ci0JCQlFeHByZXNzaW9uIGUgPSAoKENhc3RFeHByZXNzaW9uKXBhcmVudCkudHlwZTsNCisJCQlU
eXBlUmVmZXJlbmNlIGUgPSAoKENhc3RFeHByZXNzaW9uKXBhcmVudCkudHlwZTsNCiAJCQlUeXBl
QmluZGluZyBiaW5kaW5nID0gZS5yZXNvbHZlZFR5cGU7DQogCQkJaWYoYmluZGluZyAhPSBudWxs
KXsNCiAJCQkJYWRkRXhwZWN0ZWRUeXBlKGJpbmRpbmcsIHNjb3BlKTsNCkluZGV4OiBjb2RlYXNz
aXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2NvbXBsZXRlL0NvbXBsZXRp
b25QYXJzZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29k
ZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uUGFyc2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZp
c2lvbiAxLjIxOQ0KZGlmZiAtdSAtcjEuMjE5IENvbXBsZXRpb25QYXJzZXIuamF2YQ0KLS0tIGNv
ZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29t
cGxldGlvblBhcnNlci5qYXZhCTMgRmViIDIwMTEgMTY6NDM6MjMgLTAwMDAJMS4yMTkNCisrKyBj
b2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2NvbXBsZXRlL0Nv
bXBsZXRpb25QYXJzZXIuamF2YQkyNCBGZWIgMjAxMSAyMDowMTo0MSAtMDAwMA0KQEAgLTEsNSAr
MSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlz
IGF2YWlsYWJsZSBhdA0KQEAgLTc5OSw3ICs3OTksNyBAQA0KIAkJCQlFeHByZXNzaW9uIGNhc3RU
eXBlOw0KIAkJCQlpZih0aGlzLmV4cHJlc3Npb25QdHIgPiAwDQogCQkJCQkmJiAoKGNhc3RUeXBl
ID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyLTFdKSBpbnN0YW5jZW9m
IFR5cGVSZWZlcmVuY2UpKSB7DQotCQkJCQlDYXN0RXhwcmVzc2lvbiBjYXN0ID0gbmV3IENhc3RF
eHByZXNzaW9uKGV4cHJlc3Npb24sIGNhc3RUeXBlKTsNCisJCQkJCUNhc3RFeHByZXNzaW9uIGNh
c3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhwcmVzc2lvbiwgKFR5cGVSZWZlcmVuY2UpIGNhc3RU
eXBlKTsNCiAJCQkJCWNhc3Quc291cmNlU3RhcnQgPSBjYXN0VHlwZS5zb3VyY2VTdGFydDsNCiAJ
CQkJCWNhc3Quc291cmNlRW5kPSBleHByZXNzaW9uLnNvdXJjZUVuZDsNCiAJCQkJCXRoaXMuYXNz
aXN0Tm9kZVBhcmVudCA9IGNhc3Q7DQpAQCAtMjA1NiwyMCArMjA1NiwyNCBAQA0KIHByb3RlY3Rl
ZCB2b2lkIGNvbnN1bWVDYXN0RXhwcmVzc2lvbldpdGhQcmltaXRpdmVUeXBlKCkgew0KIAlwb3BF
bGVtZW50KEtfQ0FTVF9TVEFURU1FTlQpOw0KIA0KLQlFeHByZXNzaW9uIGV4cCwgY2FzdCwgY2Fz
dFR5cGU7DQorCUV4cHJlc3Npb24gZXhwOw0KKwlFeHByZXNzaW9uIGNhc3Q7DQorCVR5cGVSZWZl
cmVuY2UgY2FzdFR5cGU7DQogCXRoaXMuZXhwcmVzc2lvblB0ci0tOw0KIAl0aGlzLmV4cHJlc3Np
b25MZW5ndGhQdHItLTsNCi0JdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRy
XSA9IGNhc3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhwID0gdGhpcy5leHByZXNzaW9uU3RhY2tb
dGhpcy5leHByZXNzaW9uUHRyKzFdLCBjYXN0VHlwZSA9IHRoaXMuZXhwcmVzc2lvblN0YWNrW3Ro
aXMuZXhwcmVzc2lvblB0cl0pOw0KKwl0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Np
b25QdHJdID0gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lvbihleHAgPSB0aGlzLmV4cHJlc3Npb25T
dGFja1t0aGlzLmV4cHJlc3Npb25QdHIrMV0sIGNhc3RUeXBlID0gKFR5cGVSZWZlcmVuY2UpIHRo
aXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0pOw0KIAljYXN0LnNvdXJjZVN0
YXJ0ID0gY2FzdFR5cGUuc291cmNlU3RhcnQgLSAxOw0KIAljYXN0LnNvdXJjZUVuZCA9IGV4cC5z
b3VyY2VFbmQ7DQogfQ0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVDYXN0RXhwcmVzc2lvbldpdGhH
ZW5lcmljc0FycmF5KCkgew0KIAlwb3BFbGVtZW50KEtfQ0FTVF9TVEFURU1FTlQpOw0KIA0KLQlF
eHByZXNzaW9uIGV4cCwgY2FzdCwgY2FzdFR5cGU7DQorCUV4cHJlc3Npb24gZXhwOw0KKwlFeHBy
ZXNzaW9uIGNhc3Q7DQorCVR5cGVSZWZlcmVuY2UgY2FzdFR5cGU7DQogCXRoaXMuZXhwcmVzc2lv
blB0ci0tOw0KIAl0aGlzLmV4cHJlc3Npb25MZW5ndGhQdHItLTsNCi0JdGhpcy5leHByZXNzaW9u
U3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhw
ID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyICsgMV0sIGNhc3RUeXBl
ID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSk7DQorCXRoaXMuZXhw
cmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0gPSBjYXN0ID0gbmV3IENhc3RFeHByZXNz
aW9uKGV4cCA9IHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0ciArIDFdLCBj
YXN0VHlwZSA9IChUeXBlUmVmZXJlbmNlKSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJl
c3Npb25QdHJdKTsNCiAJY2FzdC5zb3VyY2VTdGFydCA9IGNhc3RUeXBlLnNvdXJjZVN0YXJ0IC0g
MTsNCiAJY2FzdC5zb3VyY2VFbmQgPSBleHAuc291cmNlRW5kOw0KIH0NCkBAIC0yMDc3LDEwICsy
MDgxLDEyIEBADQogcHJvdGVjdGVkIHZvaWQgY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aFF1YWxp
ZmllZEdlbmVyaWNzQXJyYXkoKSB7DQogCXBvcEVsZW1lbnQoS19DQVNUX1NUQVRFTUVOVCk7DQog
DQotCUV4cHJlc3Npb24gZXhwLCBjYXN0LCBjYXN0VHlwZTsNCisJRXhwcmVzc2lvbiBleHA7DQor
CUV4cHJlc3Npb24gY2FzdDsNCisJVHlwZVJlZmVyZW5jZSBjYXN0VHlwZTsNCiAJdGhpcy5leHBy
ZXNzaW9uUHRyLS07DQogCXRoaXMuZXhwcmVzc2lvbkxlbmd0aFB0ci0tOw0KLQl0aGlzLmV4cHJl
c3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdID0gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lv
bihleHAgPSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHIgKyAxXSwgY2Fz
dFR5cGUgPSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdKTsNCisJdGhp
cy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2FzdEV4
cHJlc3Npb24oZXhwID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyICsg
MV0sIGNhc3RUeXBlID0gKFR5cGVSZWZlcmVuY2UpIHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMu
ZXhwcmVzc2lvblB0cl0pOw0KIAljYXN0LnNvdXJjZVN0YXJ0ID0gY2FzdFR5cGUuc291cmNlU3Rh
cnQgLSAxOw0KIAljYXN0LnNvdXJjZUVuZCA9IGV4cC5zb3VyY2VFbmQ7DQogfQ0KQEAgLTIwODgs
MTEgKzIwOTQsMTIgQEANCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9IFB1c2hMUEFSRU4gTmFtZSBE
aW1zIFB1c2hSUEFSRU4gSW5zaWRlQ2FzdEV4cHJlc3Npb24gVW5hcnlFeHByZXNzaW9uTm90UGx1
c01pbnVzDQogCXBvcEVsZW1lbnQoS19DQVNUX1NUQVRFTUVOVCk7DQogDQotCUV4cHJlc3Npb24g
ZXhwLCBjYXN0LCBjYXN0VHlwZTsNCi0NCisJRXhwcmVzc2lvbiBleHA7DQorCUV4cHJlc3Npb24g
Y2FzdDsNCisJVHlwZVJlZmVyZW5jZSBjYXN0VHlwZTsNCiAJdGhpcy5leHByZXNzaW9uUHRyLS07
DQogCXRoaXMuZXhwcmVzc2lvbkxlbmd0aFB0ci0tOw0KLQl0aGlzLmV4cHJlc3Npb25TdGFja1t0
aGlzLmV4cHJlc3Npb25QdHJdID0gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lvbihleHAgPSB0aGlz
LmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHIrMV0sIGNhc3RUeXBlID0gdGhpcy5l
eHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSk7DQorCXRoaXMuZXhwcmVzc2lvblN0
YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0gPSBjYXN0ID0gbmV3IENhc3RFeHByZXNzaW9uKGV4cCA9
IHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cisxXSwgY2FzdFR5cGUgPSAo
VHlwZVJlZmVyZW5jZSkgdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSk7
DQogCWNhc3Quc291cmNlU3RhcnQgPSBjYXN0VHlwZS5zb3VyY2VTdGFydCAtIDE7DQogCWNhc3Qu
c291cmNlRW5kID0gZXhwLnNvdXJjZUVuZDsNCiB9DQpJbmRleDogY29kZWFzc2lzdC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEN
Cj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qvc2VsZWN0
L1NlbGVjdGlvblBhcnNlci5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS45Mg0KZGlmZiAt
dSAtcjEuOTIgU2VsZWN0aW9uUGFyc2VyLmphdmENCi0tLSBjb2RlYXNzaXN0L29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L3NlbGVjdC9TZWxlY3Rpb25QYXJzZXIuamF2YQkyOCBK
dWwgMjAxMCAxNjoxNzowNCAtMDAwMAkxLjkyDQorKysgY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEJMjQgRmVi
IDIwMTEgMjA6MDE6NDEgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC0xMzQsNyAr
MTM0LDcgQEANCiAJCQkJRXhwcmVzc2lvbiBjYXN0VHlwZTsNCiAJCQkJaWYodGhpcy5leHByZXNz
aW9uUHRyID4gMA0KIAkJCQkJJiYgKChjYXN0VHlwZSA9IHRoaXMuZXhwcmVzc2lvblN0YWNrW3Ro
aXMuZXhwcmVzc2lvblB0ci0xXSkgaW5zdGFuY2VvZiBUeXBlUmVmZXJlbmNlKSkgew0KLQkJCQkJ
Q2FzdEV4cHJlc3Npb24gY2FzdCA9IG5ldyBDYXN0RXhwcmVzc2lvbihleHByZXNzaW9uLCBjYXN0
VHlwZSk7DQorCQkJCQlDYXN0RXhwcmVzc2lvbiBjYXN0ID0gbmV3IENhc3RFeHByZXNzaW9uKGV4
cHJlc3Npb24sIChUeXBlUmVmZXJlbmNlKSBjYXN0VHlwZSk7DQogCQkJCQljYXN0LnNvdXJjZVN0
YXJ0ID0gY2FzdFR5cGUuc291cmNlU3RhcnQ7DQogCQkJCQljYXN0LnNvdXJjZUVuZD0gZXhwcmVz
c2lvbi5zb3VyY2VFbmQ7DQogCQkJCQlwYXJlbnROb2RlID0gY2FzdDsNCkluZGV4OiBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhDQo9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhLHYNCnJldHJpZXZp
bmcgcmV2aXNpb24gMS4yMjYNCmRpZmYgLXUgLXIxLjIyNiBJUHJvYmxlbS5qYXZhDQotLS0gY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQkxNiBGZWIg
MjAxMSAwNzo1Njo1MSAtMDAwMAkxLjIyNg0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEJMjQgRmViIDIwMTEgMjA6MDE6NDEgLTAwMDANCkBA
IC01MjYsNiArNTI2LDcgQEANCiAJaW50IFRoaXNJblN0YXRpY0NvbnRleHQgPSBJbnRlcm5hbCAr
IDIwMDsNCiAJaW50IFN0YXRpY01ldGhvZFJlcXVlc3RlZCA9IEludGVybmFsICsgTWV0aG9kUmVs
YXRlZCArIDIwMTsNCiAJaW50IElsbGVnYWxEaW1lbnNpb24gPSBJbnRlcm5hbCArIDIwMjsNCisJ
LyoqIEBkZXByZWNhdGVkIC0gcHJvYmxlbSBpcyBubyBsb25nZXIgZ2VuZXJhdGVkICovDQogCWlu
dCBJbnZhbGlkVHlwZUV4cHJlc3Npb24gPSBJbnRlcm5hbCArIDIwMzsNCiAJaW50IFBhcnNpbmdF
cnJvciA9IFN5bnRheCArIEludGVybmFsICsgMjA0Ow0KIAlpbnQgUGFyc2luZ0Vycm9yTm9TdWdn
ZXN0aW9uID0gU3ludGF4ICsgSW50ZXJuYWwgKyAyMDU7DQpJbmRleDogY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhDQo9PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNz
aW9uLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjEzNw0KZGlmZiAtdSAtcjEuMTM3IENh
c3RFeHByZXNzaW9uLmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEJMTcgRGVjIDIwMTAgMDY6NDA6MTIgLTAw
MDAJMS4xMzcNCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0Nhc3RFeHByZXNzaW9uLmphdmEJMjQgRmViIDIwMTEgMjA6MDE6NDEgLTAwMDANCkBAIC0x
LDUgKzEsNSBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQNCkBAIC0zNywxMSArMzcsMTEgQEANCiBwdWJsaWMgY2xhc3MgQ2Fz
dEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsNCiANCiAJcHVibGljIEV4cHJlc3Npb24g
ZXhwcmVzc2lvbjsNCi0JcHVibGljIEV4cHJlc3Npb24gdHlwZTsNCisJcHVibGljIFR5cGVSZWZl
cmVuY2UgdHlwZTsNCiAJcHVibGljIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZTsgLy8gd2hlbiBh
c3NpZ25tZW50IGNvbnZlcnNpb24gdG8gYSBnaXZlbiBleHBlY3RlZCB0eXBlOiBTdHJpbmcgcyA9
IChTdHJpbmcpIHQ7DQogDQogLy9leHByZXNzaW9uLmltcGxpY2l0Q29udmVyc2lvbiBob2xkcyB0
aGUgY2FzdCBmb3IgYmFzZVR5cGUgY2FzdGluZw0KLXB1YmxpYyBDYXN0RXhwcmVzc2lvbihFeHBy
ZXNzaW9uIGV4cHJlc3Npb24sIEV4cHJlc3Npb24gdHlwZSkgew0KK3B1YmxpYyBDYXN0RXhwcmVz
c2lvbihFeHByZXNzaW9uIGV4cHJlc3Npb24sIFR5cGVSZWZlcmVuY2UgdHlwZSkgew0KIAl0aGlz
LmV4cHJlc3Npb24gPSBleHByZXNzaW9uOw0KIAl0aGlzLnR5cGUgPSB0eXBlOw0KIAl0eXBlLmJp
dHMgfD0gQVNUTm9kZS5JZ25vcmVSYXdUeXBlQ2hlY2s7IC8vIG5vIG5lZWQgdG8gd29ycnkgYWJv
dXQgcmF3IHR5cGUgdXNhZ2UNCkBAIC00NzYsNTUgKzQ3Niw0NiBAQA0KIAl0aGlzLmNvbnN0YW50
ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50Ow0KIAl0aGlzLmltcGxpY2l0Q29udmVyc2lvbiA9IFR5
cGVJZHMuVF91bmRlZmluZWQ7DQogDQotCWlmICgodGhpcy50eXBlIGluc3RhbmNlb2YgVHlwZVJl
ZmVyZW5jZSkgfHwgKHRoaXMudHlwZSBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UpDQotCQkJJiYg
KCh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuUGFyZW50aGVzaXplZE1BU0spID4+IEFTVE5vZGUu
UGFyZW50aGVzaXplZFNISUZUKSA9PSAwKSB7IC8vIG5vIGV4dHJhIHBhcmVudGhlc2lzIGFyb3Vu
ZCB0eXBlOiAoKEEpKWV4cA0KKwlib29sZWFuIGV4cHJDb250YWluQ2FzdCA9IGZhbHNlOw0KIA0K
LQkJYm9vbGVhbiBleHByQ29udGFpbkNhc3QgPSBmYWxzZTsNCi0NCi0JCVR5cGVCaW5kaW5nIGNh
c3RUeXBlID0gdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZVR5cGUoc2NvcGUp
Ow0KLQkJLy9leHByZXNzaW9uLnNldEV4cGVjdGVkVHlwZSh0aGlzLnJlc29sdmVkVHlwZSk7IC8v
IG5lZWRlZCBpbiBjYXNlIG9mIGdlbmVyaWMgbWV0aG9kIGludm9jYXRpb24NCi0JCWlmICh0aGlz
LmV4cHJlc3Npb24gaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgew0KLQkJCXRoaXMuZXhwcmVz
c2lvbi5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOw0KLQkJCWV4
cHJDb250YWluQ2FzdCA9IHRydWU7DQotCQl9DQotCQlUeXBlQmluZGluZyBleHByZXNzaW9uVHlw
ZSA9IHRoaXMuZXhwcmVzc2lvbi5yZXNvbHZlVHlwZShzY29wZSk7DQotCQlpZiAoY2FzdFR5cGUg
IT0gbnVsbCkgew0KLQkJCWlmIChleHByZXNzaW9uVHlwZSAhPSBudWxsKSB7DQotCQkJCWJvb2xl
YW4gaXNMZWdhbCA9IGNoZWNrQ2FzdFR5cGVzQ29tcGF0aWJpbGl0eShzY29wZSwgY2FzdFR5cGUs
IGV4cHJlc3Npb25UeXBlLCB0aGlzLmV4cHJlc3Npb24pOw0KLQkJCQlpZiAoaXNMZWdhbCkgew0K
LQkJCQkJdGhpcy5leHByZXNzaW9uLmNvbXB1dGVDb252ZXJzaW9uKHNjb3BlLCBjYXN0VHlwZSwg
ZXhwcmVzc2lvblR5cGUpOw0KLQkJCQkJaWYgKCh0aGlzLmJpdHMgJiBBU1ROb2RlLlVuc2FmZUNh
c3QpICE9IDApIHsgLy8gdW5zYWZlIGNhc3QNCi0JCQkJCQlpZiAoc2NvcGUuY29tcGlsZXJPcHRp
b25zKCkucmVwb3J0VW5hdm9pZGFibGVHZW5lcmljVHlwZVByb2JsZW1zIHx8ICF0aGlzLmV4cHJl
c3Npb24uZm9yY2VkVG9CZVJhdyhzY29wZS5yZWZlcmVuY2VDb250ZXh0KCkpKSB7DQotCQkJCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuc2FmZUNhc3QodGhpcywgc2NvcGUpOw0KLQkJCQkJ
CX0NCi0JCQkJCX0gZWxzZSB7DQotCQkJCQkJaWYgKGNhc3RUeXBlLmlzUmF3VHlwZSgpICYmIHNj
b3BlLmNvbXBpbGVyT3B0aW9ucygpLmdldFNldmVyaXR5KENvbXBpbGVyT3B0aW9ucy5SYXdUeXBl
UmVmZXJlbmNlKSAhPSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25vcmUpew0KLQkJCQkJCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5yYXdUeXBlUmVmZXJlbmNlKHRoaXMudHlwZSwgY2FzdFR5cGUpOw0K
LQkJCQkJCX0NCi0JCQkJCQlpZiAoKHRoaXMuYml0cyAmIChBU1ROb2RlLlVubmVjZXNzYXJ5Q2Fz
dHxBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjaykpID09IEFTVE5vZGUuVW5uZWNl
c3NhcnlDYXN0KSB7IC8vIHVubmVjZXNzYXJ5IGNhc3QNCi0JCQkJCQkJaWYgKCFpc0luZGlyZWN0
bHlVc2VkKCkpIC8vIHVzZWQgZm9yIGdlbmVyaWMgdHlwZSBpbmZlcmVuY2Ugb3IgYm94aW5nID8N
Ci0JCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCh0aGlzKTsN
Ci0JCQkJCQl9DQorCVR5cGVCaW5kaW5nIGNhc3RUeXBlID0gdGhpcy5yZXNvbHZlZFR5cGUgPSB0
aGlzLnR5cGUucmVzb2x2ZVR5cGUoc2NvcGUpOw0KKwkvL2V4cHJlc3Npb24uc2V0RXhwZWN0ZWRU
eXBlKHRoaXMucmVzb2x2ZWRUeXBlKTsgLy8gbmVlZGVkIGluIGNhc2Ugb2YgZ2VuZXJpYyBtZXRo
b2QgaW52b2NhdGlvbg0KKwlpZiAodGhpcy5leHByZXNzaW9uIGluc3RhbmNlb2YgQ2FzdEV4cHJl
c3Npb24pIHsNCisJCXRoaXMuZXhwcmVzc2lvbi5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVj
ZXNzYXJ5Q2FzdENoZWNrOw0KKwkJZXhwckNvbnRhaW5DYXN0ID0gdHJ1ZTsNCisJfQ0KKwlUeXBl
QmluZGluZyBleHByZXNzaW9uVHlwZSA9IHRoaXMuZXhwcmVzc2lvbi5yZXNvbHZlVHlwZShzY29w
ZSk7DQorCWlmIChjYXN0VHlwZSAhPSBudWxsKSB7DQorCQlpZiAoZXhwcmVzc2lvblR5cGUgIT0g
bnVsbCkgew0KKwkJCWJvb2xlYW4gaXNMZWdhbCA9IGNoZWNrQ2FzdFR5cGVzQ29tcGF0aWJpbGl0
eShzY29wZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlLCB0aGlzLmV4cHJlc3Npb24pOw0KKwkJ
CWlmIChpc0xlZ2FsKSB7DQorCQkJCXRoaXMuZXhwcmVzc2lvbi5jb21wdXRlQ29udmVyc2lvbihz
Y29wZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlKTsNCisJCQkJaWYgKCh0aGlzLmJpdHMgJiBB
U1ROb2RlLlVuc2FmZUNhc3QpICE9IDApIHsgLy8gdW5zYWZlIGNhc3QNCisJCQkJCWlmIChzY29w
ZS5jb21waWxlck9wdGlvbnMoKS5yZXBvcnRVbmF2b2lkYWJsZUdlbmVyaWNUeXBlUHJvYmxlbXMg
fHwgIXRoaXMuZXhwcmVzc2lvbi5mb3JjZWRUb0JlUmF3KHNjb3BlLnJlZmVyZW5jZUNvbnRleHQo
KSkpIHsNCisJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bnNhZmVDYXN0KHRoaXMsIHNj
b3BlKTsNCiAJCQkJCX0NCi0JCQkJfSBlbHNlIHsgLy8gaWxsZWdhbCBjYXN0DQotCQkJCQlpZiAo
KGNhc3RUeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSA9PSAwKSB7IC8vIG5v
IGNvbXBsYWludCBpZiBzZWNvbmRhcnkgZXJyb3INCi0JCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS50eXBlQ2FzdEVycm9yKHRoaXMsIGNhc3RUeXBlLCBleHByZXNzaW9uVHlwZSk7DQorCQkJ
CX0gZWxzZSB7DQorCQkJCQlpZiAoY2FzdFR5cGUuaXNSYXdUeXBlKCkgJiYgc2NvcGUuY29tcGls
ZXJPcHRpb25zKCkuZ2V0U2V2ZXJpdHkoQ29tcGlsZXJPcHRpb25zLlJhd1R5cGVSZWZlcmVuY2Up
ICE9IFByb2JsZW1TZXZlcml0aWVzLklnbm9yZSl7DQorCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkucmF3VHlwZVJlZmVyZW5jZSh0aGlzLnR5cGUsIGNhc3RUeXBlKTsNCisJCQkJCX0NCisJ
CQkJCWlmICgodGhpcy5iaXRzICYgKEFTVE5vZGUuVW5uZWNlc3NhcnlDYXN0fEFTVE5vZGUuRGlz
YWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrKSkgPT0gQVNUTm9kZS5Vbm5lY2Vzc2FyeUNhc3QpIHsg
Ly8gdW5uZWNlc3NhcnkgY2FzdA0KKwkJCQkJCWlmICghaXNJbmRpcmVjdGx5VXNlZCgpKSAvLyB1
c2VkIGZvciBnZW5lcmljIHR5cGUgaW5mZXJlbmNlIG9yIGJveGluZyA/DQorCQkJCQkJCXNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCh0aGlzKTsNCiAJCQkJCX0NCi0JCQkJ
CXRoaXMuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gZGlz
YWJsZSBmdXJ0aGVyIHNlY29uZGFyeSBkaWFnbm9zaXMNCiAJCQkJfQ0KKwkJCX0gZWxzZSB7IC8v
IGlsbGVnYWwgY2FzdA0KKwkJCQlpZiAoKGNhc3RUeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01p
c3NpbmdUeXBlKSA9PSAwKSB7IC8vIG5vIGNvbXBsYWludCBpZiBzZWNvbmRhcnkgZXJyb3INCisJ
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVDYXN0RXJyb3IodGhpcywgY2FzdFR5cGUs
IGV4cHJlc3Npb25UeXBlKTsNCisJCQkJfQ0KKwkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5EaXNh
YmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIGRpc2FibGUgZnVydGhlciBzZWNvbmRhcnkgZGlh
Z25vc2lzDQogCQkJfQ0KLQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gY2FzdFR5cGUuY2FwdHVyZShz
Y29wZSwgdGhpcy5zb3VyY2VFbmQpOw0KLQkJCWlmIChleHByQ29udGFpbkNhc3QpIHsNCi0JCQkJ
Y2hlY2tOZWVkRm9yQ2FzdENhc3Qoc2NvcGUsIHRoaXMpOw0KLQkJCX0NCiAJCX0NCi0JCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsNCi0JfSBlbHNlIHsgLy8gZXhwcmVzc2lvbiBhcyBhIGNhc3QN
Ci0JCVR5cGVCaW5kaW5nIGV4cHJlc3Npb25UeXBlID0gdGhpcy5leHByZXNzaW9uLnJlc29sdmVU
eXBlKHNjb3BlKTsNCi0JCWlmIChleHByZXNzaW9uVHlwZSA9PSBudWxsKSByZXR1cm4gbnVsbDsN
Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRUeXBlUmVmZXJlbmNlKHRoaXMudHlw
ZSk7DQotCQlyZXR1cm4gbnVsbDsNCisJCXRoaXMucmVzb2x2ZWRUeXBlID0gY2FzdFR5cGUuY2Fw
dHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOw0KKwkJaWYgKGV4cHJDb250YWluQ2FzdCkgew0K
KwkJCWNoZWNrTmVlZEZvckNhc3RDYXN0KHNjb3BlLCB0aGlzKTsNCisJCX0NCiAJfQ0KKwlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGU7DQogfQ0KIA0KIC8qKg0KSW5kZXg6IGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmENCj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEs
dg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQyMg0KZGlmZiAtdSAtcjEuNDIyIFBhcnNlci5qYXZh
DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9Q
YXJzZXIuamF2YQk1IEphbiAyMDExIDE5OjU3OjI2IC0wMDAwCTEuNDIyDQorKysgY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQkyNCBG
ZWIgMjAxMSAyMDowMTo0MSAtMDAwMA0KQEAgLTIwMjYsMTIgKzIwMjYsMTMgQEANCiANCiAJLy9v
cHRpbWl6ZSBwdXNoL3BvcA0KIA0KLQlFeHByZXNzaW9uIGNhc3QsZXhwOw0KKwlFeHByZXNzaW9u
IGNhc3Q7DQorCUV4cHJlc3Npb24gZXhwOw0KIAl0aGlzLmV4cHJlc3Npb25QdHItLTsNCiAJdGhp
cy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9DQogCQljYXN0ID0gbmV3IENh
c3RFeHByZXNzaW9uKA0KIAkJCWV4cD10aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Np
b25QdHIrMV0gLA0KLQkJCXRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0p
Ow0KKwkJCShUeXBlUmVmZXJlbmNlKSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Np
b25QdHJdKTsNCiAJdGhpcy5leHByZXNzaW9uTGVuZ3RoUHRyIC0tIDsNCiAJdXBkYXRlU291cmNl
UG9zaXRpb24oY2FzdCk7DQogCWNhc3Quc291cmNlRW5kPWV4cC5zb3VyY2VFbmQ7DQpAQCAtMjAz
OSw3ICsyMDQwLDkgQEANCiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRo
R2VuZXJpY3NBcnJheSgpIHsNCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9IFB1c2hMUEFSRU4gTmFt
ZSBUeXBlQXJndW1lbnRzIERpbXMgUHVzaFJQQVJFTiBJbnNpZGVDYXN0RXhwcmVzc2lvbiBVbmFy
eUV4cHJlc3Npb25Ob3RQbHVzTWludXMNCiANCi0JRXhwcmVzc2lvbiBleHAsIGNhc3QsIGNhc3RU
eXBlOw0KKwlFeHByZXNzaW9uIGV4cDsNCisJRXhwcmVzc2lvbiBjYXN0Ow0KKwlUeXBlUmVmZXJl
bmNlIGNhc3RUeXBlOw0KIAlpbnQgZW5kID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsN
CiANCiAJaW50IGRpbSA9IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07DQpAQCAtMjA1NCw3
ICsyMDU3LDkgQEANCiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoTmFt
ZUFycmF5KCkgew0KIAkvLyBDYXN0RXhwcmVzc2lvbiA6Oj0gUHVzaExQQVJFTiBOYW1lIERpbXMg
UHVzaFJQQVJFTiBJbnNpZGVDYXN0RXhwcmVzc2lvbiBVbmFyeUV4cHJlc3Npb25Ob3RQbHVzTWlu
dXMNCiANCi0JRXhwcmVzc2lvbiBleHAsIGNhc3QsIGNhc3RUeXBlOw0KKwlFeHByZXNzaW9uIGV4
cDsNCisJRXhwcmVzc2lvbiBjYXN0Ow0KKwlUeXBlUmVmZXJlbmNlIGNhc3RUeXBlOw0KIAlpbnQg
ZW5kID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsNCiANCiAJLy8gaGFuZGxlIHR5cGUg
YXJndW1lbnRzDQpAQCAtMjA3Myw3ICsyMDc4LDkgQEANCiANCiAJLy9vcHRpbWl6ZSB0aGUgcHVz
aC9wb3ANCiANCi0JRXhwcmVzc2lvbiBleHAsIGNhc3QsIGNhc3RUeXBlOw0KKwlFeHByZXNzaW9u
IGV4cDsNCisJRXhwcmVzc2lvbiBjYXN0Ow0KKwlUeXBlUmVmZXJlbmNlIGNhc3RUeXBlOw0KIAlp
bnQgZW5kID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsNCiAJdGhpcy5leHByZXNzaW9u
U3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IGNhc3QgPSBuZXcgQ2FzdEV4cHJlc3Npb24oZXhw
ID0gdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSwgY2FzdFR5cGUgPSBn
ZXRUeXBlUmVmZXJlbmNlKHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV0pKTsNCiAJY2FzdFR5
cGUuc291cmNlRW5kID0gZW5kIC0gMTsNCkBAIC0yMDgyLDcgKzIwODksOSBAQA0KIH0NCiBwcm90
ZWN0ZWQgdm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoUXVhbGlmaWVkR2VuZXJpY3NBcnJh
eSgpIHsNCiAJLy8gQ2FzdEV4cHJlc3Npb24gOjo9IFB1c2hMUEFSRU4gTmFtZSBPbmx5VHlwZUFy
Z3VtZW50cyAnLicgQ2xhc3NPckludGVyZmFjZVR5cGUgRGltcyBQdXNoUlBBUkVOIEluc2lkZUNh
c3RFeHByZXNzaW9uIFVuYXJ5RXhwcmVzc2lvbk5vdFBsdXNNaW51cw0KLQlFeHByZXNzaW9uIGV4
cCwgY2FzdCwgY2FzdFR5cGU7DQorCUV4cHJlc3Npb24gZXhwOw0KKwlFeHByZXNzaW9uIGNhc3Q7
DQorCVR5cGVSZWZlcmVuY2UgY2FzdFR5cGU7DQogCWludCBlbmQgPSB0aGlzLmludFN0YWNrW3Ro
aXMuaW50UHRyLS1dOw0KIA0KIAlpbnQgZGltID0gdGhpcy5pbnRTdGFja1t0aGlzLmludFB0ci0t
XTsNCkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEsdg0KcmV0cmlldmlu
ZyByZXZpc2lvbiAxLjQzMg0KZGlmZiAtdSAtcjEuNDMyIFByb2JsZW1SZXBvcnRlci5qYXZhDQot
LS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJv
YmxlbVJlcG9ydGVyLmphdmEJMTYgRmViIDIwMTEgMDc6NTY6NTAgLTAwMDAJMS40MzINCisrKyBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVt
UmVwb3J0ZXIuamF2YQkyNCBGZWIgMjAxMSAyMDowMTo0MiAtMDAwMA0KQEAgLTM4MDcsMTQgKzM4
MDcsNiBAQA0KIAkJCWV4cHJlc3Npb24uc291cmNlU3RhcnQsDQogCQkJZXhwcmVzc2lvbi5zb3Vy
Y2VFbmQpOw0KIH0NCi1wdWJsaWMgdm9pZCBpbnZhbGlkVHlwZVJlZmVyZW5jZShFeHByZXNzaW9u
IGV4cHJlc3Npb24pIHsNCi0JdGhpcy5oYW5kbGUoDQotCQlJUHJvYmxlbS5JbnZhbGlkVHlwZUV4
cHJlc3Npb24sDQotCQlOb0FyZ3VtZW50LA0KLQkJTm9Bcmd1bWVudCwNCi0JCWV4cHJlc3Npb24u
c291cmNlU3RhcnQsDQotCQlleHByZXNzaW9uLnNvdXJjZUVuZCk7DQotfQ0KIHB1YmxpYyB2b2lk
IGludmFsaWRUeXBlVG9TeW5jaHJvbml6ZShFeHByZXNzaW9uIGV4cHJlc3Npb24sIFR5cGVCaW5k
aW5nIHR5cGUpIHsNCiAJdGhpcy5oYW5kbGUoDQogCQlJUHJvYmxlbS5JbnZhbGlkVHlwZVRvU3lu
Y2hyb25pemVkLA0KSW5kZXg6IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMNCj09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAv
Y3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMsdg0KcmV0
cmlldmluZyByZXZpc2lvbiAxLjI2Mw0KZGlmZiAtdSAtcjEuMjYzIG1lc3NhZ2VzLnByb3BlcnRp
ZXMNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxl
bS9tZXNzYWdlcy5wcm9wZXJ0aWVzCTE2IEZlYiAyMDExIDA3OjU2OjUwIC0wMDAwCTEuMjYzDQor
KysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVz
c2FnZXMucHJvcGVydGllcwkyNCBGZWIgMjAxMSAyMDowMTo0MiAtMDAwMA0KQEAgLTE4MSw3ICsx
ODEsNyBAQA0KIDIwMCA9IENhbm5vdCB1c2UgezB9IGluIGEgc3RhdGljIGNvbnRleHQNCiAyMDEg
PSBDYW5ub3QgbWFrZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgbWV0aG9k
IHsxfSh7Mn0pIGZyb20gdGhlIHR5cGUgezB9DQogMjAyID0gQ2Fubm90IHNwZWNpZnkgYW4gYXJy
YXkgZGltZW5zaW9uIGFmdGVyIGFuIGVtcHR5IGRpbWVuc2lvbg0KLTIwMyA9IEludmFsaWQgY2Fz
dCBleHByZXNzaW9uDQorIzIwMyA9IEludmFsaWQgY2FzdCBleHByZXNzaW9uDQogMjA0ID0gU3lu
dGF4IGVycm9yIG9uIHRva2VuICJ7MH0iLCB7MX0gZXhwZWN0ZWQNCiAyMDUgPSBTeW50YXggZXJy
b3Igb24gdG9rZW4gInswfSIsIG5vIGFjY3VyYXRlIGNvcnJlY3Rpb24gYXZhaWxhYmxlDQogMjA2
ID0gSW52YWxpZCBhcmd1bWVudCB0byBvcGVyYXRpb24gKysvLS0NCkluZGV4OiBkb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhDQo9PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmls
ZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4y
NzMNCmRpZmYgLXUgLXIxLjI3MyBBU1RDb252ZXJ0ZXIuamF2YQ0KLS0tIGRvbS9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEJMTMgRGVjIDIwMTAgMTQ6NDQ6MjIgLTAw
MDAJMS4yNzMNCisrKyBkb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5q
YXZhCTI0IEZlYiAyMDExIDIwOjAxOjQyIC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpA
QCAtMTE5NiwxMyArMTE5Niw5IEBADQogCXB1YmxpYyBDYXN0RXhwcmVzc2lvbiBjb252ZXJ0KG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ2FzdEV4cHJlc3Npb24gZXhwcmVz
c2lvbikgew0KIAkJQ2FzdEV4cHJlc3Npb24gY2FzdEV4cHJlc3Npb24gPSBuZXcgQ2FzdEV4cHJl
c3Npb24odGhpcy5hc3QpOw0KIAkJY2FzdEV4cHJlc3Npb24uc2V0U291cmNlUmFuZ2UoZXhwcmVz
c2lvbi5zb3VyY2VTdGFydCwgZXhwcmVzc2lvbi5zb3VyY2VFbmQgLSBleHByZXNzaW9uLnNvdXJj
ZVN0YXJ0ICsgMSk7DQotCQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4
cHJlc3Npb24gdHlwZSA9IGV4cHJlc3Npb24udHlwZTsNCisJCVR5cGVSZWZlcmVuY2UgdHlwZSA9
IGV4cHJlc3Npb24udHlwZTsNCiAJCXRyaW1XaGl0ZVNwYWNlc0FuZENvbW1lbnRzKHR5cGUpOw0K
LQkJaWYgKHR5cGUgaW5zdGFuY2VvZiBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LlR5cGVSZWZlcmVuY2UgKSB7DQotCQkJY2FzdEV4cHJlc3Npb24uc2V0VHlwZShjb252ZXJ0
VHlwZSgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNl
KXR5cGUpKTsNCi0JCX0gZWxzZSBpZiAodHlwZSBpbnN0YW5jZW9mIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3QuTmFtZVJlZmVyZW5jZSkgew0KLQkJCWNhc3RFeHByZXNzaW9u
LnNldFR5cGUoY29udmVydFRvVHlwZSgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5OYW1lUmVmZXJlbmNlKXR5cGUpKTsNCi0JCX0NCisJCWNhc3RFeHByZXNzaW9uLnNldFR5
cGUoY29udmVydFR5cGUodHlwZSkpOw0KIAkJY2FzdEV4cHJlc3Npb24uc2V0RXhwcmVzc2lvbihj
b252ZXJ0KGV4cHJlc3Npb24uZXhwcmVzc2lvbikpOw0KIAkJaWYgKHRoaXMucmVzb2x2ZUJpbmRp
bmdzKSB7DQogCQkJcmVjb3JkTm9kZXMoY2FzdEV4cHJlc3Npb24sIGV4cHJlc3Npb24pOw0KQEAg
LTI5NjUsMTcgKzI5NjEsNiBAQA0KIAkJcmV0dXJuIHBhcmVudGhlc2l6ZWRFeHByZXNzaW9uOw0K
IAl9DQogDQotCXB1YmxpYyBUeXBlIGNvbnZlcnRUb1R5cGUob3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5OYW1lUmVmZXJlbmNlIHJlZmVyZW5jZSkgew0KLQkJTmFtZSBuYW1l
ID0gY29udmVydChyZWZlcmVuY2UpOw0KLQkJZmluYWwgU2ltcGxlVHlwZSB0eXBlID0gbmV3IFNp
bXBsZVR5cGUodGhpcy5hc3QpOw0KLQkJdHlwZS5zZXROYW1lKG5hbWUpOw0KLQkJdHlwZS5zZXRT
b3VyY2VSYW5nZShuYW1lLmdldFN0YXJ0UG9zaXRpb24oKSwgbmFtZS5nZXRMZW5ndGgoKSk7DQot
CQlpZiAodGhpcy5yZXNvbHZlQmluZGluZ3MpIHsNCi0JCQl0aGlzLnJlY29yZE5vZGVzKHR5cGUs
IHJlZmVyZW5jZSk7DQotCQl9DQotCQlyZXR1cm4gdHlwZTsNCi0JfQ0KLQ0KIAlwcm90ZWN0ZWQg
VmFyaWFibGVEZWNsYXJhdGlvbkV4cHJlc3Npb24gY29udmVydFRvVmFyaWFibGVEZWNsYXJhdGlv
bkV4cHJlc3Npb24ob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Mb2NhbERl
Y2xhcmF0aW9uIGxvY2FsRGVjbGFyYXRpb24pIHsNCiAJCWZpbmFsIFZhcmlhYmxlRGVjbGFyYXRp
b25GcmFnbWVudCB2YXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQgPSBjb252ZXJ0VG9WYXJpYWJs
ZURlY2xhcmF0aW9uRnJhZ21lbnQobG9jYWxEZWNsYXJhdGlvbik7DQogCQlmaW5hbCBWYXJpYWJs
ZURlY2xhcmF0aW9uRXhwcmVzc2lvbiB2YXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbiA9IG5l
dyBWYXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbih0aGlzLmFzdCk7DQpJbmRleDogc2VhcmNo
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9NYXRjaExvY2F0
b3JQYXJzZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3Nl
YXJjaC9tYXRjaGluZy9NYXRjaExvY2F0b3JQYXJzZXIuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlz
aW9uIDEuODgNCmRpZmYgLXUgLXIxLjg4IE1hdGNoTG9jYXRvclBhcnNlci5qYXZhDQotLS0gc2Vh
cmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9NYXRjaExv
Y2F0b3JQYXJzZXIuamF2YQk3IFNlcCAyMDEwIDA4OjE2OjE5IC0wMDAwCTEuODgNCisrKyBzZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL01hdGNoTG9j
YXRvclBhcnNlci5qYXZhCTI0IEZlYiAyMDExIDIwOjAxOjQyIC0wMDAwDQpAQCAtMSw1ICsxLDUg
QEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0DQpAQCAtMjEzLDQ1ICsyMTMsMzUgQEANCiAJc3VwZXIuY29uc3VtZUNhc3RFeHBy
ZXNzaW9uTEwxKCk7DQogCWlmICgodGhpcy5wYXR0ZXJuRmluZUdyYWluICYgSUphdmFTZWFyY2hD
b25zdGFudHMuQ0FTVF9UWVBFX1JFRkVSRU5DRSkgIT0gMCkgew0KIAkJQ2FzdEV4cHJlc3Npb24g
Y2FzdEV4cHJlc3Npb24gPSAoQ2FzdEV4cHJlc3Npb24pIHRoaXMuZXhwcmVzc2lvblN0YWNrW3Ro
aXMuZXhwcmVzc2lvblB0cl07DQotCQlpZiAoY2FzdEV4cHJlc3Npb24udHlwZSBpbnN0YW5jZW9m
IFR5cGVSZWZlcmVuY2UpIHsNCi0JCQl0aGlzLnBhdHRlcm5Mb2NhdG9yLm1hdGNoKChUeXBlUmVm
ZXJlbmNlKSBjYXN0RXhwcmVzc2lvbi50eXBlLCB0aGlzLm5vZGVTZXQpOw0KLSAgICAgICAgfQ0K
KwkJdGhpcy5wYXR0ZXJuTG9jYXRvci5tYXRjaChjYXN0RXhwcmVzc2lvbi50eXBlLCB0aGlzLm5v
ZGVTZXQpOw0KIAl9DQogfQ0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVDYXN0RXhwcmVzc2lvbldp
dGhHZW5lcmljc0FycmF5KCkgew0KIAlzdXBlci5jb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoR2Vu
ZXJpY3NBcnJheSgpOw0KIAlpZiAoKHRoaXMucGF0dGVybkZpbmVHcmFpbiAmIElKYXZhU2VhcmNo
Q29uc3RhbnRzLkNBU1RfVFlQRV9SRUZFUkVOQ0UpICE9IDApIHsNCiAJCUNhc3RFeHByZXNzaW9u
IGNhc3RFeHByZXNzaW9uID0gKENhc3RFeHByZXNzaW9uKSB0aGlzLmV4cHJlc3Npb25TdGFja1t0
aGlzLmV4cHJlc3Npb25QdHJdOw0KLQkJaWYgKGNhc3RFeHByZXNzaW9uLnR5cGUgaW5zdGFuY2Vv
ZiBSZWZlcmVuY2UpIHsNCi0JCQl0aGlzLnBhdHRlcm5Mb2NhdG9yLm1hdGNoKChSZWZlcmVuY2Up
IGNhc3RFeHByZXNzaW9uLnR5cGUsIHRoaXMubm9kZVNldCk7DQotICAgICAgICB9DQorCQl0aGlz
LnBhdHRlcm5Mb2NhdG9yLm1hdGNoKGNhc3RFeHByZXNzaW9uLnR5cGUsIHRoaXMubm9kZVNldCk7
DQogCX0NCiB9DQogcHJvdGVjdGVkIHZvaWQgY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aE5hbWVB
cnJheSgpIHsNCiAJc3VwZXIuY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aE5hbWVBcnJheSgpOw0K
IAlpZiAoKHRoaXMucGF0dGVybkZpbmVHcmFpbiAmIElKYXZhU2VhcmNoQ29uc3RhbnRzLkNBU1Rf
VFlQRV9SRUZFUkVOQ0UpICE9IDApIHsNCiAJCUNhc3RFeHByZXNzaW9uIGNhc3RFeHByZXNzaW9u
ID0gKENhc3RFeHByZXNzaW9uKSB0aGlzLmV4cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25Q
dHJdOw0KLQkJaWYgKGNhc3RFeHByZXNzaW9uLnR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2UpIHsN
Ci0JCQl0aGlzLnBhdHRlcm5Mb2NhdG9yLm1hdGNoKChSZWZlcmVuY2UpIGNhc3RFeHByZXNzaW9u
LnR5cGUsIHRoaXMubm9kZVNldCk7DQotICAgICAgICB9DQorCQl0aGlzLnBhdHRlcm5Mb2NhdG9y
Lm1hdGNoKGNhc3RFeHByZXNzaW9uLnR5cGUsIHRoaXMubm9kZVNldCk7DQogCX0NCiB9DQogcHJv
dGVjdGVkIHZvaWQgY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aFByaW1pdGl2ZVR5cGUoKSB7DQog
CXN1cGVyLmNvbnN1bWVDYXN0RXhwcmVzc2lvbldpdGhQcmltaXRpdmVUeXBlKCk7DQogCWlmICgo
dGhpcy5wYXR0ZXJuRmluZUdyYWluICYgSUphdmFTZWFyY2hDb25zdGFudHMuQ0FTVF9UWVBFX1JF
RkVSRU5DRSkgIT0gMCkgew0KIAkJQ2FzdEV4cHJlc3Npb24gY2FzdEV4cHJlc3Npb24gPSAoQ2Fz
dEV4cHJlc3Npb24pIHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl07DQot
CQlpZiAoY2FzdEV4cHJlc3Npb24udHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZSkgew0KLQkJCXRo
aXMucGF0dGVybkxvY2F0b3IubWF0Y2goKFJlZmVyZW5jZSkgY2FzdEV4cHJlc3Npb24udHlwZSwg
dGhpcy5ub2RlU2V0KTsNCi0gICAgICAgIH0NCisJCXRoaXMucGF0dGVybkxvY2F0b3IubWF0Y2go
Y2FzdEV4cHJlc3Npb24udHlwZSwgdGhpcy5ub2RlU2V0KTsNCiAJfQ0KIH0NCiBwcm90ZWN0ZWQg
dm9pZCBjb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoUXVhbGlmaWVkR2VuZXJpY3NBcnJheSgpIHsN
CiAJc3VwZXIuY29uc3VtZUNhc3RFeHByZXNzaW9uV2l0aFF1YWxpZmllZEdlbmVyaWNzQXJyYXko
KTsNCiAJaWYgKCh0aGlzLnBhdHRlcm5GaW5lR3JhaW4gJiBJSmF2YVNlYXJjaENvbnN0YW50cy5D
QVNUX1RZUEVfUkVGRVJFTkNFKSAhPSAwKSB7DQogCQlDYXN0RXhwcmVzc2lvbiBjYXN0RXhwcmVz
c2lvbiA9IChDYXN0RXhwcmVzc2lvbikgdGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNz
aW9uUHRyXTsNCi0JCWlmIChjYXN0RXhwcmVzc2lvbi50eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNl
KSB7DQotCQkJdGhpcy5wYXR0ZXJuTG9jYXRvci5tYXRjaCgoUmVmZXJlbmNlKSBjYXN0RXhwcmVz
c2lvbi50eXBlLCB0aGlzLm5vZGVTZXQpOw0KLSAgICAgICAgfQ0KKwkJdGhpcy5wYXR0ZXJuTG9j
YXRvci5tYXRjaChjYXN0RXhwcmVzc2lvbi50eXBlLCB0aGlzLm5vZGVTZXQpOw0KIAl9DQogfQ0K
IA0K
</data>

          </attachment>
      

    </bug>

</bugzilla>