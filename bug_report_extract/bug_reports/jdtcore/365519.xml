<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>365519</bug_id>
          
          <creation_ts>2011-12-04 07:42:00 -0500</creation_ts>
          <short_desc>editorial cleanup after bug 186342 and bug 365387</short_desc>
          <delta_ts>2012-01-24 13:08:07 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2035377</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 07:42:46 -0500</bug_when>
    <thetext>From bug 365387 comment 18:
&gt; (ii) A tested patch with all other changes can be released without review
&gt; any time *after* M4 ships, as early as possible.

This bug serves as a scratch pad for preparing that editorial patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035378</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 07:55:55 -0500</bug_when>
    <thetext>To be covered in this bug:

(In reply to bug 365387 comment #14)
&gt; Here are a few more: None of them urgent enough to be fixed for
&gt; M4.
&gt; 
&gt; 
&gt; (12) Nit:
&gt; org.eclipse.jdt.internal.compiler.ast.EqualExpression.checkNullComparison:
&gt; Comment reads:
&gt; // check if either method is annotated @NonNull and compared to null:
&gt; I think you meant
&gt; // check if either is a method annotated @NonNull and compared to null:
&gt; 
&gt; (13) Nit: Argument#bind(): Why is the call to the new extracted method
&gt; createBinding happening in the &quot;wrong&quot; place ? It could have been made
&gt; in the same place from which the extraction happened, i.e just after
&gt; the localVariableHiding diagnostic. I don&apos;t see a problem per se with
&gt; the new place, just that it makes a reviewer spend wasteful cycles
&gt; trying to understand if there is some side effect that needs to be 
&gt; understood. (can be left as it is)
&gt; 
&gt; (14) Nit: Argument#bind(): This (pre-existing) comment should have
&gt; been deleted long ago. It makes no sense there now: (Long ago, there
&gt; was a call to the ctor of LVB there)
&gt; //true stand for argument instead of just local
&gt; 
&gt; (15) ReturnStatement#checkAgainstNullAnnotation(): What motivates the
&gt; try-catch block for the NPE ? (can leave it as it is regardless)
&gt; 
&gt; (16)
&gt; org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.findDefaultNullness:
&gt; The line that reads:
&gt; while (currentType instanceof SourceTypeBinding) {
&gt; Could this have been the cheaper check:
&gt; while (currentType != null) ? 
&gt; (If so fix post M4)
&gt; 
&gt; (17)
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodBinding.fillInDefaultNonNullness
&gt; for (int i = 0; i &lt; this.parameterNonNullness.length; i++) {
&gt; length could have been extracted into a local since it is loop invariant (no
&gt; need to fix now)
&gt; Same comment for
&gt; org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations()
&gt; 
&gt; (18) Same method: I think you meant to have
&gt; boolean added = false;  and
&gt; if (added)
&gt;     this.tagBits |= TagBits.HasParameterAnnotations;
&gt; outside the loop.
&gt; 
&gt; (19)
&gt; org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.addNullnessAnnotation
&gt; Should this have been named addNonNullAnnotation to match
&gt; org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.addParameterNonNullAnnotation
&gt; They both do the same thing, one on parameters and the other on return type.

(In reply to bug 365387 comment #17)
&gt; I have completed the review and here is the final batch of comments:
&gt; 
&gt; (23)
&gt; org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations
&gt; Should be renamed to be specific to null annotations.
&gt; 
&gt; (24) Extract to local: 
&gt; (a) org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments
&gt;     arguments.length can be extracted into a local (for loop)
&gt; (b)
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkNullSpecInheritance
&gt;     inheritedMethod.parameterNonNullness.length can be extracted into local.
&gt;     currentMethod.parameterNonNullness.length can be extracted into local.
&gt; (c)
&gt; org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isPackageOfQualifiedTypeName
&gt;     packageName.length : extract to local.
&gt; (d)
&gt; org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations
&gt;     this.binding.parameters.length can be extracted into a local.
&gt; (e)
&gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.findAnnotationSourceStart
&gt;     annotations.length can be extracted to local.
&gt;
&gt; [...]
&gt;
&gt; (27) Surround the entire of the method body of
&gt; org.eclipse.jdt.internal.compiler.lookup.PackageBinding.checkIfNullAnnotationType
&gt; with a if (env.globalOptions.isAnnotationBasedNullAnalysisEnabled)
&gt; 
&gt; (28) Rather than inventing
&gt; org.eclipse.jdt.internal.compiler.lookup.PackageBinding.checkIfNullAnnotationType
&gt; we could have used
&gt; org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.computeId. It would
&gt; have been
&gt; cleaner to continue to centralize the id computation in one place.
&gt; 
&gt; (29) Should
&gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.parameterLackingNonNullAnnotation
&gt; have been named parameterLackingNullAnnotation ?
&gt; 
&gt; (30) No need to fix this: It would have been better if the expected types
&gt; maintenance in
&gt; FlowContext was pushed down to Fina*Flow*Context and Loop*Flow*Context even if
&gt; this meant
&gt; duplication. Such a solution would have integrated better with the existing
&gt; code (See
&gt; management of nullLocals, nullReferences and nullCheckTypes in both classes)
&gt; 
&gt; (31) org.eclipse.jdt.internal.compiler.flow.FlowContext.recordNullityMismatch:
&gt; 
&gt; Did you mean to have the statements:
&gt; 
&gt;     // no reason to defer, so report now:
&gt;     char[][] annotationName =
&gt; currentScope.environment().getNonNullAnnotationName();
&gt;     currentScope.problemReporter().nullityMismatch(expression, expectedType,
&gt; nullStatus, annotationName);
&gt; 
&gt; 
&gt; inside the if (expression.localVariableBinding() != null) { // flowContext
&gt; cannot yet handle ...
&gt; block ???
&gt; 
&gt; (32) For
&gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.nullityMismatch
&gt; diagnostics,
&gt; could you give me an example that explains why LFC and FFC would want to
&gt; implement deferred
&gt; checking ? i.e is there a case where there would be a material difference in
&gt; reporting ?
&gt; I couldn&apos;t think of a case where the problem id would change - did I overlook
&gt; something ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035393</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 09:48:06 -0500</bug_when>
    <thetext>I fully agree with most points and am preparing a patch to address these.
Just for a few items I&apos;m not planning to take action, these are:

(In reply to bug 365387 comment #14)
&gt; (13) Nit: Argument#bind(): Why is the call to the new extracted method
&gt; createBinding happening in the &quot;wrong&quot; place ? It could have been made
&gt; in the same place from which the extraction happened, i.e just after
&gt; the localVariableHiding diagnostic. I don&apos;t see a problem per se with
&gt; the new place, just that it makes a reviewer spend wasteful cycles
&gt; trying to understand if there is some side effect that needs to be 
&gt; understood. (can be left as it is)

Just an artifact of how the solution was reached from various experiments.
Current state considered safe after all the testing.


&gt; (30) No need to fix this: It would have been better if the expected types
&gt; maintenance in
&gt; FlowContext was pushed down to Fina*Flow*Context and Loop*Flow*Context even if
&gt; this meant
&gt; duplication. Such a solution would have integrated better with the existing
&gt; code (See
&gt; management of nullLocals, nullReferences and nullCheckTypes in both classes)

Sounds like conflicting goals: uniformity vs. avoiding redundancy for the
sake of maintainability.

&gt; (31) org.eclipse.jdt.internal.compiler.flow.FlowContext.recordNullityMismatch:
&gt; 
&gt; Did you mean to have the statements:
&gt; 
&gt;     // no reason to defer, so report now:
&gt;     char[][] annotationName =
&gt; currentScope.environment().getNonNullAnnotationName();
&gt;     currentScope.problemReporter().nullityMismatch(expression, expectedType,
&gt; nullStatus, annotationName);
&gt; 
&gt; 
&gt; inside the if (expression.localVariableBinding() != null) { // flowContext
&gt; cannot yet handle ...
&gt; block ???

This change would break the following test cases:
- test_nonnull_parameter_003()
- test_nonnull_parameter_010()
through
- test_nonnull_parameter_013()
and more.
Common theme: an expression is involved that is not a local var reference
but still has a known nullStatus. So far we have tests with &apos;null&apos; literal.
I&apos;m adding a test to witness that also sends to a @Nullable method are
affected.
For those scenarios, we must report immediately because they&apos;re not covered
by deferred checking (and I don&apos;t think the should, because deferred 
checking is intended only to get better info for locals).

&gt; (32) For
&gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.nullityMismatch
&gt; diagnostics,
&gt; could you give me an example that explains why LFC and FFC would want to
&gt; implement deferred
&gt; checking ? i.e is there a case where there would be a material difference in
&gt; reporting ?
&gt; I couldn&apos;t think of a case where the problem id would change - did I overlook
&gt; something ?

I can see 4 test cases depending on this detail:
- test_nonnull_var_in_constrol_structure_1()
- test_nonnull_var_in_constrol_structure_2()
- test_nonnull_var_in_constrol_structure_3()
- test_nesting_1()
common theme: during analyzing a loop body, local variables are seen in
null-state UNKNOWN. By direct reporting this would produce 
RequiredNonNullButProvidedUnknown, only during the deferred check do we
have interesting null information and can differentiate accordingly.

I&apos;ll comment on item (28) in a separate comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035395</commentid>
    <comment_count>3</comment_count>
      <attachid>207883</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 10:03:42 -0500</bug_when>
    <thetext>Created attachment 207883
possible fix for item 28

One last item worth documenting, perhaps discussing:

&gt; (28) Rather than inventing
&gt; org.eclipse.jdt.internal.compiler.lookup.PackageBinding.checkIfNullAnnotationType
&gt; we could have used
&gt; org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.computeId. It would
&gt; have been
&gt; cleaner to continue to centralize the id computation in one place.

I&apos;m attaching a possible patch to follow this suggestion. I didn&apos;t follow
that road because initialization of type ids for null annotations differs
from what we have in computeId():
- names for null annotations are not statically known
  -&gt; cannot use the same structure of checks as in computeId()
  -&gt; requires a trivial but extensive change in computeId() (avoid &quot;return&quot;)
- names need to be retrieved from the compiler options, which are not
  trivially accessible from computeId() - in fact BinaryTypeBinding has to
  be changed to make this possible at all.
- as an optimization, identification of configured annotation types has been
  broken up into two parts: (1) identifying the package, (2) identifying types
  within a recognized package.
  -&gt; Step (1) is best located in PackageBinding; keeping step (2) in the
     same class improves locality in this regard. PackageBinding.addType()
     is a unique door through which all type bindings pass before being
     used inside the compiler.

IMHO the last items outweighs the benefits of keeping things local in 
computeId(), so I suggest the trivial fix: adding a comment in computeId()
to alert that there&apos;s another method that also contributes ids.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035421</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 15:28:52 -0500</bug_when>
    <thetext>Two more items that might be worth a closer look:

(from bug 365387 comment 3):
&gt; (6) Could we have reused
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodScope.insideTypeAnnotation
&gt; instead of inventing
&gt; org.eclipse.jdt.internal.compiler.ast.ASTNode.IsMemberValueReference ?
&gt; At the point where we use this bit to avoid reporting a forward reference,
&gt; the insideTypeAnnotation field has been updated properly for us to have to
&gt;  have used it, though it is not readily available there - being a member of
&gt; MethodScope, while the static type at the use site is the parent type
&gt; BlockScope.
&gt; 
&gt; (7) Do the other calls to forwardReference need similar treatment ? (I didn&apos;t
&gt; check in any detail)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035430</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 17:41:38 -0500</bug_when>
    <thetext>(In reply to comment #2)

&gt; &gt; (31) org.eclipse.jdt.internal.compiler.flow.FlowContext.recordNullityMismatch:
&gt; &gt; 
&gt; &gt; Did you mean to have the statements:

[...] 

&gt; &gt; inside the if (expression.localVariableBinding() != null) { // flowContext
&gt; &gt; cannot yet handle ...
&gt; &gt; block ???
&gt; 
&gt; This change would break the following test cases:

[...]

&gt; &gt; (32) For
&gt; &gt; org.eclipse.jdt.internal.compiler.problem.ProblemReporter.nullityMismatch
&gt; &gt; diagnostics,
&gt; &gt; could you give me an example that explains why LFC and FFC would want to
&gt; &gt; implement deferred
&gt; &gt; checking ? i.e is there a case where there would be a material difference in
&gt; &gt; reporting ?
&gt; &gt; I couldn&apos;t think of a case where the problem id would change - did I overlook
&gt; &gt; something ?
&gt; 
&gt; I can see 4 test cases depending on this detail:

I see, thanks, (31) and(32) are no-ops then.


(In reply to comment #3)
&gt; Created attachment 207883 [details]
&gt; possible fix for item 28

&gt; IMHO the last items outweighs the benefits of keeping things local in 
&gt; computeId(), so I suggest the trivial fix: adding a comment in computeId()
&gt; to alert that there&apos;s another method that also contributes ids.

Agreed. Let us add a comment in computeId() and retain what has already
been released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035433</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 17:51:40 -0500</bug_when>
    <thetext>(In reply to comment #2)

[...]

&gt; &gt; (30) No need to fix this: It would have been better if the expected types
&gt; &gt; maintenance in
&gt; &gt; FlowContext was pushed down to Fina*Flow*Context and Loop*Flow*Context even if
&gt; &gt; this meant
&gt; &gt; duplication. Such a solution would have integrated better with the existing
&gt; &gt; code (See
&gt; &gt; management of nullLocals, nullReferences and nullCheckTypes in both classes)
&gt; 
&gt; Sounds like conflicting goals: uniformity vs. avoiding redundancy for the
&gt; sake of maintainability.

Yes, but the redundancy predates the current body of work and I suspect was
intentionally introduced to minimize memory usage.

We don&apos;t have to change this - perhaps a one line comment each in FFC and LFC
near the declaration of nullLocals to document that some state associated with
deferred reporting of null diagnostics resides elsewhere would be welcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035970</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 15:33:25 -0500</bug_when>
    <thetext>Adding to this bucket from bug 365387 comment 25:

&gt; (33) The javadoc for org.eclipse.jdt.core.JavaCore.COMPILER_NONNULL_IS_DEFAULT
&gt; and user documentation should both be updated to specify that this option
&gt; has no effect on binary types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037637</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 07:11:27 -0500</bug_when>
    <thetext>From bug 365387 comment 42
&gt; (38) We should verify that these methods
&gt; 
&gt;     AbstractMethodDeclaration.validateAnnotations() and all its overrides
&gt;     Statement.analyseArguments
&gt;     Statement.checkAssignmentAgainstNullAnnotation
&gt;     Scope.validateNullAnnotation
&gt;     ReturnStatement.checkAgainstNullAnnotation
&gt;     BinaryTypeBinding.scanMethodForNullAnnotation
&gt;     BinaryTypeBinding.scanTypeForNullAnnotation
&gt;     MethodVerifier15.checkNullSpecInheritance
&gt;     PackageBinding.checkIfNullAnnotationPackage
&gt;     PackageBinding.checkIfNullAnnotationType
&gt;     SourceTypeBinding.evaluateNullAnnotations
&gt; 
&gt; do not have side effects and if so short circuit the calls with a check
&gt; for the global master switch being on.

Initial findings:

&gt;     AbstractMethodDeclaration.validateAnnotations() and all its overrides

only null-analysis, no side effects. 
If short-circuited this should be renamed to
      validateNullAnnotations()

&gt;     Statement.analyseArguments

only null-analysis, no side effects.
If short-circuited this should be renamed to
      analyseArgumentsNullness()


only null-analysis, no other side effects.

&gt;     Scope.validateNullAnnotation

only null-analysis, two out of three call sites are already protected,
only the call from LocalDeclaration could potentially benefit from
short-circuiting.

All others only serve for null-analysis, no other side effects:
&gt;     Statement.checkAssignmentAgainstNullAnnotation
&gt;     ReturnStatement.checkAgainstNullAnnotation
&gt;     BinaryTypeBinding.scanMethodForNullAnnotation
&gt;     BinaryTypeBinding.scanTypeForNullAnnotation
&gt;     MethodVerifier15.checkNullSpecInheritance
&gt;     PackageBinding.checkIfNullAnnotationPackage
&gt;     PackageBinding.checkIfNullAnnotationType
&gt;     SourceTypeBinding.evaluateNullAnnotations</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037646</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 07:24:06 -0500</bug_when>
    <thetext>(In reply to comment #8)

[...]

&gt; Initial findings:
&gt; 
&gt; &gt;     AbstractMethodDeclaration.validateAnnotations() and all its overrides
&gt; 
&gt; only null-analysis, no side effects. 
&gt; If short-circuited this should be renamed to
&gt;       validateNullAnnotations()

Yes, this came up already as (23)

&gt; &gt;     Statement.analyseArguments

&gt; If short-circuited this should be renamed to
&gt;       analyseArgumentsNullness()

Agreed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037647</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 07:27:05 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; From bug 365387 comment 42
&gt; &gt; (38) We should verify that these methods
&gt; &gt; 
[...]
&gt; &gt; 
&gt; &gt; do not have side effects and if so short circuit the calls with a check
&gt; &gt; for the global master switch being on.

One CAVEAT: checking the global master switch doesn&apos;t come for free.
A typical check would be:

  if (scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled) ....

Looking into compilerOptions() this involves retrieving the 
compilationUnitScope(). So we need two method calls and one loop to get
the options.

In the current implementation I have already taken care that normally 
the easiest and typical way out of a method is checked first.
So, e.g., inside AbstractMethodDeclaration.validateAnnotations():

  if (this.binding != null &amp;&amp; this.binding.parameterNonNullness != null)

is actually cheaper than retrieving the master switch!


So for some of the methods in the list, the additional performance gains
we can squeeze out are from pulling some early-exit checks out of the
method and to the call-sites. At that point these checks reveal impl.
details that I had preferred to remain inside the respective method but
maybe with proper commenting the code will remain readable.

For these methods I see definite potential for optimization:
&gt;     MethodVerifier15.checkNullSpecInheritance
&gt;     SourceTypeBinding.evaluateNullAnnotations

Most others should already be pretty close to a sweet spot (and performance
tests didn&apos;t complain either).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037655</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 07:43:48 -0500</bug_when>
    <thetext>(In reply to comment #10)

&gt; For these methods I see definite potential for optimization:
&gt; &gt;     MethodVerifier15.checkNullSpecInheritance

It was looking at this method usage that got me started on this
train of thought. 

Copy &amp; paste is so easy that we have been practicing that art form without
pausing to think whether the result of an expression like
this.type.scope.compilerOptions().sourceLevel should be cached.

So I would recommend identifying places where we think repeated uses
are possible (as in the method verifier case) and apply the caching and
short circuiting only there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037656</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 07:47:40 -0500</bug_when>
    <thetext>(In reply to comment #11)

&gt; So I would recommend identifying places where we think repeated uses
&gt; are possible 

I meant where we think repeated uses of the cached global option are possible
and also cases where we won&apos;t significantly add memory foot print.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050527</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-14 17:22:23 -0500</bug_when>
    <thetext>I&apos;ve released commit 45457c087850a9bcb1e2d528c971be662d0a4e96
which fixes all relevant items mentioned in this bug, with the
following restrictions:

We agreed to WONTFIX items (13), (31) and (32)

For (7) I had no idea how to construct a test case. 
Already the original problem (6) is tricky to trigger,
and the syntax in that example cannot easily be changed.

I&apos;m postponing item (33) to resolve together with bug 366063 so we 
can maybe make the outcome of that discussion explicit in the docs, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055310</commentid>
    <comment_count>14</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-24 12:44:06 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; For these methods I see definite potential for optimization:
&gt; &gt;     MethodVerifier15.checkNullSpecInheritance
&gt; &gt;     SourceTypeBinding.evaluateNullAnnotations

I see that the check is present in evaluateNullAnnotations(..) but not in MethodVerifier15.checkNullSpecInheritance(..). Is this intentional?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055336</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-24 13:04:40 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; (In reply to comment #10)
&gt; &gt; For these methods I see definite potential for optimization:
&gt; &gt; &gt;     MethodVerifier15.checkNullSpecInheritance
&gt; &gt; &gt;     SourceTypeBinding.evaluateNullAnnotations
&gt; 
&gt; I see that the check is present in evaluateNullAnnotations(..) but not in
&gt; MethodVerifier15.checkNullSpecInheritance(..). Is this intentional?

Have you seen this comment inside MethodVerifier15.checkNullSpecInheritance(..)?

// precondition: caller has checked whether annotation-based null analysis is enabled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055338</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-24 13:08:07 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; Have you seen this comment inside
&gt; MethodVerifier15.checkNullSpecInheritance(..)?
Yes, I glossed over it. Sorry. :)

Verified for 3.8M5 using code inspection.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207883</attachid>
            <date>2011-12-04 10:03:00 -0500</date>
            <delta_ts>2011-12-04 10:03:42 -0500</delta_ts>
            <desc>possible fix for item 28</desc>
            <filename>Bug_365519_item28.patch</filename>
            <type>text/plain</type>
            <size>19157</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQppbmRleCA0YTFiYWQ0Li4zMDYwMGFiIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCkBAIC0xNDcsMTEgKzE0NywxMiBAQAog
ICovCiBwdWJsaWMgQmluYXJ5VHlwZUJpbmRpbmcoUGFja2FnZUJpbmRpbmcgcGFja2FnZUJpbmRp
bmcsIElCaW5hcnlUeXBlIGJpbmFyeVR5cGUsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50
KSB7CiAJdGhpcy5jb21wb3VuZE5hbWUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy8nLCBiaW5h
cnlUeXBlLmdldE5hbWUoKSk7CisJdGhpcy5mUGFja2FnZSA9IHBhY2thZ2VCaW5kaW5nOworCXRo
aXMubW9kaWZpZXJzID0gYmluYXJ5VHlwZS5nZXRNb2RpZmllcnMoKTsKIAljb21wdXRlSWQoKTsK
IAogCXRoaXMudGFnQml0cyB8PSBUYWdCaXRzLklzQmluYXJ5QmluZGluZzsKIAl0aGlzLmVudmly
b25tZW50ID0gZW52aXJvbm1lbnQ7Ci0JdGhpcy5mUGFja2FnZSA9IHBhY2thZ2VCaW5kaW5nOwog
CXRoaXMuZmlsZU5hbWUgPSBiaW5hcnlUeXBlLmdldEZpbGVOYW1lKCk7CiAKIAkvKiBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzI0ODUwLCBldmVuIGluIGEg
MS40IHByb2plY3QsIHdlCkBAIC0xNjUsNyArMTY2LDYgQEAKIAkJOiBCaW5kaW5nLk5PX1RZUEVf
VkFSSUFCTEVTOwogCiAJdGhpcy5zb3VyY2VOYW1lID0gYmluYXJ5VHlwZS5nZXRTb3VyY2VOYW1l
KCk7Ci0JdGhpcy5tb2RpZmllcnMgPSBiaW5hcnlUeXBlLmdldE1vZGlmaWVycygpOwogCiAJaWYg
KChiaW5hcnlUeXBlLmdldFRhZ0JpdHMoKSAmIFRhZ0JpdHMuSGllcmFyY2h5SGFzUHJvYmxlbXMp
ICE9IDApCiAJCXRoaXMudGFnQml0cyB8PSBUYWdCaXRzLkhpZXJhcmNoeUhhc1Byb2JsZW1zOwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYWNrYWdlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9QYWNrYWdlQmluZGluZy5qYXZhCmluZGV4IGI2ZjMxMzMuLmJmOGQ5MGMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUGFja2FnZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BhY2thZ2VCaW5kaW5nLmphdmEKQEAgLTY1LDkgKzY1LDYgQEAKIAlpZiAodGhpcy5rbm93blR5
cGVzID09IG51bGwpCiAJCXRoaXMua25vd25UeXBlcyA9IG5ldyBIYXNodGFibGVPZlR5cGUoMjUp
OwogCXRoaXMua25vd25UeXBlcy5wdXQoZWxlbWVudC5jb21wb3VuZE5hbWVbZWxlbWVudC5jb21w
b3VuZE5hbWUubGVuZ3RoIC0gMV0sIGVsZW1lbnQpOwotCWlmICh0aGlzLmVudmlyb25tZW50Lmds
b2JhbE9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQlpZiAo
ZWxlbWVudC5pc0Fubm90YXRpb25UeXBlKCkgfHwgZWxlbWVudCBpbnN0YW5jZW9mIFVucmVzb2x2
ZWRSZWZlcmVuY2VCaW5kaW5nKSAvLyB1bnJlc29sdmVkIHR5cGVzIGRvbid0IHlldCBoYXZlIHRo
ZSBtb2RpZmllcnMgc2V0Ci0JCQljaGVja0lmTnVsbEFubm90YXRpb25UeXBlKGVsZW1lbnQpOwog
fQogCiB2b2lkIGNsZWFyTWlzc2luZ1RhZ0JpdCgpIHsKQEAgLTI2MCwyNyArMjU3LDYgQEAKIAkJ
aWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFscyhwYWNrYWdlTmFtZVtpXSwgdHlwZU5hbWVbaV0pKQog
CQkJcmV0dXJuIGZhbHNlOwogCXJldHVybiB0cnVlOwotfQotCi12b2lkIGNoZWNrSWZOdWxsQW5u
b3RhdGlvblR5cGUoUmVmZXJlbmNlQmluZGluZyB0eXBlKSB7Ci0JLy8gY2hlY2sgaWYgdHlwZSBp
cyBvbmUgb2YgdGhlIGNvbmZpZ3VyZWQgbnVsbCBhbm5vdGF0aW9uIHR5cGVzCi0JLy8gaWYgc28g
bWFyayBhcyBhIHdlbGwga25vd24gdHlwZSB1c2luZyB0aGUgY29ycmVzcG9uZGluZyB0eXBlSUQ6
Ci0JaWYgKHRoaXMuZW52aXJvbm1lbnQubnVsbGFibGVBbm5vdGF0aW9uUGFja2FnZSA9PSB0aGlz
Ci0JCQkmJiBDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlLmNvbXBvdW5kTmFtZSwgdGhpcy5lbnZp
cm9ubWVudC5nZXROdWxsYWJsZUFubm90YXRpb25OYW1lKCkpKSB7Ci0JCXR5cGUuaWQgPSBUeXBl
SWRzLlRfQ29uZmlndXJlZEFubm90YXRpb25OdWxsYWJsZTsKLQkJaWYgKCEodHlwZSBpbnN0YW5j
ZW9mIFVucmVzb2x2ZWRSZWZlcmVuY2VCaW5kaW5nKSkgLy8gdW5yZXNvbHZlZCB3aWxsIG5lZWQg
dG8gY2hlY2sgYmFjayBmb3IgdGhlIHJlc29sdmVkIHR5cGUKLQkJCXRoaXMuZW52aXJvbm1lbnQu
bnVsbGFibGVBbm5vdGF0aW9uUGFja2FnZSA9IG51bGw7IC8vIGRvbid0IGNoZWNrIGFnYWluCi0J
fSBlbHNlIGlmICh0aGlzLmVudmlyb25tZW50Lm5vbm51bGxBbm5vdGF0aW9uUGFja2FnZSA9PSB0
aGlzCi0JCQkmJiBDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlLmNvbXBvdW5kTmFtZSwgdGhpcy5l
bnZpcm9ubWVudC5nZXROb25OdWxsQW5ub3RhdGlvbk5hbWUoKSkpIHsKLQkJdHlwZS5pZCA9IFR5
cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGw7Ci0JCWlmICghKHR5cGUgaW5zdGFu
Y2VvZiBVbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZykpIC8vIHVucmVzb2x2ZWQgd2lsbCBuZWVk
IHRvIGNoZWNrIGJhY2sgZm9yIHRoZSByZXNvbHZlZCB0eXBlCi0JCQl0aGlzLmVudmlyb25tZW50
Lm5vbm51bGxBbm5vdGF0aW9uUGFja2FnZSA9IG51bGw7IC8vIGRvbid0IGNoZWNrIGFnYWluCi0J
fSBlbHNlIGlmICh0aGlzLmVudmlyb25tZW50Lm5vbm51bGxCeURlZmF1bHRBbm5vdGF0aW9uUGFj
a2FnZSA9PSB0aGlzCi0JCQkmJiBDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlLmNvbXBvdW5kTmFt
ZSwgdGhpcy5lbnZpcm9ubWVudC5nZXROb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk5hbWUoKSkp
IHsKLQkJdHlwZS5pZCA9IFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGxCeURl
ZmF1bHQ7Ci0JCWlmICghKHR5cGUgaW5zdGFuY2VvZiBVbnJlc29sdmVkUmVmZXJlbmNlQmluZGlu
ZykpIC8vIHVucmVzb2x2ZWQgd2lsbCBuZWVkIHRvIGNoZWNrIGJhY2sgZm9yIHRoZSByZXNvbHZl
ZCB0eXBlCi0JCQl0aGlzLmVudmlyb25tZW50Lm5vbm51bGxCeURlZmF1bHRBbm5vdGF0aW9uUGFj
a2FnZSA9IG51bGw7IC8vIGRvbid0IGNoZWNrIGFnYWluCi0JfQogfQogCiBwdWJsaWMgVHlwZUJp
bmRpbmcgZ2V0TnVsbG5lc3NEZWZhdWx0QW5ub3RhdGlvbihTY29wZSBzY29wZSkgewpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1JlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCA3NWRlODU0Li42NDI3NTQwIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1JlZmVyZW5jZUJpbmRpbmcuamF2YQpAQCAtMzc3LDEyICszNzcsMTMgQEAKIAogcHVibGljIHZv
aWQgY29tcHV0ZUlkKCkgewogCS8vIHRyeSB0byBhdm9pZCBtdWx0aXBsZSBjaGVja3MgYWdhaW5z
dCBhIHBhY2thZ2UvdHlwZSBuYW1lCisJb3V0ZXJTd2l0Y2g6CiAJc3dpdGNoICh0aGlzLmNvbXBv
dW5kTmFtZS5sZW5ndGgpIHsKIAogCQljYXNlIDMgOgogCQkJaWYgKCFDaGFyT3BlcmF0aW9uLmVx
dWFscyhUeXBlQ29uc3RhbnRzLkpBVkEsIHRoaXMuY29tcG91bmROYW1lWzBdKQogCQkJCQkmJiAh
Q2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBWCwgdGhpcy5jb21wb3VuZE5h
bWVbMF0pKQotCQkJCXJldHVybjsKKwkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQogCQkJY2hh
cltdIHBhY2thZ2VOYW1lID0gdGhpcy5jb21wb3VuZE5hbWVbMV07CiAJCQlpZiAocGFja2FnZU5h
bWUubGVuZ3RoID09IDApIHJldHVybjsgLy8ganVzdCB0byBiZSBzYWZlCkBAIC0zOTcsMTAgKzM5
OCwxMCBAQAogCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmF4QW5ub3RhdGlvblBvc3RD
b25zdHJ1Y3Q7CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBl
Q29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWVsyXSkpCiAJCQkJCQkJCXRoaXMu
aWQgPSBUeXBlSWRzLlRfSmF2YXhBbm5vdGF0aW9uUHJlRGVzdHJveTsKLQkJCQkJCQlyZXR1cm47
CisJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCX0KIAkJCQl9Ci0JCQkJcmV0dXJuOwor
CQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJfQogCQkJaWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFs
cyhUeXBlQ29uc3RhbnRzLkxBTkcsIHRoaXMuY29tcG91bmROYW1lWzFdKSkgewogCQkJCXN3aXRj
aCAocGFja2FnZU5hbWVbMF0pIHsKQEAgLTQxMCw0NiArNDExLDQ2IEBACiAJCQkJCQkJCWNhc2Ug
J0MnIDoKIAkJCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNv
bnN0YW50cy5KQVZBX0lPX0NMT1NFQUJMRVsyXSkpCiAJCQkJCQkJCQkJdGhpcy50eXBlQml0cyB8
PSBUeXBlSWRzLkJpdENsb3NlYWJsZTsgLy8gZG9uJ3QgYXNzaWduIGlkLCBvbmx5IHR5cGVCaXQg
KGZvciBhbmFseXNpcyBvZiByZXNvdXJjZSBsZWFrcykgCi0JCQkJCQkJCQlyZXR1cm47CisJCQkJ
CQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCQkJY2FzZSAnRScgOgogCQkJCQkJCQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfSU9fRVhU
RVJOQUxJWkFCTEVbMl0pKQogCQkJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUlvRXh0
ZXJuYWxpemFibGU7Ci0JCQkJCQkJCQlyZXR1cm47CisJCQkJCQkJCQlicmVhayBvdXRlclN3aXRj
aDsKIAkJCQkJCQkJY2FzZSAnSScgOgogCQkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxz
KHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfSU9fSU9FWENFUFRJT05bMl0pKQogCQkJCQkJ
CQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUlvRXhjZXB0aW9uOwotCQkJCQkJCQkJcmV0dXJu
OworCQkJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJCWNhc2UgJ08nIDoKIAkJCQkJ
CQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZB
X0lPX09CSkVDVFNUUkVBTUVYQ0VQVElPTlsyXSkpCiAJCQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJ
ZHMuVF9KYXZhSW9PYmplY3RTdHJlYW1FeGNlcHRpb247Ci0JCQkJCQkJCQlyZXR1cm47CisJCQkJ
CQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCQkJY2FzZSAnUCcgOgogCQkJCQkJCQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfSU9fUFJJ
TlRTVFJFQU1bMl0pKQogCQkJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUlvUHJpbnRT
dHJlYW07Ci0JCQkJCQkJCQlyZXR1cm47CisJCQkJCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJ
CQkJCQkJY2FzZSAnUycgOgogCQkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVO
YW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfSU9fU0VSSUFMSVpBQkxFWzJdKSkKIAkJCQkJCQkJCQl0
aGlzLmlkID0gVHlwZUlkcy5UX0phdmFJb1NlcmlhbGl6YWJsZTsKLQkJCQkJCQkJCXJldHVybjsK
KwkJCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJCX0KIAkJCQkJCX0KLQkJCQkJCXJl
dHVybjsKKwkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQljYXNlICd1JyA6CiAJCQkJCQlp
ZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMocGFja2FnZU5hbWUsIFR5cGVDb25zdGFudHMuVVRJTCkp
IHsKIAkJCQkJCQlzd2l0Y2ggKHR5cGVOYW1lWzBdKSB7CiAJCQkJCQkJCWNhc2UgJ0MnIDoKIAkJ
CQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5K
QVZBX1VUSUxfQ09MTEVDVElPTlsyXSkpCiAJCQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9K
YXZhVXRpbENvbGxlY3Rpb247Ci0JCQkJCQkJCQlyZXR1cm47CisJCQkJCQkJCQlicmVhayBvdXRl
clN3aXRjaDsKIAkJCQkJCQkJY2FzZSAnSScgOgogCQkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24u
ZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfVVRJTF9JVEVSQVRPUlsyXSkpCiAJ
CQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhVXRpbEl0ZXJhdG9yOwotCQkJCQkJCQkJ
cmV0dXJuOworCQkJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJfQogCQkJCQkJfQot
CQkJCQkJcmV0dXJuOworCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJfQotCQkJCXJldHVy
bjsKKwkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCX0KIAogCQkJLy8gcmVtYWluaW5nIHR5cGVz
IE1VU1QgYmUgaW4gamF2YS5sYW5nLioKQEAgLTQ2MSwxMTEgKzQ2MiwxMTEgQEAKIAkJCQkJCQkJ
dGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0F1dG9DbG9zZWFibGU7CiAJCQkJCQkJCXRoaXMu
dHlwZUJpdHMgfD0gVHlwZUlkcy5CaXRBdXRvQ2xvc2VhYmxlOyAKIAkJCQkJCQl9Ci0JCQkJCQkJ
cmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJY2FzZSAxNDoKIAkJCQkJ
CQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9M
QU5HX0FTU0VSVElPTkVSUk9SWzJdKSkKIAkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZh
TGFuZ0Fzc2VydGlvbkVycm9yOwotCQkJCQkJCXJldHVybjsKKwkJCQkJCQlicmVhayBvdXRlclN3
aXRjaDsKIAkJCQkJfQotCQkJCQlyZXR1cm47CisJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJ
CWNhc2UgJ0InIDoKIAkJCQkJc3dpdGNoICh0eXBlTmFtZS5sZW5ndGgpIHsKIAkJCQkJCWNhc2Ug
NCA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3Rh
bnRzLkpBVkFfTEFOR19CWVRFWzJdKSkKIAkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZh
TGFuZ0J5dGU7Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJ
CQkJY2FzZSA3IDoKIAkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5
cGVDb25zdGFudHMuSkFWQV9MQU5HX0JPT0xFQU5bMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlw
ZUlkcy5UX0phdmFMYW5nQm9vbGVhbjsKLQkJCQkJCQlyZXR1cm47CisJCQkJCQkJYnJlYWsgb3V0
ZXJTd2l0Y2g7CiAJCQkJCX0KLQkJCQkJcmV0dXJuOworCQkJCQlicmVhayBvdXRlclN3aXRjaDsK
IAkJCQljYXNlICdDJyA6CiAJCQkJCXN3aXRjaCAodHlwZU5hbWUubGVuZ3RoKSB7CiAJCQkJCQlj
YXNlIDUgOgogCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNv
bnN0YW50cy5KQVZBX0xBTkdfQ0xBU1NbMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5U
X0phdmFMYW5nQ2xhc3M7Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNo
OwogCQkJCQkJY2FzZSA5IDoKIAkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5h
bWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0NIQVJBQ1RFUlsyXSkpCiAJCQkJCQkJCXRoaXMu
aWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdDaGFyYWN0ZXI7CiAJCQkJCQkJZWxzZSBpZiAoQ2hhck9w
ZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0NMT05FQUJM
RVsyXSkpCiAJCQkJCQkJICAgIHRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdDbG9uZWFibGU7
Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJY2FzZSAy
MiA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3Rh
bnRzLkpBVkFfTEFOR19DTEFTU05PVEZPVU5ERVhDRVBUSU9OWzJdKSkKIAkJCQkJCQkJdGhpcy5p
ZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0NsYXNzTm90Rm91bmRFeGNlcHRpb247Ci0JCQkJCQkJcmV0
dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQl9Ci0JCQkJCXJldHVybjsKKwkJ
CQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJY2FzZSAnRCcgOgogCQkJCQlzd2l0Y2ggKHR5cGVO
YW1lLmxlbmd0aCkgewogCQkJCQkJY2FzZSA2IDoKIAkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5l
cXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0RPVUJMRVsyXSkpCiAJCQkJ
CQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdEb3VibGU7Ci0JCQkJCQkJcmV0dXJuOwor
CQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJY2FzZSAxMCA6CiAJCQkJCQkJaWYgKENo
YXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19ERVBS
RUNBVEVEWzJdKSkKIAkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0RlcHJlY2F0
ZWQ7Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQl9Ci0J
CQkJCXJldHVybjsKKwkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJY2FzZSAnRScgOgogCQkJ
CQlzd2l0Y2ggKHR5cGVOYW1lLmxlbmd0aCkgewogCQkJCQkJY2FzZSA0IDoKIAkJCQkJCQlpZiAo
Q2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0VO
VU1bMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nRW51bTsKLQkJCQkJ
CQlyZXR1cm47CisJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQljYXNlIDUgOgogCQkJ
CQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZB
X0xBTkdfRVJST1JbMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nRXJy
b3I7Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJY2Fz
ZSA5IDoKIAkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25z
dGFudHMuSkFWQV9MQU5HX0VYQ0VQVElPTlsyXSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRz
LlRfSmF2YUxhbmdFeGNlcHRpb247Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVy
U3dpdGNoOwogCQkJCQl9Ci0JCQkJCXJldHVybjsKKwkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJ
CQkJY2FzZSAnRicgOgogCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5
cGVDb25zdGFudHMuSkFWQV9MQU5HX0ZMT0FUWzJdKSkKIAkJCQkJCXRoaXMuaWQgPSBUeXBlSWRz
LlRfSmF2YUxhbmdGbG9hdDsKLQkJCQkJcmV0dXJuOworCQkJCQlicmVhayBvdXRlclN3aXRjaDsK
IAkJCQljYXNlICdJJyA6CiAJCQkJCXN3aXRjaCAodHlwZU5hbWUubGVuZ3RoKSB7CiAJCQkJCQlj
YXNlIDcgOgogCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNv
bnN0YW50cy5KQVZBX0xBTkdfSU5URUdFUlsyXSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRz
LlRfSmF2YUxhbmdJbnRlZ2VyOwotCQkJCQkJCXJldHVybjsKKwkJCQkJCQlicmVhayBvdXRlclN3
aXRjaDsKIAkJCQkJCWNhc2UgOCA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5
cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19JVEVSQUJMRVsyXSkpCiAJCQkJCQkJCXRo
aXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdJdGVyYWJsZTsKLQkJCQkJCQlyZXR1cm47CisJCQkJ
CQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQljYXNlIDI0IDoKIAkJCQkJCQlpZiAoQ2hhck9w
ZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lMTEVHQUxB
UkdVTUVOVEVYQ0VQVElPTlsyXSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxh
bmdJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb247Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFr
IG91dGVyU3dpdGNoOwogCQkJCQl9Ci0JCQkJCXJldHVybjsKKwkJCQkJYnJlYWsgb3V0ZXJTd2l0
Y2g7CiAJCQkJY2FzZSAnTCcgOgogCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5h
bWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0xPTkdbMl0pKQogCQkJCQkJdGhpcy5pZCA9IFR5
cGVJZHMuVF9KYXZhTGFuZ0xvbmc7Ci0JCQkJCXJldHVybjsKKwkJCQkJYnJlYWsgb3V0ZXJTd2l0
Y2g7CiAJCQkJY2FzZSAnTicgOgogCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5h
bWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX05PQ0xBU1NERUZFUlJPUlsyXSkpCiAJCQkJCQl0
aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nTm9DbGFzc0RlZkVycm9yOwotCQkJCQlyZXR1cm47
CisJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCWNhc2UgJ08nIDoKIAkJCQkJc3dpdGNoICh0
eXBlTmFtZS5sZW5ndGgpIHsKIAkJCQkJCWNhc2UgNiA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRp
b24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19PQkpFQ1RbMl0pKQog
CQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nT2JqZWN0OwotCQkJCQkJCXJldHVy
bjsKKwkJCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCWNhc2UgOCA6CiAJCQkJCQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19P
VkVSUklERVsyXSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdPdmVycmlk
ZTsKLQkJCQkJCQlyZXR1cm47CisJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCX0KLQkJ
CQkJcmV0dXJuOworCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQljYXNlICdSJyA6CiAJCQkJ
CWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xB
TkdfUlVOVElNRUVYQ0VQVElPTlsyXSkpCiAJCQkJCQl0aGlzLmlkID0gCVR5cGVJZHMuVF9KYXZh
TGFuZ1J1bnRpbWVFeGNlcHRpb247CkBAIC01NzUsNDUgKzU3Niw0NSBAQAogCQkJCQkJY2FzZSA1
IDoKIAkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFu
dHMuSkFWQV9MQU5HX1NIT1JUWzJdKSkKIAkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZh
TGFuZ1Nob3J0OwotCQkJCQkJCXJldHVybjsKKwkJCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJ
CQkJCWNhc2UgNiA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBU
eXBlQ29uc3RhbnRzLkpBVkFfTEFOR19TVFJJTkdbMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlw
ZUlkcy5UX0phdmFMYW5nU3RyaW5nOwogCQkJCQkJCWVsc2UgaWYgKENoYXJPcGVyYXRpb24uZXF1
YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19TWVNURU1bMl0pKQogCQkJCQkJ
CQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nU3lzdGVtOwotCQkJCQkJCXJldHVybjsKKwkJ
CQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCWNhc2UgMTEgOgogCQkJCQkJCWlmIChDaGFy
T3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfU0FGRVZB
UkFSR1NbMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nU2FmZVZhcmFy
Z3M7Ci0JCQkJCQkJcmV0dXJuOworCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJY2Fz
ZSAxMiA6CiAJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29u
c3RhbnRzLkpBVkFfTEFOR19TVFJJTkdCVUZGRVJbMl0pKQogCQkJCQkJCQl0aGlzLmlkID0gVHlw
ZUlkcy5UX0phdmFMYW5nU3RyaW5nQnVmZmVyOwotCQkJCQkJCXJldHVybjsKKwkJCQkJCQlicmVh
ayBvdXRlclN3aXRjaDsKIAkJCQkJCWNhc2UgMTMgOgogCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfU1RSSU5HQlVJTERFUlsy
XSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdTdHJpbmdCdWlsZGVyOwot
CQkJCQkJCXJldHVybjsKKwkJCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCWNhc2UgMTYg
OgogCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50
cy5KQVZBX0xBTkdfU1VQUFJFU1NXQVJOSU5HU1syXSkpCiAJCQkJCQkJCXRoaXMuaWQgPSBUeXBl
SWRzLlRfSmF2YUxhbmdTdXBwcmVzc1dhcm5pbmdzOwotCQkJCQkJCXJldHVybjsKKwkJCQkJCQli
cmVhayBvdXRlclN3aXRjaDsKIAkJCQkJfQotCQkJCQlyZXR1cm47CisJCQkJCWJyZWFrIG91dGVy
U3dpdGNoOwogCQkJCWNhc2UgJ1QnIDoKIAkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5
cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19USFJPV0FCTEVbMl0pKQogCQkJCQkJdGhp
cy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ1Rocm93YWJsZTsKLQkJCQkJcmV0dXJuOworCQkJCQli
cmVhayBvdXRlclN3aXRjaDsKIAkJCQljYXNlICdWJyA6CiAJCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfVk9JRFsyXSkpCiAJCQkJ
CQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5nVm9pZDsKLQkJCQkJcmV0dXJuOworCQkJCQli
cmVhayBvdXRlclN3aXRjaDsKIAkJCX0KIAkJYnJlYWs7CiAKIAkJY2FzZSA0OgogCQkJaWYgKCFD
aGFyT3BlcmF0aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkpBVkEsIHRoaXMuY29tcG91bmROYW1l
WzBdKSkKLQkJCQlyZXR1cm47CisJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQlwYWNrYWdlTmFt
ZSA9IHRoaXMuY29tcG91bmROYW1lWzFdOwogCQkJaWYgKHBhY2thZ2VOYW1lLmxlbmd0aCA9PSAw
KSByZXR1cm47IC8vIGp1c3QgdG8gYmUgc2FmZQogCkBAIC02MjgsMzggKzYyOSwzOCBAQAogCQkJ
CQkJCWNhc2UgJ0EnIDoKIAkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1l
LCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19BTk5PVEFUSU9OX0FOTk9UQVRJT05bM10pKQogCQkJ
CQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0Fubm90YXRpb25Bbm5vdGF0aW9uOwot
CQkJCQkJCQlyZXR1cm47CisJCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJCWNhc2Ug
J0QnIDoKIAkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29u
c3RhbnRzLkpBVkFfTEFOR19BTk5PVEFUSU9OX0RPQ1VNRU5URURbM10pKQogCQkJCQkJCQkJdGhp
cy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0Fubm90YXRpb25Eb2N1bWVudGVkOwotCQkJCQkJCQly
ZXR1cm47CisJCQkJCQkJCWJyZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJCWNhc2UgJ0UnIDoKIAkJ
CQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpB
VkFfTEFOR19BTk5PVEFUSU9OX0VMRU1FTlRUWVBFWzNdKSkKIAkJCQkJCQkJCXRoaXMuaWQgPSBU
eXBlSWRzLlRfSmF2YUxhbmdBbm5vdGF0aW9uRWxlbWVudFR5cGU7Ci0JCQkJCQkJCXJldHVybjsK
KwkJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJY2FzZSAnSScgOgogCQkJCQkJCQlp
ZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5H
X0FOTk9UQVRJT05fSU5IRVJJVEVEWzNdKSkKIAkJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRf
SmF2YUxhbmdBbm5vdGF0aW9uSW5oZXJpdGVkOwotCQkJCQkJCQlyZXR1cm47CisJCQkJCQkJCWJy
ZWFrIG91dGVyU3dpdGNoOwogCQkJCQkJCWNhc2UgJ1InIDoKIAkJCQkJCQkJc3dpdGNoICh0eXBl
TmFtZS5sZW5ndGgpIHsKIAkJCQkJCQkJCWNhc2UgOSA6CiAJCQkJCQkJCQkJaWYgKENoYXJPcGVy
YXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19BTk5PVEFUSU9O
X1JFVEVOVElPTlszXSkpCiAJCQkJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2YUxhbmdB
bm5vdGF0aW9uUmV0ZW50aW9uOwotCQkJCQkJCQkJCXJldHVybjsKKwkJCQkJCQkJCQlicmVhayBv
dXRlclN3aXRjaDsKIAkJCQkJCQkJCWNhc2UgMTUgOgogCQkJCQkJCQkJCWlmIChDaGFyT3BlcmF0
aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfQU5OT1RBVElPTl9S
RVRFTlRJT05QT0xJQ1lbM10pKQogCQkJCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFM
YW5nQW5ub3RhdGlvblJldGVudGlvblBvbGljeTsKLQkJCQkJCQkJCQlyZXR1cm47CisJCQkJCQkJ
CQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJCX0KLQkJCQkJCQkJcmV0dXJuOworCQkJCQkJ
CQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCQljYXNlICdUJyA6CiAJCQkJCQkJCWlmIChDaGFy
T3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfQU5OT1RB
VElPTl9UQVJHRVRbM10pKQogCQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0Fu
bm90YXRpb25UYXJnZXQ7Ci0JCQkJCQkJCXJldHVybjsKKwkJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0
Y2g7CiAJCQkJCQl9CiAJCQkJCX0KLQkJCQkJcmV0dXJuOworCQkJCQlicmVhayBvdXRlclN3aXRj
aDsKIAkJCQljYXNlICdpJzoKIAkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHBhY2thZ2VO
YW1lLCBUeXBlQ29uc3RhbnRzLklOVk9LRSkpIHsKIAkJCQkJCWlmICh0eXBlTmFtZS5sZW5ndGgg
PT0gMCkgcmV0dXJuOyAvLyBqdXN0IHRvIGJlIHNhZmUKQEAgLTY2NywzMyArNjY4LDMzIEBACiAJ
CQkJCQkJY2FzZSAnTScgOgogCQkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5h
bWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVfJF9QT0xZTU9S
UEhJQ1NJR05BVFVSRVszXSkpCiAJCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmFMYW5n
SW52b2tlTWV0aG9kSGFuZGxlUG9seW1vcnBoaWNTaWduYXR1cmU7Ci0JCQkJCQkJCXJldHVybjsK
KwkJCQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQl9CiAJCQkJCX0KLQkJCQkJcmV0dXJu
OworCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQljYXNlICdyJyA6CiAJCQkJCWlmIChDaGFy
T3BlcmF0aW9uLmVxdWFscyhwYWNrYWdlTmFtZSwgVHlwZUNvbnN0YW50cy5SRUZMRUNUKSkgewog
CQkJCQkJc3dpdGNoICh0eXBlTmFtZVswXSkgewogCQkJCQkJCWNhc2UgJ0MnIDoKIAkJCQkJCQkJ
aWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFO
R19SRUZMRUNUX0NPTlNUUlVDVE9SWzJdKSkKIAkJCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRf
SmF2YUxhbmdSZWZsZWN0Q29uc3RydWN0b3I7Ci0JCQkJCQkJCXJldHVybjsKKwkJCQkJCQkJYnJl
YWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJY2FzZSAnRicgOgogCQkJCQkJCQlpZiAoQ2hhck9wZXJh
dGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX1JFRkxFQ1RfRklF
TERbMl0pKQogCQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ1JlZmxlY3RGaWVs
ZDsKLQkJCQkJCQkJcmV0dXJuOworCQkJCQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCQkJCQlj
YXNlICdNJyA6CiAJCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlw
ZUNvbnN0YW50cy5KQVZBX0xBTkdfUkVGTEVDVF9NRVRIT0RbMl0pKQogCQkJCQkJCQkJdGhpcy5p
ZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ1JlZmxlY3RNZXRob2Q7Ci0JCQkJCQkJCXJldHVybjsKKwkJ
CQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQl9CiAJCQkJCX0KLQkJCQkJcmV0dXJuOwor
CQkJCQlicmVhayBvdXRlclN3aXRjaDsKIAkJCX0KIAkJCWJyZWFrOwogCQljYXNlIDUgOgogCQkJ
aWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkpBVkEsIHRoaXMuY29tcG91
bmROYW1lWzBdKSkKLQkJCQlyZXR1cm47CisJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQlwYWNr
YWdlTmFtZSA9IHRoaXMuY29tcG91bmROYW1lWzFdOwogCQkJaWYgKHBhY2thZ2VOYW1lLmxlbmd0
aCA9PSAwKSByZXR1cm47IC8vIGp1c3QgdG8gYmUgc2FmZQogCkBAIC03MTIsMTQgKzcxMywzOSBA
QAogCQkJCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3Rh
bnRzLkpBVkFfTEFOR19JTlZPS0VfTUVUSE9ESEFORExFX1BPTFlNT1JQSElDU0lHTkFUVVJFWzNd
KQogCQkJCQkJCQkJCQkmJiBDaGFyT3BlcmF0aW9uLmVxdWFscyhtZW1iZXJUeXBlTmFtZSwgVHlw
ZUNvbnN0YW50cy5KQVZBX0xBTkdfSU5WT0tFX01FVEhPREhBTkRMRV9QT0xZTU9SUEhJQ1NJR05B
VFVSRVs0XSkpCiAJCQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZhTGFuZ0ludm9rZU1l
dGhvZEhhbmRsZVBvbHltb3JwaGljU2lnbmF0dXJlOwotCQkJCQkJCQkJcmV0dXJuOworCQkJCQkJ
CQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJCQkJfQogCQkJCQkJfQotCQkJCQkJcmV0dXJuOwor
CQkJCQkJYnJlYWsgb3V0ZXJTd2l0Y2g7CiAJCQkJfQotCQkJCXJldHVybjsKKwkJCQlicmVhayBv
dXRlclN3aXRjaDsKIAkJCX0KIAl9CisJaWYgKHRoaXMuZlBhY2thZ2UgIT0gbnVsbCkgeworCQlM
b29rdXBFbnZpcm9ubWVudCBlbnYgPSB0aGlzLmZQYWNrYWdlLmVudmlyb25tZW50OworCQlpZiAo
ZW52Lmdsb2JhbE9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKSB7
CisJCQlpZiAoaXNBbm5vdGF0aW9uVHlwZSgpIHx8IHRoaXMgaW5zdGFuY2VvZiBVbnJlc29sdmVk
UmVmZXJlbmNlQmluZGluZykgey8vIHVucmVzb2x2ZWQgdHlwZXMgZG9uJ3QgeWV0IGhhdmUgdGhl
IG1vZGlmaWVycyBzZXQKKwkJCQkvLyBjaGVjayBpZiB0eXBlIGlzIG9uZSBvZiB0aGUgY29uZmln
dXJlZCBudWxsIGFubm90YXRpb24gdHlwZXMKKwkJCQkvLyBpZiBzbyBtYXJrIGFzIGEgd2VsbCBr
bm93biB0eXBlIHVzaW5nIHRoZSBjb3JyZXNwb25kaW5nIHR5cGVJRDoKKwkJCQlpZiAoZW52Lm51
bGxhYmxlQW5ub3RhdGlvblBhY2thZ2UgPT0gdGhpcy5mUGFja2FnZQorCQkJCQkJJiYgQ2hhck9w
ZXJhdGlvbi5lcXVhbHModGhpcy5jb21wb3VuZE5hbWUsIGVudi5nZXROdWxsYWJsZUFubm90YXRp
b25OYW1lKCkpKSB7CisJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfQ29uZmlndXJlZEFubm90YXRp
b25OdWxsYWJsZTsKKwkJCQkJaWYgKCEodGhpcyBpbnN0YW5jZW9mIFVucmVzb2x2ZWRSZWZlcmVu
Y2VCaW5kaW5nKSkgLy8gdW5yZXNvbHZlZCB3aWxsIG5lZWQgdG8gY2hlY2sgYmFjayBmb3IgdGhl
IHJlc29sdmVkIHR5cGUKKwkJCQkJCWVudi5udWxsYWJsZUFubm90YXRpb25QYWNrYWdlID0gbnVs
bDsgLy8gZG9uJ3QgY2hlY2sgYWdhaW4KKwkJCQl9IGVsc2UgaWYgKGVudi5ub25udWxsQW5ub3Rh
dGlvblBhY2thZ2UgPT0gdGhpcy5mUGFja2FnZQorCQkJCQkJJiYgQ2hhck9wZXJhdGlvbi5lcXVh
bHModGhpcy5jb21wb3VuZE5hbWUsIGVudi5nZXROb25OdWxsQW5ub3RhdGlvbk5hbWUoKSkpIHsK
KwkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGw7CisJ
CQkJCWlmICghKHRoaXMgaW5zdGFuY2VvZiBVbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZykpIC8v
IHVucmVzb2x2ZWQgd2lsbCBuZWVkIHRvIGNoZWNrIGJhY2sgZm9yIHRoZSByZXNvbHZlZCB0eXBl
CisJCQkJCQllbnYubm9ubnVsbEFubm90YXRpb25QYWNrYWdlID0gbnVsbDsgLy8gZG9uJ3QgY2hl
Y2sgYWdhaW4KKwkJCQl9IGVsc2UgaWYgKGVudi5ub25udWxsQnlEZWZhdWx0QW5ub3RhdGlvblBh
Y2thZ2UgPT0gdGhpcy5mUGFja2FnZQorCQkJCQkJJiYgQ2hhck9wZXJhdGlvbi5lcXVhbHModGhp
cy5jb21wb3VuZE5hbWUsIGVudi5nZXROb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk5hbWUoKSkp
IHsKKwkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGxC
eURlZmF1bHQ7CisJCQkJCWlmICghKHRoaXMgaW5zdGFuY2VvZiBVbnJlc29sdmVkUmVmZXJlbmNl
QmluZGluZykpIC8vIHVucmVzb2x2ZWQgd2lsbCBuZWVkIHRvIGNoZWNrIGJhY2sgZm9yIHRoZSBy
ZXNvbHZlZCB0eXBlCisJCQkJCQllbnYubm9ubnVsbEJ5RGVmYXVsdEFubm90YXRpb25QYWNrYWdl
ID0gbnVsbDsgLy8gZG9uJ3QgY2hlY2sgYWdhaW4KKwkJCQl9CisJCQl9CisJCX0KKwl9CiB9CiAK
IC8qKgo=
</data>

          </attachment>
      

    </bug>

</bugzilla>