<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435462</bug_id>
          
          <creation_ts>2014-05-22 01:25:00 -0400</creation_ts>
          <short_desc>[1.8] NPE in codegen with nested conditional and allocation expressions</short_desc>
          <delta_ts>2014-06-03 01:46:33 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">saammana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>saammana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62569"
          type_id="1"
          status="+"
          setter="markus_keller"
    />
    <flag name="review"
          id="62635"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62636"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2405296</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-22 01:25:52 -0400</bug_when>
    <thetext>The following code throws NPE. 
From bug 433825 comment 18

import java.util.ArrayList;
import java.util.Collection;

public class CompilerCrashesWithNPE {
  
  public void bla() {
    boolean b = Boolean.TRUE.booleanValue();
    Collection&lt;?&gt; c1 = new ArrayList&lt;String&gt;();
    new Bar(b ? new ArrayList&lt;&gt;(b ? new ArrayList&lt;&gt;() : c1) : c1);
  }

  private static class Bar {
    public Bar(Collection&lt;?&gt; col) {
    }
  }
}

Exception thrown:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:286)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:287)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:215)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:278)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:287)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:215)
	at org.eclipse.jdt.internal.compiler.ast.Expression.generateCode(Expression.java:705)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:325)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:270)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:566)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:635)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:368)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406864</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-26 00:31:50 -0400</bug_when>
    <thetext>Sasi, please follow up. We should consider this for RC3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406956</commentid>
    <comment_count>2</comment_count>
      <attachid>243478</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-26 05:20:57 -0400</bug_when>
    <thetext>Created attachment 243478
Proposed changes</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406971</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-26 05:33:46 -0400</bug_when>
    <thetext>Calling ctx.rebindInnerPolies for other bindings of type ParameterizedMethodBinding seems to be the right thing to do to propagate the results into arguments of the allocation expression. Doing this even when the stepCompleted != Type_Inferred seems ok in this case. Tests are running, will update with results as soon as they are done</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407450</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-26 20:58:48 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #3)
&gt; Calling ctx.rebindInnerPolies for other bindings of type
&gt; ParameterizedMethodBinding seems to be the right thing to do to propagate
&gt; the results into arguments of the allocation expression.

This is a very good solution. The InferenceContext18 is the instance with best knowledge about what needs to be done. This includes the solution for the concern raised in bug 434297 comment 4 (regarding varags invocations).


&gt; Doing this even when the stepCompleted != Type_Inferred seems ok in this case.

This is the part, that I can&apos;t find a good explanation for, neither for nor against. Given how late in the cycle we are I continued looking for a solution that can be more fully explained. So please bear with me proposing an alternative patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407451</commentid>
    <comment_count>5</comment_count>
      <attachid>243509</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-26 21:37:15 -0400</bug_when>
    <thetext>Created attachment 243509
alternative patch

Rationale for this solution:

The branch where Sasi&apos;s patch inserts the call to rebindInnerPolies() corresponds to a diamond invocation, where the ctor itself is not generic.

Type inference for this animal should actually happen via resolvePart2() -&gt; inferElidedTypes() -&gt; Scope.getStaticFactory(). Please see that all paths towards a successful return from getStaticFactory() give inference a chance to finish (either directly in getStaticFactory() or via mostSpecificMethodBinding()) .

Here, finishing happens via Scope.inferInvocationType(), which contains a call to ASTNode.resolvePolyExpressionArguments() for propagating information into invocation arguments - the exact thing needing a fix for this bug!!


Question: why didn&apos;t we reach this call to resolvePolyExpressionArguments()?

Answer: because the call chain into this area misses to set AE.typeExpected, and hence we&apos;re not ready for invocation type inference. This is the root cause.

=&gt; Step 1: unconditionally set this.typeExpected = targetType.


At this point we fully rely on the call to resolvePart2() to 
- finish inference
- propagate results into arguments


With only Step 1 in place we run into a situation, where an AE.binding has been initialized by some previous resolution attempt, and by checking 
   this.binding == null
we prevent the necessary call to resolvePart2() from happening. (See that resolvePart2() is explicitly designed for being invoked multiple times for multiple target types).

=&gt; Step 2: we need to make that check more permissive.

Completely removing this check goes a long way but causes a regression when compiling JRE8 sources (DateTimeFormatterBuilder.java:3735).

I didn&apos;t yet analyse that failure but I think the following rule, which avoids that regression, makes a lot of sense:
  Do the call to resolvePart2() when
   - we have no binding yet, or
   - when the previous resolution attempt produced a resolvedType that 
     is incompatible with the final targetType.

Tests done with this patch:
- RunAllJava8Tests: I needed to update one test expectation, which I believe to be an improvement (avoid unhelpful secondary error), otherwise: success.
- compile JRE8: success.

Not yet: full JDT/Core test suite.


Thanks Sasi, for being outright by saying &quot;seems ok in this case&quot;. I was about to be convinced when the &quot;seems&quot; caught my attention ...


The issue at hand can be fixed with either patch. At this point I&apos;m only looking for the solution that is best understood: in terms of root cause and in terms of why that cause is fixed by the path. If a good explanation can be provided for the other patch (without saying &quot;seems&quot; :) ), I&apos;ll be quickly convinced and give my +1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407463</commentid>
    <comment_count>6</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-05-27 01:05:41 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Created attachment 243509 [details]
&gt; alternative patch

 +1 for Stephan&apos;s patch and explanation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407515</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-27 03:56:33 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Created attachment 243509
&gt; alternative patch
&gt; 
&gt; Rationale for this solution:
&gt; 
&gt; The branch where Sasi&apos;s patch inserts the call to rebindInnerPolies()
&gt; corresponds to a diamond invocation, where the ctor itself is not generic.
&gt; 
&gt; Type inference for this animal should actually happen via resolvePart2() -&gt;
&gt; inferElidedTypes() -&gt; Scope.getStaticFactory(). Please see that all paths
&gt; towards a successful return from getStaticFactory() give inference a chance to
&gt; finish (either directly in getStaticFactory() or via
&gt; mostSpecificMethodBinding()) .
&gt; 
&gt; Here, finishing happens via Scope.inferInvocationType(), which contains a call
&gt; to ASTNode.resolvePolyExpressionArguments() for propagating information into
&gt; invocation arguments - the exact thing needing a fix for this bug!!
&gt; 
&gt; 
&gt; Question: why didn&apos;t we reach this call to resolvePolyExpressionArguments()?
&gt; 
&gt; Answer: because the call chain into this area misses to set AE.typeExpected, and
&gt; hence we&apos;re not ready for invocation type inference. This is the root cause.
&gt; 
&gt; =&gt; Step 1: unconditionally set this.typeExpected = targetType.
&gt; 
&gt; 
&gt; At this point we fully rely on the call to resolvePart2() to
&gt; - finish inference
&gt; - propagate results into arguments
&gt; 
&gt; 
&gt; With only Step 1 in place we run into a situation, where an AE.binding has been
&gt; initialized by some previous resolution attempt, and by checking
&gt; this.binding == null
&gt; we prevent the necessary call to resolvePart2() from happening. (See that
&gt; resolvePart2() is explicitly designed for being invoked multiple times for
&gt; multiple target types).
&gt; 
&gt; =&gt; Step 2: we need to make that check more permissive.
&gt; 
&gt; Completely removing this check goes a long way but causes a regression when
&gt; compiling JRE8 sources (DateTimeFormatterBuilder.java:3735).
&gt; 
&gt; I didn&apos;t yet analyse that failure but I think the following rule, which avoids
&gt; that regression, makes a lot of sense:
&gt; Do the call to resolvePart2() when
&gt; - we have no binding yet, or
&gt; - when the previous resolution attempt produced a resolvedType that
&gt; is incompatible with the final targetType.
&gt; 
&gt; Tests done with this patch:
&gt; - RunAllJava8Tests: I needed to update one test expectation, which I believe to
&gt; be an improvement (avoid unhelpful secondary error), otherwise: success.
&gt; - compile JRE8: success.
&gt; 
&gt; Not yet: full JDT/Core test suite.
&gt; 
&gt; 
&gt; Thanks Sasi, for being outright by saying &quot;seems ok in this case&quot;. I was about
&gt; to be convinced when the &quot;seems&quot; caught my attention ...
&gt; 
&gt; 
&gt; The issue at hand can be fixed with either patch. At this point I&apos;m only looking
&gt; for the solution that is best understood: in terms of root cause and in terms of
&gt; why that cause is fixed by the path. If a good explanation can be provided for
&gt; the other patch (without saying &quot;seems&quot; :) ), I&apos;ll be quickly convinced and give
&gt; my +1.
Thanks Stephan, for the detailed explanation. I will not attempt to provide any further explanation for the other patch because this one seems (:), no it is) better</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407520</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 04:01:57 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Created attachment 243509 [details]
&gt; alternative patch

There is another NPE with this patch with the testcase provided for bug 434297 :(

I was going to type that I see similar effect with both patches (like calling rebindInnerPolies() ) and that theoretically, changing the newer code should bring us stable result, but then my extended testing revealed this problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407538</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 04:26:39 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)
&gt; (In reply to Stephan Herrmann from comment #5)
&gt; &gt; Created attachment 243509 [details]
&gt; &gt; alternative patch
&gt; 
&gt; There is another NPE with this patch with the testcase provided for bug
&gt; 434297 :(

I tried a few things but could not reproduce, neither via that bug&apos;s JUnit nor in the IDE.  Anything special you did during testing?

One observation from memory: if you saw the exception in the debugger, this might well be caught upstream from LambdaExpression.doesNotCompleteNormally().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407544</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 04:38:32 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; I tried a few things but could not reproduce, neither via that bug&apos;s JUnit
&gt; nor in the IDE.  Anything special you did during testing?
&gt; 
&gt; One observation from memory: if you saw the exception in the debugger, this
&gt; might well be caught upstream from
&gt; LambdaExpression.doesNotCompleteNormally().

Well, neither can I now :( but just a few minutes back I could see the failing test as well reproduce in the IDE. One thing I must mention is that I had the patches from bug 435399 and bug 435463 also in my workspace. But after reverting those now I can&apos;t reproduce even after putting them back.

So, it must be something about the state of my workspace. For the record, here&apos;s the stack:

java.lang.NullPointerException
at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:469)
at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:172)
at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCode(AllocationExpression.java:117)
at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.analyseCode(ConditionalExpression.java:119)
at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:172)
at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:124)
at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:737)
at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:261)
at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:118)
at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:776)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest$26.process(AbstractRegressionTest.java:2597)
at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:470)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2606)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runTest(AbstractRegressionTest.java:2425)
at org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.runConformTest(AbstractRegressionTest.java:1347)
at org.eclipse.jdt.core.tests.compiler.regression.LambdaExpressionsTest.test434297(LambdaExpressionsTest.java:4411)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407547</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 04:43:11 -0400</bug_when>
    <thetext>If you have the exception in your log, maybe from the timestamp you can identify the state in Eclipse&apos;s local history to restore the broken state?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407624</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 06:35:36 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #11)
&gt; If you have the exception in your log, maybe from the timestamp you can
&gt; identify the state in Eclipse&apos;s local history to restore the broken state?

Tried, but didn&apos;t help. Possibly the files were still being refreshed after git operations when I launched the tests. That&apos;s the only explanation I can think of. 

Anyway, I have done some debugging and further testing and can confirm that this patch is good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408584</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-27 15:13:44 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Created attachment 243509 [details] [diff]
&gt; alternative patch

+1 for the fix, -1 for the additional indentation. Saved the tabs for an other occasion and released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=75e8acfdeb57688faec88df980fcf3ed6ae091e5


I tried hard to come up with a case where MessageSend#checkAgainstFinalTargetType(TypeBinding, Scope) would need the same change, but it really looks like there&apos;s no diamond-inference on non-generic method invocations ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408592</commentid>
    <comment_count>14</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-27 15:27:25 -0400</bug_when>
    <thetext>Oops, I think I&apos;ve released the wrong patch. I&apos;ll fix this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408603</commentid>
    <comment_count>15</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-27 15:47:27 -0400</bug_when>
    <thetext>Reverted bad commit and pushed the Stephan&apos;s patch as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=83bcf331911b5706551c1e86ef65bbed7aeb26c7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411768</commentid>
    <comment_count>16</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-06-03 01:46:33 -0400</bug_when>
    <thetext>Verified fixed for Eclipse Luna 4.4 RC3 Build id: I20140602-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243478</attachid>
            <date>2014-05-26 05:20:00 -0400</date>
            <delta_ts>2014-05-27 06:52:26 -0400</delta_ts>
            <desc>Proposed changes</desc>
            <filename>Fix-and-test-for-bug-435462.patch</filename>
            <type>text/plain</type>
            <size>3222</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDAwNjBlYTguLjc1MDA3YzAgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzE4MCw0ICszMTgwLDI2IEBACiAJCSJUaGUgY29uc3Ry
dWN0b3IgWC5CYXIoQ29sbGVjdGlvbjxTdHJpbmc+KSBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIg
KyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzNTQ2MiBbMS44XSBOUEUgaW4gY29kZWdlbiB3aXRoIG5lc3Rl
ZCBjb25kaXRpb25hbCBhbmQgYWxsb2NhdGlvbiBleHByZXNzaW9ucworcHVibGljIHZvaWQgdGVz
dEJ1ZzQzNTQ2MigpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10gewor
CQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuIiArIAorCQkJ
ImltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGls
Lkxpc3Q7XG4iICsgCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIiAgcHVibGljIHN0
YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJ
IiAgcHVibGljIHZvaWQgYmxhKCkge1xuIiArIAorCQkJIiAgICBib29sZWFuIGIgPSBCb29sZWFu
LlRSVUUuYm9vbGVhblZhbHVlKCk7XG4iICsgCisJCQkiICAgIExpc3Q8U3RyaW5nPiBjMSA9IG5l
dyBBcnJheUxpc3Q8PigpO1xuIiArIAorCQkJIiAgICBuZXcgQmFyKGIgPyBuZXcgQXJyYXlMaXN0
PD4oYiA/IG5ldyBBcnJheUxpc3Q8PigpIDogYzEpIDogYzEpO1xuIiArIAorCQkJIiAgfVxuIiAr
IAorCQkJIiAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQmFyIHtcbiIgKyAKKwkJCSIJICBwdWJsaWMg
QmFyKENvbGxlY3Rpb248Pz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJ9Igor
CX0pOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDAxOWFkODEu
LjE2ZjIyZmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTczMCwxNSAr
NzMwLDIwIEBACiAJCXJlc29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7
CiAJfQogCS8vIGNvbmZlciBNZXNzYWdlU2VuZC5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUo
LCwpOgotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIHsKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZE1ldGhvZEJpbmRpbmcpIHsKIAkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQlp
ZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTgu
VFlQRV9JTkZFUlJFRCkgewotCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRUeXBlOwotCQkJ
TWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9jYXRpb25UeXBlKHRo
aXMsIChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7Ci0J
CQlpZiAodXBkYXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5cGUpKSB7Ci0JCQkJ
QVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdXBkYXRlZEJpbmRp
bmcsIHNjb3BlKTsKLQkJCX0KLQkJfQorCQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29t
cGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKKwkJCQl0aGlzLnR5
cGVFeHBlY3RlZCA9IHRhcmdldFR5cGU7CisJCQkJaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgeworCQkJCQlNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2NhdGlvblR5cGUodGhpcywKKwkJCQkJCQko
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOworCQkJCQlp
ZiAodXBkYXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5cGUpKSB7CisJCQkJCQlB
U1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1cGRhdGVkQmluZGlu
Zywgc2NvcGUpOworCQkJCQl9CisJCQkJfSBlbHNlIHsKKwkJCQkJY3R4LnJlYmluZElubmVyUG9s
aWVzKHRoaXMuYmluZGluZywgdGhpcyk7CisJCQkJfQorCQkJfSAKIAl9CiAJaWYgKHRoaXMuc3Vz
cGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKIAkJcmV0dXJuIHJlc29sdmVQYXJ0Myh0
aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243509</attachid>
            <date>2014-05-26 21:37:00 -0400</date>
            <delta_ts>2014-05-26 21:37:15 -0400</delta_ts>
            <desc>alternative patch</desc>
            <filename>bug435462-alternative.patch</filename>
            <type>text/plain</type>
            <size>3197</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDAwNjBlYTguLjc3ZWM1ODcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzE2OCwxNiArMzE2OCwzMyBAQAogCQkiCW5ldyBCYXIo
YiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgXlxuIiAr
IAogCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBpbnQgdG8gQ29sbGVjdGlv
bjxTdHJpbmc+XG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsKLQkJIjMuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSA5KVxuIiArIAotCQkiCW5ldyBCYXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4o
KSk7XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0J
CSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIEFycmF5TGlzdDxPYmplY3Q+IHRv
IENvbGxlY3Rpb248U3RyaW5nPlxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSI0LiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCXB1YmxpYyBCYXIo
Q29sbGVjdGlvbjxTdHJpbmc+IGNvbCkgeyB9XG4iICsgCiAJCSIJICAgICAgIF5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArIAogCQkiVGhlIGNvbnN0cnVjdG9yIFguQmFyKENvbGxlY3Rp
b248U3RyaW5nPikgaXMgbmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCiAJCSItLS0tLS0tLS0tXG4i
KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzU0NjIgWzEuOF0gTlBFIGluIGNvZGVnZW4gd2l0aCBuZXN0ZWQgY29uZGl0aW9uYWwgYW5kIGFs
bG9jYXRpb24gZXhwcmVzc2lvbnMKK3B1YmxpYyB2b2lkIHRlc3RCdWc0MzU0NjIoKSB7CisJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJp
bXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNv
bGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgp
IHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0gQm9vbGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgp
O1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4gYzEgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIg
KyAKKwkJCSIgICAgbmV3IEJhcihiID8gbmV3IEFycmF5TGlzdDw+KGIgPyBuZXcgQXJyYXlMaXN0
PD4oKSA6IGMxKSA6IGMxKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSIgIHByaXZhdGUgc3Rh
dGljIGNsYXNzIEJhciB7XG4iICsgCisJCQkiCSAgcHVibGljIEJhcihDb2xsZWN0aW9uPD8+IGNv
bCkgeyB9XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkifSIKKwl9KTsKK30KIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAwMTlhZDgxLi43NzIyYTU0IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03MjUsNyArNzI1LDEwIEBACiAJcmV0dXJuIHRo
aXMuYmluZGluZzsKIH0KIHB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdl
dFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlpZiAodGhpcy5i
aW5kaW5nID09IG51bGwgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAm
JiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgeworCXRo
aXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKKwlib29sZWFuIG5lZWRzVXBkYXRlID0gdGhp
cy5iaW5kaW5nID09IG51bGwgfHwgCQkJCQkJCQkJCQkJCQkJCS8vIG5vdCB5ZXQgcmVzb2x2ZWQK
KwkJCSh0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCAmJiAh
dGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSk7CS8vIHByZXZp
b3VzIGF0dGVtcHQgd2FzIHdyb25nCisJaWYgKG5lZWRzVXBkYXRlICYmIHRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IpIHsKIAkJLy8gQXR0ZW1wdCB0byByZXNvbHZlIGhhbGYgcmVzb2x2
ZWQgZGlhbW9uZAogCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUp
OwogCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>