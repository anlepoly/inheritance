<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>415043</bug_id>
          
          <creation_ts>2013-08-14 06:24:00 -0400</creation_ts>
          <short_desc>[1.8][null] Follow-up re null type annotations after bug 392099</short_desc>
          <delta_ts>2013-08-27 17:02:42 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>392099</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2294635</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-14 06:24:29 -0400</bug_when>
    <thetext>Once bug 392099 has resolved the bulk of the work for null type annotations,
the following list of TODOs must be investigated:

(1) Check para in Annotation.resolveType() starting
  if ((annotationType.tagBits &amp; TagBits.AnnotationTargetMASK) == TagBits.AnnotationForTypeUse) {
-&gt; Needed? When, why introduced? Overlap with 1.8 treatment below??

(2) ConditionalExpression: FIXME: we need t1 == t2 comparison,
but don&apos;t yet handle mixed scenarios of types with nullTagBits + arguments
-&gt; also use unannotated() instead of original()!!

(3) ReturnStatement: 
more detailed checking (incomp. due to annot on type detail)
-&gt; use findNullTypeAnnotationMismatch() &amp; write more tests
-&gt; this method still needs to descend into type parameters

(4) Statement.findNullTypeAnnotationMismatch(..)
- maybe int return can be replaced with boolean (isDefiniteConflict)
- if so, maybe the method can actually do less for non-definite cases

(5) TypeDeclaration:
-&gt; Need to check if synth default constructors need treatment for JSR308

(6) LookupEnvironment.createAnnotatedType: + handle PolyTypeBinding

(7) SourceTypeBinding.resolveTypeFor()
- here we translate NonNullByDefault into type annotation after the fact.
  should we use different strategies up-front?

(8) ReferenceBinding.nullAnnotatedReadableName(..)
- respect annotatable enclosing type

(9) NullTypeAnnotationTest: expect (and implement) more error messages
  (individually marked &quot;FIXME&quot;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2296023</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-18 17:55:40 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; (1) Check para in Annotation.resolveType() starting
&gt;   if ((annotationType.tagBits &amp; TagBits.AnnotationTargetMASK) ==
&gt; TagBits.AnnotationForTypeUse) {
&gt; -&gt; Needed? When, why introduced? Overlap with 1.8 treatment below??

Obsolete residue of intermediate work,
removed via commit 55099d2c60113e1ad2e8ab8558e8720dd555fab8 
 
&gt; (2) ConditionalExpression: FIXME: we need t1 == t2 comparison,
&gt; but don&apos;t yet handle mixed scenarios of types with nullTagBits + arguments
&gt; -&gt; also use unannotated() instead of original()!!

done via commit fafb2dc68e9656aa163ddd55309d4bcb6df6ee09

&gt; (3) ReturnStatement: 
&gt; more detailed checking (incomp. due to annot on type detail)
&gt; -&gt; use findNullTypeAnnotationMismatch() &amp; write more tests
&gt; -&gt; this method still needs to descend into type parameters

changes in ReturnStatement done via commit 56242f2c4a4e3fdfdcffa7d9541655946a7953f8

&gt; (4) Statement.findNullTypeAnnotationMismatch(..)
&gt; - maybe int return can be replaced with boolean (isDefiniteConflict)
&gt; - if so, maybe the method can actually do less for non-definite cases

done via commit 40f76b3d0fb01a4a7fa1aad4b09c356c31458c94</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2296756</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-20 08:21:05 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; (5) TypeDeclaration:
&gt; -&gt; Need to check if synth default constructors need treatment for JSR308

This case is already covered: synth bindings are created with identical type
bindings, which already carry the annotation tagBits,

&gt; (7) SourceTypeBinding.resolveTypeFor()
&gt; - here we translate NonNullByDefault into type annotation after the fact.
&gt;   should we use different strategies up-front?

This would require significant code duplication, but current solutions looks
safe, so no action planned.
Only a little fix (include ArrayBinding in this treatment) has been released
via commit dc2b9befa6829d8676bcaaed036d87dc45fd9d36

&gt; (8) ReferenceBinding.nullAnnotatedReadableName(..)
&gt; - respect annotatable enclosing type

No, ReferenceBinding shouldn&apos;t be involved - nullAnnotatedReadableName()
has been removed from RB. Instead the corresponding behavior in 
ParameterizedTypeBinding has been improved. 
Released via commit 1fbca275b2d7b310a4c5055e69f422227cc3afb2
(includes a fix for detecting mismatch due to enclosing)

&gt; (9) NullTypeAnnotationTest: expect (and implement) more error messages
&gt;   (individually marked &quot;FIXME&quot;).

Incompatibility between annotations on formal and actual type parameters
are detected as of commit 4479368fdfa1c29f97c094bfbee396d5c4fd21ba
which includes fixes for annotated type variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2299750</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-27 17:02:42 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; (6) LookupEnvironment.createAnnotatedType: + handle PolyTypeBinding

At a closer look this is invalid: PolyTypeBinding is the type associated to an
*expression*, with no declaration associated. There&apos;s no way an expression with
a PolyTypeBinding can carry type annotations.

&gt; (9) NullTypeAnnotationTest: expect (and implement) more error messages
&gt;   (individually marked &quot;FIXME&quot;).

More detections have been implemented and tests adjusted, mostly regarding wildcards.
Also replicated a few tests for single vs. qualified type references.

The final remaining FIXME will be handled via bug 414380.


Released this last bulk via commit c49a7bd34f8c2781dba76984d24d83335183205f</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>