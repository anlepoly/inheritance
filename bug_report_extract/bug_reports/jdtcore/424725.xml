<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424725</bug_id>
          
          <creation_ts>2013-12-29 07:06:00 -0500</creation_ts>
          <short_desc>[1.8] Java Builder infinite loop, ArrayIndexOutOfBoundsException in analyseArguments</short_desc>
          <delta_ts>2014-01-02 07:38:57 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>blocker</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Hendrikx">hjohn</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2345113</commentid>
    <comment_count>0</comment_count>
    <who name="John Hendrikx">hjohn</who>
    <bug_when>2013-12-29 07:06:57 -0500</bug_when>
    <thetext>Getting this problem on a large Java 8 project with the 20 december Java8 release:

java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments(Statement.java:120)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:168)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:169)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:105)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:740)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:264)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:119)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:776)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Unknown Source)

I&apos;m unsure where it occurs exactly as the stack trace leaves much to be desired to figure out where this problem occurs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345272</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-12-30 22:06:03 -0500</bug_when>
    <thetext>Could you please provide a test case that reproduces this issue? Or share the zip/chunk of code where this error occurs in case its tough to pin point the issue?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345320</commentid>
    <comment_count>2</comment_count>
    <who name="John Hendrikx">hjohn</who>
    <bug_when>2013-12-31 10:21:07 -0500</bug_when>
    <thetext>I&apos;m unable to reproduce this again after working around the problem (continued work in a different Java 8 enabled Eclipse).

It would have been hard to isolate anyway, as the runaway build process kept interfering with Eclipse operations (requiring restarts), but I&apos;ll try activate some logging (or send you the entire project) if it comes back again.

I was actually hoping the given stack trace would give some clue as to what might be wrong.  If I&apos;m reading it right it occurs in a class method, somewhere in a try statement nested within an if block.  Line 120 and whatever analyseArguments is doing should provide some indication of what might be going wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345326</commentid>
    <comment_count>3</comment_count>
    <who name="John Hendrikx">hjohn</who>
    <bug_when>2013-12-31 11:15:57 -0500</bug_when>
    <thetext>I managed to isolate it after all.  I&apos;m however at a loss why it is causing problems.

The fragment below causes the stack trace.  Uncommenting part of the try or the whole try block makes it go away.

import java.lang.invoke.MethodHandle;

public final class AnnotatedRecordMapper&lt;T&gt; {
  private MethodHandle afterLoadStore;

  public void invokeAfterLoadStore(Object object, Object database) {
    if(afterLoadStore != null) {
      try {
        afterLoadStore.invoke(object, database);
      }
      catch(Throwable e) {
        throw new RuntimeException(e);
      }
    }
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345403</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-02 07:16:29 -0500</bug_when>
    <thetext>I can reproduce using the example from comment 3 and after enabling null annotations (as the AIOOBE occurs inside null analysis).

This happens when analysing
  afterLoadStore.invoke(object, database)
which resolves to a PolymorphicMethodBinding, whose original has one &quot;Object[]&quot; parameter, where we are expecting 2 parameters.

It seems in the presence of polymorphic methods we must be much more careful with using original() and assuming it has the same shape is the current method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345407</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-02 07:38:57 -0500</bug_when>
    <thetext>The AIOOBE has been fixed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7ff9b5e7960c9af4d2ba07d3470483b51a02c825

We are no longer performing any null analysis for the arguments to any polymorphic method call, since we don&apos;t have any useful information at hand.

Please let us know if the infinite loop can still be reproduced.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>