<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435463</bug_id>
          
          <creation_ts>2014-05-22 01:25:00 -0400</creation_ts>
          <short_desc>StackOverflowError when compiling generic code</short_desc>
          <delta_ts>2014-06-04 01:21:17 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ismail Badawi">ismail</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>awang060843</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62637"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62639"
          type_id="1"
          status="+"
          setter="manpalat"
    />
    <flag name="review"
          id="62641"
          type_id="1"
          status="+"
          setter="markus_keller"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2405297</commentid>
    <comment_count>0</comment_count>
    <who name="Ismail Badawi">ismail</who>
    <bug_when>2014-05-22 01:25:54 -0400</bug_when>
    <thetext>(This is mainly copied from a stackoverflow question I posted: http://stackoverflow.com/questions/23797972/type-error-using-generics-under-java-8-but-not-java-7)

I have a piece of code which used to compile under Java 7 (both with javac and Eclipse). After switching to Java 8, javac gives a type error, and Eclipse (I tried 4.3.2 with the Java 8 support feature patch, and also 4.4RC1) fails to build with an internal compiler error.

This is the javac error:

    /path/to/Match.java:65: error: method transform in class Iterables cannot be applied to given types;
                return Joiner.on(&quot;, &quot;).join(Iterables.transform(list, AstFunctions.prettyPrint()));
                                                     ^
      required: Iterable&lt;F&gt;,Function&lt;? super F,? extends T#1&gt;
      found: List&lt;CAP#1&gt;,Function&lt;ASTNode&lt;?&gt;,String&gt;
      reason: cannot infer type-variable(s) F,T#1,T#2
        (argument mismatch; Function&lt;CAP#1,String&gt; cannot be converted to Function&lt;? super CAP#1,? extends String&gt;)
      where F,T#1,T#2 are type-variables:
        F extends Object declared in method &lt;F,T#1&gt;transform(Iterable&lt;F&gt;,Function&lt;? super F,? extends T#1&gt;)
        T#1 extends Object declared in method &lt;F,T#1&gt;transform(Iterable&lt;F&gt;,Function&lt;? super F,? extends T#1&gt;)
        T#2 extends ASTNode&lt;?&gt; declared in method &lt;T#2&gt;prettyPrint()
      where CAP#1 is a fresh type-variable:
        CAP#1 extends ASTNode&lt;?&gt; from capture of ? extends ASTNode&lt;?&gt;
    1 error


The offending line is:

    return Joiner.on(&quot;, &quot;).join(Iterables.transform(list, AstFunctions.prettyPrint()));

[`Joiner`](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/base/Joiner.html) and [`Iterables`](http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Iterables.html) are from the latest version of Guava.
 `list` is an instance of `ast.List&lt;? extends ASTNode&lt;?&gt;&gt;`, which is generated code I can&apos;t really control. The classes are declared like this:

    public class ASTNode&lt;T extends ASTNode&gt; extends beaver.Symbol
                                            implements Cloneable, Iterable&lt;T&gt;

    public class List&lt;T extends ASTNode&gt; extends ASTNode&lt;T&gt; implements Cloneable

And `AstFunctions.prettyPrint()` is declared like this:

    public static &lt;T extends ASTNode&lt;?&gt;&gt; Function&lt;T, String&gt; prettyPrint()

where again `Function` is the Guava `Function`.

Eclipse fails to build with this error:

An internal error occurred during: &quot;Building workspace&quot;.
java.lang.StackOverflowError

An error annotation is placed at the package declaration in that file, with this tooltip:

    Internal compiler error: java.lang.StackOverflowError at 
     org.eclipse.jdt.internal.compiler.lookup.ParameterizedTypeBinding.substituteInferenceVariable(ParameterizedTypeBinding.java:856)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405331</commentid>
    <comment_count>1</comment_count>
    <who name="Ismail Badawi">ismail</who>
    <bug_when>2014-05-22 02:31:44 -0400</bug_when>
    <thetext>Note: I&apos;ve tried to come up with a small self-contained example but I&apos;m having issues. You can try and reproduce like this:

$ git clone https://github.com/Sable/mclab
$ (cd mclab/languages/Natlab &amp;&amp; ant gen)

Then open mclab in Eclipse (there&apos;s already an Eclipse project). For me, this fails when building with the error I gave previously.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405673</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 10:27:50 -0400</bug_when>
    <thetext>Thanks for sharing the link to your repo, I&apos;m currently cloning to see if I can reproduce the problem.

Why is the invocation of ant necessary?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405681</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 10:34:20 -0400</bug_when>
    <thetext>Ant build fails with the error from javac.

It leaves the Eclipse project with these errors:


Project &apos;McLab&apos; is missing required source folder: &apos;languages/AspectMatlab/gen&apos;	

The project cannot be built until build path errors are resolved


What should I do from here?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405682</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 10:35:29 -0400</bug_when>
    <thetext>Ah, I can see it now:

After manually creating the missing source folder, build starts and throws SOE</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405702</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 11:10:53 -0400</bug_when>
    <thetext>We unexpectedly succeeded to create a reflexive raw type:

  this	RawTypeBinding  (id=104784)	
	arguments	TypeBinding[1]  (id=104811)	
		[0]	RawTypeBinding  (id=104784)	

Where toString() of instance 104784 says:

public class ASTNode#RAW
	extends beaver.Symbol
	implements : java.lang.Cloneable, Iterable#RAW
...

As a result when descending into the type argument &quot;tree&quot; we never reach a leaf.

The original &apos;type&apos; is:

public class ast.ASTNode&lt;T extends ASTNode#RAW&gt;
	extends beaver.Symbol
	implements : java.lang.Cloneable, Iterable&lt;T&gt;
...


In our implementation, RawTypeBinding initially has no &apos;arguments&apos;, but these are lazily filled via initializeArguments() during PTB.substitute(TypeVariableBinding) (this seems to be a technical trick, since raw types obviously have no type arguments).

This implies that the bug only occurs when the invocation 
  Iterables.transform(list, AstFunctions.prettyPrint())
is inferred *after* the type ASTNode#RAW has participated in some type argument substitution.

This explains the difficulty to create a concise test case.

We should be able to easily avoid the SOE by checking for direct identity of this and this.arguments[i], but a bit more effort is needed to find out what the correct answer should be in that case.

As an alternative we could perhaps ignore or even reset this.arguments for a RawTypeBinding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405705</commentid>
    <comment_count>6</comment_count>
    <who name="Ismail Badawi">ismail</who>
    <bug_when>2014-05-22 11:15:30 -0400</bug_when>
    <thetext>Sorry about the build issues. `ant gen` is required to generate the parser and AST nodes used by the project; in particular, the AST nodes (responsible for those funky types) are generated by JastAdd (http://www.jastadd.org/web/).

Relatedly, while trying to prepare a self-contained testcase, I wasn&apos;t able to reproduce the SOE, but I did come up with a small piece of code that compiles fine using javac -source 1.7, but fails (with the error in the original post) with javac -source 1.8, and Eclipse never complains about it when targeting either 1.7 or 1.8. The code is this:


import java.util.Iterator;

class ASTNode&lt;T extends ASTNode&gt; implements Iterable&lt;T&gt; {
  @Override public Iterator&lt;T&gt; iterator() { return null; }
}

class List&lt;T extends ASTNode&gt; extends ASTNode&lt;T&gt; {}

interface Function&lt;F, T&gt; {}

class Iterables {
  public static &lt;F,T&gt; Iterable&lt;T&gt; transform(
      Iterable&lt;F&gt; fromIterable, Function&lt;? super F, ? extends T&gt; function) { return null; }
}

class AstFunctions {
  public static &lt;T extends ASTNode&lt;?&gt;&gt; Function&lt;T, String&gt; prettyPrint() { return null; }
}

public class Main {
  public static void test() {
    List&lt;? extends ASTNode&lt;?&gt;&gt; list = null;
    Iterables.transform(list, AstFunctions.prettyPrint());
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405710</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 11:20:21 -0400</bug_when>
    <thetext>(In reply to Ismail Badawi from comment #6)
&gt; Relatedly, while trying to prepare a self-contained testcase, I wasn&apos;t able
&gt; to reproduce the SOE, but I did come up with a small piece of code that
&gt; compiles fine using javac -source 1.7, but fails (with the error in the
&gt; original post) with javac -source 1.8, and Eclipse never complains about it
&gt; when targeting either 1.7 or 1.8.

That part is the same as bug 435485, right?

I&apos;m not much worried about that, but the StackOverflow is bad.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405726</commentid>
    <comment_count>8</comment_count>
    <who name="Ismail Badawi">ismail</who>
    <bug_when>2014-05-22 11:38:28 -0400</bug_when>
    <thetext>Ah yes, same bug, sorry. I didn&apos;t know it had been submitted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405782</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 13:19:32 -0400</bug_when>
    <thetext>OK I have a self-contained repro:

//----
package test;
abstract class ASTNode&lt;T extends ASTNode&gt; implements Iterable&lt;T&gt; {
	public T getChild(int i) { return null; }
} 
abstract class List&lt;T extends ASTNode&gt; extends ASTNode&lt;T&gt; { }
class Joiner {
	  public static Joiner on(String separator) {
	    return null;
	  }
	  String join(Iterable&lt;?&gt; parts) {
		  return &quot;&quot;;
	  }
}
class AstFunctions {
	  public static &lt;T extends ASTNode&lt;?&gt;&gt; Function&lt;T, String&gt; prettyPrint() {
		  return null;
	  }
}
class Iterables {
	public static &lt;F, T&gt; Iterable&lt;T&gt; transform(final Iterable&lt;F&gt; fromIterable,
		      final Function&lt;? super F, ? extends T&gt; function) {
		return null;
	}
}
interface Function&lt;F, T&gt; {
	 T apply(F input);
}
public class Main {

	  String test(ASTNode&lt;?&gt; node, ASTNode rawNode) {
		rawNode.getChild(0); 
	    
        @SuppressWarnings(&quot;unchecked&quot;)
        List&lt;? extends ASTNode&lt;?&gt;&gt; list = (List&lt;? extends ASTNode&lt;?&gt;&gt;) node;
        return Joiner.on(&quot;, &quot;).join(Iterables.transform(list, AstFunctions.prettyPrint()));
	  }

}
//---

Fixing this might actually be easier than creating the repro.

Tentatively pulling into 4.4 but no promise yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405785</commentid>
    <comment_count>10</comment_count>
      <attachid>243408</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 13:26:11 -0400</bug_when>
    <thetext>Created attachment 243408
draft patch

This patch can be used for discussion regarding inclusion for Luna vs. deferral, I&apos;ll run all tests now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405837</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:57:32 -0400</bug_when>
    <thetext>IIRC the tests were green, but I lost the JUnit result due to an Eclipse crash :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407535</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 04:24:21 -0400</bug_when>
    <thetext>Patch looks good. I also confirm all tests are green with the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408540</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-27 14:18:45 -0400</bug_when>
    <thetext>+1. Released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f4fc504166df381ca6b1f6852c6f598d05ce2608</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411924</commentid>
    <comment_count>14</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-06-03 06:24:10 -0400</bug_when>
    <thetext>Verified for 4.4 RC3 using I20140602-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243408</attachid>
            <date>2014-05-22 13:26:00 -0400</date>
            <delta_ts>2014-05-22 13:26:11 -0400</delta_ts>
            <desc>draft patch</desc>
            <filename>Bug-435463--StackOverflowError-when-compiling-generi.patch</filename>
            <type>text/plain</type>
            <size>3300</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCA4YTY0ZGJhLi45Nzg5OTBkIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC00OCw3ICs0OCw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkg
dGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVj
aWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBl
ZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1
ZzQyNzQzOGMzIiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWc0
MzU2NDMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDE0NjUgfTsKIC8vCQlU
RVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEwOTcsIC0xIH07CiAJfQpAQCAtNTIzMSw1ICs1MjMx
LDQ5IEBACiAJCX0sCiAJCW9wdGlvbnMpOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTY0Mygp
IHsKKwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJ0ZXN0L01haW4uamF2
YSIsCisJCQkicGFja2FnZSB0ZXN0O1xuIiArIAorCQkJImFic3RyYWN0IGNsYXNzIEFTVE5vZGU8
VCBleHRlbmRzIEFTVE5vZGU+IGltcGxlbWVudHMgSXRlcmFibGU8VD4ge1xuIiArIAorCQkJIglw
dWJsaWMgVCBnZXRDaGlsZChpbnQgaSkgeyByZXR1cm4gbnVsbDsgfVxuIiArIAorCQkJIn0gXG4i
ICsgCisJCQkiYWJzdHJhY3QgY2xhc3MgTGlzdDxUIGV4dGVuZHMgQVNUTm9kZT4gZXh0ZW5kcyBB
U1ROb2RlPFQ+IHsgfVxuIiArIAorCQkJImNsYXNzIEpvaW5lciB7XG4iICsgCisJCQkiCSAgcHVi
bGljIHN0YXRpYyBKb2luZXIgb24oU3RyaW5nIHNlcGFyYXRvcikge1xuIiArIAorCQkJIgkgICAg
cmV0dXJuIG51bGw7XG4iICsgCisJCQkiCSAgfVxuIiArIAorCQkJIgkgIFN0cmluZyBqb2luKEl0
ZXJhYmxlPD8+IHBhcnRzKSB7XG4iICsgCisJCQkiCQkgIHJldHVybiBcIlwiO1xuIiArIAorCQkJ
IgkgIH1cbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiY2xhc3MgQXN0RnVuY3Rpb25zIHtcbiIgKyAK
KwkJCSIJICBwdWJsaWMgc3RhdGljIDxUIGV4dGVuZHMgQVNUTm9kZTw/Pj4gRnVuY3Rpb248VCwg
U3RyaW5nPiBwcmV0dHlQcmludCgpIHtcbiIgKyAKKwkJCSIJCSAgcmV0dXJuIG51bGw7XG4iICsg
CisJCQkiCSAgfVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJjbGFzcyBJdGVyYWJsZXMge1xuIiAr
IAorCQkJIglwdWJsaWMgc3RhdGljIDxGLCBUPiBJdGVyYWJsZTxUPiB0cmFuc2Zvcm0oZmluYWwg
SXRlcmFibGU8Rj4gZnJvbUl0ZXJhYmxlLFxuIiArIAorCQkJIgkJICAgICAgZmluYWwgRnVuY3Rp
b248PyBzdXBlciBGLCA/IGV4dGVuZHMgVD4gZnVuY3Rpb24pIHtcbiIgKyAKKwkJCSIJCXJldHVy
biBudWxsO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIiArIAorCQkJImludGVyZmFjZSBG
dW5jdGlvbjxGLCBUPiB7XG4iICsgCisJCQkiCSBUIGFwcGx5KEYgaW5wdXQpO1xuIiArIAorCQkJ
In1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgTWFpbiB7XG4iICsgCisJCQkiXG4iICsgCisJCQki
CSAgU3RyaW5nIHRlc3QoQVNUTm9kZTw/PiBub2RlLCBBU1ROb2RlIHJhd05vZGUpIHtcbiIgKyAK
KwkJCSIJCXJhd05vZGUuZ2V0Q2hpbGQoMCk7IFxuIiArIAorCQkJIgkgICAgXG4iICsgCisJCQki
ICAgICAgICBAU3VwcHJlc3NXYXJuaW5ncyhcInVuY2hlY2tlZFwiKVxuIiArIAorCQkJIiAgICAg
ICAgTGlzdDw/IGV4dGVuZHMgQVNUTm9kZTw/Pj4gbGlzdCA9IChMaXN0PD8gZXh0ZW5kcyBBU1RO
b2RlPD8+Pikgbm9kZTtcbiIgKyAKKwkJCSIgICAgICAgIHJldHVybiBKb2luZXIub24oXCIsIFwi
KS5qb2luKEl0ZXJhYmxlcy50cmFuc2Zvcm0obGlzdCwgQXN0RnVuY3Rpb25zLnByZXR0eVByaW50
KCkpKTtcbiIgKyAKKwkJCSIJICB9XG4iICsgCisJCQkiXG4iICsgCisJCQkifVxuIgorCQl9KTsK
K30KIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCmluZGV4IGVkNzhlZDQuLjQyN2E5Mjcg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKQEAgLTE5NSw2ICsxOTUsMTIgQEAKIAkJdGhp
cy5hcmd1bWVudHMgPSB0eXBlQXJndW1lbnRzOwogCX0KIAkKKwlAT3ZlcnJpZGUKKwlUeXBlQmlu
ZGluZyBzdWJzdGl0dXRlSW5mZXJlbmNlVmFyaWFibGUoSW5mZXJlbmNlVmFyaWFibGUgdmFyLCBU
eXBlQmluZGluZyBzdWJzdGl0dXRlVHlwZSkgeworCQkvLyBORVZFUiBzdWJzdGl0dXRlIHRoZSB0
eXBlIGFyZ3VtZW50cyBvZiBhIHJhdyB0eXBlCisJCXJldHVybiB0aGlzOworCX0KKwogCXB1Ymxp
YyBNZXRob2RCaW5kaW5nIGdldFNpbmdsZUFic3RyYWN0TWV0aG9kKFNjb3BlIHNjb3BlLCBib29s
ZWFuIHJlcGxhY2VXaWxkY2FyZHMpIHsKIAkJaW50IGluZGV4ID0gcmVwbGFjZVdpbGRjYXJkcyA/
IDAgOiAxOwogCQlpZiAodGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCAhPSBudWxsKSB7
</data>

          </attachment>
      

    </bug>

</bugzilla>