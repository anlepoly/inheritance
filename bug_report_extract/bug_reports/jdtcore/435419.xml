<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435419</bug_id>
          
          <creation_ts>2014-05-21 11:54:00 -0400</creation_ts>
          <short_desc>Instantiating needs outer constructor</short_desc>
          <delta_ts>2014-08-06 01:15:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="valentin Mising name">intellij</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63104"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2405020</commentid>
    <comment_count>0</comment_count>
    <who name="valentin Mising name">intellij</who>
    <bug_when>2014-05-21 11:54:47 -0400</bug_when>
    <thetext>Eclipse Version: Kepler Service Release 2
Build id: 20140224-0627

I am interested to know why new CompositeStatement() and new Expr2() {} can be created at lines 17 and 31 but not at line 40. 


import java.util.ArrayList;
 
public class Demo {
       
        static class ExprFactoryList extends ArrayList&lt;Object&gt; {
               
                class Expr {}
                class Expr2 extends Expr {}
 
        }
       
        final static ExprFactoryList arith =  new ExprFactoryList() {
 
                {
                        add(new Object() {public Expr generate() {return new Expr() {};} }); // OK
                        add(new Object() {public Expr generate() {return new Expr2() {};} }); // Ok
                }
               
        };
       
        final static ExprFactoryList statementFactory =  new ExprFactoryList() {
               
                class Statement extends Expr {}
               
                void m() {
                       
                        add(new Object() {
                                public void generate() {
                                        new Statement(){}; // OK
                                }
                        });
                }
               
                {
                        add (new Statement()); // OK
                       
                        add(new Object() {
                                public void generate() {
                                        new Statement(); // OK
                                       
                                        // No enclosing instance of type new
                                        // Demo.ExprFactoryList(){} is accessible to invoke the
                                        // super constructor. Must define a constructor and
                                        // explicitly qualify its super constructor invocation with
                                        // an instance of new Demo.ExprFactoryList(){} (e.g.
                                        // x.super() where x is an instance of new
                                        // Demo.ExprFactoryList(){}).
                                        new Statement(){}; // cannot compile
                                       
                                }
                        });
                       
                }
               
        };
       
}

See formatted http://pastebin.com/61gyGE02
I would be surprised if this is not a bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405021</commentid>
    <comment_count>1</comment_count>
    <who name="valentin Mising name">intellij</who>
    <bug_when>2014-05-21 11:57:08 -0400</bug_when>
    <thetext>See formatted http://pastebin.com/61gyGE02

I am interested to know why new Expr2() {} can be created at lines 17, 30 and 36 but not at line 49.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405023</commentid>
    <comment_count>2</comment_count>
    <who name="valentin Mising name">intellij</who>
    <bug_when>2014-05-21 12:03:24 -0400</bug_when>
    <thetext>I can even call the initialization function m() from the initializer and it succeeds. Why should I do that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405030</commentid>
    <comment_count>3</comment_count>
    <who name="valentin Mising name">intellij</who>
    <bug_when>2014-05-21 12:17:01 -0400</bug_when>
    <thetext>it compiles in javac. So, I am sure that it is jdt bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405818</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:20:36 -0400</bug_when>
    <thetext>Thanks for the report.

(In reply to valentin Mising name from comment #3)
&gt; it compiles in javac. So, I am sure that it is jdt bug.

Sorry, but this conclusion definitely is premature :)

But I agree that the error looks fishy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2417138</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-15 12:48:58 -0400</bug_when>
    <thetext>putting on our radar, anyone?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433922</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-07-31 00:40:53 -0400</bug_when>
    <thetext>My contribution for this defect fix complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433923</commentid>
    <comment_count>7</comment_count>
      <attachid>245566</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-07-31 00:42:03 -0400</bug_when>
    <thetext>Created attachment 245566
Proposed fix and test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433924</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-07-31 00:53:33 -0400</bug_when>
    <thetext>The superclass enclosing instance argument is not added for the anonymous type because the enclosing type of the super class is a local member type. Member types are processed after fields in TypeDeclaration.internalAnalyseCode() because of which the synthetic field in the super class binding (which we are looking for) is not added yet. Solution is to include local member types in this check
if (nestedType.isAnonymousType()) {
		ReferenceBinding superclassBinding = (ReferenceBinding)nestedType.superclass.erasure();
		if (superclassBinding.enclosingType() != null &amp;&amp; !superclassBinding.isStatic()) {
			if (!superclassBinding.isLocalType()
					|| ((NestedTypeBinding)superclassBinding).getSyntheticField(superclassBinding.enclosingType(), true) != null
+					|| superclassBinding.isMemberType()){
				nestedType.addSyntheticArgument(superclassBinding.enclosingType());
			}
		}
The problem still exists when the super type is non anonymous though, for the same reason as bug 373371 - access to enclosing instance is denied in ExplicitConstructorCall.
So, this would still fail

class J {
	J (Object o) {
		
	}
}
class K extends J {
	class L extends K {
		L () {
			super(new K(null));
		}
	}

	L field = new L(){};

	K(Object e) {
		super(e);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433925</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-07-31 00:54:19 -0400</bug_when>
    <thetext>All tests pass, Srikanth, please review</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435062</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-04 04:29:23 -0400</bug_when>
    <thetext>Thanks for the patch Sasi, Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c19daf1ed93619cb99af0ef6ce7677c1f06cd801</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436057</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-06 01:15:41 -0400</bug_when>
    <thetext>Verified for 4.5 M1 with build I20140804-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245566</attachid>
            <date>2014-07-31 00:42:00 -0400</date>
            <delta_ts>2014-07-31 00:42:03 -0400</delta_ts>
            <desc>Proposed fix and test</desc>
            <filename>Fix-and-test-for-bug-435419.patch</filename>
            <type>text/plain</type>
            <size>4127</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0lubmVyRW11bGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW5uZXJFbXVsYXRpb25U
ZXN0LmphdmEKaW5kZXggMjRhNzY4OS4uZWYwZmQzZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vSW5uZXJFbXVsYXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW5uZXJFbXVsYXRpb25UZXN0LmphdmEKQEAgLTEsNSArMSw1
IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDEz
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDE0
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdApAQCAtNjk0Myw3ICs2OTQzLDUxIEBACiAJCQl9LAogCQkJIkVuY2xvc2luZyxDb250ZXh0
LENvbnRleHQiKTsKIH0KLQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzNTQxOSBJbnN0YW50aWF0aW5nIG5lZWRzIG91dGVyIGNvbnN0cnVjdG9yCitw
dWJsaWMgdm9pZCB0ZXN0MTc2KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiRGVtby5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtc
biIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgRGVtbyB7XG4iICsgCisJCQkiICAgICAgICBzdGF0aWMg
Y2xhc3MgRXhwckZhY3RvcnlMaXN0IGV4dGVuZHMgQXJyYXlMaXN0IHtcbiIgKyAKKwkJCSIgICAg
ICAgICAgICAgICAgY2xhc3MgRXhwciB7fVxuIiArIAorCQkJIiAgICAgICAgICAgICAgICBjbGFz
cyBFeHByMiBleHRlbmRzIEV4cHIge31cbiIgKyAKKwkJCSIgICAgICAgIH1cbiIgKyAKKwkJCSIg
ICAgICAgIGZpbmFsIHN0YXRpYyBFeHByRmFjdG9yeUxpc3QgYXJpdGggPSAgbmV3IEV4cHJGYWN0
b3J5TGlzdCgpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAge1xuIiArIAorCQkJIiAgICAg
ICAgICAgICAgICAgICAgICAgIGFkZChuZXcgT2JqZWN0KCkge3B1YmxpYyBFeHByIGdlbmVyYXRl
KCkge3JldHVybiBuZXcgRXhwcigpIHt9O30gfSk7IC8vIE9LXG4iICsgCisJCQkiICAgICAgICAg
ICAgICAgICAgICAgICAgYWRkKG5ldyBPYmplY3QoKSB7cHVibGljIEV4cHIgZ2VuZXJhdGUoKSB7
cmV0dXJuIG5ldyBFeHByMigpIHt9O30gfSk7IC8vIE9rXG4iICsgCisJCQkiICAgICAgICAgICAg
ICAgIH1cbiIgKyAKKwkJCSIgICAgICAgIH07XG4iICsgCisJCQkiICAgICAgICBmaW5hbCBzdGF0
aWMgRXhwckZhY3RvcnlMaXN0IHN0YXRlbWVudEZhY3RvcnkgPSAgbmV3IEV4cHJGYWN0b3J5TGlz
dCgpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgY2xhc3MgU3RhdGVtZW50IGV4dGVuZHMg
RXhwciB7fVxuIiArIAorCQkJIiAgICAgICAgICAgICAgICB2b2lkIG0oKSB7XG4iICsgCisJCQki
ICAgICAgICAgICAgICAgICAgICAgICAgYWRkKG5ldyBPYmplY3QoKSB7XG4iICsgCisJCQkiICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdWJsaWMgdm9pZCBnZW5lcmF0ZSgpIHtcbiIg
KyAKKwkJCSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFN0YXRl
bWVudCgpe307IC8vIE9LXG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICB9XG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4iICsgCisJCQkiICAg
ICAgICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAge1xuIiArIAorCQkJIiAg
ICAgICAgICAgICAgICAgICAgICAgIGFkZCAobmV3IFN0YXRlbWVudCgpKTsgLy8gT0tcbiIgKyAK
KwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBhZGQobmV3IE9iamVjdCgpIHtcbiIgKyAKKwkJ
CSIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1YmxpYyB2b2lkIGdlbmVyYXRlKCkg
e1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcg
U3RhdGVtZW50KCk7IC8vIE9LXG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIG5ldyBTdGF0ZW1lbnQoKXt9OyAvLyBjYW5ub3QgY29tcGlsZVxuIiArIAor
CQkJIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuIiArIAorCQkJIiAgICAgICAg
ICAgICAgICAgICAgICAgIH0pO1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICB9XG4iICsgCisJ
CQkiICAgICAgICB9O1xuIiArIAorCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4o
U3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIiAgICAgICAgCURlbW8gZGVtbyA9IG5ldyBEZW1v
KCk7XG4iICsgCisJCQkiICAgICAgICAJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VTU1wiKTtc
biIgKyAKKwkJCSIgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgXG4iICsgCisJCQkifSIJCisJ
CX0sCisJCSJTVUNDRVNTIik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsK
IAlyZXR1cm4gSW5uZXJFbXVsYXRpb25UZXN0LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9UeXBlRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZURlY2xhcmF0aW9uLmph
dmEKaW5kZXggOTA1NjZhNi4uMjIzN2U0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlRGVj
bGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVEZWNsYXJhdGlvbi5qYXZhCkBAIC03
NzgsOCArNzc4LDggQEAKIAkJUmVmZXJlbmNlQmluZGluZyBzdXBlcmNsYXNzQmluZGluZyA9IChS
ZWZlcmVuY2VCaW5kaW5nKW5lc3RlZFR5cGUuc3VwZXJjbGFzcy5lcmFzdXJlKCk7CiAJCWlmIChz
dXBlcmNsYXNzQmluZGluZy5lbmNsb3NpbmdUeXBlKCkgIT0gbnVsbCAmJiAhc3VwZXJjbGFzc0Jp
bmRpbmcuaXNTdGF0aWMoKSkgewogCQkJaWYgKCFzdXBlcmNsYXNzQmluZGluZy5pc0xvY2FsVHlw
ZSgpCi0JCQkJCXx8ICgoTmVzdGVkVHlwZUJpbmRpbmcpc3VwZXJjbGFzc0JpbmRpbmcpLmdldFN5
bnRoZXRpY0ZpZWxkKHN1cGVyY2xhc3NCaW5kaW5nLmVuY2xvc2luZ1R5cGUoKSwgdHJ1ZSkgIT0g
bnVsbCl7Ci0KKwkJCQkJfHwgKChOZXN0ZWRUeXBlQmluZGluZylzdXBlcmNsYXNzQmluZGluZyku
Z2V0U3ludGhldGljRmllbGQoc3VwZXJjbGFzc0JpbmRpbmcuZW5jbG9zaW5nVHlwZSgpLCB0cnVl
KSAhPSBudWxsCisJCQkJCXx8IHN1cGVyY2xhc3NCaW5kaW5nLmlzTWVtYmVyVHlwZSgpKXsKIAkJ
CQluZXN0ZWRUeXBlLmFkZFN5bnRoZXRpY0FyZ3VtZW50KHN1cGVyY2xhc3NCaW5kaW5nLmVuY2xv
c2luZ1R5cGUoKSk7CiAJCQl9CiAJCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>