<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>390761</bug_id>
          
          <creation_ts>2012-09-30 02:32:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Incorrect error about default method clashing with another inherited method.</short_desc>
          <delta_ts>2012-10-02 01:37:58 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380501</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2165880</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-30 02:32:15 -0400</bug_when>
    <thetext>BETA_JAVA8: 

The following compiles alright with Lambda JDK8b56, but fails
to compile on Eclipse top of beta8 branch. I believe the right
behavior is to compile this fine. As Map&apos;s method replaces MapStream&apos;s
asIterable(), at X, only the more immediate method should be seen
thus eliminating any chance of a clash.

However, the current code leaves in MapStream&apos;s method also
perhaps under the influence of https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358: Essentially we should not skip the inherited method if any 
overriding version in a subclass may have a different erasure.

In the present case since Map and MapStream are isomorphic with pass-through
parameterization, it is kosher to eliminate MapStream&apos;s method.

// ----
public interface X extends Map {
}

interface Map&lt;K,V&gt; extends MapStream&lt;K, V&gt;  {
	Iterable&lt;BiValue&lt;K, V&gt;&gt; asIterable() default {
		return null;
	}
}
interface MapStream&lt;K, V&gt; {
	Iterable&lt;BiValue&lt;K, V&gt;&gt; asIterable();
}

interface BiValue&lt;T, U&gt; {
    T getKey();
    U getValue();
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165881</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-30 02:33:19 -0400</bug_when>
    <thetext>I&apos;ll take a look since Stephan is busy at JavaOne. Besides, this is causing
test failures that need to be fixed before I can release some code</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165882</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-30 03:06:51 -0400</bug_when>
    <thetext>Gee. 

MethodVerifier15.isInterfaceMethodImplemented(MethodBinding, MethodBinding, ReferenceBinding)

begins with:

	if (inheritedMethod.original() != inheritedMethod &amp;&amp; existingMethod.declaringClass.isInterface())
		return false; // must hold onto ParameterizedMethod to see if a bridge method is necessary

Must hold onto Parameterized method to see if a bridge is required is
no concern inside a method such as isInterfaceMethodImplemented.

Fix on way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165888</commentid>
    <comment_count>3</comment_count>
      <attachid>221697</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-30 05:17:16 -0400</bug_when>
    <thetext>Created attachment 221697
Plausible patch

Stephan, please take a look. This does trigger additional JRE8 related 
failures - I haven&apos;t analyzed them yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165923</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-30 12:20:46 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Gee. 
&gt; 
&gt; MethodVerifier15.isInterfaceMethodImplemented(MethodBinding, MethodBinding,
&gt; ReferenceBinding)
&gt; 
&gt; begins with:
&gt; 
&gt; 	if (inheritedMethod.original() != inheritedMethod &amp;&amp;
&gt; existingMethod.declaringClass.isInterface())
&gt; 		return false; // must hold onto ParameterizedMethod to see if a bridge
&gt; method is necessary

That&apos;s the exact location where my WIP on bug 382347 comment 6 also changes some checks. I will check your patch after the conf, ok?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165971</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-30 23:22:50 -0400</bug_when>
    <thetext>(In reply to comment #4)

&gt; That&apos;s the exact location where my WIP on bug 382347 comment 6 also changes
&gt; some checks. I will check your patch after the conf, ok?

Sounds good. In the meantime, I&apos;ll inch along.

(In reply to comment #0)

&gt; However, the current code leaves in MapStream&apos;s method also
&gt; perhaps under the influence of
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=302358: Essentially we should
&gt; not skip the inherited method if any 
&gt; overriding version in a subclass may have a different erasure.

No, the new code added for this bug is doing the right thing, but is
effectively short circuited by the check for interface type to retain
for bridge methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166284</commentid>
    <comment_count>6</comment_count>
      <attachid>221732</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-01 13:25:19 -0400</bug_when>
    <thetext>Created attachment 221732
A patch much further along

but still a few more failures to be understood. (AMT, STT)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166422</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-01 17:53:03 -0400</bug_when>
    <thetext>Are you saying the previous implementation in this area needs fixing even for 1.7-?
Otherwise, if the problem can only be triggered with default methods perhaps a more local change could succeed by just excluding default methods from this code path? 
My first naive attempts in bug 382347 came down to I think only 1 failure this way. But this naive solution may be breaking down when default methods do need some of this extra work like bridge methods..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166450</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-01 21:01:23 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Are you saying the previous implementation in this area needs fixing even
&gt; for 1.7-?

Not in practical terms. If Super#foo is completely isomorphic modulo covariance
with Class#foo then the subtypes of Class need not be exposed to Super#foo at
all. I don&apos;t think anything is &quot;broken&quot; with it being exposed until default
methods came along.

&gt; Otherwise, if the problem can only be triggered with default methods perhaps
&gt; a more local change could succeed by just excluding default methods from
&gt; this code path? 

I agree with your suggestion. My patch is still leaving out super&apos;s
method in some cases where for some reason *other* than bridge methods
resulting in failures - It may not worth trying to nail this semantics
precisely.

&gt; My first naive attempts in bug 382347 came down to I think only 1 failure
&gt; this way. But this naive solution may be breaking down when default methods
&gt; do need some of this extra work like bridge methods..

I think the really safe and local fix is to toss out my patch and introduce
a check just before emitting the new diagnostic whether one of the two methods
we are complaining against overrides the other - If there are concerns about
repeated override checks, we can introduce a cache of results computed
already for other purposes - by introducing a level of indirection.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166465</commentid>
    <comment_count>9</comment_count>
      <attachid>221755</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-02 00:00:25 -0400</bug_when>
    <thetext>Created attachment 221755
Patch under test

This takes the simpler approach outlined in last comment</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166467</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-02 01:37:58 -0400</bug_when>
    <thetext>Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ad212f198d44f12b089ac288333111d68cc2e3fe</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>221697</attachid>
            <date>2012-09-30 05:17:00 -0400</date>
            <delta_ts>2012-10-01 13:25:19 -0400</delta_ts>
            <desc>Plausible patch</desc>
            <filename>clash.patch</filename>
            <type>text/plain</type>
            <size>5686</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0RlZmF1bHRNZXRob2Rz
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNU
ZXN0LmphdmEKaW5kZXggNTA3MzNkMS4uNDYxZjU4ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKQEAgLTQyMCw0ICs0
MjAsMzUgQEAKIAkJCSJOYW1lIGNsYXNoOiBUaGUgbWV0aG9kIGZvbyhMaXN0PFN0cmluZz4pIG9m
IHR5cGUgSTMgaGFzIHRoZSBzYW1lIGVyYXN1cmUgYXMgZm9vKExpc3QpIG9mIHR5cGUgSTIgYnV0
IGRvZXMgbm90IG92ZXJyaWRlIGl0XG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJfQorCS8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTA3NjEKKwlw
dWJsaWMgdm9pZCB0ZXN0RGVmYXVsdE5vbmNsYXNoKCkgeworCQlydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIFgg
ZXh0ZW5kcyBNYXA8U3RyaW5nLCBPYmplY3Q+IHtcbiIgKworCQkJCSIgICBab3JrIHo7XG4iICsK
KwkJCQkifVxuIiArCisJCQkJIlxuIiArCisJCQkJImludGVyZmFjZSBNYXA8SyxWPiBleHRlbmRz
IE1hcFN0cmVhbTxLLCBWPiAge1xuIiArCisJCQkJIiAgIEBPdmVycmlkZVxuIiArCisJCQkJIglJ
dGVyYWJsZTxCaVZhbHVlPEssIFY+PiBhc0l0ZXJhYmxlKCkgZGVmYXVsdCB7XG4iICsKKwkJCQki
CQlyZXR1cm4gbnVsbDtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRl
cmZhY2UgTWFwU3RyZWFtPEssIFY+IHtcbiIgKworCQkJCSIJSXRlcmFibGU8QmlWYWx1ZTxLLCBW
Pj4gYXNJdGVyYWJsZSgpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJcbiIgKworCQkJCSJpbnRl
cmZhY2UgQmlWYWx1ZTxULCBVPiB7XG4iICsKKwkJCQkiICAgIFQgZ2V0S2V5KCk7XG4iICsKKwkJ
CQkiICAgIFUgZ2V0VmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0t
LS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIpXG4iICsgCisJCQki
CVpvcmsgejtcbiIgKyAKKwkJCSIJXl5eXlxuIiArIAorCQkJIlpvcmsgY2Fubm90IGJlIHJlc29s
dmVkIHRvIGEgdHlwZVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOworCX0KIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0
aG9kVmVyaWZpZXIuamF2YQppbmRleCBmMDJhYmRiLi5mNjNiZmY5IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllci5qYXZhCkBAIC03NDAsNyArNzQwLDcgQEAKIAkJCQkJLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMwMjM1OCwgc2tpcCBpbmhlcml0ZWQgbWV0
aG9kIG9ubHkgaWYgYW55IG92ZXJyaWRpbmcgdmVyc2lvbgogCQkJCQkvLyBpbiBhIHN1YmNsYXNz
IGlzIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBlcmFzdXJlIGFzIGFuIGV4aXN0aW5nIG1l
dGhvZC4KIAkJCQkJZm9yIChpbnQgZSA9IDA7IGUgPCBsZW5ndGg7IGUrKykKLQkJCQkJCWlmIChp
c0ludGVyZmFjZU1ldGhvZEltcGxlbWVudGVkKGluaGVyaXRlZE1ldGhvZCwgZXhpc3RpbmdNZXRo
b2RzW2VdLCBzdXBlclR5cGUpICYmICFjYW5PdmVycmlkaW5nTWV0aG9kRGlmZmVySW5FcmFzdXJl
KGV4aXN0aW5nTWV0aG9kc1tlXSwgaW5oZXJpdGVkTWV0aG9kKSkKKwkJCQkJCWlmIChpbmhlcml0
ZWRNZXRob2RFZmZlY3RpdmVseVJlcGxhY2VkKGluaGVyaXRlZE1ldGhvZCwgZXhpc3RpbmdNZXRo
b2RzW2VdLCBzdXBlclR5cGUpKQogCQkJCQkJCWNvbnRpbnVlIG5leHRNZXRob2Q7IC8vIHNraXAg
aW50ZXJmYWNlIG1ldGhvZCB3aXRoIHRoZSBzYW1lIHNpZ25hdHVyZSBpZiB2aXNpYmxlIHRvIGl0
cyBkZWNsYXJpbmdDbGFzcwogCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGV4aXN0aW5nTWV0aG9kcywg
MCwgZXhpc3RpbmdNZXRob2RzID0gbmV3IE1ldGhvZEJpbmRpbmdbbGVuZ3RoICsgMV0sIDAsIGxl
bmd0aCk7CiAJCQkJCWV4aXN0aW5nTWV0aG9kc1tsZW5ndGhdID0gaW5oZXJpdGVkTWV0aG9kOwpA
QCAtODk5LDcgKzg5OSw3IEBACiAJcmV0dXJuICFuZXdNZXRob2QuaXNQcml2YXRlKCk7CQkvLyBU
aGUgaW5oZXJpdGVkTWV0aG9kIGNhbm5vdCBiZSBwcml2YXRlIHNpbmNlIGl0IHdvdWxkIG5vdCBi
ZSB2aXNpYmxlCiB9CiAKLWJvb2xlYW4gaXNJbnRlcmZhY2VNZXRob2RJbXBsZW1lbnRlZChNZXRo
b2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9kQmluZGluZyBleGlzdGluZ01ldGhvZCwg
UmVmZXJlbmNlQmluZGluZyBzdXBlclR5cGUpIHsKK2Jvb2xlYW4gaW5oZXJpdGVkTWV0aG9kRWZm
ZWN0aXZlbHlSZXBsYWNlZChNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9kQmlu
ZGluZyBleGlzdGluZ01ldGhvZCwgUmVmZXJlbmNlQmluZGluZyBzdXBlclR5cGUpIHsKIAkvLyBz
a2lwIGludGVyZmFjZSBtZXRob2Qgd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUgaWYgdmlzaWJsZSB0
byBpdHMgZGVjbGFyaW5nQ2xhc3MKIAlyZXR1cm4gYXJlUGFyYW1ldGVyc0VxdWFsKGV4aXN0aW5n
TWV0aG9kLCBpbmhlcml0ZWRNZXRob2QpICYmIGV4aXN0aW5nTWV0aG9kLmRlY2xhcmluZ0NsYXNz
LmltcGxlbWVudHNJbnRlcmZhY2Uoc3VwZXJUeXBlLCB0cnVlKTsKIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllcjE1LmphdmEKaW5kZXggOWMwMzBlYy4uNmFjNzE1NyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllcjE1LmphdmEKQEAgLTY1MCwyMCArNjUwLDYgQEAKIAkJCQkJY29udGludWU7IC8vIGJv
dGggaW5oZXJpdGVkIG1ldGhvZHMgbWF0Y2hlZCB0aGUgc2FtZSBjdXJyZW50TWV0aG9kCiAJCQkJ
aWYgKGNhblNraXBJbmhlcml0ZWRNZXRob2RzKGluaGVyaXRlZE1ldGhvZCwgb3RoZXJJbmhlcml0
ZWRNZXRob2QpKQogCQkJCQljb250aW51ZTsKLQkJCQkvLyBTa2lwIHRoZSBvdGhlckluaGVyaXRl
ZE1ldGhvZCBpZiBpdCBpcyBjb21wbGV0ZWx5IHJlcGxhY2VkIGJ5IGluaGVyaXRlZE1ldGhvZAot
CQkJCS8vIFRoaXMgZWxpbWluYXRpb24gdXNlZCB0byBoYXBwZW4gcmF0aGVyIGVhZ2VybHkgaW4g
Y29tcHV0ZUluaGVyaXRlZE1ldGhvZHMgc3RlcAotCQkJCS8vIGl0c2VsZiBlYXJsaWVyLiAoaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMwMjM1OCkKLQkJCQlp
ZiAoaW5oZXJpdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzICE9IG90aGVySW5oZXJpdGVkTWV0aG9k
LmRlY2xhcmluZ0NsYXNzKSB7Ci0JCQkJCWlmIChvdGhlckluaGVyaXRlZE1ldGhvZC5kZWNsYXJp
bmdDbGFzcy5pc0ludGVyZmFjZSgpKSB7Ci0JCQkJCQlpZiAoaXNJbnRlcmZhY2VNZXRob2RJbXBs
ZW1lbnRlZChvdGhlckluaGVyaXRlZE1ldGhvZCwgaW5oZXJpdGVkTWV0aG9kLCBvdGhlckluaGVy
aXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcykpIHsKLQkJCQkJCQlza2lwW2pdID0gdHJ1ZTsKLQkJ
CQkJCQljb250aW51ZTsKLQkJCQkJCX0KLQkJCQkJfSBlbHNlIGlmIChhcmVNZXRob2RzQ29tcGF0
aWJsZShpbmhlcml0ZWRNZXRob2QsIG90aGVySW5oZXJpdGVkTWV0aG9kKSkgewotCQkJCQkJc2tp
cFtqXSA9IHRydWU7Ci0JCQkJCQljb250aW51ZTsKLQkJCQkJfQotCQkJCX0KIAkJCQlvdGhlcklu
aGVyaXRlZE1ldGhvZCA9IGNvbXB1dGVTdWJzdGl0dXRlTWV0aG9kKG90aGVySW5oZXJpdGVkTWV0
aG9kLCBpbmhlcml0ZWRNZXRob2QpOwogCQkJCWlmIChvdGhlckluaGVyaXRlZE1ldGhvZCAhPSBu
dWxsKSB7CiAJCQkJCWlmIChpc1N1YnN0aXR1dGVQYXJhbWV0ZXJTdWJzaWduYXR1cmUoaW5oZXJp
dGVkTWV0aG9kLCBvdGhlckluaGVyaXRlZE1ldGhvZCkpIHsKQEAgLTk4MSw5ICs5NjcsMTEgQEAK
IAl9CiB9CiAvLyBjYXZlYXQ6IHJldHVybnMgZmFsc2UgaWYgYSBtZXRob2QgaXMgaW1wbGVtZW50
ZWQgdGhhdCBuZWVkcyBhIGJyaWRnZSBtZXRob2QKLWJvb2xlYW4gaXNJbnRlcmZhY2VNZXRob2RJ
bXBsZW1lbnRlZChNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9kQmluZGluZyBl
eGlzdGluZ01ldGhvZCwgUmVmZXJlbmNlQmluZGluZyBzdXBlclR5cGUpIHsKLQlpZiAoaW5oZXJp
dGVkTWV0aG9kLm9yaWdpbmFsKCkgIT0gaW5oZXJpdGVkTWV0aG9kICYmIGV4aXN0aW5nTWV0aG9k
LmRlY2xhcmluZ0NsYXNzLmlzSW50ZXJmYWNlKCkpCi0JCXJldHVybiBmYWxzZTsgLy8gbXVzdCBo
b2xkIG9udG8gUGFyYW1ldGVyaXplZE1ldGhvZCB0byBzZWUgaWYgYSBicmlkZ2UgbWV0aG9kIGlz
IG5lY2Vzc2FyeQorYm9vbGVhbiBpbmhlcml0ZWRNZXRob2RFZmZlY3RpdmVseVJlcGxhY2VkKE1l
dGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0aG9kLCBNZXRob2RCaW5kaW5nIGV4aXN0aW5nTWV0aG9k
LCBSZWZlcmVuY2VCaW5kaW5nIHN1cGVyVHlwZSkgeworCQorCSBpZiAoY2FuT3ZlcnJpZGluZ01l
dGhvZERpZmZlckluRXJhc3VyZShleGlzdGluZ01ldGhvZCwgaW5oZXJpdGVkTWV0aG9kKSkgewor
CQkgcmV0dXJuIGZhbHNlOyAgLy8gbWF5IG5lZWQgYSBicmlkZ2UuCisJIH0KIAogCWluaGVyaXRl
ZE1ldGhvZCA9IGNvbXB1dGVTdWJzdGl0dXRlTWV0aG9kKGluaGVyaXRlZE1ldGhvZCwgZXhpc3Rp
bmdNZXRob2QpOwogCXJldHVybiBpbmhlcml0ZWRNZXRob2QgIT0gbnVsbA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>221732</attachid>
            <date>2012-10-01 13:25:00 -0400</date>
            <delta_ts>2012-10-02 01:36:52 -0400</delta_ts>
            <desc>A patch much further along</desc>
            <filename>stuff.patch</filename>
            <type>text/plain</type>
            <size>8920</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0RlZmF1bHRNZXRob2Rz
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNU
ZXN0LmphdmEKaW5kZXggNTA3MzNkMS4uNDYxZjU4ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKQEAgLTQyMCw0ICs0
MjAsMzUgQEAKIAkJCSJOYW1lIGNsYXNoOiBUaGUgbWV0aG9kIGZvbyhMaXN0PFN0cmluZz4pIG9m
IHR5cGUgSTMgaGFzIHRoZSBzYW1lIGVyYXN1cmUgYXMgZm9vKExpc3QpIG9mIHR5cGUgSTIgYnV0
IGRvZXMgbm90IG92ZXJyaWRlIGl0XG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJfQorCS8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTA3NjEKKwlw
dWJsaWMgdm9pZCB0ZXN0RGVmYXVsdE5vbmNsYXNoKCkgeworCQlydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIFgg
ZXh0ZW5kcyBNYXA8U3RyaW5nLCBPYmplY3Q+IHtcbiIgKworCQkJCSIgICBab3JrIHo7XG4iICsK
KwkJCQkifVxuIiArCisJCQkJIlxuIiArCisJCQkJImludGVyZmFjZSBNYXA8SyxWPiBleHRlbmRz
IE1hcFN0cmVhbTxLLCBWPiAge1xuIiArCisJCQkJIiAgIEBPdmVycmlkZVxuIiArCisJCQkJIglJ
dGVyYWJsZTxCaVZhbHVlPEssIFY+PiBhc0l0ZXJhYmxlKCkgZGVmYXVsdCB7XG4iICsKKwkJCQki
CQlyZXR1cm4gbnVsbDtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRl
cmZhY2UgTWFwU3RyZWFtPEssIFY+IHtcbiIgKworCQkJCSIJSXRlcmFibGU8QmlWYWx1ZTxLLCBW
Pj4gYXNJdGVyYWJsZSgpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJcbiIgKworCQkJCSJpbnRl
cmZhY2UgQmlWYWx1ZTxULCBVPiB7XG4iICsKKwkJCQkiICAgIFQgZ2V0S2V5KCk7XG4iICsKKwkJ
CQkiICAgIFUgZ2V0VmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0t
LS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIpXG4iICsgCisJCQki
CVpvcmsgejtcbiIgKyAKKwkJCSIJXl5eXlxuIiArIAorCQkJIlpvcmsgY2Fubm90IGJlIHJlc29s
dmVkIHRvIGEgdHlwZVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOworCX0KIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0
aG9kVmVyaWZpZXIuamF2YQppbmRleCBmMDJhYmRiLi5iZjI2ZGRlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllci5qYXZhCkBAIC02NTUsNyArNjU1LDcgQEAKIAkJCQkJTWV0aG9kQmluZGluZyBleGlz
dGluZ01ldGhvZCA9IGV4aXN0aW5nTWV0aG9kc1tpXTsKIAkJCQkJLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMwMjM1OCwgc2tpcCBpbmhlcml0ZWQgbWV0
aG9kIG9ubHkgaWYgYW55IG92ZXJyaWRpbmcgdmVyc2lvbgogCQkJCQkvLyBpbiBhIHN1YmNsYXNz
IGlzIGd1YXJhbnRlZWQgdG8gaGF2ZSB0aGUgc2FtZSBlcmFzdXJlIGFzIGFuIGV4aXN0aW5nIG1l
dGhvZC4KLQkJCQkJaWYgKGV4aXN0aW5nTWV0aG9kLmRlY2xhcmluZ0NsYXNzICE9IGluaGVyaXRl
ZE1ldGhvZC5kZWNsYXJpbmdDbGFzcyAmJiBhcmVNZXRob2RzQ29tcGF0aWJsZShleGlzdGluZ01l
dGhvZCwgaW5oZXJpdGVkTWV0aG9kKSAmJiAhY2FuT3ZlcnJpZGluZ01ldGhvZERpZmZlckluRXJh
c3VyZShleGlzdGluZ01ldGhvZCwgaW5oZXJpdGVkTWV0aG9kKSkgeworCQkJCQlpZiAoZXhpc3Rp
bmdNZXRob2QuZGVjbGFyaW5nQ2xhc3MgIT0gaW5oZXJpdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNz
ICYmIGFyZU1ldGhvZHNDb21wYXRpYmxlKGV4aXN0aW5nTWV0aG9kLCBpbmhlcml0ZWRNZXRob2Qp
ICYmIG92ZXJyaWRpbmdNZXRob2RDYW5ub3REaWZmZXJJbkVyYXN1cmUoZXhpc3RpbmdNZXRob2Qs
IGluaGVyaXRlZE1ldGhvZCkpIHsKIAkJCQkJCWlmIChpbmhlcml0ZWRNZXRob2QuaXNEZWZhdWx0
KCkpIHsKIAkJCQkJCQlpZiAoaW5oZXJpdGVkTWV0aG9kLmlzQWJzdHJhY3QoKSkgewogCQkJCQkJ
CQljaGVja1BhY2thZ2VQcml2YXRlQWJzdHJhY3RNZXRob2QoaW5oZXJpdGVkTWV0aG9kKTsKQEAg
LTc0MCw3ICs3NDAsNyBAQAogCQkJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzAyMzU4LCBza2lwIGluaGVyaXRlZCBtZXRob2Qgb25seSBpZiBhbnkg
b3ZlcnJpZGluZyB2ZXJzaW9uCiAJCQkJCS8vIGluIGEgc3ViY2xhc3MgaXMgZ3VhcmFudGVlZCB0
byBoYXZlIHRoZSBzYW1lIGVyYXN1cmUgYXMgYW4gZXhpc3RpbmcgbWV0aG9kLgogCQkJCQlmb3Ig
KGludCBlID0gMDsgZSA8IGxlbmd0aDsgZSsrKQotCQkJCQkJaWYgKGlzSW50ZXJmYWNlTWV0aG9k
SW1wbGVtZW50ZWQoaW5oZXJpdGVkTWV0aG9kLCBleGlzdGluZ01ldGhvZHNbZV0sIHN1cGVyVHlw
ZSkgJiYgIWNhbk92ZXJyaWRpbmdNZXRob2REaWZmZXJJbkVyYXN1cmUoZXhpc3RpbmdNZXRob2Rz
W2VdLCBpbmhlcml0ZWRNZXRob2QpKQorCQkJCQkJaWYgKGluaGVyaXRlZE1ldGhvZEVmZmVjdGl2
ZWx5UmVwbGFjZWQoaW5oZXJpdGVkTWV0aG9kLCBleGlzdGluZ01ldGhvZHNbZV0sIHN1cGVyVHlw
ZSkpCiAJCQkJCQkJY29udGludWUgbmV4dE1ldGhvZDsgLy8gc2tpcCBpbnRlcmZhY2UgbWV0aG9k
IHdpdGggdGhlIHNhbWUgc2lnbmF0dXJlIGlmIHZpc2libGUgdG8gaXRzIGRlY2xhcmluZ0NsYXNz
CiAJCQkJCVN5c3RlbS5hcnJheWNvcHkoZXhpc3RpbmdNZXRob2RzLCAwLCBleGlzdGluZ01ldGhv
ZHMgPSBuZXcgTWV0aG9kQmluZGluZ1tsZW5ndGggKyAxXSwgMCwgbGVuZ3RoKTsKIAkJCQkJZXhp
c3RpbmdNZXRob2RzW2xlbmd0aF0gPSBpbmhlcml0ZWRNZXRob2Q7CkBAIC03NTMsOCArNzUzLDgg
QEAKIAogLy8gR2l2ZW4gYG92ZXJyaWRpbmdNZXRob2QnIHdoaWNoIG92ZXJyaWRlcyBgaW5oZXJp
dGVkTWV0aG9kJyBhbnN3ZXIgd2hldGhlciBzb21lIHN1YmNsYXNzIG1ldGhvZCB0aGF0CiAvLyBk
aWZmZXJzIGluIGVyYXN1cmUgZnJvbSBvdmVycmlkaW5nTWV0aG9kIGNvdWxkIG92ZXJyaWRlIGBp
bmhlcml0ZWRNZXRob2QnCi1wcm90ZWN0ZWQgYm9vbGVhbiBjYW5PdmVycmlkaW5nTWV0aG9kRGlm
ZmVySW5FcmFzdXJlKE1ldGhvZEJpbmRpbmcgb3ZlcnJpZGluZ01ldGhvZCwgTWV0aG9kQmluZGlu
ZyBpbmhlcml0ZWRNZXRob2QpIHsKLQlyZXR1cm4gZmFsc2U7ICAgLy8gdGhlIGNhc2UgZm9yIDw9
IDEuNCAgKGNhbm5vdCBkaWZmZXIpCitwcm90ZWN0ZWQgYm9vbGVhbiBvdmVycmlkaW5nTWV0aG9k
Q2Fubm90RGlmZmVySW5FcmFzdXJlKE1ldGhvZEJpbmRpbmcgb3ZlcnJpZGluZ01ldGhvZCwgTWV0
aG9kQmluZGluZyBpbmhlcml0ZWRNZXRob2QpIHsKKwlyZXR1cm4gdHJ1ZTsgICAvLyB0aGUgY2Fz
ZSBmb3IgPD0gMS40ICAoY2Fubm90IGRpZmZlcikKIH0KIHZvaWQgY29tcHV0ZU1ldGhvZHMoKSB7
CiAJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSB0aGlzLnR5cGUubWV0aG9kcygpOwpAQCAtODk5
LDcgKzg5OSw3IEBACiAJcmV0dXJuICFuZXdNZXRob2QuaXNQcml2YXRlKCk7CQkvLyBUaGUgaW5o
ZXJpdGVkTWV0aG9kIGNhbm5vdCBiZSBwcml2YXRlIHNpbmNlIGl0IHdvdWxkIG5vdCBiZSB2aXNp
YmxlCiB9CiAKLWJvb2xlYW4gaXNJbnRlcmZhY2VNZXRob2RJbXBsZW1lbnRlZChNZXRob2RCaW5k
aW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9kQmluZGluZyBleGlzdGluZ01ldGhvZCwgUmVmZXJl
bmNlQmluZGluZyBzdXBlclR5cGUpIHsKK2Jvb2xlYW4gaW5oZXJpdGVkTWV0aG9kRWZmZWN0aXZl
bHlSZXBsYWNlZChNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9kQmluZGluZyBl
eGlzdGluZ01ldGhvZCwgUmVmZXJlbmNlQmluZGluZyBzdXBlclR5cGUpIHsKIAkvLyBza2lwIGlu
dGVyZmFjZSBtZXRob2Qgd2l0aCB0aGUgc2FtZSBzaWduYXR1cmUgaWYgdmlzaWJsZSB0byBpdHMg
ZGVjbGFyaW5nQ2xhc3MKIAlyZXR1cm4gYXJlUGFyYW1ldGVyc0VxdWFsKGV4aXN0aW5nTWV0aG9k
LCBpbmhlcml0ZWRNZXRob2QpICYmIGV4aXN0aW5nTWV0aG9kLmRlY2xhcmluZ0NsYXNzLmltcGxl
bWVudHNJbnRlcmZhY2Uoc3VwZXJUeXBlLCB0cnVlKTsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmll
cjE1LmphdmEKaW5kZXggOWMwMzBlYy4uZjNiMjZiMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9NZXRob2RWZXJpZmllcjE1LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmll
cjE1LmphdmEKQEAgLTEyNywxMiArMTI3LDEyIEBACiB9CiAvLyBHaXZlbiBgb3ZlcnJpZGluZ01l
dGhvZCcgd2hpY2ggb3ZlcnJpZGVzIGBpbmhlcml0ZWRNZXRob2QnIGFuc3dlciB3aGV0aGVyIHNv
bWUgc3ViY2xhc3MgbWV0aG9kIHRoYXQKIC8vIGRpZmZlcnMgaW4gZXJhc3VyZSBmcm9tIG92ZXJy
aWRpbmdNZXRob2QgY291bGQgb3ZlcnJpZGUgYGluaGVyaXRlZE1ldGhvZCcKLXByb3RlY3RlZCBi
b29sZWFuIGNhbk92ZXJyaWRpbmdNZXRob2REaWZmZXJJbkVyYXN1cmUoTWV0aG9kQmluZGluZyBv
dmVycmlkaW5nTWV0aG9kLCBNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCkgeworcHJvdGVj
dGVkIGJvb2xlYW4gb3ZlcnJpZGluZ01ldGhvZENhbm5vdERpZmZlckluRXJhc3VyZShNZXRob2RC
aW5kaW5nIG92ZXJyaWRpbmdNZXRob2QsIE1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0aG9kKSB7
CiAJaWYgKG92ZXJyaWRpbmdNZXRob2QuYXJlUGFyYW1ldGVyRXJhc3VyZXNFcXVhbChpbmhlcml0
ZWRNZXRob2QpKQotCQlyZXR1cm4gZmFsc2U7ICAvLyBubyBmdXJ0aGVyIGNoYW5nZSBpbiBzaWdu
YXR1cmUgaXMgcG9zc2libGUgZHVlIHRvIHBhcmFtZXRlcml6YXRpb24uCisJCXJldHVybiB0cnVl
OyAgLy8gbm8gZnVydGhlciBjaGFuZ2UgaW4gc2lnbmF0dXJlIGlzIHBvc3NpYmxlIGR1ZSB0byBw
YXJhbWV0ZXJpemF0aW9uLgogCWlmIChvdmVycmlkaW5nTWV0aG9kLmRlY2xhcmluZ0NsYXNzLmlz
UmF3VHlwZSgpKQotCQlyZXR1cm4gZmFsc2U7ICAvLyBubyBwYXJhbWV0ZXJpemF0aW9uIGlzIGhh
cHBlbmluZyBhbnl3YXlzLgotCXJldHVybiB0cnVlOworCQlyZXR1cm4gdHJ1ZTsgIC8vIG5vIHBh
cmFtZXRlcml6YXRpb24gaXMgaGFwcGVuaW5nIGFueXdheXMuCisJcmV0dXJuIGZhbHNlOwogfQog
Ym9vbGVhbiBjYW5Ta2lwSW5oZXJpdGVkTWV0aG9kcygpIHsKIAlpZiAodGhpcy50eXBlLnN1cGVy
Y2xhc3MoKSAhPSBudWxsKQpAQCAtNjUwLDIwICs2NTAsNiBAQAogCQkJCQljb250aW51ZTsgLy8g
Ym90aCBpbmhlcml0ZWQgbWV0aG9kcyBtYXRjaGVkIHRoZSBzYW1lIGN1cnJlbnRNZXRob2QKIAkJ
CQlpZiAoY2FuU2tpcEluaGVyaXRlZE1ldGhvZHMoaW5oZXJpdGVkTWV0aG9kLCBvdGhlckluaGVy
aXRlZE1ldGhvZCkpCiAJCQkJCWNvbnRpbnVlOwotCQkJCS8vIFNraXAgdGhlIG90aGVySW5oZXJp
dGVkTWV0aG9kIGlmIGl0IGlzIGNvbXBsZXRlbHkgcmVwbGFjZWQgYnkgaW5oZXJpdGVkTWV0aG9k
Ci0JCQkJLy8gVGhpcyBlbGltaW5hdGlvbiB1c2VkIHRvIGhhcHBlbiByYXRoZXIgZWFnZXJseSBp
biBjb21wdXRlSW5oZXJpdGVkTWV0aG9kcyBzdGVwCi0JCQkJLy8gaXRzZWxmIGVhcmxpZXIuICho
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzAyMzU4KQotCQkJ
CWlmIChpbmhlcml0ZWRNZXRob2QuZGVjbGFyaW5nQ2xhc3MgIT0gb3RoZXJJbmhlcml0ZWRNZXRo
b2QuZGVjbGFyaW5nQ2xhc3MpIHsKLQkJCQkJaWYgKG90aGVySW5oZXJpdGVkTWV0aG9kLmRlY2xh
cmluZ0NsYXNzLmlzSW50ZXJmYWNlKCkpIHsKLQkJCQkJCWlmIChpc0ludGVyZmFjZU1ldGhvZElt
cGxlbWVudGVkKG90aGVySW5oZXJpdGVkTWV0aG9kLCBpbmhlcml0ZWRNZXRob2QsIG90aGVySW5o
ZXJpdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzKSkgewotCQkJCQkJCXNraXBbal0gPSB0cnVlOwot
CQkJCQkJCWNvbnRpbnVlOwotCQkJCQkJfQotCQkJCQl9IGVsc2UgaWYgKGFyZU1ldGhvZHNDb21w
YXRpYmxlKGluaGVyaXRlZE1ldGhvZCwgb3RoZXJJbmhlcml0ZWRNZXRob2QpKSB7Ci0JCQkJCQlz
a2lwW2pdID0gdHJ1ZTsKLQkJCQkJCWNvbnRpbnVlOwotCQkJCQl9Ci0JCQkJfQogCQkJCW90aGVy
SW5oZXJpdGVkTWV0aG9kID0gY29tcHV0ZVN1YnN0aXR1dGVNZXRob2Qob3RoZXJJbmhlcml0ZWRN
ZXRob2QsIGluaGVyaXRlZE1ldGhvZCk7CiAJCQkJaWYgKG90aGVySW5oZXJpdGVkTWV0aG9kICE9
IG51bGwpIHsKIAkJCQkJaWYgKGlzU3Vic3RpdHV0ZVBhcmFtZXRlclN1YnNpZ25hdHVyZShpbmhl
cml0ZWRNZXRob2QsIG90aGVySW5oZXJpdGVkTWV0aG9kKSkgewpAQCAtOTgwLDE1ICs5NjYsMTQg
QEAKIAkJCXJldHVybiB0cnVlOwogCX0KIH0KLS8vIGNhdmVhdDogcmV0dXJucyBmYWxzZSBpZiBh
IG1ldGhvZCBpcyBpbXBsZW1lbnRlZCB0aGF0IG5lZWRzIGEgYnJpZGdlIG1ldGhvZAotYm9vbGVh
biBpc0ludGVyZmFjZU1ldGhvZEltcGxlbWVudGVkKE1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0
aG9kLCBNZXRob2RCaW5kaW5nIGV4aXN0aW5nTWV0aG9kLCBSZWZlcmVuY2VCaW5kaW5nIHN1cGVy
VHlwZSkgewotCWlmIChpbmhlcml0ZWRNZXRob2Qub3JpZ2luYWwoKSAhPSBpbmhlcml0ZWRNZXRo
b2QgJiYgZXhpc3RpbmdNZXRob2QuZGVjbGFyaW5nQ2xhc3MuaXNJbnRlcmZhY2UoKSkKLQkJcmV0
dXJuIGZhbHNlOyAvLyBtdXN0IGhvbGQgb250byBQYXJhbWV0ZXJpemVkTWV0aG9kIHRvIHNlZSBp
ZiBhIGJyaWRnZSBtZXRob2QgaXMgbmVjZXNzYXJ5Ci0KK2Jvb2xlYW4gaW5oZXJpdGVkTWV0aG9k
RWZmZWN0aXZlbHlSZXBsYWNlZChNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgTWV0aG9k
QmluZGluZyBleGlzdGluZ01ldGhvZCwgUmVmZXJlbmNlQmluZGluZyBzdXBlclR5cGUpIHsKKwkv
KiBHb3QgcmlkIG9mIHNvbWUgbWlzcGxhY2VkIGNvZGUgdGhhdCB3b3VsZCBzdWJ2ZXJ0IHRoZSBB
UEkgdG8gYWRkcmVzcyB0aGUgbmVlZHMgb2YgYnJpZGdlIG1ldGhvZCBnZW5lcmF0aW9uIGNvbmNl
cm5zLiAKKwkgICBJZiBhIG1ldGhvZCBpcyB0cnVseSByZXBsYWNlZCwgaXQgZG9lcyBub3QgaGF2
ZSB0byBiZSBleHBvc2VkIGF0IGFsbC4gSWYgdGhlcmUgd2FzIGFueSBjb25jZXJucyBhcm91bmQg
cHJvcGVyIGNvLXZhcmlhbnQKKwkgICByZXR1cm4gdHlwZXMsIGV4aXN0aW5nIG1ldGhvZCB3b3Vs
ZCBub3QgaGF2ZSBjb21waWxlZCBhdCBhbGwuIAorCSovCiAJaW5oZXJpdGVkTWV0aG9kID0gY29t
cHV0ZVN1YnN0aXR1dGVNZXRob2QoaW5oZXJpdGVkTWV0aG9kLCBleGlzdGluZ01ldGhvZCk7Ci0J
cmV0dXJuIGluaGVyaXRlZE1ldGhvZCAhPSBudWxsCi0JCSYmIGluaGVyaXRlZE1ldGhvZC5yZXR1
cm5UeXBlID09IGV4aXN0aW5nTWV0aG9kLnJldHVyblR5cGUgLy8ga2VlcCBhcm91bmQgdG8gcHJv
ZHVjZSBicmlkZ2UgbWV0aG9kcwotCQkmJiBkb2VzTWV0aG9kT3ZlcnJpZGUoZXhpc3RpbmdNZXRo
b2QsIGluaGVyaXRlZE1ldGhvZCk7CisJcmV0dXJuIGluaGVyaXRlZE1ldGhvZCAhPSBudWxsICYm
IGV4aXN0aW5nTWV0aG9kLmRlY2xhcmluZ0NsYXNzLmlzQ2xhc3MoKQorCQkmJiBkb2VzTWV0aG9k
T3ZlcnJpZGUoZXhpc3RpbmdNZXRob2QsIGluaGVyaXRlZE1ldGhvZCkgJiYgb3ZlcnJpZGluZ01l
dGhvZENhbm5vdERpZmZlckluRXJhc3VyZShleGlzdGluZ01ldGhvZCwgaW5oZXJpdGVkTWV0aG9k
KTsKIH0KIHB1YmxpYyBib29sZWFuIGlzTWV0aG9kU3Vic2lnbmF0dXJlKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBNZXRob2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCkgewogCWlmICghb3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbi5lcXVhbHMobWV0aG9kLnNlbGVjdG9y
LCBpbmhlcml0ZWRNZXRob2Quc2VsZWN0b3IpKQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>221755</attachid>
            <date>2012-10-02 00:00:00 -0400</date>
            <delta_ts>2012-10-02 00:00:25 -0400</delta_ts>
            <desc>Patch under test</desc>
            <filename>simplified.patch</filename>
            <type>text/plain</type>
            <size>5003</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0RlZmF1bHRNZXRob2Rz
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNU
ZXN0LmphdmEKaW5kZXggNTA3MzNkMS4uOTlkNzNkNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKQEAgLTQyMCw0ICs0
MjAsMTI4IEBACiAJCQkiTmFtZSBjbGFzaDogVGhlIG1ldGhvZCBmb28oTGlzdDxTdHJpbmc+KSBv
ZiB0eXBlIEkzIGhhcyB0aGUgc2FtZSBlcmFzdXJlIGFzIGZvbyhMaXN0KSBvZiB0eXBlIEkyIGJ1
dCBkb2VzIG5vdCBvdmVycmlkZSBpdFxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogCX0KKwkv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzkwNzYxCisJ
cHVibGljIHZvaWQgdGVzdERlZmF1bHROb25jbGFzaCgpIHsKKwkJcnVuTmVnYXRpdmVUZXN0KAor
CQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkicHVibGljIGludGVyZmFjZSBY
IGV4dGVuZHMgTWFwPFN0cmluZywgT2JqZWN0PiB7XG4iICsKKwkJCQkiICAgWm9yayB6O1xuIiAr
CisJCQkJIn1cbiIgKworCQkJCSJcbiIgKworCQkJCSJpbnRlcmZhY2UgTWFwPEssVj4gZXh0ZW5k
cyBNYXBTdHJlYW08SywgVj4gIHtcbiIgKworCQkJCSIgICBAT3ZlcnJpZGVcbiIgKworCQkJCSIJ
SXRlcmFibGU8QmlWYWx1ZTxLLCBWPj4gYXNJdGVyYWJsZSgpIGRlZmF1bHQge1xuIiArCisJCQkJ
IgkJcmV0dXJuIG51bGw7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50
ZXJmYWNlIE1hcFN0cmVhbTxLLCBWPiB7XG4iICsKKwkJCQkiCUl0ZXJhYmxlPEJpVmFsdWU8Sywg
Vj4+IGFzSXRlcmFibGUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQkiaW50
ZXJmYWNlIEJpVmFsdWU8VCwgVT4ge1xuIiArCisJCQkJIiAgICBUIGdldEtleSgpO1xuIiArCisJ
CQkJIiAgICBVIGdldFZhbHVlKCk7XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkJ
Iglab3JrIHo7XG4iICsgCisJCQkiCV5eXl5cbiIgKyAKKwkJCSJab3JrIGNhbm5vdCBiZSByZXNv
bHZlZCB0byBhIHR5cGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisJLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5MDc2MQorCXB1YmxpYyB2
b2lkIHRlc3REZWZhdWx0Tm9uY2xhc2gyKCkgeworCQlydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcg
U3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIFggZXh0ZW5k
cyBNYXA8U3RyaW5nLCBPYmplY3Q+IHtcbiIgKworCQkJCSIgICBab3JrIHo7XG4iICsKKwkJCQki
fVxuIiArCisJCQkJIlxuIiArCisJCQkJImludGVyZmFjZSBNYXA8SyxWPiBleHRlbmRzIE1hcFN0
cmVhbTxLLCBWPiAge1xuIiArCisJCQkJIiAgIEBPdmVycmlkZVxuIiArCisJCQkJIglJdGVyYWJs
ZTxCaVZhbHVlPEssIFY+PiBhc0l0ZXJhYmxlKCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJImlu
dGVyZmFjZSBNYXBTdHJlYW08SywgVj4ge1xuIiArCisJCQkJIglJdGVyYWJsZTxCaVZhbHVlPEss
IFY+PiBhc0l0ZXJhYmxlKCkgZGVmYXVsdCB7XG4iICsKKwkJCQkiICAgICAgIHJldHVybiBudWxs
O1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQkiaW50
ZXJmYWNlIEJpVmFsdWU8VCwgVT4ge1xuIiArCisJCQkJIiAgICBUIGdldEtleSgpO1xuIiArCisJ
CQkJIiAgICBVIGdldFZhbHVlKCk7XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkJ
Iglab3JrIHo7XG4iICsgCisJCQkiCV5eXl5cbiIgKyAKKwkJCSJab3JrIGNhbm5vdCBiZSByZXNv
bHZlZCB0byBhIHR5cGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisJCisJcHVibGlj
IHZvaWQgX3Rlc3REZWZhdWx0Tm9uY2xhc2gzKCkgeworCQlydW5OZWdhdGl2ZVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIFggZXh0
ZW5kcyBNYXA8U3RyaW5nLCBPYmplY3Q+IHtcbiIgKworCQkJCSIgICBab3JrIHo7XG4iICsKKwkJ
CQkifVxuIiArCisJCQkJIlxuIiArCisJCQkJImludGVyZmFjZSBNYXA8SyxWPiBleHRlbmRzIE1h
cFN0cmVhbTxLLCBWPiAge1xuIiArCisJCQkJIiAgIEBPdmVycmlkZVxuIiArCisJCQkJIglJdGVy
YWJsZTxCaVZhbHVlPEssIFY+PiBhc0l0ZXJhYmxlKCkgZGVmYXVsdCB7XG4iICsKKwkJCQkiICAg
ICAgIHJldHVybiBudWxsO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSJ9XG4iICsKKwkJCQki
aW50ZXJmYWNlIE1hcFN0cmVhbTxLLCBWPiB7XG4iICsKKwkJCQkiCUl0ZXJhYmxlPEJpVmFsdWU8
SywgVj4+IGFzSXRlcmFibGUoKSBkZWZhdWx0IHtcbiIgKworCQkJCSIgICAgICAgcmV0dXJuIG51
bGw7XG4iICsKKwkJCQkiICAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJcbiIgKworCQkJCSJp
bnRlcmZhY2UgQmlWYWx1ZTxULCBVPiB7XG4iICsKKwkJCQkiICAgIFQgZ2V0S2V5KCk7XG4iICsK
KwkJCQkiICAgIFUgZ2V0VmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0t
LS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIpXG4iICsgCisJ
CQkiCVpvcmsgejtcbiIgKyAKKwkJCSIJXl5eXlxuIiArIAorCQkJIlpvcmsgY2Fubm90IGJlIHJl
c29sdmVkIHRvIGEgdHlwZVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOworCX0KKwkvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzkwNzYxCisJcHVibGlj
IHZvaWQgdGVzdERlZmF1bHROb25jbGFzaDQoKSB7CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5l
dyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgWCBleHRl
bmRzIE1hcDxTdHJpbmcsIE9iamVjdD4ge1xuIiArCisJCQkJIiAgIFpvcmsgejtcbiIgKworCQkJ
CSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQkiaW50ZXJmYWNlIE1hcDxLLFY+IGV4dGVuZHMgTWFw
U3RyZWFtPEssIFY+ICB7XG4iICsKKwkJCQkiICAgQE92ZXJyaWRlXG4iICsKKwkJCQkiCUl0ZXJh
YmxlPEJpVmFsdWU8SywgVj4+IGFzSXRlcmFibGUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQki
aW50ZXJmYWNlIE1hcFN0cmVhbTxLLCBWPiB7XG4iICsKKwkJCQkiCUl0ZXJhYmxlPEJpVmFsdWU8
SywgVj4+IGFzSXRlcmFibGUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQki
aW50ZXJmYWNlIEJpVmFsdWU8VCwgVT4ge1xuIiArCisJCQkJIiAgICBUIGdldEtleSgpO1xuIiAr
CisJCQkJIiAgICBVIGdldFZhbHVlKCk7XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArIAor
CQkJIglab3JrIHo7XG4iICsgCisJCQkiCV5eXl5cbiIgKyAKKwkJCSJab3JrIGNhbm5vdCBiZSBy
ZXNvbHZlZCB0byBhIHR5cGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L01ldGhvZFZlcmlmaWVyLmphdmEKaW5kZXggZjAyYWJkYi4uOWRmMmM3MSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0
aG9kVmVyaWZpZXIuamF2YQpAQCAtNDQ0LDcgKzQ0NCw4IEBACiAJCQlmaW5kRXF1aXZhbGVudDog
Zm9yIChpbnQgaj0wOyBqPGxlbmd0aDsgaisrKSB7CiAJCQkJaWYgKGogPT0gaSkgY29udGludWUg
ZmluZEVxdWl2YWxlbnQ7CiAJCQkJaWYgKGlzTWV0aG9kU3Vic2lnbmF0dXJlKG1ldGhvZHNbaV0s
IG1ldGhvZHNbal0pKSB7Ci0JCQkJCXByb2JsZW1SZXBvcnRlcigpLmluaGVyaXRlZERlZmF1bHRN
ZXRob2RDb25mbGljdHNXaXRoT3RoZXJJbmhlcml0ZWQodGhpcy50eXBlLCBtZXRob2RzW2ldLCBt
ZXRob2RzW2pdKTsKKwkJCQkJaWYgKCFkb2VzTWV0aG9kT3ZlcnJpZGUobWV0aG9kc1tpXSwgbWV0
aG9kc1tqXSkgJiYgIWRvZXNNZXRob2RPdmVycmlkZShtZXRob2RzW2pdLCBtZXRob2RzW2ldKSkg
CisJCQkJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbmhlcml0ZWREZWZhdWx0TWV0aG9kQ29uZmxpY3Rz
V2l0aE90aGVySW5oZXJpdGVkKHRoaXMudHlwZSwgbWV0aG9kc1tpXSwgbWV0aG9kc1tqXSk7CiAJ
CQkJCWNvbnRpbnVlIGZpbmREZWZhdWx0TWV0aG9kOwogCQkJCX0KIAkJCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>