<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>430035</bug_id>
          
          <creation_ts>2014-03-10 14:20:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][codegen] Bridge methods are not generated for lambdas/method references</short_desc>
          <delta_ts>2014-04-07 01:44:46 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Holger Pietsch">hpietsch</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61867"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2373987</commentid>
    <comment_count>0</comment_count>
    <who name="Holger Pietsch">hpietsch</who>
    <bug_when>2014-03-10 14:20:38 -0400</bug_when>
    <thetext>import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer&lt;String&gt; {
        void accept(String t);
    }
    static void m(String s) { System.out.println(&quot;m(&quot;+s+&quot;)&quot;); } 
    public static void main(String... x) {
      StringConsumer c = LambdaWithBridge::m;
      c.accept(&quot;direct call&quot;);
      Consumer&lt;String&gt; c4b=c;
      c4b.accept(&quot;bridge method&quot;);
    }
}

and

import java.util.function.Consumer;

public class LambdaWithBridge {
    interface StringConsumer extends Consumer&lt;String&gt; {
        void accept(String t);
    }
    public static void main(String... x) {
      StringConsumer c = s-&gt;System.out.println(&quot;m(&quot;+s+&apos;)&apos;);
      c.accept(&quot;direct call&quot;);
      Consumer&lt;String&gt; c4b=c;
      c4b.accept(&quot;bridge method&quot;);
    }
}

produce

m(direct call)
Exception in thread &quot;main&quot; java.lang.AbstractMethodError: Method LambdaWithBridge$$Lambda$1.accept(Ljava/lang/Object;)V is abstract
	at LambdaWithBridge$$Lambda$1/2536472.accept(Unknown Source)
	at LambdaWithBridge.main(LambdaWithBridge.java:13)

which indicates that the necessary bridge method has not been generated. The compiler must emit code which invokes altMetafactory with FLAG_BRIDGES and the bridge method signatures. An alternative would be creating the bridge method as synthetic default method inside the interface, however, if the interface is not on the build path and originates from a non-Java8 project, the bridge method must be generated for the lambda.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373990</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 14:28:27 -0400</bug_when>
    <thetext>Thanks Holger, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374628</commentid>
    <comment_count>2</comment_count>
      <attachid>240775</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 17:14:46 -0400</bug_when>
    <thetext>Created attachment 240775
Patch under consideration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374695</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 01:16:16 -0400</bug_when>
    <thetext>Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2323f3f57de6c106bba7d022fda77960201afa72.

Thanks for the defect report and continuing to test.

Stephan, Jay, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374728</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 04:21:19 -0400</bug_when>
    <thetext>Released into BETA_JAVA8_LUNA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375224</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-12 20:01:32 -0400</bug_when>
    <thetext>I&apos;m not sure I&apos;ll find the time to thoroughly review these changes before leaving for ECNA. Some easy questions for now:

- why does a code gen issue change the error message in NLET?

- the change in ReferenceBinding: un/related? is order semantically significant? micro optimization?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375246</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 22:40:06 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)

&gt; - why does a code gen issue change the error message in NLET?

This is related to the same issue raised below:

&gt; - the change in ReferenceBinding: un/related? is order semantically
&gt; significant? micro optimization?

Prior to https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467 and its
commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=02ca7d63ca30b6951ead9edfd62cb5ea00ae7204, 

an interface&apos;s own contracts were examined and accumulated before those of
its supertype.

Thus the return value of getInterfaceAbstractContracts(scope) used to 
contain methods arranged from bottom of hierarchy to root of hierarchy 
left to right in the return value array.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467 changed the visitation
order to we end up with the orders reversed in the returned array (i.e super
methods show up first)

This means that the SAM computed is really from the super type - it didn&apos;t
matter so far because they are all anyways override equivalent and return
type substitutable.

The order mattered while I was building the solution to this bug - at least 
in the interim stages. In the final form this changes does not seem to be 
required i.e all new tests pass without this change in RB.gSAM. I&apos;ll leave
it as is though since returning the subtype method is what we should be doing.

That said, Jay reported some problems that I am looking into - may or may not
be relevant to this particular change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375262</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 00:29:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #6)

&gt; That said, Jay reported some problems that I am looking into - may or may not
&gt; be relevant to this particular change.

No, that was unconnected issue: See https://bugs.eclipse.org/bugs/show_bug.cgi?id=430241</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375544</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-13 11:02:39 -0400</bug_when>
    <thetext>Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2382203</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-30 07:20:39 -0400</bug_when>
    <thetext>I have a dangling review flag here. 

Srikanth, is a full review still needed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2385229</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-07 01:44:46 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; I have a dangling review flag here. 
&gt; 
&gt; Srikanth, is a full review still needed?

Not mandatory at this point. Thanks.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240775</attachid>
            <date>2014-03-11 17:14:00 -0400</date>
            <delta_ts>2014-03-12 01:16:34 -0400</delta_ts>
            <desc>Patch under consideration</desc>
            <filename>bridge.patch</filename>
            <type>text/plain</type>
            <size>12920</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggYjQ4N2I1ZC4uMWZkMzU0MyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTM4MTEsNiArMzgxMSw0OSBAQAogCQkJfSwKIAkJCSJPSyIpOwogfQorLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMDAzNSwgWzEuOF1bY29tcGls
ZXJdW2NvZGVnZW5dIEJyaWRnZSBtZXRob2RzIGFyZSBub3QgZ2VuZXJhdGVkIGZvciBsYW1iZGFz
L21ldGhvZCByZWZlcmVuY2VzIAorcHVibGljIHZvaWQgdGVzdDQzMDAzNSgpIHsKKwl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1w
b3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25zdW1lcjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsKKwkJCQkiICAgIGludGVyZmFjZSBTdHJpbmdDb25zdW1lciBleHRlbmRzIENvbnN1
bWVyPFN0cmluZz4ge1xuIiArCisJCQkJIiAgICAgICAgdm9pZCBhY2NlcHQoU3RyaW5nIHQpO1xu
IiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZy4uLiB4KSB7XG4iICsKKwkJCQkiICAgICAgU3RyaW5nQ29uc3VtZXIgYyA9IHMtPlN5c3Rl
bS5vdXQucHJpbnRsbihcIm0oXCIrcysnKScpO1xuIiArCisJCQkJIiAgICAgIGMuYWNjZXB0KFwi
ZGlyZWN0IGNhbGxcIik7XG4iICsKKwkJCQkiICAgICAgQ29uc3VtZXI8U3RyaW5nPiBjNGI9Yztc
biIgKworCQkJCSIgICAgICBjNGIuYWNjZXB0KFwiYnJpZGdlIG1ldGhvZFwiKTtcbiIgKworCQkJ
CSIgICAgfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQkibShkaXJlY3QgY2FsbClcbiIgKyAK
KwkJCSJtKGJyaWRnZSBtZXRob2QpIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMwMDM1LCBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gQnJp
ZGdlIG1ldGhvZHMgYXJlIG5vdCBnZW5lcmF0ZWQgZm9yIGxhbWJkYXMvbWV0aG9kIHJlZmVyZW5j
ZXMgCitwdWJsaWMgdm9pZCB0ZXN0NDMwMDM1YSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAor
CQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5m
dW5jdGlvbi5Db25zdW1lcjtcbiIgKwkJCQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CQkiICAgIGludGVyZmFjZSBTdHJpbmdDb25zdW1lciBleHRlbmRzIENvbnN1bWVyPFN0cmluZz4g
e1xuIiArCisJCQkJIiAgICAgICAgdm9pZCBhY2NlcHQoU3RyaW5nIHQpO1xuIiArCisJCQkJIiAg
ICB9XG4iICsKKwkJCQkiICAgIHN0YXRpYyB2b2lkIG0oU3RyaW5nIHMpIHsgU3lzdGVtLm91dC5w
cmludGxuKFwibShcIitzK1wiKVwiKTsgfSBcbiIgKworCQkJCSIgICAgcHVibGljIHN0YXRpYyB2
b2lkIG1haW4oU3RyaW5nLi4uIHgpIHtcbiIgKworCQkJCSIgICAgICBTdHJpbmdDb25zdW1lciBj
ID0gWDo6bTtcbiIgKworCQkJCSIgICAgICBjLmFjY2VwdChcImRpcmVjdCBjYWxsXCIpO1xuIiAr
CisJCQkJIiAgICAgIENvbnN1bWVyPFN0cmluZz4gYzRiPWM7XG4iICsKKwkJCQkiICAgICAgYzRi
LmFjY2VwdChcImJyaWRnZSBtZXRob2RcIik7XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJCSJ9
XG4iCisJCQl9LAorCQkJIm0oZGlyZWN0IGNhbGwpXG4iICsgCisJCQkibShicmlkZ2UgbWV0aG9k
KSIpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIExhbWJk
YUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2YQppbmRleCBiZjdlMzBjLi43MjVlMmQ5IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZh
CkBAIC0yODgwLDExICsyODgwLDEyIEBACiAJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09m
ZnNldCsrXSA9IChieXRlKSBudW1iZXJPZkJvb3RzdHJhcHM7CiAJCWZvciAoaW50IGkgPSAwOyBp
IDwgbnVtYmVyT2ZCb290c3RyYXBzOyBpKyspIHsKIAkJCUZ1bmN0aW9uYWxFeHByZXNzaW9uIGZ1
bmN0aW9uYWwgPSAoRnVuY3Rpb25hbEV4cHJlc3Npb24pIGZ1bmN0aW9uYWxFeHByZXNzaW9uTGlz
dC5nZXQoaSk7Ci0JCQkKKwkJCU1ldGhvZEJpbmRpbmcgW10gYnJpZGdlcyA9IGZ1bmN0aW9uYWwu
Z2V0UmVxdWlyZWRCcmlkZ2VzKCk7CiAJCQlUeXBlQmluZGluZ1tdIG1hcmtlckludGVyZmFjZXMg
PSBudWxsOwogCQkJaWYgKGZ1bmN0aW9uYWwgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uICYm
IAogCQkJCSAgICgoKG1hcmtlckludGVyZmFjZXM9KChMYW1iZGFFeHByZXNzaW9uKWZ1bmN0aW9u
YWwpLmdldE1hcmtlckludGVyZmFjZXMoKSkgIT0gbnVsbCkgfHwKLQkJCQkgICAJKChMYW1iZGFF
eHByZXNzaW9uKWZ1bmN0aW9uYWwpLmlzU2VyaWFsaXphYmxlKSkgeworCQkJCSAgIAkoKExhbWJk
YUV4cHJlc3Npb24pZnVuY3Rpb25hbCkuaXNTZXJpYWxpemFibGUpIHx8CisJCQkJICAgCWJyaWRn
ZXMgIT0gbnVsbCkgewogCQkJCQogCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXggPSAoTGFt
YmRhRXhwcmVzc2lvbilmdW5jdGlvbmFsOwogCQkJCS8vIG1heSBuZWVkIGV2ZW4gbW9yZSBzcGFj
ZQpAQCAtMjg5Miw2ICsyODkzLDEwIEBACiAJCQkJaWYgKG1hcmtlckludGVyZmFjZXMgIT0gbnVs
bCkgewogCQkJCQkvLyAyIGZvciB0aGUgbWFya2VyIGludGVyZmFjZSBsaXN0IHNpemUgdGhlbiAy
IHBlciBtYXJrZXIgaW50ZXJmYWNlIGluZGV4CiAJCQkJCWV4dHJhU3BhY2UgKz0gKDIgKyAyICog
bWFya2VySW50ZXJmYWNlcy5sZW5ndGgpOworCQkJCX0KKwkJCQlpZiAoYnJpZGdlcyAhPSBudWxs
KSB7CisJCQkJCS8vIDIgZm9yIGJyaWRnZSBjb3VudCB0aGVuIDIgcGVyIGJyaWRnZSBtZXRob2Qg
dHlwZS4KKwkJCQkJZXh0cmFTcGFjZSArPSAoMiArIDIgKiBicmlkZ2VzLmxlbmd0aCk7CiAJCQkJ
fQogCQkJCWlmIChleHRyYVNwYWNlICsgbG9jYWxDb250ZW50c09mZnNldCA+PSB0aGlzLmNvbnRl
bnRzLmxlbmd0aCkgewogCQkJCQlyZXNpemVDb250ZW50cyhleHRyYVNwYWNlKTsKQEAgLTI5MDcs
NyArMjkxMiw4IEBACiAJCQkJCiAJCQkJLy8gdTIgbnVtX2Jvb3RzdHJhcF9hcmd1bWVudHMKIAkJ
CQl0aGlzLmNvbnRlbnRzW2xvY2FsQ29udGVudHNPZmZzZXQrK10gPSAwOwotCQkJCXRoaXMuY29u
dGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSAoNCsobWFya2VySW50ZXJmYWNl
cz09bnVsbD8wOjErbWFya2VySW50ZXJmYWNlcy5sZW5ndGgpKTsKKwkJCQl0aGlzLmNvbnRlbnRz
W2xvY2FsQ29udGVudHNPZmZzZXQrK10gPSAoYnl0ZSkgKDQgKyAobWFya2VySW50ZXJmYWNlcz09
bnVsbD8wOjErbWFya2VySW50ZXJmYWNlcy5sZW5ndGgpICsgCisJCQkJCQkgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYnJpZGdlcyA9PSBudWxsID8g
MCA6IDEgKyBicmlkZ2VzLmxlbmd0aCkpOwogCQkJCQogCQkJCWludCBmdW5jdGlvbmFsRGVzY3Jp
cHRvckluZGV4ID0gdGhpcy5jb25zdGFudFBvb2wubGl0ZXJhbEluZGV4Rm9yTWV0aG9kVHlwZShm
dW5jdGlvbmFsLmRlc2NyaXB0b3Iub3JpZ2luYWwoKS5zaWduYXR1cmUoKSk7CiAJCQkJdGhpcy5j
b250ZW50c1tsb2NhbENvbnRlbnRzT2Zmc2V0KytdID0gKGJ5dGUpIChmdW5jdGlvbmFsRGVzY3Jp
cHRvckluZGV4ID4+IDgpOwpAQCAtMjkyMiwxMyArMjkyOCwxNSBAQAogCQkJCXRoaXMuY29udGVu
dHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSAobWV0aG9kVHlwZUluZGV4ID4+IDgp
OwogCQkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSBtZXRo
b2RUeXBlSW5kZXg7CiAKLQkJCQkvLyBEb2VzIHRoaXMgYmxvY2sgaGF2ZSB0byBkZWFsIHdpdGgg
RkxBR19CUklER0U/IFdoZW4gaXMgaXQgbmVlZGVkPwogCQkJCWludCBiaXRmbGFncyA9IDA7CiAJ
CQkJaWYgKGxhbWJkYUV4LmlzU2VyaWFsaXphYmxlKSB7CiAJCQkJCWJpdGZsYWdzIHw9IENsYXNz
RmlsZUNvbnN0YW50cy5GTEFHX1NFUklBTElaQUJMRTsKIAkJCQl9CiAJCQkJaWYgKG1hcmtlcklu
dGVyZmFjZXMhPW51bGwpIHsKIAkJCQkJYml0ZmxhZ3MgfD0gQ2xhc3NGaWxlQ29uc3RhbnRzLkZM
QUdfTUFSS0VSUzsKKwkJCQl9CisJCQkJaWYgKGJyaWRnZXMgIT0gbnVsbCkgeworCQkJCQliaXRm
bGFncyB8PSBDbGFzc0ZpbGVDb25zdGFudHMuRkxBR19CUklER0VTOwogCQkJCX0KIAkJCQlpbnQg
aW5kZXhGb3JCaXRmbGFncyA9IHRoaXMuY29uc3RhbnRQb29sLmxpdGVyYWxJbmRleChiaXRmbGFn
cyk7CiAJCQkJCkBAIC0yOTQ1LDYgKzI5NTMsMTcgQEAKIAkJCQkJCXRoaXMuY29udGVudHNbbG9j
YWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKShjbGFzc1R5cGVJbmRleCk7CiAJCQkJCX0JCQkJ
CQogCQkJCX0KKwkJCQlpZiAoYnJpZGdlcyAhPSBudWxsKSB7CisJCQkJCWludCBicmlkZ2VDb3Vu
dEluZGV4ID0gIHRoaXMuY29uc3RhbnRQb29sLmxpdGVyYWxJbmRleChicmlkZ2VzLmxlbmd0aCk7
CisJCQkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSAoYnJp
ZGdlQ291bnRJbmRleD4+OCk7CisJCQkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNl
dCsrXSA9IChieXRlKSAoYnJpZGdlQ291bnRJbmRleCk7CisJCQkJCWZvciAoaW50IG0gPSAwLCBt
YXhtID0gYnJpZGdlcy5sZW5ndGg7IG0gPCBtYXhtOyBtKyspIHsKKwkJCQkJCWNoYXIgW10gYnJp
ZGdlU2lnbmF0dXJlID0gYnJpZGdlc1ttXS5zaWduYXR1cmUoKTsKKwkJCQkJCWludCBicmlkZ2VN
ZXRob2RUeXBlSW5kZXggPSB0aGlzLmNvbnN0YW50UG9vbC5saXRlcmFsSW5kZXhGb3JNZXRob2RU
eXBlKGJyaWRnZVNpZ25hdHVyZSk7CisJCQkJCQl0aGlzLmNvbnRlbnRzW2xvY2FsQ29udGVudHNP
ZmZzZXQrK10gPSAoYnl0ZSkgKGJyaWRnZU1ldGhvZFR5cGVJbmRleCA+PiA4KTsKKwkJCQkJCXRo
aXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSBicmlkZ2VNZXRob2RU
eXBlSW5kZXg7CisJCQkJCX0JCQkJCQorCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJaWYgKGluZGV4
Rm9yTWV0YUZhY3RvcnkgPT0gMCkgewogCQkJCQlpbmRleEZvck1ldGFGYWN0b3J5ID0gdGhpcy5j
b25zdGFudFBvb2wubGl0ZXJhbEluZGV4Rm9yTWV0aG9kSGFuZGxlKENsYXNzRmlsZUNvbnN0YW50
cy5NZXRob2RIYW5kbGVSZWZLaW5kSW52b2tlU3RhdGljLCBqYXZhTGFuZ0ludm9rZUxhbWJkYU1l
dGFmYWN0b3J5LCAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24u
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCBkZjMzMDBj
Li5mYTExOGQ1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0zOSw4ICsz
OSwxMSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
QXJyYXlCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuQmxvY2tTY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkNvbXBpbGF0aW9uVW5pdFNjb3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9va3VwRW52aXJv
bm1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5N
ZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuTWV0aG9kU2NvcGU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5NZXRob2RWZXJpZmllcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRUeXBlQmluZGluZzsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1SZWFzb25zOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmF3VHlwZUJpbmRp
bmc7CkBAIC0xNjgsNiArMTcxLDcgQEAKIAogCXB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVHlw
ZShCbG9ja1Njb3BlIGJsb2NrU2NvcGUpIHsKIAkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5v
dEFDb25zdGFudDsKKwkJdGhpcy5lbmNsb3NpbmdTY29wZSA9IGJsb2NrU2NvcGU7CiAJCU1ldGhv
ZEJpbmRpbmcgc2FtID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/IG51bGwgOiB0aGlzLmV4
cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChibG9ja1Njb3BlLCBhcmd1bWVudHNU
eXBlRWxpZGVkKCkpOwogCQlpZiAoc2FtID09IG51bGwpIHsKIAkJCWJsb2NrU2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudGFyZ2V0VHlwZUlzTm90QUZ1bmN0aW9uYWxJbnRlcmZhY2UodGhpcyk7CkBA
IC0yODIsNCArMjg2LDY0IEBACiAJcHVibGljIGludCBkaWFnbm9zdGljc1NvdXJjZUVuZCgpIHsK
IAkJcmV0dXJuIHRoaXMuc291cmNlRW5kOwogCX0KLX0KKworCXB1YmxpYyBNZXRob2RCaW5kaW5n
W10gZ2V0UmVxdWlyZWRCcmlkZ2VzKCkgeworCisJCWNsYXNzIEJyaWRnZUNvbGxlY3RvciB7CisJ
CQkKKwkJCU1ldGhvZEJpbmRpbmcgW10gYnJpZGdlczsKKwkJCU1ldGhvZEJpbmRpbmcgbWV0aG9k
OworCQkJY2hhciBbXSBzZWxlY3RvcjsKKwkJCUxvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50
OworCisJCQlCcmlkZ2VDb2xsZWN0b3IoUmVmZXJlbmNlQmluZGluZyBmdW5jdGlvbmFsVHlwZSwg
TWV0aG9kQmluZGluZyBtZXRob2QsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CisJ
CQkJdGhpcy5tZXRob2QgPSBtZXRob2Q7CisJCQkJdGhpcy5zZWxlY3RvciA9IG1ldGhvZC5zZWxl
Y3RvcjsKKwkJCQl0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7CisJCQkJY29sbGVjdEJy
aWRnZXMoZnVuY3Rpb25hbFR5cGUuc3VwZXJJbnRlcmZhY2VzKCkpOworCQkJfQorCQkJCisJCQl2
b2lkIGNvbGxlY3RCcmlkZ2VzKFJlZmVyZW5jZUJpbmRpbmdbXSBpbnRlcmZhY2VzKSB7CisJCQkJ
aW50IGxlbmd0aCA9IGludGVyZmFjZXMubGVuZ3RoOworCQkJCWZvciAoaW50IGkgPSAwOyBpIDwg
bGVuZ3RoOyBpKyspIHsKKwkJCQkJUmVmZXJlbmNlQmluZGluZyBzdXBlckludGVyZmFjZSA9IGlu
dGVyZmFjZXNbaV07CisJCQkJCU1ldGhvZEJpbmRpbmcgW10gbWV0aG9kcyA9IHN1cGVySW50ZXJm
YWNlLmdldE1ldGhvZHModGhpcy5zZWxlY3Rvcik7CisJCQkJCWZvciAoaW50IGogPSAwLCBjb3Vu
dCA9IG1ldGhvZHMubGVuZ3RoOyBqIDwgY291bnQ7IGorKykgeworCQkJCQkJTWV0aG9kQmluZGlu
ZyBpbmhlcml0ZWRNZXRob2QgPSBtZXRob2RzW2pdOworCQkJCQkJaWYgKE1ldGhvZFZlcmlmaWVy
LmRvZXNNZXRob2RPdmVycmlkZSh0aGlzLm1ldGhvZCwgaW5oZXJpdGVkTWV0aG9kLCB0aGlzLmVu
dmlyb25tZW50KSkKKwkJCQkJCQlpZiAoIXRoaXMubWV0aG9kLmFyZVBhcmFtZXRlckVyYXN1cmVz
RXF1YWwoaW5oZXJpdGVkTWV0aG9kLm9yaWdpbmFsKCkpKQorCQkJCQkJCQlhZGQoaW5oZXJpdGVk
TWV0aG9kLm9yaWdpbmFsKCkpOworCQkJCQl9CisJCQkJCWNvbGxlY3RCcmlkZ2VzKHN1cGVySW50
ZXJmYWNlLnN1cGVySW50ZXJmYWNlcygpKTsKKwkJCQl9CisJCQl9CisJCQl2b2lkIGFkZChNZXRo
b2RCaW5kaW5nIGluaGVyaXRlZE1ldGhvZCkgeworCQkJCWlmICh0aGlzLmJyaWRnZXMgPT0gbnVs
bCkgeworCQkJCQl0aGlzLmJyaWRnZXMgPSBuZXcgTWV0aG9kQmluZGluZ1tdIHsgaW5oZXJpdGVk
TWV0aG9kIH07CisJCQkJCXJldHVybjsKKwkJCQl9CisJCQkJaW50IGxlbmd0aCA9IHRoaXMuYnJp
ZGdlcy5sZW5ndGg7CisJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJ
CQlpZiAodGhpcy5icmlkZ2VzW2ldLmFyZVBhcmFtZXRlckVyYXN1cmVzRXF1YWwoaW5oZXJpdGVk
TWV0aG9kKSkKKwkJCQkJCXJldHVybjsKKwkJCQl9CisJCQkJU3lzdGVtLmFycmF5Y29weSh0aGlz
LmJyaWRnZXMsIDAsIHRoaXMuYnJpZGdlcyA9IG5ldyBNZXRob2RCaW5kaW5nW2xlbmd0aCArIDFd
LCAwLCBsZW5ndGgpOworCQkJCXRoaXMuYnJpZGdlc1tsZW5ndGhdID0gaW5oZXJpdGVkTWV0aG9k
OworCQkJfQorCQkJTWV0aG9kQmluZGluZyBbXSBnZXRCcmlkZ2VzICgpIHsKKwkJCQlyZXR1cm4g
dGhpcy5icmlkZ2VzOworCQkJfQorCQl9CisJCQorCQlSZWZlcmVuY2VCaW5kaW5nIGZ1bmN0aW9u
YWxUeXBlOworCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgaW5zdGFuY2VvZiBJbnRlcnNlY3Rpb25D
YXN0VHlwZUJpbmRpbmcpIHsKKwkJCWZ1bmN0aW9uYWxUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcp
ICgoSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nKXRoaXMuZXhwZWN0ZWRUeXBlKS5nZXRTQU1U
eXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOworCQl9IGVsc2UgeworCQkJZnVuY3Rpb25hbFR5cGUg
PSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5leHBlY3RlZFR5cGU7CisJCX0KKwkJcmV0dXJuIG5l
dyBCcmlkZ2VDb2xsZWN0b3IoZnVuY3Rpb25hbFR5cGUsIHRoaXMuZGVzY3JpcHRvciwgdGhpcy5l
bmNsb3NpbmdTY29wZS5lbnZpcm9ubWVudCgpKS5nZXRCcmlkZ2VzKCk7CisJfQorCWJvb2xlYW4g
cmVxdWlyZXNCcmlkZ2VzKCkgeworCQlyZXR1cm4gZ2V0UmVxdWlyZWRCcmlkZ2VzKCkgIT0gbnVs
bDsgCisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9u
LmphdmEKaW5kZXggZjQzNWZiYS4uNjVkYzM5YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEK
QEAgLTEyNTMsNyArMTI1Myw3IEBACiAJCQl9CiAJCQlAT3ZlcnJpZGUKIAkJCXB1YmxpYyBjaGFy
W10gY29tcHV0ZVVuaXF1ZUtleSgpIHsKLQkJCQlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbi50aGlz
LmRlc2NyaXB0b3IuZGVjbGFyaW5nQ2xhc3MuY29tcHV0ZVVuaXF1ZUtleSgpOworCQkJCXJldHVy
biBMYW1iZGFFeHByZXNzaW9uLnRoaXMucmVzb2x2ZWRUeXBlLmNvbXB1dGVVbmlxdWVLZXkoKTsK
IAkJCX0KIAkJCXB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKSB7CiAJCQkJU3RyaW5nQnVmZmVyIG91
dHB1dCA9IG5ldyBTdHJpbmdCdWZmZXIoIigpLT57fSBpbXBsZW1lbnRzICIpOyAvLyROT04tTkxT
LTEkCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4IDUzMjY1YTYuLmRjZTM1ZmEg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC0xODQsNyArMTg0LDkgQEAKIAkJ
cmV0dXJuICh0aGlzLmJpbmRpbmcuaXNWYXJhcmdzKCkgfHwgCiAJCQkJKGlzQ29uc3RydWN0b3JS
ZWZlcmVuY2UoKSAmJiB0aGlzLnJlY2VpdmVyVHlwZS5zeW50aGV0aWNPdXRlckxvY2FsVmFyaWFi
bGVzKCkgIT0gbnVsbCAmJiBjdXJyZW50U2NvcGUubWV0aG9kU2NvcGUoKS5pc1N0YXRpYykgfHwK
IAkJCQl0aGlzLmV4cGVjdGVkVHlwZSBpbnN0YW5jZW9mIEludGVyc2VjdGlvbkNhc3RUeXBlQmlu
ZGluZyB8fCAvLyBtYXJrZXIgaW50ZXJmYWNlcyByZXF1aXJlIGFsdGVybmF0ZSBtZXRhIGZhY3Rv
cnkuCi0JCQkJdGhpcy5leHBlY3RlZFR5cGUuZmluZFN1cGVyVHlwZU9yaWdpbmF0aW5nRnJvbShj
dXJyZW50U2NvcGUuZ2V0SmF2YUlvU2VyaWFsaXphYmxlKCkpICE9IG51bGwpOyAvLyBzZXJpYWxp
emF0aW9uIHN1cHBvcnQuCisJCQkJdGhpcy5leHBlY3RlZFR5cGUuZmluZFN1cGVyVHlwZU9yaWdp
bmF0aW5nRnJvbShjdXJyZW50U2NvcGUuZ2V0SmF2YUlvU2VyaWFsaXphYmxlKCkpICE9IG51bGwg
fHwgLy8gc2VyaWFsaXphdGlvbiBzdXBwb3J0LgorCQkJCXRoaXMucmVxdWlyZXNCcmlkZ2VzKCkp
OyAvLyBicmlkZ2VzLgorCQkvLyBUT0RPOiB3ZSBzaG91bGQgb3B0IGZvciBkaXJlY3QgY29kZSBn
ZW5lcmF0aW9uIHdoZXJldmVyIHBvc3NpYmxlLgogCX0KIAkKIAlwdWJsaWMgdm9pZCBnZW5lcmF0
ZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIENvZGVTdHJlYW0gY29kZVN0cmVhbSwgYm9v
bGVhbiB2YWx1ZVJlcXVpcmVkKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5j
ZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCmluZGV4
IDM5MTM3YTIuLjcwYmU1NWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmlu
ZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCkBAIC0x
OTc3LDYgKzE5NzcsOSBAQAogCQkJfQogCQkJaWYgKCFNZXRob2RWZXJpZmllci5pc1N1YnN0aXR1
dGVQYXJhbWV0ZXJTdWJzaWduYXR1cmUobWV0aG9kLCBvdGhlck1ldGhvZCwgZW52aXJvbm1lbnQp
IHx8ICFNZXRob2RWZXJpZmllci5hcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUobWV0aG9kLCBvdGhl
ck1ldGhvZCwgZW52aXJvbm1lbnQpKSAKIAkJCQljb250aW51ZSBuZXh0OyAKKwkJCQorCQkJaWYg
KCFNZXRob2RWZXJpZmllci5kb2VzTWV0aG9kT3ZlcnJpZGUobWV0aG9kLCBvdGhlck1ldGhvZCwg
ZW52aXJvbm1lbnQpKQorCQkJCWNvbnRpbnVlIG5leHQ7CiAJCX0KIAkJLy8gSWYgd2UgcmVhY2gg
aGVyZSwgd2UgZm91bmQgYSBtZXRob2QgdGhhdCBpcyBvdmVycmlkZSBlcXVpdmFsZW50IHdpdGgg
ZXZlcnkgb3RoZXIgbWV0aG9kIGFuZCBpcyBhbHNvIHJldHVybiB0eXBlIHN1YnN0aXR1dGFibGUu
IENvbXB1dGUga29zaGVyIGV4Y2VwdGlvbnMgbm93IC4uLgogCQlSZWZlcmVuY2VCaW5kaW5nIFtd
IGV4Y2VwdGlvbnMgPSBuZXcgUmVmZXJlbmNlQmluZGluZ1swXTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>