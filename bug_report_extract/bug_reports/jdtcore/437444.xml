<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>437444</bug_id>
          
          <creation_ts>2014-06-14 09:24:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Evaluate alternate integration between overload resolution and type inference</short_desc>
          <delta_ts>2015-04-29 16:57:24 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          <dependson>446434</dependson>
          <blocked>432605</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>abby.bader</cc>
    
    <cc>an.delbene</cc>
    
    <cc>briancribbs+eclipse</cc>
    
    <cc>cfelaco</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jack.balloon</cc>
    
    <cc>jarthana</cc>
    
    <cc>jim.painter</cc>
    
    <cc>jozefhartinger</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>saammana</cc>
    
    <cc>schoef</cc>
    
    <cc>sebastian.millies</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63586"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2416997</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-14 09:24:32 -0400</bug_when>
    <thetext>When investigating differences between javac and ecj, we can identify situation(s) where ecj finds an acceptable solution, which javac does not find, while in fact JLS does not provide an explicit path towards that solution.

This bug shall collect deviations that match the above description. Users will typically *not* complain about these, but still being more in line with JLS is desirable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2416999</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-14 10:04:03 -0400</bug_when>
    <thetext>The example from https://stackoverflow.com/questions/21905169/java8-ambiguity-with-lambdas-and-overloaded-methods demonstrates a situation where users where surprised that javac8 reports ambiguity. Ecj does *not* report this ambiguity, which is nice from a users&apos; p.o.v. but may be wrong from a JLS p.o.v.

Reporting ambiguity is avoided by our initial stanza inside Scope.mostSpecificMethodBinding, where we recheck parameterCompatibilityLevel in knowledge of substitutions performed during applicability inference.

This stanza is not mandated by JLS, but OTOH, it is required in order to establish javac compatibility for many other situations. Prominent example: bug 429490 required this stanza both for the original example as well as for bug 429490 comment 33. Other changes that lead to the current situation:
- bug 427628
- bug 428366 comment 2

Ergo: we should weed out the various reasons why we need that stanza of checks, like:
- filter out overridden methods which should never have entered the inference in the first place
- avoid ambiguity with some ad-hoc reasoning because javac doesn&apos;t report any</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453277</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 14:35:09 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; The example from
&gt; https://stackoverflow.com/questions/21905169/java8-ambiguity-with-lambdas-
&gt; and-overloaded-methods demonstrates a situation where users where surprised
&gt; that javac8 reports ambiguity. Ecj does *not* report this ambiguity, which
&gt; is nice from a users&apos; p.o.v. but may be wrong from a JLS p.o.v.
&gt; 
&gt; Reporting ambiguity is avoided by our initial stanza inside
&gt; Scope.mostSpecificMethodBinding, where we recheck
&gt; parameterCompatibilityLevel in knowledge of substitutions performed during
&gt; applicability inference.

This is creating problems for us - https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596 is an example. The materialized PGMB as well as call site arguments
have captures and what is a perfectly applicable method gets rejected :(

In that bug I also see odd captures like (IIRC) ? extends ? extends ? Type1 &amp; Type2 - does that make sense.

Problem is compounded by ICTB not implementing uncapture (yet).

ICTB is also not hooked up everywhere in isCompatibleWith and isEquivalent to etc.

What would it take to move to reusing the existing Binding.INTERSECTION_TYPE wrapped in a WildcardBinding instead of ICTB Stephan ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453278</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 14:36:30 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)

&gt; Problem is compounded by ICTB not implementing uncapture (yet).

Does not implement swapResolved either. Just things to watch for.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453392</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-17 17:54:48 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; What would it take to move to reusing the existing Binding.INTERSECTION_TYPE
&gt; wrapped in a WildcardBinding instead of ICTB Stephan ?

I see your point. Hm, originally I didn&apos;t have my stakes in ICTB, but meanwhile inference is using ICTB in some places as the canonical representation of &quot;intersection types&quot;. So, removing ICTB is slightly delicate, but I see no hard reason against.

OTOH, when wrapping such thing in a WB, what assumptions are clients making when they see a WB? We won&apos;t have meaningful values for rank and typeVariable, but could be harmless? If we set boundKind to EXTENDS, even WB.signature() could work for an intersection type.

Maybe, it&apos;s even more educating to look at what clients expect when they see Binding.INTERSECTION_TYPE? Anything wildcardish in that area? If so, that could be a killer?

If feasible, I&apos;d welcome, if we manage to reduce the number of Binding classes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453396</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-17 17:58:47 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (In reply to Stephan Herrmann from comment #1)
&gt; &gt; The example from
&gt; &gt; https://stackoverflow.com/questions/21905169/java8-ambiguity-with-lambdas-
&gt; &gt; and-overloaded-methods demonstrates a situation where users where surprised
&gt; &gt; that javac8 reports ambiguity. Ecj does *not* report this ambiguity, which
&gt; &gt; is nice from a users&apos; p.o.v. but may be wrong from a JLS p.o.v.
&gt; &gt; 
&gt; &gt; Reporting ambiguity is avoided by our initial stanza inside
&gt; &gt; Scope.mostSpecificMethodBinding, where we recheck
&gt; &gt; parameterCompatibilityLevel in knowledge of substitutions performed during
&gt; &gt; applicability inference.
&gt; 
&gt; This is creating problems for us -
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596 is an example. The
&gt; materialized PGMB as well as call site arguments
&gt; have captures and what is a perfectly applicable method gets rejected :(

but where did the PGMB get its captures from? Shouldn&apos;t those be identical to the call site arguments in this case? Could be a bug in the area of capture bounds during inference...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453422</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 20:06:20 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)

&gt; OTOH, when wrapping such thing in a WB, what assumptions are clients making
&gt; when they see a WB? We won&apos;t have meaningful values for rank and
&gt; typeVariable, but could be harmless? If we set boundKind to EXTENDS, even
&gt; WB.signature() could work for an intersection type.
&gt; 
&gt; Maybe, it&apos;s even more educating to look at what clients expect when they see
&gt; Binding.INTERSECTION_TYPE? Anything wildcardish in that area? If so, that
&gt; could be a killer?

Given a WildcardBinding with binding kind set to INTERSECTION_TYPE is what Java 7
engine uses shouldn&apos;t we expect all these concerns to be addressed already ?
Are there any special requirements for Java 8 case that you can recall off the
top of your head that ICTB has been extended to support ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453423</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 20:07:11 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)

&gt; but where did the PGMB get its captures from? Shouldn&apos;t those be identical
&gt; to the call site arguments in this case? Could be a bug in the area of
&gt; capture bounds during inference...

I&apos;ll sit down with Shankha next week and understand this in more detail and
share my findings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454121</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 05:43:57 -0400</bug_when>
    <thetext>I am curious about why inferInvocation type is split from PGMB.computeCompatibleMethod - i.e why doesn&apos;t PGMB.computeCompatibleMethod
return a fully inferred method considering target type et all, as the Java 7 
engine does ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454208</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-19 09:47:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; I am curious about why inferInvocation type is split from
&gt; PGMB.computeCompatibleMethod - i.e why doesn&apos;t PGMB.computeCompatibleMethod
&gt; return a fully inferred method considering target type et all, as the Java 7 
&gt; engine does ?

Are you questioning the split into 18.5.1 and 18.5.2?

Have you seen the argument &quot;inferenceLevel&quot; in PGMB.computeCompatibleMethod?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456541</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-25 20:37:39 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)

&gt; Have you seen the argument &quot;inferenceLevel&quot; in PGMB.computeCompatibleMethod?

Yes. 

I see that MessageSend never returns a poly type binding. I suspect, this will integrate a lot cleanly if we don&apos;t have these levels and PGMB.computeCompatibleMethod

    - where expression context defines a target type and a target type is
available or where expression context does not define a target type
        - returns a fully instantiated method on success (invocation type inferred)
        - returns null on failure.

    - where expression context defines a target type and a target type is
not available (invocation context)
       - performs applicability inference and if it fails return null.
       - if applicability inference succeeds returns a method it returns today
BUT with its return type set to PolyTypeBinding.

This would fit well with the general overload resolution scheme which is driven
off of two calls: isCompatibleWith and sIsMoreSpecific - which MessageSend would
have to implement - there was a patch I posted earlier that had infrastructure
support for these.

If this is in place, then F in Scope.java does not have to deal with inference
at all. All the various rebind methods would go away too and all the inner poly
expression resolution can happen in one place in AST.resolvePoly*

I&apos;ll see if I can get Sasi to prototype this solution and we can see what
it looks like and see if it is worth integrating. My gut feel is it will 
significantly simplify the interaction between F &amp; G and get rid of a few
bugs there.

Sasi, this would be a very nice project to work on after lambda shape analysis.
Let us discuss next week.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456946</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-27 12:22:44 -0400</bug_when>
    <thetext>Just to document how we got here: I was integrating inference with the general mechanisms of method lookup under the premise to essentially keep the 1.7- code for method lookup as is.

If you develop a second universe of the Scope.findMethod family of methods which is structurally closer to the 1.8 spec, this will certainly give a cleaner solution for 1.8 inference, too (for the price of code duplication).

I&apos;m not sure if this will completely remove the need for rebinding etc. but we&apos;ll find out when we get there, I suppose.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457109</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-28 08:23:39 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #11)
&gt; Just to document how we got here: I was integrating inference with the
&gt; general mechanisms of method lookup under the premise to essentially keep
&gt; the 1.7- code for method lookup as is.
&gt; 
&gt; If you develop a second universe of the Scope.findMethod family of methods
&gt; which is structurally closer to the 1.8 spec, this will certainly give a
&gt; cleaner solution for 1.8 inference, too (for the price of code duplication).
&gt; 
&gt; I&apos;m not sure if this will completely remove the need for rebinding etc. but
&gt; we&apos;ll find out when we get there, I suppose.

I have made lots of progress on this - so far it looks very promising.
I have about 40+ failures to clean up in RunOnlyJava8Tests before declaring
victory on the first milestone.

I am noticing some &quot;interesting&quot; results produced by inference:

Given:

 List&lt;Person&gt; roster = new ArrayList&lt;&gt;();
        
        Map&lt;String, Person&gt; map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        Person::getLast,
                        Function.identity() 
                    ));

The PGMB for collect has this signature:
    Collector&lt;? super Person, Object ,Map&lt;java.lang.String,Person&gt;&gt;
as can be seen in the hover.

This is wrong. It should be 
    Collector&lt;? super Person, ? ,Map&lt;java.lang.String,Person&gt;&gt;

If you extract the toMap call and assign it to a variable of the same
type we incorrectly infer:

Collector&lt;? super Person, Object ,Map&lt;java.lang.String,Person&gt;&gt; some =
           Collectors.toMap(
                Person::getLast,
                Function.identity() 
            );

This does not compile (correct)

While this compiles (correct again)
Collector&lt;? super Person, ?,Map&lt;java.lang.String,Person&gt;&gt; some =
           Collectors.toMap(
                Person::getLast,
                Function.identity() 
            );

Due to our bypassing re-evaluation of inner expressions and directly
updating the bindings, we are able to get away with this - 

This shows up as a problem in the new implementation. I&apos;ll see what needs
to be done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457110</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-28 08:26:51 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)

&gt; Sasi, this would be a very nice project to work on after lambda shape
&gt; analysis.
&gt; Let us discuss next week.

I started looking into what it would take and the scope of it turns out to be
very large (my evolving patch modifies ~30 files and the patch is ~4 KLOC)
not the best choice for beginner project, so let me handle this and I&apos;ll continue
to look for interesting work for you and Shankha in other areas.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457583</commentid>
    <comment_count>14</comment_count>
      <attachid>247456</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-29 15:01:18 -0400</bug_when>
    <thetext>Created attachment 247456
Evolving solution - with warts, hacks and all.

This patch completely rewires the integration between part G &amp; part F. This
looks very very promising IMO. I&apos;ll write detailed design notes once I confirm
it will fly.

Still fails 18 tests in RunOnlyJava8Tests - this is under investigation.

Stephan, CEF:290 reads:

TypeBinding rPrime = rAppl.capture(inferenceContext.scope, 14); // FIXME capture position??

Consider your wrist slapped :) Actually it made me LOL, after a long 
investigation led me to there :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457589</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-29 15:10:02 -0400</bug_when>
    <thetext>One thing that was not clear to me was whether in the current scheme of
things, inner poly expressions are fully re-resolved or not. It appears
that in some paths we simply update the bindings and not reevaluate the
expression against the eventual target type ? If so that would be problematic
since there is prologue - find method - epilogue protocol. After the call
to findMethodBinding() there is a big body of code in MessageSend for example.

I say this because, some of the bindings computed in for example https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 are wrong and reevaluation
would have reported the error - we silently compile the program.

This is proving to be a very challenging yet fun work - hopefully it will
fly and we will have a very strong and clean integration that should serve
us in good stead.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457631</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-29 16:19:43 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #15)
&gt; One thing that was not clear to me was whether in the current scheme of
&gt; things, inner poly expressions are fully re-resolved or not. It appears
&gt; that in some paths we simply update the bindings and not reevaluate the
&gt; expression against the eventual target type ? If so that would be problematic
&gt; since there is prologue - find method - epilogue protocol. After the call
&gt; to findMethodBinding() there is a big body of code in MessageSend for
&gt; example.

You&apos;re right, this isn&apos;t fully kosher. As for checking argument expressions against final target types I&apos;m silently assuming that inference won&apos;t produce a solution that would fail such a check. For other checks I have no &quot;excuse&quot;.

 
&gt; I say this because, some of the bindings computed in for example
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 are wrong and
&gt; reevaluation
&gt; would have reported the error - we silently compile the program.

Which particular check would fail in that example?

Historically, when first working on MessageSend I was still hoping that processing order could essentially be maintained as in 1.7- times. When specific problems re diamond allocations occurred, I bit the bullet and split that resolve method into three parts.
After doing so for AllocationExpression, it sounds like a good idea to revisit MessageSend and try if the approach from AllocationExpression could be transferred also to MessageSend: separate those parts concerning tentative resolve from those that are done after overload resolution &amp; inference have picked the final method &amp; types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457682</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-29 20:24:21 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)

&gt; &gt; I say this because, some of the bindings computed in for example
&gt; &gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 are wrong and
&gt; &gt; reevaluation
&gt; &gt; would have reported the error - we silently compile the program.
&gt; 
&gt; Which particular check would fail in that example?

I was working with so many snippets I don&apos;t know where I found the problem,
I didn&apos;t recheck whether the code in https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 exhibits the problem, perhaps it does, but ...

Any nested inference where the nested call returns a wildcard parameterized
type would/should fail re-evaluation of the nested poly method call since
re-evaluation of the MessageSend would &quot;recapture&quot; the returned expression 
and we have no mechanisms in place to recognize they are identical captures 
of the same wildcard.

In the evolving patch, I first attempted to solve the problem by associating the
capturing ASTNode with the capture, but this falls flat because we copy 
lambdas and the original capture during type inference is from an alien
parallel universe :)

Finally, I have had to change TypeSystem to hand out unique captures on a 
CUD basis: i.e new CaptureBinding(...) is not safe anymore, LE.createCapturedWildcard should be used instead - this will &quot;intern&quot; captures
in such a way that recaptures from the safe site would return the prior capture.

Luckily, we didn&apos;t need to create parallel Scope&apos;s and LEs, so this should
work for us.

    

&gt; 
&gt; Historically, when first working on MessageSend I was still hoping that
&gt; processing order could essentially be maintained as in 1.7- times. When
&gt; specific problems re diamond allocations occurred, I bit the bullet and
&gt; split that resolve method into three parts.
&gt; After doing so for AllocationExpression, it sounds like a good idea to
&gt; revisit MessageSend and try if the approach from AllocationExpression could
&gt; be transferred also to MessageSend: separate those parts concerning
&gt; tentative resolve from those that are done after overload resolution &amp;
&gt; inference have picked the final method &amp; types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457683</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-29 20:27:02 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #17)

&gt; Any nested inference where the nested call returns a wildcard parameterized
&gt; type would/should fail re-evaluation of the nested poly method call since

Correction: 

The above *and* inference solution on the aggregate basis found some instantiation
that involved a captured wildcard that loops through outer and inner.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457930</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-30 08:15:33 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; (In reply to Srikanth Sankaran from comment #17)
&gt; 
&gt; &gt; Any nested inference where the nested call returns a wildcard parameterized
&gt; &gt; type would/should fail re-evaluation of the nested poly method call since
&gt; 
&gt; Correction: 
&gt; 
&gt; The above *and* inference solution on the aggregate basis found some
&gt; instantiation
&gt; that involved a captured wildcard that loops through outer and inner.

If it&apos;s indeed a type compatibility check post findMethod-with-inference, then performing those checks might be wrong, actually. If inference finds a solution it is correct by definition. We should just trust in its result, no? I thought you might have observed issues regarding visility, staticness, missing enclosing instance or such. Some of those might not be covered by inference, indeed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2457933</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-30 08:21:34 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #19)

&gt; If it&apos;s indeed a type compatibility check post findMethod-with-inference,
&gt; then performing those checks might be wrong, actually. If inference finds a
&gt; solution it is correct by definition. We should just trust in its result,
&gt; no? 

I am saying it is just an implementation detail today that will result in inner&apos;s
reevaluation to fail.  If the inner is reevaluated and it applies wildcard
capture on its result value - the capture should not act as a fresh capture,
that does not make sense but our implementation of PTB.capture() is not set
up to handle the case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2458223</commentid>
    <comment_count>21</comment_count>
      <attachid>247501</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-30 15:36:39 -0400</bug_when>
    <thetext>Created attachment 247501
More closer to home - Revised patch

This patch fails 15 tests in RunAllJava8Tests. At least half of them require
simply remastering the expected result - since we now always reevaluate the
inner expressions we get additional errors. So very close to being green.

I have made sure various experimental changes I had in the earlier version
are removed.

I plan to release a first batch of infrastructure changes that have no real bearing
on the rest of the work - just so we have sharper focus and less distraction.

This change set will be carefully selected so the final question of moving
forward with solution or not does not become fait_accompli of sorts. Every
change pertinent to the applicability :) of the core solution will go through
the review process.

I&apos;ll write up detailed design document and a structured review plan once all tests are green - i.e in some cases it does make sense to view the delta in the 
comparator, but just read the new code etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2458225</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-30 15:40:13 -0400</bug_when>
    <thetext>The scope has broadened. Adjusted the title accordingly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459872</commentid>
    <comment_count>23</comment_count>
      <attachid>247615</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-03 16:36:36 -0400</bug_when>
    <thetext>Created attachment 247615
Revised patch - Just two failures in RunAllJava8Tests

Once those are addressed, I&apos;ll start the clean up/polish + document the code
changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459974</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-04 10:53:22 -0400</bug_when>
    <thetext>Today is the day I am high on questions and low on answers.

Down to one failure, but the last one has me in a bind: GRT.testBug431408:

Looking at this passage:

Otherwise, if R  is a parameterized type, G&lt;A1, ..., An&gt;, and one of A1, ..., An is a wildcard, then, for fresh inference variables 1, ..., n, the 
constraint 
formula G&lt;1, ..., n&gt;  T is reduced and incorporated, along with the bound 
G&lt;1, ...,n&gt; = capture(G&lt;A1, ..., An&gt;), with B2.

I am having trouble mapping this to our implementation: As already discussed
and acknowledged 

1. there is no capture in our code. 

2. I also don&apos;t see the bound G&lt;1, ...,n&gt; = capture(G&lt;A1, ..., An&gt;) being 
reduced and incorporated, but could that have been by design ? We instead keep 
track of this capture bound details in the bound set and handle it during 
incorporation.

Is this indirect strategy because 18.1.3 says:

A bound of the form G&lt;1, ..., n&gt; = capture(G&lt;A1, ..., An&gt;) indicates that 
1, ..., n are placeholders for the results of capture conversion. This is 
necessary because capture conversion can only be performed on a proper type, 
and the inference variables in A1, ..., An may not yet be resolved.

3. R  is a .... passage calls for fresh variables explicitly, we are
reusing existing variables - Is this right ? 

4. Should we creating new inference variables for arguments that are plain
types ? if R is SomeType&lt;T, String&gt; does it make sense to create an inference
variable for String ? 

5. Should we be creating fresh variables against the generic type&apos;s type
variables as opposed to the parameterized type&apos;s type arguments ?

6. Does the while loop in incorporate that handles capture bounds effectively
amount to the capture bound being incorporated ? 

7. There are some passages that talk about all inference variables being
instantiated before capture bounds being processed. Are we handling this
correctly ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460039</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-04 15:34:30 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #24)
&gt; Today is the day I am high on questions and low on answers.
&gt; 
&gt; Down to one failure, but the last one has me in a bind: GRT.testBug431408:
&gt; 
&gt; Looking at this passage:
&gt; 
&gt; Otherwise, if R  is a parameterized type, G&lt;A1, ..., An&gt;, and one of A1,
&gt; ..., An is a wildcard, then, for fresh inference variables 1, ..., n, the 
&gt; constraint 
&gt; formula G&lt;1, ..., n&gt;  T is reduced and incorporated, along with the
&gt; bound 
&gt; G&lt;1, ...,n&gt; = capture(G&lt;A1, ..., An&gt;), with B2.
&gt; 
&gt; I am having trouble mapping this to our implementation: As already discussed
&gt; and acknowledged 
&gt; 
&gt; 1. there is no capture in our code.

In bug 445274 comment 2 I acknowledged this as a bug. Today, however, I believe this was premature: the word &quot;capture&quot; in these constraints is just a symbol that must not be evaluated, because when processing the capture bound we only operate on the original G, A1, ... An (see, e.g., 18.3.2). No part of the spec seems to use the (evaluated) *type* &quot;capture(G&lt;A1,...An&gt;)&quot;.

I see it similar to the relation &quot;throws&quot;, all forms listed in 18.1.2 and 18.1.3 are forms of contraints/bounds to be processed by pattern matching according to the rules of chap.18, *not* by regular evaluation.

 
&gt; 2. I also don&apos;t see the bound G&lt;1, ...,n&gt; = capture(G&lt;A1, ..., An&gt;) being 
&gt; reduced and incorporated, but could that have been by design ? We instead
&gt; keep 
&gt; track of this capture bound details in the bound set and handle it during 
&gt; incorporation.
&gt; 
&gt; Is this indirect strategy because 18.1.3 says:
&gt; 
&gt; A bound of the form G&lt;1, ..., n&gt; = capture(G&lt;A1, ..., An&gt;) indicates that 
&gt; 1, ..., n are placeholders for the results of capture conversion. This is 
&gt; necessary because capture conversion can only be performed on a proper type, 
&gt; and the inference variables in A1, ..., An may not yet be resolved.

Right, &quot;capture&quot; bounds are handled specifically, these only appear in
- 18.1.3 (definition)
- 18.3.2 (incorporation)
- 18.4 (considered for inference variable dependencies and during actual resolution)
- 18.5.2 (produces these bounds)

In particular, reduction is applied to *constraints* - capture bounds, however, are already considered as bounds, hence no reduction is necessary in fact.

See that also &quot;throws&quot; bounds are handled in a separate structure.


&gt; 3. R  is a .... passage calls for fresh variables explicitly, we are
&gt; reusing existing variables - Is this right ? 

We&apos;re looking at this line of code, right?
  InferenceVariable[] betas = inferenceContext.addTypeVariableSubstitutions(arguments);

Inside that method, we essentially create fresh type variables, but indeed we exempt existing inference variables. I&apos;d have to dig deeper to retrieve the case where this exception was needed. Might be worth trying if this exception is still needed.

&gt; 4. Should we creating new inference variables for arguments that are plain
&gt; types ? if R is SomeType&lt;T, String&gt; does it make sense to create an inference
&gt; variable for String ? 

Here I see some room for interpretation, indeed. spec speaks of the full set of &quot;fresh inference variables 1, ..., n&quot;, without explicit exceptions. I&apos;m already excluding inference variables. When substituting String by i, aren&apos;t we immediately deriving a bound i = String ? In that case avoiding this i in the first place might be an optimization, but I wouldn&apos;t expect this to change observable behavior. Have you observed differently?

Maybe the same reasoning actually holds for existing inference variables, implying it doesn&apos;t really matter whether or not we create an inference variable for an inference variable.
 
&gt; 5. Should we be creating fresh variables against the generic type&apos;s type
&gt; variables as opposed to the parameterized type&apos;s type arguments ?

I don&apos;t think so. Spec explicitly says &quot;R  is a parameterized type, G&lt;A1, ..., An&gt;&quot;. What we need are new bounds that &quot;capture&quot; information about these A1, ... An, which are type arguments.

&gt; 6. Does the while loop in incorporate that handles capture bounds effectively
&gt; amount to the capture bound being incorporated ? 

Yes, that loop implements 18.3.2.


&gt; 7. There are some passages that talk about all inference variables being
&gt; instantiated before capture bounds being processed. Are we handling this
&gt; correctly ?

Where do you see this? 
In fact treating capture() purely as a symbol implies that we evaluate all constraints and bounds before actually performing any capture.

HTH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460058</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-04 20:01:05 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)

&gt; In bug 445274 comment 2 I acknowledged this as a bug. Today, however, I
&gt; believe this was premature: the word &quot;capture&quot; in these constraints is just
&gt; a symbol that must not be evaluated, because when processing the capture
&gt; bound we only operate on the original G, A1, ... An (see, e.g., 18.3.2). No
&gt; part of the spec seems to use the (evaluated) *type* &quot;capture(G&lt;A1,...An&gt;)&quot;.

You are right that 18.3.2 operates on original G, However, I don&apos;t think
capture is just a symbol there - 18.5.2 &quot;Otherwise, if R  is a parameterized
type, G&lt;A1, ..., An&gt;,&quot; portion needs a capture for correctness. So I think
the right thing to do is to apply the capture, but for 18.3.2 operate on
the uncaptured type.

&gt; but I wouldn&apos;t expect
&gt; this to change observable behavior. Have you observed differently?

I didn&apos;t try - but I expect no change to observable behavior either.

&gt; Maybe the same reasoning actually holds for existing inference variables,
&gt; implying it doesn&apos;t really matter whether or not we create an inference
&gt; variable for an inference variable.

Would think so.

&gt; &gt; 6. Does the while loop in incorporate that handles capture bounds effectively
&gt; &gt; amount to the capture bound being incorporated ? 
&gt; 
&gt; Yes, that loop implements 18.3.2.

OK, more questions.

(8) The only place where I see us adding an entry to BoundSet.captures is
in inferPolyInvocation* - Are there supposed to be other places that the
implementation is missing (I have missed noticing ?). The choice of Set and
the iteration makes me expect other. 18.3 preamble talks about &quot;New capture 
variables are not generated when reducing subtyping constraints&quot;. Is this
saying no new capture bounds are created ? It says variables though.

(9) What necessitates this stashing of the capture bound in BoundSet.captures
and processing it during next round of incorporation rather than doing it 
right away in inferPoly* ? 

(10) After the round of incorporation, we immediately call captures.clear()
Is that correct ? There are quite a few clauses that read like if there exist
a capture bound ... for example 18.4 requires it. Should we not be clearing
this. but instead be setting a bit to say we have processed the capture bound ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460069</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 01:12:10 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)

&gt; &gt; 4. Should we creating new inference variables for arguments that are plain
&gt; &gt; types ? if R is SomeType&lt;T, String&gt; does it make sense to create an inference
&gt; &gt; variable for String ? 
&gt; 
&gt; Here I see some room for interpretation, indeed. spec speaks of the full set
&gt; of &quot;fresh inference variables 1, ..., n&quot;, without explicit exceptions. I&apos;m
&gt; already excluding inference variables. When substituting String by i,
&gt; aren&apos;t we immediately deriving a bound i = String ?

Eureka !

&gt; aren&apos;t we immediately deriving a bound i = String ?

That holds the key to the puzzle. 

The capture bound handling code looks like this:

while (captIter.hasNext()) {

 // ...

for (int i = 0, length = parameters.length; i &lt; length; i++) {
// A set of bounds on 1, ..., n, constructed from the declared bounds of P1, 
//..., Pn as described in 18.1.3, is immediately implied.
    TypeVariableBinding pi = parameters[i];
    InferenceVariable alpha = (InferenceVariable) gAlpha.arguments[i];
				addBounds(pi.getTypeBounds(alpha, theta),   
                                context.environment);

    TypeBinding ai = gA.arguments[i];
    TypeBinding cai = cgA.arguments[i];
    if (ai instanceof WildcardBinding) {


    } else {
         addBound(new TypeBound(alpha, ai, ReductionResult.SAME),
                                                      context.environment);
   }
}

// --

while this code above would provide for &quot;immediately deriving a bound 
i = String&quot; it would not help us derive the bound &quot;i = capture#1-of ?&quot;
in this scenario:

On HEAD/master, suppose in CEF.inferPoly*

   - method&apos;s *declared* returnType is Collector&lt;? super T, A, R&gt;
   - rTheta is Collector&lt;T#0,?,List&lt;T#0&gt;&gt;
   - gbeta would then be Collector&lt;T#0,?#1,List&lt;T#0&gt;#2&gt;
 
Then in incorporate:

    - gAlpha is same as gbeta of inferPoly* so == Collector&lt;T#0,?#1,List&lt;T#0&gt;#2&gt;
    - ga same as parameterizedType of inferPoly* which same as rTheta
    - So ga == Collector&lt;T#0,?,List&lt;T#0&gt;&gt;

Given this and the code above what would allow us to discover

&quot;?#1 = capture# of ?&quot; and thereby discover A#1 = capture# of ?

Nothing.

Ergo.

BoundSet.capture should be passed in the parameterized type after wildcard
capture and it should arrange to discover &quot;?#1 = capture# of ?&quot; and propagate
that.

I think we get by on master because, we are not reevaluating inner message 
sends.

So most of the mystery is solved.

(In reply to Srikanth Sankaran from comment #26)

&gt; (8) The only place where I see us adding an entry to BoundSet.captures is
&gt; in inferPolyInvocation* - Are there supposed to be other places that the
&gt; implementation is missing (I have missed noticing ?). The choice of Set and
&gt; the iteration makes me expect other.

OK, I got the answer to this open. Capture bounds get bubbled up from
inner poly invocations. So we need the set and the iterations. Makes sense.

&gt; (9) What necessitates this stashing of the capture bound in BoundSet.captures
&gt; and processing it during next round of incorporation rather than doing it 
&gt; right away in inferPoly* ? 

I think I have the answer to this one too.

So the one question that still puzzles me is : Are we prematurely clearing
BoundSet.captures ? 

Resolve() checks to see if there are capture bounds - When we enter resolve
captures is cleared by prior incorporation. Is it that resolution itself
can cause some capture bounds to be created ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460082</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 05:33:52 -0400</bug_when>
    <thetext>In http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2156fedddc9b679afe1f45ef1e9d318ac4df4d9a, I release a set of 23 files
with changes that enable, but are only peripheral to the core solution.
Since of these changes produce a large delta (refactoring of locals into
fields for example with the this. qualifier all over the place) they will
be a distraction given that reviewer&apos;s time is at a premium.

Here are the description of the changes:

    - Enable the test suite harness to support capture free comparison of
expected and actual errors. One test in particular (GRT1_8.testBug433158)
produces non-deterministic capture ids.

    - New suite RunOnly335CompilerTests.java to run only a subset of generics
and polyexpression tests.

    - Fix to broken existing test (ASTConverter17.java) caused by bad code
in Lambda shape analysis.

    - Preparing AE, QAE and MessageSend for reentrancy by extracting some
locals into fields. (Why doesn&apos;t Java support C&apos;s function static variables
again ? - their semantics cannot be carried over as is since we need to 
discriminate between instance and class variables, but ...)

    - Support for &quot;interned captures&quot; at the type system and attendant changes
to a couple of files to produce unique capture positions - some expression&apos;s
source end overlaps the contained expression&apos;s source end. BTW ATM this is
disabled for null analysis - a couple of tests fail. Seeing that there is
some capture binding tweaking code that is null analysis specific, I thought
it is best left for you Stephan to determine what is best.

    - Make CaptureBinding implement substituteInferenceVariable rather than
inherit super&apos;s method which is wrong for captures.

    - Fix an NPE potential site (CUScope.java)

    - A few useful APIs - (Poly)TypeBinding, ProblemMethodBinding etc.

Later in the day, I&apos;ll post the final patch for review along with a review
plan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460083</commentid>
    <comment_count>29</comment_count>
      <attachid>247626</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 05:53:15 -0400</bug_when>
    <thetext>Created attachment 247626
Patch containing only test changes.

I have tried hard to make sure that diagnostics produced match what we do
on master. A few tests need remastering and are in this patch:

Description of changes:

    - A few tests produce 1 less or 1 more message due to inner poly expression&apos;s
reevaluation as opposed to binding update. These message look reasonable.

    - GRT1_8.testBug435767 becomes a conform test from being a negative test.
JDK 8u20 compiles this code too.

    - One test NullTAT used to emit duplicate message - went way.

I have verified the messages for all changed tests against javac as well as
ECJ head. Looks reasonable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460084</commentid>
    <comment_count>30</comment_count>
      <attachid>247627</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 06:09:22 -0400</bug_when>
    <thetext>Created attachment 247627
Changed files that need only cursory glance through.

These are peripheral changes, but could not be checked in without changes
that require deep review going in. A cursory look through is fine for these
files.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460094</commentid>
    <comment_count>31</comment_count>
      <attachid>247628</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 07:57:39 -0400</bug_when>
    <thetext>Created attachment 247628
Changes requiring close inspection.

Description:

[While I have tried to minimize white space changes, some files still
have quite a few noise changes, so set your comparator to ignore white 
spaces, Thanks]

ASTNode.java:

    - One version of ResolvePolyExpressions went away and the other one got
simplified. I suggest that the comparator be used only for structure compare
and the (only) method be directly studied - it is only 30 LOC.

Invocation.java:

    - Loses the APIs:
          - usesInference
          - updateBindings
          - innersNeedUpdate
          - InnerUpdateDone
          - innerInferenceHelper
      Again, a structure compare and a glance through would be best.

ExplicitConstructorCall.java:

     - Adjust to changes in Invocation.
     - ECC not being an expression, some of the Invocation APIs don&apos;t
make sense. Changed to either just return or throw exception.

Scope.java:

    - We don&apos;t use inference levels anymore. In particular F does not
drive G. G drives itself. So there are no calls to inferInvocationType
from Scope. Nor do we pass around inference levels.

    - We now skip compatibility checks after PGMB.cCM ONLY if invocation
type was inferred. When only applicability is inferred, we fall through
and check compatibility. This is so we can weed out incompatible methods
that would have passed applicability in G due to arguments being not
pertinent to applicability. (I need to think a bit more to see if this
calls for additional changes for direct type variables in parameters 
targetting functional expressions)

    - Parameter compatibility checks got simplified quite a bit.
compatibilityLevel18FromInner and compatibilityLevel18 are not needed
anymore. All poly expressions respond to isCompatibleWith and 
isBoxingCompatibleWith

   - getExactMethod and getExactConstructor now return a PGMB.
Finally ! :) 

   - Ignore inference variables boolean is not used anymore. I
don&apos;t remember why/how it is not required anymore, but believe me
it is not :)

    - The preamble stanza in mSMB went away. The raison d&apos;etre
of this bug - Removing 38 LOC required ~4.5 KLOC and two weeks
of time :)

MessageSend:

    - Is designed to be called once or reentered if a poly expression.
    - Announces itself as a poly type if G finds an applicable
method with no target type in invocation context.
    - Some code for improved error reporting by stealing the closes match.
    - Implements isCompatibleWith and isBoxingCompatibleWith
which is what helps us eliminate all the inner compatibility checks
from Scope. (this can trigger needless re-inference, but there is
an open bug to address that)
    
QAE:

    - Loses inner inference helper.

AE:

    - ResolutionState abstraction goes away. The three parts
are merged into one part.
    - Implements isCompatibleWith and isBoxingCompatibleWith
    - Respond to changes in Invocation.

PGMB:

    - All 1.8 code got moved into cCM18
    - This method now returns a PolyParameterizedGenericMethod
if applicability succeeded and we have no target type.
    - This is a &quot;marker&quot; class. It serves to let MessageSend
know that it is a poly expression. This is also wrapped as the
closest match in case post applicability inference compatibility
checks fail so that we have better error reports.
    - I also expect that this will address ambiguities at mSMB,
i.e if we see a PPGMB, simply return that as the MSM and let
MessageSend deal with it - not yet done.

IC18:

    - All nested inference handling and inner poly expression rebinding
code is eliminated - Now this is the responsibility of ASTNode.resolvePoly*

BoundSet:

    - BoundSet.captures now get passed captured GA. It establishes
the trivial relationships between the fresh inference variables and
capture(GA) and arranges to propagate these to dependancies.
Perhaps this code could be a bit cleaner ?

CTF:

    - Now in formulas we can encounter a PolyTB, if we do, we need to
resolve them and discover the real type against the target type.

CEF:

    - In reduce against a proper type, we had several clauses to handle
different kinds of expressions. Now we take advantage of polymorphism
and ask the expression if it is compatible against the proper type. This
addresses some loose ends also that are acknowledged in the code.

    - Fix to an AIOOB I observed in reference expression reduction.

    - Capture position 14 fixed :)

    - Missing capture for inexact method reference fixed.

    - Pass captured parametrized type for capture bound incorporation

    - Other capture position problems fixed.

Shortly, I&apos;ll also post a cumulative patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460096</commentid>
    <comment_count>32</comment_count>
      <attachid>247629</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 08:15:40 -0400</bug_when>
    <thetext>Created attachment 247629
Cumulative patch

Recommended structured review plan:

1. (Optional) Glance through the infrastructure changes already released:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2156fedddc9b679afe1f45ef1e9d318ac4df4d9a

2. (Optional) Glance through the ~12 tests that underwent diagnostic change.
https://bugs.eclipse.org/bugs/attachment.cgi?id=247626

3. Cursory review of https://bugs.eclipse.org/bugs/attachment.cgi?id=247627

4. Close scrutiny of the patch https://bugs.eclipse.org/bugs/attachment.cgi?id=247628 documented at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c31.

    A good order would be ASTNode, Invocation, MessageSend, Scope, PGMB, QAE,
AE, ECC, IC18, CEF, CTF, BoundSet,

Thanks a million in advance, I know this is a big ask of your time and energy -
I appreciate your comments/feedback. IMHO this reintegration is what your
effort at G deserves given how well/clean it is written !

I&apos;ll get some additional testing done through the UI team as well as other
IBM teams.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460097</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 08:17:01 -0400</bug_when>
    <thetext>Noopur, could you please get all UI tests run with the cumulative patch and
report back results ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460100</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 08:54:02 -0400</bug_when>
    <thetext>OK, so what of the design itself ? 

Preamble: 

The basic &quot;problem&quot; is that on master MessageSend does not play the role of
a poly expression to perfection i.e it never announces itself as a poly 
expression and does not implement certain parts of the poly expression protocol
(which we never unfortunately documented in an IPolyExpression interface) 

As a result it does not take advantage of the solution devised for https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701#c54 which is to
introduce a level of indirection by implementing isCompatibleWith and 
isBoxingCompatibleWith 

For https://bugs.eclipse.org/bugs/show_bug.cgi?id=400874 in 
https://bugs.eclipse.org/bugs/attachment.cgi?id=237885, I did post some
early prototype code for this, but never found the time to follow through :(

So the present patch follows through on that. 

Key ideas:

    - MessageSend announces itself as a poly expression if G finds an applicable
method and has no target type to proceed to invocation type inference.

    - This is accomplished by PGMB.cCM18 returning an object of a &quot;marker&quot; 
class PolyParametrizedGenericMethodBinding

    - MessageSend.binding when called by G against a specific target type
computes the binding freshly (this method should be renamed 
resolveMethodExpecting and LE.getResolved* and RE.findCompile* should also
be renamed so they all speak in the same tongue)

    - By also implementing isCompatibleWith and isBoxingCompatible with
this removes any G specific code in F to deal with inner compatibility.
(Having that is intrusive there, the reason for this bug.)

    - All poly expression resolution code is centralized into ASTNode.resolvePoly* - there is no need for IC18 to keep track of inner polies
and schedule rebinding etc. In a way the inners are already tracked by the
outer in its this.arguments and this.argumentTypes. So this redundancy is
removed.

    - Re-resolving the nested poly expressions after the outer call is fully
resolved also addresses problems about various checks being skipped and only
bindings being updated.

    - Diamond inference also is simplified a good bit. Now AE refuses to
resolve itself until a target type is known if the context provides a target
type.

Follow up ideas: (against different tickets) 

    - When target type is absent throwing AbsentTargetTypeException may lead
to an even cleaner design. Some open bugs that deal with ambiguity post
applicability inference where there should be no ambiguity should go away
with that

    - Write up IPolyExpression. Unify all disparate methods we have under
one scheme (resolveTypeExpecting, resolveMethodExpecting, isCompatibleWith,
isBoxingCompatibleWith ...) 

    - See if ReferenceExpression should really implement Invocation. We &quot;invoke&quot;
a method in RE, not to execute it, but to pass it around. So that should
qualify. Too many places there is casts and instanceof checks due to 
InvocationSite and Invocation split.

    - All poly expressions should implement a cache against targets to avoid
recomputation.

    - Check that all poly expressions&apos; resolve method looks like:

    if (this.constant != Constant.NotAConstant) {
    } else {
    }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460102</commentid>
    <comment_count>35</comment_count>
      <attachid>247630</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 09:22:16 -0400</bug_when>
    <thetext>Created attachment 247630
Cumulative patch - Passes all JDT/Core tests

(In reply to Srikanth Sankaran from comment #31)

&gt; ExplicitConstructorCall.java:

&gt;      - ECC not being an expression, some of the Invocation APIs don&apos;t
&gt; make sense. Changed to either just return or throw exception.

This was not in the tested version. I added code to throw an ISE when
I was scanning through the changes to document them here, bad idea :)
Fixed and reposted the cumulative patch that passes all JDT Core tests.

(In reply to Srikanth Sankaran from comment #32)
&gt; I appreciate your comments/feedback. IMHO this reintegration is what your
&gt; effort at G deserves given how well/clean it is written !

That sentence looks subject to interpretation.

Just so it does not seem unseemly, by &quot;how well/clean it is written !&quot; I was
referring to your work in type inference Stephan, not to my work here :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460103</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 09:42:02 -0400</bug_when>
    <thetext>For some broken cases, I get an NPE during build. I&apos;ll look into this - it does
not have to hold the review.

// --
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class X {
	public static void main(String[] args) {
		List&lt;Person&gt; roster = new ArrayList&lt;&gt;();
        
        Map&lt;String, Person&gt; map = 
            roster
                .stream()
                .collect(
                    Collectors.toMap(
                        Person::getLast,
                        Function.identity() 
                    ));

	}
}

class Person {
	
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460119</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 11:50:50 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #36)
&gt; For some broken cases, I get an NPE during build. I&apos;ll look into this - it
&gt; does
&gt; not have to hold the review.

Trivial problem, I have a fix in my workspace. Basically, when arguments have
errors, we do some trickery to find the closest match which happens to be a PGMB.
We return to the caller and then outer inference results in binding() and isCompatible et al being called with argumenTypes array containing nulls. Fix is
simply to promote the fact we had argument errors to a field and consult in
binding and isCom* and do the right thing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460230</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-06 00:49:34 -0400</bug_when>
    <thetext>There is a &quot;mild&quot; problem: 

15.12.2 says

Although the method invocation may be a poly expression, only its argument
expressions - not the invocation&apos;s target type - influence the selection of applicable methods.

// --

This would require a bit of redoing/rethinking. So let us hold on the review.
I&apos;ll let you know when it is ready.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460270</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-06 04:07:29 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #38)
&gt; There is a &quot;mild&quot; problem: 
&gt; 
&gt; 15.12.2 says
&gt; 
&gt; Although the method invocation may be a poly expression, only its argument
&gt; expressions - not the invocation&apos;s target type - influence the selection of
&gt; applicable methods.
&gt; 
&gt; // --
&gt; 
&gt; This would require a bit of redoing/rethinking. So let us hold on the review.
&gt; I&apos;ll let you know when it is ready.

Damage assessment: Nothing major. Right now I am proceeding to invocation
type inference if target type is available, I need to split this as is done
on master.

This would also simplify the implementation further by a good bit. 
Invocation.binding() can simply revert to what is doing on master - 
rather than looking up the method against the target type. I can also 
eliminate the repeat eventual resolution by memoizing the results from
nested inference. 

It is going to take a couple of days of work - I&apos;ll get on it after a day&apos;s
break.

(In reply to Srikanth Sankaran from comment #34)

&gt;     - MessageSend.binding when called by G against a specific target type
&gt; computes the binding freshly 

This would be a waste of time. The behavior of binding should revert to
what it is on head.

&gt;     - Re-resolving the nested poly expressions after the outer call is fully
&gt; resolved also addresses problems about various checks being skipped and only
&gt; bindings being updated.

This can simply re-use the memoized result.

&gt; Follow up ideas: (against different tickets) 
&gt; 
&gt;     - When target type is absent throwing AbsentTargetTypeException may lead
&gt; to an even cleaner design. Some open bugs that deal with ambiguity post
&gt; applicability inference where there should be no ambiguity should go away
&gt; with that

Not sure if this idea will lead to a a conforming implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460288</commentid>
    <comment_count>40</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-10-06 05:10:57 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #33)
&gt; Noopur, could you please get all UI tests run with the cumulative patch and
&gt; report back results ? TIA.

All tests pass with the cumulative  patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460918</commentid>
    <comment_count>41</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-07 07:45:02 -0400</bug_when>
    <thetext>The test cases mentioned in Bug 437973 do not get resolved through this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461005</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-07 09:51:41 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #38)
&gt; There is a &quot;mild&quot; problem: 
&gt; 
&gt; 15.12.2 says
&gt; 
&gt; Although the method invocation may be a poly expression, only its argument
&gt; expressions - not the invocation&apos;s target type - influence the selection of
&gt; applicable methods.
&gt; 
&gt; // --
&gt; 
&gt; This would require a bit of redoing/rethinking. So let us hold on the review.
&gt; I&apos;ll let you know when it is ready.

OK, I have analyzed this closely. No change is required.

There are two ways invocation&apos;s target type can illegally influence/affect
the selection of MSMB.

    - If we somehow take that into consideration to pick the method - 
we never did and we don&apos;t now with this patch

    - If invocation type inference &quot;improves&quot; the method and the improved
method beats others to quality as the MSMB and it would not otherwise have
but for the improvement.

The latter point was what worried me - but it proved to be unnecessary. During MSMB computation, we operate on the generic method and not on the
instantiations. So any improvements seen during invocation type inference
cannot affect overload resolution.
 
While investigating this point though I noticed that my redone Invocation.binding was horrible/dumb incurring expensive computation which
would be thrown right away. I have fixed this.

Patch will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461092</commentid>
    <comment_count>43</comment_count>
      <attachid>247687</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-07 12:17:21 -0400</bug_when>
    <thetext>Created attachment 247687
Proposed patch - Ready for review, passes all tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461097</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-07 12:28:59 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #43)
&gt; Created attachment 247687 [details]
&gt; Proposed patch - Ready for review, passes all tests

In http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=817f5b60f1b5283073ee91db13e8dcaec6a51e5d, I released some more 
infrastructure changes that are peripheral in nature to minimize clutter
in the change set input to review.

The proposed patch is essentially the same as the &quot;Cumulative patch&quot; posted
earlier, with:

    - Reverting the behavior of Invocation.binding to simply return the
binding and not do wasteful computation.

    - Improved handling of compatibility checks for methods that pass
applicability - to weed out incompatible method early.

    - Some clean up of C set construction based on 
https://bugs.openjdk.java.net/browse/JDK-8052325 

    - Some performance improvements to isCompatibleWith - there is no
need to tunnel through overload resolution all over again.

Known issues I plan to address in a separate ticket along with issues
raised during code review:

    1. AllocationExpression can use common code blocks replicated in 2-3
places, These could be factored into a method.

    2. Further improvements to isCompatibeWith by caching results.

    3. When inner is reevaluated, it computes its binding all over.
We need to arrange for results forwarded/cached etc.

It has been gruelling work to get to this stage, these issues that are
not blockers can be addressed separately in a few days time.

Ball is back in your court Stephan, at your convenient pace.  TIA.
I am happy help any way I can, answer questions etc. Let me know.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461290</commentid>
    <comment_count>45</comment_count>
      <attachid>247700</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-07 23:02:17 -0400</bug_when>
    <thetext>Created attachment 247700
Incremental fix to bug 428811

This incremental patch fixes bug 428811.

Two changes were required:

    - Earlier &quot;Proposed patch&quot; over eagerly pruned some code necessary to
weed out incompatible method from MSMB race.

    - We attempt to diamond infer when we should not.
      e.g: ArrayList&lt;T&gt;::new should not trigger diamond inference while
      ArrayList::new should.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461966</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 00:16:08 -0400</bug_when>
    <thetext>Question:

This chunk of code from master in C set construction:

if (expri instanceof Invocation &amp;&amp; expri.isPolyExpression()) {
			Invocation invocation = (Invocation) expri;
			MethodBinding innerMethod = invocation.binding(null, false, null);
			if (innerMethod instanceof ParameterizedGenericMethodBinding) {
				InferenceContext18 innerCtx = invocation.getInferenceContext((ParameterizedMethodBinding) innerMethod);
				if (innerCtx != null) { // otherwise innerMethod does not participate in inference
					return addConstraintsToC(invocation.arguments(), c, innerMethod.genericMethod(), innerCtx.inferenceKind);
				}
			}

Is it doing the right thing for diamond inference resolving to a non-generic
method ? 

// --
If ei is a poly class instance creation expression (15.9) or a poly method
invocation expression (15.12), C contains all the constraint formulas that
would appear in the set C generated by 18.5.2 when inferring the poly
expression&apos;s invocation type.

// --
A class instance creation expression is a poly expression (15.2) if it 
uses the diamond form for type arguments to the class, and it appears in 
an assignment context or an invocation context (5.2, 5.3). Otherwise, 
it is a standalone expression.

So it looks like we should not check for PGMB instance ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462105</commentid>
    <comment_count>47</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 05:22:37 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #46)
&gt; So it looks like we should not check for PGMB instance ?

I think you&apos;re right.

Originally, Invocation.getInferenceContext() required a PGMB argument, that&apos;s why we have this instanceof - using then the innerCtx as an indication that the inner actually uses inference.

In Bug 427483 I generalized getInferenceContext() to accept a PMB, and in that bug&apos;s commit you see one instanceof check adjusted. It probably makes sense that other similar locations should have been adjusted accordingly, which conceptually acknowledges the spec passages you cite: not PGMB vs. PMB tells us about poly or not poly, but getInferenceContext(PMB) will.

OTOH, just changing this one instanceof check may not be effective, unless we also re-visit the use of PGMB in other methods of AllocationExpression: registerInferenceContext(), updateBindings(), usesInference().


Would this change how you handle things in this bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462137</commentid>
    <comment_count>48</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 06:24:12 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #32)
&gt; Recommended structured review plan:
&gt; 
&gt; 1. (Optional) Glance through the infrastructure changes already released:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=2156fedddc9b679afe1f45ef1e9d318ac4df4d9a

Looking at this commit...

AllocationExpression:
I was curious about moving argumentTypes from ResolutionState to AE itself. When accounting for multiple invocations of AE.resolveType() I figured we should push all intermediate resolution results into the ResolutionState, to allow for different results during different attempts. At a closer look I don&apos;t see how different attempts could produce different argumentTypes, though 
=&gt; Looks OK.

CaptureBinding:
Own version of substituteInferenceVariable() no longer handles superclass &amp; superInterfaces (nor lowerBound, which we didn&apos;t handle before, either).
Question: can we assert that the fresh CaptureBinding created here gets initializeBounds called when needed? Could we end up working with an insufficiently initialized CaptureBinding downstream?
=&gt; @Srikanth, please comment.

ProblemReasons:
InferredAppliableMethodInapplicable
=&gt; typo :)

ParameterizedTypeBinding:
capture() has this comment:
// A couple of NTAT tests fail with interned captures. The new messages look better and correct. Stephan to validate. 
=&gt; I filed bug 446434 to follow up. No need to let it block this bug.

Everything else looks fine with no further questions asked.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462189</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 08:13:21 -0400</bug_when>
    <thetext>Let us start numbering issues so it is easy for follow up and cross
referencing:

Follow up tasks so far:

    1. AllocationExpression uses common code blocks replicated in 2-3
places, These could be factored into a method.

    2. Further improvements to isCompatibeWith by caching results.

    3. When inner is reevaluated, it computes its binding all over.
We need to arrange for results forwarded/cached etc.

    4. CaptureBinding.substituteInferenceVariable should check for
need to initialize superclass and super interfaces in the substitute.

    5. Typo in ProblemReasons:InferredAppliableMethodInapplicable

(Clean up of instanceof PGMB check in C set construction included in a
patch for the spec bug fix already)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462348</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 12:08:42 -0400</bug_when>
    <thetext>Another question: 

Should the calls to getResolvedCopyForInferenceTargeting in CExceptionF.reduce
and CExpressionF.inputVariables() be preceded by computation of ground target
type ? 

I am not sure there is a correctness issue here - If nothing else they would 
defeat the caching being put in at least for implicit lambdas with wild card 
parametrized funcional interface targets ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462445</commentid>
    <comment_count>51</comment_count>
      <attachid>247764</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 14:04:27 -0400</bug_when>
    <thetext>Created attachment 247764
Incremental fix to bug 444891 (specification amendment)

I am cross posting the patch here because it needs to be applied on top
of the others already posted here.

I have verified that this patch run all tests clean + fixes 
bug 433158 bug 435187 bug 433852 bug 442916 bug 442769 bug 432682 bug 442446 bug 435767 which were tagged as duplicates.

The one outlier is https://bugs.eclipse.org/bugs/show_bug.cgi?id=439594.
This was tagged as a duplicate but problem persists - There should be something
more there that should be investigated. I&apos;ll reopen that bug shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462476</commentid>
    <comment_count>52</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 14:19:44 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #51)
&gt; Created attachment 247764 [details]
&gt; Incremental fix to bug 444891 (specification amendment)
&gt; 
&gt; I am cross posting the patch here because it needs to be applied on top
&gt; of the others already posted here.
&gt; 
&gt; I have verified that this patch run all tests clean + fixes 
&gt; bug 433158 bug 435187 bug 433852 bug 442916 bug 442769 bug 432682 bug 442446
&gt; bug 435767 which were tagged as duplicates.

That&apos;s very good news, as it shows that both improvements harmonize.
Hooray!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462479</commentid>
    <comment_count>53</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 14:22:18 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #49)
&gt; (Clean up of instanceof PGMB check in C set construction included in a
&gt; patch for the spec bug fix already)

In that universe: do methods AE.{registerInferenceContext,updateBindings,usesInference} still exist? If so, would they still need the same cleanup?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462497</commentid>
    <comment_count>54</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 14:42:35 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #50)
&gt; Another question: 
&gt; 
&gt; Should the calls to getResolvedCopyForInferenceTargeting in
&gt; CExceptionF.reduce
&gt; and CExpressionF.inputVariables() be preceded by computation of ground target
&gt; type ? 
&gt; 
&gt; I am not sure there is a correctness issue here - If nothing else they would 
&gt; defeat the caching being put in at least for implicit lambdas with wild card 
&gt; parametrized funcional interface targets ?

Why precede? Inside resolveType we call findGroundTargetType(). Isn&apos;t that sufficient?

Do you want to use the ground target type as a key for caching? Is the plain target type inappropriate for that task? How?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462499</commentid>
    <comment_count>55</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 14:46:33 -0400</bug_when>
    <thetext>With the set of patches here, These go away:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=445725,
https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430
https://bugs.eclipse.org/bugs/show_bug.cgi?id=434394
https://bugs.eclipse.org/bugs/show_bug.cgi?id=445274
https://bugs.eclipse.org/bugs/show_bug.cgi?id=429555

I&apos;ll include tests for these in a later patch.

Of these, https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430 is interesting.
We have a call at the tail end of MessageSend that reads:

recordExceptionsForEnclosingLambda(scope, this.binding.thrownExceptions);

Inner&apos;s full reevaluation enables the propagation of the thrown exceptions now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462500</commentid>
    <comment_count>56</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 14:51:07 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #54)

&gt; Why precede? Inside resolveType we call findGroundTargetType(). Isn&apos;t that
&gt; sufficient?

No, the caching code is going to look like,

    - check the HashMap&lt;TargetType,LE&gt; and if an entry is found recycle it.
    - otherwise copy + resolve + add to map and return.
 
&gt; Do you want to use the ground target type as a key for caching? Is the plain
&gt; target type inappropriate for that task? How?

Thing is from some parts of the engine we call getResolved* with the
ground target type and from others (the ones I cited earlier) with wildcards.
So these will produce two copies.

Inside LE.resolve, we compute the ground target type, but that is after a
&quot;cache miss&quot;


(In reply to Stephan Herrmann from comment #53)
&gt; (In reply to Srikanth Sankaran from comment #49)
&gt; &gt; (Clean up of instanceof PGMB check in C set construction included in a
&gt; &gt; patch for the spec bug fix already)
&gt; 
&gt; In that universe: do methods
&gt; AE.{registerInferenceContext,updateBindings,usesInference} still exist? If
&gt; so, would they still need the same cleanup?

The last two go away, I think we do the right thing for the first one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462506</commentid>
    <comment_count>57</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 15:08:33 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #32)
&gt; 2. (Optional) Glance through the ~12 tests that underwent diagnostic change.
&gt; https://bugs.eclipse.org/bugs/attachment.cgi?id=247626

At a cursory glance no obvious problems.
I&apos;ll give it slightly deeper scrutiny after reviewing the actual code changes, at what point I can make more sense of debugging a few selected samples.

Some of the additional errors look like candidates for better efforts in detecting the root cause in the presence of inference failure (part 1 of the three-years-AI-research-project :) ). Needn&apos;t hold up the current bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462514</commentid>
    <comment_count>58</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 15:22:20 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #56)
&gt; Thing is from some parts of the engine we call getResolved* with the
&gt; ground target type and from others (the ones I cited earlier) with wildcards.
&gt; So these will produce two copies.
&gt; 
&gt; Inside LE.resolve, we compute the ground target type, but that is after a
&gt; &quot;cache miss&quot;

From all callers of getResolved* this one seems to be the outlier:

In CExprF.reduce() inside &quot;if (this.left instanceof LambdaExpression) {&quot;
That&apos;s the only one using the ground target type, and perhaps unnecessarily so.
Do you want to try replacing the &apos;t&apos; argument by &apos;this.right&apos;?

From a spec p.o.v. using &apos;t&apos; may not be necessary, inside resolveType we use the ground target type anyway and if it helps agreeing on one hash key, couldn&apos;t this be our friend?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462532</commentid>
    <comment_count>59</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-09 15:49:45 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #32)
&gt; 3. Cursory review of https://bugs.eclipse.org/bugs/attachment.cgi?id=247627

part of the change in RE has crept into commit 817f5b60f1b5283073ee91db13e8dcaec6a51e5d, needs to be manually merged, when applying the attached patch.

One more issue for the list:

  6. FE has bogus white space changes (wow I&apos;m finding &quot;problems&quot; :) )

I didn&apos;t immediately understand the changes in ProblemReporter.invalidMethod, will return to this later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462623</commentid>
    <comment_count>60</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 20:42:40 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #58)

&gt; In CExprF.reduce() inside &quot;if (this.left instanceof LambdaExpression) {&quot;
&gt; That&apos;s the only one using the ground target type, and perhaps unnecessarily
&gt; so.
&gt; Do you want to try replacing the &apos;t&apos; argument by &apos;this.right&apos;?
&gt; 
&gt; From a spec p.o.v. using &apos;t&apos; may not be necessary, inside resolveType we use
&gt; the ground target type anyway

It could be too late for inference. I think CEF.fGTT adds additional type
variables for explicitly typed lambdas for functional interface parameterization inference - no ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462627</commentid>
    <comment_count>61</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 20:55:02 -0400</bug_when>
    <thetext>7. Tighten capture semantics. Right now we use ASTNode, sourceEnd pair.
This may not be enough as shown by the changes made for Assignment and CastExpression - for these expressions, the contained expression&apos;s source
end overlaps the containing expression&apos;s source end. A better solution
would be to use ASTNode, sourceEnd, sourceStart.

8. Present capture interning code likely to introduce performance problems.
For a given wildcard all captures go in the same same linear list across all
modules compiled under the same LookupEnv*. Dj vu all over again.

9. On master we bypass post inference compatibility checks in Scope.cCM.
On the proposed solution, we by pass post inference compatibility checks in 
Scope.cCM if IC18.stepCompleted &gt;= TYPE_INFERRED. This needs to be adjusted
so that these checks are not redone for arguments pertinent to applicability
as this can wastefully trigger re-inference through isCompatibleWith calls.

10. On master as well on this patch we are skipping 15.12.3 Compile-Time Step 3
for Java 8 ??</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462648</commentid>
    <comment_count>62</comment_count>
      <attachid>247783</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 23:53:18 -0400</bug_when>
    <thetext>Created attachment 247783
Incremental fix to bug 444891 (specification amendment)

(In reply to Srikanth Sankaran from comment #51)
&gt; Created attachment 247764 [details]
&gt; Incremental fix to bug 444891 (specification amendment)

&gt; The one outlier is https://bugs.eclipse.org/bugs/show_bug.cgi?id=439594.
&gt; This was tagged as a duplicate but problem persists - There should be
&gt; something
&gt; more there that should be investigated. I&apos;ll reopen that bug shortly.

Actually, it is very much a duplicate, but was failing due to a small error
in the previous patch. (Instead of passing along the boolean `interleaved&apos;
I was passing false incorrectly from addConstraintsToC into addConstraintsToC_OneExpr. A one token correction fixes the problem.

I should also mention apart from the fix for the spec amendment, this patch
also sneaks in:

     - Lambda copy caching.
     - A bug fix to lambda shape analysis,
     - A performance fix to isBoxingCompatibile, It does not make sense
for LE, RE and AE and for MS only on occasion (when the target type is
a primitive or boxed primitive) We should not trigger expensive reinference
in these cases.
     - Gets rid of a a couple of bogus uncapture() calls.
     - Cleanups to a couple of places that materialize lambda return
expressions in a convoluted way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462808</commentid>
    <comment_count>63</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 06:59:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #59)

&gt;   6. FE has bogus white space changes (wow I&apos;m finding &quot;problems&quot; :) )

IIRC, this indentation problem is fixed in one of the later incremental
patches.

That said, some files have undergone significant change: most notably
AE, Scope and IC18 and some amount of noise diff sneaked in - sorry about
that,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463248</commentid>
    <comment_count>64</comment_count>
      <attachid>247816</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 05:56:36 -0400</bug_when>
    <thetext>Created attachment 247816
Incremental fix to bug 432626

During 18.5.2 bullet 3.3.1, we hit a snag.

We see two types HashMap&lt;K#8,V#9&gt; and HashMap&lt;K#8,ArrayList&lt;T&gt;&gt; and
conclude they are two different parameterizations of the same generic class 
or interface.

But current bound set contains the instantiation V#9 = ArrayList&lt;T&gt;
and they are the one and the same.

Fix to to compare after application of instatiations.

This patch also contains a couple of clean ups in CTF and RTB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463262</commentid>
    <comment_count>65</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-11 09:20:15 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #64)

I made a note in bug 428061 comment 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463280</commentid>
    <comment_count>66</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 12:15:33 -0400</bug_when>
    <thetext>Stephan, when only applicability is inferred, would be wrong to leave
unresoved type variables instatiated by themselves as opposed to jlO ? 

This would simplify post inference compatibility checking.

What i would like to implement is:

    - if invocation type inferred, trust inference completely and skip any
compatibility checks

    - If only applicability was inferred, skip compatibility checks for
arguments pertinent to applicability, but still check those parameters
whose arguments were not pertinent to applicability.

    The latter step is weed out obviously incompatible cases such as
a lambda with a bad target type. By admitting patently incompatible methods
we make MSMB deal with them and sometime run into ambiguity or other problems.

    This scheme would work well, if the PGMB computed after just applicability
does not have jlO substitutions, but instead has the unresolved type variables
intact. 

    Since we anyway toss out any resolutions and start with the shallow
method for further inference, there should be no issues ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463296</commentid>
    <comment_count>67</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-11 16:23:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #60)
&gt; (In reply to Stephan Herrmann from comment #58)
&gt; 
&gt; &gt; In CExprF.reduce() inside &quot;if (this.left instanceof LambdaExpression) {&quot;
&gt; &gt; That&apos;s the only one using the ground target type, and perhaps unnecessarily
&gt; &gt; so.
&gt; &gt; Do you want to try replacing the &apos;t&apos; argument by &apos;this.right&apos;?
&gt; &gt; 
&gt; &gt; From a spec p.o.v. using &apos;t&apos; may not be necessary, inside resolveType we use
&gt; &gt; the ground target type anyway
&gt; 
&gt; It could be too late for inference. I think CEF.fGTT adds additional type
&gt; variables for explicitly typed lambdas for functional interface
&gt; parameterization inference - no ?

To avoid potential misunderstanding: I didn&apos;t mean to delete the call to fGTT, only to not use its result &apos;t&apos; in the call to getResolvedCopy*.

But I&apos;m not on firm grounds yet ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463297</commentid>
    <comment_count>68</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-11 16:34:16 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #66)
&gt; This scheme would work well, if the PGMB computed after just applicability
&gt; does not have jlO substitutions, but instead has the unresolved type
&gt; variables intact. 

I&apos;m confused: I understood that after only applicability inference we don&apos;t produce any PGMB but a PolyParameterizedGenericMethod?

What am I missing?

BTW, I plan to get started on the core review on Tuesday.

I found your recommendation in comment 32 very helpful. Is this still applicable 30+ comments later?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463337</commentid>
    <comment_count>69</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 20:15:44 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #68)

&gt; I&apos;m confused: I understood that after only applicability inference we don&apos;t
&gt; produce any PGMB but a PolyParameterizedGenericMethod?

Yes, but a PPGMB is a PGMB. PPGMB is just a marker class that wraps the
PGMB produced by applicability inference. It has no other state or behavior.
We may as well set a bit in the PGMB to say only applicability was inferred
or alternately consult IC18.stepCompleted to concluded that the MessageSend
should announce itself as a poly expression, but using the new &quot;marker&quot; class
makes the design intent clear.

&gt; BTW, I plan to get started on the core review on Tuesday.

Sounds great.

&gt; I found your recommendation in comment 32 very helpful. Is this still
&gt; applicable 30+ comments later?

For the most part should be. I&apos;ll take a look and refresh later today if needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463372</commentid>
    <comment_count>70</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 05:21:00 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #66)
&gt; Stephan, when only applicability is inferred, would be wrong to leave
&gt; unresoved type variables instatiated by themselves as opposed to jlO ? 
&gt; 
&gt; This would simplify post inference compatibility checking.

I am about to give up on this problem, I am not sure it is solvable without
a whole lot of AI.

I&apos;ll shortly post a patch that treads the middle path by:

    - Not doing any post inference compatibility checks if full inference
was completed.

    - If only applicability was inferred, skip compatibility checks for
all arguments pertinent to applicability.

i.e trust inference engine fully for the above scenarios.

   - When only applicability was inferred, if argument is an functional
type, assert that parameter is also and otherwise weed out the method.

    - If the PPGMB&apos;s parameter does not mention jlO, then do full checks
for functional expression compatibility.

I don&apos;t think more can be done easily. The PPGMB is a chimera that doesn&apos;t
lend itself well to compatibility checks due to partial resolution and
object substitutions for the rest.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463374</commentid>
    <comment_count>71</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 05:58:42 -0400</bug_when>
    <thetext>I&apos;ll repost a cumulative patch shortly. To facilitate the review here
is a (re) summary of key changes:

    1. All poly expression resolution against eventual target type is
centralized in one place. ASTNode.resolvePolyExpressionArguments.

    2. Poly expressions are reevaluated, we don&apos;t just update the bindings.
On the +ve side, this enables all the checks that take place post method
resolution to take place. On the -ve side, ATM, this means some wasteful 
reinference, but we have a task in follow up task list to have the results 
forwarded to avoid reinference. I&apos;ll address this as a top priority task 
post review and release of the work here.

    3. Poly allocation expression resolution got overhauled completely.
The three part resolution is back as one part in AE.resolveType.

    4. Perhaps the biggest change of all is that MessageSend announces
itself as poly expression by returning a PolyTypeBinding when required.

    5. All poly expressions implement isCompatibleWith and 
isBoxingCompatibleWith thereby eliminating the need for all the
inner invocation compatibility checking code in Scope. The existing
Java 7 overload resolution code &quot;just works&quot; given these APIs.

    6. In master we skip post inference compatibility checks whether
or not full inference is run. We make an improved effort to weed out
incompatible methods now with the proposed solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463375</commentid>
    <comment_count>72</comment_count>
      <attachid>247819</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 06:11:12 -0400</bug_when>
    <thetext>Created attachment 247819
Cumulative proposed patch

This patch merged all the incremental fixes and also includes a candidate
fix for bug 432605 based on the interpretation that a captured wildcard
has to be treated as a wildcard for type argument containment assertion
purposes. If we hear otherwise from the spec lead, we can back out this
change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463386</commentid>
    <comment_count>73</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 07:23:35 -0400</bug_when>
    <thetext>Here is the revised structured review plan: (I am halting all work on this
so the goal post don&apos;t keep shifting)

1. Since your last glance through, the changed test suites:

GenericTypeTest.java
GenericsRegressionTest_1_8.java
LambdaExpressionsTest.java
NegativeLambdaExpressionsTest.java
NullTypeAnnotationTest.java

have had several tests added or enabled.

Only a couple of tests got _modified_. These are safe changes and so no need
to review these again. For all new and modified tests, behavior has been
compared with 8u20.

2. These files have minimal peripheral changes. Some of it you have skimmed
through already, some new. It wouldn&apos;t hurt to take glance through afresh to
regain context. I estimate that 15 minutes should be plenty.

Expression.java
CodeSnippetScope.java
RawTypeBinding.java
SyntheticFactoryMethodBinding.java
TypeBinding.java
ProblemReporter.java
FunctionalExpression.java
ReferenceExpression.java
PolyParameterizedGenericMethodBinding.java
PolyTypeBinding.java
ProblemReasons.java
ConditionalExpression.java
LambdaExpression.java
QualifiedAllocationExpression.java

3. That leaves us with 11 files requiring close inspection. These can be
broken down into an easy set and a more involved set.

3.A Easy set:  summary of changes:
---------------------------------

(a) ASTNode.java

    - One version of ResolvePolyExpressions went away and the other one got
simplified. I suggest that the comparator be used only for structure compare
and the (only) method be directly studied - it is only 30 LOC.

(b) Invocation.java:

    - Loses the APIs:
          - usesInference
          - updateBindings
          - innersNeedUpdate
          - InnerUpdateDone
          - innerInferenceHelper

     and a couple of other APIs lose a parameter or two.
    
      Again, a structure compare and a glance through would be best.

(c) ExplicitConstructorCall.java:

     - Adjusts to changes in Invocation.
     - ECC not being an expression, some of the Invocation APIs don&apos;t
make sense. Changed to either just return.

(d) MessageSend.java (ignore whitespace in comparator)

    - Announces itself as a poly expression when required.
    - Implements isCompatibleWith and isBoxingCompatibleWith
    - Adjusts to Invocation interface changes.
    - Loses inner inference helper.

3.B More involved set with description of changes:
--------------------------------------------------

(a) BoundSet.java:

    - Capture bound handling changes.
    - Correction to 18.5.2 bullet 3.3.1 handling to consult instantiations.


(b) ConstraintTypeFormula.java:

    - Experimental fix for bug 432605 that treats as a captured wildcard
as a wildcard for type argument containment assertions.

    - Handling POLY_TYPEs inside the engine in type equations.

    - isInsignificantParameterized eliminated and replaced with a call
to TypeBinding.isParameterizedWithOwnVariables.

(c) ConstraintExpressionFormula.java:

    - Reduction against a proper type is handled polymorphically via
isCompatibleWith and isBoxingCompatibleWith.

    - Pass proper scope to Invocation.binding()

    - For inner invocations interleaved by a lambda, reduce is a nop
as the C set construction code has effectively lifted everything that
needs to be lifted that would amount to B3. We must lift them at C
set construction time because type variables would need substitution with
inference variables before they get on the C set.

    - Lambda return expressions directly materialized with resultExpressions

    - Fixes to reference expression reduction to avoid AIOOB, implement
missing/inappropriate captures, to not treat ArrayList&lt;T&gt;::new as diamond
inference, proper handling of capture bounds in inferPolyInvocationType
etc.

(d) ParameterizedGenericMethodBinding.java:

    - All 1.8+ code moved into cCM18
    - We don&apos;t use inference level anymore. If target type is available
or if context does not provide a target type, we proceed to infer invocation
type.

(e) Scope.java

    - Inference level not passed around anymore.
    - Various places that would call inferInvocation type don&apos;t do
that anymore since PGMB.cCM18 already proceeds to do that.
    - Make best effort basis compatibility checks post applicability
inference.
    - parameterCompatibilityLevel18, compatibilityLevel18FromInner and
some helpers used by them are eliminated.
    - getExactMethod and getExactConstructor return a PGMB when required.
    - mSMB leading stanza got simplified/eliminated.
    - parameterCompatibilityLevel(MethodBinding, TypeBinding[], boolean)
makes an effort to weed out methods that are blatant mismatches.
    - Other assorted obvious changes.

(f) AllocationExpression.java (This file is easier directly reviewed)

    - We don&apos;t use ResolutionState abstraction anymore.
    - Loses inner inference helper.
    - Three part resolution merged into one.
    - Implements isCompatibleWith and isBoxingCompatibleWith
    - Adjusts to changes in Invocation.

(g) InferenceContext18.java:

    - Loses a bunch of abstraction, state and behavior dealing with
inner poly expression rebinding.
    - Corrections to javadoc and comments to bring it up to date
    - Support for nested inference with an interleaving lambda.
This calls for us to lift the type variables and initial bounds from
inner to current context. This needs to happen here and now during C set
construction because the formulas that get on the C set should see the
inference variable and not the type variables. So input variables and
output variables could be computed correctly and formulas could be
sequenced/scheduled properly for reduction to make progress.

That should be it. Thanks Stephan.

As promised, I&apos;ll freeze on the changes until the review is over and not
go on sneaking in more and more. We have rounded up all the nasties anyways.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463389</commentid>
    <comment_count>74</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 07:27:37 -0400</bug_when>
    <thetext>Upto date list of follow up tasks:

Follow up tasks so far:

1. AllocationExpression uses common code blocks replicated in 2-3
places, These could be factored into a method.

2. Further improvements to isCompatibeWith by caching results.

3. When inner is reevaluated, it computes its binding all over.
We need to arrange for results forwarded/cached etc.

4. CaptureBinding.substituteInferenceVariable should check for
need to initialize superclass and super interfaces in the substitute.

5. Tighten capture semantics. Right now we use ASTNode, sourceEnd pair.
This may not be enough as shown by the changes made for Assignment and CastExpression - for these expressions, the contained expression&apos;s source
end overlaps the containing expression&apos;s source end. A better solution
would be to use ASTNode, sourceEnd, sourceStart.

6. Present capture interning code likely to introduce performance problems.
For a given wildcard all captures go in the same same linear list across all
modules compiled under the same LookupEnv*. Dj vu all over again.

7. See if we can improve further on post applicability compatibility checks.

8. On master as well on this patch we are skipping 15.12.3 Compile-Time 
Step 3 for Java 8 ??</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463390</commentid>
    <comment_count>75</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-12 07:28:30 -0400</bug_when>
    <thetext>I propose that we address only absolute ship stoppers before release and
move all others to post release in a follow up ticket. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464278</commentid>
    <comment_count>76</comment_count>
      <attachid>247850</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-13 23:34:19 -0400</bug_when>
    <thetext>Created attachment 247850
Cumulative proposed patch

(In reply to Srikanth Sankaran from comment #72)
&gt; Created attachment 247819 [details]
&gt; Cumulative proposed patch
&gt; 
&gt; This patch merged all the incremental fixes and also includes a candidate
&gt; fix for bug 432605 based on the interpretation that a captured wildcard
&gt; has to be treated as a wildcard for type argument containment assertion
&gt; purposes. If we hear otherwise from the spec lead, we can back out this
&gt; change.

I heard back from the spec lead that a captured wildcard is to be treated 
as a type and not as a wildcard. Happily we don&apos;t need to deviate in our
treatment to fix https://bugs.eclipse.org/bugs/show_bug.cgi?id=432605. The
whole confusion came about because of my disabling of interned captures 
while null analysis is turned on (bug 446434).

The patch has been updated to backout this hacky/unwarranted change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464425</commentid>
    <comment_count>77</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-10-14 03:55:43 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #76)
&gt; Created attachment 247850 [details]
&gt; Cumulative proposed patch

All JDT UI tests are green with this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464434</commentid>
    <comment_count>78</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 04:08:12 -0400</bug_when>
    <thetext>(In reply to Noopur Gupta from comment #77)

&gt; All JDT UI tests are green with this patch.

Thanks Noopur. 

Jay has offered to verify that we build JRE8 alrigtht with this patch and
Shankha will work with other IBM departments to get some stress testing
done. Thanks Jay and Shankha.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464570</commentid>
    <comment_count>79</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 07:00:27 -0400</bug_when>
    <thetext>Defining the goal post to be attachment 247850 from comment 76 (and assuming bug 446434 has been taken care of - test result pending) I&apos;m starting the main review now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464581</commentid>
    <comment_count>80</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 07:19:47 -0400</bug_when>
    <thetext>RawTypeBinding does participate in capture() (inherited from PTB), but in uncapture() we explicitly opt out of the inherited behavior. Do you have a quick explanation, why?

I wouldn&apos;t be worried, were it not for RawTypeBinding.initializeArguments() ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464613</commentid>
    <comment_count>81</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 08:01:33 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #71)
&gt;     2. Poly expressions are reevaluated, we don&apos;t just update the bindings.
&gt; On the +ve side, this enables all the checks that take place post method
&gt; resolution to take place. On the -ve side, ATM, this means some wasteful 
&gt; reinference, but we have a task in follow up task list to have the results 
&gt; forwarded to avoid reinference. I&apos;ll address this as a top priority task 
&gt; post review and release of the work here.

Looking at the removal of SyntheticFactoryMethodBinding.applyTypeArgumentsOnConstructor():
This method was introduced to obtain a useful map key for AE.inferenceContexts

After the removal we are in danger not to find some registered inference contexts (original key: factory method, lookup key: constructor).

Could this difference be masked by the fact that now from ASTNode.resolvePolyExpressionArguments() we directly go into:

ParameterizedGenericMethodBinding.computeCompatibleMethod18(MethodBinding, TypeBinding[], Scope, InvocationSite) line: 166	
ParameterizedGenericMethodBinding.computeCompatibleMethod(MethodBinding, TypeBinding[], Scope, InvocationSite) line: 81	
MethodScope(Scope).computeCompatibleMethod(MethodBinding, TypeBinding[], InvocationSite, boolean) line: 733	
MethodScope(Scope).computeCompatibleMethod(MethodBinding, TypeBinding[], InvocationSite) line: 690	
MethodScope(Scope).getStaticFactory(ParameterizedTypeBinding, ReferenceBinding, TypeBinding[], InvocationSite) line: 4947	
AllocationExpression.inferElidedTypes(ParameterizedTypeBinding, ReferenceBinding, TypeBinding[], Scope) line: 562	
AllocationExpression.resolveType(BlockScope) line: 470	
ASTNode.resolvePolyExpressionArguments(Invocation, MethodBinding, TypeBinding[], BlockScope) line: 674	

... without any attempt to re-use the existing inference contexts?

Did the removed method create any trouble? Otherwise we might choose to keep it (incl. its use) to avoid bad surprises when later we try to restore some of the caching-related code?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464616</commentid>
    <comment_count>82</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 08:07:53 -0400</bug_when>
    <thetext>On error reporting:

I see in the patch:
- some additional secondary errors in test cases
- removal of an attempt in ProblemReporter to delegate reporting to an outer inference context to avoid secondary errors.

Is this tendency to report more errors intended in terms of user experience or a result from technical considerations?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464645</commentid>
    <comment_count>83</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 08:58:45 -0400</bug_when>
    <thetext>Nitpick re ConditionalExpression:

isPertinentToApplicability() has comment:  &quot;// not perfect.&quot;
From my p.o.v. this implementation *is* perfect, if you see reason against please specify :)

isFunctionalType() uses || where I&apos;d expect &amp;&amp;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464653</commentid>
    <comment_count>84</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 09:15:58 -0400</bug_when>
    <thetext>Nitpick re ASTNode:

Change removes the attempt to fetch variableArity from an existing inference context. 

If such inference context exists, infCtx.isVarArgs() is authoritative.

The remaining check is best effort to recover this information.

I have no counter example, so the common sense checks *may* be sufficient?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464663</commentid>
    <comment_count>85</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 09:26:21 -0400</bug_when>
    <thetext>More re ASTNode:

Removed javadoc snippet seems to be still relevant:
 * If this resolving produces better types for any arguments, update the &apos;argumentTypes&apos; array in-place as an
 * intended side effect that will feed better type information in checkInvocationArguments() and others.


Regarding this check:
  if (!lambda.isCompatibleWith(parameterType, scope) || lambda.hasErrors())
I found no test requiring the first part. Is it needed? I was curious how we could get into that situation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464681</commentid>
    <comment_count>86</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 09:53:58 -0400</bug_when>
    <thetext>ExplicitConstructorCall:

Why doesn&apos;t this remember any inference contexts any more?

I&apos;d assume that test coverage for this part is low, so not seeing a test that needs it would be a weak reason for removing functionality, IMHO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464714</commentid>
    <comment_count>87</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 10:16:00 -0400</bug_when>
    <thetext>I was thinking about the type of PolyTypeBinding.expression: I thought the design might be clearer if we invent an interface (PolyExpression or such) and move/copy all methods required by PolyTypeBinding into that interface.

Unfortunately, methods like Expr.isCompatibleWith are used in a few contexts where arbitrary expressions are possible, not just potential PolyExpressions. While the group of nodes that have meaningful implementations is small, requiring additional (expr instanceof PolyExpression) checks might be overkill.

Just thinking aloud.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464737</commentid>
    <comment_count>88</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 10:26:21 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #80)
&gt; RawTypeBinding does participate in capture() (inherited from PTB), but in
&gt; uncapture() we explicitly opt out of the inherited behavior. Do you have a
&gt; quick explanation, why?
&gt; 
&gt; I wouldn&apos;t be worried, were it not for RawTypeBinding.initializeArguments()
&gt; ...

I don&apos;t think it matters in terms of observable behavior, but for clarity&apos;s
sakes, RTB should override capture to return itself unmodified.

I don&apos;t understand what RTB.initializeArguments purports to do, but in any
event it cannot introduce a wildcard into the picture so leaving capture
to be inherited from PTB should have no effect, but I&apos;ll override it in RTB.

(In reply to Stephan Herrmann from comment #81)

&gt; Did the removed method create any trouble? Otherwise we might choose to keep
&gt; it (incl. its use) to avoid bad surprises when later we try to restore some
&gt; of the caching-related code?

Sounds good, I&apos;ll add it to the follow up tasks.

(In reply to Stephan Herrmann from comment #82)

&gt; Is this tendency to report more errors intended in terms of user experience
&gt; or a result from technical considerations?

The honest answer is it is neither. I made a good bit of effort to minimize
diagnostic differences and we are where we are with this patch after
such effort. I think we should take a fresh look at this whole issue
separately perhaps under 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=406614 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=404675
https://bugs.eclipse.org/bugs/show_bug.cgi?id=428489
https://bugs.eclipse.org/bugs/show_bug.cgi?id=400831

merged into one project.

(In reply to Stephan Herrmann from comment #83)
&gt; Nitpick re ConditionalExpression:
&gt; 
&gt; isPertinentToApplicability() has comment:  &quot;// not perfect.&quot;
&gt; From my p.o.v. this implementation *is* perfect, if you see reason against
&gt; please specify :)

I think this one is fine and the comment can be deleted.

&gt; isFunctionalType() uses || where I&apos;d expect &amp;&amp;.

Here it is intentional even if it seems a bit odd for what could be
seen to be an API.

isFunctionalType() is used eliminate incompatible methods in scope.cCM.
If one arm of the ternary is a functional type, that is enough to assert
that the parameter should be a functional interface. Post applicability
inference, I am checking only functional arguments for compatibility.
Checking more/all arguments is not incorrect, but a waste of time.

I see two possibilities: Rename the method to be mayBeFunctionalType or
kindaSortaFunctionalType :) or document that CE behaves this way, so 
if in future we make use of this API for additional purposes, there
is documentation.

(In reply to Stephan Herrmann from comment #84)
&gt; Nitpick re ASTNode:
&gt; 
&gt; Change removes the attempt to fetch variableArity from an existing inference
&gt; context. 

I think it should be restored along with doing what the TODO suggests.
(Long ago there was a mechanism to let the expressions know they are
arguments at the ellipsis position.) Alternately we should be able to
trivially determine if variable arity was a concern in overloading/type
inference by simply checking the argument to see if it is an array or
element.

(In reply to Stephan Herrmann from comment #85)
&gt; More re ASTNode:
&gt; 
&gt; Removed javadoc snippet seems to be still relevant:
&gt;  * If this resolving produces better types for any arguments, update the
&gt; &apos;argumentTypes&apos; array in-place as an
&gt;  * intended side effect that will feed better type information in
&gt; checkInvocationArguments() and others.

Correct, this should be reinstated.

&gt; Regarding this check:
&gt;   if (!lambda.isCompatibleWith(parameterType, scope) || lambda.hasErrors())
&gt; I found no test requiring the first part. Is it needed? I was curious how we
&gt; could get into that situation.

Actually, I put it in there because some test produced more/less messages
than required, don&apos;t recall which - it may not have been from the suite,
but from some code I played with in the IDE.

The thing is LE.resolveType can finish successfully when it should not - 
for example, value/void compatibility is not checked during resolve and 
so hasErrors() will return false if that is the only sort of error.

Once Sasi&apos;s work on lambda shape analysis is integrated, this should be
a non-issue. The new analyzeShape() phase can be initiated right within
LE.resolveType

(In reply to Stephan Herrmann from comment #86)
&gt; ExplicitConstructorCall:
&gt; 
&gt; Why doesn&apos;t this remember any inference contexts any more?
&gt; 
&gt; I&apos;d assume that test coverage for this part is low, so not seeing a test
&gt; that needs it would be a weak reason for removing functionality, IMHO.

ECC is not an expression but a statement ? It can never be an inner/nested 
poly expression. So I felt there is no use in preserving the context.

However I already see one use for the inference context. Per earlier /**/ in 
ASTNode.resolvePoly* if we want to check if the method should be seen
to be varargs, it could be useful. However, I think we can simply check
the argument and parameter to see if argument is an array or element type.
expression. Based on how we resolve the ASTNode.resolvePoly* issue, we can
decided on restoring this.

(In reply to Stephan Herrmann from comment #87)
&gt; I was thinking about the type of PolyTypeBinding.expression: I thought the
&gt; design might be clearer if we invent an interface (PolyExpression or such)
&gt; and move/copy all methods required by PolyTypeBinding into that interface.
&gt; 
&gt; Unfortunately, methods like Expr.isCompatibleWith are used in a few contexts
&gt; where arbitrary expressions are possible, not just potential
&gt; PolyExpressions. While the group of nodes that have meaningful
&gt; implementations is small, requiring additional (expr instanceof
&gt; PolyExpression) checks might be overkill.
&gt; 
&gt; Just thinking aloud.

I think it is useful to provide a IPolyExpression interface that is
implemented by the 5 ASTNodes - with &quot;default methods&quot; in Expression
that are overridden in specific types. If nothing else, it makes the
design clear and will also help unify the rest of the work. E.g:
Invocation.binding(), LE.getResolvedCopy* and RE.findCompile* should
all ideally have the same name.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464745</commentid>
    <comment_count>89</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 10:34:12 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #88)

&gt; Invocation.binding(), LE.getResolvedCopy* and RE.findCompile* should
&gt; all ideally have the same name.

BTW, we have punted so far on the issue of what should be the return type
of LE.resolveType and RE.resolveType - It should ideally be a new abstraction
FunctionTypeBinding which is a subtype of SourceTypeBinding. There is a
skeleton in LambdaExpression.getTypeBinding().LambdaTypeBinding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464751</commentid>
    <comment_count>90</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 10:36:52 -0400</bug_when>
    <thetext>See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430#c35.

But this is a separate project - not an urgent one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464789</commentid>
    <comment_count>91</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 11:03:59 -0400</bug_when>
    <thetext>A change in BoundSet reminded me of this &quot;ancient&quot; question:

(In reply to Srikanth Sankaran from comment #26)
&gt; (10) After the round of incorporation, we immediately call captures.clear()
&gt; Is that correct ? There are quite a few clauses that read like if there exist
&gt; a capture bound ... for example 18.4 requires it. Should we not be clearing
&gt; this. but instead be setting a bit to say we have processed the capture
&gt; bound ?

I guess this is still valid, right?

Indeed incorporation makes no mentioning of deleting capture bounds, only resolution does.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464802</commentid>
    <comment_count>92</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 11:15:01 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #91)
&gt; A change in BoundSet reminded me of this &quot;ancient&quot; question:
&gt; 
&gt; (In reply to Srikanth Sankaran from comment #26)
&gt; &gt; (10) After the round of incorporation, we immediately call captures.clear()
&gt; &gt; Is that correct ? There are quite a few clauses that read like if there exist
&gt; &gt; a capture bound ... for example 18.4 requires it. Should we not be clearing
&gt; &gt; this. but instead be setting a bit to say we have processed the capture
&gt; &gt; bound ?
&gt; 
&gt; I guess this is still valid, right?
&gt; 
&gt; Indeed incorporation makes no mentioning of deleting capture bounds, only
&gt; resolution does.

Yes, at the moment, the patch retains the behavior on master. We don&apos;t have
a test case that establishes that clearing them after incorporation is a 
problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464966</commentid>
    <comment_count>93</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 13:30:48 -0400</bug_when>
    <thetext>Diving into the changes in BoundSet, apparently we need to resume the discussion in comment 24 - comment 27.

(In reply to Srikanth Sankaran from comment #26)
&gt; (In reply to Stephan Herrmann from comment #25)
&gt; 
&gt; &gt; In bug 445274 comment 2 I acknowledged this as a bug. Today, however, I
&gt; &gt; believe this was premature: the word &quot;capture&quot; in these constraints is just
&gt; &gt; a symbol that must not be evaluated, because when processing the capture
&gt; &gt; bound we only operate on the original G, A1, ... An (see, e.g., 18.3.2). No
&gt; &gt; part of the spec seems to use the (evaluated) *type* &quot;capture(G&lt;A1,...An&gt;)&quot;.
&gt; 
&gt; You are right that 18.3.2 operates on original G, However, I don&apos;t think
&gt; capture is just a symbol there - 18.5.2 &quot;Otherwise, if R  is a parameterized
&gt; type, G&lt;A1, ..., An&gt;,&quot; portion needs a capture for correctness. So I think
&gt; the right thing to do is to apply the capture, but for 18.3.2 operate on
&gt; the uncaptured type.

I&apos;m not convinced by your reasoning. If I say &quot;x is bounded by the capture of y&quot; there&apos;s nothing requiring me to actually compute the &quot;capture of y&quot;. Performing capture and uncapture is a noop, unless someone really refers to &quot;capture of y&quot; as a type. I can&apos;t find this in the spec.

Interestingly, reverting this change causes regressions, because of the way you continue using cgA (inside BoundSet.incorporate), so let&apos;s include that in the discussion:

(In reply to Srikanth Sankaran from comment #27)
&gt; ...
&gt; Given this and the code above what would allow us to discover
&gt; 
&gt; &quot;?#1 = capture# of ?&quot; and thereby discover A#1 = capture# of ?
&gt; 
&gt; Nothing.
&gt; 
&gt; Ergo.
&gt; 
&gt; BoundSet.capture should be passed in the parameterized type after wildcard
&gt; capture and it should arrange to discover &quot;?#1 = capture# of ?&quot; and propagate
&gt; that.

Your inventing! :)

Do you have any backing by the spec, or can you get it from Oracle?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464971</commentid>
    <comment_count>94</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 13:48:44 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #93)

&gt; I&apos;m not convinced by your reasoning. If I say &quot;x is bounded by the capture
&gt; of y&quot; there&apos;s nothing requiring me to actually compute the &quot;capture of y&quot;.
&gt; Performing capture and uncapture is a noop, unless someone really refers to
&gt; &quot;capture of y&quot; as a type. I can&apos;t find this in the spec.

The specification calls for 

&quot;Otherwise, if R  is a parameterized type, G&lt;A1, ..., An&gt;, and one of A1, 
..., An is a wildcard, then, for fresh inference variables 1, ..., n, the
constraint formula G&lt;1, ..., n&gt;  T is reduced and incorporated, along 
with the bound G&lt;1, ..., n&gt; = capture(G&lt;A1, ..., An&gt;), with B2.

I think this is as explicit as it needs to get ?

That we add the capture bound to a set and incorporate later is an
implementation detail. What would reducing and incorporating the bound
G&lt;1, ..., n&gt; = capture(G&lt;A1, ..., An&gt;) right then and there do/look
like ?

&gt; Interestingly, reverting this change causes regressions, because of the way
&gt; you continue using cgA 

No, I don&apos;t think it is because of the way ... 

It is because that is what is required to be done :)

See there needs to NECESSARILY be a capture of the return type as it
is an expression and so and must go through capture conversion. Capture 
there  is not a symbol - what else would/could it symbolize ? This is the 
only mention of capture there.

&gt; Do you have any backing by the spec, or can you get it from Oracle?

This looks too cut and dry IMHO to escalate ? 

Just as a parallel see that in many other places the spec calls for 
captures - in reduce reference expression compatibility for one example.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464980</commentid>
    <comment_count>95</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 14:06:14 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #94)
&gt; (In reply to Stephan Herrmann from comment #93)
&gt; 
&gt; &gt; I&apos;m not convinced by your reasoning. If I say &quot;x is bounded by the capture
&gt; &gt; of y&quot; there&apos;s nothing requiring me to actually compute the &quot;capture of y&quot;.
&gt; &gt; Performing capture and uncapture is a noop, unless someone really refers to
&gt; &gt; &quot;capture of y&quot; as a type. I can&apos;t find this in the spec.
&gt; 
&gt; The specification calls for 
&gt; 
&gt; &quot;Otherwise, if R  is a parameterized type, G&lt;A1, ..., An&gt;, and one of A1, 
&gt; ..., An is a wildcard, then, for fresh inference variables 1, ..., n, the
&gt; constraint formula G&lt;1, ..., n&gt;  T is reduced and incorporated, along 
&gt; with the bound G&lt;1, ..., n&gt; = capture(G&lt;A1, ..., An&gt;), with B2.
&gt; 
&gt; I think this is as explicit as it needs to get ?

This still doesn&apos;t convince me, but debugging this disagreement may indeed be beside the point.

The main point I&apos;m objecting is the additional formula you seem to be inventing inside incorporate() (and which uses the capture):

  if (!reduceOneConstraint(context, ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))
	return false;

Do you have a reference for this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464983</commentid>
    <comment_count>96</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 14:10:37 -0400</bug_when>
    <thetext>Oops, this typo might be significant:

(In reply to Stephan Herrmann from comment #93)
&gt; Your inventing! :)

Meant to say: &quot;You&apos;re inventing&quot;, implying that inventing new rules is s.t. we are not allowed to do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464985</commentid>
    <comment_count>97</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 14:18:00 -0400</bug_when>
    <thetext>Inside ConstraintTypeFormula.reduceSubType() there&apos;s a new
   case Binding.POLY_TYPE:

I wanted to watch this code block live and in color, but RunAllJava8Tests doesn&apos;t seem to trigger this. Do you recall if this was required by any tests or added just to keep us honest about all possible cases?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464988</commentid>
    <comment_count>98</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 14:23:44 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #95)

&gt; This still doesn&apos;t convince me, but debugging this disagreement may indeed
&gt; be beside the point.
&gt; 
&gt; The main point I&apos;m objecting is the additional formula you seem to be
&gt; inventing inside incorporate() (and which uses the capture):
&gt; 
&gt;   if (!reduceOneConstraint(context,
&gt; ConstraintTypeFormula.create(bound.right, cai, ReductionResult.SAME)))
&gt; 	return false;
&gt; 
&gt; Do you have a reference for this?

Let us go back to the your comment#25:

(In reply to Stephan Herrmann from comment #25)

&gt;Here I see some room for interpretation, indeed. spec speaks of the full 
&gt; set of &quot;fresh inference variables 1, ..., n&quot;, without explicit &gt;exceptions. I&apos;m &gt;already excluding inference variables. When substituting &gt;String by i, aren&apos;t &gt;we immediately deriving a bound i = String ? 

Let us ignore What ever is the means by which we would derive the bound
i = String. It is a requirement for inference to succeed that i must be
found to be String.

In a similar fashion, in these programs that fail without the change under
discussion, we must discover that

&quot;?#1 = capture# of ?&quot; and therefore discover A#1 = capture# of ?

Now we can certainly argue/debate whether the code change in place is
the best way to get it done. I am open to suggestions on improvements or
a cleaner fix - Just that not applying capture and dropping a vital clue to
solving the inference puzzle will necessarily mean we will fail.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464989</commentid>
    <comment_count>99</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 14:25:55 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #97)
&gt; Inside ConstraintTypeFormula.reduceSubType() there&apos;s a new
&gt;    case Binding.POLY_TYPE:
&gt; 
&gt; I wanted to watch this code block live and in color, but RunAllJava8Tests
&gt; doesn&apos;t seem to trigger this. Do you recall if this was required by any
&gt; tests or added just to keep us honest about all possible cases?

Strange, I did add it after some test failed !

I didn&apos;t find it surprising that this block would be required there, because
now MessageSend returns a PolyTB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464994</commentid>
    <comment_count>100</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 14:30:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #93)

&gt; &gt; BoundSet.capture should be passed in the parameterized type after wildcard
&gt; &gt; capture and it should arrange to discover &quot;?#1 = capture# of ?&quot; and propagate
&gt; &gt; that.
&gt; 
&gt; Your inventing! :)

Actually adding a bound just for &quot;?#1 = capture# of ?&quot; should suffice
as incorporation should take care of the rest - that surely should not
be objectionable ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465024</commentid>
    <comment_count>101</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 15:59:39 -0400</bug_when>
    <thetext>Here&apos;s how the contention could potentially be resolved:

---------------------------
Change 18.3.2

Add before the bullets:
  Let G&lt;T1,...,Tn&gt; be a capture of G&lt;A1,...,An&gt;.

Change bullet 1
from
 * If Ai is not a wildcard, then the bound i = Ai is implied. 

to
 * If Ai is not a wildcard, then the bound i = Ai is implied.
   Otherwise, the bound i = Ti is implied.

Change bullet 2.1
from
 * i = R implies the bound false
to
 * i = R, if R is not a wildcard, implies the bound false
---------------------------


This would match to your implementation (taking comment 100 into consideration) and passes most [1] tests.

We should suggest this to Dan.

I expect that he will agree that s.t. is missing, but he might come up with a different fix for the problem.



[1] GenericsRegressionTest.testBug431408() indicates that the additional bound i = Ti must only be added inside this branch:

if (ai instanceof WildcardBinding) {
	...
	if (three != null) {
		...
		if (three.sameBounds != null) {
			// HERE

I don&apos;t have an explanation for this, but I have to stop for today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465081</commentid>
    <comment_count>102</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 23:02:12 -0400</bug_when>
    <thetext>See https://bugs.openjdk.java.net/browse/JDK-8055963 and 
https://bugs.openjdk.java.net/browse/JDK-8056092.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465094</commentid>
    <comment_count>103</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 01:07:50 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #101)
&gt; We should suggest this to Dan.
&gt; 
&gt; I expect that he will agree that s.t. is missing, but he might come up with
&gt; a different fix for the problem.

I am prototyping a solution that would follow the spec closely and eliminate
deviations however minor. i.e

    - Create fresh inference variables, not recycle.
    - Not apply capture at inferPolyInvocationType - I think JLS is clear
that capture should not be attempted on non-proper types.
    - Eliminate the changes I made to incorporate dealing with captures
and the propagation by reducing new constraints.
    - Not clear captures after incorporation.
    - In Resolve, CaptureBinding18 should be created with new but with
a factory method that would ensure internment.

Let us see if toeing the line in toto helps.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465107</commentid>
    <comment_count>104</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 01:23:40 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #103)

&gt;     - In Resolve, CaptureBinding18 should be created with new but with

Should not be created with new ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465144</commentid>
    <comment_count>105</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 01:40:20 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #103)

&gt; Let us see if toeing the line in toto helps.

Looks promising on first glance, IC18.freshCapture has some problems.
CaptureBinding.sourceType is set to this.scope.enclosingSourceType().

Can&apos;t be good :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465209</commentid>
    <comment_count>106</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 03:42:02 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #105)
&gt; (In reply to Srikanth Sankaran from comment #103)
&gt; 
&gt; &gt; Let us see if toeing the line in toto helps.
&gt; 
&gt; Looks promising on first glance, IC18.freshCapture has some problems.
&gt; CaptureBinding.sourceType is set to this.scope.enclosingSourceType().
&gt; 
&gt; Can&apos;t be good :)

Hmm, that in itself is OK, but I am checking this part of the code anyways.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465274</commentid>
    <comment_count>107</comment_count>
      <attachid>247885</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 04:52:12 -0400</bug_when>
    <thetext>Created attachment 247885
Patch to remove deviations.

This patch removes a few minor deviations in existing code on master
as well backs out my ad-hoc experimentation.

    - Fresh variables are created for capture bound
    - We used to not call incorporate from reduceAndIncorporate. Fixed.
    - Don&apos;t apply captures on non-proper types.
    - Not clear captures after incorporation.
   
Why would this code fail LET.testCapture ? Perhaps we will get answer if we
study that.

We fail reducing this constrain where the RHS is a Capturebinding18. I don&apos;t
yet know what to make of this:

Type Constraint:
	java.util.Map&lt;K#3,U#4&gt; = &lt;Z#7-Map&lt;K#3,U#4&gt;#7&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465494</commentid>
    <comment_count>108</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 09:16:47 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #107)

&gt; We fail reducing this constrain where the RHS is a Capturebinding18. I don&apos;t
&gt; yet know what to make of this:
&gt; 
&gt; Type Constraint:
&gt; 	java.util.Map&lt;K#3,U#4&gt; = &lt;Z#7-Map&lt;K#3,U#4&gt;#7&gt;

Analysis: 

// --
18.4:

If the bound set contains a bound of the form G&lt;..., i, ...&gt; = 
capture(G&lt;...&gt;) for some i (1  i  n), 

or;

If the bound set produced in the step above contains the bound false;

then let Y1, ..., Yn be fresh type variables whose bounds are as follows:
// --

On master due to our premature clearing of captures from the boundset,
we never reach the &quot;let Y1 .. Yn&quot; portion with capture bounds intact.
We reach this portion of code only for the &quot;Or; if the bound set ...
contains the bound false&quot; portion.

There are only 4 tests in RunAllJava8Tests all from GRT1_8 viz

testBug426671_ok
testBug426671_medium
testBug426671_full
testBug426540

that ever reach here first having created fresh inference variables
in CEF.inferPolyInvocationType. But in all these cases, we reach 18.4
from IC18.inferInvocationType with a request to resolve a subset of
inference variables none of which are the fresh inference variables
created in CEF.inferPolyInvocation*

As a result, we have never encountered certain situations with additional
fresh inference variables and dependencies between them in this portion
of IC18.resolve() 

Now that I have disabled premature clearing of captures, incorporation
is spewing out formulas with CaptureBinding18 in them that CTF is not
prepared to handle.

From my reading of 18.4, ATM, it looks like there is no gap in spec and
we should be able to solve the problem without escalation - Let us see
if this bears out to be true.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465849</commentid>
    <comment_count>109</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 13:22:09 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #108)

&gt; Now that I have disabled premature clearing of captures, incorporation
&gt; is spewing out formulas with CaptureBinding18 in them that CTF is not
&gt; prepared to handle.
&gt; 
&gt; From my reading of 18.4, ATM, it looks like there is no gap in spec and
&gt; we should be able to solve the problem without escalation - Let us see
&gt; if this bears out to be true.

I tied this - unfortunately, this requires a fair amount of 
invention/interpretation along the way.

For example, how are we supposed to reduce this:

java.util.Map&lt;K#3,U#4&gt; = &lt;Z#8-Map&lt;K#3,U#4&gt;#7 extends java.lang.Object&gt; ? 

RHS is CB18, LHS is PTB.

We don&apos;t enter:

if ((this.left.isClass() || this.left.isInterface()) 
						&amp;&amp; (this.right.isClass() || this.right.isInterface())
						&amp;&amp; TypeBinding.equalsEquals(this.left.erasure(), this.right.erasure())) 

what is supposed to the erasure of the &quot;fresh type variable&quot;
&lt;Z#8-Map&lt;K#3,U#4&gt;#7 extends java.lang.Object&gt; ? 

If I invent formulas like:

				if (this.right.isSyntheticTypeVariable()) {
					CaptureBinding18 cb18 = (CaptureBinding18) this.right;
					return ConstraintTypeFormula.create(cb18.getInferenceVariable(), this.left, SAME, this.isSoft);
				}
				if (this.left.isSyntheticTypeVariable()) {
					CaptureBinding18 cb18 = (CaptureBinding18) this.left;
					return ConstraintTypeFormula.create(cb18.getInferenceVariable(), this.right, SAME, this.isSoft);
				}

and also a bunch of changes to CB18 to prefer consulting lower bound
before upper bound(s) I am able to get it to infer the collect call in

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
class Person {
	String getLast() { return null; };
}
public class X {
	void test1(List&lt;Person&gt; roster) {
        Map&lt;String, Person&gt; map = 
                roster
                    .stream()
                    .collect(
                        Collectors.toMap(
                            p -&gt; p.getLast(), //[1]
                            p -&gt; p            //[2]
                        ));
	}
}

to be 

Map&lt;java.lang.String,Person&gt; collect(Collector&lt;? super Person,java.lang.Object,Map&lt;java.lang.String,Person&gt;&gt;) 

but that is missing the wildcard capture.

I don&apos;t think the spec leads to a solution that would contain the
capture. As long as we don&apos;t associate 

&quot;?#1 = capture# of ?&quot; 

we are not going to solve it and I don&apos;t see that in JLS.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466097</commentid>
    <comment_count>110</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-15 21:04:06 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #109)

&gt; I don&apos;t think the spec leads to a solution that would contain the
&gt; capture. As long as we don&apos;t associate 
&gt; 
&gt; &quot;?#1 = capture# of ?&quot; 
&gt; 
&gt; we are not going to solve it and I don&apos;t see that in JLS.


Stephan, while we wait for clarifications from Oracle, based on your time 
availability, we can still proceed with the review of the rest of the patch.

(Unfortunately, though this should be a side issue for the core solution
it is not - the new approach depends on being able to reevaluate and obtain
the same capture that inference saw and we are having trouble locating in the
JLS where inference should apply the capture - nevertheless, it is one
isolated issue and rest of the changes can continue to be reviewed.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467013</commentid>
    <comment_count>111</comment_count>
      <attachid>247955</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 00:52:08 -0400</bug_when>
    <thetext>Created attachment 247955
Fixes for two problems found by other IBM projects.

(In reply to Srikanth Sankaran from comment #78)

&gt; Shankha will work with other IBM departments to get some stress testing
&gt; done. Thanks Jay and Shankha.

Testing went fine, two issues got reported. This patch has corrections for
those two problems.

    - AllocationExpression.isBoxingCompatible was missing a call to compute
boxing type.
    - After ground target type is determined, we may still be left with 
wildcards in the ground target type that could make the target type and
the lambda incompatible - on master this case was handled in 
Expression.resolveTypeExpecting. Now we don&apos;t reach there, so a check is
needed in LE itself.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467015</commentid>
    <comment_count>112</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 00:56:12 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #78)

&gt; Jay has offered to verify that we build JRE8 alrigtht with this patch

Jay, to test JRE and Eclipse SDK builds, you will have to apply the patch
&quot;Cumulative ...&quot; and &quot;Fixes for two ...&quot; and NOT the &quot;patch to remove ...&quot;
That was an experimental patch I wanted to share with Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467175</commentid>
    <comment_count>113</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-17 06:25:11 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #112)
&gt; Jay, to test JRE and Eclipse SDK builds, you will have to apply the patch
&gt; &quot;Cumulative ...&quot; and &quot;Fixes for two ...&quot; and NOT the &quot;patch to remove ...&quot;
&gt; That was an experimental patch I wanted to share with Stephan.

I tried to build JRE from source after long time today and found 6 compilation errors, of which 5 are present on HEAD. Here&apos;s the testcase for the additional error:

public class OpenMBeanInfoSupport extends MBeanInfo {
    public OpenMBeanInfoSupport(MBeanNotificationInfo[] notifications) {
        super((notifications == null) ? null : notifications.clone());
    }
}

class MBeanInfo  {
    public MBeanInfo(MBeanNotificationInfo[] notifications)
            throws IllegalArgumentException {
    }
}
interface MBeanNotificationInfo {}

Here&apos;s the testcase for the errors that are produced in HEAD (this has nothing to do with the patch, though, so I will raise a new bug for this):

public class RMIConnector {
	private Integer addListenerWithSubject(MarshalledObject&lt;String&gt; filter) {
		final MarshalledObject&lt;String&gt;[] filters = 
						Util.cast(new MarshalledObject&lt;?&gt;[] { filter });
		return null;
	}
}

class Util {
	@SuppressWarnings(&quot;unchecked&quot;)
	public static &lt;T&gt; T cast(Object x) {
		return (T) x;
	}
}

class MarshalledObject&lt;T&gt; {}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467211</commentid>
    <comment_count>114</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 07:47:14 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #113)
&gt; (In reply to Srikanth Sankaran from comment #112)
&gt; &gt; Jay, to test JRE and Eclipse SDK builds, you will have to apply the patch
&gt; &gt; &quot;Cumulative ...&quot; and &quot;Fixes for two ...&quot; and NOT the &quot;patch to remove ...&quot;
&gt; &gt; That was an experimental patch I wanted to share with Stephan.
&gt; 
&gt; I tried to build JRE from source after long time today and found 6
&gt; compilation errors, of which 5 are present on HEAD. Here&apos;s the testcase for
&gt; the additional error:

Thanks Jay, I see three problems:

    - NPE only with the patch while compiling one of the snippets - traced it 
to an pre-existing/dormant bug in Expression.isBoxingCompatibleWith. It is
missing a null check compared to its counterpart Expression.isCompatibleWith.
We simply didn&apos;t exercise this path earlier.

    - Failure in type inference on master and with the patch. I traced it to
a bug in BoundSet.ThreeSets.upperBounds(boolean, InferenceVariable). If the
only upper bound is an ArrayBinding, we incorrectly return NO_TYPES.

These two are fixed.

    - Failure to compile the super call with poly conditional expression.
I traced it to existing behavior of LE.computeArrayClone - it returns
the same binding for all array clones with return type set to Object !
We need one for each array type. I am working on this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467221</commentid>
    <comment_count>115</comment_count>
      <attachid>247972</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 08:12:09 -0400</bug_when>
    <thetext>Created attachment 247972
Fix for JRE8 build problems

I think this should fix the problems seen on master as well as with
the patch set under consideration here.

Jay, appreciate your giving it a quick spin, tests are still running, but
I don&apos;t expect any issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467226</commentid>
    <comment_count>116</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 08:28:25 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #115)

&gt; Jay, appreciate your giving it a quick spin, tests are still running, but
&gt; I don&apos;t expect any issues.

RunAllJava8Tests finished alright. Jay also confirmed that JRE8 full
build is fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467295</commentid>
    <comment_count>117</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-17 10:46:39 -0400</bug_when>
    <thetext>Completed some more testing - building the eclipse SDK with the patches. Everything looks good. I was able to compile the eclipse projects successfully as is and with the artificially boosted compliance of 1.8 with the patch provided here:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=428203#c6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467299</commentid>
    <comment_count>118</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 10:51:05 -0400</bug_when>
    <thetext>Summarizing:

   - JDT/Core, JDT/UI, JDT/APT tests look good,
   - JRE8 builds fine.
   - Boostrap tests with artificial boost to project settings to 1.8 went OK.
   - Other IBM teams engaged in testing and the reported issues resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467438</commentid>
    <comment_count>119</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-17 16:04:50 -0400</bug_when>
    <thetext>I&apos;m back to asking trivial questions :)

PGMB.cCM18()
- Comment has been added: &quot;// CHECK&quot;
  Who&apos;s supposed to check what?

- Given that methodSubstitute is a local variable, what&apos;s this snippet saying
  (2 occurrences):
	methodSubstitute = null;
	return problemMethod;
  ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467439</commentid>
    <comment_count>120</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-17 16:11:59 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #114)
&gt;     - Failure in type inference on master and with the patch. I traced it to
&gt; a bug in BoundSet.ThreeSets.upperBounds(boolean, InferenceVariable). If the
&gt; only upper bound is an ArrayBinding, we incorrectly return NO_TYPES.

Thanks for catching this.

Follow-up task for me:
  Seeing an ArrayBinding in local variable &apos;simpleUpper&apos; raises an alert:
  Check if &quot;instanceof ReferenceBinding&quot; was meant to be
    !right.isPrimitiveType()
  I&apos;m pretty sure I was thinking that ArrayBinding is a ReferenceBinding.
  (Then: change type of &apos;rights&apos; to TypeBinding[])</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467447</commentid>
    <comment_count>121</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-17 16:59:48 -0400</bug_when>
    <thetext>I&apos;m having a bit trouble digesting the changes in Scope.parameterCompatibilityLevel().

- what exactly is checkOnlyFunctionalTypes controling?
  - it seems to cause both more and less checking
    (see the &quot;return NOT_COMPATIBLE&quot; and &quot;continue&quot; arms inside)
  - from three added blocks governed by &quot;if (checkOnlyFunctionalTypes)&quot;
    (1) has different logic than (2) &amp; (3), which all could be converted
    to (almost?) the same shape. Is there a significant difference?
  - how is mentioning of jlO connected to the issue of functional types?
- why is some of this controlled from outside via
  Scope.shouldConsultShadowOriginal()?
  Note the typo, should be &quot;shallow&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467452</commentid>
    <comment_count>122</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-17 17:30:28 -0400</bug_when>
    <thetext>Status reached in reviewing:

- The majority of classes with changes have been reviewed.

- Changes in BoundSet await clarification from Dan

- Reviewing still to be completed for:
  - ConstraintExpressionFormula
  - InferenceContext18
  - Scope
  - Tests


Refreshing our memories of issues raised in previous comments:

Comment 88 has several (yet unnumbered) follow-up tasks.

From comment 83, part two (re isFunctionalType()):
The answer in comment 88 doesn&apos;t fully convince me, aren&apos;t you saying
  b ? new Runnable() : new Object()
makes the expression a functional thing? Probably I didn&apos;t fully grok the
semantics of &quot;kindaSortaFunctionalType&quot; :)

Comment 97 calls for constructing a new test case. It could be quite
hard, though, to direct the control flow into this dark corner ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467474</commentid>
    <comment_count>123</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 20:57:58 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #119)
&gt; I&apos;m back to asking trivial questions :)
&gt; 
&gt; PGMB.cCM18()
&gt; - Comment has been added: &quot;// CHECK&quot;
&gt;   Who&apos;s supposed to check what?
&gt; 
&gt; - Given that methodSubstitute is a local variable, what&apos;s this snippet saying
&gt;   (2 occurrences):
&gt; 	methodSubstitute = null;
&gt; 	return problemMethod;
&gt;   ?

Sorry, these should be cleaned up. 

(In reply to Stephan Herrmann from comment #122)

&gt; Refreshing our memories of issues raised in previous comments:

&gt; Comment 88 has several (yet unnumbered) follow-up tasks.

Don&apos;t worry about this, I&apos;ll make one full pass over all the scattered
comments and enumerate them at the right time.

&gt; From comment 83, part two (re isFunctionalType()):
&gt; The answer in comment 88 doesn&apos;t fully convince me, aren&apos;t you saying
&gt;   b ? new Runnable() : new Object()
&gt; makes the expression a functional thing? Probably I didn&apos;t fully grok the
&gt; semantics of &quot;kindaSortaFunctionalType&quot; :)

No, I am saying

    b ? () -&gt; { /* */ } : new Object()

is an argument expression that is a functional type despite only one
arm of it being a functional type.

Basically an argument expression being tagged as a functional type allows
to us assert the corresponding parameter MUST be a functional interface
type. In this case, even though &quot;new Object()&quot; does not require its
matching parameter to be a functional interface, the lambda does and so
it is correct to assert that the whole conditional expression can be
a compatible argument only if the parameter is a functional interface.

(In reply to Stephan Herrmann from comment #121)
&gt; I&apos;m having a bit trouble digesting the changes in
&gt; Scope.parameterCompatibilityLevel().

After my morning table tennis game :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467478</commentid>
    <comment_count>124</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 22:39:55 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #123)

&gt; No, I am saying
&gt; 
&gt;     b ? () -&gt; { /* */ } : new Object()
&gt; 
&gt; is an argument expression that is a functional type despite only one
&gt; arm of it being a functional type.

i.e on the argument expression side, we are checking if it is a functional
type (i.e whether a lambda or a method reference) not whether it is a 
functional interface, while on the parameter side we are checking if it is
a functional interface type not whether it is a functional type (which does
not make sense as a lambda or a method reference cannot be a parameter, only
an argument)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467484</commentid>
    <comment_count>125</comment_count>
      <attachid>247988</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 01:12:26 -0400</bug_when>
    <thetext>Created attachment 247988
Patch with much clearer version of Scope.parameterCompatibilityLevel

(In reply to Srikanth Sankaran from comment #123)

&gt; (In reply to Stephan Herrmann from comment #121)
&gt; &gt; I&apos;m having a bit trouble digesting the changes in
&gt; &gt; Scope.parameterCompatibilityLevel().
&gt; 
&gt; After my morning table tennis game :)

OK, 4 games (longer version of the game) to 3, great start to the day :)

This attachment eliminates the (misspelled) hack around
Scope.consultShadowOriginal() and also has Scope.parameterCompatibilityLevel
rewritten to make for much easier understanding. (It also corrects some
self defeating even if not incorrect code that was not achieving the
intended purpose)

The small test case GRT1_8.testBug424205b highlights many of the problems
in compatibility checking post just applicability inference.

Here is a further reduced version of it:

interface I {
	void bar(String t);
}
public class X&lt;T&gt; {
	X(String x) {}
	X(T x) {}
	public void one(X&lt;I&gt; c){}
	public void two() {
		one(new X&lt;&gt;((String s) -&gt; { }));
	}
}

During the initial resolve of the poly allocation expression, 
new X&lt;&gt;((String s) -&gt; { }), 

in the static factory based type inference we readily disqualify X(String x) 
as not being applicable and X(T x) as being applicable with the PPGMB 
computed being  X&lt;java.lang.Object&gt; &lt;factory&gt;(java.lang.Object)

(We don&apos;t have a target type - so don&apos;t/can&apos;t proceed to invocation type
inference.)

Now if this PPGMB were to be subjected to argument/parameter compatibility
checks (if invocation type is inferred, we just accept results from part G)
here are some pertinent observations that can be made about how/what those
compatibility checks should do or look like.

1. If the argument expression is NOT a functional type
(FunctionalExpression), it is anyway pertinent to applicability, inference 
would have ensured that it is compatible and so it is wasteful to recheck
compatibility post inference.

It would not be incorrect to recheck, but just wasteful.

So the checkOnlyFunctionalTypes is an optimization. (The optimization
was not properly implemented in the earlier version perhaps leading to the
confusion in understanding)

2. If the argument expression is a functional type then we cannot 
necessarily immediately assert that the corresponding parameter of the 
PPGMB must be a functional interface type. Some caution is required to 
first make sure that the argument expression is pertinent to applicability 
given the shallow original&apos;s parameter.

For example: (in the snippet above)

During diamond inference, the (non-generic) candidate constructor 
X&lt;T&gt;.X(T x) from the example above gets a parameterized static factory
 
&lt;T&apos;&gt; X&lt;T&apos;&gt; &lt;factory&gt;(T&apos;)

and the inferred PPGMB in the absence of a target type is 

X&lt;java.lang.Object&gt; &lt;factory&gt;(java.lang.Object). 

Now if we ask the argument expression (String s) -&gt; { } if it is compatible 
with the parameter &apos;Object&apos; of the PPGMB, it would answer false since Object
is not a functional interface. But we should not be asking that question at 
all, since in the generic factory method against which inference would check
for compatibility in the presence of a target type the corresponding 
parameter is T&apos; and T&apos; as the target type for the lambda expression makes 
it not pertinent to applicability given it is a type variable of the 
generic method in consideration (even though the lambda is an explicit 
lambda expression)

This explains the need for and all the uses of code of the form:

if (!shallowParameters[i].isPertinentToApplicability(arg, shallowOriginal))
    continue;

and its minor variants. 

This recently introduced API reaches FunctionalExpression.isPertinent*
through a circuitous route when it should and when it need not, answers
appropriately directly.

3. We may have to exercise caution when applicability inference would/could
have instantiated a PPGMB with partial substitution of inferred solutions 
and j.l.Object for others for the same parameter&apos;s type - I don&apos;t have a 
test case for this, but this is just defensive coding. If we see the 
parameter mentioning j.l.O at all, we say it is not safe to check 
compatibility. In future we may relax this - this needs much more thinking
to convince ourselves that we will not, looking at partially substituted 
parameter dismiss the method as being incompatible. 

See that the whole &quot;post applicability inference compatibility check&quot; effort
is a best case effort to weed out some methods that on master we would allow
into Scope.mSMB and may be to result in ambiguity: 

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=428811#c3 for example of
a case that would be readily be weeded out due to such checks. (Since
Characteristics[] is not a functional interface while the argument 
expression ImmutableList::copyOf is a functional expression) (even though 
in that bug these checks are not needed with the proposed patch since we 
now proceed to invocation type inference if target type is available and 
target type *is* available in that case) 

A slightly modified case from there where the Collector.of call is not 
in return expression, but is an argument to an invocation would benefit 
from these checks post applicability inference.

See that I also have a follow up task in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c74
7. See if we can improve further on post applicability compatibility checks.

So the goal for the present bug is to improve on master behavior without
introducing any bugs --&gt; defensive/conservative checks. If unsure we can
safely check compatibility, back off. Hence the check for jlO being 
mentioned. (this would cover the type variable case also, but ...)

Finally, the Scope.shouldConsultShadowOriginal() piece is withdrawn. It was
originally introduced to tackle a certain difficulty in tunneling through
overload resolution all over again after inferring elided to types to find
the constructor binding. This is unncessary. By reinstating
SyntheticFactoryMethodBinding.applyTypeArgumentsOnConstructor(TypeBinding[])
we get directly get the constructor without looking up the method again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467486</commentid>
    <comment_count>126</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 01:17:39 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #125)

&gt; the constructor binding. This is unncessary. By reinstating
&gt; SyntheticFactoryMethodBinding.applyTypeArgumentsOnConstructor(TypeBinding[])
&gt; we get directly get the constructor without looking up the method again.

See the new method AE.inferConstructorOfElidedParameterizedType.

It should be noted that on both master and with the proposed patch,
after the &lt;&gt; is inferred, we needlessly tunnel through overload resolution
again via the call to findConstructorBinding. We should just retrieve the
constructor from the static factory by using applyTypeArgumentsOnConstructor.
That is a follow up task.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467487</commentid>
    <comment_count>127</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 01:50:28 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #125)

&gt; So the checkOnlyFunctionalTypes is an optimization. (The optimization
&gt; was not properly implemented in the earlier version perhaps leading to the
&gt; confusion in understanding)

[...]

&gt; See that the whole &quot;post applicability inference compatibility check&quot; effort
&gt; is a best case effort to weed out some methods that on master we would allow
&gt; into Scope.mSMB and may be to result in ambiguity: 

I just realized that the concerned Scope.parameterCompatibilityLevel could
be reached from Scope.mSMB, in which case this optimization would be 
incorrect. When called from Scope.mSMB, we not only want to know the method
is compatible given the arguments, but also the compatibility &quot;level&quot;, 
while post applicability inference, we don&apos;t care about the level only 
that it is compatible.

Three ways of resolving:

    - Restore master behavior and say for 1.8 PGMBs and PPGMBs don&apos;t
check compatibility post inference. Get rid of the changes to pCL.
Deal with any problems with ambiguity as they arise. 

    - make checkOnlyFunctionalTypes a parameter to pCL.

    - Post applicability inference at 1.8 don&apos;t attempt the optimization
and check all arguments against parameters.

I am open to suggestions. In particular, I am fine punting on this whole
issue and deferring to a later date despite the effort invested.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467547</commentid>
    <comment_count>128</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 10:27:42 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #127)

&gt; I am open to suggestions. In particular, I am fine punting on this whole
&gt; issue and deferring to a later date despite the effort invested.

After thinking long and hard, I have decided to defer this issue - the
present project is complicated enough that we should not attempt to pile
on more and more.

So, I&apos;ll restore the behavior from master with respect to post-applicability-
only-inference compatibility checks into the proposed solution.

I have raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=447767 which
fails on master and will also fail once I withdraw the code changes in
Scope.pCL made on behalf of this bug. This bug nicely illustrates some
of the complexities I was trying to handle in pCL.

We will deal with https://bugs.eclipse.org/bugs/show_bug.cgi?id=447767
separately post resolution of the current bug. This should also take
care of the follow up task (7) listed earlier.

Patch withdrawing the elaborate checks in pCL is under test, will post
shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467552</commentid>
    <comment_count>129</comment_count>
      <attachid>247989</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 10:42:50 -0400</bug_when>
    <thetext>Created attachment 247989
Patch to eliminate post inference compatibility checks.

This patch

    - Eliminates the hack around the mis-spelt 
Scope.shouldConsultShadowOriginal(). That hack was to cope with some
complications in tunneling through overload resolution post elided type
inference to compute the constructor binding. Now we avoid that unnecessary
tunneling by using the reinstated method SFMB.applyTypeArgumentsOnConstructor
See AE.inferConstructorOfElidedParameterizedType.

    - Restores the behavior from master that we will not do compatibility
checks on inferred PGMBs/PPGMBs. This means we will fail on https://bugs.eclipse.org/bugs/show_bug.cgi?id=447767 with this patch as with
master and that failure will have to be handled separately.

I also verified that the need for tolerateInferenceVariable usage goes
away legitimately with the proposed solution. 

Ball is back at your court Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467626</commentid>
    <comment_count>130</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-18 22:33:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #102)
&gt; See https://bugs.openjdk.java.net/browse/JDK-8055963 and 
&gt; https://bugs.openjdk.java.net/browse/JDK-8056092.

Follow up task for this: Remove BoundSet.applyInstantiation and just
check for supers[0-1] being a proper type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467690</commentid>
    <comment_count>131</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-19 09:46:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #124)
&gt; (In reply to Srikanth Sankaran from comment #123)
&gt; 
&gt; &gt; No, I am saying
&gt; &gt; 
&gt; &gt;     b ? () -&gt; { /* */ } : new Object()
&gt; &gt; 
&gt; &gt; is an argument expression that is a functional type despite only one
&gt; &gt; arm of it being a functional type.
&gt; 
&gt; i.e on the argument expression side, we are checking if it is a functional
&gt; type (i.e whether a lambda or a method reference) not whether it is a 
&gt; functional interface, while on the parameter side we are checking if it is
&gt; a functional interface type not whether it is a functional type (which does
&gt; not make sense as a lambda or a method reference cannot be a parameter, only
&gt; an argument)

OK, I see: if we have at least one LE or RE, the target type *must* be a functional type. Thanks.

Would &quot;needsFunctionalTargetType&quot; capture the intended semantics, then?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467691</commentid>
    <comment_count>132</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-19 09:57:57 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #128)
&gt; After thinking long and hard, I have decided to defer this issue - the
&gt; present project is complicated enough that we should not attempt to pile
&gt; on more and more.

Thanks

(In reply to Srikanth Sankaran from comment #129)
&gt; Created attachment 247989 [details]
&gt; Patch to eliminate post inference compatibility checks.

I&apos;ve pulled this into my workspace and continue reviewing from here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467699</commentid>
    <comment_count>133</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-19 10:47:31 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #131)

&gt; Would &quot;needsFunctionalTargetType&quot; capture the intended semantics, then?

Sounds better than kindaSortaFunctionalType actually :) Thanks, will do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467711</commentid>
    <comment_count>134</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-19 11:27:14 -0400</bug_when>
    <thetext>Revisiting AE after comment 129 I&apos;m curious about the role of this line:

	ParameterizedTypeBinding parameterizedType = scope.environment().createParameterizedType(genericType, genericType.typeVariables(), genericType.enclosingType());

(several occurrences)

Parameterizing a generic type with its own type variables doesn&apos;t really add interesting information. While I don&apos;t see a bug here, I wonder if this could be simplified.

The PTB is needed only for passing into inferElidedTypes() and finally getFactoryMethod(). Inside getFactoryMethod() most work is done using its genericType(), only one call to mMSB() uses the actual PTB. Even there, the generic type *might* suffice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467715</commentid>
    <comment_count>135</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-19 11:41:10 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #134)
&gt; Parameterizing a generic type with its own type variables doesn&apos;t really add
&gt; interesting information. While I don&apos;t see a bug here, I wonder if this
&gt; could be simplified.

Probably, that code is from Java 7 days. I think there was an outline of
what needed to be done shared in the EG list IIRC and it was supposed to
be a close implementation of that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467729</commentid>
    <comment_count>136</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-19 13:15:15 -0400</bug_when>
    <thetext>I was wondering why everything about this thingy in Scope.mSMB was removed:

  innerInferenceHelper.getArgumentTypesForCandidate(..)

this lead me to see that indeed the root cause leading to that tricky solution is fixed: instead of using argumentTypes from the provisionalResult of applicability inference, we now simply get a PolyTypeBinding in argumentTypes. This PolyTypeBinding serves well for all compatibility checks (In master MessageSend doesn&apos;t answer PolyTypeBinding).

Cool!

(reference this obsoletes all that was said and done in bug 426290).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467731</commentid>
    <comment_count>137</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-19 13:23:46 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #88)
&gt; (In reply to Stephan Herrmann from comment #82)
&gt; 
&gt; &gt; Is this tendency to report more errors intended in terms of user experience
&gt; &gt; or a result from technical considerations?
&gt; 
&gt; The honest answer is it is neither. I made a good bit of effort to minimize
&gt; diagnostic differences and we are where we are with this patch after
&gt; such effort. I think we should take a fresh look at this whole issue
&gt; separately perhaps under 
&gt; 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=406614 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=404675
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=428489
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=400831
&gt; 
&gt; merged into one project.

Note for that future project: in master, IC18 has unfinished work on leveraging a connection from inner to outer inference for better error reporting. It may be interesting to restore IC18.outerContext once we more fully address this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467767</commentid>
    <comment_count>138</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-19 21:37:07 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #136)
&gt; I was wondering why everything about this thingy in Scope.mSMB was removed:
&gt; 
&gt;   innerInferenceHelper.getArgumentTypesForCandidate(..)
&gt; 
&gt; this lead me to see that indeed the root cause leading to that tricky
&gt; solution is fixed: instead of using argumentTypes from the provisionalResult
&gt; of applicability inference, we now simply get a PolyTypeBinding in
&gt; argumentTypes. This PolyTypeBinding serves well for all compatibility checks
&gt; (In master MessageSend doesn&apos;t answer PolyTypeBinding).

For the record, this is also the reason why the need for 
`tolerateInferenceVariable&apos; goes away.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467768</commentid>
    <comment_count>139</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-19 21:42:46 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #137)

&gt; Note for that future project: in master, IC18 has unfinished work on
&gt; leveraging a connection from inner to outer inference for better error
&gt; reporting. It may be interesting to restore IC18.outerContext once we more
&gt; fully address this.

Right, will do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468408</commentid>
    <comment_count>140</comment_count>
      <attachid>248033</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 02:15:43 -0400</bug_when>
    <thetext>Created attachment 248033
Merged patch brought up to date with master.

(In reply to Stephan Herrmann from comment #132)

&gt; I&apos;ve pulled this into my workspace and continue reviewing from here.

Since you have applied the patches already, I took the liberty of merging
the 4 outstanding patches into one, bringing it upto date with master so
it can be applied on top of master in one stroke and reposting here.

There are no new changes in this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468411</commentid>
    <comment_count>141</comment_count>
      <attachid>248034</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 02:20:26 -0400</bug_when>
    <thetext>Created attachment 248034
Correct merged patch

Sorry, uploaded the wrong patch by mistake.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469006</commentid>
    <comment_count>142</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-21 16:51:16 -0400</bug_when>
    <thetext>Inching along:

In IC18.addConstraintsToC_OneExpr() the early return according to https://bugs.openjdk.java.net/browse/JDK-8052325 should only happen within

  } else if (expri instanceof Invocation &amp;&amp; expri.isPolyExpression()) {

not sure if it makes a difference, tests seem to be fine with this move.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469020</commentid>
    <comment_count>143</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-21 17:37:00 -0400</bug_when>
    <thetext>More re IC18.addConstraintsToC_OneExpr()

Inside the &quot;Invocation&quot; branch I begin to believe that more preparation might be necessary before recursion. OK (I&apos;m only unsure, why this preparation would happen only *sometimes*).

However, the block inside &quot;if (expri instanceof LambdaExpression)&quot; looks unmotivated to me from a spec p.o.v. Is this another pending spec amendment?
After
  &quot;If ei is a LambdaExpression, C contains LambdaExpression throws Fi &quot;
I only see a full stop.
:)

Running GRT_18 with and without that code block I see obvious regressions, but when reverting GRT_18 to master, regressions are less significant.

The difference is due to
- changed test expectations
- added tests

Question: is that added code block intrinsic part of the new F-G-integration, or a change on top, perhaps in trying to better align with javac?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469028</commentid>
    <comment_count>144</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-21 18:13:15 -0400</bug_when>
    <thetext>CExprF.reduceReferenceExpressionCompatibility:

you moved the lookup of reference.findCompileTimeMethodTargeting into the branch for inexact RE. This leaves the branch for exact RE without check for applicable method. Apparently, you compensated this by

	} else if (n != k) {
		return FALSE;

- are there other criteria for potentially applicable that we are now missing here?

- if it stays, could you please add a comment, saying that this new branch corresponds to the check for applicable method? On its own it seems to be in conflict with the spec saying: &quot;In all other cases, n = k&quot;.


HEADS-UP: I feel I&apos;m running out of original new critique. Phew.

Great piece of work!!

Once we receive answer from Dan - at least concerning the capture bounds issue - we should be ready to come to some conclusion ... and that conclusion will be positive :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469029</commentid>
    <comment_count>145</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-21 18:15:07 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #144)
&gt; CExprF.reduceReferenceExpressionCompatibility:
&gt; 
&gt; Apparently, you compensated this by
&gt; 
&gt; 	} else if (n != k) {
&gt; 		return FALSE;

I meant to document which test revealed this connection:
It&apos;s LET.test430766</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469031</commentid>
    <comment_count>146</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-21 18:17:44 -0400</bug_when>
    <thetext>PS: I&apos;m deferring a final walk through test changes until after we decided what goes in, how capture bounds will be handled, ..., i.e. freeze the behaviour of the compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469061</commentid>
    <comment_count>147</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 22:12:26 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #142)
&gt; Inching along:
&gt; 
&gt; In IC18.addConstraintsToC_OneExpr() the early return according to
&gt; https://bugs.openjdk.java.net/browse/JDK-8052325 should only happen within
&gt; 
&gt;   } else if (expri instanceof Invocation &amp;&amp; expri.isPolyExpression()) {
&gt; 
&gt; not sure if it makes a difference, tests seem to be fine with this move.

I think it is correct where it is, but there is value in moving it to where 
you suggest so that someone in future reading code in parallel with 
the specification would find it more aligned. Will do.

(In reply to Stephan Herrmann from comment #143)
&gt; More re IC18.addConstraintsToC_OneExpr()
&gt; 
&gt; Inside the &quot;Invocation&quot; branch I begin to believe that more preparation
&gt; might be necessary before recursion. OK (I&apos;m only unsure, why this
&gt; preparation would happen only *sometimes*).

OK, here is the explanation:

We need to do this preparation only for invocations interleaved by a
lambda. For invocations that are direct arguments to the outer generic
method, because they are necessarily pertinent to the applicability of
the outer method, the equivalent &quot;preparation&quot; would have happened in 
CEF.reduce() during applicability inference.

See that reduce of a poly invocation expression calls for the bound set 
b3 to be transferred to the outer context - we don&apos;t literally do this 
on master (or in this patch) but we lift the inference variables, 
initial constraints from parameters and the initial bound set from type
parameter bounds into the outer context =&gt; This is b2 from the inner call.
And then by calling CEF.inferPoly*, we add additional constraints for
18.5.2.

All this &quot;effectively amounts to&quot; b3 from the inner call ==&gt; we are good
on master (and since this is not changed in the proposed patch, we are
good with the patch too on this part)

However when a poly invocation is interleaved by a lambda that is not
pertinent to applicability (which means I should check if we are doing
extra/incorrect work when the interleaving lambda *is* pertinent to
applicability of the outer call), this preparation would not have
happened during the applicability inference of the outer call. i.e outer
inference context will not yet have the inference variables, initial
bound set from type variables ... it its context. Hence we need to do
this preparation to lift them to the outer context during C set 
construction.

Corollarywise, because for lambda interleaved inner poly invocations, we
lift the inference variables, initials bounds from type parameters and
initial constraints from parameters during C set construction, their
reduction at CEF.reduce is a NOP.  
 
&gt; However, the block inside &quot;if (expri instanceof LambdaExpression)&quot; looks
&gt; unmotivated to me from a spec p.o.v. Is this another pending spec amendment?
&gt; After
&gt;   &quot;If ei is a LambdaExpression, C contains LambdaExpression throws Fi &quot;
&gt; I only see a full stop.
&gt; :)

I think you are missing https://bugs.openjdk.java.net/browse/JDK-8038747
referenced by https://bugs.eclipse.org/bugs/show_bug.cgi?id=444891.

&gt; Question: is that added code block intrinsic part of the new
&gt; F-G-integration, or a change on top, perhaps in trying to better align with
&gt; javac?

Per above, it is to cover the spec amendment for 
https://bugs.openjdk.java.net/browse/JDK-8038747. Without this change,
none of the dozen or so duplicates of 
https://bugs.openjdk.java.net/browse/JDK-8038747 would work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469062</commentid>
    <comment_count>148</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 22:23:15 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #147)

&gt; However when a poly invocation is interleaved by a lambda that is not
&gt; pertinent to applicability (which means I should check if we are doing
&gt; extra/incorrect work when the interleaving lambda *is* pertinent to
&gt; applicability of the outer call), this preparation would not have
&gt; happened during the applicability inference of the outer call. i.e outer
&gt; inference context will not yet have the inference variables, initial
&gt; bound set from type variables ... it its context. Hence we need to do
&gt; this preparation to lift them to the outer context during C set 
&gt; construction.

Explicit documentation for a future reader:

...

Hence we need to do this preparation ...

... because if we don&apos;t do this preparation during C set construction,
the recursive call to  addConstraintsToC from addConstraintsToC_OneExpr 
for a poly invocation interleaved by an impertinent(!) lambda, will not be 
able substitute inner&apos;s type variables with equivalent inference variables
and leave them as naked type variables themselves, which will means the C 
set constraints will not see the inference variables from the inner call,
which will means reduction sequencing using &quot;bottom set - input variables 
- output variables&quot; algorithm will see the naked type variables and not
the inference variables which will mean reduction sequencing will break
down, which will mean things won&apos;t work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469063</commentid>
    <comment_count>149</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 22:26:51 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #147)
&gt; 
&gt; &gt; Question: is that added code block intrinsic part of the new
&gt; &gt; F-G-integration, or a change on top, perhaps in trying to better align with
&gt; &gt; javac?
&gt; 
&gt; Per above, it is to cover the spec amendment for 
&gt; https://bugs.openjdk.java.net/browse/JDK-8038747. Without this change,
&gt; none of the dozen or so duplicates of 
&gt; https://bugs.openjdk.java.net/browse/JDK-8038747 would work.

I meant none of the dozen or so duplicates of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=432682 would work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469093</commentid>
    <comment_count>150</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-22 02:17:46 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #144)
&gt; CExprF.reduceReferenceExpressionCompatibility:
&gt; 
&gt; you moved the lookup of reference.findCompileTimeMethodTargeting into the
&gt; branch for inexact RE. This leaves the branch for exact RE without check for
&gt; applicable method. Apparently, you compensated this by
&gt; 
&gt; 	} else if (n != k) {
&gt; 		return FALSE;
&gt; 
&gt; - are there other criteria for potentially applicable that we are now
&gt; missing here?
&gt; 
&gt; - if it stays, could you please add a comment, saying that this new branch
&gt; corresponds to the check for applicable method? On its own it seems to be in
&gt; conflict with the spec saying: &quot;In all other cases, n = k&quot;.

Analysis: 

I misspoke in https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c138
regarding the reason why the need for tolerateInferenceVariables goes away.

Here is the proper analysis:

During reference expression reduction, we can take one of 4 possible paths:
(a) proper target type, exact method reference
(b) proper target type, inexact method reference.
(c) improper target type, exact method reference,
(d) improper target type, inexact method reference.

For (a) and (b), we will never see inference variables during method
lookup - we also don&apos;t get into CEF.reduceREC.

For (d), we assert that function type&apos;s parameters must be proper types.
so again we will not need the tolerateInferenceVariable provision.

So only for (c) we will hit that situation, but for (c) we should really
NOT be tunneling through overload resolution since we know we have an
exact method reference lying around.

The other interesting point here is that the spec talks of a potentially
applicable method - we don&apos;t have the infrastructure to deliver answers
for that. We compute compatible method which does more work than necessary.

So what I can do as a follow up here is to restore the code relating to
this change from master so the code closely follows/aligns with the spec
and push the change into RE.findCompile* i.e this method would where an
exact method reference exists return that if n == k or n == k + 1 otherwise
null.

Recording another follow up task so it does not fall through the cracks:

ASTNode.resolvePolyExpressionArguments requires a null check at
if (argumentTypes[i].isPolyType()) {

as I noticed an NPE when debugging a broken test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469102</commentid>
    <comment_count>151</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-22 02:40:40 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #144)

&gt; HEADS-UP: I feel I&apos;m running out of original new critique. Phew.
&gt; 
&gt; Great piece of work!!

Thanks, my goal is to come up with an integration worthy of the inference
engine which is very well written, hopefully this achieves that.

OK, now the mutual admiration society membership subscription is complete. Perfect :) 
 
&gt; Once we receive answer from Dan - at least concerning the capture bounds
&gt; issue - we should be ready to come to some conclusion ... and that
&gt; conclusion will be positive :)

There are several follow up tasks scattered throughout the comments.
AFAICT, the one about the capture bound incorporation is the only
one that needs to be addressed to satisfaction before release, others
can be relegated to a different ticket.

(In reply to Stephan Herrmann from comment #146)
&gt; PS: I&apos;m deferring a final walk through test changes until after we decided
&gt; what goes in, how capture bounds will be handled, ..., i.e. freeze the
&gt; behaviour of the compiler.

Sounds good for now. I have sent a reminder to Dan since it is a week
now with no response. With M3 approaching, I hope we hear soon. I would
really like this to go in for M3 - on the due diligence part, we look
good. 

BTW, there are very small patches on top of the present patch posted for
review at

https://bugs.eclipse.org/bugs/show_bug.cgi?id=430686
https://bugs.eclipse.org/bugs/show_bug.cgi?id=440019 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448028

I estimate it should take no more than an hour - it would be good
to release them also for M3. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470942</commentid>
    <comment_count>152</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 05:34:48 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #151)

&gt; BTW, there are very small patches on top of the present patch posted for
&gt; review at
&gt; 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=430686
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=440019 and
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=448028

and one more:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334

For the record, we have word from the spec lead that there are unresolved
issues with capture bound incorporation details:

&quot;I need to spend some more time with this example to be sure (I&apos;ll get 
back to you), but you may be running into JDK-8054721.

https://bugs.openjdk.java.net/browse/JDK-8054721

The portion of 18.4 that talks about &quot;fresh type variables&quot; is intended to 
simulate capture, replacing the placeholder inference variables with actual 
type variables.  But it has some problems, not distinguishing between 
declared bounds and inferred bounds.&quot;

We need to decide what to do for M3.

I am very comfortable with the change we have - it is small &amp; localized.
If deemed necessary, I am willing to have this controlled by an environment
variable/system property, but that is an overkill IMO.

Duplicates included, we are looking at 30+ issues being resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470991</commentid>
    <comment_count>153</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 06:55:15 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #152)

&gt; I am very comfortable with the change we have - it is small &amp; localized.

I meant to add - with a further change to infer bounds of the form
&quot;?#1 = capture# of ?&quot; only when the wildcard in GA is of proper type.

(the proposed patch does more than that)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471383</commentid>
    <comment_count>154</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-24 11:45:47 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #152)
&gt; For the record, we have word from the spec lead that there are unresolved
&gt; issues with capture bound incorporation details:
&gt; 
&gt; &quot;I need to spend some more time with this example to be sure (I&apos;ll get 
&gt; back to you), but you may be running into JDK-8054721.
&gt; 
&gt; https://bugs.openjdk.java.net/browse/JDK-8054721
&gt; 
&gt; The portion of 18.4 that talks about &quot;fresh type variables&quot; is intended to 
&gt; simulate capture, replacing the placeholder inference variables with actual 
&gt; type variables.  But it has some problems, not distinguishing between 
&gt; declared bounds and inferred bounds.&quot;
&gt; 
&gt; We need to decide what to do for M3.
&gt; 
&gt; I am very comfortable with the change we have - it is small &amp; localized.
&gt; If deemed necessary, I am willing to have this controlled by an environment
&gt; variable/system property, but that is an overkill IMO.

Right, I&apos;m not interested in a system property, either. While we don&apos;t have the final solution, I&apos;m mainly interested in estimating the effort to change this, once the final solution is given at the spec level.

Let&apos;s just document the exact extent of the extra-constitutional part, so that it will be easy, to pull the plug on all of that, without forgetting parts. This can happen by a compile time constant or any documentation device.

The other question is, will the interim solution make it harder to adopt the final solution? This could potentially happen, if the interim solution makes some wrong assumptions and if other changes piled on top of this bend over backwards in order to harmonize with this interim change.

To give a number into the calculation: when draftily reverting the changes re capture bounds, RunAllJava8Tests gives 17 regressions. What&apos;s the cause behind those? Maybe I pulled the wrong plug? Was it the previous implementation (master) that bent over backwards to harmonize with the lack of this change?

Since the test changes contained in this bug are part of that equation, I will take a look at those as my next step.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471473</commentid>
    <comment_count>155</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 14:07:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #154)

&gt; Let&apos;s just document the exact extent of the extra-constitutional part, so
&gt; that it will be easy, to pull the plug on all of that, without forgetting
&gt; parts. This can happen by a compile time constant or any documentation
&gt; device.

Sounds good.

&gt; The other question is, will the interim solution make it harder to adopt the
&gt; final solution? This could potentially happen, if the interim solution makes
&gt; some wrong assumptions and if other changes piled on top of this bend over
&gt; backwards in order to harmonize with this interim change.

It is hard to make predictions especially about future, but I think
we are on safe grounds here. Basically the change is to infer a bound
equating the fresh type variable that stands for a wild card with a
capture of the wildcard when the wildcard is a proper type. I don&apos;t
expect other changes building on top of this. 

&gt; To give a number into the calculation: when draftily reverting the changes
&gt; re capture bounds, RunAllJava8Tests gives 17 regressions. What&apos;s the cause
&gt; behind those? 

Basically, you will find that most if not all of the failing tests
will have Collectors.toMap call in them. This has a signature 
Collector&lt;T, ?, M&gt; toMap(...) introducing the wildcard into the
picture.

On master as https://bugs.eclipse.org/bugs/show_bug.cgi?id=445274
points out, we silently instantiate the enclosing collect call to be
Collector&lt;? super Person, Object ,Map&lt;java.lang.String,Person&gt;&gt;.
Now if after outer inference, we push the target type onto inner
and ask it to evaluate it would fail because outer inference is
missing a captured wildcard and jlO is seen there instead.

The situation on master is problematic as some refactoring such as
extract local variable would yield a code fragment that would not
compile.

I think bottom line is that JLS has some open issues as acknowledged
by Dan. Our implementation also has issues - in terms of premature clearing
of capture bounds as well as how CaptureBinding18 behaves. I think
it is supposed to act as a type that potentially has both lower and
upper bounds, but it for the most part it looks only at upper bound.

Another interesting experiment would be what would happen with master
if we don&apos;t clear the capture bounds - I recall seeing a handful of
failures with this experiment when I tried earlier. I think the
spec intends that they not be cleared and sooner or later we will
run into a test case that will trigger this scenario.

So this area is going to require revisit anyways, not just on account
of this extra constitutional change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471474</commentid>
    <comment_count>156</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 14:11:43 -0400</bug_when>
    <thetext>Tomorrow, (a) I&apos;ll prepare a patch isolating the changes for capture bound
incorporation under a compile time constant as well as minimizing the
changes if possible. I didn&apos;t so far get to investigate your observations
at the bottom of https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c101.
(b) Raise follow up bugs for all issues pointed out by both of us so we have
a clear picture of what the finishing touch required is going to be.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471588</commentid>
    <comment_count>157</comment_count>
      <attachid>248173</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 23:08:24 -0400</bug_when>
    <thetext>Created attachment 248173
Addendum for capture bound change under compile time constant

This patch isolates the changes for capture bound incorporation under a
compile time constant IC18.SHOULD_WORKAROUND_BUG_JDK_8054721

There are exactly two chunks of change under this guard and I am convinced
they are absolutely harmless.

It is likely that when we adjust fully to proper handling of capture bound
incorporation (i.e don&apos;t clear capture bounds prematurely and deal with
them in 18.4 taking https://bugs.openjdk.java.net/browse/JDK-8054721 into
account and https://bugs.eclipse.org/bugs/show_bug.cgi?id=447576 into account)
we may not need real captures anymore. 

Thing is either we need proper simulated captures or real captures, it cannot 
be neither and this patch takes the real capture route.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471614</commentid>
    <comment_count>158</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 01:50:15 -0400</bug_when>
    <thetext>OK, I have gone through every single comment with a fine toothed comb 
and raised follow up tickets under the umbrella bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=448791.

We have 13 tasks of none of which is a blocker for M3.

I would rate:

https://bugs.eclipse.org/bugs/show_bug.cgi?id=447767
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448792
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448793
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448794 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448802

as candidates for M4.

For various other small corrections/suggestions that don&apos;t have to be 
deferred to their own tickets, I have a prepared a patch that is being
tested against all JDT/Core tests. 

Will upload once done.

Looks all set.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471634</commentid>
    <comment_count>159</comment_count>
      <attachid>248174</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 02:51:30 -0400</bug_when>
    <thetext>Created attachment 248174
Addendum to incorporate review comments</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471635</commentid>
    <comment_count>160</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 02:56:57 -0400</bug_when>
    <thetext>The patch &quot;addendum for capture bound ...&quot; and &quot;Addendum to incorporate ...&quot;
need to be applied on top of the patch for 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334 which itself specifies
its application order in https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334#c12. (I should really start working on branches)

All tests are green - Once I hear a final go, I&apos;ll promote the changes. 

If there are no objections, I would like to promote all of the follow up
fixes listed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c152.
There are 4 of them - these are routine bug fixes and can be reviewed one
by one, at your leisure. Or perhaps you could give it a high level once over
before promotion and closer review can come in the next week or two.

Thanks Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471713</commentid>
    <comment_count>161</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 07:47:17 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #158)
&gt; OK, I have gone through every single comment with a fine toothed comb 
&gt; and raised follow up tickets under the umbrella bug:
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=448791.
&gt; 
&gt; We have 13 tasks of none of which is a blocker for M3.

Looks clean. I agree, no blocker for M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471714</commentid>
    <comment_count>162</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 08:00:56 -0400</bug_when>
    <thetext>A summary from another p.o.v: pending spec changes adopted by this patch:

see comment 44:
https://bugs.openjdk.java.net/browse/JDK-8052325 

see comment 102:
https://bugs.openjdk.java.net/browse/JDK-8055963 (javac bug)
https://bugs.openjdk.java.net/browse/JDK-8056092 (spec bug)

see comment 147 &amp; bug 444891
https://bugs.openjdk.java.net/browse/JDK-8038747

see comment 152:
https://bugs.openjdk.java.net/browse/JDK-8054721

None of these spec bugs are resolved, our implementation is built on good faith that directions outlined in the bugs will actually appear in a future version of JLS and represent the original intention for Java 8.

Am I describing the situation correctly?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471718</commentid>
    <comment_count>163</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 08:07:34 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #162)

&gt; Am I describing the situation correctly?

Yes, that is correct. We need to see if there is a way to add ourselves
to the notification list to listen in further amendments and/or resolution.
I am not sure how to do this yet.

I&apos;ll forward to the team as well as also document here the link provided by 
Daniel Smith on specification bugs open, in progress and recently resolved:

// ---

&gt; [Do you have a canned query that would show me all the open and recently 
&gt; resolved defects against the JLS ?] 

https://bugs.openjdk.java.net/issues/?jql=project%20%3D%20JDK%20AND%20component%20%3D%20specification%20AND%20status%20in%20(Open%2C%20%22In%20Progress%22)%20ORDER%20BY%20fixVersion%20ASC

Roughly, &quot;Open&quot; and &quot;In Progress&quot; bugs are acknowledged problems, with varying degrees of resolution (some are problem statements, some have suggested replacement text).  &quot;Resolved&quot; and &quot;Closed&quot; bugs have been addressed and the fixes published.  (The line between the two states in each case is fuzzy, as far as I know.)

Fix Version will tell you whether something is intended for a maintenance review of SE 8 or deferred until (at least) SE 9.  These are subject to change.


// ---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471720</commentid>
    <comment_count>164</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 08:14:14 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #161)

&gt; Looks clean. I agree, no blocker for M3.

I&apos;ll wait for an explicit go and not treat this as one. I think per https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c146
you wanted to look through the test changes after the code changes are frozen.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471724</commentid>
    <comment_count>165</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 08:29:17 -0400</bug_when>
    <thetext>Closing one more loose end:

My concern raised in comment 143 is indeed answered by the reference to https://bugs.openjdk.java.net/browse/JDK-8038747. 
Just two tiny question remain:

(1) why this line:
  if (substF.isFunctionalInterface(skope)) { // could be an inference variable.
after a check experiment (only GRT18) this should suffice:
  if (substF instanceof ReferenceBinding) {
Do you have a counter-example?

(2) before calling IC18.getInferenceContext() we inconsistently ask instanceof PMB vs. PGMB (getInferenceContext only requires PMB).
I seem to remember that some of the pending patches has changes already in this field? If not, might be worth a tiny new child of bug 448791

Certainly no blockers, though.  


(In reply to Srikanth Sankaran from comment #164)
&gt; (In reply to Stephan Herrmann from comment #161)
&gt; 
&gt; &gt; Looks clean. I agree, no blocker for M3.
&gt; 
&gt; I&apos;ll wait for an explicit go and not treat this as one. I think per
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c146
&gt; you wanted to look through the test changes after the code changes are
&gt; frozen.

Right, comment 161 concerned the follow-up tasks. Final look through test changes starting right now ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471725</commentid>
    <comment_count>166</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 08:34:28 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #84)

&gt; Change removes the attempt to fetch variableArity from an existing inference
&gt; context. 
&gt; 
&gt; If such inference context exists, infCtx.isVarArgs() is authoritative.
&gt; 
&gt; The remaining check is best effort to recover this information.
&gt; 
&gt; I have no counter example, so the common sense checks *may* be sufficient?

Yes, this is sufficient.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471738</commentid>
    <comment_count>167</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 09:00:53 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #165)

&gt; Just two tiny question remain:
&gt; 
&gt; (1) why this line:
&gt;   if (substF.isFunctionalInterface(skope)) { // could be an inference
&gt; variable.
&gt; after a check experiment (only GRT18) this should suffice:
&gt;   if (substF instanceof ReferenceBinding) {

OK, the thing is we can generate meaningful C set elements only when
substF is a functional interface. Given that we can quit early checking for
functional interface target or quit a bit later after seeing that we
don&apos;t have a sam which is really the same check. (isFI populates the cache
so getSAM() returns instantaneously.)

One thing I could have done and didn&apos;t choose to was to return false
if target is not a functional interface. Originally it was there, but
then I realized that we could see an inference variable and could
return false incorrectly and turned it to what it is now.

We could still return false if it is not functional and not an inference
variable, but I didn&apos;t see this part&apos;s role in triggering an early failure
as an important one.


&gt; Do you have a counter-example?
&gt; 
&gt; (2) before calling IC18.getInferenceContext() we inconsistently ask
&gt; instanceof PMB vs. PGMB (getInferenceContext only requires PMB).
&gt; I seem to remember that some of the pending patches has changes already in
&gt; this field? If not, might be worth a tiny new child of bug 448791
&gt; 
&gt; Certainly no blockers, though.  
&gt; 
&gt; 
&gt; (In reply to Srikanth Sankaran from comment #164)
&gt; &gt; (In reply to Stephan Herrmann from comment #161)
&gt; &gt; 
&gt; &gt; &gt; Looks clean. I agree, no blocker for M3.
&gt; &gt; 
&gt; &gt; I&apos;ll wait for an explicit go and not treat this as one. I think per
&gt; &gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c146
&gt; &gt; you wanted to look through the test changes after the code changes are
&gt; &gt; frozen.
&gt; 
&gt; Right, comment 161 concerned the follow-up tasks. Final look through test
&gt; changes starting right now ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471753</commentid>
    <comment_count>168</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 09:43:13 -0400</bug_when>
    <thetext>The OCD part of the team has found no reason for holding back this patch any longer:

+1 for releasing attachment 248034 and attachment 248173</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471760</commentid>
    <comment_count>169</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 10:19:02 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #165)

&gt; (2) before calling IC18.getInferenceContext() we inconsistently ask
&gt; instanceof PMB vs. PGMB (getInferenceContext only requires PMB).
&gt; I seem to remember that some of the pending patches has changes already in
&gt; this field? If not, might be worth a tiny new child of bug 448791

This one needs a longer explanation and also a peek into the pending patches.

With all 7 patches applied I see all calls to getIC preceded consistently
by an instanceof check for PGMB and not PMB. 

In the final implementation if the &lt;&gt; constructor is NOT generic it is not 
useful to return the static factory&apos;s context. It is actually harmful.

All patches considered, the inner inference context is used for these purposes:

    1. To decide whether reduction to b3 should just be a NOP, effectively
equivalent things having already been done during C set construction.
(this has some issues - there is a FIXME in CEF.reduce that maps to
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448802)

    2. To transfer b2 to the outer context to subsequently augment it to b3.
We should transfer b2 and not &quot;what would effectively reduce to b2&quot; as 
documented elsewhere as the atomicity problem&quot;

    3. To determine what inference kind was used earlier.

    4. To see if unchecked conversion was involved earlier

Non-generic constructor case:
-----------------------------

Now for a non-generic constructor returning the inference context of the
factory is harmful because the factory is really a synthesized method with
extra type variables to stand in for the class&apos;s type variables. It does
not map properly to the generic constructor itself. There are 
&quot;out of scope&quot; variables, bounds etc, so things quickly go south.

The else part of
if (previousMethod instanceof ParameterizedGenericMethodBinding) {
    // ...
} else {

}

effectively does what we do on master.

Is this sufficient ?

Clearly (3) is addressed and (2) is addressed as well as on master
but for (1) and (4) it needs some thinking through.

Now considering the case where the constructor does turns out to be
generic: 

This generic constructor is not inferred, but is directly manufactured by
AE.inferConstructorOfElidedParameterizedType by using 
SFMB.applyTypeArgumentsOnConstructor

As a result, we don&apos;t have an inference context for that. I am not certain
it would be right/wrong to use the factory&apos;s context for the generic 
constructor for reasons cited just now.

That means that for a generic constructor we should be doing:

if (innerCtx == null) { // no inference -&gt; assume it wasn&apos;t ...
    TypeBinding exprType = this.left.resolvedType;
    if (exprType == null || !exprType.isValidBinding())
	return FALSE;
    return ConstraintTypeFormula.create(exprType, this.right, COMPATIBLE, this.isSoft);
}

Is this sufficient ? I don&apos;t know.

I say &quot;we should be doing&quot; because I don&apos;t see a single test triggering
the conditional breakpoint 

previousMethod instanceof ParameterizedGenericMethodBinding &amp;&amp; previousMethod.isConstructor()

in RunAllJava8Tests - i.e we don&apos;t have a test for a &lt;&gt; allocation that 
would bind to a generic method *and* is itself a nested invocation under 
a generic method.

I&apos;ll add a follow up task to investigate this further under 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448799.
This particular task would need to be done for M3 while the other
activities of https://bugs.eclipse.org/bugs/show_bug.cgi?id=448799 can
come in for M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471769</commentid>
    <comment_count>170</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 10:35:30 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #169)

&gt; I&apos;ll add a follow up task to investigate this further under 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=448799.
&gt; This particular task would need to be done for M3 while the other
&gt; activities of https://bugs.eclipse.org/bugs/show_bug.cgi?id=448799 can
&gt; come in for M4.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=448799#c1.

It also outlines a possible resolution - I&apos;ll get this followed up for M3.

Given the complexity, the size and scope this project has come to assume
some amount of going back and forth, sorry about that.

Looking at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c129,
AE.inferConstructorOfElidedParameterizedType was introduced at the same
time Scope.consultShadowOriginal() hack and post applicability checks
were withdrawn.

    (1) Post applicability compatibility checks cause problems when 
tunneling through overload resolution for a constructor after inferring
its elided types in the absence of a target type.

    (2) Scope.consultShadowOriginal() was a mechanism to circumvent those
problems.

    (3) AE.inferConstructorOfElidedParameterizedType avoids tunneling
through overload resolution.

Given (1) is withdrawn, (2) is unnecessary and is withdrawn.

Given (1) is withdrawn, tunneling through overload resolution is safe
and so (3) which is just an optimization can be foregone.

If we forego (3), we will have an inference context for a generic 
constructor as we would expect.

Ergo, this should be a simple fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471778</commentid>
    <comment_count>171</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 11:49:29 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #168)
&gt; The OCD part of the team has found no reason for holding back this patch any
&gt; longer:
&gt; 
&gt; +1 for releasing attachment 248034 [details] and attachment 248173 [details]

Here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f357f309273e0bfe8345ff708d18fa83c6a34931

and here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=192820efad9191d4773fbd88aa6d8a5ea915ea14.

Thanks.

OCD ? which one of http://acronyms.thefreedictionary.com/OCD did you mean ? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471780</commentid>
    <comment_count>172</comment_count>
      <attachid>248174</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 11:52:11 -0400</bug_when>
    <thetext>Comment on attachment 248174
Addendum to incorporate review comments

I&apos;ll repost this one with two further changes called out:

(1) Ensure generic constructor gets an inference context.
(2) CEF.reduce: merge if (innerCtx == null) and if (innerCtx.stepCompleted &gt;= InferenceContext18.TYPE_INFERRED)

I will do this well in time for your planned review slot tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471782</commentid>
    <comment_count>173</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 11:54:43 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #171)
&gt; OCD ? which one of http://acronyms.thefreedictionary.com/OCD did you mean ?
&gt; :)

The first, of course.
To prove: if I were not OCD I&apos;d leave this question unanswered ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471834</commentid>
    <comment_count>174</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 15:59:19 -0400</bug_when>
    <thetext>SFMB.applyTypeArgumentsOnConstructor always returns a PMB, it only
receives the class type arguments and not the method type arguments.

I think it should receive both and if method type arguments is not
empty instantiate and return a PGMB - No ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471837</commentid>
    <comment_count>175</comment_count>
      <attachid>248182</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 16:41:48 -0400</bug_when>
    <thetext>Created attachment 248182
Addendum to incorporate review comments

New additions: 

   - Makes suitable changes to SFMB.applyTypeArgumentsOnConstructor to make
it returns a PGMB when it should.

   - Establish an inference context for a parameterized generic constructor.

Passes RunOnlyJava8Tests. Running all tests now.

(this patch should be applied after the 4 bug fixes in queue)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471854</commentid>
    <comment_count>176</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 19:53:49 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #175)

&gt; Passes RunOnlyJava8Tests. Running all tests now.

All clear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472109</commentid>
    <comment_count>177</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 00:21:17 -0400</bug_when>
    <thetext>Noopur, Shankha, Jay,

Sorry for the rework, but the changes for M3 have been phenomenal in
scope and volume.

Can we get another round of elaborate testing organized for M3 (i.e right away)
for JDT/UI, JRE8, SDK bootstrap and working with other IBM team to get some
testing done.

If you are unable to spare cycles, please let me know, I&apos;ll make alternate
plans: 

I would say 95% of the code is already on master, you will need to apply
these patches on top of master in this order: 

(1) The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334
(2) The patch here: (Addendum ...)
(3) The patch https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596 

Thanks in advance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472118</commentid>
    <comment_count>178</comment_count>
      <attachid>248194</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-27 01:16:56 -0400</bug_when>
    <thetext>Created attachment 248194
CombinedPatch(Comment 177)

(In reply to Srikanth Sankaran from comment #177)
&gt; 
&gt; (1) The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334
&gt; (2) The patch here: (Addendum ...)
&gt; (3) The patch https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596 
&gt; 

All three patches combined.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472121</commentid>
    <comment_count>179</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-27 01:27:48 -0400</bug_when>
    <thetext>I am able to compile JRE 8 and Eclipse SDK with the patches without any issue. Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472365</commentid>
    <comment_count>180</comment_count>
      <attachid>248206</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 09:01:21 -0400</bug_when>
    <thetext>Created attachment 248206
Revised patch incorporating review comments

Same patch but refreshed since antecedents got some methods relating to
unchecked conversion reporting restored.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472412</commentid>
    <comment_count>181</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 10:10:46 -0400</bug_when>
    <thetext>In CEF.inferPoly*() I think there should be a call to initializeBounds()
on the capture - Not sure - the test cases that necessitate this whole
work around mostly use unbounded wildcard (Collectors.groupingBy() and
Collectors.toMap()) for those cases it should not matter, but ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472415</commentid>
    <comment_count>182</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-27 10:17:52 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #177)
UI test results are good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472669</commentid>
    <comment_count>183</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 18:09:22 -0400</bug_when>
    <thetext>Review comments incorporated and released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b0ee678b65f48d1cfab35972dd53d6bd85389446</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472727</commentid>
    <comment_count>184</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 02:51:18 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #181)
&gt; In CEF.inferPoly*() I think there should be a call to initializeBounds()
&gt; on the capture - Not sure - the test cases that necessitate this whole
&gt; work around mostly use unbounded wildcard (Collectors.groupingBy() and
&gt; Collectors.toMap()) for those cases it should not matter, but ...

Addressed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=9c251eade23f2143003635a87c2f3f96ae52d898</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473984</commentid>
    <comment_count>185</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 05:18:49 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141029-2000 build

We also need to decide on whether or not we want this for 4.4.2. This is fairly big change for a maintenance release, but here are reasons why we might want this:

1. Obviously this fixes lot of issues in inference and overload resolution areas.
2. Since this alters an important area of the compiler in a big way, maintaining two different versions will be difficult.

Srikanth/Stephan, would like to add anything?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2474305</commentid>
    <comment_count>186</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-30 20:42:27 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #185)

&gt; Srikanth/Stephan, would like to add anything?

I personally see no choice here - This fixes four cluster of bugs around
(a) nested inference in the presence of an interleaving lambda expression 
(b) handling wildcard capture bounds and (c) raw types and (d) assorted
others that go away with the new implementation.

Unfortunately, apart from the one deviation in our implementation 
(https://bugs.eclipse.org/bugs/show_bug.cgi?id=448793) and some small 
bugs here and there, we fail to compile these cases by *being compliant* 
to the spec as it existed on Java 8 GA.

Stephan&apos;s comment at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c162
summarizes this situation nicely.

There is too much inter-dependency in the solution to attempt to 
isolate just the fixes and attempt to back port only them.

So I think rather than ask should we back port, a better question would be 
how can we minimize risks - this we can do by beefing up due diligence 
activities: apart from unit tests, work with other IBM teams to stress test
verify JRE8 builds and Eclipse SDK bootstrap builds are fine etc.

And perhaps most importantly, involve the community (after M3 fixes are
a few select M4 candidates are back ported) with an honest feedback that
4.4.2 is heading to be a release that carries much more changes for a
maintenance release than usual and this is because (a) Java 8 is a huge 
change to Java (b) because there were crucial spec changes post GA which
were implemented by javac *ahead of GA* and so we require active engagement 
from them to test it out.

I recommend we look at backport of M3 fixes after a full 1 month of field
testing of M3.

That is my input for consideration to the JDT leads</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2474396</commentid>
    <comment_count>187</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-31 04:35:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #186)
&gt; I recommend we look at backport of M3 fixes after a full 1 month of field
&gt; testing of M3.

Ref: Bug 449389 - We will be using M3 compiler soon for building eclipse SDK.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2486800</commentid>
    <comment_count>188</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-21 00:16:44 -0500</bug_when>
    <thetext>After discussions with Srikanth and Stephan, it&apos;s been decided that this is too big a change for back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2499865</commentid>
    <comment_count>189</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-22 09:24:13 -0500</bug_when>
    <thetext>*** Bug 455928 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2512926</commentid>
    <comment_count>190</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-01 14:51:28 -0500</bug_when>
    <thetext>*** Bug 458806 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514189</commentid>
    <comment_count>191</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-02-04 10:41:03 -0500</bug_when>
    <thetext>*** Bug 459145 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2516249</commentid>
    <comment_count>192</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-09 17:49:55 -0500</bug_when>
    <thetext>*** Bug 459504 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2527429</commentid>
    <comment_count>193</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-05 19:40:18 -0500</bug_when>
    <thetext>*** Bug 461539 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528055</commentid>
    <comment_count>194</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-08 10:28:49 -0400</bug_when>
    <thetext>*** Bug 461639 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528068</commentid>
    <comment_count>195</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-08 12:47:01 -0400</bug_when>
    <thetext>*** Bug 461639 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528074</commentid>
    <comment_count>196</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-08 13:01:42 -0400</bug_when>
    <thetext>*** Bug 461571 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2530858</commentid>
    <comment_count>197</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-12 19:18:22 -0400</bug_when>
    <thetext>*** Bug 462006 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2535601</commentid>
    <comment_count>198</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-22 19:20:00 -0400</bug_when>
    <thetext>*** Bug 462769 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550249</commentid>
    <comment_count>199</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-22 13:23:33 -0400</bug_when>
    <thetext>*** Bug 465192 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2554189</commentid>
    <comment_count>200</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-29 16:57:24 -0400</bug_when>
    <thetext>*** Bug 465859 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247456</attachid>
            <date>2014-09-29 15:01:00 -0400</date>
            <delta_ts>2014-09-30 15:36:39 -0400</delta_ts>
            <desc>Evolving solution - with warts, hacks and all.</desc>
            <filename>WIP.patch</filename>
            <type>text/plain</type>
            <size>211369</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGZlODZkZTAuLjExNDE4MmUgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtNjIwLDEwICs2MjAsMTUgQEAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8
WT4gcm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGZvbyhT
T1VSQ0UsIERFU1QpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKG51bGwsIFNldDo6bmV3KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiNC4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkiCVNldDxZPiByb3N0ZXJTZXQg
PSAoU2V0PFk+KSBmb28obnVsbCwgU2V0OjpuZXcpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5cbiIgKyAKIAkJIlRoZSB0YXJnZXQgdHlw
ZSBvZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsg
CiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSI0LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIp
XG4iICsgCisJCSI1LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCiAJCSIJU2V0
PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhudWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKIAkJIkNhbm5v
dCBpbnN0YW50aWF0ZSB0aGUgdHlwZSBTZXRcbiIgKyAKQEAgLTEyMzAsNyArMTIzNSwxMiBAQAog
CQkiCV5eXl5eXl5eXl5eXlxuIiArIAogCQkiVGhlIG1ldGhvZCBhZGRBdHRyaWJ1dGUoVGVzdC5B
dHRyaWJ1dGU8VD4sIFQpIGluIHRoZSB0eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRo
ZSBhcmd1bWVudHMgKFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiwgY2FwdHVyZSMyLW9m
ID8pXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBUZXN0LmphdmEg
KGF0IGxpbmUgNSlcbiIgKyAKKwkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSAzKVxu
IiArIAorCQkiCWFkZEF0dHJpYnV0ZShqYXZhLnV0aWwuT2JqZWN0cy5yZXF1aXJlTm9uTnVsbChh
dHRyaWJ1dGUsIFwiXCIpLFxuIiArIAorCQkiCSAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlwZSBtaXNtYXRjaDog
Y2Fubm90IGNvbnZlcnQgZnJvbSBUZXN0LkF0dHJpYnV0ZTxjYXB0dXJlIzEtb2YgPz4gdG8gVGVz
dC5BdHRyaWJ1dGU8VD5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIEVSUk9SIGlu
IFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiArIAogCQkiCWFkZEF0dHJpYnV0ZShhdHRyaWJ1dGUs
IGF0dHJpYnV0ZS5nZXREZWZhdWx0KCkpO1xuIiArIAogCQkiCV5eXl5eXl5eXl5eXlxuIiArIAog
CQkiVGhlIG1ldGhvZCBhZGRBdHRyaWJ1dGUoVGVzdC5BdHRyaWJ1dGU8VD4sIFQpIGluIHRoZSB0
eXBlIFRlc3QgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKFRlc3QuQXR0cmli
dXRlPGNhcHR1cmUjMy1vZiA/PiwgY2FwdHVyZSM0LW9mID8pXG4iICsgCkBAIC0yMzE4LDYgKzIz
MjgsMTEgQEAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIE9wZXJhdGlvbnNQ
aWxlLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCSIJYWRkQWxsMyhjb21iaW5lZCwgbmV3IE9w
ZXJhdGlvbnNQaWxlPD4oaGFuZGxlcikpO1xuIiArIAorCQkiCV5eXl5eXl5cbiIgKyAKKwkJIlRo
ZSBtZXRob2QgYWRkQWxsMyhDb2xsZWN0aW9uPFQ+LCBUKSBpbiB0aGUgdHlwZSBPcGVyYXRpb25z
UGlsZTxCPiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoTGlzdDxPcGVyYXRp
b25zUGlsZTw/Pj4sIG5ldyBPcGVyYXRpb25zUGlsZTw+KGhhbmRsZXIpKVxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gT3BlcmF0aW9uc1BpbGUuamF2YSAoYXQgbGlu
ZSAxMylcbiIgKyAKKwkJIglhZGRBbGwzKGNvbWJpbmVkLCBuZXcgT3BlcmF0aW9uc1BpbGU8Piho
YW5kbGVyKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5cbiIgKyAKIAkJIkNhbm5vdCBpbmZlciB0eXBlIGFyZ3VtZW50cyBmb3IgT3Bl
cmF0aW9uc1BpbGU8PlxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuamF2YQppbmRleCBlNGYwOWExLi4xMTI3MmMwIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKQEAgLTUxNTMsNiArNTE1MywxMSBAQAogCQkJCSItLS0tLS0tLS0tXG4i
ICsgCiAJCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkJCSIJbmV3
IFgoKS5mb28oKCktPnt9KTtcbiIgKyAKKwkJCQkiCSAgICAgICAgXl5eXG4iICsgCisJCQkJIlRo
ZSBtZXRob2QgZm9vKEk8VD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRo
ZSBhcmd1bWVudHMgKCgpIC0+IHt9KVxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJ
IjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkJCSIJbmV3IFgoKS5mb28o
KCktPnt9KTtcbiIgKyAKIAkJCQkiCSAgICAgICAgICAgIF5eXl5cbiIgKyAKIAkJCQkiVGhlIHRh
cmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBpcyBub3QgYSB3ZWxsIGZvcm1lZCBwYXJhbWV0
ZXJpemVkIHR5cGUgZHVlIHRvIGJvdW5kKHMpIG1pc21hdGNoXG4iICsgCiAJCQkJIi0tLS0tLS0t
LS1cbiIpOwpAQCAtNjg2OCw2ICs2ODczLDExIEBACiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCSIJZmluYWwgT3B0aW9uYWw8
SW50ZWdlcj4gbWluID0gZW1wdHkubWluQnkoKGEsIGIpIC0+IGEgLSBiKTtcbiIgKyAKKwkJIgkg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXlxuIiArIAorCQkiVGhlIG1l
dGhvZCBtaW5CeShGdW5jdGlvbjxJbnRlZ2VyLEM+KSBpbiB0aGUgdHlwZSBZPEludGVnZXI+IGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IGEsIDxubyB0eXBl
PiBiKSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJIglmaW5hbCBPcHRpb25hbDxJbnRlZ2VyPiBtaW4g
PSBlbXB0eS5taW5CeSgoYSwgYikgLT4gYSAtIGIpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXlxuIiArIAogCQkiTGFt
YmRhIGV4cHJlc3Npb25cJ3Mgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIHRoZSBzaWduYXR1cmUg
b2YgdGhlIGZ1bmN0aW9uYWwgaW50ZXJmYWNlIG1ldGhvZCBhcHBseShJbnRlZ2VyKVxuIiArIAog
CQkiLS0tLS0tLS0tLVxuIiwKQEAgLTg1MjQsMTAgKzg1MzQsMTAgQEAKIAkJCSIgICAgaWYoXCIx
XCIgPT0gXCJcIikgeyByZXR1cm4gc3RyZWFtLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSku
c3RyZWFtKCk7IC8vIEVSUk9SXG4iICsKIAkJCSIgICAgfVxuIiArCiAJCQkiICAgIHJldHVybiBz
dHJlYW0uY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsgLy8gTk8gRVJST1JcbiIgKwotCQkJ
IiAgfVxuIiArCisJCQkiICAgICAgfVxuIiArCiAJCQkiICBwcml2YXRlIHN0YXRpYyB2b2lkIHdp
dGhXaWxkY2FyZChTdHJlYW08PyBleHRlbmRzIFN0cmluZz4gZGlzdGluY3QpIHtcbiIgKwogCQkJ
IiAgICBkaXN0aW5jdC5mb3JFYWNoKHMxIC0+IFN5c3RlbS5vdXQucHJpbnRsbihzMSkpOyAvLyBo
b3ZlciBvbiBzOiBOT1QgT0tcbiIgKwotCQkJIiAgfVxuIiArCisJCQkiICAgIH1cbiIgKwogCQkJ
IiAgcHJpdmF0ZSBzdGF0aWMgdm9pZCB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4gZGlz
dGluY3QpIHtcbiIgKwogCQkJIiAgICBkaXN0aW5jdC5mb3JFYWNoKHMyIC0+IFN5c3RlbS5vdXQu
cHJpbnRsbihzMikpOyAvLyBob3ZlciBvbiBzOiBPa1xuIiArCiAJCQkiICB9XG4iICsKQEAgLTkx
MzcsNyArOTE0Nyw3IEBACiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAK
IAkJIglGdW5jdGlvbjxDTDxJbnRlZ2VyPiwgU3RyaW5nPiB2NSA9IENMOjptZXRob2QxO1xuIiAr
IAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5cbiIg
KyAKLQkJIlRoZSB0eXBlIENMIGRvZXMgbm90IGRlZmluZSBtZXRob2QxKENMPEludGVnZXI+KSB0
aGF0IGlzIGFwcGxpY2FibGUgaGVyZVxuIiArIAorCQkiQ2Fubm90IG1ha2UgYSBzdGF0aWMgcmVm
ZXJlbmNlIHRvIHRoZSBub24tc3RhdGljIG1ldGhvZCBtZXRob2QxKENMKSBmcm9tIHRoZSB0eXBl
IENMXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgOClcbiIgKyAKIAkJIgl2NSA9IHQgLT4gdC5tZXRob2QxKCk7CVxuIiArIApAQCAtOTY1
OSwxMiArOTY2OSw3IEBACiAJCQkiCX1cbiIgKwogCQkJIn1cbiIgCiAJfSwKLQkiLS0tLS0tLS0t
LVxuIiArIAotCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCi0JIglCaW5h
cnlPcGVyYXRvcjxTdWJzdW1lcjw/IHN1cGVyIFQ+PiBhdHRlbXB0X1hfMyA9IFN1YnN1bWVyOjph
bmRUaGUzO1xuIiArIAotCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCSJUaGUgdHlwZSBTdWJzdW1lciBk
b2VzIG5vdCBkZWZpbmUgYW5kVGhlMyhTdWJzdW1lcjxjYXB0dXJlIzUtb2YgPyBzdXBlciBUPiwg
U3Vic3VtZXI8Y2FwdHVyZSM1LW9mID8gc3VwZXIgVD4pIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJl
XG4iICsgCi0JIi0tLS0tLS0tLS1cbiIpOworCSIiKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBuZXN0
ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMKIHB1YmxpYyB2b2lk
IHRlc3Q0Mzk1OTQoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKaW5kZXggZjdlOGM2ZS4uOWQwYjczNSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0
aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBl
QW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNjc0NCwxMiArNjc0NCw3IEBACiAJCSIxLiBFUlJPUiBp
biBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAogCQkiCWZpbHRlcjIubWFwKHAg
LT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkpKTtc
biIgKyAKIAkJIgkgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiVGhlIGNvbnN0cnVjdG9yIFBhaXI8UGF0
aCxPYmplY3Q+KFBhdGgsICg8bm8gdHlwZT4gcCkgLT4ge30pIGlzIHVuZGVmaW5lZFxuIiArIAot
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0
IGxpbmUgOSlcbiIgKyAKLQkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9G
aWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCi0JCSIJICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxu
IiArIAotCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVu
Y3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKKwkJIkNhbm5vdCBpbmZlciB0eXBlIGFyZ3VtZW50cyBm
b3IgUGFpcjw+XG4iICsgCiAJCSItLS0tLS0tLS0tXG4iLAogCQluZXcgU3RyaW5nW117amZ4SmFy
fSk7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QVNUTm9kZS5qYXZhCmluZGV4IGVkMjA0YjUuLjk2NGRkYWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC02MCwxMCAr
NjAsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
TWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlBhY2thZ2VCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZE1l
dGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Qb2x5VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qcm9ibGVtTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1SZWFzb25zOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVmZXJlbmNlQmluZGluZzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNjb3BlOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU291cmNlVHlwZUJp
bmRpbmc7CkBAIC0zMjksNiArMzI2LDcgQEAKIAogCQlzdXBlcigpOwogCX0KKwkKIAlwcml2YXRl
IHN0YXRpYyBpbnQgY2hlY2tJbnZvY2F0aW9uQXJndW1lbnQoQmxvY2tTY29wZSBzY29wZSwgRXhw
cmVzc2lvbiBhcmd1bWVudCwgVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSwgVHlwZUJpbmRpbmcg
YXJndW1lbnRUeXBlLCBUeXBlQmluZGluZyBvcmlnaW5hbFBhcmFtZXRlclR5cGUpIHsKIAkJYXJn
dW1lbnQuY29tcHV0ZUNvbnZlcnNpb24oc2NvcGUsIHBhcmFtZXRlclR5cGUsIGFyZ3VtZW50VHlw
ZSk7CiAKQEAgLTY1MCwxMjAgKzY0OCw0MiBAQAogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29r
dXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25z
IGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMg
dG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdl
dCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYgdGhpcyByZXNvbHZp
bmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdh
cmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVuZGVkIHNpZGUgZWZm
ZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2Nh
dGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9jYXRpb24gdGhlIG91
dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBAcGFyYW0gbWV0aG9k
QmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5n
IHR5cGUgaW5mZXJlbmNlKS4KKwkgKiBAcGFyYW0gbWV0aG9kIHRoZSBtZXRob2QgcHJvZHVjZWQg
YnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZpbmcgdHlwZSBpbmZlcmVuY2UpLgogCSAqIEBwYXJh
bSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVudCB0eXBlcyBhcyBjb2xsZWN0ZWQgZnJvbSBmaXJz
dCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24gYXJndW1lbnRzIGFuZCBhcyB1c2VkIGZvcgogCSAq
IAl0aGUgbWV0aG9kIGxvb2t1cC4KLQkgKiBAcGFyYW0gc2NvcGUgc2NvcGUgZm9yIGVycm9yIHJl
cG9ydGluZworCSAqIEBwYXJhbSBzY29wZSBzY29wZSBmb3IgcmVzb2x1dGlvbi4KIAkgKi8KLQlw
dWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRp
b24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50VHlwZXMsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmICghaW52b2NhdGlvbi5pbm5lcnNO
ZWVkVXBkYXRlKCkpCisJcHVibGljIHN0YXRpYyB2b2lkIHJlc29sdmVQb2x5RXhwcmVzc2lvbkFy
Z3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBl
QmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkJTWV0aG9kQmlu
ZGluZyBjYW5kaWRhdGVNZXRob2QgPSBtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSA/IG1ldGhvZCA6
IG1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nID8gKChQcm9ibGVtTWV0aG9k
QmluZGluZykgbWV0aG9kKS5jbG9zZXN0TWF0Y2ggOiBudWxsOworCQlpZiAoY2FuZGlkYXRlTWV0
aG9kID09IG51bGwpCiAJCQlyZXR1cm47Ci0JCWludCBwcm9ibGVtUmVhc29uID0gMDsKLQkJTWV0
aG9kQmluZGluZyBjYW5kaWRhdGVNZXRob2Q7Ci0JCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCWNhbmRpZGF0ZU1ldGhvZCA9IG1ldGhvZEJpbmRpbmc7Ci0JCX0gZWxz
ZSBpZiAobWV0aG9kQmluZGluZyBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7Ci0J
CQlwcm9ibGVtUmVhc29uID0gbWV0aG9kQmluZGluZy5wcm9ibGVtSWQoKTsKLQkJCWNhbmRpZGF0
ZU1ldGhvZCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZEJpbmRpbmcpLmNsb3Nlc3RN
YXRjaDsKLQkJfSBlbHNlIHsKLQkJCWNhbmRpZGF0ZU1ldGhvZCA9IG51bGw7Ci0JCX0KLQkJaWYg
KGNhbmRpZGF0ZU1ldGhvZCAhPSBudWxsKSB7Ci0JCQlib29sZWFuIHZhcmlhYmxlQXJpdHkgPSBj
YW5kaWRhdGVNZXRob2QuaXNWYXJhcmdzKCk7Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4
ID0gbnVsbDsKLQkJCWlmIChjYW5kaWRhdGVNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZykgewotCQkJCWluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29u
dGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGNhbmRpZGF0ZU1ldGhvZCk7Ci0JCQkJ
aWYgKGluZkN0eCAhPSBudWxsKSB7Ci0JCQkJCWlmIChpbmZDdHguc3RlcENvbXBsZXRlZCAhPSBJ
bmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewotCQkJCQkJLy8gb25seSB3b3JrIGlu
IHRoZSBleGFjdCBzdGF0ZSBvZiBUWVBFX0lORkVSUkVECi0JCQkJCQkvLyAtIGJlbG93IHdlJ3Jl
IG5vdCB5ZXQgcmVhZHkKLQkJCQkJCS8vIC0gYWJvdmUgd2UncmUgYWxyZWFkeSBkb25lLWRvbmUK
LQkJCQkJCXJldHVybjsKLQkJCQkJfQotCQkJCQl2YXJpYWJsZUFyaXR5ICY9IGluZkN0eC5pc1Zh
ckFyZ3MoKTsgLy8gVE9ETzogaWYgbm8gaW5mQ3R4IGlzIGF2YWlsYWJsZSwgZG8gd2UgaGF2ZSB0
byByZS1jaGVjayBpZiB0aGlzIGlzIGEgdmFyYXJncyBpbnZvY2F0aW9uPwotCQkJCX0KLQkJCX0g
ZWxzZSBpZiAoaW52b2NhdGlvbiBpbnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0J
CQkJaWYgKCgoQWxsb2NhdGlvbkV4cHJlc3Npb24paW52b2NhdGlvbikuc3VzcGVuZGVkUmVzb2x1
dGlvblN0YXRlICE9IG51bGwpCi0JCQkJCXJldHVybjsgLy8gbm90IHlldCByZWFkeQotCQkJfQot
CQkJCi0JCQlmaW5hbCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2Qu
cGFyYW1ldGVyczsKLQkJCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9jYXRpb24u
YXJndW1lbnRzKCk7Ci0JCQlFeHByZXNzaW9uIFtdIGFyZ3VtZW50cyA9IGlubmVyQXJndW1lbnRz
OwotCQkJaWYgKGluZkN0eCA9PSBudWxsICYmIHZhcmlhYmxlQXJpdHkgJiYgYXJndW1lbnRzICE9
IG51bGwgJiYgcGFyYW1ldGVycy5sZW5ndGggPT0gYXJndW1lbnRzLmxlbmd0aCkgeyAvLyByZS1j
aGVjawotCQkJCVR5cGVCaW5kaW5nIGxhc3RQYXJhbSA9IHBhcmFtZXRlcnNbcGFyYW1ldGVycy5s
ZW5ndGgtMV07Ci0JCQkJRXhwcmVzc2lvbiBsYXN0QXJnID0gYXJndW1lbnRzW2FyZ3VtZW50cy5s
ZW5ndGgtMV07Ci0JCQkJaWYgKGxhc3RBcmcuaXNDb21wYXRpYmxlV2l0aChsYXN0UGFyYW0sIG51
bGwpKSB7Ci0JCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKLQkJCQl9Ci0JCQl9Ci0JCQlmb3Ig
KGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAwIDogYXJndW1lbnRzLmxl
bmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IGFyZ3Vt
ZW50c1tpXTsKLQkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBlID0gbnVsbDsKLQkJ
CQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFt
ZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKLQkJCQlpZiAocGFyYW1ldGVyVHlw
ZSA9PSBudWxsICYmIHByb2JsZW1SZWFzb24gIT0gUHJvYmxlbVJlYXNvbnMuTm9FcnJvcikKLQkJ
CQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3aXRob3V0IGEgdGFyZ2V0IHR5cGUs
IGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSByZXNvbHZlIGVycm9yCi0KLQkJCQlp
ZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uICYmICgoTGFtYmRhRXhwcmVz
c2lvbikgYXJndW1lbnQpLmhhc0Vycm9ycygpKQotCQkJCQljb250aW51ZTsgLy8gZG9uJ3QgdXBk
YXRlIGlmIGlubmVyIHBvbHkgaGFzIGVycm9ycwotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNl
b2YgSW52b2NhdGlvbikgewotCQkJCQlJbnZvY2F0aW9uIGlubmVySW52b2NhdGlvbiA9IChJbnZv
Y2F0aW9uKWFyZ3VtZW50OwotCQkJCQlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBpbm5lckludm9j
YXRpb24uYmluZGluZyhwYXJhbWV0ZXJUeXBlLCB0cnVlLCBzY29wZSk7Ci0JCQkJCWlmIChiaW5k
aW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJ
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA9
IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGJpbmRpbmc7Ci0JCQkJCQlJbmZl
cmVuY2VDb250ZXh0MTggaW5uZXJDb250ZXh0ID0gaW5uZXJJbnZvY2F0aW9uLmdldEluZmVyZW5j
ZUNvbnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJCQlpZiAoaW5uZXJDb250ZXh0ICE9
IG51bGwpIHsKLQkJCQkJCQlpZiAoIWlubmVyQ29udGV4dC5oYXNSZXN1bHRGb3IocGFyYW1ldGVy
VHlwZSkpIHsKLQkJCQkJCQkJYXJndW1lbnQuc2V0RXhwZWN0ZWRUeXBlKHBhcmFtZXRlclR5cGUp
OwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGltcHJvdmVkQmluZGluZyA9IGlubmVyQ29udGV4dC5p
bmZlckludm9jYXRpb25UeXBlKGlubmVySW52b2NhdGlvbiwgcGFyYW1ldGVyaXplZE1ldGhvZCk7
Ci0JCQkJCQkJCWlmICghaW1wcm92ZWRCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJ
CQkJCWlubmVyQ29udGV4dC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbm5lckludm9jYXRpb24s
IGltcHJvdmVkQmluZGluZyk7Ci0JCQkJCQkJCX0KLQkJCQkJCQkJaWYgKGlubmVySW52b2NhdGlv
bi51cGRhdGVCaW5kaW5ncyhpbXByb3ZlZEJpbmRpbmcsIHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJ
CQkJCQlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW5uZXJJbnZvY2F0aW9uLCBpbXBy
b3ZlZEJpbmRpbmcsIHNjb3BlKTsKLQkJCQkJCQkJfQotCQkJCQkJCX0gZWxzZSBpZiAoaW5uZXJD
b250ZXh0LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRF
RCkgewotCQkJCQkJCQlpbm5lckNvbnRleHQucmViaW5kSW5uZXJQb2xpZXMocGFyYW1ldGVyaXpl
ZE1ldGhvZCwgaW5uZXJJbnZvY2F0aW9uKTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCQljb250
aW51ZTsgLy8gb3RoZXJ3aXNlIHRoZXNlIGhhdmUgYmVlbiBkZWFsdCB3aXRoIGR1cmluZyBpbm5l
ciBtZXRob2QgbG9va3VwCi0JCQkJCX0KLQkJCQl9Ci0KLQkJCQlpZiAoYXJndW1lbnQuaXNQb2x5
RXhwcmVzc2lvbigpKSB7Ci0JCQkJCS8vIHBvbHkgZXhwcmVzc2lvbnMgaW4gYW4gaW52b2NhdGlv
biBjb250ZXh0IG1heSBuZWVkIHRvIGJlIHJlc29sdmVkIG5vdzoKLQkJCQkJaWYgKGluZkN0eCAh
PSBudWxsICYmIGluZkN0eC5zdGVwQ29tcGxldGVkID09IEluZmVyZW5jZUNvbnRleHQxOC5CSU5E
SU5HU19VUERBVEVEKQotCQkJCQkJdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29s
dmVkVHlwZTsgLy8gaW4gdGhpcyBjYXNlIGFyZ3VtZW50IHdhcyBhbHJlYWR5IHJlc29sdmVkIHZp
YSBJbmZlcmVuY2VDb250ZXh0MTguYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMoKQotCQkJCQll
bHNlCi0JCQkJCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQuY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKHBhcmFtZXRlclR5cGUsIHNjb3BlKTsKLQotCQkJCQlpZiAocHJvYmxlbVJl
YXNvbiA9PSBQcm9ibGVtUmVhc29ucy5Ob0Vycm9yIC8vIHByZXNlcnZlIGVycm9ycwotCQkJCQkJ
CSYmIHVwZGF0ZWRBcmd1bWVudFR5cGUgIT0gbnVsbAkJCQkJLy8gZG8gd2UgaGF2ZSBhIHJlbGV2
YW50IHVwZGF0ZT8gLi4uCi0JCQkJCQkJJiYgISh1cGRhdGVkQXJndW1lbnRUeXBlIGluc3RhbmNl
b2YgUG9seVR5cGVCaW5kaW5nKSkKLQkJCQkJewotCQkJCQkJLy8gdXBkYXRlIHRoZSBhcmd1bWVu
dFR5cGVzIGFycmF5IChzdXBwb3NlZCB0byBiZSBvd25lZCBieSB0aGUgY2FsbGluZyBtZXRob2Qp
Ci0JCQkJCQkvLyBpbiBvcmRlciB0byBnaXZlIGJldHRlciBpbmZvcm1hdGlvbiBmb3Igc3Vic2Vx
dWVudCBjaGVja3MKLQkJCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSB1cGRhdGVkQXJndW1lbnRUeXBl
OwotCQkJCQl9Ci0JCQkJfQorCQlib29sZWFuIHZhcmlhYmxlQXJpdHkgPSBjYW5kaWRhdGVNZXRo
b2QuaXNWYXJhcmdzKCk7CisJCWZpbmFsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IGNhbmRp
ZGF0ZU1ldGhvZC5wYXJhbWV0ZXJzOworCQlFeHByZXNzaW9uW10gYXJndW1lbnRzID0gaW52b2Nh
dGlvbi5hcmd1bWVudHMoKTsKKwkJaWYgKHZhcmlhYmxlQXJpdHkgJiYgYXJndW1lbnRzICE9IG51
bGwgJiYgcGFyYW1ldGVycy5sZW5ndGggPT0gYXJndW1lbnRzLmxlbmd0aCkgeworCQkJaWYgKGFy
Z3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdLmlzQ29tcGF0aWJsZVdpdGgocGFyYW1ldGVyc1tw
YXJhbWV0ZXJzLmxlbmd0aC0xXSwgc2NvcGUpKSB7CisJCQkJdmFyaWFibGVBcml0eSA9IGZhbHNl
OwogCQkJfQogCQl9Ci0JCWludm9jYXRpb24uaW5uZXJVcGRhdGVEb25lKCk7Ci0JfQotCi0JcHVi
bGljIHN0YXRpYyB2b2lkIHJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9u
IGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZywgU2NvcGUgc2NvcGUpIHsK
LQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gbnVsbDsKLQkJRXhwcmVzc2lvbltdIGlu
bmVyQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJaWYgKGlubmVyQXJndW1l
bnRzICE9IG51bGwpIHsKLQkJCWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbaW5uZXJB
cmd1bWVudHMubGVuZ3RoXTsKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgaW5uZXJBcmd1bWVudHMu
bGVuZ3RoOyBpKyspCi0JCQkJYXJndW1lbnRUeXBlc1tpXSA9IGlubmVyQXJndW1lbnRzW2ldLnJl
c29sdmVkVHlwZTsKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cyA9PSBudWxs
ID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJRXhwcmVzc2lv
biBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUg
PSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZhcmlhYmxl
QXJpdHkpOworCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCkKKwkJCQljb250aW51ZTsgLy8g
bm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9ubHkg
aGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKKwkJCWlmIChhcmd1bWVudFR5cGVzW2ld
LmlzUG9seVR5cGUoKSkgeworCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJU
eXBlKTsKKwkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVz
b2x2ZVR5cGUoc2NvcGUpOyAKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBMYW1iZGFFeHBy
ZXNzaW9uKSB7CisJCQkJCS8vIExFLnJlc29sdmVUeXBlIG1heSByZXR1cm4gYSB2YWxpZCBiaW5k
aW5nIGJlY2F1c2UgcmVzb2x2ZSBkb2VzIG5vdCBkZXRlY3Qgc3RydWN0dXJhbCBlcnJvcnMgYXQg
dGhpcyBwb2ludC4KKwkJCQkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSAoTGFtYmRhRXhwcmVz
c2lvbikgYXJndW1lbnQ7CisJCQkJCWlmICghbGFtYmRhLmlzQ29tcGF0aWJsZVdpdGgocGFyYW1l
dGVyVHlwZSwgc2NvcGUpIHx8IGxhbWJkYS5oYXNFcnJvcnMoKSkKKwkJCQkJCWNvbnRpbnVlOwor
CQkJCX0KKwkJCQlpZiAodXBkYXRlZEFyZ3VtZW50VHlwZSAhPSBudWxsICYmIHVwZGF0ZWRBcmd1
bWVudFR5cGUua2luZCgpICE9IEJpbmRpbmcuUE9MWV9UWVBFKQorCQkJCQlhcmd1bWVudFR5cGVz
W2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKKwkJCX0KIAkJfQotCQlyZXNvbHZlUG9seUV4cHJl
c3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwgbWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywg
c2NvcGUpOwogCX0KIAogCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlQW5ub3RhdGlvbnMoQmxv
Y2tTY29wZSBzY29wZSwgQW5ub3RhdGlvbltdIHNvdXJjZUFubm90YXRpb25zLCBCaW5kaW5nIHJl
Y2lwaWVudCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IGIyZmUwNDMu
LmQwODcxMmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTY0LDYgKzY0
LDcgQEAKIAogCXB1YmxpYyBUeXBlUmVmZXJlbmNlIHR5cGU7CiAJcHVibGljIEV4cHJlc3Npb25b
XSBhcmd1bWVudHM7CisJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19Q
QVJBTUVURVJTOwogCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmc7CQkJCQkJCS8vIGV4YWN0
IGJpbmRpbmcgcmVzdWx0aW5nIGZyb20gbG9va3VwCiAJTWV0aG9kQmluZGluZyBzeW50aGV0aWNB
Y2Nlc3NvcjsJCQkJCQkvLyBzeW50aGV0aWMgYWNjZXNzb3IgZm9yIGlubmVyLWVtdWxhdGlvbgog
CXB1YmxpYyBUeXBlUmVmZXJlbmNlW10gdHlwZUFyZ3VtZW50czsKQEAgLTc3LDMwICs3OCw5IEBA
CiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2Fi
aWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRo
b2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UE1CLElDMTg+Ki8g
aW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVy
SW5mZXJlbmNlSGVscGVyOwotCi0JLyoqIFJlY29yZCB0byBrZWVwIHN0YXRlIGJldHdlZW4gZGlm
ZmVyZW50IHBhcnRzIG9mIHJlc29sdXRpb24uICovCi0JUmVzb2x1dGlvblN0YXRlIHN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZTsKLQljbGFzcyBSZXNvbHV0aW9uU3RhdGUgewotCQlCbG9ja1Njb3Bl
IHNjb3BlOwotCQlib29sZWFuIGlzRGlhbW9uZDsKLQkJYm9vbGVhbiBkaWFtb25kTmVlZHNEZWZl
cnJpbmc7Ci0JCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0OwotCQlib29sZWFuIGNhbm5vdEluZmVy
RGlhbW9uZDsgLy8gcmVxdWVzdCB0aGUgYW4gZXJyb3IgYmUgcmVwb3J0ZWQgaW4gZHVlIHRpbWUK
LQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzOwotCQlib29sZWFuIGhhc1JlcG9ydGVkRXJy
b3I7Ci0KLQkJUmVzb2x1dGlvblN0YXRlKEJsb2NrU2NvcGUgc2NvcGUsIGJvb2xlYW4gaXNEaWFt
b25kLCBib29sZWFuIGRpYW1vbk5lZWRzRGVmZXJyaW5nLAotCQkJCWJvb2xlYW4gYXJnc0NvbnRh
aW5DYXN0LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMpCi0JCXsKLQkJCXRoaXMuc2NvcGUg
PSBzY29wZTsKLQkJCXRoaXMuaXNEaWFtb25kID0gaXNEaWFtb25kOwotCQkJdGhpcy5kaWFtb25k
TmVlZHNEZWZlcnJpbmcgPSBkaWFtb25OZWVkc0RlZmVycmluZzsKLQkJCXRoaXMuYXJnc0NvbnRh
aW5DYXN0ID0gYXJnc0NvbnRhaW5DYXN0OwotCQkJdGhpcy5hcmd1bWVudFR5cGVzID0gYXJndW1l
bnRUeXBlczsKLQkJfQotCX0KLQorCXByaXZhdGUgQmxvY2tTY29wZSBlbmNsb3NpbmdTY29wZTsK
Kwlwcml2YXRlIGJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0OworCQogcHVibGljIEZsb3dJbmZvIGFu
YWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4
dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAkvLyBjaGVjayBjYXB0dXJlZCB2YXJpYWJsZXMgYXJl
IGluaXRpYWxpemVkIGluIGN1cnJlbnQgY29udGV4dCAoMjYxMzQpCiAJY2hlY2tDYXB0dXJlZExv
Y2FsSW5pdGlhbGl6YXRpb25JZk5lY2Vzc2FyeSgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmJpbmRp
bmcuZGVjbGFyaW5nQ2xhc3MuZXJhc3VyZSgpLCBjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsKQEAg
LTM0MSwxODggKzMyMSwxNjAgQEAKIAkvLyBQcm9wYWdhdGUgdGhlIHR5cGUgY2hlY2tpbmcgdG8g
dGhlIGFyZ3VtZW50cywgYW5kIGNoZWNrIGlmIHRoZSBjb25zdHJ1Y3RvciBpcyBkZWZpbmVkLgog
CWZpbmFsIGJvb2xlYW4gaXNEaWFtb25kID0gdGhpcy50eXBlICE9IG51bGwgJiYgKHRoaXMudHlw
ZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDA7CiAJZmluYWwgQ29tcGlsZXJPcHRpb25z
IGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCWJvb2xlYW4gZGlh
bW9uZE5lZWRzRGVmZXJyaW5nID0gZmFsc2U7CiAJbG9uZyBzb3VyY2VMZXZlbCA9IGNvbXBpbGVy
T3B0aW9ucy5zb3VyY2VMZXZlbDsKIAlpZiAodGhpcy5jb25zdGFudCAhPSBDb25zdGFudC5Ob3RB
Q29uc3RhbnQpIHsKIAkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsKKwkJ
dGhpcy5lbmNsb3NpbmdTY29wZSA9IHNjb3BlOwogCQlpZiAodGhpcy50eXBlID09IG51bGwpIHsK
IAkJCS8vIGluaXRpYWxpemF0aW9uIG9mIGFuIGVudW0gY29uc3RhbnQKIAkJCXRoaXMucmVzb2x2
ZWRUeXBlID0gc2NvcGUuZW5jbG9zaW5nUmVjZWl2ZXJUeXBlKCk7CiAJCX0gZWxzZSB7CiAJCQl0
aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBj
aGVjayBib3VuZHMqLyk7Ci0JCQlpZiAoaXNEaWFtb25kICYmIHRoaXMudHlwZUV4cGVjdGVkID09
IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQgJiYg
c291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmICh0aGlz
LnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5n
KCkpCi0JCQkJCWRpYW1vbmROZWVkc0RlZmVycmluZyA9IHRydWU7Ci0JCQl9CiAJCX0KLQl9IGVs
c2UgewotCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGU7Ci0JfQot
Ci0JaWYgKHRoaXMudHlwZSAhPSBudWxsKSB7Ci0JCWNoZWNrSWxsZWdhbE51bGxBbm5vdGF0aW9u
KHNjb3BlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCWNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRp
b246IHsKLQkJCWlmICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVk
VHlwZVJlZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQot
CQkJCVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSAoUmVmZXJlbmNlQmluZGluZyl0aGlz
LnJlc29sdmVkVHlwZTsKLQkJCQlpZiAoY3VycmVudFR5cGUgPT0gbnVsbCkgcmV0dXJuIGN1cnJl
bnRUeXBlOwotCQkJCWRvIHsKLQkJCQkJLy8gaXNTdGF0aWMoKSBpcyBhbnN3ZXJpbmcgdHJ1ZSBm
b3IgdG9wbGV2ZWwgdHlwZXMKLQkJCQkJaWYgKChjdXJyZW50VHlwZS5tb2RpZmllcnMgJiBDbGFz
c0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRB
bGxvY2F0aW9uOwotCQkJCQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNr
UGFyYW1ldGVyaXplZEFsbG9jYXRpb247Ci0JCQkJfSB3aGlsZSAoKGN1cnJlbnRUeXBlID0gY3Vy
cmVudFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51bGwpOwotCQkJCVBhcmFtZXRlcml6ZWRRdWFs
aWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZl
cmVuY2UpIHRoaXMudHlwZTsKLQkJCQlmb3IgKGludCBpID0gcVJlZi50eXBlQXJndW1lbnRzLmxl
bmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7Ci0JCQkJCWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0g
IT0gbnVsbCkgewotCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFF1YWxpZmll
ZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlvbih0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBl
KTsKLQkJCQkJCWJyZWFrOworCQlpZiAodGhpcy50eXBlICE9IG51bGwpIHsKKwkJCWNoZWNrSWxs
ZWdhbE51bGxBbm5vdGF0aW9uKHNjb3BlLCB0aGlzLnJlc29sdmVkVHlwZSk7CisJCQljaGVja1Bh
cmFtZXRlcml6ZWRBbGxvY2F0aW9uOiB7CisJCQkJaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0
cmluZz4uWTxJbnRlZ2VyPigpCisJCQkJCVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSAo
UmVmZXJlbmNlQmluZGluZyl0aGlzLnJlc29sdmVkVHlwZTsKKwkJCQkJaWYgKGN1cnJlbnRUeXBl
ID09IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsKKwkJCQkJZG8geworCQkJCQkJLy8gaXNTdGF0
aWMoKSBpcyBhbnN3ZXJpbmcgdHJ1ZSBmb3IgdG9wbGV2ZWwgdHlwZXMKKwkJCQkJCWlmICgoY3Vy
cmVudFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYykgIT0gMCkg
YnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKKwkJCQkJCWlmIChjdXJyZW50VHlw
ZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKKwkJCQkJ
fSB3aGlsZSAoKGN1cnJlbnRUeXBlID0gY3VycmVudFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51
bGwpOworCQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSBxUmVmID0gKFBh
cmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlzLnR5cGU7CisJCQkJCWZvciAo
aW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHsKKwkJ
CQkJCWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0gIT0gbnVsbCkgeworCQkJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRp
b24odGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7CisJCQkJCQkJYnJlYWs7CisJCQkJCQl9
CiAJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KLQl9Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBh
ZnRlciBhcmdzIGFyZSByZXNvbHZlZAorCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFy
Z3MgYXJlIHJlc29sdmVkCiAKLQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJp
YyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgewot
CQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJYm9vbGVhbiBhcmdI
YXNFcnJvciA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKLQkJdGhp
cy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlmb3Ig
KGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZl
cmVuY2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07Ci0JCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVB
cmd1bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNo
ZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgewotCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKLQkJCX0K
LQkJCWlmIChhcmdIYXNFcnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQp
IHsKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5
cGVSZWZlcmVuY2UpOwotCQkJfQotCQl9Ci0JCWlmIChpc0RpYW1vbmQpIHsKLQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRoaXMu
dHlwZUFyZ3VtZW50cyk7Ci0JCQlyZXR1cm4gbnVsbDsKLQkJfQotCQlpZiAoYXJnSGFzRXJyb3Ip
IHsKLQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8g
cmVzb2x2ZSBhcmd1bWVudHMKLQkJCQlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVu
dHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKLQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2
ZVR5cGUoc2NvcGUpOworCQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBj
b25zdHJ1Y3RvciBjYWxsKQorCQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKKwkJ
CWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOworCQkJYm9vbGVhbiBhcmdI
YXNFcnJvciA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKKwkJCXRo
aXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVS
ZWZlcmVuY2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAv
KiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwor
CQkJCX0KKwkJCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdp
bGRjYXJkKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2ls
ZGNhcmQodHlwZVJlZmVyZW5jZSk7CiAJCQkJfQogCQkJfQotCQkJcmV0dXJuIG51bGw7CisJCQlp
ZiAoaXNEaWFtb25kKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGlhbW9uZE5vdFdp
dGhFeHBsaWNpdFR5cGVBcmd1bWVudHModGhpcy50eXBlQXJndW1lbnRzKTsKKwkJCQlyZXR1cm4g
bnVsbDsKKwkJCX0KKwkJCWlmIChhcmdIYXNFcnJvcikgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50
cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKKwkJCQkJ
Zm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsr
KSB7CisJCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJCQkJCX0K
KwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CiAJCX0KLQl9CiAKLQkvLyBidWZmZXJpbmcg
dGhlIGFyZ3VtZW50cycgdHlwZXMKLQlib29sZWFuIGFyZ3NDb250YWluQ2FzdCA9IGZhbHNlOwot
CVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKLQlp
ZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFs
c2U7Ci0JCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7Ci0JCWFyZ3VtZW50VHlw
ZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5n
dGg7IGkrKykgewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwot
CQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVu
dC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRl
ciBvbgotCQkJCWFyZ3NDb250YWluQ2FzdCA9IHRydWU7CisJCS8vIGJ1ZmZlcmluZyB0aGUgYXJn
dW1lbnRzJyB0eXBlcworCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJYm9vbGVh
biBhcmdIYXNFcnJvciA9IGZhbHNlOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxl
bmd0aDsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwor
CQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCUV4cHJlc3Npb24gYXJn
dW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBD
YXN0RXhwcmVzc2lvbikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2Fy
eUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJCQl0aGlzLmFyZ3NDb250YWlu
Q2FzdCA9IHRydWU7CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElO
Vk9DQVRJT05fQ09OVEVYVCk7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlw
ZSAhPSBudWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5j
ZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7
IC8vJE5PTi1OTFMtMSQKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50
LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7
CisJCQkJfQogCQkJfQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElP
Tl9DT05URVhUKTsKLQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVs
bCkgCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJB
cmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1O
TFMtMSQKLQkJCWlmICgoYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNj
b3BlKSkgPT0gbnVsbCkgewotCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKLQkJCX0KLQkJCWlmIChz
b3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIChhcmd1bWVudC5pc1Bv
bHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pICYmICgo
SW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpKSB7Ci0JCQkJaWYgKHRoaXMu
aW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhl
bHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJfQotCQl9Ci0JCWlmIChhcmdI
YXNFcnJvcikgewotCQkJLyogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTM0NTM1OSwgaWYgYXJndW1lbnRzIGhhdmUgZXJyb3JzLCBjb21wbGV0ZWx5IGJhaWwg
b3V0IGluIHRoZSA8PiBjYXNlLgorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJLyogaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTM1OSwgaWYgYXJndW1l
bnRzIGhhdmUgZXJyb3JzLCBjb21wbGV0ZWx5IGJhaWwgb3V0IGluIHRoZSA8PiBjYXNlLgogCQkJ
ICAgTm8gbWVhbmluZ2Z1bCB0eXBlIHJlc29sdXRpb24gaXMgcG9zc2libGUgc2luY2UgaW5mZXJl
bmNlIG9mIHRoZSBlbGlkZWQgdHlwZXMgaXMgZnVsbHkgdGllZCB0byBhcmd1bWVudCB0eXBlcy4g
RG8KIAkJCSAgIG5vdCByZXR1cm4gdGhlIHBhcnRpYWxseSByZXNvbHZlZCB0eXBlLgotCQkJICov
Ci0JCQlpZiAoaXNEaWFtb25kKSB7Ci0JCQkJcmV0dXJuIG51bGw7IC8vIG5vdCB0aGUgcGFydGlh
bGx5IGNvb2tlZCB0aGlzLnJlc29sdmVkVHlwZQotCQkJfQotCQkJaWYgKHRoaXMucmVzb2x2ZWRU
eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJCS8vIHJlY29yZCBhIGJlc3Qg
Z3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgY29uc3RydWN0
b3IgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdb
bGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKLQkJCQkJcHNl
dWRvQXJnc1tpXSA9IGFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwg
OiBhcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxs
IHR5cGUKKwkJCQkgKi8KKwkJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJCXJldHVybiBudWxsOyAv
LyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQl9Ci0JCQkJ
dGhpcy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5y
ZXNvbHZlZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2Up
OwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQg
dGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFi
b3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwp
IHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2gg
PSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNs
b3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0J
CQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAo
Y2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29w
ZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBp
Z25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2Vs
ZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5t
b2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQlp
ZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJ
CS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9Bcmdz
ID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0t
aSA+PSAwOykgeworCQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9
PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVw
bGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJCX0KKwkJCQkJdGhpcy5i
aW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZl
ZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOworCQkJ
CQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhl
IGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0
IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7
CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmlu
ZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNo
ID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChj
bG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0K
KwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGlu
ZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJ
CWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYg
IXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJ
CQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRl
IGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3Jp
Z2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7
CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZTsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAh
dGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG51bGw7CisJ
CX0KKworCQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0gY29u
c3RhbnQgaW5pdHMKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlw
ZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5u
b3RJbnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKIAkJCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKIAkJfQogCX0KLQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVs
bCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlyZXR1cm4gbnVs
bDsKLQl9Ci0KLQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0g
Y29uc3RhbnQgaW5pdHMKLQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRU
eXBlLmNhbkJlSW5zdGFudGlhdGVkKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fu
bm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKLQl9Ci0JUmVzb2x1dGlvblN0YXRlIHN0YXRlID0gbmV3IFJlc29s
dXRpb25TdGF0ZShzY29wZSwgaXNEaWFtb25kLCBkaWFtb25kTmVlZHNEZWZlcnJpbmcsIGFyZ3ND
b250YWluQ2FzdCwgYXJndW1lbnRUeXBlcyk7Ci0JaWYgKGRpYW1vbmROZWVkc0RlZmVycmluZykg
ewotCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSA9IHN0YXRlOyAvLyByZXNvbHZpbmcg
dG8gYmUgY29udGludWVkIGxhdGVyICh2aWEgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBl
KSkuCi0JCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwotCX0KLQotCWlmICghcmVz
b2x2ZVBhcnQyKHN0YXRlKSkKLQkJcmV0dXJuIG51bGw7Ci0JcmV0dXJuIHJlc29sdmVQYXJ0Myhz
dGF0ZSk7Ci19Ci0KLS8qKiBTZWNvbmQgcGFydCBvZiByZXNvbHZpbmcgdGhhdCBtYXkgaGFwcGVu
IG11bHRpcGxlIHRpbWVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLiAqLwotYm9vbGVhbiBy
ZXNvbHZlUGFydDIoUmVzb2x1dGlvblN0YXRlIHN0YXRlKSB7Ci0JLy8gVE9ETzogYWxsIGluZm9y
bWF0aW9uIHBlcnNpc3RlZCBkdXJpbmcgdGhpcyBtZXRob2QgbWF5IG5lZWQgdG8gYmUgc3RvcmVk
IHBlciB0YXJnZXRUeXBlPwotCWlmIChzdGF0ZS5pc0RpYW1vbmQpIHsKLQkJUmVmZXJlbmNlQmlu
ZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKLQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9
IGluZmVyRWxpZGVkVHlwZXMoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZl
ZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgc3RhdGUuYXJndW1lbnRU
eXBlcywgc3RhdGUuc2NvcGUpOwotCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7Ci0JCQlp
ZiAoIXN0YXRlLmRpYW1vbmROZWVkc0RlZmVycmluZykgewotCQkJCXN0YXRlLnNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJc3RhdGUuaGFz
UmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwotCQkJ
fSBlbHNlIHsKLQkJCQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSB0cnVlOyAvLyBkZWZlciBy
ZXBvcnRpbmcKKwkKKwlpZiAoaXNEaWFtb25kICYmIHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwg
JiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQgJiYgc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQlpZiAodGhpcy5yZXNvbHZl
ZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CisJ
CQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQkJUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nIHR5cGUyID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVk
VHlwZShnZW5lcmljVHlwZSwgZ2VuZXJpY1R5cGUudHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlw
ZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGlu
ZmVyRWxpZGVkVHlwZXMoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdHlwZTIsIHR5cGUyLmVu
Y2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CisJCQlpZiAoaW5mZXJy
ZWRUeXBlcyA9PSBudWxsKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5m
ZXJFbGlkZWRUeXBlcyh0aGlzKTsKKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxs
OwogCQkJfQotCQkJcmV0dXJuIGZhbHNlOworCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5
cGUucmVzb2x2ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVk
VHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOworCQkJdGhpcy5iaW5kaW5n
ID0gZmluZENvbnN0cnVjdG9yQmluZGluZyhzY29wZSwgdGhpcywgKFJlZmVyZW5jZUJpbmRpbmcp
IHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOworCQkJcmV0dXJuIG5ldyBQ
b2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0KLQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5
cGUucmVzb2x2ZWRUeXBlID0gc3RhdGUuc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0
ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOwotCQlzdGF0ZS5j
YW5ub3RJbmZlckRpYW1vbmQgPSBmYWxzZTsKLSAJfQotCVJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2
ZXJUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwotCXRoaXMuYmlu
ZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc3RhdGUuc2NvcGUsIHRoaXMsIHJlY2VpdmVy
VHlwZSwgc3RhdGUuYXJndW1lbnRUeXBlcyk7Ci0JcmV0dXJuIHRydWU7Ci19Ci0KLS8qKiBGaW5h
bCBwYXJ0IG9mIHJlc29sdmluZyAob25jZSk6IGNoZWNrIGFuZCByZXBvcnQgdmFyaW91cyBlcnJv
ciBjb25kaXRpb25zLiAqLwotVHlwZUJpbmRpbmcgcmVzb2x2ZVBhcnQzKFJlc29sdXRpb25TdGF0
ZSBzdGF0ZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYm
IHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpCi0JCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKLQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSA9IG51
bGw7Ci0JaWYgKHN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkgewotCQlzdGF0ZS5zY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQlyZXR1cm4gdGhp
cy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCX0KKwkKKwlpZiAoaXNEaWFtb25kKSB7CisJCVJlZmVy
ZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhp
cy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVk
VHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMu
cmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJn
dW1lbnRUeXBlcywgc2NvcGUpOworCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CisJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOworCQkJ
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKKwkJfQorCQl0aGlzLnJlc29sdmVkVHlw
ZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBh
cmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisgCX0K
KwkKKwlSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0
aGlzLnJlc29sdmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5n
KHNjb3BlLCB0aGlzLCByZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJUmVmZXJl
bmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZTsKKwkKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlm
ICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5kaW5n
LmRlY2xhcmluZ0NsYXNzID0gYWxsb2NhdGlvblR5cGU7CkBAIC01MzAsMzAgKzQ4MiwyOSBAQAog
CQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNWYWxp
ZEJpbmRpbmcoKSkgewogCQkJcmV0dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRp
bmcpOwogCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5kaW5n
LnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLm1pc3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJp
bmRpbmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0
b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0
aGlzLmJpbmRpbmcsIHN0YXRlLnNjb3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYgKGlz
TWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlzY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7
CiAJfQotCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGwsIGFs
bG9jYXRpb25UeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCBzdGF0ZS5hcmd1bWVu
dFR5cGVzLCBzdGF0ZS5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2Nh
dGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYWxsb2NhdGlvblR5cGUsIHRoaXMuYmluZGluZywg
dGhpcy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFpbkNhc3Qs
IHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAJaWYgKHRo
aXMudHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLnR5cGVW
YXJpYWJsZXMgPT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQlzdGF0ZS5zY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0
aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJn
dW1lbnRzKTsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBlQXJndW1l
bnRzRm9yTWV0aG9kSW52b2NhdGlvbih0aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1
bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50cyk7CiAJfQotCWlmICghc3RhdGUuaXNEaWFtb25kICYm
IHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRz
KCkpIHsKLSAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlw
ZSgpLCBzdGF0ZS5hcmd1bWVudFR5cGVzLCBzdGF0ZS5zY29wZSk7CisJaWYgKCFpc0RpYW1vbmQg
JiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVu
dHMoKSkgeworIAkJY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdU
eXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUpOwogIAl9Ci0JQ29tcGlsZXJPcHRpb25z
IGNvbXBpbGVyT3B0aW9ucyA9IHN0YXRlLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCWlmIChj
b21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkICYmICh0
aGlzLmJpbmRpbmcudGFnQml0cyAmIFRhZ0JpdHMuSXNOdWxsbmVzc0tub3duKSA9PSAwKSB7Ci0J
CW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIoc3RhdGUuc2NvcGUuZW52aXJvbm1l
bnQoKSwgY29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3RhdGlvbnMpCi0JCQkJLmNoZWNr
SW1wbGljaXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBudWxsLypzcmNNZXRob2QqLywg
ZmFsc2UsIHN0YXRlLnNjb3BlKTsKKwkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmll
cihzY29wZS5lbnZpcm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMuaW5oZXJpdE51bGxBbm5vdGF0
aW9ucykKKwkJCQkuY2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0aGlzLmJpbmRpbmcsIG51
bGwvKnNyY01ldGhvZCovLCBmYWxzZSwgc2NvcGUpOwogCX0KLQlyZWNvcmRFeGNlcHRpb25zRm9y
RW5jbG9zaW5nTGFtYmRhKHN0YXRlLnNjb3BlLCB0aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9u
cyk7CisJcmVjb3JkRXhjZXB0aW9uc0ZvckVuY2xvc2luZ0xhbWJkYShzY29wZSwgdGhpcy5iaW5k
aW5nLnRocm93bkV4Y2VwdGlvbnMpOwogCXJldHVybiBhbGxvY2F0aW9uVHlwZTsKIH0KIApAQCAt
NTcyLDM4ICs1MjMsNTEgQEAKIAl9CiB9CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxp
ZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVu
Y2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmlu
YWwgQmxvY2tTY29wZSBzY29wZSkgeworLy8gRm9yIGFsbG9jYXRpb24gZXhwcmVzc2lvbnMsIGJv
eGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUgYXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5LCBzaW5j
ZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVzIGFyZSBub3QgZ2VuZXJpYy4KK3B1YmxpYyBib29s
ZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKKwlyZXR1cm4gaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7Cit9
CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgZmlu
YWwgU2NvcGUgc29tZVNjb3BlKSB7CisKKwlUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRo
aXMucmVzb2x2ZWRUeXBlOworCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRp
bmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy50eXBlRXhwZWN0ZWQ7CisJCXRyeSB7CisJCQl0aGlz
LnR5cGVFeHBlY3RlZCA9IGxlZnQ7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0g
KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlw
ZSgpOworCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMo
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2
ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzLmVuY2xvc2lu
Z1Njb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpCisJCQkJcmV0dXJuIGZhbHNl
OworCQkJYWxsb2NhdGlvblR5cGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgp
KTsKKwkJfSBmaW5hbGx5IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0gb2xkRXhwZWN0ZWRUeXBl
OworCQl9CisJfQorCXJldHVybiBhbGxvY2F0aW9uVHlwZSAhPSBudWxsICYmIGFsbG9jYXRpb25U
eXBlLmlzQ29tcGF0aWJsZVdpdGgobGVmdCwgdGhpcy5lbmNsb3NpbmdTY29wZSk7Cit9CisKK3B1
YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBCbG9ja1Njb3BlIHNjb3BlKSB7CiAJLyogR2l2
ZW4gdGhlIGFsbG9jYXRpb24gdHlwZSBhbmQgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0
b3IsIHNlZSBpZiB3ZSBjYW4gc3ludGhlc2l6ZSBhIGdlbmVyaWMgc3RhdGljIGZhY3RvcnkKIAkg
ICBtZXRob2QgdGhhdCB3b3VsZCwgZ2l2ZW4gdGhlIGFyZ3VtZW50IHR5cGVzIGFuZCB0aGUgaW52
b2NhdGlvbiBzaXRlLCBtYW51ZmFjdHVyZSBhIHBhcmFtZXRlcml6ZWQgb2JqZWN0IG9mIHR5cGUg
YWxsb2NhdGlvblR5cGUuCiAJICAgSWYgd2UgYXJlIHN1Y2Nlc3NmdWwgdGhlbiBieSBkZXNpZ24g
YW5kIGNvbnN0cnVjdGlvbiwgdGhlIHBhcmFtZXRlcml6YXRpb24gb2YgdGhlIHJldHVybiB0eXBl
IG9mIHRoZSBmYWN0b3J5IG1ldGhvZCBpcyBpZGVudGljYWwKIAkgICB0byB0aGUgdHlwZXMgZWxp
ZGVkIGluIHRoZSA8Pi4KIAkgKi8gICAKLQlNZXRob2RCaW5kaW5nIGZhY3RvcnkgPSBzY29wZS5n
ZXRTdGF0aWNGYWN0b3J5KGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5
cGVzLCB0aGlzKTsKKwlNZXRob2RCaW5kaW5nIGZhY3RvcnkgPSBzY29wZS5nZXRTdGF0aWNGYWN0
b3J5KGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHRoaXMpOwog
CWlmIChmYWN0b3J5IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
ICYmIGZhY3RvcnkuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgZ2VuZXJpY0ZhY3RvcnkgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nKSBmYWN0b3J5OwogCQl0aGlzLmluZmVycmVkUmV0dXJuVHlwZSA9IGdlbmVyaWNGYWN0
b3J5LmluZmVycmVkUmV0dXJuVHlwZTsKLQkJLy8gdGhpcyBpcyBvdXIgbGFzdCBjaGFuY2UgdG8g
aW5zcGVjdCB0aGUgcmVzdWx0IG9mIHRoZSBpbmZlcmVuY2UgdGhhdCBpcyBjb25uZWN0ZWQgdG8g
dGhlIHRocm93LWF3YXkgZmFjdG9yeSBiaW5kaW5nCi0JCUluZmVyZW5jZUNvbnRleHQxOCBpbmZD
dHgxOCA9IGdldEluZmVyZW5jZUNvbnRleHQoZ2VuZXJpY0ZhY3RvcnkpOwotCQlpZiAoaW5mQ3R4
MTggIT0gbnVsbCAmJiBpbmZDdHgxOC5zdGVwQ29tcGxldGVkID09IEluZmVyZW5jZUNvbnRleHQx
OC5CSU5ESU5HU19VUERBVEVEKSB7Ci0JCQkvLyByZWZyZXNoIGFyZ3VtZW50VHlwZXMgZnJvbSB1
cGRhdGVkIGJpbmRpbmdzIGluIGFyZ3VtZW50czoKLQkJCS8vICh0aGlzIHNob3VsZG4ndCBiZSBz
dHJpY3RseSBuZWNlc3NhcnksIGFzIEZ1bmN0aW9uRXhwcmVzc2lvbi5pc0NvbXBhdGlibGVXaXRo
KCkgc2hvdWxkIGdpdmUgdGhlIHNhbWUgcmVzdWx0LAotCQkJLy8gIGJ1dCBpdCdzIHByb2JhYmx5
IGJlIGEgZ29vZCBpZGVhIHRvIGF2b2lkIHRoZSBuZWNlc3NpdHkgdG8gY2FsbCBpc0NvbXBhdGli
bGVXaXRoKCkgaW4gdGhlIGZpcnN0IHBsYWNlKS4gCi0JCQlmb3IgKGludCBpID0gMDsgaSA8IGFy
Z3VtZW50VHlwZXMubGVuZ3RoOyBpKyspIHsKLQkJCQlpZiAoYXJndW1lbnRUeXBlc1tpXSBpbnN0
YW5jZW9mIFBvbHlUeXBlQmluZGluZykKLQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJn
dW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKLQkJCX0KLQkJfQogCQlyZXR1cm4gKChQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcpZmFjdG9yeS5yZXR1cm5UeXBlKS5hcmd1bWVudHM7CiAJfQogCXJldHVy
biBudWxsOwogfQogCi1wdWJsaWMgdm9pZCBjaGVja1R5cGVBcmd1bWVudFJlZHVuZGFuY3koUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVu
Y2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgQmxvY2tTY29w
ZSBzY29wZSkgeworcHVibGljIHZvaWQgY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KFBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBlbmNs
b3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywgZmluYWwgQmxvY2tTY29wZSBz
Y29wZSkgewogCWlmICgoc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY29tcHV0ZVNldmVyaXR5KElQ
cm9ibGVtLlJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHMpID09IFByb2JsZW1T
ZXZlcml0aWVzLklnbm9yZSkgfHwgc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSByZXR1cm47CiAJaWYgKGFsbG9jYXRpb25UeXBl
LmFyZ3VtZW50cyA9PSBudWxsKSByZXR1cm47ICAvLyByYXcgYmluZGluZwogCWlmICh0aGlzLmdl
bmVyaWNUeXBlQXJndW1lbnRzICE9IG51bGwpIHJldHVybjsgLy8gZGlhbW9uZCBjYW4ndCBvY2N1
ciB3aXRoIGV4cGxpY2l0IHR5cGUgYXJncyBmb3IgY29uc3RydWN0b3IKIAlpZiAodGhpcy50eXBl
ID09IG51bGwpIHJldHVybjsKLQlpZiAoYXJndW1lbnRUeXBlcyA9PSBCaW5kaW5nLk5PX1BBUkFN
RVRFUlMgJiYgdGhpcy50eXBlRXhwZWN0ZWQgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcpIHsKKwlpZiAoYXJndW1lbnRUeXBzID09IEJpbmRpbmcuTk9fUEFSQU1FVEVSUyAmJiB0
aGlzLnR5cGVFeHBlY3RlZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgewog
CQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZXhwZWN0ZWQgPSAoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnR5cGVFeHBlY3RlZDsKIAkJaWYgKGV4cGVjdGVkLmFyZ3VtZW50cyAhPSBu
dWxsICYmIGFsbG9jYXRpb25UeXBlLmFyZ3VtZW50cy5sZW5ndGggPT0gZXhwZWN0ZWQuYXJndW1l
bnRzLmxlbmd0aCkgewogCQkJLy8gY2hlY2sgdGhlIGNhc2Ugd2hlbiBubyBjdG9yIHRha2VzIG5v
IHBhcmFtcyBhbmQgaW5mZXJlbmNlIHVzZXMgdGhlIGV4cGVjdGVkIHR5cGUgZGlyZWN0bHkKQEAg
LTYyNSw3ICs1ODksNyBAQAogCQkvLyBjaGVja2luZyBmb3IgcmVkdW5kYW50IHR5cGUgcGFyYW1l
dGVycyBtdXN0IGZha2UgYSBkaWFtb25kLCAKIAkJLy8gc28gd2UgaW5mZXIgdGhlIHNhbWUgcmVz
dWx0cyBhcyB3ZSB3b3VsZCBnZXQgd2l0aCBhIGRpYW1vbmQgaW4gc291cmNlIGNvZGU6CiAJCXRo
aXMudHlwZS5iaXRzIHw9IElzRGlhbW9uZDsKLQkJaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVk
VHlwZXMoYWxsb2NhdGlvblR5cGUsIGVuY2xvc2luZ1R5cGUsIGFyZ3VtZW50VHlwZXMsIHNjb3Bl
KTsKKwkJaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMoYWxsb2NhdGlvblR5cGUsIGVu
Y2xvc2luZ1R5cGUsIGFyZ3VtZW50VHlwcywgc2NvcGUpOwogCX0gZmluYWxseSB7CiAJCS8vIHJl
c2V0IGVmZmVjdHMgb2YgaW5mZXJlbmNlCiAJCXRoaXMudHlwZS5iaXRzID0gcHJldmlvdXNCaXRz
OwpAQCAtNzAxLDc1ICs2NjUsMTkgQEAKIAogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvbjogLS0K
IHB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9v
bGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlICE9IG51bGwgJiYgdGFyZ2V0VHlwZSAhPSBudWxsKSB7Ci0JCXNldEV4cGVj
dGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJaWYgKCFyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRS
ZXNvbHV0aW9uU3RhdGUpKSB7Ci0JCQlpZiAocmVwb3J0RXJyb3JzICYmICF0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKSB7Ci0JCQkJaWYgKHRoaXMuc3VzcGVu
ZGVkUmVzb2x1dGlvblN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkKLQkJCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJCQllbHNlCi0JCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiY29uc3RydWN0
b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJ
CXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwot
CQkJfQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQl9Ci0JaWYgKHJlcG9ydEVycm9ycyAmJiB0aGlz
LmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJ
aWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKQotCQkJdGhpcy5iaW5kaW5n
LmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwot
CQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7
Ci0JCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1
ZTsKLQkJfQotCX0KIAlyZXR1cm4gdGhpcy5iaW5kaW5nOwotfQotcHVibGljIFR5cGVCaW5kaW5n
IGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29w
ZSBzY29wZSkgewotCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQlib29sZWFuIG5l
ZWRzVXBkYXRlID0gdGhpcy5iaW5kaW5nID09IG51bGwgfHwgCQkJCQkJCQkJCQkJCQkJCS8vIG5v
dCB5ZXQgcmVzb2x2ZWQKLQkJCSh0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRhcmdldFR5
cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRU
eXBlKSk7CS8vIHByZXZpb3VzIGF0dGVtcHQgd2FzIHdyb25nCi0JaWYgKG5lZWRzVXBkYXRlICYm
IHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJLy8gQXR0ZW1wdCB0byByZXNv
bHZlIGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAotCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRS
ZXNvbHV0aW9uU3RhdGUpOwotCX0KLQkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0
RmluYWxUYXJnZXRUeXBlKCwsKToKLQlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHgg
PSBnZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5i
aW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJl
bmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCXRoaXMudHlwZUV4cGVjdGVkID0gdGFy
Z2V0VHlwZTsKLQkJCU1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZv
Y2F0aW9uVHlwZSh0aGlzLCAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlz
LmJpbmRpbmcpOwotCQkJaWYgKHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRU
eXBlKSkgewotCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMs
IHVwZGF0ZWRCaW5kaW5nLCBzY29wZSk7Ci0JCQl9Ci0JCX0KLQl9Ci0JaWYgKHRoaXMuc3VzcGVu
ZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJcmV0dXJuIHJlc29sdmVQYXJ0Myh0aGlz
LnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlw
ZTsKIH0KIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewogCXJldHVybiB0aGlzLmFy
Z3VtZW50czsKIH0KIAotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGlu
ZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFz
VXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVy
ZW5jZUNvbnRleHRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkgPT0gdXBkYXRl
ZEJpbmRpbmcub3JpZ2luYWwoKSkgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVy
ZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldCh0aGlzLmJpbmRpbmcpOwot
CQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0
KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9t
IGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAo
YnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRp
b24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQl9Ci0JfQotCXRoaXMuYmluZGluZyA9
IHVwZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3M7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KIHB1YmxpYyB2b2lkIHJlZ2lzdGVy
SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9k
LCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250
ZXh0cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1
cFRhYmxlKCk7CiAJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7
CisKKwkvLyBTcmlrYW50aCBjaGVjayB0aGlzLgorCQogCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwg
PSBtZXRob2Qub3JpZ2luYWwoKTsKIAlpZiAob3JpZ2luYWwgaW5zdGFuY2VvZiBTeW50aGV0aWNG
YWN0b3J5TWV0aG9kQmluZGluZykgewogCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyBz
eW50aE9yaWdpbmFsID0gKFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKW9yaWdpbmFsOwpA
QCAtNzc3LDI1ICs2ODUsMTEgQEAKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQocGFyYW1l
dGVyaXplZEN0b3IsIGluZkN0eDE4KTsKIAl9CiB9Ci1wdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJl
bmNlKCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwotfQogcHVi
bGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRN
ZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51
bGwpCiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmlu
ZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gaW5uZXJzTmVl
ZFVwZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwot
fQotcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJl
bmNlSGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotfQotCiAv
Ly0tIGludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBFeHByZXNzaW9uQ29udGV4
dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4
dDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQ2FzdEV4cHJlc3Npb24uamF2YQppbmRleCAxNzFlZjhkLi4wMTY3MWE0IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhw
cmVzc2lvbi5qYXZhCkBAIC0yODEsNyArMjgxLDcgQEAKIAkJCXB1YmxpYyBpbnQgc291cmNlRW5k
KCkgeyByZXR1cm4gMDsgfQogCQkJcHVibGljIFR5cGVCaW5kaW5nIGludm9jYXRpb25UYXJnZXRU
eXBlKCkgeyByZXR1cm4gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsgfQog
CQkJcHVibGljIGJvb2xlYW4gcmVjZWl2ZXJJc0ltcGxpY2l0VGhpcygpIHsgcmV0dXJuIGludm9j
YXRpb25TaXRlLnJlY2VpdmVySXNJbXBsaWNpdFRoaXMoKTt9Ci0JCQlwdWJsaWMgSW5mZXJlbmNl
Q29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzb21lU2NvcGUpIHsgcmV0dXJu
IG51bGw7IC8qIHN1cHByZXNzIGluZmVyZW5jZSAqLyB9CisJCQlwdWJsaWMgSW5mZXJlbmNlQ29u
dGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzb21lU2NvcGUpIHsgcmV0dXJuIGlu
dm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzb21lU2NvcGUpOyB9CiAJCQlwdWJs
aWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7IHJldHVybiBpbnZv
Y2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpOyB9CiAJCX07CiAJCU1ldGhvZEJpbmRp
bmcgYmluZGluZ0lmTm9DYXN0OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5k
ZXggZWUzMTA4Ni4uY2EyNjNhNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4
cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZh
CkBAIC01Nyw3ICs1Nyw2IEBACiAJcHJpdmF0ZSBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBm
YWxzZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9yaWdpbmFsVmFsdWVJZlRydWVUeXBlOwogCXBy
aXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlOwotCXByaXZhdGUgQmxv
Y2tTY29wZSBwb2x5RXhwcmVzc2lvblNjb3BlOwogCXByaXZhdGUgYm9vbGVhbiB1c2UxOHNwZWNp
ZmljczsKIAlwdWJsaWMgQ29uZGl0aW9uYWxFeHByZXNzaW9uKAogCQlFeHByZXNzaW9uIGNvbmRp
dGlvbiwKQEAgLTQ2NCwxMiArNDYzLDYgQEAKIAkJCWlmICh0aGlzLnZhbHVlSWZGYWxzZSBpbnN0
YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZhbHVlSWZGYWxzZS5iaXRzIHw9IERpc2FibGVV
bm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgogCQkJdGhpcy5vcmln
aW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5yZXNvbHZlVHlwZShzY29w
ZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQlpZiAodGhpcy5leHBlY3Rl
ZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsg
Ly8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0aW5nLgotCQkJ
CX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdpbmFs
VmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUg
PT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJfSBlbHNlIHsKQEAgLTQ4NCwxMSArNDc3LDkg
QEAKIAkJfQogCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7CiAJCQlpZiAodGhpcy5leHBlY3Rl
ZFR5cGUgPT0gbnVsbCkgewotCQkJCXRoaXMucG9seUV4cHJlc3Npb25TY29wZSA9IHNjb3BlOyAv
LyBwcmVzZXJ2ZSBmb3IgZXZlbnR1YWwgcmVzb2x1dGlvbi9lcnJvciByZXBvcnRpbmcuCiAJCQkJ
cmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCQl9Ci0JCQljb21wdXRlQ29udmVy
c2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBlKTsKLQkJCXJldHVybiB0aGlzLnJlc29sdmVk
VHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0g
Y29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlzLmV4cGVjdGVkVHlwZSkgPyB0aGlzLmV4cGVj
dGVkVHlwZSA6IG51bGw7CiAJCX0KIAkJVHlwZUJpbmRpbmcgdmFsdWVJZlRydWVUeXBlID0gdGhp
cy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAkJVHlwZUJpbmRpbmcgdmFsdWVJZkZhbHNlVHlw
ZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlOwpAQCAtNjYxLDcgKzY1Miw4IEBACiAJ
CXJldHVybiBudWxsOwogCX0KIAotCXByb3RlY3RlZCB2b2lkIGNvbXB1dGVDb252ZXJzaW9ucyhC
bG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJcHJvdGVjdGVkIGJv
b2xlYW4gY29tcHV0ZUNvbnZlcnNpb25zKEJsb2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUpIHsKKwkJYm9vbGVhbiBvayA9IHRydWU7CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFs
dWVJZlRydWVUeXBlICE9IG51bGwgJiYgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1Zh
bGlkQmluZGluZygpKSB7CiAJCQlpZiAodGhpcy52YWx1ZUlmVHJ1ZS5pc0NvbnN0YW50VmFsdWVP
ZlR5cGVBc3NpZ25hYmxlVG9UeXBlKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUsIHRhcmdl
dFR5cGUpCiAJCQkJCXx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNDb21wYXRpYmxl
V2l0aCh0YXJnZXRUeXBlKSkgewpAQCAtNjgyLDYgKzY3NCw3IEBACiAJCQkJfQogCQkJfSBlbHNl
IHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9y
aWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRUeXBlLCB0aGlzLnZhbHVlSWZUcnVlLCBudWxs
KTsKKwkJCQlvayA9IGZhbHNlOwogCQkJfQogCQl9CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJ
ZkZhbHNlVHlwZSAhPSBudWxsICYmIHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFs
aWRCaW5kaW5nKCkpIHsKQEAgLTcwNCw4ICs2OTcsMTAgQEAKIAkJCQl9CiAJCQl9IGVsc2Ugewog
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2lu
YWxWYWx1ZUlmRmFsc2VUeXBlLCB0YXJnZXRUeXBlLCB0aGlzLnZhbHVlSWZGYWxzZSwgbnVsbCk7
CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQorCQlyZXR1cm4gb2s7CiAJfQogCiAJcHVibGlj
IHZvaWQgc2V0RXhwZWN0ZWRUeXBlKFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSkgewpAQCAtNzE5
LDE5ICs3MTQsNyBAQAogCXB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29u
dGV4dCgpIHsKIAkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CiAJfQotCQotCXB1Ymxp
YyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJLy8gaW4gMS44IGlmIHRyZWF0ZWQgYXMgYSBwb2x5
IGV4cHJlc3Npb246Ci0JCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCXRhcmdldFR5cGUg
PSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUpOwotCQkJdGhp
cy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9IHRoaXMudmFsdWVJZlRydWUuY2hlY2tBZ2FpbnN0
RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKLQkJCXRoaXMub3JpZ2luYWxWYWx1
ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFsc2UuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRU
eXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKLQkJCWNvbXB1dGVDb252ZXJzaW9ucyh0aGlzLnBvbHlF
eHByZXNzaW9uU2NvcGUsIHRhcmdldFR5cGUpOwotCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0YXJn
ZXRUeXBlOwotCQl9Ci0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKLQl9Ci0JCisJCQogCXB1
YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJCXJldHVybiB0aGlzLnZhbHVlSWZUcnVl
LmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHRhcmdldFR5cGUsIG1ldGhvZCkgCiAJCQkJJiYg
dGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodGFyZ2V0VHlwZSwg
bWV0aG9kKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQppbmRleCAyNDM0
OTE1Li4yZWJkZGNiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JD
YWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCkBA
IC03OSw3ICs3OSw2IEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZv
Y2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZl
cmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxl
Lyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJpdmF0
ZSBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcjsKIAogCXB1YmxpYyBF
eHBsaWNpdENvbnN0cnVjdG9yQ2FsbChpbnQgYWNjZXNzTW9kZSkgewogCQl0aGlzLmFjY2Vzc01v
ZGUgPSBhY2Nlc3NNb2RlOwpAQCAtMzk0LDEwICszOTMsNiBAQAogCQkJCQlpZiAoKGFyZ3VtZW50
VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpIHsKIAkJCQkJ
CWFyZ0hhc0Vycm9yID0gdHJ1ZTsKIAkJCQkJfQotCQkJCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8
ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFyZ3Vt
ZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgPT0gbnVsbCkKLQkJCQkJCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElu
bmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJCX0KIAkJCQl9CiAJCQkJaWYgKGFyZ0hhc0Vycm9y
KSB7CiAJCQkJCWlmIChyZWNlaXZlclR5cGUgPT0gbnVsbCkgewpAQCAtNDk4LDU2ICs0OTMsMjYg
QEAKIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJfQogCi0JLy8gLS0gaW50ZXJm
YWNlIEludm9jYXRpb246IC0tCiAJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQkJ
aWYgKHJlcG9ydEVycm9ycykgewotCQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQotCQkJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3Ig
aXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJZWxz
ZSBpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKQotCQkJCXNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwotCQl9CiAJ
CXJldHVybiB0aGlzLmJpbmRpbmc7CiAJfQotCXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRz
KCkgewotCQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7Ci0JfQotCXB1YmxpYyBib29sZWFuIHVwZGF0
ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUpIHsKLQkJYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJp
bmRpbmc7Ci0JCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwpIHsKLQkJCUluZmVy
ZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7Ci0JCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBk
YXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IHsKLQkJCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsK
LQkJCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBt
YXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRlZXAgaW5uZXJzKToK
LQkJCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRl
ZEJpbmRpbmcpOwotCQkJfQotCQl9Ci0JCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwot
CQlyZXR1cm4gaGFzVXBkYXRlOwotCX0KKwkKKwkvLyBTcmlrYW50aCAtIENoZWNrIC0gVGhlc2Ug
ZG9uJ3QgbWFrZSBzZW5zZSBmb3IgRUNDID8gCiAJcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVu
Y2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVy
ZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9
PSBudWxsKQogCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJs
ZSgpOwogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsKIAl9
CisJCiAJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFt
ZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCQlpZiAodGhpcy5pbmZlcmVuY2VDb250
ZXh0cyA9PSBudWxsKQogCQkJcmV0dXJuIG51bGw7CiAJCXJldHVybiAoSW5mZXJlbmNlQ29udGV4
dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogCX0KLQlwdWJsaWMgYm9v
bGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkJJiYgZ2V0SW5mZXJlbmNl
Q29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcp
ICE9IG51bGw7CisJCisJcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CisJCXJldHVy
biB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgp
IHsKLQkJcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbDsKLQl9Ci0JcHVi
bGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewotCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVy
ID0gbnVsbDsKLQl9Ci0JcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNl
SGVscGVyKCkgewotCQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsKLQl9Ci0KIAkv
LyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiAJcHVibGljIEluZmVyZW5jZUNvbnRl
eHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIG5ldyBJ
bmZlcmVuY2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmph
dmEKaW5kZXggOTE4YjFiNC4uN2UxMzk2MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKQEAgLTYzLDcgKzYzLDcg
QEAKIAlwdWJsaWMgQ29uc3RhbnQgY29uc3RhbnQ7CiAKIAlwdWJsaWMgaW50IHN0YXRlbWVudEVu
ZCA9IC0xOwotCisJCiAJLy9Tb21lIGV4cHJlc3Npb24gbWF5IG5vdCBiZSB1c2VkIC0gZnJvbSBh
IGphdmEgc2VtYW50aWMgcG9pbnQKIAkvL29mIHZpZXcgb25seSAtIGFzIHN0YXRlbWVudHMuIE90
aGVyIG1heS4gSW4gb3JkZXIgdG8gYXZvaWQgdGhlIGNyZWF0aW9uCiAJLy9vZiB3cmFwcGVycyBh
cm91bmQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byB0dW5lIHRoZW0gYXMgZXhwcmVzc2lvbgpAQCAt
MTA2MCwxNiArMTA2MCw2IEBACiAJCX0KIAl9CiAJcmV0dXJuIGV4cHJlc3Npb25UeXBlOwotfQot
Ci0vKioKLSAqIE9uY2Ugb3V0ZXIgY29udGV4dHMgaGF2ZSBmaW5hbGl6ZWQgdGhlIHRhcmdldCB0
eXBlIGZvciB0aGlzIGV4cHJlc3Npb24sCi0gKiBwZXJmb3JtIGFueSBjaGVja3MgdGhhdCBtaWdo
dCBoYXZlIGJlZW4gZGVsYXllZCBwcmV2aW91c2x5LgotICogQHBhcmFtIHRhcmdldFR5cGUgdGhl
IGZpbmFsIHRhcmdldCB0eXBlIChha2EgZXhwZWN0ZWRUeXBlKSBmb3IgdGhpcyBleHByZXNzaW9u
LgotICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKLSAqLwotcHVibGlj
IFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJn
ZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsgLy8gc3Vi
Y2xhc3NlcyBtYXkgY2hvb3NlIHRvIGRvIHJlYWwgc3R1ZmYgaGVyZQogfQogCiAvKioKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1YWMxNGYyLi4xYzBiN2I4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0yMDUsMTEgKzIwNSw2IEBACiAJCXJldHVy
biBudWxsOwogCX0KIAotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdl
dFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0VHlw
ZSA9IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1cm4g
cmVzb2x2ZVR5cGVFeHBlY3RpbmcodGhpcy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7Ci0J
fQotCiAJY2xhc3MgVmlzaWJpbGl0eUluc3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRv
ciB7CiAKIAkJcHJpdmF0ZSBTY29wZSBzY29wZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5u
ZXJJbmZlcmVuY2VIZWxwZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJbmZlcmVuY2VIZWxwZXIu
amF2YQpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggODM4MWI1Yy4uMDAwMDAwMAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKKysrIC9kZXYvbnVsbApAQCAt
MSw0MiArMCwwIEBACi0vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDE0IEdLIFNvZnR3YXJlIEFHLgotICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwotICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCi0gKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAotICog
aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKLSAqCi0gKiBDb250cmli
dXRvcnM6Ci0gKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1l
bnRhdGlvbgotICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi1wYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3Q7Ci0KLWltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKLWlt
cG9ydCBqYXZhLnV0aWwuTWFwOwotCi1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7Ci0KLXB1YmxpYyBjbGFzcyBJbm5lcklu
ZmVyZW5jZUhlbHBlciB7Ci0KLQkvKiogRm9yIGVhY2ggY2FuZGlkYXRlIG1ldGhvZCBzdG9yZSBo
ZXJlIHRoZSBhcnJheSBvZiBhcmd1bWVudCB0eXBlcyBpZiBpbm5lciBpbmZlcmVuY2UgaGFzIGlt
cHJvdmVkIGFueSBkdXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4gKi8KLQlwcml2YXRl
IE1hcDxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10+IGFyZ1R5cGVzUGVyQ2FuZGlkYXRlID0g
bmV3IEhhc2hNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPigpOwotCi0JcHVibGljIHZv
aWQgcmVnaXN0ZXJJbm5lclJlc3VsdChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmcg
cmVzb2x2ZWRUeXBlLCBpbnQgYXJnQ291bnQsIGludCBhcmdJZHgpIHsKLQkJVHlwZUJpbmRpbmdb
XSBhcmdUeXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0KG1ldGhvZCk7Ci0JCWlm
IChhcmdUeXBlcyA9PSBudWxsKQotCQkJdGhpcy5hcmdUeXBlc1BlckNhbmRpZGF0ZS5wdXQobWV0
aG9kLCBhcmdUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmdDb3VudF0pOwotCQlhcmdUeXBlc1th
cmdJZHhdID0gcmVzb2x2ZWRUeXBlOwotCX0KLQkKLQlwdWJsaWMgVHlwZUJpbmRpbmdbXSBnZXRB
cmd1bWVudFR5cGVzRm9yQ2FuZGlkYXRlKE1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlLCBUeXBlQmlu
ZGluZ1tdIHBsYWluQXJnVHlwZXMpIHsKLQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IHRoaXMu
YXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0KGNhbmRpZGF0ZSk7Ci0JCWlmIChhcmdUeXBlcyA9PSBu
dWxsKQotCQkJcmV0dXJuIHBsYWluQXJnVHlwZXM7Ci0JCS8vIGZpbGwgaW4gYW55IGJsYW5rcyBu
b3c6Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3RoOyBpKyspIHsKLQkJCWlm
IChhcmdUeXBlc1tpXSA9PSBudWxsKQotCQkJCWFyZ1R5cGVzW2ldID0gcGxhaW5BcmdUeXBlc1tp
XTsKLQkJfQotCQlyZXR1cm4gYXJnVHlwZXM7Ci0JfQotfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9JbnZvY2F0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQppbmRleCBhYzU0
NDdmLi42Y2QzMTgxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQpAQCAtMTksMTYgKzE5LDEyIEBACiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKIAog
LyoqCi0gKiBBYnN0cmFjdGlvbiBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhhdCBjYW4gdHJp
Z2dlciAKLSAqIDx1bD4KLSAqIDxsaT5JbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNl
cyAoMTguNS4xKSwgYW5kPC9saT4gCi0gKiA8bGk+SW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAo
MTguNS4yKS48L2xpPgotICogPC91bD4KLSAqLworICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRp
b24gQVNUIG5vZGVzIHRoYXQgY2FuIHRyaWdnZXIgb3ZlcmxvYWQgcmVzb2x1dGlvbi4gCisqLwog
cHVibGljIGludGVyZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgewogCiAJ
RXhwcmVzc2lvbltdIGFyZ3VtZW50cygpOwotCisJCiAJLyoqCiAJICogQW5zd2VyIHRoZSByZXNv
bHZlZCBtZXRob2QgYmluZGluZyBvZiB0aGlzIGludm9jYXRpb24uCiAJICogSWYgYSB0YXJnZXQg
dHlwZSBpcyBnaXZlbiwgdGhlIGludm9jYXRpb24gZ2V0cyBhIGNoYW5jZSB0byBkbyByZXBlYXRl
ZCBtZXRob2QgbG9va3VwLgpAQCAtMzgsNTIgKzM0LDIxIEBACiAJICogCiAJICovCiAJTWV0aG9k
QmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJy
b3JzLCBTY29wZSBzY29wZSk7Ci0KKwkKIAkvKioKIAkgKiBSZWdpc3RlciB0aGUgZ2l2ZW4gaW5m
ZXJlbmNlIGNvbnRleHQsIHdoaWNoIHByb2R1Y2VkIHRoZSBnaXZlbiBtZXRob2QgYXMgaXRzIGlu
dGVybWVkaWF0ZSByZXN1bHQuCiAJICogTGF0ZXIgd2hlbiB0aGUgc2FtZSBtZXRob2QgaXMgc2Vs
ZWN0ZWQgYXMgdGhlIG1vc3Qgc3BlY2lmaWMgbWV0aG9kLCB0aGUgaW5mZXJlbmNlIGNvbnRleHQK
LQkgKiBmb3IgdGhpcyBwYWlyIChJbnZvY2F0aW9uIHggTWV0aG9kQmluZGluZykgY2FuIGJlIGxv
b2tlZCB1cCB1c2luZyB7QGxpbmsgI2dldEV4cHJlc3Npb25Db250ZXh0KCl9CisJICogZm9yIHRo
aXMgcGFpciAoSW52b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNp
bmcge0BsaW5rICNnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
KX0KIAkgKiB0byBjb250aW51ZSB0aGUgdHlwZSBpbmZlcmVuY2UuCiAJICovCiAJdm9pZCByZWdp
c3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1l
dGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KTsKIAkKKwogCS8qKgotCSAqIFJldHJp
ZXZlIGFuIGluZmVyZW5jZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kIHdoaWNoIG11c3Qg
aGF2ZSBiZWVuIHJlZ2lzdGVyZWQKLQkgKiB1c2luZyB7QGxpbmsgI3JlZ2lzdGVySW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcsIEluZmVyZW5jZUNvbnRl
eHQxOCl9LgorCSAqIFJldHJpZXZlIGFuIGluZmVyZW5jZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4g
bWV0aG9kLgogCSAqIEBwYXJhbSBtZXRob2QgYW4gaW50ZXJtZWRpYXRlIHJlc29sdmVkIGNhbmRp
ZGF0ZSBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogcmV0dXJuIGEgc3VzcGVuZGVkIGluZmVyZW5j
ZSBjb250ZXh0IG9yIG51bGwgaWYgbm9uZSB3YXMgcmVnaXN0ZXJlZCBmb3IgdGhpcyBtZXRob2Qu
CisJICogcmV0dXJuIHRoZSBhc3NvY2lhdGVkIGluZmVyZW5jZSBjb250ZXh0LgogCSAqLwogCUlu
ZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RC
aW5kaW5nIG1ldGhvZCk7CiAKLQkvKioKLQkgKiBBbnN3ZXIgdHJ1ZSBpZiB0aGlzIGludm9jYXRp
b24gaGFzIGRldGVybWluZWQgaXRzIGJpbmRpbmcgdXNpbmcgaW5mZXJlbmNlLgotCSAqLwotCWJv
b2xlYW4gdXNlc0luZmVyZW5jZSgpOwotCQotCS8qKgotCSAqIFdoZXJlIHRoZSBBU1Qgbm9kZSBt
YXkgaG9sZCByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHRzIG9mIEludm9jYXRpb24gQXBwbGljYWJp
bGl0eSBJbmZlcmVuY2UsCi0JICogdGhpcyBtZXRob2QgYWxsb3dzIHRvIHVwZGF0ZSB0aG9zZSBy
ZWZlcmVuY2VzIHRvIHRoZSByZXN1bHQgb2YgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4KLQkg
KiBOb3RlIHRoYXQgcG90ZW50aWFsbHkgbW9yZSB0aGFuIGp1c3QgdGhlIG1ldGhvZCBiaW5kaW5n
IGlzIHVwZGF0ZWQuCi0JICogQHBhcmFtIHVwZGF0ZWRCaW5kaW5nIHRoZSBmaW5hbCBtZXRob2Qg
YmluZGluZyBhZnRlciBmdWxsIGluZmVyZW5jZQotCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0
YXJnZXQgdHlwZSB1c2VkIGR1cmluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlCi0JICogQHJl
dHVybiB0cnVlIGlmIGFuIHVwZGF0ZSBoYXMgaGFwcGVuZWQKLQkgKi8KLQlib29sZWFuIHVwZGF0
ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUpOwotCQotCS8qKgotCSAqIEFuc3dlciB3aGV0aGVyIHRoZSBjdXJyZW50IGludm9jYXRp
b24gaGFzIGlubmVyIGV4cHJlc3Npb25zIHRoYXQgc3RpbGwgbmVlZCB1cGRhdGluZyBhZnRlciBp
bmZlcmVuY2UuCi0JICovCi0JYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCk7Ci0KLQkvKioKLQkg
KiBNYXJrIHRoYXQgdXBkYXRpbmcgKHRoZSBuZWVkIGZvciB3aGljaCBpcyBzaWduYWxlZCB2aWEg
e0BsaW5rICNpbm5lcnNOZWVkVXBkYXRlKCl9KSBoYXMgYmVlbiBkb25lLgotCSAqLwotCXZvaWQg
aW5uZXJVcGRhdGVEb25lKCk7Ci0KLQkvKioKLQkgKiBJZiB0aGlzIGludm9jYXRpb24gaGFzIGFu
eSBwb2x5IGV4cHJlc3Npb25zIGFzIGFyZ3VtZW50cywgdGhpcyBtZXRob2QgYW5zd2VycyBhbiBp
bmZlcmVuY2UgaGVscGVyIAotCSAqIHRoYXQgbWVkaWF0ZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29s
dXRpb24sIGV2ZW4gaWYgbm8gYWN0dWFsIGluZmVyZW5jZSBoYXBwZW5zIGZvciB0aGlzIGludm9j
YXRpb24uCi0JICovCi0JSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIo
KTsKLQkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2YWRvY0FsbG9jYXRpb25FeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmlu
ZGV4IDVmMjMxMDcuLjVkYTZlMDkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2YWRvY0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9KYXZhZG9jQWxsb2NhdGlvbkV4
cHJlc3Npb24uamF2YQpAQCAtNDMsMjMgKzQzLDIzIEBACiAJCX0KIAogCQkvLyBidWZmZXJpbmcg
dGhlIGFyZ3VtZW50cycgdHlwZXMKLQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gQmlu
ZGluZy5OT19QQVJBTUVURVJTOworCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BB
UkFNRVRFUlM7CiAJCWJvb2xlYW4gaGFzVHlwZVZhckFyZ3MgPSBmYWxzZTsKIAkJaWYgKHRoaXMu
YXJndW1lbnRzICE9IG51bGwpIHsKIAkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsKIAkJ
CWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7Ci0JCQlhcmd1bWVudFR5cGVzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlw
ZUJpbmRpbmdbbGVuZ3RoXTsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsK
IAkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CiAJCQkJaWYgKHNj
b3BlLmtpbmQgPT0gU2NvcGUuQ0xBU1NfU0NPUEUpIHsKLQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9
IGFyZ3VtZW50LnJlc29sdmVUeXBlKChDbGFzc1Njb3BlKXNjb3BlKTsKKwkJCQkJdGhpcy5hcmd1
bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKENsYXNzU2NvcGUpc2NvcGUpOwog
CQkJCX0gZWxzZSB7Ci0JCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlw
ZSgoQmxvY2tTY29wZSlzY29wZSk7CisJCQkJCXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3Vt
ZW50LnJlc29sdmVUeXBlKChCbG9ja1Njb3BlKXNjb3BlKTsKIAkJCQl9Ci0JCQkJaWYgKGFyZ3Vt
ZW50VHlwZXNbaV0gPT0gbnVsbCkgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0g
bnVsbCkgewogCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CiAJCQkJfSBlbHNlIGlmICghaGFzVHlw
ZVZhckFyZ3MpIHsKLQkJCQkJaGFzVHlwZVZhckFyZ3MgPSBhcmd1bWVudFR5cGVzW2ldLmlzVHlw
ZVZhcmlhYmxlKCk7CisJCQkJCWhhc1R5cGVWYXJBcmdzID0gdGhpcy5hcmd1bWVudFR5cGVzW2ld
LmlzVHlwZVZhcmlhYmxlKCk7CiAJCQkJfQogCQkJfQogCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CkBA
IC03OCwxMyArNzgsMTMgQEAKIAkJfQogCiAJCVJlZmVyZW5jZUJpbmRpbmcgYWxsb2NhdGlvblR5
cGUgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7Ci0JCXRoaXMuYmluZGlu
ZyA9IHNjb3BlLmdldENvbnN0cnVjdG9yKGFsbG9jYXRpb25UeXBlLCBhcmd1bWVudFR5cGVzLCB0
aGlzKTsKKwkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoYWxsb2NhdGlvblR5
cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJCWlmICghdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZUJpbmRpbmcg
PSBhbGxvY2F0aW9uVHlwZTsKIAkJCU1ldGhvZEJpbmRpbmcgY29udHJ1Y3RvckJpbmRpbmcgPSB0
aGlzLmJpbmRpbmc7CiAJCQl3aGlsZSAoIWNvbnRydWN0b3JCaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkgJiYgKGVuY2xvc2luZ1R5cGVCaW5kaW5nLmlzTWVtYmVyVHlwZSgpIHx8IGVuY2xvc2luZ1R5
cGVCaW5kaW5nLmlzTG9jYWxUeXBlKCkpKSB7CiAJCQkJZW5jbG9zaW5nVHlwZUJpbmRpbmcgPSBl
bmNsb3NpbmdUeXBlQmluZGluZy5lbmNsb3NpbmdUeXBlKCk7Ci0JCQkJY29udHJ1Y3RvckJpbmRp
bmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcihlbmNsb3NpbmdUeXBlQmluZGluZywgYXJndW1lbnRU
eXBlcywgdGhpcyk7CisJCQkJY29udHJ1Y3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3Rv
cihlbmNsb3NpbmdUeXBlQmluZGluZywgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJCX0K
IAkJCWlmIChjb250cnVjdG9yQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJdGhpcy5i
aW5kaW5nID0gY29udHJ1Y3RvckJpbmRpbmc7CkBAIC05Miw3ICs5Miw3IEBACiAJCX0KIAkJaWYg
KCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJLy8gRmlyc3QgdHJ5IHRvIHNl
YXJjaCBhIG1ldGhvZCBpbnN0ZWFkCi0JCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSBz
Y29wZS5nZXRNZXRob2QodGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLnNvdXJj
ZU5hbWUoKSwgYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJp
bmRpbmcgPSBzY29wZS5nZXRNZXRob2QodGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRU
eXBlLnNvdXJjZU5hbWUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJCWlmIChtZXRo
b2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQl0aGlzLmJpbmRpbmcgPSBtZXRob2RC
aW5kaW5nOwogCQkJfSBlbHNlIHsKQEAgLTEwMywyMiArMTAzLDIyIEBACiAJCQl9CiAJCQlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJCX0gZWxzZSBpZiAodGhpcy5iaW5kaW5nLmlzVmFyYXJn
cygpKSB7Ci0JCQlpbnQgbGVuZ3RoID0gYXJndW1lbnRUeXBlcy5sZW5ndGg7Ci0JCQlpZiAoISh0
aGlzLmJpbmRpbmcucGFyYW1ldGVycy5sZW5ndGggPT0gbGVuZ3RoICYmIGFyZ3VtZW50VHlwZXNb
bGVuZ3RoLTFdLmlzQXJyYXlUeXBlKCkpKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0g
bmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5iaW5kaW5nLnNlbGVj
dG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CisJCQlpbnQgbGVu
Z3RoID0gdGhpcy5hcmd1bWVudFR5cGVzLmxlbmd0aDsKKwkJCWlmICghKHRoaXMuYmluZGluZy5w
YXJhbWV0ZXJzLmxlbmd0aCA9PSBsZW5ndGggJiYgdGhpcy5hcmd1bWVudFR5cGVzW2xlbmd0aC0x
XS5pc0FycmF5VHlwZSgpKSkgeworCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9i
bGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuYmluZGluZy5zZWxlY3RvciwgdGhp
cy5hcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuamF2YWRvY0ludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCBwcm9ibGVtLCBz
Y29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJCX0KIAkJfSBlbHNlIGlmIChoYXNU
eXBlVmFyQXJncykgewotCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRo
b2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCBhcmd1bWVudFR5
cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CisJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0g
PSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLmJpbmRpbmcuc2Vs
ZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0ludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCBw
cm9ibGVtLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJfSBlbHNlIGlmICh0
aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgewogCQkJ
UGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgcGFyYW1NZXRob2RCaW5kaW5nID0gKFBhcmFtZXRl
cml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmc7CiAJCQlpZiAocGFyYW1NZXRob2RCaW5k
aW5nLmhhc1N1YnN0aXR1dGVkUGFyYW1ldGVycygpKSB7Ci0JCQkJaW50IGxlbmd0aCA9IGFyZ3Vt
ZW50VHlwZXMubGVuZ3RoOworCQkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50VHlwZXMubGVu
Z3RoOwogCQkJCWZvciAoaW50IGk9MDsgaTxsZW5ndGg7IGkrKykgewotCQkJCQlpZiAoVHlwZUJp
bmRpbmcubm90RXF1YWxzKHBhcmFtTWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzW2ldLCBhcmd1bWVu
dFR5cGVzW2ldKSAmJgotCQkJCQkJCVR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbU1ldGhvZEJp
bmRpbmcucGFyYW1ldGVyc1tpXS5lcmFzdXJlKCksIGFyZ3VtZW50VHlwZXNbaV0uZXJhc3VyZSgp
KSkgewotCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKHRoaXMuYmluZGluZywgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQ
cm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CisJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
cGFyYW1NZXRob2RCaW5kaW5nLnBhcmFtZXRlcnNbaV0sIHRoaXMuYXJndW1lbnRUeXBlc1tpXSkg
JiYKKwkJCQkJCQlUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW1NZXRob2RCaW5kaW5nLnBhcmFt
ZXRlcnNbaV0uZXJhc3VyZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXNbaV0uZXJhc3VyZSgpKSkgewor
CQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRo
aXMuYmluZGluZywgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIFBy
b2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmph
dmFkb2NJbnZhbGlkQ29uc3RydWN0b3IodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFyYXRp
b25Nb2RpZmllcnMoKSk7CiAJCQkJCQlicmVhazsKIAkJCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9KYXZhZG9jTWVzc2FnZVNlbmQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2YWRvY01lc3NhZ2VT
ZW5kLmphdmEKaW5kZXggODdkY2NjMy4uOWI4ZjA2MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9K
YXZhZG9jTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NNZXNzYWdlU2Vu
ZC5qYXZhCkBAIC01MCwyMyArNTAsMjIgQEAKIAogCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFm
dGVyIGFyZ3MgYXJlIHJlc29sdmVkCiAKLQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0g
QmluZGluZy5OT19QQVJBTUVURVJTOwogCQlib29sZWFuIGhhc0FyZ3NUeXBlVmFyID0gZmFsc2U7
CiAJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CiAJCQlib29sZWFuIGFyZ0hhc0Vycm9y
ID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwogCQkJaW50IGxlbmd0aCA9IHRo
aXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJCWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdb
bGVuZ3RoXTsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhd
OwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7CiAJCQkJRXhwcmVzc2lvbiBh
cmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwogCQkJCWlmIChzY29wZS5raW5kID09IFNjb3Bl
LkNMQVNTX1NDT1BFKSB7Ci0JCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZl
VHlwZSgoQ2xhc3NTY29wZSlzY29wZSk7CisJCQkJCXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFy
Z3VtZW50LnJlc29sdmVUeXBlKChDbGFzc1Njb3BlKXNjb3BlKTsKIAkJCQl9IGVsc2UgewotCQkJ
CQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKEJsb2NrU2NvcGUpc2Nv
cGUpOworCQkJCQl0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZSgo
QmxvY2tTY29wZSlzY29wZSk7CiAJCQkJfQotCQkJCWlmIChhcmd1bWVudFR5cGVzW2ldID09IG51
bGwpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwpIHsKIAkJCQkJYXJn
SGFzRXJyb3IgPSB0cnVlOwogCQkJCX0gZWxzZSBpZiAoIWhhc0FyZ3NUeXBlVmFyKSB7Ci0JCQkJ
CWhhc0FyZ3NUeXBlVmFyID0gYXJndW1lbnRUeXBlc1tpXS5pc1R5cGVWYXJpYWJsZSgpOworCQkJ
CQloYXNBcmdzVHlwZVZhciA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXS5pc1R5cGVWYXJpYWJsZSgp
OwogCQkJCX0KIAkJCX0KIAkJCWlmIChhcmdIYXNFcnJvcikgewpAQCAtODYsMTcgKzg1LDE3IEBA
CiAKIAkJLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFueSBtZXNzYWdlCiAJCWlmICh0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmphdmFkb2NFcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLCBhcmd1bWVudFR5cGVzLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKKwkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmphdmFkb2NFcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlLmdldERlY2xh
cmF0aW9uTW9kaWZpZXJzKCkpOwogCQkJcmV0dXJuIG51bGw7CiAJCX0KLQkJdGhpcy5iaW5kaW5n
ID0gc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9y
LCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZ2V0TWV0aG9k
KHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHRoaXMpOwogCQlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkv
LyBUcnkgbWV0aG9kIGluIGVuY2xvc2luZyB0eXBlcwogCQkJVHlwZUJpbmRpbmcgZW5jbG9zaW5n
VHlwZUJpbmRpbmcgPSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZTsKIAkJCU1ldGhvZEJpbmRpbmcg
bWV0aG9kQmluZGluZyA9IHRoaXMuYmluZGluZzsKIAkJCXdoaWxlICghbWV0aG9kQmluZGluZy5p
c1ZhbGlkQmluZGluZygpICYmIChlbmNsb3NpbmdUeXBlQmluZGluZy5pc01lbWJlclR5cGUoKSB8
fCBlbmNsb3NpbmdUeXBlQmluZGluZy5pc0xvY2FsVHlwZSgpKSkgewogCQkJCWVuY2xvc2luZ1R5
cGVCaW5kaW5nID0gZW5jbG9zaW5nVHlwZUJpbmRpbmcuZW5jbG9zaW5nVHlwZSgpOwotCQkJCW1l
dGhvZEJpbmRpbmcgPSBzY29wZS5nZXRNZXRob2QoZW5jbG9zaW5nVHlwZUJpbmRpbmcsIHRoaXMu
c2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQkJCW1ldGhvZEJpbmRpbmcgPSBzY29w
ZS5nZXRNZXRob2QoZW5jbG9zaW5nVHlwZUJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJn
dW1lbnRUeXBlcywgdGhpcyk7CiAJCQl9CiAJCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7CiAJCQkJdGhpcy5iaW5kaW5nID0gbWV0aG9kQmluZGluZzsKQEAgLTEwNSwxMiAr
MTA0LDEyIEBACiAJCQkJZW5jbG9zaW5nVHlwZUJpbmRpbmcgPSB0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZTsKIAkJCQlNZXRob2RCaW5kaW5nIGNvbnRydWN0b3JCaW5kaW5nID0gdGhpcy5iaW5kaW5n
OwogCQkJCWlmICghY29udHJ1Y3RvckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSAmJiBDaGFyT3Bl
cmF0aW9uLmVxdWFscyh0aGlzLnNlbGVjdG9yLCBlbmNsb3NpbmdUeXBlQmluZGluZy5zaG9ydFJl
YWRhYmxlTmFtZSgpKSkgewotCQkJCQljb250cnVjdG9yQmluZGluZyA9IHNjb3BlLmdldENvbnN0
cnVjdG9yKChSZWZlcmVuY2VCaW5kaW5nKWVuY2xvc2luZ1R5cGVCaW5kaW5nLCBhcmd1bWVudFR5
cGVzLCB0aGlzKTsKKwkJCQkJY29udHJ1Y3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3Rv
cigoUmVmZXJlbmNlQmluZGluZyllbmNsb3NpbmdUeXBlQmluZGluZywgdGhpcy5hcmd1bWVudFR5
cGVzLCB0aGlzKTsKIAkJCQl9CiAJCQkJd2hpbGUgKCFjb250cnVjdG9yQmluZGluZy5pc1ZhbGlk
QmluZGluZygpICYmIChlbmNsb3NpbmdUeXBlQmluZGluZy5pc01lbWJlclR5cGUoKSB8fCBlbmNs
b3NpbmdUeXBlQmluZGluZy5pc0xvY2FsVHlwZSgpKSkgewogCQkJCQllbmNsb3NpbmdUeXBlQmlu
ZGluZyA9IGVuY2xvc2luZ1R5cGVCaW5kaW5nLmVuY2xvc2luZ1R5cGUoKTsKIAkJCQkJaWYgKENo
YXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc2VsZWN0b3IsIGVuY2xvc2luZ1R5cGVCaW5kaW5nLnNo
b3J0UmVhZGFibGVOYW1lKCkpKSB7Ci0JCQkJCQljb250cnVjdG9yQmluZGluZyA9IHNjb3BlLmdl
dENvbnN0cnVjdG9yKChSZWZlcmVuY2VCaW5kaW5nKWVuY2xvc2luZ1R5cGVCaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCB0aGlzKTsKKwkJCQkJCWNvbnRydWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29u
c3RydWN0b3IoKFJlZmVyZW5jZUJpbmRpbmcpZW5jbG9zaW5nVHlwZUJpbmRpbmcsIHRoaXMuYXJn
dW1lbnRUeXBlcywgdGhpcyk7CiAJCQkJCX0KIAkJCQl9CiAJCQkJaWYgKGNvbnRydWN0b3JCaW5k
aW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKQEAgLTE0MCw3ICsxMzksNyBAQAogCQkJCWlmICh0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKIAkJCQkJ
dGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0
dWFsUmVjZWl2ZXJUeXBlOwogCQkJCX0gZWxzZSB7Ci0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmphdmFkb2NFcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBl
LCBhcmd1bWVudFR5cGVzLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKKwkJCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0Vycm9yTm9NZXRob2RGb3IodGhpcywgdGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUuZ2V0RGVjbGFy
YXRpb25Nb2RpZmllcnMoKSk7CiAJCQkJCXJldHVybiBudWxsOwogCQkJCX0KIAkJCX0KQEAgLTE1
MiwxOSArMTUxLDE5IEBACiAJCQl9CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlz
LmJpbmRpbmcgPT0gbnVsbCA/IG51bGwgOiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJfSBl
bHNlIGlmIChoYXNBcmdzVHlwZVZhcikgewotCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5zZWxlY3RvciwgYXJndW1l
bnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOworCQkJTWV0aG9kQmluZGluZyBwcm9i
bGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5zZWxlY3Rv
ciwgdGhpcy5hcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCQlzY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jSW52YWxpZE1ldGhvZCh0aGlzLCBwcm9ibGVtLCBz
Y29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJfSBlbHNlIGlmICh0aGlzLmJpbmRp
bmcuaXNWYXJhcmdzKCkpIHsKLQkJCWludCBsZW5ndGggPSBhcmd1bWVudFR5cGVzLmxlbmd0aDsK
LQkJCWlmICghKHRoaXMuYmluZGluZy5wYXJhbWV0ZXJzLmxlbmd0aCA9PSBsZW5ndGggJiYgYXJn
dW1lbnRUeXBlc1tsZW5ndGgtMV0uaXNBcnJheVR5cGUoKSkpIHsKLQkJCQlNZXRob2RCaW5kaW5n
IHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLnNl
bGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CisJCQlpbnQg
bGVuZ3RoID0gdGhpcy5hcmd1bWVudFR5cGVzLmxlbmd0aDsKKwkJCWlmICghKHRoaXMuYmluZGlu
Zy5wYXJhbWV0ZXJzLmxlbmd0aCA9PSBsZW5ndGggJiYgdGhpcy5hcmd1bWVudFR5cGVzW2xlbmd0
aC0xXS5pc0FycmF5VHlwZSgpKSkgeworCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQ
cm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCQkJCXNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLmphdmFkb2NJbnZhbGlkTWV0aG9kKHRoaXMsIHByb2JsZW0sIHNjb3BlLmdldERl
Y2xhcmF0aW9uTW9kaWZpZXJzKCkpOwogCQkJfQogCQl9IGVsc2UgewotCQkJaW50IGxlbmd0aCA9
IGFyZ3VtZW50VHlwZXMubGVuZ3RoOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRUeXBl
cy5sZW5ndGg7CiAJCQlmb3IgKGludCBpPTA7IGk8bGVuZ3RoOyBpKyspIHsKLQkJCQlpZiAoVHlw
ZUJpbmRpbmcubm90RXF1YWxzKHRoaXMuYmluZGluZy5wYXJhbWV0ZXJzW2ldLmVyYXN1cmUoKSwg
YXJndW1lbnRUeXBlc1tpXS5lcmFzdXJlKCkpKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxl
bSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3Is
IGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKKwkJCQlpZiAoVHlwZUJp
bmRpbmcubm90RXF1YWxzKHRoaXMuYmluZGluZy5wYXJhbWV0ZXJzW2ldLmVyYXN1cmUoKSwgdGhp
cy5hcmd1bWVudFR5cGVzW2ldLmVyYXN1cmUoKSkpIHsKKwkJCQkJTWV0aG9kQmluZGluZyBwcm9i
bGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5zZWxlY3Rv
ciwgdGhpcy5hcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCQkJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmphdmFkb2NJbnZhbGlkTWV0aG9kKHRoaXMsIHByb2JsZW0s
IHNjb3BlLmdldERlY2xhcmF0aW9uTW9kaWZpZXJzKCkpOwogCQkJCQlicmVhazsKIAkJCQl9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDk1NzA1YTguLjliZTYxMDUgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhCkBAIC0yMzcsNiArMjM3LDcgQEAKIAkJCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuZ3RoOyBpKyspCiAJCQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVu
dHNbaV0udHlwZS5yZXNvbHZlVHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyov
KTsKIAkJfQorCQkKIAkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgdGhpcy5leHBy
ZXNzaW9uQ29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQpIHsKIAkJCXJldHVybiBuZXcgUG9s
eVR5cGVCaW5kaW5nKHRoaXMpOwogCQl9IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdl
U2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDE1YjZjYWQuLmNk
YTI5OTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTgwLDYgKzgwLDggQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1pc3NpbmdUeXBlQmluZGluZzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLlBvbHltb3JwaGljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxl
bVJlYXNvbnM7CkBAIC0xMDEsNiArMTAzLDcgQEAKIAlwdWJsaWMgRXhwcmVzc2lvbiByZWNlaXZl
cjsKIAlwdWJsaWMgY2hhcltdIHNlbGVjdG9yOwogCXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1l
bnRzOworCXB1YmxpYyBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BB
UkFNRVRFUlM7CiAJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZzsJCQkJCQkJLy8gZXhhY3Qg
YmluZGluZyByZXN1bHRpbmcgZnJvbSBsb29rdXAKIAlwdWJsaWMgTWV0aG9kQmluZGluZyBzeW50
aGV0aWNBY2Nlc3NvcjsJCQkJCQkvLyBzeW50aGV0aWMgYWNjZXNzb3IgZm9yIGlubmVyLWVtdWxh
dGlvbgogCXB1YmxpYyBUeXBlQmluZGluZyBleHBlY3RlZFR5cGU7CQkJCQkvLyBmb3IgZ2VuZXJp
YyBtZXRob2QgaW52b2NhdGlvbiAocmV0dXJuIHR5cGUgaW5mZXJlbmNlKQpAQCAtMTE1LDkgKzEx
OCw5IEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFw
cGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBl
ciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJ
bmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVy
SW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwotCi1wdWJsaWMgRmxvd0luZm8g
YW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250
ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgeworCXByaXZhdGUgYm9vbGVhbiByZWNlaXZlcklzVHlw
ZTsKKwlwcm90ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CisJcHVibGljIEZsb3dJbmZv
IGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29u
dGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAlib29sZWFuIG5vblN0YXRpYyA9ICF0aGlzLmJp
bmRpbmcuaXNTdGF0aWMoKTsKIAlib29sZWFuIHdhc0luc2lkZUFzc2VydCA9ICgoZmxvd0NvbnRl
eHQudGFnQml0cyAmIEZsb3dDb250ZXh0LkhJREVfTlVMTF9DT01QQVJJU09OX1dBUk5JTkcpICE9
IDApOwogCWZsb3dJbmZvID0gdGhpcy5yZWNlaXZlci5hbmFseXNlQ29kZShjdXJyZW50U2NvcGUs
IGZsb3dDb250ZXh0LCBmbG93SW5mbywgbm9uU3RhdGljKS51bmNvbmRpdGlvbmFsSW5pdHMoKTsK
QEAgLTU4OCwxMjIgKzU5MSwxMTggQEAKIH0KIAogcHVibGljIFR5cGVCaW5kaW5nIHJlc29sdmVU
eXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkvLyBBbnN3ZXIgdGhlIHNpZ25hdHVyZSByZXR1cm4g
dHlwZQorCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVybiB0eXBlLCBhbnN3ZXJzIFBvbHlU
eXBlQmluZGluZyBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgZ2VuZXJpYyBvdmVybG9hZGVkIGNh
bmRpZGF0ZSB0aGF0IGVuY29kZWQgdHlwZSB2YXJpYWJsZXMgaW4gcmV0dXJuIHR5cGUgYW5kIHRo
ZXJlIGlzIG5vIHRhcmdldCB0eXBlICAKIAkvLyBCYXNlIHR5cGUgcHJvbW90aW9uCisJaWYgKHRo
aXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CisJCXRoaXMuY29uc3RhbnQg
PSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCWxvbmcgc291cmNlTGV2ZWwgPSBzY29wZS5jb21w
aWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbDsKKwkJYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxz
ZTsKKwkJaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgeworCQkJ
dGhpcy5yZWNlaXZlci5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNr
OyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQlyZWNlaXZlckNhc3QgPSB0cnVlOworCQl9CisJ
CXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5yZXNvbHZlVHlwZShzY29w
ZSk7CisJCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgTmFt
ZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5iaXRzICYgQmlu
ZGluZy5UWVBFKSAhPSAwOworCQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlICE9IG51bGwpIHsKKwkJCS8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5nIGNsYXNz
IHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBub3RpZmll
ZAorCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RFeHByZXNzaW9uKXRoaXMu
cmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSkpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3QoKENhc3RF
eHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOworCQkJfQorCQl9CisJCS8vIHJlc29sdmUgdHlwZSBh
cmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCisJCWlmICh0aGlzLnR5cGVB
cmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5s
ZW5ndGg7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCXRoaXMuZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVu
Y2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJn
dW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVj
ayBib3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOworCQkJCX0K
KwkJCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJk
KSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQo
dHlwZVJlZmVyZW5jZSk7CisJCQkJfQorCQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZl
IGFyZ3VtZW50cworCQkJCQlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVudHMubGVu
Z3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBl
KHNjb3BlKTsKKwkJCQkJfQorCQkJCX0KKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJfQorCQkv
LyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCisJCWlmICh0aGlz
LmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7IC8v
IHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRz
Lmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhd
OworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7CisJCQkJRXhwcmVzc2lvbiBh
cmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOworCQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5y
ZXNvbHZlZFR5cGUgIT0gbnVsbCkgCisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVy
aWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZl
ZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCisJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2Fz
dEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVVbm5l
Y2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJCQl0aGlzLmFyZ3ND
b250YWluQ2FzdCA9IHRydWU7CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250
ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlwZXNbaV0g
PSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpeworCQkJCQlhcmdIYXNFcnJv
ciA9IHRydWU7CisJCQkJfQorCQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJaWYgKHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJ
CQkvLyAgcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91
dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+
PSAwOykKKwkJCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVs
bCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2Ug
YXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQogCi0JdGhpcy5jb25zdGFudCA9IENvbnN0
YW50Lk5vdEFDb25zdGFudDsKLQlsb25nIHNvdXJjZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRp
b25zKCkuc291cmNlTGV2ZWw7Ci0JYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxzZSwgYXJnc0Nv
bnRhaW5DYXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhw
cmVzc2lvbikgewotCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNl
c3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJcmVjZWl2ZXJDYXN0ID0g
dHJ1ZTsKLQl9Ci0JaWYgKHRoaXMucmVjZWl2ZXIucmVzb2x2ZWRUeXBlICE9IG51bGwpCi0JCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiUmVjZWl2ZXIgd2Fz
IHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JdGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsK
LQlib29sZWFuIHJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIE5hbWVS
ZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcikuYml0cyAmIEJpbmRp
bmcuVFlQRSkgIT0gMDsKLQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlICE9IG51bGwpIHsKLQkJIC8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5nIGNsYXNzIHdp
dGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBub3RpZmllZAot
CQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNl
aXZlcikuZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkg
ewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVz
c2lvbil0aGlzLnJlY2VpdmVyKTsKLQkJfQotCX0KLQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRz
IChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVBcmd1bWVudHMg
IT0gbnVsbCkgewotCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJ
Ym9vbGVhbiBhcmdIYXNFcnJvciA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfNTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCi0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1
bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBs
ZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBl
QXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlw
ZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09
IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJnSGFzRXJy
b3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJ
CX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBu
dWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKLQkJCQlmb3IgKGlu
dCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKLQkJ
CQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOwotCQkJCX0KLQkJCX0KLQkJ
CXJldHVybiBudWxsOwotCQl9Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJn
cyBhcmUgcmVzb2x2ZWQKLQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5P
X1BBUkFNRVRFUlM7Ci0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJYm9vbGVhbiBh
cmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJaW50IGxl
bmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBl
QmluZGluZ1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKLQkJ
CUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKLQkJCWlmICh0aGlzLmFy
Z3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZv
dW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWlmIChhcmd1bWVudCBpbnN0
YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBBU1ROb2RlLkRp
c2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFy
Z3NDb250YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29u
dGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKChhcmd1bWVudFR5cGVzW2ldID0gYXJn
dW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKLQkJCQlhcmdIYXNFcnJvciA9IHRy
dWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkgewotCQkJCWlmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkKLQkJCQkJfHwgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJ
bmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVs
bCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VI
ZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAo
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0J
CQkJLy8gIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJv
dXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49
IDA7KQotCQkJCQlwc2V1ZG9BcmdzW2ldID0gYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlw
ZUJpbmRpbmcuTlVMTCA6IGFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVy
cm9ycyB3aXRoIG51bGwgdHlwZQotCQkJCXRoaXMuYmluZGluZyA9Ci0JCQkJCXRoaXMucmVjZWl2
ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJCQkJPyBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlz
LnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKQotCQkJCQkJOiBzY29wZS5maW5kTWV0aG9kKChS
ZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3Rvciwg
cHNldWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAm
JiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBj
bG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2Vz
dE1hdGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdo
byBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlp
ZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2lu
YWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2Vu
ZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91
dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQw
OSkKLQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJp
bmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7
Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNo
Lm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2Vk
QnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hP
cmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQg
ZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJ
CQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVy
cy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0lt
cGxpY2l0VGhpcygpID8KKwkJCQkJCQkJc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxl
Y3RvciwgcHNldWRvQXJncywgdGhpcykgOgorCQkJCQkJCQkJc2NvcGUuZmluZE1ldGhvZCgoUmVm
ZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHBz
ZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKworCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwg
JiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5n
IGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9z
ZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRz
IHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJ
CQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5v
cmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAv
LyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0
aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2Qg
KDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVh
dGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJh
d1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9z
ZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNs
b3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5p
c09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNs
b3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0
aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJz
aW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29t
cGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9
CiAJCQkJfQorCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWlmICh0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSA9PSBudWxsKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCQkvLyBiYXNlIHR5
cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKKwkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLmlzQmFzZVR5cGUoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01l
dGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVz
KTsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSA9PSBudWxsKSB7Ci0JCXJldHVybiBudWxsOworCQorCVR5cGVCaW5kaW5nIG1ldGhvZFR5cGUg
PSBmaW5kTWV0aG9kQmluZGluZyhzY29wZSk7CisJaWYgKG1ldGhvZFR5cGUgIT0gbnVsbCAmJiBt
ZXRob2RUeXBlLmlzUG9seVR5cGUoKSkgeworCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuYmlu
ZGluZy5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKTsKKwkJcmV0dXJu
IG1ldGhvZFR5cGU7CiAJfQotCS8vIGJhc2UgdHlwZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2Fn
ZQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkpIHsKLQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSwgYXJndW1lbnRUeXBlcyk7Ci0JCXJldHVybiBudWxsOwotCX0KLQotCWZpbmRNZXRo
b2RCaW5kaW5nKHNjb3BlLCBhcmd1bWVudFR5cGVzKTsKIAogCWlmICghdGhpcy5iaW5kaW5nLmlz
VmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBu
dWxsKSB7CiAJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVu
Y2VCaW5kaW5nKSB7CiAJCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5j
ZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlOwogCQkJfSBlbHNlIHsKLQkJCQlzY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5l
cnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMpOwogCQkJCXJldHVybiBudWxsOwogCQkJfQogCQl9CkBAIC03MTUsOCArNzE0LDEz
IEBACiAJCQkJCQkJCSBkZWNsYXJpbmdDbGFzcy5zdXBlcmNsYXNzKCkgaW5zdGFuY2VvZiBNaXNz
aW5nVHlwZUJpbmRpbmc7CiAJCWlmICghYXZvaWRTZWNvbmRhcnkpCiAJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7CisJCQogCQlNZXRo
b2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5k
aW5nKS5jbG9zZXN0TWF0Y2g7CiAJCXN3aXRjaCAodGhpcy5iaW5kaW5nLnByb2JsZW1JZCgpKSB7
CisvLwkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJl
IDoKKy8vCQkJCWlmICghcG9seVJlc29sdXRpb24pIC8vIGZvciBwb2x5IHJlc29sdXRpb24sIHRo
aXMgaW1wcm92ZXMgdGhlIG1lc3NhZ2UuCisvLwkJCQkJYnJlYWs7CisJCQkJLy8kRkFMTC1USFJP
VUdIJAogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAvLyBu
byByZXNpbGllbmNlIG9uIGFtYmlndW91cwogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob3RWaXNp
YmxlIDoKQEAgLTc3Myw3ICs3NzcsNyBAQAogCX0KIAlpZiAoIXRoaXMuYmluZGluZy5pc1N0YXRp
YygpKSB7CiAJCS8vIHRoZSAicmVjZWl2ZXIiIG11c3Qgbm90IGJlIGEgdHlwZQotCQlpZiAocmVj
ZWl2ZXJJc1R5cGUpIHsKKwkJaWYgKHRoaXMucmVjZWl2ZXJJc1R5cGUpIHsKIAkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLm11c3RVc2VBU3RhdGljTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7
CiAJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUuaXNSYXdUeXBlKCkKIAkJCQkJJiYgKHRo
aXMucmVjZWl2ZXIuYml0cyAmIEFTVE5vZGUuSWdub3JlUmF3VHlwZUNoZWNrKSA9PSAwCkBAIC03
OTIsMTQgKzc5NiwxNCBAQAogCQl9CiAJfSBlbHNlIHsKIAkJLy8gc3RhdGljIG1lc3NhZ2UgaW52
b2tlZCB0aHJvdWdoIHJlY2VpdmVyPyBsZWdhbCBidXQgdW5vcHRpbWFsIChvcHRpb25hbCB3YXJu
aW5nKS4KLQkJaWYgKCEodGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpIHx8IHRoaXMucmVj
ZWl2ZXIuaXNTdXBlcigpIHx8IHJlY2VpdmVySXNUeXBlKSkgeworCQlpZiAoISh0aGlzLnJlY2Vp
dmVyLmlzSW1wbGljaXRUaGlzKCkgfHwgdGhpcy5yZWNlaXZlci5pc1N1cGVyKCkgfHwgdGhpcy5y
ZWNlaXZlcklzVHlwZSkpIHsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm5vblN0YXRpY0Fj
Y2Vzc1RvU3RhdGljTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7CiAJCX0KIAkJaWYgKCF0aGlz
LnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkgJiYgVHlwZUJpbmRpbmcubm90RXF1YWxzKHRoaXMu
YmluZGluZy5kZWNsYXJpbmdDbGFzcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7CiAJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbmRpcmVjdEFjY2Vzc1RvU3RhdGljTWV0aG9kKHRoaXMs
IHRoaXMuYmluZGluZyk7CiAJCX0KIAl9Ci0JaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhz
Y29wZSwgdGhpcy5yZWNlaXZlciwgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYmluZGlu
ZywgdGhpcy5hcmd1bWVudHMsIGFyZ3VtZW50VHlwZXMsIGFyZ3NDb250YWluQ2FzdCwgdGhpcykp
IHsKKwlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCB0aGlzLnJlY2VpdmVyLCB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgdGhp
cy5hcmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJdGhpcy5i
aXRzIHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIApAQCAtODQ2LDcgKzg1MCw3IEBACiAJfQog
CWlmICh0aGlzLnJlY2VpdmVyLmlzU3VwZXIoKSAmJiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5p
c0ludGVyZmFjZSgpKSB7CiAJCS8vIDE1LjEyLjMgKEphdmEgOCkKLQkJc2NvcGUuY2hlY2tBcHBy
b3ByaWF0ZU1ldGhvZEFnYWluc3RTdXBlcnModGhpcy5zZWxlY3RvciwgdGhpcy5iaW5kaW5nLCBh
cmd1bWVudFR5cGVzLCB0aGlzKTsKKwkJc2NvcGUuY2hlY2tBcHByb3ByaWF0ZU1ldGhvZEFnYWlu
c3RTdXBlcnModGhpcy5zZWxlY3RvciwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHRoaXMpOwogCX0KIAlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdGhpcy5iaW5k
aW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVT
KSB7CiAJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5VHlwZUFyZ3VtZW50c0Zv
ck1ldGhvZEludm9jYXRpb24odGhpcy5iaW5kaW5nLCB0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRz
LCB0aGlzLnR5cGVBcmd1bWVudHMpOwpAQCAtODU2LDE3ICs4NjAsMjAgQEAKIAkJCQk/IHRoaXMu
cmVzb2x2ZWRUeXBlCiAJCQkJOiBudWxsOwogfQotLyoqCi0gKiBGaW5kIHRoZSBtZXRob2QgYmlu
ZGluZzsgCi0gKiBpZiB0aGlzLmlubmVyc05lZWRVcGRhdGUgYWxsb3cgZm9yIHR3byBhdHRlbXB0
cyB3aGVyZSB0aGUgZmlyc3Qgcm91bmQgbWF5IHN0b3AKLSAqIGFmdGVyIGFwcGxpY2FiaWxpdHkg
Y2hlY2tpbmcgKDE4LjUuMSkgdG8gaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIGludG8gdGhlIGZp
bmFsCi0gKiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpLgotICovCi1wcm90ZWN0
ZWQgdm9pZCBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50VHlwZXMpIHsKLQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGlj
aXRUaGlzKCkKLQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgYXJn
dW1lbnRUeXBlcywgdGhpcykKLQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQlyZXNvbHZlUG9s
eUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBz
Y29wZSk7CisKK3Byb3RlY3RlZCBUeXBlQmluZGluZyBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Nj
b3BlIHNjb3BlKSB7CisJCisJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0
VGhpcygpID8gCisJCQkJICBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpIAorCQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0
dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMp
OworCQorCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkgLy8gY2FuJ3QgaGFwcGVuID8gSSB0aGlu
ayB3ZSBhbHdheXMgZ2V0IGEgcHJvYmxlbSBiaW5kaW5nLCBhbnl3YXlzLgorCQlyZXR1cm4gbnVs
bDsKKwkKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykKKwkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CisJ
CisJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHRoaXMuYmluZGluZywgdGhp
cy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCiAJLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3Vt
cHRpb25zIGluIHRoZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1
bCBzb2x1dGlvbiBvZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgogCSAgIGFwcGxp
Y2FibGUgbWV0aG9kLiBUaGlzIGFwcGVhcnMgdG8gYmUgYSB0ZW51b3VzIGFzc3VtcHRpb24sIGF0
IGxlYXN0IG9uZSBub3QgbWFkZSBieSB0aGUgSkxTNyBlbmdpbmUgb3IgdGhlIHJlZmVyZW5jZSBj
b21waWxlciBhbmQgCkBAIC04ODAsMTEgKzg4Nyw4IEBACiAJZmluYWwgQ29tcGlsZXJPcHRpb25z
IGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCWlmIChjb21waWxl
ck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiB0aGlz
LmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYg
dGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKCFjb21waWxlck9wdGlvbnMu
cG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrKQotCQkJcmV0dXJuOworCQkJ
cmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgcGdtYiA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRo
aXMuYmluZGluZzsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRl
eHQocGdtYik7Ci0JCWlmIChjdHggPT0gbnVsbCB8fCBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVy
ZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKQotCQkJcmV0dXJuOwogCQlpbnQgbGVuZ3Ro
ID0gcGdtYi50eXBlQXJndW1lbnRzID09IG51bGwgPyAwIDogcGdtYi50eXBlQXJndW1lbnRzLmxl
bmd0aDsKIAkJYm9vbGVhbiBzYXdSYXdUeXBlID0gZmFsc2U7CiAJCWZvciAoaW50IGkgPSAwOyAg
aSA8IGxlbmd0aDsgaSsrKSB7CkBAIC04OTMsNDAgKzg5NywyNiBAQAogCQkJICAgZG9lcyBub3Qg
YXBwZWFyIGZ1bGx5IGhvb2tlZCB1cCBpbnRvIGlzQ29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZh
bGVudCB0byBldmVyeXdoZXJlLiBBdCB0aGUgbW9tZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2Fw
dHVyZS4KIAkJCSovICAgCiAJCQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgp
KQotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlp
ZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3VHlwZSgpKQogCQkJCXNhd1Jhd1R5cGUgPSB0
cnVlOwogCQl9CiAJCWlmICghc2F3UmF3VHlwZSkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/
IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CiAJCWlmIChsZW5ndGggPT0gMCkKLQkJCXJldHVy
bjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJVHlwZUJpbmRpbmcgW10g
ZmluYWxBcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCVR5cGVCaW5kaW5nIGZpbmFsQXJndW1lbnRU
eXBlID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwogCQkJaWYgKGZpbmFsQXJndW1l
bnRUeXBlID09IG51bGwgfHwgIWZpbmFsQXJndW1lbnRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpICAv
LyBhbHJlYWR5IHNpZGVkIHdpdGggdGhlIGRldmlsLgotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4g
dGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlmaW5hbEFyZ3VtZW50VHlwZXNbaV0gPSBmaW5h
bEFyZ3VtZW50VHlwZTsgCiAJCX0KLQkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UsIGZhbHNlKSA9PSBT
Y29wZS5OT1RfQ09NUEFUSUJMRSkKKwkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UpID09IFNjb3BlLk5P
VF9DT01QQVRJQkxFKQogCQkJdGhpcy5iaW5kaW5nID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5n
KHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLCB0aGlzLmJpbmRpbmcuc2VsZWN0b3IsIGZpbmFsQXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCX0KLX0KLQotQE92ZXJyaWRl
Ci1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQlJbmZlcmVuY2VDb250
ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcpIHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRl
ZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQl0aGlzLmV4cGVjdGVk
VHlwZSA9IHRhcmdldFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4
LmluZmVySW52b2NhdGlvblR5cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGlu
ZywgdGFyZ2V0VHlwZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3Vt
ZW50cyh0aGlzLCB1cGRhdGVkQmluZGluZywgc2NvcGUpOwotCQkJfQotCQl9Ci0JfQotCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiB9
CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2VpdmVyVHlwZShSZWZlcmVuY2VCaW5kaW5nIHJl
Y2VpdmVyVHlwZSkgewpAQCAtOTYyLDYgKzk1MiwzOSBAQAogCSAqLwogCXJldHVybiBpc1BvbHlF
eHByZXNzaW9uKHRoaXMuYmluZGluZyk7CiB9CisKK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29t
cGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlUeXBl
QmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwl0cnkgeworCQl0
aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7CisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0g
dGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8gCisJCQkJICBzY29wZS5nZXRJbXBsaWNp
dE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpIAorCQkJCTog
c2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQlpZiAobWV0aG9kID09IG51bGwgfHwgIW1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5UeXBlID09IG51bGwgfHwgIW1ldGhv
ZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4gZmFsc2U7CisJCXJldHVy
biBzdXBlci5pc0JveGluZ0NvbXBhdGlibGUobWV0aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29w
ZSwgdGhpcy5zb3VyY2VFbmQpLCB0YXJnZXRUeXBlLCB0aGlzLCBzY29wZSk7CisJfSBmaW5hbGx5
IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvbGRFeHBlY3RlZFR5cGU7CisJfQorfQorCitwdWJs
aWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFs
IFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBl
Y3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOworCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZCA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAor
CQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkKKwkJaWYg
KG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0
dXJuVHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQor
CQkJcmV0dXJuIGZhbHNlOworCQkJCisJCXJldHVybiBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJl
KHNjb3BlLCB0aGlzLnNvdXJjZUVuZCkuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29w
ZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvbGRFeHBlY3RlZFR5cGU7
CisJfQorfQorCiAvKiogVmFyaWFudCBvZiBpc1BvbHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBk
dXJpbmcgdHlwZSBpbmZlcmVuY2UsIHdoZW4gYSByZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMu
ICovCiBwdWJsaWMgYm9vbGVhbiBpc1BvbHlFeHByZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1
dGlvbkNhbmRpZGF0ZSkgewogCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1F
TlRfQ09OVEVYVCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVY
VCkKQEAgLTEwMjUsNiArMTA0OCw3IEBACiAJcmV0dXJuIHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNp
dFRoaXMoKTsKIH0KIC8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uOiAtLQorLy8gU3Jpa2FudGgg
Y2hlY2sgLSByZXBvcnRFcnJvcnMgJiBTY29wZSBkb24ndCBtYWtlIHNlbnNlLgogcHVibGljIE1l
dGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9y
dEVycm9ycywgU2NvcGUgc2NvcGUpIHsKIAlpZiAocmVwb3J0RXJyb3JzKSB7CiAJCWlmICh0aGlz
LmJpbmRpbmcgPT0gbnVsbCkKQEAgLTEwMzQsMTIgKzEwNTgsNyBAQAogCX0KIAlyZXR1cm4gdGhp
cy5iaW5kaW5nOwogfQotcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7Ci0JcmV0dXJu
IHRoaXMuYXJndW1lbnRzOwotfQotcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Np
b25Db250ZXh0KCkgewotCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwotfQorCiBwdWJs
aWMgdm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7CiAJaWYgKHRo
aXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9
IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwpAQCAtMTA1MCwzMiArMTA2OSwxMSBAQAogCQlyZXR1
cm4gbnVsbDsKIAlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VDb250
ZXh0cy5nZXQobWV0aG9kKTsKIH0KLXB1YmxpYyBib29sZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0J
cmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcpIAotCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CitwdWJsaWMgRXhwcmVzc2lv
bltdIGFyZ3VtZW50cygpIHsKKwlyZXR1cm4gdGhpcy5hcmd1bWVudHM7CiB9Ci1wdWJsaWMgYm9v
bGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0g
dXBkYXRlZEJpbmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewot
CQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVy
ZW5jZUNvbnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwg
JiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBj
dHgpOwotCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5j
ZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVy
cyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwgdXBk
YXRlZEJpbmRpbmcpOwotCQl9Ci0JfQotCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwot
CXRoaXMucmVzb2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRpbmcucmV0dXJuVHlwZTsKLQlyZXR1cm4g
aGFzVXBkYXRlOwotfQotcHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1
cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotfQotcHVibGljIHZvaWQgaW5u
ZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotfQot
cHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkgewotCXJl
dHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOworcHVibGljIEV4cHJlc3Npb25Db250ZXh0
IGdldEV4cHJlc3Npb25Db250ZXh0KCkgeworCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0
OwogfQogLy8gLS0gSW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogcHVibGljIEluZmVyZW5j
ZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA1OTIwYTgwLi5k
OWFiMDcwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhCkBAIC0zOTYsMTAgKzM5NiwxMCBAQAogCQl9CiAKIAkJLy8gd2lsbCBjaGVjayBmb3IgbnVs
bCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAotCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMg
PSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7CisJCXRoaXMuYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcu
Tk9fUEFSQU1FVEVSUzsKIAkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKIAkJCWludCBs
ZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5
cGVCaW5kaW5nW2xlbmd0aF07CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCQlF
eHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CiAJCQkJaWYgKGFyZ3VtZW50
IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKQEAgLTQwNywxMiArNDA3LDggQEAKIAkJCQkJ
YXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKIAkJCQl9CiAJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lv
bkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0g
PSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpeworCQkJCWlmICgodGhpcy5h
cmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsK
IAkJCQkJaGFzRXJyb3IgPSB0cnVlOwotCQkJCX0KLQkJCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8
IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZvY2F0aW9uKWFyZ3VtZW50
KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lcklu
ZmVyZW5jZUhlbHBlcigpOwogCQkJCX0KIAkJCX0KIAkJfQpAQCAtNDMzLDcgKzQyOSw3IEBACiAJ
CQkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cyAgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3Vt
ZW50cy5sZW5ndGg7CiAJCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOwogCQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKLQkJ
CQkJCXBzZXVkb0FyZ3NbaV0gPSBhcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGlu
Zy5OVUxMIDogYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdp
dGggbnVsbCB0eXBlCisJCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ld
ID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyBy
ZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKIAkJCQkJfQogCQkJCQl0aGlz
LmJpbmRpbmcgPSBzY29wZS5maW5kTWV0aG9kKHJlZmVyZW5jZVJlY2VpdmVyLCBUeXBlQ29uc3Rh
bnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKIAkJCQkJaWYgKHRoaXMuYmluZGlu
ZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewpAQCAtNDY5LDcg
KzQ2NSw3IEBACiAJCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gcmVjZWl2ZXJUeXBlOwog
CQkJfQogCQkJaWYgKGlzRGlhbW9uZCkgewotCQkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlw
ZXMgPSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHJlY2VpdmVy
VHlwZSwgcmVjZWl2ZXJUeXBlLmVuY2xvc2luZ1R5cGUoKSwgYXJndW1lbnRUeXBlcywgc2NvcGUp
OworCQkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKChQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHJlY2VpdmVyVHlwZSwgcmVjZWl2ZXJUeXBlLmVuY2xv
c2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCQkJaWYgKGluZmVycmVk
VHlwZXMgPT0gbnVsbCkgewogCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZl
ckVsaWRlZFR5cGVzKHRoaXMpOwogCQkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxs
OwpAQCAtNDc3LDEzICs0NzMsMTMgQEAKIAkJCQlyZWNlaXZlclR5cGUgPSB0aGlzLnR5cGUucmVz
b2x2ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgo
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgcmVjZWl2ZXJUeXBlKS5nZW5lcmljVHlwZSgpLCBp
bmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgcmVjZWl2ZXJUeXBlKS5l
bmNsb3NpbmdUeXBlKCkpOwogCQkJfQogCQkJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlw
ZSA9IChSZWZlcmVuY2VCaW5kaW5nKSByZWNlaXZlclR5cGU7Ci0JCQl0aGlzLmJpbmRpbmcgPSBm
aW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCBhbGxvY2F0aW9uVHlwZSwgYXJndW1l
bnRUeXBlcyk7CisJCQl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3Bl
LCB0aGlzLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKIAogCQkJaWYgKHRo
aXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CQogCQkJCWlmIChpc01ldGhvZFVzZURlcHJl
Y2F0ZWQodGhpcy5iaW5kaW5nLCBzY29wZSwgdHJ1ZSkpIHsKIAkJCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuZGVwcmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOwogCQkJCX0KLQkJ
CQlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlw
ZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgYXJndW1lbnRUeXBlcywgYXJnc0NvbnRh
aW5DYXN0LCB0aGlzKSkgeworCQkJCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc2NvcGUs
IG51bGwsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlz
LmFyZ3VtZW50VHlwZXMsIGFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJCQkJdGhpcy5iaXRz
IHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCQkJCX0KIAkJCQlpZiAodGhpcy50eXBlQXJndW1lbnRz
ICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyA9PSBCaW5k
aW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7CkBAIC01MDQsNyArNTAwLDcgQEAKIAkJCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5k
aW5nKTsKIAkJCX0KIAkJCWlmICghaXNEaWFtb25kICYmIHJlY2VpdmVyVHlwZS5pc1BhcmFtZXRl
cml6ZWRUeXBlV2l0aEFjdHVhbEFyZ3VtZW50cygpKSB7Ci0JCSAJCWNoZWNrVHlwZUFyZ3VtZW50
UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKXJlY2VpdmVyVHlwZSwgcmVjZWl2
ZXJUeXBlLmVuY2xvc2luZ1R5cGUoKSwgYXJndW1lbnRUeXBlcyAsIHNjb3BlKTsKKwkJIAkJY2hl
Y2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpcmVjZWl2
ZXJUeXBlLCByZWNlaXZlclR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMg
LCBzY29wZSk7CiAJCSAJfQogCQkJLy8gVGhlIGVuY2xvc2luZyBpbnN0YW5jZSBtdXN0IGJlIGNv
bXBhdGlibGUgd2l0aCB0aGUgaW5uZXJtb3N0IGVuY2xvc2luZyB0eXBlCiAJCQlSZWZlcmVuY2VC
aW5kaW5nIGV4cGVjdGVkVHlwZSA9IHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5lbmNsb3Np
bmdUeXBlKCk7CkBAIC01NDMsNyArNTM5LDcgQEAKIAkJaWYgKCh0aGlzLnJlc29sdmVkVHlwZS50
YWdCaXRzICYgVGFnQml0cy5IaWVyYXJjaHlIYXNQcm9ibGVtcykgIT0gMCkgewogCQkJcmV0dXJu
IG51bGw7IC8vIHN0b3Agc2Vjb25kYXJ5IGVycm9ycwogCQl9Ci0JCU1ldGhvZEJpbmRpbmcgaW5o
ZXJpdGVkQmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIGFub255
bW91c1N1cGVyY2xhc3MsIGFyZ3VtZW50VHlwZXMpOworCQlNZXRob2RCaW5kaW5nIGluaGVyaXRl
ZEJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCBhbm9ueW1vdXNT
dXBlcmNsYXNzLCB0aGlzLmFyZ3VtZW50VHlwZXMpOwogCQkJCiAJCWlmICghaW5oZXJpdGVkQmlu
ZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlpZiAoaW5oZXJpdGVkQmluZGluZy5kZWNsYXJp
bmdDbGFzcyA9PSBudWxsKSB7CkBAIC01NzEsNyArNTY3LDcgQEAKIAkJCXRoaXMuZW5jbG9zaW5n
SW5zdGFuY2UuY29tcHV0ZUNvbnZlcnNpb24oc2NvcGUsIHRhcmdldEVuY2xvc2luZywgZW5jbG9z
aW5nSW5zdGFuY2VUeXBlKTsKIAkJfQogCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewot
CQkJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYW5vbnltb3VzU3Vw
ZXJjbGFzcywgaW5oZXJpdGVkQmluZGluZywgdGhpcy5hcmd1bWVudHMsIGFyZ3VtZW50VHlwZXMs
IGFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKKwkJCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVu
dHMoc2NvcGUsIG51bGwsIGFub255bW91c1N1cGVyY2xhc3MsIGluaGVyaXRlZEJpbmRpbmcsIHRo
aXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMsIGFyZ3NDb250YWluQ2FzdCwgdGhpcykp
IHsKIAkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5VbmNoZWNrZWQ7CiAJCQl9CiAJCX0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKaW5kZXggYjg0ODQxZi4uZTcwMTk1MCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKQEAgLTcyNSwxOCArNzI1LDYgQEAKIAkJfQogCX0KIAot
CXB1YmxpYyBNZXRob2RCaW5kaW5nIHByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQoU2NvcGUgc2Nv
cGUpIHsKLQkJdHJ5IHsKLQkJCXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVY
VCk7Ci0JCQl0aGlzLmJpbmRpbmcgPSBudWxsOwotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSB0
cnVlOwotCQkJcmVzb2x2ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCQlyZXR1cm4gdGhp
cy5iaW5kaW5nOwotCQl9IGZpbmFsbHkgewotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSBmYWxz
ZTsKLQkJfQotCX0KLQogCXB1YmxpYyBib29sZWFuIGlzQ29uc3RydWN0b3JSZWZlcmVuY2UoKSB7
CiAJCXJldHVybiBDaGFyT3BlcmF0aW9uLmVxdWFscyh0aGlzLnNlbGVjdG9yLCAgQ29uc3RhbnRQ
b29sLkluaXQpOwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCBmMTcwMjY5Li41NDVhMDZiIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9C
b3VuZFNldC5qYXZhCkBAIC02MDgsOCArNjA4LDggQEAKIAkJCQlhZGRCb3VuZHMocGkuZ2V0VHlw
ZUJvdW5kcyhhbHBoYSwgdGhldGEpLCBjb250ZXh0LmVudmlyb25tZW50KTsKIAogCQkJCVR5cGVC
aW5kaW5nIGFpID0gZ0EuYXJndW1lbnRzW2ldOwotCQkJCWlmIChhaSBpbnN0YW5jZW9mIFdpbGRj
YXJkQmluZGluZykgewotCQkJCQlXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmRCaW5kaW5nID0gKFdp
bGRjYXJkQmluZGluZylhaTsKKwkJCQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2FyZEJpbmRpbmcg
fHwgYWkuaXNDYXB0dXJlKCkpIHsKKwkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkQmluZGlu
ZyA9IGFpLmlzQ2FwdHVyZSgpID8gKChDYXB0dXJlQmluZGluZykgYWkpLndpbGRjYXJkIDogKFdp
bGRjYXJkQmluZGluZylhaTsKIAkJCQkJVHlwZUJpbmRpbmcgdCA9IHdpbGRjYXJkQmluZGluZy5i
b3VuZDsKIAkJCQkJVGhyZWVTZXRzIHRocmVlID0gdGhpcy5ib3VuZHNQZXJWYXJpYWJsZS5nZXQo
YWxwaGEucHJvdG90eXBlKCkpOwogCQkJCQlpZiAodGhyZWUgIT0gbnVsbCkgewpAQCAtNjE5LDcg
KzYxOSw3IEBACiAJCQkJCQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CiAJCQkJ
CQkJd2hpbGUgKGl0Lmhhc05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91bmQgYm91bmQgPSBpdC5u
ZXh0KCk7Ci0JCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFy
aWFibGUpKQorCQkJCQkJCQlpZiAoIShib3VuZC5yaWdodCBpbnN0YW5jZW9mIEluZmVyZW5jZVZh
cmlhYmxlIHx8IGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcpKQogCQkJCQkJ
CQkJcmV0dXJuIGZhbHNlOwogCQkJCQkJCX0KIAkJCQkJCX0KQEAgLTgzOSw2ICs4MzksMTEgQEAK
IAkJCQlmb3IgKGludCBpID0gMDsgaSA8IHJlc3VsdEFycmF5Lmxlbmd0aDsgaSsrKQogCQkJCQlp
ZiAoIXJlZHVjZU9uZUNvbnN0cmFpbnQoY29udGV4dCwgcmVzdWx0QXJyYXlbaV0pKQogCQkJCQkJ
cmV0dXJuIGZhbHNlOworCQkJfSBlbHNlIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBUeXBlQm91bmRb
XSkgeworCQkJCVR5cGVCb3VuZCBbXSBib3VuZHMgPSAoVHlwZUJvdW5kW10pIHJlc3VsdDsKKwkJ
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gYm91bmRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsr
KSB7CisJCQkJCWFkZEJvdW5kKGJvdW5kc1tpXSwgY29udGV4dC5lbnZpcm9ubWVudCk7CisJCQkJ
fQogCQkJfSBlbHNlIHsKIAkJCQlhZGRCb3VuZCgoVHlwZUJvdW5kKXJlc3VsdCwgY29udGV4dC5l
bnZpcm9ubWVudCk7CiAJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5kaW5nLmphdmEKaW5kZXggOWI0YmYx
NC4uZjBkNzhhNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJlQmluZGluZy5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQ2FwdHVyZUJpbmRpbmcuamF2YQpAQCAtMTUsNiArMTUsNyBA
QAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogCiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKK2ltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3Rh
bnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBp
bGVyT3B0aW9uczsKQEAgLTI4LDYgKzI5LDggQEAKIAkvKiBpbmZvcm1hdGlvbiB0byBjb21wdXRl
IHVuaXF1ZSBiaW5kaW5nIGtleSAqLwogCXB1YmxpYyBSZWZlcmVuY2VCaW5kaW5nIHNvdXJjZVR5
cGU7CiAJcHVibGljIGludCBwb3NpdGlvbjsKKwlwdWJsaWMgQVNUTm9kZSBjdWQ7IC8vIHRvIGZh
Y2lsaXRhdGUgcmVjYXB0dXJlcy4KKwlwdWJsaWMgaW50IHR5cGVBcmd1bWVudEluZGV4OyAvLyB0
byBmYWNpbGl0YXRlIHJlY2FwdHVyZXMuCiAKIAlwdWJsaWMgQ2FwdHVyZUJpbmRpbmcoV2lsZGNh
cmRCaW5kaW5nIHdpbGRjYXJkLCBSZWZlcmVuY2VCaW5kaW5nIHNvdXJjZVR5cGUsIGludCBwb3Np
dGlvbiwgaW50IGNhcHR1cmVJRCkgewogCQlzdXBlcihUeXBlQ29uc3RhbnRzLldJTERDQVJEX0NB
UFRVUkVfTkFNRV9QUkVGSVgsIG51bGwsIDAsIHdpbGRjYXJkLmVudmlyb25tZW50KTsKQEAgLTUz
LDYgKzU2LDEyIEBACiAJCX0KIAl9CiAJCisJcHVibGljIENhcHR1cmVCaW5kaW5nKFdpbGRjYXJk
QmluZGluZyB3aWxkY2FyZCwgUmVmZXJlbmNlQmluZGluZyBzb3VyY2VUeXBlLCBpbnQgcG9zaXRp
b24sIGludCB0eXBlQXJndW1lbnRJbmRleCwgQVNUTm9kZSBjdWQsIGludCBjYXB0dXJlSUQpIHsK
KwkJdGhpcyh3aWxkY2FyZCwgc291cmNlVHlwZSwgcG9zaXRpb24sIGNhcHR1cmVJRCk7CisJCXRo
aXMuY3VkID0gY3VkOworCQl0aGlzLnR5cGVBcmd1bWVudEluZGV4ID0gdHlwZUFyZ3VtZW50SW5k
ZXg7CisJfQorCQogCS8vIGZvciBzdWJjbGFzcyBDYXB0dXJlQmluZGluZzE4CiAJcHJvdGVjdGVk
IENhcHR1cmVCaW5kaW5nKFJlZmVyZW5jZUJpbmRpbmcgc291cmNlVHlwZSwgY2hhcltdIHNvdXJj
ZU5hbWUsIGludCBwb3NpdGlvbiwgaW50IGNhcHR1cmVJRCwgTG9va3VwRW52aXJvbm1lbnQgZW52
aXJvbm1lbnQpIHsKIAkJc3VwZXIoc291cmNlTmFtZSwgbnVsbCwgMCwgZW52aXJvbm1lbnQpOwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db21waWxhdGlvblVuaXRTY29wZS5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db21waWxhdGlvblVuaXRTY29wZS5qYXZhCmluZGV4IDIxZjdjMWUuLjM2ODBj
ZDEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29tcGlsYXRpb25Vbml0U2NvcGUuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEKQEAgLTgwMCw2ICs4
MDAsOCBAQAogCXJldHVybiAiLS0tIENvbXBpbGF0aW9uVW5pdCBTY29wZSA6ICIgKyBuZXcgU3Ry
aW5nKHRoaXMucmVmZXJlbmNlQ29udGV4dC5nZXRGaWxlTmFtZSgpKTsgLy8kTk9OLU5MUy0xJAog
fQogcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nIHR5cGVUb1JlY29yZChUeXBlQmluZGluZyB0eXBl
KSB7CisJaWYgKHR5cGUgPT0gbnVsbCkKKwkJcmV0dXJuIG51bGw7CiAJd2hpbGUgKHR5cGUuaXNB
cnJheVR5cGUoKSkKIAkJdHlwZSA9ICgoQXJyYXlCaW5kaW5nKSB0eXBlKS5sZWFmQ29tcG9uZW50
VHlwZSgpOwogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEu
amF2YQppbmRleCA3N2Q1YzA2Li43MzEwOTQ4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3Ry
YWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKQEAgLTI2NSwxMCArMjY1LDEzIEBACiAJCU1ldGhv
ZEJpbmRpbmcgZnVuY3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlLCB0cnVlKTsKIAkJaWYgKGZ1bmN0aW9uVHlwZSA9PSBudWxsKQogCQkJ
cmV0dXJuIEZBTFNFOwotCQkvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhl
IG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCi0JCU1ldGhvZEJp
bmRpbmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxlVGltZU1l
dGhvZFRhcmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKKwkJCisJCU1ldGhvZEJp
bmRpbmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmdldEV4YWN0TWV0aG9kKCk7
IAorCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCQkKKwkJCXBvdGVudGlhbGx5
QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwg
aW5mZXJlbmNlQ29udGV4dC5zY29wZSk7IC8vIC8vIHBvdGVudGlhbGx5LWFwcGxpY2FibGUgbWV0
aG9kIGZvciB0aGUgbWV0aG9kIHJlZmVyZW5jZSB3aGVuIHRhcmdldGluZyBUICgxNS4xMy4xKSwK
IAkJaWYgKHBvdGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQogCQkJcmV0dXJuIEZBTFNFOwor
CQkKIAkJaWYgKHJlZmVyZW5jZS5pc0V4YWN0TWV0aG9kUmVmZXJlbmNlKCkpIHsKIAkJCUxpc3Q8
Q29uc3RyYWludEZvcm11bGE+IG5ld0NvbnN0cmFpbnRzID0gbmV3IEFycmF5TGlzdDxDb25zdHJh
aW50Rm9ybXVsYT4oKTsKIAkJCVR5cGVCaW5kaW5nW10gcCA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0
ZXJzOwpAQCAtMjc5LDYgKzI4Miw4IEBACiAJCQlpZiAobiA9PSBrKzEpIHsKIAkJCQluZXdDb25z
dHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwWzBdLCByZWZlcmVuY2Uu
bGhzLnJlc29sdmVkVHlwZSwgQ09NUEFUSUJMRSkpOwogCQkJCW9mZnNldCA9IDE7CisJCQl9IGVs
c2UgaWYgKG4gIT0gaykgeworCQkJCXJldHVybiBGQUxTRTsKIAkJCX0KIAkJCWZvciAoaW50IGkg
PSBvZmZzZXQ7IGkgPCBuOyBpKyspCiAJCQkJbmV3Q29uc3RyYWludHMuYWRkKENvbnN0cmFpbnRU
eXBlRm9ybXVsYS5jcmVhdGUocFtpXSwgcFByaW1lW2ktb2Zmc2V0XSwgQ09NUEFUSUJMRSkpOwpA
QCAtMjg3LDcgKzI5Miw3IEBACiAJCQkJVHlwZUJpbmRpbmcgckFwcGwgPSBwb3RlbnRpYWxseUFw
cGxpY2FibGUuaXNDb25zdHJ1Y3RvcigpICYmICFyZWZlcmVuY2UuaXNBcnJheUNvbnN0cnVjdG9y
UmVmZXJlbmNlKCkgPyBwb3RlbnRpYWxseUFwcGxpY2FibGUuZGVjbGFyaW5nQ2xhc3MgOiBwb3Rl
bnRpYWxseUFwcGxpY2FibGUucmV0dXJuVHlwZTsKIAkJCQlpZiAockFwcGwgPT0gVHlwZUJpbmRp
bmcuVk9JRCkKIAkJCQkJcmV0dXJuIEZBTFNFOwotCQkJCVR5cGVCaW5kaW5nIHJQcmltZSA9IHJB
cHBsLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgMTQpOyAvLyBGSVhNRSBjYXB0dXJl
IHBvc2l0aW9uPz8KKwkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVy
ZW5jZUNvbnRleHQuc2NvcGUsIHJlZmVyZW5jZS5zb3VyY2VFbmQpOwogCQkJCW5ld0NvbnN0cmFp
bnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHJQcmltZSwgciwgQ09NUEFUSUJM
RSkpOwogCQkJfQogCQkJcmV0dXJuIG5ld0NvbnN0cmFpbnRzLnRvQXJyYXkobmV3IENvbnN0cmFp
bnRGb3JtdWxhW25ld0NvbnN0cmFpbnRzLnNpemUoKV0pOwpAQCAtMzc0LDcgKzM3OSwxNyBAQAog
CQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlw
ZUFyZ3VtZW50cygpOwogCQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxsKSB7CiAJCQkvLyBpbnZv
Y2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpOgotCQkJVHlwZUJpbmRpbmcgcmV0dXJuVHlw
ZSA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFyaW5nQ2xhc3MgOiBtZXRo
b2QucmV0dXJuVHlwZTsKKwkJCVR5cGVCaW5kaW5nIHJldHVyblR5cGUgPSBudWxsOworLy8JCQlp
ZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSkKKy8vCQkJCXJldHVyblR5cGUgPSBtZXRob2QuZGVj
bGFyaW5nQ2xhc3M7CisvLwkJCWVsc2UgaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52
b2NhdGlvbikKKy8vCQkJCXJldHVyblR5cGUgPSAoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRl
KS5yZXR1cm5UeXBlKG1ldGhvZCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7CisvLwkJCWVsc2Ug
CisvLwkJCQlyZXR1cm5UeXBlID0gbWV0aG9kLnJldHVyblR5cGU7CisKKwkJCXJldHVyblR5cGUg
PSBtZXRob2QuaXNDb25zdHJ1Y3RvcigpID8gbWV0aG9kLmRlY2xhcmluZ0NsYXNzIDogbWV0aG9k
LnJldHVyblR5cGU7CisJCQlyZXR1cm5UeXBlID0gcmV0dXJuVHlwZS5jYXB0dXJlKGluZmVyZW5j
ZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKKwkJCQogCQkJaWYg
KHJldHVyblR5cGUgPT0gVHlwZUJpbmRpbmcuVk9JRCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNl
RmFpbHVyZUV4Y2VwdGlvbigiZXhwcmVzc2lvbiBoYXMgbm8gdmFsdWUiKTsgLy8kTk9OLU5MUy0x
JAogCkBAIC0zOTUsNyArNDEwLDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0g
aW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7
CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5l
bnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRU
eXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBl
KCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVu
Y2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVk
VHlwZSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMK
KwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBw
YXJhbWV0ZXJpemVkVHlwZS8qIHByZS1jYXB0dXJlZCAqLyk7IC8vIGVzdGFibGlzaGVkOiBib3Ro
IHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKIAkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEg
bmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdl
dFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFu
ZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJfQpAQCAtNDE1LDcgKzQzMCw3IEBACiAJ
CQkJCUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJl
bmNlVmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJ
CXJldHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRp
YXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2Nh
dGlvblNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJ
CQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9uKGFscGhhLCBudWxs
KS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVu
ZCgpKTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJh
aW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCQly
ZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50
KTsKIAkJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVs
YS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQppbmRleCA4
MjE0OTVjLi4xNDIxNTE2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmph
dmEKQEAgLTExMiwxMCArMTEyLDEwIEBACiAJCQkJaWYgKHQuYm91bmRLaW5kID09IFdpbGRjYXJk
LlVOQk9VTkQpCiAJCQkJCXJldHVybiBUUlVFOwogCQkJCWlmICh0LmJvdW5kS2luZCA9PSBXaWxk
Y2FyZC5FWFRFTkRTKSB7Ci0JCQkJCWlmICh0aGlzLmxlZnQua2luZCgpICE9IEJpbmRpbmcuV0lM
RENBUkRfVFlQRSAmJiAhdGhpcy5sZWZ0LmlzQ2FwdHVyZSgpKSB7CisJCQkJCWlmICh0aGlzLmxl
ZnQua2luZCgpICE9IEJpbmRpbmcuV0lMRENBUkRfVFlQRSkgewogCQkJCQkJcmV0dXJuIENvbnN0
cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUodGhpcy5sZWZ0LCB0LmJvdW5kLCBTVUJUWVBFLCB0aGlz
LmlzU29mdCk7CiAJCQkJCX0gZWxzZSB7Ci0JCQkJCQlXaWxkY2FyZEJpbmRpbmcgcyA9IHRoaXMu
bGVmdC5pc0NhcHR1cmUoKSA/ICgoQ2FwdHVyZUJpbmRpbmcpIHRoaXMubGVmdCkud2lsZGNhcmQg
OiAoV2lsZGNhcmRCaW5kaW5nKSB0aGlzLmxlZnQ7CisJCQkJCQlXaWxkY2FyZEJpbmRpbmcgcyA9
IChXaWxkY2FyZEJpbmRpbmcpIHRoaXMubGVmdDsKIAkJCQkJCXN3aXRjaCAocy5ib3VuZEtpbmQp
IHsKIAkJCQkJCQljYXNlIFdpbGRjYXJkLlVOQk9VTkQ6CiAJCQkJCQkJCXJldHVybiBDb25zdHJh
aW50VHlwZUZvcm11bGEuY3JlYXRlKGluZmVyZW5jZUNvbnRleHQub2JqZWN0LCB0LmJvdW5kLCBT
VUJUWVBFLCB0aGlzLmlzU29mdCk7CkBAIC0xMjgsMTAgKzEyOCwxMCBAQAogCQkJCQkJfQogCQkJ
CQl9CiAJCQkJfSBlbHNlIHsgLy8gU1VQRVIgCi0JCQkJCWlmICh0aGlzLmxlZnQua2luZCgpICE9
IEJpbmRpbmcuV0lMRENBUkRfVFlQRSAmJiAhdGhpcy5sZWZ0LmlzQ2FwdHVyZSgpKSB7CisJCQkJ
CWlmICh0aGlzLmxlZnQua2luZCgpICE9IEJpbmRpbmcuV0lMRENBUkRfVFlQRSkgewogCQkJCQkJ
cmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUodC5ib3VuZCwgdGhpcy5sZWZ0LCBT
VUJUWVBFLCB0aGlzLmlzU29mdCk7CiAJCQkJCX0gZWxzZSB7Ci0JCQkJCQlXaWxkY2FyZEJpbmRp
bmcgcyA9IHRoaXMubGVmdC5pc0NhcHR1cmUoKSA/ICgoQ2FwdHVyZUJpbmRpbmcpIHRoaXMubGVm
dCkud2lsZGNhcmQgOiAoV2lsZGNhcmRCaW5kaW5nKSB0aGlzLmxlZnQ7CisJCQkJCQlXaWxkY2Fy
ZEJpbmRpbmcgcyA9IChXaWxkY2FyZEJpbmRpbmcpIHRoaXMubGVmdDsKIAkJCQkJCWlmIChzLmJv
dW5kS2luZCA9PSBXaWxkY2FyZC5TVVBFUikgewogCQkJCQkJCXJldHVybiBDb25zdHJhaW50VHlw
ZUZvcm11bGEuY3JlYXRlKHQuYm91bmQsIHMuYm91bmQsIFNVQlRZUEUsIHRoaXMuaXNTb2Z0KTsK
IAkJCQkJCX0gZWxzZSB7CkBAIC0xNzIsNiArMTcyLDIyIEBACiAJCQkJCXJldHVybiBGQUxTRTsK
IAkJCQl9CiAJCQkJaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7
CisJCQkJCWlmICh0aGlzLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpIHsKKwkJ
CQkJCUluZmVyZW5jZVZhcmlhYmxlIGxocyA9IChJbmZlcmVuY2VWYXJpYWJsZSkgdGhpcy5sZWZ0
OworCQkJCQkJSW5mZXJlbmNlVmFyaWFibGUgcmhzID0gKEluZmVyZW5jZVZhcmlhYmxlKSB0aGlz
LnJpZ2h0OworCQkJCQkJaWYgKGxocy50eXBlUGFyYW1ldGVyIGluc3RhbmNlb2YgQ2FwdHVyZUJp
bmRpbmcgJiYgcmhzLnR5cGVQYXJhbWV0ZXIgIT0gbnVsbCAmJiByaHMudHlwZVBhcmFtZXRlciBp
bnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcgJiYgIXJocy50eXBlUGFyYW1ldGVyLmlzQ2Fw
dHVyZSgpKSB7CisJCQkJCQkJVHlwZUJvdW5kIFtdIGJvdW5kcyA9IG5ldyBUeXBlQm91bmRbMl07
CisJCQkJCQkJYm91bmRzWzBdID0gbmV3IFR5cGVCb3VuZChsaHMsIHJocywgU0FNRSwgdGhpcy5p
c1NvZnQpOworCQkJCQkJCWJvdW5kc1sxXSA9IG5ldyBUeXBlQm91bmQocmhzLCBsaHMudHlwZVBh
cmFtZXRlciwgU0FNRSwgdGhpcy5pc1NvZnQpOworCQkJCQkJCXJldHVybiBib3VuZHM7CisJCQkJ
CQl9CisJCQkJCQlpZiAocmhzLnR5cGVQYXJhbWV0ZXIgaW5zdGFuY2VvZiBDYXB0dXJlQmluZGlu
ZyAmJiBsaHMudHlwZVBhcmFtZXRlciAhPSBudWxsICYmIGxocy50eXBlUGFyYW1ldGVyIGluc3Rh
bmNlb2YgVHlwZVZhcmlhYmxlQmluZGluZyAmJiAhbGhzLnR5cGVQYXJhbWV0ZXIuaXNDYXB0dXJl
KCkpIHsKKwkJCQkJCQlUeXBlQm91bmQgW10gYm91bmRzID0gbmV3IFR5cGVCb3VuZFsyXTsKKwkJ
CQkJCQlib3VuZHNbMF0gPSBuZXcgVHlwZUJvdW5kKGxocywgcmhzLCBTQU1FLCB0aGlzLmlzU29m
dCk7CisJCQkJCQkJYm91bmRzWzFdID0gbmV3IFR5cGVCb3VuZChsaHMsIHJocy50eXBlUGFyYW1l
dGVyLCBTQU1FLCB0aGlzLmlzU29mdCk7CisJCQkJCQkJcmV0dXJuIGJvdW5kczsKKwkJCQkJCX0K
KwkJCQkJfQogCQkJCQlyZXR1cm4gbmV3IFR5cGVCb3VuZCgoSW5mZXJlbmNlVmFyaWFibGUpIHRo
aXMubGVmdCwgdGhpcy5yaWdodCwgU0FNRSwgdGhpcy5pc1NvZnQpOwogCQkJCX0KIAkJCQlpZiAo
dGhpcy5yaWdodCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZl
cmVuY2VDb250ZXh0MTguamF2YQppbmRleCBhMTU1NTk5Li5iOGY2NzNlIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
SW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTIzLDE2ICsyMywxMiBAQAogaW1wb3J0IGphdmEu
dXRpbC5TZXQ7CiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3Bl
cmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNU
Tm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRp
dGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5GdW5jdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTWVzc2FnZVNlbmQ7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5OdWxsQW5ub3RhdGlvbk1hdGNoaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUmVmZXJlbmNlRXhwcmVz
c2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlN0YXRl
bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRj
YXJkOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNvcnRp
bmc7CiAKQEAgLTk1LDQxICs5MSw5IEBACiAgKiA8ZHQ+MTguNS40IE1vcmUgU3BlY2lmaWMgTWV0
aG9kIEluZmVyZW5jZTwvZHQ+CiAgKiA8ZGQ+PGVtPk5vdCBZZXQgSW1wbGVtZW50ZWQ8L2VtPjwv
ZGQ+CiAgKiA8L2RsPgotICogRm9yIDE4LjUuMSBhbmQgMTguNS4yIHNvbWUgaGlnaC1sZXZlbCBj
b250cm9sIGlzIGltcGxlbWVudGVkIGluCi0gKiAge0BsaW5rIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyNjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nLCBUeXBl
QmluZGluZ1tdLCBTY29wZSwgSW52b2NhdGlvblNpdGUsIGludCl9LgorICogRm9yIDE4LjUuMSBh
bmQgMTguNS4yIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRlZCBpbgorICogIHtAbGlu
ayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25TaXRlKX0u
CiAgKiA8aDI+SW5mZXJlbmNlIExpZmVjeWNsZTwvaDI+Ci0gKiBUaGUgc2VwYXJhdGlvbiBpbnRv
IDE4LjUuMSBhbmQgMTguNS4yIGNhdXNlcyBzb21lIGNvbXBsZXhpdHk6Ci0gKiA8dWw+Ci0gKiA8
bGk+Q2FsbGluZyBib3RoIHBhcnRzIG9mIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbnRlcndvdmVu
IHdpdGggb3ZlcmxvYWQgcmVzb2x1dGlvbi4gU2VlIAotICoge0BsaW5rIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyNjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5n
LCBUeXBlQmluZGluZ1tdLCBTY29wZSwgSW52b2NhdGlvblNpdGUsIGludCkKLSAqIAkJUEdNQiNj
b21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpfSBmb3IgdGhlIGJhc2ljIDxiPnByb3RvY29sPC9iPi48
L2xpPgotICogPGxpPkludGVybWVkaWF0ZSA8Yj5zdGF0ZTwvYj4gcmVnYXJkaW5nIGluZmVyZW5j
ZSBtdXN0IGJlIHN0b3JlZCBiZXR3ZWVuIGJvdGggcGhhc2VzLiBJbmZlcmVuY2UgaXMgcGVyZm9y
bWVkIHdpdGggZGlmZmVyZW50Ci0gKiAgIGlucHV0cyBmb3IgZWFjaCBwYWlyIG9mIHtAbGluayBJ
bnZvY2F0aW9ufSB4IHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmd9LAot
ICogICAgc2VlIHtAbGluayBJbnZvY2F0aW9uI3JlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcsIEluZmVyZW5jZUNvbnRleHQxOCkgSW52b2Nh
dGlvbi5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQoKX0gYW5kCi0gKiAgICB7QGxpbmsgSW52b2Nh
dGlvbiNnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBnZXRJ
bmZlcmVuY2VDb250ZXh0KCl9Ljxici8+Ci0gKiAgICBBcyBwYXJ0IG9mIHRoZSBsaWZlY3ljbGUg
c3RhdGUsIGVhY2ggaW5zdGFuY2Ugb2YgSW5mZXJlbmNlQ29udGV4dDE4IHJlbWVtYmVycyB0aGUg
Y3VycmVudCB7QGxpbmsgI2luZmVyZW5jZUtpbmR9Ci0gKiAgICBhbmQge0BsaW5rICNzdGVwQ29t
cGxldGVkfS48L2xpPgotICogPGxpPjxiPk5lc3RlZCBpbmZlcmVuY2UvcmVzb2x2aW5nPC9iPjog
SWYgYW4gaW52b2NhdGlvbiBhcmd1bWVudCBpcyBhIHBvbHkgZXhwcmVzc2lvbiBpdHNlbGYsIGZp
bmFsIHJlc29sdmluZyBvZiB0aGUgYXJndW1lbnQgY2FuIG9ubHkgaGFwcGVuZWQKLSAqICAgIGFm
dGVyIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgcmVnYXJkaW5nIHRoZSBvdXRlciBpbnZvY2F0
aW9uLiBPdXRlciBpbmZlcmVuY2UgbXVzdCBwcm9kdWNlIHRoZSA8Yj50YXJnZXQgdHlwZTwvYj4g
dGhhdCBkcml2ZXMKLSAqICAgIHRoZSBpbm5lciBpbmZlcmVuY2UgLyByZXNvbHZpbmcuIFR3byBk
aWZmZXJlbnQgcHJvdG9jb2xzIGFyZSBhcHBsaWVkOgotICogICAgPHVsPgotICogICAgPGxpPklm
IHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYW4gaW52b2NhdGlvbiwgaW5uZXIgaW5mZXJl
bmNlIGlzIGRpcmVjdGx5IGluY29ycG9yYXRlZCBpbnRvCi0gKiAgICAgIHRoZSB7QGxpbmsgI2N1
cnJlbnRCb3VuZHN9LCBzZWUgYmxvY2sgaW5zaWRlIHtAbGluayBDb25zdHJhaW50RXhwcmVzc2lv
bkZvcm11bGEjcmVkdWNlKEluZmVyZW5jZUNvbnRleHQxOCl9Ljxici8+Ci0gKiAgICAgIEluIHRo
aXMgY2FzZSB0aGUgcmVzdWx0cyBvZiB0aGUgY29tYmluZWQgaW5mZXJlbmNlIG5lZWQgdG8gYmUg
YXBwbGllZCB0byBhbGwgY29udGFpbmVkIGlubmVyIGludm9jYXRpb25zLAotICogICAgICB3aGlj
aCBoYXBwZW5zIGluIHtAbGluayAjcmViaW5kSW5uZXJQb2xpZXMoQm91bmRTZXQsIFR5cGVCaW5k
aW5nW10pfSwgd2hpY2ggbXVzdCBiZSBjYWxsZWQgd2hlbmV2ZXIKLSAqICAgICAgMTguNS4yIGZp
bmlzaGVzLjwvbGk+Ci0gKiAgICA8bGk+SWYgdGhlIGlubmVyIHBvbHkgZXhwcmVzc2lvbiBpcyBh
IGZ1bmN0aW9uYWwgZXhwcmVzc2lvbiBvciBhIGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gbm8gaW5m
ZXJlbmNlIHZhcmlhYmxlcwotICogICAgICBleGlzdCByZXByZXNlbnRpbmcgdGhlIGlubmVyLiBJ
biB0aGlzIGNhc2UgdGhlIGZpbmFsIHRhcmdldCB0eXBlIGlzIHB1c2hlZCBpbnRvIHRoZSBpbm5l
ciB1c2luZwotICogICAgICB7QGxpbmsgRXhwcmVzc2lvbiNjaGVja0FnYWluc3RGaW5hbFRhcmdl
dFR5cGUoVHlwZUJpbmRpbmcsIFNjb3BlKX0sIHdoaWNoLCB0b28sIGlzIGNhbGxlZCBmcm9tIAot
ICogICAgICB7QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1td
KX0uPC9saT4KLSAqICAgIDxsaT5Gb3IgcmVjdXJzaXZlbHkgcHVzaGluZyB0YXJnZXQgdHlwZXMg
aW50byBhcmd1bWVudHMgb2YgYW4gaW52b2NhdGlvbgotICogICAgCW1ldGhvZCB7QGxpbmsgQVNU
Tm9kZSNyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiwgTWV0aG9kQmlu
ZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUpfSBleGlzdHMsCi0gKiAgICAJd2hpY2ggaXMgY2Fs
bGVkIGluIHR3byBzaXR1YXRpb25zOiAoMSkgZm9yIG5vbi1nZW5lcmljIG91dGVyIGludm9jYXRp
b25zIGZyb20gTWVzc2FnZVNlbmQjZmluZE1ldGhvZEJpbmRpbmcoKSBhbmQKLSAqICAgIAlTdGF0
ZW1lbnQjZmluZENvbnN0cnVjdG9yQmluZGluZygpOyAoMikgZm9yIGdlbmVyaWMgb3V0ZXIgaW52
b2NhdGlvbnMgZnJvbSB7QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmlu
ZGluZ1tdKX0uPC9saT4KLSAqICAgIDxsaT5JbiBzb21lIHNpdHVhdGlvbnMgaW52b2NhdGlvbiBh
cmd1bWVudHMgdGhhdCBhcmUgcG9seSBpbnZvY2F0aW9ucyBuZWVkIHRvIGJlIHJlc29sdmVkIGlu
IHRoZSBtaWRkbGUgb2Ygb3ZlcmxvYWQgcmVzb2x1dGlvbgotICogICAgCXRvIGFuc3dlciB7QGxp
bmsgU2NvcGUjcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTh9ICh3aGVyZSB0aGUgb3V0ZXIg
aW52b2NhdGlvbiBkaWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZSkuPGJyLz4KLSAqICAgIDwv
dWw+Ci0gKiAgICBQdXNoaW5nIGluZmVyZW5jZSByZXN1bHRzIGludG8gYW4gaW5uZXIgaW52b2Nh
dGlvbiBoYXBwZW5zIHVzaW5nIHtAbGluayBJbnZvY2F0aW9uI3VwZGF0ZUJpbmRpbmdzKE1ldGhv
ZEJpbmRpbmcsVHlwZUJpbmRpbmcpfS48L2xpPgogICogPGxpPkRlY2lzaW9uIHdoZXRoZXIgb3Ig
bm90IGFuIGludm9jYXRpb24gaXMgYSA8Yj52YXJpYWJsZS1hcml0eTwvYj4gaW52b2NhdGlvbiBp
cyBtYWRlIGJ5IGZpcnN0IGF0dGVtcHRpbmcKICAqIAkJdG8gc29sdmUgMTguNS4xIGluIG1vZGUg
e0BsaW5rICNDSEVDS19MT09TRX0uIE9ubHkgaWYgdGhhdCBmYWlscywgYW5vdGhlciBhdHRlbXB0
IGlzIG1hZGUgaW4gbW9kZSB7QGxpbmsgI0NIRUNLX1ZBUkFSR30uCiAgKiAJCVdoaWNoIG9mIHRo
ZXNlIHR3byBhdHRlbXB0cyB3YXMgc3VjY2Vzc2Z1bCBpcyBzdG9yZWQgaW4ge0BsaW5rICNpbmZl
cmVuY2VLaW5kfS4KQEAgLTE2NSwxMSArMTI5LDggQEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5
cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3VuZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0
aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFj
aywgaWYgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9y
ZWRTb2x1dGlvbjsKLQogCS8qKiBGb3IgZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3Nl
ZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3JlIHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUg
aW5mZXJlbmNlLiAqLwotCU1hcDxUeXBlQmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFy
Z2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKKwlNYXA8VHlw
ZUJpbmRpbmcsU29sdXRpb24+IHNvbHV0aW9uc1BlclRhcmdldFR5cGUgPSBuZXcgSGFzaE1hcDxU
eXBlQmluZGluZywgU29sdXRpb24+KCk7ICAgIC8vIEJMT1cgVEhJUyBBV0FZLgogCiAJLyoqIE9u
ZSBvZiBDSEVDS19TVFJJQ1QsIENIRUNLX0xPT1NFLCBvciBDSEVDS19WQVJBUkdTLiAqLwogCWlu
dCBpbmZlcmVuY2VLaW5kOwpAQCAtMzcyLDcgKzMzMyw2IEBACiAJfQogCiAJLyoqIEpMUyAxOC41
LjIgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAKLQkgKiA8cD5DYWxsZXJzIGFyZSByZXNwb25z
aWJsZSBmb3IgYW55IHBvc3QtcHJvY2Vzc2luZyAoc2VlIHtAbGluayAjcmViaW5kSW5uZXJQb2xp
ZXMoQm91bmRTZXQsIFR5cGVCaW5kaW5nW10pfSkuPC9wPgogCSAqIEBwYXJhbSBiMSAidGhlIGJv
dW5kIHNldCBwcm9kdWNlZCBieSByZWR1Y3Rpb24gaW4gb3JkZXIgdG8gZGVtb25zdHJhdGUgdGhh
dCBtIGlzIGFwcGxpY2FibGUgaW4gMTguNS4xIgogCSAqLwogCXB1YmxpYyBCb3VuZFNldCBpbmZl
ckludm9jYXRpb25UeXBlKEJvdW5kU2V0IGIxLCBUeXBlQmluZGluZyBleHBlY3RlZFR5cGUsIElu
dm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkKQEAgLTUw
MCw5MSArNDYwLDYgQEAKIAkJCQkgJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1
ZUlmRmFsc2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpOwogCQl9CiAJCXJldHVybiB0cnVlOwot
CX0KLQotCS8qKgotCSAqIFNpbXBsaWZpZWQgQVBJIHRvIHBlcmZvcm0gSW52b2NhdGlvbiBUeXBl
IEluZmVyZW5jZSAoSkxTIDE4LjUuMikKLQkgKiBhbmQgcGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBz
OiBib3VuZCBjaGVjaywgcmViaW5kaW5nIG9mIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMsCi0JICog
YW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBpZiBuZWVkZWQuCi0JICog
U2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpbmZlcmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNo
ZWQuCi0JICogQHBhcmFtIGludm9jYXRpb24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAq
IEBwYXJhbSBhcmd1bWVudFR5cGVzIGFyZ3VtZW50cyBiZWluZyBwYXNzZWQgaW50byB0aGUgaW52
b2NhdGlvbgotCSAqIEBwYXJhbSBtZXRob2QgY3VycmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRp
bmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIEByZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGlu
ZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJzLAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9k
IGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBpbmZlcmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1p
c21hdGNoLgotCSAqLwotCS8qQE5vbk51bGwqLyBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlv
blR5cGUoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMs
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBv
cHRpbWl6ZTogaWYgb3V0ZXJDb250ZXh0IGV4aXN0cyBhbmQgaXMgcmVzb2x2ZWQsIHdlIHByb2Jh
Ymx5IGRvbid0IG5lZWQgdG8gaW5mZXIgYWdhaW4uCi0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUg
PSBpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyBmaW5hbE1ldGhvZCA9IG51bGw7Ci0JCVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyBtZXRob2RUb0NoZWNrID0gbWV0aG9kOwotCQkKLQkJYm9vbGVhbiBo
YXZlUHJvcGVyVGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBlLmlz
UHJvcGVyVHlwZSh0cnVlKTsKLQkJYm9vbGVhbiBpbmZlcnJlZEludm9jYXRpb25UeXBlID0gZmFs
c2U7Ci0JCWlmICh0YXJnZXRUeXBlICE9IG51bGwgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lv
bkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7Ci0JCQlNZXRob2RCaW5kaW5nIG9yaWdp
bmFsID0gbWV0aG9kLm9yaWdpbmFsTWV0aG9kOwotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlz
LnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJQm91bmRTZXQgcmVz
dWx0ID0gc29sdXRpb24gIT0gbnVsbCA/IHNvbHV0aW9uLmJvdW5kcyA6IG51bGw7Ci0JCQlpZiAo
cmVzdWx0ID09IG51bGwpIHsKLQkJCQkvLyBzdGFydCBvdmVyIGZyb20gYSBwcmV2aW91cyBjYW5k
aWRhdGUgYnV0IGRpc2NhcmQgaXRzIHR5cGUgdmFyaWFibGUgaW5zdGFudGlhdGlvbnMKLQkJCQkv
LyBUT0RPOiBzaG91bGQgd2UgcmV0YWluIGFueSBpbnN0YW50aWF0aW9ucyBvZiB0eXBlIHZhcmlh
YmxlcyBub3Qgb3duZWQgYnkgdGhlIG1ldGhvZD8gCi0JCQkJdHJ5IHsKLQkJCQkJcmVzdWx0ID0g
aW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRCb3VuZHMsIHRhcmdldFR5cGUsIGludm9j
YXRpb24sIG9yaWdpbmFsKTsKLQkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9u
IGUpIHsKLQkJCQkJLy8gbm8gc29sdXRpb24sIGJ1dCBkbyBtb3JlIGNoZWNrcyBiZWxvdwotCQkJ
CX0KLQkJCX0KLQkJCWlmIChyZXN1bHQgIT0gbnVsbCkgewotCQkJCVR5cGVCaW5kaW5nW10gc29s
dXRpb25zID0gZ2V0U29sdXRpb25zKG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlv
biwgcmVzdWx0KTsKLQkJCQlpZiAoc29sdXRpb25zICE9IG51bGwpIHsKLQkJCQkJZmluYWxNZXRo
b2QgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9y
aWdpbmFsLCBzb2x1dGlvbnMpOwotCQkJCQlpZiAodGhpcy5zY29wZS5jb21waWxlck9wdGlvbnMo
KS5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3Rh
dGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhmaW5hbE1ldGhvZCwgaW52b2NhdGlv
biwgdGhpcy5zY29wZSk7Ci0JCQkJCWludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0
KGZpbmFsTWV0aG9kLCB0aGlzKTsKLQkJCQkJdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1
dCh0YXJnZXRUeXBlLCBuZXcgU29sdXRpb24oZmluYWxNZXRob2QsIHJlc3VsdCkpOwotCQkJCQlp
bmZlcnJlZEludm9jYXRpb25UeXBlID0gdHJ1ZTsKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAoZmluYWxN
ZXRob2QgIT0gbnVsbCkKLQkJCQltZXRob2RUb0NoZWNrID0gZmluYWxNZXRob2Q7Ci0JCX0gZWxz
ZSB7Ci0JCQlmaW5hbE1ldGhvZCA9IG1ldGhvZDsKLQkJfQotCQkKLQkJTWV0aG9kQmluZGluZyBw
cm9ibGVtTWV0aG9kID0gbWV0aG9kVG9DaGVjay5ib3VuZENoZWNrMTgodGhpcy5zY29wZSwgYXJn
dW1lbnRUeXBlcyk7Ci0JCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsKLQotCQlpZiAoaW5mZXJyZWRJbnZvY2F0aW9uVHlwZSkgewotCQkJaWYgKHJl
YmluZElubmVyUG9saWVzKGZpbmFsTWV0aG9kLCBpbnZvY2F0aW9uKSkKLQkJCQlyZXR1cm4gZmlu
YWxNZXRob2Q7Ci0JCX0gZWxzZSBpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYmIGludm9jYXRp
b24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7Ci0JCQlyZXR1
cm4gbWV0aG9kOyAvLyBzdGlsbCBub3QgcmVhZHkhCi0JCX0KLQkJcmV0dXJuIGdldFJldHVyblBy
b2JsZW1NZXRob2RJZk5lZWRlZCh0YXJnZXRUeXBlLCBtZXRob2QpOwotCX0KLQotCS8qKgotCSAq
IFNpbXBsaWZpZWQgQVBJIHRvIHBlcmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxT
IDE4LjUuMikKLQkgKiBhbmQgcGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywg
cmViaW5kaW5nIG9mIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9m
IGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUg
Y2FsbGVkIGlmIHRoZSBpbmZlcmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogVmVyc2lv
biB1c2VkIGZvciBpbm5lciBpbnZvY2F0aW9ucywgd2hlcmUgYXJndW1lbnQgdHlwZXMgbmVlZCB0
byBiZSBleHRyYWN0ZWQKLQkgKiBmcm9tIGFjdHVhbCBpbnZvY2F0aW9uIGFyZ3VtZW50cy4KLQkg
KiBAcGFyYW0gaW52b2NhdGlvbiBpbnZvY2F0aW9uIGJlaW5nIGluZmVycmVkCi0JICogQHBhcmFt
IG1ldGhvZCBjdXJyZW50IGNhbmRpZGF0ZSBtZXRob2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0
aW9uCi0JICogQHJldHVybiBhIHZhbGlkIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBl
IHBhcmFtZXRlcnMsCi0JICogCW9yIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcg
ZWl0aGVyIGluZmVyZW5jZSBmYWlsdXJlIG9yIGEgYm91bmQgbWlzbWF0Y2guCi0JICovCi0JcHVi
bGljIC8qQE5vbk51bGwqLyBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2Nh
dGlvbiBpbnZvY2F0aW9uLCBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9k
KSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25b
XSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoYXJndW1lbnRzICE9
IG51bGwpIHsKLQkJCWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxl
bmd0aF07Ci0JCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKLQkJ
CQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKLQkJfQotCQly
ZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzLCBtZXRo
b2QpOwogCX0KIAogCXB1YmxpYyBib29sZWFuIGhhc1Jlc3VsdEZvcihUeXBlQmluZGluZyB0YXJn
ZXRUeXBlKSB7CkBAIC0xNDAyLDE0NSArMTI3Nyw2IEBACiAJCXRoaXMuaW5mZXJlbmNlS2luZCA9
IHJlY29yZC5pbmZlcmVuY2VLaW5kOwogCX0KIAotCXB1YmxpYyBib29sZWFuIHJlYmluZElubmVy
UG9saWVzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7Ci0JCUJv
dW5kU2V0IGJvdW5kcyA9IHRoaXMuY3VycmVudEJvdW5kczsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJaWYgKHRhcmdldFR5cGUgPT0g
bnVsbCB8fCAhdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCWlmICghc2l0ZS5n
ZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKLQkJCQkvLyBpbiB0
aGlzIGNhc2Ugd2UgbWF5IG5vdCB5ZXQgaGF2ZSB0aGUgc29sdXRpb24oPywgZ2V0IG9yIGNvbXB1
dGUgaXQgbm93OgotCQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJn
ZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCQl0cnkgewotCQkJCQlpZiAoc29sdXRpb24gIT0g
bnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQkJCWJvdW5kcyA9IHNvbHV0aW9u
LmJvdW5kczsKLQkJCQkJZWxzZQotCQkJCQkJYm91bmRzID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0
aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNpdGUsIG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKSk7
Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCXJldHVy
biBmYWxzZTsKLQkJCQl9Ci0JCQkJaWYgKGJvdW5kcyA9PSBudWxsKQotCQkJCQlyZXR1cm4gZmFs
c2U7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRp
b25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQlpZiAoc29sdXRpb24gIT0gbnVs
bCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3Vu
ZHM7Ci0JCX0KLQkJcmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBtZXRob2QucGFyYW1ldGVycyk7
Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIEFmdGVyIGluZmVyZW5jZSBoYXMgZmlu
aXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMgKEludm9jYXRpb25zKSwg
dGhhdAotCSAqIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNlLiBGb3IgZWFjaCBv
ZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCi0JICogZnJvbSB0aGUgaW5mZXJl
bmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNvbHZpbmcgYXMgbmVl
ZGVkLgotCSAqIFNpbWlsYXIgZm9yIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBkaWQgbm90IGRpcmVj
dGx5IHBhcnRpY2lwYXRlIGluIHRoZSBpbmZlcmVuY2UKLQkgKiBidXQgYXJlIGRpcmVjdCBhcmd1
bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiAoRnVuY3Rpb25hbEV4cHJlc3Npb24sIENv
bmRpdGlvbmFsRXhwcmVzc2lvbikuCi0JICovCi0JcHVibGljIHZvaWQgcmViaW5kSW5uZXJQb2xp
ZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzKSB7Ci0JCS8v
IFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5nIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZGly
ZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uOgotCQkvLyAoaGFuZGxlcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRpdGlvbmFsRXhwcmVzc2lvbikKLQkJaWYgKHRoaXMu
Y3VycmVudEludm9jYXRpb24gaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJcmV0
dXJuOyAvLyBubyBpbm5lciBleHByZXNzaW9ucwotCQlib29sZWFuIGlzVmFyYXJncyA9IHRoaXMu
aW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJBUkc7Ci0JCWFjY2VwdFBlbmRpbmdQb2x5QXJndW1l
bnRzKGJvdW5kcywgcGFyYW1ldGVyVHlwZXMsIGlzVmFyYXJncyk7Ci0JCS8vIFRoaXMgbG9vcHMg
b3ZlciBhbGwgcG9seSBleHByZXNzaW9ucyBmb3Igd2hpY2ggYSBzdWItaW5mZXJlbmNlIHdhcyB0
cmlnZ2VyZWQ6Ci0JCS8vIChoYW5kbGVzIGdlbmVyaWMgaW52b2NhdGlvbnMpCi0JCWludCBsZW4g
PSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkr
KykgewotCQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlzLmlubmVyUG9saWVz
LmdldChpKTsKLQkJCWlmIChpbm5lciBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsK
LQkJCQlSZWZlcmVuY2VFeHByZXNzaW9uIHJlZmVyZW5jZUV4cHJlc3Npb24gPSAoUmVmZXJlbmNl
RXhwcmVzc2lvbikgaW5uZXI7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21waWxlVGltZURlY2wgPSBy
ZWZlcmVuY2VFeHByZXNzaW9uLnByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQodGhpcy5zY29wZSk7
Ci0JCQkJaWYJKGNvbXBpbGVUaW1lRGVjbCAhPSBudWxsKSB7Ci0JICAJCQkJVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHZhcmlhYmxlcyA9IGNvbXBpbGVUaW1lRGVjbC50eXBlVmFyaWFibGVzOwotCQkJ
CQlpZiAodmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkJCVR5
cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKHZhcmlhYmxlcywgKEludm9jYXRp
b25TaXRlKSBpbm5lciwgYm91bmRzKTsKLQkJCQkJCXJlZmVyZW5jZUV4cHJlc3Npb24uYmluZGlu
ZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY29t
cGlsZVRpbWVEZWNsLCBhcmd1bWVudHMpOwotCQkJCQl9Ci0JCQkJfQotCQkJfSBlbHNlIGlmIChp
bm5lciBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbnZvY2F0aW9uIGlubmVyTWVzc2Fn
ZSA9IChJbnZvY2F0aW9uKSBpbm5lcjsKLQkJCQlUeXBlQmluZGluZyBpbm5lclRhcmdldFR5cGUg
PSBpbm5lci5leHBlY3RlZFR5cGUoKTsgLy8gbWF5IGJlIHNldCBmcm9tIGFjY2VwdFBlbmRpbmdQ
b2x5QXJndW1lbnRzCi0JCQkJaWYgKGlubmVyVGFyZ2V0VHlwZSAhPSBudWxsICYmICFpbm5lclRh
cmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCQlpbm5lclRhcmdldFR5cGUgPSBudWxs
OwotCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVyTWVzc2FnZS5iaW5kaW5nKGlubmVy
VGFyZ2V0VHlwZSwgaW5uZXJUYXJnZXRUeXBlICE9IG51bGwsIHRoaXMuc2NvcGUpOwotCQkJCWlm
IChiaW5kaW5nID09IG51bGwpCi0JCQkJCWNvbnRpbnVlOwotCQkJCU1ldGhvZEJpbmRpbmcgb3Jp
Z2luYWwgPSBiaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpOwotCi0JCQkJLy8gYXBwbHkgaW5mZXJl
bmNlIHJlc3VsdHMgb250byB0aGUgYWxsb2NhdGlvbiB0eXBlIG9mIGlubmVyIGRpYW1vbmRzOgot
CQkJCWlmIChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYgaW5uZXIuaXNQb2x5RXhwcmVzc2lv
bigpKSB7Ci0JCQkJCVJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MgPSBvcmlnaW5hbC5k
ZWNsYXJpbmdDbGFzczsKLQkJCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1dGlv
bnMoZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpLCBpbm5lck1lc3NhZ2UsIGJvdW5kcyk7
Ci0JCQkJCWRlY2xhcmluZ0NsYXNzID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJp
emVkVHlwZShkZWNsYXJpbmdDbGFzcywgYXJndW1lbnRzLCBkZWNsYXJpbmdDbGFzcy5lbmNsb3Np
bmdUeXBlKCkpOwotCQkJCQlvcmlnaW5hbCA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWRl
Y2xhcmluZ0NsYXNzKS5jcmVhdGVQYXJhbWV0ZXJpemVkTWV0aG9kKG9yaWdpbmFsKTsKLQkJCQkJ
aW5uZXIuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKGlubmVyVGFyZ2V0VHlwZSwgdGhpcy5z
Y29wZSk7CQotCQkJCQlpZiAodGhpcy5lbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLmlzQW5ub3Rh
dGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG9yaWdpbmFsLCBpbm5lck1lc3NhZ2UsIHRoaXMuc2Nv
cGUpOwotCQkJCX0KLQkJCQkKLQkJCQkvLyBhcHBseSByZXN1bHRzIG9mIHRoZSBjb21iaW5lZCBp
bmZlcmVuY2Ugb250byB0aGUgYmluZGluZyBvZiB0aGUgaW5uZXIgaW52b2NhdGlvbjoKLQkJCQlU
eXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFi
bGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsKLQkJCQlpZiAoc29sdXRpb25zID09IG51bGwp
IHsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcpIHsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGlubmVyTWVz
c2FnZS5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIGJpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwgJiYgIWJpbmRpbmcuaXNW
YWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlubmVyQ3R4LnJlcG9ydEludmFsaWRJbnZvY2F0aW9u
KGlubmVyTWVzc2FnZSwgYmluZGluZyk7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJY29udGludWU7
IC8vIGlubmVyIGluZmVyZW5jZSBub3QgcmVxdWVzdGVkIC0+IG5vdCBhIHByb2JsZW0KLQkJCQl9
Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IHRo
aXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWws
IHNvbHV0aW9ucyk7Ci0JCQkJCi0JCQkJaWYgKGlubmVyTWVzc2FnZS51cGRhdGVCaW5kaW5ncyhp
bm5lckJpbmRpbmcsIGlubmVyVGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFs
bHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9u
QXJndW1lbnRzKGlubmVyTWVzc2FnZSwgaW5uZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJCQl9
Ci0JCQl9Ci0JCX0KLQkJdGhpcy5zdGVwQ29tcGxldGVkID0gQklORElOR1NfVVBEQVRFRDsgLy8g
d2UncmUgZG9uZS1kb25lCi0JfQotCi0JcHJpdmF0ZSB2b2lkIGFjY2VwdFBlbmRpbmdQb2x5QXJn
dW1lbnRzKEJvdW5kU2V0IGFjY2VwdGVkUmVzdWx0LCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5
cGVzLCBib29sZWFuIGlzVmFyQXJncykgewotCQlpZiAoYWNjZXB0ZWRSZXN1bHQgPT0gbnVsbCB8
fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0gbnVsbCkgcmV0dXJuOwotCQlTdWJzdGl0dXRp
b24gc3Vic3RpdHV0aW9uID0gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGFjY2VwdGVkUmVzdWx0KTsK
LQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOyBp
KyspIHsKLQkJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBnZXRQYXJhbWV0ZXIocGFyYW1ldGVy
VHlwZXMsIGksIGlzVmFyQXJncyk7Ci0JCQlpZiAoIXRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRy
dWUpKQotCQkJCXRhcmdldFR5cGUgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgdGFy
Z2V0VHlwZSk7Ci0JCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSB0aGlzLmludm9jYXRpb25Bcmd1
bWVudHNbaV07Ci0JCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJ
CQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmVzc2lvbjsKLQkJCQlp
ZiAoIXRoaXMuaW5uZXJQb2xpZXMuY29udGFpbnMoaW52b2NhdGlvbikpIHsKLQkJCQkJTWV0aG9k
QmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcodGFyZ2V0VHlwZSwgdHJ1ZSwgdGhp
cy5zY29wZSk7Ci0JCQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBwcmV2aW91c0JpbmRpbmcgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBt
ZXRob2Q7Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdl
dEluZmVyZW5jZUNvbnRleHQocHJldmlvdXNCaW5kaW5nKTsKLQkJCQkJCWlmIChpbm5lckN0eCAh
PSBudWxsKSB7Ci0JCQkJCQkJLy8gd2UgaGF2ZSBhIG5vbi1wb2x5IGdlbmVyaWMgaW52b2NhdGlv
biwgd2hpY2ggbmVlZHMgaW5mZXJlbmNlIGJ1dCBpcyBub3QgY29ubmVjdGVkIHZpYSBpbm5lclBv
bGlzLgotCQkJCQkJCS8vIEZpbmlzaCB0aGF0IGlubmVyIGluZmVyZW5jZSBub3cgKGluY2wuIGJp
bmRpbmcgdXBkYXRlcyk6Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5l
ckN0eC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIHByZXZpb3VzQmluZGluZyk7Ci0J
CQkJCQkJaWYgKCFpbm5lckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQlpbm5l
ckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcpOwot
CQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvbi51cGRhdGVCaW5kaW5ncyhpbm5lckJpbmRp
bmcsIHRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmluZyBh
bnl0aGluZwotCQkJCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhp
bnZvY2F0aW9uLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCQkJCX0KLQkJCQkJCX0K
LQkJCQkJfSBlbHNlIGlmKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKXsKLQkJCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdl
dFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJCQl9Ci0JCQkJfSBlbHNlIHsKLQkJCQkJZXhwcmVzc2lv
bi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJfQotCQkJfSBlbHNlIHsKLQkJCQlp
ZiAodGhpcy5pbm5lclBvbGllcy5jb250YWlucyhleHByZXNzaW9uKSkgLy8gbWF5IGdldCBoZXJl
IGZvciBSZWZlcmVuY2VFeHByZXNzaW9ucyAuLi4KLQkJCQkJZXhwcmVzc2lvbi5zZXRFeHBlY3Rl
ZFR5cGUodGFyZ2V0VHlwZSk7IC8vIC4uLiBwcmVwYXJlIGZvciBmaW5hbCBpbmZlcmVuY2Ugdmlh
IHJlYmluZElubmVyUG9saWVzCi0JCQkJZWxzZQotCQkJCQlleHByZXNzaW9uLmNoZWNrQWdhaW5z
dEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsKLQkJCX0KLQkJfQotCX0K
LQogCXByaXZhdGUgU3Vic3RpdHV0aW9uIGdldFJlc3VsdFN1YnN0aXR1dGlvbihmaW5hbCBCb3Vu
ZFNldCByZXN1bHQpIHsKIAkJcmV0dXJuIG5ldyBTdWJzdGl0dXRpb24oKSB7CiAJCQlwdWJsaWMg
TG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQoKSB7IApAQCAtMTU4OCwxNyArMTMyNCwxMCBA
QAogCQl9CiAJCWlmIChleHBlY3RlZFR5cGUgPT0gbnVsbCkKIAkJCXJldHVybiBtZXRob2Q7IC8v
IGFzc3VtZSBpbmZlcmVuY2UgZmFpbHVyZSBjb25jZXJuZWQgYW5vdGhlciBleHByZXNzaW9uCi0J
CVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJp
bmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVt
UmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSk7CisJCVByb2Js
ZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
bWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29u
cy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUpOwogCQlwcm9ibGVtTWV0aG9kLnJldHVy
blR5cGUgPSBleHBlY3RlZFR5cGU7CiAJCXByb2JsZW1NZXRob2QuaW5mZXJlbmNlQ29udGV4dCA9
IHRoaXM7CiAJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCX0KLQotCXB1YmxpYyB2b2lkIHJlcG9y
dEludmFsaWRJbnZvY2F0aW9uKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBi
aW5kaW5nKSB7Ci0JCWlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgTWVzc2FnZVNlbmQpCi0JCQl0
aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QoKE1lc3NhZ2VTZW5kKSBp
bnZvY2F0aW9uLCBiaW5kaW5nKTsKLQkJZWxzZQotCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IoKFN0YXRlbWVudClpbnZvY2F0aW9uLCBiaW5kaW5nKTsK
IAl9CiAKIAkvLyBkZWJ1Z2dpbmc6CkBAIC0xNjU3LDcgKzEzODYsNyBAQAogCQlUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50cyA9IHBhcmFtZXRlcml6ZWRUeXBlLmFyZ3VtZW50czsKIAkJaWYgKGFyZ3Vt
ZW50cyAhPSBudWxsKSB7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7
IGkrKykKLQkJCQlpZiAoYXJndW1lbnRzW2ldLmlzV2lsZGNhcmQoKSkKKwkJCQlpZiAoYXJndW1l
bnRzW2ldLmlzV2lsZGNhcmQoKSB8fCBhcmd1bWVudHNbaV0uaXNDYXB0dXJlKCkpCiAJCQkJCXJl
dHVybiBwYXJhbWV0ZXJpemVkVHlwZTsKIAkJfQogCQlyZXR1cm4gbnVsbDsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9v
a3VwRW52aXJvbm1lbnQuamF2YQppbmRleCA4MTQ0ZTIxLi43N2Q1MjQ0IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9M
b29rdXBFbnZpcm9ubWVudC5qYXZhCkBAIC0zOCw2ICszOCw3IEBACiAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5DbGFzc0ZpbGVQb29sOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNv
bnN0YW50czsKQEAgLTEwMDMsNiArMTAwNCwxMCBAQAogCXJldHVybiB0aGlzLnR5cGVTeXN0ZW0u
Z2V0V2lsZGNhcmQoZ2VuZXJpY1R5cGUsIHJhbmssIGJvdW5kLCBvdGhlckJvdW5kcywgYm91bmRL
aW5kKTsKIH0KIAorcHVibGljIENhcHR1cmVCaW5kaW5nIGNyZWF0ZUNhcHR1cmVkV2lsZGNhcmQo
V2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkLCBSZWZlcmVuY2VCaW5kaW5nIGNvbnRleHRUeXBlLCBp
bnQgcG9zaXRpb24sIGludCB3aWxkY2FyZFBvc2l0aW9uLCBBU1ROb2RlIGN1ZCwgaW50IGlkKSB7
CisJcmV0dXJuIHRoaXMudHlwZVN5c3RlbS5nZXRDYXB0dXJlZFdpbGRjYXJkKHdpbGRjYXJkLCBj
b250ZXh0VHlwZSwgcG9zaXRpb24sIHdpbGRjYXJkUG9zaXRpb24sIGN1ZCwgaWQpOworfQorCiBw
dWJsaWMgV2lsZGNhcmRCaW5kaW5nIGNyZWF0ZVdpbGRjYXJkKFJlZmVyZW5jZUJpbmRpbmcgZ2Vu
ZXJpY1R5cGUsIGludCByYW5rLCBUeXBlQmluZGluZyBib3VuZCwgVHlwZUJpbmRpbmdbXSBvdGhl
ckJvdW5kcywgaW50IGJvdW5kS2luZCwgQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbnMp
IHsKIAlyZXR1cm4gdGhpcy50eXBlU3lzdGVtLmdldFdpbGRjYXJkKGdlbmVyaWNUeXBlLCByYW5r
LCBib3VuZCwgb3RoZXJCb3VuZHMsIGJvdW5kS2luZCwgYW5ub3RhdGlvbnMpOwogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEK
aW5kZXggMmU5NmE0Yi4uM2RmNjFhNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC00MSw3ICs0MSw3IEBACiBwdWJs
aWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcgaW1wbGVtZW50cyBTdWJzdGl0dXRpb24gewogCiAgICAgcHVi
bGljIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50czsKLSAgICBwcml2YXRlIExvb2t1cEVudmly
b25tZW50IGVudmlyb25tZW50OworICAgIHByb3RlY3RlZCBMb29rdXBFbnZpcm9ubWVudCBlbnZp
cm9ubWVudDsKICAgICBwdWJsaWMgYm9vbGVhbiBpbmZlcnJlZFJldHVyblR5cGU7CiAgICAgcHVi
bGljIGJvb2xlYW4gd2FzSW5mZXJyZWQ7IC8vIG9ubHkgc2V0IHRvIHRydWUgZm9yIGluc3RhbmNl
cyByZXN1bHRpbmcgZnJvbSBtZXRob2QgaW52b2NhdGlvbiBpbmZlcnJlbmNlCiAgICAgcHVibGlj
IGJvb2xlYW4gaXNSYXc7IC8vIHNldCB0byB0cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3
IGZvciBzdWJzdGl0dXRpb24gcHVycG9zZQpAQCAtNTAsMzEgKzUwLDExIEBACiAJLyoqCiAJICog
UGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9v
ciBleHBlY3RlZCB0eXBlCiAJICogPHA+Ci0JICogSW4gMS44KyB0aGUgZm9sbG93aW5nIGRpc2Np
cGxpbmUgaGFzIHRvIGJlIG9ic2VydmVkIGJ5IGNhbGxlcnM6Ci0JICogRWFjaCBpbnZvY2F0aW9u
IG11c3QgYmUgc3ViamVjdGVkIHRvIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlOgotCSAqIDwvcD4K
LQkgKiA8dWw+Ci0JICogPGxpPiB7QGxpbmsgU2NvcGUjQVBQTElDQUJJTElUWSBJbnZvY2F0aW9u
IEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlfSwgd2hpY2ggbWF5IGJlIGFwcGxpZWQKLQkgKiAgICAg
bXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lIGludm9jYXRpb248L2xpPgotCSAqIDxsaT4ge0Bs
aW5rIFNjb3BlI0lOVk9DQVRJT05fVFlQRSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlfSwgd2hp
Y2ggaXMgZmluYWxseSBwZXJmb3JtZWQKLQkgKiAgICAgZm9yIHRoZSBzZWxlY3RlZCBtZXRob2Qg
YW5kIHdoaWNoIGFkZHMgaW5mb3JtYXRpb24gZnJvbSB0aGUgInRhcmdldCB0eXBlIi48L2xpPgot
CSAqIDwvdWw+Ci0JICogPHA+Ci0JICogQ2xpZW50cyBjYW4gY29udHJvbCB3aGljaCBwYXJ0cyBv
ZiB0aGUgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgYnkgcGFzc2luZyB0aGUgYXBwcm9w
cmlhdGUKLQkgKiBmbGFncyBpbnRvIGFyZ3VtZW50ICdpbmZlcmVuY2VMZXZlbCcuIE9uIGVhY2gg
Y2FsbCBwYXRoIGl0IG11c3QgYmUgZW5zdXJlZCB0aGF0IG9uZSBvciBtb3JlCi0JICogaW52b2Nh
dGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZXMgYXJlIGFsd2F5cyBmb2xsb3dlZCBieSBleGFj
dGx5IG9uZSBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JICogKHVubGVzcyBlcnJvcnMgaGF2
ZSBiZWVuIGRldGVjdGVkKS4KLQkgKiA8L3A+Ci0JICogPHA+Ci0JICogSW5pdGlhbCBjbGllbnRz
IGFyZSB0aGUgZGlyZWN0IGNhbGxlcnMgb2YKLQkgKiB7QGxpbmsgU2NvcGUjY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoTWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLGlu
dCl9LAotCSAqIHdoaWNoIHNob3VsZCBlaXRoZXIgaW52b2tlIGJvdGggbGV2ZWxzIG9mIGluZmVy
ZW5jZSA8ZW0+b3I8L2VtPiBkZWxlZ2F0ZSB0aGUgc2Vjb25kIHBhcnQgdG8KLQkgKiB7QGxpbmsg
U2NvcGUjbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10saW50LFR5cGVC
aW5kaW5nW10sSW52b2NhdGlvblNpdGUsUmVmZXJlbmNlQmluZGluZyl9LAotCSAqIHdoaWNoIGlz
IGludGVuZGVkIHRvIGVuc3VyZSBjb21wbGV0aW5nIHRoZSBpbmZlcmVuY2Ugb24gYWxsIG5vbi1l
cnJvciBleGl0cy4KKwkgKiBJbiAxLjgrIGlmIHRoZSBleHBlY3RlZCB0eXBlIGlzIG5vdCB5ZXQg
YXZhaWxhYmxlIGR1ZSB0byB0aGlzIGNhbGwgYmVpbmcgYW4gYXJndW1lbnQgdG8gYW4gb3V0ZXIg
Y2FsbCB3aGljaCBpcyBub3Qgb3ZlcmxvYWQtcmVzb2x2ZWQgeWV0LAorCSAqIHRoZSByZXR1cm5l
ZCBtZXRob2QgYmluZGluZyB3aWxsIGJlIGEgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZy4KIAkgKiA8L3A+ICAKIAkgKi8KLQlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcg
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAotCQkJSW52b2NhdGlvblNpdGUgaW52
b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhv
ZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAlJbnZvY2F0aW9uU2l0ZSBp
bnZvY2F0aW9uU2l0ZSkKIAl7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9
IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CkBAIC05NSwxMjggKzc1LDM5IEBACiAJCQkv
LyBpbml0aWFsaXplcyB0aGUgbWFwIG9mIHN1YnN0aXR1dGVzICh2YXIgLS0+IHR5cGVbXVtdeyBl
cXVhbCwgZXh0ZW5kcywgc3VwZXJ9CiAJCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmln
aW5hbE1ldGhvZC5wYXJhbWV0ZXJzOwogCi0vLyA9PT09IDEuODogVGhlIG1haW4gZHJpdmVyIGZv
ciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09Ci0JCQlJbmZlcmVuY2VDb250ZXh0
MTggaW5mQ3R4MTggPSBudWxsOwogCQkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9
IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKChpbmZlcmVuY2VM
ZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJVFkpICE9IDApCi0JCQkJCWluZkN0eDE4ID0gaW52b2Nh
dGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKLQkJCQllbHNlIGlmIChpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgb3JpZ2luYWxNZXRob2QgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCi0JCQkJCWluZkN0eDE4ID0g
KChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkuZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaWYgKGlu
ZkN0eDE4ID09IG51bGwpCi0JCQkJCXJldHVybiBvcmlnaW5hbE1ldGhvZDsKLQkJCX0KLQkJCWlm
IChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJdHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlzaW9u
YWxSZXN1bHQgPSBudWxsOwotCQkJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOwotCQkJCQlpZiAo
KGluZmVyZW5jZUxldmVsICYgU2NvcGUuQVBQTElDQUJJTElUWSkgIT0gMCkgeworCQkJaWYgKGNv
bXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQor
CQkJCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KG9yaWdpbmFsTWV0aG9kLCBhcmd1
bWVudHMsIHNjb3BlLCBpbnZvY2F0aW9uU2l0ZSk7CiAKLQkJCQkJCS8vIC0tLS0gMTguNS4xIChB
cHBsaWNhYmlsaXR5KTogLS0tLQotCQkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBvcmlnaW5hbE1l
dGhvZC5pc0NvbnN0cnVjdG9yKCkKLQkJCQkJCQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2Vv
ZiBFeHByZXNzaW9uCi0JCQkJCQkJCSYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQ
b2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpZiAoYXJndW1lbnRzLmxlbmd0
aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgewotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQg
PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIg
cGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJ
CQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9k
LCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZD
dHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51
bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJhcmdzKCkpIHsKLQkJCQkJCQkvLyBjaGVjayBmb3Ig
dmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0eQotCQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlv
blNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJ
CWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJH
OwotCQkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxN
ZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9
IGluZkN0eDE4LnNvbHZlKCk7Ci0JCQkJCQl9Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQg
IT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29sdmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJ
CQkJCWluZkN0eDE4LnN0b3JlZFNvbHV0aW9uID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCQkJ
aW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZ
X0lORkVSUkVEOwotCQkJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5j
ZUV4cHJlc3Npb24pCi0JCQkJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNp
dGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOwotCQkJCQkJfQotCQkJ
CQl9IGVsc2UgewotCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zdG9yZWRTb2x1
dGlvbjsKLQkJCQkJfQotCQkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHko
KTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNv
bHZlKCkKKwkJCS8vIDEuNy0gb25seS4KKwkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJl
bmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7CisJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJG
cm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1l
dGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxs
KQorCQkJCXJldHVybiBudWxsOwogCi0JCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGlu
dm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCQkJCWJvb2xlYW4gaGFzUmV0
dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQg
PSBmYWxzZTsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLklOVk9DQVRJT05fVFlQ
RSkgIT0gMCAvLyByZXF1ZXN0ZWQ/Ci0JCQkJCQkJJiYgKGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8
ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBl
KCkpKSB7IC8vIHBvc3NpYmxlPwotCi0JCQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0
eXBlKTogLS0tLQotCQkJCQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShy
ZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKLQkJ
CQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOwotCQkJCQkJaGFzUmV0dXJuUHJvYmxl
bSB8PSByZXN1bHQgPT0gbnVsbDsKLQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKQotCQkJCQkJ
CXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9y
IHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxs
Ci0JCQkJCX0gZWxzZSB7Ci0JCQkJCQkvLyB3ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0
aW9uIHR5cGUgaW5mZXJlbmNlCi0JCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKLQkJ
CQkJfQotCi0JCQkJCWlmIChyZXN1bHQgIT0gbnVsbCkgewotCQkJCQkJLy8gYXNzZW1ibGUgdGhl
IHNvbHV0aW9uIGV0YzoKLQkJCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTgu
Z2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwotCQkJ
CQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCQkJCi0JCQkJCQkJbWV0aG9kU3Vic3Rp
dHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9ucyk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblByb2Js
ZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0Pwot
CQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Q
cm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKLQkJ
CQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykK
LQkJCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52
b2NhdGlvblR5cGVJbmZlcnJlZCkgewotCQkJCQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCQkJCU51bGxBbm5vdGF0aW9u
TWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRp
b25TaXRlLCBzY29wZSk7Ci0JCQkJCQkJCWluZkN0eDE4LnJlYmluZElubmVyUG9saWVzKHJlc3Vs
dCwgbWV0aG9kU3Vic3RpdHV0ZS5wYXJhbWV0ZXJzKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBw
cm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3Vt
ZW50cyk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQkJCQkJCQlyZXR1
cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJCQlpZiAoaW52b2NhdGlv
blNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKQotCQkJCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZv
Y2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGlu
ZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0IHNvIHdlIGNhbiBmaW5pc2ggbGF0ZXIKLQkJCQkJCQl9
Ci0JCQkJCQkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJ
cmV0dXJuIG51bGw7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7
Ci0JCQkJCS8vIEZJWE1FIHN0b3AtZ2FwIG1lYXN1cmUKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0
ZSk7Ci0JCQkJCXJldHVybiBudWxsOworCQkJLy8gc3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0
byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJzLCBidXQgbnVsbCBhcmd1bWVudHMgZ290IHJlcGxhY2Vk
IHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5hbCB2YXJpYWJsZSBpbiBwYXJhbSBtZXRob2QKKwkJCS8v
IDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCisJCQlpZiAo
aW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKKwkJCQlpZiAo
aW5mZXJlbmNlQ29udGV4dC5pc1VuY2hlY2tlZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tl
ZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcKKwkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRl
eHQuc3Vic3RpdHV0ZXMubGVuZ3RoOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNv
bnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGlu
Z1tsZW5ndGhdLCAwLCBsZW5ndGgpOwogCQkJCX0KLQkJCX0gZWxzZSB7Ci0vLyA9PT09IDEuOCA9
PT09Ci0JCQkJaW5mZXJlbmNlQ29udGV4dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0KG9yaWdpbmFs
TWV0aG9kKTsKLQkJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhz
Y29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29u
dGV4dCk7CisJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGlu
Zy5WT0lEKSB7CisJCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRl
Lmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkg
eworCQkJCQkJLy8gcmVjb3JkIGl0IHdhcyBleHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9wcG9z
ZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0IChzZWUgYmVsb3cpCisJCQkJCQlpbmZlcmVuY2VDb250
ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1ZTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJ
CWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7IC8vIGFzc3VtZSBPYmpl
Y3QgYnkgZGVmYXVsdAorCQkJCQl9CisJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBl
ID0gZXhwZWN0ZWRUeXBlOworCQkJCX0KKwkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vi
c3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwog
CQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCiAJCQkJCXJldHVybiBudWxsOwotCQkJ
CQotCQkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQg
dmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3Jp
Z2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9kCi0JCQkJLy8gMTUuMTIuMi44IC0gaW5mZXJy
aW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1bWVudHMKLQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5o
YXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKLQkJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQu
aXNVbmNoZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUu
MTIuMi43Ci0JCQkJCQlpbnQgbGVuZ3RoID0gaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRlcy5s
ZW5ndGg7Ci0JCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0
ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBs
ZW5ndGgpOwotCQkJCQl9Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0g
VHlwZUJpbmRpbmcuVk9JRCkgewotCQkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52
b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJCQkJCWlmIChleHBlY3RlZFR5
cGUgIT0gbnVsbCkgewotCQkJCQkJCS8vIHJlY29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBjb250
ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93KQotCQkJCQkJ
CWluZmVyZW5jZUNvbnRleHQuaGFzRXhwbGljaXRFeHBlY3RlZFR5cGUgPSB0cnVlOwotCQkJCQkJ
fSBlbHNlIHsKLQkJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgp
OyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKLQkJCQkJCX0KLQkJCQkJCWluZmVyZW5jZUNv
bnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlOwotCQkJCQl9Ci0JCQkJCW1ldGhvZFN1
YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRlLmluZmVyRnJvbUV4cGVjdGVkVHlwZShzY29wZSwg
aW5mZXJlbmNlQ29udGV4dCk7Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCi0J
CQkJCQlyZXR1cm4gbnVsbDsKLQkJCQl9CiAJCQl9CiAJCX0KKwkJCiAKIAkJLyogYm91bmRzIGNo
ZWNrOiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjQyMTU5
LCBJbmZlcnJlZCB0eXBlcyBtYXkgY29udGFpbiBzZWxmIHJlZmVyZW5jZQogCQkgICBpbiBmb3Jt
YWwgYm91bmRzLiBJZiAiVCBleHRlbmRzIEk8VD4iIGlzIGEgb3JpZ2luYWwgdHlwZSB2YXJpYWJs
ZSBhbmQgVCB3YXMgaW5mZXJyZWQgdG8gYmUgSTxUPiBkdWUgcG9zc2libHkKQEAgLTI2Niw2ICsx
NTcsMTAzIEBACiAJCXJldHVybiBtZXRob2RTdWJzdGl0dXRlOwogCX0KIAorCXB1YmxpYyBzdGF0
aWMgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KE1ldGhvZEJpbmRpbmcg
b3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBmaW5hbCBTY29wZSBzY29w
ZSwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJCisJCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJVHlwZVZhcmlh
YmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFyaWFibGVz
OworCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOworCQlUeXBlQmluZGluZ1td
IHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOworCQlpbmZDdHgxOCA9IGlu
dm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7CisJCUNvbXBpbGVyT3B0
aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKKwkJYm9vbGVh
biBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7CisJCQorCQl0cnkgeworCQkJQm91bmRT
ZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOworCQkJQm91bmRTZXQgcmVzdWx0ID0gbnVsbDsK
KwkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTogLS0tLQorCQkJZmluYWwgYm9vbGVh
biBpc1BvbHlFeHByZXNzaW9uID0gaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9u
ICYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5h
bE1ldGhvZCk7CisJCQlib29sZWFuIGlzRGlhbW9uZCA9IGlzUG9seUV4cHJlc3Npb24gJiYgb3Jp
Z2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpOworCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0g
cGFyYW1ldGVycy5sZW5ndGgpIHsKKwkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJl
bmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNo
ZWNraW5nIChzdHJpY3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCisJCQkJaW5mQ3R4
MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRz
LCBpc0RpYW1vbmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlp
ZiAocmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJhcmdzKCkpIHsKKwkJCQkv
LyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0eQorCQkJCWluZkN0eDE4ID0g
aW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3Zl
cgorCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
VkFSQVJHOworCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2lu
YWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5z
b2x2ZSgpOworCQkJfQorCQkJaWYgKHJlc3VsdCA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOwor
CQkJaWYgKGluZkN0eDE4LmlzUmVzb2x2ZWQocmVzdWx0KSkgeworCQkJCWluZkN0eDE4LnN0ZXBD
b21wbGV0ZWQgPSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRDsKKwkJ
CQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQorCQkJ
CQkoKFJlZmVyZW5jZUV4cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kID0g
aW5mQ3R4MTguaW5mZXJlbmNlS2luZDsgICAvLyBDSEVDSworCQkJfSBlbHNlIHsKKwkJCQlyZXR1
cm4gbnVsbDsKKwkJCX0KKwkJCS8vIEFwcGxpY2FiaWxpdHkgc3VjY2VlZGVkLCBwcm9jZWVkIHRv
IGluZmVyIGludm9jYXRpb24gdHlwZSwgaWYgcG9zc2libGUuCisJCQlUeXBlQmluZGluZyBleHBl
Y3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQkJYm9v
bGVhbiBoYXNSZXR1cm5Qcm9ibGVtID0gZmFsc2U7CisJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51
bGwgfHwgIWlzUG9seUV4cHJlc3Npb24gfHwgIWludm9jYXRpb25TaXRlLmdldEV4cHJlc3Npb25D
b250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgeworCQkJCS8vIC0tLS0gMTguNS4yIChJbnZv
Y2F0aW9uIHR5cGUpOiAtLS0tCisJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSByZXN1bHQ7CisJCQkJ
cmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0
ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkJcmVzdWx0ID0g
aW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2Nh
dGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKKwkJCQlpbnZvY2F0aW9uVHlwZUluZmVycmVkID0g
dHJ1ZTsKKwkJCQloYXNSZXR1cm5Qcm9ibGVtIHw9IHJlc3VsdCA9PSBudWxsOworCQkJCWlmICho
YXNSZXR1cm5Qcm9ibGVtKQorCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsgLy8gbGV0
J3MgcHJlZmVyIGEgdHlwZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVybiB0eXBlIG92ZXIgcmVw
b3J0aW5nIG5vIG1hdGNoIGF0IGFsbAorCQkJfQorCQkJaWYgKHJlc3VsdCAhPSBudWxsKSB7CisJ
CQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoKKwkJCQlUeXBlQmluZGluZ1tdIHNvbHV0
aW9ucyA9IGluZkN0eDE4LmdldFNvbHV0aW9ucyh0eXBlVmFyaWFibGVzLCBpbnZvY2F0aW9uU2l0
ZSwgcmVzdWx0KTsKKwkJCQlpZiAoc29sdXRpb25zICE9IG51bGwpIHsKKwkJCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9ucyk7CisJCQkJCWlmIChoYXNSZXR1cm5Qcm9i
bGVtKSB7IC8vIGlsbGVnYWxseSB3b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJlc3VsdD8K
KwkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IGluZkN0eDE4LmdldFJldHVyblBy
b2JsZW1NZXRob2RJZk5lZWRlZChleHBlY3RlZFR5cGUsIG1ldGhvZFN1YnN0aXR1dGUpOworCQkJ
CQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewor
CQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOworCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0
aG9kOworCQkJCQkJfQorCQkJCQl9CisJCQkJCWlmIChpbnZvY2F0aW9uVHlwZUluZmVycmVkKSB7
CisJCQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lz
RW5hYmxlZCkKKwkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0
aW9ucyhtZXRob2RTdWJzdGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOworCQkJCQkJTWV0
aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgo
c2NvcGUsIGFyZ3VtZW50cyk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKSB7CisJ
CQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRo
b2Q7CisJCQkJCQl9CisJCQkJCX0gZWxzZSB7CisJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbmV3
IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcobWV0aG9kU3Vic3RpdHV0ZSk7
CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikK
KwkJCQkJCSgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLnJlZ2lzdGVySW5mZXJlbmNlQ29u
dGV4dChtZXRob2RTdWJzdGl0dXRlLCBpbmZDdHgxOCk7IC8vIGtlZXAgY29udGV4dCBzbyB3ZSBj
YW4gZmluaXNoIGxhdGVyCisJCQkJCXJldHVybiBtZXRob2RTdWJzdGl0dXRlOyAKKwkJCQl9CisJ
CQl9CisJCQlyZXR1cm4gbnVsbDsKKwkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlv
biBlKSB7CisJCQkvLyBGSVhNRSBzdG9wLWdhcCBtZWFzdXJlCisJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoZS5nZXRNZXNzYWdlKCksIGludm9jYXRpb25T
aXRlKTsKKwkJCXJldHVybiBudWxsOworCQl9IGZpbmFsbHkgeworLy8JCQlpZiAoaW52b2NhdGlv
blR5cGVJbmZlcnJlZCAmJiBtZXRob2RTdWJzdGl0dXRlICE9IG51bGwgJiYgbWV0aG9kU3Vic3Rp
dHV0ZS5pc1ZhbGlkQmluZGluZygpICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2Nh
dGlvbikgeworLy8JCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGludm9j
YXRpb25TaXRlOworLy8JCQkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZSA9IGludm9jYXRpb24ucmV0
dXJuVHlwZShvcmlnaW5hbE1ldGhvZCwgc2NvcGUpOworLy8JCQkJVHlwZUJpbmRpbmcgc3Vic3Rp
dHV0ZSA9IGluZkN0eDE4LnN1YnN0aXR1dGUocmV0dXJuVHlwZSk7CisvLwkJCQlpZiAoc3Vic3Rp
dHV0ZSAhPSBtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUpIHsgLy8kSURFTlRJVFktQ09NUEFS
SVNPTiQKKy8vCQkJCQkvLyByZXR1cm4gdHlwZSBoYXMgY2FwdHVyZXMsIHJlY3JlYXRlIGFuZCBt
b2RpZnksIHRoaXMgYmluZGluZyBjYW5ub3QgYmUgY2FjaGVkLgorLy8JCQkJCW1ldGhvZFN1YnN0
aXR1dGUgPSBuZXcgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0
aXR1dGUub3JpZ2luYWxNZXRob2QsIG1ldGhvZFN1YnN0aXR1dGUudHlwZUFyZ3VtZW50cywgc2Nv
cGUuZW52aXJvbm1lbnQoKSk7CisvLwkJCQkJbWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlID0g
c3Vic3RpdHV0ZTsKKy8vCQkJCX0KKy8vCQkJfQorCQl9CisJfQorCQogCU1ldGhvZEJpbmRpbmcg
Ym91bmRDaGVjazE4KFNjb3BlIHNjb3BlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewogCQlT
dWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0gdGhpczsKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0aXR1dGUgPSB0aGlzOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nLmphdmEKaW5kZXggYWQ4ZmExMi4uNGJlOWE3YiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhCkBAIC00Myw2ICs0Myw3
IEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKQEAgLTEyMywxMSArMTI0LDEy
IEBACiAJcHVibGljIGJvb2xlYW4gY2FuQmVJbnN0YW50aWF0ZWQoKSB7CiAJCXJldHVybiAoKHRo
aXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzRGlyZWN0V2lsZGNhcmQpID09IDApICYmIHN1cGVyLmNh
bkJlSW5zdGFudGlhdGVkKCk7IC8vIGNhbm5vdCBpbnN0YW50aWF0ZSBwYXJhbSB0eXBlIHdpdGgg
d2lsZGNhcmQgYXJndW1lbnRzCiAJfQorCQogCS8qKgogCSAqIFBlcmZvcm0gY2FwdHVyZSBjb252
ZXJzaW9uIGZvciBhIHBhcmFtZXRlcml6ZWQgdHlwZSB3aXRoIHdpbGRjYXJkIGFyZ3VtZW50cwog
CSAqIEBzZWUgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmlu
ZGluZyNjYXB0dXJlKFNjb3BlLGludCkKIAkgKi8KLQlwdWJsaWMgVHlwZUJpbmRpbmcgY2FwdHVy
ZShTY29wZSBzY29wZSwgaW50IHBvc2l0aW9uKSB7CisJcHVibGljIFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZyBjYXB0dXJlKFNjb3BlIHNjb3BlLCBpbnQgcG9zaXRpb24pIHsKIAkJaWYgKCh0aGlz
LnRhZ0JpdHMgJiBUYWdCaXRzLkhhc0RpcmVjdFdpbGRjYXJkKSA9PSAwKQogCQkJcmV0dXJuIHRo
aXM7CiAKQEAgLTEzOSw2ICsxNDEsOSBAQAogCQlSZWZlcmVuY2VCaW5kaW5nIGNvbnRleHRUeXBl
ID0gc2NvcGUuZW5jbG9zaW5nU291cmNlVHlwZSgpOwogCQlpZiAoY29udGV4dFR5cGUgIT0gbnVs
bCkgY29udGV4dFR5cGUgPSBjb250ZXh0VHlwZS5vdXRlcm1vc3RFbmNsb3NpbmdUeXBlKCk7IC8v
IG1heWJlIG51bGwgd2hlbiB1c2VkIHByb2dyYW1tYXRpY2FsbHkgYnkgRE9NCiAKKwkJQ29tcGls
YXRpb25Vbml0U2NvcGUgY29tcGlsYXRpb25Vbml0U2NvcGUgPSBzY29wZS5jb21waWxhdGlvblVu
aXRTY29wZSgpOworCQlBU1ROb2RlIGN1ZCA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlLnJlZmVyZW5j
ZUNvbnRleHQ7CisJCQogCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQlU
eXBlQmluZGluZyBhcmd1bWVudCA9IG9yaWdpbmFsQXJndW1lbnRzW2ldOwogCQkJaWYgKGFyZ3Vt
ZW50LmtpbmQoKSA9PSBCaW5kaW5nLldJTERDQVJEX1RZUEUpIHsgLy8gbm8gY2FwdHVyZSBmb3Ig
aW50ZXJzZWN0aW9uIHR5cGVzCkBAIC0xNDYsNyArMTUxLDcgQEAKIAkJCQlpZiAod2lsZGNhcmQu
Ym91bmRLaW5kID09IFdpbGRjYXJkLlNVUEVSICYmIHdpbGRjYXJkLmJvdW5kLmlkID09IFR5cGVJ
ZHMuVF9KYXZhTGFuZ09iamVjdCkKIAkJCQkJY2FwdHVyZWRBcmd1bWVudHNbaV0gPSB3aWxkY2Fy
ZC5ib3VuZDsKIAkJCQllbHNlCi0JCQkJCWNhcHR1cmVkQXJndW1lbnRzW2ldID0gbmV3IENhcHR1
cmVCaW5kaW5nKHdpbGRjYXJkLCBjb250ZXh0VHlwZSwgcG9zaXRpb24sIHNjb3BlLmNvbXBpbGF0
aW9uVW5pdFNjb3BlKCkubmV4dENhcHR1cmVJRCgpKTsKKwkJCQkJY2FwdHVyZWRBcmd1bWVudHNb
aV0gPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZUNhcHR1cmVkV2lsZGNhcmQod2lsZGNhcmQsIGNv
bnRleHRUeXBlLCBwb3NpdGlvbiwgaSwgY3VkLCBjb21waWxhdGlvblVuaXRTY29wZS5uZXh0Q2Fw
dHVyZUlEKCkpOwkKIAkJCX0gZWxzZSB7CiAJCQkJY2FwdHVyZWRBcmd1bWVudHNbaV0gPSBhcmd1
bWVudDsKIAkJCX0KQEAgLTE2MCw3ICsxNjUsNiBAQAogCQl9CiAJCXJldHVybiBjYXB0dXJlZFBh
cmFtZXRlcml6ZWRUeXBlOwogCX0KLQkKIAkvKioKIAkgKiBQZXJmb3JtIGNhcHR1cmUgZGVjb252
ZXJzaW9uIGZvciBhIHBhcmFtZXRlcml6ZWQgdHlwZSB3aXRoIGNhcHR1cmVkIHdpbGRjYXJkIGFy
Z3VtZW50cwogCSAqIEBzZWUgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5UeXBlQmluZGluZyN1bmNhcHR1cmUoU2NvcGUpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjVhYWFlODkKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1BvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAt
MCwwICsxLDE4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAy
MDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAq
CisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKKworcHVibGljIGNsYXNzIFBv
bHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgeyAvLyBjb25mdXNlZCBjaXRpemVuLgorCisJcHVibGljIFBv
bHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nIGFwcGxpY2FibGVNZXRob2QpIHsKKwkJc3VwZXIoYXBwbGljYWJsZU1ldGhv
ZC5vcmlnaW5hbE1ldGhvZCwgYXBwbGljYWJsZU1ldGhvZC50eXBlQXJndW1lbnRzLCBhcHBsaWNh
YmxlTWV0aG9kLmVudmlyb25tZW50KTsKKwl9Cit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BvbHlUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2
YQppbmRleCBmZjAyNzE5Li45YTY3MmZjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlU
eXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEK
QEAgLTM2LDYgKzM2LDExIEBACiAJcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBl
QmluZGluZyBsZWZ0LCBTY29wZSBzY29wZSkgewogCQlyZXR1cm4gdGhpcy52YW5pbGxhQ29tcGF0
aWJpbHR5ID8gdGhpcy5leHByZXNzaW9uLmlzQ29tcGF0aWJsZVdpdGgobGVmdCwgc2NvcGUpIDog
dGhpcy5leHByZXNzaW9uLmlzQm94aW5nQ29tcGF0aWJsZVdpdGgobGVmdCwgc2NvcGUpOwogCX0K
KwkKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBpc1BvbHlUeXBlKCkgeworCQlyZXR1cm4g
dHJ1ZTsKKwl9CiAKIAlwdWJsaWMgY2hhcltdIHF1YWxpZmllZFNvdXJjZU5hbWUoKSB7CiAJCXJl
dHVybiByZWFkYWJsZU5hbWUoKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJl
YXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQppbmRleCAxYmQz
ZGFmLi42Njc2ZDRhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCkBAIC00MCw3ICs0MCw3
IEBACiAJZmluYWwgaW50IE5vblN0YXRpY09yQWxpZW5UeXBlUmVjZWl2ZXIgPSAyMDsKIAlmaW5h
bCBpbnQgQXR0ZW1wdFRvQnlwYXNzRGlyZWN0U3VwZXIgPSAyMTsgLy8gc3VwZXIgYWNjZXNzIHdp
dGhpbiBkZWZhdWx0IG1ldGhvZAogCWZpbmFsIGludCBEZWZlY3RpdmVDb250YWluZXJBbm5vdGF0
aW9uVHlwZSA9IDIyOwotCWZpbmFsIGludCBQYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBl
UHJvYmxlbSA9IDIzOworCWZpbmFsIGludCBJbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUg
PSAyMzsKIAlmaW5hbCBpbnQgQXBwbGljYWJsZU1ldGhvZE92ZXJyaWRkZW5CeUluYXBwbGljYWJs
ZSA9IDI0OwogCWZpbmFsIGludCBDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zID0gMjU7CiAJ
ZmluYWwgaW50IE5vU3VjaE1ldGhvZE9uQXJyYXkgPSAyNjsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBjOWYzZTkw
Li5kMjk5ZmI0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxNyArODcsNiBAQAogCXB1YmxpYyBzdGF0aWMg
ZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNT1JF
X0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9mIHR3byBs
ZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgotCSAqLwot
CS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4LjUuMSku
ICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0JLyoqIFJl
cXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJsaWMgc3Rh
dGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJvdGgge0Bs
aW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGluZmVyZW5j
ZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQUExJQ0FC
SUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVibGljIFNj
b3BlIHBhcmVudDsKIApAQCAtNTUwLDYgKzUzOSwxMCBAQAogCQkJCSAgICAJCQkJCVN5c3RlbS5h
cnJheWNvcHkoZ2xiLCAxLCBzdWJzdGl0dXRlZE90aGVyQm91bmRzID0gbmV3IFR5cGVCaW5kaW5n
W2dsYi5sZW5ndGggLSAxXSwgMCwgZ2xiLmxlbmd0aCAtIDEpOwogCQkJCSAgICAJCQkJfQogCQkJ
CSAgICAJCQl9CisJCQkJICAgICAgICAJfSBlbHNlIHsKKwkJCQkgICAgICAgIAkJLy8gaWYgd2Ug
aW5mZXIgYSB0eXBlIHZhcmlhYmxlIHRvIGJlIGEgY2FwdHVyZSwgdGhhdCBpcyBnb29kIGVub3Vn
aC4gRG9uJ3QgY3JlYXRlIGJvZ3VzIHR5cGVzIGxpa2UgPyBleHRlbmRzIGNhcHR1cmUjMjQgb2Yg
PyBleHRlbmRzIC4uLgorCQkJCSAgICAgICAgCQlpZiAob3JpZ2luYWxCb3VuZC5pc1R5cGVWYXJp
YWJsZSgpICYmIHN1YnN0aXR1dGVkQm91bmQuaXNDYXB0dXJlKCkpCisJCQkJICAgICAgICAJCQly
ZXR1cm4gc3Vic3RpdHV0ZWRCb3VuZDsKIAkJCQkgICAgICAgIAl9CiAJCQkgICAgICAgIAkJcmV0
dXJuIHdpbGRjYXJkLmVudmlyb25tZW50LmNyZWF0ZVdpbGRjYXJkKHdpbGRjYXJkLmdlbmVyaWNU
eXBlLCB3aWxkY2FyZC5yYW5rLCBzdWJzdGl0dXRlZEJvdW5kLCBzdWJzdGl0dXRlZE90aGVyQm91
bmRzLCB3aWxkY2FyZC5ib3VuZEtpbmQsIHdpbGRjYXJkLmdldFR5cGVBbm5vdGF0aW9ucygpKTsK
IAkJCQkgICAgICAgIH0KQEAgLTY5MSwxMCArNjg0LDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9u
bHkKIAkgKiBHaXZlbiBhIG1ldGhvZCwgcmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3Qg
YmUgY29udmVydGVkIHRvIHBhcmFtZXRlcnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRl
ZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5j
ZSBnb3QgdHJpZ2dlcmVkOwotCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBj
b21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBt
ZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJh
Y2suIAogCSAqLwotCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywg
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQly
ZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRp
b25TaXRlLCBpbmZlcmVuY2VMZXZlbCwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RC
aW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBl
QmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJ
cmV0dXJuIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0
aW9uU2l0ZSwgZmFsc2UpOwogCX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcw
Miw4ICs2OTUsNyBAQAogCSAqIFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNh
c2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJl
ZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhl
biBzaW1wbHkgYW5zd2VyIGl0IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGlu
dCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXBy
b3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJ
CVR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5l
cmljVHlwZUFyZ3VtZW50cygpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2Qu
cGFyYW1ldGVyczsKQEAgLTczOCw3ICs3MzAsNyBAQAogCQkJCWFyZ3VtZW50cyA9IG5ld0FyZ3M7
CiAJCQllbHNlICAvLyBlbnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGJlbG93
IGNhbiB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2FsbGVyOiAoVE9ETzog
YWx3YXlzIGNvcHkgYmVmb3JlIHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCiAJCQkJU3lzdGVtLmFy
cmF5Y29weShhcmd1bWVudHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3Ro
XSwgMCwgYXJnTGVuZ3RoKTsKLQkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywg
aW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsKTsKKwkJCW1ldGhvZCA9IFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFy
Z3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUpOwogCQkJaWYgKG1ldGhvZCA9PSBudWxsKSBy
ZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJCQlpZiAoIW1ldGhvZC5pc1ZhbGlkQmluZGlu
ZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBjaGVjayBpc3N1ZSBpcyB0YWtpbmcgcHJlY2Vk
ZW5jZQogCQl9IGVsc2UgaWYgKGdlbmVyaWNUeXBlQXJndW1lbnRzICE9IG51bGwgJiYgY29tcGls
ZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsK
QEAgLTc1NSw3ICs3NDcsNyBAQAogCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVn
YWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKIAkJCQl0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzID0gZmFsc2U7CiAJCX0KLQkJaWYgKChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwxOChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgaW52b2Nh
dGlvblNpdGUpKSA+IE5PVF9DT01QQVRJQkxFKSB7CisJCWlmICgocGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSkg
PiBOT1RfQ09NUEFUSUJMRSkgewogCQkJaWYgKChtZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5u
b3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJLy8gZ2VuZXJhdGUgcG9s
eW1vcnBoaWMgbWV0aG9kCiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5
bW9ycGhpY01ldGhvZChtZXRob2QsIGFyZ3VtZW50cyk7CkBAIC03NjgsMTQ5ICs3NjAsNiBAQAog
CQlpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlVmFyaWFibGVzICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBhcmd1bWVudHMsIFByb2JsZW1SZWFzb25zLlBh
cmFtZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2gpOwogCQlyZXR1cm4gbnVsbDsgLy8gaW5jb21w
YXRpYmxlCi0JfQotCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgo
TWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIHRp
ZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKLQkJamRrMThj
aGVja3M6Ci0JCWlmIChzaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlv
bnMoKS5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJ
SW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIHNpdGU7Ci0JCQlpZiAobWV0aG9k
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJSW5m
ZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgo
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOwotCQkJCWlmIChpbmZD
dHggIT0gbnVsbCkgewotCQkJCQkvLyBpbmZlcmVuY2UgaXMgcmVzcG9uc2libGUsIG5vIG5lZWQg
dG8gcmVjaGVjawotCQkJCQlpZiAoaW5mQ3R4LmlzVmFyQXJncygpKQotCQkJCQkJcmV0dXJuIFZB
UkFSR1NfQ09NUEFUSUJMRTsKLQkJCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCQkJfQotCQkJfQot
CQkJLy8gY29sbGVjdCBpbm5lciBpbnZvY2F0aW9ucyB3aGVyZSB0aGUgb3V0ZXIgZGlkIG5vdCBp
bnZvbHZlIGFueSBpbmZlcmVuY2U6Ci0JCQlFeHByZXNzaW9uW10gaW52b2NhdGlvbkFyZ3VtZW50
cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCQlpZiAoaW52b2NhdGlvbkFyZ3VtZW50cyAh
PSBudWxsKSB7Ci0JCQkJSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIg
PSBpbnZvY2F0aW9uLmlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJaW50IGFyZ0xlbiA9IGlu
dm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOwotCQkJCWJvb2xlYW4gaXNWYXJBcmdzW10gPSBuZXcg
Ym9vbGVhblsxXTsgLy8gZW11bGF0ZSBhbiBpbi1vdXQgcGFyYW1ldGVyIGZvciBjb21wYXRpYmls
aXR5TGV2ZWwxOEZyb21Jbm5lciguLikKLQkJCQlpc1ZhckFyZ3NbMF0gPSBtZXRob2QuaXNWYXJh
cmdzKCkgJiYgYXJnTGVuICE9IG1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aDsgLy8gaWYgc2FtZSBs
ZW5ndGhzLCBpc1ZhckFyZ3MgY2FuIHN0aWxsIGJlIHVwZGF0ZWQgYmVsb3cKLQkJCQlpbnQgbGV2
ZWwgPSBDT01QQVRJQkxFOwotCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnTGVuOyBpKyspIHsK
LQkJCQkJVHlwZUJpbmRpbmcgYXJndW1lbnRUeXBlID0gaSA8IGFyZ3VtZW50cy5sZW5ndGggPyBh
cmd1bWVudHNbaV0gOiBudWxsOyAvLyBsZW5ndGggbWlzbWF0Y2ggbWF5IGhhcHBlbiBmcm9tIENv
ZGVTbmlwcGV0TWVzc2FnZVNlbmQucmVzb2x2ZVR5cGUoKSBpbiB0aGUgaWYgKGFyZ0hhc0Vycm9y
KSBibG9jay4KLQkJCQkJaW50IG5leHRMZXZlbCA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlu
bmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGludm9jYXRpb25Bcmd1bWVudHNbaV0s
IGFyZ3VtZW50VHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCQlpZiAobmV4dExldmVs
ID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJcmV0dXJuIG5leHRMZXZlbDsKLQkJCQkJaWYgKG5l
eHRMZXZlbCA9PSAtMikKLQkJCQkJCWJyZWFrIGpkazE4Y2hlY2tzOwotCQkJCQlsZXZlbCA9IE1h
dGgubWF4KGxldmVsLCAgbmV4dExldmVsKTsKLQkJCQl9Ci0JCQkJcmV0dXJuIGxldmVsOyAvLyBu
ZWl0aGVyIE5PVF9DT01QQVRJQkxFIG5vciB1bmtub3duKC0yKSBzZWVuCi0JCQl9Ci0JCX0KLQkJ
Ly8gZmFsbCBiYWNrIHRvIG9sZCBtZXRob2Q6Ci0JCWJvb2xlYW4gdG9sZXJhdGVJbmZlcmVuY2VW
YXJpYWJsZXMgPSAoKHNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSAmJiAoKFJl
ZmVyZW5jZUV4cHJlc3Npb24pIHNpdGUpLnRyaWFsUmVzb2x1dGlvbik7Ci0JCXJldHVybiBwYXJh
bWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKLQl9Ci0KLQlwcml2YXRl
IGludCBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihNZXRob2RCaW5kaW5nIG1ldGhvZCwg
SW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIEV4cHJlc3Npb24gaW52
b2NBcmcsIFR5cGVCaW5kaW5nIGFyZ1R5cGUsIGludCBhcmdMZW4sIGludCBpLCBib29sZWFuW10g
aXNWYXJBcmdzKQotCXsKLQkJaW50IGNvbXBhdGlibGUgPSBpc1ZhckFyZ3NbMF0gPyBWQVJBUkdT
X0NPTVBBVElCTEUgOiBDT01QQVRJQkxFOwotCQlUeXBlQmluZGluZyByZXNvbHZlZFR5cGUgPSBp
bnZvY0FyZy5yZXNvbHZlZFR5cGU7Ci0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBJbmZlcmVu
Y2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCBpc1ZhckFyZ3Nb
MF0pOwotCQlpZiAoIWlzVmFyQXJnc1swXSAmJiBzaG91bGRUcnlWYXJhcmdzKG1ldGhvZCwgcmVz
b2x2ZWRUeXBlLCB0YXJnZXRUeXBlKSkgewotCQkJaXNWYXJBcmdzWzBdID0gdHJ1ZTsKLQkJCXRh
cmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0
ZXJzLCBpLCB0cnVlKTsKLQkJfQotCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsKQotCQkJcmV0dXJu
IE5PVF9DT01QQVRJQkxFOyAvLyBtaXNtYXRjaGluZyBudW1iZXIgb2YgYXJncyBvciBvdGhlciBz
ZXZlcmUgcHJvYmxlbSBpbnNpZGUgbWV0aG9kIGJpbmRpbmcKLQkJaW50IGxldmVsID0gLTI7IC8v
IGRvbid0IGtub3cKLQkJaWYgKGludm9jQXJnIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiByZXNv
bHZlZFR5cGUgIT0gbnVsbCkgewotCQkJSW52b2NhdGlvbiBpbm5lclBvbHkgPSAoSW52b2NhdGlv
bikgaW52b2NBcmc7Ci0JCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChyZXNv
bHZlZFR5cGUsIHRhcmdldFR5cGUpOwotCQkJaWYgKGxldmVsICE9IE5PVF9DT01QQVRJQkxFKSB7
Ci0JCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhhcmdUeXBlLCByZXNvbHZlZFR5cGUpICYm
IGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCWlubmVySW5mZXJlbmNlSGVscGVy
LnJlZ2lzdGVySW5uZXJSZXN1bHQobWV0aG9kLCByZXNvbHZlZFR5cGUsIGFyZ0xlbiwgaSk7Ci0J
CQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxldmVsKTsKLQkJCX0gZWxzZSB7Ci0JCQkJ
TWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5lclBvbHkuYmluZGluZyhudWxsLCBmYWxz
ZSwgbnVsbCk7IC8vIDEuIHRyeSB3aXRob3V0IHVwZGF0ZQotCQkJCWlmIChpbm5lckJpbmRpbmcg
aW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVyUGFyYW1ldGVyaXplZCA9IChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlubmVyQmluZGluZzsKLQkJCQkJSW5mZXJl
bmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJQb2x5LmdldEluZmVyZW5jZUNvbnRleHQoaW5u
ZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgIWluZkN0eDE4
Lmhhc1Jlc3VsdEZvcih0YXJnZXRUeXBlKSkgewotCQkJCQkJLy8gbm90IGRldGVjdGVkIGFzIGNv
bXBhdGlibGUsIGJlY2F1c2UgaW5mZXJlbmNlIHN0aWxsIG5lZWRzIHRvIGNvbXBsZXRlPwotCQkJ
CQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBlKHRhcmdldFR5cGUpOwotCQkJCQkJTWV0aG9kQmlu
ZGluZyBzb2x1dGlvbiA9IGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUoaW5uZXJQb2x5LCBp
bm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgc29sdXRp
b24uaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlmIChpbm5lclBvbHkudXBkYXRlQmluZGlu
Z3Moc29sdXRpb24sIHRhcmdldFR5cGUpKSB7Ci0JCQkJCQkJCWlmIChpbm5lckluZmVyZW5jZUhl
bHBlciAhPSBudWxsKQotCQkJCQkJCQkJaW5uZXJJbmZlcmVuY2VIZWxwZXIucmVnaXN0ZXJJbm5l
clJlc3VsdChtZXRob2QsIGludm9jQXJnLnJlc29sdmVkVHlwZSwgYXJnTGVuLCBpKTsKLQkJCQkJ
CQl9Ci0JCQkJCQkJaWYgKHNvbHV0aW9uLnJldHVyblR5cGUgIT0gbnVsbCkgewotCQkJCQkJCQls
ZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChzb2x1dGlvbi5yZXR1cm5UeXBlLCB0
YXJnZXRUeXBlKTsKLQkJCQkJCQkJaWYgKGxldmVsICE9IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJ
CQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxldmVsKTsKLQkJCQkJCQl9Ci0JCQkJCQl9
Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUobnVsbCk7Ci0JCQkJCQlyZXR1cm4gTk9U
X0NPTVBBVElCTEU7Ci0JCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNlb2YgQWxsb2Nh
dGlvbkV4cHJlc3Npb24pIHsKLQkJCQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBjb21wYXRpYmxlLCBi
ZWNhdXNlIGl0cyBhIGRpYW1vbmQgd2hvc2UgdHlwZSBoYXNuJ3QgeWV0IGJlZW4gaW5mZXJyZWQ/
Ci0JCQkJCQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSByZXNvbHZlZFR5cGUudHlwZUFy
Z3VtZW50cygpOwotCQkJCQkJaWYgKHR5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlQXJndW1l
bnRzLmxlbmd0aCA9PSAwKSB7Ci0JCQkJCQkJQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxsb2MgPSAo
QWxsb2NhdGlvbkV4cHJlc3Npb24pIGlubmVyUG9seTsKLQkJCQkJCQlpZiAoKGFsbG9jLnR5cGUu
Yml0cyAmIEFTVE5vZGUuSXNEaWFtb25kKSAhPSAwKSB7Ci0JCQkJCQkJCS8vIG5vdC15ZXQtaW5m
ZXJyZWQgZGlhbW9uZDogZXJhc3VyZSBjb21wYXRpYmlsaXR5IHNob3VsZCBzdWZmaWNlLCBkZXRh
aWwgd2lsbCBiZSBjaGVja2VkIHVzaW5nIGluZmVyZW5jZQotCQkJCQkJCQlpZiAocmVzb2x2ZWRU
eXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZS5lcmFzdXJlKCksIHRoaXMpKQotCQkJCQkJ
CQkJcmV0dXJuIGNvbXBhdGlibGU7Ci0JCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJ
CQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9IGVsc2UgaWYgKGlubmVyUG9seSBpbnN0YW5j
ZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgdXBkYXRlZE1l
dGhvZCA9IGlubmVyUG9seS5iaW5kaW5nKHRhcmdldFR5cGUsIGZhbHNlLCBudWxsKTsgLy8gMi4g
dHJ5IHdpdGggdXBkYXRpbmcKLQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QgIT0gaW5uZXJCaW5kaW5n
ICYmIHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QuaXNW
YWxpZEJpbmRpbmcoKSkgewotCQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QuZGVjbGFyaW5nQ2xhc3Mu
aXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkKLQkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZTsK
LQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJCX0gZWxzZSBpZiAodXBkYXRlZE1l
dGhvZC5wcm9ibGVtSWQoKSA9PSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMpIHsKLQkJCQkJCQls
ZXZlbCA9IC0yOyAvLyBuZWl0aGVyIGdvb2Qgbm9yIGJhZCwgYW5zd2VyICJ1bmtub3duIgotCQkJ
CQkJfQotCQkJCQl9Ci0JCQkJfQotCQkJfQotCQl9IGVsc2UgaWYgKGludm9jQXJnLmlzUG9seUV4
cHJlc3Npb24oKSkgewotCQkJaWYgKGludm9jQXJnIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKSB7Ci0JCQkJQ29uZGl0aW9uYWxFeHByZXNzaW9uIGNlID0gKENvbmRpdGlvbmFsRXhw
cmVzc2lvbikgaW52b2NBcmc7Ci0JCQkJaW50IGxldmVsMSA9IGNvbXBhdGliaWxpdHlMZXZlbDE4
RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVlSWZUcnVlLCBh
cmdUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJaWYgKGxldmVsMSA9PSBOT1RfQ09N
UEFUSUJMRSkKLQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCWludCBsZXZlbDIgPSBj
b21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVy
LCBjZS52YWx1ZUlmRmFsc2UsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsKLQkJCQlp
ZiAobGV2ZWwyID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7
Ci0JCQkJcmV0dXJuIE1hdGgubWF4KGxldmVsMSwgbGV2ZWwyKTsKLQkJCX0KLQkJCS8vIExFIG9y
IFJFOgotCQkJaWYgKGludm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykp
Ci0JCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCQlpZiAoIWlzVmFyQXJnc1swXSAmJiBtZXRob2Qu
aXNWYXJhcmdzKCkpIHsgLy8gY2FuJ3QgdXNlIHNob3VsZFRyeVZhcmFyZ3Mgd2l0aG91dCBhIHJl
c29sdmVkVHlwZSwgc28ganVzdCB0cnkgaXQ6Ci0JCQkJaXNWYXJBcmdzWzBdID0gdHJ1ZTsKLQkJ
CQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2QucGFy
YW1ldGVycywgaSwgdHJ1ZSk7Ci0JCQkJaWYgKHRhcmdldFR5cGUgIT0gbnVsbCAmJiBpbnZvY0Fy
Zy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJCQlyZXR1cm4gVkFSQVJH
U19DT01QQVRJQkxFOwotCQkJfQotCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQl9IGVsc2Ug
aWYgKHJlc29sdmVkVHlwZSAhPSBudWxsICYmIHJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygp
KSB7Ci0JCQkvLyBuZWVkIHRvIGhhbmRsZSAibm9ybWFsIiBleHByZXNzaW9ucyB0b28sIHNpbmNl
IG1peGVkIHBvbHkvc3RhbmRhbG9uZSBhcmd1bWVudCBsaXN0cyBtdXN0IGJlIGZ1bGx5IGFuYWx5
emVkLgotCQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChyZXNvbHZlZFR5cGUs
IHRhcmdldFR5cGUpOwotCQl9Ci0JCXJldHVybiBsZXZlbDsKLQl9Ci0KLQlwcml2YXRlIGJvb2xl
YW4gc2hvdWxkVHJ5VmFyYXJncyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmcgcmVz
b2x2ZWRUeXBlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCWlmICghbWV0aG9kLmlzVmFy
YXJncygpKQotCQkJcmV0dXJuIGZhbHNlOwotCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsKQotCQkJ
cmV0dXJuIHRydWU7CS8vIG9mZiByYW5nZQotCQlpZiAodGFyZ2V0VHlwZS5pc0FycmF5VHlwZSgp
ICYmIHJlc29sdmVkVHlwZSAhPSBudWxsICYmICFyZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0
aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCXJldHVybiB0cnVlOwkvLyBub3QgYSBkaXJlY3QgbWF0
Y2ggYnV0IGhvcGUgdG8gaW1wcm92ZQotCQlyZXR1cm4gZmFsc2U7CiAJfQogCiAJLyoqCkBAIC0x
MjY3LDcgKzExMTYsNyBAQAogCQkJbmV4dDoKIAkJCWZvciAoaW50IGkgPSBzdGFydEZvdW5kU2l6
ZTsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5n
ID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRBdChpKTsKLQkJCQlNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5n
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQkJTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlmIChjb21w
YXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxp
ZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGNvbmNyZXRlTWF0Y2hlcyAhPSBudWxsKSB7CkBAIC0x
Mjk3LDggKzExNDYsNiBAQAogCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsgLy8gY2FuIGJlIG51
bGwKIAkJCX0KIAkJCWNvbmNyZXRlTWF0Y2ggPSBjYW5kaWRhdGVzWzBdOwotCQkJLy8gMS44OiBH
aXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41
LjIpOgotCQkJY29uY3JldGVNYXRjaCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNp
dGUsIGNvbmNyZXRlTWF0Y2gsIGFyZ3VtZW50VHlwZXMpOwogCQkJaWYgKGNvbmNyZXRlTWF0Y2gg
IT0gbnVsbCkKIAkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2Vz
KGNvbmNyZXRlTWF0Y2gudGhyb3duRXhjZXB0aW9ucyk7CiAJCQlyZXR1cm4gY29uY3JldGVNYXRj
aDsKQEAgLTEzNzEsNyArMTIxOCw3IEBACiAJCQkJLy8gdGFyZ2V0aW5nIGEgZ2VuZXJpYyBtZXRo
b2QgY291bGQgZmluZCBhbiBleGFjdCBtYXRjaCB3aXRoIHZhcmlhYmxlIHJldHVybiB0eXBlCiAJ
CQkJaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0gbnVsbCkgewog
CQkJCQkvLyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCguLikgd2lsbCByZXR1cm4gYSBQb2x5bW9y
cGhpY01ldGhvZEJpbmRpbmcgaWYgbmVlZGVkCi0JCQkJCWV4YWN0TWV0aG9kID0gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
LCBGVUxMX0lORkVSRU5DRSk7CisJCQkJCWV4YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQl9
IGVsc2UgaWYgKChleGFjdE1ldGhvZC50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1v
cnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJCQkJLy8gZ2VuZXJhdGUgcG9seW1vcnBoaWMgbWV0
aG9kCiAJCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBoaWNNZXRo
b2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwpAQCAtMTc2MywyMiArMTYxMCwxMyBAQAog
CQkJLy8gYXJndW1lbnQgdHlwZSBjb21wYXRpYmlsaXR5IGNoZWNrCiAJCQlmb3IgKGludCBpID0g
MDsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5n
ID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRBdChpKTsKLQkJCQlNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5n
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQkJTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlmIChjb21w
YXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxp
ZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGZvdW5kU2l6ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRo
b2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJ
CQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2aXNpYmxlIG1hdGNoIG5vdwogCQkJCQkJCWlmIChz
ZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCQkJCXJldHVybiBmaW5kRGVmYXVs
dEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGlu
dm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJpbmRp
bmcgW10ge2NvbXBhdGlibGVNZXRob2R9KTsKLS8vID09PT0gMS44OiBGaW5hbGl6ZSB0eXBlIGlu
ZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0KLQkJCQkJCQlNZXRob2RCaW5kaW5nIGlt
cHJvdmVkID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29tcGF0aWJsZU1l
dGhvZCwgYXJndW1lbnRUeXBlcyk7Ci0JCQkJCQkJaWYgKGltcHJvdmVkICE9IG51bGwgJiYgaW1w
cm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQljb21wYXRpYmxlTWV0aG9kID0gaW1w
cm92ZWQ7Ci0JCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQkJcHJvYmxlbU1ldGhvZCA9IGltcHJvdmVk
OwotCQkJCQkJCQljb250aW51ZTsKLQkJCQkJCQl9Ci0vLyA9PT09IDEuOCA9PT09CiAJCQkJCQkJ
dW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNvbXBhdGlibGVNZXRob2QudGhyb3duRXhj
ZXB0aW9ucyk7CiAJCQkJCQkJcmV0dXJuIGNvbXBhdGlibGVNZXRob2Q7CiAJCQkJCQl9CkBAIC0x
ODg3LDggKzE3MjUsNyBAQAogCQkJY2FzZSAxIDoKIAkJCQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFi
c3RyYWN0TWV0aG9kKQogCQkJCQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNl
aXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NI
aWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBNZXRob2RCaW5kaW5nIFtdIHsgY2FuZGlkYXRlc1sw
XSB9KTsKLQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0
c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9u
VHlwZShpbnZvY2F0aW9uU2l0ZSwgY2FuZGlkYXRlc1swXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJ
Y2FuZGlkYXRlID0gY2FuZGlkYXRlc1swXTsKIAkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJ
CQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0
aW9ucyk7CiAJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTIzODAsNyArMjIxNywxMCBAQAogCQl9
CiAJCWlmIChleGFjdE1ldGhvZCA9PSBudWxsIHx8ICFleGFjdE1ldGhvZC5jYW5CZVNlZW5CeShp
bnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQlyZXR1cm4gbnVsbDsKLQkJaWYgKGV4YWN0TWV0aG9k
LmlzVmFyYXJncygpIHx8IGV4YWN0TWV0aG9kLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTICYmIGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkg
PT0gbnVsbCkKKwkJCisJCWZpbmFsIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cyA9IGludm9j
YXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdb
XSB0eXBlVmFyaWFibGVzID0gZXhhY3RNZXRob2QudHlwZVZhcmlhYmxlcygpOworCQlpZiAoZXhh
Y3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUyAmJiAodHlwZUFyZ3VtZW50cyA9PSBudWxsIHx8IHR5cGVBcmd1bWVudHMubGVu
Z3RoICE9IHR5cGVWYXJpYWJsZXMubGVuZ3RoKSkpCiAJCQlyZXR1cm4gbnVsbDsKIAkJCiAJCWlm
IChyZWNlaXZlclR5cGUuaXNBcnJheVR5cGUoKSkgewpAQCAtMjM5NSw2ICsyMjM1LDEwIEBACiAJ
CXsKIAkJCXJldHVybiBlbnZpcm9ubWVudCgpLmNyZWF0ZUdldENsYXNzTWV0aG9kKHJlY2VpdmVy
VHlwZSwgZXhhY3RNZXRob2QsIHRoaXMpOwogCQl9CisJCQorCQlpZiAodHlwZVZhcmlhYmxlcyAh
PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSAKKwkJCXJldHVybiBlbnZpcm9ubWVudCgpLmNy
ZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4YWN0TWV0aG9kLCB0eXBlQXJndW1lbnRz
KTsKKwkKIAkJcmV0dXJuIGV4YWN0TWV0aG9kOwogCX0KIAkJCkBAIC0yNDE3LDE5ICsyMjYxLDI2
IEBACiAJCU1ldGhvZEJpbmRpbmcgZXhhY3RDb25zdHJ1Y3RvciA9IG51bGw7CiAJCXVuaXRTY29w
ZS5yZWNvcmRUeXBlUmVmZXJlbmNlKHJlY2VpdmVyVHlwZSk7CiAJCU1ldGhvZEJpbmRpbmdbXSBt
ZXRob2RzID0gcmVjZWl2ZXJUeXBlLmdldE1ldGhvZHMoVHlwZUNvbnN0YW50cy5JTklUKTsKKwkJ
ZmluYWwgVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRl
LmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRo
b2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQlNZXRob2RCaW5kaW5nIGNvbnN0cnVj
dG9yID0gbWV0aG9kc1tpXTsKIAkJCWlmICghY29uc3RydWN0b3IuY2FuQmVTZWVuQnkoaW52b2Nh
dGlvblNpdGUsIHRoaXMpKQogCQkJCWNvbnRpbnVlOwogCQkJaWYgKGNvbnN0cnVjdG9yLmlzVmFy
YXJncygpKQogCQkJCXJldHVybiBudWxsOwotCQkJaWYgKGNvbnN0cnVjdG9yLnR5cGVWYXJpYWJs
ZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGludm9jYXRpb25TaXRlLmdlbmVy
aWNUeXBlQXJndW1lbnRzKCkgPT0gbnVsbCkKKwkJCWlmIChjb25zdHJ1Y3Rvci50eXBlVmFyaWFi
bGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBnZW5lcmljVHlwZUFyZ3VtZW50
cyA9PSBudWxsKQogCQkJCXJldHVybiBudWxsOwogCQkJaWYgKGV4YWN0Q29uc3RydWN0b3IgPT0g
bnVsbCkgewogCQkJCWV4YWN0Q29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjsKIAkJCX0gZWxzZSB7
CiAJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJZmluYWwgVHlwZVZhcmlhYmxlQmluZGlu
Z1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdENvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMoKTsKKwkJ
aWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeworCQkJaWYg
KHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IGdlbmVyaWNUeXBlQXJndW1lbnRzLmxlbmd0aCkKKwkJ
CQlyZXR1cm4gbnVsbDsKKwkJCWV4YWN0Q29uc3RydWN0b3IgPSBlbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4YWN0Q29uc3RydWN0b3IsIGdlbmVyaWNUeXBl
QXJndW1lbnRzKTsKIAkJfQogCQlyZXR1cm4gZXhhY3RDb25zdHJ1Y3RvcjsKIAl9CkBAIC0yNDU4
LDcgKzIzMDksNyBAQAogCQkJaWYgKG1ldGhvZEJpbmRpbmcgIT0gbnVsbCAmJiBtZXRob2RCaW5k
aW5nLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkgewogCQkJICAgIC8vIHRhcmdl
dGluZyBhIG5vbiBnZW5lcmljIGNvbnN0cnVjdG9yIHdpdGggdHlwZSBhcmd1bWVudHMgPwogCQkJ
ICAgIGlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpICE9IG51bGwpCi0J
CQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5k
aW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0UpOworCQkJ
ICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGlu
ZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCXJldHVybiBtZXRob2RCaW5k
aW5nOwogCQkJfQogCQkJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0
TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQsIGFyZ3VtZW50VHlwZXMubGVuZ3RoKTsKQEAgLTI0
NzIsNyArMjMyMyw3IEBACiAJCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJCU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IG51bGw7CiAJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0g
bWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJCU1ldGhvZEJpbmRpbmcgY29t
cGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5k
aW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ld
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRo
b2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygp
KQogCQkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9k
OwpAQCAtMjQ5NSw4ICsyMzQ2LDcgQEAKIAkJCQkJdmlzaWJsZVt2aXNpYmxlSW5kZXgrK10gPSBt
ZXRob2Q7CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDEpIHsKLQkJCQkvLyAxLjg6IEdp
dmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUu
Mik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2li
bGVbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVybiB2aXNpYmxlWzBdOwogCQkJfQogCQkJ
aWYgKHZpc2libGVJbmRleCA9PSAwKQogCQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRp
bmcoCkBAIC0yNzYwLDcgKzI2MTAsNyBAQAogCQkJCQkJCQlpZiAoZm91bmRQcm9ibGVtID09IG51
bGwpCiAJCQkJCQkJCQlmb3VuZFByb2JsZW0gPSBwb3NzaWJsZTsgLy8gYW5zd2VyIGFzIGVycm9y
IGNhc2UgbWF0Y2gKIAkJCQkJCQl9IGVsc2UgaWYgKHBvc3NpYmxlLmlzU3RhdGljKCkpIHsKLQkJ
CQkJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QocG9zc2libGUsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklM
SVRZKTsKKwkJCQkJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QocG9zc2libGUsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsK
IAkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQkJCQkJaWYgKGNv
bXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJCQkJCWlmIChjb21wYXRp
YmxlTWV0aG9kLmNhbkJlU2VlbkJ5KHVuaXRTY29wZS5mUGFja2FnZSkpIHsKQEAgLTM1OTYsOCAr
MzQ0Niw4IEBACiAJCQlmb3IgKGludCBpID0gKG9uZVBhcmFtc0xlbmd0aCA+IHR3b1BhcmFtc0xl
bmd0aCA/IHR3b1BhcmFtc0xlbmd0aCA6IG9uZVBhcmFtc0xlbmd0aCkgLSAyOyBpID49IDA7IGkt
LSkKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKG9uZVBhcmFtc1tpXSwgdHdvUGFyYW1z
W2ldKSAmJiAhb25lUGFyYW1zW2ldLmlzQ29tcGF0aWJsZVdpdGgodHdvUGFyYW1zW2ldKSkKIAkJ
CQkJcmV0dXJuIGZhbHNlOwotCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChvbmUs
IHR3b1BhcmFtcywgdHJ1ZSwgZmFsc2UpID09IE5PVF9DT01QQVRJQkxFCi0JCQkJCSYmIHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBhcmFtcywgdHJ1ZSwgZmFsc2UpID09IFZB
UkFSR1NfQ09NUEFUSUJMRSkKKwkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwob25l
LCB0d29QYXJhbXMsIHRydWUpID09IE5PVF9DT01QQVRJQkxFCisJCQkJCSYmIHBhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBhcmFtcywgdHJ1ZSkgPT0gVkFSQVJHU19DT01QQVRJ
QkxFKQogCQkJCXJldHVybiB0cnVlOwogCQl9CiAJCXJldHVybiBmYWxzZTsKQEAgLTQzNzIsNDQg
KzQyMjIsMTIgQEAKIAlwcm90ZWN0ZWQgZmluYWwgTWV0aG9kQmluZGluZyBtb3N0U3BlY2lmaWNN
ZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmdbXSB2aXNpYmxlLCBpbnQgdmlzaWJsZVNpemUsIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlv
blNpdGUsIFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CiAKIAkJYm9vbGVhbiBpc0pk
azE4ID0gY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfODsKLQotCQkvLyBjb21tb24gcGFydCBmb3IgYWxsIGNvbXBsaWFuY2UgbGV2ZWxzOgog
CQlpbnRbXSBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3IGludFt2aXNpYmxlU2l6ZV07Ci0JCWlu
dCBjb21wYXRpYmxlQ291bnQgPSAwOwotCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2libGVTaXpl
OyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSBhcmd1bWVudFR5cGVzOwotCQkJ
aWYgKGlzSmRrMTggJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0J
CQkJSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSAoKEludm9jYXRp
b24paW52b2NhdGlvblNpdGUpLmlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJaWYgKGlubmVy
SW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCWFyZ1R5cGVzID0gaW5uZXJJbmZlcmVuY2VI
ZWxwZXIuZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZSh2aXNpYmxlW2ldLCBhcmd1bWVudFR5
cGVzKTsKLQkJCX0KLQkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmdUeXBlcykpICE9IE5PVF9DT01QQVRJQkxF
KSB7Ci0JCQkJaWYgKGkgIT0gY29tcGF0aWJsZUNvdW50KSB7Ci0JCQkJCXZpc2libGVbY29tcGF0
aWJsZUNvdW50XSA9IHZpc2libGVbaV07Ci0JCQkJCWNvbXBhdGliaWxpdHlMZXZlbHNbY29tcGF0
aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNbaV07Ci0JCQkJfQotCQkJCWNvbXBhdGli
bGVDb3VudCsrOwotCQkJfQotCQl9Ci0vLyBUT0RPOiBEaXNhYmxlZCwgYmVjYXVzZSB3ZSBrbm93
IGEgc2l0dWF0aW9uIHdoZXJlIHRoaXMgaXMgZXhwZWN0ZWQsIHNlZSBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvNDI5NDkwCi0vLwkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkg
ewotLy8JCQlwcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlUHJvYmxlbSgiKFJlY292
ZXJlZCkgSW50ZXJuYWwgaW5jb25zaXN0ZW5jeSB3aGlsZSBjaGVja2luZyBpbnZvY2F0aW9uIGFt
YmlndWl0eSIsIGludm9jYXRpb25TaXRlLCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5nKTsgLy8k
Tk9OLU5MUy0xJAotLy8JCX0KLQkJaWYgKGNvbXBhdGlibGVDb3VudCA9PSAwKSB7Ci0JCQlyZXR1
cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0uc2VsZWN0b3IsIGFyZ3VtZW50
VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKLQkJfSBlbHNlIGlmIChjb21wYXRpYmxl
Q291bnQgPT0gMSkgewotCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZlckludm9jYXRp
b25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKLQkJCWlm
IChjYW5kaWRhdGUgIT0gbnVsbCkKLQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5
cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKLQkJCXJldHVybiBjYW5k
aWRhdGU7Ci0JCX0KLQkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkgewotCQkJ
U3lzdGVtLmFycmF5Y29weSh2aXNpYmxlLCAwLCB2aXNpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdb
dmlzaWJsZVNpemUgPSBjb21wYXRpYmxlQ291bnRdLCAwLCBjb21wYXRpYmxlQ291bnQpOwotCQkJ
U3lzdGVtLmFycmF5Y29weShjb21wYXRpYmlsaXR5TGV2ZWxzLCAwLCBjb21wYXRpYmlsaXR5TGV2
ZWxzID0gbmV3IGludFtjb21wYXRpYmxlQ291bnRdLCAwLCBjb21wYXRpYmxlQ291bnQpOwotCQl9
CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykKKwkJCWNvbXBhdGliaWxp
dHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJn
dW1lbnRUeXBlcyk7CisJCQogCQkKIAkJTWV0aG9kQmluZGluZ1tdIG1vcmVTcGVjaWZpYyA9IG5l
dyBNZXRob2RCaW5kaW5nW3Zpc2libGVTaXplXTsKLQogCQlpZiAoaXNKZGsxOCkgewogCQkJLy8g
MTUuMTIuMi41IENob29zaW5nIHRoZSBNb3N0IFNwZWNpZmljIE1ldGhvZAogCQkJaW50IGNvdW50
ID0gMDsKQEAgLTQ0NjMsNyArNDI4MSw3IEBACiAJCQlpZiAoY291bnQgPT0gMCkgewogCQkJCXJl
dHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXSwgdmlzaWJsZVswXS5zZWxl
Y3RvciwgdmlzaWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMpOwog
CQkJfSBlbHNlIGlmIChjb3VudCA9PSAxKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUg
PSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBtb3JlU3BlY2lmaWNbMF0sIGFy
Z3VtZW50VHlwZXMpOworCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gbW9yZVNwZWNpZmlj
WzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJY29tcGlsYXRpb25Vbml0U2Nv
cGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJ
CQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ1MTYsNyArNDMzNCw3IEBACiAJCQkJCQkJfQogCQkJ
CQkJfQogCQkJCQkJTWV0aG9kQmluZGluZyBhY2NlcHRhYmxlID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kVG9UZXN0LCB0aWVicmVha01ldGhvZC5wYXJhbWV0ZXJzLAotCQkJCQkJCQl0
aWVCcmVha0ludm9jYXRpb25TaXRlLCBJTlZPQ0FUSU9OX1RZUEUsIGxldmVsID09IFZBUkFSR1Nf
Q09NUEFUSUJMRSk7CisJCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlvblNpdGUsIGxldmVsID09IFZB
UkFSR1NfQ09NUEFUSUJMRSk7CiAJCQkJCQkvKiBUaGVyZSBhcmUgNCBjaG9pY2VzIHRvIGNvbnNp
ZGVyIHdpdGggY3VycmVudCAmIG5leHQgOgogCQkJCQkJIGZvbyhCKSAmIGZvbyhBKSB3aGVyZSBC
IGV4dGVuZHMgQQogCQkJCQkJIDEuIHRoZSAyIG1ldGhvZHMgYXJlIGVxdWFsIChib3RoIGFjY2Vw
dCBlYWNoIG90aGVycyBwYXJhbWV0ZXJzKSAtPiB3YW50IHRvIGNvbnRpbnVlCkBAIC00NTQwLDgg
KzQzNTgsNyBAQAogCQkJaWYgKGNvdW50ID09IDEpIHsKIAkJCQlmb3IgKGludCBpID0gMDsgaSA8
IHZpc2libGVTaXplOyBpKyspIHsKIAkJCQkJaWYgKG1vcmVTcGVjaWZpY1tpXSAhPSBudWxsKSB7
Ci0JCQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3Rh
bmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGlu
ZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbaV0sIGFyZ3VtZW50VHlw
ZXMpOworCQkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSB2aXNpYmxlW2ldOwogCQkJCQkJ
aWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVj
b3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCQkJcmV0
dXJuIGNhbmRpZGF0ZTsKQEAgLTQ2NjIsOCArNDQ3OSw3IEBACiAJCQkJaWYgKG1vc3RTcGVjaWZp
Y0V4Y2VwdGlvbnMgIT0gbnVsbCAmJiBtb3N0U3BlY2lmaWNFeGNlcHRpb25zICE9IGN1cnJlbnQu
dGhyb3duRXhjZXB0aW9ucykgewogCQkJCQlyZXR1cm4gbmV3IE1vc3RTcGVjaWZpY0V4Y2VwdGlv
bk1ldGhvZEJpbmRpbmcoY3VycmVudCwgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyk7CiAJCQkJfQot
CQkJCS8vIDEuODogQmVmb3JlIHJldHVybmluZyBnaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBw
ZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCXJldHVybiBpbmZlckludm9j
YXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjdXJyZW50LCBhcmd1bWVudFR5cGVzKTsKKwkJCQly
ZXR1cm4gY3VycmVudDsKIAkJCX0KIAkJfQogCkBAIC00NzI4LDkgKzQ1NDQsOSBAQAogCX0KIAog
CXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0
aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewotCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UpOworCQlyZXR1cm4g
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSk7CiAJ
fQkKLQlwdWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RCaW5kaW5n
IG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJh
cmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgeworCXB1Ymxp
YyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
KSB7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwogCQlp
bnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJaW50IGFyZ0xlbmd0aCA9IGFy
Z3VtZW50cy5sZW5ndGg7CkBAIC00NzYyLDE0ICs0NTc4LDE0IEBACiAJCQkJVHlwZUJpbmRpbmcg
cGFyYW0gPSBwYXJhbWV0ZXJzW2xhc3RJbmRleF07IC8vIGlzIGFuIEFycmF5QmluZGluZyBieSBk
ZWZpbml0aW9uCiAJCQkJVHlwZUJpbmRpbmcgYXJnID0gYXJndW1lbnRzW2xhc3RJbmRleF07CiAJ
CQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSkgewotCQkJCQlsZXZlbCA9
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5n
VmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQkJbGV2ZWwg
PSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQkJaWYgKGxldmVsID09IE5PVF9DT01QQVRJQkxFKSB7CiAJ
CQkJCQkvLyBleHBlY3QgWFtdLCBpcyBpdCBjYWxsZWQgd2l0aCBYCiAJCQkJCQlwYXJhbSA9ICgo
QXJyYXlCaW5kaW5nKSBwYXJhbSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQlpZiAodGllYnJlYWtp
bmdWYXJhcmdzTWV0aG9kcykgewogCQkJCQkJCWFyZyA9ICgoQXJyYXlCaW5kaW5nKSBhcmcpLmVs
ZW1lbnRzVHlwZSgpOwogCQkJCQkJfQotCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzKSA9PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCWlmIChwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7
CiAJCQkJCQlsZXZlbCA9IFZBUkFSR1NfQ09NUEFUSUJMRTsgLy8gdmFyYXJncyBzdXBwb3J0IG5l
ZWRlZAogCQkJCQl9CkBAIC00Nzc5LDcgKzQ1OTUsNyBAQAogCQkJCQlUeXBlQmluZGluZyBwYXJh
bSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbWV0ZXJzW2xhc3RJbmRleF0pLmVsZW1lbnRzVHlwZSgp
OwogCQkJCQlmb3IgKGludCBpID0gbGFzdEluZGV4OyBpIDwgYXJnTGVuZ3RoOyBpKyspIHsKIAkJ
CQkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09
IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50
c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKLQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
cGFyYW0sIGFyZykgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVu
diwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMp
ID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJh
bSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0
aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJCQlyZXR1
cm4gTk9UX0NPTVBBVElCTEU7CiAJCQkJCX0KIAkJCQl9ICBlbHNlIGlmIChsYXN0SW5kZXggIT0g
YXJnTGVuZ3RoKSB7IC8vIGNhbiBjYWxsIGZvbyhpbnQgaSwgWCAuLi4geCkgd2l0aCBmb28oMSkg
YnV0IE5PVCBmb28oKTsKQEAgLTQ3OTUsNyArNDYxMSw3IEBACiAJCQlUeXBlQmluZGluZyBwYXJh
bSA9IHBhcmFtZXRlcnNbaV07CiAJCQlUeXBlQmluZGluZyBhcmcgPSAodGllYnJlYWtpbmdWYXJh
cmdzTWV0aG9kcyAmJiAoaSA9PSAoYXJnTGVuZ3RoIC0gMSkpKSA/ICgoQXJyYXlCaW5kaW5nKWFy
Z3VtZW50c1tpXSkuZWxlbWVudHNUeXBlKCkgOiBhcmd1bWVudHNbaV07CiAJCQlpZiAoVHlwZUJp
bmRpbmcubm90RXF1YWxzKGFyZyxwYXJhbSkpIHsKLQkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyk7CisJCQkJaW50IG5ld0xldmVsID0g
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcyk7CiAJCQkJaWYgKG5ld0xldmVsID09IE5PVF9DT01QQVRJQkxFKQogCQkJ
CQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJCQkJaWYgKG5ld0xldmVsID4gbGV2ZWwpCkBAIC00
ODI0LDcgKzQ2NDAsNyBAQAogCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJfQogCQotCXByaXZh
dGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChUeXBlQmluZGluZyBhcmcsIFR5cGVC
aW5kaW5nIHBhcmFtLCBMb29rdXBFbnZpcm9ubWVudCBlbnYsIGJvb2xlYW4gdGllQnJlYWtpbmdW
YXJhcmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgeworCXBy
aXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChUeXBlQmluZGluZyBhcmcsIFR5
cGVCaW5kaW5nIHBhcmFtLCBMb29rdXBFbnZpcm9ubWVudCBlbnYsIGJvb2xlYW4gdGllQnJlYWtp
bmdWYXJhcmdzTWV0aG9kcykgewogCQkvLyBvbmx5IGNhbGxlZCBpZiBlbnYub3B0aW9ucy5zb3Vy
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81CiAJCWlmIChhcmcgPT0gbnVsbCB8
fCBwYXJhbSA9PSBudWxsKQogCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwpAQCAtNDg0MywxMSAr
NDY1OSw2IEBACiAJCQlUeXBlQmluZGluZyBjb252ZXJ0ZWRUeXBlID0gZW52LmNvbXB1dGVCb3hp
bmdUeXBlKGFyZyk7CiAJCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKGNvbnZlcnRlZFR5
cGUsIHBhcmFtKSB8fCBjb252ZXJ0ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgocGFyYW0sIHRoaXMp
KQogCQkJCXJldHVybiBBVVRPQk9YX0NPTVBBVElCTEU7Ci0JCX0KLQkJaWYgKHRvbGVyYXRlSW5m
ZXJlbmNlVmFyaWFibGVzICYmICghYXJnLmlzUHJvcGVyVHlwZShmYWxzZSkgfHwgIXBhcmFtLmlz
UHJvcGVyVHlwZShmYWxzZSkpKSB7Ci0JCQkvLyBkdXJpbmcgdHlwZSBpbmZlcmVuY2UgaW52b2x2
aW5nIGEgUmVmZXJlbmNlRXhwcmVzc2lvbiBpZ25vcmUgaW5jb21wYXRpYmlsaXR5IGR1ZSB0byBh
biBpbmZlcmVuY2UgdmFyaWFibGUsCi0JCQkvLyBrbm93aW5nIHRoYXQgd2Ugd2lsbCBwcm9kdWNl
IGNvbnN0cmFpbnRzIHRoYXQgd2lsbCBlbnN1cmUgY29tcGF0aWJsZSBpbnN0YW50aWF0aW9uIChp
ZiBvbmUgZXhpc3RzKS4KLQkJCXJldHVybiBDT01QQVRJQkxFOyAKIAkJfQogCQlyZXR1cm4gTk9U
X0NPTVBBVElCTEU7CiAJfQpAQCAtNDkzMyw3ICs0NzQ0LDcgQEAKIAkgICB0aGF0IGNvdWxkIGlu
c3RlYWQgYmUgaW52b2tlZCB3aXRoIGlkZW50aWNhbCByZXN1bHRzLiBSZXR1cm4gbnVsbCBpZiBu
byBjb21wYXRpYmxlLCB2aXNpYmxlLCBtb3N0IHNwZWNpZmljIG1ldGhvZAogCSAgIGNvdWxkIGJl
IGZvdW5kLiBUaGlzIG1ldGhvZCBpcyBtb2RlbGVkIGFmdGVyIFNjb3BlLmdldENvbnN0cnVjdG9y
IGFuZCBTY29wZS5nZXRNZXRob2QuCiAJICovCi0JcHVibGljIE1ldGhvZEJpbmRpbmcgZ2V0U3Rh
dGljRmFjdG9yeSAoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZl
cmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVu
dFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uIGFsbG9jYXRpb25TaXRlKSB7CisJcHVibGljIE1ldGhv
ZEJpbmRpbmcgZ2V0U3RhdGljRmFjdG9yeSAoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9j
YXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwgVHlwZUJp
bmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBhbGxvY2F0aW9uU2l0
ZSkgewogCQkKIAkJLy8gYWxsb2NhdGlvblR5cGUgaXMgdGhlIGRpYW1vbmQgdHlwZS4gb3JpZ2lu
YWxFbmNsb3NpbmdUeXBlIGlzIHRoZSByZWFsIGVuY2xvc2luZyB0eXBlID09PiBtYXkgYmUgcGFy
YW1ldGVyaXplZCwgcGFyYW1ldGVyaXplZCB3aXRoIG93biB0eXBlIHZhcmlhYmxlcywgcmF3LCBq
dXN0IHBsYWluIHR5cGUgb3IgbnVsbC4KIAkJaW50IGNsYXNzVHlwZVZhcmlhYmxlc0FyaXR5ID0g
MDsKQEAgLTUwNjAsNyArNDg3MSw3IEBACiAJCU1ldGhvZEJpbmRpbmdbXSBjb21wYXRpYmxlID0g
bmV3IE1ldGhvZEJpbmRpbmdbc2ZpXTsKIAkJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJCWZv
ciAoaW50IGkgPSAwOyBpIDwgc2ZpOyBpKyspIHsKLQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJs
ZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHN0YXRpY0ZhY3Rvcmllc1tpXSwgYXJn
dW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJTWV0aG9kQmlu
ZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFj
dG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSk7CiAJCQlpZiAoY29tcGF0
aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJp
bmRpbmcoKSkKIAkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxl
TWV0aG9kOwpAQCAtNTA2OSwxMCArNDg4MCw2IEBACiAKIAkJaWYgKGNvbXBhdGlibGVJbmRleCA9
PSAwKSB7CiAJCQlyZXR1cm4gbnVsbDsKLQkJfQotCQlpZiAoY29tcGF0aWJsZUluZGV4ID09IDEp
IHsKLQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFu
ZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCWNvbXBhdGlibGVbMF0gPSBpbmZlckludm9jYXRpb25U
eXBlKGFsbG9jYXRpb25TaXRlLCBjb21wYXRpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKIAkJfQog
CQlyZXR1cm4gY29tcGF0aWJsZUluZGV4ID09IDEgPyBjb21wYXRpYmxlWzBdIDogbW9zdFNwZWNp
ZmljTWV0aG9kQmluZGluZyhjb21wYXRpYmxlLCBjb21wYXRpYmxlSW5kZXgsIGFyZ3VtZW50VHlw
ZXMsIGFsbG9jYXRpb25TaXRlLCBhbGxvY2F0aW9uVHlwZSk7CiAJfQpAQCAtNTE0MCwzMSArNDk0
Nyw1IEBACiAJCQkJYnJlYWs7CiAJCQl9CiAJCX0KLQl9Ci0KLQkvKioKLQkgKiBHaXZlbiBhIHNl
bGVjdGVkIGFwcGxpY2FibGUgbWV0aG9kLCBjaGVjayBpZiBpdCBoYXMgYW4gdW5maW5pc2hlZCBJ
bmZlcmVuY2VDb250ZXh0MTggYXNzb2NpYXRlZC4KLQkgKiBJZiBzbyBwZXJmb3JtIHRoZSBvdXRz
dGFuZGluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIGFuZCByZXR1cm4gdGhlIGltcHJvdmVk
IG1ldGhvZCwKLQkgKiBvdGhlcndpc2UgcmV0dXJuIHRoZSBhcHBsaWNhYmxlIG1ldGhvZCB1bmNo
YW5nZWQuCi0JICovCi0JcHJvdGVjdGVkIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlw
ZShJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0aG9kQmluZGluZyBhcHBsaWNhYmxl
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMpIHsKLQkJaWYgKGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9j
YXRpb24pIGludm9jYXRpb25TaXRlOwotCQkJaWYgKGFwcGxpY2FibGUgaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIGFwcGxpY2FibGU7Ci0JCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0
eDE4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRNZXRob2Qp
OwotCQkJCWlmIChpbmZDdHgxOCAhPSBudWxsICYmICFpbmZDdHgxOC5oYXNSZXN1bHRGb3IoaW52
b2NhdGlvbi5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpKSkgewotCQkJCQlyZXR1cm4gaW5mQ3R4MTgu
aW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzLCBwYXJhbWV0ZXJp
emVkTWV0aG9kKTsKLQkJCQl9Ci0JCQl9IGVsc2UgewotCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlF
eHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRpb24sIGFwcGxpY2FibGUsIGFyZ3VtZW50VHlwZXMs
IHRoaXMpOwotCQkJfQotCQl9IGVsc2UgaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgUmVm
ZXJlbmNlRXhwcmVzc2lvbikgewotCQkJaWYgKGFwcGxpY2FibGUgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCi0JCQkJYXBwbGljYWJsZSA9IGFwcGxpY2FibGUu
c2hhbGxvd09yaWdpbmFsKCk7Ci0JCQlpZiAoYXBwbGljYWJsZS50eXBlVmFyaWFibGVzKCkgIT0g
QmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykKLQkJCQlyZXR1cm4gUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGFwcGxpY2FibGUsIGFyZ3Vt
ZW50VHlwZXMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7Ci0JCX0KLQkJ
cmV0dXJuIGFwcGxpY2FibGU7CiAJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBl
QmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4IGMzZjYz
ZmIuLjY2NzI0MDAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKQEAgLTc0MCw2ICs3NDAsMTEgQEAK
IHB1YmxpYyBib29sZWFuIGlzUHJvcGVyVHlwZShib29sZWFuIGFkbWl0Q2FwdHVyZTE4KSB7CiAJ
cmV0dXJuIHRydWU7CiB9CisKK3B1YmxpYyBib29sZWFuIGlzUG9seVR5cGUoKSB7CisJcmV0dXJu
IGZhbHNlOworfQorCiAvKioKICAqIFN1YnN0aXR1dGUgYWxsIG9jY3VycmVuY2VzIG9mICd2YXIn
IHdpdGhpbiB0aGUgY3VycmVudCB0eXBlIGJ5ICdzdWJzdGl0dXRlVHlwZS4KICAqIEBwYXJhbSB2
YXIgYW4gaW5mZXJlbmNlIHZhcmlhYmxlIChKTFM4IDE4LjEuMSkKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvVHlwZVN5c3RlbS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlU3lzdGVtLmphdmEK
aW5kZXggMzg4N2ZlMy4uYzI1NGEwMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlU3lz
dGVtLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlU3lzdGVtLmphdmEKQEAgLTE1LDYgKzE1
LDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWw7CiAKQEAgLTMzNyw2ICszMzgsMzcgQEAK
IAkJcmV0dXJuIChXaWxkY2FyZEJpbmRpbmcpICh0aGlzLnR5cGVzW3dpbGRjYXJkLmlkID0gdGhp
cy50eXBlaWQrK11bMF0gPSB3aWxkY2FyZCk7CiAJfQogCQorCS8vIE5vIG5lZWQgZm9yIGFuIG92
ZXJyaWRlIGluIEFUUywgc2luY2Ugd2UgYXJlIGRlYWxpbmcgd2l0aCByZWNhcHR1cmVzIGhlcmUu
CisJcHVibGljIGZpbmFsIENhcHR1cmVCaW5kaW5nIGdldENhcHR1cmVkV2lsZGNhcmQoV2lsZGNh
cmRCaW5kaW5nIHdpbGRjYXJkLCBSZWZlcmVuY2VCaW5kaW5nIGNvbnRleHRUeXBlLCBpbnQgcG9z
aXRpb24sIGludCB0eXBlQXJndW1lbnRJbmRleCwgQVNUTm9kZSBjdWQsIGludCBpZCkgeworCQkK
KwkJV2lsZGNhcmRCaW5kaW5nIHVuYW5ub3RhdGVkV2lsZGNhcmQgPSAoV2lsZGNhcmRCaW5kaW5n
KSBnZXRVbmFubm90YXRlZFR5cGUod2lsZGNhcmQpOworCQlUeXBlQmluZGluZ1tdIGRlcml2ZWRU
eXBlcyA9IHRoaXMudHlwZXNbdW5hbm5vdGF0ZWRXaWxkY2FyZC5pZF07ICAvLyBieSBjb25zdHJ1
Y3Rpb24sIGNhY2hlZEluZm8gIT0gbnVsbCBub3cuCisJCWludCBpLCBsZW5ndGggPSBkZXJpdmVk
VHlwZXMubGVuZ3RoOworCQlmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCVR5cGVC
aW5kaW5nIGRlcml2ZWRUeXBlID0gZGVyaXZlZFR5cGVzW2ldOworCQkJaWYgKGRlcml2ZWRUeXBl
ID09IG51bGwpIAorCQkJCWJyZWFrOworCQkJaWYgKCFkZXJpdmVkVHlwZS5pc0NhcHR1cmUoKSkK
KwkJCQljb250aW51ZTsKKwkJCUNhcHR1cmVCaW5kaW5nIHByaW9yID0gKENhcHR1cmVCaW5kaW5n
KSBkZXJpdmVkVHlwZTsKKwkJCWlmIChwcmlvci5zb3VyY2VUeXBlICE9IGNvbnRleHRUeXBlIHx8
IHByaW9yLnBvc2l0aW9uICE9IHBvc2l0aW9uIHx8IHByaW9yLmN1ZCAhPSBjdWQgfHwgcHJpb3Iu
dHlwZUFyZ3VtZW50SW5kZXggIT0gdHlwZUFyZ3VtZW50SW5kZXgpIC8vJElERU5USVRZLUNPTVBB
UklTT04kCisJCQkJY29udGludWU7CisJCQlyZXR1cm4gcHJpb3I7CisJCX0KKwkJCisJCWlmIChp
ID09IGxlbmd0aCkgeworCQkJU3lzdGVtLmFycmF5Y29weShkZXJpdmVkVHlwZXMsIDAsIGRlcml2
ZWRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGggKiAyXSwgMCwgbGVuZ3RoKTsKKwkJCXRo
aXMudHlwZXNbdW5hbm5vdGF0ZWRXaWxkY2FyZC5pZF0gPSBkZXJpdmVkVHlwZXM7CisJCX0KKwkJ
VHlwZUJpbmRpbmcgY2FwdHVyZSA9IGRlcml2ZWRUeXBlc1tpXSA9IG5ldyBDYXB0dXJlQmluZGlu
Zyh3aWxkY2FyZCwgY29udGV4dFR5cGUsIHBvc2l0aW9uLCB0eXBlQXJndW1lbnRJbmRleCwgY3Vk
LCBpZCk7CisJCisJCWludCB0eXBlc0xlbmd0aCA9IHRoaXMudHlwZXMubGVuZ3RoOworCQlpZiAo
dGhpcy50eXBlaWQgPT0gdHlwZXNMZW5ndGgpCisJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMudHlw
ZXMsIDAsIHRoaXMudHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbdHlwZXNMZW5ndGggKiAyXVtdLCAw
LCB0eXBlc0xlbmd0aCk7CisJCXRoaXMudHlwZXNbdGhpcy50eXBlaWRdID0gbmV3IFR5cGVCaW5k
aW5nWzFdOworCQlyZXR1cm4gKENhcHR1cmVCaW5kaW5nKSAodGhpcy50eXBlc1tjYXB0dXJlLmlk
ID0gdGhpcy50eXBlaWQrK11bMF0gPSBjYXB0dXJlKTsKKwl9CisJCiAJcHVibGljIFdpbGRjYXJk
QmluZGluZyBnZXRXaWxkY2FyZChSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlLCBpbnQgcmFu
aywgVHlwZUJpbmRpbmcgYm91bmQsIFR5cGVCaW5kaW5nW10gb3RoZXJCb3VuZHMsIGludCBib3Vu
ZEtpbmQsIEFubm90YXRpb25CaW5kaW5nW10gYW5ub3RhdGlvbnMpIHsKIAkJcmV0dXJuIGdldFdp
bGRjYXJkKGdlbmVyaWNUeXBlLCByYW5rLCBib3VuZCwgb3RoZXJCb3VuZHMsIGJvdW5kS2luZCk7
CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmEKaW5kZXggYmM1ZGRlOS4uZWI3Y2U3NyAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1dpbGRjYXJkQmluZGluZy5qYXZhCkBAIC02MjQsNiArNjI0LDggQEAKIAkJfQog
CQloYXZlU3Vic3RpdHV0aW9uIHw9IGN1cnJlbnRPdGhlckJvdW5kcyAhPSBudWxsOwogCQlpZiAo
aGF2ZVN1YnN0aXR1dGlvbikgeworCQkJaWYgKGN1cnJlbnRPdGhlckJvdW5kcyA9PSBudWxsICYm
IHRoaXMuYm91bmQuaXNUeXBlVmFyaWFibGUoKSkKKwkJCQlyZXR1cm4gY3VycmVudEJvdW5kOwog
CQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlV2lsZGNhcmQodGhpcy5nZW5lcmljVHlw
ZSwgdGhpcy5yYW5rLCBjdXJyZW50Qm91bmQsIGN1cnJlbnRPdGhlckJvdW5kcywgdGhpcy5ib3Vu
ZEtpbmQpOwogCQl9CiAJCXJldHVybiB0aGlzOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0v
UHJvYmxlbVJlcG9ydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2
YQppbmRleCA5M2ZjMDhjLi4yMTUyOGIyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9i
bGVtUmVwb3J0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2
YQpAQCAtMzY5Miw3ICszNjkyLDcgQEAKIAkJCQlzb3VyY2VTdGFydCwKIAkJCQlzb3VyY2VFbmQp
OwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RF
eHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9jYXRpb25UeXBl
SW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBjb25zdHJ1Y3Qgc3VpdGFi
bGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3NSkKIAkJCXByb2JsZW1D
b25zdHJ1Y3RvciA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgdGFyZ2V0Q29uc3RydWN0b3I7CiAJ
CQlzaG93bkNvbnN0cnVjdG9yID0gcHJvYmxlbUNvbnN0cnVjdG9yLmNsb3Nlc3RNYXRjaDsKQEAg
LTQyMjQsNyArNDIyNCw3IEBACiAJCQkJKGludCkgKG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3Np
dGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbik7
CiAJCQlyZXR1cm47Ci0JCWNhc2UgUHJvYmxlbVJlYXNvbnMuUGFyYW1ldGVyaXplZE1ldGhvZEV4
cGVjdGVkVHlwZVByb2JsZW06CisJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJ
bmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhhbik6IGNvbnN0cnVjdCBzdWl0YWJs
ZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQogCQkJcHJvYmxlbU1l
dGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0aG9kOwogCQkJSW5mZXJlbmNlQ29udGV4
dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9ibGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQ7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9ldmFsL0NvZGVTbmlwcGV0QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBw
ZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDYyM2JjMzUuLjRmMGVhMmIgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBw
ZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC0yNCw3ICsyNCw2IEBACiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BbGxvY2F0aW9uRXhwcmVzc2lvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNhc3RFeHByZXNz
aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVz
c2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LklubmVy
SW5mZXJlbmNlSGVscGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CkBAIC0xOTAsNyAr
MTg5LDYgQEAKIAkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOwogCQlpbnQgbGVuZ3RoID0g
dGhpcy5hcmd1bWVudHMubGVuZ3RoOwogCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5n
W2xlbmd0aF07Ci0JCVR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZTsKIAkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW5ndGg7IGkrKykgewogCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1l
bnRzW2ldOwogCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKQEAg
LTE5OCwxMiArMTk2LDggQEAKIAkJCQlhcmdzQ29udGFpbkNhc3QgPSB0cnVlOwogCQkJfQogCQkJ
YXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCWlm
ICgoYXJndW1lbnRUeXBlID0gYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBl
KHNjb3BlKSkgPT0gbnVsbCkgeworCQkJaWYgKChhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQu
cmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7CiAJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwot
CQkJfQotCQkJaWYgKGFyZ3VtZW50VHlwZSAhPSBudWxsICYmIGFyZ3VtZW50VHlwZS5raW5kKCkg
PT0gQmluZGluZy5QT0xZX1RZUEUpIHsKLQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9PSBudWxsKQotCQkJCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5m
ZXJlbmNlSGVscGVyKCk7CiAJCQl9CiAJCX0KIAkJaWYgKGFyZ0hhc0Vycm9yKSB7CkBAIC0yMjgs
NyArMjIyLDcgQEAKIAkKIAlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRlZFR5cGUgPSAoUmVmZXJl
bmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7CiAJdGhpcy5iaW5kaW5nID0gZmluZENvbnN0
cnVjdG9yQmluZGluZyhzY29wZSwgdGhpcywgYWxsb2NhdGVkVHlwZSwgYXJndW1lbnRUeXBlcyk7
Ci0KKwkKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CQogCQlpZiAodGhp
cy5iaW5kaW5nIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcKIAkJCSYmICgoUHJvYmxl
bU1ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykucHJvYmxlbUlkKCkgPT0gTm90VmlzaWJsZSkg
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldE1lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0TWVz
c2FnZVNlbmQuamF2YQppbmRleCAxZjJhNGQzLi5hYjcwN2JkIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlw
cGV0TWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0TWVzc2FnZVNlbmQuamF2YQpAQCAt
MjMsNyArMjMsNiBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkNhc3RFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LklubmVySW5mZXJlbmNlSGVscGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuTWVzc2FnZVNlbmQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5OYW1lUmVmZXJlbmNlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CkBAIC0xOTUs
NzMgKzE5NCw3MiBAQAogcHVibGljIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUg
c2NvcGUpIHsKIAkvLyBBbnN3ZXIgdGhlIHNpZ25hdHVyZSByZXR1cm4gdHlwZQogCS8vIEJhc2Ug
dHlwZSBwcm9tb3Rpb24KLQotCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7
Ci0JYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxzZSwgYXJnc0NvbnRhaW5DYXN0ID0gZmFsc2U7
Ci0JaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQl0aGlz
LnJlY2VpdmVyLmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNo
ZWNrIGxhdGVyIG9uCi0JCXJlY2VpdmVyQ2FzdCA9IHRydWU7Ci0JfQotCXRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5yZXNvbHZlVHlwZShzY29wZSk7Ci0JaWYgKHJlY2Vp
dmVyQ2FzdCAmJiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7Ci0JCSAvLyBkdWUg
dG8gY2hhbmdlIG9mIGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRl
bnRpdHkgY2FzdCBzaG91bGQgYmUgbm90aWZpZWQKLQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0Vx
dWFscygoKENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRU
eXBlLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLnVubmVjZXNzYXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7CisJCisJ
aWYgKHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CisJCXRoaXMuY29u
c3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0g
ZmFsc2U7CisJCWlmICh0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsK
KwkJCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8v
IHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJCXJlY2VpdmVyQ2FzdCA9IHRydWU7CiAJCX0KLQl9Ci0J
Ly8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkK
LQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMu
dHlwZUFyZ3VtZW50cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8g
dHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCi0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdGhpcy50eXBlQXJn
dW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0g
bnVsbCkgewotCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJdGhpcy5hY3R1YWxSZWNlaXZlclR5
cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJaWYgKHJlY2VpdmVyQ2Fz
dCAmJiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7CisJCQkvLyBkdWUgdG8gY2hh
bmdlIG9mIGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkg
Y2FzdCBzaG91bGQgYmUgbm90aWZpZWQKKwkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMo
KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwg
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
dW5uZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKIAkJCX0KIAkJ
fQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9y
IGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBu
dWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCWJv
b2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJ
CQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJ
CQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJaWYgKCh0aGlzLmdlbmVy
aWNUeXBlQXJndW1lbnRzW2ldID0gdGhpcy50eXBlQXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNj
b3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJv
ciA9IHRydWU7CisJCQkJfQorCQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJcmV0dXJu
IG51bGw7CisJCQl9CisJCX0KKwkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFy
ZSByZXNvbHZlZAorCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJYm9vbGVhbiBh
cmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCWludCBs
ZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspIHsKKwkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkJ
aWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQu
Yml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIg
b24KKwkJCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVu
dC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICgodGhp
cy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKQorCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQl9CisJCQlpZiAoYXJnSGFz
RXJyb3IpIHsKKwkJCQlpZih0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVy
ZW5jZUJpbmRpbmcpIHsKKwkJCQkJLy8gcmVjb3JkIGFueSBzZWxlY3RvciBtYXRjaCwgZm9yIGNs
aWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNo
CisJCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcp
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIG5ldyBUeXBlQmluZGluZ1td
e30sIHRoaXMsIGZhbHNlKTsKKwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJ
aWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID09IG51bGwpIHsKKwkJCXJldHVybiBudWxsOwor
CQl9CisJCS8vIGJhc2UgdHlwZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQorCQlpZiAodGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUuaXNCYXNlVHlwZSgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0
aGlzLmFyZ3VtZW50VHlwZXMpOwogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9Ci0JLy8gd2lsbCBj
aGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAotCVR5cGVCaW5kaW5nW10gYXJn
dW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKLQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCkgewotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7IC8vIHR5cGVDaGVja3Mg
YWxsIGFyZ3VtZW50cwotCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQlh
cmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCVR5cGVCaW5kaW5nIGFy
Z3VtZW50VHlwZTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJRXhw
cmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3VtZW50IGlu
c3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVV
bm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFyZ3NDb250
YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJ
TlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKChhcmd1bWVudFR5cGUgPSBhcmd1bWVudFR5cGVz
W2ldID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKQotCQkJ
CWFyZ0hhc0Vycm9yID0gdHJ1ZTsKLQkJCWlmIChhcmd1bWVudFR5cGUgIT0gbnVsbCAmJiBhcmd1
bWVudFR5cGUua2luZCgpID09IEJpbmRpbmcuUE9MWV9UWVBFKSB7Ci0JCQkJaWYgKHRoaXMuaW5u
ZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJfQotCQl9Ci0JCWlmIChhcmdIYXNF
cnJvcikgewotCQkJaWYodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVu
Y2VCaW5kaW5nKSB7Ci0JCQkJLy8gcmVjb3JkIGFueSBzZWxlY3RvciBtYXRjaCwgZm9yIGNsaWVu
dHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0J
CQkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZyl0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgbmV3IFR5cGVCaW5kaW5nW117fSwg
dGhpcywgZmFsc2UpOwotCQkJfQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KKwlUeXBlQmluZGluZyBt
ZXRob2RUeXBlID0gZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUpOworCWlmIChtZXRob2RUeXBlICE9
IG51bGwgJiYgbWV0aG9kVHlwZS5pc1BvbHlUeXBlKCkpIHsKKwkJdGhpcy5yZXNvbHZlZFR5cGUg
PSB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7
CisJCXJldHVybiBtZXRob2RUeXBlOwogCX0KLQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUg
PT0gbnVsbCkgewotCQlyZXR1cm4gbnVsbDsKLQl9Ci0JLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNl
aXZlIGFueSBtZXNzYWdlCi0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUo
KSkgewotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJuIG51bGw7Ci0J
fQotCi0JZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUsIGFyZ3VtZW50VHlwZXMpOwogCQkKIAlpZiAo
IXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZwpAQCAtMjgxLDE0ICsyNzksMTQgQEAKIAkJCUNv
ZGVTbmlwcGV0U2NvcGUgbG9jYWxTY29wZSA9IG5ldyBDb2RlU25pcHBldFNjb3BlKHNjb3BlKTsK
IAkJCU1ldGhvZEJpbmRpbmcgcHJpdmF0ZUJpbmRpbmcgPQogCQkJCXRoaXMucmVjZWl2ZXIgaW5z
dGFuY2VvZiBDb2RlU25pcHBldFRoaXNSZWZlcmVuY2UgJiYgKChDb2RlU25pcHBldFRoaXNSZWZl
cmVuY2UpIHRoaXMucmVjZWl2ZXIpLmlzSW1wbGljaXQKLQkJCQkJPyBsb2NhbFNjb3BlLmdldElt
cGxpY2l0TWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKXRoaXMuZGVsZWdhdGVUaGlzLnR5cGUsIHRo
aXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpCi0JCQkJCTogbG9jYWxTY29wZS5nZXRN
ZXRob2QodGhpcy5kZWxlZ2F0ZVRoaXMudHlwZSwgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBl
cywgdGhpcyk7CisJCQkJCT8gbG9jYWxTY29wZS5nZXRJbXBsaWNpdE1ldGhvZCgoUmVmZXJlbmNl
QmluZGluZyl0aGlzLmRlbGVnYXRlVGhpcy50eXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHRoaXMpCisJCQkJCTogbG9jYWxTY29wZS5nZXRNZXRob2QodGhpcy5kZWxlZ2F0
ZVRoaXMudHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJ
CWlmICghcHJpdmF0ZUJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCWlmICh0aGlzLmJp
bmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJCQlpZiAodGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CiAJCQkJCQl0aGlzLmJpbmRp
bmcuZGVjbGFyaW5nQ2xhc3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZl
clR5cGU7CiAJCQkJCX0gZWxzZSB7IC8vIHJlYWxseSBiYWQgZXJyb3IgLi4uLgotCQkJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFy
Z3VtZW50VHlwZXMpOwogCQkJCQkJcmV0dXJuIG51bGw7CiAJCQkJCX0KIAkJCQl9CkBAIC0zMDIs
NyArMzAwLDcgQEAKIAkJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBS
ZWZlcmVuY2VCaW5kaW5nKSB7CiAJCQkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IChS
ZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZTsKIAkJCQl9IGVsc2UgeyAv
LyByZWFsbHkgYmFkIGVycm9yIC4uLi4KLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJy
b3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBl
cyk7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywg
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJCQkJCXJldHVy
biBudWxsOwogCQkJCX0KIAkJCX0KQEAgLTMyNiw3ICszMjQsNyBAQAogCQkJfQkJCQogCQl9CiAJ
fQotCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc2NvcGUsIHRoaXMucmVjZWl2ZXIsIHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCBhcmd1
bWVudFR5cGVzLCBhcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2NhdGlv
bkFyZ3VtZW50cyhzY29wZSwgdGhpcy5yZWNlaXZlciwgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUs
IHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcy5h
cmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLlVuY2hlY2tl
ZDsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNj
b3BlLmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNj
b3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAt
Mzk2LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5l
dyBQcm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJl
YXNvbnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsK
LQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3Bl
LkZVTExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0g
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52
b2NhdGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5n
ID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdb
XSBjb21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBj
b21wYXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxl
bmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAh
PSBudWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0
aG9kOwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXgg
PT0gMSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0
c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2li
bGVbMF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0
aWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL1NpZ25h
dHVyZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvU2lnbmF0dXJlLmphdmEKaW5kZXggMzM5YWY3Yy4uNmJiMmIwZCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvU2lnbmF0dXJlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUv
U2lnbmF0dXJlLmphdmEKQEAgLTEwNTcsNyArMTA1Nyw3IEBACiAgKiBhbHRob3VnaCBtb3JlIGVm
ZmljaWVudCBmb3IgY2FsbGVycyB3aXRoIGNoYXJhY3RlciBhcnJheXMgcmF0aGVyIHRoYW4gc3Ry
aW5ncy4KICAqIElmIHRoZSB0eXBlIG5hbWUgaXMgcXVhbGlmaWVkLCB0aGVuIGl0IGlzIGV4cGVj
dGVkIHRvIGJlIGRvdC1iYXNlZC4KICAqCi0gKiBAcGFyYW0gdHlwZU5hbWUgdGhlIHBvc3NpYmx5
IHF1YWxpZmllZCB0eXBlIG5hbWUKKyAqIEBwYXJhbSB0eXBlTmFtZSB0aGUgcG9zc2libHkgcXVh
bGlmaWVkIHR5cGUgY2FwbmFtZQogICogQHBhcmFtIGlzUmVzb2x2ZWQgPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIHR5cGUgbmFtZSBpcyB0byBiZSBjb25zaWRlcmVkCiAgKiAgIHJlc29sdmVkIChm
b3IgZXhhbXBsZSwgYSB0eXBlIG5hbWUgZnJvbSBhIGJpbmFyeSBjbGFzcyBmaWxlKSwgYW5kCiAg
KiAgIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgdHlwZSBuYW1lIGlzIHRvIGJlIGNvbnNpZGVy
ZWQgdW5yZXNvbHZlZA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247501</attachid>
            <date>2014-09-30 15:36:00 -0400</date>
            <delta_ts>2014-10-03 16:36:36 -0400</delta_ts>
            <desc>More closer to home - Revised patch</desc>
            <filename>WIP.patch</filename>
            <type>text/plain</type>
            <size>216033</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggZmU4NmRlMC4uMDQ1ZGVmMiAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MjAsMTAgKzYyMCwxNSBAQAogCQkiLS0tLS0tLS0tLVxuIiArIAog
CQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0
ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwgU2V0OjpuZXcpO1xuIiArIAorCQkiCSAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZm9vKFNPVVJDRSwg
REVTVCkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAo
bnVsbCwgU2V0OjpuZXcpXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8
WT4pIGZvbyhudWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRo
aXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAK
KwkJIjUuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9z
dGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3Rh
bnRpYXRlIHRoZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM1LDEyIEBACiAJCSIJXl5e
Xl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0
ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3Vt
ZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIg
KyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGlu
ZSA1KVxuIiArIAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJ
CSIJYWRkQXR0cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0
ZSwgXCJcIiksXG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3Qg
Y29udmVydCBmcm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJp
YnV0ZTxUPlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5q
YXZhIChhdCBsaW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmli
dXRlLmdldERlZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUg
bWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVz
dCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2Fw
dHVyZSMzLW9mID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NiwxMSBA
QAogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0
KVxuIiArIAogCQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVD
YXBhY2l0eSkpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+
PigoKSAtPiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4o
KCkgLT4gbmV3IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJD
YW5ub3QgbWFrZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVx
dWVDYXBhY2l0eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9u
c1Rlc3QuamF2YQppbmRleCBlNGYwOWExLi4xMTI3MmMwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lv
bnNUZXN0LmphdmEKQEAgLTUxNTMsNiArNTE1MywxMSBAQAogCQkJCSItLS0tLS0tLS0tXG4iICsg
CiAJCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkJCSIJbmV3IFgo
KS5mb28oKCktPnt9KTtcbiIgKyAKKwkJCQkiCSAgICAgICAgXl5eXG4iICsgCisJCQkJIlRoZSBt
ZXRob2QgZm9vKEk8VD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBh
cmd1bWVudHMgKCgpIC0+IHt9KVxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJIjQu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkJCSIJbmV3IFgoKS5mb28oKCkt
Pnt9KTtcbiIgKyAKIAkJCQkiCSAgICAgICAgICAgIF5eXl5cbiIgKyAKIAkJCQkiVGhlIHRhcmdl
dCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBpcyBub3QgYSB3ZWxsIGZvcm1lZCBwYXJhbWV0ZXJp
emVkIHR5cGUgZHVlIHRvIGJvdW5kKHMpIG1pc21hdGNoXG4iICsgCiAJCQkJIi0tLS0tLS0tLS1c
biIpOwpAQCAtNjg2OCw2ICs2ODczLDExIEBACiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCSIJZmluYWwgT3B0aW9uYWw8SW50
ZWdlcj4gbWluID0gZW1wdHkubWluQnkoKGEsIGIpIC0+IGEgLSBiKTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXlxuIiArIAorCQkiVGhlIG1ldGhv
ZCBtaW5CeShGdW5jdGlvbjxJbnRlZ2VyLEM+KSBpbiB0aGUgdHlwZSBZPEludGVnZXI+IGlzIG5v
dCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoPG5vIHR5cGU+IGEsIDxubyB0eXBlPiBi
KSAtPiB7fSlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJIglmaW5hbCBPcHRpb25hbDxJbnRlZ2VyPiBtaW4gPSBl
bXB0eS5taW5CeSgoYSwgYikgLT4gYSAtIGIpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXlxuIiArIAogCQkiTGFtYmRh
IGV4cHJlc3Npb25cJ3Mgc2lnbmF0dXJlIGRvZXMgbm90IG1hdGNoIHRoZSBzaWduYXR1cmUgb2Yg
dGhlIGZ1bmN0aW9uYWwgaW50ZXJmYWNlIG1ldGhvZCBhcHBseShJbnRlZ2VyKVxuIiArIAogCQki
LS0tLS0tLS0tLVxuIiwKQEAgLTg1MjQsMTAgKzg1MzQsMTAgQEAKIAkJCSIgICAgaWYoXCIxXCIg
PT0gXCJcIikgeyByZXR1cm4gc3RyZWFtLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSkuc3Ry
ZWFtKCk7IC8vIEVSUk9SXG4iICsKIAkJCSIgICAgfVxuIiArCiAJCQkiICAgIHJldHVybiBzdHJl
YW0uY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgpKTsgLy8gTk8gRVJST1JcbiIgKwotCQkJIiAg
fVxuIiArCisJCQkiICAgICAgfVxuIiArCiAJCQkiICBwcml2YXRlIHN0YXRpYyB2b2lkIHdpdGhX
aWxkY2FyZChTdHJlYW08PyBleHRlbmRzIFN0cmluZz4gZGlzdGluY3QpIHtcbiIgKwogCQkJIiAg
ICBkaXN0aW5jdC5mb3JFYWNoKHMxIC0+IFN5c3RlbS5vdXQucHJpbnRsbihzMSkpOyAvLyBob3Zl
ciBvbiBzOiBOT1QgT0tcbiIgKwotCQkJIiAgfVxuIiArCisJCQkiICAgIH1cbiIgKwogCQkJIiAg
cHJpdmF0ZSBzdGF0aWMgdm9pZCB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4gZGlzdGlu
Y3QpIHtcbiIgKwogCQkJIiAgICBkaXN0aW5jdC5mb3JFYWNoKHMyIC0+IFN5c3RlbS5vdXQucHJp
bnRsbihzMikpOyAvLyBob3ZlciBvbiBzOiBPa1xuIiArCiAJCQkiICB9XG4iICsKQEAgLTkxMzcs
NyArOTE0Nyw3IEBACiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKIAkJ
IglGdW5jdGlvbjxDTDxJbnRlZ2VyPiwgU3RyaW5nPiB2NSA9IENMOjptZXRob2QxO1xuIiArIAog
CQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5cbiIgKyAK
LQkJIlRoZSB0eXBlIENMIGRvZXMgbm90IGRlZmluZSBtZXRob2QxKENMPEludGVnZXI+KSB0aGF0
IGlzIGFwcGxpY2FibGUgaGVyZVxuIiArIAorCQkiQ2Fubm90IG1ha2UgYSBzdGF0aWMgcmVmZXJl
bmNlIHRvIHRoZSBub24tc3RhdGljIG1ldGhvZCBtZXRob2QxKENMKSBmcm9tIHRoZSB0eXBlIENM
XG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKIAkJIgl2NSA9IHQgLT4gdC5tZXRob2QxKCk7CVxuIiArIApAQCAtOTY1OSwx
MiArOTY2OSw3IEBACiAJCQkiCX1cbiIgKwogCQkJIn1cbiIgCiAJfSwKLQkiLS0tLS0tLS0tLVxu
IiArIAotCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCi0JIglCaW5hcnlP
cGVyYXRvcjxTdWJzdW1lcjw/IHN1cGVyIFQ+PiBhdHRlbXB0X1hfMyA9IFN1YnN1bWVyOjphbmRU
aGUzO1xuIiArIAotCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCSJUaGUgdHlwZSBTdWJzdW1lciBkb2Vz
IG5vdCBkZWZpbmUgYW5kVGhlMyhTdWJzdW1lcjxjYXB0dXJlIzUtb2YgPyBzdXBlciBUPiwgU3Vi
c3VtZXI8Y2FwdHVyZSM1LW9mID8gc3VwZXIgVD4pIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4i
ICsgCi0JIi0tLS0tLS0tLS1cbiIpOworCSIiKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBuZXN0ZWQg
bGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMKIHB1YmxpYyB2b2lkIHRl
c3Q0Mzk1OTQoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2Rl
bC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxN1Rlc3QuamF2YQppbmRleCA0YTdmZDc5Li5j
NjFlZjRlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEKQEAgLTg5NCwxMiArODk0LDEw
IEBACiAJCQogCQlTdHJpbmcgZXJyb3IgPSAiTGFtYmRhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2Vk
IG9ubHkgYXQgc291cmNlIGxldmVsIDEuOCBvciBhYm92ZVxuIiArIAogCQkJCSJMYW1iZGEgZXhw
cmVzc2lvbnMgYXJlIGFsbG93ZWQgb25seSBhdCBzb3VyY2UgbGV2ZWwgMS44IG9yIGFib3ZlXG4i
ICsgCi0JCQkJIlRoZSBtZXRob2QgZm9vKFguU3RyaW5nVG9JbnQpIGluIHRoZSB0eXBlIFggaXMg
bm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKChTdHJpbmcgcykgLT4ge30pXG4iICsg
CiAJCQkJIkxhbWJkYSBleHByZXNzaW9ucyBhcmUgYWxsb3dlZCBvbmx5IGF0IHNvdXJjZSBsZXZl
bCAxLjggb3IgYWJvdmVcbiIgKyAKIAkJCQkiTGFtYmRhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2Vk
IG9ubHkgYXQgc291cmNlIGxldmVsIDEuOCBvciBhYm92ZVxuIiArIAotCQkJCSJUaGUgbWV0aG9k
IGJhcihYLlJlZHVjZUludCkgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoKGludCB4LCBpbnQgeSkgLT4ge30pXG4iICsgCiAJCQkJIkxhbWJkYSBleHBy
ZXNzaW9ucyBhcmUgYWxsb3dlZCBvbmx5IGF0IHNvdXJjZSBsZXZlbCAxLjggb3IgYWJvdmUiOwot
CQlhc3NlcnRQcm9ibGVtc1NpemUodW5pdCwgNywgZXJyb3IpOworCQlhc3NlcnRQcm9ibGVtc1Np
emUodW5pdCwgNSwgZXJyb3IpOwogCiAJCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24g
PSAoVHlwZURlY2xhcmF0aW9uKSBnZXRBU1ROb2RlKHVuaXQsIDApOwogCQlNZXRob2REZWNsYXJh
dGlvbiBtZXRob2RkZWNsID0gKE1ldGhvZERlY2xhcmF0aW9uKXR5cGVkZWNsYXJhdGlvbi5ib2R5
RGVjbGFyYXRpb25zKCkuZ2V0KDQpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQppbmRleCBlZDIwNGI1Li45NjRkZGFiIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUu
amF2YQpAQCAtNjAsMTAgKzYwLDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYWNrYWdlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbU1ldGhvZEJpbmRpbmc7Ci1pbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29u
czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVy
ZW5jZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5TY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlNvdXJjZVR5cGVCaW5kaW5nOwpAQCAtMzI5LDYgKzMyNiw3IEBACiAKIAkJc3VwZXIoKTsK
IAl9CisJCiAJcHJpdmF0ZSBzdGF0aWMgaW50IGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50KEJsb2Nr
U2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gYXJndW1lbnQsIFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5
cGUsIFR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSwgVHlwZUJpbmRpbmcgb3JpZ2luYWxQYXJhbWV0
ZXJUeXBlKSB7CiAJCWFyZ3VtZW50LmNvbXB1dGVDb252ZXJzaW9uKHNjb3BlLCBwYXJhbWV0ZXJU
eXBlLCBhcmd1bWVudFR5cGUpOwogCkBAIC02NTAsMTIwICs2NDgsNDIgQEAKIAkvKioKIAkgKiBB
ZnRlciBtZXRob2QgbG9va3VwIGhhcyBwcm9kdWNlZCAnbWV0aG9kQmluZGluZycgYnV0IHdoZW4g
cG9seSBleHByZXNzaW9ucyBoYXZlIGJlZW4gc2VlbiBhcyBhcmd1bWVudHMsCiAJICogaW5zcGVj
dCB0aGUgYXJndW1lbnRzIHRvIHRyaWdnZXIgYW5vdGhlciByb3VuZCBvZiByZXNvbHZpbmcgd2l0
aCBpbXByb3ZlZCB0YXJnZXQgdHlwZXMgZnJvbSB0aGUgbWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAq
IElmIHRoaXMgcmVzb2x2aW5nIHByb2R1Y2VzIGJldHRlciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50
cywgdXBkYXRlIHRoZSAnYXJndW1lbnRUeXBlcycgYXJyYXkgaW4tcGxhY2UgYXMgYW4KLQkgKiBp
bnRlbmRlZCBzaWRlIGVmZmVjdCB0aGF0IHdpbGwgZmVlZCBiZXR0ZXIgdHlwZSBpbmZvcm1hdGlv
biBpbiBjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoKSBhbmQgb3RoZXJzLgogCSAqIEBwYXJhbSBp
bnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJlaW5nIHJlc29sdmVkCi0J
ICogQHBhcmFtIG1ldGhvZEJpbmRpbmcgdGhlIG1ldGhvZCBwcm9kdWNlZCBieSBsb29rdXAgKHBv
c3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZSkuCisJICogQHBhcmFtIG1ldGhvZCB0aGUg
bWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJl
bmNlKS4KIAkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29s
bGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQg
YXMgdXNlZCBmb3IKIAkgKiAJdGhlIG1ldGhvZCBsb29rdXAuCi0JICogQHBhcmFtIHNjb3BlIHNj
b3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0gc2NvcGUgc2NvcGUgZm9yIHJlc29s
dXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJlc29sdmVQb2x5RXhwcmVzc2lvbkFy
Z3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGlu
ZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29wZSBzY29wZSkgewotCQlpZiAoIWlu
dm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZl
UG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5k
aW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBCbG9ja1Njb3BlIHNjb3Bl
KSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kID0gbWV0aG9kLmlzVmFsaWRCaW5k
aW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZyA/
ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xvc2VzdE1hdGNoIDogbnVsbDsKKwkJ
aWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJuOwotCQlpbnQgcHJvYmxlbVJl
YXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kOwotCQlpZiAobWV0aG9k
QmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSBtZXRob2RC
aW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcgaW5zdGFuY2VvZiBQcm9ibGVtTWV0
aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1ldGhvZEJpbmRpbmcucHJvYmxlbUlk
KCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKSBtZXRob2RC
aW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSBu
dWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0gbnVsbCkgewotCQkJYm9vbGVhbiB2
YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOwotCQkJSW5mZXJlbmNl
Q29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2FuZGlkYXRlTWV0aG9kIGluc3RhbmNl
b2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJCQlpbmZDdHggPSBpbnZvY2F0aW9u
LmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBjYW5kaWRh
dGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkgewotCQkJCQlpZiAoaW5mQ3R4LnN0
ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCQkJ
CS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2YgVFlQRV9JTkZFUlJFRAotCQkJCQkJ
Ly8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJCQkvLyAtIGFib3ZlIHdlJ3JlIGFs
cmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJCX0KLQkJCQkJdmFyaWFibGVBcml0
eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlmIG5vIGluZkN0eCBpcyBhdmFpbGFi
bGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBpcyBhIHZhcmFyZ3MgaW52b2NhdGlv
bj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24gaW5zdGFuY2VvZiBBbGxvY2F0aW9u
RXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25FeHByZXNzaW9uKWludm9jYXRpb24p
LnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQotCQkJCQlyZXR1cm47IC8vIG5vdCB5
ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0g
Y2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHByZXNzaW9uW10gaW5uZXJBcmd1bWVu
dHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhwcmVzc2lvbiBbXSBhcmd1bWVudHMg
PSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0gbnVsbCAmJiB2YXJpYWJsZUFyaXR5
ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3RoID09IGFyZ3VtZW50cy5s
ZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGluZyBsYXN0UGFyYW0gPSBwYXJhbWV0
ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJlc3Npb24gbGFzdEFyZyA9IGFyZ3Vt
ZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChsYXN0QXJnLmlzQ29tcGF0aWJsZVdp
dGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJsZUFyaXR5ID0gZmFsc2U7Ci0JCQkJ
fQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cyA9PSBudWxsID8g
MCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJCUV4cHJlc3Npb24g
YXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50
VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSA9IEluZmVyZW5jZUNv
bnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFyaWFibGVBcml0eSk7Ci0JCQkJ
aWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVtUmVhc29uICE9IFByb2JsZW1SZWFz
b25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVjaCB3ZSBjYW4gZG8gd2l0aG91
dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5zIGFmdGVyIHNvbWUgcmVzb2x2
ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbiAm
JiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNFcnJvcnMoKSkKLQkJCQkJY29udGlu
dWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhhcyBlcnJvcnMKLQotCQkJCWlmIChh
cmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQkJSW52b2NhdGlvbiBpbm5lcklu
dm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJCQkJTWV0aG9kQmluZGluZyBiaW5k
aW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1ldGVyVHlwZSwgdHJ1ZSwgc2NvcGUp
OwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBhcmFt
ZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5k
aW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ29udGV4dCA9IGlubmVySW52b2Nh
dGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJaWYg
KGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYgKCFpbm5lckNvbnRleHQuaGFzUmVz
dWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVkVHlw
ZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBpbXByb3ZlZEJpbmRpbmcg
PSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5lckludm9jYXRpb24sIHBhcmFt
ZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJvdmVkQmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVwb3J0SW52YWxpZEludm9jYXRpb24o
aW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwotCQkJCQkJCQl9Ci0JCQkJCQkJCWlm
IChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1wcm92ZWRCaW5kaW5nLCBwYXJhbWV0
ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGlubmVy
SW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7Ci0JCQkJCQkJCX0KLQkJCQkJCQl9
IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4
LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJDb250ZXh0LnJlYmluZElubmVyUG9s
aWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2NhdGlvbik7Ci0JCQkJCQkJfQotCQkJ
CQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0aGVzZSBoYXZlIGJlZW4gZGVhbHQg
d2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJCQl9Ci0JCQkJfQotCi0JCQkJaWYg
KGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJCQkvLyBwb2x5IGV4cHJlc3Npb25z
IGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0byBiZSByZXNvbHZlZCBub3c6Ci0J
CQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENvbXBsZXRlZCA9PSBJbmZlcmVu
Y2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUg
PSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMgY2FzZSBhcmd1bWVudCB3YXMgYWxy
ZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4LmFjY2VwdFBlbmRpbmdQb2x5QXJn
dW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50
LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0ZXJUeXBlLCBzY29wZSk7Ci0KLQkJ
CQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNvbnMuTm9FcnJvciAvLyBwcmVzZXJ2
ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRUeXBlICE9IG51bGwJCQkJCS8vIGRv
IHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJCQkJCSYmICEodXBkYXRlZEFyZ3Vt
ZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykpCi0JCQkJCXsKLQkJCQkJCS8vIHVw
ZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9zZWQgdG8gYmUgb3duZWQgYnkgdGhl
IGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIgdG8gZ2l2ZSBiZXR0ZXIgaW5mb3Jt
YXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gdXBk
YXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5
ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlmaW5hbCBUeXBlQmluZGluZ1tdIHBh
cmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVyczsKKwkJRXhwcmVzc2lvbltdIGFy
Z3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJCWlmICh2YXJpYWJsZUFyaXR5ICYm
IGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3RoID09IGFyZ3VtZW50cy5sZW5n
dGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXS5pc0NvbXBhdGlibGVX
aXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0sIHNjb3BlKSkgeworCQkJCXZhcmlh
YmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZvY2F0aW9uLmlubmVyVXBkYXRlRG9u
ZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1
bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcs
IFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IG51bGw7Ci0J
CUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0J
CWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5
cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0JCQlmb3IgKGludCBpID0gMDsgaSA8
IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBpbm5l
ckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBh
cmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07CisJCQlUeXBlQmluZGlu
ZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihwYXJhbWV0
ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJhbWV0ZXJUeXBlID09IG51bGwpCisJ
CQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3aXRob3V0IGEgdGFyZ2V0IHR5cGUs
IGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSByZXNvbHZlIGVycm9yCisJCQlpZiAo
YXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJCQlhcmd1bWVudC5zZXRFeHBlY3Rl
ZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlw
ZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJCQkJaWYgKGFyZ3VtZW50IGluc3Rh
bmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBMRS5yZXNvbHZlVHlwZSBtYXkgcmV0
dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUgZG9lcyBub3QgZGV0ZWN0IHN0cnVj
dHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRh
ID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJCQlpZiAoIWxhbWJkYS5pc0NvbXBh
dGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBsYW1iZGEuaGFzRXJyb3JzKCkpCisJ
CQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0ZWRBcmd1bWVudFR5cGUgIT0gbnVs
bCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBCaW5kaW5nLlBPTFlfVFlQRSkKKwkJ
CQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5cGU7CisJCQl9CiAJCX0KLQkJ
cmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRpb24sIG1ldGhvZEJpbmRpbmcs
IGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2
ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90YXRpb25bXSBzb3VyY2VBbm5vdGF0
aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQppbmRleCBiMmZlMDQzLi5lMTJkNTc2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhCkBAIC02NCw2ICs2NCw3IEBACiAKIAlwdWJsaWMgVHlwZVJlZmVyZW5jZSB0eXBlOwogCXB1
YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzOworCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBl
cyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKIAlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5n
OwkJCQkJCQkvLyBleGFjdCBiaW5kaW5nIHJlc3VsdGluZyBmcm9tIGxvb2t1cAogCU1ldGhvZEJp
bmRpbmcgc3ludGhldGljQWNjZXNzb3I7CQkJCQkJLy8gc3ludGhldGljIGFjY2Vzc29yIGZvciBp
bm5lci1lbXVsYXRpb24KIAlwdWJsaWMgVHlwZVJlZmVyZW5jZVtdIHR5cGVBcmd1bWVudHM7CkBA
IC03NywzMCArNzgsOSBAQAogCiAJIC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52
b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5m
ZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0ZSk6CiAJcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJs
ZS8qPFBNQixJQzE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByb3RlY3RlZCBJbm5lckluZmVy
ZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcjsKLQotCS8qKiBSZWNvcmQgdG8ga2VlcCBz
dGF0ZSBiZXR3ZWVuIGRpZmZlcmVudCBwYXJ0cyBvZiByZXNvbHV0aW9uLiAqLwotCVJlc29sdXRp
b25TdGF0ZSBzdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGU7Ci0JY2xhc3MgUmVzb2x1dGlvblN0YXRl
IHsKLQkJQmxvY2tTY29wZSBzY29wZTsKLQkJYm9vbGVhbiBpc0RpYW1vbmQ7Ci0JCWJvb2xlYW4g
ZGlhbW9uZE5lZWRzRGVmZXJyaW5nOwotCQlib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKLQkJYm9v
bGVhbiBjYW5ub3RJbmZlckRpYW1vbmQ7IC8vIHJlcXVlc3QgdGhlIGFuIGVycm9yIGJlIHJlcG9y
dGVkIGluIGR1ZSB0aW1lCi0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlczsKLQkJYm9vbGVh
biBoYXNSZXBvcnRlZEVycm9yOwotCi0JCVJlc29sdXRpb25TdGF0ZShCbG9ja1Njb3BlIHNjb3Bl
LCBib29sZWFuIGlzRGlhbW9uZCwgYm9vbGVhbiBkaWFtb25OZWVkc0RlZmVycmluZywKLQkJCQli
b29sZWFuIGFyZ3NDb250YWluQ2FzdCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKQotCQl7
Ci0JCQl0aGlzLnNjb3BlID0gc2NvcGU7Ci0JCQl0aGlzLmlzRGlhbW9uZCA9IGlzRGlhbW9uZDsK
LQkJCXRoaXMuZGlhbW9uZE5lZWRzRGVmZXJyaW5nID0gZGlhbW9uTmVlZHNEZWZlcnJpbmc7Ci0J
CQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IGFyZ3NDb250YWluQ2FzdDsKLQkJCXRoaXMuYXJndW1l
bnRUeXBlcyA9IGFyZ3VtZW50VHlwZXM7Ci0JCX0KLQl9Ci0KKwlwcml2YXRlIEJsb2NrU2NvcGUg
ZW5jbG9zaW5nU2NvcGU7CisJcHJpdmF0ZSBib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKKwkKIHB1
YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0Nv
bnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJLy8gY2hlY2sgY2FwdHVy
ZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBpbiBjdXJyZW50IGNvbnRleHQgKDI2MTM0KQog
CWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxpemF0aW9uSWZOZWNlc3NhcnkoKFJlZmVyZW5jZUJp
bmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVyYXN1cmUoKSwgY3VycmVudFNjb3Bl
LCBmbG93SW5mbyk7CkBAIC0zNDEsMTg4ICszMjEsMTYxIEBACiAJLy8gUHJvcGFnYXRlIHRoZSB0
eXBlIGNoZWNraW5nIHRvIHRoZSBhcmd1bWVudHMsIGFuZCBjaGVjayBpZiB0aGUgY29uc3RydWN0
b3IgaXMgZGVmaW5lZC4KIAlmaW5hbCBib29sZWFuIGlzRGlhbW9uZCA9IHRoaXMudHlwZSAhPSBu
dWxsICYmICh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25kKSAhPSAwOwogCWZpbmFs
IENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMo
KTsKLQlib29sZWFuIGRpYW1vbmROZWVkc0RlZmVycmluZyA9IGZhbHNlOwogCWxvbmcgc291cmNl
TGV2ZWwgPSBjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWw7CiAJaWYgKHRoaXMuY29uc3RhbnQg
IT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CiAJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5O
b3RBQ29uc3RhbnQ7CisJCXRoaXMuZW5jbG9zaW5nU2NvcGUgPSBzY29wZTsKIAkJaWYgKHRoaXMu
dHlwZSA9PSBudWxsKSB7CiAJCQkvLyBpbml0aWFsaXphdGlvbiBvZiBhbiBlbnVtIGNvbnN0YW50
CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHNjb3BlLmVuY2xvc2luZ1JlY2VpdmVyVHlwZSgpOwog
CQl9IGVsc2UgewogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZVR5cGUo
c2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pOwotCQkJaWYgKGlzRGlhbW9uZCAmJiB0aGlz
LnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NB
VElPTl9DT05URVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgp
IHsKLQkJCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlw
ZS5pc1ZhbGlkQmluZGluZygpKQotCQkJCQlkaWFtb25kTmVlZHNEZWZlcnJpbmcgPSB0cnVlOwot
CQkJfQogCQl9Ci0JfSBlbHNlIHsKLQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVz
b2x2ZWRUeXBlOwotCX0KLQotCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkgewotCQljaGVja0lsbGVn
YWxOdWxsQW5ub3RhdGlvbihzY29wZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwotCQljaGVja1BhcmFt
ZXRlcml6ZWRBbGxvY2F0aW9uOiB7Ci0JCQlpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFyYW1l
dGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3RyaW5n
Pi5ZPEludGVnZXI+KCkKLQkJCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gKFJlZmVy
ZW5jZUJpbmRpbmcpdGhpcy5yZXNvbHZlZFR5cGU7Ci0JCQkJaWYgKGN1cnJlbnRUeXBlID09IG51
bGwpIHJldHVybiBjdXJyZW50VHlwZTsKLQkJCQlkbyB7Ci0JCQkJCS8vIGlzU3RhdGljKCkgaXMg
YW5zd2VyaW5nIHRydWUgZm9yIHRvcGxldmVsIHR5cGVzCi0JCQkJCWlmICgoY3VycmVudFR5cGUu
bW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYykgIT0gMCkgYnJlYWsgY2hl
Y2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKLQkJCQkJaWYgKGN1cnJlbnRUeXBlLmlzUmF3VHlw
ZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOwotCQkJCX0gd2hpbGUgKChj
dXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkhPSBudWxsKTsKLQkJCQlQ
YXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSBxUmVmID0gKFBhcmFtZXRlcml6ZWRR
dWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlzLnR5cGU7Ci0JCQkJZm9yIChpbnQgaSA9IHFSZWYu
dHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgewotCQkJCQlpZiAocVJlZi50
eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsKLQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRpb24odGhpcy50eXBlLCB0
aGlzLnJlc29sdmVkVHlwZSk7Ci0JCQkJCQlicmVhazsKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxs
KSB7CisJCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwgdGhpcy5yZXNvbHZlZFR5
cGUpOworCQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjogeworCQkJCWlmICh0aGlzLnR5
cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgeyAvLyBk
aXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQorCQkJCQlSZWZlcmVuY2VCaW5kaW5n
IGN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNvbHZlZFR5cGU7CisJCQkJ
CWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVudFR5cGU7CisJCQkJCWRvIHsK
KwkJCQkJCS8vIGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9yIHRvcGxldmVsIHR5cGVz
CisJCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5B
Y2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb247CisJCQkJ
CQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb247CisJCQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVuY2xv
c2luZ1R5cGUoKSkhPSBudWxsKTsKKwkJCQkJUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZl
cmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgdGhpcy50
eXBlOworCQkJCQlmb3IgKGludCBpID0gcVJlZi50eXBlQXJndW1lbnRzLmxlbmd0aCAtIDI7IGkg
Pj0gMDsgaS0tKSB7CisJCQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsK
KwkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVhbGlmaWVkUGFyYW1ldGVy
aXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOworCQkJCQkJ
CWJyZWFrOworCQkJCQkJfQogCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9Ci0JfQotCS8vIHdpbGwg
Y2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJLy8gd2lsbCBjaGVjayBm
b3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAogCi0JLy8gcmVzb2x2ZSB0eXBlIGFyZ3Vt
ZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAodGhpcy50eXBlQXJndW1l
bnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7
Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzU7Ci0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdb
bGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJl
ZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0
aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShz
Y29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJv
ciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0
YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVz
YWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQotCQlpZiAoaXNEaWFtb25k
KSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlw
ZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOwotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQkJ
aWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBz
dGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9yIChpbnQgaSA9IDAsIG1h
eCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJn
dW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50
cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50
cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsK
KwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5n
W2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJVHlw
ZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOworCQkJCWlm
ICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5
cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7CisJCQkJCWFyZ0hh
c0Vycm9yID0gdHJ1ZTsKKwkJCQl9CisJCQkJaWYgKGFyZ0hhc0Vycm9yICYmIHR5cGVSZWZlcmVu
Y2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgeworCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5p
bGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwogCQkJCX0KIAkJCX0KLQkJCXJl
dHVybiBudWxsOworCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRoaXMudHlwZUFyZ3VtZW50
cyk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlp
ZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUg
YXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5n
dGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUo
c2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQogCQl9Ci0JfQog
Ci0JLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCi0JYm9vbGVhbiBhcmdzQ29udGFp
bkNhc3QgPSBmYWxzZTsKLQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5P
X1BBUkFNRVRFUlM7Ci0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJYm9vbGVhbiBh
cmdIYXNFcnJvciA9IGZhbHNlOwotCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3Ro
OwotCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlz
LmFyZ3VtZW50c1tpXTsKLQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9u
KSB7Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8v
IHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJCQlhcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkvLyBi
dWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51
bGwpIHsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsKKwkJCWludCBsZW5ndGggPSB0
aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJ
CQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkJaWYgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8PSBE
aXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJCQkJ
dGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVudC5zZXRFeHBy
ZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICh0aGlzLmFyZ3VtZW50
c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCBy
ZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCisJCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlw
ZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpIHsKKwkJCQkJYXJn
SGFzRXJyb3IgPSB0cnVlOworCQkJCX0KIAkJCX0KLQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25D
b250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVz
b2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJ
bmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIs
IHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVu
dC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7
Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAm
JiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJ
bnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkg
ewotCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMu
aW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0K
LQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVycm9ycywg
Y29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KKwkJCWlmIChhcmdIYXNFcnJvcikg
eworCQkJCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0z
NDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0
aGUgPD4gY2FzZS4KIAkJCSAgIE5vIG1lYW5pbmdmdWwgdHlwZSByZXNvbHV0aW9uIGlzIHBvc3Np
YmxlIHNpbmNlIGluZmVyZW5jZSBvZiB0aGUgZWxpZGVkIHR5cGVzIGlzIGZ1bGx5IHRpZWQgdG8g
YXJndW1lbnQgdHlwZXMuIERvCiAJCQkgICBub3QgcmV0dXJuIHRoZSBwYXJ0aWFsbHkgcmVzb2x2
ZWQgdHlwZS4KLQkJCSAqLwotCQkJaWYgKGlzRGlhbW9uZCkgewotCQkJCXJldHVybiBudWxsOyAv
LyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKLQkJCX0KLQkJCWlm
ICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKLQkJCQkv
LyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBv
c3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCi0JCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49
IDA7KSB7Ci0JCQkJCXBzZXVkb0FyZ3NbaV0gPSBhcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBU
eXBlQmluZGluZy5OVUxMIDogYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGgg
ZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJICovCisJCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJ
CQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29va2VkIHRoaXMucmVzb2x2ZWRU
eXBlCiAJCQkJfQotCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5j
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVkb0Fy
Z3MsIHRoaXMsIGZhbHNlKTsKLQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMu
YmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1h
dGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsK
LQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0
aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQkJaWYgKGNsb3Nl
c3RNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlw
ZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0
aG9kCi0JCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0
cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCi0JCQkJ
CQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51
bGwpOwotCQkJCQkJfQotCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOwotCQkJCQkJ
TWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5h
bCgpOwotCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0
ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwp
KSB7Ci0JCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0
aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCi0JCQkJCQkJY2xvc2Vz
dE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9j
YWxseVVzZWQ7CisJCQkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNl
QmluZGluZykgeworCQkJCQkvLyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8g
bmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCisJCQkJCVR5cGVCaW5k
aW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJCQlmb3IgKGlu
dCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKKwkJCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFy
Z3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50
VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQorCQkJ
CQl9CisJCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRp
bmcpIHRoaXMucmVzb2x2ZWRUeXBlLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRo
aXMsIGZhbHNlKTsKKwkJCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2gg
PSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOworCQkJ
CQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxs
IG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJCWlmIChjbG9zZXN0
TWF0Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBl
VmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRo
b2QKKwkJCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0
cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCisJCQkJ
CQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZylu
dWxsKTsKKwkJCQkJCQl9CisJCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOworCQkJ
CQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3Jp
Z2luYWwoKTsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQ
cml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmln
aW5hbCkpIHsKKwkJCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZy
b20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCisJCQkJCQkJ
CWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJz
LkFjY0xvY2FsbHlVc2VkOworCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0KKwkJCQly
ZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJCQl9CisJCX0KKwkJaWYgKHRoaXMucmVzb2x2ZWRU
eXBlID09IG51bGwgfHwgIXRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJ
CXJldHVybiBudWxsOworCQl9CisKKwkJLy8gbnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxvY2F0
aW9uIGZvciBlbnVtIGNvbnN0YW50IGluaXRzCisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCAmJiAh
dGhpcy5yZXNvbHZlZFR5cGUuY2FuQmVJbnN0YW50aWF0ZWQoKSkgeworCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuY2Fubm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlw
ZSk7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJCX0KIAl9Ci0JaWYgKHRoaXMucmVz
b2x2ZWRUeXBlID09IG51bGwgfHwgIXRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkp
IHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JLy8gbnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxv
Y2F0aW9uIGZvciBlbnVtIGNvbnN0YW50IGluaXRzCi0JaWYgKHRoaXMudHlwZSAhPSBudWxsICYm
ICF0aGlzLnJlc29sdmVkVHlwZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7Ci0JCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmNhbm5vdEluc3RhbnRpYXRlKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5
cGUpOwotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7Ci0JfQotCVJlc29sdXRpb25TdGF0ZSBz
dGF0ZSA9IG5ldyBSZXNvbHV0aW9uU3RhdGUoc2NvcGUsIGlzRGlhbW9uZCwgZGlhbW9uZE5lZWRz
RGVmZXJyaW5nLCBhcmdzQ29udGFpbkNhc3QsIGFyZ3VtZW50VHlwZXMpOwotCWlmIChkaWFtb25k
TmVlZHNEZWZlcnJpbmcpIHsKLQkJdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBzdGF0
ZTsgLy8gcmVzb2x2aW5nIHRvIGJlIGNvbnRpbnVlZCBsYXRlciAodmlhIGJpbmRpbmcoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSkpLgotCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsK
LQl9Ci0KLQlpZiAoIXJlc29sdmVQYXJ0MihzdGF0ZSkpCi0JCXJldHVybiBudWxsOwotCXJldHVy
biByZXNvbHZlUGFydDMoc3RhdGUpOwotfQotCi0vKiogU2Vjb25kIHBhcnQgb2YgcmVzb2x2aW5n
IHRoYXQgbWF5IGhhcHBlbiBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlv
bi4gKi8KLWJvb2xlYW4gcmVzb2x2ZVBhcnQyKFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCS8v
IFRPRE86IGFsbCBpbmZvcm1hdGlvbiBwZXJzaXN0ZWQgZHVyaW5nIHRoaXMgbWV0aG9kIG1heSBu
ZWVkIHRvIGJlIHN0b3JlZCBwZXIgdGFyZ2V0VHlwZT8KLQlpZiAoc3RhdGUuaXNEaWFtb25kKSB7
Ci0JCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7Ci0JCVR5cGVCaW5kaW5nIFtd
IGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcpIHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCks
IHN0YXRlLmFyZ3VtZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMg
PT0gbnVsbCkgewotCQkJaWYgKCFzdGF0ZS5kaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlz
dGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMp
OwotCQkJCXN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRU
eXBlID0gbnVsbDsKLQkJCX0gZWxzZSB7Ci0JCQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0g
dHJ1ZTsgLy8gZGVmZXIgcmVwb3J0aW5nCisJCisJaWYgKGlzRGlhbW9uZCAmJiB0aGlzLnR5cGVF
eHBlY3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NBVElPTl9D
T05URVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKKwkJ
aWYgKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxp
ZEJpbmRpbmcoKSkgeworCQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJ
CVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmly
b25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBl
LnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVC
aW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRU
eXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBl
cywgc2NvcGUpOworCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgeworCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQkJcmV0dXJu
IHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKIAkJCX0KLQkJCXJldHVybiBmYWxzZTsKKwkJCXRo
aXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZSA9IHNjb3BlLmVudmlyb25t
ZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMs
ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5n
VHlwZSgpKTsKKwkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmdldENvbnN0cnVjdG9yKChSZWZlcmVu
Y2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsK
KwkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwogCQl9Ci0JCXRoaXMucmVzb2x2
ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZSA9IHN0YXRlLnNjb3BlLmVudmlyb25tZW50
KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlw
ZSgpKTsKLQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gZmFsc2U7Ci0gCX0KLQlSZWZlcmVu
Y2VCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVk
VHlwZTsKLQl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHN0YXRlLnNjb3Bl
LCB0aGlzLCByZWNlaXZlclR5cGUsIHN0YXRlLmFyZ3VtZW50VHlwZXMpOwotCXJldHVybiB0cnVl
OwotfQotCi0vKiogRmluYWwgcGFydCBvZiByZXNvbHZpbmcgKG9uY2UpOiBjaGVjayBhbmQgcmVw
b3J0IHZhcmlvdXMgZXJyb3IgY29uZGl0aW9ucy4gKi8KLVR5cGVCaW5kaW5nIHJlc29sdmVQYXJ0
MyhSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9u
U3RhdGUgIT0gbnVsbCAmJiB0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRl
ZEVycm9yKQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7Ci0JdGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUgPSBudWxsOwotCWlmIChzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQpIHsKLQkJ
c3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlz
KTsKLQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKIAl9CisJCisJaWYgKGlzRGlh
bW9uZCkgeworCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQlQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgp
LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFy
aWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCVR5cGVCaW5kaW5nIFtd
IGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCBwYXJh
bWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUp
OworCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOworCQkJcmV0dXJuIHRoaXMucmVzb2x2
ZWRUeXBlID0gbnVsbDsKKwkJfQorCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNv
bHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdl
bmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhp
cy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisgCX0KKwkKKwlSZWZlcmVuY2VCaW5k
aW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsK
Kwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCByZWNl
aXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0
aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKKwkKIAlpZiAo
IXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0g
YWxsb2NhdGlvblR5cGU7CkBAIC01MzAsMzAgKzQ4MywyOSBAQAogCQlpZiAodGhpcy50eXBlICE9
IG51bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJ
cmV0dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxp
ZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwogCQlyZXR1cm4gdGhp
cy5yZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRz
Lkhhc01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigp
Lm1pc3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOworCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5k
aW5nKTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHN0YXRl
LnNjb3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNh
dGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRl
ZCh0aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CiAJfQotCWlmIChjaGVja0lu
dm9jYXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGwsIGFsbG9jYXRpb25UeXBlLCB0aGlz
LmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCBzdGF0ZS5hcmd1bWVudFR5cGVzLCBzdGF0ZS5hcmdz
Q29udGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29w
ZSwgbnVsbCwgYWxsb2NhdGlvblR5cGUsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRo
aXMuYXJndW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMu
Yml0cyB8PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAh
PSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgPT0gQmluZGlu
Zy5OT19UWVBFX1ZBUklBQkxFUykgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51
bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywg
dGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJndW1lbnRzKTsKKwkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2Nh
dGlvbih0aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFy
Z3VtZW50cyk7CiAJfQotCWlmICghc3RhdGUuaXNEaWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBl
LmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRzKCkpIHsKLSAJCWNoZWNrVHlw
ZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCBzdGF0ZS5hcmd1bWVu
dFR5cGVzLCBzdGF0ZS5zY29wZSk7CisJaWYgKCFpc0RpYW1vbmQgJiYgdGhpcy5yZXNvbHZlZFR5
cGUuaXNQYXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVudHMoKSkgeworIAkJY2hlY2tU
eXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVz
b2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1l
bnRUeXBlcywgc2NvcGUpOwogIAl9Ci0JQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9
IHN0YXRlLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCWlmIChjb21waWxlck9wdGlvbnMuaXNB
bm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkICYmICh0aGlzLmJpbmRpbmcudGFnQml0
cyAmIFRhZ0JpdHMuSXNOdWxsbmVzc0tub3duKSA9PSAwKSB7Ci0JCW5ldyBJbXBsaWNpdE51bGxB
bm5vdGF0aW9uVmVyaWZpZXIoc3RhdGUuc2NvcGUuZW52aXJvbm1lbnQoKSwgY29tcGlsZXJPcHRp
b25zLmluaGVyaXROdWxsQW5ub3RhdGlvbnMpCi0JCQkJLmNoZWNrSW1wbGljaXROdWxsQW5ub3Rh
dGlvbnModGhpcy5iaW5kaW5nLCBudWxsLypzcmNNZXRob2QqLywgZmFsc2UsIHN0YXRlLnNjb3Bl
KTsKKwkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllcihzY29wZS5lbnZpcm9ubWVu
dCgpLCBjb21waWxlck9wdGlvbnMuaW5oZXJpdE51bGxBbm5vdGF0aW9ucykKKwkJCQkuY2hlY2tJ
bXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhvZCovLCBm
YWxzZSwgc2NvcGUpOwogCX0KLQlyZWNvcmRFeGNlcHRpb25zRm9yRW5jbG9zaW5nTGFtYmRhKHN0
YXRlLnNjb3BlLCB0aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9ucyk7CisJcmVjb3JkRXhjZXB0
aW9uc0ZvckVuY2xvc2luZ0xhbWJkYShzY29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlv
bnMpOwogCXJldHVybiBhbGxvY2F0aW9uVHlwZTsKIH0KIApAQCAtNTcyLDM4ICs1MjQsNTMgQEAK
IAl9CiB9CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2lu
Z1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgQmxvY2tTY29wZSBzY29w
ZSkgeworLy8gRm9yIGFsbG9jYXRpb24gZXhwcmVzc2lvbnMsIGJveGluZyBjb21wYXRpYmlsaXR5
IGlzIHNhbWUgYXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5LCBzaW5jZSBqYXZhLmxhbmcncyB3cmFw
cGVyIHR5cGVzIGFyZSBub3QgZ2VuZXJpYy4KK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0
aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlyZXR1cm4g
aXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7Cit9CisKK3B1YmxpYyBib29sZWFu
IGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgZmluYWwgU2NvcGUgc2NvcGUpIHsK
KwlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkKKwkJcmV0dXJuIGZhbHNlOworCVR5cGVCaW5kaW5nIGFsbG9jYXRpb25U
eXBlID0gdGhpcy5yZXNvbHZlZFR5cGU7CisJaWYgKGlzUG9seUV4cHJlc3Npb24oKSkgeworCQlU
eXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLnR5cGVFeHBlY3RlZDsKKwkJdHJ5IHsK
KwkJCXRoaXMudHlwZUV4cGVjdGVkID0gbGVmdDsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJp
Y1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdl
bmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5
cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNU
eXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5
cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBl
cyhwYXJhbWV0ZXJpemVkVHlwZSwgcGFyYW1ldGVyaXplZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwp
CisJCQkJcmV0dXJuIGZhbHNlOworCQkJYWxsb2NhdGlvblR5cGUgPSB0aGlzLmVuY2xvc2luZ1Nj
b3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGlu
ZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJfSBmaW5hbGx5IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVk
ID0gb2xkRXhwZWN0ZWRUeXBlOworCQl9CisJfQorCXJldHVybiBhbGxvY2F0aW9uVHlwZSAhPSBu
dWxsICYmIGFsbG9jYXRpb25UeXBlLmlzQ29tcGF0aWJsZVdpdGgobGVmdCwgc2NvcGUpOworfQor
CitwdWJsaWMgVHlwZUJpbmRpbmdbXSBpbmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZl
biB0aGUgYWxsb2NhdGlvbiB0eXBlIGFuZCB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rv
ciwgc2VlIGlmIHdlIGNhbiBzeW50aGVzaXplIGEgZ2VuZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAg
IG1ldGhvZCB0aGF0IHdvdWxkLCBnaXZlbiB0aGUgYXJndW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZv
Y2F0aW9uIHNpdGUsIG1hbnVmYWN0dXJlIGEgcGFyYW1ldGVyaXplZCBvYmplY3Qgb2YgdHlwZSBh
bGxvY2F0aW9uVHlwZS4KIAkgICBJZiB3ZSBhcmUgc3VjY2Vzc2Z1bCB0aGVuIGJ5IGRlc2lnbiBh
bmQgY29uc3RydWN0aW9uLCB0aGUgcGFyYW1ldGVyaXphdGlvbiBvZiB0aGUgcmV0dXJuIHR5cGUg
b2YgdGhlIGZhY3RvcnkgbWV0aG9kIGlzIGlkZW50aWNhbAogCSAgIHRvIHRoZSB0eXBlcyBlbGlk
ZWQgaW4gdGhlIDw+LgogCSAqLyAgIAotCU1ldGhvZEJpbmRpbmcgZmFjdG9yeSA9IHNjb3BlLmdl
dFN0YXRpY0ZhY3RvcnkoYWxsb2NhdGlvblR5cGUsIGVuY2xvc2luZ1R5cGUsIGFyZ3VtZW50VHlw
ZXMsIHRoaXMpOworCU1ldGhvZEJpbmRpbmcgZmFjdG9yeSA9IHNjb3BlLmdldFN0YXRpY0ZhY3Rv
cnkoYWxsb2NhdGlvblR5cGUsIGVuY2xvc2luZ1R5cGUsIGFyZ3VtZW50VHlwcywgdGhpcyk7CiAJ
aWYgKGZhY3RvcnkgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcg
JiYgZmFjdG9yeS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBnZW5lcmljRmFjdG9yeSA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIGZhY3Rvcnk7CiAJCXRoaXMuaW5mZXJyZWRSZXR1cm5UeXBlID0gZ2VuZXJpY0ZhY3Rv
cnkuaW5mZXJyZWRSZXR1cm5UeXBlOwotCQkvLyB0aGlzIGlzIG91ciBsYXN0IGNoYW5jZSB0byBp
bnNwZWN0IHRoZSByZXN1bHQgb2YgdGhlIGluZmVyZW5jZSB0aGF0IGlzIGNvbm5lY3RlZCB0byB0
aGUgdGhyb3ctYXdheSBmYWN0b3J5IGJpbmRpbmcKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0
eDE4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChnZW5lcmljRmFjdG9yeSk7Ci0JCWlmIChpbmZDdHgx
OCAhPSBudWxsICYmIGluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4dDE4
LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCS8vIHJlZnJlc2ggYXJndW1lbnRUeXBlcyBmcm9tIHVw
ZGF0ZWQgYmluZGluZ3MgaW4gYXJndW1lbnRzOgotCQkJLy8gKHRoaXMgc2hvdWxkbid0IGJlIHN0
cmljdGx5IG5lY2Vzc2FyeSwgYXMgRnVuY3Rpb25FeHByZXNzaW9uLmlzQ29tcGF0aWJsZVdpdGgo
KSBzaG91bGQgZ2l2ZSB0aGUgc2FtZSByZXN1bHQsCi0JCQkvLyAgYnV0IGl0J3MgcHJvYmFibHkg
YmUgYSBnb29kIGlkZWEgdG8gYXZvaWQgdGhlIG5lY2Vzc2l0eSB0byBjYWxsIGlzQ29tcGF0aWJs
ZVdpdGgoKSBpbiB0aGUgZmlyc3QgcGxhY2UpLiAKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJn
dW1lbnRUeXBlcy5sZW5ndGg7IGkrKykgewotCQkJCWlmIChhcmd1bWVudFR5cGVzW2ldIGluc3Rh
bmNlb2YgUG9seVR5cGVCaW5kaW5nKQotCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1
bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQkJfQotCQl9CiAJCXJldHVybiAoKFBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50czsKIAl9CiAJcmV0dXJu
IG51bGw7CiB9CiAKLXB1YmxpYyB2b2lkIGNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeShQYXJh
bWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgZW5j
bG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBCbG9ja1Njb3Bl
IHNjb3BlKSB7CitwdWJsaWMgdm9pZCBjaGVja1R5cGVBcmd1bWVudFJlZHVuZGFuY3koUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xv
c2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBCbG9ja1Njb3BlIHNj
b3BlKSB7CiAJaWYgKChzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jb21wdXRlU2V2ZXJpdHkoSVBy
b2JsZW0uUmVkdW5kYW50U3BlY2lmaWNhdGlvbk9mVHlwZUFyZ3VtZW50cykgPT0gUHJvYmxlbVNl
dmVyaXRpZXMuSWdub3JlKSB8fCBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHJldHVybjsKIAlpZiAoYWxsb2NhdGlvblR5cGUu
YXJndW1lbnRzID09IG51bGwpIHJldHVybjsgIC8vIHJhdyBiaW5kaW5nCiAJaWYgKHRoaXMuZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCkgcmV0dXJuOyAvLyBkaWFtb25kIGNhbid0IG9jY3Vy
IHdpdGggZXhwbGljaXQgdHlwZSBhcmdzIGZvciBjb25zdHJ1Y3RvcgogCWlmICh0aGlzLnR5cGUg
PT0gbnVsbCkgcmV0dXJuOwotCWlmIChhcmd1bWVudFR5cGVzID09IEJpbmRpbmcuTk9fUEFSQU1F
VEVSUyAmJiB0aGlzLnR5cGVFeHBlY3RlZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZykgeworCWlmIChhcmd1bWVudFR5cHMgPT0gQmluZGluZy5OT19QQVJBTUVURVJTICYmIHRo
aXMudHlwZUV4cGVjdGVkIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB7CiAJ
CVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBleHBlY3RlZCA9IChQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcpIHRoaXMudHlwZUV4cGVjdGVkOwogCQlpZiAoZXhwZWN0ZWQuYXJndW1lbnRzICE9IG51
bGwgJiYgYWxsb2NhdGlvblR5cGUuYXJndW1lbnRzLmxlbmd0aCA9PSBleHBlY3RlZC5hcmd1bWVu
dHMubGVuZ3RoKSB7CiAJCQkvLyBjaGVjayB0aGUgY2FzZSB3aGVuIG5vIGN0b3IgdGFrZXMgbm8g
cGFyYW1zIGFuZCBpbmZlcmVuY2UgdXNlcyB0aGUgZXhwZWN0ZWQgdHlwZSBkaXJlY3RseQpAQCAt
NjI1LDcgKzU5Miw3IEBACiAJCS8vIGNoZWNraW5nIGZvciByZWR1bmRhbnQgdHlwZSBwYXJhbWV0
ZXJzIG11c3QgZmFrZSBhIGRpYW1vbmQsIAogCQkvLyBzbyB3ZSBpbmZlciB0aGUgc2FtZSByZXN1
bHRzIGFzIHdlIHdvdWxkIGdldCB3aXRoIGEgZGlhbW9uZCBpbiBzb3VyY2UgY29kZToKIAkJdGhp
cy50eXBlLmJpdHMgfD0gSXNEaWFtb25kOwotCQlpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRU
eXBlcyhhbGxvY2F0aW9uVHlwZSwgZW5jbG9zaW5nVHlwZSwgYXJndW1lbnRUeXBlcywgc2NvcGUp
OworCQlpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhhbGxvY2F0aW9uVHlwZSwgZW5j
bG9zaW5nVHlwZSwgYXJndW1lbnRUeXBzLCBzY29wZSk7CiAJfSBmaW5hbGx5IHsKIAkJLy8gcmVz
ZXQgZWZmZWN0cyBvZiBpbmZlcmVuY2UKIAkJdGhpcy50eXBlLmJpdHMgPSBwcmV2aW91c0JpdHM7
CkBAIC03MDEsNzUgKzY2OCwxOSBAQAogCiAvLy0tIGludGVyZmFjZSBJbnZvY2F0aW9uOiAtLQog
cHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29s
ZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQlpZiAodGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBlICE9IG51bGwpIHsKLQkJc2V0RXhwZWN0
ZWRUeXBlKHRhcmdldFR5cGUpOwotCQlpZiAoIXJlc29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJl
c29sdXRpb25TdGF0ZSkpIHsKLQkJCWlmIChyZXBvcnRFcnJvcnMgJiYgIXRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJCQlpZiAodGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUuY2Fubm90SW5mZXJEaWFtb25kKQotCQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCWVsc2UKLQkJCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJjb25zdHJ1Y3Rv
ciBpcyB1bmV4cGVjdGVkbHkgdW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQkJ
dGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0J
CQl9Ci0JCQlyZXR1cm4gbnVsbDsKLQkJfQotCX0KLQlpZiAocmVwb3J0RXJyb3JzICYmIHRoaXMu
YmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlp
ZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpCi0JCQl0aGlzLmJpbmRpbmcu
ZGVjbGFyaW5nQ2xhc3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7Ci0J
CWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7Ci0JCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsK
LQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVl
OwotCQl9Ci0JfQogCXJldHVybiB0aGlzLmJpbmRpbmc7Ci19Ci1wdWJsaWMgVHlwZUJpbmRpbmcg
Y2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7Ci0JdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRUeXBlOwotCWJvb2xlYW4gbmVl
ZHNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAJCQkJCQkJCQkJCQkJCQkJLy8gbm90
IHlldCByZXNvbHZlZAotCQkJKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGFyZ2V0VHlw
ZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5
cGUpKTsJLy8gcHJldmlvdXMgYXR0ZW1wdCB3YXMgd3JvbmcKLQlpZiAobmVlZHNVcGRhdGUgJiYg
dGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiAhdGhpcy5zdXNwZW5kZWRS
ZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkvLyBBdHRlbXB0IHRvIHJlc29s
dmUgaGFsZiByZXNvbHZlZCBkaWFtb25kCi0JCXJlc29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJl
c29sdXRpb25TdGF0ZSk7Ci0JfQotCS8vIGNvbmZlciBNZXNzYWdlU2VuZC5jaGVja0FnYWluc3RG
aW5hbFRhcmdldFR5cGUoLCwpOgotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9
IGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJp
bmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVu
Y2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewotCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJn
ZXRUeXBlOwotCQkJTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9j
YXRpb25UeXBlKHRoaXMsIChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMu
YmluZGluZyk7Ci0JCQlpZiAodXBkYXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5
cGUpKSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywg
dXBkYXRlZEJpbmRpbmcsIHNjb3BlKTsKLQkJCX0KLQkJfQotCX0KLQlpZiAodGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQlyZXR1cm4gcmVzb2x2ZVBhcnQzKHRoaXMu
c3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKTsKLQl9Ci0JcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBl
OwogfQogcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CiAJcmV0dXJuIHRoaXMuYXJn
dW1lbnRzOwogfQogCi1wdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNV
cGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJpbmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJl
bmNlQ29udGV4dHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcub3JpZ2luYWwoKSA9PSB1cGRhdGVk
QmluZGluZy5vcmlnaW5hbCgpKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJl
bmNlQ29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KHRoaXMuYmluZGluZyk7Ci0J
CWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQo
dXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20g
YW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChi
dXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlv
bih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0g
dXBkYXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5kZWNs
YXJpbmdDbGFzczsKLQlyZXR1cm4gaGFzVXBkYXRlOwotfQogcHVibGljIHZvaWQgcmVnaXN0ZXJJ
bmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2Qs
IEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRl
eHRzID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3Vw
VGFibGUoKTsKIAl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsK
KworCS8vIFNyaWthbnRoIGNoZWNrIHRoaXMuCisJCiAJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9
IG1ldGhvZC5vcmlnaW5hbCgpOwogCWlmIChvcmlnaW5hbCBpbnN0YW5jZW9mIFN5bnRoZXRpY0Zh
Y3RvcnlNZXRob2RCaW5kaW5nKSB7CiAJCVN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIHN5
bnRoT3JpZ2luYWwgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcpb3JpZ2luYWw7CkBA
IC03NzcsMjUgKzY4OCwxMSBAQAogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChwYXJhbWV0
ZXJpemVkQ3RvciwgaW5mQ3R4MTgpOwogCX0KIH0KLXB1YmxpYyBib29sZWFuIHVzZXNJbmZlcmVu
Y2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7Ci19CiBwdWJs
aWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1l
dGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVs
bCkKIAkJcmV0dXJuIG51bGw7CiAJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5m
ZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVk
VXBkYXRlKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci19
Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5jZUhl
bHBlciA9IG51bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVu
Y2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci19Ci0KIC8v
LS0gaW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogcHVibGljIEV4cHJlc3Npb25Db250ZXh0
IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewogCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fz
c2lnbm1lbnQuamF2YQppbmRleCA2OTliNGNmLi5lNTI2ZDkzIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0Fzc2lnbm1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQpAQCAt
MTkzLDcgKzE5Myw3IEBACiAJdGhpcy5leHByZXNzaW9uLnNldEV4cHJlc3Npb25Db250ZXh0KEFT
U0lHTk1FTlRfQ09OVEVYVCk7CiAJdGhpcy5leHByZXNzaW9uLnNldEV4cGVjdGVkVHlwZShsaHNU
eXBlKTsgLy8gbmVlZGVkIGluIGNhc2Ugb2YgZ2VuZXJpYyBtZXRob2QgaW52b2NhdGlvbgogCWlm
IChsaHNUeXBlICE9IG51bGwpIHsKLQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBsaHNUeXBlLmNhcHR1
cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKTsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSBsaHNUeXBl
LmNhcHR1cmUoc2NvcGUsIHRoaXMubGhzLnNvdXJjZUVuZCk7IC8vIG1ha2UgaXQgdW5pcXVlLCBg
dGhpcycgc2hhcmVzIHNvdXJjZSBlbmQgd2l0aCAndGhpcy5leHByZXNzaW9uJy4KIAl9CiAJTG9j
YWxWYXJpYWJsZUJpbmRpbmcgbG9jYWxWYXJpYWJsZUJpbmRpbmcgPSB0aGlzLmxocy5sb2NhbFZh
cmlhYmxlQmluZGluZygpOwogCWlmIChsb2NhbFZhcmlhYmxlQmluZGluZyAhPSBudWxsICYmIChs
b2NhbFZhcmlhYmxlQmluZGluZy5pc0NhdGNoUGFyYW1ldGVyKCkgfHwgbG9jYWxWYXJpYWJsZUJp
bmRpbmcuaXNQYXJhbWV0ZXIoKSkpIHsgCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEKaW5kZXggMTcxZWY4
ZC4uOGY2MzhkOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YQpAQCAtMjgxLDcgKzI4MSw3IEBACiAJ
CQlwdWJsaWMgaW50IHNvdXJjZUVuZCgpIHsgcmV0dXJuIDA7IH0KIAkJCXB1YmxpYyBUeXBlQmlu
ZGluZyBpbnZvY2F0aW9uVGFyZ2V0VHlwZSgpIHsgcmV0dXJuIGludm9jYXRpb25TaXRlLmludm9j
YXRpb25UYXJnZXRUeXBlKCk7IH0KIAkJCXB1YmxpYyBib29sZWFuIHJlY2VpdmVySXNJbXBsaWNp
dFRoaXMoKSB7IHJldHVybiBpbnZvY2F0aW9uU2l0ZS5yZWNlaXZlcklzSW1wbGljaXRUaGlzKCk7
fQotCQkJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2Nv
cGUgc29tZVNjb3BlKSB7IHJldHVybiBudWxsOyAvKiBzdXBwcmVzcyBpbmZlcmVuY2UgKi8gfQor
CQkJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUg
c29tZVNjb3BlKSB7IHJldHVybiBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQo
c29tZVNjb3BlKTsgfQogCQkJcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25D
b250ZXh0KCkgeyByZXR1cm4gaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQoKTsg
fQogCQl9OwogCQlNZXRob2RCaW5kaW5nIGJpbmRpbmdJZk5vQ2FzdDsKQEAgLTU4MCw3ICs1ODAs
NyBAQAogCQkJCXRoaXMuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVj
azsgLy8gZGlzYWJsZSBmdXJ0aGVyIHNlY29uZGFyeSBkaWFnbm9zaXMKIAkJCX0KIAkJfQotCQl0
aGlzLnJlc29sdmVkVHlwZSA9IGNhc3RUeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5k
KTsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSBjYXN0VHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnR5
cGUuc291cmNlRW5kKTsgLy8gbWFrZSBpdCB1bmlxdWUsIGEgY2FzdCBleHByZXNzaW9uIHNoYXJl
cyBzb3VyY2UgZW5kIHdpdGggdGhlIGV4cHJlc3Npb24uCiAJCWlmIChleHByQ29udGFpbkNhc3Qp
IHsKIAkJCWNoZWNrTmVlZEZvckNhc3RDYXN0KHNjb3BlLCB0aGlzKTsKIAkJfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
ZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggZWUzMTA4Ni4uY2EyNjNhNSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC01Nyw3ICs1Nyw2IEBACiAJcHJpdmF0ZSBi
b29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBmYWxzZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9y
aWdpbmFsVmFsdWVJZlRydWVUeXBlOwogCXByaXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1
ZUlmRmFsc2VUeXBlOwotCXByaXZhdGUgQmxvY2tTY29wZSBwb2x5RXhwcmVzc2lvblNjb3BlOwog
CXByaXZhdGUgYm9vbGVhbiB1c2UxOHNwZWNpZmljczsKIAlwdWJsaWMgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKAogCQlFeHByZXNzaW9uIGNvbmRpdGlvbiwKQEAgLTQ2NCwxMiArNDYzLDYgQEAKIAkJ
CWlmICh0aGlzLnZhbHVlSWZGYWxzZSBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZh
bHVlSWZGYWxzZS5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBj
aGVjayBsYXRlciBvbgogCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZh
bHVlSWZGYWxzZS5yZXNvbHZlVHlwZShzY29wZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9u
KCkpIHsKLQkJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBv
bHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29s
dXRpb24vZXJyb3IgcmVwb3J0aW5nLgotCQkJCX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5
cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhp
cy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJ
fSBlbHNlIHsKQEAgLTQ4NCwxMSArNDc3LDkgQEAKIAkJfQogCQlpZiAoaXNQb2x5RXhwcmVzc2lv
bigpKSB7CiAJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCXRoaXMucG9s
eUV4cHJlc3Npb25TY29wZSA9IHNjb3BlOyAvLyBwcmVzZXJ2ZSBmb3IgZXZlbnR1YWwgcmVzb2x1
dGlvbi9lcnJvciByZXBvcnRpbmcuCiAJCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhp
cyk7CiAJCQl9Ci0JCQljb21wdXRlQ29udmVyc2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBl
KTsKLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCQkJ
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gY29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlz
LmV4cGVjdGVkVHlwZSkgPyB0aGlzLmV4cGVjdGVkVHlwZSA6IG51bGw7CiAJCX0KIAkJVHlwZUJp
bmRpbmcgdmFsdWVJZlRydWVUeXBlID0gdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAkJ
VHlwZUJpbmRpbmcgdmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VU
eXBlOwpAQCAtNjYxLDcgKzY1Miw4IEBACiAJCXJldHVybiBudWxsOwogCX0KIAotCXByb3RlY3Rl
ZCB2b2lkIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0
YXJnZXRUeXBlKSB7CisJcHJvdGVjdGVkIGJvb2xlYW4gY29tcHV0ZUNvbnZlcnNpb25zKEJsb2Nr
U2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJYm9vbGVhbiBvayA9IHRy
dWU7CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlICE9IG51bGwgJiYgdGhpcy5v
cmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlpZiAodGhpcy52
YWx1ZUlmVHJ1ZS5pc0NvbnN0YW50VmFsdWVPZlR5cGVBc3NpZ25hYmxlVG9UeXBlKHRoaXMub3Jp
Z2luYWxWYWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUpCiAJCQkJCXx8IHRoaXMub3JpZ2luYWxW
YWx1ZUlmVHJ1ZVR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkgewpAQCAtNjgyLDYg
KzY3NCw3IEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRU
eXBlLCB0aGlzLnZhbHVlSWZUcnVlLCBudWxsKTsKKwkJCQlvayA9IGZhbHNlOwogCQkJfQogCQl9
CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSAhPSBudWxsICYmIHRoaXMub3Jp
Z2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKQEAgLTcwNCw4ICs2OTcs
MTAgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5
cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLCB0YXJnZXRUeXBl
LCB0aGlzLnZhbHVlSWZGYWxzZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQor
CQlyZXR1cm4gb2s7CiAJfQogCiAJcHVibGljIHZvaWQgc2V0RXhwZWN0ZWRUeXBlKFR5cGVCaW5k
aW5nIGV4cGVjdGVkVHlwZSkgewpAQCAtNzE5LDE5ICs3MTQsNyBAQAogCXB1YmxpYyBFeHByZXNz
aW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAkJcmV0dXJuIHRoaXMuZXhwcmVz
c2lvbkNvbnRleHQ7CiAJfQotCQotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5h
bFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJLy8g
aW4gMS44IGlmIHRyZWF0ZWQgYXMgYSBwb2x5IGV4cHJlc3Npb246Ci0JCWlmIChpc1BvbHlFeHBy
ZXNzaW9uKCkpIHsKLQkJCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLnBv
bHlFeHByZXNzaW9uU2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9IHRo
aXMudmFsdWVJZlRydWUuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNj
b3BlKTsKLQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFs
c2UuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKLQkJCWNv
bXB1dGVDb252ZXJzaW9ucyh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUsIHRhcmdldFR5cGUpOwot
CQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0YXJnZXRUeXBlOwotCQl9Ci0JCXJldHVybiB0aGlzLnJl
c29sdmVkVHlwZTsKLQl9Ci0JCisJCQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBs
aWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7
CiAJCXJldHVybiB0aGlzLnZhbHVlSWZUcnVlLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHRh
cmdldFR5cGUsIG1ldGhvZCkgCiAJCQkJJiYgdGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRU
b0FwcGxpY2FiaWxpdHkodGFyZ2V0VHlwZSwgbWV0aG9kKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25z
dHJ1Y3RvckNhbGwuamF2YQppbmRleCAyNDM0OTE1Li4yZWJkZGNiIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBs
aWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCkBAIC03OSw3ICs3OSw2IEBACiAKIAkgLy8gaG9sZCBv
biB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNl
IHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToK
IAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8g
aW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJpdmF0ZSBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lcklu
ZmVyZW5jZUhlbHBlcjsKIAogCXB1YmxpYyBFeHBsaWNpdENvbnN0cnVjdG9yQ2FsbChpbnQgYWNj
ZXNzTW9kZSkgewogCQl0aGlzLmFjY2Vzc01vZGUgPSBhY2Nlc3NNb2RlOwpAQCAtMzk0LDEwICsz
OTMsNiBAQAogCQkJCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlw
ZShzY29wZSkpID09IG51bGwpIHsKIAkJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKIAkJCQkJfQot
CQkJCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJn
dW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0
aW9uKSAmJiAoKEludm9jYXRpb24pIGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJ
CQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCQl0aGlzLmlu
bmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJCX0K
IAkJCQl9CiAJCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CiAJCQkJCWlmIChyZWNlaXZlclR5cGUgPT0g
bnVsbCkgewpAQCAtNDk4LDU2ICs0OTMsMjYgQEAKIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBz
Y29wZSk7CiAJfQogCi0JLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCiAJcHVibGljIE1l
dGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9y
dEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQkJaWYgKHJlcG9ydEVycm9ycykgewotCQkJaWYgKHRo
aXMuYmluZGluZyA9PSBudWxsKQotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJ
bmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0
aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJZWxzZSBpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKQotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0
aGlzLCB0aGlzLmJpbmRpbmcpOwotCQl9CiAJCXJldHVybiB0aGlzLmJpbmRpbmc7CiAJfQotCXB1
YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewotCQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7
Ci0JfQotCXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRl
ZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJYm9vbGVhbiBoYXNVcGRhdGUg
PSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJpbmRpbmc7Ci0JCWlmICh0aGlzLmluZmVyZW5jZUNv
bnRleHRzICE9IG51bGwpIHsKLQkJCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNl
Q29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7
Ci0JCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21l
IGZyb20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBk
b25lIChidXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVy
U29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQkJfQotCQl9Ci0JCXRoaXMu
YmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwotCQlyZXR1cm4gaGFzVXBkYXRlOwotCX0KKwkKKwkv
LyBTcmlrYW50aCAtIENoZWNrIC0gVGhlc2UgZG9uJ3QgbWFrZSBzZW5zZSBmb3IgRUNDID8gCiAJ
cHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCQlp
ZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQkJdGhpcy5pbmZlcmVuY2VDb250
ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dChtZXRob2QsIGluZkN0eDE4KTsKIAl9CisJCiAJcHVibGljIEluZmVyZW5jZUNvbnRleHQx
OCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkg
ewogCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQkJcmV0dXJuIG51bGw7
CiAJCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdl
dChtZXRob2QpOwogCX0KLQlwdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCQlyZXR1
cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgCi0JCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CisJCisJcHVibGljIEV4cHJlc3Np
b25bXSBhcmd1bWVudHMoKSB7CisJCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGlj
IGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQkJcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVu
Y2VIZWxwZXIgIT0gbnVsbDsKLQl9Ci0JcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewot
CQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbnVsbDsKLQl9Ci0JcHVibGljIElubmVySW5m
ZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkgewotCQlyZXR1cm4gdGhpcy5pbm5l
ckluZmVyZW5jZUhlbHBlcjsKLQl9Ci0KIAkvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6
IC0tCiAJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2Nv
cGUgc2NvcGUpIHsKIAkJcmV0dXJuIG5ldyBJbmZlcmVuY2VDb250ZXh0MTgoc2NvcGUsIHRoaXMu
YXJndW1lbnRzLCB0aGlzKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKaW5kZXggOTE4YjFiNC4uN2UxMzk2MCAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBy
ZXNzaW9uLmphdmEKQEAgLTYzLDcgKzYzLDcgQEAKIAlwdWJsaWMgQ29uc3RhbnQgY29uc3RhbnQ7
CiAKIAlwdWJsaWMgaW50IHN0YXRlbWVudEVuZCA9IC0xOwotCisJCiAJLy9Tb21lIGV4cHJlc3Np
b24gbWF5IG5vdCBiZSB1c2VkIC0gZnJvbSBhIGphdmEgc2VtYW50aWMgcG9pbnQKIAkvL29mIHZp
ZXcgb25seSAtIGFzIHN0YXRlbWVudHMuIE90aGVyIG1heS4gSW4gb3JkZXIgdG8gYXZvaWQgdGhl
IGNyZWF0aW9uCiAJLy9vZiB3cmFwcGVycyBhcm91bmQgZXhwcmVzc2lvbiBpbiBvcmRlciB0byB0
dW5lIHRoZW0gYXMgZXhwcmVzc2lvbgpAQCAtMTA2MCwxNiArMTA2MCw2IEBACiAJCX0KIAl9CiAJ
cmV0dXJuIGV4cHJlc3Npb25UeXBlOwotfQotCi0vKioKLSAqIE9uY2Ugb3V0ZXIgY29udGV4dHMg
aGF2ZSBmaW5hbGl6ZWQgdGhlIHRhcmdldCB0eXBlIGZvciB0aGlzIGV4cHJlc3Npb24sCi0gKiBw
ZXJmb3JtIGFueSBjaGVja3MgdGhhdCBtaWdodCBoYXZlIGJlZW4gZGVsYXllZCBwcmV2aW91c2x5
LgotICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIGZpbmFsIHRhcmdldCB0eXBlIChha2EgZXhwZWN0
ZWRUeXBlKSBmb3IgdGhpcyBleHByZXNzaW9uLgotICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBl
cnJvciByZXBvcnRpbmcKLSAqLwotcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFs
VGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsgLy8gc3ViY2xhc3NlcyBtYXkgY2hvb3NlIHRvIGRvIHJlYWwg
c3R1ZmYgaGVyZQogfQogCiAvKioKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRl
eCA1YWMxNGYyLi44YWY5Mjc4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHBy
ZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBA
IC0xMDksMTYgKzEwOSwxNiBAQAogCiAJcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxp
Y2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsK
IAkJaWYgKHRhcmdldFR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSB7Ci0JCQlp
ZiAobWV0aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQor
CQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5j
ZQogCQkJCWlmICgoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxl
bWVudCA9PSBtZXRob2QpCiAJCQkJCXJldHVybiBmYWxzZTsKIAkJCQlpZiAobWV0aG9kLmlzQ29u
c3RydWN0b3IoKSAmJiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5n
RWxlbWVudCA9PSBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJ
CX0gZWxzZSB7IC8vIGZvciBpbnRlcm5hbCBjYWxscworCQkJCXJldHVybiBmYWxzZTsKKwkJfSBl
bHNlIHsgLy8gZm9yIGludGVybmFsIGNhbGxzCiAJCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBl
VmFyaWFibGUgPSAoVHlwZVZhcmlhYmxlQmluZGluZykgdGFyZ2V0VHlwZTsKIAkJCQlpZiAodHlw
ZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQgaW5zdGFuY2VvZiBNZXRob2RCaW5kaW5nKQotCQkJ
CQlyZXR1cm4gZmFsc2U7Ci0JCQl9CisJCQkJcmV0dXJuIGZhbHNlOworCQl9CiAJCX0KIAkJcmV0
dXJuIHRydWU7CiAJfQpAQCAtMjAzLDExICsyMDMsNiBAQAogCQkJCWJyZWFrOwogCQl9CiAJCXJl
dHVybiBudWxsOwotCX0KLQotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRh
cmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0
VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1
cm4gcmVzb2x2ZVR5cGVFeHBlY3RpbmcodGhpcy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7
CiAJfQogCiAJY2xhc3MgVmlzaWJpbGl0eUluc3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlz
aXRvciB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUg
MTAwNjQ0CmluZGV4IDgzODFiNWMuLjAwMDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVy
ZW5jZUhlbHBlci5qYXZhCisrKyAvZGV2L251bGwKQEAgLTEsNDIgKzAsMCBAQAotLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAxNCBHSyBTb2Z0d2FyZSBBRy4KLSAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKLSAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcv
bGVnYWwvZXBsLXYxMC5odG1sCi0gKgotICogQ29udHJpYnV0b3JzOgotICogICAgIFN0ZXBoYW4g
SGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwotcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
OwotCi1pbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7Ci1pbXBvcnQgamF2YS51dGlsLk1hcDsKLQot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmlu
ZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVCaW5kaW5nOwotCi1wdWJsaWMgY2xhc3MgSW5uZXJJbmZlcmVuY2VIZWxwZXIgewotCi0JLyoq
IEZvciBlYWNoIGNhbmRpZGF0ZSBtZXRob2Qgc3RvcmUgaGVyZSB0aGUgYXJyYXkgb2YgYXJndW1l
bnQgdHlwZXMgaWYgaW5uZXIgaW5mZXJlbmNlIGhhcyBpbXByb3ZlZCBhbnkgZHVyaW5nIEludm9j
YXRpb24gVHlwZSBJbmZlcmVuY2UuICovCi0JcHJpdmF0ZSBNYXA8TWV0aG9kQmluZGluZyxUeXBl
QmluZGluZ1tdPiBhcmdUeXBlc1BlckNhbmRpZGF0ZSA9IG5ldyBIYXNoTWFwPE1ldGhvZEJpbmRp
bmcsVHlwZUJpbmRpbmdbXT4oKTsKLQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5uZXJSZXN1bHQo
TWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSwgaW50IGFyZ0Nv
dW50LCBpbnQgYXJnSWR4KSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5
cGVzUGVyQ2FuZGlkYXRlLmdldChtZXRob2QpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJ
CXRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUucHV0KG1ldGhvZCwgYXJnVHlwZXMgPSBuZXcgVHlw
ZUJpbmRpbmdbYXJnQ291bnRdKTsKLQkJYXJnVHlwZXNbYXJnSWR4XSA9IHJlc29sdmVkVHlwZTsK
LQl9Ci0JCi0JcHVibGljIFR5cGVCaW5kaW5nW10gZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0
ZShNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSwgVHlwZUJpbmRpbmdbXSBwbGFpbkFyZ1R5cGVzKSB7
Ci0JCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdl
dChjYW5kaWRhdGUpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXJldHVybiBwbGFpbkFy
Z1R5cGVzOwotCQkvLyBmaWxsIGluIGFueSBibGFua3Mgbm93OgotCQlmb3IgKGludCBpID0gMDsg
aSA8IGFyZ1R5cGVzLmxlbmd0aDsgaSsrKSB7Ci0JCQlpZiAoYXJnVHlwZXNbaV0gPT0gbnVsbCkK
LQkJCQlhcmdUeXBlc1tpXSA9IHBsYWluQXJnVHlwZXNbaV07Ci0JCX0KLQkJcmV0dXJuIGFyZ1R5
cGVzOwotCX0KLX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKaW5kZXggYWM1NDQ3Zi4uNmNkMzE4MSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9u
LmphdmEKQEAgLTE5LDE2ICsxOSwxMiBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiAKIC8qKgotICogQWJzdHJhY3Rpb24gZm9y
IGludm9jYXRpb24gQVNUIG5vZGVzIHRoYXQgY2FuIHRyaWdnZXIgCi0gKiA8dWw+Ci0gKiA8bGk+
SW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZXMgKDE4LjUuMSksIGFuZDwvbGk+IAot
ICogPGxpPkludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKDE4LjUuMikuPC9saT4KLSAqIDwvdWw+
Ci0gKi8KKyAqIEFic3RyYWN0aW9uIGZvciBpbnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0
cmlnZ2VyIG92ZXJsb2FkIHJlc29sdXRpb24uIAorKi8KIHB1YmxpYyBpbnRlcmZhY2UgSW52b2Nh
dGlvbiBleHRlbmRzIEludm9jYXRpb25TaXRlIHsKIAogCUV4cHJlc3Npb25bXSBhcmd1bWVudHMo
KTsKLQorCQogCS8qKgogCSAqIEFuc3dlciB0aGUgcmVzb2x2ZWQgbWV0aG9kIGJpbmRpbmcgb2Yg
dGhpcyBpbnZvY2F0aW9uLgogCSAqIElmIGEgdGFyZ2V0IHR5cGUgaXMgZ2l2ZW4sIHRoZSBpbnZv
Y2F0aW9uIGdldHMgYSBjaGFuY2UgdG8gZG8gcmVwZWF0ZWQgbWV0aG9kIGxvb2t1cC4KQEAgLTM4
LDUyICszNCwyMSBAQAogCSAqIAogCSAqLwogCU1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpOwotCisJ
CiAJLyoqCiAJICogUmVnaXN0ZXIgdGhlIGdpdmVuIGluZmVyZW5jZSBjb250ZXh0LCB3aGljaCBw
cm9kdWNlZCB0aGUgZ2l2ZW4gbWV0aG9kIGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVzdWx0LgogCSAq
IExhdGVyIHdoZW4gdGhlIHNhbWUgbWV0aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBtb3N0IHNwZWNp
ZmljIG1ldGhvZCwgdGhlIGluZmVyZW5jZSBjb250ZXh0Ci0JICogZm9yIHRoaXMgcGFpciAoSW52
b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0BsaW5rICNn
ZXRFeHByZXNzaW9uQ29udGV4dCgpfQorCSAqIGZvciB0aGlzIHBhaXIgKEludm9jYXRpb24geCBN
ZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0SW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl9CiAJICogdG8gY29udGludWUgdGhl
IHR5cGUgaW5mZXJlbmNlLgogCSAqLwogCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHgxOCk7CiAJCisKIAkvKioKLQkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVuY2UgY29udGV4
dCBmb3IgdGhlIGdpdmVuIG1ldGhvZCB3aGljaCBtdXN0IGhhdmUgYmVlbiByZWdpc3RlcmVkCi0J
ICogdXNpbmcge0BsaW5rICNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpfS4KKwkgKiBSZXRyaWV2ZSBh
biBpbmZlcmVuY2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZC4KIAkgKiBAcGFyYW0gbWV0
aG9kIGFuIGludGVybWVkaWF0ZSByZXNvbHZlZCBjYW5kaWRhdGUgZm9yIHRoaXMgaW52b2NhdGlv
bgotCSAqIHJldHVybiBhIHN1c3BlbmRlZCBpbmZlcmVuY2UgY29udGV4dCBvciBudWxsIGlmIG5v
bmUgd2FzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgbWV0aG9kLgorCSAqIHJldHVybiB0aGUgYXNzb2Np
YXRlZCBpbmZlcmVuY2UgY29udGV4dC4KIAkgKi8KIAlJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpOwogCi0JLyoq
Ci0JICogQW5zd2VyIHRydWUgaWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBkZXRlcm1pbmVkIGl0cyBi
aW5kaW5nIHVzaW5nIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFuIHVzZXNJbmZlcmVuY2UoKTsK
LQkKLQkvKioKLQkgKiBXaGVyZSB0aGUgQVNUIG5vZGUgbWF5IGhvbGQgcmVmZXJlbmNlcyB0byB0
aGUgcmVzdWx0cyBvZiBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlLAotCSAqIHRo
aXMgbWV0aG9kIGFsbG93cyB0byB1cGRhdGUgdGhvc2UgcmVmZXJlbmNlcyB0byB0aGUgcmVzdWx0
IG9mIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuCi0JICogTm90ZSB0aGF0IHBvdGVudGlhbGx5
IG1vcmUgdGhhbiBqdXN0IHRoZSBtZXRob2QgYmluZGluZyBpcyB1cGRhdGVkLgotCSAqIEBwYXJh
bSB1cGRhdGVkQmluZGluZyB0aGUgZmluYWwgbWV0aG9kIGJpbmRpbmcgYWZ0ZXIgZnVsbCBpbmZl
cmVuY2UKLQkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgdXNlZCBkdXJpbmcg
SW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZQotCSAqIEByZXR1cm4gdHJ1ZSBpZiBhbiB1cGRhdGUg
aGFzIGhhcHBlbmVkCi0JICovCi0JYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKTsKLQkKLQkvKioKLQkgKiBB
bnN3ZXIgd2hldGhlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGhhcyBpbm5lciBleHByZXNzaW9u
cyB0aGF0IHN0aWxsIG5lZWQgdXBkYXRpbmcgYWZ0ZXIgaW5mZXJlbmNlLgotCSAqLwotCWJvb2xl
YW4gaW5uZXJzTmVlZFVwZGF0ZSgpOwotCi0JLyoqCi0JICogTWFyayB0aGF0IHVwZGF0aW5nICh0
aGUgbmVlZCBmb3Igd2hpY2ggaXMgc2lnbmFsZWQgdmlhIHtAbGluayAjaW5uZXJzTmVlZFVwZGF0
ZSgpfSkgaGFzIGJlZW4gZG9uZS4KLQkgKi8KLQl2b2lkIGlubmVyVXBkYXRlRG9uZSgpOwotCi0J
LyoqCi0JICogSWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBhbnkgcG9seSBleHByZXNzaW9ucyBhcyBh
cmd1bWVudHMsIHRoaXMgbWV0aG9kIGFuc3dlcnMgYW4gaW5mZXJlbmNlIGhlbHBlciAKLQkgKiB0
aGF0IG1lZGlhdGVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLCBldmVuIGlmIG5vIGFjdHVh
bCBpbmZlcmVuY2UgaGFwcGVucyBmb3IgdGhpcyBpbnZvY2F0aW9uLgotCSAqLwotCUlubmVySW5m
ZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0phdmFkb2NBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9K
YXZhZG9jQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA1ZjIzMTA3Li41ZGE2ZTA5IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvSmF2YWRvY0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTQzLDIz
ICs0MywyMyBAQAogCQl9CiAKIAkJLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCi0J
CVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKKwkJ
dGhpcy5hcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19QQVJBTUVURVJTOwogCQlib29sZWFuIGhh
c1R5cGVWYXJBcmdzID0gZmFsc2U7CiAJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CiAJ
CQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7CiAJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1
bWVudHMubGVuZ3RoOwotCQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhd
OworCQkJdGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCQlm
b3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQkJRXhwcmVzc2lvbiBhcmd1bWVu
dCA9IHRoaXMuYXJndW1lbnRzW2ldOwogCQkJCWlmIChzY29wZS5raW5kID09IFNjb3BlLkNMQVNT
X1NDT1BFKSB7Ci0JCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZSgo
Q2xhc3NTY29wZSlzY29wZSk7CisJCQkJCXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50
LnJlc29sdmVUeXBlKChDbGFzc1Njb3BlKXNjb3BlKTsKIAkJCQl9IGVsc2UgewotCQkJCQlhcmd1
bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKEJsb2NrU2NvcGUpc2NvcGUpOwor
CQkJCQl0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZSgoQmxvY2tT
Y29wZSlzY29wZSk7CiAJCQkJfQotCQkJCWlmIChhcmd1bWVudFR5cGVzW2ldID09IG51bGwpIHsK
KwkJCQlpZiAodGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwpIHsKIAkJCQkJYXJnSGFzRXJy
b3IgPSB0cnVlOwogCQkJCX0gZWxzZSBpZiAoIWhhc1R5cGVWYXJBcmdzKSB7Ci0JCQkJCWhhc1R5
cGVWYXJBcmdzID0gYXJndW1lbnRUeXBlc1tpXS5pc1R5cGVWYXJpYWJsZSgpOworCQkJCQloYXNU
eXBlVmFyQXJncyA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXS5pc1R5cGVWYXJpYWJsZSgpOwogCQkJ
CX0KIAkJCX0KIAkJCWlmIChhcmdIYXNFcnJvcikgewpAQCAtNzgsMTMgKzc4LDEzIEBACiAJCX0K
IAogCQlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcp
IHRoaXMucmVzb2x2ZWRUeXBlOwotCQl0aGlzLmJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3Rv
cihhbGxvY2F0aW9uVHlwZSwgYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCXRoaXMuYmluZGluZyA9
IHNjb3BlLmdldENvbnN0cnVjdG9yKGFsbG9jYXRpb25UeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHRoaXMpOwogCQlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlSZWZl
cmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGVCaW5kaW5nID0gYWxsb2NhdGlvblR5cGU7CiAJCQlN
ZXRob2RCaW5kaW5nIGNvbnRydWN0b3JCaW5kaW5nID0gdGhpcy5iaW5kaW5nOwogCQkJd2hpbGUg
KCFjb250cnVjdG9yQmluZGluZy5pc1ZhbGlkQmluZGluZygpICYmIChlbmNsb3NpbmdUeXBlQmlu
ZGluZy5pc01lbWJlclR5cGUoKSB8fCBlbmNsb3NpbmdUeXBlQmluZGluZy5pc0xvY2FsVHlwZSgp
KSkgewogCQkJCWVuY2xvc2luZ1R5cGVCaW5kaW5nID0gZW5jbG9zaW5nVHlwZUJpbmRpbmcuZW5j
bG9zaW5nVHlwZSgpOwotCQkJCWNvbnRydWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0
b3IoZW5jbG9zaW5nVHlwZUJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQkJCWNvbnRy
dWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoZW5jbG9zaW5nVHlwZUJpbmRpbmcs
IHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJCQl9CiAJCQlpZiAoY29udHJ1Y3RvckJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCXRoaXMuYmluZGluZyA9IGNvbnRydWN0b3JCaW5k
aW5nOwpAQCAtOTIsNyArOTIsNyBAQAogCQl9CiAJCWlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKIAkJCS8vIEZpcnN0IHRyeSB0byBzZWFyY2ggYSBtZXRob2QgaW5zdGVhZAot
CQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gc2NvcGUuZ2V0TWV0aG9kKHRoaXMucmVz
b2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5zb3VyY2VOYW1lKCksIGFyZ3VtZW50VHlwZXMs
IHRoaXMpOworCQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gc2NvcGUuZ2V0TWV0aG9k
KHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5zb3VyY2VOYW1lKCksIHRoaXMu
YXJndW1lbnRUeXBlcywgdGhpcyk7CiAJCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQkJdGhpcy5iaW5kaW5nID0gbWV0aG9kQmluZGluZzsKIAkJCX0gZWxzZSB7CkBA
IC0xMDMsMjIgKzEwMywyMiBAQAogCQkJfQogCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwog
CQl9IGVsc2UgaWYgKHRoaXMuYmluZGluZy5pc1ZhcmFyZ3MoKSkgewotCQkJaW50IGxlbmd0aCA9
IGFyZ3VtZW50VHlwZXMubGVuZ3RoOwotCQkJaWYgKCEodGhpcy5iaW5kaW5nLnBhcmFtZXRlcnMu
bGVuZ3RoID09IGxlbmd0aCAmJiBhcmd1bWVudFR5cGVzW2xlbmd0aC0xXS5pc0FycmF5VHlwZSgp
KSkgewotCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGlu
Zyh0aGlzLmJpbmRpbmcsIHRoaXMuYmluZGluZy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJv
YmxlbVJlYXNvbnMuTm90Rm91bmQpOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRUeXBl
cy5sZW5ndGg7CisJCQlpZiAoISh0aGlzLmJpbmRpbmcucGFyYW1ldGVycy5sZW5ndGggPT0gbGVu
Z3RoICYmIHRoaXMuYXJndW1lbnRUeXBlc1tsZW5ndGgtMV0uaXNBcnJheVR5cGUoKSkpIHsKKwkJ
CQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5i
aW5kaW5nLCB0aGlzLmJpbmRpbmcuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgUHJvYmxl
bVJlYXNvbnMuTm90Rm91bmQpOwogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmphdmFkb2NJ
bnZhbGlkQ29uc3RydWN0b3IodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFyYXRpb25Nb2Rp
ZmllcnMoKSk7CiAJCQl9CiAJCX0gZWxzZSBpZiAoaGFzVHlwZVZhckFyZ3MpIHsKLQkJCU1ldGhv
ZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcs
IHRoaXMuYmluZGluZy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90
Rm91bmQpOworCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKHRoaXMuYmluZGluZywgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmphdmFkb2NJbnZhbGlkQ29uc3RydWN0b3IodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFy
YXRpb25Nb2RpZmllcnMoKSk7CiAJCX0gZWxzZSBpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKIAkJCVBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nIHBhcmFtTWV0aG9kQmluZGluZyA9IChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhp
cy5iaW5kaW5nOwogCQkJaWYgKHBhcmFtTWV0aG9kQmluZGluZy5oYXNTdWJzdGl0dXRlZFBhcmFt
ZXRlcnMoKSkgewotCQkJCWludCBsZW5ndGggPSBhcmd1bWVudFR5cGVzLmxlbmd0aDsKKwkJCQlp
bnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudFR5cGVzLmxlbmd0aDsKIAkJCQlmb3IgKGludCBpPTA7
IGk8bGVuZ3RoOyBpKyspIHsKLQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbU1l
dGhvZEJpbmRpbmcucGFyYW1ldGVyc1tpXSwgYXJndW1lbnRUeXBlc1tpXSkgJiYKLQkJCQkJCQlU
eXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW1NZXRob2RCaW5kaW5nLnBhcmFtZXRlcnNbaV0uZXJh
c3VyZSgpLCBhcmd1bWVudFR5cGVzW2ldLmVyYXN1cmUoKSkpIHsKLQkJCQkJCU1ldGhvZEJpbmRp
bmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMu
YmluZGluZy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQp
OworCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtTWV0aG9kQmluZGluZy5wYXJh
bWV0ZXJzW2ldLCB0aGlzLmFyZ3VtZW50VHlwZXNbaV0pICYmCisJCQkJCQkJVHlwZUJpbmRpbmcu
bm90RXF1YWxzKHBhcmFtTWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzW2ldLmVyYXN1cmUoKSwgdGhp
cy5hcmd1bWVudFR5cGVzW2ldLmVyYXN1cmUoKSkpIHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgcHJv
YmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuYmluZGlu
Zy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7
CiAJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jSW52YWxpZENvbnN0cnVjdG9y
KHRoaXMsIHByb2JsZW0sIHNjb3BlLmdldERlY2xhcmF0aW9uTW9kaWZpZXJzKCkpOwogCQkJCQkJ
YnJlYWs7CiAJCQkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2YWRvY01lc3NhZ2VTZW5k
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NNZXNzYWdlU2VuZC5qYXZhCmluZGV4IDg3ZGNjYzMu
LjliOGYwNjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2YWRvY01lc3NhZ2VTZW5kLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9KYXZhZG9jTWVzc2FnZVNlbmQuamF2YQpAQCAtNTAsMjMgKzUwLDIy
IEBACiAKIAkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAog
Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsK
IAkJYm9vbGVhbiBoYXNBcmdzVHlwZVZhciA9IGZhbHNlOwogCQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCkgewogCQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tz
IGFsbCBhcmd1bWVudHMKIAkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7Ci0J
CQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQl0aGlzLmFyZ3Vt
ZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKIAkJCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuZ3RoOyBpKyspewogCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50
c1tpXTsKIAkJCQlpZiAoc2NvcGUua2luZCA9PSBTY29wZS5DTEFTU19TQ09QRSkgewotCQkJCQlh
cmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKENsYXNzU2NvcGUpc2NvcGUp
OworCQkJCQl0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZSgoQ2xh
c3NTY29wZSlzY29wZSk7CiAJCQkJfSBlbHNlIHsKLQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IGFy
Z3VtZW50LnJlc29sdmVUeXBlKChCbG9ja1Njb3BlKXNjb3BlKTsKKwkJCQkJdGhpcy5hcmd1bWVu
dFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKEJsb2NrU2NvcGUpc2NvcGUpOwogCQkJ
CX0KLQkJCQlpZiAoYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsKSB7CisJCQkJaWYgKHRoaXMuYXJn
dW1lbnRUeXBlc1tpXSA9PSBudWxsKSB7CiAJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKIAkJCQl9
IGVsc2UgaWYgKCFoYXNBcmdzVHlwZVZhcikgewotCQkJCQloYXNBcmdzVHlwZVZhciA9IGFyZ3Vt
ZW50VHlwZXNbaV0uaXNUeXBlVmFyaWFibGUoKTsKKwkJCQkJaGFzQXJnc1R5cGVWYXIgPSB0aGlz
LmFyZ3VtZW50VHlwZXNbaV0uaXNUeXBlVmFyaWFibGUoKTsKIAkJCQl9CiAJCQl9CiAJCQlpZiAo
YXJnSGFzRXJyb3IpIHsKQEAgLTg2LDE3ICs4NSwxNyBAQAogCiAJCS8vIGJhc2UgdHlwZSBjYW5u
b3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQogCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUuaXNC
YXNlVHlwZSgpKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jRXJyb3JOb01l
dGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgc2Nv
cGUuZ2V0RGVjbGFyYXRpb25Nb2RpZmllcnMoKSk7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5qYXZhZG9jRXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwg
dGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJ
CXJldHVybiBudWxsOwogCQl9Ci0JCXRoaXMuYmluZGluZyA9IHNjb3BlLmdldE1ldGhvZCh0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgdGhpcyk7
CisJCXRoaXMuYmluZGluZyA9IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJaWYgKCF0aGlz
LmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJLy8gVHJ5IG1ldGhvZCBpbiBlbmNsb3Np
bmcgdHlwZXMKIAkJCVR5cGVCaW5kaW5nIGVuY2xvc2luZ1R5cGVCaW5kaW5nID0gdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGU7CiAJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSB0aGlzLmJp
bmRpbmc7CiAJCQl3aGlsZSAoIW1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSAmJiAoZW5j
bG9zaW5nVHlwZUJpbmRpbmcuaXNNZW1iZXJUeXBlKCkgfHwgZW5jbG9zaW5nVHlwZUJpbmRpbmcu
aXNMb2NhbFR5cGUoKSkpIHsKIAkJCQllbmNsb3NpbmdUeXBlQmluZGluZyA9IGVuY2xvc2luZ1R5
cGVCaW5kaW5nLmVuY2xvc2luZ1R5cGUoKTsKLQkJCQltZXRob2RCaW5kaW5nID0gc2NvcGUuZ2V0
TWV0aG9kKGVuY2xvc2luZ1R5cGVCaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVz
LCB0aGlzKTsKKwkJCQltZXRob2RCaW5kaW5nID0gc2NvcGUuZ2V0TWV0aG9kKGVuY2xvc2luZ1R5
cGVCaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOwogCQkJ
fQogCQkJaWYgKG1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCXRoaXMuYmlu
ZGluZyA9IG1ldGhvZEJpbmRpbmc7CkBAIC0xMDUsMTIgKzEwNCwxMiBAQAogCQkJCWVuY2xvc2lu
Z1R5cGVCaW5kaW5nID0gdGhpcy5hY3R1YWxSZWNlaXZlclR5cGU7CiAJCQkJTWV0aG9kQmluZGlu
ZyBjb250cnVjdG9yQmluZGluZyA9IHRoaXMuYmluZGluZzsKIAkJCQlpZiAoIWNvbnRydWN0b3JC
aW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgJiYgQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zZWxl
Y3RvciwgZW5jbG9zaW5nVHlwZUJpbmRpbmcuc2hvcnRSZWFkYWJsZU5hbWUoKSkpIHsKLQkJCQkJ
Y29udHJ1Y3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcigoUmVmZXJlbmNlQmluZGlu
ZyllbmNsb3NpbmdUeXBlQmluZGluZywgYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCQkJCWNvbnRy
dWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoKFJlZmVyZW5jZUJpbmRpbmcpZW5j
bG9zaW5nVHlwZUJpbmRpbmcsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJCQkJfQogCQkJ
CXdoaWxlICghY29udHJ1Y3RvckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSAmJiAoZW5jbG9zaW5n
VHlwZUJpbmRpbmcuaXNNZW1iZXJUeXBlKCkgfHwgZW5jbG9zaW5nVHlwZUJpbmRpbmcuaXNMb2Nh
bFR5cGUoKSkpIHsKIAkJCQkJZW5jbG9zaW5nVHlwZUJpbmRpbmcgPSBlbmNsb3NpbmdUeXBlQmlu
ZGluZy5lbmNsb3NpbmdUeXBlKCk7CiAJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0aGlz
LnNlbGVjdG9yLCBlbmNsb3NpbmdUeXBlQmluZGluZy5zaG9ydFJlYWRhYmxlTmFtZSgpKSkgewot
CQkJCQkJY29udHJ1Y3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcigoUmVmZXJlbmNl
QmluZGluZyllbmNsb3NpbmdUeXBlQmluZGluZywgYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCQkJ
CQljb250cnVjdG9yQmluZGluZyA9IHNjb3BlLmdldENvbnN0cnVjdG9yKChSZWZlcmVuY2VCaW5k
aW5nKWVuY2xvc2luZ1R5cGVCaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOwogCQkJ
CQl9CiAJCQkJfQogCQkJCWlmIChjb250cnVjdG9yQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7
CkBAIC0xNDAsNyArMTM5LDcgQEAKIAkJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5z
dGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CiAJCQkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdD
bGFzcyA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZTsKIAkJCQl9
IGVsc2UgewotCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jRXJyb3JOb01ldGhv
ZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgc2NvcGUu
Z2V0RGVjbGFyYXRpb25Nb2RpZmllcnMoKSk7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmphdmFkb2NFcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlLmdldERlY2xhcmF0aW9uTW9kaWZpZXJzKCkpOwogCQkJ
CQlyZXR1cm4gbnVsbDsKIAkJCQl9CiAJCQl9CkBAIC0xNTIsMTkgKzE1MSwxOSBAQAogCQkJfQog
CQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy5iaW5kaW5nID09IG51bGwgPyBudWxs
IDogdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCX0gZWxzZSBpZiAoaGFzQXJnc1R5cGVWYXIp
IHsKLQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0
aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25z
Lk5vdEZvdW5kKTsKKwkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9k
QmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywg
UHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2
YWRvY0ludmFsaWRNZXRob2QodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFyYXRpb25Nb2Rp
ZmllcnMoKSk7CiAJCX0gZWxzZSBpZiAodGhpcy5iaW5kaW5nLmlzVmFyYXJncygpKSB7Ci0JCQlp
bnQgbGVuZ3RoID0gYXJndW1lbnRUeXBlcy5sZW5ndGg7Ci0JCQlpZiAoISh0aGlzLmJpbmRpbmcu
cGFyYW1ldGVycy5sZW5ndGggPT0gbGVuZ3RoICYmIGFyZ3VtZW50VHlwZXNbbGVuZ3RoLTFdLmlz
QXJyYXlUeXBlKCkpKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1N
ZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZywgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywg
UHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRU
eXBlcy5sZW5ndGg7CisJCQlpZiAoISh0aGlzLmJpbmRpbmcucGFyYW1ldGVycy5sZW5ndGggPT0g
bGVuZ3RoICYmIHRoaXMuYXJndW1lbnRUeXBlc1tsZW5ndGgtMV0uaXNBcnJheVR5cGUoKSkpIHsK
KwkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhp
cy5iaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFz
b25zLk5vdEZvdW5kKTsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jSW52YWxp
ZE1ldGhvZCh0aGlzLCBwcm9ibGVtLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsK
IAkJCX0KIAkJfSBlbHNlIHsKLQkJCWludCBsZW5ndGggPSBhcmd1bWVudFR5cGVzLmxlbmd0aDsK
KwkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50VHlwZXMubGVuZ3RoOwogCQkJZm9yIChpbnQg
aT0wOyBpPGxlbmd0aDsgaSsrKSB7Ci0JCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyh0aGlz
LmJpbmRpbmcucGFyYW1ldGVyc1tpXS5lcmFzdXJlKCksIGFyZ3VtZW50VHlwZXNbaV0uZXJhc3Vy
ZSgpKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJp
bmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVt
UmVhc29ucy5Ob3RGb3VuZCk7CisJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyh0aGlzLmJp
bmRpbmcucGFyYW1ldGVyc1tpXS5lcmFzdXJlKCksIHRoaXMuYXJndW1lbnRUeXBlc1tpXS5lcmFz
dXJlKCkpKSB7CisJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9k
QmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywg
UHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5q
YXZhZG9jSW52YWxpZE1ldGhvZCh0aGlzLCBwcm9ibGVtLCBzY29wZS5nZXREZWNsYXJhdGlvbk1v
ZGlmaWVycygpKTsKIAkJCQkJYnJlYWs7CiAJCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9M
YW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpp
bmRleCA5NTcwNWE4Li40NzI5NTAxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMjM3
LDYgKzIzNyw3IEBACiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKQogCQkJCXRo
aXMuYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnR5cGUucmVzb2x2ZVR5cGUo
YmxvY2tTY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7CiAJCX0KKwkJCiAJCWlmICh0aGlz
LmV4cGVjdGVkVHlwZSA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NB
VElPTl9DT05URVhUKSB7CiAJCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKIAkJ
fSAKQEAgLTczNCwxMiArNzM1LDE0IEBACiAJCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJs
b2NrKSB7CiAJCQkJCWlmICh0aGlzLnJldHVybnNWb2lkKSB7CiAJCQkJCQl0aGlzLnNoYXBlQW5h
bHlzaXNDb21wbGV0ZSA9IHRydWU7CisJCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwogCQkJCQl9
CiAJCQkJfSBlbHNlIHsKLQkJCQkJZmluYWwgRXhwcmVzc2lvbiBleHByZXNzaW9uQm9keSA9IChF
eHByZXNzaW9uKSB0aGlzLmJvZHk7CisJCQkJCWZpbmFsIEV4cHJlc3Npb24gZXhwcmVzc2lvbkJv
ZHkgPSAoRXhwcmVzc2lvbikgY29weS5ib2R5OwogCQkJCQl0aGlzLnZvaWRDb21wYXRpYmxlID0g
dGhpcy5hc3Npc3ROb2RlID8gdHJ1ZSA6IGV4cHJlc3Npb25Cb2R5LnN0YXRlbWVudEV4cHJlc3Np
b24oKTsKIAkJCQkJdGhpcy52YWx1ZUNvbXBhdGlibGUgPSBleHByZXNzaW9uQm9keS5yZXNvbHZl
ZFR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRDsKIAkJCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxl
dGUgPSB0cnVlOworCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwogCQkJCX0KIAkJCQkvLyBEbyBu
b3QgcHJvY2VlZCB3aXRoIGRhdGEvY29udHJvbCBmbG93IGFuYWx5c2lzIGlmIHJlc29sdmUgZW5j
b3VudGVyZWQgZXJyb3JzLgogCQkJCWlmICh0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMg
fHwgZW5jbG9zaW5nU2NvcGVzSGF2ZUVycm9ycygpKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggMTVi
NmNhZC4uNDljZGY0MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQpAQCAtODAsNiArODAsOCBAQAogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWlzc2luZ1R5cGVCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmc7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5UGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbU1ldGhv
ZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5Qcm9ibGVtUmVhc29uczsKQEAgLTEwMSw2ICsxMDMsNyBAQAogCXB1YmxpYyBFeHByZXNzaW9u
IHJlY2VpdmVyOwogCXB1YmxpYyBjaGFyW10gc2VsZWN0b3I7CiAJcHVibGljIEV4cHJlc3Npb25b
XSBhcmd1bWVudHM7CisJcHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRp
bmcuTk9fUEFSQU1FVEVSUzsKIAlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nOwkJCQkJCQkv
LyBleGFjdCBiaW5kaW5nIHJlc3VsdGluZyBmcm9tIGxvb2t1cAogCXB1YmxpYyBNZXRob2RCaW5k
aW5nIHN5bnRoZXRpY0FjY2Vzc29yOwkJCQkJCS8vIHN5bnRoZXRpYyBhY2Nlc3NvciBmb3IgaW5u
ZXItZW11bGF0aW9uCiAJcHVibGljIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZTsJCQkJCS8vIGZv
ciBnZW5lcmljIG1ldGhvZCBpbnZvY2F0aW9uIChyZXR1cm4gdHlwZSBpbmZlcmVuY2UpCkBAIC0x
MTUsOSArMTE4LDkgQEAKIAogCSAvLyBob2xkIG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9j
YXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVy
ZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUv
KjxQR01CLEluZmVyZW5jZUNvbnRleHQxOD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcm90ZWN0
ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci0KLXB1YmxpYyBG
bG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQg
Zmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CisJcHJpdmF0ZSBib29sZWFuIHJlY2Vp
dmVySXNUeXBlOworCXByb3RlY3RlZCBib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKKwlwdWJsaWMg
Rmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0
IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgewogCWJvb2xlYW4gbm9uU3RhdGljID0g
IXRoaXMuYmluZGluZy5pc1N0YXRpYygpOwogCWJvb2xlYW4gd2FzSW5zaWRlQXNzZXJ0ID0gKChm
bG93Q29udGV4dC50YWdCaXRzICYgRmxvd0NvbnRleHQuSElERV9OVUxMX0NPTVBBUklTT05fV0FS
TklORykgIT0gMCk7CiAJZmxvd0luZm8gPSB0aGlzLnJlY2VpdmVyLmFuYWx5c2VDb2RlKGN1cnJl
bnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvLCBub25TdGF0aWMpLnVuY29uZGl0aW9uYWxJ
bml0cygpOwpAQCAtNTg4LDEyMiArNTkxLDExOCBAQAogfQogCiBwdWJsaWMgVHlwZUJpbmRpbmcg
cmVzb2x2ZVR5cGUoQmxvY2tTY29wZSBzY29wZSkgewotCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJl
IHJldHVybiB0eXBlCisJLy8gQW5zd2VyIHRoZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUsIGFuc3dl
cnMgUG9seVR5cGVCaW5kaW5nIGlmIHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBnZW5lcmljIG92ZXJs
b2FkZWQgY2FuZGlkYXRlIHRoYXQgZW5jb2RlZCB0eXBlIHZhcmlhYmxlcyBpbiByZXR1cm4gdHlw
ZSBhbmQgdGhlcmUgaXMgbm8gdGFyZ2V0IHR5cGUgIAogCS8vIEJhc2UgdHlwZSBwcm9tb3Rpb24K
KwlpZiAodGhpcy5jb25zdGFudCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQpIHsKKwkJdGhpcy5j
b25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsKKwkJbG9uZyBzb3VyY2VMZXZlbCA9IHNj
b3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsOworCQlib29sZWFuIHJlY2VpdmVyQ2Fz
dCA9IGZhbHNlOworCQlpZiAodGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9u
KSB7CisJCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlD
YXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJCXJlY2VpdmVyQ2FzdCA9IHRydWU7
CisJCX0KKwkJdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVU
eXBlKHNjb3BlKTsKKwkJdGhpcy5yZWNlaXZlcklzVHlwZSA9IHRoaXMucmVjZWl2ZXIgaW5zdGFu
Y2VvZiBOYW1lUmVmZXJlbmNlICYmICgoKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2ZXIpLmJp
dHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7CisJCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkgeworCQkJLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJp
bmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJl
IG5vdGlmaWVkCisJCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Np
b24pdGhpcy5yZWNlaXZlcikuZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlKSkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2Fz
dCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7CisJCQl9CisJCX0KKwkJLy8gcmVzb2x2
ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRo
aXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJn
dW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJ
dGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCVR5cGVSZWZlcmVuY2UgdHlw
ZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoKHRoaXMuZ2VuZXJp
Y1R5cGVBcmd1bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVl
IC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7
CisJCQkJfQorCQkJCWlmIChhcmdIYXNFcnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2Yg
V2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZX
aWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKKwkJCQl9CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3Ip
IHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRv
IHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3Vt
ZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVz
b2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQor
CQl9CisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBm
YWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJCQlpbnQgbGVuZ3RoID0gdGhpcy5h
cmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5n
W2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKKwkJCQlFeHBy
ZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkJaWYgKHRoaXMuYXJndW1l
bnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5k
IHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBDYXN0RXhwcmVzc2lvbikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9IEFTVE5vZGUuRGlz
YWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJCXRo
aXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhwcmVz
c2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CisJCQkJCWFy
Z0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJ
CQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5n
KSB7CisJCQkJCS8vICByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBo
aW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVk
b0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0
aDsgLS1pID49IDA7KQorCQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tp
XSA9PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8g
cmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCiAKLQl0aGlzLmNvbnN0YW50
ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50OwotCWxvbmcgc291cmNlTGV2ZWwgPSBzY29wZS5jb21w
aWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbDsKLQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNl
LCBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5yZWNlaXZlciBpbnN0YW5jZW9m
IENhc3RFeHByZXNzaW9uKSB7Ci0JCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBBU1ROb2RlLkRpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQlyZWNlaXZl
ckNhc3QgPSB0cnVlOwotCX0KLQlpZiAodGhpcy5yZWNlaXZlci5yZXNvbHZlZFR5cGUgIT0gbnVs
bCkKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJSZWNl
aXZlciB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMt
MSQKLQl0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2ZXIucmVzb2x2ZVR5cGUo
c2NvcGUpOwotCWJvb2xlYW4gcmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJlY2VpdmVyIGluc3RhbmNl
b2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5iaXRz
ICYgQmluZGluZy5UWVBFKSAhPSAwOwotCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1YWxS
ZWNlaXZlclR5cGUgIT0gbnVsbCkgewotCQkgLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcg
Y2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5v
dGlmaWVkCi0JCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lvbil0
aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUpKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3QoKENh
c3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOwotCQl9Ci0JfQotCS8vIHJlc29sdmUgdHlwZSBh
cmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlwZUFy
Z3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVu
Z3RoOwotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJdGhpcy5nZW5lcmlj
VHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0g
MDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2UgPSB0
aGlzLnR5cGVBcmd1bWVudHNbaV07Ci0JCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNb
aV0gPSB0eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5k
cyovKSkgPT0gbnVsbCkgewotCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKLQkJCX0KLQkJCWlmIChh
cmdIYXNFcnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKLQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVu
Y2UpOwotCQkJfQotCQl9Ci0JCWlmIChhcmdIYXNFcnJvcikgewotCQkJaWYgKHRoaXMuYXJndW1l
bnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cwotCQkJ
CWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkr
KykgewotCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7Ci0JCQkJfQot
CQkJfQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQl9Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBh
ZnRlciBhcmdzIGFyZSByZXNvbHZlZAotCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJp
bmRpbmcuTk9fUEFSQU1FVEVSUzsKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQli
b29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwot
CQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQlhcmd1bWVudFR5cGVzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYg
KHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKLQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVj
dGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJaWYgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IEFT
VE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9u
Ci0JCQkJYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKLQkJCX0KLQkJCWFyZ3VtZW50LnNldEV4cHJl
c3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQlpZiAoKGFyZ3VtZW50VHlwZXNb
aV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewotCQkJCWFyZ0hhc0Vy
cm9yID0gdHJ1ZTsKLQkJCX0KLQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84KSB7Ci0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKQotCQkJCQl8
fCAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1bWVu
dCkudXNlc0luZmVyZW5jZSgpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lcklu
ZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsK
LQkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRp
bmcpIHsKLQkJCQkvLyAgcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQg
aGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVk
b0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3Ro
OyAtLWkgPj0gMDspCi0JCQkJCXBzZXVkb0FyZ3NbaV0gPSBhcmd1bWVudFR5cGVzW2ldID09IG51
bGwgPyBUeXBlQmluZGluZy5OVUxMIDogYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdz
IHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCi0JCQkJdGhpcy5iaW5kaW5nID0KLQkJCQkJdGhp
cy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpCi0JCQkJCQk/IHNjb3BlLmdldEltcGxpY2l0TWV0
aG9kKHRoaXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMpCi0JCQkJCQk6IHNjb3BlLmZpbmRN
ZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNl
bGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7Ci0JCQkJaWYgKHRoaXMuYmluZGluZyAh
PSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQlNZXRob2RC
aW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5n
KS5jbG9zZXN0TWF0Y2g7Ci0JCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9yIGNs
aWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNo
Ci0JCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewotCQkJCQkJaWYgKGNsb3Nlc3RNYXRj
aC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykg
eyAvLyBnZW5lcmljIG1ldGhvZAotCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2VuZXJpYyBt
ZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3IG1ldGhv
ZCAoMTc1NDA5KQotCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3Jl
YXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChS
YXdUeXBlQmluZGluZyludWxsKTsKLQkJCQkJCX0KLQkJCQkJCXRoaXMuYmluZGluZyA9IGNsb3Nl
c3RNYXRjaDsKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9z
ZXN0TWF0Y2gub3JpZ2luYWwoKTsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09y
RW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nl
c3RNYXRjaE9yaWdpbmFsKSkgewotCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRob2Qg
aXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVjdCByZWN1cnNpb25z
KQotCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVy
TW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2Vp
dmVyLmlzSW1wbGljaXRUaGlzKCkgPworCQkJCQkJCQlzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0
aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKSA6CisJCQkJCQkJCQlzY29wZS5maW5kTWV0
aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxl
Y3RvciwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOworCisJCQkJCWlmICh0aGlzLmJpbmRpbmcg
IT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCQkJCU1ldGhv
ZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRp
bmcpLmNsb3Nlc3RNYXRjaDsKKwkJCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9y
IGNsaWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1h
dGNoCisJCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKKwkJCQkJCQlpZiAoY2xvc2Vz
dE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFC
TEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCisJCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2Vu
ZXJpYyBtZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3
IG1ldGhvZCAoMTc1NDA5KQorCQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVu
dCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5h
bCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7CisJCQkJCQkJfQorCQkJCQkJCXRoaXMuYmluZGlu
ZyA9IGNsb3Nlc3RNYXRjaDsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdp
bmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9y
aWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5N
ZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7CisJCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3
aGVyZSBtZXRob2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVj
dCByZWN1cnNpb25zKQorCQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0g
RXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJCQl9CiAJCQkJCQl9
CiAJCQkJCX0KIAkJCQl9CisJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJaWYgKHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlID09IG51bGwpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCS8v
IGJhc2UgdHlwZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQorCQlpZiAodGhpcy5hY3R1YWxS
ZWNlaXZlclR5cGUuaXNCYXNlVHlwZSgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5l
cnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMpOwogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9Ci0JaWYgKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlID09IG51bGwpIHsKLQkJcmV0dXJuIG51bGw7CisJCisJVHlwZUJpbmRpbmcgbWV0
aG9kVHlwZSA9IGZpbmRNZXRob2RCaW5kaW5nKHNjb3BlKTsKKwlpZiAobWV0aG9kVHlwZSAhPSBu
dWxsICYmIG1ldGhvZFR5cGUuaXNQb2x5VHlwZSgpKSB7CisJCXRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy5iaW5kaW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOwor
CQlyZXR1cm4gbWV0aG9kVHlwZTsKIAl9Ci0JLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFu
eSBtZXNzYWdlCi0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgewot
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0
dWFsUmVjZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0J
ZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUsIGFyZ3VtZW50VHlwZXMpOwogCiAJaWYgKCF0aGlzLmJp
bmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0Ns
YXNzID09IG51bGwpIHsKIAkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9m
IFJlZmVyZW5jZUJpbmRpbmcpIHsKIAkJCQl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPSAo
UmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGU7CiAJCQl9IGVsc2Ugewot
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5h
Y3R1YWxSZWNlaXZlclR5cGUsIGFyZ3VtZW50VHlwZXMpOworCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRo
aXMuYXJndW1lbnRUeXBlcyk7CiAJCQkJcmV0dXJuIG51bGw7CiAJCQl9CiAJCX0KQEAgLTcxNSw2
ICs3MTQsNyBAQAogCQkJCQkJCQkgZGVjbGFyaW5nQ2xhc3Muc3VwZXJjbGFzcygpIGluc3RhbmNl
b2YgTWlzc2luZ1R5cGVCaW5kaW5nOwogCQlpZiAoIWF2b2lkU2Vjb25kYXJ5KQogCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworCQkK
IAkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRo
aXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVt
SWQoKSkgewogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgpAQCAtNzczLDcgKzc3
Myw3IEBACiAJfQogCWlmICghdGhpcy5iaW5kaW5nLmlzU3RhdGljKCkpIHsKIAkJLy8gdGhlICJy
ZWNlaXZlciIgbXVzdCBub3QgYmUgYSB0eXBlCi0JCWlmIChyZWNlaXZlcklzVHlwZSkgeworCQlp
ZiAodGhpcy5yZWNlaXZlcklzVHlwZSkgewogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubXVz
dFVzZUFTdGF0aWNNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJCWlmICh0aGlzLmFjdHVh
bFJlY2VpdmVyVHlwZS5pc1Jhd1R5cGUoKQogCQkJCQkmJiAodGhpcy5yZWNlaXZlci5iaXRzICYg
QVNUTm9kZS5JZ25vcmVSYXdUeXBlQ2hlY2spID09IDAKQEAgLTc5MiwxNCArNzkyLDE0IEBACiAJ
CX0KIAl9IGVsc2UgewogCQkvLyBzdGF0aWMgbWVzc2FnZSBpbnZva2VkIHRocm91Z2ggcmVjZWl2
ZXI/IGxlZ2FsIGJ1dCB1bm9wdGltYWwgKG9wdGlvbmFsIHdhcm5pbmcpLgotCQlpZiAoISh0aGlz
LnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkgfHwgdGhpcy5yZWNlaXZlci5pc1N1cGVyKCkgfHwg
cmVjZWl2ZXJJc1R5cGUpKSB7CisJCWlmICghKHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMo
KSB8fCB0aGlzLnJlY2VpdmVyLmlzU3VwZXIoKSB8fCB0aGlzLnJlY2VpdmVySXNUeXBlKSkgewog
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubm9uU3RhdGljQWNjZXNzVG9TdGF0aWNNZXRob2Qo
dGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJfQogCQlpZiAoIXRoaXMucmVjZWl2ZXIuaXNJbXBsaWNp
dFRoaXMoKSAmJiBUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy5iaW5kaW5nLmRlY2xhcmluZ0Ns
YXNzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSkpIHsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmluZGlyZWN0QWNjZXNzVG9TdGF0aWNNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJ
fQogCX0KLQlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCB0aGlzLnJlY2VpdmVy
LCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywg
YXJndW1lbnRUeXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgeworCWlmIChjaGVja0ludm9j
YXRpb25Bcmd1bWVudHMoc2NvcGUsIHRoaXMucmVjZWl2ZXIsIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRo
aXMuYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgewogCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5VbmNo
ZWNrZWQ7CiAJfQogCkBAIC04NDYsNyArODQ2LDcgQEAKIAl9CiAJaWYgKHRoaXMucmVjZWl2ZXIu
aXNTdXBlcigpICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzSW50ZXJmYWNlKCkpIHsKIAkJ
Ly8gMTUuMTIuMyAoSmF2YSA4KQotCQlzY29wZS5jaGVja0FwcHJvcHJpYXRlTWV0aG9kQWdhaW5z
dFN1cGVycyh0aGlzLnNlbGVjdG9yLCB0aGlzLmJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHRoaXMp
OworCQlzY29wZS5jaGVja0FwcHJvcHJpYXRlTWV0aG9kQWdhaW5zdFN1cGVycyh0aGlzLnNlbGVj
dG9yLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJfQogCWlmICh0
aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcub3JpZ2luYWwoKS50eXBl
VmFyaWFibGVzID09IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKIAkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0
aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50
cyk7CkBAIC04NTYsMTcgKzg1NiwyMCBAQAogCQkJCT8gdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQk6
IG51bGw7CiB9Ci0vKioKLSAqIEZpbmQgdGhlIG1ldGhvZCBiaW5kaW5nOyAKLSAqIGlmIHRoaXMu
aW5uZXJzTmVlZFVwZGF0ZSBhbGxvdyBmb3IgdHdvIGF0dGVtcHRzIHdoZXJlIHRoZSBmaXJzdCBy
b3VuZCBtYXkgc3RvcAotICogYWZ0ZXIgYXBwbGljYWJpbGl0eSBjaGVja2luZyAoMTguNS4xKSB0
byBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24gaW50byB0aGUgZmluYWwKLSAqIGludm9jYXRpb24g
dHlwZSBpbmZlcmVuY2UgKDE4LjUuMikuCi0gKi8KLXByb3RlY3RlZCB2b2lkIGZpbmRNZXRob2RC
aW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewot
CXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJPyBzY29w
ZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKQot
CQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0
b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOwotCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50
cyh0aGlzLCB0aGlzLmJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKworcHJvdGVjdGVk
IFR5cGVCaW5kaW5nIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkKKwl0
aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkgPyAKKwkJCQkgIHNj
b3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywg
dGhpcykgCisJCQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRo
aXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCisJaWYgKHRoaXMuYmlu
ZGluZyA9PSBudWxsKSAvLyBjYW4ndCBoYXBwZW4gPyBJIHRoaW5rIHdlIGFsd2F5cyBnZXQgYSBw
cm9ibGVtIGJpbmRpbmcsIGFueXdheXMuCisJCXJldHVybiBudWxsOworCQorCWlmICh0aGlzLmJp
bmRpbmcgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQor
CQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKKwkKKwlyZXNvbHZlUG9seUV4cHJl
c3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNj
b3BlKTsKIAkKIAkvKiBUaGVyZSBhcmUgZW1iZWRkZWQgYXNzdW1wdGlvbnMgaW4gdGhlIEpMUzgg
dHlwZSBpbmZlcmVuY2Ugc2NoZW1lIHRoYXQgYSBzdWNjZXNzZnVsIHNvbHV0aW9uIG9mIHRoZSB0
eXBlIGVxdWF0aW9ucyByZXN1bHRzIGluIGFuCiAJICAgYXBwbGljYWJsZSBtZXRob2QuIFRoaXMg
YXBwZWFycyB0byBiZSBhIHRlbnVvdXMgYXNzdW1wdGlvbiwgYXQgbGVhc3Qgb25lIG5vdCBtYWRl
IGJ5IHRoZSBKTFM3IGVuZ2luZSBvciB0aGUgcmVmZXJlbmNlIGNvbXBpbGVyIGFuZCAKQEAgLTg4
MCwxMSArODgzLDggQEAKIAlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0g
c2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZl
bCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxp
ZEJpbmRpbmcoKSkgewogCQlpZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5
cGVDb21wYXRpYmlsaXR5Q2hlY2spCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5n
LnJldHVyblR5cGU7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwZ21iID0g
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nOwotCQlJbmZl
cmVuY2VDb250ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChwZ21iKTsKLQkJaWYgKGN0
eCA9PSBudWxsIHx8IGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJ
TkdTX1VQREFURUQpCi0JCQlyZXR1cm47CiAJCWludCBsZW5ndGggPSBwZ21iLnR5cGVBcmd1bWVu
dHMgPT0gbnVsbCA/IDAgOiBwZ21iLnR5cGVBcmd1bWVudHMubGVuZ3RoOwogCQlib29sZWFuIHNh
d1Jhd1R5cGUgPSBmYWxzZTsKIAkJZm9yIChpbnQgaSA9IDA7ICBpIDwgbGVuZ3RoOyBpKyspIHsK
QEAgLTg5Myw0MCArODkzLDI2IEBACiAJCQkgICBkb2VzIG5vdCBhcHBlYXIgZnVsbHkgaG9va2Vk
IHVwIGludG8gaXNDb21wYXRpYmxlV2l0aCBhbmQgaXNFcXVpdmFsZW50IHRvIGV2ZXJ5d2hlcmUu
IEF0IHRoZSBtb21lbnQsIGJhaWwgb3V0IGlmIHdlIHNlZSBjYXB0dXJlLgogCQkJKi8gICAKIAkJ
CWlmIChwZ21iLnR5cGVBcmd1bWVudHNbaV0uaXNDYXB0dXJlKCkpCi0JCQkJcmV0dXJuOworCQkJ
CXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJCWlmIChwZ21iLnR5cGVBcmd1bWVu
dHNbaV0uaXNSYXdUeXBlKCkpCiAJCQkJc2F3UmF3VHlwZSA9IHRydWU7CiAJCX0KIAkJaWYgKCFz
YXdSYXdUeXBlKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBl
OwogCQlsZW5ndGggPSB0aGlzLmFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRz
Lmxlbmd0aDsKIAkJaWYgKGxlbmd0aCA9PSAwKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMu
YmluZGluZy5yZXR1cm5UeXBlOwogCQlUeXBlQmluZGluZyBbXSBmaW5hbEFyZ3VtZW50VHlwZXMg
PSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7
IGkrKykgewogCQkJVHlwZUJpbmRpbmcgZmluYWxBcmd1bWVudFR5cGUgPSB0aGlzLmFyZ3VtZW50
c1tpXS5yZXNvbHZlZFR5cGU7CiAJCQlpZiAoZmluYWxBcmd1bWVudFR5cGUgPT0gbnVsbCB8fCAh
ZmluYWxBcmd1bWVudFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgIC8vIGFscmVhZHkgc2lkZWQgd2l0
aCB0aGUgZGV2aWwuCi0JCQkJcmV0dXJuOworCQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJu
VHlwZTsKIAkJCWZpbmFsQXJndW1lbnRUeXBlc1tpXSA9IGZpbmFsQXJndW1lbnRUeXBlOyAKIAkJ
fQotCQlpZiAoc2NvcGUucGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywg
ZmluYWxBcmd1bWVudFR5cGVzLCBmYWxzZSwgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxF
KQorCQlpZiAoc2NvcGUucGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywg
ZmluYWxBcmd1bWVudFR5cGVzLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCiAJCQl0
aGlzLmJpbmRpbmcgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLm9yaWdp
bmFsKCksIHRoaXMuYmluZGluZy5zZWxlY3RvciwgZmluYWxBcmd1bWVudFR5cGVzLCBQcm9ibGVt
UmVhc29ucy5Ob3RGb3VuZCk7CiAJfQotfQotCi1AT3ZlcnJpZGUKLXB1YmxpYyBUeXBlQmluZGlu
ZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2Nv
cGUgc2NvcGUpIHsKLQlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZl
cmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsK
LQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4
dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsK
LQkJCU1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlw
ZSh0aGlzLCAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcp
OwotCQkJaWYgKHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgewot
CQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRC
aW5kaW5nLCBzY29wZSk7Ci0JCQl9Ci0JCX0KLQl9Ci0JcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBl
OworCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIH0KIAogcHVibGljIHZvaWQgc2V0
QWN0dWFsUmVjZWl2ZXJUeXBlKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CkBAIC05
NjIsNiArOTQ4LDM5IEBACiAJICovCiAJcmV0dXJuIGlzUG9seUV4cHJlc3Npb24odGhpcy5iaW5k
aW5nKTsKIH0KKworcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCVR5cGVCaW5kaW5nIG9sZEV4cGVjdGVk
VHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0g
dGFyZ2V0VHlwZTsKKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSB0aGlzLnJlY2VpdmVyLmlzSW1w
bGljaXRUaGlzKCkgPyAKKwkJCQkgIHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0
b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykgCisJCQkJOiBzY29wZS5nZXRNZXRob2QodGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywg
dGhpcyk7CisJCWlmIChtZXRob2QgPT0gbnVsbCB8fCAhbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkg
fHwgbWV0aG9kLnJldHVyblR5cGUgPT0gbnVsbCB8fCAhbWV0aG9kLnJldHVyblR5cGUuaXNWYWxp
ZEJpbmRpbmcoKSkKKwkJCXJldHVybiBmYWxzZTsKKwkJcmV0dXJuIHN1cGVyLmlzQm94aW5nQ29t
cGF0aWJsZShtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCks
IHRhcmdldFR5cGUsIHRoaXMsIHNjb3BlKTsKKwl9IGZpbmFsbHkgeworCQl0aGlzLmV4cGVjdGVk
VHlwZSA9IG9sZEV4cGVjdGVkVHlwZTsKKwl9Cit9CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0
aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgZmluYWwgU2NvcGUgc2NvcGUpIHsKKwlU
eXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwl0cnkgewor
CQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7CisJCU1ldGhvZEJpbmRpbmcgbWV0aG9k
ID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8gCisJCQkJICBzY29wZS5nZXRJbXBs
aWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpIAorCQkJ
CTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9y
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQorCQlpZiAobWV0aG9kID09IG51bGwgfHwg
IW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5UeXBlID09IG51bGwgfHwg
IW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4gZmFsc2U7CisJ
CQkKKwkJcmV0dXJuIG1ldGhvZC5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNl
RW5kKS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwl9IGZpbmFsbHkgewor
CQl0aGlzLmV4cGVjdGVkVHlwZSA9IG9sZEV4cGVjdGVkVHlwZTsKKwl9Cit9CisKIC8qKiBWYXJp
YW50IG9mIGlzUG9seUV4cHJlc3Npb24oKSB0byBiZSB1c2VkIGR1cmluZyB0eXBlIGluZmVyZW5j
ZSwgd2hlbiBhIHJlc29sdXRpb24gY2FuZGlkYXRlIGV4aXN0cy4gKi8KIHB1YmxpYyBib29sZWFu
IGlzUG9seUV4cHJlc3Npb24oTWV0aG9kQmluZGluZyByZXNvbHV0aW9uQ2FuZGlkYXRlKSB7CiAJ
aWYgKHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gQVNTSUdOTUVOVF9DT05URVhUICYmIHRoaXMu
ZXhwcmVzc2lvbkNvbnRleHQgIT0gSU5WT0NBVElPTl9DT05URVhUKQpAQCAtMTAyNSw2ICsxMDQ0
LDcgQEAKIAlyZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwogfQogLy8gLS0g
aW50ZXJmYWNlIEludm9jYXRpb246IC0tCisvLyBTcmlrYW50aCBjaGVjayAtIHJlcG9ydEVycm9y
cyAmIFNjb3BlIGRvbid0IG1ha2Ugc2Vuc2UuCiBwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5n
KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29w
ZSkgewogCWlmIChyZXBvcnRFcnJvcnMpIHsKIAkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQpA
QCAtMTAzNCwxMiArMTA1NCw3IEBACiAJfQogCXJldHVybiB0aGlzLmJpbmRpbmc7CiB9Ci1wdWJs
aWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKLQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7Ci19
Ci1wdWJsaWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7Ci0JcmV0
dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7Ci19CisKIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRh
YmxlKCk7CkBAIC0xMDUwLDMyICsxMDY1LDExIEBACiAJCXJldHVybiBudWxsOwogCXJldHVybiAo
SW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwog
fQotcHVibGljIGJvb2xlYW4gdXNlc0luZmVyZW5jZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGlu
ZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBn
ZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRo
aXMuYmluZGluZykgIT0gbnVsbDsKK3B1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewor
CXJldHVybiB0aGlzLmFyZ3VtZW50czsKIH0KLXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdz
KE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsK
LQlib29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlp
ZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyAhPSBudWxsKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQx
OCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucmVtb3Zl
S2V5KHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBp
bnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhpcy5p
bmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlv
biBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRo
aXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8
PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0K
LQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUg
PSB1cGRhdGVkQmluZGluZy5yZXR1cm5UeXBlOwotCXJldHVybiBoYXNVcGRhdGU7Ci19Ci1wdWJs
aWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyICE9IG51bGw7Ci19Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0J
dGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVu
Y2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXI7CitwdWJsaWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRl
eHQoKSB7CisJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CiB9CiAvLyAtLSBJbnRlcmZh
Y2UgSW52b2NhdGlvblNpdGU6IC0tCiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5m
ZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFs
aWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxv
Y2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDU5MjBhODAuLmQ5YWIwNzAgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTM5NiwxMCArMzk2
LDEwIEBACiAJCX0KIAogCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJl
c29sdmVkCi0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1F
VEVSUzsKKwkJdGhpcy5hcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19QQVJBTUVURVJTOwogCQlp
ZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewogCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1l
bnRzLmxlbmd0aDsKLQkJCWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsK
KwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwogCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCUV4cHJlc3Npb24gYXJndW1lbnQg
PSB0aGlzLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhw
cmVzc2lvbikgewpAQCAtNDA3LDEyICs0MDcsOCBAQAogCQkJCQlhcmdzQ29udGFpbkNhc3QgPSB0
cnVlOwogCQkJCX0KIAkJCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9O
X0NPTlRFWFQpOwotCQkJCWlmICgoYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVU
eXBlKHNjb3BlKSkgPT0gbnVsbCl7CisJCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBh
cmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewogCQkJCQloYXNFcnJvciA9IHRy
dWU7Ci0JCQkJfQotCQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRL
MV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKGFyZ3VtZW50IGluc3RhbmNl
b2YgSW52b2NhdGlvbiAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkp
KSB7Ci0JCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCQl0
aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7CiAJ
CQkJfQogCQkJfQogCQl9CkBAIC00MzMsNyArNDI5LDcgQEAKIAkJCQkJaW50IGxlbmd0aCA9IHRo
aXMuYXJndW1lbnRzICA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKIAkJCQkJ
VHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCQkJ
CWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewotCQkJCQkJcHNldWRvQXJnc1tpXSA9
IGFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiBhcmd1bWVudFR5
cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKKwkJCQkJ
CXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5k
aW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVy
cm9ycyB3aXRoIG51bGwgdHlwZQogCQkJCQl9CiAJCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZp
bmRNZXRob2QocmVmZXJlbmNlUmVjZWl2ZXIsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJn
cywgdGhpcywgZmFsc2UpOwogCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMu
YmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CkBAIC00NjksNyArNDY1LDcgQEAKIAkJCQlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSByZWNlaXZlclR5cGU7CiAJCQl9CiAJCQlpZiAoaXNEaWFt
b25kKSB7Ci0JCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlw
ZXMoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgcmVjZWl2ZXJUeXBlLCByZWNlaXZlclR5cGUu
ZW5jbG9zaW5nVHlwZSgpLCBhcmd1bWVudFR5cGVzLCBzY29wZSk7CisJCQkJVHlwZUJpbmRpbmcg
W10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMoKFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZykgcmVjZWl2ZXJUeXBlLCByZWNlaXZlclR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFy
Z3VtZW50VHlwZXMsIHNjb3BlKTsKIAkJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CiAJ
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7
CiAJCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CkBAIC00NzcsMTMgKzQ3Mywx
MyBAQAogCQkJCXJlY2VpdmVyVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBzY29wZS5l
bnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKCgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSByZWNlaXZlclR5cGUpLmdlbmVyaWNUeXBlKCksIGluZmVycmVkVHlwZXMsICgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSByZWNlaXZlclR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CiAJ
CQl9CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gKFJlZmVyZW5jZUJpbmRp
bmcpIHJlY2VpdmVyVHlwZTsKLQkJCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRp
bmcoc2NvcGUsIHRoaXMsIGFsbG9jYXRpb25UeXBlLCBhcmd1bWVudFR5cGVzKTsKKwkJCXRoaXMu
YmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIGFsbG9jYXRpb25U
eXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOwogCiAJCQlpZiAodGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsJCiAJCQkJaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcs
IHNjb3BlLCB0cnVlKSkgewogCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVk
TWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CiAJCQkJfQotCQkJCWlmIChjaGVja0ludm9jYXRp
b25Bcmd1bWVudHMoc2NvcGUsIG51bGwsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmJpbmRpbmcsIHRo
aXMuYXJndW1lbnRzLCBhcmd1bWVudFR5cGVzLCBhcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CisJ
CQkJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYWxsb2NhdGlvblR5
cGUsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgYXJn
c0NvbnRhaW5DYXN0LCB0aGlzKSkgewogCQkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5VbmNoZWNr
ZWQ7CiAJCQkJfQogCQkJCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0aGlzLmJp
bmRpbmcub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzID09IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJM
RVMpIHsKQEAgLTUwNCw3ICs1MDAsNyBAQAogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1p
c3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwogCQkJfQogCQkJaWYg
KCFpc0RpYW1vbmQgJiYgcmVjZWl2ZXJUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFs
QXJndW1lbnRzKCkpIHsKLQkJIAkJY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpcmVjZWl2ZXJUeXBlLCByZWNlaXZlclR5cGUuZW5jbG9zaW5nVHlw
ZSgpLCBhcmd1bWVudFR5cGVzICwgc2NvcGUpOworCQkgCQljaGVja1R5cGVBcmd1bWVudFJlZHVu
ZGFuY3koKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylyZWNlaXZlclR5cGUsIHJlY2VpdmVyVHlw
ZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcyAsIHNjb3BlKTsKIAkJIAl9CiAJ
CQkvLyBUaGUgZW5jbG9zaW5nIGluc3RhbmNlIG11c3QgYmUgY29tcGF0aWJsZSB3aXRoIHRoZSBp
bm5lcm1vc3QgZW5jbG9zaW5nIHR5cGUKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZXhwZWN0ZWRUeXBl
ID0gdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVuY2xvc2luZ1R5cGUoKTsKQEAgLTU0Myw3
ICs1MzksNyBAQAogCQlpZiAoKHRoaXMucmVzb2x2ZWRUeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkhp
ZXJhcmNoeUhhc1Byb2JsZW1zKSAhPSAwKSB7CiAJCQlyZXR1cm4gbnVsbDsgLy8gc3RvcCBzZWNv
bmRhcnkgZXJyb3JzCiAJCX0KLQkJTWV0aG9kQmluZGluZyBpbmhlcml0ZWRCaW5kaW5nID0gZmlu
ZENvbnN0cnVjdG9yQmluZGluZyhzY29wZSwgdGhpcywgYW5vbnltb3VzU3VwZXJjbGFzcywgYXJn
dW1lbnRUeXBlcyk7CisJCU1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkQmluZGluZyA9IGZpbmRDb25z
dHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIGFub255bW91c1N1cGVyY2xhc3MsIHRoaXMuYXJn
dW1lbnRUeXBlcyk7CiAJCQkKIAkJaWYgKCFpbmhlcml0ZWRCaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkpIHsKIAkJCWlmIChpbmhlcml0ZWRCaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpIHsK
QEAgLTU3MSw3ICs1NjcsNyBAQAogCQkJdGhpcy5lbmNsb3NpbmdJbnN0YW5jZS5jb21wdXRlQ29u
dmVyc2lvbihzY29wZSwgdGFyZ2V0RW5jbG9zaW5nLCBlbmNsb3NpbmdJbnN0YW5jZVR5cGUpOwog
CQl9CiAJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlpZiAoY2hlY2tJbnZvY2F0
aW9uQXJndW1lbnRzKHNjb3BlLCBudWxsLCBhbm9ueW1vdXNTdXBlcmNsYXNzLCBpbmhlcml0ZWRC
aW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgYXJndW1lbnRUeXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0
aGlzKSkgeworCQkJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYW5v
bnltb3VzU3VwZXJjbGFzcywgaW5oZXJpdGVkQmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMu
YXJndW1lbnRUeXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgewogCQkJCXRoaXMuYml0cyB8
PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAkJCX0KIAkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24u
amF2YQppbmRleCBiODQ4NDFmLi4xNzg1ZjA1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVy
ZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24u
amF2YQpAQCAtNzI1LDE4ICs3MjUsNiBAQAogCQl9CiAJfQogCi0JcHVibGljIE1ldGhvZEJpbmRp
bmcgcHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdChTY29wZSBzY29wZSkgewotCQl0cnkgewotCQkJ
c2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCXRoaXMuYmluZGlu
ZyA9IG51bGw7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IHRydWU7Ci0JCQlyZXNvbHZlVHlw
ZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJCXJldHVybiB0aGlzLmJpbmRpbmc7Ci0JCX0gZmlu
YWxseSB7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IGZhbHNlOwotCQl9Ci0JfQotCiAJcHVi
bGljIGJvb2xlYW4gaXNDb25zdHJ1Y3RvclJlZmVyZW5jZSgpIHsKIAkJcmV0dXJuIENoYXJPcGVy
YXRpb24uZXF1YWxzKHRoaXMuc2VsZWN0b3IsICBDb25zdGFudFBvb2wuSW5pdCk7CiAJfQpAQCAt
ODQzLDYgKzgzMSw3IEBACiAJfQogCiAJcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChU
eXBlQmluZGluZyBsZWZ0LCBTY29wZSBzY29wZSkgeworCiAJCWlmICh0aGlzLmJpbmRpbmcgIT0g
bnVsbCAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSAvLyBiaW5kaW5nIGluZGljYXRl
cyBpZiBmdWxsIHJlc29sdXRpb24gaGFzIGFscmVhZHkgaGFwcGVuZWQKIAkJCQkmJiB0aGlzLnJl
c29sdmVkVHlwZSAhPSBudWxsICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkp
IHsKIAkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNj
b3BlKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQm91bmRTZXQuamF2YQppbmRleCBmMTcwMjY5Li41NDk2MDI0IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5q
YXZhCkBAIC04MzksNiArODM5LDExIEBACiAJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCByZXN1bHRB
cnJheS5sZW5ndGg7IGkrKykKIAkJCQkJaWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNvbnRleHQs
IHJlc3VsdEFycmF5W2ldKSkKIAkJCQkJCXJldHVybiBmYWxzZTsKKwkJCX0gZWxzZSBpZiAocmVz
dWx0IGluc3RhbmNlb2YgVHlwZUJvdW5kW10pIHsKKwkJCQlUeXBlQm91bmQgW10gYm91bmRzID0g
KFR5cGVCb3VuZFtdKSByZXN1bHQ7CisJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGJvdW5k
cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQlhZGRCb3VuZChib3VuZHNbaV0sIGNv
bnRleHQuZW52aXJvbm1lbnQpOworCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJYWRkQm91bmQoKFR5
cGVCb3VuZClyZXN1bHQsIGNvbnRleHQuZW52aXJvbm1lbnQpOwogCQkJfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9DYXB0dXJlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJl
QmluZGluZy5qYXZhCmluZGV4IDliNGJmMTQuLmQwZmYxZjAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQ2FwdHVyZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5k
aW5nLmphdmEKQEAgLTE1LDYgKzE1LDcgQEAKIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBp
bGVyLkNoYXJPcGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuV2lsZGNhcmQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7CkBAIC0yOCw2ICsyOSw3IEBACiAJ
LyogaW5mb3JtYXRpb24gdG8gY29tcHV0ZSB1bmlxdWUgYmluZGluZyBrZXkgKi8KIAlwdWJsaWMg
UmVmZXJlbmNlQmluZGluZyBzb3VyY2VUeXBlOwogCXB1YmxpYyBpbnQgcG9zaXRpb247CisJcHVi
bGljIEFTVE5vZGUgY3VkOyAvLyB0byBmYWNpbGl0YXRlIHJlY2FwdHVyZXMuCiAKIAlwdWJsaWMg
Q2FwdHVyZUJpbmRpbmcoV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkLCBSZWZlcmVuY2VCaW5kaW5n
IHNvdXJjZVR5cGUsIGludCBwb3NpdGlvbiwgaW50IGNhcHR1cmVJRCkgewogCQlzdXBlcihUeXBl
Q29uc3RhbnRzLldJTERDQVJEX0NBUFRVUkVfTkFNRV9QUkVGSVgsIG51bGwsIDAsIHdpbGRjYXJk
LmVudmlyb25tZW50KTsKQEAgLTUzLDYgKzU1LDExIEBACiAJCX0KIAl9CiAJCisJcHVibGljIENh
cHR1cmVCaW5kaW5nKFdpbGRjYXJkQmluZGluZyB3aWxkY2FyZCwgUmVmZXJlbmNlQmluZGluZyBz
b3VyY2VUeXBlLCBpbnQgcG9zaXRpb24sIEFTVE5vZGUgY3VkLCBpbnQgY2FwdHVyZUlEKSB7CisJ
CXRoaXMod2lsZGNhcmQsIHNvdXJjZVR5cGUsIHBvc2l0aW9uLCBjYXB0dXJlSUQpOworCQl0aGlz
LmN1ZCA9IGN1ZDsKKwl9CisJCiAJLy8gZm9yIHN1YmNsYXNzIENhcHR1cmVCaW5kaW5nMTgKIAlw
cm90ZWN0ZWQgQ2FwdHVyZUJpbmRpbmcoUmVmZXJlbmNlQmluZGluZyBzb3VyY2VUeXBlLCBjaGFy
W10gc291cmNlTmFtZSwgaW50IHBvc2l0aW9uLCBpbnQgY2FwdHVyZUlELCBMb29rdXBFbnZpcm9u
bWVudCBlbnZpcm9ubWVudCkgewogCQlzdXBlcihzb3VyY2VOYW1lLCBudWxsLCAwLCBlbnZpcm9u
bWVudCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEKaW5kZXggMjFmN2Mx
ZS4uMzY4MGNkMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db21waWxhdGlvblVuaXRTY29w
ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29tcGlsYXRpb25Vbml0U2NvcGUuamF2YQpAQCAt
ODAwLDYgKzgwMCw4IEBACiAJcmV0dXJuICItLS0gQ29tcGlsYXRpb25Vbml0IFNjb3BlIDogIiAr
IG5ldyBTdHJpbmcodGhpcy5yZWZlcmVuY2VDb250ZXh0LmdldEZpbGVOYW1lKCkpOyAvLyROT04t
TkxTLTEkCiB9CiBwcml2YXRlIFJlZmVyZW5jZUJpbmRpbmcgdHlwZVRvUmVjb3JkKFR5cGVCaW5k
aW5nIHR5cGUpIHsKKwlpZiAodHlwZSA9PSBudWxsKQorCQlyZXR1cm4gbnVsbDsKIAl3aGlsZSAo
dHlwZS5pc0FycmF5VHlwZSgpKQogCQl0eXBlID0gKChBcnJheUJpbmRpbmcpIHR5cGUpLmxlYWZD
b21wb25lbnRUeXBlKCk7CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4
cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCmluZGV4IDc3ZDVjMDYuLjUzZmY2ODUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtMjY1LDExICsyNjUsOSBAQAog
CQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qo
aW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0gbnVs
bCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBtZXRob2Qg
Zm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAotCQlN
ZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29tcGls
ZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7Ci0JCWlmIChw
b3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJldHVybiBGQUxTRTsKKwogCQlpZiAo
cmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgeworCQkJTWV0aG9kQmluZGluZyBw
b3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJCQlM
aXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8Q29u
c3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUucGFy
YW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yNzksNiArMjc3LDggQEAKIAkJCWlm
IChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11
bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7
CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAhPSBrKSB7CisJCQkJcmV0dXJuIEZB
TFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdD
b25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVb
aS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yODcsMTEgKzI4NywxNSBAQAogCQkJCVR5cGVC
aW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmlzQ29uc3RydWN0b3IoKSAmJiAh
cmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5jZSgpID8gcG90ZW50aWFsbHlBcHBs
aWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlBcHBsaWNhYmxlLnJldHVyblR5cGU7
CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJCXJldHVybiBGQUxTRTsK
LQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQu
c2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlvbj8/CisJCQkJVHlwZUJpbmRpbmcg
clByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uu
c291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxh
LmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJCX0KIAkJCXJldHVybiBuZXdDb25z
dHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5zaXpl
KCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxs
eUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQs
IGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1l
dGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSks
CisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCisJCQkJcmV0dXJuIEZBTFNF
OworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBlLnBhcmFtZXRl
cnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzc1LDYgKzM3OSw3IEBACiAJCWlmICh0eXBl
QXJndW1lbnRzID09IG51bGwpIHsKIAkJCS8vIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKDE4
LjUuMik6CiAJCQlUeXBlQmluZGluZyByZXR1cm5UeXBlID0gbWV0aG9kLmlzQ29uc3RydWN0b3Io
KSA/IG1ldGhvZC5kZWNsYXJpbmdDbGFzcyA6IG1ldGhvZC5yZXR1cm5UeXBlOworCQkJCiAJCQlp
ZiAocmV0dXJuVHlwZSA9PSBUeXBlQmluZGluZy5WT0lEKQogCQkJCXRocm93IG5ldyBJbmZlcmVu
Y2VGYWlsdXJlRXhjZXB0aW9uKCJleHByZXNzaW9uIGhhcyBubyB2YWx1ZSIpOyAvLyROT04tTkxT
LTEkCiAKQEAgLTM5NSw3ICs0MDAsNyBAQAogCQkJCUluZmVyZW5jZVZhcmlhYmxlW10gYmV0YXMg
PSBpbmZlcmVuY2VDb250ZXh0LmFkZFR5cGVWYXJpYWJsZVN1YnN0aXR1dGlvbnMoYXJndW1lbnRz
KTsKIAkJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ2JldGEgPSBpbmZlcmVuY2VDb250ZXh0
LmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKAogCQkJCQkJcGFyYW1ldGVyaXpl
ZFR5cGUuZ2VuZXJpY1R5cGUoKSwgYmV0YXMsIHBhcmFtZXRlcml6ZWRUeXBlLmVuY2xvc2luZ1R5
cGUoKSwgcGFyYW1ldGVyaXplZFR5cGUuZ2V0VHlwZUFubm90YXRpb25zKCkpOwotCQkJCWluZmVy
ZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5jYXB0dXJlcy5wdXQoZ2JldGEsIHBhcmFtZXRlcml6
ZWRUeXBlKTsgLy8gZXN0YWJsaXNoZWQ6IGJvdGggdHlwZXMgaGF2ZSBub25udWxsIGFyZ3VtZW50
cworCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5jYXB0dXJlcy5wdXQoZ2JldGEs
IHBhcmFtZXRlcml6ZWRUeXBlLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2Nh
dGlvblNpdGUuc291cmNlRW5kKCkpKTsgLy8gZXN0YWJsaXNoZWQ6IGJvdGggdHlwZXMgaGF2ZSBu
b25udWxsIGFyZ3VtZW50cwogCQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50
ID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShnYmV0YSwgdGFyZ2V0VHlwZSwgQ09NUEFU
SUJMRSk7CiAJCQkJcmV0dXJuIGluZmVyZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUo
bmV3Q29uc3RyYWludCk7CiAJCQl9CkBAIC00MTUsNyArNDIwLDcgQEAKIAkJCQkJQm91bmRTZXQg
c29sdXRpb24gPSBpbmZlcmVuY2VDb250ZXh0LnNvbHZlKG5ldyBJbmZlcmVuY2VWYXJpYWJsZVtd
e2FscGhhfSk7CiAJCQkJCWlmIChzb2x1dGlvbiA9PSBudWxsKQogCQkJCQkJcmV0dXJuIGZhbHNl
OwotCQkJCQlUeXBlQmluZGluZyB1ID0gc29sdXRpb24uZ2V0SW5zdGFudGlhdGlvbihhbHBoYSwg
bnVsbCkuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3Vy
Y2VTdGFydCgpKTsgLy8gVE9ETyBtYWtlIHBvc2l0aW9uIHVuaXF1ZT8KKwkJCQkJVHlwZUJpbmRp
bmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlRW5kKCkpOwogCQkJCQlD
b25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9ybXVs
YS5jcmVhdGUodSwgdGFyZ2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJCXJldHVybiBpbmZlcmVu
Y2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJCX0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCmluZGV4IDgyMTQ5NWMuLjJmMTQ1
MmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQpAQCAtMTEyLDEw
ICsxMTIsMTAgQEAKIAkJCQlpZiAodC5ib3VuZEtpbmQgPT0gV2lsZGNhcmQuVU5CT1VORCkKIAkJ
CQkJcmV0dXJuIFRSVUU7CiAJCQkJaWYgKHQuYm91bmRLaW5kID09IFdpbGRjYXJkLkVYVEVORFMp
IHsKLQkJCQkJaWYgKHRoaXMubGVmdC5raW5kKCkgIT0gQmluZGluZy5XSUxEQ0FSRF9UWVBFICYm
ICF0aGlzLmxlZnQuaXNDYXB0dXJlKCkpIHsKKwkJCQkJaWYgKHRoaXMubGVmdC5raW5kKCkgIT0g
QmluZGluZy5XSUxEQ0FSRF9UWVBFKSB7CiAJCQkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZSh0aGlzLmxlZnQsIHQuYm91bmQsIFNVQlRZUEUsIHRoaXMuaXNTb2Z0KTsKIAkJ
CQkJfSBlbHNlIHsKLQkJCQkJCVdpbGRjYXJkQmluZGluZyBzID0gdGhpcy5sZWZ0LmlzQ2FwdHVy
ZSgpID8gKChDYXB0dXJlQmluZGluZykgdGhpcy5sZWZ0KS53aWxkY2FyZCA6IChXaWxkY2FyZEJp
bmRpbmcpIHRoaXMubGVmdDsKKwkJCQkJCVdpbGRjYXJkQmluZGluZyBzID0gKFdpbGRjYXJkQmlu
ZGluZykgdGhpcy5sZWZ0OwogCQkJCQkJc3dpdGNoIChzLmJvdW5kS2luZCkgewogCQkJCQkJCWNh
c2UgV2lsZGNhcmQuVU5CT1VORDoKIAkJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVs
YS5jcmVhdGUoaW5mZXJlbmNlQ29udGV4dC5vYmplY3QsIHQuYm91bmQsIFNVQlRZUEUsIHRoaXMu
aXNTb2Z0KTsKQEAgLTEyOCwxMCArMTI4LDEwIEBACiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9IGVs
c2UgeyAvLyBTVVBFUiAKLQkJCQkJaWYgKHRoaXMubGVmdC5raW5kKCkgIT0gQmluZGluZy5XSUxE
Q0FSRF9UWVBFICYmICF0aGlzLmxlZnQuaXNDYXB0dXJlKCkpIHsKKwkJCQkJaWYgKHRoaXMubGVm
dC5raW5kKCkgIT0gQmluZGluZy5XSUxEQ0FSRF9UWVBFKSB7CiAJCQkJCQlyZXR1cm4gQ29uc3Ry
YWludFR5cGVGb3JtdWxhLmNyZWF0ZSh0LmJvdW5kLCB0aGlzLmxlZnQsIFNVQlRZUEUsIHRoaXMu
aXNTb2Z0KTsKIAkJCQkJfSBlbHNlIHsKLQkJCQkJCVdpbGRjYXJkQmluZGluZyBzID0gdGhpcy5s
ZWZ0LmlzQ2FwdHVyZSgpID8gKChDYXB0dXJlQmluZGluZykgdGhpcy5sZWZ0KS53aWxkY2FyZCA6
IChXaWxkY2FyZEJpbmRpbmcpIHRoaXMubGVmdDsKKwkJCQkJCVdpbGRjYXJkQmluZGluZyBzID0g
KFdpbGRjYXJkQmluZGluZykgdGhpcy5sZWZ0OwogCQkJCQkJaWYgKHMuYm91bmRLaW5kID09IFdp
bGRjYXJkLlNVUEVSKSB7CiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVh
dGUodC5ib3VuZCwgcy5ib3VuZCwgU1VCVFlQRSwgdGhpcy5pc1NvZnQpOwogCQkJCQkJfSBlbHNl
IHsKQEAgLTE3MiwxMCArMTcyLDE4IEBACiAJCQkJCXJldHVybiBGQUxTRTsKIAkJCQl9CiAJCQkJ
aWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7Ci0JCQkJCXJldHVy
biBuZXcgVHlwZUJvdW5kKChJbmZlcmVuY2VWYXJpYWJsZSkgdGhpcy5sZWZ0LCB0aGlzLnJpZ2h0
LCBTQU1FLCB0aGlzLmlzU29mdCk7CisJCQkJCUluZmVyZW5jZVZhcmlhYmxlIHJpZ2h0SVYgPSAo
SW5mZXJlbmNlVmFyaWFibGUpICh0aGlzLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFi
bGUgPyB0aGlzLnJpZ2h0IDogbnVsbCk7CisJCQkJCVR5cGVCb3VuZCBbXSBuZXdCb3VuZHMgPSBu
ZXcgVHlwZUJvdW5kW3JpZ2h0SVYgIT0gbnVsbCA/IDIgOiAxXTsKKwkJCQkJaWYgKHJpZ2h0SVYg
IT0gbnVsbCkgbmV3Qm91bmRzWzFdID0gbmV3IFR5cGVCb3VuZChyaWdodElWLCB0aGlzLmxlZnQs
IFNBTUUsIHRoaXMuaXNTb2Z0KTsKKwkJCQkJbmV3Qm91bmRzWzBdID0gbmV3IFR5cGVCb3VuZCgo
SW5mZXJlbmNlVmFyaWFibGUpIHRoaXMubGVmdCwgdGhpcy5yaWdodCwgU0FNRSwgdGhpcy5pc1Nv
ZnQpOworCQkJCQlyZXR1cm4gbmV3Qm91bmRzOwogCQkJCX0KIAkJCQlpZiAodGhpcy5yaWdodCBp
bnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7Ci0JCQkJCXJldHVybiBuZXcgVHlwZUJvdW5k
KChJbmZlcmVuY2VWYXJpYWJsZSkgdGhpcy5yaWdodCwgdGhpcy5sZWZ0LCBTQU1FLCB0aGlzLmlz
U29mdCk7CisJCQkJCUluZmVyZW5jZVZhcmlhYmxlIGxlZnRJViA9IChJbmZlcmVuY2VWYXJpYWJs
ZSkgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlID8gdGhpcy5sZWZ0IDog
bnVsbCk7CisJCQkJCVR5cGVCb3VuZCBbXSBuZXdCb3VuZHMgPSBuZXcgVHlwZUJvdW5kW2xlZnRJ
ViAhPSBudWxsID8gMiA6IDFdOworCQkJCQlpZiAobGVmdElWICE9IG51bGwpIG5ld0JvdW5kc1sx
XSA9IG5ldyBUeXBlQm91bmQobGVmdElWLCB0aGlzLnJpZ2h0LCBTQU1FLCB0aGlzLmlzU29mdCk7
CisJCQkJCW5ld0JvdW5kc1swXSA9IG5ldyBUeXBlQm91bmQoKEluZmVyZW5jZVZhcmlhYmxlKSB0
aGlzLnJpZ2h0LCB0aGlzLmxlZnQsIFNBTUUsIHRoaXMuaXNTb2Z0KTsKKwkJCQkJcmV0dXJuIG5l
d0JvdW5kczsgCiAJCQkJfQogCQkJCWlmICgodGhpcy5sZWZ0LmlzQ2xhc3MoKSB8fCB0aGlzLmxl
ZnQuaXNJbnRlcmZhY2UoKSkgCiAJCQkJCQkmJiAodGhpcy5yaWdodC5pc0NsYXNzKCkgfHwgdGhp
cy5yaWdodC5pc0ludGVyZmFjZSgpKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVu
Y2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEK
aW5kZXggYTE1NTU5OS4uN2VjYTg3YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVu
Y2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5q
YXZhCkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4
cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5J
bnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TGFtYmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEs
OSBAQAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0Pgog
ICogPGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZv
ciAxOC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRl
ZCBpbgotICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIElu
dm9jYXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVs
IGNvbnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5
cGVCaW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBM
aWZlY3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBj
YXVzZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0
cyBvZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29s
dXRpb24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcj
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2Nv
cGUsIEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoKX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1l
ZGlhdGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0
d2VlbiBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAot
ICogICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52
b2NhdGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVu
Y2VDb250ZXh0KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48
YnIvPgotICogICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNl
IG9mIEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZl
cmVuY2VLaW5kfQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxs
aT48Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJn
dW1lbnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhl
IGFyZ3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUg
SW5mZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNl
IG11c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0
aGUgaW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29scyBh
cmUgYXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHBy
ZXNzaW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNv
cnBvcmF0ZWQgaW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJs
b2NrIGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZl
cmVuY2VDb250ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMg
b2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRh
aW5lZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsg
I3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3Qg
YmUgY2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAg
PGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Np
b24gb3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAq
ICAgICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5h
bCB0YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0Bs
aW5rIEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBT
Y29wZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJp
bmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+
Rm9yIHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFu
IGludm9jYXRpb24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHBy
ZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10s
IFNjb3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9u
czogKDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5k
I2ZpbmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3Rv
ckJpbmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5r
ICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAg
ICA8bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBv
bHkgaW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJs
b2FkIHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBp
bnZvbHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGluZyBp
bmZlcmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7
QGxpbmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5n
KX0uPC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlz
IGEgPGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRl
bXB0aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9
LiBPbmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0Bs
aW5rICNDSEVDS19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2Fz
IHN1Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjQs
OSArMTI4LDYgQEAKIAlDb25zdHJhaW50Rm9ybXVsYVtdIGluaXRpYWxDb25zdHJhaW50czsKIAkv
KiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3VuZFNldCBjdXJyZW50
Qm91bmRzOwotCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlLCBzdG9y
ZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSBmYWls
cy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKIAogCS8qKiBGb3IgZWFjaCBjYW5kaWRh
dGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3JlIHRoZSBzb2x1dGlv
biBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxUeXBlQmluZGluZyxTb2x1
dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBT
b2x1dGlvbj4oKTsKQEAgLTM3Miw3ICszMzMsNiBAQAogCX0KIAogCS8qKiBKTFMgMTguNS4yIElu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgCi0JICogPHA+Q2FsbGVycyBhcmUgcmVzcG9uc2libGUg
Zm9yIGFueSBwb3N0LXByb2Nlc3NpbmcgKHNlZSB7QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJv
dW5kU2V0LCBUeXBlQmluZGluZ1tdKX0pLjwvcD4KIAkgKiBAcGFyYW0gYjEgInRoZSBib3VuZCBz
ZXQgcHJvZHVjZWQgYnkgcmVkdWN0aW9uIGluIG9yZGVyIHRvIGRlbW9uc3RyYXRlIHRoYXQgbSBp
cyBhcHBsaWNhYmxlIGluIDE4LjUuMSIKIAkgKi8KIAlwdWJsaWMgQm91bmRTZXQgaW5mZXJJbnZv
Y2F0aW9uVHlwZShCb3VuZFNldCBiMSwgVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlLCBJbnZvY2F0
aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0aG9kQmluZGluZyBtZXRob2QpCkBAIC01MDAsOTEg
KzQ2MCw2IEBACiAJCQkJICYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZkZh
bHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKTsKIAkJfQogCQlyZXR1cm4gdHJ1ZTsKLQl9Ci0K
LQkvKioKLQkgKiBTaW1wbGlmaWVkIEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZl
cmVuY2UgKEpMUyAxOC41LjIpCi0JICogYW5kIHBlcmZvcm0gc3Vic2VxdWVudCBzdGVwczogYm91
bmQgY2hlY2ssIHJlYmluZGluZyBvZiBpbm5lciBwb2x5IGV4cHJlc3Npb25zLAotCSAqIGFuZCBj
cmVhdGluZyBvZiBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgaWYgbmVlZGVkLgotCSAqIFNob3Vs
ZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgaW5mZXJlbmNlIGhhcyBub3QgeWV0IGZpbmlzaGVkLgot
CSAqIEBwYXJhbSBpbnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKLQkgKiBAcGFy
YW0gYXJndW1lbnRUeXBlcyBhcmd1bWVudHMgYmVpbmcgcGFzc2VkIGludG8gdGhlIGludm9jYXRp
b24KLQkgKiBAcGFyYW0gbWV0aG9kIGN1cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZv
ciB0aGlzIGludm9jYXRpb24KLQkgKiBAcmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0
aCB1cGRhdGVkIHR5cGUgcGFyYW1ldGVycywKLQkgKiAJb3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5k
aW5nIHNpZ25hbGluZyBlaXRoZXIgaW5mZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBtaXNtYXRj
aC4KLQkgKi8KLQkvKkBOb25OdWxsKi8gTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBl
KEludm9jYXRpb24gaW52b2NhdGlvbiwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCS8vIFRPRE8gb3B0aW1p
emU6IGlmIG91dGVyQ29udGV4dCBleGlzdHMgYW5kIGlzIHJlc29sdmVkLCB3ZSBwcm9iYWJseSBk
b24ndCBuZWVkIHRvIGluZmVyIGFnYWluLgotCQlUeXBlQmluZGluZyB0YXJnZXRUeXBlID0gaW52
b2NhdGlvbi5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgZmluYWxNZXRob2QgPSBudWxsOwotCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhvZDsKLQkJCi0JCWJvb2xlYW4gaGF2ZVBy
b3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51bGwgJiYgdGFyZ2V0VHlwZS5pc1Byb3Bl
clR5cGUodHJ1ZSk7Ci0JCWJvb2xlYW4gaW5mZXJyZWRJbnZvY2F0aW9uVHlwZSA9IGZhbHNlOwot
CQlpZiAodGFyZ2V0VHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250
ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9
IG1ldGhvZC5vcmlnaW5hbE1ldGhvZDsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1
dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCUJvdW5kU2V0IHJlc3VsdCA9
IHNvbHV0aW9uICE9IG51bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxsOwotCQkJaWYgKHJlc3Vs
dCA9PSBudWxsKSB7Ci0JCQkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJldmlvdXMgY2FuZGlkYXRl
IGJ1dCBkaXNjYXJkIGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRpb25zCi0JCQkJLy8gVE9E
Tzogc2hvdWxkIHdlIHJldGFpbiBhbnkgaW5zdGFudGlhdGlvbnMgb2YgdHlwZSB2YXJpYWJsZXMg
bm90IG93bmVkIGJ5IHRoZSBtZXRob2Q/IAotCQkJCXRyeSB7Ci0JCQkJCXJlc3VsdCA9IGluZmVy
SW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9u
LCBvcmlnaW5hbCk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7
Ci0JCQkJCS8vIG5vIHNvbHV0aW9uLCBidXQgZG8gbW9yZSBjaGVja3MgYmVsb3cKLQkJCQl9Ci0J
CQl9Ci0JCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9u
cyA9IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCksIGludm9jYXRpb24sIHJl
c3VsdCk7Ci0JCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCWZpbmFsTWV0aG9kID0g
dGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5h
bCwgc29sdXRpb25zKTsKLQkJCQkJaWYgKHRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNB
bm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25N
YXRjaGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMoZmluYWxNZXRob2QsIGludm9jYXRpb24sIHRo
aXMuc2NvcGUpOwotCQkJCQlpbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChmaW5h
bE1ldGhvZCwgdGhpcyk7Ci0JCQkJCXRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQodGFy
Z2V0VHlwZSwgbmV3IFNvbHV0aW9uKGZpbmFsTWV0aG9kLCByZXN1bHQpKTsKLQkJCQkJaW5mZXJy
ZWRJbnZvY2F0aW9uVHlwZSA9IHRydWU7Ci0JCQkJfQotCQkJfQotCQkJaWYgKGZpbmFsTWV0aG9k
ICE9IG51bGwpCi0JCQkJbWV0aG9kVG9DaGVjayA9IGZpbmFsTWV0aG9kOwotCQl9IGVsc2Ugewot
CQkJZmluYWxNZXRob2QgPSBtZXRob2Q7Ci0JCX0KLQkJCi0JCU1ldGhvZEJpbmRpbmcgcHJvYmxl
bU1ldGhvZCA9IG1ldGhvZFRvQ2hlY2suYm91bmRDaGVjazE4KHRoaXMuc2NvcGUsIGFyZ3VtZW50
VHlwZXMpOwotCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQotCQkJcmV0dXJuIHByb2JsZW1N
ZXRob2Q7Ci0KLQkJaWYgKGluZmVycmVkSW52b2NhdGlvblR5cGUpIHsKLQkJCWlmIChyZWJpbmRJ
bm5lclBvbGllcyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbikpCi0JCQkJcmV0dXJuIGZpbmFsTWV0
aG9kOwotCQl9IGVsc2UgaWYgKCFoYXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9uLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJcmV0dXJuIG1l
dGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQotCQl9Ci0JCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVt
TWV0aG9kSWZOZWVkZWQodGFyZ2V0VHlwZSwgbWV0aG9kKTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1w
bGlmaWVkIEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41
LjIpCi0JICogYW5kIHBlcmZvcm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmlu
ZGluZyBvZiBpbm5lciBwb2x5IGV4cHJlc3Npb25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHBy
b2JsZW0gbWV0aG9kIGJpbmRpbmcgaWYgbmVlZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxl
ZCBpZiB0aGUgaW5mZXJlbmNlIGhhcyBub3QgeWV0IGZpbmlzaGVkLgotCSAqIFZlcnNpb24gdXNl
ZCBmb3IgaW5uZXIgaW52b2NhdGlvbnMsIHdoZXJlIGFyZ3VtZW50IHR5cGVzIG5lZWQgdG8gYmUg
ZXh0cmFjdGVkCi0JICogZnJvbSBhY3R1YWwgaW52b2NhdGlvbiBhcmd1bWVudHMuCi0JICogQHBh
cmFtIGludm9jYXRpb24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBtZXRo
b2QgY3VycmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgot
CSAqIEByZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJh
bWV0ZXJzLAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhl
ciBpbmZlcmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCXB1YmxpYyAv
KkBOb25OdWxsKi8gTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb24g
aW52b2NhdGlvbiwgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgewot
CQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gYXJn
dW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJaWYgKGFyZ3VtZW50cyAhPSBudWxs
KSB7Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhd
OwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJYXJn
dW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCX0KLQkJcmV0dXJu
IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgbWV0aG9kKTsK
IAl9CiAKIAlwdWJsaWMgYm9vbGVhbiBoYXNSZXN1bHRGb3IoVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkgewpAQCAtMTQwMiwxNDUgKzEyNzcsNiBAQAogCQl0aGlzLmluZmVyZW5jZUtpbmQgPSByZWNv
cmQuaW5mZXJlbmNlS2luZDsKIAl9CiAKLQlwdWJsaWMgYm9vbGVhbiByZWJpbmRJbm5lclBvbGll
cyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW52b2NhdGlvblNpdGUgc2l0ZSkgewotCQlCb3VuZFNl
dCBib3VuZHMgPSB0aGlzLmN1cnJlbnRCb3VuZHM7Ci0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUg
PSBzaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwg
fHwgIXRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKSB7Ci0JCQlpZiAoIXNpdGUuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7Ci0JCQkJLy8gaW4gdGhpcyBj
YXNlIHdlIG1heSBub3QgeWV0IGhhdmUgdGhlIHNvbHV0aW9uKD8sIGdldCBvciBjb21wdXRlIGl0
IG5vdzoKLQkJCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlw
ZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQkJdHJ5IHsKLQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwg
JiYgc29sdXRpb24uYm91bmRzICE9IG51bGwpCi0JCQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3Vu
ZHM7Ci0JCQkJCWVsc2UKLQkJCQkJCWJvdW5kcyA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5j
dXJyZW50Qm91bmRzLCBudWxsLCBzaXRlLCBtZXRob2Quc2hhbGxvd09yaWdpbmFsKCkpOwotCQkJ
CX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQlyZXR1cm4gZmFs
c2U7Ci0JCQkJfQotCQkJCWlmIChib3VuZHMgPT0gbnVsbCkKLQkJCQkJcmV0dXJuIGZhbHNlOwot
CQkJfQotCQl9IGVsc2UgewotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1Bl
clRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYg
c29sdXRpb24uYm91bmRzICE9IG51bGwpCi0JCQkJYm91bmRzID0gc29sdXRpb24uYm91bmRzOwot
CQl9Ci0JCXJlYmluZElubmVyUG9saWVzKGJvdW5kcywgbWV0aG9kLnBhcmFtZXRlcnMpOwotCQly
ZXR1cm4gdHJ1ZTsKLQl9Ci0KLQkvKioKLQkgKiBBZnRlciBpbmZlcmVuY2UgaGFzIGZpbmlzaGVk
LCBpdGVyYXRlIGFsbCBpbm5lciBwb2x5IGV4cHJlc3Npb25zIChJbnZvY2F0aW9ucyksIHRoYXQK
LQkgKiBoYXZlIGJlZW4gaW5jbHVkZWQgaW4gdGhlIGluZmVyZW5jZS4gRm9yIGVhY2ggb2YgdGhl
c2UgdXBkYXRlIHNvbWUgdHlwZSBpbmZvcm1hdGlvbgotCSAqIGZyb20gdGhlIGluZmVyZW5jZSBy
ZXN1bHQgYW5kIHBlcmhhcHMgdHJpZ2dlciBmb2xsb3ctdXAgcmVzb2x2aW5nIGFzIG5lZWRlZC4K
LQkgKiBTaW1pbGFyIGZvciBwb2x5IGV4cHJlc3Npb25zIHRoYXQgZGlkIG5vdCBkaXJlY3RseSBw
YXJ0aWNpcGF0ZSBpbiB0aGUgaW5mZXJlbmNlCi0JICogYnV0IGFyZSBkaXJlY3QgYXJndW1lbnRz
IG9mIHRoZSBjdXJyZW50IGludm9jYXRpb24gKEZ1bmN0aW9uYWxFeHByZXNzaW9uLCBDb25kaXRp
b25hbEV4cHJlc3Npb24pLgotCSAqLwotCXB1YmxpYyB2b2lkIHJlYmluZElubmVyUG9saWVzKEJv
dW5kU2V0IGJvdW5kcywgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcykgewotCQkvLyBUaGlz
IHVwZGF0ZXMgYWxsIHJlbWFpbmluZyBwb2x5IGV4cHJlc3Npb25zIHRoYXQgYXJlIGRpcmVjdCBh
cmd1bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbjoKLQkJLy8gKGhhbmRsZXMgRnVuY3Rp
b25hbEV4cHJlc3Npb24gJiBDb25kaXRpb25hbEV4cHJlc3Npb24pCi0JCWlmICh0aGlzLmN1cnJl
bnRJbnZvY2F0aW9uIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKLQkJCXJldHVybjsg
Ly8gbm8gaW5uZXIgZXhwcmVzc2lvbnMKLQkJYm9vbGVhbiBpc1ZhcmFyZ3MgPSB0aGlzLmluZmVy
ZW5jZUtpbmQgPT0gQ0hFQ0tfVkFSQVJHOwotCQlhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cyhi
b3VuZHMsIHBhcmFtZXRlclR5cGVzLCBpc1ZhcmFyZ3MpOwotCQkvLyBUaGlzIGxvb3BzIG92ZXIg
YWxsIHBvbHkgZXhwcmVzc2lvbnMgZm9yIHdoaWNoIGEgc3ViLWluZmVyZW5jZSB3YXMgdHJpZ2dl
cmVkOgotCQkvLyAoaGFuZGxlcyBnZW5lcmljIGludm9jYXRpb25zKQotCQlpbnQgbGVuID0gdGhp
cy5pbm5lclBvbGllcy5zaXplKCk7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsK
LQkJCUV4cHJlc3Npb24gaW5uZXIgPSAoRXhwcmVzc2lvbikgdGhpcy5pbm5lclBvbGllcy5nZXQo
aSk7Ci0JCQlpZiAoaW5uZXIgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQkJ
UmVmZXJlbmNlRXhwcmVzc2lvbiByZWZlcmVuY2VFeHByZXNzaW9uID0gKFJlZmVyZW5jZUV4cHJl
c3Npb24pIGlubmVyOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGlsZVRpbWVEZWNsID0gcmVmZXJl
bmNlRXhwcmVzc2lvbi5wcmVwYXJlRm9ySW5mZXJlbmNlUmVzdWx0KHRoaXMuc2NvcGUpOwotCQkJ
CWlmCShjb21waWxlVGltZURlY2wgIT0gbnVsbCkgewotCSAgCQkJCVR5cGVWYXJpYWJsZUJpbmRp
bmdbXSB2YXJpYWJsZXMgPSBjb21waWxlVGltZURlY2wudHlwZVZhcmlhYmxlczsKLQkJCQkJaWYg
KHZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCQkJCQlUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cyA9IGdldFNvbHV0aW9ucyh2YXJpYWJsZXMsIChJbnZvY2F0aW9uU2l0
ZSkgaW5uZXIsIGJvdW5kcyk7Ci0JCQkJCQlyZWZlcmVuY2VFeHByZXNzaW9uLmJpbmRpbmcgPSB0
aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNvbXBpbGVU
aW1lRGVjbCwgYXJndW1lbnRzKTsKLQkJCQkJfQotCQkJCX0KLQkJCX0gZWxzZSBpZiAoaW5uZXIg
aW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW52b2NhdGlvbiBpbm5lck1lc3NhZ2UgPSAo
SW52b2NhdGlvbikgaW5uZXI7Ci0JCQkJVHlwZUJpbmRpbmcgaW5uZXJUYXJnZXRUeXBlID0gaW5u
ZXIuZXhwZWN0ZWRUeXBlKCk7IC8vIG1heSBiZSBzZXQgZnJvbSBhY2NlcHRQZW5kaW5nUG9seUFy
Z3VtZW50cwotCQkJCWlmIChpbm5lclRhcmdldFR5cGUgIT0gbnVsbCAmJiAhaW5uZXJUYXJnZXRU
eXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkKLQkJCQkJaW5uZXJUYXJnZXRUeXBlID0gbnVsbDsKLQkJ
CQlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSBpbm5lck1lc3NhZ2UuYmluZGluZyhpbm5lclRhcmdl
dFR5cGUsIGlubmVyVGFyZ2V0VHlwZSAhPSBudWxsLCB0aGlzLnNjb3BlKTsKLQkJCQlpZiAoYmlu
ZGluZyA9PSBudWxsKQotCQkJCQljb250aW51ZTsKLQkJCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFs
ID0gYmluZGluZy5zaGFsbG93T3JpZ2luYWwoKTsKLQotCQkJCS8vIGFwcGx5IGluZmVyZW5jZSBy
ZXN1bHRzIG9udG8gdGhlIGFsbG9jYXRpb24gdHlwZSBvZiBpbm5lciBkaWFtb25kczoKLQkJCQlp
ZiAob3JpZ2luYWwuaXNDb25zdHJ1Y3RvcigpICYmIGlubmVyLmlzUG9seUV4cHJlc3Npb24oKSkg
ewotCQkJCQlSZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzID0gb3JpZ2luYWwuZGVjbGFy
aW5nQ2xhc3M7Ci0JCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKGRl
Y2xhcmluZ0NsYXNzLnR5cGVWYXJpYWJsZXMoKSwgaW5uZXJNZXNzYWdlLCBib3VuZHMpOwotCQkJ
CQlkZWNsYXJpbmdDbGFzcyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5
cGUoZGVjbGFyaW5nQ2xhc3MsIGFyZ3VtZW50cywgZGVjbGFyaW5nQ2xhc3MuZW5jbG9zaW5nVHlw
ZSgpKTsKLQkJCQkJb3JpZ2luYWwgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylkZWNsYXJp
bmdDbGFzcykuY3JlYXRlUGFyYW1ldGVyaXplZE1ldGhvZChvcmlnaW5hbCk7Ci0JCQkJCWlubmVy
LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShpbm5lclRhcmdldFR5cGUsIHRoaXMuc2NvcGUp
OwkKLQkJCQkJaWYgKHRoaXMuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRpb25C
YXNlZE51bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNo
ZWNrRm9yQ29udHJhZGl0aW9ucyhvcmlnaW5hbCwgaW5uZXJNZXNzYWdlLCB0aGlzLnNjb3BlKTsK
LQkJCQl9Ci0JCQkJCi0JCQkJLy8gYXBwbHkgcmVzdWx0cyBvZiB0aGUgY29tYmluZWQgaW5mZXJl
bmNlIG9udG8gdGhlIGJpbmRpbmcgb2YgdGhlIGlubmVyIGludm9jYXRpb246Ci0JCQkJVHlwZUJp
bmRpbmdbXSBzb2x1dGlvbnMgPSBnZXRTb2x1dGlvbnMob3JpZ2luYWwudHlwZVZhcmlhYmxlcygp
LCBpbm5lck1lc3NhZ2UsIGJvdW5kcyk7Ci0JCQkJaWYgKHNvbHV0aW9ucyA9PSBudWxsKSB7Ci0J
CQkJCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbm5lck1lc3NhZ2Uu
Z2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBi
aW5kaW5nKTsKLQkJCQkJCWlmIChpbm5lckN0eCAhPSBudWxsICYmICFiaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCQkJCQlpbm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbm5l
ck1lc3NhZ2UsIGJpbmRpbmcpOwotCQkJCQkJfQotCQkJCQl9Ci0JCQkJCWNvbnRpbnVlOyAvLyBp
bm5lciBpbmZlcmVuY2Ugbm90IHJlcXVlc3RlZCAtPiBub3QgYSBwcm9ibGVtCi0JCQkJfQotCQkJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSB0aGlzLmVu
dmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1
dGlvbnMpOwotCQkJCQotCQkJCWlmIChpbm5lck1lc3NhZ2UudXBkYXRlQmluZGluZ3MoaW5uZXJC
aW5kaW5nLCBpbm5lclRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGlt
cHJvdmluZyBhbnl0aGluZwotCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3Vt
ZW50cyhpbm5lck1lc3NhZ2UsIGlubmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJfQotCQkJ
fQotCQl9Ci0JCXRoaXMuc3RlcENvbXBsZXRlZCA9IEJJTkRJTkdTX1VQREFURUQ7IC8vIHdlJ3Jl
IGRvbmUtZG9uZQotCX0KLQotCXByaXZhdGUgdm9pZCBhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50
cyhCb3VuZFNldCBhY2NlcHRlZFJlc3VsdCwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcywg
Ym9vbGVhbiBpc1ZhckFyZ3MpIHsKLQkJaWYgKGFjY2VwdGVkUmVzdWx0ID09IG51bGwgfHwgdGhp
cy5pbnZvY2F0aW9uQXJndW1lbnRzID09IG51bGwpIHJldHVybjsKLQkJU3Vic3RpdHV0aW9uIHN1
YnN0aXR1dGlvbiA9IGdldFJlc3VsdFN1YnN0aXR1dGlvbihhY2NlcHRlZFJlc3VsdCk7Ci0JCWZv
ciAoaW50IGkgPSAwOyBpIDwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7
Ci0JCQlUeXBlQmluZGluZyB0YXJnZXRUeXBlID0gZ2V0UGFyYW1ldGVyKHBhcmFtZXRlclR5cGVz
LCBpLCBpc1ZhckFyZ3MpOwotCQkJaWYgKCF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkK
LQkJCQl0YXJnZXRUeXBlID0gU2NvcGUuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIHRhcmdldFR5
cGUpOwotCQkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRz
W2ldOwotCQkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW52
b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGV4cHJlc3Npb247Ci0JCQkJaWYgKCF0
aGlzLmlubmVyUG9saWVzLmNvbnRhaW5zKGludm9jYXRpb24pKSB7Ci0JCQkJCU1ldGhvZEJpbmRp
bmcgbWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHRhcmdldFR5cGUsIHRydWUsIHRoaXMuc2Nv
cGUpOwotCQkJCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSB7Ci0JCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcHJl
dmlvdXNCaW5kaW5nID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9k
OwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZl
cmVuY2VDb250ZXh0KHByZXZpb3VzQmluZGluZyk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVs
bCkgewotCQkJCQkJCS8vIHdlIGhhdmUgYSBub24tcG9seSBnZW5lcmljIGludm9jYXRpb24sIHdo
aWNoIG5lZWRzIGluZmVyZW5jZSBidXQgaXMgbm90IGNvbm5lY3RlZCB2aWEgaW5uZXJQb2xpcy4K
LQkJCQkJCQkvLyBGaW5pc2ggdGhhdCBpbm5lciBpbmZlcmVuY2Ugbm93IChpbmNsLiBiaW5kaW5n
IHVwZGF0ZXMpOgotCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5uZXJDdHgu
aW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJ
CWlmICghaW5uZXJCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQkJaW5uZXJDdHgu
cmVwb3J0SW52YWxpZEludm9jYXRpb24oaW52b2NhdGlvbiwgaW5uZXJCaW5kaW5nKTsKLQkJCQkJ
CQl9Ci0JCQkJCQkJaWYgKGludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nLCB0
YXJnZXRUeXBlKSkgeyAvLyBvbmx5IGlmIHdlIGFyZSBhY3R1YWxseSBpbXByb3ZpbmcgYW55dGhp
bmcKLQkJCQkJCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2Nh
dGlvbiwgaW5uZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJ
CX0gZWxzZSBpZihtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl7
Ci0JCQkJCQlleHByZXNzaW9uLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBl
LCB0aGlzLnNjb3BlKTsKLQkJCQkJfQotCQkJCX0gZWxzZSB7Ci0JCQkJCWV4cHJlc3Npb24uc2V0
RXhwZWN0ZWRUeXBlKHRhcmdldFR5cGUpOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJaWYgKHRo
aXMuaW5uZXJQb2xpZXMuY29udGFpbnMoZXhwcmVzc2lvbikpIC8vIG1heSBnZXQgaGVyZSBmb3Ig
UmVmZXJlbmNlRXhwcmVzc2lvbnMgLi4uCi0JCQkJCWV4cHJlc3Npb24uc2V0RXhwZWN0ZWRUeXBl
KHRhcmdldFR5cGUpOyAvLyAuLi4gcHJlcGFyZSBmb3IgZmluYWwgaW5mZXJlbmNlIHZpYSByZWJp
bmRJbm5lclBvbGllcwotCQkJCWVsc2UKLQkJCQkJZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5h
bFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgdGhpcy5zY29wZSk7Ci0JCQl9Ci0JCX0KLQl9Ci0KIAlw
cml2YXRlIFN1YnN0aXR1dGlvbiBnZXRSZXN1bHRTdWJzdGl0dXRpb24oZmluYWwgQm91bmRTZXQg
cmVzdWx0KSB7CiAJCXJldHVybiBuZXcgU3Vic3RpdHV0aW9uKCkgewogCQkJcHVibGljIExvb2t1
cEVudmlyb25tZW50IGVudmlyb25tZW50KCkgeyAKQEAgLTE1ODgsMTcgKzEzMjQsMTAgQEAKIAkJ
fQogCQlpZiAoZXhwZWN0ZWRUeXBlID09IG51bGwpCiAJCQlyZXR1cm4gbWV0aG9kOyAvLyBhc3N1
bWUgaW5mZXJlbmNlIGZhaWx1cmUgY29uY2VybmVkIGFub3RoZXIgZXhwcmVzc2lvbgotCQlQcm9i
bGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5n
KG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNv
bnMuUGFyYW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0pOworCQlQcm9ibGVtTWV0
aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhv
ZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuSW52
b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlKTsKIAkJcHJvYmxlbU1ldGhvZC5yZXR1cm5UeXBl
ID0gZXhwZWN0ZWRUeXBlOwogCQlwcm9ibGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQgPSB0aGlz
OwogCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQl9Ci0KLQlwdWJsaWMgdm9pZCByZXBvcnRJbnZh
bGlkSW52b2NhdGlvbihJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZykgewotCQlpZiAoaW52b2NhdGlvbiBpbnN0YW5jZW9mIE1lc3NhZ2VTZW5kKQotCQkJdGhpcy5z
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKChNZXNzYWdlU2VuZCkgaW52b2Nh
dGlvbiwgYmluZGluZyk7Ci0JCWVsc2UKLQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
aW52YWxpZENvbnN0cnVjdG9yKChTdGF0ZW1lbnQpaW52b2NhdGlvbiwgYmluZGluZyk7CiAJfQog
CiAJLy8gZGVidWdnaW5nOgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9u
bWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhCmluZGV4IDgx
NDRlMjEuLjQ5Mjg3MDQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1l
bnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKQEAgLTM4
LDYgKzM4LDcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJP
cGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNsYXNz
RmlsZVBvb2w7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5B
U1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ29t
cGlsYXRpb25Vbml0RGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwpAQCAtMTAwMyw2ICsxMDA0LDEw
IEBACiAJcmV0dXJuIHRoaXMudHlwZVN5c3RlbS5nZXRXaWxkY2FyZChnZW5lcmljVHlwZSwgcmFu
aywgYm91bmQsIG90aGVyQm91bmRzLCBib3VuZEtpbmQpOwogfQogCitwdWJsaWMgQ2FwdHVyZUJp
bmRpbmcgY3JlYXRlQ2FwdHVyZWRXaWxkY2FyZChXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQsIFJl
ZmVyZW5jZUJpbmRpbmcgY29udGV4dFR5cGUsIGludCBwb3NpdGlvbiwgQVNUTm9kZSBjdWQsIGlu
dCBpZCkgeworCXJldHVybiB0aGlzLnR5cGVTeXN0ZW0uZ2V0Q2FwdHVyZWRXaWxkY2FyZCh3aWxk
Y2FyZCwgY29udGV4dFR5cGUsIHBvc2l0aW9uLCBjdWQsIGlkKTsKK30KKwogcHVibGljIFdpbGRj
YXJkQmluZGluZyBjcmVhdGVXaWxkY2FyZChSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlLCBp
bnQgcmFuaywgVHlwZUJpbmRpbmcgYm91bmQsIFR5cGVCaW5kaW5nW10gb3RoZXJCb3VuZHMsIGlu
dCBib3VuZEtpbmQsIEFubm90YXRpb25CaW5kaW5nIFtdIGFubm90YXRpb25zKSB7CiAJcmV0dXJu
IHRoaXMudHlwZVN5c3RlbS5nZXRXaWxkY2FyZChnZW5lcmljVHlwZSwgcmFuaywgYm91bmQsIG90
aGVyQm91bmRzLCBib3VuZEtpbmQsIGFubm90YXRpb25zKTsKIH0KZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5n
LmphdmEKaW5kZXggMzhiNTgwOC4uZGY0YjkxNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9N
ZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEK
QEAgLTEyOTIsNCArMTI5Miw3IEBACiBwdWJsaWMgYm9vbGVhbiBpc1ZvaWRNZXRob2QoKSB7CiAJ
cmV0dXJuIHRoaXMucmV0dXJuVHlwZSA9PSBUeXBlQmluZGluZy5WT0lEOwogfQorcHVibGljIGJv
b2xlYW4gaXNTeW50aGV0aWNTdGF0aWNGYWN0b3J5KCkgeworCXJldHVybiBmYWxzZTsKK30KIH0K
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
Zy5qYXZhCmluZGV4IDJlOTZhNGIuLjAxNmIzYTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMzEsNiArMzEsNyBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNz
RmlsZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
aW1wbC5Db21waWxlck9wdGlvbnM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5JbmZlcmVuY2VDb250ZXh0MTguU29sdXRpb247CiAKIC8qKgogICogQmlu
ZGluZyBkZW5vdGluZyBhIGdlbmVyaWMgbWV0aG9kIGFmdGVyIHR5cGUgcGFyYW1ldGVyIHN1YnN0
aXR1dGlvbnMgZ290IHBlcmZvcm1lZC4KQEAgLTQxLDcgKzQyLDcgQEAKIHB1YmxpYyBjbGFzcyBQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVkTWV0
aG9kQmluZGluZyBpbXBsZW1lbnRzIFN1YnN0aXR1dGlvbiB7CiAKICAgICBwdWJsaWMgVHlwZUJp
bmRpbmdbXSB0eXBlQXJndW1lbnRzOwotICAgIHByaXZhdGUgTG9va3VwRW52aXJvbm1lbnQgZW52
aXJvbm1lbnQ7CisgICAgcHJvdGVjdGVkIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50Owog
ICAgIHB1YmxpYyBib29sZWFuIGluZmVycmVkUmV0dXJuVHlwZTsKICAgICBwdWJsaWMgYm9vbGVh
biB3YXNJbmZlcnJlZDsgLy8gb25seSBzZXQgdG8gdHJ1ZSBmb3IgaW5zdGFuY2VzIHJlc3VsdGlu
ZyBmcm9tIG1ldGhvZCBpbnZvY2F0aW9uIGluZmVycmVuY2UKICAgICBwdWJsaWMgYm9vbGVhbiBp
c1JhdzsgLy8gc2V0IHRvIHRydWUgZm9yIG1ldGhvZCBiZWhhdmluZyBhcyByYXcgZm9yIHN1YnN0
aXR1dGlvbiBwdXJwb3NlCkBAIC01MCwzMSArNTEsMTEgQEAKIAkvKioKIAkgKiBQZXJmb3JtIGlu
ZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZCB0eXBlIHBhcmFtZXRlcnMgYW5kL29yIGV4cGVjdGVk
IHR5cGUKIAkgKiA8cD4KLQkgKiBJbiAxLjgrIHRoZSBmb2xsb3dpbmcgZGlzY2lwbGluZSBoYXMg
dG8gYmUgb2JzZXJ2ZWQgYnkgY2FsbGVyczoKLQkgKiBFYWNoIGludm9jYXRpb24gbXVzdCBiZSBz
dWJqZWN0ZWQgdG8gdHdvIGxldmVscyBvZiBpbmZlcmVuY2U6Ci0JICogPC9wPgotCSAqIDx1bD4K
LQkgKiA8bGk+IHtAbGluayBTY29wZSNBUFBMSUNBQklMSVRZIEludm9jYXRpb24gQXBwbGljYWJp
bGl0eSBJbmZlcmVuY2V9LCB3aGljaCBtYXkgYmUgYXBwbGllZAotCSAqICAgICBtdWx0aXBsZSB0
aW1lcyBmb3IgdGhlIHNhbWUgaW52b2NhdGlvbjwvbGk+Ci0JICogPGxpPiB7QGxpbmsgU2NvcGUj
SU5WT0NBVElPTl9UWVBFIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2V9LCB3aGljaCBpcyBmaW5h
bGx5IHBlcmZvcm1lZAotCSAqICAgICBmb3IgdGhlIHNlbGVjdGVkIG1ldGhvZCBhbmQgd2hpY2gg
YWRkcyBpbmZvcm1hdGlvbiBmcm9tIHRoZSAidGFyZ2V0IHR5cGUiLjwvbGk+Ci0JICogPC91bD4K
LQkgKiA8cD4KLQkgKiBDbGllbnRzIGNhbiBjb250cm9sIHdoaWNoIHBhcnRzIG9mIHRoZSBpbmZl
cmVuY2Ugc2hvdWxkIGJlIHBlcmZvcm1lZCBieSBwYXNzaW5nIHRoZSBhcHByb3ByaWF0ZQotCSAq
IGZsYWdzIGludG8gYXJndW1lbnQgJ2luZmVyZW5jZUxldmVsJy4gT24gZWFjaCBjYWxsIHBhdGgg
aXQgbXVzdCBiZSBlbnN1cmVkIHRoYXQgb25lIG9yIG1vcmUKLQkgKiBpbnZvY2F0aW9uIGFwcGxp
Y2FiaWxpdHkgaW5mZXJlbmNlcyBhcmUgYWx3YXlzIGZvbGxvd2VkIGJ5IGV4YWN0bHkgb25lIGlu
dm9jYXRpb24gdHlwZSBpbmZlcmVuY2UKLQkgKiAodW5sZXNzIGVycm9ycyBoYXZlIGJlZW4gZGV0
ZWN0ZWQpLgotCSAqIDwvcD4KLQkgKiA8cD4KLQkgKiBJbml0aWFsIGNsaWVudHMgYXJlIHRoZSBk
aXJlY3QgY2FsbGVycyBvZgotCSAqIHtAbGluayBTY29wZSNjb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZChNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10sSW52b2NhdGlvblNpdGUsaW50KX0sCi0JICog
d2hpY2ggc2hvdWxkIGVpdGhlciBpbnZva2UgYm90aCBsZXZlbHMgb2YgaW5mZXJlbmNlIDxlbT5v
cjwvZW0+IGRlbGVnYXRlIHRoZSBzZWNvbmQgcGFydCB0bwotCSAqIHtAbGluayBTY29wZSNtb3N0
U3BlY2lmaWNNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmdbXSxpbnQsVHlwZUJpbmRpbmdbXSxJ
bnZvY2F0aW9uU2l0ZSxSZWZlcmVuY2VCaW5kaW5nKX0sCi0JICogd2hpY2ggaXMgaW50ZW5kZWQg
dG8gZW5zdXJlIGNvbXBsZXRpbmcgdGhlIGluZmVyZW5jZSBvbiBhbGwgbm9uLWVycm9yIGV4aXRz
LgorCSAqIEluIDEuOCsgaWYgdGhlIGV4cGVjdGVkIHR5cGUgaXMgbm90IHlldCBhdmFpbGFibGUg
ZHVlIHRvIHRoaXMgY2FsbCBiZWluZyBhbiBhcmd1bWVudCB0byBhbiBvdXRlciBjYWxsIHdoaWNo
IGlzIG5vdCBvdmVybG9hZC1yZXNvbHZlZCB5ZXQsCisJICogdGhlIHJldHVybmVkIG1ldGhvZCBi
aW5kaW5nIHdpbGwgYmUgYSBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLgog
CSAqIDwvcD4gIAogCSAqLwotCXB1YmxpYyBzdGF0aWMgTWV0aG9kQmluZGluZyBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG9yaWdpbmFsTWV0aG9kLCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50cywgU2NvcGUgc2NvcGUsCi0JCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0
ZSwgaW50IGluZmVyZW5jZUxldmVsKQorCXB1YmxpYyBzdGF0aWMgTWV0aG9kQmluZGluZyBjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG9yaWdpbmFsTWV0aG9kLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cywgU2NvcGUgc2NvcGUsCUludm9jYXRpb25TaXRlIGludm9jYXRpb25T
aXRlKQogCXsKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0
aXR1dGU7CiAJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gb3JpZ2luYWxN
ZXRob2QudHlwZVZhcmlhYmxlczsKQEAgLTk1LDEyOCArNzYsMzkgQEAKIAkJCS8vIGluaXRpYWxp
emVzIHRoZSBtYXAgb2Ygc3Vic3RpdHV0ZXMgKHZhciAtLT4gdHlwZVtdW117IGVxdWFsLCBleHRl
bmRzLCBzdXBlcn0KIAkJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9k
LnBhcmFtZXRlcnM7CiAKLS8vID09PT0gMS44OiBUaGUgbWFpbiBkcml2ZXIgZm9yIGluZmVyZW5j
ZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0KLQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgx
OCA9IG51bGw7CiAJCQlDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29t
cGlsZXJPcHRpb25zKCk7Ci0JCQlpZiAoY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2Nv
cGUuQVBQTElDQUJJTElUWSkgIT0gMCkKLQkJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5m
cmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOwotCQkJCWVsc2UgaWYgKGludm9jYXRpb25TaXRl
IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBvcmlnaW5hbE1ldGhvZCBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKLQkJCQkJaW5mQ3R4MTggPSAoKEludm9jYXRp
b24pIGludm9jYXRpb25TaXRlKS5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIG9yaWdpbmFsTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4MTggPT0g
bnVsbCkKLQkJCQkJcmV0dXJuIG9yaWdpbmFsTWV0aG9kOwotCQkJfQotCQkJaWYgKGluZkN0eDE4
ICE9IG51bGwpIHsKLQkJCQl0cnkgewotCQkJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9
IG51bGw7Ci0JCQkJCUJvdW5kU2V0IHJlc3VsdCA9IG51bGw7Ci0JCQkJCWlmICgoaW5mZXJlbmNl
TGV2ZWwgJiBTY29wZS5BUFBMSUNBQklMSVRZKSAhPSAwKSB7CisJCQlpZiAoY29tcGlsZXJPcHRp
b25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJCQkJcmV0dXJu
IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgc2Nv
cGUsIGludm9jYXRpb25TaXRlKTsKIAotCQkJCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2FiaWxp
dHkpOiAtLS0tCi0JCQkJCQlib29sZWFuIGlzRGlhbW9uZCA9IG9yaWdpbmFsTWV0aG9kLmlzQ29u
c3RydWN0b3IoKQotCQkJCQkJCQkmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Np
b24KLQkJCQkJCQkJJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHByZXNz
aW9uKG9yaWdpbmFsTWV0aG9kKTsKLQkJCQkJCWlmIChhcmd1bWVudHMubGVuZ3RoID09IHBhcmFt
ZXRlcnMubGVuZ3RoKSB7Ci0JCQkJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9IEluZmVyZW5j
ZUNvbnRleHQxOC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFsaWRhdGUgaWYgMiBwaGFzZSBjaGVj
a2luZyAoc3RyaWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZmaWNpZW50LgotCQkJCQkJCWluZkN0
eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50
cywgaXNEaWFtb25kKTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZl
KCk7Ci0JCQkJCQl9Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgPT0gbnVsbCAmJiBvcmln
aW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkgewotCQkJCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1h
cml0eSBhcHBsaWNhYmlsaXR5Ci0JCQkJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVz
aEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCi0JCQkJCQkJaW5mQ3R4MTgu
aW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7Ci0JCQkJCQkJ
aW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJn
dW1lbnRzLCBpc0RpYW1vbmQpOwotCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTgu
c29sdmUoKTsKLQkJCQkJCX0KLQkJCQkJCWlmIChwcm92aXNpb25hbFJlc3VsdCAhPSBudWxsICYm
IGluZkN0eDE4LmlzUmVzb2x2ZWQocHJvdmlzaW9uYWxSZXN1bHQpKSB7Ci0JCQkJCQkJaW5mQ3R4
MTguc3RvcmVkU29sdXRpb24gPSBwcm92aXNpb25hbFJlc3VsdDsKLQkJCQkJCQlpbmZDdHgxOC5z
dGVwQ29tcGxldGVkID0gSW5mZXJlbmNlQ29udGV4dDE4LkFQUExJQ0FCSUxJVFlfSU5GRVJSRUQ7
Ci0JCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lv
bikKLQkJCQkJCQkJKChSZWZlcmVuY2VFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0ZSkuaW5mZXJl
bmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQl9Ci0JCQkJCX0gZWxzZSB7
Ci0JCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnN0b3JlZFNvbHV0aW9uOwotCQkJ
CQl9Ci0JCQkJCXJlc3VsdCA9IGluZkN0eDE4LmN1cnJlbnRCb3VuZHMuY29weSgpOyAvLyB0aGUg
cmVzdWx0IGFmdGVyIHJlZHVjdGlvbiwgd2l0aG91dCBlZmZlY3RzIG9mIHJlc29sdmUoKQorCQkJ
Ly8gMS43LSBvbmx5LgorCQkJaW5mZXJlbmNlQ29udGV4dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0
KG9yaWdpbmFsTWV0aG9kKTsKKwkJCW1ldGhvZFN1YnN0aXR1dGUgPSBpbmZlckZyb21Bcmd1bWVu
dFR5cGVzKHNjb3BlLCBvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBwYXJhbWV0ZXJzLCBpbmZl
cmVuY2VDb250ZXh0KTsKKwkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCisJCQkJcmV0
dXJuIG51bGw7CiAKLQkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNp
dGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJCQkJYm9vbGVhbiBoYXNSZXR1cm5Qcm9ibGVt
ID0gZmFsc2U7Ci0JCQkJCWJvb2xlYW4gaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZhbHNlOwot
CQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUuSU5WT0NBVElPTl9UWVBFKSAhPSAwIC8v
IHJlcXVlc3RlZD8KLQkJCQkJCQkmJiAoZXhwZWN0ZWRUeXBlICE9IG51bGwgfHwgIWludm9jYXRp
b25TaXRlLmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkpIHsgLy8g
cG9zc2libGU/Ci0KLQkJCQkJCS8vIC0tLS0gMTguNS4yIChJbnZvY2F0aW9uIHR5cGUpOiAtLS0t
Ci0JCQkJCQlyZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhw
ZWN0ZWRUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOwotCQkJCQkJaW52b2Nh
dGlvblR5cGVJbmZlcnJlZCA9IHRydWU7Ci0JCQkJCQloYXNSZXR1cm5Qcm9ibGVtIHw9IHJlc3Vs
dCA9PSBudWxsOwotCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCi0JCQkJCQkJcmVzdWx0ID0g
cHJvdmlzaW9uYWxSZXN1bHQ7IC8vIGxldCdzIHByZWZlciBhIHR5cGUgZXJyb3IgcmVnYXJkaW5n
IHRoZSByZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGluZyBubyBtYXRjaCBhdCBhbGwKLQkJCQkJfSBl
bHNlIHsKLQkJCQkJCS8vIHdlJ3JlIG5vdCB5ZXQgcmVhZHkgZm9yIGludm9jYXRpb24gdHlwZSBp
bmZlcmVuY2UKLQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OwotCQkJCQl9Ci0KLQkJ
CQkJaWYgKHJlc3VsdCAhPSBudWxsKSB7Ci0JCQkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24g
ZXRjOgotCQkJCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBpbmZDdHgxOC5nZXRTb2x1dGlv
bnModHlwZVZhcmlhYmxlcywgaW52b2NhdGlvblNpdGUsIHJlc3VsdCk7Ci0JCQkJCQlpZiAoc29s
dXRpb25zICE9IG51bGwpIHsKLQkJCQkJCQkKLQkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gc2Nv
cGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5h
bE1ldGhvZCwgc29sdXRpb25zKTsKLQkJCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkgeyAvLyBp
bGxlZ2FsbHkgd29ya2luZyBmcm9tIHRoZSBwcm92aXNpb25hbCByZXN1bHQ/Ci0JCQkJCQkJCU1l
dGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IGluZkN0eDE4LmdldFJldHVyblByb2JsZW1NZXRo
b2RJZk5lZWRlZChleHBlY3RlZFR5cGUsIG1ldGhvZFN1YnN0aXR1dGUpOwotCQkJCQkJCQlpZiAo
cHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKQotCQkJCQkJCQkJ
cmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JCQkJCQkJfQotCQkJCQkJCWlmIChpbnZvY2F0aW9uVHlw
ZUluZmVycmVkKSB7Ci0JCQkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFz
ZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5j
aGVja0ZvckNvbnRyYWRpdGlvbnMobWV0aG9kU3Vic3RpdHV0ZSwgaW52b2NhdGlvblNpdGUsIHNj
b3BlKTsKLQkJCQkJCQkJaW5mQ3R4MTgucmViaW5kSW5uZXJQb2xpZXMocmVzdWx0LCBtZXRob2RT
dWJzdGl0dXRlLnBhcmFtZXRlcnMpOwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRo
b2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5kQ2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKLQkJ
CQkJCQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKLQkJCQkJCQkJCXJldHVybiBwcm9ibGVt
TWV0aG9kOwotCQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0
YW5jZW9mIEludm9jYXRpb24pCi0JCQkJCQkJCQkoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRl
KS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAv
LyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlzaCBsYXRlcgotCQkJCQkJCX0KLQkJCQkJCQly
ZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsKLQkJCQkJCX0KLQkJCQkJfQotCQkJCQlyZXR1cm4gbnVs
bDsKLQkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJLy8g
RklYTUUgc3RvcC1nYXAgbWVhc3VyZQotCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5l
cmljSW5mZXJlbmNlRXJyb3IoZS5nZXRNZXNzYWdlKCksIGludm9jYXRpb25TaXRlKTsKLQkJCQkJ
cmV0dXJuIG51bGw7CisJCQkvLyBzdWJzdGl0dXRlcyBtYXkgaG9sZCBudWxsIHRvIGRlbm90ZSB1
bnJlc29sdmVkIHZhcnMsIGJ1dCBudWxsIGFyZ3VtZW50cyBnb3QgcmVwbGFjZWQgd2l0aCByZXNw
ZWN0aXZlIG9yaWdpbmFsIHZhcmlhYmxlIGluIHBhcmFtIG1ldGhvZAorCQkJLy8gMTUuMTIuMi44
IC0gaW5mZXJyaW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1bWVudHMKKwkJCWlmIChpbmZlcmVuY2VD
b250ZXh0Lmhhc1VucmVzb2x2ZWRUeXBlQXJndW1lbnQoKSkgeworCQkJCWlmIChpbmZlcmVuY2VD
b250ZXh0LmlzVW5jaGVja2VkKSB7IC8vIG9ubHkgcmVtZW1iZXIgdW5jaGVja2VkIHN0YXR1cyBw
b3N0IDE1LjEyLjIuNworCQkJCQlpbnQgbGVuZ3RoID0gaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0
dXRlcy5sZW5ndGg7CisJCQkJCVN5c3RlbS5hcnJheWNvcHkoaW5mZXJlbmNlQ29udGV4dC5zdWJz
dGl0dXRlcywgMCwgdW5jaGVja2VkQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF0s
IDAsIGxlbmd0aCk7CiAJCQkJfQotCQkJfSBlbHNlIHsKLS8vID09PT0gMS44ID09PT0KLQkJCQlp
bmZlcmVuY2VDb250ZXh0ID0gbmV3IEluZmVyZW5jZUNvbnRleHQob3JpZ2luYWxNZXRob2QpOwot
CQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBpbmZlckZyb21Bcmd1bWVudFR5cGVzKHNjb3BlLCBvcmln
aW5hbE1ldGhvZCwgYXJndW1lbnRzLCBwYXJhbWV0ZXJzLCBpbmZlcmVuY2VDb250ZXh0KTsKKwkJ
CQlpZiAobWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQpIHsK
KwkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlv
blRhcmdldFR5cGUoKTsKKwkJCQkJaWYgKGV4cGVjdGVkVHlwZSAhPSBudWxsKSB7CisJCQkJCQkv
LyByZWNvcmQgaXQgd2FzIGV4cGxpY2l0IGZyb20gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBhc3N1
bWVkIGJ5IGRlZmF1bHQgKHNlZSBiZWxvdykKKwkJCQkJCWluZmVyZW5jZUNvbnRleHQuaGFzRXhw
bGljaXRFeHBlY3RlZFR5cGUgPSB0cnVlOworCQkJCQl9IGVsc2UgeworCQkJCQkJZXhwZWN0ZWRU
eXBlID0gc2NvcGUuZ2V0SmF2YUxhbmdPYmplY3QoKTsgLy8gYXNzdW1lIE9iamVjdCBieSBkZWZh
dWx0CisJCQkJCX0KKwkJCQkJaW5mZXJlbmNlQ29udGV4dC5leHBlY3RlZFR5cGUgPSBleHBlY3Rl
ZFR5cGU7CisJCQkJfQorCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRlLmlu
ZmVyRnJvbUV4cGVjdGVkVHlwZShzY29wZSwgaW5mZXJlbmNlQ29udGV4dCk7CiAJCQkJaWYgKG1l
dGhvZFN1YnN0aXR1dGUgPT0gbnVsbCkKIAkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJCi0JCQkJLy8g
c3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJzLCBidXQg
bnVsbCBhcmd1bWVudHMgZ290IHJlcGxhY2VkIHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5hbCB2YXJp
YWJsZSBpbiBwYXJhbSBtZXRob2QKLQkJCQkvLyAxNS4xMi4yLjggLSBpbmZlcnJpbmcgdW5yZXNv
bHZlZCB0eXBlIGFyZ3VtZW50cwotCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0Lmhhc1VucmVzb2x2
ZWRUeXBlQXJndW1lbnQoKSkgewotCQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pc1VuY2hlY2tl
ZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tlZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcKLQkJ
CQkJCWludCBsZW5ndGggPSBpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLmxlbmd0aDsKLQkJ
CQkJCVN5c3RlbS5hcnJheWNvcHkoaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRlcywgMCwgdW5j
aGVja2VkQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF0sIDAsIGxlbmd0aCk7Ci0J
CQkJCX0KLQkJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGlu
Zy5WT0lEKSB7Ci0JCQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0
ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQkJCQkJaWYgKGV4cGVjdGVkVHlwZSAhPSBudWxs
KSB7Ci0JCQkJCQkJLy8gcmVjb3JkIGl0IHdhcyBleHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9w
cG9zZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0IChzZWUgYmVsb3cpCi0JCQkJCQkJaW5mZXJlbmNl
Q29udGV4dC5oYXNFeHBsaWNpdEV4cGVjdGVkVHlwZSA9IHRydWU7Ci0JCQkJCQl9IGVsc2Ugewot
CQkJCQkJCWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7IC8vIGFzc3Vt
ZSBPYmplY3QgYnkgZGVmYXVsdAotCQkJCQkJfQotCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5leHBl
Y3RlZFR5cGUgPSBleHBlY3RlZFR5cGU7Ci0JCQkJCX0KLQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9
IG1ldGhvZFN1YnN0aXR1dGUuaW5mZXJGcm9tRXhwZWN0ZWRUeXBlKHNjb3BlLCBpbmZlcmVuY2VD
b250ZXh0KTsKLQkJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUgPT0gbnVsbCkKLQkJCQkJCXJldHVy
biBudWxsOwotCQkJCX0KIAkJCX0KIAkJfQorCQkKIAogCQkvKiBib3VuZHMgY2hlY2s6IGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yNDIxNTksIEluZmVycmVk
IHR5cGVzIG1heSBjb250YWluIHNlbGYgcmVmZXJlbmNlCiAJCSAgIGluIGZvcm1hbCBib3VuZHMu
IElmICJUIGV4dGVuZHMgSTxUPiIgaXMgYSBvcmlnaW5hbCB0eXBlIHZhcmlhYmxlIGFuZCBUIHdh
cyBpbmZlcnJlZCB0byBiZSBJPFQ+IGR1ZSBwb3NzaWJseQpAQCAtMjY2LDYgKzE1OCw5MyBAQAog
CQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsKIAl9CiAKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QxOChNZXRob2RCaW5kaW5nIG9yaWdpbmFsTWV0
aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgZmluYWwgU2NvcGUgc2NvcGUsIEludm9jYXRp
b25TaXRlIGludm9jYXRpb25TaXRlKSB7CisJCQorCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdb
XSB0eXBlVmFyaWFibGVzID0gb3JpZ2luYWxNZXRob2QudHlwZVZhcmlhYmxlczsKKwkJSW5mZXJl
bmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKKwkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJz
ID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsKKwkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0
ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOworCQlDb21waWxlck9wdGlvbnMgY29tcGls
ZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CisJCWJvb2xlYW4gaW52b2NhdGlv
blR5cGVJbmZlcnJlZCA9IGZhbHNlOworCQkKKwkJdHJ5IHsKKwkJCUJvdW5kU2V0IHByb3Zpc2lv
bmFsUmVzdWx0ID0gbnVsbDsKKwkJCUJvdW5kU2V0IHJlc3VsdCA9IG51bGw7CisJCQkvLyAtLS0t
IDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0KKwkJCWZpbmFsIGJvb2xlYW4gaXNQb2x5RXhw
cmVzc2lvbiA9IGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgRXhwcmVzc2lvbiAmJiAoKEV4cHJl
c3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOwor
CQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBpc1BvbHlFeHByZXNzaW9uICYmIG9yaWdpbmFsTWV0aG9k
LmlzQ29uc3RydWN0b3IoKTsKKwkJCWlmIChhcmd1bWVudHMubGVuZ3RoID09IHBhcmFtZXRlcnMu
bGVuZ3RoKSB7CisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQx
OC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFsaWRhdGUgaWYgMiBwaGFzZSBjaGVja2luZyAoc3Ry
aWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZmaWNpZW50LgorCQkJCWluZkN0eDE4LmluZmVySW52
b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25k
KTsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOworCQkJfQorCQkJaWYgKHJlc3VsdCA9
PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlzVmFyYXJncygpKSB7CisJCQkJLy8gY2hlY2sgZm9y
IHZhcmlhYmxlLWFyaXR5IGFwcGxpY2FiaWxpdHkKKwkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25T
aXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIKKwkJCQlpbmZD
dHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKKwkJ
CQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBh
cmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKKwkJ
CX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCWlmIChpbmZD
dHgxOC5pc1Jlc29sdmVkKHJlc3VsdCkpIHsKKwkJCQlpbmZDdHgxOC5zdGVwQ29tcGxldGVkID0g
SW5mZXJlbmNlQ29udGV4dDE4LkFQUExJQ0FCSUxJVFlfSU5GRVJSRUQ7CisJCQkJaWYgKGludm9j
YXRpb25TaXRlIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKKwkJCQkJKChSZWZlcmVu
Y2VFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0ZSkuaW5mZXJlbmNlS2luZCA9IGluZkN0eDE4Lmlu
ZmVyZW5jZUtpbmQ7ICAgLy8gQ0hFQ0sKKwkJCX0gZWxzZSB7CisJCQkJcmV0dXJuIG51bGw7CisJ
CQl9CisJCQkvLyBBcHBsaWNhYmlsaXR5IHN1Y2NlZWRlZCwgcHJvY2VlZCB0byBpbmZlciBpbnZv
Y2F0aW9uIHR5cGUsIGlmIHBvc3NpYmxlLgorCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0g
aW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKKwkJCWJvb2xlYW4gaGFzUmV0
dXJuUHJvYmxlbSA9IGZhbHNlOworCQkJaWYgKGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpc1Bv
bHlFeHByZXNzaW9uIHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRl
ZmluZXNUYXJnZXRUeXBlKCkpIHsKKwkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBl
KTogLS0tLQorCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gcmVzdWx0OworCQkJCXJlc3VsdCA9IGlu
ZkN0eDE4LmN1cnJlbnRCb3VuZHMuY29weSgpOyAvLyB0aGUgcmVzdWx0IGFmdGVyIHJlZHVjdGlv
biwgd2l0aG91dCBlZmZlY3RzIG9mIHJlc29sdmUoKQorCQkJCXJlc3VsdCA9IGluZkN0eDE4Lmlu
ZmVySW52b2NhdGlvblR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUsIGludm9jYXRpb25TaXRlLCBv
cmlnaW5hbE1ldGhvZCk7CisJCQkJaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IHRydWU7CisJCQkJ
aGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKKwkJCQlpZiAoaGFzUmV0dXJuUHJv
YmxlbSkKKwkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7IC8vIGxldCdzIHByZWZlciBh
IHR5cGUgZXJyb3IgcmVnYXJkaW5nIHRoZSByZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGluZyBubyBt
YXRjaCBhdCBhbGwKKwkJCX0KKwkJCWlmIChyZXN1bHQgIT0gbnVsbCkgeworCQkJCS8vIGFzc2Vt
YmxlIHRoZSBzb2x1dGlvbiBldGM6CisJCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBpbmZD
dHgxOC5nZXRTb2x1dGlvbnModHlwZVZhcmlhYmxlcywgaW52b2NhdGlvblNpdGUsIHJlc3VsdCk7
CisJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7CisJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBz
Y29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdp
bmFsTWV0aG9kLCBzb2x1dGlvbnMpOworCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkgeyAvLyBp
bGxlZ2FsbHkgd29ya2luZyBmcm9tIHRoZSBwcm92aXNpb25hbCByZXN1bHQ/CisJCQkJCQlNZXRo
b2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9k
SWZOZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKKwkJCQkJCWlmIChwcm9i
bGVtTWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKKwkJCQkJCQltZXRo
b2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKKwkJCQkJ
CX0KKwkJCQkJfQorCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkgeworCQkJCQkJaWYg
KGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpCisJ
CQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMobWV0aG9k
U3Vic3RpdHV0ZSwgaW52b2NhdGlvblNpdGUsIHNjb3BlKTsKKwkJCQkJCU1ldGhvZEJpbmRpbmcg
cHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3BlLCBhcmd1
bWVudHMpOworCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkgeworCQkJCQkJCW1ldGhv
ZFN1YnN0aXR1dGUgPSBudWxsOworCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOworCQkJCQkJ
fQorCQkJCQkJaW5mQ3R4MTguc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQoZXhwZWN0ZWRUeXBl
LCBuZXcgU29sdXRpb24obWV0aG9kU3Vic3RpdHV0ZSwgcmVzdWx0KSk7CisJCQkJCX0gZWxzZSB7
CisJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbmV3IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcobWV0aG9kU3Vic3RpdHV0ZSk7CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRp
b25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikKKwkJCQkJCSgoSW52b2NhdGlvbikgaW52b2Nh
dGlvblNpdGUpLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChtZXRob2RTdWJzdGl0dXRlLCBpbmZD
dHgxOCk7IC8vIGtlZXAgY29udGV4dCBzbyB3ZSBjYW4gZmluaXNoIGxhdGVyCisJCQkJCXJldHVy
biBtZXRob2RTdWJzdGl0dXRlOyAKKwkJCQl9CisJCQl9CisJCQlyZXR1cm4gbnVsbDsKKwkJfSBj
YXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7CisJCQkvLyBGSVhNRSBzdG9wLWdh
cCBtZWFzdXJlCisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJy
b3IoZS5nZXRNZXNzYWdlKCksIGludm9jYXRpb25TaXRlKTsKKwkJCXJldHVybiBudWxsOworCQl9
CisJfQorCQogCU1ldGhvZEJpbmRpbmcgYm91bmRDaGVjazE4KFNjb3BlIHNjb3BlLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cykgewogCQlTdWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0gdGhpczsK
IAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0aXR1dGUgPSB0
aGlzOwpAQCAtNzM4LDYgKzcxNywxMSBAQAogCXB1YmxpYyBib29sZWFuIGlzUmF3U3Vic3RpdHV0
aW9uKCkgewogCQlyZXR1cm4gdGhpcy5pc1JhdzsKIAl9CisJCisJQE92ZXJyaWRlCisJcHVibGlj
IGJvb2xlYW4gaXNTeW50aGV0aWNTdGF0aWNGYWN0b3J5KCkgeworCQlyZXR1cm4gb3JpZ2luYWwo
KS5pc1N5bnRoZXRpY1N0YXRpY0ZhY3RvcnkoKTsKKwl9CiAKIAkvKioKIAkgKiBAc2VlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU3Vic3RpdHV0aW9uI3N1YnN0aXR1
dGUob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlVmFyaWFibGVC
aW5kaW5nKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmphdmEKaW5k
ZXggYWQ4ZmExMi4uYjE5MDRmMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBl
QmluZGluZy5qYXZhCkBAIC00Myw2ICs0Myw3IEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRj
aGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlR5cGVS
ZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5X
aWxkY2FyZDsKQEAgLTEyMywxMSArMTI0LDEyIEBACiAJcHVibGljIGJvb2xlYW4gY2FuQmVJbnN0
YW50aWF0ZWQoKSB7CiAJCXJldHVybiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzRGlyZWN0
V2lsZGNhcmQpID09IDApICYmIHN1cGVyLmNhbkJlSW5zdGFudGlhdGVkKCk7IC8vIGNhbm5vdCBp
bnN0YW50aWF0ZSBwYXJhbSB0eXBlIHdpdGggd2lsZGNhcmQgYXJndW1lbnRzCiAJfQorCQogCS8q
KgogCSAqIFBlcmZvcm0gY2FwdHVyZSBjb252ZXJzaW9uIGZvciBhIHBhcmFtZXRlcml6ZWQgdHlw
ZSB3aXRoIHdpbGRjYXJkIGFyZ3VtZW50cwogCSAqIEBzZWUgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZyNjYXB0dXJlKFNjb3BlLGludCkKIAkgKi8K
LQlwdWJsaWMgVHlwZUJpbmRpbmcgY2FwdHVyZShTY29wZSBzY29wZSwgaW50IHBvc2l0aW9uKSB7
CisJcHVibGljIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBjYXB0dXJlKFNjb3BlIHNjb3BlLCBp
bnQgcG9zaXRpb24pIHsKIAkJaWYgKCh0aGlzLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc0RpcmVjdFdp
bGRjYXJkKSA9PSAwKQogCQkJcmV0dXJuIHRoaXM7CiAKQEAgLTEzOSwxNCArMTQxLDIwIEBACiAJ
CVJlZmVyZW5jZUJpbmRpbmcgY29udGV4dFR5cGUgPSBzY29wZS5lbmNsb3NpbmdTb3VyY2VUeXBl
KCk7CiAJCWlmIChjb250ZXh0VHlwZSAhPSBudWxsKSBjb250ZXh0VHlwZSA9IGNvbnRleHRUeXBl
Lm91dGVybW9zdEVuY2xvc2luZ1R5cGUoKTsgLy8gbWF5YmUgbnVsbCB3aGVuIHVzZWQgcHJvZ3Jh
bW1hdGljYWxseSBieSBET00KIAorCQlDb21waWxhdGlvblVuaXRTY29wZSBjb21waWxhdGlvblVu
aXRTY29wZSA9IHNjb3BlLmNvbXBpbGF0aW9uVW5pdFNjb3BlKCk7CisJCUFTVE5vZGUgY3VkID0g
Y29tcGlsYXRpb25Vbml0U2NvcGUucmVmZXJlbmNlQ29udGV4dDsKKwkJbG9uZyBzb3VyY2VMZXZl
bCA9IHRoaXMuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5zb3VyY2VMZXZlbDsKKwkJCiAJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCVR5cGVCaW5kaW5nIGFyZ3VtZW50
ID0gb3JpZ2luYWxBcmd1bWVudHNbaV07CiAJCQlpZiAoYXJndW1lbnQua2luZCgpID09IEJpbmRp
bmcuV0lMRENBUkRfVFlQRSkgeyAvLyBubyBjYXB0dXJlIGZvciBpbnRlcnNlY3Rpb24gdHlwZXMK
IAkJCQlmaW5hbCBXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQgPSAoV2lsZGNhcmRCaW5kaW5nKSBh
cmd1bWVudDsKIAkJCQlpZiAod2lsZGNhcmQuYm91bmRLaW5kID09IFdpbGRjYXJkLlNVUEVSICYm
IHdpbGRjYXJkLmJvdW5kLmlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCkKIAkJCQkJY2Fw
dHVyZWRBcmd1bWVudHNbaV0gPSB3aWxkY2FyZC5ib3VuZDsKLQkJCQllbHNlCi0JCQkJCWNhcHR1
cmVkQXJndW1lbnRzW2ldID0gbmV3IENhcHR1cmVCaW5kaW5nKHdpbGRjYXJkLCBjb250ZXh0VHlw
ZSwgcG9zaXRpb24sIHNjb3BlLmNvbXBpbGF0aW9uVW5pdFNjb3BlKCkubmV4dENhcHR1cmVJRCgp
KTsKKwkJCQllbHNlIGlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
KQorCQkJCQljYXB0dXJlZEFyZ3VtZW50c1tpXSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlQ2Fw
dHVyZWRXaWxkY2FyZCh3aWxkY2FyZCwgY29udGV4dFR5cGUsIHBvc2l0aW9uLCBjdWQsIGNvbXBp
bGF0aW9uVW5pdFNjb3BlLm5leHRDYXB0dXJlSUQoKSk7CisJCQkJZWxzZSAKKwkJCQkJY2FwdHVy
ZWRBcmd1bWVudHNbaV0gPSBuZXcgQ2FwdHVyZUJpbmRpbmcod2lsZGNhcmQsIGNvbnRleHRUeXBl
LCBwb3NpdGlvbiwgY29tcGlsYXRpb25Vbml0U2NvcGUubmV4dENhcHR1cmVJRCgpKTsJCiAJCQl9
IGVsc2UgewogCQkJCWNhcHR1cmVkQXJndW1lbnRzW2ldID0gYXJndW1lbnQ7CiAJCQl9CkBAIC0x
NjAsNyArMTY4LDYgQEAKIAkJfQogCQlyZXR1cm4gY2FwdHVyZWRQYXJhbWV0ZXJpemVkVHlwZTsK
IAl9Ci0JCiAJLyoqCiAJICogUGVyZm9ybSBjYXB0dXJlIGRlY29udmVyc2lvbiBmb3IgYSBwYXJh
bWV0ZXJpemVkIHR5cGUgd2l0aCBjYXB0dXJlZCB3aWxkY2FyZCBhcmd1bWVudHMKIAkgKiBAc2Vl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmcjdW5j
YXB0dXJlKFNjb3BlKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAw
MDAwMDAwLi41YWFhZTg5Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTAsMCArMSwxOCBAQAorLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6
Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogQ29udHJpYnV0b3Jz
OgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlv
bgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXA7CisKK3B1YmxpYyBjbGFzcyBQb2x5UGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIHsgLy8gY29uZnVzZWQgY2l0aXplbi4KKworCXB1YmxpYyBQb2x5UGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBhcHBs
aWNhYmxlTWV0aG9kKSB7CisJCXN1cGVyKGFwcGxpY2FibGVNZXRob2Qub3JpZ2luYWxNZXRob2Qs
IGFwcGxpY2FibGVNZXRob2QudHlwZUFyZ3VtZW50cywgYXBwbGljYWJsZU1ldGhvZC5lbnZpcm9u
bWVudCk7CisJfQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEKaW5kZXggZmYwMjcxOS4u
OWE2NzJmYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCkBAIC0zNiw2ICszNiwxMSBA
QAogCXB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgU2Nv
cGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXMudmFuaWxsYUNvbXBhdGliaWx0eSA/IHRoaXMuZXhw
cmVzc2lvbi5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKSA6IHRoaXMuZXhwcmVzc2lvbi5p
c0JveGluZ0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKTsKIAl9CisJCisJQE92ZXJyaWRlCisJ
cHVibGljIGJvb2xlYW4gaXNQb2x5VHlwZSgpIHsKKwkJcmV0dXJuIHRydWU7CisJfQogCiAJcHVi
bGljIGNoYXJbXSBxdWFsaWZpZWRTb3VyY2VOYW1lKCkgewogCQlyZXR1cm4gcmVhZGFibGVOYW1l
KCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKaW5kZXggMWJkM2RhZi4uNjY3NmQ0YSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQpAQCAtNDAsNyArNDAsNyBAQAogCWZpbmFsIGludCBO
b25TdGF0aWNPckFsaWVuVHlwZVJlY2VpdmVyID0gMjA7CiAJZmluYWwgaW50IEF0dGVtcHRUb0J5
cGFzc0RpcmVjdFN1cGVyID0gMjE7IC8vIHN1cGVyIGFjY2VzcyB3aXRoaW4gZGVmYXVsdCBtZXRo
b2QKIAlmaW5hbCBpbnQgRGVmZWN0aXZlQ29udGFpbmVyQW5ub3RhdGlvblR5cGUgPSAyMjsKLQlm
aW5hbCBpbnQgUGFyYW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0gPSAyMzsKKwlm
aW5hbCBpbnQgSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlID0gMjM7CiAJZmluYWwgaW50
IEFwcGxpY2FibGVNZXRob2RPdmVycmlkZGVuQnlJbmFwcGxpY2FibGUgPSAyNDsKIAlmaW5hbCBp
bnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9ucyA9IDI1OwogCWZpbmFsIGludCBOb1N1Y2hN
ZXRob2RPbkFycmF5ID0gMjY7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggYzlmM2U5MC4uZDI2ZGNmZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQpAQCAtODcsMTcgKzg3LDYgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOT1RfUkVM
QVRFRCA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTU9SRV9HRU5FUklDID0gMTsKIAot
CS8qCi0JICogRmxhZ3MgZm9yIFBHTUIuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBhbmQgaXRz
IGNhbGxlcnMsIHRvIHJlcXVlc3QKLQkgKiB3aGljaCBvZiB0d28gbGV2ZWxzIG9mIGluZmVyZW5j
ZSBzaG91bGQgYmUgcGVyZm9ybWVkIChvciBib3RoKS4KLQkgKi8KLQkvKiogUmVxdWVzdCBJbnZv
Y2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlICgxOC41LjEpLiAqLwotCXB1YmxpYyBzdGF0
aWMgZmluYWwgaW50IEFQUExJQ0FCSUxJVFkgPSAxOwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24g
VHlwZSBJbmZlcmVuY2UgKDE4LjUuMikuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5W
T0NBVElPTl9UWVBFID0gMjsKLQkvKiogUmVxdWVzdCBib3RoIHtAbGluayAjQVBQTElDQUJJTElU
WX0gYW5kIHtAbGluayAjSU5WT0NBVElPTl9UWVBFfSBpbmZlcmVuY2UuICovCi0JcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgRlVMTF9JTkZFUkVOQ0UgPSBBUFBMSUNBQklMSVRZIHwgSU5WT0NBVElP
Tl9UWVBFOwotCiAJcHVibGljIGludCBraW5kOwogCXB1YmxpYyBTY29wZSBwYXJlbnQ7CiAKQEAg
LTY5MSwxMCArNjgwLDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9ubHkKIAkgKiBHaXZlbiBhIG1l
dGhvZCwgcmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3QgYmUgY29udmVydGVkIHRvIHBh
cmFtZXRlcnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2QgaW4gY2FzZSB0
aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJpZ2dlcmVkOwot
CSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNp
bXBseSBhbnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFs
bHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2suIAogCSAqLwotCXByb3Rl
Y3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJp
bmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52
b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQlyZXR1cm4gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VM
ZXZlbCwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJcmV0dXJuIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0aW9uU2l0ZSwgZmFsc2UpOwog
CX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcwMiw4ICs2OTEsNyBAQAogCSAq
IFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMg
Z2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJlZDsKIAkgKiBpbiBjYXNlIHRo
ZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0
IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
LAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCwg
Ym9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXByb3RlY3RlZCBmaW5hbCBNZXRo
b2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGJv
b2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJCVR5cGVCaW5kaW5nW10gZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygp
OwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2QucGFyYW1ldGVyczsKQEAgLTcz
OCw5ICs3MjYsMTcgQEAKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdzOwogCQkJZWxzZSAgLy8gZW5z
dXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxvdyBjYW4gdXBkYXRlIGFyZ3Vt
ZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86IGFsd2F5cyBjb3B5IGJlZm9y
ZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRz
LCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF0sIDAsIGFyZ0xlbmd0aCk7
Ci0JCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBp
bmZlcmVuY2VMZXZlbCk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGlu
dm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkgcmV0dXJuIG51bGw7IC8vIGlu
Y29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgcmV0dXJuIG1ldGhv
ZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNlZGVuY2UKKwkJCQorCQkJaWYg
KG1ldGhvZC5pc1N5bnRoZXRpY1N0YXRpY0ZhY3RvcnkoKSkgeworCQkJCS8qIER1ZSB0byBpbnN0
YW50aWF0aW9uIGl0IGZvbGxvd3MgdGhhdCBhIGxhbWJkYSBvciBhIHJlZmVyZW5jZSBleHByZXNz
aW9uIGFzIGFuIGFyZ3VtZW50IGV4cHJlc3Npb24gd29uJ3Qgc2VlIHR5cGUgdmFyaWFibGVzIGFz
IHRhcmdldCB0eXBlLAorCQkJCSAgIHRvIGRldGVjdCBhbmQgd2VlZCBvdXQgY2FzZXMgbm90IHBl
cnRpbmVudCB0byBhcHBsaWNhYmlsaXR5IChlLmcuIDxUPiAtPiBKbE8gc2F5KS4gSW5mZXJlbmNl
IHN1Y2NlZWRlZCwgYm91bmRzIGNoZWNrIHBhc3NlZC4gSnVzdCBhbnN3ZXIuIAorCQkJCSAgIFdl
IHNob3VsZCBkbyB0aGlzIGZvciBhbGwgY2FzZXMgYWN0dWFsbHksIGJ1dCB0aGF0IGlzIGZvciBh
bm90aGVyIGRheS4uLgorCQkJICAgICovCisJCQkJcmV0dXJuIG1ldGhvZDsKKwkJCX0KIAkJfSBl
bHNlIGlmIChnZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5j
b21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CiAJCQlpZiAobWV0
aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJ
aWYgKCEoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKS53YXNJbmZl
cnJlZCkKQEAgLTc1NSw3ICs3NTEsNyBAQAogCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0
ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29t
cGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKIAkJCQl0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzID0gZmFsc2U7CiAJCX0KLQkJaWYgKChwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwxOChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywg
aW52b2NhdGlvblNpdGUpKSA+IE5PVF9DT01QQVRJQkxFKSB7CisJCWlmICgocGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRo
b2RzKSkgPiBOT1RfQ09NUEFUSUJMRSkgewogCQkJaWYgKChtZXRob2QudGFnQml0cyAmIFRhZ0Jp
dHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJLy8gZ2VuZXJh
dGUgcG9seW1vcnBoaWMgbWV0aG9kCiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVh
dGVQb2x5bW9ycGhpY01ldGhvZChtZXRob2QsIGFyZ3VtZW50cyk7CkBAIC03NjgsMTQ5ICs3NjQs
NiBAQAogCQlpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlVmFyaWFibGVz
ICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRo
b2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBhcmd1bWVudHMsIFByb2JsZW1SZWFz
b25zLlBhcmFtZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2gpOwogCQlyZXR1cm4gbnVsbDsgLy8g
aW5jb21wYXRpYmxlCi0JfQotCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsMTgoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29s
ZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKLQkJ
amRrMThjaGVja3M6Ci0JCWlmIChzaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBjb21waWxl
ck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkg
ewotCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIHNpdGU7Ci0JCQlpZiAo
bWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0J
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29u
dGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOwotCQkJCWlm
IChpbmZDdHggIT0gbnVsbCkgewotCQkJCQkvLyBpbmZlcmVuY2UgaXMgcmVzcG9uc2libGUsIG5v
IG5lZWQgdG8gcmVjaGVjawotCQkJCQlpZiAoaW5mQ3R4LmlzVmFyQXJncygpKQotCQkJCQkJcmV0
dXJuIFZBUkFSR1NfQ09NUEFUSUJMRTsKLQkJCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCQkJfQot
CQkJfQotCQkJLy8gY29sbGVjdCBpbm5lciBpbnZvY2F0aW9ucyB3aGVyZSB0aGUgb3V0ZXIgZGlk
IG5vdCBpbnZvbHZlIGFueSBpbmZlcmVuY2U6Ci0JCQlFeHByZXNzaW9uW10gaW52b2NhdGlvbkFy
Z3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCQlpZiAoaW52b2NhdGlvbkFyZ3Vt
ZW50cyAhPSBudWxsKSB7Ci0JCQkJSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgPSBpbnZvY2F0aW9uLmlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJaW50IGFyZ0xl
biA9IGludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOwotCQkJCWJvb2xlYW4gaXNWYXJBcmdzW10g
PSBuZXcgYm9vbGVhblsxXTsgLy8gZW11bGF0ZSBhbiBpbi1vdXQgcGFyYW1ldGVyIGZvciBjb21w
YXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lciguLikKLQkJCQlpc1ZhckFyZ3NbMF0gPSBtZXRob2Qu
aXNWYXJhcmdzKCkgJiYgYXJnTGVuICE9IG1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aDsgLy8gaWYg
c2FtZSBsZW5ndGhzLCBpc1ZhckFyZ3MgY2FuIHN0aWxsIGJlIHVwZGF0ZWQgYmVsb3cKLQkJCQlp
bnQgbGV2ZWwgPSBDT01QQVRJQkxFOwotCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnTGVuOyBp
KyspIHsKLQkJCQkJVHlwZUJpbmRpbmcgYXJndW1lbnRUeXBlID0gaSA8IGFyZ3VtZW50cy5sZW5n
dGggPyBhcmd1bWVudHNbaV0gOiBudWxsOyAvLyBsZW5ndGggbWlzbWF0Y2ggbWF5IGhhcHBlbiBm
cm9tIENvZGVTbmlwcGV0TWVzc2FnZVNlbmQucmVzb2x2ZVR5cGUoKSBpbiB0aGUgaWYgKGFyZ0hh
c0Vycm9yKSBibG9jay4KLQkJCQkJaW50IG5leHRMZXZlbCA9IGNvbXBhdGliaWxpdHlMZXZlbDE4
RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGludm9jYXRpb25Bcmd1bWVu
dHNbaV0sIGFyZ3VtZW50VHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCQlpZiAobmV4
dExldmVsID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJcmV0dXJuIG5leHRMZXZlbDsKLQkJCQkJ
aWYgKG5leHRMZXZlbCA9PSAtMikKLQkJCQkJCWJyZWFrIGpkazE4Y2hlY2tzOwotCQkJCQlsZXZl
bCA9IE1hdGgubWF4KGxldmVsLCAgbmV4dExldmVsKTsKLQkJCQl9Ci0JCQkJcmV0dXJuIGxldmVs
OyAvLyBuZWl0aGVyIE5PVF9DT01QQVRJQkxFIG5vciB1bmtub3duKC0yKSBzZWVuCi0JCQl9Ci0J
CX0KLQkJLy8gZmFsbCBiYWNrIHRvIG9sZCBtZXRob2Q6Ci0JCWJvb2xlYW4gdG9sZXJhdGVJbmZl
cmVuY2VWYXJpYWJsZXMgPSAoKHNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSAm
JiAoKFJlZmVyZW5jZUV4cHJlc3Npb24pIHNpdGUpLnRyaWFsUmVzb2x1dGlvbik7Ci0JCXJldHVy
biBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFr
aW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKLQl9Ci0KLQlw
cml2YXRlIGludCBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihNZXRob2RCaW5kaW5nIG1l
dGhvZCwgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIEV4cHJlc3Np
b24gaW52b2NBcmcsIFR5cGVCaW5kaW5nIGFyZ1R5cGUsIGludCBhcmdMZW4sIGludCBpLCBib29s
ZWFuW10gaXNWYXJBcmdzKQotCXsKLQkJaW50IGNvbXBhdGlibGUgPSBpc1ZhckFyZ3NbMF0gPyBW
QVJBUkdTX0NPTVBBVElCTEUgOiBDT01QQVRJQkxFOwotCQlUeXBlQmluZGluZyByZXNvbHZlZFR5
cGUgPSBpbnZvY0FyZy5yZXNvbHZlZFR5cGU7Ci0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBJ
bmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCBpc1Zh
ckFyZ3NbMF0pOwotCQlpZiAoIWlzVmFyQXJnc1swXSAmJiBzaG91bGRUcnlWYXJhcmdzKG1ldGhv
ZCwgcmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKSkgewotCQkJaXNWYXJBcmdzWzBdID0gdHJ1ZTsK
LQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5w
YXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJfQotCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsKQotCQkJ
cmV0dXJuIE5PVF9DT01QQVRJQkxFOyAvLyBtaXNtYXRjaGluZyBudW1iZXIgb2YgYXJncyBvciBv
dGhlciBzZXZlcmUgcHJvYmxlbSBpbnNpZGUgbWV0aG9kIGJpbmRpbmcKLQkJaW50IGxldmVsID0g
LTI7IC8vIGRvbid0IGtub3cKLQkJaWYgKGludm9jQXJnIGluc3RhbmNlb2YgSW52b2NhdGlvbiAm
JiByZXNvbHZlZFR5cGUgIT0gbnVsbCkgewotCQkJSW52b2NhdGlvbiBpbm5lclBvbHkgPSAoSW52
b2NhdGlvbikgaW52b2NBcmc7Ci0JCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChyZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpOwotCQkJaWYgKGxldmVsICE9IE5PVF9DT01QQVRJ
QkxFKSB7Ci0JCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhhcmdUeXBlLCByZXNvbHZlZFR5
cGUpICYmIGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCWlubmVySW5mZXJlbmNl
SGVscGVyLnJlZ2lzdGVySW5uZXJSZXN1bHQobWV0aG9kLCByZXNvbHZlZFR5cGUsIGFyZ0xlbiwg
aSk7Ci0JCQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxldmVsKTsKLQkJCX0gZWxzZSB7
Ci0JCQkJTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5lclBvbHkuYmluZGluZyhudWxs
LCBmYWxzZSwgbnVsbCk7IC8vIDEuIHRyeSB3aXRob3V0IHVwZGF0ZQotCQkJCWlmIChpbm5lckJp
bmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJ
CQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVyUGFyYW1ldGVyaXplZCA9
IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlubmVyQmluZGluZzsKLQkJCQkJ
SW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJQb2x5LmdldEluZmVyZW5jZUNvbnRl
eHQoaW5uZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgIWlu
ZkN0eDE4Lmhhc1Jlc3VsdEZvcih0YXJnZXRUeXBlKSkgewotCQkJCQkJLy8gbm90IGRldGVjdGVk
IGFzIGNvbXBhdGlibGUsIGJlY2F1c2UgaW5mZXJlbmNlIHN0aWxsIG5lZWRzIHRvIGNvbXBsZXRl
PwotCQkJCQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBlKHRhcmdldFR5cGUpOwotCQkJCQkJTWV0
aG9kQmluZGluZyBzb2x1dGlvbiA9IGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUoaW5uZXJQ
b2x5LCBpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYg
c29sdXRpb24uaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlmIChpbm5lclBvbHkudXBkYXRl
QmluZGluZ3Moc29sdXRpb24sIHRhcmdldFR5cGUpKSB7Ci0JCQkJCQkJCWlmIChpbm5lckluZmVy
ZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQkJCQkJaW5uZXJJbmZlcmVuY2VIZWxwZXIucmVnaXN0
ZXJJbm5lclJlc3VsdChtZXRob2QsIGludm9jQXJnLnJlc29sdmVkVHlwZSwgYXJnTGVuLCBpKTsK
LQkJCQkJCQl9Ci0JCQkJCQkJaWYgKHNvbHV0aW9uLnJldHVyblR5cGUgIT0gbnVsbCkgewotCQkJ
CQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChzb2x1dGlvbi5yZXR1cm5U
eXBlLCB0YXJnZXRUeXBlKTsKLQkJCQkJCQkJaWYgKGxldmVsICE9IE5PVF9DT01QQVRJQkxFKQot
CQkJCQkJCQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxldmVsKTsKLQkJCQkJCQl9Ci0J
CQkJCQl9Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUobnVsbCk7Ci0JCQkJCQlyZXR1
cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNlb2Yg
QWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBjb21wYXRp
YmxlLCBiZWNhdXNlIGl0cyBhIGRpYW1vbmQgd2hvc2UgdHlwZSBoYXNuJ3QgeWV0IGJlZW4gaW5m
ZXJyZWQ/Ci0JCQkJCQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSByZXNvbHZlZFR5cGUu
dHlwZUFyZ3VtZW50cygpOwotCQkJCQkJaWYgKHR5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBl
QXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7Ci0JCQkJCQkJQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxs
b2MgPSAoQWxsb2NhdGlvbkV4cHJlc3Npb24pIGlubmVyUG9seTsKLQkJCQkJCQlpZiAoKGFsbG9j
LnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25kKSAhPSAwKSB7Ci0JCQkJCQkJCS8vIG5vdC15
ZXQtaW5mZXJyZWQgZGlhbW9uZDogZXJhc3VyZSBjb21wYXRpYmlsaXR5IHNob3VsZCBzdWZmaWNl
LCBkZXRhaWwgd2lsbCBiZSBjaGVja2VkIHVzaW5nIGluZmVyZW5jZQotCQkJCQkJCQlpZiAocmVz
b2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZS5lcmFzdXJlKCksIHRoaXMpKQot
CQkJCQkJCQkJcmV0dXJuIGNvbXBhdGlibGU7Ci0JCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9IGVsc2UgaWYgKGlubmVyUG9seSBp
bnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgdXBk
YXRlZE1ldGhvZCA9IGlubmVyUG9seS5iaW5kaW5nKHRhcmdldFR5cGUsIGZhbHNlLCBudWxsKTsg
Ly8gMi4gdHJ5IHdpdGggdXBkYXRpbmcKLQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QgIT0gaW5uZXJC
aW5kaW5nICYmIHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJCQkJaWYgKHVwZGF0ZWRNZXRo
b2QuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QuZGVjbGFyaW5n
Q2xhc3MuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkKLQkJCQkJCQlyZXR1cm4gY29tcGF0
aWJsZTsKLQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJCX0gZWxzZSBpZiAodXBk
YXRlZE1ldGhvZC5wcm9ibGVtSWQoKSA9PSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMpIHsKLQkJ
CQkJCQlsZXZlbCA9IC0yOyAvLyBuZWl0aGVyIGdvb2Qgbm9yIGJhZCwgYW5zd2VyICJ1bmtub3du
IgotCQkJCQkJfQotCQkJCQl9Ci0JCQkJfQotCQkJfQotCQl9IGVsc2UgaWYgKGludm9jQXJnLmlz
UG9seUV4cHJlc3Npb24oKSkgewotCQkJaWYgKGludm9jQXJnIGluc3RhbmNlb2YgQ29uZGl0aW9u
YWxFeHByZXNzaW9uKSB7Ci0JCQkJQ29uZGl0aW9uYWxFeHByZXNzaW9uIGNlID0gKENvbmRpdGlv
bmFsRXhwcmVzc2lvbikgaW52b2NBcmc7Ci0JCQkJaW50IGxldmVsMSA9IGNvbXBhdGliaWxpdHlM
ZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVlSWZU
cnVlLCBhcmdUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJaWYgKGxldmVsMSA9PSBO
T1RfQ09NUEFUSUJMRSkKLQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCWludCBsZXZl
bDIgPSBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNl
SGVscGVyLCBjZS52YWx1ZUlmRmFsc2UsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsK
LQkJCQlpZiAobGV2ZWwyID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7Ci0JCQkJcmV0dXJuIE1hdGgubWF4KGxldmVsMSwgbGV2ZWwyKTsKLQkJCX0KLQkJCS8v
IExFIG9yIFJFOgotCQkJaWYgKGludm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwg
dGhpcykpCi0JCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCQlpZiAoIWlzVmFyQXJnc1swXSAmJiBt
ZXRob2QuaXNWYXJhcmdzKCkpIHsgLy8gY2FuJ3QgdXNlIHNob3VsZFRyeVZhcmFyZ3Mgd2l0aG91
dCBhIHJlc29sdmVkVHlwZSwgc28ganVzdCB0cnkgaXQ6Ci0JCQkJaXNWYXJBcmdzWzBdID0gdHJ1
ZTsKLQkJCQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRo
b2QucGFyYW1ldGVycywgaSwgdHJ1ZSk7Ci0JCQkJaWYgKHRhcmdldFR5cGUgIT0gbnVsbCAmJiBp
bnZvY0FyZy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJCQlyZXR1cm4g
VkFSQVJHU19DT01QQVRJQkxFOwotCQkJfQotCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQl9
IGVsc2UgaWYgKHJlc29sdmVkVHlwZSAhPSBudWxsICYmIHJlc29sdmVkVHlwZS5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkvLyBuZWVkIHRvIGhhbmRsZSAibm9ybWFsIiBleHByZXNzaW9ucyB0b28s
IHNpbmNlIG1peGVkIHBvbHkvc3RhbmRhbG9uZSBhcmd1bWVudCBsaXN0cyBtdXN0IGJlIGZ1bGx5
IGFuYWx5emVkLgotCQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChyZXNvbHZl
ZFR5cGUsIHRhcmdldFR5cGUpOwotCQl9Ci0JCXJldHVybiBsZXZlbDsKLQl9Ci0KLQlwcml2YXRl
IGJvb2xlYW4gc2hvdWxkVHJ5VmFyYXJncyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRp
bmcgcmVzb2x2ZWRUeXBlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCWlmICghbWV0aG9k
LmlzVmFyYXJncygpKQotCQkJcmV0dXJuIGZhbHNlOwotCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxs
KQotCQkJcmV0dXJuIHRydWU7CS8vIG9mZiByYW5nZQotCQlpZiAodGFyZ2V0VHlwZS5pc0FycmF5
VHlwZSgpICYmIHJlc29sdmVkVHlwZSAhPSBudWxsICYmICFyZXNvbHZlZFR5cGUuaXNDb21wYXRp
YmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCXJldHVybiB0cnVlOwkvLyBub3QgYSBkaXJl
Y3QgbWF0Y2ggYnV0IGhvcGUgdG8gaW1wcm92ZQotCQlyZXR1cm4gZmFsc2U7CiAJfQogCiAJLyoq
CkBAIC0xMjY3LDcgKzExMjAsNyBAQAogCQkJbmV4dDoKIAkJCWZvciAoaW50IGkgPSBzdGFydEZv
dW5kU2l6ZTsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2RC
aW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRBdChpKTsKLQkJCQlNZXRob2RC
aW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RC
aW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJ
CQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlm
IChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2Qu
aXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGNvbmNyZXRlTWF0Y2hlcyAhPSBudWxsKSB7
CkBAIC0xMjk3LDggKzExNTAsNiBAQAogCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsgLy8gY2Fu
IGJlIG51bGwKIAkJCX0KIAkJCWNvbmNyZXRlTWF0Y2ggPSBjYW5kaWRhdGVzWzBdOwotCQkJLy8g
MS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tz
ICgxOC41LjIpOgotCQkJY29uY3JldGVNYXRjaCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2Nh
dGlvblNpdGUsIGNvbmNyZXRlTWF0Y2gsIGFyZ3VtZW50VHlwZXMpOwogCQkJaWYgKGNvbmNyZXRl
TWF0Y2ggIT0gbnVsbCkKIAkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZl
cmVuY2VzKGNvbmNyZXRlTWF0Y2gudGhyb3duRXhjZXB0aW9ucyk7CiAJCQlyZXR1cm4gY29uY3Jl
dGVNYXRjaDsKQEAgLTEzNzEsNyArMTIyMiw3IEBACiAJCQkJLy8gdGFyZ2V0aW5nIGEgZ2VuZXJp
YyBtZXRob2QgY291bGQgZmluZCBhbiBleGFjdCBtYXRjaCB3aXRoIHZhcmlhYmxlIHJldHVybiB0
eXBlCiAJCQkJaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0gbnVs
bCkgewogCQkJCQkvLyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCguLikgd2lsbCByZXR1cm4gYSBQ
b2x5bW9ycGhpY01ldGhvZEJpbmRpbmcgaWYgbmVlZGVkCi0JCQkJCWV4YWN0TWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRp
b25TaXRlLCBGVUxMX0lORkVSRU5DRSk7CisJCQkJCWV4YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsK
IAkJCQl9IGVsc2UgaWYgKChleGFjdE1ldGhvZC50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9u
UG9seW1vcnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJCQkJLy8gZ2VuZXJhdGUgcG9seW1vcnBo
aWMgbWV0aG9kCiAJCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBo
aWNNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwpAQCAtMTc2MywyMiArMTYxNCwx
MyBAQAogCQkJLy8gYXJndW1lbnQgdHlwZSBjb21wYXRpYmlsaXR5IGNoZWNrCiAJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2RC
aW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRBdChpKTsKLQkJCQlNZXRob2RC
aW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RC
aW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJ
CQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlm
IChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2Qu
aXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGZvdW5kU2l6ZSA9PSAxICYmIGNvbXBhdGli
bGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgdGhpcykp
IHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2aXNpYmxlIG1hdGNoIG5vdwogCQkJCQkJ
CWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCQkJCXJldHVybiBmaW5k
RGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhv
ZEJpbmRpbmcgW10ge2NvbXBhdGlibGVNZXRob2R9KTsKLS8vID09PT0gMS44OiBGaW5hbGl6ZSB0
eXBlIGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0KLQkJCQkJCQlNZXRob2RCaW5k
aW5nIGltcHJvdmVkID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29tcGF0
aWJsZU1ldGhvZCwgYXJndW1lbnRUeXBlcyk7Ci0JCQkJCQkJaWYgKGltcHJvdmVkICE9IG51bGwg
JiYgaW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQljb21wYXRpYmxlTWV0aG9k
ID0gaW1wcm92ZWQ7Ci0JCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQkJcHJvYmxlbU1ldGhvZCA9IGlt
cHJvdmVkOwotCQkJCQkJCQljb250aW51ZTsKLQkJCQkJCQl9Ci0vLyA9PT09IDEuOCA9PT09CiAJ
CQkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNvbXBhdGlibGVNZXRob2QudGhy
b3duRXhjZXB0aW9ucyk7CiAJCQkJCQkJcmV0dXJuIGNvbXBhdGlibGVNZXRob2Q7CiAJCQkJCQl9
CkBAIC0xODg3LDggKzE3MjksNyBAQAogCQkJY2FzZSAxIDoKIAkJCQlpZiAoc2VhcmNoRm9yRGVm
YXVsdEFic3RyYWN0TWV0aG9kKQogCQkJCQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhv
ZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
Y2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBNZXRob2RCaW5kaW5nIFtdIHsgY2FuZGlk
YXRlc1swXSB9KTsKLQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZv
cm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJY2FuZGlkYXRlID0gaW5mZXJJbnZv
Y2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY2FuZGlkYXRlc1swXSwgYXJndW1lbnRUeXBlcyk7
CisJCQkJY2FuZGlkYXRlID0gY2FuZGlkYXRlc1swXTsKIAkJCQlpZiAoY2FuZGlkYXRlICE9IG51
bGwpCiAJCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3du
RXhjZXB0aW9ucyk7CiAJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTIzODAsNyArMjIyMSwxMCBA
QAogCQl9CiAJCWlmIChleGFjdE1ldGhvZCA9PSBudWxsIHx8ICFleGFjdE1ldGhvZC5jYW5CZVNl
ZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQlyZXR1cm4gbnVsbDsKLQkJaWYgKGV4YWN0
TWV0aG9kLmlzVmFyYXJncygpIHx8IGV4YWN0TWV0aG9kLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5k
aW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1l
bnRzKCkgPT0gbnVsbCkKKwkJCisJCWZpbmFsIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cyA9
IGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CisJCVR5cGVWYXJpYWJsZUJp
bmRpbmdbXSB0eXBlVmFyaWFibGVzID0gZXhhY3RNZXRob2QudHlwZVZhcmlhYmxlcygpOworCQlp
ZiAoZXhhY3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5O
T19UWVBFX1ZBUklBQkxFUyAmJiAodHlwZUFyZ3VtZW50cyA9PSBudWxsIHx8IHR5cGVBcmd1bWVu
dHMubGVuZ3RoICE9IHR5cGVWYXJpYWJsZXMubGVuZ3RoKSkpCiAJCQlyZXR1cm4gbnVsbDsKIAkJ
CiAJCWlmIChyZWNlaXZlclR5cGUuaXNBcnJheVR5cGUoKSkgewpAQCAtMjM5NSw2ICsyMjM5LDEw
IEBACiAJCXsKIAkJCXJldHVybiBlbnZpcm9ubWVudCgpLmNyZWF0ZUdldENsYXNzTWV0aG9kKHJl
Y2VpdmVyVHlwZSwgZXhhY3RNZXRob2QsIHRoaXMpOwogCQl9CisJCQorCQlpZiAodHlwZVZhcmlh
YmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSAKKwkJCXJldHVybiBlbnZpcm9ubWVu
dCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4YWN0TWV0aG9kLCB0eXBlQXJn
dW1lbnRzKTsKKwkKIAkJcmV0dXJuIGV4YWN0TWV0aG9kOwogCX0KIAkJCkBAIC0yNDE3LDE5ICsy
MjY1LDI2IEBACiAJCU1ldGhvZEJpbmRpbmcgZXhhY3RDb25zdHJ1Y3RvciA9IG51bGw7CiAJCXVu
aXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlKHJlY2VpdmVyVHlwZSk7CiAJCU1ldGhvZEJpbmRp
bmdbXSBtZXRob2RzID0gcmVjZWl2ZXJUeXBlLmdldE1ldGhvZHMoVHlwZUNvbnN0YW50cy5JTklU
KTsKKwkJZmluYWwgVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRp
b25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQlNZXRob2RCaW5kaW5nIGNv
bnN0cnVjdG9yID0gbWV0aG9kc1tpXTsKIAkJCWlmICghY29uc3RydWN0b3IuY2FuQmVTZWVuQnko
aW52b2NhdGlvblNpdGUsIHRoaXMpKQogCQkJCWNvbnRpbnVlOwogCQkJaWYgKGNvbnN0cnVjdG9y
LmlzVmFyYXJncygpKQogCQkJCXJldHVybiBudWxsOwotCQkJaWYgKGNvbnN0cnVjdG9yLnR5cGVW
YXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGludm9jYXRpb25TaXRl
LmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgPT0gbnVsbCkKKwkJCWlmIChjb25zdHJ1Y3Rvci50eXBl
VmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBnZW5lcmljVHlwZUFy
Z3VtZW50cyA9PSBudWxsKQogCQkJCXJldHVybiBudWxsOwogCQkJaWYgKGV4YWN0Q29uc3RydWN0
b3IgPT0gbnVsbCkgewogCQkJCWV4YWN0Q29uc3RydWN0b3IgPSBjb25zdHJ1Y3RvcjsKIAkJCX0g
ZWxzZSB7CiAJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJZmluYWwgVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdENvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMo
KTsKKwkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewor
CQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IGdlbmVyaWNUeXBlQXJndW1lbnRzLmxlbmd0
aCkKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCWV4YWN0Q29uc3RydWN0b3IgPSBlbnZpcm9ubWVudCgp
LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4YWN0Q29uc3RydWN0b3IsIGdlbmVy
aWNUeXBlQXJndW1lbnRzKTsKIAkJfQogCQlyZXR1cm4gZXhhY3RDb25zdHJ1Y3RvcjsKIAl9CkBA
IC0yNDU4LDcgKzIzMTMsNyBAQAogCQkJaWYgKG1ldGhvZEJpbmRpbmcgIT0gbnVsbCAmJiBtZXRo
b2RCaW5kaW5nLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkgewogCQkJICAgIC8v
IHRhcmdldGluZyBhIG5vbiBnZW5lcmljIGNvbnN0cnVjdG9yIHdpdGggdHlwZSBhcmd1bWVudHMg
PwogCQkJICAgIGlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpICE9IG51
bGwpCi0JCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRo
b2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0Up
OworCQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9k
QmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCXJldHVybiBtZXRo
b2RCaW5kaW5nOwogCQkJfQogCQkJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZlclR5
cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQsIGFyZ3VtZW50VHlwZXMubGVuZ3RoKTsK
QEAgLTI0NzIsNyArMjMyNyw3IEBACiAJCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJCU1l
dGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG51bGw7CiAJCQlmb3IgKGludCBpID0gMCwgbGVu
Z3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJCU1ldGhvZEJpbmRp
bmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0s
IGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRo
b2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRo
b2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGli
bGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKQogCQkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxl
TWV0aG9kOwpAQCAtMjQ5NSw4ICsyMzUwLDcgQEAKIAkJCQkJdmlzaWJsZVt2aXNpYmxlSW5kZXgr
K10gPSBtZXRob2Q7CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDEpIHsKLQkJCQkvLyAx
Ljg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3Mg
KDE4LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUs
IHZpc2libGVbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVybiB2aXNpYmxlWzBdOwogCQkJ
fQogCQkJaWYgKHZpc2libGVJbmRleCA9PSAwKQogCQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhv
ZEJpbmRpbmcoCkBAIC0yNzYwLDcgKzI2MTQsNyBAQAogCQkJCQkJCQlpZiAoZm91bmRQcm9ibGVt
ID09IG51bGwpCiAJCQkJCQkJCQlmb3VuZFByb2JsZW0gPSBwb3NzaWJsZTsgLy8gYW5zd2VyIGFz
IGVycm9yIGNhc2UgbWF0Y2gKIAkJCQkJCQl9IGVsc2UgaWYgKHBvc3NpYmxlLmlzU3RhdGljKCkp
IHsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QocG9zc2libGUsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBM
SUNBQklMSVRZKTsKKwkJCQkJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QocG9zc2libGUsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlKTsKIAkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQkJCQkJ
aWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJCQkJCWlmIChj
b21wYXRpYmxlTWV0aG9kLmNhbkJlU2VlbkJ5KHVuaXRTY29wZS5mUGFja2FnZSkpIHsKQEAgLTM1
OTYsOCArMzQ1MCw4IEBACiAJCQlmb3IgKGludCBpID0gKG9uZVBhcmFtc0xlbmd0aCA+IHR3b1Bh
cmFtc0xlbmd0aCA/IHR3b1BhcmFtc0xlbmd0aCA6IG9uZVBhcmFtc0xlbmd0aCkgLSAyOyBpID49
IDA7IGktLSkKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKG9uZVBhcmFtc1tpXSwgdHdv
UGFyYW1zW2ldKSAmJiAhb25lUGFyYW1zW2ldLmlzQ29tcGF0aWJsZVdpdGgodHdvUGFyYW1zW2ld
KSkKIAkJCQkJcmV0dXJuIGZhbHNlOwotCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChvbmUsIHR3b1BhcmFtcywgdHJ1ZSwgZmFsc2UpID09IE5PVF9DT01QQVRJQkxFCi0JCQkJCSYm
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBhcmFtcywgdHJ1ZSwgZmFsc2Up
ID09IFZBUkFSR1NfQ09NUEFUSUJMRSkKKwkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwob25lLCB0d29QYXJhbXMsIHRydWUpID09IE5PVF9DT01QQVRJQkxFCisJCQkJCSYmIHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBhcmFtcywgdHJ1ZSkgPT0gVkFSQVJHU19D
T01QQVRJQkxFKQogCQkJCXJldHVybiB0cnVlOwogCQl9CiAJCXJldHVybiBmYWxzZTsKQEAgLTQz
NzIsNDQgKzQyMjYsMTIgQEAKIAlwcm90ZWN0ZWQgZmluYWwgTWV0aG9kQmluZGluZyBtb3N0U3Bl
Y2lmaWNNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmdbXSB2aXNpYmxlLCBpbnQgdmlzaWJsZVNp
emUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvblNpdGUgaW52
b2NhdGlvblNpdGUsIFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CiAKIAkJYm9vbGVh
biBpc0pkazE4ID0gY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfODsKLQotCQkvLyBjb21tb24gcGFydCBmb3IgYWxsIGNvbXBsaWFuY2UgbGV2
ZWxzOgogCQlpbnRbXSBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3IGludFt2aXNpYmxlU2l6ZV07
Ci0JCWludCBjb21wYXRpYmxlQ291bnQgPSAwOwotCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2li
bGVTaXplOyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSBhcmd1bWVudFR5cGVz
OwotCQkJaWYgKGlzSmRrMTggJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9u
KSB7Ci0JCQkJSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSAoKElu
dm9jYXRpb24paW52b2NhdGlvblNpdGUpLmlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJaWYg
KGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCWFyZ1R5cGVzID0gaW5uZXJJbmZl
cmVuY2VIZWxwZXIuZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZSh2aXNpYmxlW2ldLCBhcmd1
bWVudFR5cGVzKTsKLQkJCX0KLQkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmdUeXBlcykpICE9IE5PVF9DT01Q
QVRJQkxFKSB7Ci0JCQkJaWYgKGkgIT0gY29tcGF0aWJsZUNvdW50KSB7Ci0JCQkJCXZpc2libGVb
Y29tcGF0aWJsZUNvdW50XSA9IHZpc2libGVbaV07Ci0JCQkJCWNvbXBhdGliaWxpdHlMZXZlbHNb
Y29tcGF0aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNbaV07Ci0JCQkJfQotCQkJCWNv
bXBhdGlibGVDb3VudCsrOwotCQkJfQotCQl9Ci0vLyBUT0RPOiBEaXNhYmxlZCwgYmVjYXVzZSB3
ZSBrbm93IGEgc2l0dWF0aW9uIHdoZXJlIHRoaXMgaXMgZXhwZWN0ZWQsIHNlZSBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvNDI5NDkwCi0vLwkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxl
U2l6ZSkgewotLy8JCQlwcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlUHJvYmxlbSgi
KFJlY292ZXJlZCkgSW50ZXJuYWwgaW5jb25zaXN0ZW5jeSB3aGlsZSBjaGVja2luZyBpbnZvY2F0
aW9uIGFtYmlndWl0eSIsIGludm9jYXRpb25TaXRlLCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5n
KTsgLy8kTk9OLU5MUy0xJAotLy8JCX0KLQkJaWYgKGNvbXBhdGlibGVDb3VudCA9PSAwKSB7Ci0J
CQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0uc2VsZWN0b3IsIGFy
Z3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKLQkJfSBlbHNlIGlmIChjb21w
YXRpYmxlQ291bnQgPT0gMSkgewotCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZlcklu
dm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsK
LQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKLQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJl
Y29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKLQkJCXJldHVy
biBjYW5kaWRhdGU7Ci0JCX0KLQkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkg
ewotCQkJU3lzdGVtLmFycmF5Y29weSh2aXNpYmxlLCAwLCB2aXNpYmxlID0gbmV3IE1ldGhvZEJp
bmRpbmdbdmlzaWJsZVNpemUgPSBjb21wYXRpYmxlQ291bnRdLCAwLCBjb21wYXRpYmxlQ291bnQp
OwotCQkJU3lzdGVtLmFycmF5Y29weShjb21wYXRpYmlsaXR5TGV2ZWxzLCAwLCBjb21wYXRpYmls
aXR5TGV2ZWxzID0gbmV3IGludFtjb21wYXRpYmxlQ291bnRdLCAwLCBjb21wYXRpYmxlQ291bnQp
OwotCQl9CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykKKwkJCWNvbXBh
dGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtp
XSwgYXJndW1lbnRUeXBlcyk7CisJCQogCQkKIAkJTWV0aG9kQmluZGluZ1tdIG1vcmVTcGVjaWZp
YyA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2libGVTaXplXTsKLQogCQlpZiAoaXNKZGsxOCkgewog
CQkJLy8gMTUuMTIuMi41IENob29zaW5nIHRoZSBNb3N0IFNwZWNpZmljIE1ldGhvZAogCQkJaW50
IGNvdW50ID0gMDsKQEAgLTQ0NjMsNyArNDI4NSw3IEBACiAJCQlpZiAoY291bnQgPT0gMCkgewog
CQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXSwgdmlzaWJsZVsw
XS5zZWxlY3RvciwgdmlzaWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5BbWJpZ3Vv
dXMpOwogCQkJfSBlbHNlIGlmIChjb3VudCA9PSAxKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjYW5k
aWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBtb3JlU3BlY2lmaWNb
MF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gbW9yZVNw
ZWNpZmljWzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJY29tcGlsYXRpb25V
bml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9u
cyk7CiAJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ1MTYsNyArNDMzOCw3IEBACiAJCQkJCQkJ
fQogCQkJCQkJfQogCQkJCQkJTWV0aG9kQmluZGluZyBhY2NlcHRhYmxlID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kVG9UZXN0LCB0aWVicmVha01ldGhvZC5wYXJhbWV0ZXJzLAotCQkJ
CQkJCQl0aWVCcmVha0ludm9jYXRpb25TaXRlLCBJTlZPQ0FUSU9OX1RZUEUsIGxldmVsID09IFZB
UkFSR1NfQ09NUEFUSUJMRSk7CisJCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlvblNpdGUsIGxldmVs
ID09IFZBUkFSR1NfQ09NUEFUSUJMRSk7CiAJCQkJCQkvKiBUaGVyZSBhcmUgNCBjaG9pY2VzIHRv
IGNvbnNpZGVyIHdpdGggY3VycmVudCAmIG5leHQgOgogCQkJCQkJIGZvbyhCKSAmIGZvbyhBKSB3
aGVyZSBCIGV4dGVuZHMgQQogCQkJCQkJIDEuIHRoZSAyIG1ldGhvZHMgYXJlIGVxdWFsIChib3Ro
IGFjY2VwdCBlYWNoIG90aGVycyBwYXJhbWV0ZXJzKSAtPiB3YW50IHRvIGNvbnRpbnVlCkBAIC00
NTQwLDggKzQzNjIsNyBAQAogCQkJaWYgKGNvdW50ID09IDEpIHsKIAkJCQlmb3IgKGludCBpID0g
MDsgaSA8IHZpc2libGVTaXplOyBpKyspIHsKIAkJCQkJaWYgKG1vcmVTcGVjaWZpY1tpXSAhPSBu
dWxsKSB7Ci0JCQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0g
b3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0
ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbaV0sIGFyZ3Vt
ZW50VHlwZXMpOworCQkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSB2aXNpYmxlW2ldOwog
CQkJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3Bl
KCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJ
CQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ2NjIsOCArNDQ4Myw3IEBACiAJCQkJaWYgKG1vc3RT
cGVjaWZpY0V4Y2VwdGlvbnMgIT0gbnVsbCAmJiBtb3N0U3BlY2lmaWNFeGNlcHRpb25zICE9IGN1
cnJlbnQudGhyb3duRXhjZXB0aW9ucykgewogCQkJCQlyZXR1cm4gbmV3IE1vc3RTcGVjaWZpY0V4
Y2VwdGlvbk1ldGhvZEJpbmRpbmcoY3VycmVudCwgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyk7CiAJ
CQkJfQotCQkJCS8vIDEuODogQmVmb3JlIHJldHVybmluZyBnaXZlIGluZmVyZW5jZSBhIGNoYW5j
ZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCXJldHVybiBpbmZl
ckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjdXJyZW50LCBhcmd1bWVudFR5cGVzKTsK
KwkJCQlyZXR1cm4gY3VycmVudDsKIAkJCX0KIAkJfQogCkBAIC00NzI4LDkgKzQ1NDgsOSBAQAog
CX0KIAogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRp
bmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewotCQlyZXR1cm4gcGFyYW1ldGVy
Q29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UpOworCQly
ZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxz
ZSk7CiAJfQkKLQlwdWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RC
aW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtp
bmdWYXJhcmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgewor
CXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0
aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzKSB7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJz
OwogCQlpbnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJaW50IGFyZ0xlbmd0
aCA9IGFyZ3VtZW50cy5sZW5ndGg7CkBAIC00NzYyLDE0ICs0NTgyLDE0IEBACiAJCQkJVHlwZUJp
bmRpbmcgcGFyYW0gPSBwYXJhbWV0ZXJzW2xhc3RJbmRleF07IC8vIGlzIGFuIEFycmF5QmluZGlu
ZyBieSBkZWZpbml0aW9uCiAJCQkJVHlwZUJpbmRpbmcgYXJnID0gYXJndW1lbnRzW2xhc3RJbmRl
eF07CiAJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSkgewotCQkJCQls
ZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJy
ZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQkJ
bGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQkJaWYgKGxldmVsID09IE5PVF9DT01QQVRJQkxF
KSB7CiAJCQkJCQkvLyBleHBlY3QgWFtdLCBpcyBpdCBjYWxsZWQgd2l0aCBYCiAJCQkJCQlwYXJh
bSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQlpZiAodGll
YnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgewogCQkJCQkJCWFyZyA9ICgoQXJyYXlCaW5kaW5nKSBh
cmcpLmVsZW1lbnRzVHlwZSgpOwogCQkJCQkJfQotCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRv
bGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSA9PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCWlmIChw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7CiAJCQkJCQlsZXZlbCA9IFZBUkFSR1NfQ09NUEFUSUJMRTsgLy8gdmFyYXJncyBzdXBw
b3J0IG5lZWRlZAogCQkJCQl9CkBAIC00Nzc5LDcgKzQ1OTksNyBAQAogCQkJCQlUeXBlQmluZGlu
ZyBwYXJhbSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbWV0ZXJzW2xhc3RJbmRleF0pLmVsZW1lbnRz
VHlwZSgpOwogCQkJCQlmb3IgKGludCBpID0gbGFzdEluZGV4OyBpIDwgYXJnTGVuZ3RoOyBpKysp
IHsKIAkJCQkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYm
IChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5l
bGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKLQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RF
cXVhbHMocGFyYW0sIGFyZykgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFy
YW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJp
YWJsZXMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFs
cyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwg
ZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJ
CQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJCQkJCX0KIAkJCQl9ICBlbHNlIGlmIChsYXN0SW5k
ZXggIT0gYXJnTGVuZ3RoKSB7IC8vIGNhbiBjYWxsIGZvbyhpbnQgaSwgWCAuLi4geCkgd2l0aCBm
b28oMSkgYnV0IE5PVCBmb28oKTsKQEAgLTQ3OTUsNyArNDYxNSw3IEBACiAJCQlUeXBlQmluZGlu
ZyBwYXJhbSA9IHBhcmFtZXRlcnNbaV07CiAJCQlUeXBlQmluZGluZyBhcmcgPSAodGllYnJlYWtp
bmdWYXJhcmdzTWV0aG9kcyAmJiAoaSA9PSAoYXJnTGVuZ3RoIC0gMSkpKSA/ICgoQXJyYXlCaW5k
aW5nKWFyZ3VtZW50c1tpXSkuZWxlbWVudHNUeXBlKCkgOiBhcmd1bWVudHNbaV07CiAJCQlpZiAo
VHlwZUJpbmRpbmcubm90RXF1YWxzKGFyZyxwYXJhbSkpIHsKLQkJCQlpbnQgbmV3TGV2ZWwgPSBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyk7CisJCQkJaW50IG5ld0xl
dmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJl
YWtpbmdWYXJhcmdzTWV0aG9kcyk7CiAJCQkJaWYgKG5ld0xldmVsID09IE5PVF9DT01QQVRJQkxF
KQogCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJCQkJaWYgKG5ld0xldmVsID4gbGV2ZWwp
CkBAIC00ODI0LDcgKzQ2NDQsNyBAQAogCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJfQogCQot
CXByaXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChUeXBlQmluZGluZyBhcmcs
IFR5cGVCaW5kaW5nIHBhcmFtLCBMb29rdXBFbnZpcm9ubWVudCBlbnYsIGJvb2xlYW4gdGllQnJl
YWtpbmdWYXJhcmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykg
eworCXByaXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChUeXBlQmluZGluZyBh
cmcsIFR5cGVCaW5kaW5nIHBhcmFtLCBMb29rdXBFbnZpcm9ubWVudCBlbnYsIGJvb2xlYW4gdGll
QnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgewogCQkvLyBvbmx5IGNhbGxlZCBpZiBlbnYub3B0aW9u
cy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81CiAJCWlmIChhcmcgPT0g
bnVsbCB8fCBwYXJhbSA9PSBudWxsKQogCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwpAQCAtNDg0
MywxMSArNDY2Myw2IEBACiAJCQlUeXBlQmluZGluZyBjb252ZXJ0ZWRUeXBlID0gZW52LmNvbXB1
dGVCb3hpbmdUeXBlKGFyZyk7CiAJCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKGNvbnZl
cnRlZFR5cGUsIHBhcmFtKSB8fCBjb252ZXJ0ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgocGFyYW0s
IHRoaXMpKQogCQkJCXJldHVybiBBVVRPQk9YX0NPTVBBVElCTEU7Ci0JCX0KLQkJaWYgKHRvbGVy
YXRlSW5mZXJlbmNlVmFyaWFibGVzICYmICghYXJnLmlzUHJvcGVyVHlwZShmYWxzZSkgfHwgIXBh
cmFtLmlzUHJvcGVyVHlwZShmYWxzZSkpKSB7Ci0JCQkvLyBkdXJpbmcgdHlwZSBpbmZlcmVuY2Ug
aW52b2x2aW5nIGEgUmVmZXJlbmNlRXhwcmVzc2lvbiBpZ25vcmUgaW5jb21wYXRpYmlsaXR5IGR1
ZSB0byBhbiBpbmZlcmVuY2UgdmFyaWFibGUsCi0JCQkvLyBrbm93aW5nIHRoYXQgd2Ugd2lsbCBw
cm9kdWNlIGNvbnN0cmFpbnRzIHRoYXQgd2lsbCBlbnN1cmUgY29tcGF0aWJsZSBpbnN0YW50aWF0
aW9uIChpZiBvbmUgZXhpc3RzKS4KLQkJCXJldHVybiBDT01QQVRJQkxFOyAKIAkJfQogCQlyZXR1
cm4gTk9UX0NPTVBBVElCTEU7CiAJfQpAQCAtNDkzMyw3ICs0NzQ4LDcgQEAKIAkgICB0aGF0IGNv
dWxkIGluc3RlYWQgYmUgaW52b2tlZCB3aXRoIGlkZW50aWNhbCByZXN1bHRzLiBSZXR1cm4gbnVs
bCBpZiBubyBjb21wYXRpYmxlLCB2aXNpYmxlLCBtb3N0IHNwZWNpZmljIG1ldGhvZAogCSAgIGNv
dWxkIGJlIGZvdW5kLiBUaGlzIG1ldGhvZCBpcyBtb2RlbGVkIGFmdGVyIFNjb3BlLmdldENvbnN0
cnVjdG9yIGFuZCBTY29wZS5nZXRNZXRob2QuCiAJICovCi0JcHVibGljIE1ldGhvZEJpbmRpbmcg
Z2V0U3RhdGljRmFjdG9yeSAoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBl
LCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBh
cmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uIGFsbG9jYXRpb25TaXRlKSB7CisJcHVibGlj
IE1ldGhvZEJpbmRpbmcgZ2V0U3RhdGljRmFjdG9yeSAoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
IGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBhbGxvY2F0
aW9uU2l0ZSkgewogCQkKIAkJLy8gYWxsb2NhdGlvblR5cGUgaXMgdGhlIGRpYW1vbmQgdHlwZS4g
b3JpZ2luYWxFbmNsb3NpbmdUeXBlIGlzIHRoZSByZWFsIGVuY2xvc2luZyB0eXBlID09PiBtYXkg
YmUgcGFyYW1ldGVyaXplZCwgcGFyYW1ldGVyaXplZCB3aXRoIG93biB0eXBlIHZhcmlhYmxlcywg
cmF3LCBqdXN0IHBsYWluIHR5cGUgb3IgbnVsbC4KIAkJaW50IGNsYXNzVHlwZVZhcmlhYmxlc0Fy
aXR5ID0gMDsKQEAgLTUwNjAsNyArNDg3NSw3IEBACiAJCU1ldGhvZEJpbmRpbmdbXSBjb21wYXRp
YmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbc2ZpXTsKIAkJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7
CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgc2ZpOyBpKyspIHsKLQkJCU1ldGhvZEJpbmRpbmcgY29t
cGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHN0YXRpY0ZhY3Rvcmllc1tp
XSwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3Rh
dGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSk7CiAJCQlpZiAo
Y29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNW
YWxpZEJpbmRpbmcoKSkKIAkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21w
YXRpYmxlTWV0aG9kOwpAQCAtNTA2OSwxMCArNDg4NCw2IEBACiAKIAkJaWYgKGNvbXBhdGlibGVJ
bmRleCA9PSAwKSB7CiAJCQlyZXR1cm4gbnVsbDsKLQkJfQotCQlpZiAoY29tcGF0aWJsZUluZGV4
ID09IDEpIHsKLQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBv
dXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCWNvbXBhdGlibGVbMF0gPSBpbmZlckludm9j
YXRpb25UeXBlKGFsbG9jYXRpb25TaXRlLCBjb21wYXRpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsK
IAkJfQogCQlyZXR1cm4gY29tcGF0aWJsZUluZGV4ID09IDEgPyBjb21wYXRpYmxlWzBdIDogbW9z
dFNwZWNpZmljTWV0aG9kQmluZGluZyhjb21wYXRpYmxlLCBjb21wYXRpYmxlSW5kZXgsIGFyZ3Vt
ZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBhbGxvY2F0aW9uVHlwZSk7CiAJfQpAQCAtNTE0MCwz
MSArNDk1MSw1IEBACiAJCQkJYnJlYWs7CiAJCQl9CiAJCX0KLQl9Ci0KLQkvKioKLQkgKiBHaXZl
biBhIHNlbGVjdGVkIGFwcGxpY2FibGUgbWV0aG9kLCBjaGVjayBpZiBpdCBoYXMgYW4gdW5maW5p
c2hlZCBJbmZlcmVuY2VDb250ZXh0MTggYXNzb2NpYXRlZC4KLQkgKiBJZiBzbyBwZXJmb3JtIHRo
ZSBvdXRzdGFuZGluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIGFuZCByZXR1cm4gdGhlIGlt
cHJvdmVkIG1ldGhvZCwKLQkgKiBvdGhlcndpc2UgcmV0dXJuIHRoZSBhcHBsaWNhYmxlIG1ldGhv
ZCB1bmNoYW5nZWQuCi0JICovCi0JcHJvdGVjdGVkIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0
aW9uVHlwZShJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0aG9kQmluZGluZyBhcHBs
aWNhYmxlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMpIHsKLQkJaWYgKGludm9jYXRpb25T
aXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0g
KEludm9jYXRpb24pIGludm9jYXRpb25TaXRlOwotCQkJaWYgKGFwcGxpY2FibGUgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQlQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA9IChQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIGFwcGxpY2FibGU7Ci0JCQkJSW5mZXJlbmNlQ29udGV4dDE4
IGluZkN0eDE4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRN
ZXRob2QpOwotCQkJCWlmIChpbmZDdHgxOCAhPSBudWxsICYmICFpbmZDdHgxOC5oYXNSZXN1bHRG
b3IoaW52b2NhdGlvbi5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpKSkgewotCQkJCQlyZXR1cm4gaW5m
Q3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzLCBwYXJh
bWV0ZXJpemVkTWV0aG9kKTsKLQkJCQl9Ci0JCQl9IGVsc2UgewotCQkJCUFTVE5vZGUucmVzb2x2
ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRpb24sIGFwcGxpY2FibGUsIGFyZ3VtZW50
VHlwZXMsIHRoaXMpOwotCQkJfQotCQl9IGVsc2UgaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNl
b2YgUmVmZXJlbmNlRXhwcmVzc2lvbikgewotCQkJaWYgKGFwcGxpY2FibGUgaW5zdGFuY2VvZiBQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCi0JCQkJYXBwbGljYWJsZSA9IGFwcGxp
Y2FibGUuc2hhbGxvd09yaWdpbmFsKCk7Ci0JCQlpZiAoYXBwbGljYWJsZS50eXBlVmFyaWFibGVz
KCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykKLQkJCQlyZXR1cm4gUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGFwcGxpY2FibGUs
IGFyZ3VtZW50VHlwZXMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7Ci0J
CX0KLQkJcmV0dXJuIGFwcGxpY2FibGU7CiAJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50
aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCmluZGV4IDkzODQ5Y2QuLjkyYjFhODYgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEK
QEAgLTI5LDYgKzI5LDExIEBACiAJCXRoaXMuZW5jbG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7
CiAJfQogCQorCUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFuIGlzU3ludGhldGljU3RhdGljRmFj
dG9yeSgpIHsKKwkJcmV0dXJuIHRydWU7CisJfQorCQogCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlw
ZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3Ry
dWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KIAlwdWJs
aWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1
Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMpIHsKIAkJUmVmZXJlbmNlQmluZGluZyBw
YXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5
cGUodGhpcy5kZWNsYXJpbmdDbGFzcywgdHlwZUFyZ3VtZW50cywKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2
YQppbmRleCBjM2Y2M2ZiLi42NjcyNDAwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVC
aW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCkBAIC03NDAs
NiArNzQwLDExIEBACiBwdWJsaWMgYm9vbGVhbiBpc1Byb3BlclR5cGUoYm9vbGVhbiBhZG1pdENh
cHR1cmUxOCkgewogCXJldHVybiB0cnVlOwogfQorCitwdWJsaWMgYm9vbGVhbiBpc1BvbHlUeXBl
KCkgeworCXJldHVybiBmYWxzZTsKK30KKwogLyoqCiAgKiBTdWJzdGl0dXRlIGFsbCBvY2N1cnJl
bmNlcyBvZiAndmFyJyB3aXRoaW4gdGhlIGN1cnJlbnQgdHlwZSBieSAnc3Vic3RpdHV0ZVR5cGUu
CiAgKiBAcGFyYW0gdmFyIGFuIGluZmVyZW5jZSB2YXJpYWJsZSAoSkxTOCAxOC4xLjEpCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVTeXN0ZW0uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlw
ZVN5c3RlbS5qYXZhCmluZGV4IDM4ODdmZTMuLjA5MDdlOTQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVHlwZVN5c3RlbS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZVN5c3RlbS5qYXZh
CkBAIC0xNSw2ICsxNSw3IEBACiBpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CiAKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsOwogCkBAIC0zMzcs
NiArMzM4LDM3IEBACiAJCXJldHVybiAoV2lsZGNhcmRCaW5kaW5nKSAodGhpcy50eXBlc1t3aWxk
Y2FyZC5pZCA9IHRoaXMudHlwZWlkKytdWzBdID0gd2lsZGNhcmQpOwogCX0KIAkKKwkvLyBObyBu
ZWVkIGZvciBhbiBvdmVycmlkZSBpbiBBVFMsIHNpbmNlIHdlIGFyZSBkZWFsaW5nIHdpdGggcmVj
YXB0dXJlcyBoZXJlLgorCXB1YmxpYyBmaW5hbCBDYXB0dXJlQmluZGluZyBnZXRDYXB0dXJlZFdp
bGRjYXJkKFdpbGRjYXJkQmluZGluZyB3aWxkY2FyZCwgUmVmZXJlbmNlQmluZGluZyBjb250ZXh0
VHlwZSwgaW50IHBvc2l0aW9uLCBBU1ROb2RlIGN1ZCwgaW50IGlkKSB7CisJCQorCQlXaWxkY2Fy
ZEJpbmRpbmcgdW5hbm5vdGF0ZWRXaWxkY2FyZCA9IChXaWxkY2FyZEJpbmRpbmcpIGdldFVuYW5u
b3RhdGVkVHlwZSh3aWxkY2FyZCk7CisJCVR5cGVCaW5kaW5nW10gZGVyaXZlZFR5cGVzID0gdGhp
cy50eXBlc1t1bmFubm90YXRlZFdpbGRjYXJkLmlkXTsgIC8vIGJ5IGNvbnN0cnVjdGlvbiwgY2Fj
aGVkSW5mbyAhPSBudWxsIG5vdy4KKwkJaW50IGksIGxlbmd0aCA9IGRlcml2ZWRUeXBlcy5sZW5n
dGg7CisJCWZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJVHlwZUJpbmRpbmcgZGVy
aXZlZFR5cGUgPSBkZXJpdmVkVHlwZXNbaV07CisJCQlpZiAoZGVyaXZlZFR5cGUgPT0gbnVsbCkg
CisJCQkJYnJlYWs7CisJCQlpZiAoIWRlcml2ZWRUeXBlLmlzQ2FwdHVyZSgpKQorCQkJCWNvbnRp
bnVlOworCQkJQ2FwdHVyZUJpbmRpbmcgcHJpb3IgPSAoQ2FwdHVyZUJpbmRpbmcpIGRlcml2ZWRU
eXBlOworCQkJaWYgKHByaW9yLnNvdXJjZVR5cGUgIT0gY29udGV4dFR5cGUgfHwgcHJpb3IucG9z
aXRpb24gIT0gcG9zaXRpb24gfHwgcHJpb3IuY3VkICE9IGN1ZCkgLy8kSURFTlRJVFktQ09NUEFS
SVNPTiQKKwkJCQljb250aW51ZTsKKwkJCXJldHVybiBwcmlvcjsKKwkJfQorCQkKKwkJaWYgKGkg
PT0gbGVuZ3RoKSB7CisJCQlTeXN0ZW0uYXJyYXljb3B5KGRlcml2ZWRUeXBlcywgMCwgZGVyaXZl
ZFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aCAqIDJdLCAwLCBsZW5ndGgpOworCQkJdGhp
cy50eXBlc1t1bmFubm90YXRlZFdpbGRjYXJkLmlkXSA9IGRlcml2ZWRUeXBlczsKKwkJfQorCQlU
eXBlQmluZGluZyBjYXB0dXJlID0gZGVyaXZlZFR5cGVzW2ldID0gbmV3IENhcHR1cmVCaW5kaW5n
KHdpbGRjYXJkLCBjb250ZXh0VHlwZSwgcG9zaXRpb24sIGN1ZCwgaWQpOworCQorCQlpbnQgdHlw
ZXNMZW5ndGggPSB0aGlzLnR5cGVzLmxlbmd0aDsKKwkJaWYgKHRoaXMudHlwZWlkID09IHR5cGVz
TGVuZ3RoKQorCQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLnR5cGVzLCAwLCB0aGlzLnR5cGVzID0g
bmV3IFR5cGVCaW5kaW5nW3R5cGVzTGVuZ3RoICogMl1bXSwgMCwgdHlwZXNMZW5ndGgpOworCQl0
aGlzLnR5cGVzW3RoaXMudHlwZWlkXSA9IG5ldyBUeXBlQmluZGluZ1sxXTsKKwkJcmV0dXJuIChD
YXB0dXJlQmluZGluZykgKHRoaXMudHlwZXNbY2FwdHVyZS5pZCA9IHRoaXMudHlwZWlkKytdWzBd
ID0gY2FwdHVyZSk7CisJfQorCQogCXB1YmxpYyBXaWxkY2FyZEJpbmRpbmcgZ2V0V2lsZGNhcmQo
UmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSwgaW50IHJhbmssIFR5cGVCaW5kaW5nIGJvdW5k
LCBUeXBlQmluZGluZ1tdIG90aGVyQm91bmRzLCBpbnQgYm91bmRLaW5kLCBBbm5vdGF0aW9uQmlu
ZGluZ1tdIGFubm90YXRpb25zKSB7CiAJCXJldHVybiBnZXRXaWxkY2FyZChnZW5lcmljVHlwZSwg
cmFuaywgYm91bmQsIG90aGVyQm91bmRzLCBib3VuZEtpbmQpOwogCX0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxl
bVJlcG9ydGVyLmphdmEKaW5kZXggOTNmYzA4Yy4uMjE1MjhiMiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxl
bVJlcG9ydGVyLmphdmEKQEAgLTM2OTIsNyArMzY5Miw3IEBACiAJCQkJc291cmNlU3RhcnQsCiAJ
CQkJc291cmNlRW5kKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0
ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5J
bnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6CiAJCQkvLyBGSVhNRShzdGVwaGFuKTogY29u
c3RydWN0IHN1aXRhYmxlIG1lc3NhZ2UgKGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80MDQ2NzUp
CiAJCQlwcm9ibGVtQ29uc3RydWN0b3IgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHRhcmdldENv
bnN0cnVjdG9yOwogCQkJc2hvd25Db25zdHJ1Y3RvciA9IHByb2JsZW1Db25zdHJ1Y3Rvci5jbG9z
ZXN0TWF0Y2g7CkBAIC00MjI0LDcgKzQyMjQsNyBAQAogCQkJCShpbnQpIChtZXNzYWdlU2VuZC5u
YW1lU291cmNlUG9zaXRpb24gPj4+IDMyKSwKIAkJCQkoaW50KSBtZXNzYWdlU2VuZC5uYW1lU291
cmNlUG9zaXRpb24pOwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRl
cml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25zLklu
dm9jYXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBjb25z
dHJ1Y3Qgc3VpdGFibGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3NSkK
IAkJCXByb2JsZW1NZXRob2QgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZDsKIAkJCUlu
ZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0ID0gcHJvYmxlbU1ldGhvZC5pbmZlcmVu
Y2VDb250ZXh0OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldEFsbG9jYXRpb25FeHByZXNzaW9uLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9l
dmFsL0NvZGVTbmlwcGV0QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA2MjNiYzM1Li40
ZjBlYTJiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9l
dmFsL0NvZGVTbmlwcGV0QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtMjQsNyArMjQsNiBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWxsb2NhdGlv
bkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5DYXN0RXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5Jbm5lckluZmVyZW5jZUhlbHBlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LlBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5j
ZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJk
OwpAQCAtMTkwLDcgKzE4OSw2IEBACiAJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsKIAkJ
aW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKIAkJYXJndW1lbnRUeXBlcyA9IG5l
dyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlUeXBlQmluZGluZyBhcmd1bWVudFR5cGU7CiAJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCUV4cHJlc3Npb24gYXJndW1lbnQg
PSB0aGlzLmFyZ3VtZW50c1tpXTsKIAkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHBy
ZXNzaW9uKSB7CkBAIC0xOTgsMTIgKzE5Niw4IEBACiAJCQkJYXJnc0NvbnRhaW5DYXN0ID0gdHJ1
ZTsKIAkJCX0KIAkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09O
VEVYVCk7Ci0JCQlpZiAoKGFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVu
dC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpIHsKKwkJCWlmICgoYXJndW1lbnRUeXBlc1tp
XSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgewogCQkJCWFyZ0hhc0Vy
cm9yID0gdHJ1ZTsKLQkJCX0KLQkJCWlmIChhcmd1bWVudFR5cGUgIT0gbnVsbCAmJiBhcmd1bWVu
dFR5cGUua2luZCgpID09IEJpbmRpbmcuUE9MWV9UWVBFKSB7Ci0JCQkJaWYgKHRoaXMuaW5uZXJJ
bmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9
IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwogCQkJfQogCQl9CiAJCWlmIChhcmdIYXNFcnJv
cikgewpAQCAtMjI4LDcgKzIyMiw3IEBACiAJCiAJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0ZWRU
eXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwogCXRoaXMuYmluZGlu
ZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIGFsbG9jYXRlZFR5cGUsIGFy
Z3VtZW50VHlwZXMpOwotCisJCiAJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkg
ewkKIAkJaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nCiAJ
CQkmJiAoKFByb2JsZW1NZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpLnByb2JsZW1JZCgpID09
IE5vdFZpc2libGUpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9D
b2RlU25pcHBldE1lc3NhZ2VTZW5kLmphdmEKaW5kZXggMWYyYTRkMy4uYWI3MDdiZCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
ZXZhbC9Db2RlU25pcHBldE1lc3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldE1lc3NhZ2VT
ZW5kLmphdmEKQEAgLTIzLDcgKzIzLDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5DYXN0RXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5Jbm5lckluZmVyZW5jZUhlbHBlcjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1lc3NhZ2VTZW5kOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTmFtZVJlZmVyZW5jZTsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3Rh
bnRzOwpAQCAtMTk1LDczICsxOTQsNzIgQEAKIHB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVHlw
ZShCbG9ja1Njb3BlIHNjb3BlKSB7CiAJLy8gQW5zd2VyIHRoZSBzaWduYXR1cmUgcmV0dXJuIHR5
cGUKIAkvLyBCYXNlIHR5cGUgcHJvbW90aW9uCi0KLQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQu
Tm90QUNvbnN0YW50OwotCWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0gZmFsc2UsIGFyZ3NDb250YWlu
Q2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Np
b24pIHsKLQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVj
azsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQlyZWNlaXZlckNhc3QgPSB0cnVlOwotCX0KLQl0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2ZXIucmVzb2x2ZVR5cGUoc2NvcGUp
OwotCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkg
ewotCQkgLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0
eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5vdGlmaWVkCi0JCWlmIChUeXBlQmlu
ZGluZy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKS5leHByZXNz
aW9uLnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7Ci0JCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3QoKENhc3RFeHByZXNzaW9uKXRoaXMucmVj
ZWl2ZXIpOworCQorCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkg
eworCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50OworCQlib29sZWFuIHJl
Y2VpdmVyQ2FzdCA9IGZhbHNlOworCQlpZiAodGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIENhc3RF
eHByZXNzaW9uKSB7CisJCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5
Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQlyZWNlaXZlckNhc3QgPSB0cnVl
OwogCQl9Ci0JfQotCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0
cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBs
ZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOwotCQlib29sZWFuIGFyZ0hhc0Vycm9y
ID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQl0aGlzLmdlbmVyaWNUeXBl
QXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuZ3RoOyBpKyspIHsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9
IHRoaXMudHlwZUFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBi
b3VuZHMqLykpID09IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCXRoaXMuYWN0
dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5yZXNvbHZlVHlwZShzY29wZSk7CisJCWlm
IChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkgeworCQkJ
Ly8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBv
bmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5vdGlmaWVkCisJCQlpZiAoVHlwZUJpbmRpbmcu
ZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhwcmVzc2lvbi5y
ZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgeworCQkJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZl
cik7CiAJCQl9CiAJCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCS8vIHJlc29sdmUgdHlwZSBh
cmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCisJCWlmICh0aGlzLnR5cGVB
cmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5s
ZW5ndGg7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxs
IGFyZ3VtZW50cworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGlu
Z1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCWlm
ICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXS5y
ZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKKwkJ
CQkJYXJnSGFzRXJyb3IgPSB0cnVlOworCQkJCX0KKwkJCX0KKwkJCWlmIChhcmdIYXNFcnJvcikg
eworCQkJCXJldHVybiBudWxsOworCQkJfQorCQl9CisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwg
YWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsK
KwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1l
bnRzCisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1l
bnRzW2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJ
CQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxs
IGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9
CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsK
KwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29s
dmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOworCQkJfQor
CQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJaWYodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5z
dGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCS8vIHJlY29yZCBhbnkgc2VsZWN0b3Ig
bWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAorCQkJCQl0aGlzLmJpbmRpbmcgPSBzY29wZS5maW5kTWV0aG9kKChSZWZl
cmVuY2VCaW5kaW5nKXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBuZXcg
VHlwZUJpbmRpbmdbXXt9LCB0aGlzLCBmYWxzZSk7CisJCQkJfQorCQkJCXJldHVybiBudWxsOwor
CQkJfQorCQl9CisJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7CisJCQly
ZXR1cm4gbnVsbDsKKwkJfQorCQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3Nh
Z2UKKwkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgeworCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJ
fQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKLQlUeXBl
QmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7Ci0JaWYgKHRo
aXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOyAv
LyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRz
Lmxlbmd0aDsKLQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlU
eXBlQmluZGluZyBhcmd1bWVudFR5cGU7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspIHsKLQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKLQkJCWlm
IChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQuYml0
cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24K
LQkJCQlhcmdzQ29udGFpbkNhc3QgPSB0cnVlOwotCQkJfQotCQkJYXJndW1lbnQuc2V0RXhwcmVz
c2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCWlmICgoYXJndW1lbnRUeXBlID0g
YXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKSkg
PT0gbnVsbCkKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQlpZiAoYXJndW1lbnRUeXBlICE9
IG51bGwgJiYgYXJndW1lbnRUeXBlLmtpbmQoKSA9PSBCaW5kaW5nLlBPTFlfVFlQRSkgewotCQkJ
CWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMuaW5uZXJJ
bmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0KLQkJfQot
CQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJCWlmKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3Rh
bmNlb2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJCS8vIHJlY29yZCBhbnkgc2VsZWN0b3IgbWF0
Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1l
dGhvZCBtYXRjaAotCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5j
ZUJpbmRpbmcpdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIG5ldyBUeXBl
QmluZGluZ1tde30sIHRoaXMsIGZhbHNlKTsKLQkJCX0KLQkJCXJldHVybiBudWxsOwotCQl9CisJ
VHlwZUJpbmRpbmcgbWV0aG9kVHlwZSA9IGZpbmRNZXRob2RCaW5kaW5nKHNjb3BlKTsKKwlpZiAo
bWV0aG9kVHlwZSAhPSBudWxsICYmIG1ldGhvZFR5cGUuaXNQb2x5VHlwZSgpKSB7CisJCXRoaXMu
cmVzb2x2ZWRUeXBlID0gdGhpcy5iaW5kaW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhp
cy5zb3VyY2VFbmQpOworCQlyZXR1cm4gbWV0aG9kVHlwZTsKIAl9Ci0JaWYgKHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlID09IG51bGwpIHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCS8vIGJhc2UgdHlw
ZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZS5pc0Jhc2VUeXBlKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhv
ZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcyk7Ci0JCXJl
dHVybiBudWxsOwotCX0KLQotCWZpbmRNZXRob2RCaW5kaW5nKHNjb3BlLCBhcmd1bWVudFR5cGVz
KTsKIAkJCiAJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhp
cy5iaW5kaW5nIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcKQEAgLTI4MSwxNCArMjc5
LDE0IEBACiAJCQlDb2RlU25pcHBldFNjb3BlIGxvY2FsU2NvcGUgPSBuZXcgQ29kZVNuaXBwZXRT
Y29wZShzY29wZSk7CiAJCQlNZXRob2RCaW5kaW5nIHByaXZhdGVCaW5kaW5nID0KIAkJCQl0aGlz
LnJlY2VpdmVyIGluc3RhbmNlb2YgQ29kZVNuaXBwZXRUaGlzUmVmZXJlbmNlICYmICgoQ29kZVNu
aXBwZXRUaGlzUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5pc0ltcGxpY2l0Ci0JCQkJCT8gbG9j
YWxTY29wZS5nZXRJbXBsaWNpdE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmRlbGVnYXRl
VGhpcy50eXBlLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKQotCQkJCQk6IGxv
Y2FsU2NvcGUuZ2V0TWV0aG9kKHRoaXMuZGVsZWdhdGVUaGlzLnR5cGUsIHRoaXMuc2VsZWN0b3Is
IGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQkJCQk/IGxvY2FsU2NvcGUuZ2V0SW1wbGljaXRNZXRo
b2QoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5kZWxlZ2F0ZVRoaXMudHlwZSwgdGhpcy5zZWxlY3Rv
ciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKQorCQkJCQk6IGxvY2FsU2NvcGUuZ2V0TWV0aG9k
KHRoaXMuZGVsZWdhdGVUaGlzLnR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBl
cywgdGhpcyk7CiAJCQlpZiAoIXByaXZhdGVCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJ
CQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpIHsKIAkJCQkJaWYgKHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewogCQkJ
CQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlOwogCQkJCQl9IGVsc2UgeyAvLyByZWFsbHkgYmFkIGVycm9yIC4u
Li4KLQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywg
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIGFyZ3VtZW50VHlwZXMpOworCQkJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKIAkJCQkJCXJldHVybiBudWxsOwogCQkJCQl9CiAJ
CQkJfQpAQCAtMzAyLDcgKzMwMCw3IEBACiAJCQkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBl
IGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewogCQkJCQl0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGU7CiAJ
CQkJfSBlbHNlIHsgLy8gcmVhbGx5IGJhZCBlcnJvciAuLi4uCi0JCQkJCXNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUs
IGFyZ3VtZW50VHlwZXMpOworCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0
aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMp
OwogCQkJCQlyZXR1cm4gbnVsbDsKIAkJCQl9CiAJCQl9CkBAIC0zMjYsNyArMzI0LDcgQEAKIAkJ
CX0JCQkKIAkJfQogCX0KLQlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCB0aGlz
LnJlY2VpdmVyLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFy
Z3VtZW50cywgYXJndW1lbnRUeXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgeworCWlmIChj
aGVja0ludm9jYXRpb25Bcmd1bWVudHMoc2NvcGUsIHRoaXMucmVjZWl2ZXIsIHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50
VHlwZXMsIHRoaXMuYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgewogCQl0aGlzLmJpdHMgfD0gQVNU
Tm9kZS5VbmNoZWNrZWQ7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9l
dmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwv
Q29kZVNuaXBwZXRTY29wZS5qYXZhCmluZGV4IDJlYzg0M2YuLjIwYzVlZDkgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwv
Q29kZVNuaXBwZXRTY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhCkBAIC0xLDUg
KzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKQEAgLTM5Niw3ICszOTYsNyBAQAogCWlmIChtZXRob2RCaW5kaW5nID09IG51bGwp
CiAJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcoc2VsZWN0b3IsIGFyZ3VtZW50VHlw
ZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlk
QmluZGluZygpKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRp
b25TaXRlLCBTY29wZS5GVUxMX0lORkVSRU5DRSk7CisJICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0
aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkgICAgaWYgKGNvbXBhdGlibGVNZXRob2QgPT0g
bnVsbCkKIAkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kQmluZGluZywg
c2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkgICAg
bWV0aG9kQmluZGluZyA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC01NDIsNyArNTQyLDcgQEAKIAlN
ZXRob2RCaW5kaW5nW10gY29tcGF0aWJsZSA9IG5ldyBNZXRob2RCaW5kaW5nW21ldGhvZHMubGVu
Z3RoXTsKIAlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAlmb3IgKGludCBpID0gMCwgbGVuZ3Ro
ID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCSAgICBNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBh
cmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgU2NvcGUuQVBQTElDQUJJTElUWSk7CisJICAg
IE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJaWYgKGNvbXBh
dGlibGVNZXRob2QgIT0gbnVsbCkKIAkJCWNvbXBhdGlibGVbY29tcGF0aWJsZUluZGV4KytdID0g
Y29tcGF0aWJsZU1ldGhvZDsKIAl9CkBAIC01NTgsOCArNTU4LDcgQEAKIAkJfQogCX0KIAlpZiAo
dmlzaWJsZUluZGV4ID09IDEpIHsKLQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0
byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQlyZXR1cm4gaW5mZXJJbnZv
Y2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJ
CXJldHVybiB2aXNpYmxlWzBdOwogCX0KIAlpZiAodmlzaWJsZUluZGV4ID09IDApIHsKIAkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhjb21wYXRpYmxlWzBdLCBUeXBlQ29uc3RhbnRz
LklOSVQsIGNvbXBhdGlibGVbMF0ucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuTm90VmlzaWJs
ZSk7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247615</attachid>
            <date>2014-10-03 16:36:00 -0400</date>
            <delta_ts>2014-10-05 06:09:46 -0400</delta_ts>
            <desc>Revised patch - Just two failures in RunAllJava8Tests</desc>
            <filename>WIP.patch</filename>
            <type>text/plain</type>
            <size>241082</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCAwNGI4OWVlLi4zMjlkYmY3IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC03Miw2ICs3Miw4IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
cmUuc2VhcmNoLkphdmFTZWFyY2hQYXJ0aWNpcGFudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS5zZWFyY2guaW5kZXhpbmcuQmluYXJ5SW5kZXhlcjsKIGltcG9ydCBvcmcu
b3NnaS5mcmFtZXdvcmsuQnVuZGxlOworaW1wb3J0IGphdmEudXRpbC5yZWdleC5QYXR0ZXJuOwor
CiAKIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IGV4dGVuZHMg
QWJzdHJhY3RDb21waWxlclRlc3QgaW1wbGVtZW50cyBTdG9wYWJsZVRlc3RDYXNlIHsKIApAQCAt
ODc4LDYgKzg4MCw3IEBACiAJcHJvdGVjdGVkIGJvb2xlYW4gY3JlYXRlZFZlcmlmaWVyOwogCXBy
b3RlY3RlZCBJTmFtZUVudmlyb25tZW50IGphdmFDbGFzc0xpYjsKIAlwcm90ZWN0ZWQgVGVzdFZl
cmlmaWVyIHZlcmlmaWVyOworCXByb3RlY3RlZCBib29sZWFuIHNob3VsZFN3YWxsb3dDYXB0dXJl
SWQ7CiAJcHVibGljIEFic3RyYWN0UmVncmVzc2lvblRlc3QoU3RyaW5nIG5hbWUpIHsKIAkJc3Vw
ZXIobmFtZSk7CiAJfQpAQCAtMTA2Miw2ICsxMDY1LDkgQEAKIAlwcm90ZWN0ZWQgdm9pZCBjaGVj
a0NvbXBpbGVyTG9nKFN0cmluZ1tdIHRlc3RGaWxlcywgUmVxdWVzdG9yIHJlcXVlc3RvciwKIAkJ
CVN0cmluZ1tdIGFsdGVybmF0ZVBsYXRmb3JtSW5kZXBlbmRhbnRFeHBlY3RlZExvZ3MsIFRocm93
YWJsZSBleGNlcHRpb24pIHsKIAkJU3RyaW5nIGNvbXB1dGVkUHJvYmxlbUxvZyA9IFV0aWwuY29u
dmVydFRvSW5kZXBlbmRhbnRMaW5lRGVsaW1pdGVyKHJlcXVlc3Rvci5wcm9ibGVtTG9nLnRvU3Ry
aW5nKCkpOworCQlpZiAodGhpcy5zaG91bGRTd2FsbG93Q2FwdHVyZUlkKQorCQkJY29tcHV0ZWRQ
cm9ibGVtTG9nID0gUGF0dGVybi5jb21waWxlKCJjYXB0dXJlIyhcXGQrKSIpLm1hdGNoZXIoY29t
cHV0ZWRQcm9ibGVtTG9nKS5yZXBsYWNlQWxsKCJjYXB0dXJlIik7CisJCSAgCiAJCWludCBpOwog
CQlmb3IgKGkgPSAwOyBpIDwgYWx0ZXJuYXRlUGxhdGZvcm1JbmRlcGVuZGFudEV4cGVjdGVkTG9n
cy5sZW5ndGg7IGkrKykgewogCQkJaWYgKGFsdGVybmF0ZVBsYXRmb3JtSW5kZXBlbmRhbnRFeHBl
Y3RlZExvZ3NbaV0uZXF1YWxzKGNvbXB1dGVkUHJvYmxlbUxvZykpCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljVHlwZVRlc3QuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVzdC5qYXZhCmluZGV4IDRkNmQ3ZjQu
LjAyMTU3NWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVy
aWNUeXBlVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVy
aWNUeXBlVGVzdC5qYXZhCkBAIC0zOTYyMSwxMSArMzk2MjEsMjQgQEAKIAkJCSJ9XG4iLCAvLyA9
PT09PT09PT09PT09PT09PQogCQl9LAogCQkvLyBjb21waWxlciByZXN1bHRzCisJCXRoaXMuY29t
cGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/IAogCQkiLS0tLS0tLS0t
LVxuIiArIC8qIGV4cGVjdGVkIGNvbXBpbGVyIGxvZyAqLwogCQkiMS4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDUpXG4iICsKIAkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEsIGIpKTtcbiIg
KwogCQkiCSAgICAgICBeXl5eXl5eXlxuIiArCiAJCSJUaGUgbWV0aG9kIGNvbXBvdW5kKEl0ZXJh
YmxlPD8gZXh0ZW5kcyBDb21wYXJhdG9yPD8gc3VwZXIgVD4+KSBpbiB0aGUgdHlwZSBYIGlzIG5v
dCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChMaXN0PENvbXBhcmF0b3I8PyBleHRlbmRz
IE9iamVjdD4+KVxuIiArCisJCSItLS0tLS0tLS0tXG4iCisJCS8vIDEuOCsgQVRNLCB3ZSBnZW5l
cmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHByZXNzaW9uIGV2YWx1YXRp
b24uCisJCToiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDUpXG4iICsgCisJCSIJcmV0dXJuIGNvbXBvdW5kKGFzTGlzdChhLCBiKSk7XG4iICsgCisJCSIJ
ICAgICAgIF5eXl5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGNvbXBvdW5kKEl0ZXJhYmxlPD8g
ZXh0ZW5kcyBDb21wYXJhdG9yPD8gc3VwZXIgVD4+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBs
aWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChMaXN0PENvbXBhcmF0b3I8PyBleHRlbmRzIE9iamVj
dD4+KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDUpXG4iICsgCisJCSIJcmV0dXJuIGNvbXBvdW5kKGFzTGlzdChhLCBiKSk7XG4iICsg
CisJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlwZSBtaXNtYXRj
aDogY2Fubm90IGNvbnZlcnQgZnJvbSBMaXN0PENvbXBhcmF0b3I8PyBleHRlbmRzIE9iamVjdD4+
IHRvIEl0ZXJhYmxlPD8gZXh0ZW5kcyBDb21wYXJhdG9yPD8gc3VwZXIgVD4+XG4iICsgCiAJCSIt
LS0tLS0tLS0tXG4iLAogCQkvLyBqYXZhYyBvcHRpb25zCiAJCUphdmFjVGVzdE9wdGlvbnMuSmF2
YWNIYXNBQnVnLkphdmFjQnVnNjU3MzQ0NiAvKiBqYXZhYyB0ZXN0IG9wdGlvbnMgKi8pOwpAQCAt
NDQyNjUsMTEgKzQ0Mjc4LDI0IEBACiAJCQkJCSIJfVxuIiArCiAJCQkJCSJ9XG4iLCAvLyA9PT09
PT09PT09PT09PT09PQogCQkJfSwKKwkJCXRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCA/IAogCQkJIi0tLS0tLS0tLS1cbiIgKwogCQkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAyNClcbiIgKwogCQkJIglwdXQoSW50ZWdlci5jbGFzcywgY29tYmlu
ZShGVU5DMiwgRlVOQzEpKTtcbiIgKwogCQkJIgleXl5cbiIgKwogCQkJIlRoZSBtZXRob2QgcHV0
KENsYXNzPEU+LCBYLlRPPD8gc3VwZXIgRT4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2Fi
bGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPEludGVnZXI+LCBYLk9PPFN0cmluZyxPYmplY3Q+
KVxuIiArCisJCQkiLS0tLS0tLS0tLVxuIgorCQkJOiAvLyBBVE0sIGluIDEuOCsgd2UgZ2VuZXJh
dGUgYW4gZXh0cmEgZXJyb3IgZHVlIHRvIGlubmVyIHBvbHkgZXhwcmVzc2lvbiByZXNvbHV0aW9u
IGFmdGVyIHRoZSB0YXJnZXQgdHlwZSBpcyBrbm93bi4KKwkJCSItLS0tLS0tLS0tXG4iICsgCisJ
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglwdXQoSW50ZWdl
ci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJXl5eXG4iICsgCisJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAyNClcbiIgKyAKKwkJCSIJcHV0KEludGVnZXIuY2xhc3Ms
IGNvbWJpbmUoRlVOQzIsIEZVTkMxKSk7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICBe
Xl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIFguT088U3RyaW5nLE9iamVjdD4gdG8gWC5UTzw/IHN1cGVyIEU+XG4iICsgCiAJ
CQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0yMTY2ODYgLSB2YXJpYXRpb24KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2YQppbmRleCBh
YjIzM2JhLi43MzU2MzYwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC00NTc3LDYwICs0NTc3LDEy
IEBACiAJCQkiICB9XG4iICsgCiAJCQkiXG4iICsgCiAJCQkifVxuIjsKLQlpZiAodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCXJ1bkNvbmZvcm1U
ZXN0KAorCS8vIE5vdGUgOHUyMCBjb21waWxlcyB0aGlzIGFzIHdlbGwgYXMgSkRLNy4KKwlydW5D
b25mb3JtVGVzdCgKIAkJCW5ldyBTdHJpbmdbXSB7Ci0JCQkJIlguamF2YSIsCi0JCQkJc291cmNl
CisJCQkJCSJYLmphdmEiLAorCQkJCQlzb3VyY2UKIAkJCX0pOwotCX0gZWxzZSB7Ci0JCXJ1bk5l
Z2F0aXZlVGVzdCgKLQkJCW5ldyBTdHJpbmdbXSB7Ci0JCQkJIlguamF2YSIsCi0JCQkJc291cmNl
Ci0JCQl9LAotCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgOClcbiIgKyAKLQkJCSIJZG9Tb21ldGhpbmdXaXRoRm9vKCBhbnkoIEZvby5jbGFzcyAp
LCBhbnkoIEZvby5jbGFzcyApICk7XG4iICsgCi0JCQkiCV5eXl5eXl5eXl5eXl5eXl5eXlxuIiAr
IAotCQkJIlRoZSBtZXRob2QgZG9Tb21ldGhpbmdXaXRoRm9vKFguRm9vPFQ+LCBYLkZvbzxUPikg
aW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoWC5Gb28s
IFguRm9vKVxuIiArIAotCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIyLiBXQVJOSU5HIGluIFgu
amF2YSAoYXQgbGluZSAxMilcbiIgKyAKLQkJCSIJRm9vIGZvbyA9IGFueSggRm9vLmNsYXNzICk7
XG4iICsgCi0JCQkiCV5eXlxuIiArIAotCQkJIlguRm9vIGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5j
ZXMgdG8gZ2VuZXJpYyB0eXBlIFguRm9vPFQ+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsg
Ci0JCQkiLS0tLS0tLS0tLVxuIiArIAotCQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5l
IDEzKVxuIiArIAotCQkJIglkb1NvbWV0aGluZ1dpdGhGb28oIGZvbywgZm9vICk7XG4iICsgCi0J
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlR5cGUgc2FmZXR5
OiBVbmNoZWNrZWQgaW52b2NhdGlvbiBkb1NvbWV0aGluZ1dpdGhGb28oWC5Gb28sIFguRm9vKSBv
ZiB0aGUgZ2VuZXJpYyBtZXRob2QgZG9Tb21ldGhpbmdXaXRoRm9vKFguRm9vPFQ+LCBYLkZvbzxU
Pikgb2YgdHlwZSBYXG4iICsgCi0JCQkiLS0tLS0tLS0tLVxuIiArIAotCQkJIjQuIFdBUk5JTkcg
aW4gWC5qYXZhIChhdCBsaW5lIDEzKVxuIiArIAotCQkJIglkb1NvbWV0aGluZ1dpdGhGb28oIGZv
bywgZm9vICk7XG4iICsgCi0JCQkiCSAgICAgICAgICAgICAgICAgICAgXl5eXG4iICsgCi0JCQki
VHlwZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgWC5Gb28gbmVlZHMgdW5jaGVja2Vk
IGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBYLkZvbzxPYmplY3Q+XG4iICsgCi0JCQkiLS0tLS0t
LS0tLVxuIiArIAotCQkJIjUuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEzKVxuIiArIAot
CQkJIglkb1NvbWV0aGluZ1dpdGhGb28oIGZvbywgZm9vICk7XG4iICsgCi0JCQkiCSAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKLQkJCSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Np
b24gb2YgdHlwZSBYLkZvbyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRv
IFguRm9vPE9iamVjdD5cbiIgKyAKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiNi4gV0FSTklO
RyBpbiBYLmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCi0JCQkiCXRoaXMuPE9iamVjdD5kb1NvbWV0
aGluZ1dpdGhGb28oIGFueSggRm9vLmNsYXNzICksIGFueSggRm9vLmNsYXNzICkgKTtcbiIgKyAK
LQkJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZv
Y2F0aW9uIGRvU29tZXRoaW5nV2l0aEZvbyhYLkZvbywgWC5Gb28pIG9mIHRoZSBnZW5lcmljIG1l
dGhvZCBkb1NvbWV0aGluZ1dpdGhGb28oWC5Gb288VD4sIFguRm9vPFQ+KSBvZiB0eXBlIFhcbiIg
KyAKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiNy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxp
bmUgMTcpXG4iICsgCi0JCQkiCXRoaXMuPE9iamVjdD5kb1NvbWV0aGluZ1dpdGhGb28oIGFueSgg
Rm9vLmNsYXNzICksIGFueSggRm9vLmNsYXNzICkgKTtcbiIgKyAKLQkJCSIJICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlR5cGUgc2Fm
ZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFguRm9vIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJz
aW9uIHRvIGNvbmZvcm0gdG8gWC5Gb288T2JqZWN0PlxuIiArIAotCQkJIi0tLS0tLS0tLS1cbiIg
KyAKLQkJCSI4LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKLQkJCSIJdGhp
cy48T2JqZWN0PmRvU29tZXRoaW5nV2l0aEZvbyggYW55KCBGb28uY2xhc3MgKSwgYW55KCBGb28u
Y2xhc3MgKSApO1xuIiArIAotCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkiVHlwZSBzYWZldHk6
IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgWC5Gb28gbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24g
dG8gY29uZm9ybSB0byBYLkZvbzxPYmplY3Q+XG4iICsgCi0JCQkiLS0tLS0tLS0tLVxuIik7Ci0J
fQogfQogcHVibGljIHZvaWQgX3Rlc3RCdWc0MzA2ODYoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Np
b25UZXN0XzFfOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NS
ZWdyZXNzaW9uVGVzdF8xXzguamF2YQppbmRleCA5YzM3ZDQyLi5kNjgzMjg5IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFf
OC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKQEAgLTYwNyw2ICs2MDcsNyBAQAogCQkJIiAgICB9XG4iICsgCiAJ
CQkifVxuIgogCQl9LAorCQkvLyBUaGUgZXh0cmEgZXJyb3Igd2l0aCA8dW5rbm93bj4gcmVhZHMg
YSBiaXQgd2VpcmQuCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCiAJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCkBAIC02MjAsMTAgKzYyMSwxNSBAQAogCQkiLS0tLS0tLS0t
LVxuIiArIAogCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVNl
dDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwgU2V0OjpuZXcpO1xuIiArIAorCQki
CSAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJ
CSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIENvbGxlY3Rpb248T2JqZWN0PiB0
byA8dW5rbm93bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIglTZXQ8WT4gcm9zdGVyU2V0ID0gKFNldDxZPikg
Zm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCiAJCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhpcyBl
eHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAogCQkiLS0tLS0t
LS0tLVxuIiArIAotCQkiNC4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQki
NS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJT
ZXQgPSAoU2V0PFk+KSBmb28obnVsbCwgU2V0OjpuZXcpO1xuIiArIAogCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXG4iICsgCiAJCSJDYW5ub3QgaW5zdGFudGlh
dGUgdGhlIHR5cGUgU2V0XG4iICsgCkBAIC0xMjMwLDcgKzEyMzYsMTIgQEAKIAkJIgleXl5eXl5e
Xl5eXl5cbiIgKyAKIAkJIlRoZSBtZXRob2QgYWRkQXR0cmlidXRlKFRlc3QuQXR0cmlidXRlPFQ+
LCBUKSBpbiB0aGUgdHlwZSBUZXN0IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChUZXN0LkF0dHJpYnV0ZTxjYXB0dXJlIzEtb2YgPz4sIGNhcHR1cmUjMi1vZiA/KVxuIiArIAog
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDUp
XG4iICsgCisJCSIyLiBFUlJPUiBpbiBUZXN0LmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglh
ZGRBdHRyaWJ1dGUoamF2YS51dGlsLk9iamVjdHMucmVxdWlyZU5vbk51bGwoYXR0cmlidXRlLCBc
IlwiKSxcbiIgKyAKKwkJIgkgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252
ZXJ0IGZyb20gVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+IHRvIFRlc3QuQXR0cmlidXRl
PFQ+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIzLiBFUlJPUiBpbiBUZXN0LmphdmEg
KGF0IGxpbmUgNSlcbiIgKyAKIAkJIglhZGRBdHRyaWJ1dGUoYXR0cmlidXRlLCBhdHRyaWJ1dGUu
Z2V0RGVmYXVsdCgpKTtcbiIgKyAKIAkJIgleXl5eXl5eXl5eXl5cbiIgKyAKIAkJIlRoZSBtZXRo
b2QgYWRkQXR0cmlidXRlKFRlc3QuQXR0cmlidXRlPFQ+LCBUKSBpbiB0aGUgdHlwZSBUZXN0IGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChUZXN0LkF0dHJpYnV0ZTxjYXB0dXJl
IzMtb2YgPz4sIGNhcHR1cmUjNC1vZiA/KVxuIiArIApAQCAtMTY3Niw2ICsxNjg3LDExIEBACiAJ
CSItLS0tLS0tLS0tXG4iICsgCiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4i
ICsgCiAJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFj
aXR5KSk7XG4iICsgCisJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBjb25zdHJ1Y3RvciBYPFMsRGVxdWU8Uz4+KCgp
IC0+IHt9KSBpcyB1bmRlZmluZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkJIglyZXR1cm4gbmV3IFg8PigoKSAt
PiBuZXcgQXJyYXlEZXF1ZTw+KGRlcXVlQ2FwYWNpdHkpKTtcbiIgKyAKIAkJIgkgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJIkNhbm5v
dCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9uLXN0YXRpYyBmaWVsZCBkZXF1ZUNh
cGFjaXR5XG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKQEAgLTIwNDcsOCArMjA2MywyMSBAQAog
CQkJIgl9XG4iICsgCiAJCQkifSIKIAkJfSwKKwkJLy8gOHUyMCBlbWl0cyBqdXN0IG9uZSBtZXNz
YWdlIGluZmVycmVkIHR5cGUgbm90IGNvbmZvcm1pbmcgdG8gdXBwZXIgYm91bmQuIEVDSidzIG1l
c3NhZ2UgaXMgYWN0dWFsbHkgYmV0dGVyLgorCQkvLyBXZSB1c2VkIHRvIGVtaXQgb25seSAxIGVy
cm9yIGhlcmUuIEhlcmUgdGhlIGxhbWJkYSBpcyBicm9rZW4sIHNvIGluZmVyZW5jZSBmYWlscyBs
ZWFkaW5nIHRvIHR3byBtZXNzYWdlcy4JCQkKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSA4KVxuIiArIAorCQkiCXNzLnN0cmVhbSgpLm1hcChzIC0+IHtcbiIgKyAKKwkJIiAg
ICAgICAgICBjbGFzcyBMMSB7fTtcbiIgKyAKKwkJIiAgICAgICAgICBjbGFzcyBMMiB7XG4iICsg
CisJCSIgICAgICAgICAgICB2b2lkIG1tKEwxIGwpIHt9XG4iICsgCisJCSIgICAgICAgICAgfVxu
IiArIAorCQkiICAgICAgICAgIHJldHVybiBuZXcgTDIoKS5tbShuZXcgTDEoKSk7XG4iICsgCisJ
CSIgICAgICAgIH0pLmZvckVhY2goZSAtPiBTeXN0ZW0ub3V0LnByaW50bG4oZSkpO1xuIiArIAor
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJ
CSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFN0cmVhbTxPYmplY3Q+IHRvIDx1
bmtub3duPlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDEzKVxuIiArIAogCQkiCXJldHVybiBuZXcgTDIoKS5tbShuZXcgTDEoKSk7XG4i
ICsgCiAJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJIkNhbm5vdCBy
ZXR1cm4gYSB2b2lkIHJlc3VsdFxuIiArIApAQCAtMzAxNSw2ICszMDQ0LDggQEAKIAkJCSJ9XG4i
fSk7CiB9CiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDMzMTU4KCkgeworICB0cnkgeworCXRoaXMuc2hv
dWxkU3dhbGxvd0NhcHR1cmVJZCA9IHRydWU7IC8vIHRoaXMgdGVzdCBleGhpYml0cyBzb21lIG5v
bi1kZXRlcm1pbmlzbSBpbiBjYXB0dXJlIGlkcy4ganVzdCBjb21wYXJlIGlnbm9yaW5nIGlkLCBi
dXQgZXN0YWJsaXNoaW5nIHByZXNlbmNlIG9mIGNhcHR1cmUuCiAJcnVuTmVnYXRpdmVUZXN0KAog
CQluZXcgU3RyaW5nW10gewogCQkJIkNvbGxlY3RvcnNNYXBzLmphdmEiLApAQCAtMzA0Niw4ICsz
MDc3LDExIEBACiAJCSIxLiBFUlJPUiBpbiBDb2xsZWN0b3JzTWFwcy5qYXZhIChhdCBsaW5lIDIw
KVxuIiArIAogCQkiCXAgLT4gcC5saHMuc3RyZWFtKCkubWFwKHA6OmtlZXBpbmdSaHMpKS5jb2xs
ZWN0KFxuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBe
Xl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2Jq
ZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZv
ciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8Q29sbGVjdG9yc01hcHMuUGFpcjxTdHJpbmcsU3Ry
aW5nPixjYXB0dXJlIzMtb2YgPyxNYXA8U3RyaW5nLExpc3Q8U3RyaW5nPj4+KVxuIiArIAorCQki
VGhlIG1ldGhvZCBjb2xsZWN0KENvbGxlY3Rvcjw/IHN1cGVyIE9iamVjdCxBLFI+KSBpbiB0aGUg
dHlwZSBTdHJlYW08T2JqZWN0PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAo
Q29sbGVjdG9yPENvbGxlY3RvcnNNYXBzLlBhaXI8U3RyaW5nLFN0cmluZz4sY2FwdHVyZS1vZiA/
LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKKyAg
fSBmaW5hbGx5IHsKKwl0aGlzLnNob3VsZFN3YWxsb3dDYXB0dXJlSWQgPSBmYWxzZTsJCisgIH0K
IH0KIHB1YmxpYyB2b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAt
MzMzNiw3ICszMzcwLDcgQEAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogcHVibGljIHZvaWQgdGVz
dEJ1ZzQzNTc2NygpIHsKLQlydW5OZWdhdGl2ZVRlc3QoCisJcnVuQ29uZm9ybVRlc3QoCiAJCW5l
dyBTdHJpbmdbXSB7CiAJCQkiRHVtbXlDbGFzcy5qYXZhIiwKIAkJCSJpbXBvcnQgamF2YS51dGls
Lio7XG4iICsKQEAgLTMzNzgsMTcgKzM0MTIsNyBAQAogCQkJIgl9XG4iICsgCiAJCQkifVxuIgog
CQl9LAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZh
IChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAt
PiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiAr
IAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXlxuIiAr
IAotCQkiVGhlIG1ldGhvZCBnZXRLZXkoU3RyaW5nKSBpbiB0aGUgdHlwZSBEdW1teUNsYXNzIGlz
IG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChPYmplY3QpXG4iICsgCi0JCSItLS0t
LS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBEdW1teUNsYXNzLmphdmEgKGF0IGxpbmUgMTgp
XG4iICsgCi0JCSIJLmNvbGxlY3QoQ29sbGVjdG9ycy50b01hcChwYXRoIC0+IHRoaXMuZ2V0S2V5
KHBhdGgpLCBwYXRoIC0+IHRoaXMuZ2V0VmFsdWUocGF0aCkpKSk7XG4iICsgCi0JCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0VmFsdWUoU3RyaW5nKSBpbiB0aGUg
dHlwZSBEdW1teUNsYXNzIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChPYmpl
Y3QpXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsKKwkJIiIpOwogfQogcHVibGljIHZvaWQgdGVz
dEJ1ZzQzNDQ4MygpIHsKIAlydW5Db25mb3JtVGVzdCgKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVz
dC5qYXZhCmluZGV4IGM1MDExMDkuLjFhMTBkMWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rl
c3QuamF2YQpAQCAtOTExOCwxMSArOTExOCwxMiBAQAogCQkJIgl9CVxuIiArCiAJCQkifVxuIgog
CQl9LAorCQkvLyBOb3RlOiBuZXcgbWVzc2FnZSBhbGlnbnMgYmV0dGVyIHdpdGggamF2YWMgOHUy
MC4KIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3
KVxuIiArIAogCQkiCUZ1bmN0aW9uPENMPEludGVnZXI+LCBTdHJpbmc+IHY1ID0gQ0w6Om1ldGhv
ZDE7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5e
Xl5eXlxuIiArIAotCQkiVGhlIHR5cGUgQ0wgZG9lcyBub3QgZGVmaW5lIG1ldGhvZDEoQ0w8SW50
ZWdlcj4pIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJCSJDYW5ub3QgbWFrZSBhIHN0
YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgbWV0aG9kIG1ldGhvZDEoQ0wpIGZyb20g
dGhlIHR5cGUgQ0xcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSA4KVxuIiArIAogCQkiCXY1ID0gdCAtPiB0Lm1ldGhvZDEoKTsJXG4iICsg
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90
YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFu
bm90YXRpb25UZXN0LmphdmEKaW5kZXggNTNmYzU5OS4uZTAzMDNmNCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3Qu
amF2YQpAQCAtNjc0MCw2ICs2NzQwLDcgQEAKIAkJCSJ9XG4iICsKIAkJCSJ9XG4iLAogCQl9LAor
CQkvLyBOb3RlOiB3ZSB1c2VkIHRvIGVtaXQgYSBkdXBsaWNhdGUgbWVzc2FnZSBvZiAyLiBGaXhl
ZC4KIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZh
IChhdCBsaW5lIDkpXG4iICsgCiAJCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0
ZVRvRmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIApAQCAtNjc0NywxMSAr
Njc0OCw2IEBACiAJCSJUaGUgY29uc3RydWN0b3IgUGFpcjxQYXRoLE9iamVjdD4oUGF0aCwgKDxu
byB0eXBlPiBwKSAtPiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsg
CiAJCSIyLiBFUlJPUiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAotCQki
CWZpbHRlcjIubWFwKHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVG
aWxlcy5nZXQocCkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdGFyZ2V0
IHR5cGUgb2YgdGhpcyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxu
IiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMy4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmph
dmEgKGF0IGxpbmUgOSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBk
YXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5e
Xl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJl
IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9SdW5Pbmx5
MzM1Q29tcGlsZXJUZXN0cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL1J1bk9ubHkzMzVDb21waWxlclRlc3RzLmph
dmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMzY2YWE5MAotLS0gL2Rldi9u
dWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9SdW5Pbmx5MzM1Q29tcGlsZXJUZXN0cy5qYXZhCkBAIC0wLDAgKzEs
ODggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEsIDIw
MTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoK
KyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KKyAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9u
IGZvcgorICoJCQkJCQkJCWJ1ZyAzOTI4NjIgLSBbMS44XVtjb21waWxlcl1bbnVsbF0gRXZhbHVh
dGUgbnVsbCBhbm5vdGF0aW9ucyBvbiBhcnJheSB0eXBlcworICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzOworCitpbXBvcnQgamF2YS5s
YW5nLnJlZmxlY3QuSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbjsKK2ltcG9ydCBqYXZhLmxhbmcu
cmVmbGVjdC5NZXRob2Q7CisKK2ltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKK2ltcG9ydCBq
dW5pdC5mcmFtZXdvcmsuVGVzdENhc2U7CitpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3RTdWl0
ZTsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Np
b24uR2VuZXJpY1R5cGVUZXN0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyLnJlZ3Jlc3Npb24uR2VuZXJpY3NSZWdyZXNzaW9uVGVzdDsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLkdlbmVyaWNzUmVncmVzc2lv
blRlc3RfMV83OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJl
Z3Jlc3Npb24uR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzg7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5MYW1iZGFFeHByZXNzaW9uc1Rlc3Q7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5O
ZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLk51bGxUeXBlQW5ub3RhdGlvblRlc3Q7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5PdmVybG9h
ZFJlc29sdXRpb25UZXN0ODsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5kb20u
Q29udmVydGVyVGVzdFNldHVwOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0
aWwuQWJzdHJhY3RDb21waWxlclRlc3Q7CisKK3B1YmxpYyBjbGFzcyBSdW5Pbmx5MzM1Q29tcGls
ZXJUZXN0cyBleHRlbmRzIFRlc3RDYXNlIHsKKwkKKwlwdWJsaWMgUnVuT25seTMzNUNvbXBpbGVy
VGVzdHMoU3RyaW5nIG5hbWUpIHsKKwkJc3VwZXIobmFtZSk7CisJfQorCXB1YmxpYyBzdGF0aWMg
Q2xhc3NbXSBnZXRBbGxUZXN0Q2xhc3NlcygpIHsKKwkJcmV0dXJuIG5ldyBDbGFzc1tdIHsKKwkJ
CUdlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmNsYXNzLAorCQkJTGFtYmRhRXhwcmVzc2lvbnNU
ZXN0LmNsYXNzLAorCQkJTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3MsCisJCQlP
dmVybG9hZFJlc29sdXRpb25UZXN0OC5jbGFzcywKKwkJCU51bGxUeXBlQW5ub3RhdGlvblRlc3Qu
Y2xhc3MsIC8vIHRlc3RzIHR5cGUgaW5mZXJlbmNlCisJCX07CisJfQorCQorCXB1YmxpYyBzdGF0
aWMgQ2xhc3NbXSBnZXRDb21waWxlckNsYXNzZXMoKSB7CisJCXJldHVybiBuZXcgQ2xhc3NbXSB7
CisJCQlHZW5lcmljVHlwZVRlc3QuY2xhc3MsCisJCQlHZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmNs
YXNzLAorCQkJR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzcuY2xhc3MsCisJCX07CisJfQorCisJ
cHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCQlUZXN0U3VpdGUgdHMgPSBuZXcgVGVzdFN1
aXRlKFJ1bk9ubHkzMzVDb21waWxlclRlc3RzLmNsYXNzLmdldE5hbWUoKSk7CisKKwkJQ2xhc3Nb
XSB0ZXN0Q2xhc3NlcyA9IGdldEFsbFRlc3RDbGFzc2VzKCk7CisJCWFkZFRlc3RzVG9TdWl0ZSh0
cywgdGVzdENsYXNzZXMpOworCQorCQlBYnN0cmFjdENvbXBpbGVyVGVzdC5zZXRwb3NzaWJsZUNv
bXBsaWFuY2VMZXZlbHMoQWJzdHJhY3RDb21waWxlclRlc3QuRl8xXzgpOworCQlhZGRUZXN0c1Rv
U3VpdGUodHMsIGdldENvbXBpbGVyQ2xhc3NlcygpKTsKKwkJcmV0dXJuIHRzOworCX0KKwlwdWJs
aWMgc3RhdGljIHZvaWQgYWRkVGVzdHNUb1N1aXRlKFRlc3RTdWl0ZSBzdWl0ZSwgQ2xhc3NbXSB0
ZXN0Q2xhc3NlcykgeworCisJCWZvciAoaW50IGkgPSAwOyBpIDwgdGVzdENsYXNzZXMubGVuZ3Ro
OyBpKyspIHsKKwkJCUNsYXNzIHRlc3RDbGFzcyA9IHRlc3RDbGFzc2VzW2ldOworCQkJLy8gY2Fs
bCB0aGUgc3VpdGUoKSBtZXRob2QgYW5kIGFkZCB0aGUgcmVzdWx0aW5nIHN1aXRlIHRvIHRoZSBz
dWl0ZQorCQkJdHJ5IHsKKwkJCQlNZXRob2Qgc3VpdGVNZXRob2QgPSB0ZXN0Q2xhc3MuZ2V0RGVj
bGFyZWRNZXRob2QoInN1aXRlIiwgbmV3IENsYXNzWzBdKTsgLy8kTk9OLU5MUy0xJAorCQkJCVRl
c3QgdGVzdCA9IChUZXN0KXN1aXRlTWV0aG9kLmludm9rZShudWxsLCBuZXcgT2JqZWN0WzBdKTsK
KwkJCQlzdWl0ZS5hZGRUZXN0KHRlc3QpOworCQkJfSBjYXRjaCAoSWxsZWdhbEFjY2Vzc0V4Y2Vw
dGlvbiBlKSB7CisJCQkJZS5wcmludFN0YWNrVHJhY2UoKTsKKwkJCX0gY2F0Y2ggKEludm9jYXRp
b25UYXJnZXRFeGNlcHRpb24gZSkgeworCQkJCWUuZ2V0VGFyZ2V0RXhjZXB0aW9uKCkucHJpbnRT
dGFja1RyYWNlKCk7CisJCQl9IGNhdGNoIChOb1N1Y2hNZXRob2RFeGNlcHRpb24gZSkgeworCQkJ
CWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0KKwl9CisJcHJvdGVjdGVkIHZvaWQgdGVh
ckRvd24oKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJQ29udmVydGVyVGVzdFNldHVwLlBST0pFQ1Rf
U0VUVVAgPSBmYWxzZTsKKwkJc3VwZXIudGVhckRvd24oKTsKKwl9Cit9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0
ZXIxN1Rlc3QuamF2YQppbmRleCA0YTdmZDc5Li5jNjFlZjRlIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVy
MTdUZXN0LmphdmEKQEAgLTg5NCwxMiArODk0LDEwIEBACiAJCQogCQlTdHJpbmcgZXJyb3IgPSAi
TGFtYmRhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2VkIG9ubHkgYXQgc291cmNlIGxldmVsIDEuOCBv
ciBhYm92ZVxuIiArIAogCQkJCSJMYW1iZGEgZXhwcmVzc2lvbnMgYXJlIGFsbG93ZWQgb25seSBh
dCBzb3VyY2UgbGV2ZWwgMS44IG9yIGFib3ZlXG4iICsgCi0JCQkJIlRoZSBtZXRob2QgZm9vKFgu
U3RyaW5nVG9JbnQpIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKChTdHJpbmcgcykgLT4ge30pXG4iICsgCiAJCQkJIkxhbWJkYSBleHByZXNzaW9ucyBh
cmUgYWxsb3dlZCBvbmx5IGF0IHNvdXJjZSBsZXZlbCAxLjggb3IgYWJvdmVcbiIgKyAKIAkJCQki
TGFtYmRhIGV4cHJlc3Npb25zIGFyZSBhbGxvd2VkIG9ubHkgYXQgc291cmNlIGxldmVsIDEuOCBv
ciBhYm92ZVxuIiArIAotCQkJCSJUaGUgbWV0aG9kIGJhcihYLlJlZHVjZUludCkgaW4gdGhlIHR5
cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKGludCB4LCBpbnQgeSkg
LT4ge30pXG4iICsgCiAJCQkJIkxhbWJkYSBleHByZXNzaW9ucyBhcmUgYWxsb3dlZCBvbmx5IGF0
IHNvdXJjZSBsZXZlbCAxLjggb3IgYWJvdmUiOwotCQlhc3NlcnRQcm9ibGVtc1NpemUodW5pdCwg
NywgZXJyb3IpOworCQlhc3NlcnRQcm9ibGVtc1NpemUodW5pdCwgNSwgZXJyb3IpOwogCiAJCVR5
cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURlY2xhcmF0aW9uKSBnZXRBU1RO
b2RlKHVuaXQsIDApOwogCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2RkZWNsID0gKE1ldGhvZERl
Y2xhcmF0aW9uKXR5cGVkZWNsYXJhdGlvbi5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDQpOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2
YQppbmRleCBlZDIwNGI1Li45NjRkZGFiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpAQCAtNjAsMTAgKzYwLDcgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRp
bmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYWNr
YWdlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5
cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuUHJvYmxlbU1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNvdXJjZVR5cGVCaW5kaW5nOwpAQCAt
MzI5LDYgKzMyNiw3IEBACiAKIAkJc3VwZXIoKTsKIAl9CisJCiAJcHJpdmF0ZSBzdGF0aWMgaW50
IGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50KEJsb2NrU2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gYXJn
dW1lbnQsIFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUsIFR5cGVCaW5kaW5nIGFyZ3VtZW50VHlw
ZSwgVHlwZUJpbmRpbmcgb3JpZ2luYWxQYXJhbWV0ZXJUeXBlKSB7CiAJCWFyZ3VtZW50LmNvbXB1
dGVDb252ZXJzaW9uKHNjb3BlLCBwYXJhbWV0ZXJUeXBlLCBhcmd1bWVudFR5cGUpOwogCkBAIC02
NTAsMTIwICs2NDgsNDIgQEAKIAkvKioKIAkgKiBBZnRlciBtZXRob2QgbG9va3VwIGhhcyBwcm9k
dWNlZCAnbWV0aG9kQmluZGluZycgYnV0IHdoZW4gcG9seSBleHByZXNzaW9ucyBoYXZlIGJlZW4g
c2VlbiBhcyBhcmd1bWVudHMsCiAJICogaW5zcGVjdCB0aGUgYXJndW1lbnRzIHRvIHRyaWdnZXIg
YW5vdGhlciByb3VuZCBvZiByZXNvbHZpbmcgd2l0aCBpbXByb3ZlZCB0YXJnZXQgdHlwZXMgZnJv
bSB0aGUgbWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAqIElmIHRoaXMgcmVzb2x2aW5nIHByb2R1Y2Vz
IGJldHRlciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50cywgdXBkYXRlIHRoZSAnYXJndW1lbnRUeXBl
cycgYXJyYXkgaW4tcGxhY2UgYXMgYW4KLQkgKiBpbnRlbmRlZCBzaWRlIGVmZmVjdCB0aGF0IHdp
bGwgZmVlZCBiZXR0ZXIgdHlwZSBpbmZvcm1hdGlvbiBpbiBjaGVja0ludm9jYXRpb25Bcmd1bWVu
dHMoKSBhbmQgb3RoZXJzLgogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0
aW9uIHdoaWNoIGlzIGJlaW5nIHJlc29sdmVkCi0JICogQHBhcmFtIG1ldGhvZEJpbmRpbmcgdGhl
IG1ldGhvZCBwcm9kdWNlZCBieSBsb29rdXAgKHBvc3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVy
ZW5jZSkuCisJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAo
cG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBAcGFyYW0gYXJndW1lbnRU
eXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5n
IHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKIAkgKiAJdGhlIG1ldGhv
ZCBsb29rdXAuCi0JICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkg
KiBAcGFyYW0gc2NvcGUgc2NvcGUgZm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRp
YyB2b2lkIHJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRp
b24sIE1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5
cGVzLCBTY29wZSBzY29wZSkgewotCQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgp
KQorCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52
b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBh
cmd1bWVudFR5cGVzLCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlk
YXRlTWV0aG9kID0gbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1l
dGhvZCkuY2xvc2VzdE1hdGNoIDogbnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxs
KQogCQkJcmV0dXJuOwotCQlpbnQgcHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcg
Y2FuZGlkYXRlTWV0aG9kOwotCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7
Ci0JCQljYW5kaWRhdGVNZXRob2QgPSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhv
ZEJpbmRpbmcgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJl
YXNvbiA9IG1ldGhvZEJpbmRpbmcucHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAo
KFByb2JsZW1NZXRob2RCaW5kaW5nKSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0g
ZWxzZSB7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVN
ZXRob2QgIT0gbnVsbCkgewotCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0
aG9kLmlzVmFyYXJncygpOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0J
CQlpZiAoY2FuZGlkYXRlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcpIHsKLQkJCQlpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFt
ZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHgg
IT0gbnVsbCkgewotCQkJCQlpZiAoaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29u
dGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qg
c3RhdGUgb2YgVFlQRV9JTkZFUlJFRAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJl
YWR5Ci0JCQkJCQkvLyAtIGFib3ZlIHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1
cm47Ci0JCQkJCX0KLQkJCQkJdmFyaWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8v
IFRPRE86IGlmIG5vIGluZkN0eCBpcyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sg
aWYgdGhpcyBpcyBhIHZhcmFyZ3MgaW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGlu
dm9jYXRpb24gaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFs
bG9jYXRpb25FeHByZXNzaW9uKWludm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAh
PSBudWxsKQotCQkJCQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmlu
YWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7
Ci0JCQlFeHByZXNzaW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygp
OwotCQkJRXhwcmVzc2lvbiBbXSBhcmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChp
bmZDdHggPT0gbnVsbCAmJiB2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBh
cmFtZXRlcnMubGVuZ3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlU
eXBlQmluZGluZyBsYXN0UGFyYW0gPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwot
CQkJCUV4cHJlc3Npb24gbGFzdEFyZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwot
CQkJCWlmIChsYXN0QXJnLmlzQ29tcGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJ
CQl2YXJpYWJsZUFyaXR5ID0gZmFsc2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IGFyZ3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBs
ZW5ndGg7IGkrKykgewotCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0J
CQkJVHlwZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRp
bmcgcGFyYW1ldGVyVHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1l
dGVycywgaSwgdmFyaWFibGVBcml0eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAm
JiBwcm9ibGVtUmVhc29uICE9IFByb2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVl
OyAvLyBub3QgbXVjaCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQg
b25seSBoYXBwZW5zIGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50
IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3Vt
ZW50KS5oYXNFcnJvcnMoKSkKLQkJCQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5l
ciBwb2x5IGhhcyBlcnJvcnMKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRp
b24pIHsKLQkJCQkJSW52b2NhdGlvbiBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1
bWVudDsKLQkJCQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRp
bmcocGFyYW1ldGVyVHlwZSwgdHJ1ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4
dDE4IGlubmVyQ29udGV4dCA9IGlubmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBh
cmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0J
CQkJCQkJaWYgKCFpbm5lckNvbnRleHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0J
CQkJCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJ
TWV0aG9kQmluZGluZyBpbXByb3ZlZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0
aW9uVHlwZShpbm5lckludm9jYXRpb24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlp
ZiAoIWltcHJvdmVkQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNv
bnRleHQucmVwb3J0SW52YWxpZEludm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJp
bmRpbmcpOwotCQkJCQkJCQl9Ci0JCQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmlu
ZGluZ3MoaW1wcm92ZWRCaW5kaW5nLCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2
ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5n
LCBzY29wZSk7Ci0JCQkJCQkJCX0KLQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVw
Q29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJ
CQkJaW5uZXJDb250ZXh0LnJlYmluZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlu
bmVySW52b2NhdGlvbik7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90
aGVyd2lzZSB0aGVzZSBoYXZlIGJlZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxv
b2t1cAotCQkJCQl9Ci0JCQkJfQotCi0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24o
KSkgewotCQkJCQkvLyBwb2x5IGV4cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBt
YXkgbmVlZCB0byBiZSByZXNvbHZlZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBp
bmZDdHguc3RlcENvbXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRF
RCkKLQkJCQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8v
IGluIHRoaXMgY2FzZSBhcmd1bWVudCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNl
Q29udGV4dDE4LmFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJ
dXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlw
ZShwYXJhbWV0ZXJUeXBlLCBzY29wZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJv
YmxlbVJlYXNvbnMuTm9FcnJvciAvLyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVk
QXJndW1lbnRUeXBlICE9IG51bGwJCQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/
IC4uLgotCQkJCQkJCSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBl
QmluZGluZykpCi0JCQkJCXsKLQkJCQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJh
eSAoc3VwcG9zZWQgdG8gYmUgb3duZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8g
aW4gb3JkZXIgdG8gZ2l2ZSBiZXR0ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tz
Ci0JCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQot
CQkJCX0KKwkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJn
cygpOworCQlmaW5hbCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2Qu
cGFyYW1ldGVyczsKKwkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1l
bnRzKCk7CisJCWlmICh2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFt
ZXRlcnMubGVuZ3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJn
dW1lbnRzLmxlbmd0aC0xXS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5s
ZW5ndGgtMV0sIHNjb3BlKSkgeworCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJ
fQotCQlpbnZvY2F0aW9uLmlubmVyVXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMg
dm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9u
LCBNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5k
aW5nW10gYXJndW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50
cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxs
KSB7Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxl
bmd0aF07Ci0JCQlmb3IgKGludCBpID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsr
KQotCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7
CisJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1
bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQg
PSBhcmd1bWVudHNbaV07CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNl
Q29udGV4dDE4LmdldFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJ
CWlmIChwYXJhbWV0ZXJUeXBlID09IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdl
IGNhbiBkbyB3aXRob3V0IGEgdGFyZ2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0
ZXIgc29tZSByZXNvbHZlIGVycm9yCisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBl
KCkpIHsKKwkJCQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJ
VHlwZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNj
b3BlKTsgCisJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewor
CQkJCQkvLyBMRS5yZXNvbHZlVHlwZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNl
IHJlc29sdmUgZG9lcyBub3QgZGV0ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQu
CisJCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3Vt
ZW50OworCQkJCQlpZiAoIWxhbWJkYS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNj
b3BlKSB8fCBsYW1iZGEuaGFzRXJyb3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJ
aWYgKHVwZGF0ZWRBcmd1bWVudFR5cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtp
bmQoKSAhPSBCaW5kaW5nLlBPTFlfVFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0
ZWRBcmd1bWVudFR5cGU7CisJCQl9CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1l
bnRzKGludm9jYXRpb24sIG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9
CiAKIAlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2Nv
cGUsIEFubm90YXRpb25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBiMmZlMDQzLi5lZjcyMjc4IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC02NCw2ICs2NCw3IEBACiAKIAlw
dWJsaWMgVHlwZVJlZmVyZW5jZSB0eXBlOwogCXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRz
OworCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsK
IAlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nOwkJCQkJCQkvLyBleGFjdCBiaW5kaW5nIHJl
c3VsdGluZyBmcm9tIGxvb2t1cAogCU1ldGhvZEJpbmRpbmcgc3ludGhldGljQWNjZXNzb3I7CQkJ
CQkJLy8gc3ludGhldGljIGFjY2Vzc29yIGZvciBpbm5lci1lbXVsYXRpb24KIAlwdWJsaWMgVHlw
ZVJlZmVyZW5jZVtdIHR5cGVBcmd1bWVudHM7CkBAIC03NywzMCArNzgsOSBAQAogCiAJIC8vIGhv
bGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVy
ZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0
ZSk6CiAJcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZS8qPFBNQixJQzE4PiovIGluZmVyZW5jZUNv
bnRleHRzOwotCXByb3RlY3RlZCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhl
bHBlcjsKLQotCS8qKiBSZWNvcmQgdG8ga2VlcCBzdGF0ZSBiZXR3ZWVuIGRpZmZlcmVudCBwYXJ0
cyBvZiByZXNvbHV0aW9uLiAqLwotCVJlc29sdXRpb25TdGF0ZSBzdXNwZW5kZWRSZXNvbHV0aW9u
U3RhdGU7Ci0JY2xhc3MgUmVzb2x1dGlvblN0YXRlIHsKLQkJQmxvY2tTY29wZSBzY29wZTsKLQkJ
Ym9vbGVhbiBpc0RpYW1vbmQ7Ci0JCWJvb2xlYW4gZGlhbW9uZE5lZWRzRGVmZXJyaW5nOwotCQli
b29sZWFuIGFyZ3NDb250YWluQ2FzdDsKLQkJYm9vbGVhbiBjYW5ub3RJbmZlckRpYW1vbmQ7IC8v
IHJlcXVlc3QgdGhlIGFuIGVycm9yIGJlIHJlcG9ydGVkIGluIGR1ZSB0aW1lCi0JCVR5cGVCaW5k
aW5nW10gYXJndW1lbnRUeXBlczsKLQkJYm9vbGVhbiBoYXNSZXBvcnRlZEVycm9yOwotCi0JCVJl
c29sdXRpb25TdGF0ZShCbG9ja1Njb3BlIHNjb3BlLCBib29sZWFuIGlzRGlhbW9uZCwgYm9vbGVh
biBkaWFtb25OZWVkc0RlZmVycmluZywKLQkJCQlib29sZWFuIGFyZ3NDb250YWluQ2FzdCwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKQotCQl7Ci0JCQl0aGlzLnNjb3BlID0gc2NvcGU7Ci0J
CQl0aGlzLmlzRGlhbW9uZCA9IGlzRGlhbW9uZDsKLQkJCXRoaXMuZGlhbW9uZE5lZWRzRGVmZXJy
aW5nID0gZGlhbW9uTmVlZHNEZWZlcnJpbmc7Ci0JCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IGFy
Z3NDb250YWluQ2FzdDsKLQkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IGFyZ3VtZW50VHlwZXM7Ci0J
CX0KLQl9Ci0KKwlwcml2YXRlIEJsb2NrU2NvcGUgZW5jbG9zaW5nU2NvcGU7CisJcHJpdmF0ZSBi
b29sZWFuIGFyZ3NDb250YWluQ2FzdDsKKwkKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShC
bG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZv
IGZsb3dJbmZvKSB7CiAJLy8gY2hlY2sgY2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXpl
ZCBpbiBjdXJyZW50IGNvbnRleHQgKDI2MTM0KQogCWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxp
emF0aW9uSWZOZWNlc3NhcnkoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmlu
Z0NsYXNzLmVyYXN1cmUoKSwgY3VycmVudFNjb3BlLCBmbG93SW5mbyk7CkBAIC0zNDEsMTg4ICsz
MjEsMTUyIEBACiAJLy8gUHJvcGFnYXRlIHRoZSB0eXBlIGNoZWNraW5nIHRvIHRoZSBhcmd1bWVu
dHMsIGFuZCBjaGVjayBpZiB0aGUgY29uc3RydWN0b3IgaXMgZGVmaW5lZC4KIAlmaW5hbCBib29s
ZWFuIGlzRGlhbW9uZCA9IHRoaXMudHlwZSAhPSBudWxsICYmICh0aGlzLnR5cGUuYml0cyAmIEFT
VE5vZGUuSXNEaWFtb25kKSAhPSAwOwogCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKLQlib29sZWFuIGRpYW1vbmROZWVkc0Rl
ZmVycmluZyA9IGZhbHNlOwogCWxvbmcgc291cmNlTGV2ZWwgPSBjb21waWxlck9wdGlvbnMuc291
cmNlTGV2ZWw7CiAJaWYgKHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7
CiAJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCXRoaXMuZW5jbG9z
aW5nU2NvcGUgPSBzY29wZTsKIAkJaWYgKHRoaXMudHlwZSA9PSBudWxsKSB7CiAJCQkvLyBpbml0
aWFsaXphdGlvbiBvZiBhbiBlbnVtIGNvbnN0YW50CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHNj
b3BlLmVuY2xvc2luZ1JlY2VpdmVyVHlwZSgpOwogCQl9IGVsc2UgewogCQkJdGhpcy5yZXNvbHZl
ZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRz
Ki8pOwotCQkJaWYgKGlzRGlhbW9uZCAmJiB0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIHRo
aXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NBVElPTl9DT05URVhUICYmIHNvdXJjZUxldmVs
ID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJCQlpZiAodGhpcy5yZXNvbHZlZFR5
cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQotCQkJCQlk
aWFtb25kTmVlZHNEZWZlcnJpbmcgPSB0cnVlOwotCQkJfQogCQl9Ci0JfSBlbHNlIHsKLQkJdGhp
cy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlOwotCX0KLQotCWlmICh0aGlz
LnR5cGUgIT0gbnVsbCkgewotCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwgdGhp
cy5yZXNvbHZlZFR5cGUpOwotCQljaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOiB7Ci0JCQlp
ZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVu
Y2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3RyaW5nPi5ZPEludGVnZXI+KCkKLQkJCQlSZWZlcmVu
Y2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNvbHZlZFR5
cGU7Ci0JCQkJaWYgKGN1cnJlbnRUeXBlID09IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsKLQkJ
CQlkbyB7Ci0JCQkJCS8vIGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9yIHRvcGxldmVs
IHR5cGVzCi0JCQkJCWlmICgoY3VycmVudFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkFjY1N0YXRpYykgIT0gMCkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsK
LQkJCQkJaWYgKGN1cnJlbnRUeXBlLmlzUmF3VHlwZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6
ZWRBbGxvY2F0aW9uOwotCQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVu
Y2xvc2luZ1R5cGUoKSkhPSBudWxsKTsKLQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJl
ZmVyZW5jZSBxUmVmID0gKFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlz
LnR5cGU7Ci0JCQkJZm9yIChpbnQgaSA9IHFSZWYudHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBp
ID49IDA7IGktLSkgewotCQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsK
LQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJp
emVkVHlwZUFsbG9jYXRpb24odGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCQkJCQli
cmVhazsKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxsKSB7CisJCQljaGVja0lsbGVnYWxOdWxsQW5u
b3RhdGlvbihzY29wZSwgdGhpcy5yZXNvbHZlZFR5cGUpOworCQkJY2hlY2tQYXJhbWV0ZXJpemVk
QWxsb2NhdGlvbjogeworCQkJCWlmICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
UXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50
ZWdlcj4oKQorCQkJCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJp
bmRpbmcpdGhpcy5yZXNvbHZlZFR5cGU7CisJCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSBy
ZXR1cm4gY3VycmVudFR5cGU7CisJCQkJCWRvIHsKKwkJCQkJCS8vIGlzU3RhdGljKCkgaXMgYW5z
d2VyaW5nIHRydWUgZm9yIHRvcGxldmVsIHR5cGVzCisJCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1v
ZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNr
UGFyYW1ldGVyaXplZEFsbG9jYXRpb247CisJCQkJCQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBl
KCkpIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb247CisJCQkJCX0gd2hpbGUgKChj
dXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkhPSBudWxsKTsKKwkJCQkJ
UGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVk
UXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgdGhpcy50eXBlOworCQkJCQlmb3IgKGludCBpID0gcVJl
Zi50eXBlQXJndW1lbnRzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7CisJCQkJCQlpZiAocVJl
Zi50eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsKKwkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5pbGxlZ2FsUXVhbGlmaWVkUGFyYW1ldGVyaXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlw
ZSwgdGhpcy5yZXNvbHZlZFR5cGUpOworCQkJCQkJCWJyZWFrOworCQkJCQkJfQogCQkJCQl9CiAJ
CQkJfQogCQkJfQogCQl9Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBh
cmUgcmVzb2x2ZWQKKwkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNv
bHZlZAogCi0JLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0
b3IgY2FsbCkKLQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0
aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBz
b3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0JCXRoaXMuZ2VuZXJpY1R5
cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhp
cy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ld
ID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMq
LykpID09IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJn
SGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNl
KTsKLQkJCX0KLQkJfQotCQlpZiAoaXNEaWFtb25kKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVu
dHMpOwotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAo
dGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJn
dW1lbnRzCi0JCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsg
aSA8IG1heDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3Bl
KTsKKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3Ig
Y2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3Ro
ID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBz
b3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0g
MDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0g
dGhpcy50eXBlQXJndW1lbnRzW2ldOworCQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50
c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91
bmRzKi8pKSA9PSBudWxsKSB7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CisJCQkJ
aWYgKGFyZ0hhc0Vycm9yICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewor
CQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVS
ZWZlcmVuY2UpOwogCQkJCX0KIAkJCX0KLQkJCXJldHVybiBudWxsOworCQkJaWYgKGlzRGlhbW9u
ZCkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRU
eXBlQXJndW1lbnRzKHRoaXMudHlwZUFyZ3VtZW50cyk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9
CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkg
eyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkg
PSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJ
dGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJ
CXJldHVybiBudWxsOworCQkJfQogCQl9Ci0JfQogCi0JLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVu
dHMnIHR5cGVzCi0JYm9vbGVhbiBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsKLQlUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7Ci0JaWYgKHRoaXMuYXJn
dW1lbnRzICE9IG51bGwpIHsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOwotCQlpbnQg
bGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5
cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsK
LQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKLQkJCWlmIChhcmd1
bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBE
aXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJCQlh
cmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkvLyBidWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlw
ZXMKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCWJvb2xlYW4gYXJnSGFzRXJy
b3IgPSBmYWxzZTsKKwkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0
aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhp
cy5hcmd1bWVudHNbaV07CisJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Np
b24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7
IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVl
OworCQkJCX0KKwkJCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NP
TlRFWFQpOworCQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkg
CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJn
dW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxT
LTEkCisJCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlw
ZShzY29wZSkpID09IG51bGwpIHsKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOworCQkJCX0KIAkJ
CX0KLQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7
Ci0JCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2Fz
IHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlp
ZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51
bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwg
Pj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lv
bigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24p
IGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCWlmICh0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcg
SW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsK
LQkJCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUz
NTksIGlmIGFyZ3VtZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUg
PD4gY2FzZS4KKwkJCWlmIChhcmdIYXNFcnJvcikgeworCQkJCS8qIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVy
cm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KIAkJCSAgIE5vIG1lYW5p
bmdmdWwgdHlwZSByZXNvbHV0aW9uIGlzIHBvc3NpYmxlIHNpbmNlIGluZmVyZW5jZSBvZiB0aGUg
ZWxpZGVkIHR5cGVzIGlzIGZ1bGx5IHRpZWQgdG8gYXJndW1lbnQgdHlwZXMuIERvCiAJCQkgICBu
b3QgcmV0dXJuIHRoZSBwYXJ0aWFsbHkgcmVzb2x2ZWQgdHlwZS4KLQkJCSAqLwotCQkJaWYgKGlz
RGlhbW9uZCkgewotCQkJCXJldHVybiBudWxsOyAvLyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQg
dGhpcy5yZXNvbHZlZFR5cGUKLQkJCX0KLQkJCWlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5j
ZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKLQkJCQkvLyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3Ig
Y2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCi0J
CQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0J
CQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KSB7Ci0JCQkJCXBzZXVkb0FyZ3NbaV0g
PSBhcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogYXJndW1lbnRU
eXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJ
ICovCisJCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBw
YXJ0aWFsbHkgY29va2VkIHRoaXMucmVzb2x2ZWRUeXBlCiAJCQkJfQotCQkJCXRoaXMuYmluZGlu
ZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBl
LCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKLQkJCQlpZiAo
dGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7
Ci0JCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGlu
Zyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKLQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0
IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJs
ZSBtZXRob2QgbWF0Y2gKLQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQlp
ZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZ
UEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCi0JCQkJCQkJLy8gc2hvdWxkbid0IHJl
dHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBp
dCB0byByYXcgbWV0aG9kICgxNzU0MDkpCi0JCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52
aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOwotCQkJCQkJfQotCQkJCQkJdGhpcy5i
aW5kaW5nID0gY2xvc2VzdE1hdGNoOwotCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hP
cmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOwotCQkJCQkJaWYgKGNsb3Nlc3RNYXRj
aE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVk
SW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7Ci0JCQkJCQkJLy8gaWdub3JlIGNhc2Vz
IHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGly
ZWN0IHJlY3Vyc2lvbnMpCi0JCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9
IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJaWYgKHRoaXMucmVz
b2x2ZWRUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJCQkvLyByZWNvcmQg
YSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNv
bnN0cnVjdG9yIG1hdGNoCisJCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBl
QmluZGluZ1tsZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsK
KwkJCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5
cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3
aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQorCQkJCQl9CisJCQkJCXRoaXMuYmluZGluZyA9IHNj
b3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCBUeXBl
Q29uc3RhbnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKwkJCQkJaWYgKHRoaXMu
YmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJ
CQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRo
aXMuYmluZGluZykuY2xvc2VzdE1hdGNoOworCQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1h
dGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBt
ZXRob2QgbWF0Y2gKKwkJCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlm
IChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKKwkJCQkJCQkJLy8gc2hvdWxkbid0IHJl
dHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBp
dCB0byByYXcgbWV0aG9kICgxNzU0MDkpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVu
dmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNo
Lm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZyludWxsKTsKKwkJCQkJCQl9CisJCQkJCQkJdGhp
cy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOworCQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1h
dGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKTsKKwkJCQkJCQlpZiAoY2xvc2Vz
dE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0Rl
ZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKKwkJCQkJCQkJLy8gaWdub3Jl
IGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUu
Zy4gZGlyZWN0IHJlY3Vyc2lvbnMpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlm
aWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCQkJCX0K
IAkJCQkJCX0KIAkJCQkJfQogCQkJCX0KKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJ
CQl9CisJCX0KKwkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlID09IG51bGwgfHwgIXRoaXMucmVzb2x2
ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisKKwkJLy8g
bnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNvbnN0YW50IGluaXRz
CisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuY2FuQmVJbnN0
YW50aWF0ZWQoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5zdGFudGlh
dGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZl
ZFR5cGU7CiAJCX0KIAl9Ci0JaWYgKHRoaXMucmVzb2x2ZWRUeXBlID09IG51bGwgfHwgIXRoaXMu
cmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0J
Ly8gbnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNvbnN0YW50IGlu
aXRzCi0JaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5jYW5CZUlu
c3RhbnRpYXRlZCgpKSB7Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluc3RhbnRp
YXRlKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwotCQlyZXR1cm4gdGhpcy5yZXNvbHZl
ZFR5cGU7Ci0JfQotCVJlc29sdXRpb25TdGF0ZSBzdGF0ZSA9IG5ldyBSZXNvbHV0aW9uU3RhdGUo
c2NvcGUsIGlzRGlhbW9uZCwgZGlhbW9uZE5lZWRzRGVmZXJyaW5nLCBhcmdzQ29udGFpbkNhc3Qs
IGFyZ3VtZW50VHlwZXMpOwotCWlmIChkaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJdGhpcy5z
dXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBzdGF0ZTsgLy8gcmVzb2x2aW5nIHRvIGJlIGNvbnRp
bnVlZCBsYXRlciAodmlhIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkpLgotCQlyZXR1
cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKLQl9Ci0KLQlpZiAoIXJlc29sdmVQYXJ0Mihz
dGF0ZSkpCi0JCXJldHVybiBudWxsOwotCXJldHVybiByZXNvbHZlUGFydDMoc3RhdGUpOwotfQot
Ci0vKiogU2Vjb25kIHBhcnQgb2YgcmVzb2x2aW5nIHRoYXQgbWF5IGhhcHBlbiBtdWx0aXBsZSB0
aW1lcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbi4gKi8KLWJvb2xlYW4gcmVzb2x2ZVBhcnQy
KFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCS8vIFRPRE86IGFsbCBpbmZvcm1hdGlvbiBwZXJz
aXN0ZWQgZHVyaW5nIHRoaXMgbWV0aG9kIG1heSBuZWVkIHRvIGJlIHN0b3JlZCBwZXIgdGFyZ2V0
VHlwZT8KLQlpZiAoc3RhdGUuaXNEaWFtb25kKSB7Ci0JCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJp
Y1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdl
bmVyaWNUeXBlKCk7Ci0JCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRl
ZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlz
LnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHN0YXRlLmFyZ3VtZW50VHlwZXMsIHN0YXRl
LnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgewotCQkJaWYgKCFzdGF0ZS5k
aWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCXN0YXRlLmhhc1JlcG9ydGVkRXJy
b3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKLQkJCX0gZWxzZSB7Ci0J
CQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gdHJ1ZTsgLy8gZGVmZXIgcmVwb3J0aW5nCi0J
CQl9Ci0JCQlyZXR1cm4gZmFsc2U7CisJCisJaWYgKGlzRGlhbW9uZCAmJiB0aGlzLnR5cGVFeHBl
Y3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NBVElPTl9DT05U
RVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKKwkJaWYg
KHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJp
bmRpbmcoKSkgeworCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0KLQkJ
dGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gc3RhdGUuc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJy
ZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5l
bmNsb3NpbmdUeXBlKCkpOwotCQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSBmYWxzZTsKLSAJ
fQotCVJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRo
aXMucmVzb2x2ZWRUeXBlOwotCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmco
c3RhdGUuc2NvcGUsIHRoaXMsIHJlY2VpdmVyVHlwZSwgc3RhdGUuYXJndW1lbnRUeXBlcyk7Ci0J
cmV0dXJuIHRydWU7Ci19Ci0KLS8qKiBGaW5hbCBwYXJ0IG9mIHJlc29sdmluZyAob25jZSk6IGNo
ZWNrIGFuZCByZXBvcnQgdmFyaW91cyBlcnJvciBjb25kaXRpb25zLiAqLwotVHlwZUJpbmRpbmcg
cmVzb2x2ZVBhcnQzKFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCWlmICh0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IpCi0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKLQl0aGlzLnN1
c3BlbmRlZFJlc29sdXRpb25TdGF0ZSA9IG51bGw7Ci0JaWYgKHN0YXRlLmNhbm5vdEluZmVyRGlh
bW9uZCkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRl
ZFR5cGVzKHRoaXMpOwotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCX0KKwkK
KwlpZiAoaXNEaWFtb25kKSB7CisJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBh
cmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7
CisJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVu
dmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNU
eXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJVHlw
ZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMocGFyYW1ldGVyaXpl
ZFR5cGUsIHBhcmFtZXRlcml6ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5
cGVzLCBzY29wZSk7CisJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKKwkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQlyZXR1cm4g
dGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOworCQl9CisJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhp
cy50eXBlLnJlc29sdmVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKyAJfQorCQorCVJl
ZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVz
b2x2ZWRUeXBlOworCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUs
IHRoaXMsIHJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKIAlSZWZlcmVuY2VCaW5k
aW5nIGFsbG9jYXRpb25UeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBl
OworCQogCWlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRoaXMu
YmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKSB7CiAJCQl0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MgPSBhbGxvY2F0aW9uVHlwZTsKQEAgLTUzMCwzMCArNDc0LDI5IEBACiAJCWlmICh0
aGlzLnR5cGUgIT0gbnVsbCAmJiAhdGhpcy50eXBlLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQlyZXR1cm4gbnVsbDsKIAkJfQotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKKwkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CiAJ
CXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKIAl9CiAJaWYgKCh0aGlzLmJpbmRpbmcudGFnQml0
cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDApIHsKLQkJc3RhdGUuc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJbkNvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7
CisJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1pc3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlz
LCB0aGlzLmJpbmRpbmcpOwogCX0KLQlpZiAoaXNNZXRob2RVc2VEZXByZWNhdGVkKHRoaXMuYmlu
ZGluZywgc3RhdGUuc2NvcGUsIHRydWUpKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmRlcHJlY2F0ZWRNZXRob2QodGhpcy5iaW5kaW5nLCB0aGlzKTsKKwlpZiAoaXNNZXRob2RV
c2VEZXByZWNhdGVkKHRoaXMuYmluZGluZywgc2NvcGUsIHRydWUpKSB7CisJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmRlcHJlY2F0ZWRNZXRob2QodGhpcy5iaW5kaW5nLCB0aGlzKTsKIAl9Ci0J
aWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzdGF0ZS5zY29wZSwgbnVsbCwgYWxsb2NhdGlv
blR5cGUsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHN0YXRlLmFyZ3VtZW50VHlwZXMs
IHN0YXRlLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKKwlpZiAoY2hlY2tJbnZvY2F0aW9uQXJn
dW1lbnRzKHNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFy
Z3VtZW50cywgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2FzdCwgdGhpcykp
IHsKIAkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIAlpZiAodGhpcy50eXBl
QXJndW1lbnRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxl
cyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLnVubmVjZXNzYXJ5VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9jYXRpb24odGhp
cy5iaW5kaW5nLCB0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzLCB0aGlzLnR5cGVBcmd1bWVudHMp
OworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JN
ZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywg
dGhpcy50eXBlQXJndW1lbnRzKTsKIAl9Ci0JaWYgKCFzdGF0ZS5pc0RpYW1vbmQgJiYgdGhpcy5y
ZXNvbHZlZFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVudHMoKSkgewot
IAkJY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcp
IHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHN0
YXRlLmFyZ3VtZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKKwlpZiAoIWlzRGlhbW9uZCAmJiB0aGlz
LnJlc29sdmVkVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlV2l0aEFjdHVhbEFyZ3VtZW50cygpKSB7
CisgCQljaGVja1R5cGVBcmd1bWVudFJlZHVuZGFuY3koKFBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZykgdGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwg
dGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAgCX0KLQlDb21waWxlck9wdGlvbnMgY29tcGls
ZXJPcHRpb25zID0gc3RhdGUuc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJaWYgKGNvbXBpbGVy
T3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgJiYgKHRoaXMuYmlu
ZGluZy50YWdCaXRzICYgVGFnQml0cy5Jc051bGxuZXNzS25vd24pID09IDApIHsKLQkJbmV3IElt
cGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllcihzdGF0ZS5zY29wZS5lbnZpcm9ubWVudCgpLCBj
b21waWxlck9wdGlvbnMuaW5oZXJpdE51bGxBbm5vdGF0aW9ucykKLQkJCQkuY2hlY2tJbXBsaWNp
dE51bGxBbm5vdGF0aW9ucyh0aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhvZCovLCBmYWxzZSwg
c3RhdGUuc2NvcGUpOworCQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHNjb3Bl
LmVudmlyb25tZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQor
CQkJCS5jaGVja0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3Jj
TWV0aG9kKi8sIGZhbHNlLCBzY29wZSk7CiAJfQotCXJlY29yZEV4Y2VwdGlvbnNGb3JFbmNsb3Np
bmdMYW1iZGEoc3RhdGUuc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNlcHRpb25zKTsKKwly
ZWNvcmRFeGNlcHRpb25zRm9yRW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0aGlzLmJpbmRpbmcudGhy
b3duRXhjZXB0aW9ucyk7CiAJcmV0dXJuIGFsbG9jYXRpb25UeXBlOwogfQogCkBAIC01NzIsMzgg
KzUxNSw1MyBAQAogCX0KIH0KIAotcHVibGljIFR5cGVCaW5kaW5nW10gaW5mZXJFbGlkZWRUeXBl
cyhQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRp
bmcgZW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBCbG9j
a1Njb3BlIHNjb3BlKSB7CisvLyBGb3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94aW5nIGNv
bXBhdGliaWxpdHkgaXMgc2FtZSBhcyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNlIGphdmEu
bGFuZydzIHdyYXBwZXIgdHlwZXMgYXJlIG5vdCBnZW5lcmljLgorcHVibGljIGJvb2xlYW4gaXNC
b3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkg
eworCXJldHVybiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKK30KKworcHVi
bGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyBsZWZ0LCBmaW5hbCBTY29w
ZSBzY29wZSkgeworCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlzLnJlc29s
dmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQlyZXR1cm4gZmFsc2U7CisJVHlwZUJpbmRpbmcg
YWxsb2NhdGlvblR5cGUgPSB0aGlzLnJlc29sdmVkVHlwZTsKKwlpZiAoaXNQb2x5RXhwcmVzc2lv
bigpKSB7CisJCVR5cGVCaW5kaW5nIG9sZEV4cGVjdGVkVHlwZSA9IHRoaXMudHlwZUV4cGVjdGVk
OworCQl0cnkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBsZWZ0OworCQkJUmVmZXJlbmNlQmlu
ZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJh
bWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5
cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5cGUu
ZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZl
ckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3Np
bmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUpOworCQkJaWYgKGluZmVycmVkVHlw
ZXMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQlhbGxvY2F0aW9uVHlwZSA9IHRoaXMu
ZW5jbG9zaW5nU2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5l
cmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMu
cmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOworCQl9IGZpbmFsbHkgeworCQkJdGhpcy50
eXBlRXhwZWN0ZWQgPSBvbGRFeHBlY3RlZFR5cGU7CisJCX0KKwl9CisJcmV0dXJuIGFsbG9jYXRp
b25UeXBlICE9IG51bGwgJiYgYWxsb2NhdGlvblR5cGUuaXNDb21wYXRpYmxlV2l0aChsZWZ0LCBz
Y29wZSk7Cit9CisKK3B1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xv
c2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBzY29wZSkg
ewogCS8qIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMgdG8gdGhl
IGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIHN5bnRoZXNpemUgYSBnZW5lcmljIHN0YXRpYyBm
YWN0b3J5CiAJICAgbWV0aG9kIHRoYXQgd291bGQsIGdpdmVuIHRoZSBhcmd1bWVudCB0eXBlcyBh
bmQgdGhlIGludm9jYXRpb24gc2l0ZSwgbWFudWZhY3R1cmUgYSBwYXJhbWV0ZXJpemVkIG9iamVj
dCBvZiB0eXBlIGFsbG9jYXRpb25UeXBlLgogCSAgIElmIHdlIGFyZSBzdWNjZXNzZnVsIHRoZW4g
YnkgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24sIHRoZSBwYXJhbWV0ZXJpemF0aW9uIG9mIHRoZSBy
ZXR1cm4gdHlwZSBvZiB0aGUgZmFjdG9yeSBtZXRob2QgaXMgaWRlbnRpY2FsCiAJICAgdG8gdGhl
IHR5cGVzIGVsaWRlZCBpbiB0aGUgPD4uCiAJICovICAgCi0JTWV0aG9kQmluZGluZyBmYWN0b3J5
ID0gc2NvcGUuZ2V0U3RhdGljRmFjdG9yeShhbGxvY2F0aW9uVHlwZSwgZW5jbG9zaW5nVHlwZSwg
YXJndW1lbnRUeXBlcywgdGhpcyk7CisJTWV0aG9kQmluZGluZyBmYWN0b3J5ID0gc2NvcGUuZ2V0
U3RhdGljRmFjdG9yeShhbGxvY2F0aW9uVHlwZSwgZW5jbG9zaW5nVHlwZSwgYXJndW1lbnRUeXBz
LCB0aGlzKTsKIAlpZiAoZmFjdG9yeSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyAmJiBmYWN0b3J5LmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nIGdlbmVyaWNGYWN0b3J5ID0gKFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgZmFjdG9yeTsKIAkJdGhpcy5pbmZlcnJlZFJldHVyblR5cGUgPSBn
ZW5lcmljRmFjdG9yeS5pbmZlcnJlZFJldHVyblR5cGU7Ci0JCS8vIHRoaXMgaXMgb3VyIGxhc3Qg
Y2hhbmNlIHRvIGluc3BlY3QgdGhlIHJlc3VsdCBvZiB0aGUgaW5mZXJlbmNlIHRoYXQgaXMgY29u
bmVjdGVkIHRvIHRoZSB0aHJvdy1hd2F5IGZhY3RvcnkgYmluZGluZwotCQlJbmZlcmVuY2VDb250
ZXh0MTggaW5mQ3R4MTggPSBnZXRJbmZlcmVuY2VDb250ZXh0KGdlbmVyaWNGYWN0b3J5KTsKLQkJ
aWYgKGluZkN0eDE4ICE9IG51bGwgJiYgaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9PSBJbmZlcmVu
Y2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkgewotCQkJLy8gcmVmcmVzaCBhcmd1bWVudFR5
cGVzIGZyb20gdXBkYXRlZCBiaW5kaW5ncyBpbiBhcmd1bWVudHM6Ci0JCQkvLyAodGhpcyBzaG91
bGRuJ3QgYmUgc3RyaWN0bHkgbmVjZXNzYXJ5LCBhcyBGdW5jdGlvbkV4cHJlc3Npb24uaXNDb21w
YXRpYmxlV2l0aCgpIHNob3VsZCBnaXZlIHRoZSBzYW1lIHJlc3VsdCwKLQkJCS8vICBidXQgaXQn
cyBwcm9iYWJseSBiZSBhIGdvb2QgaWRlYSB0byBhdm9pZCB0aGUgbmVjZXNzaXR5IHRvIGNhbGwg
aXNDb21wYXRpYmxlV2l0aCgpIGluIHRoZSBmaXJzdCBwbGFjZSkuIAotCQkJZm9yIChpbnQgaSA9
IDA7IGkgPCBhcmd1bWVudFR5cGVzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJaWYgKGFyZ3VtZW50VHlw
ZXNbaV0gaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpCi0JCQkJCWFyZ3VtZW50VHlwZXNbaV0g
PSB0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCQl9Ci0JCX0KIAkJcmV0dXJuICgo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZhY3RvcnkucmV0dXJuVHlwZSkuYXJndW1lbnRzOwog
CX0KIAlyZXR1cm4gbnVsbDsKIH0KIAotcHVibGljIHZvaWQgY2hlY2tUeXBlQXJndW1lbnRSZWR1
bmRhbmN5KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNl
QmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFs
IEJsb2NrU2NvcGUgc2NvcGUpIHsKK3B1YmxpYyB2b2lkIGNoZWNrVHlwZUFyZ3VtZW50UmVkdW5k
YW5jeShQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJp
bmRpbmcgZW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cHMsIGZpbmFsIEJs
b2NrU2NvcGUgc2NvcGUpIHsKIAlpZiAoKHNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNvbXB1dGVT
ZXZlcml0eShJUHJvYmxlbS5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzKSA9
PSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25vcmUpIHx8IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNv
dXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgcmV0dXJuOwogCWlmIChhbGxv
Y2F0aW9uVHlwZS5hcmd1bWVudHMgPT0gbnVsbCkgcmV0dXJuOyAgLy8gcmF3IGJpbmRpbmcKIAlp
ZiAodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsKSByZXR1cm47IC8vIGRpYW1vbmQg
Y2FuJ3Qgb2NjdXIgd2l0aCBleHBsaWNpdCB0eXBlIGFyZ3MgZm9yIGNvbnN0cnVjdG9yCiAJaWYg
KHRoaXMudHlwZSA9PSBudWxsKSByZXR1cm47Ci0JaWYgKGFyZ3VtZW50VHlwZXMgPT0gQmluZGlu
Zy5OT19QQVJBTUVURVJTICYmIHRoaXMudHlwZUV4cGVjdGVkIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nKSB7CisJaWYgKGFyZ3VtZW50VHlwcyA9PSBCaW5kaW5nLk5PX1BBUkFN
RVRFUlMgJiYgdGhpcy50eXBlRXhwZWN0ZWQgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcpIHsKIAkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGV4cGVjdGVkID0gKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy50eXBlRXhwZWN0ZWQ7CiAJCWlmIChleHBlY3RlZC5hcmd1
bWVudHMgIT0gbnVsbCAmJiBhbGxvY2F0aW9uVHlwZS5hcmd1bWVudHMubGVuZ3RoID09IGV4cGVj
dGVkLmFyZ3VtZW50cy5sZW5ndGgpIHsKIAkJCS8vIGNoZWNrIHRoZSBjYXNlIHdoZW4gbm8gY3Rv
ciB0YWtlcyBubyBwYXJhbXMgYW5kIGluZmVyZW5jZSB1c2VzIHRoZSBleHBlY3RlZCB0eXBlIGRp
cmVjdGx5CkBAIC02MjUsNyArNTgzLDcgQEAKIAkJLy8gY2hlY2tpbmcgZm9yIHJlZHVuZGFudCB0
eXBlIHBhcmFtZXRlcnMgbXVzdCBmYWtlIGEgZGlhbW9uZCwgCiAJCS8vIHNvIHdlIGluZmVyIHRo
ZSBzYW1lIHJlc3VsdHMgYXMgd2Ugd291bGQgZ2V0IHdpdGggYSBkaWFtb25kIGluIHNvdXJjZSBj
b2RlOgogCQl0aGlzLnR5cGUuYml0cyB8PSBJc0RpYW1vbmQ7Ci0JCWluZmVycmVkVHlwZXMgPSBp
bmZlckVsaWRlZFR5cGVzKGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5
cGVzLCBzY29wZSk7CisJCWluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKGFsbG9jYXRp
b25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHNjb3BlKTsKIAl9IGZpbmFsbHkg
ewogCQkvLyByZXNldCBlZmZlY3RzIG9mIGluZmVyZW5jZQogCQl0aGlzLnR5cGUuYml0cyA9IHBy
ZXZpb3VzQml0czsKQEAgLTcwMSw3NSArNjU5LDQzIEBACiAKIC8vLS0gaW50ZXJmYWNlIEludm9j
YXRpb246IC0tCiBwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewotCWlmICh0aGlzLnN1
c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCkgewot
CQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCWlmICghcmVzb2x2ZVBhcnQyKHRoaXMu
c3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKSkgewotCQkJaWYgKHJlcG9ydEVycm9ycyAmJiAhdGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkJCWlmICh0
aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQpCi0JCQkJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJ
ZWxzZQotCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3Io
ImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0ZWRseSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1O
TFMtMSQKLQkJCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9y
ID0gdHJ1ZTsKLQkJCX0KKwkKKwlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAhdGhp
cy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJcmV0dXJuIG51bGw7CisJCisJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMuYXJndW1lbnRUeXBlcy5sZW5ndGg7IGkgPCBsZW5n
dGg7IGkrKykKKwkJaWYgKHRoaXMuYXJndW1lbnRUeXBlc1swXSA9PSBudWxsKQogCQkJcmV0dXJu
IG51bGw7Ci0JCX0KLQl9Ci0JaWYgKHJlcG9ydEVycm9ycyAmJiB0aGlzLmJpbmRpbmcgIT0gbnVs
bCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJaWYgKHRoaXMuYmluZGlu
Zy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKQotCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNz
ID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwotCQlpZiAodGhpcy5zdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JCQl0aGlzLnN1c3Bl
bmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJfQotCX0KLQly
ZXR1cm4gdGhpcy5iaW5kaW5nOwotfQotcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXRo
aXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQlib29sZWFuIG5lZWRzVXBkYXRlID0gdGhp
cy5iaW5kaW5nID09IG51bGwgfHwgCQkJCQkJCQkJCQkJCQkJCS8vIG5vdCB5ZXQgcmVzb2x2ZWQK
LQkJCSh0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCAmJiAh
dGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSk7CS8vIHByZXZp
b3VzIGF0dGVtcHQgd2FzIHdyb25nCi0JaWYgKG5lZWRzVXBkYXRlICYmIHRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJLy8gQXR0ZW1wdCB0byByZXNvbHZlIGhhbGYgcmVzb2x2
ZWQgZGlhbW9uZAotCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUp
OwotCX0KLQkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBl
KCwsKToKLQlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VD
b250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJaWYg
KGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZ
UEVfSU5GRVJSRUQpIHsKKwkKKwlUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRoaXMucmVz
b2x2ZWRUeXBlOworCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRpbmcgb2xk
RXhwZWN0ZWRUeXBlID0gdGhpcy50eXBlRXhwZWN0ZWQ7CisJCXRyeSB7CiAJCQl0aGlzLnR5cGVF
eHBlY3RlZCA9IHRhcmdldFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0g
Y3R4LmluZmVySW52b2NhdGlvblR5cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmlu
ZGluZywgdGFyZ2V0VHlwZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFy
Z3VtZW50cyh0aGlzLCB1cGRhdGVkQmluZGluZywgc2NvcGUpOwotCQkJfQorCQkJUmVmZXJlbmNl
QmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBw
YXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXpl
ZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5
cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBp
bmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNs
b3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUpOworCQkJaWYgKGluZmVycmVk
VHlwZXMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCWFsbG9jYXRpb25UeXBlID0gdGhp
cy5lbmNsb3NpbmdTY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdl
bmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhp
cy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlyZXR1cm4gc2NvcGUuZ2V0Q29u
c3RydWN0b3IoKFJlZmVyZW5jZUJpbmRpbmcpIGFsbG9jYXRpb25UeXBlLCB0aGlzLmFyZ3VtZW50
VHlwZXMsIHRoaXMpOworCQl9IGZpbmFsbHkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBvbGRF
eHBlY3RlZFR5cGU7CiAJCX0KIAl9Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
ICE9IG51bGwpIHsKLQkJcmV0dXJuIHJlc29sdmVQYXJ0Myh0aGlzLnN1c3BlbmRlZFJlc29sdXRp
b25TdGF0ZSk7Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4gbnVsbDsK
IH0KIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewogCXJldHVybiB0aGlzLmFyZ3Vt
ZW50czsKIH0KIAotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBk
YXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5j
ZUNvbnRleHRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkgPT0gdXBkYXRlZEJp
bmRpbmcub3JpZ2luYWwoKSkgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5j
ZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldCh0aGlzLmJpbmRpbmcpOwotCQlp
ZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVw
ZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFu
IG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0
IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24o
dGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQl9Ci0JfQotCXRoaXMuYmluZGluZyA9IHVw
ZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3M7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRh
YmxlKCk7CiAJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7CisK
KwkvLyBTcmlrYW50aCBjaGVjayB0aGlzLgorCQogCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBt
ZXRob2Qub3JpZ2luYWwoKTsKIAlpZiAob3JpZ2luYWwgaW5zdGFuY2VvZiBTeW50aGV0aWNGYWN0
b3J5TWV0aG9kQmluZGluZykgewogCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyBzeW50
aE9yaWdpbmFsID0gKFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKW9yaWdpbmFsOwpAQCAt
Nzc3LDI1ICs3MDMsMTEgQEAKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQocGFyYW1ldGVy
aXplZEN0b3IsIGluZkN0eDE4KTsKIAl9CiB9Ci1wdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNl
KCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwotfQogcHVibGlj
IEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRo
b2RCaW5kaW5nIG1ldGhvZCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwp
CiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVy
ZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVw
ZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotfQot
cHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxw
ZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNl
SGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotfQotCiAvLy0t
IGludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBn
ZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3Np
Z25tZW50LmphdmEKaW5kZXggNjk5YjRjZi4uZTUyNmQ5MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Bc3NpZ25tZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50LmphdmEKQEAgLTE5
Myw3ICsxOTMsNyBAQAogCXRoaXMuZXhwcmVzc2lvbi5zZXRFeHByZXNzaW9uQ29udGV4dChBU1NJ
R05NRU5UX0NPTlRFWFQpOwogCXRoaXMuZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUobGhzVHlw
ZSk7IC8vIG5lZWRlZCBpbiBjYXNlIG9mIGdlbmVyaWMgbWV0aG9kIGludm9jYXRpb24KIAlpZiAo
bGhzVHlwZSAhPSBudWxsKSB7Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0gbGhzVHlwZS5jYXB0dXJl
KHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7CisJCXRoaXMucmVzb2x2ZWRUeXBlID0gbGhzVHlwZS5j
YXB0dXJlKHNjb3BlLCB0aGlzLmxocy5zb3VyY2VFbmQpOyAvLyBtYWtlIGl0IHVuaXF1ZSwgYHRo
aXMnIHNoYXJlcyBzb3VyY2UgZW5kIHdpdGggJ3RoaXMuZXhwcmVzc2lvbicuCiAJfQogCUxvY2Fs
VmFyaWFibGVCaW5kaW5nIGxvY2FsVmFyaWFibGVCaW5kaW5nID0gdGhpcy5saHMubG9jYWxWYXJp
YWJsZUJpbmRpbmcoKTsKIAlpZiAobG9jYWxWYXJpYWJsZUJpbmRpbmcgIT0gbnVsbCAmJiAobG9j
YWxWYXJpYWJsZUJpbmRpbmcuaXNDYXRjaFBhcmFtZXRlcigpIHx8IGxvY2FsVmFyaWFibGVCaW5k
aW5nLmlzUGFyYW1ldGVyKCkpKSB7IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVz
c2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhCmluZGV4IDE3MWVmOGQu
LjhmNjM4ZDggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEKQEAgLTI4MSw3ICsyODEsNyBAQAogCQkJ
cHVibGljIGludCBzb3VyY2VFbmQoKSB7IHJldHVybiAwOyB9CiAJCQlwdWJsaWMgVHlwZUJpbmRp
bmcgaW52b2NhdGlvblRhcmdldFR5cGUoKSB7IHJldHVybiBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0
aW9uVGFyZ2V0VHlwZSgpOyB9CiAJCQlwdWJsaWMgYm9vbGVhbiByZWNlaXZlcklzSW1wbGljaXRU
aGlzKCkgeyByZXR1cm4gaW52b2NhdGlvblNpdGUucmVjZWl2ZXJJc0ltcGxpY2l0VGhpcygpO30K
LQkJCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3Bl
IHNvbWVTY29wZSkgeyByZXR1cm4gbnVsbDsgLyogc3VwcHJlc3MgaW5mZXJlbmNlICovIH0KKwkJ
CXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNv
bWVTY29wZSkgeyByZXR1cm4gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNv
bWVTY29wZSk7IH0KIAkJCXB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29u
dGV4dCgpIHsgcmV0dXJuIGludm9jYXRpb25TaXRlLmdldEV4cHJlc3Npb25Db250ZXh0KCk7IH0K
IAkJfTsKIAkJTWV0aG9kQmluZGluZyBiaW5kaW5nSWZOb0Nhc3Q7CkBAIC01ODAsNyArNTgwLDcg
QEAKIAkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7
IC8vIGRpc2FibGUgZnVydGhlciBzZWNvbmRhcnkgZGlhZ25vc2lzCiAJCQl9CiAJCX0KLQkJdGhp
cy5yZXNvbHZlZFR5cGUgPSBjYXN0VHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7
CisJCXRoaXMucmVzb2x2ZWRUeXBlID0gY2FzdFR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy50eXBl
LnNvdXJjZUVuZCk7IC8vIG1ha2UgaXQgdW5pcXVlLCBhIGNhc3QgZXhwcmVzc2lvbiBzaGFyZXMg
c291cmNlIGVuZCB3aXRoIHRoZSBleHByZXNzaW9uLgogCQlpZiAoZXhwckNvbnRhaW5DYXN0KSB7
CiAJCQljaGVja05lZWRGb3JDYXN0Q2FzdChzY29wZSwgdGhpcyk7CiAJCX0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRp
dGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IGVlMzEwODYuLmNhMjYzYTUgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9D
b25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNTcsNyArNTcsNiBAQAogCXByaXZhdGUgYm9v
bGVhbiBpc1BvbHlFeHByZXNzaW9uID0gZmFsc2U7CiAJcHJpdmF0ZSBUeXBlQmluZGluZyBvcmln
aW5hbFZhbHVlSWZUcnVlVHlwZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9yaWdpbmFsVmFsdWVJ
ZkZhbHNlVHlwZTsKLQlwcml2YXRlIEJsb2NrU2NvcGUgcG9seUV4cHJlc3Npb25TY29wZTsKIAlw
cml2YXRlIGJvb2xlYW4gdXNlMThzcGVjaWZpY3M7CiAJcHVibGljIENvbmRpdGlvbmFsRXhwcmVz
c2lvbigKIAkJRXhwcmVzc2lvbiBjb25kaXRpb24sCkBAIC00NjQsMTIgKzQ2Myw2IEBACiAJCQlp
ZiAodGhpcy52YWx1ZUlmRmFsc2UgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgdGhpcy52YWx1
ZUlmRmFsc2UuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hl
Y2sgbGF0ZXIgb24KIAkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1
ZUlmRmFsc2UucmVzb2x2ZVR5cGUoc2NvcGUpOwogCi0JCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigp
KSB7Ci0JCQkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHsKLQkJCQkJdGhpcy5wb2x5
RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7IC8vIHByZXNlcnZlIGZvciBldmVudHVhbCByZXNvbHV0
aW9uL2Vycm9yIHJlcG9ydGluZy4KLQkJCQl9Ci0JCQl9Ci0KIAkJCWlmIChjb25kaXRpb25UeXBl
ID09IG51bGwgfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9PSBudWxsIHx8IHRoaXMu
b3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJCX0g
ZWxzZSB7CkBAIC00ODQsMTEgKzQ3Nyw5IEBACiAJCX0KIAkJaWYgKGlzUG9seUV4cHJlc3Npb24o
KSkgewogCQkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHsKLQkJCQl0aGlzLnBvbHlF
eHByZXNzaW9uU2NvcGUgPSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRp
b24vZXJyb3IgcmVwb3J0aW5nLgogCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMp
OwogCQkJfQotCQkJY29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlzLmV4cGVjdGVkVHlwZSk7
Ci0JCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwkJCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IGNvbXB1dGVDb252ZXJzaW9ucyhzY29wZSwgdGhpcy5l
eHBlY3RlZFR5cGUpID8gdGhpcy5leHBlY3RlZFR5cGUgOiBudWxsOwogCQl9CiAJCVR5cGVCaW5k
aW5nIHZhbHVlSWZUcnVlVHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGU7CiAJCVR5
cGVCaW5kaW5nIHZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlw
ZTsKQEAgLTY2MSw3ICs2NTIsOCBAQAogCQlyZXR1cm4gbnVsbDsKIAl9CiAKLQlwcm90ZWN0ZWQg
dm9pZCBjb21wdXRlQ29udmVyc2lvbnMoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSkgeworCXByb3RlY3RlZCBib29sZWFuIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Nj
b3BlIHNjb3BlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCWJvb2xlYW4gb2sgPSB0cnVl
OwogCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSAhPSBudWxsICYmIHRoaXMub3Jp
Z2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJaWYgKHRoaXMudmFs
dWVJZlRydWUuaXNDb25zdGFudFZhbHVlT2ZUeXBlQXNzaWduYWJsZVRvVHlwZSh0aGlzLm9yaWdp
bmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRUeXBlKQogCQkJCQl8fCB0aGlzLm9yaWdpbmFsVmFs
dWVJZlRydWVUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpIHsKQEAgLTY4Miw2ICs2
NzQsNyBAQAogCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
dHlwZU1pc21hdGNoRXJyb3IodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSwgdGFyZ2V0VHlw
ZSwgdGhpcy52YWx1ZUlmVHJ1ZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQog
CQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgIT0gbnVsbCAmJiB0aGlzLm9yaWdp
bmFsVmFsdWVJZkZhbHNlVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CkBAIC03MDQsOCArNjk3LDEw
IEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBl
TWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSwgdGFyZ2V0VHlwZSwg
dGhpcy52YWx1ZUlmRmFsc2UsIG51bGwpOworCQkJCW9rID0gZmFsc2U7CiAJCQl9CiAJCX0KKwkJ
cmV0dXJuIG9rOwogCX0KIAogCXB1YmxpYyB2b2lkIHNldEV4cGVjdGVkVHlwZShUeXBlQmluZGlu
ZyBleHBlY3RlZFR5cGUpIHsKQEAgLTcxOSwxOSArNzE0LDcgQEAKIAlwdWJsaWMgRXhwcmVzc2lv
bkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CiAJCXJldHVybiB0aGlzLmV4cHJlc3Np
b25Db250ZXh0OwogCX0KLQkKLQlwdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxU
YXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCS8vIGlu
IDEuOCBpZiB0cmVhdGVkIGFzIGEgcG9seSBleHByZXNzaW9uOgotCQlpZiAoaXNQb2x5RXhwcmVz
c2lvbigpKSB7Ci0JCQl0YXJnZXRUeXBlID0gdGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5wb2x5
RXhwcmVzc2lvblNjb3BlKTsKLQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlz
LnZhbHVlSWZUcnVlLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29w
ZSk7Ci0JCQl0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNl
LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQljb21w
dXRlQ29udmVyc2lvbnModGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlLCB0YXJnZXRUeXBlKTsKLQkJ
CXRoaXMucmVzb2x2ZWRUeXBlID0gdGFyZ2V0VHlwZTsKLQkJfQotCQlyZXR1cm4gdGhpcy5yZXNv
bHZlZFR5cGU7Ci0JfQotCQorCQkKIAlwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGlj
YWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewog
CQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0YXJn
ZXRUeXBlLCBtZXRob2QpIAogCQkJCSYmIHRoaXMudmFsdWVJZkZhbHNlLmlzUGVydGluZW50VG9B
cHBsaWNhYmlsaXR5KHRhcmdldFR5cGUsIG1ldGhvZCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3Ry
dWN0b3JDYWxsLmphdmEKaW5kZXggMjQzNDkxNS4uMmViZGRjYiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwuamF2YQpAQCAtNzksNyArNzksNiBAQAogCiAJIC8vIGhvbGQgb24g
dG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1
bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0ZSk6CiAJ
cHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4dDE4PiovIGlu
ZmVyZW5jZUNvbnRleHRzOwotCXByaXZhdGUgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZl
cmVuY2VIZWxwZXI7CiAKIAlwdWJsaWMgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwoaW50IGFjY2Vz
c01vZGUpIHsKIAkJdGhpcy5hY2Nlc3NNb2RlID0gYWNjZXNzTW9kZTsKQEAgLTM5NCwxMCArMzkz
LDYgQEAKIAkJCQkJaWYgKChhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUo
c2NvcGUpKSA9PSBudWxsKSB7CiAJCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CiAJCQkJCX0KLQkJ
CQkJaWYgKHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgKGFyZ3Vt
ZW50LmlzUG9seUV4cHJlc3Npb24oKSB8fCAoKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlv
bikgJiYgKChJbnZvY2F0aW9uKSBhcmd1bWVudCkudXNlc0luZmVyZW5jZSgpKSkpIHsKLQkJCQkJ
CWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCQkJdGhpcy5pbm5l
ckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCQl9CiAJ
CQkJfQogCQkJCWlmIChhcmdIYXNFcnJvcikgewogCQkJCQlpZiAocmVjZWl2ZXJUeXBlID09IG51
bGwpIHsKQEAgLTQ5OCw1NiArNDkzLDI2IEBACiAJCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgc2Nv
cGUpOwogCX0KIAotCS8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uOiAtLQogCXB1YmxpYyBNZXRo
b2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRF
cnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJCWlmICh0aGlz
LmJpbmRpbmcgPT0gbnVsbCkKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5m
ZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0ZWRseSB1bnJlc29sdmVkIiwgdGhp
cyk7IC8vJE5PTi1OTFMtMSQKLQkJCWVsc2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRp
bmcoKSkKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhp
cywgdGhpcy5iaW5kaW5nKTsKLQkJfQogCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwogCX0KLQlwdWJs
aWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKLQkJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwot
CX0KLQlwdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRC
aW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCWJvb2xlYW4gaGFzVXBkYXRlID0g
dGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250
ZXh0cyAhPSBudWxsKSB7Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNv
bnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRpbmcpOwot
CQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5w
dXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBm
cm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9u
ZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNv
bHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJCX0KLQkJfQotCQl0aGlzLmJp
bmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQkJcmV0dXJuIGhhc1VwZGF0ZTsKLQl9CisJCisJLy8g
U3Jpa2FudGggLSBDaGVjayAtIFRoZXNlIGRvbid0IG1ha2Ugc2Vuc2UgZm9yIEVDQyA/IAogCXB1
YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAkJaWYg
KHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJCXRoaXMuaW5mZXJlbmNlQ29udGV4
dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5w
dXQobWV0aG9kLCBpbmZDdHgxOCk7CiAJfQorCQogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
Z2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsK
IAkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJCXJldHVybiBudWxsOwog
CQlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQo
bWV0aG9kKTsKIAl9Ci0JcHVibGljIGJvb2xlYW4gdXNlc0luZmVyZW5jZSgpIHsKLQkJcmV0dXJu
ICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIAotCQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOworCQorCXB1YmxpYyBFeHByZXNzaW9u
W10gYXJndW1lbnRzKCkgeworCQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7CiAJfQotCXB1YmxpYyBi
b29sZWFuIGlubmVyc05lZWRVcGRhdGUoKSB7Ci0JCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNl
SGVscGVyICE9IG51bGw7Ci0JfQotCXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQkJ
dGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci0JfQotCXB1YmxpYyBJbm5lckluZmVy
ZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpIHsKLQkJcmV0dXJuIHRoaXMuaW5uZXJJ
bmZlcmVuY2VIZWxwZXI7Ci0JfQotCiAJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAt
LQogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3Bl
IHNjb3BlKSB7CiAJCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFy
Z3VtZW50cywgdGhpcyk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCmluZGV4IDkxOGIxYjQuLjdlMTM5NjAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVz
c2lvbi5qYXZhCkBAIC02Myw3ICs2Myw3IEBACiAJcHVibGljIENvbnN0YW50IGNvbnN0YW50Owog
CiAJcHVibGljIGludCBzdGF0ZW1lbnRFbmQgPSAtMTsKLQorCQogCS8vU29tZSBleHByZXNzaW9u
IG1heSBub3QgYmUgdXNlZCAtIGZyb20gYSBqYXZhIHNlbWFudGljIHBvaW50CiAJLy9vZiB2aWV3
IG9ubHkgLSBhcyBzdGF0ZW1lbnRzLiBPdGhlciBtYXkuIEluIG9yZGVyIHRvIGF2b2lkIHRoZSBj
cmVhdGlvbgogCS8vb2Ygd3JhcHBlcnMgYXJvdW5kIGV4cHJlc3Npb24gaW4gb3JkZXIgdG8gdHVu
ZSB0aGVtIGFzIGV4cHJlc3Npb24KQEAgLTEwNjAsMTYgKzEwNjAsNiBAQAogCQl9CiAJfQogCXJl
dHVybiBleHByZXNzaW9uVHlwZTsKLX0KLQotLyoqCi0gKiBPbmNlIG91dGVyIGNvbnRleHRzIGhh
dmUgZmluYWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBleHByZXNzaW9uLAotICogcGVy
Zm9ybSBhbnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIGRlbGF5ZWQgcHJldmlvdXNseS4K
LSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSAoYWthIGV4cGVjdGVk
VHlwZSkgZm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJhbSBzY29wZSBzY29wZSBmb3IgZXJy
b3IgcmVwb3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRh
cmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlyZXR1cm4g
dGhpcy5yZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5IGNob29zZSB0byBkbyByZWFsIHN0
dWZmIGhlcmUKIH0KIAogLyoqCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXgg
NWFjMTRmMi4uOGFmOTI3OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVz
c2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQpAQCAt
MTA5LDE2ICsxMDksMTYgQEAKIAogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNh
YmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJ
CWlmICh0YXJnZXRUeXBlIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmluZGluZykgewotCQkJaWYg
KG1ldGhvZCAhPSBudWxsKSB7IC8vIHdoZW4gY2FsbGVkIGZyb20gdHlwZSBpbmZlcmVuY2UKKwkJ
aWYgKG1ldGhvZCAhPSBudWxsKSB7IC8vIHdoZW4gY2FsbGVkIGZyb20gdHlwZSBpbmZlcmVuY2UK
IAkJCQlpZiAoKChUeXBlVmFyaWFibGVCaW5kaW5nKXRhcmdldFR5cGUpLmRlY2xhcmluZ0VsZW1l
bnQgPT0gbWV0aG9kKQogCQkJCQlyZXR1cm4gZmFsc2U7CiAJCQkJaWYgKG1ldGhvZC5pc0NvbnN0
cnVjdG9yKCkgJiYgKChUeXBlVmFyaWFibGVCaW5kaW5nKXRhcmdldFR5cGUpLmRlY2xhcmluZ0Vs
ZW1lbnQgPT0gbWV0aG9kLmRlY2xhcmluZ0NsYXNzKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9
IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKKwkJCQlyZXR1cm4gZmFsc2U7CisJCX0gZWxz
ZSB7IC8vIGZvciBpbnRlcm5hbCBjYWxscwogCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZh
cmlhYmxlID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcpIHRhcmdldFR5cGU7CiAJCQkJaWYgKHR5cGVW
YXJpYWJsZS5kZWNsYXJpbmdFbGVtZW50IGluc3RhbmNlb2YgTWV0aG9kQmluZGluZykKLQkJCQkJ
cmV0dXJuIGZhbHNlOwotCQkJfQorCQkJCXJldHVybiBmYWxzZTsKKwkJfQogCQl9CiAJCXJldHVy
biB0cnVlOwogCX0KQEAgLTIwMywxMSArMjAzLDYgQEAKIAkJCQlicmVhazsKIAkJfQogCQlyZXR1
cm4gbnVsbDsKLQl9Ci0KLQlwdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJn
ZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCXRhcmdldFR5
cGUgPSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJcmV0dXJu
IHJlc29sdmVUeXBlRXhwZWN0aW5nKHRoaXMuZW5jbG9zaW5nU2NvcGUsIHRhcmdldFR5cGUpOwog
CX0KIAogCWNsYXNzIFZpc2liaWxpdHlJbnNwZWN0b3IgZXh0ZW5kcyBUeXBlQmluZGluZ1Zpc2l0
b3IgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhCmRlbGV0ZWQgZmlsZSBtb2RlIDEw
MDY0NAppbmRleCA4MzgxYjVjLi4wMDAwMDAwCi0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJbmZlcmVu
Y2VIZWxwZXIuamF2YQorKysgL2Rldi9udWxsCkBAIC0xLDQyICswLDAgQEAKLS8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMTQgR0sgU29mdHdhcmUgQUcuCi0gKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCi0gKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKLSAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Ci0gKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xl
Z2FsL2VwbC12MTAuaHRtbAotICoKLSAqIENvbnRyaWJ1dG9yczoKLSAqICAgICBTdGVwaGFuIEhl
cnJtYW5uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCi0gKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8KLXBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsK
LQotaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwotaW1wb3J0IGphdmEudXRpbC5NYXA7Ci0KLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRp
bmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
QmluZGluZzsKLQotcHVibGljIGNsYXNzIElubmVySW5mZXJlbmNlSGVscGVyIHsKLQotCS8qKiBG
b3IgZWFjaCBjYW5kaWRhdGUgbWV0aG9kIHN0b3JlIGhlcmUgdGhlIGFycmF5IG9mIGFyZ3VtZW50
IHR5cGVzIGlmIGlubmVyIGluZmVyZW5jZSBoYXMgaW1wcm92ZWQgYW55IGR1cmluZyBJbnZvY2F0
aW9uIFR5cGUgSW5mZXJlbmNlLiAqLwotCXByaXZhdGUgTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJp
bmRpbmdbXT4gYXJnVHlwZXNQZXJDYW5kaWRhdGUgPSBuZXcgSGFzaE1hcDxNZXRob2RCaW5kaW5n
LFR5cGVCaW5kaW5nW10+KCk7Ci0KLQlwdWJsaWMgdm9pZCByZWdpc3RlcklubmVyUmVzdWx0KE1l
dGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZyByZXNvbHZlZFR5cGUsIGludCBhcmdDb3Vu
dCwgaW50IGFyZ0lkeCkgewotCQlUeXBlQmluZGluZ1tdIGFyZ1R5cGVzID0gdGhpcy5hcmdUeXBl
c1BlckNhbmRpZGF0ZS5nZXQobWV0aG9kKTsKLQkJaWYgKGFyZ1R5cGVzID09IG51bGwpCi0JCQl0
aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLnB1dChtZXRob2QsIGFyZ1R5cGVzID0gbmV3IFR5cGVC
aW5kaW5nW2FyZ0NvdW50XSk7Ci0JCWFyZ1R5cGVzW2FyZ0lkeF0gPSByZXNvbHZlZFR5cGU7Ci0J
fQotCQotCXB1YmxpYyBUeXBlQmluZGluZ1tdIGdldEFyZ3VtZW50VHlwZXNGb3JDYW5kaWRhdGUo
TWV0aG9kQmluZGluZyBjYW5kaWRhdGUsIFR5cGVCaW5kaW5nW10gcGxhaW5BcmdUeXBlcykgewot
CQlUeXBlQmluZGluZ1tdIGFyZ1R5cGVzID0gdGhpcy5hcmdUeXBlc1BlckNhbmRpZGF0ZS5nZXQo
Y2FuZGlkYXRlKTsKLQkJaWYgKGFyZ1R5cGVzID09IG51bGwpCi0JCQlyZXR1cm4gcGxhaW5BcmdU
eXBlczsKLQkJLy8gZmlsbCBpbiBhbnkgYmxhbmtzIG5vdzoKLQkJZm9yIChpbnQgaSA9IDA7IGkg
PCBhcmdUeXBlcy5sZW5ndGg7IGkrKykgewotCQkJaWYgKGFyZ1R5cGVzW2ldID09IG51bGwpCi0J
CQkJYXJnVHlwZXNbaV0gPSBwbGFpbkFyZ1R5cGVzW2ldOwotCQl9Ci0JCXJldHVybiBhcmdUeXBl
czsKLQl9Ci19CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvSW52b2NhdGlvbi5qYXZhCmluZGV4IGFjNTQ0N2YuLjZjZDMxODEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5q
YXZhCkBAIC0xOSwxNiArMTksMTIgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwogCiAvKioKLSAqIEFic3RyYWN0aW9uIGZvciBp
bnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0cmlnZ2VyIAotICogPHVsPgotICogPGxpPklu
dm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2VzICgxOC41LjEpLCBhbmQ8L2xpPiAKLSAq
IDxsaT5JbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlICgxOC41LjIpLjwvbGk+Ci0gKiA8L3VsPgot
ICovCisgKiBBYnN0cmFjdGlvbiBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhhdCBjYW4gdHJp
Z2dlciBvdmVybG9hZCByZXNvbHV0aW9uLiAKKyovCiBwdWJsaWMgaW50ZXJmYWNlIEludm9jYXRp
b24gZXh0ZW5kcyBJbnZvY2F0aW9uU2l0ZSB7CiAKIAlFeHByZXNzaW9uW10gYXJndW1lbnRzKCk7
Ci0KKwkKIAkvKioKIAkgKiBBbnN3ZXIgdGhlIHJlc29sdmVkIG1ldGhvZCBiaW5kaW5nIG9mIHRo
aXMgaW52b2NhdGlvbi4KIAkgKiBJZiBhIHRhcmdldCB0eXBlIGlzIGdpdmVuLCB0aGUgaW52b2Nh
dGlvbiBnZXRzIGEgY2hhbmNlIHRvIGRvIHJlcGVhdGVkIG1ldGhvZCBsb29rdXAuCkBAIC0zOCw1
MiArMzQsMjEgQEAKIAkgKiAKIAkgKi8KIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRp
bmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKTsKLQorCQog
CS8qKgogCSAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBpbmZlcmVuY2UgY29udGV4dCwgd2hpY2ggcHJv
ZHVjZWQgdGhlIGdpdmVuIG1ldGhvZCBhcyBpdHMgaW50ZXJtZWRpYXRlIHJlc3VsdC4KIAkgKiBM
YXRlciB3aGVuIHRoZSBzYW1lIG1ldGhvZCBpcyBzZWxlY3RlZCBhcyB0aGUgbW9zdCBzcGVjaWZp
YyBtZXRob2QsIHRoZSBpbmZlcmVuY2UgY29udGV4dAotCSAqIGZvciB0aGlzIHBhaXIgKEludm9j
YXRpb24geCBNZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0
RXhwcmVzc2lvbkNvbnRleHQoKX0KKwkgKiBmb3IgdGhpcyBwYWlyIChJbnZvY2F0aW9uIHggTWV0
aG9kQmluZGluZykgY2FuIGJlIGxvb2tlZCB1cCB1c2luZyB7QGxpbmsgI2dldEluZmVyZW5jZUNv
bnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpfQogCSAqIHRvIGNvbnRpbnVlIHRoZSB0
eXBlIGluZmVyZW5jZS4KIAkgKi8KIAl2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4MTgpOwogCQorCiAJLyoqCi0JICogUmV0cmlldmUgYW4gaW5mZXJlbmNlIGNvbnRleHQg
Zm9yIHRoZSBnaXZlbiBtZXRob2Qgd2hpY2ggbXVzdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZAotCSAq
IHVzaW5nIHtAbGluayAjcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZywgSW5mZXJlbmNlQ29udGV4dDE4KX0uCisJICogUmV0cmlldmUgYW4g
aW5mZXJlbmNlIGNvbnRleHQgZm9yIHRoZSBnaXZlbiBtZXRob2QuCiAJICogQHBhcmFtIG1ldGhv
ZCBhbiBpbnRlcm1lZGlhdGUgcmVzb2x2ZWQgY2FuZGlkYXRlIGZvciB0aGlzIGludm9jYXRpb24K
LQkgKiByZXR1cm4gYSBzdXNwZW5kZWQgaW5mZXJlbmNlIGNvbnRleHQgb3IgbnVsbCBpZiBub25l
IHdhcyByZWdpc3RlcmVkIGZvciB0aGlzIG1ldGhvZC4KKwkgKiByZXR1cm4gdGhlIGFzc29jaWF0
ZWQgaW5mZXJlbmNlIGNvbnRleHQuCiAJICovCiAJSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVy
ZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKTsKIAotCS8qKgot
CSAqIEFuc3dlciB0cnVlIGlmIHRoaXMgaW52b2NhdGlvbiBoYXMgZGV0ZXJtaW5lZCBpdHMgYmlu
ZGluZyB1c2luZyBpbmZlcmVuY2UuCi0JICovCi0JYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCk7Ci0J
Ci0JLyoqCi0JICogV2hlcmUgdGhlIEFTVCBub2RlIG1heSBob2xkIHJlZmVyZW5jZXMgdG8gdGhl
IHJlc3VsdHMgb2YgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZSwKLQkgKiB0aGlz
IG1ldGhvZCBhbGxvd3MgdG8gdXBkYXRlIHRob3NlIHJlZmVyZW5jZXMgdG8gdGhlIHJlc3VsdCBv
ZiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlLgotCSAqIE5vdGUgdGhhdCBwb3RlbnRpYWxseSBt
b3JlIHRoYW4ganVzdCB0aGUgbWV0aG9kIGJpbmRpbmcgaXMgdXBkYXRlZC4KLQkgKiBAcGFyYW0g
dXBkYXRlZEJpbmRpbmcgdGhlIGZpbmFsIG1ldGhvZCBiaW5kaW5nIGFmdGVyIGZ1bGwgaW5mZXJl
bmNlCi0JICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIHRhcmdldCB0eXBlIHVzZWQgZHVyaW5nIElu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UKLQkgKiBAcmV0dXJuIHRydWUgaWYgYW4gdXBkYXRlIGhh
cyBoYXBwZW5lZAotCSAqLwotCWJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSk7Ci0JCi0JLyoqCi0JICogQW5z
d2VyIHdoZXRoZXIgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiBoYXMgaW5uZXIgZXhwcmVzc2lvbnMg
dGhhdCBzdGlsbCBuZWVkIHVwZGF0aW5nIGFmdGVyIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFu
IGlubmVyc05lZWRVcGRhdGUoKTsKLQotCS8qKgotCSAqIE1hcmsgdGhhdCB1cGRhdGluZyAodGhl
IG5lZWQgZm9yIHdoaWNoIGlzIHNpZ25hbGVkIHZpYSB7QGxpbmsgI2lubmVyc05lZWRVcGRhdGUo
KX0pIGhhcyBiZWVuIGRvbmUuCi0JICovCi0Jdm9pZCBpbm5lclVwZGF0ZURvbmUoKTsKLQotCS8q
KgotCSAqIElmIHRoaXMgaW52b2NhdGlvbiBoYXMgYW55IHBvbHkgZXhwcmVzc2lvbnMgYXMgYXJn
dW1lbnRzLCB0aGlzIG1ldGhvZCBhbnN3ZXJzIGFuIGluZmVyZW5jZSBoZWxwZXIgCi0JICogdGhh
dCBtZWRpYXRlcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbiwgZXZlbiBpZiBubyBhY3R1YWwg
aW5mZXJlbmNlIGhhcHBlbnMgZm9yIHRoaXMgaW52b2NhdGlvbi4KLQkgKi8KLQlJbm5lckluZmVy
ZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9KYXZhZG9jQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSmF2
YWRvY0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggNWYyMzEwNy4uNWRhNmUwOSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9KYXZhZG9jQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0phdmFkb2NBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC00MywyMyAr
NDMsMjMgQEAKIAkJfQogCiAJCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBlcwotCQlU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7CisJCXRo
aXMuYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKIAkJYm9vbGVhbiBoYXNU
eXBlVmFyQXJncyA9IGZhbHNlOwogCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewogCQkJ
Ym9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOwogCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1l
bnRzLmxlbmd0aDsKLQkJCWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsK
KwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwogCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCUV4cHJlc3Npb24gYXJndW1lbnQg
PSB0aGlzLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoc2NvcGUua2luZCA9PSBTY29wZS5DTEFTU19T
Q09QRSkgewotCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKENs
YXNzU2NvcGUpc2NvcGUpOworCQkJCQl0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5y
ZXNvbHZlVHlwZSgoQ2xhc3NTY29wZSlzY29wZSk7CiAJCQkJfSBlbHNlIHsKLQkJCQkJYXJndW1l
bnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKChCbG9ja1Njb3BlKXNjb3BlKTsKKwkJ
CQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKEJsb2NrU2Nv
cGUpc2NvcGUpOwogCQkJCX0KLQkJCQlpZiAoYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsKSB7CisJ
CQkJaWYgKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsKSB7CiAJCQkJCWFyZ0hhc0Vycm9y
ID0gdHJ1ZTsKIAkJCQl9IGVsc2UgaWYgKCFoYXNUeXBlVmFyQXJncykgewotCQkJCQloYXNUeXBl
VmFyQXJncyA9IGFyZ3VtZW50VHlwZXNbaV0uaXNUeXBlVmFyaWFibGUoKTsKKwkJCQkJaGFzVHlw
ZVZhckFyZ3MgPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0uaXNUeXBlVmFyaWFibGUoKTsKIAkJCQl9
CiAJCQl9CiAJCQlpZiAoYXJnSGFzRXJyb3IpIHsKQEAgLTc4LDEzICs3OCwxMyBAQAogCQl9CiAK
IAkJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0
aGlzLnJlc29sdmVkVHlwZTsKLQkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3Io
YWxsb2NhdGlvblR5cGUsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQl0aGlzLmJpbmRpbmcgPSBz
Y29wZS5nZXRDb25zdHJ1Y3RvcihhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzLCB0
aGlzKTsKIAkJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJUmVmZXJl
bmNlQmluZGluZyBlbmNsb3NpbmdUeXBlQmluZGluZyA9IGFsbG9jYXRpb25UeXBlOwogCQkJTWV0
aG9kQmluZGluZyBjb250cnVjdG9yQmluZGluZyA9IHRoaXMuYmluZGluZzsKIAkJCXdoaWxlICgh
Y29udHJ1Y3RvckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSAmJiAoZW5jbG9zaW5nVHlwZUJpbmRp
bmcuaXNNZW1iZXJUeXBlKCkgfHwgZW5jbG9zaW5nVHlwZUJpbmRpbmcuaXNMb2NhbFR5cGUoKSkp
IHsKIAkJCQllbmNsb3NpbmdUeXBlQmluZGluZyA9IGVuY2xvc2luZ1R5cGVCaW5kaW5nLmVuY2xv
c2luZ1R5cGUoKTsKLQkJCQljb250cnVjdG9yQmluZGluZyA9IHNjb3BlLmdldENvbnN0cnVjdG9y
KGVuY2xvc2luZ1R5cGVCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkJCQljb250cnVj
dG9yQmluZGluZyA9IHNjb3BlLmdldENvbnN0cnVjdG9yKGVuY2xvc2luZ1R5cGVCaW5kaW5nLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOwogCQkJfQogCQkJaWYgKGNvbnRydWN0b3JCaW5kaW5n
LmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQl0aGlzLmJpbmRpbmcgPSBjb250cnVjdG9yQmluZGlu
ZzsKQEAgLTkyLDcgKzkyLDcgQEAKIAkJfQogCQlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7CiAJCQkvLyBGaXJzdCB0cnkgdG8gc2VhcmNoIGEgbWV0aG9kIGluc3RlYWQKLQkJ
CU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IHNjb3BlLmdldE1ldGhvZCh0aGlzLnJlc29s
dmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuc291cmNlTmFtZSgpLCBhcmd1bWVudFR5cGVzLCB0
aGlzKTsKKwkJCU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IHNjb3BlLmdldE1ldGhvZCh0
aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuc291cmNlTmFtZSgpLCB0aGlzLmFy
Z3VtZW50VHlwZXMsIHRoaXMpOwogCQkJaWYgKG1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmco
KSkgewogCQkJCXRoaXMuYmluZGluZyA9IG1ldGhvZEJpbmRpbmc7CiAJCQl9IGVsc2UgewpAQCAt
MTAzLDIyICsxMDMsMjIgQEAKIAkJCX0KIAkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKIAkJ
fSBlbHNlIGlmICh0aGlzLmJpbmRpbmcuaXNWYXJhcmdzKCkpIHsKLQkJCWludCBsZW5ndGggPSBh
cmd1bWVudFR5cGVzLmxlbmd0aDsKLQkJCWlmICghKHRoaXMuYmluZGluZy5wYXJhbWV0ZXJzLmxl
bmd0aCA9PSBsZW5ndGggJiYgYXJndW1lbnRUeXBlc1tsZW5ndGgtMV0uaXNBcnJheVR5cGUoKSkp
IHsKLQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
dGhpcy5iaW5kaW5nLCB0aGlzLmJpbmRpbmcuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2Js
ZW1SZWFzb25zLk5vdEZvdW5kKTsKKwkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50VHlwZXMu
bGVuZ3RoOworCQkJaWYgKCEodGhpcy5iaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3RoID09IGxlbmd0
aCAmJiB0aGlzLmFyZ3VtZW50VHlwZXNbbGVuZ3RoLTFdLmlzQXJyYXlUeXBlKCkpKSB7CisJCQkJ
TWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmlu
ZGluZywgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIFByb2JsZW1S
ZWFzb25zLk5vdEZvdW5kKTsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5qYXZhZG9jSW52
YWxpZENvbnN0cnVjdG9yKHRoaXMsIHByb2JsZW0sIHNjb3BlLmdldERlY2xhcmF0aW9uTW9kaWZp
ZXJzKCkpOwogCQkJfQogCQl9IGVsc2UgaWYgKGhhc1R5cGVWYXJBcmdzKSB7Ci0JCQlNZXRob2RC
aW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLCB0
aGlzLmJpbmRpbmcuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZv
dW5kKTsKKwkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGlu
Zyh0aGlzLmJpbmRpbmcsIHRoaXMuYmluZGluZy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVz
LCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5q
YXZhZG9jSW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHByb2JsZW0sIHNjb3BlLmdldERlY2xhcmF0
aW9uTW9kaWZpZXJzKCkpOwogCQl9IGVsc2UgaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB7CiAJCQlQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGlu
ZyBwYXJhbU1ldGhvZEJpbmRpbmcgPSAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMu
YmluZGluZzsKIAkJCWlmIChwYXJhbU1ldGhvZEJpbmRpbmcuaGFzU3Vic3RpdHV0ZWRQYXJhbWV0
ZXJzKCkpIHsKLQkJCQlpbnQgbGVuZ3RoID0gYXJndW1lbnRUeXBlcy5sZW5ndGg7CisJCQkJaW50
IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRUeXBlcy5sZW5ndGg7CiAJCQkJZm9yIChpbnQgaT0wOyBp
PGxlbmd0aDsgaSsrKSB7Ci0JCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW1NZXRo
b2RCaW5kaW5nLnBhcmFtZXRlcnNbaV0sIGFyZ3VtZW50VHlwZXNbaV0pICYmCi0JCQkJCQkJVHlw
ZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtTWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzW2ldLmVyYXN1
cmUoKSwgYXJndW1lbnRUeXBlc1tpXS5lcmFzdXJlKCkpKSB7Ci0JCQkJCQlNZXRob2RCaW5kaW5n
IHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLmJp
bmRpbmcuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsK
KwkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbU1ldGhvZEJpbmRpbmcucGFyYW1l
dGVyc1tpXSwgdGhpcy5hcmd1bWVudFR5cGVzW2ldKSAmJgorCQkJCQkJCVR5cGVCaW5kaW5nLm5v
dEVxdWFscyhwYXJhbU1ldGhvZEJpbmRpbmcucGFyYW1ldGVyc1tpXS5lcmFzdXJlKCksIHRoaXMu
YXJndW1lbnRUeXBlc1tpXS5lcmFzdXJlKCkpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIHByb2Js
ZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLmJpbmRpbmcu
c2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwog
CQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0ludmFsaWRDb25zdHJ1Y3Rvcih0
aGlzLCBwcm9ibGVtLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJCQkJCWJy
ZWFrOwogCQkJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NNZXNzYWdlU2VuZC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9KYXZhZG9jTWVzc2FnZVNlbmQuamF2YQppbmRleCA4N2RjY2MzLi45
YjhmMDYyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0phdmFkb2NNZXNzYWdlU2VuZC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvSmF2YWRvY01lc3NhZ2VTZW5kLmphdmEKQEAgLTUwLDIzICs1MCwyMiBA
QAogCiAJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKIAot
CQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7CiAJ
CWJvb2xlYW4gaGFzQXJnc1R5cGVWYXIgPSBmYWxzZTsKIAkJaWYgKHRoaXMuYXJndW1lbnRzICE9
IG51bGwpIHsKIAkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBh
bGwgYXJndW1lbnRzCiAJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQkJ
YXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJdGhpcy5hcmd1bWVu
dFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCQlmb3IgKGludCBpID0gMDsgaSA8
IGxlbmd0aDsgaSsrKXsKIAkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNb
aV07CiAJCQkJaWYgKHNjb3BlLmtpbmQgPT0gU2NvcGUuQ0xBU1NfU0NPUEUpIHsKLQkJCQkJYXJn
dW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKChDbGFzc1Njb3BlKXNjb3BlKTsK
KwkJCQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoKENsYXNz
U2NvcGUpc2NvcGUpOwogCQkJCX0gZWxzZSB7Ci0JCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1
bWVudC5yZXNvbHZlVHlwZSgoQmxvY2tTY29wZSlzY29wZSk7CisJCQkJCXRoaXMuYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKChCbG9ja1Njb3BlKXNjb3BlKTsKIAkJCQl9
Ci0JCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCkgeworCQkJCWlmICh0aGlzLmFyZ3Vt
ZW50VHlwZXNbaV0gPT0gbnVsbCkgewogCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CiAJCQkJfSBl
bHNlIGlmICghaGFzQXJnc1R5cGVWYXIpIHsKLQkJCQkJaGFzQXJnc1R5cGVWYXIgPSBhcmd1bWVu
dFR5cGVzW2ldLmlzVHlwZVZhcmlhYmxlKCk7CisJCQkJCWhhc0FyZ3NUeXBlVmFyID0gdGhpcy5h
cmd1bWVudFR5cGVzW2ldLmlzVHlwZVZhcmlhYmxlKCk7CiAJCQkJfQogCQkJfQogCQkJaWYgKGFy
Z0hhc0Vycm9yKSB7CkBAIC04NiwxNyArODUsMTcgQEAKIAogCQkvLyBiYXNlIHR5cGUgY2Fubm90
IHJlY2VpdmUgYW55IG1lc3NhZ2UKIAkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFz
ZVR5cGUoKSkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0Vycm9yTm9NZXRo
b2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIGFyZ3VtZW50VHlwZXMsIHNjb3Bl
LmdldERlY2xhcmF0aW9uTW9kaWZpZXJzKCkpOworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
amF2YWRvY0Vycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRo
aXMuYXJndW1lbnRUeXBlcywgc2NvcGUuZ2V0RGVjbGFyYXRpb25Nb2RpZmllcnMoKSk7CiAJCQly
ZXR1cm4gbnVsbDsKIAkJfQotCQl0aGlzLmJpbmRpbmcgPSBzY29wZS5nZXRNZXRob2QodGhpcy5h
Y3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOwor
CQl0aGlzLmJpbmRpbmcgPSBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUs
IHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJCWlmICghdGhpcy5i
aW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCS8vIFRyeSBtZXRob2QgaW4gZW5jbG9zaW5n
IHR5cGVzCiAJCQlUeXBlQmluZGluZyBlbmNsb3NpbmdUeXBlQmluZGluZyA9IHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlOwogCQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gdGhpcy5iaW5k
aW5nOwogCQkJd2hpbGUgKCFtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgJiYgKGVuY2xv
c2luZ1R5cGVCaW5kaW5nLmlzTWVtYmVyVHlwZSgpIHx8IGVuY2xvc2luZ1R5cGVCaW5kaW5nLmlz
TG9jYWxUeXBlKCkpKSB7CiAJCQkJZW5jbG9zaW5nVHlwZUJpbmRpbmcgPSBlbmNsb3NpbmdUeXBl
QmluZGluZy5lbmNsb3NpbmdUeXBlKCk7Ci0JCQkJbWV0aG9kQmluZGluZyA9IHNjb3BlLmdldE1l
dGhvZChlbmNsb3NpbmdUeXBlQmluZGluZywgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywg
dGhpcyk7CisJCQkJbWV0aG9kQmluZGluZyA9IHNjb3BlLmdldE1ldGhvZChlbmNsb3NpbmdUeXBl
QmluZGluZywgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJCX0K
IAkJCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQl0aGlzLmJpbmRp
bmcgPSBtZXRob2RCaW5kaW5nOwpAQCAtMTA1LDEyICsxMDQsMTIgQEAKIAkJCQllbmNsb3NpbmdU
eXBlQmluZGluZyA9IHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlOwogCQkJCU1ldGhvZEJpbmRpbmcg
Y29udHJ1Y3RvckJpbmRpbmcgPSB0aGlzLmJpbmRpbmc7CiAJCQkJaWYgKCFjb250cnVjdG9yQmlu
ZGluZy5pc1ZhbGlkQmluZGluZygpICYmIENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc2VsZWN0
b3IsIGVuY2xvc2luZ1R5cGVCaW5kaW5nLnNob3J0UmVhZGFibGVOYW1lKCkpKSB7Ci0JCQkJCWNv
bnRydWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoKFJlZmVyZW5jZUJpbmRpbmcp
ZW5jbG9zaW5nVHlwZUJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQkJCQljb250cnVj
dG9yQmluZGluZyA9IHNjb3BlLmdldENvbnN0cnVjdG9yKChSZWZlcmVuY2VCaW5kaW5nKWVuY2xv
c2luZ1R5cGVCaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOwogCQkJCX0KIAkJCQl3
aGlsZSAoIWNvbnRydWN0b3JCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgJiYgKGVuY2xvc2luZ1R5
cGVCaW5kaW5nLmlzTWVtYmVyVHlwZSgpIHx8IGVuY2xvc2luZ1R5cGVCaW5kaW5nLmlzTG9jYWxU
eXBlKCkpKSB7CiAJCQkJCWVuY2xvc2luZ1R5cGVCaW5kaW5nID0gZW5jbG9zaW5nVHlwZUJpbmRp
bmcuZW5jbG9zaW5nVHlwZSgpOwogCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5z
ZWxlY3RvciwgZW5jbG9zaW5nVHlwZUJpbmRpbmcuc2hvcnRSZWFkYWJsZU5hbWUoKSkpIHsKLQkJ
CQkJCWNvbnRydWN0b3JCaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoKFJlZmVyZW5jZUJp
bmRpbmcpZW5jbG9zaW5nVHlwZUJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQkJCQkJ
Y29udHJ1Y3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcigoUmVmZXJlbmNlQmluZGlu
ZyllbmNsb3NpbmdUeXBlQmluZGluZywgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJCQkJ
fQogCQkJCX0KIAkJCQlpZiAoY29udHJ1Y3RvckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewpA
QCAtMTQwLDcgKzEzOSw3IEBACiAJCQkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3Rh
bmNlb2YgUmVmZXJlbmNlQmluZGluZykgewogCQkJCQl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xh
c3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGU7CiAJCQkJfSBl
bHNlIHsKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0Vycm9yTm9NZXRob2RG
b3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIGFyZ3VtZW50VHlwZXMsIHNjb3BlLmdl
dERlY2xhcmF0aW9uTW9kaWZpZXJzKCkpOworCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5q
YXZhZG9jRXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhp
cy5hcmd1bWVudFR5cGVzLCBzY29wZS5nZXREZWNsYXJhdGlvbk1vZGlmaWVycygpKTsKIAkJCQkJ
cmV0dXJuIG51bGw7CiAJCQkJfQogCQkJfQpAQCAtMTUyLDE5ICsxNTEsMTkgQEAKIAkJCX0KIAkJ
CXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuYmluZGluZyA9PSBudWxsID8gbnVsbCA6
IHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQl9IGVsc2UgaWYgKGhhc0FyZ3NUeXBlVmFyKSB7
Ci0JCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhp
cy5iaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5O
b3RGb3VuZCk7CisJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJp
bmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIFBy
b2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmphdmFk
b2NJbnZhbGlkTWV0aG9kKHRoaXMsIHByb2JsZW0sIHNjb3BlLmdldERlY2xhcmF0aW9uTW9kaWZp
ZXJzKCkpOwogCQl9IGVsc2UgaWYgKHRoaXMuYmluZGluZy5pc1ZhcmFyZ3MoKSkgewotCQkJaW50
IGxlbmd0aCA9IGFyZ3VtZW50VHlwZXMubGVuZ3RoOwotCQkJaWYgKCEodGhpcy5iaW5kaW5nLnBh
cmFtZXRlcnMubGVuZ3RoID09IGxlbmd0aCAmJiBhcmd1bWVudFR5cGVzW2xlbmd0aC0xXS5pc0Fy
cmF5VHlwZSgpKSkgewotCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbSA9IG5ldyBQcm9ibGVtTWV0
aG9kQmluZGluZyh0aGlzLmJpbmRpbmcsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFBy
b2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKKwkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50VHlw
ZXMubGVuZ3RoOworCQkJaWYgKCEodGhpcy5iaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3RoID09IGxl
bmd0aCAmJiB0aGlzLmFyZ3VtZW50VHlwZXNbbGVuZ3RoLTFdLmlzQXJyYXlUeXBlKCkpKSB7CisJ
CQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMu
YmluZGluZywgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29u
cy5Ob3RGb3VuZCk7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2YWRvY0ludmFsaWRN
ZXRob2QodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFyYXRpb25Nb2RpZmllcnMoKSk7CiAJ
CQl9CiAJCX0gZWxzZSB7Ci0JCQlpbnQgbGVuZ3RoID0gYXJndW1lbnRUeXBlcy5sZW5ndGg7CisJ
CQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudFR5cGVzLmxlbmd0aDsKIAkJCWZvciAoaW50IGk9
MDsgaTxsZW5ndGg7IGkrKykgewotCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy5i
aW5kaW5nLnBhcmFtZXRlcnNbaV0uZXJhc3VyZSgpLCBhcmd1bWVudFR5cGVzW2ldLmVyYXN1cmUo
KSkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtID0gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKHRoaXMuYmluZGluZywgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJl
YXNvbnMuTm90Rm91bmQpOworCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy5iaW5k
aW5nLnBhcmFtZXRlcnNbaV0uZXJhc3VyZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXNbaV0uZXJhc3Vy
ZSgpKSkgeworCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW0gPSBuZXcgUHJvYmxlbU1ldGhvZEJp
bmRpbmcodGhpcy5iaW5kaW5nLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIFBy
b2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuamF2
YWRvY0ludmFsaWRNZXRob2QodGhpcywgcHJvYmxlbSwgc2NvcGUuZ2V0RGVjbGFyYXRpb25Nb2Rp
ZmllcnMoKSk7CiAJCQkJCWJyZWFrOwogCQkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFt
YmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5k
ZXggOTU3MDVhOC4uNDcyOTUwMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTIzNyw2
ICsyMzcsNyBAQAogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykKIAkJCQl0aGlz
LmFyZ3VtZW50VHlwZXNbaV0gPSB0aGlzLmFyZ3VtZW50c1tpXS50eXBlLnJlc29sdmVUeXBlKGJs
b2NrU2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pOwogCQl9CisJCQogCQlpZiAodGhpcy5l
eHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9DQVRJ
T05fQ09OVEVYVCkgewogCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0g
CkBAIC03MzQsMTIgKzczNSwxNCBAQAogCQkJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBCbG9j
aykgewogCQkJCQlpZiAodGhpcy5yZXR1cm5zVm9pZCkgewogCQkJCQkJdGhpcy5zaGFwZUFuYWx5
c2lzQ29tcGxldGUgPSB0cnVlOworCQkJCQkJYnJlYWsgc2hhcGVBbmFseXNpczsKIAkJCQkJfQog
CQkJCX0gZWxzZSB7Ci0JCQkJCWZpbmFsIEV4cHJlc3Npb24gZXhwcmVzc2lvbkJvZHkgPSAoRXhw
cmVzc2lvbikgdGhpcy5ib2R5OworCQkJCQlmaW5hbCBFeHByZXNzaW9uIGV4cHJlc3Npb25Cb2R5
ID0gKEV4cHJlc3Npb24pIGNvcHkuYm9keTsKIAkJCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9IHRo
aXMuYXNzaXN0Tm9kZSA/IHRydWUgOiBleHByZXNzaW9uQm9keS5zdGF0ZW1lbnRFeHByZXNzaW9u
KCk7CiAJCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gZXhwcmVzc2lvbkJvZHkucmVzb2x2ZWRU
eXBlICE9IFR5cGVCaW5kaW5nLlZPSUQ7CiAJCQkJCXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRl
ID0gdHJ1ZTsKKwkJCQkJYnJlYWsgc2hhcGVBbmFseXNpczsKIAkJCQl9CiAJCQkJLy8gRG8gbm90
IHByb2NlZWQgd2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVuY291
bnRlcmVkIGVycm9ycy4KIAkJCQlpZiAodGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzIHx8
IGVuY2xvc2luZ1Njb3Blc0hhdmVFcnJvcnMoKSkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDE1YjZj
YWQuLjE0NGZhZjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTgwLDYgKzgwLDggQEAKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1pc3NpbmdUeXBlQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBvbHltb3JwaGljTWV0aG9kQmluZGluZzsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
UHJvYmxlbVJlYXNvbnM7CkBAIC0xMDEsNiArMTAzLDcgQEAKIAlwdWJsaWMgRXhwcmVzc2lvbiBy
ZWNlaXZlcjsKIAlwdWJsaWMgY2hhcltdIHNlbGVjdG9yOwogCXB1YmxpYyBFeHByZXNzaW9uW10g
YXJndW1lbnRzOworCXB1YmxpYyBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5n
Lk5PX1BBUkFNRVRFUlM7CiAJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZzsJCQkJCQkJLy8g
ZXhhY3QgYmluZGluZyByZXN1bHRpbmcgZnJvbSBsb29rdXAKIAlwdWJsaWMgTWV0aG9kQmluZGlu
ZyBzeW50aGV0aWNBY2Nlc3NvcjsJCQkJCQkvLyBzeW50aGV0aWMgYWNjZXNzb3IgZm9yIGlubmVy
LWVtdWxhdGlvbgogCXB1YmxpYyBUeXBlQmluZGluZyBleHBlY3RlZFR5cGU7CQkJCQkvLyBmb3Ig
Z2VuZXJpYyBtZXRob2QgaW52b2NhdGlvbiAocmV0dXJuIHR5cGUgaW5mZXJlbmNlKQpAQCAtMTE1
LDkgKzExOCw5IEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0
aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVu
Y2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8
UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVk
IElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwotCi1wdWJsaWMgRmxv
d0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZs
b3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgeworCXByaXZhdGUgYm9vbGVhbiByZWNlaXZl
cklzVHlwZTsKKwlwcm90ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CisJcHVibGljIEZs
b3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBm
bG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAlib29sZWFuIG5vblN0YXRpYyA9ICF0
aGlzLmJpbmRpbmcuaXNTdGF0aWMoKTsKIAlib29sZWFuIHdhc0luc2lkZUFzc2VydCA9ICgoZmxv
d0NvbnRleHQudGFnQml0cyAmIEZsb3dDb250ZXh0LkhJREVfTlVMTF9DT01QQVJJU09OX1dBUk5J
TkcpICE9IDApOwogCWZsb3dJbmZvID0gdGhpcy5yZWNlaXZlci5hbmFseXNlQ29kZShjdXJyZW50
U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbywgbm9uU3RhdGljKS51bmNvbmRpdGlvbmFsSW5p
dHMoKTsKQEAgLTU4OCwxMjIgKzU5MSwxMTggQEAKIH0KIAogcHVibGljIFR5cGVCaW5kaW5nIHJl
c29sdmVUeXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkvLyBBbnN3ZXIgdGhlIHNpZ25hdHVyZSBy
ZXR1cm4gdHlwZQorCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVybiB0eXBlLCBhbnN3ZXJz
IFBvbHlUeXBlQmluZGluZyBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgZ2VuZXJpYyBvdmVybG9h
ZGVkIGNhbmRpZGF0ZSB0aGF0IGVuY29kZWQgdHlwZSB2YXJpYWJsZXMgaW4gcmV0dXJuIHR5cGUg
YW5kIHRoZXJlIGlzIG5vIHRhcmdldCB0eXBlICAKIAkvLyBCYXNlIHR5cGUgcHJvbW90aW9uCisJ
aWYgKHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CisJCXRoaXMuY29u
c3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCWxvbmcgc291cmNlTGV2ZWwgPSBzY29w
ZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbDsKKwkJYm9vbGVhbiByZWNlaXZlckNhc3Qg
PSBmYWxzZTsKKwkJaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikg
eworCQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2Fz
dENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQlyZWNlaXZlckNhc3QgPSB0cnVlOwor
CQl9CisJCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5yZXNvbHZlVHlw
ZShzY29wZSk7CisJCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJlY2VpdmVyIGluc3RhbmNl
b2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5iaXRz
ICYgQmluZGluZy5UWVBFKSAhPSAwOworCQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlICE9IG51bGwpIHsKKwkJCS8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5n
IGNsYXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBu
b3RpZmllZAorCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RFeHByZXNzaW9u
KXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSkpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3Qo
KENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOworCQkJfQorCQl9CisJCS8vIHJlc29sdmUg
dHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCisJCWlmICh0aGlz
LnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3Vt
ZW50cy5sZW5ndGg7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gc291cmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCXRo
aXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVS
ZWZlcmVuY2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAv
KiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwor
CQkJCX0KKwkJCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdp
bGRjYXJkKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2ls
ZGNhcmQodHlwZVJlZmVyZW5jZSk7CisJCQkJfQorCQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7
CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byBy
ZXNvbHZlIGFyZ3VtZW50cworCQkJCQlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVu
dHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29s
dmVUeXBlKHNjb3BlKTsKKwkJCQkJfQorCQkJCX0KKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJ
fQorCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCisJCWlm
ICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFs
c2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJn
dW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1ts
ZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7CisJCQkJRXhwcmVz
c2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOworCQkJCWlmICh0aGlzLmFyZ3VtZW50
c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCBy
ZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCisJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNl
b2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8PSBBU1ROb2RlLkRpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJCQl0aGlz
LmFyZ3NDb250YWluQ2FzdCA9IHRydWU7CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4cHJlc3Np
b25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlw
ZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpeworCQkJCQlhcmdI
YXNFcnJvciA9IHRydWU7CisJCQkJfQorCQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJ
aWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykg
eworCQkJCQkvLyAgcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGlu
dCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9B
cmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7
IC0taSA+PSAwOykKKwkJCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0g
PT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJl
cGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQogCi0JdGhpcy5jb25zdGFudCA9
IENvbnN0YW50Lk5vdEFDb25zdGFudDsKLQlsb25nIHNvdXJjZUxldmVsID0gc2NvcGUuY29tcGls
ZXJPcHRpb25zKCkuc291cmNlTGV2ZWw7Ci0JYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxzZSwg
YXJnc0NvbnRhaW5DYXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBD
YXN0RXhwcmVzc2lvbikgewotCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxl
VW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJcmVjZWl2ZXJD
YXN0ID0gdHJ1ZTsKLQl9Ci0JaWYgKHRoaXMucmVjZWl2ZXIucmVzb2x2ZWRUeXBlICE9IG51bGwp
Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiUmVjZWl2
ZXIgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEk
Ci0JdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNj
b3BlKTsKLQlib29sZWFuIHJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNlaXZlciBpbnN0YW5jZW9m
IE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcikuYml0cyAm
IEJpbmRpbmcuVFlQRSkgIT0gMDsKLQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlICE9IG51bGwpIHsKLQkJIC8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5nIGNs
YXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBub3Rp
ZmllZAotCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhp
cy5yZWNlaXZlcikuZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlKSkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChDYXN0
RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKLQkJfQotCX0KLQkvLyByZXNvbHZlIHR5cGUgYXJn
dW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVBcmd1
bWVudHMgIT0gbnVsbCkgewotCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0
aDsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfNTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCi0JCXRoaXMuZ2VuZXJpY1R5
cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhp
cy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ld
ID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMq
LykpID09IG51bGwpIHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJn
SGFzRXJyb3IgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNl
KTsKLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJCWlmICh0aGlzLmFyZ3VtZW50
cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKLQkJCQlm
b3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKysp
IHsKLQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOwotCQkJCX0KLQkJ
CX0KLQkJCXJldHVybiBudWxsOwotCQl9Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0
ZXIgYXJncyBhcmUgcmVzb2x2ZWQKLQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5k
aW5nLk5PX1BBUkFNRVRFUlM7Ci0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJYm9v
bGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJ
aW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJYXJndW1lbnRUeXBlcyA9IG5l
dyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsr
KXsKLQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKLQkJCWlmICh0
aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCi0JCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3Rl
ZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWlmIChhcmd1bWVu
dCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBBU1RO
b2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgot
CQkJCWFyZ3NDb250YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5zZXRFeHByZXNz
aW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKChhcmd1bWVudFR5cGVzW2ld
ID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKLQkJCQlhcmdIYXNFcnJv
ciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkgewotCQkJCWlmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkKLQkJCQkJfHwg
KGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiAoKEludm9jYXRpb24pYXJndW1lbnQp
LnVzZXNJbmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIg
PT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZl
cmVuY2VIZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0J
CQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5n
KSB7Ci0JCQkJLy8gIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhp
bnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9B
cmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsg
LS1pID49IDA7KQotCQkJCQlwc2V1ZG9BcmdzW2ldID0gYXJndW1lbnRUeXBlc1tpXSA9PSBudWxs
ID8gVHlwZUJpbmRpbmcuTlVMTCA6IGFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3
aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQotCQkJCXRoaXMuYmluZGluZyA9Ci0JCQkJCXRoaXMu
cmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJCQkJPyBzY29wZS5nZXRJbXBsaWNpdE1ldGhv
ZCh0aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKQotCQkJCQkJOiBzY29wZS5maW5kTWV0
aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxl
Y3RvciwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0g
bnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmlu
ZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZyku
Y2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGll
bnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAot
CQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsg
Ly8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0
aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2Qg
KDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3
VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0
TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2Vz
dE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVu
Y2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0
TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlz
IHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykK
LQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1v
ZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZl
ci5pc0ltcGxpY2l0VGhpcygpID8KKwkJCQkJCQkJc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhp
cy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcykgOgorCQkJCQkJCQkJc2NvcGUuZmluZE1ldGhv
ZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0
b3IsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKworCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9
IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJCQlNZXRob2RC
aW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5n
KS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBj
bGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRj
aAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJaWYgKGNsb3Nlc3RN
YXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxF
UykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVy
aWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBt
ZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQo
KS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwo
KSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0aGlzLmJpbmRpbmcg
PSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5h
bCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmln
aW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0
aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hl
cmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3Qg
cmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4
dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJfQogCQkJCQkJfQog
CQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWlmICh0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCQkvLyBi
YXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKKwkJaWYgKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJy
b3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVu
dFR5cGVzKTsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQotCWlmICh0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSA9PSBudWxsKSB7Ci0JCXJldHVybiBudWxsOworCQorCVR5cGVCaW5kaW5nIG1ldGhv
ZFR5cGUgPSBmaW5kTWV0aG9kQmluZGluZyhzY29wZSk7CisJaWYgKG1ldGhvZFR5cGUgIT0gbnVs
bCAmJiBtZXRob2RUeXBlLmlzUG9seVR5cGUoKSkgeworCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRo
aXMuYmluZGluZy5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKTsKKwkJ
cmV0dXJuIG1ldGhvZFR5cGU7CiAJfQotCS8vIGJhc2UgdHlwZSBjYW5ub3QgcmVjZWl2ZSBhbnkg
bWVzc2FnZQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkpIHsKLQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVh
bFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcyk7Ci0JCXJldHVybiBudWxsOwotCX0KLQotCWZp
bmRNZXRob2RCaW5kaW5nKHNjb3BlLCBhcmd1bWVudFR5cGVzKTsKIAogCWlmICghdGhpcy5iaW5k
aW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyA9PSBudWxsKSB7CiAJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBS
ZWZlcmVuY2VCaW5kaW5nKSB7CiAJCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gKFJl
ZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlOwogCQkJfSBlbHNlIHsKLQkJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0
dWFsUmVjZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlz
LmFyZ3VtZW50VHlwZXMpOwogCQkJCXJldHVybiBudWxsOwogCQkJfQogCQl9CkBAIC03MTUsMTAg
KzcxNCwxNyBAQAogCQkJCQkJCQkgZGVjbGFyaW5nQ2xhc3Muc3VwZXJjbGFzcygpIGluc3RhbmNl
b2YgTWlzc2luZ1R5cGVCaW5kaW5nOwogCQlpZiAoIWF2b2lkU2Vjb25kYXJ5KQogCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworCQkK
IAkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRo
aXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVt
SWQoKSkgewogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAv
LyBubyByZXNpbGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZl
cnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJsZToKKwkJCWNhc2UgUHJvYmxlbVJlYXNvbnMu
SW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgorCQkJCS8vIEdyYWJiaW5nIHRoZSBjbG9z
ZXN0IG1hdGNoIGltcHJvdmVzIGVycm9yIHJlcG9ydGluZyBpbiBuZXN0ZWQgaW52b2NhdGlvbiBj
b250ZXh0cworCQkJCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09O
VEVYVCkKKwkJCQkJYnJlYWs7CisJCQkJLy8kRkFMTC1USFJPVUdIJAogCQkJY2FzZSBQcm9ibGVt
UmVhc29ucy5Ob3RWaXNpYmxlIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljUmVm
ZXJlbmNlSW5Db25zdHJ1Y3Rvckludm9jYXRpb24gOgogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5O
b25TdGF0aWNSZWZlcmVuY2VJblN0YXRpY0NvbnRleHQgOgpAQCAtNzczLDcgKzc3OSw3IEBACiAJ
fQogCWlmICghdGhpcy5iaW5kaW5nLmlzU3RhdGljKCkpIHsKIAkJLy8gdGhlICJyZWNlaXZlciIg
bXVzdCBub3QgYmUgYSB0eXBlCi0JCWlmIChyZWNlaXZlcklzVHlwZSkgeworCQlpZiAodGhpcy5y
ZWNlaXZlcklzVHlwZSkgewogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubXVzdFVzZUFTdGF0
aWNNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZS5pc1Jhd1R5cGUoKQogCQkJCQkmJiAodGhpcy5yZWNlaXZlci5iaXRzICYgQVNUTm9kZS5J
Z25vcmVSYXdUeXBlQ2hlY2spID09IDAKQEAgLTc5MiwxNCArNzk4LDE0IEBACiAJCX0KIAl9IGVs
c2UgewogCQkvLyBzdGF0aWMgbWVzc2FnZSBpbnZva2VkIHRocm91Z2ggcmVjZWl2ZXI/IGxlZ2Fs
IGJ1dCB1bm9wdGltYWwgKG9wdGlvbmFsIHdhcm5pbmcpLgotCQlpZiAoISh0aGlzLnJlY2VpdmVy
LmlzSW1wbGljaXRUaGlzKCkgfHwgdGhpcy5yZWNlaXZlci5pc1N1cGVyKCkgfHwgcmVjZWl2ZXJJ
c1R5cGUpKSB7CisJCWlmICghKHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSB8fCB0aGlz
LnJlY2VpdmVyLmlzU3VwZXIoKSB8fCB0aGlzLnJlY2VpdmVySXNUeXBlKSkgewogCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkubm9uU3RhdGljQWNjZXNzVG9TdGF0aWNNZXRob2QodGhpcywgdGhp
cy5iaW5kaW5nKTsKIAkJfQogCQlpZiAoIXRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSAm
JiBUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLCB0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSkpIHsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmluZGly
ZWN0QWNjZXNzVG9TdGF0aWNNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJfQogCX0KLQlp
ZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCB0aGlzLnJlY2VpdmVyLCB0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgYXJndW1lbnRU
eXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkgeworCWlmIChjaGVja0ludm9jYXRpb25Bcmd1
bWVudHMoc2NvcGUsIHRoaXMucmVjZWl2ZXIsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlz
LmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMuYXJnc0Nv
bnRhaW5DYXN0LCB0aGlzKSkgewogCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5VbmNoZWNrZWQ7CiAJ
fQogCkBAIC04NDYsNyArODUyLDcgQEAKIAl9CiAJaWYgKHRoaXMucmVjZWl2ZXIuaXNTdXBlcigp
ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzSW50ZXJmYWNlKCkpIHsKIAkJLy8gMTUuMTIu
MyAoSmF2YSA4KQotCQlzY29wZS5jaGVja0FwcHJvcHJpYXRlTWV0aG9kQWdhaW5zdFN1cGVycyh0
aGlzLnNlbGVjdG9yLCB0aGlzLmJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQlzY29w
ZS5jaGVja0FwcHJvcHJpYXRlTWV0aG9kQWdhaW5zdFN1cGVycyh0aGlzLnNlbGVjdG9yLCB0aGlz
LmJpbmRpbmcsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CiAJfQogCWlmICh0aGlzLnR5cGVB
cmd1bWVudHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcub3JpZ2luYWwoKS50eXBlVmFyaWFibGVz
ID09IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKIAkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkudW5uZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0aGlzLmJpbmRp
bmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50cyk7CkBAIC04
NTYsMTcgKzg2MiwyMSBAQAogCQkJCT8gdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQk6IG51bGw7CiB9
Ci0vKioKLSAqIEZpbmQgdGhlIG1ldGhvZCBiaW5kaW5nOyAKLSAqIGlmIHRoaXMuaW5uZXJzTmVl
ZFVwZGF0ZSBhbGxvdyBmb3IgdHdvIGF0dGVtcHRzIHdoZXJlIHRoZSBmaXJzdCByb3VuZCBtYXkg
c3RvcAotICogYWZ0ZXIgYXBwbGljYWJpbGl0eSBjaGVja2luZyAoMTguNS4xKSB0byBpbmNsdWRl
IG1vcmUgaW5mb3JtYXRpb24gaW50byB0aGUgZmluYWwKLSAqIGludm9jYXRpb24gdHlwZSBpbmZl
cmVuY2UgKDE4LjUuMikuCi0gKi8KLXByb3RlY3RlZCB2b2lkIGZpbmRNZXRob2RCaW5kaW5nKEJs
b2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewotCXRoaXMuYmlu
ZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJPyBzY29wZS5nZXRJbXBs
aWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKQotCQkJOiBzY29w
ZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3Vt
ZW50VHlwZXMsIHRoaXMpOwotCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB0
aGlzLmJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKworcHJvdGVjdGVkIFR5cGVCaW5k
aW5nIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkKKwkKKwl0aGlzLmJp
bmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkgPyAKKwkJCXNjb3BlLmdldElt
cGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykgCisJ
CQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3Rv
ciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKworCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVs
bCkgLy8gY2FuJ3QgaGFwcGVuID8gSSB0aGluayB3ZSBhbHdheXMgZ2V0IGEgcHJvYmxlbSBiaW5k
aW5nLCBhbnl3YXlzLgorCQlyZXR1cm4gbnVsbDsKKwkKKwlpZiAodGhpcy5iaW5kaW5nIGluc3Rh
bmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKKwkJcmV0dXJuIG5l
dyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CisJCisJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1l
bnRzKHRoaXMsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCiAJ
LyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25zIGluIHRoZSBKTFM4IHR5cGUgaW5mZXJl
bmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1dGlvbiBvZiB0aGUgdHlwZSBlcXVhdGlv
bnMgcmVzdWx0cyBpbiBhbgogCSAgIGFwcGxpY2FibGUgbWV0aG9kLiBUaGlzIGFwcGVhcnMgdG8g
YmUgYSB0ZW51b3VzIGFzc3VtcHRpb24sIGF0IGxlYXN0IG9uZSBub3QgbWFkZSBieSB0aGUgSkxT
NyBlbmdpbmUgb3IgdGhlIHJlZmVyZW5jZSBjb21waWxlciBhbmQgCkBAIC04ODAsMTEgKzg5MCw4
IEBACiAJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBp
bGVyT3B0aW9ucygpOwogCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfOCAmJiB0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkp
IHsKIAkJaWYgKCFjb21waWxlck9wdGlvbnMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBl
OwogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGdtYiA9IChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZzsKLQkJSW5mZXJlbmNlQ29udGV4
dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQocGdtYik7Ci0JCWlmIChjdHggPT0gbnVsbCB8
fCBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVE
KQotCQkJcmV0dXJuOwogCQlpbnQgbGVuZ3RoID0gcGdtYi50eXBlQXJndW1lbnRzID09IG51bGwg
PyAwIDogcGdtYi50eXBlQXJndW1lbnRzLmxlbmd0aDsKIAkJYm9vbGVhbiBzYXdSYXdUeXBlID0g
ZmFsc2U7CiAJCWZvciAoaW50IGkgPSAwOyAgaSA8IGxlbmd0aDsgaSsrKSB7CkBAIC04OTMsNDAg
KzkwMCwyNiBAQAogCQkJICAgZG9lcyBub3QgYXBwZWFyIGZ1bGx5IGhvb2tlZCB1cCBpbnRvIGlz
Q29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZhbGVudCB0byBldmVyeXdoZXJlLiBBdCB0aGUgbW9t
ZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2FwdHVyZS4KIAkJCSovICAgCiAJCQlpZiAocGdtYi50
eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgpKQotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhp
cy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3
VHlwZSgpKQogCQkJCXNhd1Jhd1R5cGUgPSB0cnVlOwogCQl9CiAJCWlmICghc2F3UmF3VHlwZSkK
LQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJbGVuZ3Ro
ID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CiAJ
CWlmIChsZW5ndGggPT0gMCkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0
dXJuVHlwZTsKIAkJVHlwZUJpbmRpbmcgW10gZmluYWxBcmd1bWVudFR5cGVzID0gbmV3IFR5cGVC
aW5kaW5nW2xlbmd0aF07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJ
CVR5cGVCaW5kaW5nIGZpbmFsQXJndW1lbnRUeXBlID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2
ZWRUeXBlOwogCQkJaWYgKGZpbmFsQXJndW1lbnRUeXBlID09IG51bGwgfHwgIWZpbmFsQXJndW1l
bnRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpICAvLyBhbHJlYWR5IHNpZGVkIHdpdGggdGhlIGRldmls
LgotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlm
aW5hbEFyZ3VtZW50VHlwZXNbaV0gPSBmaW5hbEFyZ3VtZW50VHlwZTsgCiAJCX0KLQkJaWYgKHNj
b3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1l
bnRUeXBlcywgZmFsc2UsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJMRSkKKwkJaWYgKHNj
b3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1l
bnRUeXBlcywgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxFKQogCQkJdGhpcy5iaW5kaW5n
ID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLCB0aGlz
LmJpbmRpbmcuc2VsZWN0b3IsIGZpbmFsQXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90
Rm91bmQpOwogCX0KLX0KLQotQE92ZXJyaWRlCi1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2Fp
bnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7
Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4
dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHgg
IT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lO
RkVSUkVEKSB7Ci0JCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7Ci0JCQlNZXRob2RC
aW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2NhdGlvblR5cGUodGhpcywgKFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJCWlmICh1
cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlwZSkpIHsKLQkJCQlBU1ROb2Rl
LnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1cGRhdGVkQmluZGluZywgc2Nv
cGUpOwotCQkJfQotCQl9Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4g
dGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiB9CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2Vp
dmVyVHlwZShSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewpAQCAtOTYyLDYgKzk1NSwz
OSBAQAogCSAqLwogCXJldHVybiBpc1BvbHlFeHByZXNzaW9uKHRoaXMuYmluZGluZyk7CiB9CisK
K3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlUeXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlz
LmV4cGVjdGVkVHlwZTsKKwl0cnkgeworCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7
CisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygp
ID8gCisJCQkJICBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFy
Z3VtZW50VHlwZXMsIHRoaXMpIAorCQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQlp
ZiAobWV0aG9kID09IG51bGwgfHwgIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5y
ZXR1cm5UeXBlID09IG51bGwgfHwgIW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkp
CisJCQlyZXR1cm4gZmFsc2U7CisJCXJldHVybiBzdXBlci5pc0JveGluZ0NvbXBhdGlibGUobWV0
aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLCB0YXJnZXRUeXBl
LCB0aGlzLCBzY29wZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvbGRF
eHBlY3RlZFR5cGU7CisJfQorfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcg
b2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBl
Y3RlZFR5cGUgPSB0YXJnZXRUeXBlOworCQlNZXRob2RCaW5kaW5nIG1ldGhvZCA9IHRoaXMucmVj
ZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAorCQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2Qo
dGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdl
dE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1
bWVudFR5cGVzLCB0aGlzKTsKKwkKKwkJaWYgKG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNW
YWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJuVHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0
dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJcmV0dXJuIGZhbHNlOworCQkJCisJCXJldHVy
biBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCkuaXNDb21w
YXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBl
Y3RlZFR5cGUgPSBvbGRFeHBlY3RlZFR5cGU7CisJfQorfQorCiAvKiogVmFyaWFudCBvZiBpc1Bv
bHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBkdXJpbmcgdHlwZSBpbmZlcmVuY2UsIHdoZW4gYSBy
ZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMuICovCiBwdWJsaWMgYm9vbGVhbiBpc1BvbHlFeHBy
ZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1dGlvbkNhbmRpZGF0ZSkgewogCWlmICh0aGlzLmV4
cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1FTlRfQ09OVEVYVCAmJiB0aGlzLmV4cHJlc3Npb25D
b250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKQEAgLTEwMjUsMjEgKzEwNTEsMjEgQEAKIAly
ZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwogfQogLy8gLS0gaW50ZXJmYWNl
IEludm9jYXRpb246IC0tCisvLyBTcmlrYW50aCBjaGVjayAtIHJlcG9ydEVycm9ycyAmIFNjb3Bl
IGRvbid0IG1ha2Ugc2Vuc2UuCiBwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewotCWlm
IChyZXBvcnRFcnJvcnMpIHsKLQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQotCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJtZXRob2QgaXMgdW5leHBl
Y3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQllbHNlIGlmICghdGhp
cy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5p
bnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0
ZWRUeXBlID0gdGhpcy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUg
PSB0YXJnZXRUeXBlOworCQlNZXRob2RCaW5kaW5nIG1iID0gCisJCQkJdGhpcy5yZWNlaXZlci5p
c0ltcGxpY2l0VGhpcygpID8gCisJCQkJICBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNl
bGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpIAorCQkJCTogc2NvcGUuZ2V0TWV0aG9k
KHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHRoaXMpOworCQlyZXR1cm4gbWI7CQkgIAorCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0
ZWRUeXBlID0gb2xkRXhwZWN0ZWRUeXBlOwogCX0KLQlyZXR1cm4gdGhpcy5iaW5kaW5nOwogfQot
cHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7Ci0JcmV0dXJuIHRoaXMuYXJndW1lbnRz
OwotfQotcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewot
CXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwotfQorCiBwdWJsaWMgdm9pZCByZWdpc3Rl
ckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhv
ZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMgPT0gbnVsbCkKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29r
dXBUYWJsZSgpOwpAQCAtMTA1MCwzMiArMTA3NiwxMSBAQAogCQlyZXR1cm4gbnVsbDsKIAlyZXR1
cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9k
KTsKIH0KLXB1YmxpYyBib29sZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJp
bmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJ
JiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CitwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygp
IHsKKwlyZXR1cm4gdGhpcy5hcmd1bWVudHM7CiB9Ci1wdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5k
aW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBl
KSB7Ci0JYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJpbmRpbmc7
Ci0JaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewotCQlJbmZlcmVuY2VDb250
ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJl
bW92ZUtleSh0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRp
bmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRo
aXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29s
dXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhh
dCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRh
dGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwot
CQl9Ci0JfQotCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRU
eXBlID0gdXBkYXRlZEJpbmRpbmcucmV0dXJuVHlwZTsKLQlyZXR1cm4gaGFzVXBkYXRlOwotfQot
cHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lcklu
ZmVyZW5jZUhlbHBlciAhPSBudWxsOwotfQotcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkg
ewotCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5m
ZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVy
SW5mZXJlbmNlSGVscGVyOworcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25D
b250ZXh0KCkgeworCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwogfQogLy8gLS0gSW50
ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVz
aEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
UXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVk
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA1OTIwYTgwLi5kOWFiMDcwIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC0zOTYsMTAg
KzM5NiwxMCBAQAogCQl9CiAKIAkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFy
ZSByZXNvbHZlZAotCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BB
UkFNRVRFUlM7CisJCXRoaXMuYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsK
IAkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKIAkJCWludCBsZW5ndGggPSB0aGlzLmFy
Z3VtZW50cy5sZW5ndGg7Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0
aF07CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKIAkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCQlFeHByZXNzaW9uIGFyZ3Vt
ZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CiAJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2Fz
dEV4cHJlc3Npb24pIHsKQEAgLTQwNywxMiArNDA3LDggQEAKIAkJCQkJYXJnc0NvbnRhaW5DYXN0
ID0gdHJ1ZTsKIAkJCQl9CiAJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NB
VElPTl9DT05URVhUKTsKLQkJCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNv
bHZlVHlwZShzY29wZSkpID09IG51bGwpeworCQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ld
ID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKIAkJCQkJaGFzRXJyb3Ig
PSB0cnVlOwotCQkJCX0KLQkJCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8IChhcmd1bWVudCBpbnN0
YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZvY2F0aW9uKWFyZ3VtZW50KS51c2VzSW5mZXJlbmNl
KCkpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJ
CQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigp
OwogCQkJCX0KIAkJCX0KIAkJfQpAQCAtNDMzLDcgKzQyOSw3IEBACiAJCQkJCWludCBsZW5ndGgg
PSB0aGlzLmFyZ3VtZW50cyAgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CiAJ
CQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwog
CQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKLQkJCQkJCXBzZXVkb0FyZ3Nb
aV0gPSBhcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogYXJndW1l
bnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJ
CQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBl
QmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0
aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKIAkJCQkJfQogCQkJCQl0aGlzLmJpbmRpbmcgPSBzY29w
ZS5maW5kTWV0aG9kKHJlZmVyZW5jZVJlY2VpdmVyLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVk
b0FyZ3MsIHRoaXMsIGZhbHNlKTsKIAkJCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0
aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewpAQCAtNDY5LDcgKzQ2NSw3IEBACiAJCQkJ
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gcmVjZWl2ZXJUeXBlOwogCQkJfQogCQkJaWYgKGlz
RGlhbW9uZCkgewotCQkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRl
ZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHJlY2VpdmVyVHlwZSwgcmVjZWl2ZXJU
eXBlLmVuY2xvc2luZ1R5cGUoKSwgYXJndW1lbnRUeXBlcywgc2NvcGUpOworCQkJCVR5cGVCaW5k
aW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHJlY2VpdmVyVHlwZSwgcmVjZWl2ZXJUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhp
cy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkg
ewogCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRo
aXMpOwogCQkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwpAQCAtNDc3LDEzICs0
NzMsMTMgQEAKIAkJCQlyZWNlaXZlclR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gc2Nv
cGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgoKFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZykgcmVjZWl2ZXJUeXBlKS5nZW5lcmljVHlwZSgpLCBpbmZlcnJlZFR5cGVzLCAo
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgcmVjZWl2ZXJUeXBlKS5lbmNsb3NpbmdUeXBlKCkp
OwogCQkJfQogCQkJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VC
aW5kaW5nKSByZWNlaXZlclR5cGU7Ci0JCQl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JC
aW5kaW5nKHNjb3BlLCB0aGlzLCBhbGxvY2F0aW9uVHlwZSwgYXJndW1lbnRUeXBlcyk7CisJCQl0
aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCBhbGxvY2F0
aW9uVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKIAogCQkJaWYgKHRoaXMuYmluZGluZy5pc1Zh
bGlkQmluZGluZygpKSB7CQogCQkJCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhpcy5iaW5k
aW5nLCBzY29wZSwgdHJ1ZSkpIHsKIAkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVj
YXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOwogCQkJCX0KLQkJCQlpZiAoY2hlY2tJbnZv
Y2F0aW9uQXJndW1lbnRzKHNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5n
LCB0aGlzLmFyZ3VtZW50cywgYXJndW1lbnRUeXBlcywgYXJnc0NvbnRhaW5DYXN0LCB0aGlzKSkg
eworCQkJCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc2NvcGUsIG51bGwsIGFsbG9jYXRp
b25UeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IGFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJCQkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuVW5j
aGVja2VkOwogCQkJCX0KIAkJCQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdGhp
cy5iaW5kaW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFS
SUFCTEVTKSB7CkBAIC01MDQsNyArNTAwLDcgQEAKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJCX0KIAkJ
CWlmICghaXNEaWFtb25kICYmIHJlY2VpdmVyVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlV2l0aEFj
dHVhbEFyZ3VtZW50cygpKSB7Ci0JCSAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKXJlY2VpdmVyVHlwZSwgcmVjZWl2ZXJUeXBlLmVuY2xvc2lu
Z1R5cGUoKSwgYXJndW1lbnRUeXBlcyAsIHNjb3BlKTsKKwkJIAkJY2hlY2tUeXBlQXJndW1lbnRS
ZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpcmVjZWl2ZXJUeXBlLCByZWNlaXZl
clR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMgLCBzY29wZSk7CiAJCSAJ
fQogCQkJLy8gVGhlIGVuY2xvc2luZyBpbnN0YW5jZSBtdXN0IGJlIGNvbXBhdGlibGUgd2l0aCB0
aGUgaW5uZXJtb3N0IGVuY2xvc2luZyB0eXBlCiAJCQlSZWZlcmVuY2VCaW5kaW5nIGV4cGVjdGVk
VHlwZSA9IHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5lbmNsb3NpbmdUeXBlKCk7CkBAIC01
NDMsNyArNTM5LDcgQEAKIAkJaWYgKCh0aGlzLnJlc29sdmVkVHlwZS50YWdCaXRzICYgVGFnQml0
cy5IaWVyYXJjaHlIYXNQcm9ibGVtcykgIT0gMCkgewogCQkJcmV0dXJuIG51bGw7IC8vIHN0b3Ag
c2Vjb25kYXJ5IGVycm9ycwogCQl9Ci0JCU1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkQmluZGluZyA9
IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIGFub255bW91c1N1cGVyY2xhc3Ms
IGFyZ3VtZW50VHlwZXMpOworCQlNZXRob2RCaW5kaW5nIGluaGVyaXRlZEJpbmRpbmcgPSBmaW5k
Q29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCBhbm9ueW1vdXNTdXBlcmNsYXNzLCB0aGlz
LmFyZ3VtZW50VHlwZXMpOwogCQkJCiAJCWlmICghaW5oZXJpdGVkQmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7CiAJCQlpZiAoaW5oZXJpdGVkQmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxs
KSB7CkBAIC01NzEsNyArNTY3LDcgQEAKIAkJCXRoaXMuZW5jbG9zaW5nSW5zdGFuY2UuY29tcHV0
ZUNvbnZlcnNpb24oc2NvcGUsIHRhcmdldEVuY2xvc2luZywgZW5jbG9zaW5nSW5zdGFuY2VUeXBl
KTsKIAkJfQogCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQkJaWYgKGNoZWNrSW52
b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYW5vbnltb3VzU3VwZXJjbGFzcywgaW5oZXJp
dGVkQmluZGluZywgdGhpcy5hcmd1bWVudHMsIGFyZ3VtZW50VHlwZXMsIGFyZ3NDb250YWluQ2Fz
dCwgdGhpcykpIHsKKwkJCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc2NvcGUsIG51bGws
IGFub255bW91c1N1cGVyY2xhc3MsIGluaGVyaXRlZEJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIGFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJCQl0aGlzLmJp
dHMgfD0gQVNUTm9kZS5VbmNoZWNrZWQ7CiAJCQl9CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNz
aW9uLmphdmEKaW5kZXggYjg0ODQxZi4uMTc4NWYwNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNz
aW9uLmphdmEKQEAgLTcyNSwxOCArNzI1LDYgQEAKIAkJfQogCX0KIAotCXB1YmxpYyBNZXRob2RC
aW5kaW5nIHByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQoU2NvcGUgc2NvcGUpIHsKLQkJdHJ5IHsK
LQkJCXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQl0aGlzLmJp
bmRpbmcgPSBudWxsOwotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSB0cnVlOwotCQkJcmVzb2x2
ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwotCQl9
IGZpbmFsbHkgewotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSBmYWxzZTsKLQkJfQotCX0KLQog
CXB1YmxpYyBib29sZWFuIGlzQ29uc3RydWN0b3JSZWZlcmVuY2UoKSB7CiAJCXJldHVybiBDaGFy
T3BlcmF0aW9uLmVxdWFscyh0aGlzLnNlbGVjdG9yLCAgQ29uc3RhbnRQb29sLkluaXQpOwogCX0K
QEAgLTg0Myw2ICs4MzEsNyBAQAogCX0KIAogCXB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdp
dGgoVHlwZUJpbmRpbmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKKwogCQlpZiAodGhpcy5iaW5kaW5n
ICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgLy8gYmluZGluZyBpbmRp
Y2F0ZXMgaWYgZnVsbCByZXNvbHV0aW9uIGhhcyBhbHJlYWR5IGhhcHBlbmVkCiAJCQkJJiYgdGhp
cy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChsZWZ0
LCBzY29wZSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5kaW5nLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5kaW5nLmphdmEKaW5kZXggOWI0YmYxNC4uZDBmZjFm
MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJlQmluZGluZy5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQ2FwdHVyZUJpbmRpbmcuamF2YQpAQCAtMTUsNiArMTUsNyBAQAogcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9u
czsKQEAgLTI4LDYgKzI5LDcgQEAKIAkvKiBpbmZvcm1hdGlvbiB0byBjb21wdXRlIHVuaXF1ZSBi
aW5kaW5nIGtleSAqLwogCXB1YmxpYyBSZWZlcmVuY2VCaW5kaW5nIHNvdXJjZVR5cGU7CiAJcHVi
bGljIGludCBwb3NpdGlvbjsKKwlwdWJsaWMgQVNUTm9kZSBjdWQ7IC8vIHRvIGZhY2lsaXRhdGUg
cmVjYXB0dXJlcy4KIAogCXB1YmxpYyBDYXB0dXJlQmluZGluZyhXaWxkY2FyZEJpbmRpbmcgd2ls
ZGNhcmQsIFJlZmVyZW5jZUJpbmRpbmcgc291cmNlVHlwZSwgaW50IHBvc2l0aW9uLCBpbnQgY2Fw
dHVyZUlEKSB7CiAJCXN1cGVyKFR5cGVDb25zdGFudHMuV0lMRENBUkRfQ0FQVFVSRV9OQU1FX1BS
RUZJWCwgbnVsbCwgMCwgd2lsZGNhcmQuZW52aXJvbm1lbnQpOwpAQCAtNTMsNiArNTUsMTEgQEAK
IAkJfQogCX0KIAkKKwlwdWJsaWMgQ2FwdHVyZUJpbmRpbmcoV2lsZGNhcmRCaW5kaW5nIHdpbGRj
YXJkLCBSZWZlcmVuY2VCaW5kaW5nIHNvdXJjZVR5cGUsIGludCBwb3NpdGlvbiwgQVNUTm9kZSBj
dWQsIGludCBjYXB0dXJlSUQpIHsKKwkJdGhpcyh3aWxkY2FyZCwgc291cmNlVHlwZSwgcG9zaXRp
b24sIGNhcHR1cmVJRCk7CisJCXRoaXMuY3VkID0gY3VkOworCX0KKwkKIAkvLyBmb3Igc3ViY2xh
c3MgQ2FwdHVyZUJpbmRpbmcxOAogCXByb3RlY3RlZCBDYXB0dXJlQmluZGluZyhSZWZlcmVuY2VC
aW5kaW5nIHNvdXJjZVR5cGUsIGNoYXJbXSBzb3VyY2VOYW1lLCBpbnQgcG9zaXRpb24sIGludCBj
YXB0dXJlSUQsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJCXN1cGVyKHNvdXJj
ZU5hbWUsIG51bGwsIDAsIGVudmlyb25tZW50KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29tcGlsYXRpb25Vbml0U2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29tcGlsYXRpb25Vbml0
U2NvcGUuamF2YQppbmRleCAyMWY3YzFlLi4zNjgwY2QxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0NvbXBpbGF0aW9uVW5pdFNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db21waWxh
dGlvblVuaXRTY29wZS5qYXZhCkBAIC04MDAsNiArODAwLDggQEAKIAlyZXR1cm4gIi0tLSBDb21w
aWxhdGlvblVuaXQgU2NvcGUgOiAiICsgbmV3IFN0cmluZyh0aGlzLnJlZmVyZW5jZUNvbnRleHQu
Z2V0RmlsZU5hbWUoKSk7IC8vJE5PTi1OTFMtMSQKIH0KIHByaXZhdGUgUmVmZXJlbmNlQmluZGlu
ZyB0eXBlVG9SZWNvcmQoVHlwZUJpbmRpbmcgdHlwZSkgeworCWlmICh0eXBlID09IG51bGwpCisJ
CXJldHVybiBudWxsOwogCXdoaWxlICh0eXBlLmlzQXJyYXlUeXBlKCkpCiAJCXR5cGUgPSAoKEFy
cmF5QmluZGluZykgdHlwZSkubGVhZkNvbXBvbmVudFR5cGUoKTsKIApkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggNjIwZjQ2Ni4uZDFlZDBj
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZh
CkBAIC0xOCwxMiArMTgsMTAgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFTVFZpc2l0b3I7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BbGxvY2F0aW9uRXhwcmVzc2lvbjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50OwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhw
cmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4
cHJlc3Npb25Db250ZXh0OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuRnVuY3Rpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247CkBAIC01Niw0MSAr
NTQsOCBAQAogCiAJcHVibGljIE9iamVjdCByZWR1Y2UoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVy
ZW5jZUNvbnRleHQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKIAkJLy8gSkxT
IDE4LjIuMQotCQlwcm9wZXI6CiAJCWlmICh0aGlzLnJpZ2h0LmlzUHJvcGVyVHlwZSh0cnVlKSkg
ewotCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSB0aGlzLmxlZnQucmVzb2x2ZWRUeXBlOwotCQkJ
aWYgKGV4cHJUeXBlID09IG51bGwpIHsKLQkJCQkvLyBpZiB3ZSBnZXQgaGVyZSBmb3Igc29tZSBr
aW5kcyBvZiBwb2x5IGV4cHJlc3Npb25zIChpbmNsLiBDb25kaXRpb25hbEV4cHJlc3Npb24pLAot
CQkJCS8vIHRoZW4gb3RoZXIgd2F5cyBmb3IgY2hlY2tpbmcgY29tcGF0aWJpbGl0eSBhcmUgbmVl
ZGVkOgotICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBGdW5jdGlvbmFs
RXhwcmVzc2lvbikgewotICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0IGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbikgewotICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2YuIE5l
Z2F0aXZlTGFtYmRhRXhwcmVzc2lvblRlc3QudGVzdDQxMjQ1MygpCi0gICAgICAgICAgICAgICAg
ICAgICAgICBMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSAoKExhbWJkYUV4cHJlc3Npb24pIHRoaXMu
bGVmdCkuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOwot
ICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjb3B5ICE9IG51bGwgJiYgY29weS5yZXNv
bHZlZFR5cGUgIT0gbnVsbCAmJiBjb3B5LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSA/
IFRSVUUgOiBGQUxTRTsKLSAgICAgICAgICAgICAgICAgICAgfQotICAgICAgICAgICAgICAgIH0K
LSAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5y
aWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7Ci0JCQl9IGVsc2Ug
aWYgKCFleHByVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJcmV0dXJuIEZBTFNFOwotCQkJ
fQotCQkJaWYgKGlzQ29tcGF0aWJsZVdpdGhJbkxvb3NlSW52b2NhdGlvbkNvbnRleHQoZXhwclR5
cGUsIHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQpKSB7Ci0JCQkJcmV0dXJuIFRSVUU7Ci0J
CQl9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uICYm
IHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQkvLyBoYWxmLXJlc29sdmVkIGRp
YW1vbmQgaGFzIGEgcmVzb2x2ZWRUeXBlLCBidXQgdGhhdCBtYXkgbm90IGJlIHRoZSBmaW5hbCB3
b3JkLCB0cnkgb25lIG1vcmUgc3RlcCBvZiByZXNvbHV0aW9uOgotICAgICAgICAgICAgCU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9ICgoQWxsb2NhdGlvbkV4cHJlc3Npb24pIHRoaXMubGVmdCkuYmlu
ZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7Ci0gICAgICAgICAgICAJcmV0dXJuIChiaW5k
aW5nICE9IG51bGwgJiYgYmluZGluZy5kZWNsYXJpbmdDbGFzcy5pc0NvbXBhdGlibGVXaXRoKHRo
aXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpKSA/IFRSVUUgOiBGQUxTRTsKLSAgICAg
ICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiB0aGlz
LmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0gICAgICAgICAgICAJSW52b2NhdGlvbiBpbnZv
YyA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0gICAgICAgICAgICAJTWV0aG9kQmluZGluZyBi
aW5kaW5nID0gaW52b2MuYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7Ci0gICAgICAg
ICAgICAJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIHsKLSAgICAgICAgICAgIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IG1ldGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGJpbmRpbmc7Ci0J
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBsZWZ0Q3R4ID0gaW52b2MuZ2V0SW5mZXJlbmNlQ29udGV4
dChtZXRob2QpOwotICAgICAgICAgICAgCQlpZiAobGVmdEN0eC5zdGVwQ29tcGxldGVkIDwgSW5m
ZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLSAgICAgICAgICAgIAkJCWJyZWFrIHBy
b3BlcjsgLy8gZmFsbCB0aHJvdWdoIGludG8gbmVzdGVkIGluZmVyZW5jZSBiZWxvdyAobm90IGV4
cGxpY2l0IGluIHRoZSBzcGVjISkKLSAgICAgICAgICAgIAkJfQotICAgICAgICAgICAgCX0KLSAg
ICAgICAgICAgIH0KLQkJCXJldHVybiBGQUxTRTsKKwkJCXJldHVybiB0aGlzLmxlZnQuaXNDb21w
YXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSB8fCB0aGlzLmxl
ZnQuaXNCb3hpbmdDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNj
b3BlKSA/IFRSVUUgOiBGQUxTRTsKIAkJfQogCQlpZiAoIWNhbkJlUG9seUV4cHJlc3Npb24odGhp
cy5sZWZ0KSkgewogCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSB0aGlzLmxlZnQucmVzb2x2ZWRU
eXBlOwpAQCAtMTAyLDcgKzY3LDcgQEAKIAkJCS8vIC0gcGFyZW50aGVzaXplZCBleHByZXNzaW9u
IDogdGhlc2UgYXJlIHRyYW5zcGFyZW50IGluIG91ciBBU1QKIAkJCWlmICh0aGlzLmxlZnQgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uKSB7CiAJCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9j
YXRpb24pIHRoaXMubGVmdDsKLQkJCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzTWV0aG9kID0gaW52
b2NhdGlvbi5iaW5kaW5nKHRoaXMucmlnaHQsIGZhbHNlLCBudWxsKTsKKwkJCQlNZXRob2RCaW5k
aW5nIHByZXZpb3VzTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHRoaXMucmlnaHQsIGZhbHNl
LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKIAkJCQlpZiAocHJldmlvdXNNZXRob2QgPT0gbnVs
bCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcuLCBpZiBpbnNpZGUgYSBjb3BpZWQgbGFtYmRhIHdpdGgg
aWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0dXJuIG51bGw7IAkJCQkvLyAtPiBwcm9jZWVkIHdpdGgg
bm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBwcmV2aW91c01l
dGhvZDsKQEAgLTEyOCw3ICs5Myw2IEBACiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9y
bXVsYS5jcmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0
KTsKIAkJCQkJCX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVy
Q3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5vdXRlckNvbnRleHQgPSBpbmZlcmVu
Y2VDb250ZXh0OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9kLmlzQ29u
c3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwogCQkJCQlp
bmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwgYXJn
dW1lbnRUeXBlcywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQpOwpA
QCAtMjU0LDExICsyMTgsOSBAQAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0
U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlm
IChmdW5jdGlvblR5cGUgPT0gbnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFs
bHktYXBwbGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0
aW5nIFQgKDE1LjEzLjEpLAotCQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9
IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29u
dGV4dC5zY29wZSk7Ci0JCWlmIChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJl
dHVybiBGQUxTRTsKKwogCQlpZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkg
eworCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0
RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50
cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1td
IHAgPSBmdW5jdGlvblR5cGUucGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0y
NjgsNiArMjMwLDggQEAKIAkJCWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFk
ZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2
ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAh
PSBrKSB7CisJCQkJcmV0dXJuIEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsg
aSA8IG47IGkrKykKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxh
LmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYsMTEg
KzI0MCwxNSBAQAogCQkJCVR5cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxl
LmlzQ29uc3RydWN0b3IoKSAmJiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5j
ZSgpID8gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlB
cHBsaWNhYmxlLnJldHVyblR5cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQp
CiAJCQkJCXJldHVybiBGQUxTRTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0
dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlv
bj8/CisJCQkJVHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250
ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQo
Q29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJ
CX0KIAkJCXJldHVybiBuZXdDb25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVs
YVtuZXdDb25zdHJhaW50cy5zaXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0
aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVU
aW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3Rl
bnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0
YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51
bGwpCisJCQkJcmV0dXJuIEZBTFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJh
bWV0ZXJzLmxlbmd0aDsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICgh
ZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzIxLDcg
KzI4OSw3IEBACiAJCQkJCWluZmVyZW5jZUNvbnRleHQucmVzdW1lU3VzcGVuZGVkSW5mZXJlbmNl
KHByZXZJbnZvY2F0aW9uKTsKIAkJCQl9CiAJCQl9Ci0JCQlUeXBlQmluZGluZyByUHJpbWUgPSBj
b21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xhcmlu
Z0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGU7CisJCQlUeXBlQmluZGluZyByUHJp
bWUgPSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRl
Y2xhcmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGUuY2FwdHVyZShpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKCkpOwogCQkJaWYgKHJQcmltZS5p
ZCA9PSBUeXBlSWRzLlRfdm9pZCkKIAkJCQlyZXR1cm4gRkFMU0U7CiAJCQlyZXR1cm4gQ29uc3Ry
YWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0
KTsKQEAgLTM2NCw2ICszMzIsNyBAQAogCQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxsKSB7CiAJ
CQkvLyBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpOgogCQkJVHlwZUJpbmRpbmcg
cmV0dXJuVHlwZSA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFyaW5nQ2xh
c3MgOiBtZXRob2QucmV0dXJuVHlwZTsKKwkJCQogCQkJaWYgKHJldHVyblR5cGUgPT0gVHlwZUJp
bmRpbmcuVk9JRCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbigiZXhw
cmVzc2lvbiBoYXMgbm8gdmFsdWUiKTsgLy8kTk9OLU5MUy0xJAogCkBAIC0zODQsNyArMzUzLDcg
QEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4dC5hZGRU
eXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJh
bWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJl
dGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6ZWRUeXBl
LmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3Vu
ZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVzdGFibGlzaGVk
OiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0
LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0
dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7
IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKIAkJCQlD
b25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9ybXVs
YS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBpbmZl
cmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJfQpA
QCAtNDA0LDcgKzM3Myw3IEBACiAJCQkJCUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29u
dGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlpZiAoc29s
dXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9
IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5mZXJlbmNl
Q29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFr
ZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0
YW50aWF0aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGlu
dm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5l
d0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUs
IENPTVBBVElCTEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNv
cnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCQl9CkBAIC00ODQsNCArNDUzLDQgQEAKIAkJYnVm
LmFwcGVuZChSSUdIVF9BTkdMRV9CUkFDS0VUKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOwog
CX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJh
aW50VHlwZUZvcm11bGEuamF2YQppbmRleCBjYTNjYzBmLi42OTYwY2E5IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGltcG9ydCBq
YXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8qKgpAQCAt
MzExLDYgKzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZvcm11bGEu
Y3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUsIHRoaXMu
aXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGluZy5QT0xZ
X1RZUEU6CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5nKSBzdXBl
ckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgcG9s
eS5leHByZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRpb24uYmlu
ZGluZyhzdWJDYW5kaWRhdGUsIGZhbHNlLCBzY29wZSk7CisJCQkJaWYgKGJpbmRpbmcgPT0gbnVs
bCB8fCAhYmluZGluZy5pc1ZhbGlkQmluZGluZygpKQorCQkJCQlyZXR1cm4gRkFMU0U7CisJCQkJ
cmV0dXJuIHJlZHVjZVN1YlR5cGUoc2NvcGUsIHN1YkNhbmRpZGF0ZSwgYmluZGluZy5yZXR1cm5U
eXBlLmNhcHR1cmUoc2NvcGUsIGludm9jYXRpb24uc291cmNlRW5kKCkpKTsKIAkJfQogCQl0aHJv
dyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCJVbmV4cGVjdGVkIFJIUyAiK3N1cGVyQ2FuZGlk
YXRlKTsgLy8kTk9OLU5MUy0xJAogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJl
bmNlQ29udGV4dDE4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
CmluZGV4IDYxZmJjYzAuLjRkOTk5M2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJl
bmNlQ29udGV4dDE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTgu
amF2YQpAQCAtMjMsMTYgKzIzLDEyIEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxF
eHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
SW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkxhbWJkYUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5NZXNzYWdlU2VuZDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0Lk51bGxBbm5vdGF0aW9uTWF0Y2hpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZWZlcmVuY2VFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuU3RhdGVtZW50OwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU29ydGluZzsKIApAQCAtOTUsNDEgKzkx
LDkgQEAKICAqIDxkdD4xOC41LjQgTW9yZSBTcGVjaWZpYyBNZXRob2QgSW5mZXJlbmNlPC9kdD4K
ICAqIDxkZD48ZW0+Tm90IFlldCBJbXBsZW1lbnRlZDwvZW0+PC9kZD4KICAqIDwvZGw+Ci0gKiBG
b3IgMTguNS4xIGFuZCAxOC41LjIgc29tZSBoaWdoLWxldmVsIGNvbnRyb2wgaXMgaW1wbGVtZW50
ZWQgaW4KLSAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nI2NvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlLCBJ
bnZvY2F0aW9uU2l0ZSwgaW50KX0uCisgKiBGb3IgMTguNS4xIGFuZCAxOC41LjIgaGlnaC1sZXZl
bCBjb250cm9sIGlzIGltcGxlbWVudGVkIGluCisgKiAge0BsaW5rIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyNjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nLCBU
eXBlQmluZGluZ1tdLCBTY29wZSwgSW52b2NhdGlvblNpdGUpfS4KICAqIDxoMj5JbmZlcmVuY2Ug
TGlmZWN5Y2xlPC9oMj4KLSAqIFRoZSBzZXBhcmF0aW9uIGludG8gMTguNS4xIGFuZCAxOC41LjIg
Y2F1c2VzIHNvbWUgY29tcGxleGl0eToKLSAqIDx1bD4KLSAqIDxsaT5DYWxsaW5nIGJvdGggcGFy
dHMgb2YgaW5mZXJlbmNlIGlzIGRpcmVjdGx5IGludGVyd292ZW4gd2l0aCBvdmVybG9hZCByZXNv
bHV0aW9uLiBTZWUgCi0gKiB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
I2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNj
b3BlLCBJbnZvY2F0aW9uU2l0ZSwgaW50KQotICogCQlQR01CI2NvbXB1dGVDb21wYXRpYmxlTWV0
aG9kKCl9IGZvciB0aGUgYmFzaWMgPGI+cHJvdG9jb2w8L2I+LjwvbGk+Ci0gKiA8bGk+SW50ZXJt
ZWRpYXRlIDxiPnN0YXRlPC9iPiByZWdhcmRpbmcgaW5mZXJlbmNlIG11c3QgYmUgc3RvcmVkIGJl
dHdlZW4gYm90aCBwaGFzZXMuIEluZmVyZW5jZSBpcyBwZXJmb3JtZWQgd2l0aCBkaWZmZXJlbnQK
LSAqICAgaW5wdXRzIGZvciBlYWNoIHBhaXIgb2Yge0BsaW5rIEludm9jYXRpb259IHgge0BsaW5r
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZ30sCi0gKiAgICBzZWUge0BsaW5rIElu
dm9jYXRpb24jcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZywgSW5mZXJlbmNlQ29udGV4dDE4KSBJbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJl
bmNlQ29udGV4dCgpfSBhbmQKLSAqICAgIHtAbGluayBJbnZvY2F0aW9uI2dldEluZmVyZW5jZUNv
bnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGdldEluZmVyZW5jZUNvbnRleHQoKX0u
PGJyLz4KLSAqICAgIEFzIHBhcnQgb2YgdGhlIGxpZmVjeWNsZSBzdGF0ZSwgZWFjaCBpbnN0YW5j
ZSBvZiBJbmZlcmVuY2VDb250ZXh0MTggcmVtZW1iZXJzIHRoZSBjdXJyZW50IHtAbGluayAjaW5m
ZXJlbmNlS2luZH0KLSAqICAgIGFuZCB7QGxpbmsgI3N0ZXBDb21wbGV0ZWR9LjwvbGk+Ci0gKiA8
bGk+PGI+TmVzdGVkIGluZmVyZW5jZS9yZXNvbHZpbmc8L2I+OiBJZiBhbiBpbnZvY2F0aW9uIGFy
Z3VtZW50IGlzIGEgcG9seSBleHByZXNzaW9uIGl0c2VsZiwgZmluYWwgcmVzb2x2aW5nIG9mIHRo
ZSBhcmd1bWVudCBjYW4gb25seSBoYXBwZW5lZAotICogICAgYWZ0ZXIgSW52b2NhdGlvbiBUeXBl
IEluZmVyZW5jZSByZWdhcmRpbmcgdGhlIG91dGVyIGludm9jYXRpb24uIE91dGVyIGluZmVyZW5j
ZSBtdXN0IHByb2R1Y2UgdGhlIDxiPnRhcmdldCB0eXBlPC9iPiB0aGF0IGRyaXZlcwotICogICAg
dGhlIGlubmVyIGluZmVyZW5jZSAvIHJlc29sdmluZy4gVHdvIGRpZmZlcmVudCBwcm90b2NvbHMg
YXJlIGFwcGxpZWQ6Ci0gKiAgICA8dWw+Ci0gKiAgICA8bGk+SWYgdGhlIGlubmVyIHBvbHkgZXhw
cmVzc2lvbiBpcyBhbiBpbnZvY2F0aW9uLCBpbm5lciBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW5j
b3Jwb3JhdGVkIGludG8KLSAqICAgICAgdGhlIHtAbGluayAjY3VycmVudEJvdW5kc30sIHNlZSBi
bG9jayBpbnNpZGUge0BsaW5rIENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSNyZWR1Y2UoSW5m
ZXJlbmNlQ29udGV4dDE4KX0uPGJyLz4KLSAqICAgICAgSW4gdGhpcyBjYXNlIHRoZSByZXN1bHRz
IG9mIHRoZSBjb21iaW5lZCBpbmZlcmVuY2UgbmVlZCB0byBiZSBhcHBsaWVkIHRvIGFsbCBjb250
YWluZWQgaW5uZXIgaW52b2NhdGlvbnMsCi0gKiAgICAgIHdoaWNoIGhhcHBlbnMgaW4ge0BsaW5r
ICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LCB3aGljaCBtdXN0
IGJlIGNhbGxlZCB3aGVuZXZlcgotICogICAgICAxOC41LjIgZmluaXNoZXMuPC9saT4KLSAqICAg
IDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHByZXNzaW9uIGlzIGEgZnVuY3Rpb25hbCBleHByZXNz
aW9uIG9yIGEgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBubyBpbmZlcmVuY2UgdmFyaWFibGVzCi0g
KiAgICAgIGV4aXN0IHJlcHJlc2VudGluZyB0aGUgaW5uZXIuIEluIHRoaXMgY2FzZSB0aGUgZmlu
YWwgdGFyZ2V0IHR5cGUgaXMgcHVzaGVkIGludG8gdGhlIGlubmVyIHVzaW5nCi0gKiAgICAgIHtA
bGluayBFeHByZXNzaW9uI2NoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZywg
U2NvcGUpfSwgd2hpY2gsIHRvbywgaXMgY2FsbGVkIGZyb20gCi0gKiAgICAgIHtAbGluayAjcmVi
aW5kSW5uZXJQb2xpZXMoQm91bmRTZXQsIFR5cGVCaW5kaW5nW10pfS48L2xpPgotICogICAgPGxp
PkZvciByZWN1cnNpdmVseSBwdXNoaW5nIHRhcmdldCB0eXBlcyBpbnRvIGFyZ3VtZW50cyBvZiBh
biBpbnZvY2F0aW9uCi0gKiAgICAJbWV0aG9kIHtAbGluayBBU1ROb2RlI3Jlc29sdmVQb2x5RXhw
cmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1td
LCBTY29wZSl9IGV4aXN0cywKLSAqICAgIAl3aGljaCBpcyBjYWxsZWQgaW4gdHdvIHNpdHVhdGlv
bnM6ICgxKSBmb3Igbm9uLWdlbmVyaWMgb3V0ZXIgaW52b2NhdGlvbnMgZnJvbSBNZXNzYWdlU2Vu
ZCNmaW5kTWV0aG9kQmluZGluZygpIGFuZAotICogICAgCVN0YXRlbWVudCNmaW5kQ29uc3RydWN0
b3JCaW5kaW5nKCk7ICgyKSBmb3IgZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIHtAbGlu
ayAjcmViaW5kSW5uZXJQb2xpZXMoQm91bmRTZXQsIFR5cGVCaW5kaW5nW10pfS48L2xpPgotICog
ICAgPGxpPkluIHNvbWUgc2l0dWF0aW9ucyBpbnZvY2F0aW9uIGFyZ3VtZW50cyB0aGF0IGFyZSBw
b2x5IGludm9jYXRpb25zIG5lZWQgdG8gYmUgcmVzb2x2ZWQgaW4gdGhlIG1pZGRsZSBvZiBvdmVy
bG9hZCByZXNvbHV0aW9uCi0gKiAgICAJdG8gYW5zd2VyIHtAbGluayBTY29wZSNwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwxOH0gKHdoZXJlIHRoZSBvdXRlciBpbnZvY2F0aW9uIGRpZCBub3Qg
aW52b2x2ZSBhbnkgaW5mZXJlbmNlKS48YnIvPgotICogICAgPC91bD4KLSAqICAgIFB1c2hpbmcg
aW5mZXJlbmNlIHJlc3VsdHMgaW50byBhbiBpbm5lciBpbnZvY2F0aW9uIGhhcHBlbnMgdXNpbmcg
e0BsaW5rIEludm9jYXRpb24jdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyxUeXBlQmluZGlu
Zyl9LjwvbGk+CiAgKiA8bGk+RGVjaXNpb24gd2hldGhlciBvciBub3QgYW4gaW52b2NhdGlvbiBp
cyBhIDxiPnZhcmlhYmxlLWFyaXR5PC9iPiBpbnZvY2F0aW9uIGlzIG1hZGUgYnkgZmlyc3QgYXR0
ZW1wdGluZwogICogCQl0byBzb2x2ZSAxOC41LjEgaW4gbW9kZSB7QGxpbmsgI0NIRUNLX0xPT1NF
fS4gT25seSBpZiB0aGF0IGZhaWxzLCBhbm90aGVyIGF0dGVtcHQgaXMgbWFkZSBpbiBtb2RlIHtA
bGluayAjQ0hFQ0tfVkFSQVJHfS4KICAqIAkJV2hpY2ggb2YgdGhlc2UgdHdvIGF0dGVtcHRzIHdh
cyBzdWNjZXNzZnVsIGlzIHN0b3JlZCBpbiB7QGxpbmsgI2luZmVyZW5jZUtpbmR9LgpAQCAtMTY1
LDkgKzEyOSw2IEBACiAJLyoqIFRoZSBhY2N1bXVsYXRlZCB0eXBlIGJvdW5kcyBldGMuICovCiAJ
Qm91bmRTZXQgY3VycmVudEJvdW5kczsKIAotCS8qKiBzb2x1dGlvbiBvZiBhcHBsaWNhYmlsaXR5
IGluZmVyZW5jZSwgc3RvcmVkIGZvciB1c2UgYXMgZmFsbGJhY2ssIGlmIGludm9jYXRpb24gdHlw
ZSBpbmZlcmVuY2UgZmFpbHMuICovCi0JQm91bmRTZXQgc3RvcmVkU29sdXRpb247Ci0KIAkvKiog
Rm9yIGVhY2ggY2FuZGlkYXRlIHRhcmdldCB0eXBlIGltcG9zZWQgZnJvbSB0aGUgb3V0c2lkZSBz
dG9yZSB0aGUgc29sdXRpb24gb2YgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZS4gKi8KIAlNYXA8
VHlwZUJpbmRpbmcsU29sdXRpb24+IHNvbHV0aW9uc1BlclRhcmdldFR5cGUgPSBuZXcgSGFzaE1h
cDxUeXBlQmluZGluZywgU29sdXRpb24+KCk7CiAKQEAgLTE4NiwxNCArMTQ3LDYgQEAKIAkKIAkv
KiogU2lnbmFscyB3aGV0aGVyIGFueSB0eXBlIGNvbXBhdGliaWxpdHkgbWFrZXMgdXNlIG9mIHVu
Y2hlY2tlZCBjb252ZXJzaW9uLiAqLwogCXB1YmxpYyBMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBj
b25zdHJhaW50c1dpdGhVbmNoZWNrZWRDb252ZXJzaW9uOwotCi0JLy8gLS0tCi0KLQkvKiogSW5u
ZXIgcG9seSBpbnZvY2F0aW9ucyB3aGljaCBoYXZlIGJlZW4gaW5jbHVkZWQgaW4gdGhpcyBpbmZl
cmVuY2UuICovCi0JTGlzdDxJbnZvY2F0aW9uU2l0ZT4gaW5uZXJQb2xpZXMgPSBuZXcgQXJyYXlM
aXN0PEludm9jYXRpb25TaXRlPigpOwotCS8qKiBMaW5rIHRvIGFuIG91dGVyIGluZmVyZW5jZSBj
b250ZXh0LCB1c2VkIGZvciBidW5kbGVkIGVycm9yIHJlcG9ydGluZy4gKi8KLQlwdWJsaWMgSW5m
ZXJlbmNlQ29udGV4dDE4IG91dGVyQ29udGV4dDsKLQlwcml2YXRlIEFycmF5TGlzdDxNZXRob2RC
aW5kaW5nPiBwcm9ibGVtTWV0aG9kczsKIAogCVNjb3BlIHNjb3BlOwogCUxvb2t1cEVudmlyb25t
ZW50IGVudmlyb25tZW50OwpAQCAtMzUzLDcgKzMwNiw3IEBACiAJCXJldHVybiBuZXdWYXJpYWJs
ZXM7CiAJfQogCi0JLyoqIEpMUyAxOC4xLjMgQm91bmRzOiB0aHJvd3MgzrE6IHRoZSBpbmZlcmVu
Y2UgdmFyaWFibGUgzrEgYXBwZWFycyBpbiBhIHRocm93cyBjbGF1c2UgKi8KKwkvKiogSkxTIDE4
LjEuMyBCb3VuZHM6IHRocm93cyBhOiB0aGUgaW5mZXJlbmNlIHZhcmlhYmxlIGEgYXBwZWFycyBp
biBhIHRocm93cyBjbGF1c2UgKi8KIAlwdWJsaWMgdm9pZCBhZGRUaHJvd3NDb250cmFpbnRzKFR5
cGVCaW5kaW5nW10gcGFyYW1ldGVycywgSW5mZXJlbmNlVmFyaWFibGVbXSB2YXJpYWJsZXMsIFJl
ZmVyZW5jZUJpbmRpbmdbXSB0aHJvd25FeGNlcHRpb25zKSB7CiAJCWZvciAoaW50IGkgPSAwOyBp
IDwgcGFyYW1ldGVycy5sZW5ndGg7IGkrKykgewogCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyID0g
cGFyYW1ldGVyc1tpXTsKQEAgLTM3Miw3ICszMjUsNiBAQAogCX0KIAogCS8qKiBKTFMgMTguNS4y
IEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgCi0JICogPHA+Q2FsbGVycyBhcmUgcmVzcG9uc2li
bGUgZm9yIGFueSBwb3N0LXByb2Nlc3NpbmcgKHNlZSB7QGxpbmsgI3JlYmluZElubmVyUG9saWVz
KEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0pLjwvcD4KIAkgKiBAcGFyYW0gYjEgInRoZSBib3Vu
ZCBzZXQgcHJvZHVjZWQgYnkgcmVkdWN0aW9uIGluIG9yZGVyIHRvIGRlbW9uc3RyYXRlIHRoYXQg
bSBpcyBhcHBsaWNhYmxlIGluIDE4LjUuMSIKIAkgKi8KIAlwdWJsaWMgQm91bmRTZXQgaW5mZXJJ
bnZvY2F0aW9uVHlwZShCb3VuZFNldCBiMSwgVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlLCBJbnZv
Y2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0aG9kQmluZGluZyBtZXRob2QpCkBAIC0zOTgs
OSArMzUwLDkgQEAKIAkJCX0KIAkJCS8vIDQuIGJ1bGxldDogYXNzZW1ibGUgQzoKIAkJCVNldDxD
b25zdHJhaW50Rm9ybXVsYT4gYyA9IG5ldyBIYXNoU2V0PENvbnN0cmFpbnRGb3JtdWxhPigpOwot
CQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQyh0aGlzLmludm9jYXRpb25Bcmd1bWVudHMsIGMsIG1l
dGhvZCwgdGhpcy5pbmZlcmVuY2VLaW5kKSkKKwkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhp
cy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCwgZmFs
c2UgLyogaW5mZXJlbmNlIGNvbnRleHQgYWxyZWFkeSBoYXZlIHRoZSBpbmZlcmVuY2UgdmFyaWFi
bGVzIGZvciBtZXRob2QgKi8pKQogCQkJCXJldHVybiBudWxsOwotCQkJLy8gNS4gYnVsbGV0OiBk
ZXRlcm1pbmUgQjMgZnJvbSBDCisJCQkvLyA1LiBidWxsZXQ6IGRldGVybWluZSBCNCBmcm9tIEMK
IAkJCXdoaWxlICghYy5pc0VtcHR5KCkpIHsKIAkJCQkvLyAqCiAJCQkJU2V0PENvbnN0cmFpbnRG
b3JtdWxhPiBib3R0b21TZXQgPSBmaW5kQm90dG9tU2V0KGMsIGFsbE91dHB1dFZhcmlhYmxlcyhj
KSk7CkBAIC00MDksNyArMzYxLDcgQEAKIAkJCQl9CiAJCQkJLy8gKgogCQkJCWMucmVtb3ZlQWxs
KGJvdHRvbVNldCk7Ci0JCQkJLy8gKiBUaGUgdW5pb24gb2YgdGhlIGlucHV0IHZhcmlhYmxlcyBv
ZiBhbGwgdGhlIHNlbGVjdGVkIGNvbnN0cmFpbnRzLCDOsTEsIC4uLiwgzrFtLCAuLi4KKwkJCQkv
LyAqIFRoZSB1bmlvbiBvZiB0aGUgaW5wdXQgdmFyaWFibGVzIG9mIGFsbCB0aGUgc2VsZWN0ZWQg
Y29uc3RyYWludHMsIGExLCAuLi4sIGFtLCAuLi4KIAkJCQlTZXQ8SW5mZXJlbmNlVmFyaWFibGU+
IGFsbElucHV0cyA9IG5ldyBIYXNoU2V0PEluZmVyZW5jZVZhcmlhYmxlPigpOwogCQkJCUl0ZXJh
dG9yPENvbnN0cmFpbnRGb3JtdWxhPiBib3R0b21JdCA9IGJvdHRvbVNldC5pdGVyYXRvcigpOwog
CQkJCXdoaWxlIChib3R0b21JdC5oYXNOZXh0KCkpIHsKQEAgLTQ1MCw3ICs0MDIsMTAgQEAKIAkJ
fQogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQyhFeHByZXNzaW9uW10g
ZXhwcnMsIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgTWV0aG9kQmluZGluZyBtZXRob2QsIGlu
dCBpbmZlcmVuY2VLaW5kRm9yTWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFp
bnRzVG9DKEV4cHJlc3Npb25bXSBleHBycywgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBNZXRo
b2RCaW5kaW5nIG1ldGhvZCwgaW50IGluZmVyZW5jZUtpbmRGb3JNZXRob2QsIGJvb2xlYW4gbGlm
dEluZmVyZW5jZVZhcmlhYmxlcykgeworCQlpZiAobGlmdEluZmVyZW5jZVZhcmlhYmxlcykgewor
CQkJY3JlYXRlSW5pdGlhbEJvdW5kU2V0KG1ldGhvZC50eXBlVmFyaWFibGVzKCkpOworCQl9CiAJ
CVR5cGVCaW5kaW5nW10gZnM7CiAJCWlmIChleHBycyAhPSBudWxsKSB7CiAJCQlpbnQgayA9IGV4
cHJzLmxlbmd0aDsKQEAgLTQ3MSwxNSArNDI2LDE1IEBACiAJCQlmb3IgKGludCBpID0gMDsgaSA8
IGs7IGkrKykgewogCQkJCVR5cGVCaW5kaW5nIGZzaSA9IGZzW01hdGgubWluKGksIHAtMSldOwog
CQkJCVR5cGVCaW5kaW5nIHN1YnN0RiA9IHN1YnN0aXR1dGUoZnNpKTsKLQkJCQlpZiAoIWFkZENv
bnN0cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0sIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpKQor
CQkJCWlmICghYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihleHByc1tpXSwgYywgZnNpLCBzdWJz
dEYsIG1ldGhvZCwgbGlmdEluZmVyZW5jZVZhcmlhYmxlcykpCiAJCQkJCXJldHVybiBmYWxzZTsK
IAkgICAgICAgIH0KIAkJfQogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKLQlwcml2YXRlIGJvb2xlYW4g
YWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihFeHByZXNzaW9uIGV4cHJpLCBTZXQ8Q29uc3RyYWlu
dEZvcm11bGE+IGMsIFR5cGVCaW5kaW5nIGZzaSwgVHlwZUJpbmRpbmcgc3Vic3RGLCBNZXRob2RC
aW5kaW5nIG1ldGhvZCkgewotCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBp
cyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg
4oaSIM64IEZp4p+pLgorCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHBy
KEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcg
ZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBib29sZWFuIGxp
ZnRJbmZlcmVuY2VWYXJpYWJsZXMpIHsKKwkJLy8gRm9yIGFsbCBpICgxID0gaSA9IGspLCBpZiBl
aSBpcyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMgP2Vp
ID8gPyBGaT8uCiAJCWlmICghZXhwcmkuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoZnNpLCBt
ZXRob2QpKSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGV4cHJp
LCBzdWJzdEYsIFJlZHVjdGlvblJlc3VsdC5DT01QQVRJQkxFLCBBUkdVTUVOVF9DT05TVFJBSU5U
U19BUkVfU09GVCkpOwogCQl9CkBAIC00ODcsMTAzICs0NDIsMTkgQEAKIAkJCWMuYWRkKG5ldyBD
b25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYSgoRnVuY3Rpb25hbEV4cHJlc3Npb24pIGV4cHJpLCBz
dWJzdEYpKTsKIAkJfSBlbHNlIGlmIChleHByaSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgZXhw
cmkuaXNQb2x5RXhwcmVzc2lvbigpKSB7CiAJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52
b2NhdGlvbikgZXhwcmk7Ci0JCQlNZXRob2RCaW5kaW5nIGlubmVyTWV0aG9kID0gaW52b2NhdGlv
bi5iaW5kaW5nKG51bGwsIGZhbHNlLCBudWxsKTsKKwkJCU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRo
b2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcoc3Vic3RGLCBmYWxzZSwgdGhpcy5zY29wZSk7CiAJCQlp
ZiAoaW5uZXJNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIHsKIAkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldElu
ZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBpbm5lck1ldGhvZCk7
CiAJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwpIHsgLy8gb3RoZXJ3aXNlIGlubmVyTWV0aG9kIGRv
ZXMgbm90IHBhcnRpY2lwYXRlIGluIGluZmVyZW5jZQotCQkJCQlyZXR1cm4gYWRkQ29uc3RyYWlu
dHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywgaW5uZXJNZXRob2QuZ2VuZXJpY01ldGhv
ZCgpLCBpbm5lckN0eC5pbmZlcmVuY2VLaW5kKTsKKwkJCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRz
VG9DKGludm9jYXRpb24uYXJndW1lbnRzKCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNNZXRob2Qo
KSwgaW5uZXJDdHguaW5mZXJlbmNlS2luZCwgbGlmdEluZmVyZW5jZVZhcmlhYmxlcyB8IHN1YnN0
Ri5pc1Byb3BlclR5cGUodHJ1ZSkpOwogCQkJCX0KIAkJCX0KIAkJfSBlbHNlIGlmIChleHByaSBp
bnN0YW5jZW9mIENvbmRpdGlvbmFsRXhwcmVzc2lvbikgewogCQkJQ29uZGl0aW9uYWxFeHByZXNz
aW9uIGNlID0gKENvbmRpdGlvbmFsRXhwcmVzc2lvbikgZXhwcmk7Ci0JCQlyZXR1cm4gYWRkQ29u
c3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhv
ZCkKLQkJCQkgJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmRmFsc2UsIGMs
IGZzaSwgc3Vic3RGLCBtZXRob2QpOworCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4
cHIoY2UudmFsdWVJZlRydWUsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGxpZnRJbmZlcmVuY2VW
YXJpYWJsZXMpCisJCQkJICYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZkZh
bHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKTsKIAkJ
fQogCQlyZXR1cm4gdHJ1ZTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1wbGlmaWVkIEFQSSB0byBwZXJm
b3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIpCi0JICogYW5kIHBlcmZv
cm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmluZGluZyBvZiBpbm5lciBwb2x5
IGV4cHJlc3Npb25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHByb2JsZW0gbWV0aG9kIGJpbmRp
bmcgaWYgbmVlZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgaW5mZXJlbmNl
IGhhcyBub3QgeWV0IGZpbmlzaGVkLgotCSAqIEBwYXJhbSBpbnZvY2F0aW9uIGludm9jYXRpb24g
YmVpbmcgaW5mZXJyZWQKLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyBhcmd1bWVudHMgYmVpbmcg
cGFzc2VkIGludG8gdGhlIGludm9jYXRpb24KLQkgKiBAcGFyYW0gbWV0aG9kIGN1cnJlbnQgY2Fu
ZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9jYXRpb24KLQkgKiBAcmV0dXJuIGEg
dmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1ldGVycywKLQkgKiAJ
b3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGluZyBlaXRoZXIgaW5mZXJlbmNlIGZh
aWx1cmUgb3IgYSBib3VuZCBtaXNtYXRjaC4KLQkgKi8KLQkvKkBOb25OdWxsKi8gTWV0aG9kQmlu
ZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb24gaW52b2NhdGlvbiwgVHlwZUJpbmRp
bmdbXSBhcmd1bWVudFR5cGVzLCBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0
aG9kKSB7Ci0JCS8vIFRPRE8gb3B0aW1pemU6IGlmIG91dGVyQ29udGV4dCBleGlzdHMgYW5kIGlz
IHJlc29sdmVkLCB3ZSBwcm9iYWJseSBkb24ndCBuZWVkIHRvIGluZmVyIGFnYWluLgotCQlUeXBl
QmluZGluZyB0YXJnZXRUeXBlID0gaW52b2NhdGlvbi5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwot
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZmluYWxNZXRob2QgPSBudWxsOwot
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhv
ZDsKLQkJCi0JCWJvb2xlYW4gaGF2ZVByb3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51
bGwgJiYgdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSk7Ci0JCWlmIChoYXZlUHJvcGVyVGFy
Z2V0VHlwZSB8fCAhaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJn
ZXRUeXBlKCkpIHsKLQkJCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBtZXRob2Qub3JpZ2luYWxN
ZXRob2Q7Ci0JCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlw
ZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQlCb3VuZFNldCByZXN1bHQgPSBzb2x1dGlvbiAhPSBudWxs
ID8gc29sdXRpb24uYm91bmRzIDogbnVsbDsKLQkJCWlmIChyZXN1bHQgPT0gbnVsbCkgewotCQkJ
CS8vIHN0YXJ0IG92ZXIgZnJvbSBhIHByZXZpb3VzIGNhbmRpZGF0ZSBidXQgZGlzY2FyZCBpdHMg
dHlwZSB2YXJpYWJsZSBpbnN0YW50aWF0aW9ucwotCQkJCS8vIFRPRE86IHNob3VsZCB3ZSByZXRh
aW4gYW55IGluc3RhbnRpYXRpb25zIG9mIHR5cGUgdmFyaWFibGVzIG5vdCBvd25lZCBieSB0aGUg
bWV0aG9kPyAKLQkJCQl0cnkgewotCQkJCQlyZXN1bHQgPSBpbmZlckludm9jYXRpb25UeXBlKHRo
aXMuY3VycmVudEJvdW5kcywgdGFyZ2V0VHlwZSwgaW52b2NhdGlvbiwgb3JpZ2luYWwpOwotCQkJ
CX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBubyBzb2x1
dGlvbiwgYnV0IGRvIG1vcmUgY2hlY2tzIGJlbG93Ci0JCQkJfQotCQkJfQotCQkJaWYgKHJlc3Vs
dCAhPSBudWxsKSB7Ci0JCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBnZXRTb2x1dGlvbnMo
b3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCBpbnZvY2F0aW9uLCByZXN1bHQpOwotCQkJCWlmIChz
b2x1dGlvbnMgIT0gbnVsbCkgewotCQkJCQlmaW5hbE1ldGhvZCA9IHRoaXMuZW52aXJvbm1lbnQu
Y3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWwsIHNvbHV0aW9ucyk7Ci0J
CQkJCWlmICh0aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5ub3RhdGlvbkJhc2VkTnVs
bEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JD
b250cmFkaXRpb25zKGZpbmFsTWV0aG9kLCBpbnZvY2F0aW9uLCB0aGlzLnNjb3BlKTsKLQkJCQkJ
aW52b2NhdGlvbi5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQoZmluYWxNZXRob2QsIHRoaXMpOwot
CQkJCQl0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUucHV0KHRhcmdldFR5cGUsIG5ldyBTb2x1
dGlvbihmaW5hbE1ldGhvZCwgcmVzdWx0KSk7Ci0JCQkJfQotCQkJfQotCQkJaWYgKGZpbmFsTWV0
aG9kICE9IG51bGwpCi0JCQkJbWV0aG9kVG9DaGVjayA9IGZpbmFsTWV0aG9kOwotCQl9IGVsc2Ug
ewotCQkJZmluYWxNZXRob2QgPSBtZXRob2Q7Ci0JCX0KLQkJCi0JCU1ldGhvZEJpbmRpbmcgcHJv
YmxlbU1ldGhvZCA9IG1ldGhvZFRvQ2hlY2suYm91bmRDaGVjazE4KHRoaXMuc2NvcGUsIGFyZ3Vt
ZW50VHlwZXMpOwotCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQotCQkJcmV0dXJuIHByb2Js
ZW1NZXRob2Q7Ci0KLQkJaWYgKCFoYXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9uLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkKLQkJCXJldHVybiBtZXRo
b2Q7IC8vIHN0aWxsIG5vdCByZWFkeSEKLQotCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkgewot
CQkJaWYgKHJlYmluZElubmVyUG9saWVzKGZpbmFsTWV0aG9kLCBpbnZvY2F0aW9uKSkKLQkJCQly
ZXR1cm4gZmluYWxNZXRob2Q7Ci0JCX0KLQkJcmV0dXJuIGdldFJldHVyblByb2JsZW1NZXRob2RJ
Zk5lZWRlZCh0YXJnZXRUeXBlLCBtZXRob2QpOwotCX0KLQotCS8qKgotCSAqIFNpbXBsaWZpZWQg
QVBJIHRvIHBlcmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikKLQkg
KiBhbmQgcGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywgcmViaW5kaW5nIG9m
IGlubmVyIHBvbHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxlbSBt
ZXRob2QgYmluZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRo
ZSBpbmZlcmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogVmVyc2lvbiB1c2VkIGZvciBp
bm5lciBpbnZvY2F0aW9ucywgd2hlcmUgYXJndW1lbnQgdHlwZXMgbmVlZCB0byBiZSBleHRyYWN0
ZWQKLQkgKiBmcm9tIGFjdHVhbCBpbnZvY2F0aW9uIGFyZ3VtZW50cy4KLQkgKiBAcGFyYW0gaW52
b2NhdGlvbiBpbnZvY2F0aW9uIGJlaW5nIGluZmVycmVkCi0JICogQHBhcmFtIG1ldGhvZCBjdXJy
ZW50IGNhbmRpZGF0ZSBtZXRob2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogQHJl
dHVybiBhIHZhbGlkIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMs
Ci0JICogCW9yIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcgZWl0aGVyIGluZmVy
ZW5jZSBmYWlsdXJlIG9yIGEgYm91bmQgbWlzbWF0Y2guCi0JICovCi0JcHVibGljIC8qQE5vbk51
bGwqLyBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvbiBpbnZvY2F0
aW9uLCBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCVR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBhcmd1bWVudHMg
PSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoYXJndW1lbnRzICE9IG51bGwpIHsKLQkJ
CWFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxlbmd0aF07Ci0JCQlm
b3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKLQkJCQlhcmd1bWVudFR5
cGVzW2ldID0gYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKLQkJfQotCQlyZXR1cm4gaW5mZXJJ
bnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzLCBtZXRob2QpOwogCX0KIAog
CXB1YmxpYyBib29sZWFuIGhhc1Jlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CkBA
IC01OTEsNiArNDYyLDEwIEBACiAJCQlyZXR1cm4gdGhpcy5zdGVwQ29tcGxldGVkID49IFRZUEVf
SU5GRVJSRUQ7CiAJCWVsc2UKIAkJCXJldHVybiB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUu
Y29udGFpbnNLZXkodGFyZ2V0VHlwZSk7CisJfQorCQorCXB1YmxpYyBTb2x1dGlvbiBnZXRSZXN1
bHRGb3IoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCQlyZXR1cm4gdGhpcy5zb2x1dGlvbnNQ
ZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKIAl9CiAKIAlwdWJsaWMgYm9vbGVhbiByZWdp
c3RlclNvbHV0aW9uKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgdXBkYXRl
ZEJpbmRpbmcpIHsKQEAgLTYyNiw3ICs1MDEsNyBAQAogCS8qKgogCSAqIENyZWF0ZSBpbml0aWFs
IGJvdW5kIHNldCBmb3IgMTguNS4zIEZ1bmN0aW9uYWwgSW50ZXJmYWNlIFBhcmFtZXRlcml6YXRp
b24gSW5mZXJlbmNlCiAJICogQHBhcmFtIGZ1bmN0aW9uYWxJbnRlcmZhY2UgdGhlIGZ1bmN0aW9u
YWwgaW50ZXJmYWNlIEY8QTEsLi5BbT4KLQkgKiBAcmV0dXJuIHRoZSBwYXJhbWV0ZXIgdHlwZXMg
UTEuLlFrIG9mIHRoZSBmdW5jdGlvbiB0eXBlIG9mIHRoZSB0eXBlIEY8zrExLCAuLi4sIM6xbT4s
IG9yIG51bGwgCisJICogQHJldHVybiB0aGUgcGFyYW1ldGVyIHR5cGVzIFExLi5RayBvZiB0aGUg
ZnVuY3Rpb24gdHlwZSBvZiB0aGUgdHlwZSBGPGExLCAuLi4sIGFtPiwgb3IgbnVsbCAKIAkgKi8K
IAlUeXBlQmluZGluZ1tdIGNyZWF0ZUJvdW5kc0ZvckZ1bmN0aW9uYWxJbnRlcmZhY2VQYXJhbWV0
ZXJpemF0aW9uSW5mZXJlbmNlKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBmdW5jdGlvbmFsSW50
ZXJmYWNlKSB7CiAJCWlmICh0aGlzLmN1cnJlbnRCb3VuZHMgPT0gbnVsbCkKQEAgLTEwNzAsNyAr
OTQ1LDcgQEAKIAkvLyA9PT0gPT09CiAJCiAJcHJpdmF0ZSBib29sZWFuIHNldFVwcGVyQm91bmRz
KENhcHR1cmVCaW5kaW5nMTggdHlwZVZhcmlhYmxlLCBUeXBlQmluZGluZ1tdIHN1YnN0aXR1dGVk
VXBwZXJCb3VuZHMpIHsKLQkJLy8gMTguNDogLi4uIGRlZmluZSB0aGUgdXBwZXIgYm91bmQgb2Yg
WmkgYXMgZ2xiKEwxzrgsIC4uLiwgTGvOuCkKKwkJLy8gMTguNDogLi4uIGRlZmluZSB0aGUgdXBw
ZXIgYm91bmQgb2YgWmkgYXMgZ2xiKEwxPywgLi4uLCBMaz8pCiAJCWlmIChzdWJzdGl0dXRlZFVw
cGVyQm91bmRzLmxlbmd0aCA9PSAxKSB7CiAJCQl0eXBlVmFyaWFibGUuc2V0VXBwZXJCb3VuZHMo
c3Vic3RpdHV0ZWRVcHBlckJvdW5kcywgdGhpcy5vYmplY3QpOyAvLyBzaG9ydGN1dAogCQl9IGVs
c2UgewpAQCAtMTE5NCw3ICsxMDY5LDcgQEAKIAkJaWYgKGNhbmRpZGF0ZXNJSS5pc0VtcHR5KCkp
CiAJCQljYW5kaWRhdGVzSUkgPSBjOyAvLyBub3Qgc3BlYydlZCBidXQgbmVlZGVkIHRvIGF2b2lk
IHJldHVybmluZyBudWxsIGJlbG93LCB3aXRuZXNzOiBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3Rv
cnMKIAkJCi0JCS8vIHRlbnRhdGl2ZWx5OiAoaWlpKSAgaGFzIHRoZSBmb3JtIOKfqEV4cHJlc3Np
b24g4oaSIFTin6kKKwkJLy8gdGVudGF0aXZlbHk6IChpaWkpICBoYXMgdGhlIGZvcm0gP0V4cHJl
c3Npb24gPyBUPwogCQlTZXQ8Q29uc3RyYWludEZvcm11bGE+IGNhbmRpZGF0ZXNJSUkgPSBuZXcg
SGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKIAkJZm9yIChDb25zdHJhaW50Rm9ybXVsYSBj
YW5kaWRhdGUgOiBjYW5kaWRhdGVzSUkpIHsKIAkJCWlmIChjYW5kaWRhdGUgaW5zdGFuY2VvZiBD
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEpCkBAIC0xMjAyLDcgKzEwNzcsNyBAQAogCQl9CiAJ
CWlmIChjYW5kaWRhdGVzSUlJLmlzRW1wdHkoKSkgewogCQkJY2FuZGlkYXRlc0lJSSA9IGNhbmRp
ZGF0ZXNJSTsgLy8gbm8gY29uc3RyYWludCBmdWxmaWxscyAoaWlpKSAtPiBpZ25vcmUgdGhpcyBj
b25kaXRpb24KLQkJfSBlbHNlIHsgLy8gY2FuZGlkYXRlc0lJSSBjb250YWlucyBhbGwgcmVsZXZh
bnQgY29uc3RyYWludHMg4p+oRXhwcmVzc2lvbiDihpIgVOKfqQorCQl9IGVsc2UgeyAvLyBjYW5k
aWRhdGVzSUlJIGNvbnRhaW5zIGFsbCByZWxldmFudCBjb25zdHJhaW50cyA/RXhwcmVzc2lvbiA/
IFQ/CiAJCQkvLyAoaXYpIGNvbnRhaW5zIGFuIGV4cHJlc3Npb24gdGhhdCBhcHBlYXJzIHRvIHRo
ZSBsZWZ0IG9mIHRoZSBleHByZXNzaW9uCiAJCQkvLyAJCW9mIGV2ZXJ5IG90aGVyIGNvbnN0cmFp
bnQgc2F0aXNmeWluZyB0aGUgcHJldmlvdXMgdGhyZWUgcmVxdWlyZW1lbnRzCiAJCQkKQEAgLTEz
NjYsOCArMTI0MSw2IEBACiAJCXRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9IGlubmVyQXJndW1l
bnRzOwogCQl0aGlzLmN1cnJlbnRJbnZvY2F0aW9uID0gaW52b2NhdGlvbjsKIAkJCi0JCS8vIHNj
aGVkdWxlIGZvciByZS1iaW5kaW5nIHRoZSBpbm5lciBhZnRlciBpbmZlcmVuY2Ugc3VjY2VzczoK
LQkJdGhpcy5pbm5lclBvbGllcy5hZGQoaW52b2NhdGlvbik7CiAJCXJldHVybiByZWNvcmQ7CiAJ
fQogCQpAQCAtMTM5NSwxNDUgKzEyNjgsNiBAQAogCQl0aGlzLmN1cnJlbnRJbnZvY2F0aW9uID0g
cmVjb3JkLnNpdGU7CiAJCXRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9IHJlY29yZC5pbnZvY2F0
aW9uQXJndW1lbnRzOwogCQl0aGlzLmluZmVyZW5jZUtpbmQgPSByZWNvcmQuaW5mZXJlbmNlS2lu
ZDsKLQl9Ci0KLQlwdWJsaWMgYm9vbGVhbiByZWJpbmRJbm5lclBvbGllcyhNZXRob2RCaW5kaW5n
IG1ldGhvZCwgSW52b2NhdGlvblNpdGUgc2l0ZSkgewotCQlCb3VuZFNldCBib3VuZHMgPSB0aGlz
LmN1cnJlbnRCb3VuZHM7Ci0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBzaXRlLmludm9jYXRp
b25UYXJnZXRUeXBlKCk7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwgfHwgIXRhcmdldFR5cGUu
aXNQcm9wZXJUeXBlKHRydWUpKSB7Ci0JCQlpZiAoIXNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQo
KS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7Ci0JCQkJLy8gaW4gdGhpcyBjYXNlIHdlIG1heSBub3Qg
eWV0IGhhdmUgdGhlIHNvbHV0aW9uKD8sIGdldCBvciBjb21wdXRlIGl0IG5vdzoKLQkJCQlTb2x1
dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlw
ZSk7Ci0JCQkJdHJ5IHsKLQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgc29sdXRpb24uYm91
bmRzICE9IG51bGwpCi0JCQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3VuZHM7Ci0JCQkJCWVsc2UK
LQkJCQkJCWJvdW5kcyA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCBu
dWxsLCBzaXRlLCBtZXRob2Quc2hhbGxvd09yaWdpbmFsKCkpOwotCQkJCX0gY2F0Y2ggKEluZmVy
ZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJfQotCQkJ
CWlmIChib3VuZHMgPT0gbnVsbCkKLQkJCQkJcmV0dXJuIGZhbHNlOwotCQkJfQotCQl9IGVsc2Ug
ewotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0
KHRhcmdldFR5cGUpOwotCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgc29sdXRpb24uYm91bmRz
ICE9IG51bGwpCi0JCQkJYm91bmRzID0gc29sdXRpb24uYm91bmRzOwotCQl9Ci0JCXJlYmluZElu
bmVyUG9saWVzKGJvdW5kcywgbWV0aG9kLnBhcmFtZXRlcnMpOwotCQlyZXR1cm4gdHJ1ZTsKLQl9
Ci0KLQkvKioKLQkgKiBBZnRlciBpbmZlcmVuY2UgaGFzIGZpbmlzaGVkLCBpdGVyYXRlIGFsbCBp
bm5lciBwb2x5IGV4cHJlc3Npb25zIChJbnZvY2F0aW9ucyksIHRoYXQKLQkgKiBoYXZlIGJlZW4g
aW5jbHVkZWQgaW4gdGhlIGluZmVyZW5jZS4gRm9yIGVhY2ggb2YgdGhlc2UgdXBkYXRlIHNvbWUg
dHlwZSBpbmZvcm1hdGlvbgotCSAqIGZyb20gdGhlIGluZmVyZW5jZSByZXN1bHQgYW5kIHBlcmhh
cHMgdHJpZ2dlciBmb2xsb3ctdXAgcmVzb2x2aW5nIGFzIG5lZWRlZC4KLQkgKiBTaW1pbGFyIGZv
ciBwb2x5IGV4cHJlc3Npb25zIHRoYXQgZGlkIG5vdCBkaXJlY3RseSBwYXJ0aWNpcGF0ZSBpbiB0
aGUgaW5mZXJlbmNlCi0JICogYnV0IGFyZSBkaXJlY3QgYXJndW1lbnRzIG9mIHRoZSBjdXJyZW50
IGludm9jYXRpb24gKEZ1bmN0aW9uYWxFeHByZXNzaW9uLCBDb25kaXRpb25hbEV4cHJlc3Npb24p
LgotCSAqLwotCXB1YmxpYyB2b2lkIHJlYmluZElubmVyUG9saWVzKEJvdW5kU2V0IGJvdW5kcywg
VHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcykgewotCQkvLyBUaGlzIHVwZGF0ZXMgYWxsIHJl
bWFpbmluZyBwb2x5IGV4cHJlc3Npb25zIHRoYXQgYXJlIGRpcmVjdCBhcmd1bWVudHMgb2YgdGhl
IGN1cnJlbnQgaW52b2NhdGlvbjoKLQkJLy8gKGhhbmRsZXMgRnVuY3Rpb25hbEV4cHJlc3Npb24g
JiBDb25kaXRpb25hbEV4cHJlc3Npb24pCi0JCWlmICh0aGlzLmN1cnJlbnRJbnZvY2F0aW9uIGlu
c3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKLQkJCXJldHVybjsgLy8gbm8gaW5uZXIgZXhw
cmVzc2lvbnMKLQkJYm9vbGVhbiBpc1ZhcmFyZ3MgPSB0aGlzLmluZmVyZW5jZUtpbmQgPT0gQ0hF
Q0tfVkFSQVJHOwotCQlhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cyhib3VuZHMsIHBhcmFtZXRl
clR5cGVzLCBpc1ZhcmFyZ3MpOwotCQkvLyBUaGlzIGxvb3BzIG92ZXIgYWxsIHBvbHkgZXhwcmVz
c2lvbnMgZm9yIHdoaWNoIGEgc3ViLWluZmVyZW5jZSB3YXMgdHJpZ2dlcmVkOgotCQkvLyAoaGFu
ZGxlcyBnZW5lcmljIGludm9jYXRpb25zKQotCQlpbnQgbGVuID0gdGhpcy5pbm5lclBvbGllcy5z
aXplKCk7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKLQkJCUV4cHJlc3Npb24g
aW5uZXIgPSAoRXhwcmVzc2lvbikgdGhpcy5pbm5lclBvbGllcy5nZXQoaSk7Ci0JCQlpZiAoaW5u
ZXIgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQkJUmVmZXJlbmNlRXhwcmVz
c2lvbiByZWZlcmVuY2VFeHByZXNzaW9uID0gKFJlZmVyZW5jZUV4cHJlc3Npb24pIGlubmVyOwot
CQkJCU1ldGhvZEJpbmRpbmcgY29tcGlsZVRpbWVEZWNsID0gcmVmZXJlbmNlRXhwcmVzc2lvbi5w
cmVwYXJlRm9ySW5mZXJlbmNlUmVzdWx0KHRoaXMuc2NvcGUpOwotCQkJCWlmCShjb21waWxlVGlt
ZURlY2wgIT0gbnVsbCkgewotCSAgCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB2YXJpYWJsZXMg
PSBjb21waWxlVGltZURlY2wudHlwZVZhcmlhYmxlczsKLQkJCQkJaWYgKHZhcmlhYmxlcyAhPSBC
aW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCQkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50
cyA9IGdldFNvbHV0aW9ucyh2YXJpYWJsZXMsIChJbnZvY2F0aW9uU2l0ZSkgaW5uZXIsIGJvdW5k
cyk7Ci0JCQkJCQlyZWZlcmVuY2VFeHByZXNzaW9uLmJpbmRpbmcgPSB0aGlzLmVudmlyb25tZW50
LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNvbXBpbGVUaW1lRGVjbCwgYXJndW1l
bnRzKTsKLQkJCQkJfQotCQkJCX0KLQkJCX0gZWxzZSBpZiAoaW5uZXIgaW5zdGFuY2VvZiBJbnZv
Y2F0aW9uKSB7Ci0JCQkJSW52b2NhdGlvbiBpbm5lck1lc3NhZ2UgPSAoSW52b2NhdGlvbikgaW5u
ZXI7Ci0JCQkJVHlwZUJpbmRpbmcgaW5uZXJUYXJnZXRUeXBlID0gaW5uZXIuZXhwZWN0ZWRUeXBl
KCk7IC8vIG1heSBiZSBzZXQgZnJvbSBhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cwotCQkJCWlm
IChpbm5lclRhcmdldFR5cGUgIT0gbnVsbCAmJiAhaW5uZXJUYXJnZXRUeXBlLmlzUHJvcGVyVHlw
ZSh0cnVlKSkKLQkJCQkJaW5uZXJUYXJnZXRUeXBlID0gbnVsbDsKLQkJCQlNZXRob2RCaW5kaW5n
IGJpbmRpbmcgPSBpbm5lck1lc3NhZ2UuYmluZGluZyhpbm5lclRhcmdldFR5cGUsIGlubmVyVGFy
Z2V0VHlwZSAhPSBudWxsLCB0aGlzLnNjb3BlKTsKLQkJCQlpZiAoYmluZGluZyA9PSBudWxsKQot
CQkJCQljb250aW51ZTsKLQkJCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gYmluZGluZy5zaGFs
bG93T3JpZ2luYWwoKTsKLQotCQkJCS8vIGFwcGx5IGluZmVyZW5jZSByZXN1bHRzIG9udG8gdGhl
IGFsbG9jYXRpb24gdHlwZSBvZiBpbm5lciBkaWFtb25kczoKLQkJCQlpZiAob3JpZ2luYWwuaXND
b25zdHJ1Y3RvcigpICYmIGlubmVyLmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJCQlSZWZlcmVu
Y2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzID0gb3JpZ2luYWwuZGVjbGFyaW5nQ2xhc3M7Ci0JCQkJ
CVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKGRlY2xhcmluZ0NsYXNzLnR5
cGVWYXJpYWJsZXMoKSwgaW5uZXJNZXNzYWdlLCBib3VuZHMpOwotCQkJCQlkZWNsYXJpbmdDbGFz
cyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZGVjbGFyaW5nQ2xh
c3MsIGFyZ3VtZW50cywgZGVjbGFyaW5nQ2xhc3MuZW5jbG9zaW5nVHlwZSgpKTsKLQkJCQkJb3Jp
Z2luYWwgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylkZWNsYXJpbmdDbGFzcykuY3JlYXRl
UGFyYW1ldGVyaXplZE1ldGhvZChvcmlnaW5hbCk7Ci0JCQkJCWlubmVyLmNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShpbm5lclRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwkKLQkJCQkJaWYgKHRo
aXMuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNp
c0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0
aW9ucyhvcmlnaW5hbCwgaW5uZXJNZXNzYWdlLCB0aGlzLnNjb3BlKTsKLQkJCQl9Ci0JCQkJCi0J
CQkJLy8gYXBwbHkgcmVzdWx0cyBvZiB0aGUgY29tYmluZWQgaW5mZXJlbmNlIG9udG8gdGhlIGJp
bmRpbmcgb2YgdGhlIGlubmVyIGludm9jYXRpb246Ci0JCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlv
bnMgPSBnZXRTb2x1dGlvbnMob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCBpbm5lck1lc3NhZ2Us
IGJvdW5kcyk7Ci0JCQkJaWYgKHNvbHV0aW9ucyA9PSBudWxsKSB7Ci0JCQkJCWlmIChiaW5kaW5n
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJCQlJ
bmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbm5lck1lc3NhZ2UuZ2V0SW5mZXJlbmNlQ29u
dGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nKTsKLQkJCQkJ
CWlmIChpbm5lckN0eCAhPSBudWxsICYmICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJ
CQkJCQlpbm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbm5lck1lc3NhZ2UsIGJpbmRp
bmcpOwotCQkJCQkJfQotCQkJCQl9Ci0JCQkJCWNvbnRpbnVlOyAvLyBpbm5lciBpbmZlcmVuY2Ug
bm90IHJlcXVlc3RlZCAtPiBub3QgYSBwcm9ibGVtCi0JCQkJfQotCQkJCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1dGlvbnMpOwotCQkJCQot
CQkJCWlmIChpbm5lck1lc3NhZ2UudXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nLCBpbm5lclRh
cmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmluZyBhbnl0aGlu
ZwotCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbm5lck1lc3Nh
Z2UsIGlubmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJfQotCQkJfQotCQl9Ci0JCXRoaXMu
c3RlcENvbXBsZXRlZCA9IEJJTkRJTkdTX1VQREFURUQ7IC8vIHdlJ3JlIGRvbmUtZG9uZQotCX0K
LQotCXByaXZhdGUgdm9pZCBhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cyhCb3VuZFNldCBhY2Nl
cHRlZFJlc3VsdCwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcywgYm9vbGVhbiBpc1ZhckFy
Z3MpIHsKLQkJaWYgKGFjY2VwdGVkUmVzdWx0ID09IG51bGwgfHwgdGhpcy5pbnZvY2F0aW9uQXJn
dW1lbnRzID09IG51bGwpIHJldHVybjsKLQkJU3Vic3RpdHV0aW9uIHN1YnN0aXR1dGlvbiA9IGdl
dFJlc3VsdFN1YnN0aXR1dGlvbihhY2NlcHRlZFJlc3VsdCk7Ci0JCWZvciAoaW50IGkgPSAwOyBp
IDwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7Ci0JCQlUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlID0gZ2V0UGFyYW1ldGVyKHBhcmFtZXRlclR5cGVzLCBpLCBpc1ZhckFyZ3Mp
OwotCQkJaWYgKCF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkKLQkJCQl0YXJnZXRUeXBl
ID0gU2NvcGUuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIHRhcmdldFR5cGUpOwotCQkJRXhwcmVz
c2lvbiBleHByZXNzaW9uID0gdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzW2ldOwotCQkJaWYgKGV4
cHJlc3Npb24gaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW52b2NhdGlvbiBpbnZvY2F0
aW9uID0gKEludm9jYXRpb24pIGV4cHJlc3Npb247Ci0JCQkJaWYgKCF0aGlzLmlubmVyUG9saWVz
LmNvbnRhaW5zKGludm9jYXRpb24pKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gaW52
b2NhdGlvbi5iaW5kaW5nKHRhcmdldFR5cGUsIHRydWUsIHRoaXMuc2NvcGUpOwotCQkJCQlpZiAo
bWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0J
CQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcHJldmlvdXNCaW5kaW5nID0g
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kOwotCQkJCQkJSW5mZXJl
bmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBy
ZXZpb3VzQmluZGluZyk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCkgewotCQkJCQkJCS8v
IHdlIGhhdmUgYSBub24tcG9seSBnZW5lcmljIGludm9jYXRpb24sIHdoaWNoIG5lZWRzIGluZmVy
ZW5jZSBidXQgaXMgbm90IGNvbm5lY3RlZCB2aWEgaW5uZXJQb2xpcy4KLQkJCQkJCQkvLyBGaW5p
c2ggdGhhdCBpbm5lciBpbmZlcmVuY2Ugbm93IChpbmNsLiBiaW5kaW5nIHVwZGF0ZXMpOgotCQkJ
CQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5uZXJDdHguaW5mZXJJbnZvY2F0aW9u
VHlwZShpbnZvY2F0aW9uLCBwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJCWlmICghaW5uZXJCaW5k
aW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQkJaW5uZXJDdHgucmVwb3J0SW52YWxpZElu
dm9jYXRpb24oaW52b2NhdGlvbiwgaW5uZXJCaW5kaW5nKTsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYg
KGludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nLCB0YXJnZXRUeXBlKSkgeyAv
LyBvbmx5IGlmIHdlIGFyZSBhY3R1YWxseSBpbXByb3ZpbmcgYW55dGhpbmcKLQkJCQkJCQkJQVNU
Tm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwgaW5uZXJCaW5k
aW5nLCB0aGlzLnNjb3BlKTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCX0gZWxzZSBpZihtZXRo
b2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl7Ci0JCQkJCQlleHByZXNz
aW9uLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsK
LQkJCQkJfQotCQkJCX0gZWxzZSB7Ci0JCQkJCWV4cHJlc3Npb24uc2V0RXhwZWN0ZWRUeXBlKHRh
cmdldFR5cGUpOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJaWYgKHRoaXMuaW5uZXJQb2xpZXMu
Y29udGFpbnMoZXhwcmVzc2lvbikpIC8vIG1heSBnZXQgaGVyZSBmb3IgUmVmZXJlbmNlRXhwcmVz
c2lvbnMgLi4uCi0JCQkJCWV4cHJlc3Npb24uc2V0RXhwZWN0ZWRUeXBlKHRhcmdldFR5cGUpOyAv
LyAuLi4gcHJlcGFyZSBmb3IgZmluYWwgaW5mZXJlbmNlIHZpYSByZWJpbmRJbm5lclBvbGllcwot
CQkJCWVsc2UKLQkJCQkJZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFy
Z2V0VHlwZSwgdGhpcy5zY29wZSk7Ci0JCQl9Ci0JCX0KIAl9CiAKIAlwcml2YXRlIFN1YnN0aXR1
dGlvbiBnZXRSZXN1bHRTdWJzdGl0dXRpb24oZmluYWwgQm91bmRTZXQgcmVzdWx0KSB7CkBAIC0x
NTgxLDE5ICsxMzE1LDE0IEBACiAJCQlpZiAobWV0aG9kLnJldHVyblR5cGUuZXJhc3VyZSgpLmlz
Q29tcGF0aWJsZVdpdGgoZXhwZWN0ZWRUeXBlKSkKIAkJCQlyZXR1cm4gbWV0aG9kOyAvLyBkb24n
dCBjb3VudCBhcyBwcm9ibGVtLgogCQl9Ci0JCWlmIChleHBlY3RlZFR5cGUgPT0gbnVsbCkKLQkJ
CXJldHVybiBtZXRob2Q7IC8vIGFzc3VtZSBpbmZlcmVuY2UgZmFpbHVyZSBjb25jZXJuZWQgYW5v
dGhlciBleHByZXNzaW9uCi0JCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBu
ZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5w
YXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBl
UHJvYmxlbSk7CisJCS8qIFdlIHVzZWQgdG8gY2hlY2sgaWYgZXhwZWN0ZWQgdHlwZSBpcyBudWxs
IGFuZCBpZiBzbyByZXR1cm4gbWV0aG9kLCBidXQgdGhhdCBpcyB3cm9uZyAtIGl0IGluamVjdHMg
YW4gaW5jb21wYXRpYmxlIG1ldGhvZCBpbnRvIG92ZXJsb2FkIHJlc29sdXRpb24uCisJCSAgIGlm
IHdlIGdldCBoZXJlIHdpdGggZXhwZWN0ZWQgdHlwZSBzZXQgdG8gbnVsbCBhdCBhbGwsIHRoZSB0
YXJnZXQgY29udGV4dCBkb2VzIG5vdCBkZWZpbmUgYSB0YXJnZXQgdHlwZSAodmFuaWxsYSBjb250
ZXh0KSwgc28gaW5mZXJlbmNlIGhhcyBkb25lIGl0cworCQkgICBiZXN0IGFuZCBub3RoaW5nIG1v
cmUgdG8gZG8gdGhhbiB0byBzaWduYWwgZXJyb3IuIAorCQkgKi8KKwkJUHJvYmxlbU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1l
dGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLkludm9jYXRp
b25UeXBlSW5mZXJlbmNlRmFpbHVyZSk7CiAJCXByb2JsZW1NZXRob2QucmV0dXJuVHlwZSA9IGV4
cGVjdGVkVHlwZTsKIAkJcHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VDb250ZXh0ID0gdGhpczsKIAkJ
cmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JfQotCi0JcHVibGljIHZvaWQgcmVwb3J0SW52YWxpZElu
dm9jYXRpb24oSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIGJpbmRpbmcpIHsK
LQkJaWYgKGludm9jYXRpb24gaW5zdGFuY2VvZiBNZXNzYWdlU2VuZCkKLQkJCXRoaXMuc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCgoTWVzc2FnZVNlbmQpIGludm9jYXRpb24s
IGJpbmRpbmcpOwotCQllbHNlCi0JCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFs
aWRDb25zdHJ1Y3RvcigoU3RhdGVtZW50KWludm9jYXRpb24sIGJpbmRpbmcpOwogCX0KIAogCS8v
IGRlYnVnZ2luZzoKQEAgLTE2MzMsMTIgKzEzNjIsNiBAQAogCQlpZiAodGhpcy5jdXJyZW50Qm91
bmRzICE9IG51bGwpCiAJCQlidWYuYXBwZW5kKHRoaXMuY3VycmVudEJvdW5kcy50b1N0cmluZygp
KTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOwotCX0KLQotCXB1YmxpYyB2b2lkIGFkZFByb2Js
ZW1NZXRob2QoUHJvYmxlbU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCkgewotCQlpZiAodGhp
cy5wcm9ibGVtTWV0aG9kcyA9PSBudWxsKQotCQkJdGhpcy5wcm9ibGVtTWV0aG9kcyA9IG5ldyBB
cnJheUxpc3Q8TWV0aG9kQmluZGluZz4oKTsKLQkJdGhpcy5wcm9ibGVtTWV0aG9kcy5hZGQocHJv
YmxlbU1ldGhvZCk7CiAJfQogCiAJLyoqCkBAIC0xNzEyLDQgKzE0MzUsNCBAQAogCXB1YmxpYyBz
dGF0aWMgdm9pZCBtaXNzaW5nSW1wbGVtZW50YXRpb24oU3RyaW5nIG1zZykgewogCQl0aHJvdyBu
ZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24obXNnKTsKIAl9Ci19Cit9ClwgTm8gbmV3
bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZp
cm9ubWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhCmluZGV4
IDgxNDRlMjEuLjQ5Mjg3MDQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJv
bm1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKQEAg
LTM4LDYgKzM4LDcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNo
YXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNs
YXNzRmlsZVBvb2w7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
Q29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwpAQCAtMTAwMyw2ICsxMDA0
LDEwIEBACiAJcmV0dXJuIHRoaXMudHlwZVN5c3RlbS5nZXRXaWxkY2FyZChnZW5lcmljVHlwZSwg
cmFuaywgYm91bmQsIG90aGVyQm91bmRzLCBib3VuZEtpbmQpOwogfQogCitwdWJsaWMgQ2FwdHVy
ZUJpbmRpbmcgY3JlYXRlQ2FwdHVyZWRXaWxkY2FyZChXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQs
IFJlZmVyZW5jZUJpbmRpbmcgY29udGV4dFR5cGUsIGludCBwb3NpdGlvbiwgQVNUTm9kZSBjdWQs
IGludCBpZCkgeworCXJldHVybiB0aGlzLnR5cGVTeXN0ZW0uZ2V0Q2FwdHVyZWRXaWxkY2FyZCh3
aWxkY2FyZCwgY29udGV4dFR5cGUsIHBvc2l0aW9uLCBjdWQsIGlkKTsKK30KKwogcHVibGljIFdp
bGRjYXJkQmluZGluZyBjcmVhdGVXaWxkY2FyZChSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBl
LCBpbnQgcmFuaywgVHlwZUJpbmRpbmcgYm91bmQsIFR5cGVCaW5kaW5nW10gb3RoZXJCb3VuZHMs
IGludCBib3VuZEtpbmQsIEFubm90YXRpb25CaW5kaW5nIFtdIGFubm90YXRpb25zKSB7CiAJcmV0
dXJuIHRoaXMudHlwZVN5c3RlbS5nZXRXaWxkY2FyZChnZW5lcmljVHlwZSwgcmFuaywgYm91bmQs
IG90aGVyQm91bmRzLCBib3VuZEtpbmQsIGFubm90YXRpb25zKTsKIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvTWlzc2luZ1RhcmdldFR5cGVFeGNlcHRpb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvTWlzc2luZ1RhcmdldFR5cGVFeGNlcHRpb24uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NApp
bmRleCAwMDAwMDAwLi5jZDcwNTdhCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9N
aXNzaW5nVGFyZ2V0VHlwZUV4Y2VwdGlvbi5qYXZhCkBAIC0wLDAgKzEsMTAgQEAKK3BhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKKworcHVibGljIGNsYXNz
IE1pc3NpbmdUYXJnZXRUeXBlRXhjZXB0aW9uIGV4dGVuZHMgUnVudGltZUV4Y2VwdGlvbiB7CisK
KwkvKioKKwkgKiAKKwkgKi8KKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBsb25nIHNlcmlhbFZlcnNp
b25VSUQgPSAxTDsKKworfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggMmU5NmE0Yi4uYzU1NmM2OCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZh
CkBAIC0zMSw2ICszMSw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9uczsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxOC5Tb2x1dGlv
bjsKIAogLyoqCiAgKiBCaW5kaW5nIGRlbm90aW5nIGEgZ2VuZXJpYyBtZXRob2QgYWZ0ZXIgdHlw
ZSBwYXJhbWV0ZXIgc3Vic3RpdHV0aW9ucyBnb3QgcGVyZm9ybWVkLgpAQCAtNDEsNyArNDIsNyBA
QAogcHVibGljIGNsYXNzIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRz
IFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIGltcGxlbWVudHMgU3Vic3RpdHV0aW9uIHsKIAog
ICAgIHB1YmxpYyBUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHM7Ci0gICAgcHJpdmF0ZSBMb29r
dXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKKyAgICBwcm90ZWN0ZWQgTG9va3VwRW52aXJvbm1l
bnQgZW52aXJvbm1lbnQ7CiAgICAgcHVibGljIGJvb2xlYW4gaW5mZXJyZWRSZXR1cm5UeXBlOwog
ICAgIHB1YmxpYyBib29sZWFuIHdhc0luZmVycmVkOyAvLyBvbmx5IHNldCB0byB0cnVlIGZvciBp
bnN0YW5jZXMgcmVzdWx0aW5nIGZyb20gbWV0aG9kIGludm9jYXRpb24gaW5mZXJyZW5jZQogICAg
IHB1YmxpYyBib29sZWFuIGlzUmF3OyAvLyBzZXQgdG8gdHJ1ZSBmb3IgbWV0aG9kIGJlaGF2aW5n
IGFzIHJhdyBmb3Igc3Vic3RpdHV0aW9uIHB1cnBvc2UKQEAgLTUwLDMxICs1MSwxMSBAQAogCS8q
KgogCSAqIFBlcmZvcm0gaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kIHR5cGUgcGFyYW1ldGVy
cyBhbmQvb3IgZXhwZWN0ZWQgdHlwZQogCSAqIDxwPgotCSAqIEluIDEuOCsgdGhlIGZvbGxvd2lu
ZyBkaXNjaXBsaW5lIGhhcyB0byBiZSBvYnNlcnZlZCBieSBjYWxsZXJzOgotCSAqIEVhY2ggaW52
b2NhdGlvbiBtdXN0IGJlIHN1YmplY3RlZCB0byB0d28gbGV2ZWxzIG9mIGluZmVyZW5jZToKLQkg
KiA8L3A+Ci0JICogPHVsPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0FQUExJQ0FCSUxJVFkgSW52
b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZX0sIHdoaWNoIG1heSBiZSBhcHBsaWVkCi0J
ICogICAgIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZSBpbnZvY2F0aW9uPC9saT4KLQkgKiA8
bGk+IHtAbGluayBTY29wZSNJTlZPQ0FUSU9OX1RZUEUgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5j
ZX0sIHdoaWNoIGlzIGZpbmFsbHkgcGVyZm9ybWVkCi0JICogICAgIGZvciB0aGUgc2VsZWN0ZWQg
bWV0aG9kIGFuZCB3aGljaCBhZGRzIGluZm9ybWF0aW9uIGZyb20gdGhlICJ0YXJnZXQgdHlwZSIu
PC9saT4KLQkgKiA8L3VsPgotCSAqIDxwPgotCSAqIENsaWVudHMgY2FuIGNvbnRyb2wgd2hpY2gg
cGFydHMgb2YgdGhlIGluZmVyZW5jZSBzaG91bGQgYmUgcGVyZm9ybWVkIGJ5IHBhc3NpbmcgdGhl
IGFwcHJvcHJpYXRlCi0JICogZmxhZ3MgaW50byBhcmd1bWVudCAnaW5mZXJlbmNlTGV2ZWwnLiBP
biBlYWNoIGNhbGwgcGF0aCBpdCBtdXN0IGJlIGVuc3VyZWQgdGhhdCBvbmUgb3IgbW9yZQotCSAq
IGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2VzIGFyZSBhbHdheXMgZm9sbG93ZWQg
YnkgZXhhY3RseSBvbmUgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQotCSAqICh1bmxlc3MgZXJy
b3JzIGhhdmUgYmVlbiBkZXRlY3RlZCkuCi0JICogPC9wPgotCSAqIDxwPgotCSAqIEluaXRpYWwg
Y2xpZW50cyBhcmUgdGhlIGRpcmVjdCBjYWxsZXJzIG9mCi0JICoge0BsaW5rIFNjb3BlI2NvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXSxJbnZvY2F0aW9u
U2l0ZSxpbnQpfSwKLQkgKiB3aGljaCBzaG91bGQgZWl0aGVyIGludm9rZSBib3RoIGxldmVscyBv
ZiBpbmZlcmVuY2UgPGVtPm9yPC9lbT4gZGVsZWdhdGUgdGhlIHNlY29uZCBwYXJ0IHRvCi0JICog
e0BsaW5rIFNjb3BlI21vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdLGlu
dCxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLFJlZmVyZW5jZUJpbmRpbmcpfSwKLQkgKiB3
aGljaCBpcyBpbnRlbmRlZCB0byBlbnN1cmUgY29tcGxldGluZyB0aGUgaW5mZXJlbmNlIG9uIGFs
bCBub24tZXJyb3IgZXhpdHMuCisJICogSW4gMS44KyBpZiB0aGUgZXhwZWN0ZWQgdHlwZSBpcyBu
b3QgeWV0IGF2YWlsYWJsZSBkdWUgdG8gdGhpcyBjYWxsIGJlaW5nIGFuIGFyZ3VtZW50IHRvIGFu
IG91dGVyIGNhbGwgd2hpY2ggaXMgbm90IG92ZXJsb2FkLXJlc29sdmVkIHlldCwKKwkgKiB0aGUg
cmV0dXJuZWQgbWV0aG9kIGJpbmRpbmcgd2lsbCBiZSBhIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcuCiAJICogPC9wPiAgCiAJICovCi0JcHVibGljIHN0YXRpYyBNZXRob2RC
aW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRo
b2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBzY29wZSwKLQkJCUludm9jYXRpb25T
aXRlIGludm9jYXRpb25TaXRlLCBpbnQgaW5mZXJlbmNlTGV2ZWwpCisJcHVibGljIHN0YXRpYyBN
ZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2lu
YWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBzY29wZSwJSW52b2NhdGlv
blNpdGUgaW52b2NhdGlvblNpdGUpCiAJewogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgbWV0aG9kU3Vic3RpdHV0ZTsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJp
YWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFyaWFibGVzOwpAQCAtOTUsMTI4ICs3NiwzOSBA
QAogCQkJLy8gaW5pdGlhbGl6ZXMgdGhlIG1hcCBvZiBzdWJzdGl0dXRlcyAodmFyIC0tPiB0eXBl
W11bXXsgZXF1YWwsIGV4dGVuZHMsIHN1cGVyfQogCQkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJz
ID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsKIAotLy8gPT09PSAxLjg6IFRoZSBtYWluIGRy
aXZlciBmb3IgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09PQotCQkJSW5mZXJlbmNl
Q29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKIAkJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKLQkJCWlmIChjb21waWxlck9wdGlvbnMu
c291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmICgoaW5m
ZXJlbmNlTGV2ZWwgJiBTY29wZS5BUFBMSUNBQklMSVRZKSAhPSAwKQotCQkJCQlpbmZDdHgxOCA9
IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7Ci0JCQkJZWxzZSBp
ZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIG9yaWdpbmFsTWV0aG9k
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQotCQkJCQlpbmZD
dHgxOCA9ICgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLmdldEluZmVyZW5jZUNvbnRleHQo
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgb3JpZ2luYWxNZXRob2QpOwotCQkJ
CWlmIChpbmZDdHgxOCA9PSBudWxsKQotCQkJCQlyZXR1cm4gb3JpZ2luYWxNZXRob2Q7Ci0JCQl9
Ci0JCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCkgewotCQkJCXRyeSB7Ci0JCQkJCUJvdW5kU2V0IHBy
b3Zpc2lvbmFsUmVzdWx0ID0gbnVsbDsKLQkJCQkJQm91bmRTZXQgcmVzdWx0ID0gbnVsbDsKLQkJ
CQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJVFkpICE9IDApIHsKKwkJ
CWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfOCkKKwkJCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QxOChvcmlnaW5hbE1ldGhv
ZCwgYXJndW1lbnRzLCBzY29wZSwgaW52b2NhdGlvblNpdGUpOwogCi0JCQkJCQkvLyAtLS0tIDE4
LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0KLQkJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3Jp
Z2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCi0JCQkJCQkJCSYmIGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgRXhwcmVzc2lvbgotCQkJCQkJCQkmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNp
dGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOwotCQkJCQkJaWYgKGFyZ3VtZW50
cy5sZW5ndGggPT0gcGFyYW1ldGVycy5sZW5ndGgpIHsKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVu
Y2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0
ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJpY3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2ll
bnQuCi0JCQkJCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5h
bE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQpOwotCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0
ID0gaW5mQ3R4MTguc29sdmUoKTsKLQkJCQkJCX0KLQkJCQkJCWlmIChwcm92aXNpb25hbFJlc3Vs
dCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlzVmFyYXJncygpKSB7Ci0JCQkJCQkJLy8gY2hl
Y2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxpY2FiaWxpdHkKLQkJCQkJCQlpbmZDdHgxOCA9IGlu
dm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIK
LQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNL
X1ZBUkFSRzsKLQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9y
aWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxS
ZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFs
UmVzdWx0ICE9IG51bGwgJiYgaW5mQ3R4MTguaXNSZXNvbHZlZChwcm92aXNpb25hbFJlc3VsdCkp
IHsKLQkJCQkJCQlpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbiA9IHByb3Zpc2lvbmFsUmVzdWx0Owot
CQkJCQkJCWluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElD
QUJJTElUWV9JTkZFUlJFRDsKLQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBS
ZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJCQkJCQkoKFJlZmVyZW5jZUV4cHJlc3Npb24pIGludm9j
YXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kID0gaW5mQ3R4MTguaW5mZXJlbmNlS2luZDsKLQkJCQkJ
CX0KLQkJCQkJfSBlbHNlIHsKLQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc3Rv
cmVkU29sdXRpb247Ci0JCQkJCX0KLQkJCQkJcmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5k
cy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMg
b2YgcmVzb2x2ZSgpCisJCQkvLyAxLjctIG9ubHkuCisJCQlpbmZlcmVuY2VDb250ZXh0ID0gbmV3
IEluZmVyZW5jZUNvbnRleHQob3JpZ2luYWxNZXRob2QpOworCQkJbWV0aG9kU3Vic3RpdHV0ZSA9
IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMs
IHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQpOworCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUg
PT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsKIAotCQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5
cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQkJCQlib29sZWFu
IGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKLQkJCQkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUlu
ZmVycmVkID0gZmFsc2U7Ci0JCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBTY29wZS5JTlZPQ0FU
SU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVkPwotCQkJCQkJCSYmIChleHBlY3RlZFR5cGUgIT0g
bnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFy
Z2V0VHlwZSgpKSkgeyAvLyBwb3NzaWJsZT8KLQotCQkJCQkJLy8gLS0tLSAxOC41LjIgKEludm9j
YXRpb24gdHlwZSk6IC0tLS0KLQkJCQkJCXJlc3VsdCA9IGluZkN0eDE4LmluZmVySW52b2NhdGlv
blR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUsIGludm9jYXRpb25TaXRlLCBvcmlnaW5hbE1ldGhv
ZCk7Ci0JCQkJCQlpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gdHJ1ZTsKLQkJCQkJCWhhc1JldHVy
blByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7Ci0JCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkK
LQkJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsgLy8gbGV0J3MgcHJlZmVyIGEgdHlw
ZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVybiB0eXBlIG92ZXIgcmVwb3J0aW5nIG5vIG1hdGNo
IGF0IGFsbAotCQkJCQl9IGVsc2UgewotCQkJCQkJLy8gd2UncmUgbm90IHlldCByZWFkeSBmb3Ig
aW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQotCQkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1
bHQ7Ci0JCQkJCX0KLQotCQkJCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKLQkJCQkJCS8vIGFzc2Vt
YmxlIHRoZSBzb2x1dGlvbiBldGM6Ci0JCQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGlu
ZkN0eDE4LmdldFNvbHV0aW9ucyh0eXBlVmFyaWFibGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVzdWx0
KTsKLQkJCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgewotCQkJCQkJCQotCQkJCQkJCW1ldGhv
ZFN1YnN0aXR1dGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kKG9yaWdpbmFsTWV0aG9kLCBzb2x1dGlvbnMpOwotCQkJCQkJCWlmIChoYXNSZXR1
cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJl
c3VsdD8KLQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0
UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0
ZSk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJp
bmRpbmcpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9Ci0JCQkJCQkJ
aWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQpIHsKLQkJCQkJCQkJaWYgKGNvbXBpbGVyT3B0aW9u
cy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQkJCQlOdWxsQW5u
b3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhtZXRob2RTdWJzdGl0dXRlLCBp
bnZvY2F0aW9uU2l0ZSwgc2NvcGUpOwotCQkJCQkJCQlpbmZDdHgxOC5yZWJpbmRJbm5lclBvbGll
cyhyZXN1bHQsIG1ldGhvZFN1YnN0aXR1dGUucGFyYW1ldGVycyk7Ci0JCQkJCQkJCU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3Bl
LCBhcmd1bWVudHMpOwotCQkJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQotCQkJCQkJ
CQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQkJaWYgKGlu
dm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikKLQkJCQkJCQkJCSgoSW52b2NhdGlv
bikgaW52b2NhdGlvblNpdGUpLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChtZXRob2RTdWJzdGl0
dXRlLCBpbmZDdHgxOCk7IC8vIGtlZXAgY29udGV4dCBzbyB3ZSBjYW4gZmluaXNoIGxhdGVyCi0J
CQkJCQkJfQotCQkJCQkJCXJldHVybiBtZXRob2RTdWJzdGl0dXRlOwotCQkJCQkJfQotCQkJCQl9
Ci0JCQkJCXJldHVybiBudWxsOwotCQkJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRp
b24gZSkgewotCQkJCQkvLyBGSVhNRSBzdG9wLWdhcCBtZWFzdXJlCi0JCQkJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcihlLmdldE1lc3NhZ2UoKSwgaW52b2Nh
dGlvblNpdGUpOwotCQkJCQlyZXR1cm4gbnVsbDsKKwkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xk
IG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCBy
ZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9k
CisJCQkvLyAxNS4xMi4yLjggLSBpbmZlcnJpbmcgdW5yZXNvbHZlZCB0eXBlIGFyZ3VtZW50cwor
CQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5yZXNvbHZlZFR5cGVBcmd1bWVudCgpKSB7CisJ
CQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1
bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43CisJCQkJCWludCBsZW5ndGggPSBpbmZlcmVu
Y2VDb250ZXh0LnN1YnN0aXR1dGVzLmxlbmd0aDsKKwkJCQkJU3lzdGVtLmFycmF5Y29weShpbmZl
cmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1bWVudHMgPSBuZXcgVHlw
ZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKIAkJCQl9Ci0JCQl9IGVsc2UgewotLy8gPT09
PSAxLjggPT09PQotCQkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChv
cmlnaW5hbE1ldGhvZCk7Ci0JCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50
VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVy
ZW5jZUNvbnRleHQpOworCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlw
ZUJpbmRpbmcuVk9JRCkgeworCQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0
aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9
IG51bGwpIHsKKwkJCQkJCS8vIHJlY29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBh
cyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93KQorCQkJCQkJaW5mZXJl
bmNlQ29udGV4dC5oYXNFeHBsaWNpdEV4cGVjdGVkVHlwZSA9IHRydWU7CisJCQkJCX0gZWxzZSB7
CisJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1
bWUgT2JqZWN0IGJ5IGRlZmF1bHQKKwkJCQkJfQorCQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVj
dGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJCQl9CisJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG1l
dGhvZFN1YnN0aXR1dGUuaW5mZXJGcm9tRXhwZWN0ZWRUeXBlKHNjb3BlLCBpbmZlcmVuY2VDb250
ZXh0KTsKIAkJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQogCQkJCQlyZXR1cm4gbnVs
bDsKLQkJCQkKLQkJCQkvLyBzdWJzdGl0dXRlcyBtYXkgaG9sZCBudWxsIHRvIGRlbm90ZSB1bnJl
c29sdmVkIHZhcnMsIGJ1dCBudWxsIGFyZ3VtZW50cyBnb3QgcmVwbGFjZWQgd2l0aCByZXNwZWN0
aXZlIG9yaWdpbmFsIHZhcmlhYmxlIGluIHBhcmFtIG1ldGhvZAotCQkJCS8vIDE1LjEyLjIuOCAt
IGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCi0JCQkJaWYgKGluZmVyZW5jZUNv
bnRleHQuaGFzVW5yZXNvbHZlZFR5cGVBcmd1bWVudCgpKSB7Ci0JCQkJCWlmIChpbmZlcmVuY2VD
b250ZXh0LmlzVW5jaGVja2VkKSB7IC8vIG9ubHkgcmVtZW1iZXIgdW5jaGVja2VkIHN0YXR1cyBw
b3N0IDE1LjEyLjIuNwotCQkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3Rp
dHV0ZXMubGVuZ3RoOwotCQkJCQkJU3lzdGVtLmFycmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1
YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3Ro
XSwgMCwgbGVuZ3RoKTsKLQkJCQkJfQotCQkJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5U
eXBlICE9IFR5cGVCaW5kaW5nLlZPSUQpIHsKLQkJCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlw
ZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCQkJCQlpZiAoZXhw
ZWN0ZWRUeXBlICE9IG51bGwpIHsKLQkJCQkJCQkvLyByZWNvcmQgaXQgd2FzIGV4cGxpY2l0IGZy
b20gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBhc3N1bWVkIGJ5IGRlZmF1bHQgKHNlZSBiZWxvdykK
LQkJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1ZTsK
LQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJZXhwZWN0ZWRUeXBlID0gc2NvcGUuZ2V0SmF2YUxhbmdP
YmplY3QoKTsgLy8gYXNzdW1lIE9iamVjdCBieSBkZWZhdWx0Ci0JCQkJCQl9Ci0JCQkJCQlpbmZl
cmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsKLQkJCQkJfQotCQkJCQlt
ZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUo
c2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwotCQkJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBu
dWxsKQotCQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJfQogCQkJfQogCQl9CisJCQogCiAJCS8qIGJv
dW5kcyBjaGVjazogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTI0MjE1OSwgSW5mZXJyZWQgdHlwZXMgbWF5IGNvbnRhaW4gc2VsZiByZWZlcmVuY2UKIAkJICAg
aW4gZm9ybWFsIGJvdW5kcy4gSWYgIlQgZXh0ZW5kcyBJPFQ+IiBpcyBhIG9yaWdpbmFsIHR5cGUg
dmFyaWFibGUgYW5kIFQgd2FzIGluZmVycmVkIHRvIGJlIEk8VD4gZHVlIHBvc3NpYmx5CkBAIC0y
NjYsNiArMTU4LDkzIEBACiAJCXJldHVybiBtZXRob2RTdWJzdGl0dXRlOwogCX0KIAorCXB1Ymxp
YyBzdGF0aWMgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KE1ldGhvZEJp
bmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBmaW5hbCBTY29w
ZSBzY29wZSwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJCisJCVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJVHlw
ZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFy
aWFibGVzOworCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOworCQlUeXBlQmlu
ZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOworCQlpbmZDdHgx
OCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7CisJCUNvbXBp
bGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKKwkJ
Ym9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7CisJCQorCQl0cnkgeworCQkJ
Qm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOworCQkJQm91bmRTZXQgcmVzdWx0ID0g
bnVsbDsKKwkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTogLS0tLQorCQkJZmluYWwg
Ym9vbGVhbiBpc1BvbHlFeHByZXNzaW9uID0gaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHBy
ZXNzaW9uICYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihv
cmlnaW5hbE1ldGhvZCk7CisJCQlib29sZWFuIGlzRGlhbW9uZCA9IGlzUG9seUV4cHJlc3Npb24g
JiYgb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpOworCQkJaWYgKGFyZ3VtZW50cy5sZW5n
dGggPT0gcGFyYW1ldGVycy5sZW5ndGgpIHsKKwkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0g
SW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBo
YXNlIGNoZWNraW5nIChzdHJpY3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCisJCQkJ
aW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJn
dW1lbnRzLCBpc0RpYW1vbmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9
CisJCQlpZiAocmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJhcmdzKCkpIHsK
KwkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0eQorCQkJCWluZkN0
eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3Rh
cnQgb3ZlcgorCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTgu
Q0hFQ0tfVkFSQVJHOworCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHko
b3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKKwkJCQlyZXN1bHQgPSBpbmZD
dHgxOC5zb2x2ZSgpOworCQkJfQorCQkJaWYgKHJlc3VsdCA9PSBudWxsKQorCQkJCXJldHVybiBu
dWxsOworCQkJaWYgKGluZkN0eDE4LmlzUmVzb2x2ZWQocmVzdWx0KSkgeworCQkJCWluZkN0eDE4
LnN0ZXBDb21wbGV0ZWQgPSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJF
RDsKKwkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9u
KQorCQkJCQkoKFJlZmVyZW5jZUV4cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VL
aW5kID0gaW5mQ3R4MTguaW5mZXJlbmNlS2luZDsgICAvLyBDSEVDSworCQkJfSBlbHNlIHsKKwkJ
CQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJCS8vIEFwcGxpY2FiaWxpdHkgc3VjY2VlZGVkLCBwcm9j
ZWVkIHRvIGluZmVyIGludm9jYXRpb24gdHlwZSwgaWYgcG9zc2libGUuCisJCQlUeXBlQmluZGlu
ZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwor
CQkJYm9vbGVhbiBoYXNSZXR1cm5Qcm9ibGVtID0gZmFsc2U7CisJCQlpZiAoZXhwZWN0ZWRUeXBl
ICE9IG51bGwgfHwgIWludm9jYXRpb25TaXRlLmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5l
c1RhcmdldFR5cGUoKSkgeworCQkJCS8vIC0tLS0gMTguNS4yIChJbnZvY2F0aW9uIHR5cGUpOiAt
LS0tCisJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSByZXN1bHQ7CisJCQkJcmVzdWx0ID0gaW5mQ3R4
MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0ZXIgcmVkdWN0aW9uLCB3
aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdp
bmFsTWV0aG9kKTsKKwkJCQlpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gdHJ1ZTsKKwkJCQloYXNS
ZXR1cm5Qcm9ibGVtIHw9IHJlc3VsdCA9PSBudWxsOworCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVt
KQorCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsgLy8gbGV0J3MgcHJlZmVyIGEgdHlw
ZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVybiB0eXBlIG92ZXIgcmVwb3J0aW5nIG5vIG1hdGNo
IGF0IGFsbAorCQkJfQorCQkJaWYgKHJlc3VsdCAhPSBudWxsKSB7CisJCQkJLy8gYXNzZW1ibGUg
dGhlIHNvbHV0aW9uIGV0YzoKKwkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGluZkN0eDE4
LmdldFNvbHV0aW9ucyh0eXBlVmFyaWFibGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVzdWx0KTsKKwkJ
CQlpZiAoc29sdXRpb25zICE9IG51bGwpIHsKKwkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3Bl
LmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxN
ZXRob2QsIHNvbHV0aW9ucyk7CisJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVn
YWxseSB3b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJlc3VsdD8KKwkJCQkJCU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IGluZkN0eDE4LmdldFJldHVyblByb2JsZW1NZXRob2RJZk5l
ZWRlZChleHBlY3RlZFR5cGUsIG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQkJaWYgKHByb2JsZW1N
ZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgeworCQkJCQkJCW1ldGhvZFN1
YnN0aXR1dGUgPSBudWxsOworCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOworCQkJCQkJfQor
CQkJCQl9CisJCQkJCWlmIChpbnZvY2F0aW9uVHlwZUluZmVycmVkKSB7CisJCQkJCQlpZiAoY29t
cGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKKwkJCQkJ
CQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhtZXRob2RTdWJz
dGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9i
bGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50
cyk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKSB7CisJCQkJCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CisJCQkJCQl9CisJ
CQkJCQlpbmZDdHgxOC5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1dChleHBlY3RlZFR5cGUsIG5l
dyBTb2x1dGlvbihtZXRob2RTdWJzdGl0dXRlLCByZXN1bHQpKTsKKwkJCQkJfSBlbHNlIHsKKwkJ
CQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBuZXcgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZyhtZXRob2RTdWJzdGl0dXRlKTsKKwkJCQkJfQorCQkJCQlpZiAoaW52b2NhdGlvblNp
dGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKQorCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9u
U2l0ZSkucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4
KTsgLy8ga2VlcCBjb250ZXh0IHNvIHdlIGNhbiBmaW5pc2ggbGF0ZXIKKwkJCQkJcmV0dXJuIG1l
dGhvZFN1YnN0aXR1dGU7IAorCQkJCX0KKwkJCX0KKwkJCXJldHVybiBudWxsOworCQl9IGNhdGNo
IChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKKwkJCS8vIEZJWE1FIHN0b3AtZ2FwIG1l
YXN1cmUKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcihl
LmdldE1lc3NhZ2UoKSwgaW52b2NhdGlvblNpdGUpOworCQkJcmV0dXJuIG51bGw7CisJCX0KKwl9
CisJCiAJTWV0aG9kQmluZGluZyBib3VuZENoZWNrMTgoU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5n
W10gYXJndW1lbnRzKSB7CiAJCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRpb24gPSB0aGlzOwogCQlQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IHRoaXM7
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQppbmRleCBhZDhm
YTEyLi5jMzY2OTQyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBl
QmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
LmphdmEKQEAgLTQzLDYgKzQzLDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5OdWxsQW5ub3RhdGlvbk1hdGNoaW5nOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5j
ZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJk
OwpAQCAtMTIzLDExICsxMjQsMTIgQEAKIAlwdWJsaWMgYm9vbGVhbiBjYW5CZUluc3RhbnRpYXRl
ZCgpIHsKIAkJcmV0dXJuICgodGhpcy50YWdCaXRzICYgVGFnQml0cy5IYXNEaXJlY3RXaWxkY2Fy
ZCkgPT0gMCkgJiYgc3VwZXIuY2FuQmVJbnN0YW50aWF0ZWQoKTsgLy8gY2Fubm90IGluc3RhbnRp
YXRlIHBhcmFtIHR5cGUgd2l0aCB3aWxkY2FyZCBhcmd1bWVudHMKIAl9CisJCiAJLyoqCiAJICog
UGVyZm9ybSBjYXB0dXJlIGNvbnZlcnNpb24gZm9yIGEgcGFyYW1ldGVyaXplZCB0eXBlIHdpdGgg
d2lsZGNhcmQgYXJndW1lbnRzCiAJICogQHNlZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlR5cGVCaW5kaW5nI2NhcHR1cmUoU2NvcGUsaW50KQogCSAqLwotCXB1Ymxp
YyBUeXBlQmluZGluZyBjYXB0dXJlKFNjb3BlIHNjb3BlLCBpbnQgcG9zaXRpb24pIHsKKwlwdWJs
aWMgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGNhcHR1cmUoU2NvcGUgc2NvcGUsIGludCBwb3Np
dGlvbikgewogCQlpZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzRGlyZWN0V2lsZGNhcmQp
ID09IDApCiAJCQlyZXR1cm4gdGhpczsKIApAQCAtMTM5LDE0ICsxNDEsMjIgQEAKIAkJUmVmZXJl
bmNlQmluZGluZyBjb250ZXh0VHlwZSA9IHNjb3BlLmVuY2xvc2luZ1NvdXJjZVR5cGUoKTsKIAkJ
aWYgKGNvbnRleHRUeXBlICE9IG51bGwpIGNvbnRleHRUeXBlID0gY29udGV4dFR5cGUub3V0ZXJt
b3N0RW5jbG9zaW5nVHlwZSgpOyAvLyBtYXliZSBudWxsIHdoZW4gdXNlZCBwcm9ncmFtbWF0aWNh
bGx5IGJ5IERPTQogCisJCUNvbXBpbGF0aW9uVW5pdFNjb3BlIGNvbXBpbGF0aW9uVW5pdFNjb3Bl
ID0gc2NvcGUuY29tcGlsYXRpb25Vbml0U2NvcGUoKTsKKwkJQVNUTm9kZSBjdWQgPSBjb21waWxh
dGlvblVuaXRTY29wZS5yZWZlcmVuY2VDb250ZXh0OworCQlsb25nIHNvdXJjZUxldmVsID0gdGhp
cy5lbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLnNvdXJjZUxldmVsOworCQkvLyBBIGNvdXBsZSBv
ZiBOVEFUIHRlc3RzIGZhaWwgd2l0aCBpbnRlcm5lZCBjYXB0dXJlcy4gVGhlIG5ldyBtZXNzYWdl
cyBsb29rIGJldHRlciBhbmQgY29ycmVjdC4gU3RlcGhhbiB0byB2YWxpZGF0ZS4gCisJCWZpbmFs
IGJvb2xlYW4gbmVlZFVuaXF1ZUNhcHR1cmUgPSBzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV84ICYmICF0aGlzLmVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkOworCQkKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBs
ZW5ndGg7IGkrKykgewogCQkJVHlwZUJpbmRpbmcgYXJndW1lbnQgPSBvcmlnaW5hbEFyZ3VtZW50
c1tpXTsKIAkJCWlmIChhcmd1bWVudC5raW5kKCkgPT0gQmluZGluZy5XSUxEQ0FSRF9UWVBFKSB7
IC8vIG5vIGNhcHR1cmUgZm9yIGludGVyc2VjdGlvbiB0eXBlcwogCQkJCWZpbmFsIFdpbGRjYXJk
QmluZGluZyB3aWxkY2FyZCA9IChXaWxkY2FyZEJpbmRpbmcpIGFyZ3VtZW50OwogCQkJCWlmICh3
aWxkY2FyZC5ib3VuZEtpbmQgPT0gV2lsZGNhcmQuU1VQRVIgJiYgd2lsZGNhcmQuYm91bmQuaWQg
PT0gVHlwZUlkcy5UX0phdmFMYW5nT2JqZWN0KQogCQkJCQljYXB0dXJlZEFyZ3VtZW50c1tpXSA9
IHdpbGRjYXJkLmJvdW5kOwotCQkJCWVsc2UKLQkJCQkJY2FwdHVyZWRBcmd1bWVudHNbaV0gPSBu
ZXcgQ2FwdHVyZUJpbmRpbmcod2lsZGNhcmQsIGNvbnRleHRUeXBlLCBwb3NpdGlvbiwgc2NvcGUu
Y29tcGlsYXRpb25Vbml0U2NvcGUoKS5uZXh0Q2FwdHVyZUlEKCkpOworCQkJCWVsc2UgaWYgKG5l
ZWRVbmlxdWVDYXB0dXJlKQorCQkJCQljYXB0dXJlZEFyZ3VtZW50c1tpXSA9IHRoaXMuZW52aXJv
bm1lbnQuY3JlYXRlQ2FwdHVyZWRXaWxkY2FyZCh3aWxkY2FyZCwgY29udGV4dFR5cGUsIHBvc2l0
aW9uLCBjdWQsIGNvbXBpbGF0aW9uVW5pdFNjb3BlLm5leHRDYXB0dXJlSUQoKSk7CisJCQkJZWxz
ZSAKKwkJCQkJY2FwdHVyZWRBcmd1bWVudHNbaV0gPSBuZXcgQ2FwdHVyZUJpbmRpbmcod2lsZGNh
cmQsIGNvbnRleHRUeXBlLCBwb3NpdGlvbiwgY29tcGlsYXRpb25Vbml0U2NvcGUubmV4dENhcHR1
cmVJRCgpKTsJCiAJCQl9IGVsc2UgewogCQkJCWNhcHR1cmVkQXJndW1lbnRzW2ldID0gYXJndW1l
bnQ7CiAJCQl9CkBAIC0xNjAsNyArMTcwLDYgQEAKIAkJfQogCQlyZXR1cm4gY2FwdHVyZWRQYXJh
bWV0ZXJpemVkVHlwZTsKIAl9Ci0JCiAJLyoqCiAJICogUGVyZm9ybSBjYXB0dXJlIGRlY29udmVy
c2lvbiBmb3IgYSBwYXJhbWV0ZXJpemVkIHR5cGUgd2l0aCBjYXB0dXJlZCB3aWxkY2FyZCBhcmd1
bWVudHMKIAkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
VHlwZUJpbmRpbmcjdW5jYXB0dXJlKFNjb3BlKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Q
b2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwLi41YWFhZTg5Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Qb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTAs
MCArMSwxOCBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAx
NCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgor
ICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CisKK3B1YmxpYyBjbGFzcyBQb2x5
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nIHsgLy8gY29uZnVzZWQgY2l0aXplbi4KKworCXB1YmxpYyBQb2x5
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBhcHBsaWNhYmxlTWV0aG9kKSB7CisJCXN1cGVyKGFwcGxpY2FibGVNZXRob2Qu
b3JpZ2luYWxNZXRob2QsIGFwcGxpY2FibGVNZXRob2QudHlwZUFyZ3VtZW50cywgYXBwbGljYWJs
ZU1ldGhvZC5lbnZpcm9ubWVudCk7CisJfQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Q
b2x5VHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEK
aW5kZXggZmYwMjcxOS4uOWE2NzJmYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlw
ZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCkBA
IC0zNiw2ICszNiwxMSBAQAogCXB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJp
bmRpbmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXMudmFuaWxsYUNvbXBhdGli
aWx0eSA/IHRoaXMuZXhwcmVzc2lvbi5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKSA6IHRo
aXMuZXhwcmVzc2lvbi5pc0JveGluZ0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKTsKIAl9CisJ
CisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNQb2x5VHlwZSgpIHsKKwkJcmV0dXJuIHRy
dWU7CisJfQogCiAJcHVibGljIGNoYXJbXSBxdWFsaWZpZWRTb3VyY2VOYW1lKCkgewogCQlyZXR1
cm4gcmVhZGFibGVOYW1lKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1NZXRo
b2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1NZXRob2RCaW5kaW5nLmphdmEK
aW5kZXggYmFiMDkxOS4uZjZiYjliNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVt
TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbU1ldGhvZEJpbmRp
bmcuamF2YQpAQCAtNDAsNiArNDAsMTAgQEAKIAkJdGhpcy5yZXR1cm5UeXBlID0gY2xvc2VzdE1h
dGNoLnJldHVyblR5cGU7CiAJfQogfQorQE92ZXJyaWRlCitwdWJsaWMgTWV0aG9kQmluZGluZyBz
aGFsbG93T3JpZ2luYWwoKSB7CisJcmV0dXJuIHRoaXMuY2xvc2VzdE1hdGNoID09IG51bGwgPyB0
aGlzIDogdGhpcy5jbG9zZXN0TWF0Y2guc2hhbGxvd09yaWdpbmFsKCk7Cit9CiAvKiBBUEkKICog
QW5zd2VyIHRoZSBwcm9ibGVtIGlkIGFzc29jaWF0ZWQgd2l0aCB0aGUgcmVjZWl2ZXIuCiAqIE5v
RXJyb3IgaWYgdGhlIHJlY2VpdmVyIGlzIGEgdmFsaWQgYmluZGluZy4KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJl
YXNvbnMuamF2YQppbmRleCAxYmQzZGFmLi43ZmJkZWMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Byb2JsZW1SZWFzb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29u
cy5qYXZhCkBAIC00MCw4ICs0MCw5IEBACiAJZmluYWwgaW50IE5vblN0YXRpY09yQWxpZW5UeXBl
UmVjZWl2ZXIgPSAyMDsKIAlmaW5hbCBpbnQgQXR0ZW1wdFRvQnlwYXNzRGlyZWN0U3VwZXIgPSAy
MTsgLy8gc3VwZXIgYWNjZXNzIHdpdGhpbiBkZWZhdWx0IG1ldGhvZAogCWZpbmFsIGludCBEZWZl
Y3RpdmVDb250YWluZXJBbm5vdGF0aW9uVHlwZSA9IDIyOwotCWZpbmFsIGludCBQYXJhbWV0ZXJp
emVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSA9IDIzOworCWZpbmFsIGludCBJbnZvY2F0aW9u
VHlwZUluZmVyZW5jZUZhaWx1cmUgPSAyMzsKIAlmaW5hbCBpbnQgQXBwbGljYWJsZU1ldGhvZE92
ZXJyaWRkZW5CeUluYXBwbGljYWJsZSA9IDI0OwogCWZpbmFsIGludCBDb250cmFkaWN0b3J5TnVs
bEFubm90YXRpb25zID0gMjU7CiAJZmluYWwgaW50IE5vU3VjaE1ldGhvZE9uQXJyYXkgPSAyNjsK
KwlmaW5hbCBpbnQgSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJbmFwcGxpY2FibGUgPSAyNzsgLy8g
MTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4g
V2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWls
IGFwcGxpY2FiaWxpdHkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBjOWYzZTkwLi45ZTc0OGRlIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCkBAIC04NywxNyArODcsNiBAQAogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5PVF9SRUxB
VEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNT1JFX0dFTkVSSUMgPSAxOwogCi0J
LyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGFuZCBpdHMg
Y2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9mIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNl
IHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgotCSAqLwotCS8qKiBSZXF1ZXN0IEludm9j
YXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4LjUuMSkuICovCi0JcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0JLyoqIFJlcXVlc3QgSW52b2NhdGlvbiBU
eXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZP
Q0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBMSUNBQklMSVRZ
fSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGluZmVyZW5jZS4gKi8KLQlwdWJsaWMgc3Rh
dGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9O
X1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVibGljIFNjb3BlIHBhcmVudDsKIApAQCAt
NjkxLDEwICs2ODAsMTAgQEAKIAkgKiBJbnRlcm5hbCB1c2Ugb25seQogCSAqIEdpdmVuIGEgbWV0
aG9kLCByZXR1cm5zIG51bGwgaWYgYXJndW1lbnRzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gcGFy
YW1ldGVycy4KIAkgKiBXaWxsIGFuc3dlciBhIHN1YnN0aXR1dGVkIG1ldGhvZCBpbiBjYXNlIHRo
ZSBtZXRob2Qgd2FzIGdlbmVyaWMgYW5kIHR5cGUgaW5mZXJlbmNlIGdvdCB0cmlnZ2VyZWQ7Ci0J
ICogaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBvcmlnaW5hbGx5IGNvbXBhdGlibGUsIHRoZW4gc2lt
cGx5IGFuc3dlciBpdCBiYWNrLgorCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxs
eSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4gCiAJICovCi0JcHJvdGVj
dGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmlu
ZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZv
Y2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsKSB7Ci0JCXJldHVybiBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxl
dmVsLCBmYWxzZSk7CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
LCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkgeworCQlyZXR1cm4gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBmYWxzZSk7CiAJ
fQkKIAkvKioKIAkgKiBJbnRlcm5hbCB1c2Ugb25seQpAQCAtNzAyLDggKzY5MSw3IEBACiAJICog
V2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBn
ZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJpZ2dlcmVkOwogCSAqIGluIGNhc2UgdGhl
IG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQg
YmFjay4KIAkgKi8KLQlwcm90ZWN0ZWQgZmluYWwgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMs
Ci0JCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsLCBi
b29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpCisJcHJvdGVjdGVkIGZpbmFsIE1ldGhv
ZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9v
bGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQogCXsKIAkJVHlwZUJpbmRpbmdbXSBnZW5l
cmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7
CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwpAQCAtNzM4
LDkgKzcyNiwxNSBAQAogCQkJCWFyZ3VtZW50cyA9IG5ld0FyZ3M7CiAJCQllbHNlICAvLyBlbnN1
cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGJlbG93IGNhbiB1cGRhdGUgYXJndW1l
bnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2FsbGVyOiAoVE9ETzogYWx3YXlzIGNvcHkgYmVmb3Jl
IHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCiAJCQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVudHMs
IDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoXSwgMCwgYXJnTGVuZ3RoKTsK
LQkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUsIGlu
ZmVyZW5jZUxldmVsKTsKKwkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52
b2NhdGlvblNpdGUpOwogCQkJaWYgKG1ldGhvZCA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gaW5j
b21wYXRpYmxlCiAJCQlpZiAoIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSByZXR1cm4gbWV0aG9k
OyAvLyBib3VuZCBjaGVjayBpc3N1ZSBpcyB0YWtpbmcgcHJlY2VkZW5jZQorCQkJaWYgKGNvbXBp
bGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIG1l
dGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiBpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKKwkJCQlJbnZvY2F0aW9uIGludm9j
YXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7CisJCQkJSW5mZXJlbmNlQ29udGV4
dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOworCQkJCWlmIChpbmZDdHggIT0gbnVsbCAm
JiBpbmZDdHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJF
RCkKKwkJCQkJcmV0dXJuIG1ldGhvZDsgLy8gaW5mZXJlbmNlIGlzIHJlc3BvbnNpYmxlLCBubyBu
ZWVkIHRvIHJlY2hlY2sKKwkJCX0KIAkJfSBlbHNlIGlmIChnZW5lcmljVHlwZUFyZ3VtZW50cyAh
PSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV83KSB7CiAJCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJaWYgKCEoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykgbWV0aG9kKS53YXNJbmZlcnJlZCkKQEAgLTc1NSw3ICs3NDksNyBAQAogCQkJ
aWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2Nh
dGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfNykKIAkJCQl0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzID0gZmFsc2U7CiAJCX0K
LQkJaWYgKChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChtZXRob2QsIGFyZ3VtZW50cywg
dGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgaW52b2NhdGlvblNpdGUpKSA+IE5PVF9DT01QQVRJ
QkxFKSB7CisJCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1l
bnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSkgPiBOT1RfQ09NUEFUSUJMRSkgewogCQkJ
aWYgKChtZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0
dXJlKSAhPSAwKSB7CiAJCQkJLy8gZ2VuZXJhdGUgcG9seW1vcnBoaWMgbWV0aG9kCiAJCQkJcmV0
dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChtZXRob2QsIGFy
Z3VtZW50cyk7CkBAIC03NjcsMTUwICs3NjEsMTAgQEAKIAkJLy8gaW4gd2hpY2ggY2FzZSB0aGlz
IHByb2JsZW0gY2F0ZWdvcnkgd2lsbCBiZSBib2d1cwogCQlpZiAoZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgIT0gbnVsbCAmJiB0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMp
CiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVj
dG9yLCBhcmd1bWVudHMsIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RUeXBlTWlz
bWF0Y2gpOworCQkvLyAxOC41LjEgaWdub3JlcyBhcmd1bWVudHMgbm90IHBlcnRpbmVudCB0byBh
cHBsaWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gbWV0
aG9kIGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eSAoZS5nLCBsYW1iZGEgc2hhcGUvYXJpdHkgbWlz
bWF0Y2ggLi4uKQorCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykKKwkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0
aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5J
bmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJsZSk7CiAJCXJldHVybiBudWxsOyAvLyBp
bmNvbXBhdGlibGUKLQl9Ci0KLQlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwxOChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xl
YW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgSW52b2NhdGlvblNpdGUgc2l0ZSkgewotCQlq
ZGsxOGNoZWNrczoKLQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGNvbXBpbGVy
T3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7
Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgc2l0ZTsKLQkJCWlmICht
ZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJ
CQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250
ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCk7Ci0JCQkJaWYg
KGluZkN0eCAhPSBudWxsKSB7Ci0JCQkJCS8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwgbm8g
bmVlZCB0byByZWNoZWNrCi0JCQkJCWlmIChpbmZDdHguaXNWYXJBcmdzKCkpCi0JCQkJCQlyZXR1
cm4gVkFSQVJHU19DT01QQVRJQkxFOwotCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCQl9Ci0J
CQl9Ci0JCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRpb25zIHdoZXJlIHRoZSBvdXRlciBkaWQg
bm90IGludm9sdmUgYW55IGluZmVyZW5jZToKLQkJCUV4cHJlc3Npb25bXSBpbnZvY2F0aW9uQXJn
dW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJCWlmIChpbnZvY2F0aW9uQXJndW1l
bnRzICE9IG51bGwpIHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhl
bHBlciA9IGludm9jYXRpb24uaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlpbnQgYXJnTGVu
ID0gaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7Ci0JCQkJYm9vbGVhbiBpc1ZhckFyZ3NbXSA9
IG5ldyBib29sZWFuWzFdOyAvLyBlbXVsYXRlIGFuIGluLW91dCBwYXJhbWV0ZXIgZm9yIGNvbXBh
dGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKC4uKQotCQkJCWlzVmFyQXJnc1swXSA9IG1ldGhvZC5p
c1ZhcmFyZ3MoKSAmJiBhcmdMZW4gIT0gbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoOyAvLyBpZiBz
YW1lIGxlbmd0aHMsIGlzVmFyQXJncyBjYW4gc3RpbGwgYmUgdXBkYXRlZCBiZWxvdwotCQkJCWlu
dCBsZXZlbCA9IENPTVBBVElCTEU7Ci0JCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW47IGkr
KykgewotCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudFR5cGUgPSBpIDwgYXJndW1lbnRzLmxlbmd0
aCA/IGFyZ3VtZW50c1tpXSA6IG51bGw7IC8vIGxlbmd0aCBtaXNtYXRjaCBtYXkgaGFwcGVuIGZy
b20gQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5yZXNvbHZlVHlwZSgpIGluIHRoZSBpZiAoYXJnSGFz
RXJyb3IpIGJsb2NrLgotCQkJCQlpbnQgbmV4dExldmVsID0gY29tcGF0aWJpbGl0eUxldmVsMThG
cm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgaW52b2NhdGlvbkFyZ3VtZW50
c1tpXSwgYXJndW1lbnRUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJCWlmIChuZXh0
TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQlyZXR1cm4gbmV4dExldmVsOwotCQkJCQlp
ZiAobmV4dExldmVsID09IC0yKQotCQkJCQkJYnJlYWsgamRrMThjaGVja3M7Ci0JCQkJCWxldmVs
ID0gTWF0aC5tYXgobGV2ZWwsICBuZXh0TGV2ZWwpOwotCQkJCX0KLQkJCQlyZXR1cm4gbGV2ZWw7
IC8vIG5laXRoZXIgTk9UX0NPTVBBVElCTEUgbm9yIHVua25vd24oLTIpIHNlZW4KLQkJCX0KLQkJ
fQotCQkvLyBmYWxsIGJhY2sgdG8gb2xkIG1ldGhvZDoKLQkJYm9vbGVhbiB0b2xlcmF0ZUluZmVy
ZW5jZVZhcmlhYmxlcyA9ICgoc2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pICYm
ICgoUmVmZXJlbmNlRXhwcmVzc2lvbikgc2l0ZSkudHJpYWxSZXNvbHV0aW9uKTsKLQkJcmV0dXJu
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtp
bmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOwotCX0KLQotCXBy
aXZhdGUgaW50IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKE1ldGhvZEJpbmRpbmcgbWV0
aG9kLCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciwgRXhwcmVzc2lv
biBpbnZvY0FyZywgVHlwZUJpbmRpbmcgYXJnVHlwZSwgaW50IGFyZ0xlbiwgaW50IGksIGJvb2xl
YW5bXSBpc1ZhckFyZ3MpCi0JewotCQlpbnQgY29tcGF0aWJsZSA9IGlzVmFyQXJnc1swXSA/IFZB
UkFSR1NfQ09NUEFUSUJMRSA6IENPTVBBVElCTEU7Ci0JCVR5cGVCaW5kaW5nIHJlc29sdmVkVHlw
ZSA9IGludm9jQXJnLnJlc29sdmVkVHlwZTsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IElu
ZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIGlzVmFy
QXJnc1swXSk7Ci0JCWlmICghaXNWYXJBcmdzWzBdICYmIHNob3VsZFRyeVZhcmFyZ3MobWV0aG9k
LCByZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpKSB7Ci0JCQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwot
CQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBh
cmFtZXRlcnMsIGksIHRydWUpOwotCQl9Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwpCi0JCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7IC8vIG1pc21hdGNoaW5nIG51bWJlciBvZiBhcmdzIG9yIG90
aGVyIHNldmVyZSBwcm9ibGVtIGluc2lkZSBtZXRob2QgYmluZGluZwotCQlpbnQgbGV2ZWwgPSAt
MjsgLy8gZG9uJ3Qga25vdwotCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYm
IHJlc29sdmVkVHlwZSAhPSBudWxsKSB7Ci0JCQlJbnZvY2F0aW9uIGlubmVyUG9seSA9IChJbnZv
Y2F0aW9uKSBpbnZvY0FyZzsKLQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElC
TEUpIHsKLQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKGFyZ1R5cGUsIHJlc29sdmVkVHlw
ZSkgJiYgaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJaW5uZXJJbmZlcmVuY2VI
ZWxwZXIucmVnaXN0ZXJJbm5lclJlc3VsdChtZXRob2QsIHJlc29sdmVkVHlwZSwgYXJnTGVuLCBp
KTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJfSBlbHNlIHsK
LQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlubmVyUG9seS5iaW5kaW5nKG51bGws
IGZhbHNlLCBudWxsKTsgLy8gMS4gdHJ5IHdpdGhvdXQgdXBkYXRlCi0JCQkJaWYgKGlubmVyQmlu
ZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJ
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJQYXJhbWV0ZXJpemVkID0g
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgaW5uZXJCaW5kaW5nOwotCQkJCQlJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5lclBvbHkuZ2V0SW5mZXJlbmNlQ29udGV4
dChpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiAhaW5m
Q3R4MTguaGFzUmVzdWx0Rm9yKHRhcmdldFR5cGUpKSB7Ci0JCQkJCQkvLyBub3QgZGV0ZWN0ZWQg
YXMgY29tcGF0aWJsZSwgYmVjYXVzZSBpbmZlcmVuY2Ugc3RpbGwgbmVlZHMgdG8gY29tcGxldGU/
Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJCQlNZXRo
b2RCaW5kaW5nIHNvbHV0aW9uID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5lclBv
bHksIGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCQlpZiAoc29sdXRpb24gIT0gbnVsbCAmJiBz
b2x1dGlvbi5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJaWYgKGlubmVyUG9seS51cGRhdGVC
aW5kaW5ncyhzb2x1dGlvbiwgdGFyZ2V0VHlwZSkpIHsKLQkJCQkJCQkJaWYgKGlubmVySW5mZXJl
bmNlSGVscGVyICE9IG51bGwpCi0JCQkJCQkJCQlpbm5lckluZmVyZW5jZUhlbHBlci5yZWdpc3Rl
cklubmVyUmVzdWx0KG1ldGhvZCwgaW52b2NBcmcucmVzb2x2ZWRUeXBlLCBhcmdMZW4sIGkpOwot
CQkJCQkJCX0KLQkJCQkJCQlpZiAoc29sdXRpb24ucmV0dXJuVHlwZSAhPSBudWxsKSB7Ci0JCQkJ
CQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHNvbHV0aW9uLnJldHVyblR5
cGUsIHRhcmdldFR5cGUpOwotCQkJCQkJCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUpCi0J
CQkJCQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJCQkJCX0KLQkJ
CQkJCX0KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlwZShudWxsKTsKLQkJCQkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJfSBlbHNlIGlmIChpbm5lclBvbHkgaW5zdGFuY2VvZiBB
bGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQkJLy8gbm90IGRldGVjdGVkIGFzIGNvbXBhdGli
bGUsIGJlY2F1c2UgaXRzIGEgZGlhbW9uZCB3aG9zZSB0eXBlIGhhc24ndCB5ZXQgYmVlbiBpbmZl
cnJlZD8KLQkJCQkJCVR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cyA9IHJlc29sdmVkVHlwZS50
eXBlQXJndW1lbnRzKCk7Ci0JCQkJCQlpZiAodHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHR5cGVB
cmd1bWVudHMubGVuZ3RoID09IDApIHsKLQkJCQkJCQlBbGxvY2F0aW9uRXhwcmVzc2lvbiBhbGxv
YyA9IChBbGxvY2F0aW9uRXhwcmVzc2lvbikgaW5uZXJQb2x5OwotCQkJCQkJCWlmICgoYWxsb2Mu
dHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDApIHsKLQkJCQkJCQkJLy8gbm90LXll
dC1pbmZlcnJlZCBkaWFtb25kOiBlcmFzdXJlIGNvbXBhdGliaWxpdHkgc2hvdWxkIHN1ZmZpY2Us
IGRldGFpbCB3aWxsIGJlIGNoZWNrZWQgdXNpbmcgaW5mZXJlbmNlCi0JCQkJCQkJCWlmIChyZXNv
bHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLmVyYXN1cmUoKSwgdGhpcykpCi0J
CQkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZTsKLQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxF
OwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJfQotCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5IGlu
c3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQkJTWV0aG9kQmluZGluZyB1cGRh
dGVkTWV0aG9kID0gaW5uZXJQb2x5LmJpbmRpbmcodGFyZ2V0VHlwZSwgZmFsc2UsIG51bGwpOyAv
LyAyLiB0cnkgd2l0aCB1cGRhdGluZwotCQkJCQlpZiAodXBkYXRlZE1ldGhvZCAhPSBpbm5lckJp
bmRpbmcgJiYgdXBkYXRlZE1ldGhvZCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5kZWNsYXJpbmdD
bGFzcy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUpKQotCQkJCQkJCXJldHVybiBjb21wYXRp
YmxlOwotCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJfSBlbHNlIGlmICh1cGRh
dGVkTWV0aG9kLnByb2JsZW1JZCgpID09IFByb2JsZW1SZWFzb25zLkFtYmlndW91cykgewotCQkJ
CQkJCWxldmVsID0gLTI7IC8vIG5laXRoZXIgZ29vZCBub3IgYmFkLCBhbnN3ZXIgInVua25vd24i
Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52b2NBcmcuaXNQ
b2x5RXhwcmVzc2lvbigpKSB7Ci0JCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBDb25kaXRpb25h
bEV4cHJlc3Npb24pIHsKLQkJCQlDb25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9u
YWxFeHByZXNzaW9uKSBpbnZvY0FyZzsKLQkJCQlpbnQgbGV2ZWwxID0gY29tcGF0aWJpbGl0eUxl
dmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgY2UudmFsdWVJZlRy
dWUsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsKLQkJCQlpZiAobGV2ZWwxID09IE5P
VF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJaW50IGxldmVs
MiA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VI
ZWxwZXIsIGNlLnZhbHVlSWZGYWxzZSwgYXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwot
CQkJCWlmIChsZXZlbDIgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09NUEFU
SUJMRTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgobGV2ZWwxLCBsZXZlbDIpOwotCQkJfQotCQkJLy8g
TEUgb3IgUkU6Ci0JCQlpZiAoaW52b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0
aGlzKSkKLQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCWlmICghaXNWYXJBcmdzWzBdICYmIG1l
dGhvZC5pc1ZhcmFyZ3MoKSkgeyAvLyBjYW4ndCB1c2Ugc2hvdWxkVHJ5VmFyYXJncyB3aXRob3V0
IGEgcmVzb2x2ZWRUeXBlLCBzbyBqdXN0IHRyeSBpdDoKLQkJCQlpc1ZhckFyZ3NbMF0gPSB0cnVl
OwotCQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhv
ZC5wYXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJCQlpZiAodGFyZ2V0VHlwZSAhPSBudWxsICYmIGlu
dm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQkJCXJldHVybiBW
QVJBUkdTX0NPTVBBVElCTEU7Ci0JCQl9Ci0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCX0g
ZWxzZSBpZiAocmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgcmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5k
aW5nKCkpIHsKLQkJCS8vIG5lZWQgdG8gaGFuZGxlICJub3JtYWwiIGV4cHJlc3Npb25zIHRvbywg
c2luY2UgbWl4ZWQgcG9seS9zdGFuZGFsb25lIGFyZ3VtZW50IGxpc3RzIG11c3QgYmUgZnVsbHkg
YW5hbHl6ZWQuCi0JCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29sdmVk
VHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCX0KLQkJcmV0dXJuIGxldmVsOwotCX0KLQotCXByaXZhdGUg
Ym9vbGVhbiBzaG91bGRUcnlWYXJhcmdzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGlu
ZyByZXNvbHZlZFR5cGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJaWYgKCFtZXRob2Qu
aXNWYXJhcmdzKCkpCi0JCQlyZXR1cm4gZmFsc2U7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwp
Ci0JCQlyZXR1cm4gdHJ1ZTsJLy8gb2ZmIHJhbmdlCi0JCWlmICh0YXJnZXRUeXBlLmlzQXJyYXlU
eXBlKCkgJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgIXJlc29sdmVkVHlwZS5pc0NvbXBhdGli
bGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJcmV0dXJuIHRydWU7CS8vIG5vdCBhIGRpcmVj
dCBtYXRjaCBidXQgaG9wZSB0byBpbXByb3ZlCi0JCXJldHVybiBmYWxzZTsKIAl9CiAKIAkvKioK
QEAgLTEyNjcsNyArMTEyMSw3IEBACiAJCQluZXh0OgogCQkJZm9yIChpbnQgaSA9IHN0YXJ0Rm91
bmRTaXplOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJp
bmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJp
bmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJp
bmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJ
CQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5p
c1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoY29uY3JldGVNYXRjaGVzICE9IG51bGwpIHsK
QEAgLTEyOTcsOCArMTE1MSw2IEBACiAJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOyAvLyBjYW4g
YmUgbnVsbAogCQkJfQogCQkJY29uY3JldGVNYXRjaCA9IGNhbmRpZGF0ZXNbMF07Ci0JCQkvLyAx
Ljg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3Mg
KDE4LjUuMik6Ci0JCQljb25jcmV0ZU1hdGNoID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0
aW9uU2l0ZSwgY29uY3JldGVNYXRjaCwgYXJndW1lbnRUeXBlcyk7CiAJCQlpZiAoY29uY3JldGVN
YXRjaCAhPSBudWxsKQogCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVy
ZW5jZXMoY29uY3JldGVNYXRjaC50aHJvd25FeGNlcHRpb25zKTsKIAkJCXJldHVybiBjb25jcmV0
ZU1hdGNoOwpAQCAtMTM3MSw3ICsxMjIzLDcgQEAKIAkJCQkvLyB0YXJnZXRpbmcgYSBnZW5lcmlj
IG1ldGhvZCBjb3VsZCBmaW5kIGFuIGV4YWN0IG1hdGNoIHdpdGggdmFyaWFibGUgcmV0dXJuIHR5
cGUKIAkJCQlpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAhPSBudWxs
KSB7CiAJCQkJCS8vIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKC4uKSB3aWxsIHJldHVybiBhIFBv
bHltb3JwaGljTWV0aG9kQmluZGluZyBpZiBuZWVkZWQKLQkJCQkJZXhhY3RNZXRob2QgPSBjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlv
blNpdGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwog
CQkJCX0gZWxzZSBpZiAoKGV4YWN0TWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Q
b2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCQkvLyBnZW5lcmF0ZSBwb2x5bW9ycGhp
YyBtZXRob2QKIAkJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9ycGhp
Y01ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcyk7CkBAIC0xNzYzLDIyICsxNjE1LDEz
IEBACiAJCQkvLyBhcmd1bWVudCB0eXBlIGNvbXBhdGliaWxpdHkgY2hlY2sKIAkJCWZvciAoaW50
IGkgPSAwOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJp
bmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJp
bmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJp
bmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJ
CQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5p
c1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoZm91bmRTaXplID09IDEgJiYgY29tcGF0aWJs
ZU1ldGhvZC5jYW5CZVNlZW5CeShyZWNlaXZlclR5cGUsIGludm9jYXRpb25TaXRlLCB0aGlzKSkg
ewogCQkJCQkJCS8vIHJldHVybiB0aGUgc2luZ2xlIHZpc2libGUgbWF0Y2ggbm93CiAJCQkJCQkJ
aWYgKHNlYXJjaEZvckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkKIAkJCQkJCQkJcmV0dXJuIGZpbmRE
ZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9k
QmluZGluZyBbXSB7Y29tcGF0aWJsZU1ldGhvZH0pOwotLy8gPT09PSAxLjg6IEZpbmFsaXplIHR5
cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09PQotCQkJCQkJCU1ldGhvZEJpbmRp
bmcgaW1wcm92ZWQgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjb21wYXRp
YmxlTWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKLQkJCQkJCQlpZiAoaW1wcm92ZWQgIT0gbnVsbCAm
JiBpbXByb3ZlZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCWNvbXBhdGlibGVNZXRob2Qg
PSBpbXByb3ZlZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJCQlwcm9ibGVtTWV0aG9kID0gaW1w
cm92ZWQ7Ci0JCQkJCQkJCWNvbnRpbnVlOwotCQkJCQkJCX0KLS8vID09PT0gMS44ID09PT0KIAkJ
CQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29tcGF0aWJsZU1ldGhvZC50aHJv
d25FeGNlcHRpb25zKTsKIAkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZU1ldGhvZDsKIAkJCQkJCX0K
QEAgLTE4ODcsOCArMTczMCw3IEBACiAJCQljYXNlIDEgOgogCQkJCWlmIChzZWFyY2hGb3JEZWZh
dWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9k
KHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBj
bGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJpbmRpbmcgW10geyBjYW5kaWRh
dGVzWzBdIH0pOwotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9y
bSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQljYW5kaWRhdGUgPSBpbmZlckludm9j
YXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRhdGVzWzBdLCBhcmd1bWVudFR5cGVzKTsK
KwkJCQljYW5kaWRhdGUgPSBjYW5kaWRhdGVzWzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVs
bCkKIAkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25F
eGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtMjM4MCw3ICsyMjIyLDEwIEBA
CiAJCX0KIAkJaWYgKGV4YWN0TWV0aG9kID09IG51bGwgfHwgIWV4YWN0TWV0aG9kLmNhbkJlU2Vl
bkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCXJldHVybiBudWxsOwotCQlpZiAoZXhhY3RN
ZXRob2QuaXNWYXJhcmdzKCkgfHwgZXhhY3RNZXRob2QudHlwZVZhcmlhYmxlcygpICE9IEJpbmRp
bmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVu
dHMoKSA9PSBudWxsKQorCQkKKwkJZmluYWwgVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRzID0g
aW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKKwkJVHlwZVZhcmlhYmxlQmlu
ZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdE1ldGhvZC50eXBlVmFyaWFibGVzKCk7CisJCWlm
IChleGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTICYmICh0eXBlQXJndW1lbnRzID09IG51bGwgfHwgdHlwZUFyZ3VtZW50
cy5sZW5ndGggIT0gdHlwZVZhcmlhYmxlcy5sZW5ndGgpKSkKIAkJCXJldHVybiBudWxsOwogCQkK
IAkJaWYgKHJlY2VpdmVyVHlwZS5pc0FycmF5VHlwZSgpKSB7CkBAIC0yMzk1LDYgKzIyNDAsMTAg
QEAKIAkJewogCQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3JlYXRlR2V0Q2xhc3NNZXRob2QocmVj
ZWl2ZXJUeXBlLCBleGFjdE1ldGhvZCwgdGhpcyk7CiAJCX0KKwkJCisJCWlmICh0eXBlVmFyaWFi
bGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIAorCQkJcmV0dXJuIGVudmlyb25tZW50
KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoZXhhY3RNZXRob2QsIHR5cGVBcmd1
bWVudHMpOworCQogCQlyZXR1cm4gZXhhY3RNZXRob2Q7CiAJfQogCQkKQEAgLTI0MTcsMTkgKzIy
NjYsMjYgQEAKIAkJTWV0aG9kQmluZGluZyBleGFjdENvbnN0cnVjdG9yID0gbnVsbDsKIAkJdW5p
dFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2UocmVjZWl2ZXJUeXBlKTsKIAkJTWV0aG9kQmluZGlu
Z1tdIG1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQp
OworCQlmaW5hbCBUeXBlQmluZGluZ1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzID0gaW52b2NhdGlv
blNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKIAkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9
IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCU1ldGhvZEJpbmRpbmcgY29u
c3RydWN0b3IgPSBtZXRob2RzW2ldOwogCQkJaWYgKCFjb25zdHJ1Y3Rvci5jYW5CZVNlZW5CeShp
bnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQkJY29udGludWU7CiAJCQlpZiAoY29uc3RydWN0b3Iu
aXNWYXJhcmdzKCkpCiAJCQkJcmV0dXJuIG51bGw7Ci0JCQlpZiAoY29uc3RydWN0b3IudHlwZVZh
cmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNpdGUu
Z2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkJaWYgKGNvbnN0cnVjdG9yLnR5cGVW
YXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGdlbmVyaWNUeXBlQXJn
dW1lbnRzID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJCQlpZiAoZXhhY3RDb25zdHJ1Y3Rv
ciA9PSBudWxsKSB7CiAJCQkJZXhhY3RDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yOwogCQkJfSBl
bHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJfQorCQlmaW5hbCBUeXBlVmFyaWFibGVC
aW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0Q29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygp
OworCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7CisJ
CQlpZiAodHlwZVZhcmlhYmxlcy5sZW5ndGggIT0gZ2VuZXJpY1R5cGVBcmd1bWVudHMubGVuZ3Ro
KQorCQkJCXJldHVybiBudWxsOworCQkJZXhhY3RDb25zdHJ1Y3RvciA9IGVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoZXhhY3RDb25zdHJ1Y3RvciwgZ2VuZXJp
Y1R5cGVBcmd1bWVudHMpOwogCQl9CiAJCXJldHVybiBleGFjdENvbnN0cnVjdG9yOwogCX0KQEAg
LTI0NTgsNyArMjMxNCw3IEBACiAJCQlpZiAobWV0aG9kQmluZGluZyAhPSBudWxsICYmIG1ldGhv
ZEJpbmRpbmcuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJCQkgICAgLy8g
dGFyZ2V0aW5nIGEgbm9uIGdlbmVyaWMgY29uc3RydWN0b3Igd2l0aCB0eXBlIGFyZ3VtZW50cyA/
CiAJCQkgICAgaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0gbnVs
bCkKLQkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhv
ZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7
CisJCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RC
aW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJcmV0dXJuIG1ldGhv
ZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVyVHlw
ZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgpOwpA
QCAtMjQ3Miw3ICsyMzI4LDcgQEAKIAkJCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQkJTWV0
aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbnVsbDsKIAkJCWZvciAoaW50IGkgPSAwLCBsZW5n
dGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkJTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCU1ldGhv
ZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhv
ZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlpZiAoY29tcGF0aWJs
ZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5k
aW5nKCkpCiAJCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVN
ZXRob2Q7CkBAIC0yNDk1LDggKzIzNTEsNyBAQAogCQkJCQl2aXNpYmxlW3Zpc2libGVJbmRleCsr
XSA9IG1ldGhvZDsKIAkJCX0KIAkJCWlmICh2aXNpYmxlSW5kZXggPT0gMSkgewotCQkJCS8vIDEu
ODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAo
MTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwg
dmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJcmV0dXJuIHZpc2libGVbMF07CiAJCQl9
CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDApCiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9k
QmluZGluZygKQEAgLTI3NjAsNyArMjYxNSw3IEBACiAJCQkJCQkJCWlmIChmb3VuZFByb2JsZW0g
PT0gbnVsbCkKIAkJCQkJCQkJCWZvdW5kUHJvYmxlbSA9IHBvc3NpYmxlOyAvLyBhbnN3ZXIgYXMg
ZXJyb3IgY2FzZSBtYXRjaAogCQkJCQkJCX0gZWxzZSBpZiAocG9zc2libGUuaXNTdGF0aWMoKSkg
ewotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJ
Q0FCSUxJVFkpOworCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNp
dGUpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCQkJCQlp
ZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQkJCQkJaWYgKGNv
bXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkodW5pdFNjb3BlLmZQYWNrYWdlKSkgewpAQCAtMzU5
Niw4ICszNDUxLDggQEAKIAkJCWZvciAoaW50IGkgPSAob25lUGFyYW1zTGVuZ3RoID4gdHdvUGFy
YW1zTGVuZ3RoID8gdHdvUGFyYW1zTGVuZ3RoIDogb25lUGFyYW1zTGVuZ3RoKSAtIDI7IGkgPj0g
MDsgaS0tKQogCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMob25lUGFyYW1zW2ldLCB0d29Q
YXJhbXNbaV0pICYmICFvbmVQYXJhbXNbaV0uaXNDb21wYXRpYmxlV2l0aCh0d29QYXJhbXNbaV0p
KQogCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KG9uZSwgdHdvUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gTk9UX0NPTVBBVElCTEUKLQkJCQkJJiYg
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFyYW1zLCB0cnVlLCBmYWxzZSkg
PT0gVkFSQVJHU19DT01QQVRJQkxFKQorCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChvbmUsIHR3b1BhcmFtcywgdHJ1ZSkgPT0gTk9UX0NPTVBBVElCTEUKKwkJCQkJJiYgcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFyYW1zLCB0cnVlKSA9PSBWQVJBUkdTX0NP
TVBBVElCTEUpCiAJCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJcmV0dXJuIGZhbHNlOwpAQCAtNDM3
Miw0NCArNDIyNywxMiBAQAogCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIG1vc3RTcGVj
aWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdIHZpc2libGUsIGludCB2aXNpYmxlU2l6
ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBpbnZv
Y2F0aW9uU2l0ZSwgUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUpIHsKIAogCQlib29sZWFu
IGlzSmRrMTggPSBjb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV84OwotCi0JCS8vIGNvbW1vbiBwYXJ0IGZvciBhbGwgY29tcGxpYW5jZSBsZXZl
bHM6CiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W3Zpc2libGVTaXplXTsK
LQkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJs
ZVNpemU7IGkrKykgewotCQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IGFyZ3VtZW50VHlwZXM7
Ci0JCQlpZiAoaXNKZGsxOCAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24p
IHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9ICgoSW52
b2NhdGlvbilpbnZvY2F0aW9uU2l0ZSkuaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlpZiAo
aW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJYXJnVHlwZXMgPSBpbm5lckluZmVy
ZW5jZUhlbHBlci5nZXRBcmd1bWVudFR5cGVzRm9yQ2FuZGlkYXRlKHZpc2libGVbaV0sIGFyZ3Vt
ZW50VHlwZXMpOwotCQkJfQotCQkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKHZpc2libGVbaV0sIGFyZ1R5cGVzKSkgIT0gTk9UX0NPTVBB
VElCTEUpIHsKLQkJCQlpZiAoaSAhPSBjb21wYXRpYmxlQ291bnQpIHsKLQkJCQkJdmlzaWJsZVtj
b21wYXRpYmxlQ291bnRdID0gdmlzaWJsZVtpXTsKLQkJCQkJY29tcGF0aWJpbGl0eUxldmVsc1tj
b21wYXRpYmxlQ291bnRdID0gY29tcGF0aWJpbGl0eUxldmVsc1tpXTsKLQkJCQl9Ci0JCQkJY29t
cGF0aWJsZUNvdW50Kys7Ci0JCQl9Ci0JCX0KLS8vIFRPRE86IERpc2FibGVkLCBiZWNhdXNlIHdl
IGtub3cgYSBzaXR1YXRpb24gd2hlcmUgdGhpcyBpcyBleHBlY3RlZCwgc2VlIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy80Mjk0OTAKLS8vCQlpZiAoY29tcGF0aWJsZUNvdW50ICE9IHZpc2libGVT
aXplKSB7Ci0vLwkJCXByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VQcm9ibGVtKCIo
UmVjb3ZlcmVkKSBJbnRlcm5hbCBpbmNvbnNpc3RlbmN5IHdoaWxlIGNoZWNraW5nIGludm9jYXRp
b24gYW1iaWd1aXR5IiwgaW52b2NhdGlvblNpdGUsIFByb2JsZW1TZXZlcml0aWVzLldhcm5pbmcp
OyAvLyROT04tTkxTLTEkCi0vLwkJfQotCQlpZiAoY29tcGF0aWJsZUNvdW50ID09IDApIHsKLQkJ
CXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXS5zZWxlY3RvciwgYXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwotCQl9IGVsc2UgaWYgKGNvbXBh
dGlibGVDb3VudCA9PSAxKSB7Ci0JCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52
b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbMF0sIGFyZ3VtZW50VHlwZXMpOwot
CQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQotCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVj
b3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwotCQkJcmV0dXJu
IGNhbmRpZGF0ZTsKLQkJfQotCQlpZiAoY29tcGF0aWJsZUNvdW50ICE9IHZpc2libGVTaXplKSB7
Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KHZpc2libGUsIDAsIHZpc2libGUgPSBuZXcgTWV0aG9kQmlu
ZGluZ1t2aXNpYmxlU2l6ZSA9IGNvbXBhdGlibGVDb3VudF0sIDAsIGNvbXBhdGlibGVDb3VudCk7
Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KGNvbXBhdGliaWxpdHlMZXZlbHMsIDAsIGNvbXBhdGliaWxp
dHlMZXZlbHMgPSBuZXcgaW50W2NvbXBhdGlibGVDb3VudF0sIDAsIGNvbXBhdGlibGVDb3VudCk7
Ci0JCX0KKwkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKQorCQkJY29tcGF0
aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ld
LCBhcmd1bWVudFR5cGVzKTsKKwkJCiAJCQogCQlNZXRob2RCaW5kaW5nW10gbW9yZVNwZWNpZmlj
ID0gbmV3IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemVdOwotCiAJCWlmIChpc0pkazE4KSB7CiAJ
CQkvLyAxNS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1vc3QgU3BlY2lmaWMgTWV0aG9kCiAJCQlpbnQg
Y291bnQgPSAwOwpAQCAtNDQ2Myw3ICs0Mjg2LDcgQEAKIAkJCWlmIChjb3VudCA9PSAwKSB7CiAJ
CQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLCB2aXNpYmxlWzBd
LnNlbGVjdG9yLCB2aXNpYmxlWzBdLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLkFtYmlndW91
cyk7CiAJCQl9IGVsc2UgaWYgKGNvdW50ID09IDEpIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNhbmRp
ZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIG1vcmVTcGVjaWZpY1sw
XSwgYXJndW1lbnRUeXBlcyk7CisJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBtb3JlU3Bl
Y2lmaWNbMF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQljb21waWxhdGlvblVu
aXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25z
KTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDUxNiw3ICs0MzM5LDcgQEAKIAkJCQkJCQl9
CiAJCQkJCQl9CiAJCQkJCQlNZXRob2RCaW5kaW5nIGFjY2VwdGFibGUgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChtZXRob2RUb1Rlc3QsIHRpZWJyZWFrTWV0aG9kLnBhcmFtZXRlcnMsCi0JCQkJ
CQkJCXRpZUJyZWFrSW52b2NhdGlvblNpdGUsIElOVk9DQVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFS
QVJHU19DT01QQVRJQkxFKTsKKwkJCQkJCQkJdGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwg
PT0gVkFSQVJHU19DT01QQVRJQkxFKTsKIAkJCQkJCS8qIFRoZXJlIGFyZSA0IGNob2ljZXMgdG8g
Y29uc2lkZXIgd2l0aCBjdXJyZW50ICYgbmV4dCA6CiAJCQkJCQkgZm9vKEIpICYgZm9vKEEpIHdo
ZXJlIEIgZXh0ZW5kcyBBCiAJCQkJCQkgMS4gdGhlIDIgbWV0aG9kcyBhcmUgZXF1YWwgKGJvdGgg
YWNjZXB0IGVhY2ggb3RoZXJzIHBhcmFtZXRlcnMpIC0+IHdhbnQgdG8gY29udGludWUKQEAgLTQ1
NDAsOCArNDM2Myw3IEBACiAJCQlpZiAoY291bnQgPT0gMSkgewogCQkJCWZvciAoaW50IGkgPSAw
OyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewogCQkJCQlpZiAobW9yZVNwZWNpZmljW2ldICE9IG51
bGwpIHsKLQkJCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBv
dXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRl
ID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVtpXSwgYXJndW1l
bnRUeXBlcyk7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IHZpc2libGVbaV07CiAJ
CQkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUo
KS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJ
CQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDY2Miw4ICs0NDg0LDcgQEAKIAkJCQlpZiAobW9zdFNw
ZWNpZmljRXhjZXB0aW9ucyAhPSBudWxsICYmIG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgIT0gY3Vy
cmVudC50aHJvd25FeGNlcHRpb25zKSB7CiAJCQkJCXJldHVybiBuZXcgTW9zdFNwZWNpZmljRXhj
ZXB0aW9uTWV0aG9kQmluZGluZyhjdXJyZW50LCBtb3N0U3BlY2lmaWNFeGNlcHRpb25zKTsKIAkJ
CQl9Ci0JCQkJLy8gMS44OiBCZWZvcmUgcmV0dXJuaW5nIGdpdmUgaW5mZXJlbmNlIGEgY2hhbmNl
IHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVy
SW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGN1cnJlbnQsIGFyZ3VtZW50VHlwZXMpOwor
CQkJCXJldHVybiBjdXJyZW50OwogCQkJfQogCQl9CiAKQEAgLTQ3MjgsOSArNDU0OSw5IEBACiAJ
fQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGlu
ZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7Ci0JCXJldHVybiBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSk7CisJCXJl
dHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNl
KTsKIAl9CQotCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJp
bmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJ
cHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRo
b2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMpIHsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnM7
CiAJCWludCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOwogCQlpbnQgYXJnTGVuZ3Ro
ID0gYXJndW1lbnRzLmxlbmd0aDsKQEAgLTQ3NjIsMTQgKzQ1ODMsMTQgQEAKIAkJCQlUeXBlQmlu
ZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4XTsgLy8gaXMgYW4gQXJyYXlCaW5kaW5n
IGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBhcmcgPSBhcmd1bWVudHNbbGFzdEluZGV4
XTsKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpKSB7Ci0JCQkJCWxl
dmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJl
YWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCQls
ZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJy
ZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUp
IHsKIAkJCQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNhbGxlZCB3aXRoIFgKIAkJCQkJCXBhcmFt
ID0gKChBcnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJCWlmICh0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJYXJnID0gKChBcnJheUJpbmRpbmcpIGFy
ZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9s
ZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFU
SUJMRTsKIAkJCQkJCWxldmVsID0gVkFSQVJHU19DT01QQVRJQkxFOyAvLyB2YXJhcmdzIHN1cHBv
cnQgbmVlZGVkCiAJCQkJCX0KQEAgLTQ3NzksNyArNDYwMCw3IEBACiAJCQkJCVR5cGVCaW5kaW5n
IHBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNU
eXBlKCk7CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5kZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykg
ewogCQkJCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYg
KGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVs
ZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVx
dWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJh
bSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlh
YmxlcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxz
KHBhcmFtLCBhcmcpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBl
bnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJ
CXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJfQogCQkJCX0gIGVsc2UgaWYgKGxhc3RJbmRl
eCAhPSBhcmdMZW5ndGgpIHsgLy8gY2FuIGNhbGwgZm9vKGludCBpLCBYIC4uLiB4KSB3aXRoIGZv
bygxKSBidXQgTk9UIGZvbygpOwpAQCAtNDc5NSw3ICs0NjE2LDcgQEAKIAkJCVR5cGVCaW5kaW5n
IHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRp
bmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChU
eXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkgewotCQkJCWludCBuZXdMZXZlbCA9IHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQlpbnQgbmV3TGV2
ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVh
a2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAobmV3TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUp
CiAJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQlpZiAobmV3TGV2ZWwgPiBsZXZlbCkK
QEAgLTQ4MjQsNyArNDY0NSw3IEBACiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CiAJCi0J
cHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywg
VHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVh
a2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7
CisJcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFy
ZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVC
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCS8vIG9ubHkgY2FsbGVkIGlmIGVudi5vcHRpb25z
LnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUKIAkJaWYgKGFyZyA9PSBu
dWxsIHx8IHBhcmFtID09IG51bGwpCiAJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CkBAIC00ODQz
LDExICs0NjY0LDYgQEAKIAkJCVR5cGVCaW5kaW5nIGNvbnZlcnRlZFR5cGUgPSBlbnYuY29tcHV0
ZUJveGluZ1R5cGUoYXJnKTsKIAkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoY29udmVy
dGVkVHlwZSwgcGFyYW0pIHx8IGNvbnZlcnRlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChwYXJhbSwg
dGhpcykpCiAJCQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFUSUJMRTsKLQkJfQotCQlpZiAodG9sZXJh
dGVJbmZlcmVuY2VWYXJpYWJsZXMgJiYgKCFhcmcuaXNQcm9wZXJUeXBlKGZhbHNlKSB8fCAhcGFy
YW0uaXNQcm9wZXJUeXBlKGZhbHNlKSkpIHsKLQkJCS8vIGR1cmluZyB0eXBlIGluZmVyZW5jZSBp
bnZvbHZpbmcgYSBSZWZlcmVuY2VFeHByZXNzaW9uIGlnbm9yZSBpbmNvbXBhdGliaWxpdHkgZHVl
IHRvIGFuIGluZmVyZW5jZSB2YXJpYWJsZSwKLQkJCS8vIGtub3dpbmcgdGhhdCB3ZSB3aWxsIHBy
b2R1Y2UgY29uc3RyYWludHMgdGhhdCB3aWxsIGVuc3VyZSBjb21wYXRpYmxlIGluc3RhbnRpYXRp
b24gKGlmIG9uZSBleGlzdHMpLgotCQkJcmV0dXJuIENPTVBBVElCTEU7IAogCQl9CiAJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsKIAl9CkBAIC00OTMzLDcgKzQ3NDksNyBAQAogCSAgIHRoYXQgY291
bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxs
IGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291
bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3Ry
dWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBn
ZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUs
IFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFy
Z3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb24gYWxsb2NhdGlvblNpdGUpIHsKKwlwdWJsaWMg
TWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcg
YWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb25TaXRlIGFsbG9jYXRp
b25TaXRlKSB7CiAJCQogCQkvLyBhbGxvY2F0aW9uVHlwZSBpcyB0aGUgZGlhbW9uZCB0eXBlLiBv
cmlnaW5hbEVuY2xvc2luZ1R5cGUgaXMgdGhlIHJlYWwgZW5jbG9zaW5nIHR5cGUgPT0+IG1heSBi
ZSBwYXJhbWV0ZXJpemVkLCBwYXJhbWV0ZXJpemVkIHdpdGggb3duIHR5cGUgdmFyaWFibGVzLCBy
YXcsIGp1c3QgcGxhaW4gdHlwZSBvciBudWxsLgogCQlpbnQgY2xhc3NUeXBlVmFyaWFibGVzQXJp
dHkgPSAwOwpAQCAtNTA2MCw3ICs0ODc2LDcgQEAKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGli
bGUgPSBuZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsK
IAkJZm9yIChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21w
YXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ld
LCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQlNZXRo
b2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0
aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlKTsKIAkJCWlmIChj
b21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1Zh
bGlkQmluZGluZygpKQogCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBh
dGlibGVNZXRob2Q7CkBAIC01MDY5LDEwICs0ODg1LDYgQEAKIAogCQlpZiAoY29tcGF0aWJsZUlu
ZGV4ID09IDApIHsKIAkJCXJldHVybiBudWxsOwotCQl9Ci0JCWlmIChjb21wYXRpYmxlSW5kZXgg
PT0gMSkgewotCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91
dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJY29tcGF0aWJsZVswXSA9IGluZmVySW52b2Nh
dGlvblR5cGUoYWxsb2NhdGlvblNpdGUsIGNvbXBhdGlibGVbMF0sIGFyZ3VtZW50VHlwZXMpOwog
CQl9CiAJCXJldHVybiBjb21wYXRpYmxlSW5kZXggPT0gMSA/IGNvbXBhdGlibGVbMF0gOiBtb3N0
U3BlY2lmaWNNZXRob2RCaW5kaW5nKGNvbXBhdGlibGUsIGNvbXBhdGlibGVJbmRleCwgYXJndW1l
bnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIGFsbG9jYXRpb25UeXBlKTsKIAl9CkBAIC01MTQwLDMx
ICs0OTUyLDUgQEAKIAkJCQlicmVhazsKIAkJCX0KIAkJfQotCX0KLQotCS8qKgotCSAqIEdpdmVu
IGEgc2VsZWN0ZWQgYXBwbGljYWJsZSBtZXRob2QsIGNoZWNrIGlmIGl0IGhhcyBhbiB1bmZpbmlz
aGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVkLgotCSAqIElmIHNvIHBlcmZvcm0gdGhl
IG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgYW5kIHJldHVybiB0aGUgaW1w
cm92ZWQgbWV0aG9kLAotCSAqIG90aGVyd2lzZSByZXR1cm4gdGhlIGFwcGxpY2FibGUgbWV0aG9k
IHVuY2hhbmdlZC4KLQkgKi8KLQlwcm90ZWN0ZWQgTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRp
b25UeXBlKEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBNZXRob2RCaW5kaW5nIGFwcGxp
Y2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewotCQlpZiAoaW52b2NhdGlvblNp
dGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAo
SW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4MTggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocGFyYW1ldGVyaXplZE1l
dGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZv
cihpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCkpKSB7Ci0JCQkJCXJldHVybiBpbmZD
dHgxOC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIHBhcmFt
ZXRlcml6ZWRNZXRob2QpOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZl
UG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwgYXBwbGljYWJsZSwgYXJndW1lbnRU
eXBlcywgdGhpcyk7Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2Vv
ZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKLQkJCQlhcHBsaWNhYmxlID0gYXBwbGlj
YWJsZS5zaGFsbG93T3JpZ2luYWwoKTsKLQkJCWlmIChhcHBsaWNhYmxlLnR5cGVWYXJpYWJsZXMo
KSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQotCQkJCXJldHVybiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoYXBwbGljYWJsZSwg
YXJndW1lbnRUeXBlcywgdGhpcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKLQkJ
fQotCQlyZXR1cm4gYXBwbGljYWJsZTsKIAl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1R5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKaW5kZXgg
YzNmNjNmYi4uNjY3MjQwMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQpAQCAtNzQwLDYgKzc0MCwx
MSBAQAogcHVibGljIGJvb2xlYW4gaXNQcm9wZXJUeXBlKGJvb2xlYW4gYWRtaXRDYXB0dXJlMTgp
IHsKIAlyZXR1cm4gdHJ1ZTsKIH0KKworcHVibGljIGJvb2xlYW4gaXNQb2x5VHlwZSgpIHsKKwly
ZXR1cm4gZmFsc2U7Cit9CisKIC8qKgogICogU3Vic3RpdHV0ZSBhbGwgb2NjdXJyZW5jZXMgb2Yg
J3Zhcicgd2l0aGluIHRoZSBjdXJyZW50IHR5cGUgYnkgJ3N1YnN0aXR1dGVUeXBlLgogICogQHBh
cmFtIHZhciBhbiBpbmZlcmVuY2UgdmFyaWFibGUgKEpMUzggMTguMS4xKQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9UeXBlU3lzdGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVTeXN0ZW0u
amF2YQppbmRleCAzODg3ZmUzLi4wOTA3ZTk0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5
cGVTeXN0ZW0uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVTeXN0ZW0uamF2YQpAQCAtMTUs
NiArMTUsNyBAQAogaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwogCiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2ltcGxlTG9va3VwVGFibGU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuVXRpbDsKIApAQCAtMzM3LDYgKzMzOCwz
NyBAQAogCQlyZXR1cm4gKFdpbGRjYXJkQmluZGluZykgKHRoaXMudHlwZXNbd2lsZGNhcmQuaWQg
PSB0aGlzLnR5cGVpZCsrXVswXSA9IHdpbGRjYXJkKTsKIAl9CiAJCisJLy8gTm8gbmVlZCBmb3Ig
YW4gb3ZlcnJpZGUgaW4gQVRTLCBzaW5jZSB3ZSBhcmUgZGVhbGluZyB3aXRoIHJlY2FwdHVyZXMg
aGVyZS4KKwlwdWJsaWMgZmluYWwgQ2FwdHVyZUJpbmRpbmcgZ2V0Q2FwdHVyZWRXaWxkY2FyZChX
aWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQsIFJlZmVyZW5jZUJpbmRpbmcgY29udGV4dFR5cGUsIGlu
dCBwb3NpdGlvbiwgQVNUTm9kZSBjdWQsIGludCBpZCkgeworCQkKKwkJV2lsZGNhcmRCaW5kaW5n
IHVuYW5ub3RhdGVkV2lsZGNhcmQgPSAoV2lsZGNhcmRCaW5kaW5nKSBnZXRVbmFubm90YXRlZFR5
cGUod2lsZGNhcmQpOworCQlUeXBlQmluZGluZ1tdIGRlcml2ZWRUeXBlcyA9IHRoaXMudHlwZXNb
dW5hbm5vdGF0ZWRXaWxkY2FyZC5pZF07ICAvLyBieSBjb25zdHJ1Y3Rpb24sIGNhY2hlZEluZm8g
IT0gbnVsbCBub3cuCisJCWludCBpLCBsZW5ndGggPSBkZXJpdmVkVHlwZXMubGVuZ3RoOworCQlm
b3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCVR5cGVCaW5kaW5nIGRlcml2ZWRUeXBl
ID0gZGVyaXZlZFR5cGVzW2ldOworCQkJaWYgKGRlcml2ZWRUeXBlID09IG51bGwpIAorCQkJCWJy
ZWFrOworCQkJaWYgKCFkZXJpdmVkVHlwZS5pc0NhcHR1cmUoKSkKKwkJCQljb250aW51ZTsKKwkJ
CUNhcHR1cmVCaW5kaW5nIHByaW9yID0gKENhcHR1cmVCaW5kaW5nKSBkZXJpdmVkVHlwZTsKKwkJ
CWlmIChwcmlvci5zb3VyY2VUeXBlICE9IGNvbnRleHRUeXBlIHx8IHByaW9yLnBvc2l0aW9uICE9
IHBvc2l0aW9uIHx8IHByaW9yLmN1ZCAhPSBjdWQpIC8vJElERU5USVRZLUNPTVBBUklTT04kCisJ
CQkJY29udGludWU7CisJCQlyZXR1cm4gcHJpb3I7CisJCX0KKwkJCisJCWlmIChpID09IGxlbmd0
aCkgeworCQkJU3lzdGVtLmFycmF5Y29weShkZXJpdmVkVHlwZXMsIDAsIGRlcml2ZWRUeXBlcyA9
IG5ldyBUeXBlQmluZGluZ1tsZW5ndGggKiAyXSwgMCwgbGVuZ3RoKTsKKwkJCXRoaXMudHlwZXNb
dW5hbm5vdGF0ZWRXaWxkY2FyZC5pZF0gPSBkZXJpdmVkVHlwZXM7CisJCX0KKwkJVHlwZUJpbmRp
bmcgY2FwdHVyZSA9IGRlcml2ZWRUeXBlc1tpXSA9IG5ldyBDYXB0dXJlQmluZGluZyh3aWxkY2Fy
ZCwgY29udGV4dFR5cGUsIHBvc2l0aW9uLCBjdWQsIGlkKTsKKwkKKwkJaW50IHR5cGVzTGVuZ3Ro
ID0gdGhpcy50eXBlcy5sZW5ndGg7CisJCWlmICh0aGlzLnR5cGVpZCA9PSB0eXBlc0xlbmd0aCkK
KwkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy50eXBlcywgMCwgdGhpcy50eXBlcyA9IG5ldyBUeXBl
QmluZGluZ1t0eXBlc0xlbmd0aCAqIDJdW10sIDAsIHR5cGVzTGVuZ3RoKTsKKwkJdGhpcy50eXBl
c1t0aGlzLnR5cGVpZF0gPSBuZXcgVHlwZUJpbmRpbmdbMV07CisJCXJldHVybiAoQ2FwdHVyZUJp
bmRpbmcpICh0aGlzLnR5cGVzW2NhcHR1cmUuaWQgPSB0aGlzLnR5cGVpZCsrXVswXSA9IGNhcHR1
cmUpOworCX0KKwkKIAlwdWJsaWMgV2lsZGNhcmRCaW5kaW5nIGdldFdpbGRjYXJkKFJlZmVyZW5j
ZUJpbmRpbmcgZ2VuZXJpY1R5cGUsIGludCByYW5rLCBUeXBlQmluZGluZyBib3VuZCwgVHlwZUJp
bmRpbmdbXSBvdGhlckJvdW5kcywgaW50IGJvdW5kS2luZCwgQW5ub3RhdGlvbkJpbmRpbmdbXSBh
bm5vdGF0aW9ucykgewogCQlyZXR1cm4gZ2V0V2lsZGNhcmQoZ2VuZXJpY1R5cGUsIHJhbmssIGJv
dW5kLCBvdGhlckJvdW5kcywgYm91bmRLaW5kKTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRl
ci5qYXZhCmluZGV4IDkzZmMwOGMuLjAxNmE0OWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRl
ci5qYXZhCkBAIC0xNTAsNyArMTUwLDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLkNhcHR1cmVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkZpZWxkQmluZGluZzsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5j
ZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb29rdXBFbnZpcm9ubWVudDsKQEAgLTM2OTIsNyAr
MzY5MSw4IEBACiAJCQkJc291cmNlU3RhcnQsCiAJCQkJc291cmNlRW5kKTsKIAkJCXJldHVybjsK
LQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJv
YmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBw
bGljYWJsZToJCisJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VG
YWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhhbik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdl
IChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQogCQkJcHJvYmxlbUNvbnN0cnVjdG9y
ID0gKFByb2JsZW1NZXRob2RCaW5kaW5nKSB0YXJnZXRDb25zdHJ1Y3RvcjsKIAkJCXNob3duQ29u
c3RydWN0b3IgPSBwcm9ibGVtQ29uc3RydWN0b3IuY2xvc2VzdE1hdGNoOwpAQCAtNDIyNCwxNiAr
NDIyNCwxMyBAQAogCQkJCShpbnQpIChtZXNzYWdlU2VuZC5uYW1lU291cmNlUG9zaXRpb24gPj4+
IDMyKSwKIAkJCQkoaW50KSBtZXNzYWdlU2VuZC5uYW1lU291cmNlUG9zaXRpb24pOwogCQkJcmV0
dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5
cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25zLkluZmVycmVkQXBwbGlhYmxlTWV0aG9k
SW5hcHBsaWNhYmxlOgorCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9jYXRpb25UeXBlSW5mZXJl
bmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBjb25zdHJ1Y3Qgc3VpdGFibGUgbWVz
c2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3NSkKIAkJCXByb2JsZW1NZXRob2Qg
PSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZDsKLQkJCUluZmVyZW5jZUNvbnRleHQxOCBp
bmZlcmVuY2VDb250ZXh0ID0gcHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VDb250ZXh0OwotCQkJaWYg
KGluZmVyZW5jZUNvbnRleHQgIT0gbnVsbCAmJiBpbmZlcmVuY2VDb250ZXh0Lm91dGVyQ29udGV4
dCAhPSBudWxsKSB7Ci0JCQkJLy8gcHJvYmxlbSByZWxhdGVzIHRvIGEgbmVzdGVkIGluZmVyZW5j
ZSBjb250ZXh0LCBsZXQgdGhlIG91dGVyIGhhbmRsZSBpdDoKLQkJCQlpbmZlcmVuY2VDb250ZXh0
Lm91dGVyQ29udGV4dC5hZGRQcm9ibGVtTWV0aG9kKHByb2JsZW1NZXRob2QpOwotCQkJCXJldHVy
bjsKLQkJCX0KIAkJCXNob3duTWV0aG9kID0gcHJvYmxlbU1ldGhvZC5jbG9zZXN0TWF0Y2g7CisJ
CQlpZiAocHJvYmxlbU1ldGhvZC5yZXR1cm5UeXBlID09IHNob3duTWV0aG9kLnJldHVyblR5cGUp
IC8vJElERU5USVRZLUNPTVBBUklTT04kCisJCQkJcmV0dXJuOyAvLyBmdW5uaWx5IHRoaXMgY2Fu
IGhhcHBlbiBpbiBhIGRlZXBseSBuZXN0ZWQgY2FsbCwgYmVjYXVzZSB0aGUgaW5uZXIgbGllcyBi
eSBzdGVhbGluZyBpdHMgY2xvc2VzdCBtYXRjaCBhbmQgdGhlIG91dGVyIGRvZXMgbm90IGtub3cg
c28uIFNlZSBHUlQxXzgudGVzdEJ1ZzQzMDI5NgogCQkJdGhpcy5oYW5kbGUoCiAJCQkJSVByb2Js
ZW0uVHlwZU1pc21hdGNoLAogCQkJCW5ldyBTdHJpbmdbXSB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlw
cGV0QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVz
c2lvbi5qYXZhCmluZGV4IDYyM2JjMzUuLjRmMGVhMmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRB
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVz
c2lvbi5qYXZhCkBAIC0yNCw3ICsyNCw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5BbGxvY2F0aW9uRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNhc3RFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LklubmVySW5mZXJlbmNlSGVscGVyOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUGFyYW1ldGVyaXpl
ZFF1YWxpZmllZFR5cGVSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5UeXBlUmVmZXJlbmNlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CkBAIC0xOTAsNyArMTg5LDYgQEAKIAkJYm9vbGVh
biBhcmdIYXNFcnJvciA9IGZhbHNlOwogCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVu
Z3RoOwogCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCVR5cGVC
aW5kaW5nIGFyZ3VtZW50VHlwZTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykg
ewogCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwogCQkJaWYgKGFy
Z3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKQEAgLTE5OCwxMiArMTk2LDggQEAK
IAkJCQlhcmdzQ29udGFpbkNhc3QgPSB0cnVlOwogCQkJfQogCQkJYXJndW1lbnQuc2V0RXhwcmVz
c2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCWlmICgoYXJndW1lbnRUeXBlID0g
YXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkg
eworCQkJaWYgKChhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKSB7CiAJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwotCQkJfQotCQkJaWYgKGFyZ3Vt
ZW50VHlwZSAhPSBudWxsICYmIGFyZ3VtZW50VHlwZS5raW5kKCkgPT0gQmluZGluZy5QT0xZX1RZ
UEUpIHsKLQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQl0
aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7CiAJ
CQl9CiAJCX0KIAkJaWYgKGFyZ0hhc0Vycm9yKSB7CkBAIC0yMjgsNyArMjIyLDcgQEAKIAkKIAlS
ZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRlZFR5cGUgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5y
ZXNvbHZlZFR5cGU7CiAJdGhpcy5iaW5kaW5nID0gZmluZENvbnN0cnVjdG9yQmluZGluZyhzY29w
ZSwgdGhpcywgYWxsb2NhdGVkVHlwZSwgYXJndW1lbnRUeXBlcyk7Ci0KKwkKIAlpZiAoIXRoaXMu
YmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CQogCQlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNl
b2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcKIAkJCSYmICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHRo
aXMuYmluZGluZykucHJvYmxlbUlkKCkgPT0gTm90VmlzaWJsZSkgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2Rl
U25pcHBldE1lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0TWVzc2FnZVNlbmQuamF2YQppbmRl
eCAxZjJhNGQzLi5hYjcwN2JkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0TWVzc2FnZVNlbmQuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9ldmFsL0NvZGVTbmlwcGV0TWVzc2FnZVNlbmQuamF2YQpAQCAtMjMsNyArMjMsNiBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNhc3RFeHByZXNzaW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LklubmVySW5mZXJl
bmNlSGVscGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TWVzc2FnZVNlbmQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5OYW1lUmVmZXJlbmNlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CkBAIC0xOTUsNzMgKzE5NCw3MiBAQAogcHVi
bGljIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKIAkvLyBBbnN3
ZXIgdGhlIHNpZ25hdHVyZSByZXR1cm4gdHlwZQogCS8vIEJhc2UgdHlwZSBwcm9tb3Rpb24KLQot
CXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7Ci0JYm9vbGVhbiByZWNlaXZl
ckNhc3QgPSBmYWxzZSwgYXJnc0NvbnRhaW5DYXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMucmVjZWl2
ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0g
RGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCi0JCXJl
Y2VpdmVyQ2FzdCA9IHRydWU7Ci0JfQotCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5y
ZWNlaXZlci5yZXNvbHZlVHlwZShzY29wZSk7Ci0JaWYgKHJlY2VpdmVyQ2FzdCAmJiB0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7Ci0JCSAvLyBkdWUgdG8gY2hhbmdlIG9mIGRlY2xh
cmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2FzdCBzaG91bGQg
YmUgbm90aWZpZWQKLQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RFeHByZXNz
aW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2Fz
dCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7CisJCisJaWYgKHRoaXMuY29uc3RhbnQg
IT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CisJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5O
b3RBQ29uc3RhbnQ7CisJCWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0gZmFsc2U7CisJCWlmICh0aGlz
LnJlY2VpdmVyIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCXRoaXMucmVjZWl2ZXIu
Yml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIg
b24KKwkJCXJlY2VpdmVyQ2FzdCA9IHRydWU7CiAJCX0KLQl9Ci0JLy8gcmVzb2x2ZSB0eXBlIGFy
Z3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAodGhpcy50eXBlQXJn
dW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5n
dGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJn
dW1lbnRzCi0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVu
Z3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJaWYgKCh0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdGhpcy50eXBlQXJndW1lbnRzW2ldLnJlc29sdmVU
eXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgewotCQkJCWFyZ0hh
c0Vycm9yID0gdHJ1ZTsKKwkJdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVy
LnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJaWYgKHJlY2VpdmVyQ2FzdCAmJiB0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSAhPSBudWxsKSB7CisJCQkvLyBkdWUgdG8gY2hhbmdlIG9mIGRlY2xhcmluZyBj
bGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2FzdCBzaG91bGQgYmUgbm90
aWZpZWQKKwkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lvbil0
aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUpKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChD
YXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKIAkJCX0KIAkJfQotCQlpZiAoYXJnSGFzRXJy
b3IpIHsKKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0
b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVu
Z3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3Ig
PSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJCQl0aGlzLmdlbmVyaWNUeXBl
QXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ld
ID0gdGhpcy50eXBlQXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNr
IGJvdW5kcyovKSkgPT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQkJfQor
CQkJfQorCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0K
KwkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAorCQlpZiAo
dGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNl
OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCWludCBsZW5ndGggPSB0aGlzLmFyZ3Vt
ZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVu
Z3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlFeHByZXNz
aW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkJaWYgKGFyZ3VtZW50IGluc3Rh
bmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8PSBEaXNhYmxlVW5u
ZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJCQkJdGhpcy5hcmdz
Q29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29u
dGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ld
ID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKQorCQkJCQlh
cmdIYXNFcnJvciA9IHRydWU7CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZih0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJ
CQkJLy8gcmVjb3JkIGFueSBzZWxlY3RvciBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGls
bCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCisJCQkJCXRoaXMuYmluZGlu
ZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUsIHRoaXMuc2VsZWN0b3IsIG5ldyBUeXBlQmluZGluZ1tde30sIHRoaXMsIGZhbHNlKTsK
KwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCX0KKwkJaWYgKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlID09IG51bGwpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCS8vIGJhc2UgdHlw
ZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQorCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5
cGUuaXNCYXNlVHlwZSgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0
aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMp
OwogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRl
ciBhcmdzIGFyZSByZXNvbHZlZAotCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRp
bmcuTk9fUEFSQU1FVEVSUzsKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQlib29s
ZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQlp
bnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQlhcmd1bWVudFR5cGVzID0gbmV3
IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCVR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZTsKLQkJZm9y
IChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9
IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJl
c3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVj
azsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFyZ3NDb250YWluQ2FzdCA9IHRydWU7Ci0J
CQl9Ci0JCQlhcmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQp
OwotCQkJaWYgKChhcmd1bWVudFR5cGUgPSBhcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVu
dHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKQotCQkJCWFyZ0hhc0Vycm9yID0gdHJ1
ZTsKLQkJCWlmIChhcmd1bWVudFR5cGUgIT0gbnVsbCAmJiBhcmd1bWVudFR5cGUua2luZCgpID09
IEJpbmRpbmcuUE9MWV9UWVBFKSB7Ci0JCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIg
PT0gbnVsbCkKLQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVy
ZW5jZUhlbHBlcigpOwotCQkJfQotCQl9Ci0JCWlmIChhcmdIYXNFcnJvcikgewotCQkJaWYodGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJ
Ly8gcmVjb3JkIGFueSBzZWxlY3RvciBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGlsbCBu
ZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJdGhpcy5iaW5kaW5nID0g
c2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSwgdGhpcy5zZWxlY3RvciwgbmV3IFR5cGVCaW5kaW5nW117fSwgdGhpcywgZmFsc2UpOwotCQkJ
fQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KKwlUeXBlQmluZGluZyBtZXRob2RUeXBlID0gZmluZE1l
dGhvZEJpbmRpbmcoc2NvcGUpOworCWlmIChtZXRob2RUeXBlICE9IG51bGwgJiYgbWV0aG9kVHlw
ZS5pc1BvbHlUeXBlKCkpIHsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLmJpbmRpbmcucmV0
dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7CisJCXJldHVybiBtZXRob2RU
eXBlOwogCX0KLQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPT0gbnVsbCkgewotCQlyZXR1
cm4gbnVsbDsKLQl9Ci0JLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFueSBtZXNzYWdlCi0J
aWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgewotCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLCBhcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JZmluZE1ldGhvZEJp
bmRpbmcoc2NvcGUsIGFyZ3VtZW50VHlwZXMpOwogCQkKIAlpZiAoIXRoaXMuYmluZGluZy5pc1Zh
bGlkQmluZGluZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQcm9ibGVtTWV0
aG9kQmluZGluZwpAQCAtMjgxLDE0ICsyNzksMTQgQEAKIAkJCUNvZGVTbmlwcGV0U2NvcGUgbG9j
YWxTY29wZSA9IG5ldyBDb2RlU25pcHBldFNjb3BlKHNjb3BlKTsKIAkJCU1ldGhvZEJpbmRpbmcg
cHJpdmF0ZUJpbmRpbmcgPQogCQkJCXRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDb2RlU25pcHBl
dFRoaXNSZWZlcmVuY2UgJiYgKChDb2RlU25pcHBldFRoaXNSZWZlcmVuY2UpIHRoaXMucmVjZWl2
ZXIpLmlzSW1wbGljaXQKLQkJCQkJPyBsb2NhbFNjb3BlLmdldEltcGxpY2l0TWV0aG9kKChSZWZl
cmVuY2VCaW5kaW5nKXRoaXMuZGVsZWdhdGVUaGlzLnR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3Vt
ZW50VHlwZXMsIHRoaXMpCi0JCQkJCTogbG9jYWxTY29wZS5nZXRNZXRob2QodGhpcy5kZWxlZ2F0
ZVRoaXMudHlwZSwgdGhpcy5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCQkJCT8g
bG9jYWxTY29wZS5nZXRJbXBsaWNpdE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmRlbGVn
YXRlVGhpcy50eXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpCisJ
CQkJCTogbG9jYWxTY29wZS5nZXRNZXRob2QodGhpcy5kZWxlZ2F0ZVRoaXMudHlwZSwgdGhpcy5z
ZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKIAkJCWlmICghcHJpdmF0ZUJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xh
c3MgPT0gbnVsbCkgewogCQkJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2Vv
ZiBSZWZlcmVuY2VCaW5kaW5nKSB7CiAJCQkJCQl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3Mg
PSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGU7CiAJCQkJCX0gZWxz
ZSB7IC8vIHJlYWxseSBiYWQgZXJyb3IgLi4uLgotCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1l
bnRUeXBlcyk7CisJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9y
KHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOwogCQkJ
CQkJcmV0dXJuIG51bGw7CiAJCQkJCX0KIAkJCQl9CkBAIC0zMDIsNyArMzAwLDcgQEAKIAkJCQlp
ZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7
CiAJCQkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IChSZWZlcmVuY2VCaW5kaW5nKSB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZTsKIAkJCQl9IGVsc2UgeyAvLyByZWFsbHkgYmFkIGVycm9y
IC4uLi4KLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlz
LCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJCQkJCXJldHVybiBudWxsOwogCQkJCX0KIAkJ
CX0KQEAgLTMyNiw3ICszMjQsNyBAQAogCQkJfQkJCQogCQl9CiAJfQotCWlmIChjaGVja0ludm9j
YXRpb25Bcmd1bWVudHMoc2NvcGUsIHRoaXMucmVjZWl2ZXIsIHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCBhcmd1bWVudFR5cGVzLCBhcmdzQ29u
dGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwg
dGhpcy5yZWNlaXZlciwgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYmluZGluZywgdGhp
cy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFpbkNhc3QsIHRo
aXMpKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2
YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKaW5kZXggMmVj
ODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2Rl
U25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzk2LDcgKzM5Niw3IEBACiAJ
aWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmlu
ZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwog
CWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkgICAgTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGlu
ZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkZVTExfSU5GRVJFTkNFKTsK
KwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCSAg
ICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0
aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxl
bVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5nID0gY29tcGF0aWJsZU1ldGhv
ZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdbXSBjb21wYXRpYmxlID0gbmV3
IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBjb21wYXRpYmxlSW5kZXggPSAw
OwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsg
aSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBT
Y29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9k
ID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52
b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKQogCQkJY29tcGF0
aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCX0KQEAgLTU1OCw4
ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMSkgewotCQkvLyAxLjg6
IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4
LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNp
YmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2libGVbMF07CiAJfQogCWlmICh2
aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKGNv
bXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0aWJsZVswXS5wYXJhbWV0ZXJz
LCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247626</attachid>
            <date>2014-10-05 05:53:00 -0400</date>
            <delta_ts>2014-10-12 06:11:12 -0400</delta_ts>
            <desc>Patch containing only test changes.</desc>
            <filename>modifiedtests.patch</filename>
            <type>text/plain</type>
            <size>13330</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uZDY4MzI4OSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTMwMTUsNiArMzA0NCw4IEBACiAJCQkifVxuIn0pOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzE1OCgpIHsKKyAgdHJ5IHsKKwl0aGlzLnNob3VsZFN3
YWxsb3dDYXB0dXJlSWQgPSB0cnVlOyAvLyB0aGlzIHRlc3QgZXhoaWJpdHMgc29tZSBub24tZGV0
ZXJtaW5pc20gaW4gY2FwdHVyZSBpZHMuIGp1c3QgY29tcGFyZSBpZ25vcmluZyBpZCwgYnV0IGVz
dGFibGlzaGluZyBwcmVzZW5jZSBvZiBjYXB0dXJlLgogCXJ1bk5lZ2F0aXZlVGVzdCgKIAkJbmV3
IFN0cmluZ1tdIHsKIAkJCSJDb2xsZWN0b3JzTWFwcy5qYXZhIiwKQEAgLTMwNDYsOCArMzA3Nywx
MSBAQAogCQkiMS4gRVJST1IgaW4gQ29sbGVjdG9yc01hcHMuamF2YSAoYXQgbGluZSAyMClcbiIg
KyAKIAkJIglwIC0+IHAubGhzLnN0cmVhbSgpLm1hcChwOjprZWVwaW5nUmhzKSkuY29sbGVjdChc
biIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5e
XlxuIiArIAotCQkiVGhlIG1ldGhvZCBjb2xsZWN0KENvbGxlY3Rvcjw/IHN1cGVyIE9iamVjdCxB
LFI+KSBpbiB0aGUgdHlwZSBTdHJlYW08T2JqZWN0PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoQ29sbGVjdG9yPENvbGxlY3RvcnNNYXBzLlBhaXI8U3RyaW5nLFN0cmluZz4s
Y2FwdHVyZSMzLW9mID8sTWFwPFN0cmluZyxMaXN0PFN0cmluZz4+PilcbiIgKyAKKwkJIlRoZSBt
ZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUg
U3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxl
Y3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8
U3RyaW5nLExpc3Q8U3RyaW5nPj4+KVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CisgIH0gZmlu
YWxseSB7CisJdGhpcy5zaG91bGRTd2FsbG93Q2FwdHVyZUlkID0gZmFsc2U7CQorICB9CiB9CiBw
dWJsaWMgdm9pZCBfdGVzdEJ1ZzQzMjYyNigpIHsKIAlydW5Db25mb3JtVGVzdCgKQEAgLTMzMzYs
NyArMzM3MCw3IEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3Ry
aW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xu
IiArCkBAIC0zMzc4LDE3ICszNDEyLDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwK
LQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQg
bGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhp
cy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0t
LVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiAr
IAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRo
KSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUg
RHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxu
IiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGIwNTk4NWIu
LjhkMmRmY2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJk
YUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MjkwLDEzICs0MjkwLDEzIEBACiAJCQki
LS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMSlcbiIg
KyAKIAkJCSIJcGVyc29ucy5zb3J0KENvbXBhcmF0b3IuY29tcGFyaW5nKENvbXBhcmF0b3IubnVs
bHNMYXN0KFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFibGUpKSk7XG4iICsgCi0JCQkiCSAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAot
CQkJIlRoZSBtZXRob2QgbnVsbHNMYXN0KENvbXBhcmF0b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5
cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoUGVyc29u
Ojo8UnVubmFibGU+aXNSdW5uYWJsZSlcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCBjb21wYXJpbmcoRnVuY3Rpb248PyBz
dXBlciBULD8gZXh0ZW5kcyBVPikgaW4gdGhlIHR5cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGlj
YWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29tcGFyYXRvcjxPYmplY3Q+KVxuIiArIAogCQkJIi0t
LS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CiAJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHBy
ZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZl
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzUwMTEwOS4uMWExMGQxZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05MTE4LDExICs5MTE4LDEyIEBACiAJCQki
CX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5vdGU6IG5ldyBtZXNzYWdlIGFsaWducyBi
ZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJRnVuY3Rpb248Q0w8SW50ZWdlcj4sIFN0
cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdHlwZSBDTCBkb2VzIG5vdCBk
ZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAK
KwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9uLXN0YXRpYyBtZXRo
b2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiAr
IAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCSIJdjUgPSB0IC0+
IHQubWV0aG9kMSgpOwlcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQppbmRleCA1M2ZjNTk5Li5lMDMw
M2Y0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFu
bm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVs
bFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC02NzQwLDYgKzY3NDAsNyBAQAogCQkJIn1cbiIg
KwogCQkJIn1cbiIsCiAJCX0sCisJCS8vIE5vdGU6IHdlIHVzZWQgdG8gZW1pdCBhIGR1cGxpY2F0
ZSBtZXNzYWdlIG9mIDIuIEZpeGVkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChw
IC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7
XG4iICsgCkBAIC02NzQ3LDExICs2NzQ4LDYgQEAKIAkJIlRoZSBjb25zdHJ1Y3RvciBQYWlyPFBh
dGgsT2JqZWN0PihQYXRoLCAoPG5vIHR5cGU+IHApIC0+IHt9KSBpcyB1bmRlZmluZWRcbiIgKyAK
IAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCi0JCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRv
RmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKLQkJIlRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIzLiBFUlJP
UiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAogCQkiCWZpbHRlcjIubWFw
KHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkp
KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhp
cyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247627</attachid>
            <date>2014-10-05 06:09:00 -0400</date>
            <delta_ts>2014-10-12 06:11:12 -0400</delta_ts>
            <desc>Changed files that need only cursory glance through.</desc>
            <filename>cursoryreview.patch</filename>
            <type>text/plain</type>
            <size>16905</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IGVlMzEwODYuLmZlNTA5ZGUg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNTcsNyArNTcsNiBAQAog
CXByaXZhdGUgYm9vbGVhbiBpc1BvbHlFeHByZXNzaW9uID0gZmFsc2U7CiAJcHJpdmF0ZSBUeXBl
QmluZGluZyBvcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9y
aWdpbmFsVmFsdWVJZkZhbHNlVHlwZTsKLQlwcml2YXRlIEJsb2NrU2NvcGUgcG9seUV4cHJlc3Np
b25TY29wZTsKIAlwcml2YXRlIGJvb2xlYW4gdXNlMThzcGVjaWZpY3M7CiAJcHVibGljIENvbmRp
dGlvbmFsRXhwcmVzc2lvbigKIAkJRXhwcmVzc2lvbiBjb25kaXRpb24sCkBAIC00NjQsMTIgKzQ2
Myw2IEBACiAJCQlpZiAodGhpcy52YWx1ZUlmRmFsc2UgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lv
bikgdGhpcy52YWx1ZUlmRmFsc2UuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7
IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KIAkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBl
ID0gdGhpcy52YWx1ZUlmRmFsc2UucmVzb2x2ZVR5cGUoc2NvcGUpOwogCi0JCQlpZiAoaXNQb2x5
RXhwcmVzc2lvbigpKSB7Ci0JCQkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHsKLQkJ
CQkJdGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7IC8vIHByZXNlcnZlIGZvciBldmVu
dHVhbCByZXNvbHV0aW9uL2Vycm9yIHJlcG9ydGluZy4KLQkJCQl9Ci0JCQl9Ci0KIAkJCWlmIChj
b25kaXRpb25UeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9PSBu
dWxsIHx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID09IG51bGwpCiAJCQkJcmV0dXJu
IG51bGw7CiAJCX0gZWxzZSB7CkBAIC00ODQsMTEgKzQ3Nyw5IEBACiAJCX0KIAkJaWYgKGlzUG9s
eUV4cHJlc3Npb24oKSkgewogCQkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHsKLQkJ
CQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50
dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0aW5nLgogCQkJCXJldHVybiBuZXcgUG9seVR5cGVC
aW5kaW5nKHRoaXMpOwogCQkJfQotCQkJY29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlzLmV4
cGVjdGVkVHlwZSk7Ci0JCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLmV4cGVjdGVk
VHlwZTsKKwkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IGNvbXB1dGVDb252ZXJzaW9ucyhz
Y29wZSwgdGhpcy5leHBlY3RlZFR5cGUpID8gdGhpcy5leHBlY3RlZFR5cGUgOiBudWxsOwogCQl9
CiAJCVR5cGVCaW5kaW5nIHZhbHVlSWZUcnVlVHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1
ZVR5cGU7CiAJCVR5cGVCaW5kaW5nIHZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLm9yaWdpbmFsVmFs
dWVJZkZhbHNlVHlwZTsKQEAgLTY2MSw3ICs2NTIsOCBAQAogCQlyZXR1cm4gbnVsbDsKIAl9CiAK
LQlwcm90ZWN0ZWQgdm9pZCBjb21wdXRlQ29udmVyc2lvbnMoQmxvY2tTY29wZSBzY29wZSwgVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCXByb3RlY3RlZCBib29sZWFuIGNvbXB1dGVDb252ZXJz
aW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCWJvb2xl
YW4gb2sgPSB0cnVlOwogCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSAhPSBudWxs
ICYmIHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJ
aWYgKHRoaXMudmFsdWVJZlRydWUuaXNDb25zdGFudFZhbHVlT2ZUeXBlQXNzaWduYWJsZVRvVHlw
ZSh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRUeXBlKQogCQkJCQl8fCB0aGlz
Lm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpIHsK
QEAgLTY4Miw2ICs2NzQsNyBAQAogCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudHlwZU1pc21hdGNoRXJyb3IodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlw
ZSwgdGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlmVHJ1ZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsK
IAkJCX0KIAkJfQogCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgIT0gbnVsbCAm
JiB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CkBAIC03
MDQsOCArNjk3LDEwIEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSwg
dGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlmRmFsc2UsIG51bGwpOworCQkJCW9rID0gZmFsc2U7CiAJ
CQl9CiAJCX0KKwkJcmV0dXJuIG9rOwogCX0KIAogCXB1YmxpYyB2b2lkIHNldEV4cGVjdGVkVHlw
ZShUeXBlQmluZGluZyBleHBlY3RlZFR5cGUpIHsKQEAgLTcxOCwxOCArNzEzLDYgQEAKIAogCXB1
YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAkJcmV0dXJu
IHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7Ci0JfQotCQotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVj
a0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2Nv
cGUpIHsKLQkJLy8gaW4gMS44IGlmIHRyZWF0ZWQgYXMgYSBwb2x5IGV4cHJlc3Npb246Ci0JCWlm
IChpc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVuY2Fw
dHVyZSh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZU
cnVlVHlwZSA9IHRoaXMudmFsdWVJZlRydWUuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRh
cmdldFR5cGUsIHNjb3BlKTsKLQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhp
cy52YWx1ZUlmRmFsc2UuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNj
b3BlKTsKLQkJCWNvbXB1dGVDb252ZXJzaW9ucyh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUsIHRh
cmdldFR5cGUpOwotCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0YXJnZXRUeXBlOwotCQl9Ci0JCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZTsKIAl9CiAJCiAJcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9FeHByZXNzaW9uLmphdmEKaW5kZXggOTE4YjFiNC4uYWIyNjVhYSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmph
dmEKQEAgLTEwNjMsMTYgKzEwNjMsNiBAQAogfQogCiAvKioKLSAqIE9uY2Ugb3V0ZXIgY29udGV4
dHMgaGF2ZSBmaW5hbGl6ZWQgdGhlIHRhcmdldCB0eXBlIGZvciB0aGlzIGV4cHJlc3Npb24sCi0g
KiBwZXJmb3JtIGFueSBjaGVja3MgdGhhdCBtaWdodCBoYXZlIGJlZW4gZGVsYXllZCBwcmV2aW91
c2x5LgotICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIGZpbmFsIHRhcmdldCB0eXBlIChha2EgZXhw
ZWN0ZWRUeXBlKSBmb3IgdGhpcyBleHByZXNzaW9uLgotICogQHBhcmFtIHNjb3BlIHNjb3BlIGZv
ciBlcnJvciByZXBvcnRpbmcKLSAqLwotcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZTsgLy8gc3ViY2xhc3NlcyBtYXkgY2hvb3NlIHRvIGRvIHJl
YWwgc3R1ZmYgaGVyZQotfQotCi0vKioKICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgcmVjZWl2ZXIg
aXMgZm9yY2VkIHRvIGJlIG9mIHJhdyB0eXBlIGVpdGhlciB0byBzYXRpc2Z5IHRoZSBjb250cmFj
dCBpbXBvc2VkCiAgKiBieSBhIHN1cGVyIHR5cGUgb3IgYmVjYXVzZSBpdCAqaXMqIHJhdyBhbmQg
dGhlIGN1cnJlbnQgdHlwZSBoYXMgbm8gY29udHJvbCBvdmVyIGl0IChpLmUgdGhlIHJhd25lc3MK
ICAqIG9yaWdpbmF0ZXMgZnJvbSBzb21lIG90aGVyIGZpbGUuKQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhw
cmVzc2lvbi5qYXZhCmluZGV4IDVhYzE0ZjIuLjhhZjkyNzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxF
eHByZXNzaW9uLmphdmEKQEAgLTEwOSwxNiArMTA5LDE2IEBACiAKIAlwdWJsaWMgYm9vbGVhbiBp
c1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RC
aW5kaW5nIG1ldGhvZCkgewogCQlpZiAodGFyZ2V0VHlwZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJs
ZUJpbmRpbmcpIHsKLQkJCWlmIChtZXRob2QgIT0gbnVsbCkgeyAvLyB3aGVuIGNhbGxlZCBmcm9t
IHR5cGUgaW5mZXJlbmNlCisJCWlmIChtZXRob2QgIT0gbnVsbCkgeyAvLyB3aGVuIGNhbGxlZCBm
cm9tIHR5cGUgaW5mZXJlbmNlCiAJCQkJaWYgKCgoVHlwZVZhcmlhYmxlQmluZGluZyl0YXJnZXRU
eXBlKS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZCkKIAkJCQkJcmV0dXJuIGZhbHNlOwogCQkJ
CWlmIChtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmICgoVHlwZVZhcmlhYmxlQmluZGluZyl0YXJn
ZXRUeXBlKS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZC5kZWNsYXJpbmdDbGFzcykKLQkJCQkJ
cmV0dXJuIGZhbHNlOwotCQkJfSBlbHNlIHsgLy8gZm9yIGludGVybmFsIGNhbGxzCisJCQkJcmV0
dXJuIGZhbHNlOworCQl9IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKIAkJCQlUeXBlVmFy
aWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSA9IChUeXBlVmFyaWFibGVCaW5kaW5nKSB0YXJnZXRU
eXBlOwogCQkJCWlmICh0eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCBpbnN0YW5jZW9mIE1l
dGhvZEJpbmRpbmcpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0KKwkJCQlyZXR1cm4gZmFsc2U7
CisJCX0KIAkJfQogCQlyZXR1cm4gdHJ1ZTsKIAl9CkBAIC0yMDMsMTEgKzIwMyw2IEBACiAJCQkJ
YnJlYWs7CiAJCX0KIAkJcmV0dXJuIG51bGw7Ci0JfQotCi0JcHVibGljIFR5cGVCaW5kaW5nIGNo
ZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgewotCQl0YXJnZXRUeXBlID0gdGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5lbmNsb3Np
bmdTY29wZSk7Ci0JCXJldHVybiByZXNvbHZlVHlwZUV4cGVjdGluZyh0aGlzLmVuY2xvc2luZ1Nj
b3BlLCB0YXJnZXRUeXBlKTsKIAl9CiAKIAljbGFzcyBWaXNpYmlsaXR5SW5zcGVjdG9yIGV4dGVu
ZHMgVHlwZUJpbmRpbmdWaXNpdG9yIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJbmZl
cmVuY2VIZWxwZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJbmZlcmVuY2VIZWxwZXIuamF2YQpk
ZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggODM4MWI1Yy4uMDAwMDAwMAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKKysrIC9kZXYvbnVsbApAQCAtMSw0MiAr
MCwwIEBACi0vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDE0IEdL
IFNvZnR3YXJlIEFHLgotICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwotICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCi0gKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAotICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKLSAqCi0gKiBDb250cmlidXRvcnM6
Ci0gKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlv
bgotICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKiovCi1wYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3Q7Ci0KLWltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKLWltcG9ydCBq
YXZhLnV0aWwuTWFwOwotCi1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7Ci0KLXB1YmxpYyBjbGFzcyBJbm5lckluZmVyZW5j
ZUhlbHBlciB7Ci0KLQkvKiogRm9yIGVhY2ggY2FuZGlkYXRlIG1ldGhvZCBzdG9yZSBoZXJlIHRo
ZSBhcnJheSBvZiBhcmd1bWVudCB0eXBlcyBpZiBpbm5lciBpbmZlcmVuY2UgaGFzIGltcHJvdmVk
IGFueSBkdXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4gKi8KLQlwcml2YXRlIE1hcDxN
ZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10+IGFyZ1R5cGVzUGVyQ2FuZGlkYXRlID0gbmV3IEhh
c2hNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPigpOwotCi0JcHVibGljIHZvaWQgcmVn
aXN0ZXJJbm5lclJlc3VsdChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmcgcmVzb2x2
ZWRUeXBlLCBpbnQgYXJnQ291bnQsIGludCBhcmdJZHgpIHsKLQkJVHlwZUJpbmRpbmdbXSBhcmdU
eXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0KG1ldGhvZCk7Ci0JCWlmIChhcmdU
eXBlcyA9PSBudWxsKQotCQkJdGhpcy5hcmdUeXBlc1BlckNhbmRpZGF0ZS5wdXQobWV0aG9kLCBh
cmdUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmdDb3VudF0pOwotCQlhcmdUeXBlc1thcmdJZHhd
ID0gcmVzb2x2ZWRUeXBlOwotCX0KLQkKLQlwdWJsaWMgVHlwZUJpbmRpbmdbXSBnZXRBcmd1bWVu
dFR5cGVzRm9yQ2FuZGlkYXRlKE1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlLCBUeXBlQmluZGluZ1td
IHBsYWluQXJnVHlwZXMpIHsKLQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IHRoaXMuYXJnVHlw
ZXNQZXJDYW5kaWRhdGUuZ2V0KGNhbmRpZGF0ZSk7Ci0JCWlmIChhcmdUeXBlcyA9PSBudWxsKQot
CQkJcmV0dXJuIHBsYWluQXJnVHlwZXM7Ci0JCS8vIGZpbGwgaW4gYW55IGJsYW5rcyBub3c6Ci0J
CWZvciAoaW50IGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3RoOyBpKyspIHsKLQkJCWlmIChhcmdU
eXBlc1tpXSA9PSBudWxsKQotCQkJCWFyZ1R5cGVzW2ldID0gcGxhaW5BcmdUeXBlc1tpXTsKLQkJ
fQotCQlyZXR1cm4gYXJnVHlwZXM7Ci0JfQotfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZl
cmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQppbmRleCBiODQ4NDFmLi5kZjM0NTc3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5j
ZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQpAQCAtNzA2LDYgKzcwNiw3IEBACiAJCU1ldGhvZEJpbmRpbmcgcHJldmlvdXNCaW5kaW5nID0g
dGhpcy5iaW5kaW5nOwogCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzRGVzY3JpcHRvciA9IHRoaXMu
ZGVzY3JpcHRvcjsKIAkJVHlwZUJpbmRpbmcgcHJldmlvdXNSZXNvbHZlZFR5cGUgPSB0aGlzLnJl
c29sdmVkVHlwZTsKKwkJVHlwZUJpbmRpbmcgcHJldmlvdXNFeHBlY3RlZFR5cGUgPSB0aGlzLmV4
cGVjdGVkVHlwZTsKIAkJdHJ5IHsKIAkJCXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05f
Q09OVEVYVCk7CiAJCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CkBAIC03MjAsMTkgKzcy
MSw3IEBACiAJCQl0aGlzLmRlc2NyaXB0b3IgPSBwcmV2aW91c0Rlc2NyaXB0b3I7CiAJCQl0aGlz
LnJlc29sdmVkVHlwZSA9IHByZXZpb3VzUmVzb2x2ZWRUeXBlOwogCQkJc2V0RXhwcmVzc2lvbkNv
bnRleHQocHJldmlvdXNDb250ZXh0KTsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gbnVsbDsgLy8g
ZG9uJ3QgY2FsbCBzZXRFeHBlY3RlZFR5cGUobnVsbCksIHdvdWxkIE5QRQotCQkJdGhpcy50cmlh
bFJlc29sdXRpb24gPSBmYWxzZTsKLQkJfQotCX0KLQotCXB1YmxpYyBNZXRob2RCaW5kaW5nIHBy
ZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQoU2NvcGUgc2NvcGUpIHsKLQkJdHJ5IHsKLQkJCXNldEV4
cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQl0aGlzLmJpbmRpbmcgPSBu
dWxsOwotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSB0cnVlOwotCQkJcmVzb2x2ZVR5cGUodGhp
cy5lbmNsb3NpbmdTY29wZSk7Ci0JCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwotCQl9IGZpbmFsbHkg
eworCQkJdGhpcy5leHBlY3RlZFR5cGUgPSBwcmV2aW91c0V4cGVjdGVkVHlwZTsKIAkJCXRoaXMu
dHJpYWxSZXNvbHV0aW9uID0gZmFsc2U7CiAJCX0KIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1BvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjVhYWFlODkKLS0tIC9kZXYvbnVsbAorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpA
QCAtMCwwICsxLDE4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChj
KSAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwK
KyAqCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKKworcHVibGljIGNsYXNz
IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcgeyAvLyBjb25mdXNlZCBjaXRpemVuLgorCisJcHVibGlj
IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIGFwcGxpY2FibGVNZXRob2QpIHsKKwkJc3VwZXIoYXBwbGljYWJsZU1l
dGhvZC5vcmlnaW5hbE1ldGhvZCwgYXBwbGljYWJsZU1ldGhvZC50eXBlQXJndW1lbnRzLCBhcHBs
aWNhYmxlTWV0aG9kLmVudmlyb25tZW50KTsKKwl9Cit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Byb2JsZW1SZWFzb25zLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmph
dmEKaW5kZXggNzNlMDQxYi4uN2ZiZGVjMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9i
bGVtUmVhc29ucy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQpA
QCAtNDAsNyArNDAsNyBAQAogCWZpbmFsIGludCBOb25TdGF0aWNPckFsaWVuVHlwZVJlY2VpdmVy
ID0gMjA7CiAJZmluYWwgaW50IEF0dGVtcHRUb0J5cGFzc0RpcmVjdFN1cGVyID0gMjE7IC8vIHN1
cGVyIGFjY2VzcyB3aXRoaW4gZGVmYXVsdCBtZXRob2QKIAlmaW5hbCBpbnQgRGVmZWN0aXZlQ29u
dGFpbmVyQW5ub3RhdGlvblR5cGUgPSAyMjsKLQlmaW5hbCBpbnQgUGFyYW1ldGVyaXplZE1ldGhv
ZEV4cGVjdGVkVHlwZVByb2JsZW0gPSAyMzsKKwlmaW5hbCBpbnQgSW52b2NhdGlvblR5cGVJbmZl
cmVuY2VGYWlsdXJlID0gMjM7CiAJZmluYWwgaW50IEFwcGxpY2FibGVNZXRob2RPdmVycmlkZGVu
QnlJbmFwcGxpY2FibGUgPSAyNDsKIAlmaW5hbCBpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0
aW9ucyA9IDI1OwogCWZpbmFsIGludCBOb1N1Y2hNZXRob2RPbkFycmF5ID0gMjY7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDkzZmMwOGMuLjAxNmE0OWYgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0xNTAsNyArMTUwLDYgQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkNhcHR1cmVCaW5kaW5nOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21waWxlck1v
ZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb29rdXBFbnZpcm9ubWVu
dDsKQEAgLTM2OTIsNyArMzY5MSw4IEBACiAJCQkJc291cmNlU3RhcnQsCiAJCQkJc291cmNlRW5k
KTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9k
RXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxp
YWJsZU1ldGhvZEluYXBwbGljYWJsZToJCisJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlv
blR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhhbik6IGNvbnN0cnVjdCBz
dWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQogCQkJcHJv
YmxlbUNvbnN0cnVjdG9yID0gKFByb2JsZW1NZXRob2RCaW5kaW5nKSB0YXJnZXRDb25zdHJ1Y3Rv
cjsKIAkJCXNob3duQ29uc3RydWN0b3IgPSBwcm9ibGVtQ29uc3RydWN0b3IuY2xvc2VzdE1hdGNo
OwpAQCAtNDIyNCwxNiArNDIyNCwxMyBAQAogCQkJCShpbnQpIChtZXNzYWdlU2VuZC5uYW1lU291
cmNlUG9zaXRpb24gPj4+IDMyKSwKIAkJCQkoaW50KSBtZXNzYWdlU2VuZC5uYW1lU291cmNlUG9z
aXRpb24pOwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRN
ZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25zLkluZmVycmVk
QXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxlOgorCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9j
YXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBjb25zdHJ1
Y3Qgc3VpdGFibGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3NSkKIAkJ
CXByb2JsZW1NZXRob2QgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZDsKLQkJCUluZmVy
ZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0ID0gcHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VD
b250ZXh0OwotCQkJaWYgKGluZmVyZW5jZUNvbnRleHQgIT0gbnVsbCAmJiBpbmZlcmVuY2VDb250
ZXh0Lm91dGVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJLy8gcHJvYmxlbSByZWxhdGVzIHRvIGEg
bmVzdGVkIGluZmVyZW5jZSBjb250ZXh0LCBsZXQgdGhlIG91dGVyIGhhbmRsZSBpdDoKLQkJCQlp
bmZlcmVuY2VDb250ZXh0Lm91dGVyQ29udGV4dC5hZGRQcm9ibGVtTWV0aG9kKHByb2JsZW1NZXRo
b2QpOwotCQkJCXJldHVybjsKLQkJCX0KIAkJCXNob3duTWV0aG9kID0gcHJvYmxlbU1ldGhvZC5j
bG9zZXN0TWF0Y2g7CisJCQlpZiAocHJvYmxlbU1ldGhvZC5yZXR1cm5UeXBlID09IHNob3duTWV0
aG9kLnJldHVyblR5cGUpIC8vJElERU5USVRZLUNPTVBBUklTT04kCisJCQkJcmV0dXJuOyAvLyBm
dW5uaWx5IHRoaXMgY2FuIGhhcHBlbiBpbiBhIGRlZXBseSBuZXN0ZWQgY2FsbCwgYmVjYXVzZSB0
aGUgaW5uZXIgbGllcyBieSBzdGVhbGluZyBpdHMgY2xvc2VzdCBtYXRjaCBhbmQgdGhlIG91dGVy
IGRvZXMgbm90IGtub3cgc28uIFNlZSBHUlQxXzgudGVzdEJ1ZzQzMDI5NgogCQkJdGhpcy5oYW5k
bGUoCiAJCQkJSVByb2JsZW0uVHlwZU1pc21hdGNoLAogCQkJCW5ldyBTdHJpbmdbXSB7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhCmluZGV4
IDJlYzg0M2YuLjIwYzVlZDkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwv
Q29kZVNuaXBwZXRTY29wZS5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTM5Niw3ICszOTYsNyBA
QAogCWlmIChtZXRob2RCaW5kaW5nID09IG51bGwpCiAJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhv
ZEJpbmRpbmcoc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5k
KTsKIAlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JICAgIE1ldGhvZEJp
bmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJp
bmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBTY29wZS5GVUxMX0lORkVSRU5D
RSk7CisJICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsK
IAkgICAgaWYgKGNvbXBhdGlibGVNZXRob2QgPT0gbnVsbCkKIAkJCXJldHVybiBuZXcgUHJvYmxl
bU1ldGhvZEJpbmRpbmcobWV0aG9kQmluZGluZywgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFBy
b2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAkgICAgbWV0aG9kQmluZGluZyA9IGNvbXBhdGlibGVN
ZXRob2Q7CkBAIC01NDIsNyArNTQyLDcgQEAKIAlNZXRob2RCaW5kaW5nW10gY29tcGF0aWJsZSA9
IG5ldyBNZXRob2RCaW5kaW5nW21ldGhvZHMubGVuZ3RoXTsKIAlpbnQgY29tcGF0aWJsZUluZGV4
ID0gMDsKIAlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5n
dGg7IGkrKykgewotCSAgICBNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSwgU2NvcGUuQVBQTElDQUJJTElUWSk7CisJICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlKTsKIAkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkKIAkJCWNv
bXBhdGlibGVbY29tcGF0aWJsZUluZGV4KytdID0gY29tcGF0aWJsZU1ldGhvZDsKIAl9CkBAIC01
NTgsOCArNTU4LDcgQEAKIAkJfQogCX0KIAlpZiAodmlzaWJsZUluZGV4ID09IDEpIHsKLQkJLy8g
MS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tz
ICgxOC41LjIpOgotCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwg
dmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCXJldHVybiB2aXNpYmxlWzBdOwogCX0KIAlp
ZiAodmlzaWJsZUluZGV4ID09IDApIHsKIAkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGlu
Zyhjb21wYXRpYmxlWzBdLCBUeXBlQ29uc3RhbnRzLklOSVQsIGNvbXBhdGlibGVbMF0ucGFyYW1l
dGVycywgUHJvYmxlbVJlYXNvbnMuTm90VmlzaWJsZSk7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247628</attachid>
            <date>2014-10-05 07:57:00 -0400</date>
            <delta_ts>2014-10-07 12:17:21 -0400</delta_ts>
            <desc>Changes requiring close inspection.</desc>
            <filename>Change-set-requiring-deep-review.patch</filename>
            <type>text/plain</type>
            <size>158420</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggZWQyMDRiNS4uNGVhMDEwOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTYwLDEwICs2MCw3IEBA
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
UGFja2FnZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkTWV0aG9kQmlu
ZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBv
bHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU2NvcGU7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Tb3VyY2VUeXBlQmluZGluZzsK
QEAgLTMyOCw3ICszMjUsNyBAQAogCXB1YmxpYyBBU1ROb2RlKCkgewogCiAJCXN1cGVyKCk7Ci0J
fQorCX0JCiAJcHJpdmF0ZSBzdGF0aWMgaW50IGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50KEJsb2Nr
U2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gYXJndW1lbnQsIFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5
cGUsIFR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSwgVHlwZUJpbmRpbmcgb3JpZ2luYWxQYXJhbWV0
ZXJUeXBlKSB7CiAJCWFyZ3VtZW50LmNvbXB1dGVDb252ZXJzaW9uKHNjb3BlLCBwYXJhbWV0ZXJU
eXBlLCBhcmd1bWVudFR5cGUpOwogCkBAIC02NTAsMTIwICs2NDcsNDEgQEAKIAkvKioKIAkgKiBB
ZnRlciBtZXRob2QgbG9va3VwIGhhcyBwcm9kdWNlZCAnbWV0aG9kQmluZGluZycgYnV0IHdoZW4g
cG9seSBleHByZXNzaW9ucyBoYXZlIGJlZW4gc2VlbiBhcyBhcmd1bWVudHMsCiAJICogaW5zcGVj
dCB0aGUgYXJndW1lbnRzIHRvIHRyaWdnZXIgYW5vdGhlciByb3VuZCBvZiByZXNvbHZpbmcgd2l0
aCBpbXByb3ZlZCB0YXJnZXQgdHlwZXMgZnJvbSB0aGUgbWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAq
IElmIHRoaXMgcmVzb2x2aW5nIHByb2R1Y2VzIGJldHRlciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50
cywgdXBkYXRlIHRoZSAnYXJndW1lbnRUeXBlcycgYXJyYXkgaW4tcGxhY2UgYXMgYW4KLQkgKiBp
bnRlbmRlZCBzaWRlIGVmZmVjdCB0aGF0IHdpbGwgZmVlZCBiZXR0ZXIgdHlwZSBpbmZvcm1hdGlv
biBpbiBjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoKSBhbmQgb3RoZXJzLgogCSAqIEBwYXJhbSBp
bnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJlaW5nIHJlc29sdmVkCi0J
ICogQHBhcmFtIG1ldGhvZEJpbmRpbmcgdGhlIG1ldGhvZCBwcm9kdWNlZCBieSBsb29rdXAgKHBv
c3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZSkuCi0JICogQHBhcmFtIGFyZ3VtZW50VHlw
ZXMgdGhlIGFyZ3VtZW50IHR5cGVzIGFzIGNvbGxlY3RlZCBmcm9tIGZpcnN0IHJlc29sdmluZyB0
aGUgaW52b2NhdGlvbiBhcmd1bWVudHMgYW5kIGFzIHVzZWQgZm9yCi0JICogCXRoZSBtZXRob2Qg
bG9va3VwLgotCSAqIEBwYXJhbSBzY29wZSBzY29wZSBmb3IgZXJyb3IgcmVwb3J0aW5nCisJICog
QHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52
b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KKwkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUgYXJn
dW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0
aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhlIG1ldGhvZCBsb29rdXAuCisJICogQHBh
cmFtIHNjb3BlIHNjb3BlIGZvciByZXNvbHV0aW9uLgogCSAqLwotCXB1YmxpYyBzdGF0aWMgdm9p
ZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBN
ZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywg
U2NvcGUgc2NvcGUpIHsKLQkJaWYgKCFpbnZvY2F0aW9uLmlubmVyc05lZWRVcGRhdGUoKSkKKwlw
dWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRp
b24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcywgQmxvY2tTY29wZSBzY29wZSkgeworCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1l
dGhvZCA9IG1ldGhvZC5pc1ZhbGlkQmluZGluZygpID8gbWV0aG9kIDogbWV0aG9kIGluc3RhbmNl
b2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcgPyAoKFByb2JsZW1NZXRob2RCaW5kaW5nKSBtZXRob2Qp
LmNsb3Nlc3RNYXRjaCA6IG51bGw7CisJCWlmIChjYW5kaWRhdGVNZXRob2QgPT0gbnVsbCkKIAkJ
CXJldHVybjsKLQkJaW50IHByb2JsZW1SZWFzb24gPSAwOwotCQlNZXRob2RCaW5kaW5nIGNhbmRp
ZGF0ZU1ldGhvZDsKLQkJaWYgKG1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJ
Y2FuZGlkYXRlTWV0aG9kID0gbWV0aG9kQmluZGluZzsKLQkJfSBlbHNlIGlmIChtZXRob2RCaW5k
aW5nIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCXByb2JsZW1SZWFzb24g
PSBtZXRob2RCaW5kaW5nLnByb2JsZW1JZCgpOwotCQkJY2FuZGlkYXRlTWV0aG9kID0gKChQcm9i
bGVtTWV0aG9kQmluZGluZykgbWV0aG9kQmluZGluZykuY2xvc2VzdE1hdGNoOwotCQl9IGVsc2Ug
ewotCQkJY2FuZGlkYXRlTWV0aG9kID0gbnVsbDsKLQkJfQotCQlpZiAoY2FuZGlkYXRlTWV0aG9k
ICE9IG51bGwpIHsKLQkJCWJvb2xlYW4gdmFyaWFibGVBcml0eSA9IGNhbmRpZGF0ZU1ldGhvZC5p
c1ZhcmFyZ3MoKTsKLQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBudWxsOwotCQkJaWYg
KGNhbmRpZGF0ZU1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB7
Ci0JCQkJaW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJp
emVkTWV0aG9kQmluZGluZykgY2FuZGlkYXRlTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4ICE9IG51
bGwpIHsKLQkJCQkJaWYgKGluZkN0eC5zdGVwQ29tcGxldGVkICE9IEluZmVyZW5jZUNvbnRleHQx
OC5UWVBFX0lORkVSUkVEKSB7Ci0JCQkJCQkvLyBvbmx5IHdvcmsgaW4gdGhlIGV4YWN0IHN0YXRl
IG9mIFRZUEVfSU5GRVJSRUQKLQkJCQkJCS8vIC0gYmVsb3cgd2UncmUgbm90IHlldCByZWFkeQot
CQkJCQkJLy8gLSBhYm92ZSB3ZSdyZSBhbHJlYWR5IGRvbmUtZG9uZQotCQkJCQkJcmV0dXJuOwot
CQkJCQl9Ci0JCQkJCXZhcmlhYmxlQXJpdHkgJj0gaW5mQ3R4LmlzVmFyQXJncygpOyAvLyBUT0RP
OiBpZiBubyBpbmZDdHggaXMgYXZhaWxhYmxlLCBkbyB3ZSBoYXZlIHRvIHJlLWNoZWNrIGlmIHRo
aXMgaXMgYSB2YXJhcmdzIGludm9jYXRpb24/Ci0JCQkJfQotCQkJfSBlbHNlIGlmIChpbnZvY2F0
aW9uIGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQlpZiAoKChBbGxvY2F0
aW9uRXhwcmVzc2lvbilpbnZvY2F0aW9uKS5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVs
bCkKLQkJCQkJcmV0dXJuOyAvLyBub3QgeWV0IHJlYWR5Ci0JCQl9Ci0JCQkKLQkJCWZpbmFsIFR5
cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IGNhbmRpZGF0ZU1ldGhvZC5wYXJhbWV0ZXJzOwotCQkJ
RXhwcmVzc2lvbltdIGlubmVyQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJ
CUV4cHJlc3Npb24gW10gYXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7Ci0JCQlpZiAoaW5mQ3R4
ID09IG51bGwgJiYgdmFyaWFibGVBcml0eSAmJiBhcmd1bWVudHMgIT0gbnVsbCAmJiBwYXJhbWV0
ZXJzLmxlbmd0aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7IC8vIHJlLWNoZWNrCi0JCQkJVHlwZUJp
bmRpbmcgbGFzdFBhcmFtID0gcGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aC0xXTsKLQkJCQlF
eHByZXNzaW9uIGxhc3RBcmcgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTsKLQkJCQlp
ZiAobGFzdEFyZy5pc0NvbXBhdGlibGVXaXRoKGxhc3RQYXJhbSwgbnVsbCkpIHsKLQkJCQkJdmFy
aWFibGVBcml0eSA9IGZhbHNlOwotCQkJCX0KLQkJCX0KLQkJCWZvciAoaW50IGkgPSAwLCBsZW5n
dGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3Ro
OyBpKyspIHsKLQkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOwotCQkJCVR5
cGVCaW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBudWxsOwotCQkJCVR5cGVCaW5kaW5nIHBh
cmFtZXRlclR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMs
IGksIHZhcmlhYmxlQXJpdHkpOwotCQkJCWlmIChwYXJhbWV0ZXJUeXBlID09IG51bGwgJiYgcHJv
YmxlbVJlYXNvbiAhPSBQcm9ibGVtUmVhc29ucy5Ob0Vycm9yKQotCQkJCQljb250aW51ZTsgLy8g
bm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9ubHkg
aGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0
YW5jZW9mIExhbWJkYUV4cHJlc3Npb24gJiYgKChMYW1iZGFFeHByZXNzaW9uKSBhcmd1bWVudCku
aGFzRXJyb3JzKCkpCi0JCQkJCWNvbnRpbnVlOyAvLyBkb24ndCB1cGRhdGUgaWYgaW5uZXIgcG9s
eSBoYXMgZXJyb3JzCi0KLQkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7
Ci0JCQkJCUludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9uID0gKEludm9jYXRpb24pYXJndW1lbnQ7
Ci0JCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVySW52b2NhdGlvbi5iaW5kaW5nKHBh
cmFtZXRlclR5cGUsIHRydWUsIHNjb3BlKTsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgYmluZGluZzsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBp
bm5lckNvbnRleHQgPSBpbm5lckludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dChwYXJhbWV0
ZXJpemVkTWV0aG9kKTsKLQkJCQkJCWlmIChpbm5lckNvbnRleHQgIT0gbnVsbCkgewotCQkJCQkJ
CWlmICghaW5uZXJDb250ZXh0Lmhhc1Jlc3VsdEZvcihwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJ
CQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7Ci0JCQkJCQkJCU1ldGhv
ZEJpbmRpbmcgaW1wcm92ZWRCaW5kaW5nID0gaW5uZXJDb250ZXh0LmluZmVySW52b2NhdGlvblR5
cGUoaW5uZXJJbnZvY2F0aW9uLCBwYXJhbWV0ZXJpemVkTWV0aG9kKTsKLQkJCQkJCQkJaWYgKCFp
bXByb3ZlZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQkJaW5uZXJDb250ZXh0
LnJlcG9ydEludmFsaWRJbnZvY2F0aW9uKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5n
KTsKLQkJCQkJCQkJfQotCQkJCQkJCQlpZiAoaW5uZXJJbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdz
KGltcHJvdmVkQmluZGluZywgcGFyYW1ldGVyVHlwZSkpIHsKLQkJCQkJCQkJCXJlc29sdmVQb2x5
RXhwcmVzc2lvbkFyZ3VtZW50cyhpbm5lckludm9jYXRpb24sIGltcHJvdmVkQmluZGluZywgc2Nv
cGUpOwotCQkJCQkJCQl9Ci0JCQkJCQkJfSBlbHNlIGlmIChpbm5lckNvbnRleHQuc3RlcENvbXBs
ZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKSB7Ci0JCQkJCQkJCWlu
bmVyQ29udGV4dC5yZWJpbmRJbm5lclBvbGllcyhwYXJhbWV0ZXJpemVkTWV0aG9kLCBpbm5lcklu
dm9jYXRpb24pOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJCWNvbnRpbnVlOyAvLyBvdGhlcndp
c2UgdGhlc2UgaGF2ZSBiZWVuIGRlYWx0IHdpdGggZHVyaW5nIGlubmVyIG1ldGhvZCBsb29rdXAK
LQkJCQkJfQotCQkJCX0KLQotCQkJCWlmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkpIHsK
LQkJCQkJLy8gcG9seSBleHByZXNzaW9ucyBpbiBhbiBpbnZvY2F0aW9uIGNvbnRleHQgbWF5IG5l
ZWQgdG8gYmUgcmVzb2x2ZWQgbm93OgotCQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4
LnN0ZXBDb21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpCi0J
CQkJCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVzb2x2ZWRUeXBlOyAvLyBpbiB0
aGlzIGNhc2UgYXJndW1lbnQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgdmlhIEluZmVyZW5jZUNvbnRl
eHQxOC5hY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cygpCi0JCQkJCWVsc2UKLQkJCQkJCXVwZGF0
ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUocGFy
YW1ldGVyVHlwZSwgc2NvcGUpOwotCi0JCQkJCWlmIChwcm9ibGVtUmVhc29uID09IFByb2JsZW1S
ZWFzb25zLk5vRXJyb3IgLy8gcHJlc2VydmUgZXJyb3JzCi0JCQkJCQkJJiYgdXBkYXRlZEFyZ3Vt
ZW50VHlwZSAhPSBudWxsCQkJCQkvLyBkbyB3ZSBoYXZlIGEgcmVsZXZhbnQgdXBkYXRlPyAuLi4K
LQkJCQkJCQkmJiAhKHVwZGF0ZWRBcmd1bWVudFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRp
bmcpKQotCQkJCQl7Ci0JCQkJCQkvLyB1cGRhdGUgdGhlIGFyZ3VtZW50VHlwZXMgYXJyYXkgKHN1
cHBvc2VkIHRvIGJlIG93bmVkIGJ5IHRoZSBjYWxsaW5nIG1ldGhvZCkKLQkJCQkJCS8vIGluIG9y
ZGVyIHRvIGdpdmUgYmV0dGVyIGluZm9ybWF0aW9uIGZvciBzdWJzZXF1ZW50IGNoZWNrcwotCQkJ
CQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5cGU7Ci0JCQkJCX0KLQkJCQl9
CisJCWJvb2xlYW4gdmFyaWFibGVBcml0eSA9IGNhbmRpZGF0ZU1ldGhvZC5pc1ZhcmFyZ3MoKTsK
KwkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFt
ZXRlcnM7CisJCUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygp
OworCQlpZiAodmFyaWFibGVBcml0eSAmJiBhcmd1bWVudHMgIT0gbnVsbCAmJiBwYXJhbWV0ZXJz
Lmxlbmd0aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7CisJCQlpZiAoYXJndW1lbnRzW2FyZ3VtZW50
cy5sZW5ndGgtMV0uaXNDb21wYXRpYmxlV2l0aChwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3Ro
LTFdLCBzY29wZSkpIHsKKwkJCQl2YXJpYWJsZUFyaXR5ID0gZmFsc2U7CiAJCQl9CiAJCX0KLQkJ
aW52b2NhdGlvbi5pbm5lclVwZGF0ZURvbmUoKTsKLQl9Ci0KLQlwdWJsaWMgc3RhdGljIHZvaWQg
cmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0
aG9kQmluZGluZyBtZXRob2RCaW5kaW5nLCBTY29wZSBzY29wZSkgewotCQlUeXBlQmluZGluZ1td
IGFyZ3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gaW5uZXJBcmd1bWVudHMgPSBp
bnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoaW5uZXJBcmd1bWVudHMgIT0gbnVsbCkgewot
CQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tpbm5lckFyZ3VtZW50cy5sZW5ndGhd
OwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbm5lckFyZ3VtZW50cy5sZW5ndGg7IGkrKykKLQkJ
CQlhcmd1bWVudFR5cGVzW2ldID0gaW5uZXJBcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOworCQlm
b3IgKGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAwIDogYXJndW1lbnRz
Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gYXJn
dW1lbnRzW2ldOworCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSA9IEluZmVyZW5jZUNvbnRl
eHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFyaWFibGVBcml0eSk7CisJCQlpZiAo
cGFyYW1ldGVyVHlwZSA9PSBudWxsKQorCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVjaCB3ZSBjYW4g
ZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5zIGFmdGVyIHNv
bWUgcmVzb2x2ZSBlcnJvcgorCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0uaXNQb2x5VHlwZSgpKSB7
CisJCQkJYXJndW1lbnQuc2V0RXhwZWN0ZWRUeXBlKHBhcmFtZXRlclR5cGUpOworCQkJCVR5cGVC
aW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSk7
IAorCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKKwkJCQkJ
Ly8gTEUucmVzb2x2ZVR5cGUgbWF5IHJldHVybiBhIHZhbGlkIGJpbmRpbmcgYmVjYXVzZSByZXNv
bHZlIGRvZXMgbm90IGRldGVjdCBzdHJ1Y3R1cmFsIGVycm9ycyBhdCB0aGlzIHBvaW50LgorCQkJ
CQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNzaW9uKSBhcmd1bWVudDsK
KwkJCQkJaWYgKCFsYW1iZGEuaXNDb21wYXRpYmxlV2l0aChwYXJhbWV0ZXJUeXBlLCBzY29wZSkg
fHwgbGFtYmRhLmhhc0Vycm9ycygpKQorCQkJCQkJY29udGludWU7CisJCQkJfQorCQkJCWlmICh1
cGRhdGVkQXJndW1lbnRUeXBlICE9IG51bGwgJiYgdXBkYXRlZEFyZ3VtZW50VHlwZS5raW5kKCkg
IT0gQmluZGluZy5QT0xZX1RZUEUpCisJCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSB1cGRhdGVkQXJn
dW1lbnRUeXBlOworCQkJfQogCQl9Ci0JCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhp
bnZvY2F0aW9uLCBtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJfQogCiAJ
cHVibGljIHN0YXRpYyB2b2lkIHJlc29sdmVBbm5vdGF0aW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBB
bm5vdGF0aW9uW10gc291cmNlQW5ub3RhdGlvbnMsIEJpbmRpbmcgcmVjaXBpZW50KSB7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggNjI0YWE0Ny4uODdkYWJhNyAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNzcsMjkgKzc3LDEwIEBACiAKIAkgLy8g
aG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5m
ZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlk
YXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UE1CLElDMTg+Ki8gaW5mZXJlbmNl
Q29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNl
SGVscGVyOworCXByaXZhdGUgQmxvY2tTY29wZSBlbmNsb3NpbmdTY29wZTsKKwlwcml2YXRlIGJv
b2xlYW4gYXJnc0NvbnRhaW5DYXN0OwogCXB1YmxpYyBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlw
ZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7Ci0KLQkvKiogUmVjb3JkIHRvIGtlZXAgc3RhdGUg
YmV0d2VlbiBkaWZmZXJlbnQgcGFydHMgb2YgcmVzb2x1dGlvbi4gKi8KLQlSZXNvbHV0aW9uU3Rh
dGUgc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlOwotCWNsYXNzIFJlc29sdXRpb25TdGF0ZSB7Ci0J
CUJsb2NrU2NvcGUgc2NvcGU7Ci0JCWJvb2xlYW4gaXNEaWFtb25kOwotCQlib29sZWFuIGRpYW1v
bmROZWVkc0RlZmVycmluZzsKLQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7Ci0JCWJvb2xlYW4g
Y2Fubm90SW5mZXJEaWFtb25kOyAvLyByZXF1ZXN0IHRoZSBhbiBlcnJvciBiZSByZXBvcnRlZCBp
biBkdWUgdGltZQotCQlib29sZWFuIGhhc1JlcG9ydGVkRXJyb3I7Ci0KLQkJUmVzb2x1dGlvblN0
YXRlKEJsb2NrU2NvcGUgc2NvcGUsIGJvb2xlYW4gaXNEaWFtb25kLCBib29sZWFuIGRpYW1vbk5l
ZWRzRGVmZXJyaW5nLAotCQkJCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0LCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50VHlwZXMpCi0JCXsKLQkJCXRoaXMuc2NvcGUgPSBzY29wZTsKLQkJCXRoaXMuaXNE
aWFtb25kID0gaXNEaWFtb25kOwotCQkJdGhpcy5kaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBkaWFt
b25OZWVkc0RlZmVycmluZzsKLQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gYXJnc0NvbnRhaW5D
YXN0OwotCQl9Ci0JfQotCisJCiBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29w
ZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5m
bykgewogCS8vIGNoZWNrIGNhcHR1cmVkIHZhcmlhYmxlcyBhcmUgaW5pdGlhbGl6ZWQgaW4gY3Vy
cmVudCBjb250ZXh0ICgyNjEzNCkKIAljaGVja0NhcHR1cmVkTG9jYWxJbml0aWFsaXphdGlvbklm
TmVjZXNzYXJ5KChSZWZlcmVuY2VCaW5kaW5nKXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5l
cmFzdXJlKCksIGN1cnJlbnRTY29wZSwgZmxvd0luZm8pOwpAQCAtMzQwLDE4NyArMzIxLDE1MiBA
QAogCS8vIFByb3BhZ2F0ZSB0aGUgdHlwZSBjaGVja2luZyB0byB0aGUgYXJndW1lbnRzLCBhbmQg
Y2hlY2sgaWYgdGhlIGNvbnN0cnVjdG9yIGlzIGRlZmluZWQuCiAJZmluYWwgYm9vbGVhbiBpc0Rp
YW1vbmQgPSB0aGlzLnR5cGUgIT0gbnVsbCAmJiAodGhpcy50eXBlLmJpdHMgJiBBU1ROb2RlLklz
RGlhbW9uZCkgIT0gMDsKIAlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0g
c2NvcGUuY29tcGlsZXJPcHRpb25zKCk7Ci0JYm9vbGVhbiBkaWFtb25kTmVlZHNEZWZlcnJpbmcg
PSBmYWxzZTsKIAlsb25nIHNvdXJjZUxldmVsID0gY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVs
OwogCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkgewogCQl0aGlz
LmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50OworCQl0aGlzLmVuY2xvc2luZ1Njb3Bl
ID0gc2NvcGU7CiAJCWlmICh0aGlzLnR5cGUgPT0gbnVsbCkgewogCQkJLy8gaW5pdGlhbGl6YXRp
b24gb2YgYW4gZW51bSBjb25zdGFudAogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBzY29wZS5lbmNs
b3NpbmdSZWNlaXZlclR5cGUoKTsKIAkJfSBlbHNlIHsKIAkJCXRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy50eXBlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsKLQkJ
CWlmIChpc0RpYW1vbmQgJiYgdGhpcy50eXBlRXhwZWN0ZWQgPT0gbnVsbCAmJiB0aGlzLmV4cHJl
c3Npb25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCAmJiBzb3VyY2VMZXZlbCA+PSBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51
bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCQkJZGlhbW9uZE5l
ZWRzRGVmZXJyaW5nID0gdHJ1ZTsKLQkJCX0KIAkJfQotCX0gZWxzZSB7Ci0JCXRoaXMucmVzb2x2
ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZTsKLQl9Ci0KLQlpZiAodGhpcy50eXBlICE9
IG51bGwpIHsKLQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90YXRpb24oc2NvcGUsIHRoaXMucmVzb2x2
ZWRUeXBlKTsKLQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjogewotCQkJaWYgKHRoaXMu
dHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB7IC8v
IGRpc2FsbG93IG5ldyBYPFN0cmluZz4uWTxJbnRlZ2VyPigpCi0JCQkJUmVmZXJlbmNlQmluZGlu
ZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKXRoaXMucmVzb2x2ZWRUeXBlOwotCQkJ
CWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVudFR5cGU7Ci0JCQkJZG8gewot
CQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dlcmluZyB0cnVlIGZvciB0b3BsZXZlbCB0eXBlcwot
CQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NT
dGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb247Ci0JCQkJCWlm
IChjdXJyZW50VHlwZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2Nh
dGlvbjsKLQkJCQl9IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdU
eXBlKCkpIT0gbnVsbCk7Ci0JCQkJUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2Ug
cVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgdGhpcy50eXBlOwot
CQkJCWZvciAoaW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVuZ3RoIC0gMjsgaSA+PSAwOyBp
LS0pIHsKLQkJCQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAhPSBudWxsKSB7Ci0JCQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVhbGlmaWVkUGFyYW1ldGVyaXplZFR5cGVB
bGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwotCQkJCQkJYnJlYWs7CisJ
CWlmICh0aGlzLnR5cGUgIT0gbnVsbCkgeworCQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90YXRpb24o
c2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCWNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRp
b246IHsKKwkJCQlpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFF1YWxpZmll
ZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3RyaW5nPi5ZPEludGVnZXI+KCkK
KwkJCQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKXRo
aXMucmVzb2x2ZWRUeXBlOworCQkJCQlpZiAoY3VycmVudFR5cGUgPT0gbnVsbCkgcmV0dXJuIGN1
cnJlbnRUeXBlOworCQkJCQlkbyB7CisJCQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dlcmluZyB0
cnVlIGZvciB0b3BsZXZlbCB0eXBlcworCQkJCQkJaWYgKChjdXJyZW50VHlwZS5tb2RpZmllcnMg
JiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBicmVhayBjaGVja1BhcmFtZXRl
cml6ZWRBbGxvY2F0aW9uOworCQkJCQkJaWYgKGN1cnJlbnRUeXBlLmlzUmF3VHlwZSgpKSBicmVh
ayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQl9IHdoaWxlICgoY3VycmVudFR5
cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVsbCk7CisJCQkJCVBhcmFtZXRl
cml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFyYW1ldGVyaXplZFF1YWxpZmll
ZFR5cGVSZWZlcmVuY2UpIHRoaXMudHlwZTsKKwkJCQkJZm9yIChpbnQgaSA9IHFSZWYudHlwZUFy
Z3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgeworCQkJCQkJaWYgKHFSZWYudHlwZUFy
Z3VtZW50c1tpXSAhPSBudWxsKSB7CisJCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxs
ZWdhbFF1YWxpZmllZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlvbih0aGlzLnR5cGUsIHRoaXMu
cmVzb2x2ZWRUeXBlKTsKKwkJCQkJCQlicmVhazsKKwkJCQkJCX0KIAkJCQkJfQogCQkJCX0KIAkJ
CX0KIAkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29s
dmVkCisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKIAot
CS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwp
Ci0JaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBsZW5ndGggPSB0aGlz
LnR5cGVBcmd1bWVudHMubGVuZ3RoOwotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gc291cmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OwotCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1l
bnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVu
Z3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFy
Z3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVS
ZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBu
dWxsKSB7Ci0JCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwotCQkJfQotCQkJaWYgKGFyZ0hhc0Vycm9y
ICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewotCQkJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJlZmVyZW5jZSk7Ci0JCQl9
Ci0JCX0KLQkJaWYgKGlzRGlhbW9uZCkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGlh
bW9uZE5vdFdpdGhFeHBsaWNpdFR5cGVBcmd1bWVudHModGhpcy50eXBlQXJndW1lbnRzKTsKLQkJ
CXJldHVybiBudWxsOwotCQl9Ci0JCWlmIChhcmdIYXNFcnJvcikgewotCQkJaWYgKHRoaXMuYXJn
dW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cwot
CQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7
IGkrKykgewotCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJCS8v
IHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCisJ
CWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRoaXMu
dHlwZUFyZ3VtZW50cy5sZW5ndGg7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gc291cmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3Vt
ZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBs
ZW5ndGg7IGkrKykgeworCQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlw
ZUFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0
eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkg
PT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQkJfQorCQkJCWlmIChhcmdI
YXNFcnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNl
KTsKIAkJCQl9CiAJCQl9Ci0JCQlyZXR1cm4gbnVsbDsKKwkJCWlmIChpc0RpYW1vbmQpIHsKKwkJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlwZUFyZ3Vt
ZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJaWYg
KGFyZ0hhc0Vycm9yKSB7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3Rp
bGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cworCQkJCQlmb3IgKGludCBpID0gMCwgbWF4
ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQkJCXRoaXMuYXJn
dW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJCQkJfQorCQkJCX0KKwkJCQlyZXR1cm4g
bnVsbDsKKwkJCX0KIAkJfQotCX0KIAotCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBl
cwotCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMuYXJndW1lbnRz
ICE9IG51bGwpIHsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOwotCQlpbnQgbGVuZ3Ro
ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlw
ZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewot
CQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERp
c2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFy
Z3NDb250YWluQ2FzdCA9IHRydWU7CisJCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBl
cworCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJYm9vbGVhbiBhcmdIYXNFcnJv
ciA9IGZhbHNlOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKKwkJCXRo
aXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlz
LmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lv
bikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsg
Ly8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7
CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09O
VEVYVCk7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAK
KwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1
bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMt
MSQKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBl
KHNjb3BlKSkgPT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQkJfQogCQkJ
fQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsK
LQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCi0JCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMg
dW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWlm
ICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9
PSBudWxsKSB7Ci0JCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwotCQkJfQotCQkJaWYgKHNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJl
c3Npb24oKSB8fCAoKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbikgJiYgKChJbnZvY2F0
aW9uKSBhcmd1bWVudCkudXNlc0luZmVyZW5jZSgpKSkpIHsKLQkJCQlpZiAodGhpcy5pbm5lcklu
ZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0g
bmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQl9Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9y
KSB7Ci0JCQkvKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2ZSBlcnJvcnMsIGNvbXBsZXRlbHkgYmFpbCBvdXQgaW4g
dGhlIDw+IGNhc2UuCisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQkvKiBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2
ZSBlcnJvcnMsIGNvbXBsZXRlbHkgYmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCiAJCQkgICBObyBt
ZWFuaW5nZnVsIHR5cGUgcmVzb2x1dGlvbiBpcyBwb3NzaWJsZSBzaW5jZSBpbmZlcmVuY2Ugb2Yg
dGhlIGVsaWRlZCB0eXBlcyBpcyBmdWxseSB0aWVkIHRvIGFyZ3VtZW50IHR5cGVzLiBEbwogCQkJ
ICAgbm90IHJldHVybiB0aGUgcGFydGlhbGx5IHJlc29sdmVkIHR5cGUuCi0JCQkgKi8KLQkJCWlm
IChpc0RpYW1vbmQpIHsKLQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29v
a2VkIHRoaXMucmVzb2x2ZWRUeXBlCi0JCQl9Ci0JCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5z
dGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJLy8gcmVjb3JkIGEgYmVzdCBndWVzcywg
Zm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBjb25zdHJ1Y3RvciBtYXRj
aAotCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhd
OwotCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewotCQkJCQlwc2V1ZG9Bcmdz
W2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDog
dGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBu
dWxsIHR5cGUKKwkJCQkgKi8KKwkJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJCXJldHVybiBudWxs
OyAvLyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQl9Ci0J
CQkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhp
cy5yZXNvbHZlZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFs
c2UpOwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2Js
ZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNv
cmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50
IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51
bGwpIHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9
IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkv
LyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJh
dGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0
Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
KGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9
Ci0JCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5n
IGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlp
ZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFz
Y29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkv
LyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0
c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5h
bC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJ
CQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJ
CQkJCS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJv
dXQgcG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9B
cmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7
IC0taSA+PSAwOykgeworCQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tp
XSA9PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8g
cmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJCX0KKwkJCQkJdGhp
cy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOwor
CQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1l
dGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQg
dGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFi
b3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxs
KSB7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0g
QmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkv
LyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJh
dGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1h
dGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJ
CX0KKwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmlu
ZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJ
CQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkg
JiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJ
CQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5z
aWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNo
T3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVz
ZWQ7CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiB0aGlzLnJl
c29sdmVkVHlwZTsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8
fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG51bGw7
CisJCX0KKworCQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0g
Y29uc3RhbnQgaW5pdHMKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVk
VHlwZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5j
YW5ub3RJbnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKIAkJCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKIAkJfQogCX0KLQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0g
bnVsbCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlyZXR1cm4g
bnVsbDsKLQl9Ci0KLQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVu
dW0gY29uc3RhbnQgaW5pdHMKLQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2
ZWRUeXBlLmNhbkJlSW5zdGFudGlhdGVkKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
Y2Fubm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKLQl9Ci0JUmVzb2x1dGlvblN0YXRlIHN0YXRlID0gbmV3IFJl
c29sdXRpb25TdGF0ZShzY29wZSwgaXNEaWFtb25kLCBkaWFtb25kTmVlZHNEZWZlcnJpbmcsIGFy
Z3NDb250YWluQ2FzdCwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQlpZiAoZGlhbW9uZE5lZWRzRGVm
ZXJyaW5nKSB7Ci0JCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlID0gc3RhdGU7IC8vIHJl
c29sdmluZyB0byBiZSBjb250aW51ZWQgbGF0ZXIgKHZpYSBiaW5kaW5nKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUpKS4KLQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7Ci0JfQotCi0J
aWYgKCFyZXNvbHZlUGFydDIoc3RhdGUpKQotCQlyZXR1cm4gbnVsbDsKLQlyZXR1cm4gcmVzb2x2
ZVBhcnQzKHN0YXRlKTsKLX0KLQotLyoqIFNlY29uZCBwYXJ0IG9mIHJlc29sdmluZyB0aGF0IG1h
eSBoYXBwZW4gbXVsdGlwbGUgdGltZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29sdXRpb24uICovCi1i
b29sZWFuIHJlc29sdmVQYXJ0MihSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQkvLyBUT0RPOiBh
bGwgaW5mb3JtYXRpb24gcGVyc2lzdGVkIGR1cmluZyB0aGlzIG1ldGhvZCBtYXkgbmVlZCB0byBi
ZSBzdG9yZWQgcGVyIHRhcmdldFR5cGU/Ci0JaWYgKHN0YXRlLmlzRGlhbW9uZCkgewotCQlSZWZl
cmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRo
aXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOwotCQlUeXBlQmluZGluZyBbXSBpbmZlcnJl
ZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcygoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlz
LnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFy
Z3VtZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkg
ewotCQkJaWYgKCFzdGF0ZS5kaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlzdGF0ZS5zY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCXN0
YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVs
bDsKLQkJCX0gZWxzZSB7Ci0JCQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gdHJ1ZTsgLy8g
ZGVmZXIgcmVwb3J0aW5nCi0JCQl9Ci0JCQlyZXR1cm4gZmFsc2U7CisJCisJaWYgKGlzRGlhbW9u
ZCAmJiB0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQg
PT0gSU5WT0NBVElPTl9DT05URVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzgpIHsKKwkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGhpcy5yZXNv
bHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRp
bmcodGhpcyk7CiAJCX0KLQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRU
eXBlID0gc3RhdGUuc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShn
ZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRo
aXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOwotCQlzdGF0ZS5jYW5ub3RJbmZlckRp
YW1vbmQgPSBmYWxzZTsKLSAJfQotCVJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlID0gKFJl
ZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwotCXRoaXMuYmluZGluZyA9IGZpbmRD
b25zdHJ1Y3RvckJpbmRpbmcoc3RhdGUuc2NvcGUsIHRoaXMsIHJlY2VpdmVyVHlwZSwgdGhpcy5h
cmd1bWVudFR5cGVzKTsKLQlyZXR1cm4gdHJ1ZTsKLX0KLQotLyoqIEZpbmFsIHBhcnQgb2YgcmVz
b2x2aW5nIChvbmNlKTogY2hlY2sgYW5kIHJlcG9ydCB2YXJpb3VzIGVycm9yIGNvbmRpdGlvbnMu
ICovCi1UeXBlQmluZGluZyByZXNvbHZlUGFydDMoUmVzb2x1dGlvblN0YXRlIHN0YXRlKSB7Ci0J
aWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgdGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikKLQkJcmV0dXJuIHRoaXMucmVzb2x2
ZWRUeXBlOwotCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlID0gbnVsbDsKLQlpZiAoc3Rh
dGUuY2Fubm90SW5mZXJEaWFtb25kKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlw
ZSA9IG51bGw7CiAJfQorCQorCWlmIChpc0RpYW1vbmQpIHsKKwkJUmVmZXJlbmNlQmluZGluZyBn
ZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSkuZ2VuZXJpY1R5cGUoKTsKKwkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6
ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5l
cmljVHlwZSwgZ2VuZXJpY1R5cGUudHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3Np
bmdUeXBlKCkpOworCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRU
eXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgcGFyYW1ldGVyaXplZFR5cGUuZW5jbG9zaW5nVHlwZSgp
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVs
bCkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0
aGlzKTsKKwkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJCX0KKwkJdGhpcy5y
ZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQo
KS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBl
KCkpOworIAl9CisJCisJUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUgPSAoUmVmZXJlbmNl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7CisJdGhpcy5iaW5kaW5nID0gZmluZENvbnN0cnVj
dG9yQmluZGluZyhzY29wZSwgdGhpcywgcmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMp
OwogCVJlZmVyZW5jZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUgPSAoUmVmZXJlbmNlQmluZGluZykg
dGhpcy5yZXNvbHZlZFR5cGU7CisJCiAJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmco
KSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpIHsKIAkJCXRo
aXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IGFsbG9jYXRpb25UeXBlOwpAQCAtNTI4LDMwICs0
NzQsMjkgQEAKIAkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnR5cGUucmVzb2x2ZWRU
eXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCXJldHVybiBudWxsOwogCQl9Ci0JCXN0YXRlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRp
bmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywg
dGhpcy5iaW5kaW5nKTsKIAkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwogCX0KIAlpZiAoKHRo
aXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewotCQlz
dGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhp
cywgdGhpcy5iaW5kaW5nKTsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJ
bkNvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CiAJfQotCWlmIChpc01ldGhvZFVzZURl
cHJlY2F0ZWQodGhpcy5iaW5kaW5nLCBzdGF0ZS5zY29wZSwgdHJ1ZSkpIHsKLQkJc3RhdGUuc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMp
OworCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhpcy5iaW5kaW5nLCBzY29wZSwgdHJ1ZSkp
IHsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRp
bmcsIHRoaXMpOwogCX0KLQlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHN0YXRlLnNjb3Bl
LCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgdGhp
cy5hcmd1bWVudFR5cGVzLCBzdGF0ZS5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNo
ZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYWxsb2NhdGlvblR5cGUsIHRoaXMu
YmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcy5hcmdzQ29u
dGFpbkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9
CiAJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5h
bCgpLnR5cGVWYXJpYWJsZXMgPT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQlzdGF0
ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRo
b2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhp
cy50eXBlQXJndW1lbnRzKTsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlU
eXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50cyk7CiAJfQotCWlmICghc3RhdGUuaXNE
aWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFs
QXJndW1lbnRzKCkpIHsKLSAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5j
bG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKKwlpZiAoIWlz
RGlhbW9uZCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlV2l0aEFjdHVh
bEFyZ3VtZW50cygpKSB7CisgCQljaGVja1R5cGVBcmd1bWVudFJlZHVuZGFuY3koKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVu
Y2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAgCX0KLQlDb21waWxl
ck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc3RhdGUuc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7
CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJs
ZWQgJiYgKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5Jc051bGxuZXNzS25vd24pID09
IDApIHsKLQkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllcihzdGF0ZS5zY29wZS5l
bnZpcm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMuaW5oZXJpdE51bGxBbm5vdGF0aW9ucykKLQkJ
CQkuY2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0aGlzLmJpbmRpbmcsIG51bGwvKnNyY01l
dGhvZCovLCBmYWxzZSwgc3RhdGUuc2NvcGUpOworCQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlv
blZlcmlmaWVyKHNjb3BlLmVudmlyb25tZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVs
bEFubm90YXRpb25zKQorCQkJCS5jaGVja0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmlu
ZGluZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBzY29wZSk7CiAJfQotCXJlY29yZEV4Y2Vw
dGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc3RhdGUuc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25F
eGNlcHRpb25zKTsKKwlyZWNvcmRFeGNlcHRpb25zRm9yRW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0
aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9ucyk7CiAJcmV0dXJuIGFsbG9jYXRpb25UeXBlOwog
fQogCkBAIC01NzAsNyArNTE1LDMzIEBACiAJfQogfQogCi1wdWJsaWMgVHlwZUJpbmRpbmdbXSBp
bmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwg
UmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlw
cywgZmluYWwgQmxvY2tTY29wZSBzY29wZSkgeworLy8gRm9yIGFsbG9jYXRpb24gZXhwcmVzc2lv
bnMsIGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUgYXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5
LCBzaW5jZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVzIGFyZSBub3QgZ2VuZXJpYy4KK3B1Ymxp
YyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
U2NvcGUgc2NvcGUpIHsKKwlyZXR1cm4gaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29w
ZSk7Cit9CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgbGVm
dCwgZmluYWwgU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8
fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJcmV0dXJuIGZhbHNlOwor
CVR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gdGhpcy5yZXNvbHZlZFR5cGU7CisJaWYgKGlz
UG9seUV4cHJlc3Npb24oKSkgeworCQlUeXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlz
LnR5cGVFeHBlY3RlZDsKKwkJdHJ5IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0gbGVmdDsKKwkJ
CVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBh
cmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCks
IGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJl
ZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgcGFyYW1ldGVyaXpl
ZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlm
IChpbmZlcnJlZFR5cGVzID09IG51bGwpCisJCQkJcmV0dXJuIGZhbHNlOworCQkJYWxsb2NhdGlv
blR5cGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJfSBmaW5hbGx5
IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0gb2xkRXhwZWN0ZWRUeXBlOworCQl9CisJfQorCXJl
dHVybiBhbGxvY2F0aW9uVHlwZSAhPSBudWxsICYmIGFsbG9jYXRpb25UeXBlLmlzQ29tcGF0aWJs
ZVdpdGgobGVmdCwgc2NvcGUpOworfQorCitwdWJsaWMgVHlwZUJpbmRpbmdbXSBpbmZlckVsaWRl
ZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNl
QmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywgZmluYWwg
U2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZlbiB0aGUgYWxsb2NhdGlvbiB0eXBlIGFuZCB0aGUgYXJn
dW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rvciwgc2VlIGlmIHdlIGNhbiBzeW50aGVzaXplIGEgZ2Vu
ZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAgIG1ldGhvZCB0aGF0IHdvdWxkLCBnaXZlbiB0aGUgYXJn
dW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZvY2F0aW9uIHNpdGUsIG1hbnVmYWN0dXJlIGEgcGFyYW1l
dGVyaXplZCBvYmplY3Qgb2YgdHlwZSBhbGxvY2F0aW9uVHlwZS4KIAkgICBJZiB3ZSBhcmUgc3Vj
Y2Vzc2Z1bCB0aGVuIGJ5IGRlc2lnbiBhbmQgY29uc3RydWN0aW9uLCB0aGUgcGFyYW1ldGVyaXph
dGlvbiBvZiB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZhY3RvcnkgbWV0aG9kIGlzIGlkZW50aWNh
bApAQCAtNTgwLDE3ICs1NTEsNiBAQAogCWlmIChmYWN0b3J5IGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJpbmRpbmcoKSkgewog
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZ2VuZXJpY0ZhY3RvcnkgPSAoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBmYWN0b3J5OwogCQl0aGlzLmluZmVycmVk
UmV0dXJuVHlwZSA9IGdlbmVyaWNGYWN0b3J5LmluZmVycmVkUmV0dXJuVHlwZTsKLQkJLy8gdGhp
cyBpcyBvdXIgbGFzdCBjaGFuY2UgdG8gaW5zcGVjdCB0aGUgcmVzdWx0IG9mIHRoZSBpbmZlcmVu
Y2UgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIHRocm93LWF3YXkgZmFjdG9yeSBiaW5kaW5nCi0J
CUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGdldEluZmVyZW5jZUNvbnRleHQoZ2VuZXJp
Y0ZhY3RvcnkpOwotCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiBpbmZDdHgxOC5zdGVwQ29tcGxl
dGVkID09IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKSB7Ci0JCQkvLyByZWZy
ZXNoIGFyZ3VtZW50VHlwZXMgZnJvbSB1cGRhdGVkIGJpbmRpbmdzIGluIGFyZ3VtZW50czoKLQkJ
CS8vICh0aGlzIHNob3VsZG4ndCBiZSBzdHJpY3RseSBuZWNlc3NhcnksIGFzIEZ1bmN0aW9uRXhw
cmVzc2lvbi5pc0NvbXBhdGlibGVXaXRoKCkgc2hvdWxkIGdpdmUgdGhlIHNhbWUgcmVzdWx0LAot
CQkJLy8gIGJ1dCBpdCdzIHByb2JhYmx5IGJlIGEgZ29vZCBpZGVhIHRvIGF2b2lkIHRoZSBuZWNl
c3NpdHkgdG8gY2FsbCBpc0NvbXBhdGlibGVXaXRoKCkgaW4gdGhlIGZpcnN0IHBsYWNlKS4gCi0J
CQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwcy5sZW5ndGg7IGkrKykgewotCQkJCWlm
IChhcmd1bWVudFR5cHNbaV0gaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpCi0JCQkJCWFyZ3Vt
ZW50VHlwc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKLQkJCX0KLQkJfQog
CQlyZXR1cm4gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpZmFjdG9yeS5yZXR1cm5UeXBlKS5h
cmd1bWVudHM7CiAJfQogCXJldHVybiBudWxsOwpAQCAtNjk4LDEwMiArNjU4LDQ3IEBACiB9CiAK
IC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9kQmluZGluZyBiaW5k
aW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBz
Y29wZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmIHRh
cmdldFR5cGUgIT0gbnVsbCkgewotCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCWlm
ICghcmVzb2x2ZVBhcnQyKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKSkgewotCQkJaWYg
KHJlcG9ydEVycm9ycyAmJiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0
ZWRFcnJvcikgewotCQkJCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5jYW5ub3RJ
bmZlckRpYW1vbmQpCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxp
ZGVkVHlwZXModGhpcyk7Ci0JCQkJZWxzZQotCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5n
ZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0ZWRseSB1bnJlc29s
dmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25T
dGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJCX0KK3B1YmxpYyBNZXRob2RCaW5kaW5n
IGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwkKKwlpZiAo
dGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJp
bmRpbmcoKSkKKwkJcmV0dXJuIG51bGw7CisJCisJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHRo
aXMuYXJndW1lbnRUeXBlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykKKwkJaWYgKHRoaXMuYXJn
dW1lbnRUeXBlc1swXSA9PSBudWxsKQogCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQl9Ci0JaWYgKHJl
cG9ydEVycm9ycyAmJiB0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsKLQkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxs
KQotCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRo
aXMucmVzb2x2ZWRUeXBlOwotCQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0g
bnVsbCkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRo
aXMsIHRoaXMuYmluZGluZyk7Ci0JCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNS
ZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJfQotCX0KLQlyZXR1cm4gdGhpcy5iaW5kaW5nOwotfQot
cHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0
VHlwZTsKLQlib29sZWFuIG5lZWRzVXBkYXRlID0gdGhpcy5iaW5kaW5nID09IG51bGwgfHwgCQkJ
CQkJCQkJCQkJCQkJCS8vIG5vdCB5ZXQgcmVzb2x2ZWQKLQkJCSh0aGlzLnJlc29sdmVkVHlwZSAh
PSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21w
YXRpYmxlV2l0aCh0YXJnZXRUeXBlKSk7CS8vIHByZXZpb3VzIGF0dGVtcHQgd2FzIHdyb25nCi0J
aWYgKG5lZWRzVXBkYXRlICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwg
JiYgIXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJ
Ly8gQXR0ZW1wdCB0byByZXNvbHZlIGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAotCQlyZXNvbHZlUGFy
dDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpOwotCX0KLQkvLyBjb25mZXIgTWVzc2Fn
ZVNlbmQuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKCwsKToKLQlpZiAodGhpcy5iaW5kaW5n
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVy
ZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0
aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVw
Q29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKKwkKKwlUeXBl
QmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRoaXMucmVzb2x2ZWRUeXBlOworCWlmIChpc1BvbHlF
eHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy50eXBl
RXhwZWN0ZWQ7CisJCXRyeSB7CiAJCQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRhcmdldFR5cGU7Ci0J
CQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2NhdGlvblR5cGUo
dGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsK
LQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlwZSkpIHsKLQkJ
CQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1cGRhdGVkQmlu
ZGluZywgc2NvcGUpOwotCQkJfQorCQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUo
KTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3Bl
LmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVy
aWNUeXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJ
CVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRl
cml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1l
bnRUeXBlcywgc2NvcGUpOworCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkKKwkJCQlyZXR1
cm4gbnVsbDsKKwkJCWFsbG9jYXRpb25UeXBlID0gdGhpcy5lbmNsb3NpbmdTY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVz
LCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2lu
Z1R5cGUoKSk7CisJCQlyZXR1cm4gc2NvcGUuZ2V0Q29uc3RydWN0b3IoKFJlZmVyZW5jZUJpbmRp
bmcpIGFsbG9jYXRpb25UeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQl9IGZpbmFs
bHkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBvbGRFeHBlY3RlZFR5cGU7CiAJCX0KIAl9Ci0J
aWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJcmV0dXJuIHJl
c29sdmVQYXJ0Myh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4gbnVsbDsKIH0KIHB1YmxpYyBFeHByZXNzaW9uW10g
YXJndW1lbnRzKCkgewogCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIH0KIAotcHVibGljIGJvb2xl
YW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRp
bmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVw
ZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwgJiYgdGhp
cy5iaW5kaW5nLm9yaWdpbmFsKCkgPT0gdXBkYXRlZEJpbmRpbmcub3JpZ2luYWwoKSkgewotCQlJ
bmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5j
ZUNvbnRleHRzLmdldCh0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRl
ZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsK
LQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJ
Ly8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBu
b3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQlo
YXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRp
bmcpOwotCQl9Ci0JfQotCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVz
b2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRpbmcuZGVjbGFyaW5nQ2xhc3M7Ci0JcmV0dXJuIGhhc1Vw
ZGF0ZTsKLX0KIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4
MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQl0aGlzLmluZmVy
ZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CiAJdGhpcy5pbmZlcmVuY2VD
b250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7Ci0JTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9
IG1ldGhvZC5vcmlnaW5hbCgpOwotCWlmIChvcmlnaW5hbCBpbnN0YW5jZW9mIFN5bnRoZXRpY0Zh
Y3RvcnlNZXRob2RCaW5kaW5nKSB7Ci0JCVN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIHN5
bnRoT3JpZ2luYWwgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcpb3JpZ2luYWw7Ci0J
CVBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRDdG9yID0gc3ludGhPcmln
aW5hbC5hcHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKG1ldGhvZC50eXBlQXJndW1lbnRz
KTsKLQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQocGFyYW1ldGVyaXplZEN0b3IsIGluZkN0
eDE4KTsKLQl9Ci19Ci1wdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAo
dGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwogfQogcHVibGljIEluZmVyZW5jZUNvbnRl
eHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhv
ZCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXJldHVybiBudWxs
OwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdl
dChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1
cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotfQotcHVibGljIHZvaWQgaW5u
ZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotfQot
cHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkgewotCXJl
dHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotfQotCiAvLy0tIGludGVyZmFjZSBJbnZv
Y2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29u
dGV4dCgpIHsKIAlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKQEAgLTgwMSw0ICs3MDYs
NCBAQAogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2Nv
cGUgc2NvcGUpIHsKIAlyZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29wZSwgdGhpcy5h
cmd1bWVudHMsIHRoaXMpOwogfQotfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQppbmRleCAyNDM0OTE1Li41YWMzNGU4
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCkBAIC01Niw3ICs1Niw2
IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
Q29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlZhcmlhYmxlQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIAogcHVibGljIGNsYXNzIEV4cGxpY2l0Q29u
c3RydWN0b3JDYWxsIGV4dGVuZHMgU3RhdGVtZW50IGltcGxlbWVudHMgSW52b2NhdGlvbiB7CiAK
QEAgLTc2LDEwICs3NSw2IEBACiAKIAkvLyBUT0RPIFJlbW92ZSBvbmNlIERPTVBhcnNlciBpcyBh
Y3RpdmF0ZWQKIAlwdWJsaWMgaW50IHR5cGVBcmd1bWVudHNTb3VyY2VTdGFydDsKLQotCSAvLyBo
b2xkIG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZl
cmVuY2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRh
dGUpOgotCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQR01CLEluZmVyZW5jZUNvbnRleHQx
OD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcml2YXRlIElubmVySW5mZXJlbmNlSGVscGVyIGlu
bmVySW5mZXJlbmNlSGVscGVyOwogCiAJcHVibGljIEV4cGxpY2l0Q29uc3RydWN0b3JDYWxsKGlu
dCBhY2Nlc3NNb2RlKSB7CiAJCXRoaXMuYWNjZXNzTW9kZSA9IGFjY2Vzc01vZGU7CkBAIC0zOTQs
MTAgKzM4OSw2IEBACiAJCQkJCWlmICgoYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29s
dmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgewogCQkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwogCQkJ
CQl9Ci0JCQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYm
IChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0YW5jZW9mIElu
dm9jYXRpb24pICYmICgoSW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpKSB7
Ci0JCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQkJCXRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJ
CQkJfQogCQkJCX0KIAkJCQlpZiAoYXJnSGFzRXJyb3IpIHsKIAkJCQkJaWYgKHJlY2VpdmVyVHlw
ZSA9PSBudWxsKSB7CkBAIC00OTgsNTYgKzQ4OSwyMiBAQAogCQl2aXNpdG9yLmVuZFZpc2l0KHRo
aXMsIHNjb3BlKTsKIAl9CiAKLQkvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLQlwdWJs
aWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4g
cmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewotCQlpZiAocmVwb3J0RXJyb3JzKSB7Ci0JCQlp
ZiAodGhpcy5iaW5kaW5nID09IG51bGwpCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2Vu
ZXJpY0luZmVyZW5jZUVycm9yKCJjb25zdHJ1Y3RvciBpcyB1bmV4cGVjdGVkbHkgdW5yZXNvbHZl
ZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQllbHNlIGlmICghdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVj
dG9yKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JCX0KKwkvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlv
bgorCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
U2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXMuYmluZGluZzsKIAl9CisJCisJcHVibGljIHZv
aWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgeworCQkvLyBOb3RoaW5n
IHRvIGRvLgorCX0KKwkKKwlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVyZW5jZUNv
bnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXRocm93IG5ldyBJ
bGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgY29udHJvbCBmbG93Iik7IC8vJE5PTi1O
TFMtMSQKKwl9CisJCiAJcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CiAJCXJldHVy
biB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0
aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQli
b29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQkJaWYg
KHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewotCQkJSW5mZXJlbmNlQ29udGV4dDE4
IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5yZW1vdmVL
ZXkodGhpcy5iaW5kaW5nKTsKLQkJCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBp
bnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCXRoaXMu
aW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJCS8vIHNvbHV0
aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQg
dGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJCWhhc1VwZGF0
ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0J
CQl9Ci0JCX0KLQkJdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JCXJldHVybiBoYXNV
cGRhdGU7Ci0JfQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5m
Q3R4MTgpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKLQkJCXRoaXMu
aW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKLQkJdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7Ci0JfQotCXB1YmxpYyBJbmZlcmVu
Y2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGlu
ZyBtZXRob2QpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKLQkJCXJl
dHVybiBudWxsOwotCQlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VD
b250ZXh0cy5nZXQobWV0aG9kKTsKLQl9Ci0JcHVibGljIGJvb2xlYW4gdXNlc0luZmVyZW5jZSgp
IHsKLQkJcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIAotCQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwotCX0KLQlwdWJs
aWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCQlyZXR1cm4gdGhpcy5pbm5lckluZmVy
ZW5jZUhlbHBlciAhPSBudWxsOwotCX0KLQlwdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7
Ci0JCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotCX0KLQlwdWJsaWMgSW5uZXJJ
bmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKSB7Ci0JCXJldHVybiB0aGlzLmlu
bmVySW5mZXJlbmNlSGVscGVyOwotCX0KLQogCS8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uU2l0
ZTogLS0KIAlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChT
Y29wZSBzY29wZSkgewogCQlyZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29wZSwgdGhp
cy5hcmd1bWVudHMsIHRoaXMpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQppbmRleCBhYzU0NDdmLi4wNWJjYjMyIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lu
dm9jYXRpb24uamF2YQpAQCAtMTksNzEgKzE5LDM1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKIAogLyoqCi0gKiBBYnN0cmFj
dGlvbiBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhhdCBjYW4gdHJpZ2dlciAKLSAqIDx1bD4K
LSAqIDxsaT5JbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlcyAoMTguNS4xKSwgYW5k
PC9saT4gCi0gKiA8bGk+SW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS48L2xpPgot
ICogPC91bD4KLSAqLworICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRpb24gQVNUIG5vZGVzIHRo
YXQgY2FuIHRyaWdnZXIgb3ZlcmxvYWQgcmVzb2x1dGlvbiBwb3NzaWJseSBpbnZvbHZpbmcgdHlw
ZSBpbmZlcmVuY2UKKyovCiBwdWJsaWMgaW50ZXJmYWNlIEludm9jYXRpb24gZXh0ZW5kcyBJbnZv
Y2F0aW9uU2l0ZSB7CiAKIAlFeHByZXNzaW9uW10gYXJndW1lbnRzKCk7Ci0KKwkKIAkvKioKIAkg
KiBBbnN3ZXIgdGhlIHJlc29sdmVkIG1ldGhvZCBiaW5kaW5nIG9mIHRoaXMgaW52b2NhdGlvbi4K
IAkgKiBJZiBhIHRhcmdldCB0eXBlIGlzIGdpdmVuLCB0aGUgaW52b2NhdGlvbiBnZXRzIGEgY2hh
bmNlIHRvIGRvIHJlcGVhdGVkIG1ldGhvZCBsb29rdXAuCiAJICogQHBhcmFtIHRhcmdldFR5cGUg
dGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgaW52b2NhdGlvbiBvciBudWxsIGlmIG5vdCB5ZXQga25v
d24KLQkgKiBAcGFyYW0gcmVwb3J0RXJyb3JzIGlmIHRydWUgdGhlbiB0aGlzIGlzIHRoZSBsYXN0
IGNhbGwsIGlmIG5vIHZhbGlkIGJpbmRpbmcgY2FuIGJlIGFuc3dlcmVkIHdlIHNob3VsZCByZXBv
cnQgYW4gZXJyb3IKLQkgKiBAcGFyYW0gc2NvcGUgaWYgcmVwb3J0RXJyb3JzIGlzIHRydWUgdGhl
biB0aGlzIHNjb3BlIGNhbiBiZSB1c2VkIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0g
c2NvcGUgdGhlIHNjb3BlIHRvIHVzZSBmb3IgbG9va3VwLgogCSAqIAogCSAqLwotCU1ldGhvZEJp
bmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9y
cywgU2NvcGUgc2NvcGUpOwotCisJTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUsIFNjb3BlIHNjb3BlKTsKKwkKIAkvKioKIAkgKiBSZWdpc3RlciB0aGUgZ2l2ZW4g
aW5mZXJlbmNlIGNvbnRleHQsIHdoaWNoIHByb2R1Y2VkIHRoZSBnaXZlbiBtZXRob2QgYXMgaXRz
IGludGVybWVkaWF0ZSByZXN1bHQuCiAJICogTGF0ZXIgd2hlbiB0aGUgc2FtZSBtZXRob2QgaXMg
c2VsZWN0ZWQgYXMgdGhlIG1vc3Qgc3BlY2lmaWMgbWV0aG9kLCB0aGUgaW5mZXJlbmNlIGNvbnRl
eHQKLQkgKiBmb3IgdGhpcyBwYWlyIChJbnZvY2F0aW9uIHggTWV0aG9kQmluZGluZykgY2FuIGJl
IGxvb2tlZCB1cCB1c2luZyB7QGxpbmsgI2dldEV4cHJlc3Npb25Db250ZXh0KCl9CisJICogZm9y
IHRoaXMgcGFpciAoSW52b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAg
dXNpbmcge0BsaW5rICNnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKX0KIAkgKiB0byBjb250aW51ZSB0aGUgdHlwZSBpbmZlcmVuY2UuCiAJICovCiAJdm9pZCBy
ZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KTsKIAkKKwogCS8qKgotCSAqIFJl
dHJpZXZlIGFuIGluZmVyZW5jZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kIHdoaWNoIG11
c3QgaGF2ZSBiZWVuIHJlZ2lzdGVyZWQKLQkgKiB1c2luZyB7QGxpbmsgI3JlZ2lzdGVySW5mZXJl
bmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcsIEluZmVyZW5jZUNv
bnRleHQxOCl9LgorCSAqIFJldHJpZXZlIGFuIGluZmVyZW5jZSBjb250ZXh0IGZvciB0aGUgZ2l2
ZW4gbWV0aG9kLgogCSAqIEBwYXJhbSBtZXRob2QgYW4gaW50ZXJtZWRpYXRlIHJlc29sdmVkIGNh
bmRpZGF0ZSBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogcmV0dXJuIGEgc3VzcGVuZGVkIGluZmVy
ZW5jZSBjb250ZXh0IG9yIG51bGwgaWYgbm9uZSB3YXMgcmVnaXN0ZXJlZCBmb3IgdGhpcyBtZXRo
b2QuCisJICogcmV0dXJuIHRoZSBhc3NvY2lhdGVkIGluZmVyZW5jZSBjb250ZXh0LgogCSAqLwog
CUluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRo
b2RCaW5kaW5nIG1ldGhvZCk7CiAKLQkvKioKLQkgKiBBbnN3ZXIgdHJ1ZSBpZiB0aGlzIGludm9j
YXRpb24gaGFzIGRldGVybWluZWQgaXRzIGJpbmRpbmcgdXNpbmcgaW5mZXJlbmNlLgotCSAqLwot
CWJvb2xlYW4gdXNlc0luZmVyZW5jZSgpOwotCQotCS8qKgotCSAqIFdoZXJlIHRoZSBBU1Qgbm9k
ZSBtYXkgaG9sZCByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHRzIG9mIEludm9jYXRpb24gQXBwbGlj
YWJpbGl0eSBJbmZlcmVuY2UsCi0JICogdGhpcyBtZXRob2QgYWxsb3dzIHRvIHVwZGF0ZSB0aG9z
ZSByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHQgb2YgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4K
LQkgKiBOb3RlIHRoYXQgcG90ZW50aWFsbHkgbW9yZSB0aGFuIGp1c3QgdGhlIG1ldGhvZCBiaW5k
aW5nIGlzIHVwZGF0ZWQuCi0JICogQHBhcmFtIHVwZGF0ZWRCaW5kaW5nIHRoZSBmaW5hbCBtZXRo
b2QgYmluZGluZyBhZnRlciBmdWxsIGluZmVyZW5jZQotCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRo
ZSB0YXJnZXQgdHlwZSB1c2VkIGR1cmluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlCi0JICog
QHJldHVybiB0cnVlIGlmIGFuIHVwZGF0ZSBoYXMgaGFwcGVuZWQKLQkgKi8KLQlib29sZWFuIHVw
ZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUpOwotCQotCS8qKgotCSAqIEFuc3dlciB3aGV0aGVyIHRoZSBjdXJyZW50IGludm9j
YXRpb24gaGFzIGlubmVyIGV4cHJlc3Npb25zIHRoYXQgc3RpbGwgbmVlZCB1cGRhdGluZyBhZnRl
ciBpbmZlcmVuY2UuCi0JICovCi0JYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCk7Ci0KLQkvKioK
LQkgKiBNYXJrIHRoYXQgdXBkYXRpbmcgKHRoZSBuZWVkIGZvciB3aGljaCBpcyBzaWduYWxlZCB2
aWEge0BsaW5rICNpbm5lcnNOZWVkVXBkYXRlKCl9KSBoYXMgYmVlbiBkb25lLgotCSAqLwotCXZv
aWQgaW5uZXJVcGRhdGVEb25lKCk7Ci0KLQkvKioKLQkgKiBJZiB0aGlzIGludm9jYXRpb24gaGFz
IGFueSBwb2x5IGV4cHJlc3Npb25zIGFzIGFyZ3VtZW50cywgdGhpcyBtZXRob2QgYW5zd2VycyBh
biBpbmZlcmVuY2UgaGVscGVyIAotCSAqIHRoYXQgbWVkaWF0ZXMgZHVyaW5nIG92ZXJsb2FkIHJl
c29sdXRpb24sIGV2ZW4gaWYgbm8gYWN0dWFsIGluZmVyZW5jZSBoYXBwZW5zIGZvciB0aGlzIGlu
dm9jYXRpb24uCi0JICovCi0JSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxw
ZXIoKTsKLQkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQppbmRleCA1MjBiNWMwLi5lNTViY2I4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdl
U2VuZC5qYXZhCkBAIC04MCw2ICs4MCw4IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5NaXNzaW5nVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5QYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5
VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Qb2x5bW9ycGhpY01ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1SZWFzb25zOwpAQCAt
MTE1LDEzICsxMTcsMTIgQEAKIAogCSAvLyBob2xkIG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGlu
dm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGlu
ZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFi
bGUvKjxQR01CLEluZmVyZW5jZUNvbnRleHQxOD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcm90
ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7CiAJcHJpdmF0
ZSBib29sZWFuIHJlY2VpdmVySXNUeXBlOwogCXByb3RlY3RlZCBib29sZWFuIGFyZ3NDb250YWlu
Q2FzdDsKIAlwdWJsaWMgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19Q
QVJBTUVURVJTOwogCQogCi1wdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBj
dXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykg
eworCXB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwg
Rmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJYm9vbGVhbiBu
b25TdGF0aWMgPSAhdGhpcy5iaW5kaW5nLmlzU3RhdGljKCk7CiAJYm9vbGVhbiB3YXNJbnNpZGVB
c3NlcnQgPSAoKGZsb3dDb250ZXh0LnRhZ0JpdHMgJiBGbG93Q29udGV4dC5ISURFX05VTExfQ09N
UEFSSVNPTl9XQVJOSU5HKSAhPSAwKTsKIAlmbG93SW5mbyA9IHRoaXMucmVjZWl2ZXIuYW5hbHlz
ZUNvZGUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8sIG5vblN0YXRpYykudW5j
b25kaXRpb25hbEluaXRzKCk7CkBAIC01OTIsMTE0ICs1OTMsMTExIEBACiB9CiAKIHB1YmxpYyBU
eXBlQmluZGluZyByZXNvbHZlVHlwZShCbG9ja1Njb3BlIHNjb3BlKSB7Ci0JLy8gQW5zd2VyIHRo
ZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUKKwkvLyBBbnN3ZXIgdGhlIHNpZ25hdHVyZSByZXR1cm4g
dHlwZSwgYW5zd2VycyBQb2x5VHlwZUJpbmRpbmcgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGdl
bmVyaWMgb3ZlcmxvYWRlZCBjYW5kaWRhdGUgdGhhdCBlbmNvZGVkIHR5cGUgdmFyaWFibGVzIGlu
IHJldHVybiB0eXBlIGFuZCB0aGVyZSBpcyBubyB0YXJnZXQgdHlwZSAgCiAJLy8gQmFzZSB0eXBl
IHByb21vdGlvbgorCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkg
eworCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50OworCQlsb25nIHNvdXJj
ZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWw7CisJCWJvb2xlYW4g
cmVjZWl2ZXJDYXN0ID0gZmFsc2U7CisJCWlmICh0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgQ2Fz
dEV4cHJlc3Npb24pIHsKKwkJCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVV
bm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJcmVjZWl2ZXJD
YXN0ID0gdHJ1ZTsKKwkJfQorCQl0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2
ZXIucmVzb2x2ZVR5cGUoc2NvcGUpOworCQl0aGlzLnJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNl
aXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5y
ZWNlaXZlcikuYml0cyAmIEJpbmRpbmcuVFlQRSkgIT0gMDsKKwkJaWYgKHJlY2VpdmVyQ2FzdCAm
JiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7CisJCQkvLyBkdWUgdG8gY2hhbmdl
IG9mIGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2Fz
dCBzaG91bGQgYmUgbm90aWZpZWQKKwkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChD
YXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5u
ZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKKwkJCX0KKwkJfQor
CQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxs
KQorCQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKKwkJCWludCBsZW5ndGggPSB0
aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOworCQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IHNvdXJj
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJn
dW1lbnRzCisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xl
bmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJVHlwZVJl
ZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOworCQkJCWlmICgo
dGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUo
c2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7CisJCQkJCWFyZ0hhc0Vy
cm9yID0gdHJ1ZTsKKwkJCQl9CisJCQkJaWYgKGFyZ0hhc0Vycm9yICYmIHR5cGVSZWZlcmVuY2Ug
aW5zdGFuY2VvZiBXaWxkY2FyZCkgeworCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxl
Z2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOworCQkJCX0KKwkJCX0KKwkJCWlmIChh
cmdIYXNFcnJvcikgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxs
IGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKKwkJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9
IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQl0aGlzLmFyZ3Vt
ZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIG51
bGw7CisJCQl9CisJCX0KKwkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSBy
ZXNvbHZlZAorCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJYm9vbGVhbiBhcmdI
YXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCWludCBsZW5n
dGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcg
VHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysp
eworCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAo
dGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVj
dGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJCWlmIChhcmd1
bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQkJCWFyZ3VtZW50LmJpdHMgfD0g
QVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIg
b24KKwkJCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVu
dC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICgodGhp
cy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxs
KXsKKwkJCQkJYXJnSGFzRXJyb3IgPSB0cnVlOworCQkJCX0KKwkJCX0KKwkJCWlmIChhcmdIYXNF
cnJvcikgeworCQkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVy
ZW5jZUJpbmRpbmcpIHsKKwkJCQkJLy8gIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRz
IHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCisJCQkJCVR5cGVCaW5k
aW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJCQlmb3IgKGlu
dCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspCisJCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1
bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5
cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKIAotCXRo
aXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7Ci0JbG9uZyBzb3VyY2VMZXZlbCA9
IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsOwotCWJvb2xlYW4gcmVjZWl2ZXJD
YXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lv
bikgewotCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlD
YXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJcmVjZWl2ZXJDYXN0ID0gdHJ1ZTsK
LQl9Ci0JaWYgKHRoaXMucmVjZWl2ZXIucmVzb2x2ZWRUeXBlICE9IG51bGwpCi0JCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiUmVjZWl2ZXIgd2FzIHVuZXhw
ZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKLQl0aGlz
LnJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2Ug
JiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcikuYml0cyAmIEJpbmRpbmcuVFlQRSkg
IT0gMDsKLQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlICE9IG51
bGwpIHsKLQkJIC8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5nIGNsYXNzIHdpdGggcmVjZWl2
ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBub3RpZmllZAotCQlpZiAoVHlw
ZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhw
cmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgewotCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlz
LnJlY2VpdmVyKTsKLQkJfQotCX0KLQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2Vu
ZXJpYyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkg
ewotCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJYm9vbGVhbiBh
cmdIYXNFcnJvciA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsgLy8g
dHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCi0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRz
W2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5j
ZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsK
LQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlw
ZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQot
CQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8v
IHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKLQkJCQlmb3IgKGludCBpID0gMCwg
bWF4ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKLQkJCQkJdGhpcy5h
cmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOwotCQkJCX0KLQkJCX0KLQkJCXJldHVybiBu
dWxsOwotCQl9Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVz
b2x2ZWQKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQlib29sZWFuIGFyZ0hhc0Vy
cm9yID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQlpbnQgbGVuZ3RoID0g
dGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKyl7Ci0JCQlF
eHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07Ci0JCQlpZiAodGhpcy5hcmd1
bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3Vu
ZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlpZiAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQkJCWFyZ3VtZW50LmJpdHMgfD0gQVNUTm9kZS5EaXNh
YmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJCQl0aGlz
LmFyZ3NDb250YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5zZXRFeHByZXNzaW9u
Q29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKCh0aGlzLmFyZ3VtZW50VHlwZXNb
aV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewotCQkJCWFyZ0hhc0Vy
cm9yID0gdHJ1ZTsKLQkJCX0KLQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84KSB7Ci0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKQotCQkJCQl8
fCAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1bWVu
dCkudXNlc0luZmVyZW5jZSgpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lcklu
ZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsK
LQkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRp
bmcpIHsKLQkJCQkvLyAgcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQg
aGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVk
b0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3Ro
OyAtLWkgPj0gMDspCi0JCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0g
PT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJl
cGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQotCQkJCXRoaXMuYmluZGluZyA9
Ci0JCQkJCXRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJCQkJPyBzY29wZS5nZXRJ
bXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKQotCQkJCQkJOiBz
Y29wZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSwgdGhpcy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0aGlz
LmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJ
CQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRo
aXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0
Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1l
dGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlmIChj
bG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9W
QVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJu
IGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRv
IHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmln
aW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJpbmRp
bmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdp
bmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3Jp
Z2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1l
dGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hl
cmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3Qg
cmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0
cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJdGhpcy5iaW5kaW5nID0g
dGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8KKwkJCQkJCQkJc2NvcGUuZ2V0SW1wbGlj
aXRNZXRob2QodGhpcy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcykgOgorCQkJCQkJCQkJc2Nv
cGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUs
IHRoaXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKworCQkJCQlpZiAodGhp
cy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJ
CQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcp
dGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3Qg
bWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJ
aWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19U
WVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3Qg
cmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0
IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0
Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0
aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0
TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9z
ZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlz
RGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25v
cmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAo
ZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9k
aWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJ
fQogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJ
CWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7CisJCQlyZXR1cm4gbnVsbDsK
KwkJfQorCQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKKwkJaWYgKHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgeworCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwg
dGhpcy5hcmd1bWVudFR5cGVzKTsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQotCWlmICh0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7Ci0JCXJldHVybiBudWxsOworCQorCVR5cGVC
aW5kaW5nIG1ldGhvZFR5cGUgPSBmaW5kTWV0aG9kQmluZGluZyhzY29wZSk7CisJaWYgKG1ldGhv
ZFR5cGUgIT0gbnVsbCAmJiBtZXRob2RUeXBlLmlzUG9seVR5cGUoKSkgeworCQl0aGlzLnJlc29s
dmVkVHlwZSA9IHRoaXMuYmluZGluZy5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291
cmNlRW5kKTsKKwkJcmV0dXJuIG1ldGhvZFR5cGU7CiAJfQotCS8vIGJhc2UgdHlwZSBjYW5ub3Qg
cmVjZWl2ZSBhbnkgbWVzc2FnZQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VU
eXBlKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlz
LCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJu
IG51bGw7Ci0JfQotCi0JZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUpOwogCiAJaWYgKCF0aGlzLmJp
bmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0Ns
YXNzID09IG51bGwpIHsKQEAgLTcxOCwxMCArNzE2LDE3IEBACiAJCQkJCQkJCSBkZWNsYXJpbmdD
bGFzcy5zdXBlcmNsYXNzKCkgaW5zdGFuY2VvZiBNaXNzaW5nVHlwZUJpbmRpbmc7CiAJCWlmICgh
YXZvaWRTZWNvbmRhcnkpCiAJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9k
KHRoaXMsIHRoaXMuYmluZGluZyk7CisJCQogCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9
ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CiAJCXN3
aXRjaCAodGhpcy5iaW5kaW5nLnByb2JsZW1JZCgpKSB7CiAJCQljYXNlIFByb2JsZW1SZWFzb25z
LkFtYmlndW91cyA6CiAJCQkJYnJlYWs7IC8vIG5vIHJlc2lsaWVuY2Ugb24gYW1iaWd1b3VzCisJ
CQljYXNlIFByb2JsZW1SZWFzb25zLkluZmVycmVkQXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxl
OgorCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6
CisJCQkJLy8gR3JhYmJpbmcgdGhlIGNsb3Nlc3QgbWF0Y2ggaW1wcm92ZXMgZXJyb3IgcmVwb3J0
aW5nIGluIG5lc3RlZCBpbnZvY2F0aW9uIGNvbnRleHRzCisJCQkJaWYgKHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQgIT0gSU5WT0NBVElPTl9DT05URVhUKQorCQkJCQlicmVhazsKKwkJCQkvLyRGQUxM
LVRIUk9VR0gkCiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5vdFZpc2libGUgOgogCQkJY2FzZSBQ
cm9ibGVtUmVhc29ucy5Ob25TdGF0aWNSZWZlcmVuY2VJbkNvbnN0cnVjdG9ySW52b2NhdGlvbiA6
CiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1JlZmVyZW5jZUluU3RhdGljQ29udGV4
dCA6CkBAIC04NTksMTYgKzg2NCwyMCBAQAogCQkJCT8gdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQk6
IG51bGw7CiB9Ci0vKioKLSAqIEZpbmQgdGhlIG1ldGhvZCBiaW5kaW5nOyAKLSAqIGlmIHRoaXMu
aW5uZXJzTmVlZFVwZGF0ZSBhbGxvdyBmb3IgdHdvIGF0dGVtcHRzIHdoZXJlIHRoZSBmaXJzdCBy
b3VuZCBtYXkgc3RvcAotICogYWZ0ZXIgYXBwbGljYWJpbGl0eSBjaGVja2luZyAoMTguNS4xKSB0
byBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24gaW50byB0aGUgZmluYWwKLSAqIGludm9jYXRpb24g
dHlwZSBpbmZlcmVuY2UgKDE4LjUuMikuCi0gKi8KLXByb3RlY3RlZCB2b2lkIGZpbmRNZXRob2RC
aW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVy
LmlzSW1wbGljaXRUaGlzKCkKLQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxl
Y3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKQorCitwcm90ZWN0ZWQgVHlwZUJpbmRpbmcg
ZmluZE1ldGhvZEJpbmRpbmcoQmxvY2tTY29wZSBzY29wZSkgeworCQorCQorCXRoaXMuYmluZGlu
ZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAorCQkJc2NvcGUuZ2V0SW1wbGlj
aXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKSAKIAkJCTog
c2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCisJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKSAv
LyBjYW4ndCBoYXBwZW4gPyBJIHRoaW5rIHdlIGFsd2F5cyBnZXQgYSBwcm9ibGVtIGJpbmRpbmcs
IGFueXdheXMuCisJCXJldHVybiBudWxsOworCQorCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2Vv
ZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQorCQlyZXR1cm4gbmV3IFBv
bHlUeXBlQmluZGluZyh0aGlzKTsKKwkKIAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMo
dGhpcywgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAkKIAkvKiBU
aGVyZSBhcmUgZW1iZWRkZWQgYXNzdW1wdGlvbnMgaW4gdGhlIEpMUzggdHlwZSBpbmZlcmVuY2Ug
c2NoZW1lIHRoYXQgYSBzdWNjZXNzZnVsIHNvbHV0aW9uIG9mIHRoZSB0eXBlIGVxdWF0aW9ucyBy
ZXN1bHRzIGluIGFuCkBAIC04ODMsMTEgKzg5Miw4IEBACiAJZmluYWwgQ29tcGlsZXJPcHRpb25z
IGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCWlmIChjb21waWxl
ck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiB0aGlz
LmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYg
dGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKCFjb21waWxlck9wdGlvbnMu
cG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrKQotCQkJcmV0dXJuOworCQkJ
cmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgcGdtYiA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRo
aXMuYmluZGluZzsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRl
eHQocGdtYik7Ci0JCWlmIChjdHggPT0gbnVsbCB8fCBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVy
ZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKQotCQkJcmV0dXJuOwogCQlpbnQgbGVuZ3Ro
ID0gcGdtYi50eXBlQXJndW1lbnRzID09IG51bGwgPyAwIDogcGdtYi50eXBlQXJndW1lbnRzLmxl
bmd0aDsKIAkJYm9vbGVhbiBzYXdSYXdUeXBlID0gZmFsc2U7CiAJCWZvciAoaW50IGkgPSAwOyAg
aSA8IGxlbmd0aDsgaSsrKSB7CkBAIC04OTYsNDAgKzkwMiwyNiBAQAogCQkJICAgZG9lcyBub3Qg
YXBwZWFyIGZ1bGx5IGhvb2tlZCB1cCBpbnRvIGlzQ29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZh
bGVudCB0byBldmVyeXdoZXJlLiBBdCB0aGUgbW9tZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2Fw
dHVyZS4KIAkJCSovICAgCiAJCQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgp
KQotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlp
ZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3VHlwZSgpKQogCQkJCXNhd1Jhd1R5cGUgPSB0
cnVlOwogCQl9CiAJCWlmICghc2F3UmF3VHlwZSkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/
IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CiAJCWlmIChsZW5ndGggPT0gMCkKLQkJCXJldHVy
bjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJVHlwZUJpbmRpbmcgW10g
ZmluYWxBcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCVR5cGVCaW5kaW5nIGZpbmFsQXJndW1lbnRU
eXBlID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwogCQkJaWYgKGZpbmFsQXJndW1l
bnRUeXBlID09IG51bGwgfHwgIWZpbmFsQXJndW1lbnRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpICAv
LyBhbHJlYWR5IHNpZGVkIHdpdGggdGhlIGRldmlsLgotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4g
dGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlmaW5hbEFyZ3VtZW50VHlwZXNbaV0gPSBmaW5h
bEFyZ3VtZW50VHlwZTsgCiAJCX0KLQkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UsIGZhbHNlKSA9PSBT
Y29wZS5OT1RfQ09NUEFUSUJMRSkKKwkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UpID09IFNjb3BlLk5P
VF9DT01QQVRJQkxFKQogCQkJdGhpcy5iaW5kaW5nID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5n
KHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLCB0aGlzLmJpbmRpbmcuc2VsZWN0b3IsIGZpbmFsQXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCX0KLX0KLQotQE92ZXJyaWRl
Ci1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQlJbmZlcmVuY2VDb250
ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcpIHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRl
ZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQl0aGlzLmV4cGVjdGVk
VHlwZSA9IHRhcmdldFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4
LmluZmVySW52b2NhdGlvblR5cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGlu
ZywgdGFyZ2V0VHlwZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3Vt
ZW50cyh0aGlzLCB1cGRhdGVkQmluZGluZywgc2NvcGUpOwotCQkJfQotCQl9Ci0JfQotCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiB9
CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2VpdmVyVHlwZShSZWZlcmVuY2VCaW5kaW5nIHJl
Y2VpdmVyVHlwZSkgewpAQCAtOTY1LDYgKzk1NywzOSBAQAogCSAqLwogCXJldHVybiBpc1BvbHlF
eHByZXNzaW9uKHRoaXMuYmluZGluZyk7CiB9CisKK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29t
cGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlUeXBl
QmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwl0cnkgeworCQl0
aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7CisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0g
dGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8gCisJCQkJICBzY29wZS5nZXRJbXBsaWNp
dE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpIAorCQkJCTog
c2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0
aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQlpZiAobWV0aG9kID09IG51bGwgfHwgIW1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5UeXBlID09IG51bGwgfHwgIW1ldGhv
ZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4gZmFsc2U7CisJCXJldHVy
biBzdXBlci5pc0JveGluZ0NvbXBhdGlibGUobWV0aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29w
ZSwgdGhpcy5zb3VyY2VFbmQpLCB0YXJnZXRUeXBlLCB0aGlzLCBzY29wZSk7CisJfSBmaW5hbGx5
IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvbGRFeHBlY3RlZFR5cGU7CisJfQorfQorCitwdWJs
aWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFs
IFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBl
Y3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOworCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZCA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAor
CQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkKKwkJaWYg
KG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0
dXJuVHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQor
CQkJcmV0dXJuIGZhbHNlOworCQkJCisJCXJldHVybiBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJl
KHNjb3BlLCB0aGlzLnNvdXJjZUVuZCkuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29w
ZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvbGRFeHBlY3RlZFR5cGU7
CisJfQorfQorCiAvKiogVmFyaWFudCBvZiBpc1BvbHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBk
dXJpbmcgdHlwZSBpbmZlcmVuY2UsIHdoZW4gYSByZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMu
ICovCiBwdWJsaWMgYm9vbGVhbiBpc1BvbHlFeHByZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1
dGlvbkNhbmRpZGF0ZSkgewogCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1F
TlRfQ09OVEVYVCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVY
VCkKQEAgLTEwMjgsMjEgKzEwNTMsMjAgQEAKIAlyZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxp
Y2l0VGhpcygpOwogfQogLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0
aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0
RXJyb3JzLCBTY29wZSBzY29wZSkgewotCWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJaWYgKHRoaXMu
YmluZGluZyA9PSBudWxsKQotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVy
ZW5jZUVycm9yKCJtZXRob2QgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8k
Tk9OLU5MUy0xJAotCQllbHNlIGlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0J
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGlu
Zyk7CitwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBl
Y3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOworCQlN
ZXRob2RCaW5kaW5nIG1iID0gCisJCQkJdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8g
CisJCQkJICBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHRoaXMpIAorCQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCQlyZXR1
cm4gbWI7CQkgIAorCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb2xkRXhwZWN0
ZWRUeXBlOwogCX0KLQlyZXR1cm4gdGhpcy5iaW5kaW5nOwogfQotcHVibGljIEV4cHJlc3Npb25b
XSBhcmd1bWVudHMoKSB7Ci0JcmV0dXJuIHRoaXMuYXJndW1lbnRzOwotfQotcHVibGljIEV4cHJl
c3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewotCXJldHVybiB0aGlzLmV4cHJl
c3Npb25Db250ZXh0OwotfQorCiBwdWJsaWMgdm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRleHQo
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4
dDE4IGluZkN0eDE4KSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJ
dGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwpAQCAtMTA1
MywzNSArMTA3NywxNCBAQAogCQlyZXR1cm4gbnVsbDsKIAlyZXR1cm4gKEluZmVyZW5jZUNvbnRl
eHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKIH0KLXB1YmxpYyBib29s
ZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJJiYgZ2V0SW5mZXJlbmNlQ29u
dGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9
IG51bGw7CitwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKKwlyZXR1cm4gdGhpcy5h
cmd1bWVudHM7CiB9Ci1wdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNV
cGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJpbmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJl
bmNlQ29udGV4dHMgIT0gbnVsbCkgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVy
ZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRp
bmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4
dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29t
ZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMg
ZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVy
U29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQl9Ci0JfQotCXRoaXMuYmlu
ZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRp
bmcucmV0dXJuVHlwZTsKLQlyZXR1cm4gaGFzVXBkYXRlOwotfQotcHVibGljIGJvb2xlYW4gaW5u
ZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBu
dWxsOwotfQotcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVy
SW5mZXJlbmNlSGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwor
cHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgeworCXJldHVy
biB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwogfQogLy8gLS0gSW50ZXJmYWNlIEludm9jYXRpb25T
aXRlOiAtLQogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQo
U2NvcGUgc2NvcGUpIHsKIAlyZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29wZSwgdGhp
cy5hcmd1bWVudHMsIHRoaXMpOwogfQotfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAx
ZDczODZhLi5mOTZlN2ExIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhw
cmVzc2lvbi5qYXZhCkBAIC00MTAsMTAgKzQxMCw2IEBACiAJCQkJaWYgKCh0aGlzLmFyZ3VtZW50
VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewogCQkJCQlo
YXNFcnJvciA9IHRydWU7CiAJCQkJfQotCQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJ
bmZlcmVuY2UoKSkpKSB7Ci0JCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51
bGwpCi0JCQkJCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNl
SGVscGVyKCk7Ci0JCQkJfQogCQkJfQogCQl9CiAKQEAgLTYwNCw0ICs2MDAsNCBAQAogCQl9CiAJ
CXZpc2l0b3IuZW5kVmlzaXQodGhpcywgc2NvcGUpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0
IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKaW5kZXggYTEzMmM5Mi4uNDBlNTNkZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91
bmRTZXQuamF2YQpAQCAtNDU2LDggKzQ1Niw2IEBACiAJCQlpZiAoIWluY29ycG9yYXRlKGNvbnRl
eHQsIGZyZXNoQm91bmRzLCBmcmVzaEJvdW5kcykpCiAJCQkJcmV0dXJuIGZhbHNlOwogCi0JCQl0
aGlzLmNhcHR1cmVzLmNsZWFyKCk7Ci0JCQkKIAkJCS8vIE1lcmdlIHRoZSBib3VuZHMgaW50byBv
bmUgaW5jb3Jwb3JhdGVkIGdlbmVyYXRpb24uCiAJCQlmaW5hbCBpbnQgaW5jb3Jwb3JhdGVkTGVu
Z3RoID0gdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoOwogCQkJZmluYWwgaW50IHVuaW5j
b3Jwb3JhdGVkTGVuZ3RoID0gZnJlc2hCb3VuZHMubGVuZ3RoOwpAQCAtNTgzLDcgKzU4MSw5IEBA
CiAJCXdoaWxlIChjYXB0SXRlci5oYXNOZXh0KCkpIHsKIAkJCUVudHJ5PFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZywgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nPiBjYXB0ID0gY2FwdEl0ZXIubmV4
dCgpOwogCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBbHBoYSA9IGNhcHQuZ2V0S2V5KCk7
Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSBjYXB0LmdldFZhbHVlKCk7CisJCQkv
LyBXZSBjb21lIGluIHdpdGggY2FwdHVyZShnQSksIHdlIG5lZWQgdG8gd29yayB3aXRoIGdBIGJl
bG93LiBJdCB3YXMgbmVjZXNzYXJ5IHRvIGVzdGFibGlzaCBjYXB0dXJlIGF0IHRoZSBjYWxsIHNp
dGUuCisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgY2dBID0gY2FwdC5nZXRWYWx1ZSgpOwor
CQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZykgY2dBLnVuY2FwdHVyZShjb250ZXh0LnNjb3BlKTsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZyA9
IChSZWZlcmVuY2VCaW5kaW5nKSBnQS5vcmlnaW5hbCgpOwogCQkJZmluYWwgVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHBhcmFtZXRlcnMgPSBnLnR5cGVWYXJpYWJsZXMoKTsKIAkJCS8vIGNvbnN0cnVj
dCB0aGV0YSA9IFtQMTo9YWxwaGExLC4uLl0KQEAgLTYwMiw2ICs2MDIsNyBAQAogCQkJCWFkZEJv
dW5kcyhwaS5nZXRUeXBlQm91bmRzKGFscGhhLCB0aGV0YSksIGNvbnRleHQuZW52aXJvbm1lbnQp
OwogCiAJCQkJVHlwZUJpbmRpbmcgYWkgPSBnQS5hcmd1bWVudHNbaV07CisJCQkJVHlwZUJpbmRp
bmcgY2FpID0gY2dBLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2Fy
ZEJpbmRpbmcpIHsKIAkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkQmluZGluZyA9IChXaWxk
Y2FyZEJpbmRpbmcpYWk7CiAJCQkJCVR5cGVCaW5kaW5nIHQgPSB3aWxkY2FyZEJpbmRpbmcuYm91
bmQ7CkBAIC02MTMsNyArNjE0LDE0IEBACiAJCQkJCQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0
ZXJhdG9yKCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhhc05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91
bmQgYm91bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNl
b2YgSW5mZXJlbmNlVmFyaWFibGUpKQorCQkJCQkJCQkvKiBXaXRoIHRoZSBleHBlY3RlZCB0eXBl
J3MgZGVjbGFyZWQgdHlwZSBiZWluZyBDb2xsZWN0b3I8PyBzdXBlciBULCBBLCBSPiBhbmQgZ0Fs
cGhhIGJlaW5nIENvbGxlY3RvcjxUIzAsPyMxLExpc3Q8VCMwPiMyPiBhbmQgY2dBIGJlaW5nCisJ
CQkJCQkJCSAgIENvbGxlY3RvcjxUIzAsY2FwdHVyZSMxLW9mID8sTGlzdDxUIzA+Piwgd2l0aG91
dCB0aGUgY29uc3RyYWludCByZWR1Y3Rpb24gYmVsb3cgLSB3ZSB3aWxsIG5ldmVyIGRpc2NvdmVy
IEEgdG8gYmUgY2FwdHVyZSMxLW9mID8gYW5kCisJCQkJCQkJCSAgIGNsYWltIEEgaXMgamxPLiBT
ZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNj
MjQgLSAjMjcKKwkJCQkJCQkJKi8KKwkJCQkJCQkJaWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNv
bnRleHQsIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoYm91bmQucmlnaHQsIGNhaSwgUmVk
dWN0aW9uUmVzdWx0LlNBTUUpKSkKKwkJCQkJCQkJCXJldHVybiBmYWxzZTsKKwkJCQkJCQkJLy8g
T3VyID0gcmVkdWN0aW9uIHRyYW5zaXRpdmVseSBhZGRzIGEgbmV3IGJvdW5kIHRoYXQgbmVjZXNz
aXRhdGVzIHRoZSBjaGVjayBiZWxvdyBmb3IgY2FwdHVyZS4gCisJCQkJCQkJCWlmICghKGJvdW5k
LnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpICYmICFib3VuZC5yaWdodC5pc0Nh
cHR1cmUoKSkKIAkJCQkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJCQl9CiAJCQkJCQl9CkBAIC02
NjgsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9CiAJCX0KKwkJdGhpcy5jYXB0dXJlcy5jbGVhcigp
OwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3Ry
YWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0NjYuLmYyNjI2NTMgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtMTgsMTIgKzE4LDEw
IEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxF
eHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
SW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5SZWZlcmVuY2VFeHByZXNzaW9uOwpAQCAtNTYsNDEgKzU0LDggQEAKIAogCXB1Ymxp
YyBPYmplY3QgcmVkdWNlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KSB0aHJv
d3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCS8vIEpMUyAxOC4yLjEKLQkJcHJvcGVy
OgogCQlpZiAodGhpcy5yaWdodC5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCVR5cGVCaW5kaW5n
IGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKLQkJCWlmIChleHByVHlwZSA9PSBu
dWxsKSB7Ci0JCQkJLy8gaWYgd2UgZ2V0IGhlcmUgZm9yIHNvbWUga2luZHMgb2YgcG9seSBleHBy
ZXNzaW9ucyAoaW5jbC4gQ29uZGl0aW9uYWxFeHByZXNzaW9uKSwKLQkJCQkvLyB0aGVuIG90aGVy
IHdheXMgZm9yIGNoZWNraW5nIGNvbXBhdGliaWxpdHkgYXJlIG5lZWRlZDoKLSAgICAgICAgICAg
ICAgICBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKLSAg
ICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Np
b24pIHsKLSAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNmLiBOZWdhdGl2ZUxhbWJkYUV4cHJl
c3Npb25UZXN0LnRlc3Q0MTI0NTMoKQotICAgICAgICAgICAgICAgICAgICAgICAgTGFtYmRhRXhw
cmVzc2lvbiBjb3B5ID0gKChMYW1iZGFFeHByZXNzaW9uKSB0aGlzLmxlZnQpLmdldFJlc29sdmVk
Q29weUZvckluZmVyZW5jZVRhcmdldGluZyh0aGlzLnJpZ2h0KTsKLSAgICAgICAgICAgICAgICAg
ICAgICAgIHJldHVybiAoY29weSAhPSBudWxsICYmIGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwg
JiYgY29weS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7Ci0g
ICAgICAgICAgICAgICAgICAgIH0KLSAgICAgICAgICAgICAgICB9Ci0gICAgICAgICAgICAgICAg
cmV0dXJuIHRoaXMubGVmdC5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNv
bnRleHQuc2NvcGUpID8gVFJVRSA6IEZBTFNFOwotCQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkgewotCQkJCXJldHVybiBGQUxTRTsKLQkJCX0KLQkJCWlmIChpc0NvbXBh
dGlibGVXaXRoSW5Mb29zZUludm9jYXRpb25Db250ZXh0KGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBp
bmZlcmVuY2VDb250ZXh0KSkgewotCQkJCXJldHVybiBUUlVFOwotCQkJfSBlbHNlIGlmICh0aGlz
LmxlZnQgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbiAmJiB0aGlzLmxlZnQuaXNQb2x5
RXhwcmVzc2lvbigpKSB7Ci0JCQkJLy8gaGFsZi1yZXNvbHZlZCBkaWFtb25kIGhhcyBhIHJlc29s
dmVkVHlwZSwgYnV0IHRoYXQgbWF5IG5vdCBiZSB0aGUgZmluYWwgd29yZCwgdHJ5IG9uZSBtb3Jl
IHN0ZXAgb2YgcmVzb2x1dGlvbjoKLSAgICAgICAgICAgIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcg
PSAoKEFsbG9jYXRpb25FeHByZXNzaW9uKSB0aGlzLmxlZnQpLmJpbmRpbmcodGhpcy5yaWdodCwg
ZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCXJldHVybiAoYmluZGluZyAhPSBudWxsICYmIGJp
bmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICB9IGVsc2UgaWYg
KHRoaXMubGVmdCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJl
c3Npb24oKSkgewotICAgICAgICAgICAgCUludm9jYXRpb24gaW52b2MgPSAoSW52b2NhdGlvbikg
dGhpcy5sZWZ0OwotICAgICAgICAgICAgCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jLmJp
bmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCWlmIChiaW5kaW5n
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0gICAgICAg
ICAgICAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QgPSAoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250
ZXh0MTggbGVmdEN0eCA9IGludm9jLmdldEluZmVyZW5jZUNvbnRleHQobWV0aG9kKTsKLSAgICAg
ICAgICAgIAkJaWYgKGxlZnRDdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5U
WVBFX0lORkVSUkVEKSB7Ci0gICAgICAgICAgICAJCQlicmVhayBwcm9wZXI7IC8vIGZhbGwgdGhy
b3VnaCBpbnRvIG5lc3RlZCBpbmZlcmVuY2UgYmVsb3cgKG5vdCBleHBsaWNpdCBpbiB0aGUgc3Bl
YyEpCi0gICAgICAgICAgICAJCX0KLSAgICAgICAgICAgIAl9Ci0gICAgICAgICAgICB9Ci0JCQly
ZXR1cm4gRkFMU0U7CisJCQlyZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5y
aWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgfHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0
aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFM
U0U7CiAJCX0KIAkJaWYgKCFjYW5CZVBvbHlFeHByZXNzaW9uKHRoaXMubGVmdCkpIHsKIAkJCVR5
cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKQEAgLTEwMiw3ICs2
Nyw3IEBACiAJCQkvLyAtIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbiA6IHRoZXNlIGFyZSB0cmFu
c3BhcmVudCBpbiBvdXIgQVNUCiAJCQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlv
bikgewogCQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7
Ci0JCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0
aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7CisJCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhv
ZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3Bl
KTsKIAkJCQlpZiAocHJldmlvdXNNZXRob2QgPT0gbnVsbCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcu
LCBpZiBpbnNpZGUgYSBjb3BpZWQgbGFtYmRhIHdpdGggaWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0
dXJuIG51bGw7IAkJCQkvLyAtPiBwcm9jZWVkIHdpdGggbm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJ
TWV0aG9kQmluZGluZyBtZXRob2QgPSBwcmV2aW91c01ldGhvZDsKQEAgLTEyOCw3ICs5Myw2IEBA
CiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZXhwclR5cGUsIHRo
aXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQkJCX0KIAkJCQkJCWluZmVy
ZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJ
CQlpbm5lckN0eC5vdXRlckNvbnRleHQgPSBpbmZlcmVuY2VDb250ZXh0OwogCQkJCQl9CiAJCQkJ
CWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiB0aGlzLmxlZnQu
aXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmls
aXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwgYXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBp
bmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQpOwpAQCAtMjU0LDExICsyMTgsOSBAQAogCQlN
ZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0gbnVsbCkK
IAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBtZXRob2QgZm9y
IHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAotCQlNZXRo
b2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRp
bWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7Ci0JCWlmIChwb3Rl
bnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJldHVybiBGQUxTRTsKKwogCQlpZiAocmVm
ZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgeworCQkJTWV0aG9kQmluZGluZyBwb3Rl
bnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0
PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3Ry
YWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUucGFyYW1l
dGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yNjgsNiArMjMwLDggQEAKIAkJCWlmIChu
ID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEu
Y3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJ
CQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAhPSBrKSB7CisJCQkJcmV0dXJuIEZBTFNF
OwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25z
dHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1v
ZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYsMTEgKzI0MCwxNSBAQAogCQkJCVR5cGVCaW5k
aW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmlzQ29uc3RydWN0b3IoKSAmJiAhcmVm
ZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5jZSgpID8gcG90ZW50aWFsbHlBcHBsaWNh
YmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlBcHBsaWNhYmxlLnJldHVyblR5cGU7CiAJ
CQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJCXJldHVybiBGQUxTRTsKLQkJ
CQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlvbj8/CisJCQkJVHlwZUJpbmRpbmcgclBy
aW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291
cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNy
ZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJCX0KIAkJCXJldHVybiBuZXdDb25zdHJh
aW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5zaXplKCld
KTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFw
cGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGlu
ZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhv
ZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJ
CQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCisJCQkJcmV0dXJuIEZBTFNFOwor
CQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJCWZvciAo
aW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnNb
aV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzIxLDcgKzI4OSw3IEBACiAJCQkJCWluZmVyZW5j
ZUNvbnRleHQucmVzdW1lU3VzcGVuZGVkSW5mZXJlbmNlKHByZXZJbnZvY2F0aW9uKTsKIAkJCQl9
CiAJCQl9Ci0JCQlUeXBlQmluZGluZyByUHJpbWUgPSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1
Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xhcmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNs
LnJldHVyblR5cGU7CisJCQlUeXBlQmluZGluZyByUHJpbWUgPSBjb21waWxlVGltZURlY2wuaXND
b25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xhcmluZ0NsYXNzIDogY29tcGlsZVRp
bWVEZWNsLnJldHVyblR5cGUuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVu
Y2Uuc291cmNlRW5kKCkpOwogCQkJaWYgKHJQcmltZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCkKIAkJ
CQlyZXR1cm4gRkFMU0U7CiAJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShy
UHJpbWUsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKQEAgLTM2NCw2ICszMzIsNyBAQAog
CQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxsKSB7CiAJCQkvLyBpbnZvY2F0aW9uIHR5cGUgaW5m
ZXJlbmNlICgxOC41LjIpOgogCQkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZSA9IG1ldGhvZC5pc0Nv
bnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFyaW5nQ2xhc3MgOiBtZXRob2QucmV0dXJuVHlwZTsK
KwkJCQogCQkJaWYgKHJldHVyblR5cGUgPT0gVHlwZUJpbmRpbmcuVk9JRCkKIAkJCQl0aHJvdyBu
ZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbigiZXhwcmVzc2lvbiBoYXMgbm8gdmFsdWUiKTsg
Ly8kTk9OLU5MUy0xJAogCkBAIC0zODQsNyArMzUzLDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJs
ZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25z
KGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJl
bmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBh
cmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5l
bmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsK
LQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBw
YXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVs
bCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMu
cHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5
cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKIAkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3
Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5
cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZElu
Y29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJfQpAQCAtNDA0LDcgKzM3Myw3IEBACiAJCQkJ
CUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNl
VmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJl
dHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRp
b24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlv
blNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJ
CVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9uKGFscGhhLCBudWxsKS5j
YXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgp
KTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50
VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCQlyZXR1
cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsK
IAkJCQl9CkBAIC00ODQsNCArNDUzLDQgQEAKIAkJYnVmLmFwcGVuZChSSUdIVF9BTkdMRV9CUkFD
S0VUKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0
IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9y
bXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQppbmRl
eCBjYTNjYzBmLi4yNWRjYTk0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRU
eXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxh
LmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1w
b3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8qKgpAQCAtMzExLDYgKzMxMiwxMyBAQAogCQkJCQly
ZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50
ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0
dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGluZy5QT0xZX1RZUEU6CisJCQkJUG9seVR5cGVCaW5k
aW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5nKSBzdXBlckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0
aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgcG9seS5leHByZXNzaW9uOworCQkJCU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRpb24uYmluZGluZyhzdWJDYW5kaWRhdGUsIHNjb3Bl
KTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxsIHx8ICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkp
CisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQlyZXR1cm4gcmVkdWNlU3ViVHlwZShzY29wZSwgc3Vi
Q2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgaW52b2NhdGlvbi5z
b3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVu
ZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRhdGUpOyAvLyROT04tTkxTLTEkCiAJfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggNjFmYmNjMC4uODMwNDc0MiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9y
dCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
Q2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5j
ZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRp
bC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEsOSBAQAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNp
ZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0PgogICogPGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVk
PC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gt
bGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRlZCBpbgotICogIHtAbGluayBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGlu
ZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAx
OC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVsIGNvbnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAq
ICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9u
U2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBMaWZlY3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRp
b24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBjYXVzZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVs
PgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0cyBvZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50
ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29sdXRpb24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9k
QmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJ
CVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2Nv
bDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1lZGlhdGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBp
bmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0d2VlbiBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlz
IHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAotICogICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7
QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52b2NhdGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRl
eHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgp
IEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KCl9IGFuZAotICogICAge0BsaW5r
IEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGlu
ZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48YnIvPgotICogICAgQXMgcGFydCBvZiB0aGUgbGlm
ZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNlIG9mIEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJl
cnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZlcmVuY2VLaW5kfQotICogICAgYW5kIHtAbGluayAj
c3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxsaT48Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmlu
ZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJndW1lbnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRz
ZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhlIGFyZ3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0g
KiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIg
aW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNlIG11c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5
cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0aGUgaW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5n
LiBUd28gZGlmZmVyZW50IHByb3RvY29scyBhcmUgYXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAg
IDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHByZXNzaW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVy
IGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNvcnBvcmF0ZWQgaW50bwotICogICAgICB0aGUge0Bs
aW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJsb2NrIGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4
cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZlcmVuY2VDb250ZXh0MTgpfS48YnIvPgotICogICAg
ICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMgb2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVk
IHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAg
ICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBU
eXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3QgYmUgY2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4
LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAgPGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Np
b24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Npb24gb3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9u
IG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAqICAgICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBp
bm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0
aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0BsaW5rIEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBTY29wZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQg
ZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJp
bmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+Rm9yIHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0
IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFuIGludm9jYXRpb24KLSAqICAgIAltZXRob2Qge0Bs
aW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1l
dGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNo
IGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9uczogKDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBp
bnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5kI2ZpbmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAg
ICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91
dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwg
VHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9j
YXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBvbHkgaW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNv
bHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJsb2FkIHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3
ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhl
IG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBpbnZvbHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0g
KiAgICA8L3VsPgotICogICAgUHVzaGluZyBpbmZlcmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVy
IGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7QGxpbmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5n
cyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nKX0uPC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0
aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlzIGEgPGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9j
YXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRlbXB0aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBp
biBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9LiBPbmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIg
YXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0BsaW5rICNDSEVDS19WQVJBUkd9LgogICogCQlXaGlj
aCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2FzIHN1Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGlu
ayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjUsOSArMTI5LDYgQEAKIAkvKiogVGhlIGFjY3VtdWxh
dGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3VuZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoq
IHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBm
YWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNl
dCBzdG9yZWRTb2x1dGlvbjsKLQogCS8qKiBGb3IgZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUg
aW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3JlIHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9u
IHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxUeXBlQmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25z
UGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKIApA
QCAtMTg2LDE0ICsxNDcsNiBAQAogCQogCS8qKiBTaWduYWxzIHdoZXRoZXIgYW55IHR5cGUgY29t
cGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVja2VkIGNvbnZlcnNpb24uICovCiAJcHVibGlj
IExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNvbnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZlcnNp
b247Ci0KLQkvLyAtLS0KLQotCS8qKiBJbm5lciBwb2x5IGludm9jYXRpb25zIHdoaWNoIGhhdmUg
YmVlbiBpbmNsdWRlZCBpbiB0aGlzIGluZmVyZW5jZS4gKi8KLQlMaXN0PEludm9jYXRpb25TaXRl
PiBpbm5lclBvbGllcyA9IG5ldyBBcnJheUxpc3Q8SW52b2NhdGlvblNpdGU+KCk7Ci0JLyoqIExp
bmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNlIGNvbnRleHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3Ig
cmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0Owot
CXByaXZhdGUgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+IHByb2JsZW1NZXRob2RzOwogCiAJU2Nv
cGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7CkBAIC0zNzIsNyArMzI1
LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4LjUuMiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIAot
CSAqIDxwPkNhbGxlcnMgYXJlIHJlc3BvbnNpYmxlIGZvciBhbnkgcG9zdC1wcm9jZXNzaW5nIChz
ZWUge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9KS48
L3A+CiAJICogQHBhcmFtIGIxICJ0aGUgYm91bmQgc2V0IHByb2R1Y2VkIGJ5IHJlZHVjdGlvbiBp
biBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0IG0gaXMgYXBwbGljYWJsZSBpbiAxOC41LjEiCiAJ
ICovCiAJcHVibGljIEJvdW5kU2V0IGluZmVySW52b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5
cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1l
dGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAtMzk4LDkgKzM1MCw5IEBACiAJCQl9CiAJCQkvLyA0LiBi
dWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFz
aFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKLQkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhp
cy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCisJ
CQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DKHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0
aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQsIGZhbHNlIC8qIGluZmVyZW5jZSBjb250ZXh0IGFscmVh
ZHkgaGF2ZSB0aGUgaW5mZXJlbmNlIHZhcmlhYmxlcyBmb3IgbWV0aG9kICovKSkKIAkJCQlyZXR1
cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDogZGV0ZXJtaW5lIEIzIGZyb20gQworCQkJLy8gNS4g
YnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBDCiAJCQl3aGlsZSAoIWMuaXNFbXB0eSgpKSB7CiAJ
CQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50Rm9ybXVsYT4gYm90dG9tU2V0ID0gZmluZEJvdHRv
bVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMoYykpOwpAQCAtNDUwLDcgKzQwMiwxMCBAQAogCQl9
CiAJfQogCi0JcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DKEV4cHJlc3Npb25bXSBl
eHBycywgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgaW50
IGluZmVyZW5jZUtpbmRGb3JNZXRob2QpIHsKKwlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWlu
dHNUb0MoRXhwcmVzc2lvbltdIGV4cHJzLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJlbmNlS2luZEZvck1ldGhvZCwgYm9vbGVhbiBsaWZ0
SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCWlmIChsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJ
CQljcmVhdGVJbml0aWFsQm91bmRTZXQobWV0aG9kLnR5cGVWYXJpYWJsZXMoKSk7CisJCX0KIAkJ
VHlwZUJpbmRpbmdbXSBmczsKIAkJaWYgKGV4cHJzICE9IG51bGwpIHsKIAkJCWludCBrID0gZXhw
cnMubGVuZ3RoOwpAQCAtNDcxLDE0ICs0MjYsMTQgQEAKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwg
azsgaSsrKSB7CiAJCQkJVHlwZUJpbmRpbmcgZnNpID0gZnNbTWF0aC5taW4oaSwgcC0xKV07CiAJ
CQkJVHlwZUJpbmRpbmcgc3Vic3RGID0gc3Vic3RpdHV0ZShmc2kpOwotCQkJCWlmICghYWRkQ29u
c3RyYWludHNUb0NfT25lRXhwcihleHByc1tpXSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCkpCisJ
CQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0
RiwgbWV0aG9kLCBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwog
CSAgICAgICAgfQogCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBh
ZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50
Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJp
bmRpbmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4
cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGlu
ZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4g
bGlmdEluZmVyZW5jZVZhcmlhYmxlcykgewogCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGsp
LCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFp
bnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlpZiAoIWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNh
YmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1F
TlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsKQEAgLTQ4NywxMDMgKzQ0MiwyMyBAQAogCQkJYy5h
ZGQobmV3IENvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikg
ZXhwcmksIHN1YnN0RikpOwogCQl9IGVsc2UgaWYgKGV4cHJpIGluc3RhbmNlb2YgSW52b2NhdGlv
biAmJiBleHByaS5pc1BvbHlFeHByZXNzaW9uKCkpIHsKIAkJCUludm9jYXRpb24gaW52b2NhdGlv
biA9IChJbnZvY2F0aW9uKSBleHByaTsKLQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBp
bnZvY2F0aW9uLmJpbmRpbmcobnVsbCwgZmFsc2UsIG51bGwpOworCQkJTWV0aG9kQmluZGluZyBp
bm5lck1ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyhzdWJzdEYsIHRoaXMuc2NvcGUpOwogCQkJ
aWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7CiAJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJ
bmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgaW5uZXJNZXRob2Qp
OwogCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7IC8vIG90aGVyd2lzZSBpbm5lck1ldGhvZCBk
b2VzIG5vdCBwYXJ0aWNpcGF0ZSBpbiBpbmZlcmVuY2UKLQkJCQkJcmV0dXJuIGFkZENvbnN0cmFp
bnRzVG9DKGludm9jYXRpb24uYXJndW1lbnRzKCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNNZXRo
b2QoKSwgaW5uZXJDdHguaW5mZXJlbmNlS2luZCk7CisJCQkJCS8vIFBlciBodHRwczovL2J1Z3Mu
b3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIzMjUsIHdlIHNob3VsZCBub3QgYmUgYWRk
aW5nIGNvbnN0cmFpbnRzIHRvIEMgaWYgdGFyZ2V0IGlzIGEgcHJvcGVyIHR5cGUuCisJCQkJCS8v
IEkgc2F3IHRoaXMgdG9vIGxhdGUgYW5kIHRvIGF2b2lkIHRoZSAib3V0IG9mIHNjb3BlIiBpbmZl
cmVuY2UgdmFyaWFibGVzIHByb2JsZW0sIEkgYW0gbGlmdGluZyB0aGUgaW5mZXJlbmNlIHZhcmlh
YmxlcyBpbnRvCisJCQkJCS8vIElDLiBGb3IgcG9seSBleHByZXNzaW9ucyB0YXJnZXR0aW5nIGlt
cHJvcGVyIHR5cGVzLCBuZXN0ZWQgaW5mZXJlbmNlIHdvdWxkIGhhdmUgYXJyYW5nZWQgdG8gbGlm
dCBjb25zdHJhaW50cyBhbmQgaW5mZXJlbmNlCisJCQkJCS8vIHZhcmlhYmxlcyBhbmQgYm91bmRz
LiBUT0RPOiBmb2xsb3cgdXAgb24gdGhpcy4gVGhlIHByZXNlbnQgY29kZSBpcyBzdGlsbCBjb3Jy
ZWN0LgorCQkJCQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMo
KSwgYywgaW5uZXJNZXRob2QuZ2VuZXJpY01ldGhvZCgpLCBpbm5lckN0eC5pbmZlcmVuY2VLaW5k
LCBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzIHwgc3Vic3RGLmlzUHJvcGVyVHlwZSh0cnVlKSk7CiAJ
CQkJfQogCQkJfQogCQl9IGVsc2UgaWYgKGV4cHJpIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKSB7CiAJCQlDb25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKSBleHByaTsKLQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZh
bHVlSWZUcnVlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50
c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZGYWxzZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJ
CQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNp
LCBzdWJzdEYsIG1ldGhvZCwgbGlmdEluZmVyZW5jZVZhcmlhYmxlcykKKwkJCQkgJiYgYWRkQ29u
c3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmRmFsc2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRo
b2QsIGxpZnRJbmZlcmVuY2VWYXJpYWJsZXMpOwogCQl9CiAJCXJldHVybiB0cnVlOwotCX0KLQot
CS8qKgotCSAqIFNpbXBsaWZpZWQgQVBJIHRvIHBlcmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVy
ZW5jZSAoSkxTIDE4LjUuMikKLQkgKiBhbmQgcGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3Vu
ZCBjaGVjaywgcmViaW5kaW5nIG9mIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNy
ZWF0aW5nIG9mIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxk
IG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpbmZlcmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0J
ICogQHBhcmFtIGludm9jYXRpb24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJh
bSBhcmd1bWVudFR5cGVzIGFyZ3VtZW50cyBiZWluZyBwYXNzZWQgaW50byB0aGUgaW52b2NhdGlv
bgotCSAqIEBwYXJhbSBtZXRob2QgY3VycmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9y
IHRoaXMgaW52b2NhdGlvbgotCSAqIEByZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRo
IHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJzLAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRp
bmcgc2lnbmFsaW5nIGVpdGhlciBpbmZlcmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNo
LgotCSAqLwotCS8qQE5vbk51bGwqLyBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUo
SW52b2NhdGlvbiBpbnZvY2F0aW9uLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBvcHRpbWl6
ZTogaWYgb3V0ZXJDb250ZXh0IGV4aXN0cyBhbmQgaXMgcmVzb2x2ZWQsIHdlIHByb2JhYmx5IGRv
bid0IG5lZWQgdG8gaW5mZXIgYWdhaW4uCi0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBpbnZv
Y2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBmaW5hbE1ldGhvZCA9IG51bGw7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBtZXRob2RUb0NoZWNrID0gbWV0aG9kOwotCQkKLQkJYm9vbGVhbiBoYXZlUHJv
cGVyVGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBlLmlzUHJvcGVy
VHlwZSh0cnVlKTsKLQkJaWYgKGhhdmVQcm9wZXJUYXJnZXRUeXBlIHx8ICFpbnZvY2F0aW9uLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJTWV0aG9kQmlu
ZGluZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmlnaW5hbE1ldGhvZDsKLQkJCVNvbHV0aW9uIHNvbHV0
aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCUJv
dW5kU2V0IHJlc3VsdCA9IHNvbHV0aW9uICE9IG51bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxs
OwotCQkJaWYgKHJlc3VsdCA9PSBudWxsKSB7Ci0JCQkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJl
dmlvdXMgY2FuZGlkYXRlIGJ1dCBkaXNjYXJkIGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRp
b25zCi0JCQkJLy8gVE9ETzogc2hvdWxkIHdlIHJldGFpbiBhbnkgaW5zdGFudGlhdGlvbnMgb2Yg
dHlwZSB2YXJpYWJsZXMgbm90IG93bmVkIGJ5IHRoZSBtZXRob2Q/IAotCQkJCXRyeSB7Ci0JCQkJ
CXJlc3VsdCA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRU
eXBlLCBpbnZvY2F0aW9uLCBvcmlnaW5hbCk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVy
ZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIG5vIHNvbHV0aW9uLCBidXQgZG8gbW9yZSBjaGVja3Mg
YmVsb3cKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKLQkJCQlUeXBlQmlu
ZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCks
IGludm9jYXRpb24sIHJlc3VsdCk7Ci0JCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJ
CWZpbmFsTWV0aG9kID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25zKTsKLQkJCQkJaWYgKHRoaXMuc2NvcGUuY29tcGls
ZXJPcHRpb25zKCkuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJ
TnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMoZmluYWxNZXRob2Qs
IGludm9jYXRpb24sIHRoaXMuc2NvcGUpOwotCQkJCQlpbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJl
bmNlQ29udGV4dChmaW5hbE1ldGhvZCwgdGhpcyk7Ci0JCQkJCXRoaXMuc29sdXRpb25zUGVyVGFy
Z2V0VHlwZS5wdXQodGFyZ2V0VHlwZSwgbmV3IFNvbHV0aW9uKGZpbmFsTWV0aG9kLCByZXN1bHQp
KTsKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkKLQkJCQltZXRob2RU
b0NoZWNrID0gZmluYWxNZXRob2Q7Ci0JCX0gZWxzZSB7Ci0JCQlmaW5hbE1ldGhvZCA9IG1ldGhv
ZDsKLQkJfQotCQkKLQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kVG9DaGVj
ay5ib3VuZENoZWNrMTgodGhpcy5zY29wZSwgYXJndW1lbnRUeXBlcyk7Ci0JCWlmIChwcm9ibGVt
TWV0aG9kICE9IG51bGwpCi0JCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQotCQlpZiAoIWhhdmVQ
cm9wZXJUYXJnZXRUeXBlICYmIGludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZp
bmVzVGFyZ2V0VHlwZSgpKQotCQkJcmV0dXJuIG1ldGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQot
Ci0JCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKSB7Ci0JCQlpZiAocmViaW5kSW5uZXJQb2xpZXMo
ZmluYWxNZXRob2QsIGludm9jYXRpb24pKQotCQkJCXJldHVybiBmaW5hbE1ldGhvZDsKLQkJfQot
CQlyZXR1cm4gZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdldFR5cGUsIG1ldGhv
ZCk7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxpZmllZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0aW9u
IFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4yKQotCSAqIGFuZCBwZXJmb3JtIHN1YnNlcXVlbnQg
c3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRpbmcgb2YgaW5uZXIgcG9seSBleHByZXNzaW9ucywK
LQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIGlmIG5lZWRlZC4K
LQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIGluZmVyZW5jZSBoYXMgbm90IHlldCBm
aW5pc2hlZC4KLQkgKiBWZXJzaW9uIHVzZWQgZm9yIGlubmVyIGludm9jYXRpb25zLCB3aGVyZSBh
cmd1bWVudCB0eXBlcyBuZWVkIHRvIGJlIGV4dHJhY3RlZAotCSAqIGZyb20gYWN0dWFsIGludm9j
YXRpb24gYXJndW1lbnRzLgotCSAqIEBwYXJhbSBpbnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcg
aW5mZXJyZWQKLQkgKiBAcGFyYW0gbWV0aG9kIGN1cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5k
aW5nIGZvciB0aGlzIGludm9jYXRpb24KLQkgKiBAcmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRp
bmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1ldGVycywKLQkgKiAJb3IgYSBwcm9ibGVtIG1ldGhv
ZCBiaW5kaW5nIHNpZ25hbGluZyBlaXRoZXIgaW5mZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBt
aXNtYXRjaC4KLQkgKi8KLQlwdWJsaWMgLypATm9uTnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJ
bnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGludm9jYXRpb24sIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0g
bnVsbDsKLQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7
Ci0JCWlmIChhcmd1bWVudHMgIT0gbnVsbCkgewotCQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBl
QmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1l
bnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0ucmVz
b2x2ZWRUeXBlOwotCQl9Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24s
IGFyZ3VtZW50VHlwZXMsIG1ldGhvZCk7CiAJfQogCiAJcHVibGljIGJvb2xlYW4gaGFzUmVzdWx0
Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKQEAgLTU5MSw2ICs0NjYsMTAgQEAKIAkJCXJl
dHVybiB0aGlzLnN0ZXBDb21wbGV0ZWQgPj0gVFlQRV9JTkZFUlJFRDsKIAkJZWxzZQogCQkJcmV0
dXJuIHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5jb250YWluc0tleSh0YXJnZXRUeXBlKTsK
Kwl9CisJCisJcHVibGljIFNvbHV0aW9uIGdldFJlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRU
eXBlKSB7CisJCXJldHVybiB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5
cGUpOwogCX0KIAogCXB1YmxpYyBib29sZWFuIHJlZ2lzdGVyU29sdXRpb24oVHlwZUJpbmRpbmcg
dGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZykgewpAQCAtMTM2Niw4ICsx
MjQ1LDYgQEAKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7CiAJ
CXRoaXMuY3VycmVudEludm9jYXRpb24gPSBpbnZvY2F0aW9uOwogCQkKLQkJLy8gc2NoZWR1bGUg
Zm9yIHJlLWJpbmRpbmcgdGhlIGlubmVyIGFmdGVyIGluZmVyZW5jZSBzdWNjZXNzOgotCQl0aGlz
LmlubmVyUG9saWVzLmFkZChpbnZvY2F0aW9uKTsKIAkJcmV0dXJuIHJlY29yZDsKIAl9CiAJCkBA
IC0xMzk1LDE0NSArMTI3Miw2IEBACiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSByZWNvcmQu
c2l0ZTsKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzID0gcmVjb3JkLmludm9jYXRpb25Bcmd1
bWVudHM7CiAJCXRoaXMuaW5mZXJlbmNlS2luZCA9IHJlY29yZC5pbmZlcmVuY2VLaW5kOwotCX0K
LQotCXB1YmxpYyBib29sZWFuIHJlYmluZElubmVyUG9saWVzKE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7Ci0JCUJvdW5kU2V0IGJvdW5kcyA9IHRoaXMuY3VycmVu
dEJvdW5kczsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdl
dFR5cGUoKTsKLQkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCB8fCAhdGFyZ2V0VHlwZS5pc1Byb3Bl
clR5cGUodHJ1ZSkpIHsKLQkJCWlmICghc2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmlu
ZXNUYXJnZXRUeXBlKCkpIHsKLQkJCQkvLyBpbiB0aGlzIGNhc2Ugd2UgbWF5IG5vdCB5ZXQgaGF2
ZSB0aGUgc29sdXRpb24oPywgZ2V0IG9yIGNvbXB1dGUgaXQgbm93OgotCQkJCVNvbHV0aW9uIHNv
bHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJ
CQl0cnkgewotCQkJCQlpZiAoc29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0g
bnVsbCkKLQkJCQkJCWJvdW5kcyA9IHNvbHV0aW9uLmJvdW5kczsKLQkJCQkJZWxzZQotCQkJCQkJ
Ym91bmRzID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNp
dGUsIG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKSk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFp
bHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCXJldHVybiBmYWxzZTsKLQkJCQl9Ci0JCQkJaWYgKGJv
dW5kcyA9PSBudWxsKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlT
b2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0
VHlwZSk7Ci0JCQlpZiAoc29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVs
bCkKLQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3VuZHM7Ci0JCX0KLQkJcmViaW5kSW5uZXJQb2xp
ZXMoYm91bmRzLCBtZXRob2QucGFyYW1ldGVycyk7Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCS8q
KgotCSAqIEFmdGVyIGluZmVyZW5jZSBoYXMgZmluaXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBv
bHkgZXhwcmVzc2lvbnMgKEludm9jYXRpb25zKSwgdGhhdAotCSAqIGhhdmUgYmVlbiBpbmNsdWRl
ZCBpbiB0aGUgaW5mZXJlbmNlLiBGb3IgZWFjaCBvZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGlu
Zm9ybWF0aW9uCi0JICogZnJvbSB0aGUgaW5mZXJlbmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmln
Z2VyIGZvbGxvdy11cCByZXNvbHZpbmcgYXMgbmVlZGVkLgotCSAqIFNpbWlsYXIgZm9yIHBvbHkg
ZXhwcmVzc2lvbnMgdGhhdCBkaWQgbm90IGRpcmVjdGx5IHBhcnRpY2lwYXRlIGluIHRoZSBpbmZl
cmVuY2UKLQkgKiBidXQgYXJlIGRpcmVjdCBhcmd1bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2Nh
dGlvbiAoRnVuY3Rpb25hbEV4cHJlc3Npb24sIENvbmRpdGlvbmFsRXhwcmVzc2lvbikuCi0JICov
Ci0JcHVibGljIHZvaWQgcmViaW5kSW5uZXJQb2xpZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmlu
ZGluZ1tdIHBhcmFtZXRlclR5cGVzKSB7Ci0JCS8vIFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5n
IHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZGlyZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVu
dCBpbnZvY2F0aW9uOgotCQkvLyAoaGFuZGxlcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRp
dGlvbmFsRXhwcmVzc2lvbikKLQkJaWYgKHRoaXMuY3VycmVudEludm9jYXRpb24gaW5zdGFuY2Vv
ZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJcmV0dXJuOyAvLyBubyBpbm5lciBleHByZXNzaW9u
cwotCQlib29sZWFuIGlzVmFyYXJncyA9IHRoaXMuaW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJB
Ukc7Ci0JCWFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKGJvdW5kcywgcGFyYW1ldGVyVHlwZXMs
IGlzVmFyYXJncyk7Ci0JCS8vIFRoaXMgbG9vcHMgb3ZlciBhbGwgcG9seSBleHByZXNzaW9ucyBm
b3Igd2hpY2ggYSBzdWItaW5mZXJlbmNlIHdhcyB0cmlnZ2VyZWQ6Ci0JCS8vIChoYW5kbGVzIGdl
bmVyaWMgaW52b2NhdGlvbnMpCi0JCWludCBsZW4gPSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsK
LQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkrKykgewotCQkJRXhwcmVzc2lvbiBpbm5lciA9
IChFeHByZXNzaW9uKSB0aGlzLmlubmVyUG9saWVzLmdldChpKTsKLQkJCWlmIChpbm5lciBpbnN0
YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKLQkJCQlSZWZlcmVuY2VFeHByZXNzaW9uIHJl
ZmVyZW5jZUV4cHJlc3Npb24gPSAoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW5uZXI7Ci0JCQkJTWV0
aG9kQmluZGluZyBjb21waWxlVGltZURlY2wgPSByZWZlcmVuY2VFeHByZXNzaW9uLnByZXBhcmVG
b3JJbmZlcmVuY2VSZXN1bHQodGhpcy5zY29wZSk7Ci0JCQkJaWYJKGNvbXBpbGVUaW1lRGVjbCAh
PSBudWxsKSB7Ci0JICAJCQkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHZhcmlhYmxlcyA9IGNvbXBp
bGVUaW1lRGVjbC50eXBlVmFyaWFibGVzOwotCQkJCQlpZiAodmFyaWFibGVzICE9IEJpbmRpbmcu
Tk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0
U29sdXRpb25zKHZhcmlhYmxlcywgKEludm9jYXRpb25TaXRlKSBpbm5lciwgYm91bmRzKTsKLQkJ
CQkJCXJlZmVyZW5jZUV4cHJlc3Npb24uYmluZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRl
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY29tcGlsZVRpbWVEZWNsLCBhcmd1bWVudHMpOwot
CQkJCQl9Ci0JCQkJfQotCQkJfSBlbHNlIGlmIChpbm5lciBpbnN0YW5jZW9mIEludm9jYXRpb24p
IHsKLQkJCQlJbnZvY2F0aW9uIGlubmVyTWVzc2FnZSA9IChJbnZvY2F0aW9uKSBpbm5lcjsKLQkJ
CQlUeXBlQmluZGluZyBpbm5lclRhcmdldFR5cGUgPSBpbm5lci5leHBlY3RlZFR5cGUoKTsgLy8g
bWF5IGJlIHNldCBmcm9tIGFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzCi0JCQkJaWYgKGlubmVy
VGFyZ2V0VHlwZSAhPSBudWxsICYmICFpbm5lclRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUp
KQotCQkJCQlpbm5lclRhcmdldFR5cGUgPSBudWxsOwotCQkJCU1ldGhvZEJpbmRpbmcgYmluZGlu
ZyA9IGlubmVyTWVzc2FnZS5iaW5kaW5nKGlubmVyVGFyZ2V0VHlwZSwgaW5uZXJUYXJnZXRUeXBl
ICE9IG51bGwsIHRoaXMuc2NvcGUpOwotCQkJCWlmIChiaW5kaW5nID09IG51bGwpCi0JCQkJCWNv
bnRpbnVlOwotCQkJCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBiaW5kaW5nLnNoYWxsb3dPcmln
aW5hbCgpOwotCi0JCQkJLy8gYXBwbHkgaW5mZXJlbmNlIHJlc3VsdHMgb250byB0aGUgYWxsb2Nh
dGlvbiB0eXBlIG9mIGlubmVyIGRpYW1vbmRzOgotCQkJCWlmIChvcmlnaW5hbC5pc0NvbnN0cnVj
dG9yKCkgJiYgaW5uZXIuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJCVJlZmVyZW5jZUJpbmRp
bmcgZGVjbGFyaW5nQ2xhc3MgPSBvcmlnaW5hbC5kZWNsYXJpbmdDbGFzczsKLQkJCQkJVHlwZUJp
bmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1dGlvbnMoZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlh
YmxlcygpLCBpbm5lck1lc3NhZ2UsIGJvdW5kcyk7Ci0JCQkJCWRlY2xhcmluZ0NsYXNzID0gdGhp
cy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShkZWNsYXJpbmdDbGFzcywgYXJn
dW1lbnRzLCBkZWNsYXJpbmdDbGFzcy5lbmNsb3NpbmdUeXBlKCkpOwotCQkJCQlvcmlnaW5hbCA9
ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWRlY2xhcmluZ0NsYXNzKS5jcmVhdGVQYXJhbWV0
ZXJpemVkTWV0aG9kKG9yaWdpbmFsKTsKLQkJCQkJaW5uZXIuY2hlY2tBZ2FpbnN0RmluYWxUYXJn
ZXRUeXBlKGlubmVyVGFyZ2V0VHlwZSwgdGhpcy5zY29wZSk7CQotCQkJCQlpZiAodGhpcy5lbnZp
cm9ubWVudC5nbG9iYWxPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxl
ZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG9y
aWdpbmFsLCBpbm5lck1lc3NhZ2UsIHRoaXMuc2NvcGUpOwotCQkJCX0KLQkJCQkKLQkJCQkvLyBh
cHBseSByZXN1bHRzIG9mIHRoZSBjb21iaW5lZCBpbmZlcmVuY2Ugb250byB0aGUgYmluZGluZyBv
ZiB0aGUgaW5uZXIgaW52b2NhdGlvbjoKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdl
dFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRz
KTsKLQkJCQlpZiAoc29sdXRpb25zID09IG51bGwpIHsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCUluZmVyZW5j
ZUNvbnRleHQxOCBpbm5lckN0eCA9IGlubmVyTWVzc2FnZS5nZXRJbmZlcmVuY2VDb250ZXh0KChQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGJpbmRpbmcpOwotCQkJCQkJaWYgKGlu
bmVyQ3R4ICE9IG51bGwgJiYgIWJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlu
bmVyQ3R4LnJlcG9ydEludmFsaWRJbnZvY2F0aW9uKGlubmVyTWVzc2FnZSwgYmluZGluZyk7Ci0J
CQkJCQl9Ci0JCQkJCX0KLQkJCQkJY29udGludWU7IC8vIGlubmVyIGluZmVyZW5jZSBub3QgcmVx
dWVzdGVkIC0+IG5vdCBhIHByb2JsZW0KLQkJCQl9Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWwsIHNvbHV0aW9ucyk7Ci0JCQkJCi0JCQkJaWYg
KGlubmVyTWVzc2FnZS51cGRhdGVCaW5kaW5ncyhpbm5lckJpbmRpbmcsIGlubmVyVGFyZ2V0VHlw
ZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFsbHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJ
CUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGlubmVyTWVzc2FnZSwgaW5u
ZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJCQl9Ci0JCQl9Ci0JCX0KLQkJdGhpcy5zdGVwQ29t
cGxldGVkID0gQklORElOR1NfVVBEQVRFRDsgLy8gd2UncmUgZG9uZS1kb25lCi0JfQotCi0JcHJp
dmF0ZSB2b2lkIGFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKEJvdW5kU2V0IGFjY2VwdGVkUmVz
dWx0LCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzLCBib29sZWFuIGlzVmFyQXJncykgewot
CQlpZiAoYWNjZXB0ZWRSZXN1bHQgPT0gbnVsbCB8fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMg
PT0gbnVsbCkgcmV0dXJuOwotCQlTdWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0gZ2V0UmVzdWx0
U3Vic3RpdHV0aW9uKGFjY2VwdGVkUmVzdWx0KTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlz
Lmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUgPSBnZXRQYXJhbWV0ZXIocGFyYW1ldGVyVHlwZXMsIGksIGlzVmFyQXJncyk7Ci0JCQlp
ZiAoIXRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCXRhcmdldFR5cGUgPSBTY29w
ZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgdGFyZ2V0VHlwZSk7Ci0JCQlFeHByZXNzaW9uIGV4
cHJlc3Npb24gPSB0aGlzLmludm9jYXRpb25Bcmd1bWVudHNbaV07Ci0JCQlpZiAoZXhwcmVzc2lv
biBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAo
SW52b2NhdGlvbikgZXhwcmVzc2lvbjsKLQkJCQlpZiAoIXRoaXMuaW5uZXJQb2xpZXMuY29udGFp
bnMoaW52b2NhdGlvbikpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9u
LmJpbmRpbmcodGFyZ2V0VHlwZSwgdHJ1ZSwgdGhpcy5zY29wZSk7Ci0JCQkJCWlmIChtZXRob2Qg
aW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwcmV2aW91c0JpbmRpbmcgPSAoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2Q7Ci0JCQkJCQlJbmZlcmVuY2VDb250
ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocHJldmlvdXNC
aW5kaW5nKTsKLQkJCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7Ci0JCQkJCQkJLy8gd2UgaGF2
ZSBhIG5vbi1wb2x5IGdlbmVyaWMgaW52b2NhdGlvbiwgd2hpY2ggbmVlZHMgaW5mZXJlbmNlIGJ1
dCBpcyBub3QgY29ubmVjdGVkIHZpYSBpbm5lclBvbGlzLgotCQkJCQkJCS8vIEZpbmlzaCB0aGF0
IGlubmVyIGluZmVyZW5jZSBub3cgKGluY2wuIGJpbmRpbmcgdXBkYXRlcyk6Ci0JCQkJCQkJTWV0
aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5lckN0eC5pbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb24sIHByZXZpb3VzQmluZGluZyk7Ci0JCQkJCQkJaWYgKCFpbm5lckJpbmRpbmcuaXNW
YWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQlpbm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlv
bihpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcpOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2Nh
dGlvbi51cGRhdGVCaW5kaW5ncyhpbm5lckJpbmRpbmcsIHRhcmdldFR5cGUpKSB7IC8vIG9ubHkg
aWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmluZyBhbnl0aGluZwotCQkJCQkJCQlBU1ROb2RlLnJl
c29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcsIHRo
aXMuc2NvcGUpOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJfSBlbHNlIGlmKG1ldGhvZCBpbnN0
YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKXsKLQkJCQkJCWV4cHJlc3Npb24uY2hl
Y2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJCQl9
Ci0JCQkJfSBlbHNlIHsKLQkJCQkJZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlw
ZSk7Ci0JCQkJfQotCQkJfSBlbHNlIHsKLQkJCQlpZiAodGhpcy5pbm5lclBvbGllcy5jb250YWlu
cyhleHByZXNzaW9uKSkgLy8gbWF5IGdldCBoZXJlIGZvciBSZWZlcmVuY2VFeHByZXNzaW9ucyAu
Li4KLQkJCQkJZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7IC8vIC4uLiBw
cmVwYXJlIGZvciBmaW5hbCBpbmZlcmVuY2UgdmlhIHJlYmluZElubmVyUG9saWVzCi0JCQkJZWxz
ZQotCQkJCQlleHByZXNzaW9uLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBl
LCB0aGlzLnNjb3BlKTsKLQkJCX0KLQkJfQogCX0KIAogCXByaXZhdGUgU3Vic3RpdHV0aW9uIGdl
dFJlc3VsdFN1YnN0aXR1dGlvbihmaW5hbCBCb3VuZFNldCByZXN1bHQpIHsKQEAgLTE1ODEsMTkg
KzEzMTksMTQgQEAKIAkJCWlmIChtZXRob2QucmV0dXJuVHlwZS5lcmFzdXJlKCkuaXNDb21wYXRp
YmxlV2l0aChleHBlY3RlZFR5cGUpKQogCQkJCXJldHVybiBtZXRob2Q7IC8vIGRvbid0IGNvdW50
IGFzIHByb2JsZW0uCiAJCX0KLQkJaWYgKGV4cGVjdGVkVHlwZSA9PSBudWxsKQotCQkJcmV0dXJu
IG1ldGhvZDsgLy8gYXNzdW1lIGluZmVyZW5jZSBmYWlsdXJlIGNvbmNlcm5lZCBhbm90aGVyIGV4
cHJlc3Npb24KLQkJUHJvYmxlbU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9i
bGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRl
cnMsIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVt
KTsKKwkJLyogV2UgdXNlZCB0byBjaGVjayBpZiBleHBlY3RlZCB0eXBlIGlzIG51bGwgYW5kIGlm
IHNvIHJldHVybiBtZXRob2QsIGJ1dCB0aGF0IGlzIHdyb25nIC0gaXQgaW5qZWN0cyBhbiBpbmNv
bXBhdGlibGUgbWV0aG9kIGludG8gb3ZlcmxvYWQgcmVzb2x1dGlvbi4KKwkJICAgaWYgd2UgZ2V0
IGhlcmUgd2l0aCBleHBlY3RlZCB0eXBlIHNldCB0byBudWxsIGF0IGFsbCwgdGhlIHRhcmdldCBj
b250ZXh0IGRvZXMgbm90IGRlZmluZSBhIHRhcmdldCB0eXBlICh2YW5pbGxhIGNvbnRleHQpLCBz
byBpbmZlcmVuY2UgaGFzIGRvbmUgaXRzCisJCSAgIGJlc3QgYW5kIG5vdGhpbmcgbW9yZSB0byBk
byB0aGFuIHRvIHNpZ25hbCBlcnJvci4gCisJCSAqLworCQlQcm9ibGVtTWV0aG9kQmluZGluZyBw
cm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNl
bGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJ
bmZlcmVuY2VGYWlsdXJlKTsKIAkJcHJvYmxlbU1ldGhvZC5yZXR1cm5UeXBlID0gZXhwZWN0ZWRU
eXBlOwogCQlwcm9ibGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQgPSB0aGlzOwogCQlyZXR1cm4g
cHJvYmxlbU1ldGhvZDsKLQl9Ci0KLQlwdWJsaWMgdm9pZCByZXBvcnRJbnZhbGlkSW52b2NhdGlv
bihJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgYmluZGluZykgewotCQlpZiAo
aW52b2NhdGlvbiBpbnN0YW5jZW9mIE1lc3NhZ2VTZW5kKQotCQkJdGhpcy5zY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKChNZXNzYWdlU2VuZCkgaW52b2NhdGlvbiwgYmluZGlu
Zyk7Ci0JCWVsc2UKLQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0
cnVjdG9yKChTdGF0ZW1lbnQpaW52b2NhdGlvbiwgYmluZGluZyk7CiAJfQogCiAJLy8gZGVidWdn
aW5nOgpAQCAtMTYzMywxMiArMTM2Niw2IEBACiAJCWlmICh0aGlzLmN1cnJlbnRCb3VuZHMgIT0g
bnVsbCkKIAkJCWJ1Zi5hcHBlbmQodGhpcy5jdXJyZW50Qm91bmRzLnRvU3RyaW5nKCkpOwogCQly
ZXR1cm4gYnVmLnRvU3RyaW5nKCk7Ci0JfQotCi0JcHVibGljIHZvaWQgYWRkUHJvYmxlbU1ldGhv
ZChQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kKSB7Ci0JCWlmICh0aGlzLnByb2Js
ZW1NZXRob2RzID09IG51bGwpCi0JCQl0aGlzLnByb2JsZW1NZXRob2RzID0gbmV3IEFycmF5TGlz
dDxNZXRob2RCaW5kaW5nPigpOwotCQl0aGlzLnByb2JsZW1NZXRob2RzLmFkZChwcm9ibGVtTWV0
aG9kKTsKIAl9CiAKIAkvKioKQEAgLTE3MTIsNCArMTQzOSw0IEBACiAJcHVibGljIHN0YXRpYyB2
b2lkIG1pc3NpbmdJbXBsZW1lbnRhdGlvbihTdHJpbmcgbXNnKSB7CiAJCXRocm93IG5ldyBVbnN1
cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbihtc2cpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0
IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcuamF2YQppbmRleCAyZTk2YTRiLi5jNTU2YzY4IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAg
LTMxLDYgKzMxLDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LldpbGRjYXJkOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5j
bGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJPcHRpb25zOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4LlNvbHV0aW9uOwog
CiAvKioKICAqIEJpbmRpbmcgZGVub3RpbmcgYSBnZW5lcmljIG1ldGhvZCBhZnRlciB0eXBlIHBh
cmFtZXRlciBzdWJzdGl0dXRpb25zIGdvdCBwZXJmb3JtZWQuCkBAIC00MSw3ICs0Miw3IEBACiBw
dWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFy
YW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgaW1wbGVtZW50cyBTdWJzdGl0dXRpb24gewogCiAgICAg
cHVibGljIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50czsKLSAgICBwcml2YXRlIExvb2t1cEVu
dmlyb25tZW50IGVudmlyb25tZW50OworICAgIHByb3RlY3RlZCBMb29rdXBFbnZpcm9ubWVudCBl
bnZpcm9ubWVudDsKICAgICBwdWJsaWMgYm9vbGVhbiBpbmZlcnJlZFJldHVyblR5cGU7CiAgICAg
cHVibGljIGJvb2xlYW4gd2FzSW5mZXJyZWQ7IC8vIG9ubHkgc2V0IHRvIHRydWUgZm9yIGluc3Rh
bmNlcyByZXN1bHRpbmcgZnJvbSBtZXRob2QgaW52b2NhdGlvbiBpbmZlcnJlbmNlCiAgICAgcHVi
bGljIGJvb2xlYW4gaXNSYXc7IC8vIHNldCB0byB0cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMg
cmF3IGZvciBzdWJzdGl0dXRpb24gcHVycG9zZQpAQCAtNTAsMzEgKzUxLDExIEBACiAJLyoqCiAJ
ICogUGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFu
ZC9vciBleHBlY3RlZCB0eXBlCiAJICogPHA+Ci0JICogSW4gMS44KyB0aGUgZm9sbG93aW5nIGRp
c2NpcGxpbmUgaGFzIHRvIGJlIG9ic2VydmVkIGJ5IGNhbGxlcnM6Ci0JICogRWFjaCBpbnZvY2F0
aW9uIG11c3QgYmUgc3ViamVjdGVkIHRvIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlOgotCSAqIDwv
cD4KLQkgKiA8dWw+Ci0JICogPGxpPiB7QGxpbmsgU2NvcGUjQVBQTElDQUJJTElUWSBJbnZvY2F0
aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlfSwgd2hpY2ggbWF5IGJlIGFwcGxpZWQKLQkgKiAg
ICAgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lIGludm9jYXRpb248L2xpPgotCSAqIDxsaT4g
e0BsaW5rIFNjb3BlI0lOVk9DQVRJT05fVFlQRSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlfSwg
d2hpY2ggaXMgZmluYWxseSBwZXJmb3JtZWQKLQkgKiAgICAgZm9yIHRoZSBzZWxlY3RlZCBtZXRo
b2QgYW5kIHdoaWNoIGFkZHMgaW5mb3JtYXRpb24gZnJvbSB0aGUgInRhcmdldCB0eXBlIi48L2xp
PgotCSAqIDwvdWw+Ci0JICogPHA+Ci0JICogQ2xpZW50cyBjYW4gY29udHJvbCB3aGljaCBwYXJ0
cyBvZiB0aGUgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgYnkgcGFzc2luZyB0aGUgYXBw
cm9wcmlhdGUKLQkgKiBmbGFncyBpbnRvIGFyZ3VtZW50ICdpbmZlcmVuY2VMZXZlbCcuIE9uIGVh
Y2ggY2FsbCBwYXRoIGl0IG11c3QgYmUgZW5zdXJlZCB0aGF0IG9uZSBvciBtb3JlCi0JICogaW52
b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZXMgYXJlIGFsd2F5cyBmb2xsb3dlZCBieSBl
eGFjdGx5IG9uZSBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JICogKHVubGVzcyBlcnJvcnMg
aGF2ZSBiZWVuIGRldGVjdGVkKS4KLQkgKiA8L3A+Ci0JICogPHA+Ci0JICogSW5pdGlhbCBjbGll
bnRzIGFyZSB0aGUgZGlyZWN0IGNhbGxlcnMgb2YKLQkgKiB7QGxpbmsgU2NvcGUjY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRl
LGludCl9LAotCSAqIHdoaWNoIHNob3VsZCBlaXRoZXIgaW52b2tlIGJvdGggbGV2ZWxzIG9mIGlu
ZmVyZW5jZSA8ZW0+b3I8L2VtPiBkZWxlZ2F0ZSB0aGUgc2Vjb25kIHBhcnQgdG8KLQkgKiB7QGxp
bmsgU2NvcGUjbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10saW50LFR5
cGVCaW5kaW5nW10sSW52b2NhdGlvblNpdGUsUmVmZXJlbmNlQmluZGluZyl9LAotCSAqIHdoaWNo
IGlzIGludGVuZGVkIHRvIGVuc3VyZSBjb21wbGV0aW5nIHRoZSBpbmZlcmVuY2Ugb24gYWxsIG5v
bi1lcnJvciBleGl0cy4KKwkgKiBJbiAxLjgrIGlmIHRoZSBleHBlY3RlZCB0eXBlIGlzIG5vdCB5
ZXQgYXZhaWxhYmxlIGR1ZSB0byB0aGlzIGNhbGwgYmVpbmcgYW4gYXJndW1lbnQgdG8gYW4gb3V0
ZXIgY2FsbCB3aGljaCBpcyBub3Qgb3ZlcmxvYWQtcmVzb2x2ZWQgeWV0LAorCSAqIHRoZSByZXR1
cm5lZCBtZXRob2QgYmluZGluZyB3aWxsIGJlIGEgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy4KIAkgKiA8L3A+ICAKIAkgKi8KLQlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRp
bmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAotCQkJSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkKKwlwdWJsaWMgc3RhdGljIE1ldGhv
ZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1l
dGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAlJbnZvY2F0aW9uU2l0
ZSBpbnZvY2F0aW9uU2l0ZSkKIAl7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxl
cyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CkBAIC05NSwxMjggKzc2LDM5IEBACiAJ
CQkvLyBpbml0aWFsaXplcyB0aGUgbWFwIG9mIHN1YnN0aXR1dGVzICh2YXIgLS0+IHR5cGVbXVtd
eyBlcXVhbCwgZXh0ZW5kcywgc3VwZXJ9CiAJCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBv
cmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOwogCi0vLyA9PT09IDEuODogVGhlIG1haW4gZHJpdmVy
IGZvciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09Ci0JCQlJbmZlcmVuY2VDb250
ZXh0MTggaW5mQ3R4MTggPSBudWxsOwogCQkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9u
cyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3Vy
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKChpbmZlcmVu
Y2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJVFkpICE9IDApCi0JCQkJCWluZkN0eDE4ID0gaW52
b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKLQkJCQllbHNlIGlmIChp
bnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgb3JpZ2luYWxNZXRob2QgaW5z
dGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCi0JCQkJCWluZkN0eDE4
ID0gKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkuZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaWYg
KGluZkN0eDE4ID09IG51bGwpCi0JCQkJCXJldHVybiBvcmlnaW5hbE1ldGhvZDsKLQkJCX0KLQkJ
CWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJdHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlz
aW9uYWxSZXN1bHQgPSBudWxsOwotCQkJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOwotCQkJCQlp
ZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUuQVBQTElDQUJJTElUWSkgIT0gMCkgeworCQkJaWYg
KGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
KQorCQkJCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KG9yaWdpbmFsTWV0aG9kLCBh
cmd1bWVudHMsIHNjb3BlLCBpbnZvY2F0aW9uU2l0ZSk7CiAKLQkJCQkJCS8vIC0tLS0gMTguNS4x
IChBcHBsaWNhYmlsaXR5KTogLS0tLQotCQkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBvcmlnaW5h
bE1ldGhvZC5pc0NvbnN0cnVjdG9yKCkKLQkJCQkJCQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFu
Y2VvZiBFeHByZXNzaW9uCi0JCQkJCQkJCSYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSku
aXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpZiAoYXJndW1lbnRzLmxl
bmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgewotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtp
bmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlm
IDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4K
LQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0
aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBp
bmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09
IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJhcmdzKCkpIHsKLQkJCQkJCQkvLyBjaGVjayBm
b3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0eQotCQkJCQkJCWluZkN0eDE4ID0gaW52b2Nh
dGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJ
CQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFS
QVJHOwotCQkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2lu
YWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3Vs
dCA9IGluZkN0eDE4LnNvbHZlKCk7Ci0JCQkJCQl9Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1
bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29sdmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewot
CQkJCQkJCWluZkN0eDE4LnN0b3JlZFNvbHV0aW9uID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJ
CQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklM
SVRZX0lORkVSUkVEOwotCQkJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVy
ZW5jZUV4cHJlc3Npb24pCi0JCQkJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlv
blNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOwotCQkJCQkJfQot
CQkJCQl9IGVsc2UgewotCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zdG9yZWRT
b2x1dGlvbjsKLQkJCQkJfQotCQkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNv
cHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiBy
ZXNvbHZlKCkKKwkJCS8vIDEuNy0gb25seS4KKwkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5m
ZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7CisJCQltZXRob2RTdWJzdGl0dXRlID0gaW5m
ZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFy
YW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBu
dWxsKQorCQkJCXJldHVybiBudWxsOwogCi0JCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9
IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCQkJCWJvb2xlYW4gaGFz
UmV0dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJy
ZWQgPSBmYWxzZTsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLklOVk9DQVRJT05f
VFlQRSkgIT0gMCAvLyByZXF1ZXN0ZWQ/Ci0JCQkJCQkJJiYgKGV4cGVjdGVkVHlwZSAhPSBudWxs
IHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRU
eXBlKCkpKSB7IC8vIHBvc3NpYmxlPwotCi0JCQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlv
biB0eXBlKTogLS0tLQotCQkJCQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlw
ZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsK
LQkJCQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOwotCQkJCQkJaGFzUmV0dXJuUHJv
YmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKLQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKQotCQkJ
CQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVy
cm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQg
YWxsCi0JCQkJCX0gZWxzZSB7Ci0JCQkJCQkvLyB3ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZv
Y2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsK
LQkJCQkJfQotCi0JCQkJCWlmIChyZXN1bHQgIT0gbnVsbCkgewotCQkJCQkJLy8gYXNzZW1ibGUg
dGhlIHNvbHV0aW9uIGV0YzoKLQkJCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4
MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwot
CQkJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCQkJCi0JCQkJCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9ucyk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblBy
b2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0
PwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1
cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsK
LQkJCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGlu
ZykKLQkJCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAo
aW52b2NhdGlvblR5cGVJbmZlcnJlZCkgewotCQkJCQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlz
QW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCQkJCU51bGxBbm5vdGF0
aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9j
YXRpb25TaXRlLCBzY29wZSk7Ci0JCQkJCQkJCWluZkN0eDE4LnJlYmluZElubmVyUG9saWVzKHJl
c3VsdCwgbWV0aG9kU3Vic3RpdHV0ZS5wYXJhbWV0ZXJzKTsKLQkJCQkJCQkJTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFy
Z3VtZW50cyk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQkJCQkJCQly
ZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJCQlpZiAoaW52b2Nh
dGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKQotCQkJCQkJCQkJKChJbnZvY2F0aW9uKSBp
bnZvY2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUs
IGluZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0IHNvIHdlIGNhbiBmaW5pc2ggbGF0ZXIKLQkJCQkJ
CQl9Ci0JCQkJCQkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJ
CQkJcmV0dXJuIG51bGw7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBl
KSB7Ci0JCQkJCS8vIEZJWE1FIHN0b3AtZ2FwIG1lYXN1cmUKLQkJCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9u
U2l0ZSk7Ci0JCQkJCXJldHVybiBudWxsOworCQkJLy8gc3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVs
bCB0byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJzLCBidXQgbnVsbCBhcmd1bWVudHMgZ290IHJlcGxh
Y2VkIHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5hbCB2YXJpYWJsZSBpbiBwYXJhbSBtZXRob2QKKwkJ
CS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCisJCQlp
ZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKKwkJCQlp
ZiAoaW5mZXJlbmNlQ29udGV4dC5pc1VuY2hlY2tlZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hl
Y2tlZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcKKwkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNv
bnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5j
ZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwogCQkJCX0KLQkJCX0gZWxzZSB7Ci0vLyA9PT09IDEu
OCA9PT09Ci0JCQkJaW5mZXJlbmNlQ29udGV4dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0KG9yaWdp
bmFsTWV0aG9kKTsKLQkJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBl
cyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNl
Q29udGV4dCk7CisJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmlu
ZGluZy5WT0lEKSB7CisJCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25T
aXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVs
bCkgeworCQkJCQkJLy8gcmVjb3JkIGl0IHdhcyBleHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9w
cG9zZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0IChzZWUgYmVsb3cpCisJCQkJCQlpbmZlcmVuY2VD
b250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1ZTsKKwkJCQkJfSBlbHNlIHsKKwkJ
CQkJCWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7IC8vIGFzc3VtZSBP
YmplY3QgYnkgZGVmYXVsdAorCQkJCQl9CisJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRU
eXBlID0gZXhwZWN0ZWRUeXBlOworCQkJCX0KKwkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9k
U3Vic3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQp
OwogCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCiAJCQkJCXJldHVybiBudWxsOwot
CQkJCQotCQkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2
ZWQgdmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUg
b3JpZ2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9kCi0JCQkJLy8gMTUuMTIuMi44IC0gaW5m
ZXJyaW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1bWVudHMKLQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4
dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKLQkJCQkJaWYgKGluZmVyZW5jZUNvbnRl
eHQuaXNVbmNoZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3Qg
MTUuMTIuMi43Ci0JCQkJCQlpbnQgbGVuZ3RoID0gaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRl
cy5sZW5ndGg7Ci0JCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3Rp
dHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAw
LCBsZW5ndGgpOwotCQkJCQl9Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUg
IT0gVHlwZUJpbmRpbmcuVk9JRCkgewotCQkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0g
aW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJCQkJCWlmIChleHBlY3Rl
ZFR5cGUgIT0gbnVsbCkgewotCQkJCQkJCS8vIHJlY29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBj
b250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93KQotCQkJ
CQkJCWluZmVyZW5jZUNvbnRleHQuaGFzRXhwbGljaXRFeHBlY3RlZFR5cGUgPSB0cnVlOwotCQkJ
CQkJfSBlbHNlIHsKLQkJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVj
dCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKLQkJCQkJCX0KLQkJCQkJCWluZmVyZW5j
ZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlOwotCQkJCQl9Ci0JCQkJCW1ldGhv
ZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRlLmluZmVyRnJvbUV4cGVjdGVkVHlwZShzY29w
ZSwgaW5mZXJlbmNlQ29udGV4dCk7Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwp
Ci0JCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQl9CiAJCQl9CiAJCX0KKwkJCiAKIAkJLyogYm91bmRz
IGNoZWNrOiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjQy
MTU5LCBJbmZlcnJlZCB0eXBlcyBtYXkgY29udGFpbiBzZWxmIHJlZmVyZW5jZQogCQkgICBpbiBm
b3JtYWwgYm91bmRzLiBJZiAiVCBleHRlbmRzIEk8VD4iIGlzIGEgb3JpZ2luYWwgdHlwZSB2YXJp
YWJsZSBhbmQgVCB3YXMgaW5mZXJyZWQgdG8gYmUgSTxUPiBkdWUgcG9zc2libHkKQEAgLTI2Niw2
ICsxNTgsOTMgQEAKIAkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7CiAJfQogCisJcHVibGljIHN0
YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgoTWV0aG9kQmluZGlu
ZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGZpbmFsIFNjb3BlIHNj
b3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkgeworCQkKKwkJUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOworCQlUeXBlVmFy
aWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJs
ZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IG51bGw7CisJCVR5cGVCaW5kaW5n
W10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9kLnBhcmFtZXRlcnM7CisJCWluZkN0eDE4ID0g
aW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJP
cHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOworCQlib29s
ZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKKwkJCisJCXRyeSB7CisJCQlCb3Vu
ZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7CisJCQlCb3VuZFNldCByZXN1bHQgPSBudWxs
OworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2FiaWxpdHkpOiAtLS0tCisJCQlmaW5hbCBib29s
ZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Np
b24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHByZXNzaW9uKG9yaWdp
bmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNEaWFtb25kID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBv
cmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7CisJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9
PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZl
cmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2Ug
Y2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KKwkJCQlpbmZD
dHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVu
dHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJ
CWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJ
CS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBhcHBsaWNhYmlsaXR5CisJCQkJaW5mQ3R4MTgg
PSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBv
dmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVD
S19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmln
aW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4
LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVzdWx0ID09IG51bGwpCisJCQkJcmV0dXJuIG51bGw7
CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChyZXN1bHQpKSB7CisJCQkJaW5mQ3R4MTguc3Rl
cENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOwor
CQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCisJ
CQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQg
PSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8vIENIRUNLCisJCQl9IGVsc2UgeworCQkJCXJl
dHVybiBudWxsOworCQkJfQorCQkJLy8gQXBwbGljYWJpbGl0eSBzdWNjZWVkZWQsIHByb2NlZWQg
dG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBpZiBwb3NzaWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4
cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQli
b29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKKwkJCWlmIChleHBlY3RlZFR5cGUgIT0g
bnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFy
Z2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAxOC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0K
KwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJlc3VsdDsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5j
dXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhv
dXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9j
YXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxN
ZXRob2QpOworCQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOworCQkJCWhhc1JldHVy
blByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7CisJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJ
CQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVy
cm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQg
YWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUg
c29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0
U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOworCQkJCWlm
IChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCQltZXRob2RTdWJzdGl0dXRlID0gc2NvcGUuZW52
aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbE1ldGhv
ZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5
IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PworCQkJCQkJTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVk
KGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhv
ZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7CisJCQkJCQkJbWV0aG9kU3Vic3Rp
dHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJ
CX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQpIHsKKwkJCQkJCWlmIChjb21waWxl
ck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQorCQkJCQkJCU51
bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1
dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7CisJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1N
ZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5kQ2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsK
KwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpIHsKKwkJCQkJCQltZXRob2RTdWJzdGl0
dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJ
CWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdldFR5cGUucHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNv
bHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJlc3VsdCkpOworCQkJCQl9IGVsc2UgeworCQkJCQkJ
bWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQl9CisJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBp
bnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJCQkoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRl
KS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAv
LyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlzaCBsYXRlcgorCQkJCQlyZXR1cm4gbWV0aG9k
U3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQorCQkJcmV0dXJuIG51bGw7CisJCX0gY2F0Y2ggKElu
ZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgeworCQkJLy8gRklYTUUgc3RvcC1nYXAgbWVhc3Vy
ZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0
TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkK
IAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sxOChTY29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBh
cmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9uIHN1YnN0aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gdGhpczsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQppbmRleCBjOWYzZTkwLi45ZTc0OGRlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nj
b3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxNyArODcsNiBA
QAogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3Rh
dGljIGZpbmFsIGludCBNT1JFX0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdN
Qi5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAot
CSAqIHdoaWNoIG9mIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQg
KG9yIGJvdGgpLgotCSAqLwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJ
bmZlcmVuY2UgKDE4LjUuMSkuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJ
TElUWSA9IDE7Ci0JLyoqIFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4y
KS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8q
KiBSZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FU
SU9OX1RZUEV9IGluZmVyZW5jZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lO
RkVSRU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50
IGtpbmQ7CiAJcHVibGljIFNjb3BlIHBhcmVudDsKIApAQCAtNjkxLDEwICs2ODAsMTAgQEAKIAkg
KiBJbnRlcm5hbCB1c2Ugb25seQogCSAqIEdpdmVuIGEgbWV0aG9kLCByZXR1cm5zIG51bGwgaWYg
YXJndW1lbnRzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gcGFyYW1ldGVycy4KIAkgKiBXaWxsIGFu
c3dlciBhIHN1YnN0aXR1dGVkIG1ldGhvZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIGdlbmVyaWMg
YW5kIHR5cGUgaW5mZXJlbmNlIGdvdCB0cmlnZ2VyZWQ7Ci0JICogaW4gY2FzZSB0aGUgbWV0aG9k
IHdhcyBvcmlnaW5hbGx5IGNvbXBhdGlibGUsIHRoZW4gc2ltcGx5IGFuc3dlciBpdCBiYWNrLgor
CSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNp
bXBseSBhbnN3ZXIgaXQgYmFjay4gCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRp
bmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5k
aW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50IGluZmVy
ZW5jZUxldmVsKSB7Ci0JCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFy
Z3VtZW50cywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsLCBmYWxzZSk7CisJcHJvdGVj
dGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmlu
ZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZv
Y2F0aW9uU2l0ZSkgeworCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBh
cmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBmYWxzZSk7CiAJfQkKIAkvKioKIAkgKiBJbnRlcm5h
bCB1c2Ugb25seQpAQCAtNzAyLDggKzY5MSw3IEBACiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0
dXRlZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVy
ZW5jZSBnb3QgdHJpZ2dlcmVkOwogCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxs
eSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KIAkgKi8KLQlwcm90ZWN0
ZWQgZmluYWwgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5k
aW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsCi0JCQlJbnZvY2F0aW9uU2l0ZSBp
bnZvY2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsLCBib29sZWFuIHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMpCisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
LCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzKQogCXsKIAkJVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGlu
dm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCVR5cGVCaW5kaW5nW10gcGFy
YW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwpAQCAtNzM4LDkgKzcyNiwxNSBAQAogCQkJCWFy
Z3VtZW50cyA9IG5ld0FyZ3M7CiAJCQllbHNlICAvLyBlbnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZCgpIGJlbG93IGNhbiB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyBv
dXIgY2FsbGVyOiAoVE9ETzogYWx3YXlzIGNvcHkgYmVmb3JlIHRoZSBsb29wPyBvbmx5IGluIDEu
OD8pCiAJCQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVudHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlw
ZUJpbmRpbmdbYXJnTGVuZ3RoXSwgMCwgYXJnTGVuZ3RoKTsKLQkJCW1ldGhvZCA9IFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2Qs
IGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsKTsKKwkJCW1l
dGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUpOwogCQkJaWYg
KG1ldGhvZCA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJCQlpZiAoIW1l
dGhvZC5pc1ZhbGlkQmluZGluZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBjaGVjayBpc3N1
ZSBpcyB0YWtpbmcgcHJlY2VkZW5jZQorCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZl
bCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9m
IEludm9jYXRpb24pIHsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikg
aW52b2NhdGlvblNpdGU7CisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRp
b24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSBtZXRob2QpOworCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENvbXBsZXRl
ZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkKKwkJCQkJcmV0dXJuIG1ldGhv
ZDsgLy8gaW5mZXJlbmNlIGlzIHJlc3BvbnNpYmxlLCBubyBuZWVkIHRvIHJlY2hlY2sKKwkJCX0K
IAkJfSBlbHNlIGlmIChnZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0
aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CiAJCQlp
ZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
CiAJCQkJaWYgKCEoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKS53
YXNJbmZlcnJlZCkKQEAgLTc1NSw3ICs3NDksNyBAQAogCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50
b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlv
bnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKIAkJCQl0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzID0gZmFsc2U7CiAJCX0KLQkJaWYgKChwYXJhbWV0ZXJDb21w
YXRpYmlsaXR5TGV2ZWwxOChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcywgaW52b2NhdGlvblNpdGUpKSA+IE5PVF9DT01QQVRJQkxFKSB7CisJCWlmICgocGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzKSkgPiBOT1RfQ09NUEFUSUJMRSkgewogCQkJaWYgKChtZXRob2QudGFnQml0cyAm
IFRhZ0JpdHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJLy8g
Z2VuZXJhdGUgcG9seW1vcnBoaWMgbWV0aG9kCiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQo
KS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChtZXRob2QsIGFyZ3VtZW50cyk7CkBAIC03NjcsMTUw
ICs3NjEsMTAgQEAKIAkJLy8gaW4gd2hpY2ggY2FzZSB0aGlzIHByb2JsZW0gY2F0ZWdvcnkgd2ls
bCBiZSBib2d1cwogCQlpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlVmFy
aWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCiAJCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBhcmd1bWVudHMsIFByb2Js
ZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2gpOworCQkvLyAxOC41LjEg
aWdub3JlcyBhcmd1bWVudHMgbm90IHBlcnRpbmVudCB0byBhcHBsaWNhYmlsaXR5LiBXaGVuIHRo
ZXNlIGFyZSB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gbWV0aG9kIGNvdWxkIGZhaWwgYXBwbGlj
YWJpbGl0eSAoZS5nLCBsYW1iZGEgc2hhcGUvYXJpdHkgbWlzbWF0Y2ggLi4uKQorCQlpZiAobWV0
aG9kIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKKwkJ
CXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3Is
IG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpYWJsZU1ldGhv
ZEluYXBwbGljYWJsZSk7CiAJCXJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKLQl9Ci0KLQlw
cml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChNZXRob2RCaW5kaW5nIG1l
dGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdz
TWV0aG9kcywgSW52b2NhdGlvblNpdGUgc2l0ZSkgewotCQlqZGsxOGNoZWNrczoKLQkJaWYgKHNp
dGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQlJbnZvY2F0aW9uIGludm9j
YXRpb24gPSAoSW52b2NhdGlvbikgc2l0ZTsKLQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eCAhPSBudWxsKSB7Ci0J
CQkJCS8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCi0JCQkJ
CWlmIChpbmZDdHguaXNWYXJBcmdzKCkpCi0JCQkJCQlyZXR1cm4gVkFSQVJHU19DT01QQVRJQkxF
OwotCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCQl9Ci0JCQl9Ci0JCQkvLyBjb2xsZWN0IGlu
bmVyIGludm9jYXRpb25zIHdoZXJlIHRoZSBvdXRlciBkaWQgbm90IGludm9sdmUgYW55IGluZmVy
ZW5jZToKLQkJCUV4cHJlc3Npb25bXSBpbnZvY2F0aW9uQXJndW1lbnRzID0gaW52b2NhdGlvbi5h
cmd1bWVudHMoKTsKLQkJCWlmIChpbnZvY2F0aW9uQXJndW1lbnRzICE9IG51bGwpIHsKLQkJCQlJ
bm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9IGludm9jYXRpb24uaW5u
ZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlpbnQgYXJnTGVuID0gaW52b2NhdGlvbkFyZ3VtZW50
cy5sZW5ndGg7Ci0JCQkJYm9vbGVhbiBpc1ZhckFyZ3NbXSA9IG5ldyBib29sZWFuWzFdOyAvLyBl
bXVsYXRlIGFuIGluLW91dCBwYXJhbWV0ZXIgZm9yIGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlu
bmVyKC4uKQotCQkJCWlzVmFyQXJnc1swXSA9IG1ldGhvZC5pc1ZhcmFyZ3MoKSAmJiBhcmdMZW4g
IT0gbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoOyAvLyBpZiBzYW1lIGxlbmd0aHMsIGlzVmFyQXJn
cyBjYW4gc3RpbGwgYmUgdXBkYXRlZCBiZWxvdwotCQkJCWludCBsZXZlbCA9IENPTVBBVElCTEU7
Ci0JCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW47IGkrKykgewotCQkJCQlUeXBlQmluZGlu
ZyBhcmd1bWVudFR5cGUgPSBpIDwgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1tpXSA6IG51
bGw7IC8vIGxlbmd0aCBtaXNtYXRjaCBtYXkgaGFwcGVuIGZyb20gQ29kZVNuaXBwZXRNZXNzYWdl
U2VuZC5yZXNvbHZlVHlwZSgpIGluIHRoZSBpZiAoYXJnSGFzRXJyb3IpIGJsb2NrLgotCQkJCQlp
bnQgbmV4dExldmVsID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5l
ckluZmVyZW5jZUhlbHBlciwgaW52b2NhdGlvbkFyZ3VtZW50c1tpXSwgYXJndW1lbnRUeXBlLCBh
cmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJCWlmIChuZXh0TGV2ZWwgPT0gTk9UX0NPTVBBVElC
TEUpCi0JCQkJCQlyZXR1cm4gbmV4dExldmVsOwotCQkJCQlpZiAobmV4dExldmVsID09IC0yKQot
CQkJCQkJYnJlYWsgamRrMThjaGVja3M7Ci0JCQkJCWxldmVsID0gTWF0aC5tYXgobGV2ZWwsICBu
ZXh0TGV2ZWwpOwotCQkJCX0KLQkJCQlyZXR1cm4gbGV2ZWw7IC8vIG5laXRoZXIgTk9UX0NPTVBB
VElCTEUgbm9yIHVua25vd24oLTIpIHNlZW4KLQkJCX0KLQkJfQotCQkvLyBmYWxsIGJhY2sgdG8g
b2xkIG1ldGhvZDoKLQkJYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyA9ICgoc2l0
ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pICYmICgoUmVmZXJlbmNlRXhwcmVzc2lv
bikgc2l0ZSkudHJpYWxSZXNvbHV0aW9uKTsKLQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxp
dHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9s
ZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOwotCX0KLQotCXByaXZhdGUgaW50IGNvbXBhdGliaWxp
dHlMZXZlbDE4RnJvbUlubmVyKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbm5lckluZmVyZW5jZUhl
bHBlciBpbm5lckluZmVyZW5jZUhlbHBlciwgRXhwcmVzc2lvbiBpbnZvY0FyZywgVHlwZUJpbmRp
bmcgYXJnVHlwZSwgaW50IGFyZ0xlbiwgaW50IGksIGJvb2xlYW5bXSBpc1ZhckFyZ3MpCi0Jewot
CQlpbnQgY29tcGF0aWJsZSA9IGlzVmFyQXJnc1swXSA/IFZBUkFSR1NfQ09NUEFUSUJMRSA6IENP
TVBBVElCTEU7Ci0JCVR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSA9IGludm9jQXJnLnJlc29sdmVk
VHlwZTsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQ
YXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIGlzVmFyQXJnc1swXSk7Ci0JCWlmICghaXNW
YXJBcmdzWzBdICYmIHNob3VsZFRyeVZhcmFyZ3MobWV0aG9kLCByZXNvbHZlZFR5cGUsIHRhcmdl
dFR5cGUpKSB7Ci0JCQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJdGFyZ2V0VHlwZSA9IEluZmVy
ZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOwot
CQl9Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7
IC8vIG1pc21hdGNoaW5nIG51bWJlciBvZiBhcmdzIG9yIG90aGVyIHNldmVyZSBwcm9ibGVtIGlu
c2lkZSBtZXRob2QgYmluZGluZwotCQlpbnQgbGV2ZWwgPSAtMjsgLy8gZG9uJ3Qga25vdwotCQlp
ZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIHJlc29sdmVkVHlwZSAhPSBudWxs
KSB7Ci0JCQlJbnZvY2F0aW9uIGlubmVyUG9seSA9IChJbnZvY2F0aW9uKSBpbnZvY0FyZzsKLQkJ
CWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0
VHlwZSk7Ci0JCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoVHlwZUJp
bmRpbmcubm90RXF1YWxzKGFyZ1R5cGUsIHJlc29sdmVkVHlwZSkgJiYgaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgIT0gbnVsbCkKLQkJCQkJaW5uZXJJbmZlcmVuY2VIZWxwZXIucmVnaXN0ZXJJbm5lclJl
c3VsdChtZXRob2QsIHJlc29sdmVkVHlwZSwgYXJnTGVuLCBpKTsKLQkJCQlyZXR1cm4gTWF0aC5t
YXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJfSBlbHNlIHsKLQkJCQlNZXRob2RCaW5kaW5nIGlu
bmVyQmluZGluZyA9IGlubmVyUG9seS5iaW5kaW5nKG51bGwsIGZhbHNlLCBudWxsKTsgLy8gMS4g
dHJ5IHdpdGhvdXQgdXBkYXRlCi0JCQkJaWYgKGlubmVyQmluZGluZyBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcgaW5uZXJQYXJhbWV0ZXJpemVkID0gKFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgaW5uZXJCaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5m
Q3R4MTggPSBpbm5lclBvbHkuZ2V0SW5mZXJlbmNlQ29udGV4dChpbm5lclBhcmFtZXRlcml6ZWQp
OwotCQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiAhaW5mQ3R4MTguaGFzUmVzdWx0Rm9yKHRh
cmdldFR5cGUpKSB7Ci0JCQkJCQkvLyBub3QgZGV0ZWN0ZWQgYXMgY29tcGF0aWJsZSwgYmVjYXVz
ZSBpbmZlcmVuY2Ugc3RpbGwgbmVlZHMgdG8gY29tcGxldGU/Ci0JCQkJCQlpbnZvY0FyZy5zZXRF
eHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIHNvbHV0aW9uID0g
aW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5lclBvbHksIGlubmVyUGFyYW1ldGVyaXpl
ZCk7Ci0JCQkJCQlpZiAoc29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5pc1ZhbGlkQmluZGlu
ZygpKSB7Ci0JCQkJCQkJaWYgKGlubmVyUG9seS51cGRhdGVCaW5kaW5ncyhzb2x1dGlvbiwgdGFy
Z2V0VHlwZSkpIHsKLQkJCQkJCQkJaWYgKGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0J
CQkJCQkJCQlpbm5lckluZmVyZW5jZUhlbHBlci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwg
aW52b2NBcmcucmVzb2x2ZWRUeXBlLCBhcmdMZW4sIGkpOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAo
c29sdXRpb24ucmV0dXJuVHlwZSAhPSBudWxsKSB7Ci0JCQkJCQkJCWxldmVsID0gcGFyYW1ldGVy
Q29tcGF0aWJpbGl0eUxldmVsKHNvbHV0aW9uLnJldHVyblR5cGUsIHRhcmdldFR5cGUpOwotCQkJ
CQkJCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQkJCQlyZXR1cm4gTWF0aC5t
YXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJCWludm9jQXJn
LnNldEV4cGVjdGVkVHlwZShudWxsKTsKLQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJ
CQkJfSBlbHNlIGlmIChpbm5lclBvbHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikg
ewotCQkJCQkJLy8gbm90IGRldGVjdGVkIGFzIGNvbXBhdGlibGUsIGJlY2F1c2UgaXRzIGEgZGlh
bW9uZCB3aG9zZSB0eXBlIGhhc24ndCB5ZXQgYmVlbiBpbmZlcnJlZD8KLQkJCQkJCVR5cGVCaW5k
aW5nW10gdHlwZUFyZ3VtZW50cyA9IHJlc29sdmVkVHlwZS50eXBlQXJndW1lbnRzKCk7Ci0JCQkJ
CQlpZiAodHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHR5cGVBcmd1bWVudHMubGVuZ3RoID09IDAp
IHsKLQkJCQkJCQlBbGxvY2F0aW9uRXhwcmVzc2lvbiBhbGxvYyA9IChBbGxvY2F0aW9uRXhwcmVz
c2lvbikgaW5uZXJQb2x5OwotCQkJCQkJCWlmICgoYWxsb2MudHlwZS5iaXRzICYgQVNUTm9kZS5J
c0RpYW1vbmQpICE9IDApIHsKLQkJCQkJCQkJLy8gbm90LXlldC1pbmZlcnJlZCBkaWFtb25kOiBl
cmFzdXJlIGNvbXBhdGliaWxpdHkgc2hvdWxkIHN1ZmZpY2UsIGRldGFpbCB3aWxsIGJlIGNoZWNr
ZWQgdXNpbmcgaW5mZXJlbmNlCi0JCQkJCQkJCWlmIChyZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxl
V2l0aCh0YXJnZXRUeXBlLmVyYXN1cmUoKSwgdGhpcykpCi0JCQkJCQkJCQlyZXR1cm4gY29tcGF0
aWJsZTsKLQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCX0KLQkJCQkJCX0K
LQkJCQkJfQotCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4
cHJlc3Npb24pIHsKLQkJCQkJTWV0aG9kQmluZGluZyB1cGRhdGVkTWV0aG9kID0gaW5uZXJQb2x5
LmJpbmRpbmcodGFyZ2V0VHlwZSwgZmFsc2UsIG51bGwpOyAvLyAyLiB0cnkgd2l0aCB1cGRhdGlu
ZwotCQkJCQlpZiAodXBkYXRlZE1ldGhvZCAhPSBpbm5lckJpbmRpbmcgJiYgdXBkYXRlZE1ldGhv
ZCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7
Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcy5pc0NvbXBhdGlibGVXaXRo
KHRhcmdldFR5cGUpKQotCQkJCQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJcmV0dXJuIE5P
VF9DT01QQVRJQkxFOwotCQkJCQkJfSBlbHNlIGlmICh1cGRhdGVkTWV0aG9kLnByb2JsZW1JZCgp
ID09IFByb2JsZW1SZWFzb25zLkFtYmlndW91cykgewotCQkJCQkJCWxldmVsID0gLTI7IC8vIG5l
aXRoZXIgZ29vZCBub3IgYmFkLCBhbnN3ZXIgInVua25vd24iCi0JCQkJCQl9Ci0JCQkJCX0KLQkJ
CQl9Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52b2NBcmcuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0J
CQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKLQkJCQlD
b25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBpbnZvY0Fy
ZzsKLQkJCQlpbnQgbGV2ZWwxID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9k
LCBpbm5lckluZmVyZW5jZUhlbHBlciwgY2UudmFsdWVJZlRydWUsIGFyZ1R5cGUsIGFyZ0xlbiwg
aSwgaXNWYXJBcmdzKTsKLQkJCQlpZiAobGV2ZWwxID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJaW50IGxldmVsMiA9IGNvbXBhdGliaWxpdHlMZXZl
bDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVlSWZGYWxz
ZSwgYXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCWlmIChsZXZlbDIgPT0gTk9U
X0NPTVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQlyZXR1cm4gTWF0
aC5tYXgobGV2ZWwxLCBsZXZlbDIpOwotCQkJfQotCQkJLy8gTEUgb3IgUkU6Ci0JCQlpZiAoaW52
b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCQlyZXR1cm4gQ09N
UEFUSUJMRTsKLQkJCWlmICghaXNWYXJBcmdzWzBdICYmIG1ldGhvZC5pc1ZhcmFyZ3MoKSkgeyAv
LyBjYW4ndCB1c2Ugc2hvdWxkVHJ5VmFyYXJncyB3aXRob3V0IGEgcmVzb2x2ZWRUeXBlLCBzbyBq
dXN0IHRyeSBpdDoKLQkJCQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJCXRhcmdldFR5cGUgPSBJ
bmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCB0cnVl
KTsKLQkJCQlpZiAodGFyZ2V0VHlwZSAhPSBudWxsICYmIGludm9jQXJnLmlzQ29tcGF0aWJsZVdp
dGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQkJCXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7Ci0J
CQl9Ci0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCX0gZWxzZSBpZiAocmVzb2x2ZWRUeXBl
ICE9IG51bGwgJiYgcmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCS8vIG5lZWQg
dG8gaGFuZGxlICJub3JtYWwiIGV4cHJlc3Npb25zIHRvbywgc2luY2UgbWl4ZWQgcG9seS9zdGFu
ZGFsb25lIGFyZ3VtZW50IGxpc3RzIG11c3QgYmUgZnVsbHkgYW5hbHl6ZWQuCi0JCQlyZXR1cm4g
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0J
CX0KLQkJcmV0dXJuIGxldmVsOwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBzaG91bGRUcnlWYXJh
cmdzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZyByZXNvbHZlZFR5cGUsIFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJaWYgKCFtZXRob2QuaXNWYXJhcmdzKCkpCi0JCQlyZXR1
cm4gZmFsc2U7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8g
b2ZmIHJhbmdlCi0JCWlmICh0YXJnZXRUeXBlLmlzQXJyYXlUeXBlKCkgJiYgcmVzb2x2ZWRUeXBl
ICE9IG51bGwgJiYgIXJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRo
aXMpKQotCQkJcmV0dXJuIHRydWU7CS8vIG5vdCBhIGRpcmVjdCBtYXRjaCBidXQgaG9wZSB0byBp
bXByb3ZlCi0JCXJldHVybiBmYWxzZTsKIAl9CiAKIAkvKioKQEAgLTEyNjcsNyArMTEyMSw3IEBA
CiAJCQluZXh0OgogCQkJZm9yIChpbnQgaSA9IHN0YXJ0Rm91bmRTaXplOyBpIDwgZm91bmRTaXpl
OyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGlu
ZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBh
dGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0g
bnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CQkJCQlpZiAoY29uY3JldGVNYXRjaGVzICE9IG51bGwpIHsKQEAgLTEyOTcsOCArMTE1MSw2IEBA
CiAJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOyAvLyBjYW4gYmUgbnVsbAogCQkJfQogCQkJY29u
Y3JldGVNYXRjaCA9IGNhbmRpZGF0ZXNbMF07Ci0JCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEg
Y2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQljb25jcmV0
ZU1hdGNoID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29uY3JldGVNYXRj
aCwgYXJndW1lbnRUeXBlcyk7CiAJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsKQogCQkJCWNv
bXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29uY3JldGVNYXRjaC50
aHJvd25FeGNlcHRpb25zKTsKIAkJCXJldHVybiBjb25jcmV0ZU1hdGNoOwpAQCAtMTM3MSw3ICsx
MjIzLDcgQEAKIAkJCQkvLyB0YXJnZXRpbmcgYSBnZW5lcmljIG1ldGhvZCBjb3VsZCBmaW5kIGFu
IGV4YWN0IG1hdGNoIHdpdGggdmFyaWFibGUgcmV0dXJuIHR5cGUKIAkJCQlpZiAoaW52b2NhdGlv
blNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAhPSBudWxsKSB7CiAJCQkJCS8vIGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKC4uKSB3aWxsIHJldHVybiBhIFBvbHltb3JwaGljTWV0aG9kQmluZGlu
ZyBpZiBuZWVkZWQKLQkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChl
eGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNF
KTsKKwkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhv
ZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCX0gZWxzZSBpZiAoKGV4YWN0
TWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkg
IT0gMCkgewogCQkJCQkvLyBnZW5lcmF0ZSBwb2x5bW9ycGhpYyBtZXRob2QKIAkJCQkJcmV0dXJu
IHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChleGFjdE1ldGhvZCwg
YXJndW1lbnRUeXBlcyk7CkBAIC0xNzYzLDIyICsxNjE1LDEzIEBACiAJCQkvLyBhcmd1bWVudCB0
eXBlIGNvbXBhdGliaWxpdHkgY2hlY2sKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgZm91bmRTaXpl
OyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGlu
ZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBh
dGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0g
bnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CQkJCQlpZiAoZm91bmRTaXplID09IDEgJiYgY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeShy
ZWNlaXZlclR5cGUsIGludm9jYXRpb25TaXRlLCB0aGlzKSkgewogCQkJCQkJCS8vIHJldHVybiB0
aGUgc2luZ2xlIHZpc2libGUgbWF0Y2ggbm93CiAJCQkJCQkJaWYgKHNlYXJjaEZvckRlZmF1bHRB
YnN0cmFjdE1ldGhvZCkKIAkJCQkJCQkJcmV0dXJuIGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2Qo
cmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNs
YXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9kQmluZGluZyBbXSB7Y29tcGF0aWJs
ZU1ldGhvZH0pOwotLy8gPT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVy
aWMgbWV0aG9kczogPT09PQotCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBpbmZlcklu
dm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjb21wYXRpYmxlTWV0aG9kLCBhcmd1bWVudFR5
cGVzKTsKLQkJCQkJCQlpZiAoaW1wcm92ZWQgIT0gbnVsbCAmJiBpbXByb3ZlZC5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkJCQkJCWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsKLQkJCQkJCQl9
IGVsc2UgewotCQkJCQkJCQlwcm9ibGVtTWV0aG9kID0gaW1wcm92ZWQ7Ci0JCQkJCQkJCWNvbnRp
bnVlOwotCQkJCQkJCX0KLS8vID09PT0gMS44ID09PT0KIAkJCQkJCQl1bml0U2NvcGUucmVjb3Jk
VHlwZVJlZmVyZW5jZXMoY29tcGF0aWJsZU1ldGhvZC50aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJ
CQlyZXR1cm4gY29tcGF0aWJsZU1ldGhvZDsKIAkJCQkJCX0KQEAgLTE4ODcsOCArMTczMCw3IEBA
CiAJCQljYXNlIDEgOgogCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJ
CQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0
b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBm
b3VuZCwgbmV3IE1ldGhvZEJpbmRpbmcgW10geyBjYW5kaWRhdGVzWzBdIH0pOwotCQkJCS8vIDEu
ODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAo
MTguNS4yKToKLQkJCQljYW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25T
aXRlLCBjYW5kaWRhdGVzWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQljYW5kaWRhdGUgPSBjYW5k
aWRhdGVzWzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJdW5pdFNjb3BlLnJl
Y29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1
cm4gY2FuZGlkYXRlOwpAQCAtMjM4MCw3ICsyMjIyLDEwIEBACiAJCX0KIAkJaWYgKGV4YWN0TWV0
aG9kID09IG51bGwgfHwgIWV4YWN0TWV0aG9kLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0
aGlzKSkKIAkJCXJldHVybiBudWxsOwotCQlpZiAoZXhhY3RNZXRob2QuaXNWYXJhcmdzKCkgfHwg
ZXhhY3RNZXRob2QudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMg
JiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkKKwkJ
ZmluYWwgVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMoKTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMg
PSBleGFjdE1ldGhvZC50eXBlVmFyaWFibGVzKCk7CisJCWlmIChleGFjdE1ldGhvZC5pc1ZhcmFy
Z3MoKSB8fCAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmICh0
eXBlQXJndW1lbnRzID09IG51bGwgfHwgdHlwZUFyZ3VtZW50cy5sZW5ndGggIT0gdHlwZVZhcmlh
Ymxlcy5sZW5ndGgpKSkKIAkJCXJldHVybiBudWxsOwogCQkKIAkJaWYgKHJlY2VpdmVyVHlwZS5p
c0FycmF5VHlwZSgpKSB7CkBAIC0yMzk1LDYgKzIyNDAsMTAgQEAKIAkJewogCQkJcmV0dXJuIGVu
dmlyb25tZW50KCkuY3JlYXRlR2V0Q2xhc3NNZXRob2QocmVjZWl2ZXJUeXBlLCBleGFjdE1ldGhv
ZCwgdGhpcyk7CiAJCX0KKwkJCisJCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMpIAorCQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2QoZXhhY3RNZXRob2QsIHR5cGVBcmd1bWVudHMpOworCQogCQlyZXR1cm4g
ZXhhY3RNZXRob2Q7CiAJfQogCQkKQEAgLTI0MTcsMTkgKzIyNjYsMjYgQEAKIAkJTWV0aG9kQmlu
ZGluZyBleGFjdENvbnN0cnVjdG9yID0gbnVsbDsKIAkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZl
cmVuY2UocmVjZWl2ZXJUeXBlKTsKIAkJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZl
clR5cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQpOworCQlmaW5hbCBUeXBlQmluZGlu
Z1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1
bWVudHMoKTsKIAkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwg
bGVuZ3RoOyBpKyspIHsKIAkJCU1ldGhvZEJpbmRpbmcgY29uc3RydWN0b3IgPSBtZXRob2RzW2ld
OwogCQkJaWYgKCFjb25zdHJ1Y3Rvci5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykp
CiAJCQkJY29udGludWU7CiAJCQlpZiAoY29uc3RydWN0b3IuaXNWYXJhcmdzKCkpCiAJCQkJcmV0
dXJuIG51bGw7Ci0JCQlpZiAoY29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcu
Tk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMo
KSA9PSBudWxsKQorCQkJaWYgKGNvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTICYmIGdlbmVyaWNUeXBlQXJndW1lbnRzID09IG51bGwpCiAJCQkJ
cmV0dXJuIG51bGw7CiAJCQlpZiAoZXhhY3RDb25zdHJ1Y3RvciA9PSBudWxsKSB7CiAJCQkJZXhh
Y3RDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yOwogCQkJfSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVs
bDsKIAkJCX0KKwkJfQorCQlmaW5hbCBUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxl
cyA9IGV4YWN0Q29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygpOworCQlpZiAodHlwZVZhcmlhYmxl
cyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7CisJCQlpZiAodHlwZVZhcmlhYmxlcy5s
ZW5ndGggIT0gZ2VuZXJpY1R5cGVBcmd1bWVudHMubGVuZ3RoKQorCQkJCXJldHVybiBudWxsOwor
CQkJZXhhY3RDb25zdHJ1Y3RvciA9IGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2QoZXhhY3RDb25zdHJ1Y3RvciwgZ2VuZXJpY1R5cGVBcmd1bWVudHMpOwogCQl9
CiAJCXJldHVybiBleGFjdENvbnN0cnVjdG9yOwogCX0KQEAgLTI0NTgsNyArMjMxNCw3IEBACiAJ
CQlpZiAobWV0aG9kQmluZGluZyAhPSBudWxsICYmIG1ldGhvZEJpbmRpbmcuY2FuQmVTZWVuQnko
aW52b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJCQkgICAgLy8gdGFyZ2V0aW5nIGEgbm9uIGdlbmVy
aWMgY29uc3RydWN0b3Igd2l0aCB0eXBlIGFyZ3VtZW50cyA/CiAJCQkgICAgaWYgKGludm9jYXRp
b25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0gbnVsbCkKLQkJCSAgICAJbWV0aG9kQmlu
ZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7CisJCQkgICAgCW1ldGhvZEJpbmRp
bmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVz
LCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlN
ZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25z
dGFudHMuSU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtMjQ3Miw3ICsyMzI4LDcgQEAK
IAkJCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0
aG9kID0gbnVsbDsKIAkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsg
aSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0g
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlKTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJ
CQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCQljb21wYXRp
YmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC0yNDk1LDggKzIz
NTEsNyBAQAogCQkJCQl2aXNpYmxlW3Zpc2libGVJbmRleCsrXSA9IG1ldGhvZDsKIAkJCX0KIAkJ
CWlmICh2aXNpYmxlSW5kZXggPT0gMSkgewotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBj
aGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlyZXR1cm4g
aW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRU
eXBlcyk7CisJCQkJcmV0dXJuIHZpc2libGVbMF07CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4
ID09IDApCiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZygKQEAgLTI3NjAsNyAr
MjYxNSw3IEBACiAJCQkJCQkJCWlmIChmb3VuZFByb2JsZW0gPT0gbnVsbCkKIAkJCQkJCQkJCWZv
dW5kUHJvYmxlbSA9IHBvc3NpYmxlOyAvLyBhbnN3ZXIgYXMgZXJyb3IgY2FzZSBtYXRjaAogCQkJ
CQkJCX0gZWxzZSBpZiAocG9zc2libGUuaXNTdGF0aWMoKSkgewotCQkJCQkJCQlNZXRob2RCaW5k
aW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCQkJCQlN
ZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChw
b3NzaWJsZSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCQkJCQlpZiAoY29t
cGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5p
c1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuY2FuQmVT
ZWVuQnkodW5pdFNjb3BlLmZQYWNrYWdlKSkgewpAQCAtMzU5Niw4ICszNDUxLDggQEAKIAkJCWZv
ciAoaW50IGkgPSAob25lUGFyYW1zTGVuZ3RoID4gdHdvUGFyYW1zTGVuZ3RoID8gdHdvUGFyYW1z
TGVuZ3RoIDogb25lUGFyYW1zTGVuZ3RoKSAtIDI7IGkgPj0gMDsgaS0tKQogCQkJCWlmIChUeXBl
QmluZGluZy5ub3RFcXVhbHMob25lUGFyYW1zW2ldLCB0d29QYXJhbXNbaV0pICYmICFvbmVQYXJh
bXNbaV0uaXNDb21wYXRpYmxlV2l0aCh0d29QYXJhbXNbaV0pKQogCQkJCQlyZXR1cm4gZmFsc2U7
Ci0JCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVl
LCBmYWxzZSkgPT0gTk9UX0NPTVBBVElCTEUKLQkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKHR3bywgb25lUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gVkFSQVJHU19DT01QQVRJQkxF
KQorCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChvbmUsIHR3b1BhcmFtcywgdHJ1
ZSkgPT0gTk9UX0NPTVBBVElCTEUKKwkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KHR3bywgb25lUGFyYW1zLCB0cnVlKSA9PSBWQVJBUkdTX0NPTVBBVElCTEUpCiAJCQkJcmV0dXJu
IHRydWU7CiAJCX0KIAkJcmV0dXJuIGZhbHNlOwpAQCAtNDM3Miw0NCArNDIyNywxMiBAQAogCXBy
b3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0
aG9kQmluZGluZ1tdIHZpc2libGUsIGludCB2aXNpYmxlU2l6ZSwgVHlwZUJpbmRpbmdbXSBhcmd1
bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgUmVmZXJlbmNl
QmluZGluZyByZWNlaXZlclR5cGUpIHsKIAogCQlib29sZWFuIGlzSmRrMTggPSBjb21waWxlck9w
dGlvbnMoKS5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84OwotCi0JCS8v
IGNvbW1vbiBwYXJ0IGZvciBhbGwgY29tcGxpYW5jZSBsZXZlbHM6CiAJCWludFtdIGNvbXBhdGli
aWxpdHlMZXZlbHMgPSBuZXcgaW50W3Zpc2libGVTaXplXTsKLQkJaW50IGNvbXBhdGlibGVDb3Vu
dCA9IDA7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewotCQkJVHlw
ZUJpbmRpbmdbXSBhcmdUeXBlcyA9IGFyZ3VtZW50VHlwZXM7Ci0JCQlpZiAoaXNKZGsxOCAmJiBp
bnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbm5lckluZmVyZW5j
ZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9ICgoSW52b2NhdGlvbilpbnZvY2F0aW9uU2l0
ZSkuaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlpZiAoaW5uZXJJbmZlcmVuY2VIZWxwZXIg
IT0gbnVsbCkKLQkJCQkJYXJnVHlwZXMgPSBpbm5lckluZmVyZW5jZUhlbHBlci5nZXRBcmd1bWVu
dFR5cGVzRm9yQ2FuZGlkYXRlKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpOwotCQkJfQotCQkJ
aWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KHZpc2libGVbaV0sIGFyZ1R5cGVzKSkgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoaSAh
PSBjb21wYXRpYmxlQ291bnQpIHsKLQkJCQkJdmlzaWJsZVtjb21wYXRpYmxlQ291bnRdID0gdmlz
aWJsZVtpXTsKLQkJCQkJY29tcGF0aWJpbGl0eUxldmVsc1tjb21wYXRpYmxlQ291bnRdID0gY29t
cGF0aWJpbGl0eUxldmVsc1tpXTsKLQkJCQl9Ci0JCQkJY29tcGF0aWJsZUNvdW50Kys7Ci0JCQl9
Ci0JCX0KLS8vIFRPRE86IERpc2FibGVkLCBiZWNhdXNlIHdlIGtub3cgYSBzaXR1YXRpb24gd2hl
cmUgdGhpcyBpcyBleHBlY3RlZCwgc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80Mjk0OTAK
LS8vCQlpZiAoY29tcGF0aWJsZUNvdW50ICE9IHZpc2libGVTaXplKSB7Ci0vLwkJCXByb2JsZW1S
ZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VQcm9ibGVtKCIoUmVjb3ZlcmVkKSBJbnRlcm5hbCBp
bmNvbnNpc3RlbmN5IHdoaWxlIGNoZWNraW5nIGludm9jYXRpb24gYW1iaWd1aXR5IiwgaW52b2Nh
dGlvblNpdGUsIFByb2JsZW1TZXZlcml0aWVzLldhcm5pbmcpOyAvLyROT04tTkxTLTEkCi0vLwkJ
fQotCQlpZiAoY29tcGF0aWJsZUNvdW50ID09IDApIHsKLQkJCXJldHVybiBuZXcgUHJvYmxlbU1l
dGhvZEJpbmRpbmcodmlzaWJsZVswXS5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJl
YXNvbnMuTm90Rm91bmQpOwotCQl9IGVsc2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7Ci0J
CQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlv
blNpdGUsIHZpc2libGVbMF0sIGFyZ3VtZW50VHlwZXMpOwotCQkJaWYgKGNhbmRpZGF0ZSAhPSBu
dWxsKQotCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2Fu
ZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwotCQkJcmV0dXJuIGNhbmRpZGF0ZTsKLQkJfQotCQlp
ZiAoY29tcGF0aWJsZUNvdW50ICE9IHZpc2libGVTaXplKSB7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5
KHZpc2libGUsIDAsIHZpc2libGUgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZSA9IGNv
bXBhdGlibGVDb3VudF0sIDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5
KGNvbXBhdGliaWxpdHlMZXZlbHMsIDAsIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W2Nv
bXBhdGlibGVDb3VudF0sIDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCX0KKwkJZm9yIChpbnQgaSA9
IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKQorCQkJY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJ
CiAJCQogCQlNZXRob2RCaW5kaW5nW10gbW9yZVNwZWNpZmljID0gbmV3IE1ldGhvZEJpbmRpbmdb
dmlzaWJsZVNpemVdOwotCiAJCWlmIChpc0pkazE4KSB7CiAJCQkvLyAxNS4xMi4yLjUgQ2hvb3Np
bmcgdGhlIE1vc3QgU3BlY2lmaWMgTWV0aG9kCiAJCQlpbnQgY291bnQgPSAwOwpAQCAtNDQ2Myw3
ICs0Mjg2LDcgQEAKIAkJCWlmIChjb3VudCA9PSAwKSB7CiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVt
TWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLCB2aXNpYmxlWzBdLnNlbGVjdG9yLCB2aXNpYmxlWzBd
LnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLkFtYmlndW91cyk7CiAJCQl9IGVsc2UgaWYgKGNv
dW50ID09IDEpIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlv
blR5cGUoaW52b2NhdGlvblNpdGUsIG1vcmVTcGVjaWZpY1swXSwgYXJndW1lbnRUeXBlcyk7CisJ
CQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBtb3JlU3BlY2lmaWNbMF07CiAJCQkJaWYgKGNh
bmRpZGF0ZSAhPSBudWxsKQogCQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVS
ZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlk
YXRlOwpAQCAtNDUxNiw3ICs0MzM5LDcgQEAKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlNZXRo
b2RCaW5kaW5nIGFjY2VwdGFibGUgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RUb1Rl
c3QsIHRpZWJyZWFrTWV0aG9kLnBhcmFtZXRlcnMsCi0JCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlv
blNpdGUsIElOVk9DQVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKKwkJ
CQkJCQkJdGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxF
KTsKIAkJCQkJCS8qIFRoZXJlIGFyZSA0IGNob2ljZXMgdG8gY29uc2lkZXIgd2l0aCBjdXJyZW50
ICYgbmV4dCA6CiAJCQkJCQkgZm9vKEIpICYgZm9vKEEpIHdoZXJlIEIgZXh0ZW5kcyBBCiAJCQkJ
CQkgMS4gdGhlIDIgbWV0aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0IGVhY2ggb3RoZXJzIHBh
cmFtZXRlcnMpIC0+IHdhbnQgdG8gY29udGludWUKQEAgLTQ1NDAsOCArNDM2Myw3IEBACiAJCQlp
ZiAoY291bnQgPT0gMSkgewogCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkr
KykgewogCQkJCQlpZiAobW9yZVNwZWNpZmljW2ldICE9IG51bGwpIHsKLQkJCQkJCS8vIDEuODog
R2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTgu
NS4yKToKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlw
ZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQlNZXRo
b2RCaW5kaW5nIGNhbmRpZGF0ZSA9IHZpc2libGVbaV07CiAJCQkJCQlpZiAoY2FuZGlkYXRlICE9
IG51bGwpCiAJCQkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNl
cyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJCQlyZXR1cm4gY2FuZGlkYXRlOwpA
QCAtNDY2Miw4ICs0NDg0LDcgQEAKIAkJCQlpZiAobW9zdFNwZWNpZmljRXhjZXB0aW9ucyAhPSBu
dWxsICYmIG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgIT0gY3VycmVudC50aHJvd25FeGNlcHRpb25z
KSB7CiAJCQkJCXJldHVybiBuZXcgTW9zdFNwZWNpZmljRXhjZXB0aW9uTWV0aG9kQmluZGluZyhj
dXJyZW50LCBtb3N0U3BlY2lmaWNFeGNlcHRpb25zKTsKIAkJCQl9Ci0JCQkJLy8gMS44OiBCZWZv
cmUgcmV0dXJuaW5nIGdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRp
bmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5cGUoaW52b2Nh
dGlvblNpdGUsIGN1cnJlbnQsIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVybiBjdXJyZW50Owog
CQkJfQogCQl9CiAKQEAgLTQ3MjgsOSArNDU0OSw5IEBACiAJfQogCiAJcHVibGljIGludCBwYXJh
bWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5n
W10gYXJndW1lbnRzKSB7Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0
aG9kLCBhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSk7CisJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKIAl9CQotCXB1YmxpYyBpbnQg
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29s
ZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHVibGljIGludCBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJn
dW1lbnRzLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJVHlwZUJpbmRp
bmdbXSBwYXJhbWV0ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCWludCBwYXJhbUxlbmd0aCA9
IHBhcmFtZXRlcnMubGVuZ3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsK
QEAgLTQ3NjIsMTQgKzQ1ODMsMTQgQEAKIAkJCQlUeXBlQmluZGluZyBwYXJhbSA9IHBhcmFtZXRl
cnNbbGFzdEluZGV4XTsgLy8gaXMgYW4gQXJyYXlCaW5kaW5nIGJ5IGRlZmluaXRpb24KIAkJCQlU
eXBlQmluZGluZyBhcmcgPSBhcmd1bWVudHNbbGFzdEluZGV4XTsKIAkJCQlpZiAoVHlwZUJpbmRp
bmcubm90RXF1YWxzKHBhcmFtLCBhcmcpKSB7Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywg
dG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBh
dGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMp
OwogCQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBY
W10sIGlzIGl0IGNhbGxlZCB3aXRoIFgKIAkJCQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBh
cmFtKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJCWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
KSB7CiAJCQkJCQkJYXJnID0gKChBcnJheUJpbmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJ
CQkJCQl9Ci0JCQkJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0s
IGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJs
ZXMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9D
T01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJCWxldmVsID0g
VkFSQVJHU19DT01QQVRJQkxFOyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVlZGVkCiAJCQkJCX0KQEAg
LTQ3NzksNyArNDYwMCw3IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRp
bmcpIHBhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50
IGkgPSBsYXN0SW5kZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcg
YXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEp
KSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1l
bnRzW2ldOwotCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBBVElC
TEUpCisJCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpICYmIHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJn
c01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKIAkJCQkJfQogCQkJCX0gIGVsc2UgaWYgKGxhc3RJbmRleCAhPSBhcmdMZW5ndGgpIHsgLy8g
Y2FuIGNhbGwgZm9vKGludCBpLCBYIC4uLiB4KSB3aXRoIGZvbygxKSBidXQgTk9UIGZvbygpOwpA
QCAtNDc5NSw3ICs0NjE2LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tp
XTsKIAkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChp
ID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVt
ZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
YXJnLHBhcmFtKSkgewotCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsK
IAkJCQlpZiAobmV3TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVybiBOT1RfQ09N
UEFUSUJMRTsKIAkJCQlpZiAobmV3TGV2ZWwgPiBsZXZlbCkKQEAgLTQ4MjQsNyArNDY0NSw3IEBA
CiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CiAJCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVy
Q29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExv
b2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBi
b29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHJpdmF0ZSBpbnQgcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0s
IExvb2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2Rz
KSB7CiAJCS8vIG9ubHkgY2FsbGVkIGlmIGVudi5vcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzUKIAkJaWYgKGFyZyA9PSBudWxsIHx8IHBhcmFtID09IG51bGwp
CiAJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CkBAIC00ODQzLDExICs0NjY0LDYgQEAKIAkJCVR5
cGVCaW5kaW5nIGNvbnZlcnRlZFR5cGUgPSBlbnYuY29tcHV0ZUJveGluZ1R5cGUoYXJnKTsKIAkJ
CWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoY29udmVydGVkVHlwZSwgcGFyYW0pIHx8IGNv
bnZlcnRlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykpCiAJCQkJcmV0dXJuIEFV
VE9CT1hfQ09NUEFUSUJMRTsKLQkJfQotCQlpZiAodG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMg
JiYgKCFhcmcuaXNQcm9wZXJUeXBlKGZhbHNlKSB8fCAhcGFyYW0uaXNQcm9wZXJUeXBlKGZhbHNl
KSkpIHsKLQkJCS8vIGR1cmluZyB0eXBlIGluZmVyZW5jZSBpbnZvbHZpbmcgYSBSZWZlcmVuY2VF
eHByZXNzaW9uIGlnbm9yZSBpbmNvbXBhdGliaWxpdHkgZHVlIHRvIGFuIGluZmVyZW5jZSB2YXJp
YWJsZSwKLQkJCS8vIGtub3dpbmcgdGhhdCB3ZSB3aWxsIHByb2R1Y2UgY29uc3RyYWludHMgdGhh
dCB3aWxsIGVuc3VyZSBjb21wYXRpYmxlIGluc3RhbnRpYXRpb24gKGlmIG9uZSBleGlzdHMpLgot
CQkJcmV0dXJuIENPTVBBVElCTEU7IAogCQl9CiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9
CkBAIC00OTMzLDcgKzQ3NDksNyBAQAogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2Vk
IHdpdGggaWRlbnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZp
c2libGUsIG1vc3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0
aG9kIGlzIG1vZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1l
dGhvZC4KIAkgKi8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJh
bWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3Jp
Z2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIElu
dm9jYXRpb24gYWxsb2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0
aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVy
ZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
VHlwZXMsIGZpbmFsIEludm9jYXRpb25TaXRlIGFsbG9jYXRpb25TaXRlKSB7CiAJCQogCQkvLyBh
bGxvY2F0aW9uVHlwZSBpcyB0aGUgZGlhbW9uZCB0eXBlLiBvcmlnaW5hbEVuY2xvc2luZ1R5cGUg
aXMgdGhlIHJlYWwgZW5jbG9zaW5nIHR5cGUgPT0+IG1heSBiZSBwYXJhbWV0ZXJpemVkLCBwYXJh
bWV0ZXJpemVkIHdpdGggb3duIHR5cGUgdmFyaWFibGVzLCByYXcsIGp1c3QgcGxhaW4gdHlwZSBv
ciBudWxsLgogCQlpbnQgY2xhc3NUeXBlVmFyaWFibGVzQXJpdHkgPSAwOwpAQCAtNTA2MCw3ICs0
ODc2LDcgQEAKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGlu
Z1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkg
PCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0
ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxv
Y2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVN
ZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3Vt
ZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlKTsKIAkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51
bGwpIHsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQlj
b21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC01MDY5
LDEwICs0ODg1LDYgQEAKIAogCQlpZiAoY29tcGF0aWJsZUluZGV4ID09IDApIHsKIAkJCXJldHVy
biBudWxsOwotCQl9Ci0JCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMSkgewotCQkJLy8gMS44OiBH
aXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41
LjIpOgotCQkJY29tcGF0aWJsZVswXSA9IGluZmVySW52b2NhdGlvblR5cGUoYWxsb2NhdGlvblNp
dGUsIGNvbXBhdGlibGVbMF0sIGFyZ3VtZW50VHlwZXMpOwogCQl9CiAJCXJldHVybiBjb21wYXRp
YmxlSW5kZXggPT0gMSA/IGNvbXBhdGlibGVbMF0gOiBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5n
KGNvbXBhdGlibGUsIGNvbXBhdGlibGVJbmRleCwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNp
dGUsIGFsbG9jYXRpb25UeXBlKTsKIAl9CkBAIC01MTQwLDMxICs0OTUyLDUgQEAKIAkJCQlicmVh
azsKIAkJCX0KIAkJfQotCX0KLQotCS8qKgotCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGljYWJs
ZSBtZXRob2QsIGNoZWNrIGlmIGl0IGhhcyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQx
OCBhc3NvY2lhdGVkLgotCSAqIElmIHNvIHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRp
b24gVHlwZSBJbmZlcmVuY2UgYW5kIHJldHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAotCSAqIG90
aGVyd2lzZSByZXR1cm4gdGhlIGFwcGxpY2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KLQkgKi8KLQlw
cm90ZWN0ZWQgTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRl
IGludm9jYXRpb25TaXRlLCBNZXRob2RCaW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10g
YXJndW1lbnRUeXBlcykgewotCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0
aW9uKSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlv
blNpdGU7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewotCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBw
YXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykg
YXBwbGljYWJsZTsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9u
LmdldEluZmVyZW5jZUNvbnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0
eDE4ICE9IG51bGwgJiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZvcihpbnZvY2F0aW9uLmludm9jYXRp
b25UYXJnZXRUeXBlKCkpKSB7Ci0JCQkJCXJldHVybiBpbmZDdHgxOC5pbmZlckludm9jYXRpb25U
eXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJ
CX0KLQkJCX0gZWxzZSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVu
dHMoaW52b2NhdGlvbiwgYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcyk7Ci0JCQl9Ci0J
CX0gZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9u
KSB7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykKLQkJCQlhcHBsaWNhYmxlID0gYXBwbGljYWJsZS5zaGFsbG93T3JpZ2luYWwo
KTsKLQkJCWlmIChhcHBsaWNhYmxlLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVf
VkFSSUFCTEVTKQotCQkJCXJldHVybiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcu
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QoYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcywg
aW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKLQkJfQotCQlyZXR1cm4gYXBwbGljYWJs
ZTsKIAl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRo
b2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5k
aW5nLmphdmEKaW5kZXggOTM4NDljZC4uMWM0ZDc0NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTcsMzEgKzE3LDggQEAKICAq
LwogcHVibGljIGNsYXNzIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIGV4dGVuZHMgTWV0
aG9kQmluZGluZyB7CiAKLQlwcml2YXRlIE1ldGhvZEJpbmRpbmcgc3RhdGljRmFjdG9yeUZvcjsK
LQlwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OwotCXByaXZhdGUgUmVmZXJl
bmNlQmluZGluZyBlbmNsb3NpbmdUeXBlOwotCQogCXB1YmxpYyBTeW50aGV0aWNGYWN0b3J5TWV0
aG9kQmluZGluZyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJv
bm1lbnQsIFJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSkgewogCQlzdXBlcihtZXRob2Qu
bW9kaWZpZXJzIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYywgVHlwZUNvbnN0YW50cy5T
WU5USEVUSUNfU1RBVElDX0ZBQ1RPUlksCiAJCQkJbnVsbCwgbnVsbCwgbnVsbCwgbWV0aG9kLmRl
Y2xhcmluZ0NsYXNzKTsKLQkJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50OwotCQl0aGlz
LnN0YXRpY0ZhY3RvcnlGb3IgPSBtZXRob2Q7Ci0JCXRoaXMuZW5jbG9zaW5nVHlwZSA9IGVuY2xv
c2luZ1R5cGU7Ci0JfQotCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlwZSBhcmd1bWVudHMgb24g
dGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3RydWN0b3IgYmVpbmcgcmVw
cmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJsaWMgUGFyYW1ldGVyaXpl
ZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGlu
Z1tdIHR5cGVBcmd1bWVudHMpIHsKLQkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlw
ZSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUodGhpcy5kZWNsYXJp
bmdDbGFzcywgdHlwZUFyZ3VtZW50cywKLQkJCQkJCQkJCQkJCQkJCQkJCQkJCQl0aGlzLmVuY2xv
c2luZ1R5cGUpOwotCQlmb3IgKE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA6IHBh
cmFtZXRlcml6ZWRUeXBlLm1ldGhvZHMoKSkgewotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2Qu
b3JpZ2luYWwoKSA9PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJcmV0dXJuIChQYXJhbWV0
ZXJpemVkTWV0aG9kQmluZGluZykgcGFyYW1ldGVyaXplZE1ldGhvZDsKLQkJCWlmIChwYXJhbWV0
ZXJpemVkTWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQlNZXRo
b2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpcGFyYW1ldGVy
aXplZE1ldGhvZCkuY2xvc2VzdE1hdGNoOwotCQkJCWlmIChjbG9zZXN0TWF0Y2ggaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyAmJiBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSA9
PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJCXJldHVybiAoUGFyYW1ldGVyaXplZE1ldGhv
ZEJpbmRpbmcpIGNsb3Nlc3RNYXRjaDsKLQkJCX0KLQkJfQotCQl0aHJvdyBuZXcgSWxsZWdhbEFy
Z3VtZW50RXhjZXB0aW9uKCJUeXBlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIG1ldGhvZD8iKTsgLy8k
Tk9OLU5MUy0xJAogCX0KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247629</attachid>
            <date>2014-10-05 08:15:00 -0400</date>
            <delta_ts>2014-10-05 09:22:16 -0400</delta_ts>
            <desc>Cumulative patch</desc>
            <filename>FANDG-reintegration.patch</filename>
            <type>text/plain</type>
            <size>188657</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uZDY4MzI4OSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTMwMTUsNiArMzA0NCw4IEBACiAJCQkifVxuIn0pOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzE1OCgpIHsKKyAgdHJ5IHsKKwl0aGlzLnNob3VsZFN3
YWxsb3dDYXB0dXJlSWQgPSB0cnVlOyAvLyB0aGlzIHRlc3QgZXhoaWJpdHMgc29tZSBub24tZGV0
ZXJtaW5pc20gaW4gY2FwdHVyZSBpZHMuIGp1c3QgY29tcGFyZSBpZ25vcmluZyBpZCwgYnV0IGVz
dGFibGlzaGluZyBwcmVzZW5jZSBvZiBjYXB0dXJlLgogCXJ1bk5lZ2F0aXZlVGVzdCgKIAkJbmV3
IFN0cmluZ1tdIHsKIAkJCSJDb2xsZWN0b3JzTWFwcy5qYXZhIiwKQEAgLTMwNDYsOCArMzA3Nywx
MSBAQAogCQkiMS4gRVJST1IgaW4gQ29sbGVjdG9yc01hcHMuamF2YSAoYXQgbGluZSAyMClcbiIg
KyAKIAkJIglwIC0+IHAubGhzLnN0cmVhbSgpLm1hcChwOjprZWVwaW5nUmhzKSkuY29sbGVjdChc
biIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5e
XlxuIiArIAotCQkiVGhlIG1ldGhvZCBjb2xsZWN0KENvbGxlY3Rvcjw/IHN1cGVyIE9iamVjdCxB
LFI+KSBpbiB0aGUgdHlwZSBTdHJlYW08T2JqZWN0PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoQ29sbGVjdG9yPENvbGxlY3RvcnNNYXBzLlBhaXI8U3RyaW5nLFN0cmluZz4s
Y2FwdHVyZSMzLW9mID8sTWFwPFN0cmluZyxMaXN0PFN0cmluZz4+PilcbiIgKyAKKwkJIlRoZSBt
ZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUg
U3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxl
Y3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8
U3RyaW5nLExpc3Q8U3RyaW5nPj4+KVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CisgIH0gZmlu
YWxseSB7CisJdGhpcy5zaG91bGRTd2FsbG93Q2FwdHVyZUlkID0gZmFsc2U7CQorICB9CiB9CiBw
dWJsaWMgdm9pZCBfdGVzdEJ1ZzQzMjYyNigpIHsKIAlydW5Db25mb3JtVGVzdCgKQEAgLTMzMzYs
NyArMzM3MCw3IEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3Ry
aW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xu
IiArCkBAIC0zMzc4LDE3ICszNDEyLDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwK
LQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQg
bGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhp
cy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0t
LVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiAr
IAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRo
KSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUg
RHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxu
IiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGIwNTk4NWIu
LjhkMmRmY2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJk
YUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MjkwLDEzICs0MjkwLDEzIEBACiAJCQki
LS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMSlcbiIg
KyAKIAkJCSIJcGVyc29ucy5zb3J0KENvbXBhcmF0b3IuY29tcGFyaW5nKENvbXBhcmF0b3IubnVs
bHNMYXN0KFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFibGUpKSk7XG4iICsgCi0JCQkiCSAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAot
CQkJIlRoZSBtZXRob2QgbnVsbHNMYXN0KENvbXBhcmF0b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5
cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoUGVyc29u
Ojo8UnVubmFibGU+aXNSdW5uYWJsZSlcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCBjb21wYXJpbmcoRnVuY3Rpb248PyBz
dXBlciBULD8gZXh0ZW5kcyBVPikgaW4gdGhlIHR5cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGlj
YWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29tcGFyYXRvcjxPYmplY3Q+KVxuIiArIAogCQkJIi0t
LS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CiAJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHBy
ZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZl
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzUwMTEwOS4uMWExMGQxZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05MTE4LDExICs5MTE4LDEyIEBACiAJCQki
CX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5vdGU6IG5ldyBtZXNzYWdlIGFsaWducyBi
ZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJRnVuY3Rpb248Q0w8SW50ZWdlcj4sIFN0
cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdHlwZSBDTCBkb2VzIG5vdCBk
ZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAK
KwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9uLXN0YXRpYyBtZXRo
b2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiAr
IAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCSIJdjUgPSB0IC0+
IHQubWV0aG9kMSgpOwlcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQppbmRleCA1M2ZjNTk5Li5lMDMw
M2Y0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFu
bm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVs
bFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC02NzQwLDYgKzY3NDAsNyBAQAogCQkJIn1cbiIg
KwogCQkJIn1cbiIsCiAJCX0sCisJCS8vIE5vdGU6IHdlIHVzZWQgdG8gZW1pdCBhIGR1cGxpY2F0
ZSBtZXNzYWdlIG9mIDIuIEZpeGVkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChw
IC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7
XG4iICsgCkBAIC02NzQ3LDExICs2NzQ4LDYgQEAKIAkJIlRoZSBjb25zdHJ1Y3RvciBQYWlyPFBh
dGgsT2JqZWN0PihQYXRoLCAoPG5vIHR5cGU+IHApIC0+IHt9KSBpcyB1bmRlZmluZWRcbiIgKyAK
IAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCi0JCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRv
RmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKLQkJIlRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIzLiBFUlJP
UiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAogCQkiCWZpbHRlcjIubWFw
KHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkp
KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhp
cyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIApkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpp
bmRleCBlZDIwNGI1Li40ZWEwMTA4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpAQCAtNjAsMTAgKzYwLDcgQEAKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYWNrYWdl
QmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
UHJvYmxlbU1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNvdXJjZVR5cGVCaW5kaW5nOwpAQCAtMzI4
LDcgKzMyNSw3IEBACiAJcHVibGljIEFTVE5vZGUoKSB7CiAKIAkJc3VwZXIoKTsKLQl9CisJfQkK
IAlwcml2YXRlIHN0YXRpYyBpbnQgY2hlY2tJbnZvY2F0aW9uQXJndW1lbnQoQmxvY2tTY29wZSBz
Y29wZSwgRXhwcmVzc2lvbiBhcmd1bWVudCwgVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSwgVHlw
ZUJpbmRpbmcgYXJndW1lbnRUeXBlLCBUeXBlQmluZGluZyBvcmlnaW5hbFBhcmFtZXRlclR5cGUp
IHsKIAkJYXJndW1lbnQuY29tcHV0ZUNvbnZlcnNpb24oc2NvcGUsIHBhcmFtZXRlclR5cGUsIGFy
Z3VtZW50VHlwZSk7CiAKQEAgLTY1MCwxMjAgKzY0Nyw0MSBAQAogCS8qKgogCSAqIEFmdGVyIG1l
dGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4
cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBh
cmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJv
dmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYgdGhp
cyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRh
dGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVuZGVk
IHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGluIGNo
ZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9jYXRp
b24gdGhlIG91dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBAcGFy
YW0gbWV0aG9kQmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkg
aW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUg
YXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZv
Y2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIG1ldGhvZCBsb29rdXAu
Ci0JICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0g
bWV0aG9kIHRoZSBtZXRob2QgcHJvZHVjZWQgYnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZpbmcg
dHlwZSBpbmZlcmVuY2UpLgorCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVudCB0
eXBlcyBhcyBjb2xsZWN0ZWQgZnJvbSBmaXJzdCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24gYXJn
dW1lbnRzIGFuZCBhcyB1c2VkIGZvciB0aGUgbWV0aG9kIGxvb2t1cC4KKwkgKiBAcGFyYW0gc2Nv
cGUgc2NvcGUgZm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJlc29s
dmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJp
bmRpbmcgbWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29wZSBz
Y29wZSkgewotCQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1YmxpYyBz
dGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZv
Y2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVz
LCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kID0g
bWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQcm9i
bGVtTWV0aG9kQmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xvc2Vz
dE1hdGNoIDogbnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJu
OwotCQlpbnQgcHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0
aG9kOwotCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5kaWRh
dGVNZXRob2QgPSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1ldGhv
ZEJpbmRpbmcucHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1NZXRo
b2RCaW5kaW5nKSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0JCQlj
YW5kaWRhdGVNZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0gbnVs
bCkgewotCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJn
cygpOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2FuZGlk
YXRlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJCQlp
bmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRo
b2RCaW5kaW5nKSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkgewot
CQkJCQlpZiAoaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVf
SU5GRVJSRUQpIHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2YgVFlQ
RV9JTkZFUlJFRAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJCQkv
LyAtIGFib3ZlIHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJCX0K
LQkJCQkJdmFyaWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlmIG5v
IGluZkN0eCBpcyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBpcyBh
IHZhcmFyZ3MgaW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24gaW5z
dGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25FeHBy
ZXNzaW9uKWludm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQotCQkJ
CQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJpbmRp
bmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHByZXNz
aW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhwcmVz
c2lvbiBbXSBhcmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0gbnVs
bCAmJiB2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVu
Z3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGluZyBs
YXN0UGFyYW0gPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJlc3Np
b24gbGFzdEFyZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChsYXN0
QXJnLmlzQ29tcGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJsZUFy
aXR5ID0gZmFsc2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFy
Z3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykg
ewotCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJpbmRp
bmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVy
VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFy
aWFibGVBcml0eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVtUmVh
c29uICE9IFByb2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVj
aCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5z
IGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2Yg
TGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNFcnJv
cnMoKSkKLQkJCQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhhcyBl
cnJvcnMKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQkJ
SW52b2NhdGlvbiBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJCQkJ
TWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1ldGVy
VHlwZSwgdHJ1ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ29u
dGV4dCA9IGlubmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRN
ZXRob2QpOwotCQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYgKCFp
bm5lckNvbnRleHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFyZ3Vt
ZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmluZGlu
ZyBpbXByb3ZlZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5l
ckludm9jYXRpb24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJvdmVk
QmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVwb3J0
SW52YWxpZEludm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwotCQkJ
CQkJCQl9Ci0JCQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1wcm92
ZWRCaW5kaW5nLCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7Ci0J
CQkJCQkJCX0KLQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVkIDwg
SW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJDb250
ZXh0LnJlYmluZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2NhdGlv
bik7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0aGVz
ZSBoYXZlIGJlZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJCQl9
Ci0JCQkJfQotCi0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJCQkv
LyBwb2x5IGV4cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0byBi
ZSByZXNvbHZlZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENv
bXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJCXVw
ZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMgY2Fz
ZSBhcmd1bWVudCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4LmFj
Y2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFyZ3Vt
ZW50VHlwZSA9IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0ZXJU
eXBlLCBzY29wZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNvbnMu
Tm9FcnJvciAvLyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRUeXBl
ICE9IG51bGwJCQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJCQkJ
CSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykpCi0J
CQkJCXsKLQkJCQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9zZWQg
dG8gYmUgb3duZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIgdG8g
Z2l2ZSBiZXR0ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlhcmd1
bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJYm9v
bGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlmaW5h
bCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVyczsK
KwkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJCWlm
ICh2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3Ro
ID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0
aC0xXS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0sIHNj
b3BlKSkgeworCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZvY2F0
aW9uLmlubmVyVXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZl
UG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5k
aW5nIG1ldGhvZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9jYXRp
b24uYXJndW1lbnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlhcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0JCQlm
b3IgKGludCBpID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3Vt
ZW50VHlwZXNbaV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAoaW50
IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3Ro
OyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNb
aV07CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4Lmdl
dFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJhbWV0
ZXJUeXBlID09IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3aXRo
b3V0IGEgdGFyZ2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSByZXNv
bHZlIGVycm9yCisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJCQlh
cmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRpbmcg
dXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJCQkJ
aWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBMRS5y
ZXNvbHZlVHlwZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUgZG9l
cyBub3QgZGV0ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxhbWJk
YUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJCQlp
ZiAoIWxhbWJkYS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBsYW1i
ZGEuaGFzRXJyb3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0ZWRB
cmd1bWVudFR5cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBCaW5k
aW5nLlBPTFlfVFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5
cGU7CisJCQl9CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRp
b24sIG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJsaWMg
c3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90YXRp
b25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA2MjRhYTQ3Li44N2RhYmE3IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxv
Y2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03NywyOSArNzcsMTAgQEAKIAogCSAvLyBob2xkIG9u
IHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2Ug
dW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgog
CXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQTUIsSUMxOD4qLyBpbmZlcmVuY2VDb250ZXh0
czsKLQlwcm90ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7
CisJcHJpdmF0ZSBCbG9ja1Njb3BlIGVuY2xvc2luZ1Njb3BlOworCXByaXZhdGUgYm9vbGVhbiBh
cmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJp
bmRpbmcuTk9fUEFSQU1FVEVSUzsKLQotCS8qKiBSZWNvcmQgdG8ga2VlcCBzdGF0ZSBiZXR3ZWVu
IGRpZmZlcmVudCBwYXJ0cyBvZiByZXNvbHV0aW9uLiAqLwotCVJlc29sdXRpb25TdGF0ZSBzdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGU7Ci0JY2xhc3MgUmVzb2x1dGlvblN0YXRlIHsKLQkJQmxvY2tT
Y29wZSBzY29wZTsKLQkJYm9vbGVhbiBpc0RpYW1vbmQ7Ci0JCWJvb2xlYW4gZGlhbW9uZE5lZWRz
RGVmZXJyaW5nOwotCQlib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKLQkJYm9vbGVhbiBjYW5ub3RJ
bmZlckRpYW1vbmQ7IC8vIHJlcXVlc3QgdGhlIGFuIGVycm9yIGJlIHJlcG9ydGVkIGluIGR1ZSB0
aW1lCi0JCWJvb2xlYW4gaGFzUmVwb3J0ZWRFcnJvcjsKLQotCQlSZXNvbHV0aW9uU3RhdGUoQmxv
Y2tTY29wZSBzY29wZSwgYm9vbGVhbiBpc0RpYW1vbmQsIGJvb2xlYW4gZGlhbW9uTmVlZHNEZWZl
cnJpbmcsCi0JCQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcykKLQkJewotCQkJdGhpcy5zY29wZSA9IHNjb3BlOwotCQkJdGhpcy5pc0RpYW1vbmQg
PSBpc0RpYW1vbmQ7Ci0JCQl0aGlzLmRpYW1vbmROZWVkc0RlZmVycmluZyA9IGRpYW1vbk5lZWRz
RGVmZXJyaW5nOwotCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSBhcmdzQ29udGFpbkNhc3Q7Ci0J
CX0KLQl9Ci0KKwkKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJl
bnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJ
Ly8gY2hlY2sgY2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBpbiBjdXJyZW50IGNv
bnRleHQgKDI2MTM0KQogCWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxpemF0aW9uSWZOZWNlc3Nh
cnkoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVyYXN1cmUo
KSwgY3VycmVudFNjb3BlLCBmbG93SW5mbyk7CkBAIC0zNDAsMTg3ICszMjEsMTUyIEBACiAJLy8g
UHJvcGFnYXRlIHRoZSB0eXBlIGNoZWNraW5nIHRvIHRoZSBhcmd1bWVudHMsIGFuZCBjaGVjayBp
ZiB0aGUgY29uc3RydWN0b3IgaXMgZGVmaW5lZC4KIAlmaW5hbCBib29sZWFuIGlzRGlhbW9uZCA9
IHRoaXMudHlwZSAhPSBudWxsICYmICh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25k
KSAhPSAwOwogCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5j
b21waWxlck9wdGlvbnMoKTsKLQlib29sZWFuIGRpYW1vbmROZWVkc0RlZmVycmluZyA9IGZhbHNl
OwogCWxvbmcgc291cmNlTGV2ZWwgPSBjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWw7CiAJaWYg
KHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CiAJCXRoaXMuY29uc3Rh
bnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCXRoaXMuZW5jbG9zaW5nU2NvcGUgPSBzY29w
ZTsKIAkJaWYgKHRoaXMudHlwZSA9PSBudWxsKSB7CiAJCQkvLyBpbml0aWFsaXphdGlvbiBvZiBh
biBlbnVtIGNvbnN0YW50CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHNjb3BlLmVuY2xvc2luZ1Jl
Y2VpdmVyVHlwZSgpOwogCQl9IGVsc2UgewogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5
cGUucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pOwotCQkJaWYgKGlz
RGlhbW9uZCAmJiB0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNv
bnRleHQgPT0gSU5WT0NBVElPTl9DT05URVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzgpIHsKLQkJCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0
aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQotCQkJCQlkaWFtb25kTmVlZHNEZWZl
cnJpbmcgPSB0cnVlOwotCQkJfQogCQl9Ci0JfSBlbHNlIHsKLQkJdGhpcy5yZXNvbHZlZFR5cGUg
PSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlOwotCX0KLQotCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkg
ewotCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwgdGhpcy5yZXNvbHZlZFR5cGUp
OwotCQljaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOiB7Ci0JCQlpZiAodGhpcy50eXBlIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxs
b3cgbmV3IFg8U3RyaW5nPi5ZPEludGVnZXI+KCkKLQkJCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJl
bnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNvbHZlZFR5cGU7Ci0JCQkJaWYgKGN1
cnJlbnRUeXBlID09IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsKLQkJCQlkbyB7Ci0JCQkJCS8v
IGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9yIHRvcGxldmVsIHR5cGVzCi0JCQkJCWlm
ICgoY3VycmVudFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYykg
IT0gMCkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKLQkJCQkJaWYgKGN1cnJl
bnRUeXBlLmlzUmF3VHlwZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOwot
CQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkh
PSBudWxsKTsKLQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSBxUmVmID0g
KFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlzLnR5cGU7Ci0JCQkJZm9y
IChpbnQgaSA9IHFSZWYudHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgewot
CQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsKLQkJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRp
b24odGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCQkJCQlicmVhazsKKwkJaWYgKHRo
aXMudHlwZSAhPSBudWxsKSB7CisJCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwg
dGhpcy5yZXNvbHZlZFR5cGUpOworCQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjogewor
CQkJCWlmICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJl
ZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQorCQkJCQlS
ZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNv
bHZlZFR5cGU7CisJCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVudFR5
cGU7CisJCQkJCWRvIHsKKwkJCQkJCS8vIGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9y
IHRvcGxldmVsIHR5cGVzCisJCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNz
RmlsZUNvbnN0YW50cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb247CisJCQkJCQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNr
UGFyYW1ldGVyaXplZEFsbG9jYXRpb247CisJCQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1
cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkhPSBudWxsKTsKKwkJCQkJUGFyYW1ldGVyaXplZFF1
YWxpZmllZFR5cGVSZWZlcmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJl
ZmVyZW5jZSkgdGhpcy50eXBlOworCQkJCQlmb3IgKGludCBpID0gcVJlZi50eXBlQXJndW1lbnRz
Lmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7CisJCQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRz
W2ldICE9IG51bGwpIHsKKwkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVh
bGlmaWVkUGFyYW1ldGVyaXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZl
ZFR5cGUpOworCQkJCQkJCWJyZWFrOworCQkJCQkJfQogCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9
Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJ
Ly8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAogCi0JLy8gcmVz
b2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAo
dGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFy
Z3VtZW50cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRz
W2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5j
ZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsK
LQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlw
ZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQot
CQlpZiAoaXNEaWFtb25kKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90
V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOwotCQkJcmV0dXJu
IG51bGw7Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9y
IChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7
Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJLy8gcmVzb2x2
ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRo
aXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJn
dW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsg
aSsrKSB7CisJCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1l
bnRzW2ldOworCQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZl
cmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxs
KSB7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CisJCQkJaWYgKGFyZ0hhc0Vycm9y
ICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgeworCQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwogCQkJ
CX0KIAkJCX0KLQkJCXJldHVybiBudWxsOworCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJCXNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRo
aXMudHlwZUFyZ3VtZW50cyk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQlpZiAoYXJnSGFz
RXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRl
bXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlz
LmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNb
aV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOwor
CQkJfQogCQl9Ci0JfQogCi0JLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCi0JYm9v
bGVhbiBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVs
bCkgewotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7Ci0JCWludCBsZW5ndGggPSB0aGlz
LmFyZ3VtZW50cy5sZW5ndGg7Ci0JCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGlu
Z1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlFeHBy
ZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07Ci0JCQlpZiAoYXJndW1lbnQgaW5z
dGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVu
bmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCi0JCQkJYXJnc0NvbnRh
aW5DYXN0ID0gdHJ1ZTsKKwkJLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCisJCWlm
ICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFs
c2U7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1l
bnRzW2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJ
CQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxs
IGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9
CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsK
KwkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdh
cyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJ
CWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKSB7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CiAJCQl9Ci0JCQlh
cmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYg
KHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKLQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVj
dGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJaWYgKCh0aGlz
LmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwp
IHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0g
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigp
IHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFy
Z3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNl
SGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5u
ZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJ
CS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTks
IGlmIGFyZ3VtZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4g
Y2FzZS4KKwkJCWlmIChhcmdIYXNFcnJvcikgeworCQkJCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVycm9y
cywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KIAkJCSAgIE5vIG1lYW5pbmdm
dWwgdHlwZSByZXNvbHV0aW9uIGlzIHBvc3NpYmxlIHNpbmNlIGluZmVyZW5jZSBvZiB0aGUgZWxp
ZGVkIHR5cGVzIGlzIGZ1bGx5IHRpZWQgdG8gYXJndW1lbnQgdHlwZXMuIERvCiAJCQkgICBub3Qg
cmV0dXJuIHRoZSBwYXJ0aWFsbHkgcmVzb2x2ZWQgdHlwZS4KLQkJCSAqLwotCQkJaWYgKGlzRGlh
bW9uZCkgewotCQkJCXJldHVybiBudWxsOyAvLyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhp
cy5yZXNvbHZlZFR5cGUKLQkJCX0KLQkJCWlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9m
IFJlZmVyZW5jZUJpbmRpbmcpIHsKLQkJCQkvLyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xp
ZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCi0JCQkJ
VHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJ
Zm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KSB7Ci0JCQkJCXBzZXVkb0FyZ3NbaV0gPSB0
aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFy
Z3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlw
ZQorCQkJCSAqLworCQkJCWlmIChpc0RpYW1vbmQpIHsKKwkJCQkJcmV0dXJuIG51bGw7IC8vIG5v
dCB0aGUgcGFydGlhbGx5IGNvb2tlZCB0aGlzLnJlc29sdmVkVHlwZQogCQkJCX0KLQkJCQl0aGlz
LmJpbmRpbmcgPSBzY29wZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSwgVHlwZUNvbnN0YW50cy5JTklULCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7Ci0J
CQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRp
bmcoKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCQkJCS8vIHJlY29yZCB0aGUg
Y2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewot
CQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGlu
Zy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAotCQkJCQkJCS8vIHNob3Vs
ZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNv
bnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5KQotCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNj
b3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2Vz
dE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZyludWxsKTsKLQkJCQkJCX0KLQkJCQkJ
CXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2Vz
dE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKTsKLQkJCQkJCWlmIChjbG9z
ZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlz
RGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgewotCQkJCQkJCS8vIGlnbm9y
ZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChl
LmcuIGRpcmVjdCByZWN1cnNpb25zKQotCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlm
aWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCWlmICh0
aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJLy8g
cmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3Nz
aWJsZSBjb25zdHJ1Y3RvciBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49
IDA7KSB7CisJCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51
bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNl
IGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKKwkJCQkJfQorCQkJCQl0aGlzLmJpbmRp
bmcgPSBzY29wZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSwgVHlwZUNvbnN0YW50cy5JTklULCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7CisJCQkJCWlm
ICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkp
IHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmlu
ZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKKwkJCQkJCS8vIHJlY29yZCB0aGUgY2xv
c2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9z
c2libGUgbWV0aG9kIG1hdGNoCisJCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKKwkJ
CQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCisJCQkJCQkJCS8vIHNob3Vs
ZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNv
bnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5KQorCQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBz
Y29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nl
c3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7CisJCQkJCQkJfQorCQkJ
CQkJCXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7CisJCQkJCQkJaWYg
KGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2Nv
cGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7CisJCQkJCQkJCS8v
IGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRz
ZWxmIChlLmcuIGRpcmVjdCByZWN1cnNpb25zKQorCQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5h
bC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJ
CQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CisJCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRU
eXBlOwogCQkJfQorCQl9CisJCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlz
LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQor
CisJCS8vIG51bGwgdHlwZSBkZW5vdGVzIGZha2UgYWxsb2NhdGlvbiBmb3IgZW51bSBjb25zdGFu
dCBpbml0cworCQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRUeXBlLmNh
bkJlSW5zdGFudGlhdGVkKCkpIHsKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdElu
c3RhbnRpYXRlKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwogCQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwogCQl9CiAJfQotCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8
ICF0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCXJldHVybiBudWxsOwot
CX0KLQotCS8vIG51bGwgdHlwZSBkZW5vdGVzIGZha2UgYWxsb2NhdGlvbiBmb3IgZW51bSBjb25z
dGFudCBpbml0cwotCWlmICh0aGlzLnR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUu
Y2FuQmVJbnN0YW50aWF0ZWQoKSkgewotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJ
bnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKLQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwotCX0KLQlSZXNvbHV0aW9uU3RhdGUgc3RhdGUgPSBuZXcgUmVzb2x1dGlv
blN0YXRlKHNjb3BlLCBpc0RpYW1vbmQsIGRpYW1vbmROZWVkc0RlZmVycmluZywgYXJnc0NvbnRh
aW5DYXN0LCB0aGlzLmFyZ3VtZW50VHlwZXMpOwotCWlmIChkaWFtb25kTmVlZHNEZWZlcnJpbmcp
IHsKLQkJdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBzdGF0ZTsgLy8gcmVzb2x2aW5n
IHRvIGJlIGNvbnRpbnVlZCBsYXRlciAodmlhIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkpLgotCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKLQl9Ci0KLQlpZiAoIXJl
c29sdmVQYXJ0MihzdGF0ZSkpCi0JCXJldHVybiBudWxsOwotCXJldHVybiByZXNvbHZlUGFydDMo
c3RhdGUpOwotfQotCi0vKiogU2Vjb25kIHBhcnQgb2YgcmVzb2x2aW5nIHRoYXQgbWF5IGhhcHBl
biBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbi4gKi8KLWJvb2xlYW4g
cmVzb2x2ZVBhcnQyKFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCS8vIFRPRE86IGFsbCBpbmZv
cm1hdGlvbiBwZXJzaXN0ZWQgZHVyaW5nIHRoaXMgbWV0aG9kIG1heSBuZWVkIHRvIGJlIHN0b3Jl
ZCBwZXIgdGFyZ2V0VHlwZT8KLQlpZiAoc3RhdGUuaXNEaWFtb25kKSB7Ci0JCVJlZmVyZW5jZUJp
bmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7Ci0JCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMg
PSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2
ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRU
eXBlcywgc3RhdGUuc2NvcGUpOwotCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7Ci0JCQlp
ZiAoIXN0YXRlLmRpYW1vbmROZWVkc0RlZmVycmluZykgewotCQkJCXN0YXRlLnNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJc3RhdGUuaGFz
UmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwotCQkJ
fSBlbHNlIHsKLQkJCQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSB0cnVlOyAvLyBkZWZlciBy
ZXBvcnRpbmcKLQkJCX0KLQkJCXJldHVybiBmYWxzZTsKKwkKKwlpZiAoaXNEaWFtb25kICYmIHRo
aXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZP
Q0FUSU9OX0NPTlRFWFQgJiYgc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkgeworCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlw
ZS5pc1ZhbGlkQmluZGluZygpKSB7CisJCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlz
KTsKIAkJfQotCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBz
dGF0ZS5zY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNU
eXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7Ci0JCXN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCA9
IGZhbHNlOwotIAl9Ci0JUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUgPSAoUmVmZXJlbmNl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7Ci0JdGhpcy5iaW5kaW5nID0gZmluZENvbnN0cnVj
dG9yQmluZGluZyhzdGF0ZS5zY29wZSwgdGhpcywgcmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50
VHlwZXMpOwotCXJldHVybiB0cnVlOwotfQotCi0vKiogRmluYWwgcGFydCBvZiByZXNvbHZpbmcg
KG9uY2UpOiBjaGVjayBhbmQgcmVwb3J0IHZhcmlvdXMgZXJyb3IgY29uZGl0aW9ucy4gKi8KLVR5
cGVCaW5kaW5nIHJlc29sdmVQYXJ0MyhSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQlpZiAodGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiB0aGlzLnN1c3BlbmRlZFJlc29s
dXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7
Ci0JdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBudWxsOwotCWlmIChzdGF0ZS5jYW5u
b3RJbmZlckRpYW1vbmQpIHsKLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90
SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVs
bDsKIAl9CisJCisJaWYgKGlzRGlhbW9uZCkgeworCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNU
eXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5l
cmljVHlwZSgpOworCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUg
PSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBl
LCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUo
KSk7CisJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBh
cmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMu
YXJndW1lbnRUeXBlcywgc2NvcGUpOworCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CisJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwor
CQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKKwkJfQorCQl0aGlzLnJlc29sdmVk
VHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7Cisg
CX0KKwkKKwlSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5n
KSB0aGlzLnJlc29sdmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5k
aW5nKHNjb3BlLCB0aGlzLCByZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJUmVm
ZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZTsKKwkKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5k
aW5nLmRlY2xhcmluZ0NsYXNzID0gYWxsb2NhdGlvblR5cGU7CkBAIC01MjgsMzAgKzQ3NCwyOSBA
QAogCQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkgewogCQkJcmV0dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJp
bmRpbmcpOwogCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5k
aW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLm1pc3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlz
LmJpbmRpbmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3Ry
dWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRl
ZCh0aGlzLmJpbmRpbmcsIHN0YXRlLnNjb3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYg
KGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhp
cyk7CiAJfQotCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGws
IGFsbG9jYXRpb25UeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHN0YXRlLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKKwlpZiAoY2hlY2tJbnZv
Y2F0aW9uQXJndW1lbnRzKHNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5n
LCB0aGlzLmFyZ3VtZW50cywgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2Fz
dCwgdGhpcykpIHsKIAkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIAlpZiAo
dGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlw
ZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCXN0YXRlLnNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9j
YXRpb24odGhpcy5iaW5kaW5nLCB0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzLCB0aGlzLnR5cGVB
cmd1bWVudHMpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1
bWVudHNGb3JNZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFy
Z3VtZW50cywgdGhpcy50eXBlQXJndW1lbnRzKTsKIAl9Ci0JaWYgKCFzdGF0ZS5pc0RpYW1vbmQg
JiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVu
dHMoKSkgewotIAkJY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdU
eXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc3RhdGUuc2NvcGUpOworCWlmICghaXNEaWFtb25k
ICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1l
bnRzKCkpIHsKKyAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5n
VHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKICAJfQotCUNvbXBpbGVyT3B0aW9u
cyBjb21waWxlck9wdGlvbnMgPSBzdGF0ZS5zY29wZS5jb21waWxlck9wdGlvbnMoKTsKIAlpZiAo
Y29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCAmJiAo
dGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLklzTnVsbG5lc3NLbm93bikgPT0gMCkgewot
CQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHN0YXRlLnNjb3BlLmVudmlyb25t
ZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQotCQkJCS5jaGVj
a0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8s
IGZhbHNlLCBzdGF0ZS5zY29wZSk7CisJCW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZp
ZXIoc2NvcGUuZW52aXJvbm1lbnQoKSwgY29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3Rh
dGlvbnMpCisJCQkJLmNoZWNrSW1wbGljaXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBu
dWxsLypzcmNNZXRob2QqLywgZmFsc2UsIHNjb3BlKTsKIAl9Ci0JcmVjb3JkRXhjZXB0aW9uc0Zv
ckVuY2xvc2luZ0xhbWJkYShzdGF0ZS5zY29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlv
bnMpOworCXJlY29yZEV4Y2VwdGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc2NvcGUsIHRoaXMuYmlu
ZGluZy50aHJvd25FeGNlcHRpb25zKTsKIAlyZXR1cm4gYWxsb2NhdGlvblR5cGU7CiB9CiAKQEAg
LTU3MCw3ICs1MTUsMzMgQEAKIAl9CiB9CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxp
ZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVu
Y2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5h
bCBCbG9ja1Njb3BlIHNjb3BlKSB7CisvLyBGb3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94
aW5nIGNvbXBhdGliaWxpdHkgaXMgc2FtZSBhcyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNl
IGphdmEubGFuZydzIHdyYXBwZXIgdHlwZXMgYXJlIG5vdCBnZW5lcmljLgorcHVibGljIGJvb2xl
YW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgeworCXJldHVybiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKK30K
KworcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyBsZWZ0LCBmaW5h
bCBTY29wZSBzY29wZSkgeworCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlz
LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQlyZXR1cm4gZmFsc2U7CisJVHlwZUJp
bmRpbmcgYWxsb2NhdGlvblR5cGUgPSB0aGlzLnJlc29sdmVkVHlwZTsKKwlpZiAoaXNQb2x5RXhw
cmVzc2lvbigpKSB7CisJCVR5cGVCaW5kaW5nIG9sZEV4cGVjdGVkVHlwZSA9IHRoaXMudHlwZUV4
cGVjdGVkOworCQl0cnkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBsZWZ0OworCQkJUmVmZXJl
bmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlz
LnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJp
Y1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMg
PSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5l
bmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUpOworCQkJaWYgKGluZmVy
cmVkVHlwZXMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQlhbGxvY2F0aW9uVHlwZSA9
IHRoaXMuZW5jbG9zaW5nU2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlw
ZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcp
IHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOworCQl9IGZpbmFsbHkgeworCQkJ
dGhpcy50eXBlRXhwZWN0ZWQgPSBvbGRFeHBlY3RlZFR5cGU7CisJCX0KKwl9CisJcmV0dXJuIGFs
bG9jYXRpb25UeXBlICE9IG51bGwgJiYgYWxsb2NhdGlvblR5cGUuaXNDb21wYXRpYmxlV2l0aChs
ZWZ0LCBzY29wZSk7Cit9CisKK3B1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5n
IGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBz
Y29wZSkgewogCS8qIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMg
dG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIHN5bnRoZXNpemUgYSBnZW5lcmljIHN0
YXRpYyBmYWN0b3J5CiAJICAgbWV0aG9kIHRoYXQgd291bGQsIGdpdmVuIHRoZSBhcmd1bWVudCB0
eXBlcyBhbmQgdGhlIGludm9jYXRpb24gc2l0ZSwgbWFudWZhY3R1cmUgYSBwYXJhbWV0ZXJpemVk
IG9iamVjdCBvZiB0eXBlIGFsbG9jYXRpb25UeXBlLgogCSAgIElmIHdlIGFyZSBzdWNjZXNzZnVs
IHRoZW4gYnkgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24sIHRoZSBwYXJhbWV0ZXJpemF0aW9uIG9m
IHRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZmFjdG9yeSBtZXRob2QgaXMgaWRlbnRpY2FsCkBAIC01
ODAsMTcgKzU1MSw2IEBACiAJaWYgKGZhY3RvcnkgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgJiYgZmFjdG9yeS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBnZW5lcmljRmFjdG9yeSA9IChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGZhY3Rvcnk7CiAJCXRoaXMuaW5mZXJyZWRSZXR1cm5U
eXBlID0gZ2VuZXJpY0ZhY3RvcnkuaW5mZXJyZWRSZXR1cm5UeXBlOwotCQkvLyB0aGlzIGlzIG91
ciBsYXN0IGNoYW5jZSB0byBpbnNwZWN0IHRoZSByZXN1bHQgb2YgdGhlIGluZmVyZW5jZSB0aGF0
IGlzIGNvbm5lY3RlZCB0byB0aGUgdGhyb3ctYXdheSBmYWN0b3J5IGJpbmRpbmcKLQkJSW5mZXJl
bmNlQ29udGV4dDE4IGluZkN0eDE4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChnZW5lcmljRmFjdG9y
eSk7Ci0JCWlmIChpbmZDdHgxOCAhPSBudWxsICYmIGluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPT0g
SW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCS8vIHJlZnJlc2ggYXJn
dW1lbnRUeXBlcyBmcm9tIHVwZGF0ZWQgYmluZGluZ3MgaW4gYXJndW1lbnRzOgotCQkJLy8gKHRo
aXMgc2hvdWxkbid0IGJlIHN0cmljdGx5IG5lY2Vzc2FyeSwgYXMgRnVuY3Rpb25FeHByZXNzaW9u
LmlzQ29tcGF0aWJsZVdpdGgoKSBzaG91bGQgZ2l2ZSB0aGUgc2FtZSByZXN1bHQsCi0JCQkvLyAg
YnV0IGl0J3MgcHJvYmFibHkgYmUgYSBnb29kIGlkZWEgdG8gYXZvaWQgdGhlIG5lY2Vzc2l0eSB0
byBjYWxsIGlzQ29tcGF0aWJsZVdpdGgoKSBpbiB0aGUgZmlyc3QgcGxhY2UpLiAKLQkJCWZvciAo
aW50IGkgPSAwOyBpIDwgYXJndW1lbnRUeXBzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJaWYgKGFyZ3Vt
ZW50VHlwc1tpXSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykKLQkJCQkJYXJndW1lbnRUeXBz
W2ldID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQkJfQotCQl9CiAJCXJldHVy
biAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50
czsKIAl9CiAJcmV0dXJuIG51bGw7CkBAIC02OTgsMTAyICs2NTgsNDcgQEAKIH0KIAogLy8tLSBp
bnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7
Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgdGFyZ2V0VHlw
ZSAhPSBudWxsKSB7Ci0JCXNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJaWYgKCFyZXNv
bHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpKSB7Ci0JCQlpZiAocmVwb3J0
RXJyb3JzICYmICF0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9y
KSB7Ci0JCQkJaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmNhbm5vdEluZmVyRGlh
bW9uZCkKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBl
cyh0aGlzKTsKLQkJCQllbHNlCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJ
bmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0
aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhh
c1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJfQorcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCQorCWlmICh0aGlzLnJl
c29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygp
KQorCQlyZXR1cm4gbnVsbDsKKwkKKwlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1
bWVudFR5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKQorCQlpZiAodGhpcy5hcmd1bWVudFR5
cGVzWzBdID09IG51bGwpCiAJCQlyZXR1cm4gbnVsbDsKLQkJfQotCX0KLQlpZiAocmVwb3J0RXJy
b3JzICYmIHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRp
bmcoKSkgewotCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpCi0JCQl0
aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGU7Ci0JCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7
Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhp
cy5iaW5kaW5nKTsKLQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVk
RXJyb3IgPSB0cnVlOwotCQl9Ci0JfQotCXJldHVybiB0aGlzLmJpbmRpbmc7Ci19Ci1wdWJsaWMg
VHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRUeXBlOwot
CWJvb2xlYW4gbmVlZHNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAJCQkJCQkJCQkJ
CQkJCQkJLy8gbm90IHlldCByZXNvbHZlZAotCQkJKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwg
JiYgdGFyZ2V0VHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVX
aXRoKHRhcmdldFR5cGUpKTsJLy8gcHJldmlvdXMgYXR0ZW1wdCB3YXMgd3JvbmcKLQlpZiAobmVl
ZHNVcGRhdGUgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiAhdGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkvLyBBdHRl
bXB0IHRvIHJlc29sdmUgaGFsZiByZXNvbHZlZCBkaWFtb25kCi0JCXJlc29sdmVQYXJ0Mih0aGlz
LnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCS8vIGNvbmZlciBNZXNzYWdlU2VuZC5j
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoLCwpOgotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29u
dGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKSB0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0
ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgeworCQorCVR5cGVCaW5kaW5n
IGFsbG9jYXRpb25UeXBlID0gdGhpcy5yZXNvbHZlZFR5cGU7CisJaWYgKGlzUG9seUV4cHJlc3Np
b24oKSkgeworCQlUeXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLnR5cGVFeHBlY3Rl
ZDsKKwkJdHJ5IHsKIAkJCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQkJCU1ldGhv
ZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLCAo
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQkJaWYg
KHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgewotCQkJCUFTVE5v
ZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5kaW5nLCBz
Y29wZSk7Ci0JCQl9CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQkJ
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUuZW52aXJv
bm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJpY1R5cGUu
dHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJVHlwZUJp
bmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMocGFyYW1ldGVyaXplZFR5
cGUsIHBhcmFtZXRlcml6ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVz
LCBzY29wZSk7CisJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKQorCQkJCXJldHVybiBudWxs
OworCQkJYWxsb2NhdGlvblR5cGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgp
KTsKKwkJCXJldHVybiBzY29wZS5nZXRDb25zdHJ1Y3RvcigoUmVmZXJlbmNlQmluZGluZykgYWxs
b2NhdGlvblR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCX0gZmluYWxseSB7CisJ
CQl0aGlzLnR5cGVFeHBlY3RlZCA9IG9sZEV4cGVjdGVkVHlwZTsKIAkJfQogCX0KLQlpZiAodGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQlyZXR1cm4gcmVzb2x2ZVBh
cnQzKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKTsKLQl9Ci0JcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlOworCXJldHVybiBudWxsOwogfQogcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVu
dHMoKSB7CiAJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwogfQogCi1wdWJsaWMgYm9vbGVhbiB1cGRh
dGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJn
ZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJp
bmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRp
bmcub3JpZ2luYWwoKSA9PSB1cGRhdGVkQmluZGluZy5vcmlnaW5hbCgpKSB7Ci0JCUluZmVyZW5j
ZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4
dHMuZ2V0KHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGlu
ZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhp
cy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1
dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0
IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0
ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0J
CX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5
cGUgPSB1cGRhdGVkQmluZGluZy5kZWNsYXJpbmdDbGFzczsKLQlyZXR1cm4gaGFzVXBkYXRlOwot
fQogcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewog
CWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKIAl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dChtZXRob2QsIGluZkN0eDE4KTsKLQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9k
Lm9yaWdpbmFsKCk7Ci0JaWYgKG9yaWdpbmFsIGluc3RhbmNlb2YgU3ludGhldGljRmFjdG9yeU1l
dGhvZEJpbmRpbmcpIHsKLQkJU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcgc3ludGhPcmln
aW5hbCA9IChTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZylvcmlnaW5hbDsKLQkJUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZEN0b3IgPSBzeW50aE9yaWdpbmFsLmFw
cGx5VHlwZUFyZ3VtZW50c09uQ29uc3RydWN0b3IobWV0aG9kLnR5cGVBcmd1bWVudHMpOwotCQl0
aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChwYXJhbWV0ZXJpemVkQ3RvciwgaW5mQ3R4MTgpOwot
CX0KLX0KLXB1YmxpYyBib29sZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJp
bmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJ
JiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CiB9CiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdl
dEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJ
aWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJcmV0dXJuIG51bGw7CiAJcmV0
dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhv
ZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCXJldHVybiB0aGlz
LmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci19Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0
ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci19Ci1wdWJsaWMg
SW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci19Ci0KIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb25T
aXRlOiAtLQogcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkg
ewogCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwpAQCAtODAxLDQgKzcwNiw0IEBACiBw
dWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29w
ZSkgewogCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50
cywgdGhpcyk7CiB9Ci19Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
ZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggZWUzMTA4Ni4uZmU1MDlkZSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC01Nyw3ICs1Nyw2IEBACiAJcHJpdmF0ZSBi
b29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBmYWxzZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9y
aWdpbmFsVmFsdWVJZlRydWVUeXBlOwogCXByaXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1
ZUlmRmFsc2VUeXBlOwotCXByaXZhdGUgQmxvY2tTY29wZSBwb2x5RXhwcmVzc2lvblNjb3BlOwog
CXByaXZhdGUgYm9vbGVhbiB1c2UxOHNwZWNpZmljczsKIAlwdWJsaWMgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKAogCQlFeHByZXNzaW9uIGNvbmRpdGlvbiwKQEAgLTQ2NCwxMiArNDYzLDYgQEAKIAkJ
CWlmICh0aGlzLnZhbHVlSWZGYWxzZSBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZh
bHVlSWZGYWxzZS5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBj
aGVjayBsYXRlciBvbgogCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZh
bHVlSWZGYWxzZS5yZXNvbHZlVHlwZShzY29wZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9u
KCkpIHsKLQkJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBv
bHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29s
dXRpb24vZXJyb3IgcmVwb3J0aW5nLgotCQkJCX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5
cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhp
cy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJ
fSBlbHNlIHsKQEAgLTQ4NCwxMSArNDc3LDkgQEAKIAkJfQogCQlpZiAoaXNQb2x5RXhwcmVzc2lv
bigpKSB7CiAJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCXRoaXMucG9s
eUV4cHJlc3Npb25TY29wZSA9IHNjb3BlOyAvLyBwcmVzZXJ2ZSBmb3IgZXZlbnR1YWwgcmVzb2x1
dGlvbi9lcnJvciByZXBvcnRpbmcuCiAJCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhp
cyk7CiAJCQl9Ci0JCQljb21wdXRlQ29udmVyc2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBl
KTsKLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCQkJ
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gY29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlz
LmV4cGVjdGVkVHlwZSkgPyB0aGlzLmV4cGVjdGVkVHlwZSA6IG51bGw7CiAJCX0KIAkJVHlwZUJp
bmRpbmcgdmFsdWVJZlRydWVUeXBlID0gdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAkJ
VHlwZUJpbmRpbmcgdmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VU
eXBlOwpAQCAtNjYxLDcgKzY1Miw4IEBACiAJCXJldHVybiBudWxsOwogCX0KIAotCXByb3RlY3Rl
ZCB2b2lkIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0
YXJnZXRUeXBlKSB7CisJcHJvdGVjdGVkIGJvb2xlYW4gY29tcHV0ZUNvbnZlcnNpb25zKEJsb2Nr
U2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJYm9vbGVhbiBvayA9IHRy
dWU7CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlICE9IG51bGwgJiYgdGhpcy5v
cmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlpZiAodGhpcy52
YWx1ZUlmVHJ1ZS5pc0NvbnN0YW50VmFsdWVPZlR5cGVBc3NpZ25hYmxlVG9UeXBlKHRoaXMub3Jp
Z2luYWxWYWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUpCiAJCQkJCXx8IHRoaXMub3JpZ2luYWxW
YWx1ZUlmVHJ1ZVR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkgewpAQCAtNjgyLDYg
KzY3NCw3IEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRU
eXBlLCB0aGlzLnZhbHVlSWZUcnVlLCBudWxsKTsKKwkJCQlvayA9IGZhbHNlOwogCQkJfQogCQl9
CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSAhPSBudWxsICYmIHRoaXMub3Jp
Z2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKQEAgLTcwNCw4ICs2OTcs
MTAgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5
cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLCB0YXJnZXRUeXBl
LCB0aGlzLnZhbHVlSWZGYWxzZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQor
CQlyZXR1cm4gb2s7CiAJfQogCiAJcHVibGljIHZvaWQgc2V0RXhwZWN0ZWRUeXBlKFR5cGVCaW5k
aW5nIGV4cGVjdGVkVHlwZSkgewpAQCAtNzE4LDE4ICs3MTMsNiBAQAogCiAJcHVibGljIEV4cHJl
c3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewogCQlyZXR1cm4gdGhpcy5leHBy
ZXNzaW9uQ29udGV4dDsKLQl9Ci0JCi0JcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQkv
LyBpbiAxLjggaWYgdHJlYXRlZCBhcyBhIHBvbHkgZXhwcmVzc2lvbjoKLQkJaWYgKGlzUG9seUV4
cHJlc3Npb24oKSkgewotCQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMu
cG9seUV4cHJlc3Npb25TY29wZSk7Ci0JCQl0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID0g
dGhpcy52YWx1ZUlmVHJ1ZS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwg
c2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZG
YWxzZS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgc2NvcGUpOwotCQkJ
Y29tcHV0ZUNvbnZlcnNpb25zKHRoaXMucG9seUV4cHJlc3Npb25TY29wZSwgdGFyZ2V0VHlwZSk7
Ci0JCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRhcmdldFR5cGU7Ci0JCX0KLQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwogCX0KIAkKIAlwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGlj
YWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCmluZGV4IDI0MzQ5MTUuLjVhYzM0
ZTggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKQEAgLTU2LDcgKzU2
LDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuVmFyaWFibGVCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogCiBwdWJsaWMgY2xhc3MgRXhwbGljaXRD
b25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0ZW1lbnQgaW1wbGVtZW50cyBJbnZvY2F0aW9uIHsK
IApAQCAtNzYsMTAgKzc1LDYgQEAKIAogCS8vIFRPRE8gUmVtb3ZlIG9uY2UgRE9NUGFyc2VyIGlz
IGFjdGl2YXRlZAogCXB1YmxpYyBpbnQgdHlwZUFyZ3VtZW50c1NvdXJjZVN0YXJ0OwotCi0JIC8v
IGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGlu
ZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRp
ZGF0ZSk6Ci0JcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4
dDE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByaXZhdGUgSW5uZXJJbmZlcmVuY2VIZWxwZXIg
aW5uZXJJbmZlcmVuY2VIZWxwZXI7CiAKIAlwdWJsaWMgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwo
aW50IGFjY2Vzc01vZGUpIHsKIAkJdGhpcy5hY2Nlc3NNb2RlID0gYWNjZXNzTW9kZTsKQEAgLTM5
NCwxMCArMzg5LDYgQEAKIAkJCQkJaWYgKChhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVz
b2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7CiAJCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CiAJ
CQkJCX0KLQkJCQkJaWYgKHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgg
JiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSB8fCAoKGFyZ3VtZW50IGluc3RhbmNlb2Yg
SW52b2NhdGlvbikgJiYgKChJbnZvY2F0aW9uKSBhcmd1bWVudCkudXNlc0luZmVyZW5jZSgpKSkp
IHsKLQkJCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCQkJ
dGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwot
CQkJCQl9CiAJCQkJfQogCQkJCWlmIChhcmdIYXNFcnJvcikgewogCQkJCQlpZiAocmVjZWl2ZXJU
eXBlID09IG51bGwpIHsKQEAgLTQ5OCw1NiArNDg5LDIyIEBACiAJCXZpc2l0b3IuZW5kVmlzaXQo
dGhpcywgc2NvcGUpOwogCX0KIAotCS8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uOiAtLQotCXB1
YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVh
biByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJ
CWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5n
ZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0ZWRseSB1bnJlc29s
dmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWVsc2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNW
YWxpZEJpbmRpbmcoKSkKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3Ry
dWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKLQkJfQorCS8vIC0tIGludGVyZmFjZSBJbnZvY2F0
aW9uCisJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBl
LCBTY29wZSBzY29wZSkgewogCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwogCX0KKwkKKwlwdWJsaWMg
dm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7CisJCS8vIE5vdGhp
bmcgdG8gZG8uCisJfQorCQorCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwkJdGhyb3cgbmV3
IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBjb250cm9sIGZsb3ciKTsgLy8kTk9O
LU5MUy0xJAorCX0KKwkKIAlwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAkJcmV0
dXJuIHRoaXMuYXJndW1lbnRzOwogCX0KLQlwdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhN
ZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0J
CWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCQlp
ZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyAhPSBudWxsKSB7Ci0JCQlJbmZlcmVuY2VDb250ZXh0
MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJlbW92
ZUtleSh0aGlzLmJpbmRpbmcpOwotCQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5n
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJdGhp
cy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkJLy8gc29s
dXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhh
dCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQkJaGFzVXBk
YXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsK
LQkJCX0KLQkJfQotCQl0aGlzLmJpbmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQkJcmV0dXJuIGhh
c1VwZGF0ZTsKLQl9Ci0JcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBp
bmZDdHgxOCkgewotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQotCQkJdGhp
cy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwotCQl0aGlzLmlu
ZmVyZW5jZUNvbnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsKLQl9Ci0JcHVibGljIEluZmVy
ZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nIG1ldGhvZCkgewotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQotCQkJ
cmV0dXJuIG51bGw7Ci0JCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5j
ZUNvbnRleHRzLmdldChtZXRob2QpOwotCX0KLQlwdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNl
KCkgewotCQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgCi0JCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7Ci0JfQotCXB1
YmxpYyBib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKSB7Ci0JCXJldHVybiB0aGlzLmlubmVySW5m
ZXJlbmNlSGVscGVyICE9IG51bGw7Ci0JfQotCXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgp
IHsKLQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci0JfQotCXB1YmxpYyBJbm5l
ckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpIHsKLQkJcmV0dXJuIHRoaXMu
aW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci0JfQotCiAJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb25T
aXRlOiAtLQogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0
KFNjb3BlIHNjb3BlKSB7CiAJCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0
aGlzLmFyZ3VtZW50cywgdGhpcyk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24u
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCmluZGV4IDkxOGIxYjQuLmFiMjY1YWEg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RXhwcmVzc2lvbi5qYXZhCkBAIC0xMDYzLDE2ICsxMDYzLDYgQEAKIH0KIAogLyoqCi0gKiBPbmNl
IG91dGVyIGNvbnRleHRzIGhhdmUgZmluYWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBl
eHByZXNzaW9uLAotICogcGVyZm9ybSBhbnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIGRl
bGF5ZWQgcHJldmlvdXNseS4KLSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJnZXQg
dHlwZSAoYWthIGV4cGVjdGVkVHlwZSkgZm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJhbSBz
Y29wZSBzY29wZSBmb3IgZXJyb3IgcmVwb3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGluZyBj
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5IGNo
b29zZSB0byBkbyByZWFsIHN0dWZmIGhlcmUKLX0KLQotLyoqCiAgKiBSZXR1cm5zIHRydWUgaWYg
dGhlIHJlY2VpdmVyIGlzIGZvcmNlZCB0byBiZSBvZiByYXcgdHlwZSBlaXRoZXIgdG8gc2F0aXNm
eSB0aGUgY29udHJhY3QgaW1wb3NlZAogICogYnkgYSBzdXBlciB0eXBlIG9yIGJlY2F1c2UgaXQg
KmlzKiByYXcgYW5kIHRoZSBjdXJyZW50IHR5cGUgaGFzIG5vIGNvbnRyb2wgb3ZlciBpdCAoaS5l
IHRoZSByYXduZXNzCiAgKiBvcmlnaW5hdGVzIGZyb20gc29tZSBvdGhlciBmaWxlLikKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1YWMxNGYyLi44YWY5Mjc4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0xMDksMTYgKzEwOSwxNiBAQAogCiAJcHVi
bGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAkJaWYgKHRhcmdldFR5cGUgaW5zdGFuY2Vv
ZiBUeXBlVmFyaWFibGVCaW5kaW5nKSB7Ci0JCQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8gd2hl
biBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQorCQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8g
d2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQogCQkJCWlmICgoKFR5cGVWYXJpYWJsZUJp
bmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QpCiAJCQkJCXJldHVy
biBmYWxzZTsKIAkJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiAoKFR5cGVWYXJpYWJs
ZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QuZGVjbGFyaW5n
Q2xhc3MpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0gZWxzZSB7IC8vIGZvciBpbnRlcm5hbCBj
YWxscworCQkJCXJldHVybiBmYWxzZTsKKwkJfSBlbHNlIHsgLy8gZm9yIGludGVybmFsIGNhbGxz
CiAJCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUgPSAoVHlwZVZhcmlhYmxlQmlu
ZGluZykgdGFyZ2V0VHlwZTsKIAkJCQlpZiAodHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQg
aW5zdGFuY2VvZiBNZXRob2RCaW5kaW5nKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9CisJCQkJ
cmV0dXJuIGZhbHNlOworCQl9CiAJCX0KIAkJcmV0dXJuIHRydWU7CiAJfQpAQCAtMjAzLDExICsy
MDMsNiBAQAogCQkJCWJyZWFrOwogCQl9CiAJCXJldHVybiBudWxsOwotCX0KLQotCXB1YmxpYyBU
eXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0dXJl
KHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1cm4gcmVzb2x2ZVR5cGVFeHBlY3RpbmcodGhp
cy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7CiAJfQogCiAJY2xhc3MgVmlzaWJpbGl0eUlu
c3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRvciB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNl
SGVscGVyLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDgzODFiNWMuLjAwMDAw
MDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhCisrKyAvZGV2L251
bGwKQEAgLTEsNDIgKzAsMCBAQAotLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAxNCBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKLSAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAot
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCi0gKgotICog
Q29udHJpYnV0b3JzOgotICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwotcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwotCi1pbXBvcnQgamF2YS51dGlsLkhhc2hN
YXA7Ci1pbXBvcnQgamF2YS51dGlsLk1hcDsKLQotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwotCi1wdWJsaWMgY2xhc3Mg
SW5uZXJJbmZlcmVuY2VIZWxwZXIgewotCi0JLyoqIEZvciBlYWNoIGNhbmRpZGF0ZSBtZXRob2Qg
c3RvcmUgaGVyZSB0aGUgYXJyYXkgb2YgYXJndW1lbnQgdHlwZXMgaWYgaW5uZXIgaW5mZXJlbmNl
IGhhcyBpbXByb3ZlZCBhbnkgZHVyaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuICovCi0J
cHJpdmF0ZSBNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPiBhcmdUeXBlc1BlckNhbmRp
ZGF0ZSA9IG5ldyBIYXNoTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXT4oKTsKLQotCXB1
YmxpYyB2b2lkIHJlZ2lzdGVySW5uZXJSZXN1bHQoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nIHJlc29sdmVkVHlwZSwgaW50IGFyZ0NvdW50LCBpbnQgYXJnSWR4KSB7Ci0JCVR5cGVC
aW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChtZXRob2Qp
OwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUu
cHV0KG1ldGhvZCwgYXJnVHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJnQ291bnRdKTsKLQkJYXJn
VHlwZXNbYXJnSWR4XSA9IHJlc29sdmVkVHlwZTsKLQl9Ci0JCi0JcHVibGljIFR5cGVCaW5kaW5n
W10gZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZShNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSwg
VHlwZUJpbmRpbmdbXSBwbGFpbkFyZ1R5cGVzKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMg
PSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChjYW5kaWRhdGUpOwotCQlpZiAoYXJnVHlw
ZXMgPT0gbnVsbCkKLQkJCXJldHVybiBwbGFpbkFyZ1R5cGVzOwotCQkvLyBmaWxsIGluIGFueSBi
bGFua3Mgbm93OgotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsgaSsrKSB7
Ci0JCQlpZiAoYXJnVHlwZXNbaV0gPT0gbnVsbCkKLQkJCQlhcmdUeXBlc1tpXSA9IHBsYWluQXJn
VHlwZXNbaV07Ci0JCX0KLQkJcmV0dXJuIGFyZ1R5cGVzOwotCX0KLX0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKaW5k
ZXggYWM1NDQ3Zi4uMDViY2IzMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKQEAgLTE5LDcxICsxOSwzNSBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRp
bmc7CiAKIC8qKgotICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRpb24gQVNUIG5vZGVzIHRoYXQg
Y2FuIHRyaWdnZXIgCi0gKiA8dWw+Ci0gKiA8bGk+SW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IElu
ZmVyZW5jZXMgKDE4LjUuMSksIGFuZDwvbGk+IAotICogPGxpPkludm9jYXRpb24gVHlwZSBJbmZl
cmVuY2UgKDE4LjUuMikuPC9saT4KLSAqIDwvdWw+Ci0gKi8KKyAqIEFic3RyYWN0aW9uIGZvciBp
bnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0cmlnZ2VyIG92ZXJsb2FkIHJlc29sdXRpb24g
cG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlCisqLwogcHVibGljIGludGVyZmFjZSBJ
bnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgewogCiAJRXhwcmVzc2lvbltdIGFyZ3Vt
ZW50cygpOwotCisJCiAJLyoqCiAJICogQW5zd2VyIHRoZSByZXNvbHZlZCBtZXRob2QgYmluZGlu
ZyBvZiB0aGlzIGludm9jYXRpb24uCiAJICogSWYgYSB0YXJnZXQgdHlwZSBpcyBnaXZlbiwgdGhl
IGludm9jYXRpb24gZ2V0cyBhIGNoYW5jZSB0byBkbyByZXBlYXRlZCBtZXRob2QgbG9va3VwLgog
CSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGludm9jYXRpb24g
b3IgbnVsbCBpZiBub3QgeWV0IGtub3duCi0JICogQHBhcmFtIHJlcG9ydEVycm9ycyBpZiB0cnVl
IHRoZW4gdGhpcyBpcyB0aGUgbGFzdCBjYWxsLCBpZiBubyB2YWxpZCBiaW5kaW5nIGNhbiBiZSBh
bnN3ZXJlZCB3ZSBzaG91bGQgcmVwb3J0IGFuIGVycm9yCi0JICogQHBhcmFtIHNjb3BlIGlmIHJl
cG9ydEVycm9ycyBpcyB0cnVlIHRoZW4gdGhpcyBzY29wZSBjYW4gYmUgdXNlZCBmb3IgZXJyb3Ig
cmVwb3J0aW5nCisJICogQHBhcmFtIHNjb3BlIHRoZSBzY29wZSB0byB1c2UgZm9yIGxvb2t1cC4K
IAkgKiAKIAkgKi8KLQlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKTsKLQorCU1ldGhvZEJpbmRpbmcg
YmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSk7CisJCiAJLyoqCiAJ
ICogUmVnaXN0ZXIgdGhlIGdpdmVuIGluZmVyZW5jZSBjb250ZXh0LCB3aGljaCBwcm9kdWNlZCB0
aGUgZ2l2ZW4gbWV0aG9kIGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVzdWx0LgogCSAqIExhdGVyIHdo
ZW4gdGhlIHNhbWUgbWV0aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBtb3N0IHNwZWNpZmljIG1ldGhv
ZCwgdGhlIGluZmVyZW5jZSBjb250ZXh0Ci0JICogZm9yIHRoaXMgcGFpciAoSW52b2NhdGlvbiB4
IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0BsaW5rICNnZXRFeHByZXNz
aW9uQ29udGV4dCgpfQorCSAqIGZvciB0aGlzIHBhaXIgKEludm9jYXRpb24geCBNZXRob2RCaW5k
aW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0SW5mZXJlbmNlQ29udGV4dChQ
YXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl9CiAJICogdG8gY29udGludWUgdGhlIHR5cGUgaW5m
ZXJlbmNlLgogCSAqLwogCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgx
OCk7CiAJCisKIAkvKioKLQkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVuY2UgY29udGV4dCBmb3IgdGhl
IGdpdmVuIG1ldGhvZCB3aGljaCBtdXN0IGhhdmUgYmVlbiByZWdpc3RlcmVkCi0JICogdXNpbmcg
e0BsaW5rICNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpfS4KKwkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVu
Y2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZC4KIAkgKiBAcGFyYW0gbWV0aG9kIGFuIGlu
dGVybWVkaWF0ZSByZXNvbHZlZCBjYW5kaWRhdGUgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIHJl
dHVybiBhIHN1c3BlbmRlZCBpbmZlcmVuY2UgY29udGV4dCBvciBudWxsIGlmIG5vbmUgd2FzIHJl
Z2lzdGVyZWQgZm9yIHRoaXMgbWV0aG9kLgorCSAqIHJldHVybiB0aGUgYXNzb2NpYXRlZCBpbmZl
cmVuY2UgY29udGV4dC4KIAkgKi8KIAlJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpOwogCi0JLyoqCi0JICogQW5z
d2VyIHRydWUgaWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBkZXRlcm1pbmVkIGl0cyBiaW5kaW5nIHVz
aW5nIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFuIHVzZXNJbmZlcmVuY2UoKTsKLQkKLQkvKioK
LQkgKiBXaGVyZSB0aGUgQVNUIG5vZGUgbWF5IGhvbGQgcmVmZXJlbmNlcyB0byB0aGUgcmVzdWx0
cyBvZiBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlLAotCSAqIHRoaXMgbWV0aG9k
IGFsbG93cyB0byB1cGRhdGUgdGhvc2UgcmVmZXJlbmNlcyB0byB0aGUgcmVzdWx0IG9mIEludm9j
YXRpb24gVHlwZSBJbmZlcmVuY2UuCi0JICogTm90ZSB0aGF0IHBvdGVudGlhbGx5IG1vcmUgdGhh
biBqdXN0IHRoZSBtZXRob2QgYmluZGluZyBpcyB1cGRhdGVkLgotCSAqIEBwYXJhbSB1cGRhdGVk
QmluZGluZyB0aGUgZmluYWwgbWV0aG9kIGJpbmRpbmcgYWZ0ZXIgZnVsbCBpbmZlcmVuY2UKLQkg
KiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgdXNlZCBkdXJpbmcgSW52b2NhdGlv
biBUeXBlIEluZmVyZW5jZQotCSAqIEByZXR1cm4gdHJ1ZSBpZiBhbiB1cGRhdGUgaGFzIGhhcHBl
bmVkCi0JICovCi0JYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRC
aW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKTsKLQkKLQkvKioKLQkgKiBBbnN3ZXIgd2hl
dGhlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGhhcyBpbm5lciBleHByZXNzaW9ucyB0aGF0IHN0
aWxsIG5lZWQgdXBkYXRpbmcgYWZ0ZXIgaW5mZXJlbmNlLgotCSAqLwotCWJvb2xlYW4gaW5uZXJz
TmVlZFVwZGF0ZSgpOwotCi0JLyoqCi0JICogTWFyayB0aGF0IHVwZGF0aW5nICh0aGUgbmVlZCBm
b3Igd2hpY2ggaXMgc2lnbmFsZWQgdmlhIHtAbGluayAjaW5uZXJzTmVlZFVwZGF0ZSgpfSkgaGFz
IGJlZW4gZG9uZS4KLQkgKi8KLQl2b2lkIGlubmVyVXBkYXRlRG9uZSgpOwotCi0JLyoqCi0JICog
SWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBhbnkgcG9seSBleHByZXNzaW9ucyBhcyBhcmd1bWVudHMs
IHRoaXMgbWV0aG9kIGFuc3dlcnMgYW4gaW5mZXJlbmNlIGhlbHBlciAKLQkgKiB0aGF0IG1lZGlh
dGVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLCBldmVuIGlmIG5vIGFjdHVhbCBpbmZlcmVu
Y2UgaGFwcGVucyBmb3IgdGhpcyBpbnZvY2F0aW9uLgotCSAqLwotCUlubmVySW5mZXJlbmNlSGVs
cGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggNTIw
YjVjMC4uZTU1YmNiOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQpAQCAtODAsNiArODAsOCBAQAogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWlzc2luZ1R5cGVCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmc7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5UGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbU1ldGhv
ZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5Qcm9ibGVtUmVhc29uczsKQEAgLTExNSwxMyArMTE3LDEyIEBACiAKIAkgLy8gaG9sZCBvbiB0
byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVu
dGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlw
cml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5m
ZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5m
ZXJlbmNlSGVscGVyOwogCXByaXZhdGUgYm9vbGVhbiByZWNlaXZlcklzVHlwZTsKIAlwcm90ZWN0
ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKIAkKIAotcHVibGljIEZsb3dJbmZvIGFu
YWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4
dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKKwlwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxv
Y2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBm
bG93SW5mbykgewogCWJvb2xlYW4gbm9uU3RhdGljID0gIXRoaXMuYmluZGluZy5pc1N0YXRpYygp
OwogCWJvb2xlYW4gd2FzSW5zaWRlQXNzZXJ0ID0gKChmbG93Q29udGV4dC50YWdCaXRzICYgRmxv
d0NvbnRleHQuSElERV9OVUxMX0NPTVBBUklTT05fV0FSTklORykgIT0gMCk7CiAJZmxvd0luZm8g
PSB0aGlzLnJlY2VpdmVyLmFuYWx5c2VDb2RlKGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZs
b3dJbmZvLCBub25TdGF0aWMpLnVuY29uZGl0aW9uYWxJbml0cygpOwpAQCAtNTkyLDExNCArNTkz
LDExMSBAQAogfQogCiBwdWJsaWMgVHlwZUJpbmRpbmcgcmVzb2x2ZVR5cGUoQmxvY2tTY29wZSBz
Y29wZSkgewotCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVybiB0eXBlCisJLy8gQW5zd2Vy
IHRoZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUsIGFuc3dlcnMgUG9seVR5cGVCaW5kaW5nIGlmIHRo
ZXJlIGlzIGF0IGxlYXN0IG9uZSBnZW5lcmljIG92ZXJsb2FkZWQgY2FuZGlkYXRlIHRoYXQgZW5j
b2RlZCB0eXBlIHZhcmlhYmxlcyBpbiByZXR1cm4gdHlwZSBhbmQgdGhlcmUgaXMgbm8gdGFyZ2V0
IHR5cGUgIAogCS8vIEJhc2UgdHlwZSBwcm9tb3Rpb24KKwlpZiAodGhpcy5jb25zdGFudCAhPSBD
b25zdGFudC5Ob3RBQ29uc3RhbnQpIHsKKwkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFD
b25zdGFudDsKKwkJbG9uZyBzb3VyY2VMZXZlbCA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNv
dXJjZUxldmVsOworCQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOworCQlpZiAodGhpcy5y
ZWNlaXZlciBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQl0aGlzLnJlY2VpdmVyLmJp
dHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sg
bGF0ZXIgb24KKwkJCXJlY2VpdmVyQ2FzdCA9IHRydWU7CisJCX0KKwkJdGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJdGhpcy5yZWNl
aXZlcklzVHlwZSA9IHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBOYW1lUmVmZXJlbmNlICYmICgo
KE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2ZXIpLmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7
CisJCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkg
eworCQkJLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0
eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5vdGlmaWVkCisJCQlpZiAoVHlwZUJp
bmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhwcmVz
c2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgeworCQkJCXNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5y
ZWNlaXZlcik7CisJCQl9CisJCX0KKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdl
bmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxs
KSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xl
YW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7
IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50
cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5n
dGg7IGkrKykgeworCQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFy
Z3VtZW50c1tpXTsKKwkJCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0eXBl
UmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0g
bnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQkJfQorCQkJCWlmIChhcmdIYXNF
cnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsK
KwkJCQl9CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVu
dHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJ
CWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkr
KykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9
CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQorCQl9CisJCS8vIHdpbGwgY2hlY2sgZm9y
IG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51
bGwpIHsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwg
YXJndW1lbnRzCisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhp
cy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBp
ID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKKwkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5h
cmd1bWVudHNbaV07CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBu
dWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5P
Ti1OTFMtMSQKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewor
CQkJCQlhcmd1bWVudC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNr
OyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1
ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9D
T05URVhUKTsKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29s
dmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9
CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCS8vICByZWNvcmQgYSBi
ZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhv
ZCBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdb
bGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KQorCQkJCQkJcHNl
dWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJpbmRpbmcu
TlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJyb3Jz
IHdpdGggbnVsbCB0eXBlCiAKLQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50
OwotCWxvbmcgc291cmNlTGV2ZWwgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZl
bDsKLQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLnJlY2VpdmVyIGlu
c3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IEFTVE5v
ZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCi0J
CXJlY2VpdmVyQ2FzdCA9IHRydWU7Ci0JfQotCWlmICh0aGlzLnJlY2VpdmVyLnJlc29sdmVkVHlw
ZSAhPSBudWxsKQotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJy
b3IoIlJlY2VpdmVyIHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8k
Tk9OLU5MUy0xJAotCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5yZXNv
bHZlVHlwZShzY29wZSk7Ci0JdGhpcy5yZWNlaXZlcklzVHlwZSA9IHRoaXMucmVjZWl2ZXIgaW5z
dGFuY2VvZiBOYW1lUmVmZXJlbmNlICYmICgoKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2ZXIp
LmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7Ci0JaWYgKHJlY2VpdmVyQ2FzdCAmJiB0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7Ci0JCSAvLyBkdWUgdG8gY2hhbmdlIG9mIGRlY2xh
cmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2FzdCBzaG91bGQg
YmUgbm90aWZpZWQKLQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RFeHByZXNz
aW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2Fz
dCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7Ci0JCX0KLQl9Ci0JLy8gcmVzb2x2ZSB0
eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAodGhpcy50
eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50
cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmls
ZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQl0aGlzLmdl
bmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50
IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5j
ZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3Vt
ZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sg
Ym91bmRzKi8pKSA9PSBudWxsKSB7Ci0JCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwotCQkJfQotCQkJ
aWYgKGFyZ0hhc0Vycm9yICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewot
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJl
ZmVyZW5jZSk7Ci0JCQl9Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5h
cmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRz
Ci0JCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1h
eDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKLQkJ
CQl9Ci0JCQl9Ci0JCQlyZXR1cm4gbnVsbDsKLQkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBu
dWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCi0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwp
IHsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1
bWVudHMKLQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuZ3RoOyBpKyspewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRz
W2ldOwotCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKLQkJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50
IHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAot
CQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVu
dC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNo
ZWNrIGxhdGVyIG9uCi0JCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOwotCQkJfQotCQkJ
YXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCWlm
ICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9
PSBudWxsKXsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2
ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmIChhcmd1bWVudC5pc1Bv
bHlFeHByZXNzaW9uKCkKLQkJCQkJfHwgKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbiAm
JiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYgKHRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVu
Y2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0JCX0K
LQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgaW5z
dGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJLy8gIHJlY29yZCBhIGJlc3QgZ3Vlc3Ms
IGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0J
CQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0J
CQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KQotCQkJCQlwc2V1ZG9BcmdzW2ldID0g
dGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5h
cmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5
cGUKLQkJCQl0aGlzLmJpbmRpbmcgPQotCQkJCQl0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlz
KCkKLQkJCQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgcHNldWRv
QXJncywgdGhpcykKLQkJCQkJCTogc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykg
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMs
IGZhbHNlKTsKLQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5p
c1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQ
cm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKLQkJCQkJLy8g
cmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQg
aGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAh
PSBudWxsKSB7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxl
cyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCi0JCQkJ
CQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0
LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCi0JCQkJCQkJY2xvc2Vz
dE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOwotCQkJ
CQkJfQotCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOwotCQkJCQkJTWV0aG9kQmlu
ZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOwotCQkJ
CQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAm
JiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7Ci0JCQkJ
CQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lk
ZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCi0JCQkJCQkJY2xvc2VzdE1hdGNoT3Jp
Z2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7
CisJCQkJCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/CisJ
CQkJCQkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3Ms
IHRoaXMpIDoKKwkJCQkJCQkJCXNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzLCBm
YWxzZSk7CisKKwkJCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAo
KFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOworCQkJCQkJ
Ly8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5l
ZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJCWlmIChjbG9zZXN0TWF0
Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFy
aWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QK
KwkJCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBj
b250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCisJCQkJCQkJ
CWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZyludWxs
KTsKKwkJCQkJCQl9CisJCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOworCQkJCQkJ
CU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2lu
YWwoKTsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2
YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5h
bCkpIHsKKwkJCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20g
d2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCisJCQkJCQkJCWNs
b3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFj
Y0xvY2FsbHlVc2VkOworCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0KKwkJCQlyZXR1
cm4gbnVsbDsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPT0gbnVs
bCkgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwkJLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZl
IGFueSBtZXNzYWdlCisJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkp
IHsKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJCQlyZXR1cm4gbnVs
bDsKIAkJfQogCX0KLQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPT0gbnVsbCkgewotCQly
ZXR1cm4gbnVsbDsKKwkKKwlUeXBlQmluZGluZyBtZXRob2RUeXBlID0gZmluZE1ldGhvZEJpbmRp
bmcoc2NvcGUpOworCWlmIChtZXRob2RUeXBlICE9IG51bGwgJiYgbWV0aG9kVHlwZS5pc1BvbHlU
eXBlKCkpIHsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZS5j
YXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7CisJCXJldHVybiBtZXRob2RUeXBlOwogCX0K
LQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKLQlpZiAodGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUuaXNCYXNlVHlwZSgpKSB7Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJn
dW1lbnRUeXBlcyk7Ci0JCXJldHVybiBudWxsOwotCX0KLQotCWZpbmRNZXRob2RCaW5kaW5nKHNj
b3BlKTsKIAogCWlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRo
aXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKSB7CkBAIC03MTgsMTAgKzcxNiwxNyBA
QAogCQkJCQkJCQkgZGVjbGFyaW5nQ2xhc3Muc3VwZXJjbGFzcygpIGluc3RhbmNlb2YgTWlzc2lu
Z1R5cGVCaW5kaW5nOwogCQlpZiAoIWF2b2lkU2Vjb25kYXJ5KQogCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuaW52YWxpZE1ldGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworCQkKIAkJTWV0aG9k
QmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGlu
ZykuY2xvc2VzdE1hdGNoOwogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVtSWQoKSkgewog
CQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAvLyBubyByZXNp
bGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxp
YWJsZU1ldGhvZEluYXBwbGljYWJsZToKKwkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlv
blR5cGVJbmZlcmVuY2VGYWlsdXJlOgorCQkJCS8vIEdyYWJiaW5nIHRoZSBjbG9zZXN0IG1hdGNo
IGltcHJvdmVzIGVycm9yIHJlcG9ydGluZyBpbiBuZXN0ZWQgaW52b2NhdGlvbiBjb250ZXh0cwor
CQkJCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKKwkJ
CQkJYnJlYWs7CisJCQkJLy8kRkFMTC1USFJPVUdIJAogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5O
b3RWaXNpYmxlIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljUmVmZXJlbmNlSW5D
b25zdHJ1Y3Rvckludm9jYXRpb24gOgogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob25TdGF0aWNS
ZWZlcmVuY2VJblN0YXRpY0NvbnRleHQgOgpAQCAtODU5LDE2ICs4NjQsMjAgQEAKIAkJCQk/IHRo
aXMucmVzb2x2ZWRUeXBlCiAJCQkJOiBudWxsOwogfQotLyoqCi0gKiBGaW5kIHRoZSBtZXRob2Qg
YmluZGluZzsgCi0gKiBpZiB0aGlzLmlubmVyc05lZWRVcGRhdGUgYWxsb3cgZm9yIHR3byBhdHRl
bXB0cyB3aGVyZSB0aGUgZmlyc3Qgcm91bmQgbWF5IHN0b3AKLSAqIGFmdGVyIGFwcGxpY2FiaWxp
dHkgY2hlY2tpbmcgKDE4LjUuMSkgdG8gaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIGludG8gdGhl
IGZpbmFsCi0gKiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpLgotICovCi1wcm90
ZWN0ZWQgdm9pZCBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Njb3BlIHNjb3BlKSB7Ci0JdGhpcy5i
aW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpCi0JCQk/IHNjb3BlLmdldElt
cGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykKKwor
cHJvdGVjdGVkIFR5cGVCaW5kaW5nIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUp
IHsKKwkKKwkKKwl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkg
PyAKKwkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1l
bnRUeXBlcywgdGhpcykgCiAJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKworCWlmICh0
aGlzLmJpbmRpbmcgPT0gbnVsbCkgLy8gY2FuJ3QgaGFwcGVuID8gSSB0aGluayB3ZSBhbHdheXMg
Z2V0IGEgcHJvYmxlbSBiaW5kaW5nLCBhbnl3YXlzLgorCQlyZXR1cm4gbnVsbDsKKwkKKwlpZiAo
dGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykKKwkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CisJCiAJcmVzb2x2ZVBv
bHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudFR5
cGVzLCBzY29wZSk7CiAJCiAJLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25zIGluIHRo
ZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1dGlvbiBv
ZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgpAQCAtODgzLDExICs4OTIsOCBAQAog
CWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9w
dGlvbnMoKTsKIAlpZiAoY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzggJiYgdGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nICYmIHRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CWlmICghY29tcGlsZXJPcHRpb25zLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlD
aGVjaykKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJ
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBnbWIgPSAoUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmc7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBj
dHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KHBnbWIpOwotCQlpZiAoY3R4ID09IG51bGwgfHwgY3R4
LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJ
CXJldHVybjsKIAkJaW50IGxlbmd0aCA9IHBnbWIudHlwZUFyZ3VtZW50cyA9PSBudWxsID8gMCA6
IHBnbWIudHlwZUFyZ3VtZW50cy5sZW5ndGg7CiAJCWJvb2xlYW4gc2F3UmF3VHlwZSA9IGZhbHNl
OwogCQlmb3IgKGludCBpID0gMDsgIGkgPCBsZW5ndGg7IGkrKykgewpAQCAtODk2LDQwICs5MDIs
MjYgQEAKIAkJCSAgIGRvZXMgbm90IGFwcGVhciBmdWxseSBob29rZWQgdXAgaW50byBpc0NvbXBh
dGlibGVXaXRoIGFuZCBpc0VxdWl2YWxlbnQgdG8gZXZlcnl3aGVyZS4gQXQgdGhlIG1vbWVudCwg
YmFpbCBvdXQgaWYgd2Ugc2VlIGNhcHR1cmUuCiAJCQkqLyAgIAogCQkJaWYgKHBnbWIudHlwZUFy
Z3VtZW50c1tpXS5pc0NhcHR1cmUoKSkKLQkJCQlyZXR1cm47CisJCQkJcmV0dXJuIHRoaXMuYmlu
ZGluZy5yZXR1cm5UeXBlOwogCQkJaWYgKHBnbWIudHlwZUFyZ3VtZW50c1tpXS5pc1Jhd1R5cGUo
KSkKIAkJCQlzYXdSYXdUeXBlID0gdHJ1ZTsKIAkJfQogCQlpZiAoIXNhd1Jhd1R5cGUpCi0JCQly
ZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCWxlbmd0aCA9IHRo
aXMuYXJndW1lbnRzID09IG51bGwgPyAwIDogdGhpcy5hcmd1bWVudHMubGVuZ3RoOwogCQlpZiAo
bGVuZ3RoID09IDApCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5
cGU7CiAJCVR5cGVCaW5kaW5nIFtdIGZpbmFsQXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGlu
Z1tsZW5ndGhdOwogCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQlUeXBl
QmluZGluZyBmaW5hbEFyZ3VtZW50VHlwZSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlw
ZTsKIAkJCWlmIChmaW5hbEFyZ3VtZW50VHlwZSA9PSBudWxsIHx8ICFmaW5hbEFyZ3VtZW50VHlw
ZS5pc1ZhbGlkQmluZGluZygpKSAgLy8gYWxyZWFkeSBzaWRlZCB3aXRoIHRoZSBkZXZpbC4KLQkJ
CQlyZXR1cm47CisJCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQkJZmluYWxB
cmd1bWVudFR5cGVzW2ldID0gZmluYWxBcmd1bWVudFR5cGU7IAogCQl9Ci0JCWlmIChzY29wZS5w
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5iaW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlw
ZXMsIGZhbHNlLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCisJCWlmIChzY29wZS5w
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5iaW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlw
ZXMsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJMRSkKIAkJCXRoaXMuYmluZGluZyA9IG5l
dyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcub3JpZ2luYWwoKSwgdGhpcy5iaW5k
aW5nLnNlbGVjdG9yLCBmaW5hbEFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5k
KTsKIAl9Ci19Ci0KLUBPdmVycmlkZQotcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCWlm
ICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQoKFBh
cmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51
bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJF
RCkgewotCQkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOwotCQkJTWV0aG9kQmluZGlu
ZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9jYXRpb25UeXBlKHRoaXMsIChQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7Ci0JCQlpZiAodXBkYXRl
QmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5cGUpKSB7Ci0JCQkJQVNUTm9kZS5yZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdXBkYXRlZEJpbmRpbmcsIHNjb3BlKTsK
LQkJCX0KLQkJfQotCX0KLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CisJcmV0dXJuIHRoaXMu
YmluZGluZy5yZXR1cm5UeXBlOwogfQogCiBwdWJsaWMgdm9pZCBzZXRBY3R1YWxSZWNlaXZlclR5
cGUoUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUpIHsKQEAgLTk2NSw2ICs5NTcsMzkgQEAK
IAkgKi8KIAlyZXR1cm4gaXNQb2x5RXhwcmVzc2lvbih0aGlzLmJpbmRpbmcpOwogfQorCitwdWJs
aWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBl
Y3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOworCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZCA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAor
CQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkJaWYgKG1l
dGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJu
VHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJ
cmV0dXJuIGZhbHNlOworCQlyZXR1cm4gc3VwZXIuaXNCb3hpbmdDb21wYXRpYmxlKG1ldGhvZC5y
ZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKSwgdGFyZ2V0VHlwZSwgdGhp
cywgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb2xkRXhwZWN0
ZWRUeXBlOworCX0KK30KKworcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBmaW5hbCBTY29wZSBzY29wZSkgeworCVR5cGVCaW5kaW5nIG9sZEV4
cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRU
eXBlID0gdGFyZ2V0VHlwZTsKKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSB0aGlzLnJlY2VpdmVy
LmlzSW1wbGljaXRUaGlzKCkgPyAKKwkJCQkgIHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMu
c2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykgCisJCQkJOiBzY29wZS5nZXRNZXRo
b2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRU
eXBlcywgdGhpcyk7CisJCisJCWlmIChtZXRob2QgPT0gbnVsbCB8fCAhbWV0aG9kLmlzVmFsaWRC
aW5kaW5nKCkgfHwgbWV0aG9kLnJldHVyblR5cGUgPT0gbnVsbCB8fCAhbWV0aG9kLnJldHVyblR5
cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJCXJldHVybiBmYWxzZTsKKwkJCQorCQlyZXR1cm4gbWV0
aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLmlzQ29tcGF0aWJs
ZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRU
eXBlID0gb2xkRXhwZWN0ZWRUeXBlOworCX0KK30KKwogLyoqIFZhcmlhbnQgb2YgaXNQb2x5RXhw
cmVzc2lvbigpIHRvIGJlIHVzZWQgZHVyaW5nIHR5cGUgaW5mZXJlbmNlLCB3aGVuIGEgcmVzb2x1
dGlvbiBjYW5kaWRhdGUgZXhpc3RzLiAqLwogcHVibGljIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lv
bihNZXRob2RCaW5kaW5nIHJlc29sdXRpb25DYW5kaWRhdGUpIHsKIAlpZiAodGhpcy5leHByZXNz
aW9uQ29udGV4dCAhPSBBU1NJR05NRU5UX0NPTlRFWFQgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4
dCAhPSBJTlZPQ0FUSU9OX0NPTlRFWFQpCkBAIC0xMDI4LDIxICsxMDUzLDIwIEBACiAJcmV0dXJu
IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKTsKIH0KIC8vIC0tIGludGVyZmFjZSBJbnZv
Y2F0aW9uOiAtLQotcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJn
ZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQlpZiAocmVwb3J0
RXJyb3JzKSB7Ci0JCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkKLQkJCXNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigibWV0aG9kIGlzIHVuZXhwZWN0ZWRseSB1
bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJZWxzZSBpZiAoIXRoaXMuYmluZGlu
Zy5pc1ZhbGlkQmluZGluZygpKQotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1l
dGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhU
eXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCVR5cGVCaW5kaW5nIG9sZEV4
cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRU
eXBlID0gdGFyZ2V0VHlwZTsKKwkJTWV0aG9kQmluZGluZyBtYiA9IAorCQkJCXRoaXMucmVjZWl2
ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAorCQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhp
cy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdldE1l
dGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKTsKKwkJcmV0dXJuIG1iOwkJICAKKwl9IGZpbmFsbHkgeworCQl0aGlzLmV4
cGVjdGVkVHlwZSA9IG9sZEV4cGVjdGVkVHlwZTsKIAl9Ci0JcmV0dXJuIHRoaXMuYmluZGluZzsK
IH0KLXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewotCXJldHVybiB0aGlzLmFyZ3Vt
ZW50czsKLX0KLXB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgp
IHsKLQlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKLX0KKwogcHVibGljIHZvaWQgcmVn
aXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVyZW5j
ZUNvbnRleHRzID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxl
TG9va3VwVGFibGUoKTsKQEAgLTEwNTMsMzUgKzEwNzcsMTQgQEAKIAkJcmV0dXJuIG51bGw7CiAJ
cmV0dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1l
dGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAodGhp
cy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAK
LQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOworcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVu
dHMoKSB7CisJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwogfQotcHVibGljIGJvb2xlYW4gdXBkYXRl
QmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSkgewotCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5k
aW5nOwotCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwpIHsKLQkJSW5mZXJlbmNl
Q29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0
cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRC
aW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0J
CQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCS8v
IHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93
IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJaGFz
VXBkYXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5n
KTsKLQkJfQotCX0KLQl0aGlzLmJpbmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQl0aGlzLnJlc29s
dmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5nLnJldHVyblR5cGU7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsK
LX0KLXB1YmxpYyBib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMuaW5u
ZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9u
ZSgpIHsKLQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJbm5l
ckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhpcy5p
bm5lckluZmVyZW5jZUhlbHBlcjsKK3B1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNz
aW9uQ29udGV4dCgpIHsKKwlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKIH0KIC8vIC0t
IEludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
ZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJcmV0dXJuIG5ldyBJbmZlcmVu
Y2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKIH0KLX0KK30KXCBObyBu
ZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFs
bG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25F
eHByZXNzaW9uLmphdmEKaW5kZXggMWQ3Mzg2YS4uZjk2ZTdhMSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
UXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNDEwLDEwICs0MTAsNiBAQAog
CQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2Nv
cGUpKSA9PSBudWxsKXsKIAkJCQkJaGFzRXJyb3IgPSB0cnVlOwogCQkJCX0KLQkJCQlpZiAoc291
cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5
RXhwcmVzc2lvbigpIHx8IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZv
Y2F0aW9uKWFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQlpZiAodGhpcy5pbm5l
ckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KIAkJCX0KIAkJfQogCkBAIC02
MDQsNCArNjAwLDQgQEAKIAkJfQogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsKIAl9
Ci19Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Np
b24uamF2YQppbmRleCBiODQ4NDFmLi5kZjM0NTc3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Jl
ZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Np
b24uamF2YQpAQCAtNzA2LDYgKzcwNiw3IEBACiAJCU1ldGhvZEJpbmRpbmcgcHJldmlvdXNCaW5k
aW5nID0gdGhpcy5iaW5kaW5nOwogCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzRGVzY3JpcHRvciA9
IHRoaXMuZGVzY3JpcHRvcjsKIAkJVHlwZUJpbmRpbmcgcHJldmlvdXNSZXNvbHZlZFR5cGUgPSB0
aGlzLnJlc29sdmVkVHlwZTsKKwkJVHlwZUJpbmRpbmcgcHJldmlvdXNFeHBlY3RlZFR5cGUgPSB0
aGlzLmV4cGVjdGVkVHlwZTsKIAkJdHJ5IHsKIAkJCXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9D
QVRJT05fQ09OVEVYVCk7CiAJCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CkBAIC03MjAs
MTkgKzcyMSw3IEBACiAJCQl0aGlzLmRlc2NyaXB0b3IgPSBwcmV2aW91c0Rlc2NyaXB0b3I7CiAJ
CQl0aGlzLnJlc29sdmVkVHlwZSA9IHByZXZpb3VzUmVzb2x2ZWRUeXBlOwogCQkJc2V0RXhwcmVz
c2lvbkNvbnRleHQocHJldmlvdXNDb250ZXh0KTsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gbnVs
bDsgLy8gZG9uJ3QgY2FsbCBzZXRFeHBlY3RlZFR5cGUobnVsbCksIHdvdWxkIE5QRQotCQkJdGhp
cy50cmlhbFJlc29sdXRpb24gPSBmYWxzZTsKLQkJfQotCX0KLQotCXB1YmxpYyBNZXRob2RCaW5k
aW5nIHByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQoU2NvcGUgc2NvcGUpIHsKLQkJdHJ5IHsKLQkJ
CXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQl0aGlzLmJpbmRp
bmcgPSBudWxsOwotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSB0cnVlOwotCQkJcmVzb2x2ZVR5
cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwotCQl9IGZp
bmFsbHkgeworCQkJdGhpcy5leHBlY3RlZFR5cGUgPSBwcmV2aW91c0V4cGVjdGVkVHlwZTsKIAkJ
CXRoaXMudHJpYWxSZXNvbHV0aW9uID0gZmFsc2U7CiAJCX0KIAl9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKaW5k
ZXggYTEzMmM5Mi4uNDBlNTNkZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQpAQCAtNDU2LDggKzQ1Niw2IEBA
CiAJCQlpZiAoIWluY29ycG9yYXRlKGNvbnRleHQsIGZyZXNoQm91bmRzLCBmcmVzaEJvdW5kcykp
CiAJCQkJcmV0dXJuIGZhbHNlOwogCi0JCQl0aGlzLmNhcHR1cmVzLmNsZWFyKCk7Ci0JCQkKIAkJ
CS8vIE1lcmdlIHRoZSBib3VuZHMgaW50byBvbmUgaW5jb3Jwb3JhdGVkIGdlbmVyYXRpb24uCiAJ
CQlmaW5hbCBpbnQgaW5jb3Jwb3JhdGVkTGVuZ3RoID0gdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMu
bGVuZ3RoOwogCQkJZmluYWwgaW50IHVuaW5jb3Jwb3JhdGVkTGVuZ3RoID0gZnJlc2hCb3VuZHMu
bGVuZ3RoOwpAQCAtNTgzLDcgKzU4MSw5IEBACiAJCXdoaWxlIChjYXB0SXRlci5oYXNOZXh0KCkp
IHsKIAkJCUVudHJ5PFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZywgUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nPiBjYXB0ID0gY2FwdEl0ZXIubmV4dCgpOwogCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGdBbHBoYSA9IGNhcHQuZ2V0S2V5KCk7Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcg
Z0EgPSBjYXB0LmdldFZhbHVlKCk7CisJCQkvLyBXZSBjb21lIGluIHdpdGggY2FwdHVyZShnQSks
IHdlIG5lZWQgdG8gd29yayB3aXRoIGdBIGJlbG93LiBJdCB3YXMgbmVjZXNzYXJ5IHRvIGVzdGFi
bGlzaCBjYXB0dXJlIGF0IHRoZSBjYWxsIHNpdGUuCisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcgY2dBID0gY2FwdC5nZXRWYWx1ZSgpOworCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdB
ID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgY2dBLnVuY2FwdHVyZShjb250ZXh0LnNjb3Bl
KTsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZyA9IChSZWZlcmVuY2VCaW5kaW5nKSBnQS5vcmlnaW5h
bCgpOwogCQkJZmluYWwgVHlwZVZhcmlhYmxlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBnLnR5cGVW
YXJpYWJsZXMoKTsKIAkJCS8vIGNvbnN0cnVjdCB0aGV0YSA9IFtQMTo9YWxwaGExLC4uLl0KQEAg
LTYwMiw2ICs2MDIsNyBAQAogCQkJCWFkZEJvdW5kcyhwaS5nZXRUeXBlQm91bmRzKGFscGhhLCB0
aGV0YSksIGNvbnRleHQuZW52aXJvbm1lbnQpOwogCiAJCQkJVHlwZUJpbmRpbmcgYWkgPSBnQS5h
cmd1bWVudHNbaV07CisJCQkJVHlwZUJpbmRpbmcgY2FpID0gY2dBLmFyZ3VtZW50c1tpXTsKIAkJ
CQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2FyZEJpbmRpbmcpIHsKIAkJCQkJV2lsZGNhcmRCaW5k
aW5nIHdpbGRjYXJkQmluZGluZyA9IChXaWxkY2FyZEJpbmRpbmcpYWk7CiAJCQkJCVR5cGVCaW5k
aW5nIHQgPSB3aWxkY2FyZEJpbmRpbmcuYm91bmQ7CkBAIC02MTMsNyArNjE0LDE0IEBACiAJCQkJ
CQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhh
c05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91bmQgYm91bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJ
CWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpKQorCQkJCQkJ
CQkvKiBXaXRoIHRoZSBleHBlY3RlZCB0eXBlJ3MgZGVjbGFyZWQgdHlwZSBiZWluZyBDb2xsZWN0
b3I8PyBzdXBlciBULCBBLCBSPiBhbmQgZ0FscGhhIGJlaW5nIENvbGxlY3RvcjxUIzAsPyMxLExp
c3Q8VCMwPiMyPiBhbmQgY2dBIGJlaW5nCisJCQkJCQkJCSAgIENvbGxlY3RvcjxUIzAsY2FwdHVy
ZSMxLW9mID8sTGlzdDxUIzA+Piwgd2l0aG91dCB0aGUgY29uc3RyYWludCByZWR1Y3Rpb24gYmVs
b3cgLSB3ZSB3aWxsIG5ldmVyIGRpc2NvdmVyIEEgdG8gYmUgY2FwdHVyZSMxLW9mID8gYW5kCisJ
CQkJCQkJCSAgIGNsYWltIEEgaXMgamxPLiBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMjQgLSAjMjcKKwkJCQkJCQkJKi8KKwkJCQkJCQkJ
aWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNvbnRleHQsIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5j
cmVhdGUoYm91bmQucmlnaHQsIGNhaSwgUmVkdWN0aW9uUmVzdWx0LlNBTUUpKSkKKwkJCQkJCQkJ
CXJldHVybiBmYWxzZTsKKwkJCQkJCQkJLy8gT3VyID0gcmVkdWN0aW9uIHRyYW5zaXRpdmVseSBh
ZGRzIGEgbmV3IGJvdW5kIHRoYXQgbmVjZXNzaXRhdGVzIHRoZSBjaGVjayBiZWxvdyBmb3IgY2Fw
dHVyZS4gCisJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFy
aWFibGUpICYmICFib3VuZC5yaWdodC5pc0NhcHR1cmUoKSkKIAkJCQkJCQkJCXJldHVybiBmYWxz
ZTsKIAkJCQkJCQl9CiAJCQkJCQl9CkBAIC02NjgsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9CiAJ
CX0KKwkJdGhpcy5jYXB0dXJlcy5jbGVhcigpOwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0
NjYuLmYyNjI2NTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Np
b25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZv
cm11bGEuamF2YQpAQCAtMTgsMTIgKzE4LDEwIEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWxsb2NhdGlvbkV4cHJl
c3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1
bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRp
dGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZWZlcmVuY2VFeHByZXNzaW9uOwpA
QCAtNTYsNDEgKzU0LDggQEAKIAogCXB1YmxpYyBPYmplY3QgcmVkdWNlKEluZmVyZW5jZUNvbnRl
eHQxOCBpbmZlcmVuY2VDb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7
CiAJCS8vIEpMUyAxOC4yLjEKLQkJcHJvcGVyOgogCQlpZiAodGhpcy5yaWdodC5pc1Byb3BlclR5
cGUodHJ1ZSkpIHsKLQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVk
VHlwZTsKLQkJCWlmIChleHByVHlwZSA9PSBudWxsKSB7Ci0JCQkJLy8gaWYgd2UgZ2V0IGhlcmUg
Zm9yIHNvbWUga2luZHMgb2YgcG9seSBleHByZXNzaW9ucyAoaW5jbC4gQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKSwKLQkJCQkvLyB0aGVuIG90aGVyIHdheXMgZm9yIGNoZWNraW5nIGNvbXBhdGliaWxp
dHkgYXJlIG5lZWRlZDoKLSAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2Yg
RnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVm
dCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAgICAg
IC8vIGNmLiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25UZXN0LnRlc3Q0MTI0NTMoKQotICAgICAg
ICAgICAgICAgICAgICAgICAgTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gKChMYW1iZGFFeHByZXNz
aW9uKSB0aGlzLmxlZnQpLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0aGlz
LnJpZ2h0KTsKLSAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29weSAhPSBudWxsICYm
IGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJp
bmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICAgICAgICAgIH0KLSAgICAgICAg
ICAgICAgICB9Ci0gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5pc0NvbXBhdGlibGVX
aXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpID8gVFJVRSA6IEZBTFNFOwot
CQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCXJldHVybiBG
QUxTRTsKLQkJCX0KLQkJCWlmIChpc0NvbXBhdGlibGVXaXRoSW5Mb29zZUludm9jYXRpb25Db250
ZXh0KGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0KSkgewotCQkJCXJldHVy
biBUUlVFOwotCQkJfSBlbHNlIGlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhw
cmVzc2lvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJLy8gaGFsZi1y
ZXNvbHZlZCBkaWFtb25kIGhhcyBhIHJlc29sdmVkVHlwZSwgYnV0IHRoYXQgbWF5IG5vdCBiZSB0
aGUgZmluYWwgd29yZCwgdHJ5IG9uZSBtb3JlIHN0ZXAgb2YgcmVzb2x1dGlvbjoKLSAgICAgICAg
ICAgIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoKEFsbG9jYXRpb25FeHByZXNzaW9uKSB0aGlz
LmxlZnQpLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCXJl
dHVybiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNDb21wYXRp
YmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSkgPyBUUlVFIDogRkFM
U0U7Ci0gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEludm9jYXRp
b24gJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJlc3Npb24oKSkgewotICAgICAgICAgICAgCUludm9j
YXRpb24gaW52b2MgPSAoSW52b2NhdGlvbikgdGhpcy5sZWZ0OwotICAgICAgICAgICAgCU1ldGhv
ZEJpbmRpbmcgYmluZGluZyA9IGludm9jLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwp
OwotICAgICAgICAgICAgCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSB7Ci0gICAgICAgICAgICAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBtZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBi
aW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggbGVmdEN0eCA9IGludm9jLmdldEluZmVy
ZW5jZUNvbnRleHQobWV0aG9kKTsKLSAgICAgICAgICAgIAkJaWYgKGxlZnRDdHguc3RlcENvbXBs
ZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0gICAgICAgICAgICAJ
CQlicmVhayBwcm9wZXI7IC8vIGZhbGwgdGhyb3VnaCBpbnRvIG5lc3RlZCBpbmZlcmVuY2UgYmVs
b3cgKG5vdCBleHBsaWNpdCBpbiB0aGUgc3BlYyEpCi0gICAgICAgICAgICAJCX0KLSAgICAgICAg
ICAgIAl9Ci0gICAgICAgICAgICB9Ci0JCQlyZXR1cm4gRkFMU0U7CisJCQlyZXR1cm4gdGhpcy5s
ZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkg
fHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNl
Q29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7CiAJCX0KIAkJaWYgKCFjYW5CZVBvbHlFeHBy
ZXNzaW9uKHRoaXMubGVmdCkpIHsKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0
LnJlc29sdmVkVHlwZTsKQEAgLTEwMiw3ICs2Nyw3IEBACiAJCQkvLyAtIHBhcmVudGhlc2l6ZWQg
ZXhwcmVzc2lvbiA6IHRoZXNlIGFyZSB0cmFuc3BhcmVudCBpbiBvdXIgQVNUCiAJCQlpZiAodGhp
cy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlvbikgewogCQkJCUludm9jYXRpb24gaW52b2NhdGlv
biA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0JCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01l
dGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7CisJCQkJ
TWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJp
Z2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKIAkJCQlpZiAocHJldmlvdXNNZXRob2QgPT0g
bnVsbCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcuLCBpZiBpbnNpZGUgYSBjb3BpZWQgbGFtYmRhIHdp
dGggaWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0dXJuIG51bGw7IAkJCQkvLyAtPiBwcm9jZWVkIHdp
dGggbm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBwcmV2aW91
c01ldGhvZDsKQEAgLTEyOCw3ICs5Myw2IEBACiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5jcmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNT
b2Z0KTsKIAkJCQkJCX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlu
bmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5vdXRlckNvbnRleHQgPSBpbmZl
cmVuY2VDb250ZXh0OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9kLmlz
Q29uc3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwogCQkJ
CQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwg
YXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQp
OwpAQCAtMjU0LDExICsyMTgsOSBAQAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQu
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJ
CWlmIChmdW5jdGlvblR5cGUgPT0gbnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50
aWFsbHktYXBwbGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFy
Z2V0aW5nIFQgKDE1LjEzLjEpLAotCQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJs
ZSA9IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNl
Q29udGV4dC5zY29wZSk7Ci0JCWlmIChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJ
CXJldHVybiBGQUxTRTsKKwogCQlpZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2Uo
KSkgeworCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2Uu
Z2V0RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJh
aW50cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGlu
Z1tdIHAgPSBmdW5jdGlvblR5cGUucGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBA
IC0yNjgsNiArMjMwLDggQEAKIAkJCWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRz
LmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVz
b2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAo
biAhPSBrKSB7CisJCQkJcmV0dXJuIEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNl
dDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYs
MTEgKzI0MCwxNSBAQAogCQkJCVR5cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNh
YmxlLmlzQ29uc3RydWN0b3IoKSAmJiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVy
ZW5jZSgpID8gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFs
bHlBcHBsaWNhYmxlLnJldHVyblR5cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZP
SUQpCiAJCQkJCXJldHVybiBGQUxTRTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5j
YXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3Np
dGlvbj8/CisJCQkJVHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VD
b250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5h
ZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsK
IAkJCX0KIAkJCXJldHVybiBuZXdDb25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9y
bXVsYVtuZXdDb25zdHJhaW50cy5zaXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJ
TWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBp
bGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBw
b3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hl
biB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09
IG51bGwpCisJCQkJcmV0dXJuIEZBTFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5w
YXJhbWV0ZXJzLmxlbmd0aDsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlm
ICghZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzIx
LDcgKzI4OSw3IEBACiAJCQkJCWluZmVyZW5jZUNvbnRleHQucmVzdW1lU3VzcGVuZGVkSW5mZXJl
bmNlKHByZXZJbnZvY2F0aW9uKTsKIAkJCQl9CiAJCQl9Ci0JCQlUeXBlQmluZGluZyByUHJpbWUg
PSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xh
cmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGU7CisJCQlUeXBlQmluZGluZyBy
UHJpbWUgPSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNs
LmRlY2xhcmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGUuY2FwdHVyZShpbmZl
cmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKCkpOwogCQkJaWYgKHJQcmlt
ZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCkKIAkJCQlyZXR1cm4gRkFMU0U7CiAJCQlyZXR1cm4gQ29u
c3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNT
b2Z0KTsKQEAgLTM2NCw2ICszMzIsNyBAQAogCQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxsKSB7
CiAJCQkvLyBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpOgogCQkJVHlwZUJpbmRp
bmcgcmV0dXJuVHlwZSA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFyaW5n
Q2xhc3MgOiBtZXRob2QucmV0dXJuVHlwZTsKKwkJCQogCQkJaWYgKHJldHVyblR5cGUgPT0gVHlw
ZUJpbmRpbmcuVk9JRCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbigi
ZXhwcmVzc2lvbiBoYXMgbm8gdmFsdWUiKTsgLy8kTk9OLU5MUy0xJAogCkBAIC0zODQsNyArMzUz
LDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4dC5h
ZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVQ
YXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBlKCks
IGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6ZWRU
eXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRC
b3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVzdGFibGlz
aGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VDb250
ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZS5j
YXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgp
KSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKIAkJ
CQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9y
bXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBp
bmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJ
fQpAQCAtNDA0LDcgKzM3Myw3IEBACiAJCQkJCUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJlbmNl
Q29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlpZiAo
c29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRpbmcg
dSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5mZXJl
bmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRPRE8g
bWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJ
bnN0YW50aWF0aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUs
IGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxh
IG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5
cGUsIENPTVBBVElCTEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJ
bmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCQl9CkBAIC00ODQsNCArNDUzLDQgQEAKIAkJ
YnVmLmFwcGVuZChSSUdIVF9BTkdMRV9CUkFDS0VUKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygp
OwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25z
dHJhaW50VHlwZUZvcm11bGEuamF2YQppbmRleCBjYTNjYzBmLi4yNWRjYTk0IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGltcG9y
dCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8qKgpA
QCAtMzExLDYgKzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZvcm11
bGEuY3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUsIHRo
aXMuaXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGluZy5Q
T0xZX1RZUEU6CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5nKSBz
dXBlckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikg
cG9seS5leHByZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRpb24u
YmluZGluZyhzdWJDYW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxsIHx8
ICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQlyZXR1
cm4gcmVkdWNlU3ViVHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5cGUu
Y2FwdHVyZShzY29wZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93IG5l
dyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRhdGUp
OyAvLyROT04tTkxTLTEkCiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VD
b250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5k
ZXggNjFmYmNjMC4uODMwNDc0MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VD
b250ZXh0MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
CkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4cHJl
c3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZv
Y2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFt
YmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEsOSBA
QAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0PgogICog
PGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZvciAx
OC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRlZCBp
bgotICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9j
YXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVsIGNv
bnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVC
aW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBMaWZl
Y3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBjYXVz
ZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0cyBv
ZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29sdXRp
b24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUs
IEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
KX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1lZGlh
dGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0d2Vl
biBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAotICog
ICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsgUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52b2Nh
dGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VD
b250ZXh0KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29udGV4
dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48YnIv
PgotICogICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNlIG9m
IEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZlcmVu
Y2VLaW5kfQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxsaT48
Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJndW1l
bnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhlIGFy
Z3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUgSW5m
ZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNlIG11
c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0aGUg
aW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29scyBhcmUg
YXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHByZXNz
aW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNvcnBv
cmF0ZWQgaW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJsb2Nr
IGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZlcmVu
Y2VDb250ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMgb2Yg
dGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5l
ZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsgI3Jl
YmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3QgYmUg
Y2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAgPGxp
PklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Npb24g
b3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAqICAg
ICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5hbCB0
YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0BsaW5r
IEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBTY29w
ZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJpbmRJ
bm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+Rm9y
IHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFuIGlu
dm9jYXRpb24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNj
b3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9uczog
KDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5kI2Zp
bmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3RvckJp
bmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5rICNy
ZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8
bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBvbHkg
aW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJsb2Fk
IHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNvbXBh
dGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBpbnZv
bHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGluZyBpbmZl
cmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7QGxp
bmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nKX0u
PC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlzIGEg
PGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRlbXB0
aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9LiBP
bmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0BsaW5r
ICNDSEVDS19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2FzIHN1
Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjUsOSAr
MTI5LDYgQEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3Vu
ZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5m
ZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBlIGlu
ZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQogCS8qKiBGb3Ig
ZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3Jl
IHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxUeXBl
QmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5
cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAogCQogCS8qKiBT
aWduYWxzIHdoZXRoZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVj
a2VkIGNvbnZlcnNpb24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNvbnN0
cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8qKiBJbm5lciBw
b2x5IGludm9jYXRpb25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlzIGluZmVyZW5j
ZS4gKi8KLQlMaXN0PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBBcnJheUxpc3Q8
SW52b2NhdGlvblNpdGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNlIGNvbnRl
eHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJbmZlcmVu
Y2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1ldGhvZEJpbmRp
bmc+IHByb2JsZW1NZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1lbnQg
ZW52aXJvbm1lbnQ7CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4LjUuMiBJ
bnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJlc3BvbnNpYmxl
IGZvciBhbnkgcG9zdC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhC
b3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0aGUgYm91bmQg
c2V0IHByb2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0IG0g
aXMgYXBwbGljYWJsZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0IGluZmVySW52
b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52b2Nh
dGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAtMzk4LDkg
KzM1MCw5IEBACiAJCQl9CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlTZXQ8Q29u
c3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKLQkJ
CWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBtZXRo
b2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DKHRoaXMu
aW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQsIGZhbHNl
IC8qIGluZmVyZW5jZSBjb250ZXh0IGFscmVhZHkgaGF2ZSB0aGUgaW5mZXJlbmNlIHZhcmlhYmxl
cyBmb3IgbWV0aG9kICovKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDogZGV0
ZXJtaW5lIEIzIGZyb20gQworCQkJLy8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBDCiAJ
CQl3aGlsZSAoIWMuaXNFbXB0eSgpKSB7CiAJCQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50Rm9y
bXVsYT4gYm90dG9tU2V0ID0gZmluZEJvdHRvbVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMoYykp
OwpAQCAtNDUwLDcgKzQwMiwxMCBAQAogCQl9CiAJfQogCi0JcHJpdmF0ZSBib29sZWFuIGFkZENv
bnN0cmFpbnRzVG9DKEV4cHJlc3Npb25bXSBleHBycywgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBj
LCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgaW50IGluZmVyZW5jZUtpbmRGb3JNZXRob2QpIHsKKwlw
cml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0MoRXhwcmVzc2lvbltdIGV4cHJzLCBTZXQ8
Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJlbmNl
S2luZEZvck1ldGhvZCwgYm9vbGVhbiBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCWlmIChs
aWZ0SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCQljcmVhdGVJbml0aWFsQm91bmRTZXQobWV0aG9k
LnR5cGVWYXJpYWJsZXMoKSk7CisJCX0KIAkJVHlwZUJpbmRpbmdbXSBmczsKIAkJaWYgKGV4cHJz
ICE9IG51bGwpIHsKIAkJCWludCBrID0gZXhwcnMubGVuZ3RoOwpAQCAtNDcxLDE0ICs0MjYsMTQg
QEAKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgazsgaSsrKSB7CiAJCQkJVHlwZUJpbmRpbmcgZnNp
ID0gZnNbTWF0aC5taW4oaSwgcC0xKV07CiAJCQkJVHlwZUJpbmRpbmcgc3Vic3RGID0gc3Vic3Rp
dHV0ZShmc2kpOwotCQkJCWlmICghYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihleHByc1tpXSwg
YywgZnNpLCBzdWJzdEYsIG1ldGhvZCkpCisJCQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQ19PbmVF
eHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBsaWZ0SW5mZXJlbmNlVmFyaWFi
bGVzKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwogCSAgICAgICAgfQogCQl9CiAJCXJldHVybiB0cnVl
OwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKEV4cHJl
c3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcgZnNpLCBU
eXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBib29s
ZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0
cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0
aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4gbGlmdEluZmVyZW5jZVZhcmlhYmxlcykgewogCQkv
LyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRvIGFw
cGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlpZiAo
IWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJYy5h
ZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1Y3Rp
b25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsKQEAg
LTQ4NywxMDMgKzQ0MiwyMyBAQAogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeGNlcHRpb25Gb3Jt
dWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmksIHN1YnN0RikpOwogCQl9IGVsc2UgaWYg
KGV4cHJpIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBleHByaS5pc1BvbHlFeHByZXNzaW9uKCkp
IHsKIAkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByaTsKLQkJCU1l
dGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcobnVsbCwgZmFsc2Us
IG51bGwpOworCQkJTWV0aG9kQmluZGluZyBpbm5lck1ldGhvZCA9IGludm9jYXRpb24uYmluZGlu
ZyhzdWJzdEYsIHRoaXMuc2NvcGUpOwogCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJSW5mZXJlbmNlQ29udGV4dDE4
IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZykgaW5uZXJNZXRob2QpOwogCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7
IC8vIG90aGVyd2lzZSBpbm5lck1ldGhvZCBkb2VzIG5vdCBwYXJ0aWNpcGF0ZSBpbiBpbmZlcmVu
Y2UKLQkJCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DKGludm9jYXRpb24uYXJndW1lbnRzKCks
IGMsIGlubmVyTWV0aG9kLmdlbmVyaWNNZXRob2QoKSwgaW5uZXJDdHguaW5mZXJlbmNlS2luZCk7
CisJCQkJCS8vIFBlciBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgw
NTIzMjUsIHdlIHNob3VsZCBub3QgYmUgYWRkaW5nIGNvbnN0cmFpbnRzIHRvIEMgaWYgdGFyZ2V0
IGlzIGEgcHJvcGVyIHR5cGUuCisJCQkJCS8vIEkgc2F3IHRoaXMgdG9vIGxhdGUgYW5kIHRvIGF2
b2lkIHRoZSAib3V0IG9mIHNjb3BlIiBpbmZlcmVuY2UgdmFyaWFibGVzIHByb2JsZW0sIEkgYW0g
bGlmdGluZyB0aGUgaW5mZXJlbmNlIHZhcmlhYmxlcyBpbnRvCisJCQkJCS8vIElDLiBGb3IgcG9s
eSBleHByZXNzaW9ucyB0YXJnZXR0aW5nIGltcHJvcGVyIHR5cGVzLCBuZXN0ZWQgaW5mZXJlbmNl
IHdvdWxkIGhhdmUgYXJyYW5nZWQgdG8gbGlmdCBjb25zdHJhaW50cyBhbmQgaW5mZXJlbmNlCisJ
CQkJCS8vIHZhcmlhYmxlcyBhbmQgYm91bmRzLiBUT0RPOiBmb2xsb3cgdXAgb24gdGhpcy4gVGhl
IHByZXNlbnQgY29kZSBpcyBzdGlsbCBjb3JyZWN0LgorCQkJCQlyZXR1cm4gYWRkQ29uc3RyYWlu
dHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywgaW5uZXJNZXRob2QuZ2VuZXJpY01ldGhv
ZCgpLCBpbm5lckN0eC5pbmZlcmVuY2VLaW5kLCBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzIHwgc3Vi
c3RGLmlzUHJvcGVyVHlwZSh0cnVlKSk7CiAJCQkJfQogCQkJfQogCQl9IGVsc2UgaWYgKGV4cHJp
IGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9uKSB7CiAJCQlDb25kaXRpb25hbEV4cHJl
c3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBleHByaTsKLQkJCXJldHVybiBhZGRD
b25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZUcnVlLCBjLCBmc2ksIHN1YnN0RiwgbWV0
aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZGYWxzZSwg
YywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJCQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0NfT25l
RXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCwgbGlmdEluZmVyZW5j
ZVZhcmlhYmxlcykKKwkJCQkgJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlm
RmFsc2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGxpZnRJbmZlcmVuY2VWYXJpYWJsZXMpOwog
CQl9CiAJCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIFNpbXBsaWZpZWQgQVBJIHRvIHBl
cmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikKLQkgKiBhbmQgcGVy
Zm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywgcmViaW5kaW5nIG9mIGlubmVyIHBv
bHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxlbSBtZXRob2QgYmlu
ZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpbmZlcmVu
Y2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogQHBhcmFtIGludm9jYXRpb24gaW52b2NhdGlv
biBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIGFyZ3VtZW50cyBiZWlu
ZyBwYXNzZWQgaW50byB0aGUgaW52b2NhdGlvbgotCSAqIEBwYXJhbSBtZXRob2QgY3VycmVudCBj
YW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIEByZXR1cm4g
YSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJzLAotCSAq
IAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBpbmZlcmVuY2Ug
ZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCS8qQE5vbk51bGwqLyBNZXRob2RC
aW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50VHlwZXMsIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKLQkJLy8gVE9ETyBvcHRpbWl6ZTogaWYgb3V0ZXJDb250ZXh0IGV4aXN0cyBhbmQg
aXMgcmVzb2x2ZWQsIHdlIHByb2JhYmx5IGRvbid0IG5lZWQgdG8gaW5mZXIgYWdhaW4uCi0JCVR5
cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCk7
Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBmaW5hbE1ldGhvZCA9IG51bGw7
Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RUb0NoZWNrID0gbWV0
aG9kOwotCQkKLQkJYm9vbGVhbiBoYXZlUHJvcGVyVGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUgIT0g
bnVsbCAmJiB0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKTsKLQkJaWYgKGhhdmVQcm9wZXJU
YXJnZXRUeXBlIHx8ICFpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1Rh
cmdldFR5cGUoKSkgewotCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmlnaW5h
bE1ldGhvZDsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRU
eXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCUJvdW5kU2V0IHJlc3VsdCA9IHNvbHV0aW9uICE9IG51
bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxsOwotCQkJaWYgKHJlc3VsdCA9PSBudWxsKSB7Ci0J
CQkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJldmlvdXMgY2FuZGlkYXRlIGJ1dCBkaXNjYXJkIGl0
cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRpb25zCi0JCQkJLy8gVE9ETzogc2hvdWxkIHdlIHJl
dGFpbiBhbnkgaW5zdGFudGlhdGlvbnMgb2YgdHlwZSB2YXJpYWJsZXMgbm90IG93bmVkIGJ5IHRo
ZSBtZXRob2Q/IAotCQkJCXRyeSB7Ci0JCQkJCXJlc3VsdCA9IGluZmVySW52b2NhdGlvblR5cGUo
dGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9uLCBvcmlnaW5hbCk7Ci0J
CQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIG5vIHNv
bHV0aW9uLCBidXQgZG8gbW9yZSBjaGVja3MgYmVsb3cKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAocmVz
dWx0ICE9IG51bGwpIHsKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9u
cyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCksIGludm9jYXRpb24sIHJlc3VsdCk7Ci0JCQkJaWYg
KHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCWZpbmFsTWV0aG9kID0gdGhpcy5lbnZpcm9ubWVu
dC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25zKTsK
LQkJCQkJaWYgKHRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5vdGF0aW9uQmFzZWRO
dWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0Zv
ckNvbnRyYWRpdGlvbnMoZmluYWxNZXRob2QsIGludm9jYXRpb24sIHRoaXMuc2NvcGUpOwotCQkJ
CQlpbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChmaW5hbE1ldGhvZCwgdGhpcyk7
Ci0JCQkJCXRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQodGFyZ2V0VHlwZSwgbmV3IFNv
bHV0aW9uKGZpbmFsTWV0aG9kLCByZXN1bHQpKTsKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAoZmluYWxN
ZXRob2QgIT0gbnVsbCkKLQkJCQltZXRob2RUb0NoZWNrID0gZmluYWxNZXRob2Q7Ci0JCX0gZWxz
ZSB7Ci0JCQlmaW5hbE1ldGhvZCA9IG1ldGhvZDsKLQkJfQotCQkKLQkJTWV0aG9kQmluZGluZyBw
cm9ibGVtTWV0aG9kID0gbWV0aG9kVG9DaGVjay5ib3VuZENoZWNrMTgodGhpcy5zY29wZSwgYXJn
dW1lbnRUeXBlcyk7Ci0JCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsKLQotCQlpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYmIGludm9jYXRpb24u
Z2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKQotCQkJcmV0dXJuIG1l
dGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQotCi0JCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKSB7
Ci0JCQlpZiAocmViaW5kSW5uZXJQb2xpZXMoZmluYWxNZXRob2QsIGludm9jYXRpb24pKQotCQkJ
CXJldHVybiBmaW5hbE1ldGhvZDsKLQkJfQotCQlyZXR1cm4gZ2V0UmV0dXJuUHJvYmxlbU1ldGhv
ZElmTmVlZGVkKHRhcmdldFR5cGUsIG1ldGhvZCk7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxpZmll
ZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4yKQot
CSAqIGFuZCBwZXJmb3JtIHN1YnNlcXVlbnQgc3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRpbmcg
b2YgaW5uZXIgcG9seSBleHByZXNzaW9ucywKLQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9ibGVt
IG1ldGhvZCBiaW5kaW5nIGlmIG5lZWRlZC4KLQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYg
dGhlIGluZmVyZW5jZSBoYXMgbm90IHlldCBmaW5pc2hlZC4KLQkgKiBWZXJzaW9uIHVzZWQgZm9y
IGlubmVyIGludm9jYXRpb25zLCB3aGVyZSBhcmd1bWVudCB0eXBlcyBuZWVkIHRvIGJlIGV4dHJh
Y3RlZAotCSAqIGZyb20gYWN0dWFsIGludm9jYXRpb24gYXJndW1lbnRzLgotCSAqIEBwYXJhbSBp
bnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKLQkgKiBAcGFyYW0gbWV0aG9kIGN1
cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9jYXRpb24KLQkgKiBA
cmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1ldGVy
cywKLQkgKiAJb3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGluZyBlaXRoZXIgaW5m
ZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBtaXNtYXRjaC4KLQkgKi8KLQlwdWJsaWMgLypATm9u
TnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGludm9j
YXRpb24sIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gbnVsbDsKLQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50
cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChhcmd1bWVudHMgIT0gbnVsbCkgewot
CQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsKLQkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3VtZW50
VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQl9Ci0JCXJldHVybiBpbmZl
ckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIG1ldGhvZCk7CiAJfQog
CiAJcHVibGljIGJvb2xlYW4gaGFzUmVzdWx0Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsK
QEAgLTU5MSw2ICs0NjYsMTAgQEAKIAkJCXJldHVybiB0aGlzLnN0ZXBDb21wbGV0ZWQgPj0gVFlQ
RV9JTkZFUlJFRDsKIAkJZWxzZQogCQkJcmV0dXJuIHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlw
ZS5jb250YWluc0tleSh0YXJnZXRUeXBlKTsKKwl9CisJCisJcHVibGljIFNvbHV0aW9uIGdldFJl
c3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCXJldHVybiB0aGlzLnNvbHV0aW9u
c1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwogCX0KIAogCXB1YmxpYyBib29sZWFuIHJl
Z2lzdGVyU29sdXRpb24oVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyB1cGRh
dGVkQmluZGluZykgewpAQCAtMTM2Niw4ICsxMjQ1LDYgQEAKIAkJdGhpcy5pbnZvY2F0aW9uQXJn
dW1lbnRzID0gaW5uZXJBcmd1bWVudHM7CiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSBpbnZv
Y2F0aW9uOwogCQkKLQkJLy8gc2NoZWR1bGUgZm9yIHJlLWJpbmRpbmcgdGhlIGlubmVyIGFmdGVy
IGluZmVyZW5jZSBzdWNjZXNzOgotCQl0aGlzLmlubmVyUG9saWVzLmFkZChpbnZvY2F0aW9uKTsK
IAkJcmV0dXJuIHJlY29yZDsKIAl9CiAJCkBAIC0xMzk1LDE0NSArMTI3Miw2IEBACiAJCXRoaXMu
Y3VycmVudEludm9jYXRpb24gPSByZWNvcmQuc2l0ZTsKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1l
bnRzID0gcmVjb3JkLmludm9jYXRpb25Bcmd1bWVudHM7CiAJCXRoaXMuaW5mZXJlbmNlS2luZCA9
IHJlY29yZC5pbmZlcmVuY2VLaW5kOwotCX0KLQotCXB1YmxpYyBib29sZWFuIHJlYmluZElubmVy
UG9saWVzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7Ci0JCUJv
dW5kU2V0IGJvdW5kcyA9IHRoaXMuY3VycmVudEJvdW5kczsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJaWYgKHRhcmdldFR5cGUgPT0g
bnVsbCB8fCAhdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCWlmICghc2l0ZS5n
ZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKLQkJCQkvLyBpbiB0
aGlzIGNhc2Ugd2UgbWF5IG5vdCB5ZXQgaGF2ZSB0aGUgc29sdXRpb24oPywgZ2V0IG9yIGNvbXB1
dGUgaXQgbm93OgotCQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJn
ZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCQl0cnkgewotCQkJCQlpZiAoc29sdXRpb24gIT0g
bnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQkJCWJvdW5kcyA9IHNvbHV0aW9u
LmJvdW5kczsKLQkJCQkJZWxzZQotCQkJCQkJYm91bmRzID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0
aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNpdGUsIG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKSk7
Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCXJldHVy
biBmYWxzZTsKLQkJCQl9Ci0JCQkJaWYgKGJvdW5kcyA9PSBudWxsKQotCQkJCQlyZXR1cm4gZmFs
c2U7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRp
b25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQlpZiAoc29sdXRpb24gIT0gbnVs
bCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3Vu
ZHM7Ci0JCX0KLQkJcmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBtZXRob2QucGFyYW1ldGVycyk7
Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIEFmdGVyIGluZmVyZW5jZSBoYXMgZmlu
aXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMgKEludm9jYXRpb25zKSwg
dGhhdAotCSAqIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNlLiBGb3IgZWFjaCBv
ZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCi0JICogZnJvbSB0aGUgaW5mZXJl
bmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNvbHZpbmcgYXMgbmVl
ZGVkLgotCSAqIFNpbWlsYXIgZm9yIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBkaWQgbm90IGRpcmVj
dGx5IHBhcnRpY2lwYXRlIGluIHRoZSBpbmZlcmVuY2UKLQkgKiBidXQgYXJlIGRpcmVjdCBhcmd1
bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiAoRnVuY3Rpb25hbEV4cHJlc3Npb24sIENv
bmRpdGlvbmFsRXhwcmVzc2lvbikuCi0JICovCi0JcHVibGljIHZvaWQgcmViaW5kSW5uZXJQb2xp
ZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzKSB7Ci0JCS8v
IFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5nIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBhcmUgZGly
ZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uOgotCQkvLyAoaGFuZGxlcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRpdGlvbmFsRXhwcmVzc2lvbikKLQkJaWYgKHRoaXMu
Y3VycmVudEludm9jYXRpb24gaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJcmV0
dXJuOyAvLyBubyBpbm5lciBleHByZXNzaW9ucwotCQlib29sZWFuIGlzVmFyYXJncyA9IHRoaXMu
aW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJBUkc7Ci0JCWFjY2VwdFBlbmRpbmdQb2x5QXJndW1l
bnRzKGJvdW5kcywgcGFyYW1ldGVyVHlwZXMsIGlzVmFyYXJncyk7Ci0JCS8vIFRoaXMgbG9vcHMg
b3ZlciBhbGwgcG9seSBleHByZXNzaW9ucyBmb3Igd2hpY2ggYSBzdWItaW5mZXJlbmNlIHdhcyB0
cmlnZ2VyZWQ6Ci0JCS8vIChoYW5kbGVzIGdlbmVyaWMgaW52b2NhdGlvbnMpCi0JCWludCBsZW4g
PSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkr
KykgewotCQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlzLmlubmVyUG9saWVz
LmdldChpKTsKLQkJCWlmIChpbm5lciBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsK
LQkJCQlSZWZlcmVuY2VFeHByZXNzaW9uIHJlZmVyZW5jZUV4cHJlc3Npb24gPSAoUmVmZXJlbmNl
RXhwcmVzc2lvbikgaW5uZXI7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21waWxlVGltZURlY2wgPSBy
ZWZlcmVuY2VFeHByZXNzaW9uLnByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQodGhpcy5zY29wZSk7
Ci0JCQkJaWYJKGNvbXBpbGVUaW1lRGVjbCAhPSBudWxsKSB7Ci0JICAJCQkJVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHZhcmlhYmxlcyA9IGNvbXBpbGVUaW1lRGVjbC50eXBlVmFyaWFibGVzOwotCQkJ
CQlpZiAodmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkJCVR5
cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKHZhcmlhYmxlcywgKEludm9jYXRp
b25TaXRlKSBpbm5lciwgYm91bmRzKTsKLQkJCQkJCXJlZmVyZW5jZUV4cHJlc3Npb24uYmluZGlu
ZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY29t
cGlsZVRpbWVEZWNsLCBhcmd1bWVudHMpOwotCQkJCQl9Ci0JCQkJfQotCQkJfSBlbHNlIGlmIChp
bm5lciBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbnZvY2F0aW9uIGlubmVyTWVzc2Fn
ZSA9IChJbnZvY2F0aW9uKSBpbm5lcjsKLQkJCQlUeXBlQmluZGluZyBpbm5lclRhcmdldFR5cGUg
PSBpbm5lci5leHBlY3RlZFR5cGUoKTsgLy8gbWF5IGJlIHNldCBmcm9tIGFjY2VwdFBlbmRpbmdQ
b2x5QXJndW1lbnRzCi0JCQkJaWYgKGlubmVyVGFyZ2V0VHlwZSAhPSBudWxsICYmICFpbm5lclRh
cmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCQlpbm5lclRhcmdldFR5cGUgPSBudWxs
OwotCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVyTWVzc2FnZS5iaW5kaW5nKGlubmVy
VGFyZ2V0VHlwZSwgaW5uZXJUYXJnZXRUeXBlICE9IG51bGwsIHRoaXMuc2NvcGUpOwotCQkJCWlm
IChiaW5kaW5nID09IG51bGwpCi0JCQkJCWNvbnRpbnVlOwotCQkJCU1ldGhvZEJpbmRpbmcgb3Jp
Z2luYWwgPSBiaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpOwotCi0JCQkJLy8gYXBwbHkgaW5mZXJl
bmNlIHJlc3VsdHMgb250byB0aGUgYWxsb2NhdGlvbiB0eXBlIG9mIGlubmVyIGRpYW1vbmRzOgot
CQkJCWlmIChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYgaW5uZXIuaXNQb2x5RXhwcmVzc2lv
bigpKSB7Ci0JCQkJCVJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MgPSBvcmlnaW5hbC5k
ZWNsYXJpbmdDbGFzczsKLQkJCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1dGlv
bnMoZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpLCBpbm5lck1lc3NhZ2UsIGJvdW5kcyk7
Ci0JCQkJCWRlY2xhcmluZ0NsYXNzID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJp
emVkVHlwZShkZWNsYXJpbmdDbGFzcywgYXJndW1lbnRzLCBkZWNsYXJpbmdDbGFzcy5lbmNsb3Np
bmdUeXBlKCkpOwotCQkJCQlvcmlnaW5hbCA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWRl
Y2xhcmluZ0NsYXNzKS5jcmVhdGVQYXJhbWV0ZXJpemVkTWV0aG9kKG9yaWdpbmFsKTsKLQkJCQkJ
aW5uZXIuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKGlubmVyVGFyZ2V0VHlwZSwgdGhpcy5z
Y29wZSk7CQotCQkJCQlpZiAodGhpcy5lbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLmlzQW5ub3Rh
dGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG9yaWdpbmFsLCBpbm5lck1lc3NhZ2UsIHRoaXMuc2Nv
cGUpOwotCQkJCX0KLQkJCQkKLQkJCQkvLyBhcHBseSByZXN1bHRzIG9mIHRoZSBjb21iaW5lZCBp
bmZlcmVuY2Ugb250byB0aGUgYmluZGluZyBvZiB0aGUgaW5uZXIgaW52b2NhdGlvbjoKLQkJCQlU
eXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFi
bGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsKLQkJCQlpZiAoc29sdXRpb25zID09IG51bGwp
IHsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcpIHsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGlubmVyTWVz
c2FnZS5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIGJpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwgJiYgIWJpbmRpbmcuaXNW
YWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlubmVyQ3R4LnJlcG9ydEludmFsaWRJbnZvY2F0aW9u
KGlubmVyTWVzc2FnZSwgYmluZGluZyk7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJY29udGludWU7
IC8vIGlubmVyIGluZmVyZW5jZSBub3QgcmVxdWVzdGVkIC0+IG5vdCBhIHByb2JsZW0KLQkJCQl9
Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IHRo
aXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWws
IHNvbHV0aW9ucyk7Ci0JCQkJCi0JCQkJaWYgKGlubmVyTWVzc2FnZS51cGRhdGVCaW5kaW5ncyhp
bm5lckJpbmRpbmcsIGlubmVyVGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFs
bHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9u
QXJndW1lbnRzKGlubmVyTWVzc2FnZSwgaW5uZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJCQl9
Ci0JCQl9Ci0JCX0KLQkJdGhpcy5zdGVwQ29tcGxldGVkID0gQklORElOR1NfVVBEQVRFRDsgLy8g
d2UncmUgZG9uZS1kb25lCi0JfQotCi0JcHJpdmF0ZSB2b2lkIGFjY2VwdFBlbmRpbmdQb2x5QXJn
dW1lbnRzKEJvdW5kU2V0IGFjY2VwdGVkUmVzdWx0LCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5
cGVzLCBib29sZWFuIGlzVmFyQXJncykgewotCQlpZiAoYWNjZXB0ZWRSZXN1bHQgPT0gbnVsbCB8
fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0gbnVsbCkgcmV0dXJuOwotCQlTdWJzdGl0dXRp
b24gc3Vic3RpdHV0aW9uID0gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGFjY2VwdGVkUmVzdWx0KTsK
LQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOyBp
KyspIHsKLQkJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBnZXRQYXJhbWV0ZXIocGFyYW1ldGVy
VHlwZXMsIGksIGlzVmFyQXJncyk7Ci0JCQlpZiAoIXRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRy
dWUpKQotCQkJCXRhcmdldFR5cGUgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgdGFy
Z2V0VHlwZSk7Ci0JCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSB0aGlzLmludm9jYXRpb25Bcmd1
bWVudHNbaV07Ci0JCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJ
CQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmVzc2lvbjsKLQkJCQlp
ZiAoIXRoaXMuaW5uZXJQb2xpZXMuY29udGFpbnMoaW52b2NhdGlvbikpIHsKLQkJCQkJTWV0aG9k
QmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcodGFyZ2V0VHlwZSwgdHJ1ZSwgdGhp
cy5zY29wZSk7Ci0JCQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBwcmV2aW91c0JpbmRpbmcgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBt
ZXRob2Q7Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdl
dEluZmVyZW5jZUNvbnRleHQocHJldmlvdXNCaW5kaW5nKTsKLQkJCQkJCWlmIChpbm5lckN0eCAh
PSBudWxsKSB7Ci0JCQkJCQkJLy8gd2UgaGF2ZSBhIG5vbi1wb2x5IGdlbmVyaWMgaW52b2NhdGlv
biwgd2hpY2ggbmVlZHMgaW5mZXJlbmNlIGJ1dCBpcyBub3QgY29ubmVjdGVkIHZpYSBpbm5lclBv
bGlzLgotCQkJCQkJCS8vIEZpbmlzaCB0aGF0IGlubmVyIGluZmVyZW5jZSBub3cgKGluY2wuIGJp
bmRpbmcgdXBkYXRlcyk6Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5l
ckN0eC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIHByZXZpb3VzQmluZGluZyk7Ci0J
CQkJCQkJaWYgKCFpbm5lckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQlpbm5l
ckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcpOwot
CQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvbi51cGRhdGVCaW5kaW5ncyhpbm5lckJpbmRp
bmcsIHRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmluZyBh
bnl0aGluZwotCQkJCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhp
bnZvY2F0aW9uLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCQkJCX0KLQkJCQkJCX0K
LQkJCQkJfSBlbHNlIGlmKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKXsKLQkJCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdl
dFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJCQl9Ci0JCQkJfSBlbHNlIHsKLQkJCQkJZXhwcmVzc2lv
bi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJfQotCQkJfSBlbHNlIHsKLQkJCQlp
ZiAodGhpcy5pbm5lclBvbGllcy5jb250YWlucyhleHByZXNzaW9uKSkgLy8gbWF5IGdldCBoZXJl
IGZvciBSZWZlcmVuY2VFeHByZXNzaW9ucyAuLi4KLQkJCQkJZXhwcmVzc2lvbi5zZXRFeHBlY3Rl
ZFR5cGUodGFyZ2V0VHlwZSk7IC8vIC4uLiBwcmVwYXJlIGZvciBmaW5hbCBpbmZlcmVuY2Ugdmlh
IHJlYmluZElubmVyUG9saWVzCi0JCQkJZWxzZQotCQkJCQlleHByZXNzaW9uLmNoZWNrQWdhaW5z
dEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsKLQkJCX0KLQkJfQogCX0K
IAogCXByaXZhdGUgU3Vic3RpdHV0aW9uIGdldFJlc3VsdFN1YnN0aXR1dGlvbihmaW5hbCBCb3Vu
ZFNldCByZXN1bHQpIHsKQEAgLTE1ODEsMTkgKzEzMTksMTQgQEAKIAkJCWlmIChtZXRob2QucmV0
dXJuVHlwZS5lcmFzdXJlKCkuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFR5cGUpKQogCQkJCXJl
dHVybiBtZXRob2Q7IC8vIGRvbid0IGNvdW50IGFzIHByb2JsZW0uCiAJCX0KLQkJaWYgKGV4cGVj
dGVkVHlwZSA9PSBudWxsKQotCQkJcmV0dXJuIG1ldGhvZDsgLy8gYXNzdW1lIGluZmVyZW5jZSBm
YWlsdXJlIGNvbmNlcm5lZCBhbm90aGVyIGV4cHJlc3Npb24KLQkJUHJvYmxlbU1ldGhvZEJpbmRp
bmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1ldGhv
ZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6
ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtKTsKKwkJLyogV2UgdXNlZCB0byBjaGVjayBpZiBl
eHBlY3RlZCB0eXBlIGlzIG51bGwgYW5kIGlmIHNvIHJldHVybiBtZXRob2QsIGJ1dCB0aGF0IGlz
IHdyb25nIC0gaXQgaW5qZWN0cyBhbiBpbmNvbXBhdGlibGUgbWV0aG9kIGludG8gb3ZlcmxvYWQg
cmVzb2x1dGlvbi4KKwkJICAgaWYgd2UgZ2V0IGhlcmUgd2l0aCBleHBlY3RlZCB0eXBlIHNldCB0
byBudWxsIGF0IGFsbCwgdGhlIHRhcmdldCBjb250ZXh0IGRvZXMgbm90IGRlZmluZSBhIHRhcmdl
dCB0eXBlICh2YW5pbGxhIGNvbnRleHQpLCBzbyBpbmZlcmVuY2UgaGFzIGRvbmUgaXRzCisJCSAg
IGJlc3QgYW5kIG5vdGhpbmcgbW9yZSB0byBkbyB0aGFuIHRvIHNpZ25hbCBlcnJvci4gCisJCSAq
LworCQlQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRo
b2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJv
YmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlKTsKIAkJcHJvYmxlbU1l
dGhvZC5yZXR1cm5UeXBlID0gZXhwZWN0ZWRUeXBlOwogCQlwcm9ibGVtTWV0aG9kLmluZmVyZW5j
ZUNvbnRleHQgPSB0aGlzOwogCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQl9Ci0KLQlwdWJsaWMg
dm9pZCByZXBvcnRJbnZhbGlkSW52b2NhdGlvbihJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhv
ZEJpbmRpbmcgYmluZGluZykgewotCQlpZiAoaW52b2NhdGlvbiBpbnN0YW5jZW9mIE1lc3NhZ2VT
ZW5kKQotCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKChNZXNz
YWdlU2VuZCkgaW52b2NhdGlvbiwgYmluZGluZyk7Ci0JCWVsc2UKLQkJCXRoaXMuc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKChTdGF0ZW1lbnQpaW52b2NhdGlvbiwg
YmluZGluZyk7CiAJfQogCiAJLy8gZGVidWdnaW5nOgpAQCAtMTYzMywxMiArMTM2Niw2IEBACiAJ
CWlmICh0aGlzLmN1cnJlbnRCb3VuZHMgIT0gbnVsbCkKIAkJCWJ1Zi5hcHBlbmQodGhpcy5jdXJy
ZW50Qm91bmRzLnRvU3RyaW5nKCkpOwogCQlyZXR1cm4gYnVmLnRvU3RyaW5nKCk7Ci0JfQotCi0J
cHVibGljIHZvaWQgYWRkUHJvYmxlbU1ldGhvZChQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVt
TWV0aG9kKSB7Ci0JCWlmICh0aGlzLnByb2JsZW1NZXRob2RzID09IG51bGwpCi0JCQl0aGlzLnBy
b2JsZW1NZXRob2RzID0gbmV3IEFycmF5TGlzdDxNZXRob2RCaW5kaW5nPigpOwotCQl0aGlzLnBy
b2JsZW1NZXRob2RzLmFkZChwcm9ibGVtTWV0aG9kKTsKIAl9CiAKIAkvKioKQEAgLTE3MTIsNCAr
MTQzOSw0IEBACiAJcHVibGljIHN0YXRpYyB2b2lkIG1pc3NpbmdJbXBsZW1lbnRhdGlvbihTdHJp
bmcgbXNnKSB7CiAJCXRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbihtc2cp
OwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQppbmRleCAyZTk2
YTRiLi5jNTU2YzY4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTMxLDYgKzMxLDcgQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJkOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJPcHRp
b25zOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW5m
ZXJlbmNlQ29udGV4dDE4LlNvbHV0aW9uOwogCiAvKioKICAqIEJpbmRpbmcgZGVub3RpbmcgYSBn
ZW5lcmljIG1ldGhvZCBhZnRlciB0eXBlIHBhcmFtZXRlciBzdWJzdGl0dXRpb25zIGdvdCBwZXJm
b3JtZWQuCkBAIC00MSw3ICs0Miw3IEBACiBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgaW1wbGVt
ZW50cyBTdWJzdGl0dXRpb24gewogCiAgICAgcHVibGljIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3Vt
ZW50czsKLSAgICBwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OworICAgIHBy
b3RlY3RlZCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKICAgICBwdWJsaWMgYm9vbGVh
biBpbmZlcnJlZFJldHVyblR5cGU7CiAgICAgcHVibGljIGJvb2xlYW4gd2FzSW5mZXJyZWQ7IC8v
IG9ubHkgc2V0IHRvIHRydWUgZm9yIGluc3RhbmNlcyByZXN1bHRpbmcgZnJvbSBtZXRob2QgaW52
b2NhdGlvbiBpbmZlcnJlbmNlCiAgICAgcHVibGljIGJvb2xlYW4gaXNSYXc7IC8vIHNldCB0byB0
cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3IGZvciBzdWJzdGl0dXRpb24gcHVycG9zZQpA
QCAtNTAsMzEgKzUxLDExIEBACiAJLyoqCiAJICogUGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2VuZXJp
YyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9vciBleHBlY3RlZCB0eXBlCiAJICogPHA+Ci0J
ICogSW4gMS44KyB0aGUgZm9sbG93aW5nIGRpc2NpcGxpbmUgaGFzIHRvIGJlIG9ic2VydmVkIGJ5
IGNhbGxlcnM6Ci0JICogRWFjaCBpbnZvY2F0aW9uIG11c3QgYmUgc3ViamVjdGVkIHRvIHR3byBs
ZXZlbHMgb2YgaW5mZXJlbmNlOgotCSAqIDwvcD4KLQkgKiA8dWw+Ci0JICogPGxpPiB7QGxpbmsg
U2NvcGUjQVBQTElDQUJJTElUWSBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlfSwg
d2hpY2ggbWF5IGJlIGFwcGxpZWQKLQkgKiAgICAgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1l
IGludm9jYXRpb248L2xpPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0lOVk9DQVRJT05fVFlQRSBJ
bnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlfSwgd2hpY2ggaXMgZmluYWxseSBwZXJmb3JtZWQKLQkg
KiAgICAgZm9yIHRoZSBzZWxlY3RlZCBtZXRob2QgYW5kIHdoaWNoIGFkZHMgaW5mb3JtYXRpb24g
ZnJvbSB0aGUgInRhcmdldCB0eXBlIi48L2xpPgotCSAqIDwvdWw+Ci0JICogPHA+Ci0JICogQ2xp
ZW50cyBjYW4gY29udHJvbCB3aGljaCBwYXJ0cyBvZiB0aGUgaW5mZXJlbmNlIHNob3VsZCBiZSBw
ZXJmb3JtZWQgYnkgcGFzc2luZyB0aGUgYXBwcm9wcmlhdGUKLQkgKiBmbGFncyBpbnRvIGFyZ3Vt
ZW50ICdpbmZlcmVuY2VMZXZlbCcuIE9uIGVhY2ggY2FsbCBwYXRoIGl0IG11c3QgYmUgZW5zdXJl
ZCB0aGF0IG9uZSBvciBtb3JlCi0JICogaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5j
ZXMgYXJlIGFsd2F5cyBmb2xsb3dlZCBieSBleGFjdGx5IG9uZSBpbnZvY2F0aW9uIHR5cGUgaW5m
ZXJlbmNlCi0JICogKHVubGVzcyBlcnJvcnMgaGF2ZSBiZWVuIGRldGVjdGVkKS4KLQkgKiA8L3A+
Ci0JICogPHA+Ci0JICogSW5pdGlhbCBjbGllbnRzIGFyZSB0aGUgZGlyZWN0IGNhbGxlcnMgb2YK
LQkgKiB7QGxpbmsgU2NvcGUjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyxU
eXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLGludCl9LAotCSAqIHdoaWNoIHNob3VsZCBlaXRo
ZXIgaW52b2tlIGJvdGggbGV2ZWxzIG9mIGluZmVyZW5jZSA8ZW0+b3I8L2VtPiBkZWxlZ2F0ZSB0
aGUgc2Vjb25kIHBhcnQgdG8KLQkgKiB7QGxpbmsgU2NvcGUjbW9zdFNwZWNpZmljTWV0aG9kQmlu
ZGluZyhNZXRob2RCaW5kaW5nW10saW50LFR5cGVCaW5kaW5nW10sSW52b2NhdGlvblNpdGUsUmVm
ZXJlbmNlQmluZGluZyl9LAotCSAqIHdoaWNoIGlzIGludGVuZGVkIHRvIGVuc3VyZSBjb21wbGV0
aW5nIHRoZSBpbmZlcmVuY2Ugb24gYWxsIG5vbi1lcnJvciBleGl0cy4KKwkgKiBJbiAxLjgrIGlm
IHRoZSBleHBlY3RlZCB0eXBlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGR1ZSB0byB0aGlzIGNhbGwg
YmVpbmcgYW4gYXJndW1lbnQgdG8gYW4gb3V0ZXIgY2FsbCB3aGljaCBpcyBub3Qgb3ZlcmxvYWQt
cmVzb2x2ZWQgeWV0LAorCSAqIHRoZSByZXR1cm5lZCBtZXRob2QgYmluZGluZyB3aWxsIGJlIGEg
UG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy4KIAkgKiA8L3A+ICAKIAkgKi8K
LQlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0
aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3Bl
IHNjb3BlLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VM
ZXZlbCkKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMs
IFNjb3BlIHNjb3BlLAlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkKIAl7CiAJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFy
aWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJs
ZXM7CkBAIC05NSwxMjggKzc2LDM5IEBACiAJCQkvLyBpbml0aWFsaXplcyB0aGUgbWFwIG9mIHN1
YnN0aXR1dGVzICh2YXIgLS0+IHR5cGVbXVtdeyBlcXVhbCwgZXh0ZW5kcywgc3VwZXJ9CiAJCQlU
eXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOwogCi0v
LyA9PT09IDEuODogVGhlIG1haW4gZHJpdmVyIGZvciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRo
b2RzOiA9PT09Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOwogCQkJQ29t
cGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwot
CQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84KSB7Ci0JCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJVFkp
ICE9IDApCi0JCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250
ZXh0KHNjb3BlKTsKLQkJCQllbHNlIGlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9j
YXRpb24gJiYgb3JpZ2luYWxNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpCi0JCQkJCWluZkN0eDE4ID0gKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0
ZSkuZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ID09IG51bGwpCi0JCQkJCXJldHVy
biBvcmlnaW5hbE1ldGhvZDsKLQkJCX0KLQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJ
dHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOwotCQkJCQlCb3Vu
ZFNldCByZXN1bHQgPSBudWxsOwotCQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUuQVBQ
TElDQUJJTElUWSkgIT0gMCkgeworCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJCXJldHVybiBjb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZDE4KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHNjb3BlLCBpbnZvY2F0aW9uU2l0
ZSk7CiAKLQkJCQkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTogLS0tLQotCQkJCQkJ
Ym9vbGVhbiBpc0RpYW1vbmQgPSBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCkKLQkJCQkJ
CQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uCi0JCQkJCQkJCSYmICgo
RXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhv
ZCk7Ci0JCQkJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgewot
CQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
TE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29z
ZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRp
b25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0J
CQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJ
CQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJh
cmdzKCkpIHsKLQkJCQkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0
eQotCQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0
KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJ
bmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOwotCQkJCQkJCWluZkN0eDE4LmluZmVySW52
b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25k
KTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7Ci0JCQkJCQl9
Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29s
dmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJCQkJCWluZkN0eDE4LnN0b3JlZFNvbHV0aW9u
ID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IElu
ZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOwotCQkJCQkJCWlmIChpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQkJCQkJCSgoUmVm
ZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgx
OC5pbmZlcmVuY2VLaW5kOwotCQkJCQkJfQotCQkJCQl9IGVsc2UgewotCQkJCQkJcHJvdmlzaW9u
YWxSZXN1bHQgPSBpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbjsKLQkJCQkJfQotCQkJCQlyZXN1bHQg
PSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1
Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCS8vIDEuNy0gb25seS4KKwkJ
CWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7
CisJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3Jp
Z2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJ
CQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOwogCi0JCQkJ
CVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJn
ZXRUeXBlKCk7Ci0JCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJCQli
b29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKLQkJCQkJaWYgKChpbmZlcmVu
Y2VMZXZlbCAmIFNjb3BlLklOVk9DQVRJT05fVFlQRSkgIT0gMCAvLyByZXF1ZXN0ZWQ/Ci0JCQkJ
CQkJJiYgKGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNz
aW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpKSB7IC8vIHBvc3NpYmxlPwotCi0JCQkJ
CQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTogLS0tLQotCQkJCQkJcmVzdWx0ID0g
aW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2Nh
dGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKLQkJCQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQg
PSB0cnVlOwotCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKLQkJCQkJ
CWlmIChoYXNSZXR1cm5Qcm9ibGVtKQotCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0
OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUg
b3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCi0JCQkJCX0gZWxzZSB7Ci0JCQkJCQkvLyB3
ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JCQkJCQly
ZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKLQkJCQkJfQotCi0JCQkJCWlmIChyZXN1bHQgIT0g
bnVsbCkgewotCQkJCQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoKLQkJCQkJCVR5cGVC
aW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMs
IGludm9jYXRpb25TaXRlLCByZXN1bHQpOwotCQkJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7
Ci0JCQkJCQkJCi0JCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9u
cyk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcg
ZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2Js
ZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhwZWN0
ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKLQkJCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykKLQkJCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0
aG9kOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkgewotCQkJ
CQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5h
YmxlZCkKLQkJCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRp
b25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7Ci0JCQkJCQkJCWlu
ZkN0eDE4LnJlYmluZElubmVyUG9saWVzKHJlc3VsdCwgbWV0aG9kU3Vic3RpdHV0ZS5wYXJhbWV0
ZXJzKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3Rp
dHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50cyk7Ci0JCQkJCQkJCWlmIChwcm9ibGVt
TWV0aG9kICE9IG51bGwpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9
IGVsc2UgewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9u
KQotCQkJCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZlcmVu
Y2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0IHNv
IHdlIGNhbiBmaW5pc2ggbGF0ZXIKLQkJCQkJCQl9Ci0JCQkJCQkJcmV0dXJuIG1ldGhvZFN1YnN0
aXR1dGU7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJfSBjYXRjaCAo
SW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIEZJWE1FIHN0b3AtZ2FwIG1l
YXN1cmUKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7Ci0JCQkJCXJldHVybiBudWxsOworCQkJ
Ly8gc3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJzLCBi
dXQgbnVsbCBhcmd1bWVudHMgZ290IHJlcGxhY2VkIHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5hbCB2
YXJpYWJsZSBpbiBwYXJhbSBtZXRob2QKKwkJCS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJl
c29sdmVkIHR5cGUgYXJndW1lbnRzCisJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29s
dmVkVHlwZUFyZ3VtZW50KCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pc1VuY2hlY2tl
ZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tlZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcKKwkJ
CQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOworCQkJ
CQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hl
Y2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwogCQkJ
CX0KLQkJCX0gZWxzZSB7Ci0vLyA9PT09IDEuOCA9PT09Ci0JCQkJaW5mZXJlbmNlQ29udGV4dCA9
IG5ldyBJbmZlcmVuY2VDb250ZXh0KG9yaWdpbmFsTWV0aG9kKTsKLQkJCQltZXRob2RTdWJzdGl0
dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3Vt
ZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQkJaWYgKG1ldGhvZFN1YnN0
aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CisJCQkJCVR5cGVCaW5kaW5n
IGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJ
CQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgeworCQkJCQkJLy8gcmVjb3JkIGl0IHdhcyBl
eHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9wcG9zZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0IChz
ZWUgYmVsb3cpCisJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRUeXBl
ID0gdHJ1ZTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdldEph
dmFMYW5nT2JqZWN0KCk7IC8vIGFzc3VtZSBPYmplY3QgYnkgZGVmYXVsdAorCQkJCQl9CisJCQkJ
CWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlOworCQkJCX0KKwkJ
CQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5
cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwogCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09
IG51bGwpCiAJCQkJCXJldHVybiBudWxsOwotCQkJCQotCQkJCS8vIHN1YnN0aXR1dGVzIG1heSBo
b2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdv
dCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0
aG9kCi0JCQkJLy8gMTUuMTIuMi44IC0gaW5mZXJyaW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1bWVu
dHMKLQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkp
IHsKLQkJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsgLy8gb25seSByZW1l
bWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43Ci0JCQkJCQlpbnQgbGVuZ3RoID0g
aW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRlcy5sZW5ndGg7Ci0JCQkJCQlTeXN0ZW0uYXJyYXlj
b3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9
IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwotCQkJCQl9Ci0JCQkJCWlmICht
ZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgewotCQkJCQkJ
VHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdl
dFR5cGUoKTsKLQkJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgewotCQkJCQkJCS8vIHJl
Y29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQg
YnkgZGVmYXVsdCAoc2VlIGJlbG93KQotCQkJCQkJCWluZmVyZW5jZUNvbnRleHQuaGFzRXhwbGlj
aXRFeHBlY3RlZFR5cGUgPSB0cnVlOwotCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQlleHBlY3RlZFR5
cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1
bHQKLQkJCQkJCX0KLQkJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0
ZWRUeXBlOwotCQkJCQl9Ci0JCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRl
LmluZmVyRnJvbUV4cGVjdGVkVHlwZShzY29wZSwgaW5mZXJlbmNlQ29udGV4dCk7Ci0JCQkJCWlm
IChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCi0JCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQl9CiAJ
CQl9CiAJCX0KKwkJCiAKIAkJLyogYm91bmRzIGNoZWNrOiBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjQyMTU5LCBJbmZlcnJlZCB0eXBlcyBtYXkgY29udGFp
biBzZWxmIHJlZmVyZW5jZQogCQkgICBpbiBmb3JtYWwgYm91bmRzLiBJZiAiVCBleHRlbmRzIEk8
VD4iIGlzIGEgb3JpZ2luYWwgdHlwZSB2YXJpYWJsZSBhbmQgVCB3YXMgaW5mZXJyZWQgdG8gYmUg
STxUPiBkdWUgcG9zc2libHkKQEAgLTI2Niw2ICsxNTgsOTMgQEAKIAkJcmV0dXJuIG1ldGhvZFN1
YnN0aXR1dGU7CiAJfQogCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kMTgoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdb
XSBhcmd1bWVudHMsIGZpbmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9u
U2l0ZSkgeworCQkKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1
YnN0aXR1dGUgPSBudWxsOworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9
IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZD
dHgxOCA9IG51bGw7CisJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9k
LnBhcmFtZXRlcnM7CisJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VD
b250ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3Bl
LmNvbXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBm
YWxzZTsKKwkJCisJCXRyeSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7
CisJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2Fi
aWxpdHkpOiAtLS0tCisJCQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0
aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25T
aXRlKS5pc1BvbHlFeHByZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNEaWFt
b25kID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7
CisJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJCWlu
ZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8v
IFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFy
ZykgaXMgc3VmZmljaWVudC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmls
aXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0g
aW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5h
bE1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBh
cHBsaWNhYmlsaXR5CisJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5j
ZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2lu
ZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1v
bmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVzdWx0
ID09IG51bGwpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChy
ZXN1bHQpKSB7CisJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQx
OC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52
b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8v
IENIRUNLCisJCQl9IGVsc2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJLy8gQXBwbGlj
YWJpbGl0eSBzdWNjZWVkZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBpZiBw
b3NzaWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmlu
dm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxz
ZTsKKwkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAxOC41
LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJlc3Vs
dDsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJl
c3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCQly
ZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBl
LCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9jYXRpb25UeXBlSW5m
ZXJyZWQgPSB0cnVlOworCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7CisJ
CQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0
OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUg
b3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9IG51
bGwpIHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5kaW5n
W10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9j
YXRpb25TaXRlLCByZXN1bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCQlt
ZXRob2RTdWJzdGl0dXRlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZChvcmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhhc1Jl
dHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwg
cmVzdWx0PworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0
UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0
ZSk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5k
aW5nKSB7CisJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHBy
b2JsZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5m
ZXJyZWQpIHsKKwkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkKQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JD
b250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7CisJ
CQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5k
Q2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51
bGwpIHsKKwkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdldFR5
cGUucHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJlc3Vs
dCkpOworCQkJCQl9IGVsc2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5UGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQl9
CisJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJCQko
KEludm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0
aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlz
aCBsYXRlcgorCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQorCQkJ
cmV0dXJuIG51bGw7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewor
CQkJLy8gRklYTUUgc3RvcC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
Z2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7CisJ
CQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sxOChT
Y29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9uIHN1
YnN0aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2RTdWJzdGl0dXRlID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0wLDAgKzEs
MTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENv
bnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xhc3MgUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyB7IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJsaWMgUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgYXBwbGljYWJsZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxlTWV0aG9kLm9yaWdp
bmFsTWV0aG9kLCBhcHBsaWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFwcGxpY2FibGVNZXRo
b2QuZW52aXJvbm1lbnQpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxl
bVJlYXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQppbmRleCA3
M2UwNDFiLi43ZmJkZWMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25z
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCkBAIC00MCw3ICs0
MCw3IEBACiAJZmluYWwgaW50IE5vblN0YXRpY09yQWxpZW5UeXBlUmVjZWl2ZXIgPSAyMDsKIAlm
aW5hbCBpbnQgQXR0ZW1wdFRvQnlwYXNzRGlyZWN0U3VwZXIgPSAyMTsgLy8gc3VwZXIgYWNjZXNz
IHdpdGhpbiBkZWZhdWx0IG1ldGhvZAogCWZpbmFsIGludCBEZWZlY3RpdmVDb250YWluZXJBbm5v
dGF0aW9uVHlwZSA9IDIyOwotCWZpbmFsIGludCBQYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRU
eXBlUHJvYmxlbSA9IDIzOworCWZpbmFsIGludCBJbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1
cmUgPSAyMzsKIAlmaW5hbCBpbnQgQXBwbGljYWJsZU1ldGhvZE92ZXJyaWRkZW5CeUluYXBwbGlj
YWJsZSA9IDI0OwogCWZpbmFsIGludCBDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zID0gMjU7
CiAJZmluYWwgaW50IE5vU3VjaE1ldGhvZE9uQXJyYXkgPSAyNjsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBjOWYz
ZTkwLi45ZTc0OGRlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxNyArODcsNiBAQAogCXB1YmxpYyBzdGF0
aWMgZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBN
T1JFX0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29tcGF0
aWJsZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9mIHR3
byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgotCSAq
LwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4LjUu
MSkuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0JLyoq
IFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJsaWMg
c3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJvdGgg
e0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGluZmVy
ZW5jZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQUExJ
Q0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVibGlj
IFNjb3BlIHBhcmVudDsKIApAQCAtNjkxLDEwICs2ODAsMTAgQEAKIAkgKiBJbnRlcm5hbCB1c2Ug
b25seQogCSAqIEdpdmVuIGEgbWV0aG9kLCByZXR1cm5zIG51bGwgaWYgYXJndW1lbnRzIGNhbm5v
dCBiZSBjb252ZXJ0ZWQgdG8gcGFyYW1ldGVycy4KIAkgKiBXaWxsIGFuc3dlciBhIHN1YnN0aXR1
dGVkIG1ldGhvZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIGdlbmVyaWMgYW5kIHR5cGUgaW5mZXJl
bmNlIGdvdCB0cmlnZ2VyZWQ7Ci0JICogaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBvcmlnaW5hbGx5
IGNvbXBhdGlibGUsIHRoZW4gc2ltcGx5IGFuc3dlciBpdCBiYWNrLgorCSAqIGluIGNhc2UgdGhl
IG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQg
YmFjay4gCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
LCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsKSB7Ci0J
CXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgaW52b2Nh
dGlvblNpdGUsIGluZmVyZW5jZUxldmVsLCBmYWxzZSk7CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhv
ZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkgewor
CQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9j
YXRpb25TaXRlLCBmYWxzZSk7CiAJfQkKIAkvKioKIAkgKiBJbnRlcm5hbCB1c2Ugb25seQpAQCAt
NzAyLDggKzY5MSw3IEBACiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2QgaW4g
Y2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJpZ2dl
cmVkOwogCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0
aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KIAkgKi8KLQlwcm90ZWN0ZWQgZmluYWwgTWV0aG9k
QmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMsCi0JCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwg
aW50IGluZmVyZW5jZUxldmVsLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpCisJ
cHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0
aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0
ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQogCXsK
IAkJVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdl
bmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhv
ZC5wYXJhbWV0ZXJzOwpAQCAtNzM4LDkgKzcyNiwxNSBAQAogCQkJCWFyZ3VtZW50cyA9IG5ld0Fy
Z3M7CiAJCQllbHNlICAvLyBlbnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGJl
bG93IGNhbiB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2FsbGVyOiAoVE9E
TzogYWx3YXlzIGNvcHkgYmVmb3JlIHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCiAJCQkJU3lzdGVt
LmFycmF5Y29weShhcmd1bWVudHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRpbmdbYXJnTGVu
Z3RoXSwgMCwgYXJnTGVuZ3RoKTsKLQkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhp
cywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsKTsKKwkJCW1ldGhvZCA9IFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2Qs
IGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUpOwogCQkJaWYgKG1ldGhvZCA9PSBudWxs
KSByZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJCQlpZiAoIW1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBjaGVjayBpc3N1ZSBpcyB0YWtpbmcgcHJl
Y2VkZW5jZQorCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ICYmIG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsK
KwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7
CisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNl
Q29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOworCQkJ
CWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVuY2VD
b250ZXh0MTguVFlQRV9JTkZFUlJFRCkKKwkJCQkJcmV0dXJuIG1ldGhvZDsgLy8gaW5mZXJlbmNl
IGlzIHJlc3BvbnNpYmxlLCBubyBuZWVkIHRvIHJlY2hlY2sKKwkJCX0KIAkJfSBlbHNlIGlmIChn
ZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CiAJCQlpZiAobWV0aG9kIGluc3Rh
bmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJaWYgKCEoKFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKS53YXNJbmZlcnJlZCkKQEAg
LTc1NSw3ICs3NDksNyBAQAogCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxB
bWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxl
dmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKIAkJCQl0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzID0gZmFsc2U7CiAJCX0KLQkJaWYgKChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwx
OChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgaW52b2NhdGlv
blNpdGUpKSA+IE5PVF9DT01QQVRJQkxFKSB7CisJCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSkgPiBO
T1RfQ09NUEFUSUJMRSkgewogCQkJaWYgKChtZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5ub3Rh
dGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJLy8gZ2VuZXJhdGUgcG9seW1v
cnBoaWMgbWV0aG9kCiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9y
cGhpY01ldGhvZChtZXRob2QsIGFyZ3VtZW50cyk7CkBAIC03NjcsMTUwICs3NjEsMTAgQEAKIAkJ
Ly8gaW4gd2hpY2ggY2FzZSB0aGlzIHByb2JsZW0gY2F0ZWdvcnkgd2lsbCBiZSBib2d1cwogCQlp
ZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlVmFyaWFibGVzICE9IEJpbmRp
bmcuTk9fVFlQRV9WQVJJQUJMRVMpCiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5n
KG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBhcmd1bWVudHMsIFByb2JsZW1SZWFzb25zLlBhcmFt
ZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2gpOworCQkvLyAxOC41LjEgaWdub3JlcyBhcmd1bWVu
dHMgbm90IHBlcnRpbmVudCB0byBhcHBsaWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtlbiBp
bnRvIGNvbnNpZGVyYXRpb24gbWV0aG9kIGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eSAoZS5nLCBs
YW1iZGEgc2hhcGUvYXJpdHkgbWlzbWF0Y2ggLi4uKQorCQlpZiAobWV0aG9kIGluc3RhbmNlb2Yg
UG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKKwkJCXJldHVybiBuZXcgUHJv
YmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0
ZXJzLCBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJsZSk7
CiAJCXJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKLQl9Ci0KLQlwcml2YXRlIGludCBwYXJh
bWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRp
bmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgSW52b2Nh
dGlvblNpdGUgc2l0ZSkgewotCQlqZGsxOGNoZWNrczoKLQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJ
bnZvY2F0aW9uICYmIGNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2Nh
dGlvbikgc2l0ZTsKLQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIHsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4ID0gaW52b2Nh
dGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIG1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eCAhPSBudWxsKSB7Ci0JCQkJCS8vIGluZmVyZW5j
ZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCi0JCQkJCWlmIChpbmZDdHguaXNW
YXJBcmdzKCkpCi0JCQkJCQlyZXR1cm4gVkFSQVJHU19DT01QQVRJQkxFOwotCQkJCQlyZXR1cm4g
Q09NUEFUSUJMRTsKLQkJCQl9Ci0JCQl9Ci0JCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRpb25z
IHdoZXJlIHRoZSBvdXRlciBkaWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZToKLQkJCUV4cHJl
c3Npb25bXSBpbnZvY2F0aW9uQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJ
CWlmIChpbnZvY2F0aW9uQXJndW1lbnRzICE9IG51bGwpIHsKLQkJCQlJbm5lckluZmVyZW5jZUhl
bHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9IGludm9jYXRpb24uaW5uZXJJbmZlcmVuY2VIZWxw
ZXIoKTsKLQkJCQlpbnQgYXJnTGVuID0gaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7Ci0JCQkJ
Ym9vbGVhbiBpc1ZhckFyZ3NbXSA9IG5ldyBib29sZWFuWzFdOyAvLyBlbXVsYXRlIGFuIGluLW91
dCBwYXJhbWV0ZXIgZm9yIGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKC4uKQotCQkJCWlz
VmFyQXJnc1swXSA9IG1ldGhvZC5pc1ZhcmFyZ3MoKSAmJiBhcmdMZW4gIT0gbWV0aG9kLnBhcmFt
ZXRlcnMubGVuZ3RoOyAvLyBpZiBzYW1lIGxlbmd0aHMsIGlzVmFyQXJncyBjYW4gc3RpbGwgYmUg
dXBkYXRlZCBiZWxvdwotCQkJCWludCBsZXZlbCA9IENPTVBBVElCTEU7Ci0JCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBhcmdMZW47IGkrKykgewotCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudFR5cGUg
PSBpIDwgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1tpXSA6IG51bGw7IC8vIGxlbmd0aCBt
aXNtYXRjaCBtYXkgaGFwcGVuIGZyb20gQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5yZXNvbHZlVHlw
ZSgpIGluIHRoZSBpZiAoYXJnSGFzRXJyb3IpIGJsb2NrLgotCQkJCQlpbnQgbmV4dExldmVsID0g
Y29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBl
ciwgaW52b2NhdGlvbkFyZ3VtZW50c1tpXSwgYXJndW1lbnRUeXBlLCBhcmdMZW4sIGksIGlzVmFy
QXJncyk7Ci0JCQkJCWlmIChuZXh0TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQlyZXR1
cm4gbmV4dExldmVsOwotCQkJCQlpZiAobmV4dExldmVsID09IC0yKQotCQkJCQkJYnJlYWsgamRr
MThjaGVja3M7Ci0JCQkJCWxldmVsID0gTWF0aC5tYXgobGV2ZWwsICBuZXh0TGV2ZWwpOwotCQkJ
CX0KLQkJCQlyZXR1cm4gbGV2ZWw7IC8vIG5laXRoZXIgTk9UX0NPTVBBVElCTEUgbm9yIHVua25v
d24oLTIpIHNlZW4KLQkJCX0KLQkJfQotCQkvLyBmYWxsIGJhY2sgdG8gb2xkIG1ldGhvZDoKLQkJ
Ym9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyA9ICgoc2l0ZSBpbnN0YW5jZW9mIFJl
ZmVyZW5jZUV4cHJlc3Npb24pICYmICgoUmVmZXJlbmNlRXhwcmVzc2lvbikgc2l0ZSkudHJpYWxS
ZXNvbHV0aW9uKTsKLQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2Qs
IGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VW
YXJpYWJsZXMpOwotCX0KLQotCXByaXZhdGUgaW50IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlu
bmVyKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVy
ZW5jZUhlbHBlciwgRXhwcmVzc2lvbiBpbnZvY0FyZywgVHlwZUJpbmRpbmcgYXJnVHlwZSwgaW50
IGFyZ0xlbiwgaW50IGksIGJvb2xlYW5bXSBpc1ZhckFyZ3MpCi0JewotCQlpbnQgY29tcGF0aWJs
ZSA9IGlzVmFyQXJnc1swXSA/IFZBUkFSR1NfQ09NUEFUSUJMRSA6IENPTVBBVElCTEU7Ci0JCVR5
cGVCaW5kaW5nIHJlc29sdmVkVHlwZSA9IGludm9jQXJnLnJlc29sdmVkVHlwZTsKLQkJVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9k
LnBhcmFtZXRlcnMsIGksIGlzVmFyQXJnc1swXSk7Ci0JCWlmICghaXNWYXJBcmdzWzBdICYmIHNo
b3VsZFRyeVZhcmFyZ3MobWV0aG9kLCByZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpKSB7Ci0JCQlp
c1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5n
ZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOwotCQl9Ci0JCWlmICh0YXJn
ZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7IC8vIG1pc21hdGNoaW5n
IG51bWJlciBvZiBhcmdzIG9yIG90aGVyIHNldmVyZSBwcm9ibGVtIGluc2lkZSBtZXRob2QgYmlu
ZGluZwotCQlpbnQgbGV2ZWwgPSAtMjsgLy8gZG9uJ3Qga25vdwotCQlpZiAoaW52b2NBcmcgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uICYmIHJlc29sdmVkVHlwZSAhPSBudWxsKSB7Ci0JCQlJbnZvY2F0
aW9uIGlubmVyUG9seSA9IChJbnZvY2F0aW9uKSBpbnZvY0FyZzsKLQkJCWxldmVsID0gcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQlpZiAo
bGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxz
KGFyZ1R5cGUsIHJlc29sdmVkVHlwZSkgJiYgaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkK
LQkJCQkJaW5uZXJJbmZlcmVuY2VIZWxwZXIucmVnaXN0ZXJJbm5lclJlc3VsdChtZXRob2QsIHJl
c29sdmVkVHlwZSwgYXJnTGVuLCBpKTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwg
bGV2ZWwpOwotCQkJfSBlbHNlIHsKLQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlu
bmVyUG9seS5iaW5kaW5nKG51bGwsIGZhbHNlLCBudWxsKTsgLy8gMS4gdHJ5IHdpdGhvdXQgdXBk
YXRlCi0JCQkJaWYgKGlubmVyQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewotCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcg
aW5uZXJQYXJhbWV0ZXJpemVkID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykg
aW5uZXJCaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5lclBv
bHkuZ2V0SW5mZXJlbmNlQ29udGV4dChpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQlpZiAoaW5m
Q3R4MTggIT0gbnVsbCAmJiAhaW5mQ3R4MTguaGFzUmVzdWx0Rm9yKHRhcmdldFR5cGUpKSB7Ci0J
CQkJCQkvLyBub3QgZGV0ZWN0ZWQgYXMgY29tcGF0aWJsZSwgYmVjYXVzZSBpbmZlcmVuY2Ugc3Rp
bGwgbmVlZHMgdG8gY29tcGxldGU/Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUodGFy
Z2V0VHlwZSk7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIHNvbHV0aW9uID0gaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uVHlwZShpbm5lclBvbHksIGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCQlpZiAo
c29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJ
aWYgKGlubmVyUG9seS51cGRhdGVCaW5kaW5ncyhzb2x1dGlvbiwgdGFyZ2V0VHlwZSkpIHsKLQkJ
CQkJCQkJaWYgKGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCQkJCQlpbm5lcklu
ZmVyZW5jZUhlbHBlci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwgaW52b2NBcmcucmVzb2x2
ZWRUeXBlLCBhcmdMZW4sIGkpOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoc29sdXRpb24ucmV0dXJu
VHlwZSAhPSBudWxsKSB7Ci0JCQkJCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKHNvbHV0aW9uLnJldHVyblR5cGUsIHRhcmdldFR5cGUpOwotCQkJCQkJCQlpZiAobGV2ZWwg
IT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwg
bGV2ZWwpOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlw
ZShudWxsKTsKLQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJfSBlbHNlIGlmIChp
bm5lclBvbHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQkJLy8gbm90
IGRldGVjdGVkIGFzIGNvbXBhdGlibGUsIGJlY2F1c2UgaXRzIGEgZGlhbW9uZCB3aG9zZSB0eXBl
IGhhc24ndCB5ZXQgYmVlbiBpbmZlcnJlZD8KLQkJCQkJCVR5cGVCaW5kaW5nW10gdHlwZUFyZ3Vt
ZW50cyA9IHJlc29sdmVkVHlwZS50eXBlQXJndW1lbnRzKCk7Ci0JCQkJCQlpZiAodHlwZUFyZ3Vt
ZW50cyAhPSBudWxsICYmIHR5cGVBcmd1bWVudHMubGVuZ3RoID09IDApIHsKLQkJCQkJCQlBbGxv
Y2F0aW9uRXhwcmVzc2lvbiBhbGxvYyA9IChBbGxvY2F0aW9uRXhwcmVzc2lvbikgaW5uZXJQb2x5
OwotCQkJCQkJCWlmICgoYWxsb2MudHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDAp
IHsKLQkJCQkJCQkJLy8gbm90LXlldC1pbmZlcnJlZCBkaWFtb25kOiBlcmFzdXJlIGNvbXBhdGli
aWxpdHkgc2hvdWxkIHN1ZmZpY2UsIGRldGFpbCB3aWxsIGJlIGNoZWNrZWQgdXNpbmcgaW5mZXJl
bmNlCi0JCQkJCQkJCWlmIChyZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBl
LmVyYXN1cmUoKSwgdGhpcykpCi0JCQkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZTsKLQkJCQkJCQkJ
cmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJfQotCQkJCX0g
ZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJ
CQkJTWV0aG9kQmluZGluZyB1cGRhdGVkTWV0aG9kID0gaW5uZXJQb2x5LmJpbmRpbmcodGFyZ2V0
VHlwZSwgZmFsc2UsIG51bGwpOyAvLyAyLiB0cnkgd2l0aCB1cGRhdGluZwotCQkJCQlpZiAodXBk
YXRlZE1ldGhvZCAhPSBpbm5lckJpbmRpbmcgJiYgdXBkYXRlZE1ldGhvZCAhPSBudWxsKSB7Ci0J
CQkJCQlpZiAodXBkYXRlZE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQlpZiAodXBk
YXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUpKQot
CQkJCQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwot
CQkJCQkJfSBlbHNlIGlmICh1cGRhdGVkTWV0aG9kLnByb2JsZW1JZCgpID09IFByb2JsZW1SZWFz
b25zLkFtYmlndW91cykgewotCQkJCQkJCWxldmVsID0gLTI7IC8vIG5laXRoZXIgZ29vZCBub3Ig
YmFkLCBhbnN3ZXIgInVua25vd24iCi0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9Ci0JCX0g
ZWxzZSBpZiAoaW52b2NBcmcuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQlpZiAoaW52b2NBcmcg
aW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKLQkJCQlDb25kaXRpb25hbEV4cHJl
c3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBpbnZvY0FyZzsKLQkJCQlpbnQgbGV2
ZWwxID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5j
ZUhlbHBlciwgY2UudmFsdWVJZlRydWUsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsK
LQkJCQlpZiAobGV2ZWwxID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7Ci0JCQkJaW50IGxldmVsMiA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKG1l
dGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVlSWZGYWxzZSwgYXJnVHlwZSwgYXJn
TGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCWlmIChsZXZlbDIgPT0gTk9UX0NPTVBBVElCTEUpCi0J
CQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgobGV2ZWwxLCBs
ZXZlbDIpOwotCQkJfQotCQkJLy8gTEUgb3IgUkU6Ci0JCQlpZiAoaW52b2NBcmcuaXNDb21wYXRp
YmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCWlm
ICghaXNWYXJBcmdzWzBdICYmIG1ldGhvZC5pc1ZhcmFyZ3MoKSkgeyAvLyBjYW4ndCB1c2Ugc2hv
dWxkVHJ5VmFyYXJncyB3aXRob3V0IGEgcmVzb2x2ZWRUeXBlLCBzbyBqdXN0IHRyeSBpdDoKLQkJ
CQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0
MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJCQlpZiAodGFy
Z2V0VHlwZSAhPSBudWxsICYmIGludm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwg
dGhpcykpCi0JCQkJCXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7Ci0JCQl9Ci0JCQlyZXR1cm4g
Tk9UX0NPTVBBVElCTEU7Ci0JCX0gZWxzZSBpZiAocmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgcmVz
b2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCS8vIG5lZWQgdG8gaGFuZGxlICJub3Jt
YWwiIGV4cHJlc3Npb25zIHRvbywgc2luY2UgbWl4ZWQgcG9seS9zdGFuZGFsb25lIGFyZ3VtZW50
IGxpc3RzIG11c3QgYmUgZnVsbHkgYW5hbHl6ZWQuCi0JCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCX0KLQkJcmV0dXJuIGxl
dmVsOwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBzaG91bGRUcnlWYXJhcmdzKE1ldGhvZEJpbmRp
bmcgbWV0aG9kLCBUeXBlQmluZGluZyByZXNvbHZlZFR5cGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUpIHsKLQkJaWYgKCFtZXRob2QuaXNWYXJhcmdzKCkpCi0JCQlyZXR1cm4gZmFsc2U7Ci0JCWlm
ICh0YXJnZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8gb2ZmIHJhbmdlCi0JCWlm
ICh0YXJnZXRUeXBlLmlzQXJyYXlUeXBlKCkgJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgIXJl
c29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJcmV0dXJu
IHRydWU7CS8vIG5vdCBhIGRpcmVjdCBtYXRjaCBidXQgaG9wZSB0byBpbXByb3ZlCi0JCXJldHVy
biBmYWxzZTsKIAl9CiAKIAkvKioKQEAgLTEyNjcsNyArMTEyMSw3IEBACiAJCQluZXh0OgogCQkJ
Zm9yIChpbnQgaSA9IHN0YXJ0Rm91bmRTaXplOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVu
dEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
LCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBj
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlp
ZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoY29uY3Jl
dGVNYXRjaGVzICE9IG51bGwpIHsKQEAgLTEyOTcsOCArMTE1MSw2IEBACiAJCQkJCXJldHVybiBw
cm9ibGVtTWV0aG9kOyAvLyBjYW4gYmUgbnVsbAogCQkJfQogCQkJY29uY3JldGVNYXRjaCA9IGNh
bmRpZGF0ZXNbMF07Ci0JCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZv
cm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQljb25jcmV0ZU1hdGNoID0gaW5mZXJJ
bnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29uY3JldGVNYXRjaCwgYXJndW1lbnRUeXBl
cyk7CiAJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsKQogCQkJCWNvbXBpbGF0aW9uVW5pdFNj
b3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29uY3JldGVNYXRjaC50aHJvd25FeGNlcHRpb25z
KTsKIAkJCXJldHVybiBjb25jcmV0ZU1hdGNoOwpAQCAtMTM3MSw3ICsxMjIzLDcgQEAKIAkJCQkv
LyB0YXJnZXRpbmcgYSBnZW5lcmljIG1ldGhvZCBjb3VsZCBmaW5kIGFuIGV4YWN0IG1hdGNoIHdp
dGggdmFyaWFibGUgcmV0dXJuIHR5cGUKIAkJCQlpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5
cGVBcmd1bWVudHMoKSAhPSBudWxsKSB7CiAJCQkJCS8vIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KC4uKSB3aWxsIHJldHVybiBhIFBvbHltb3JwaGljTWV0aG9kQmluZGluZyBpZiBuZWVkZWQKLQkJ
CQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJCQkJZXhhY3RN
ZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUpOwogCQkJCX0gZWxzZSBpZiAoKGV4YWN0TWV0aG9kLnRhZ0JpdHMg
JiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCQkv
LyBnZW5lcmF0ZSBwb2x5bW9ycGhpYyBtZXRob2QKIAkJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1l
bnQoKS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcyk7
CkBAIC0xNzYzLDIyICsxNjE1LDEzIEBACiAJCQkvLyBhcmd1bWVudCB0eXBlIGNvbXBhdGliaWxp
dHkgY2hlY2sKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVu
dEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
LCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBj
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlp
ZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoZm91bmRT
aXplID09IDEgJiYgY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeShyZWNlaXZlclR5cGUsIGlu
dm9jYXRpb25TaXRlLCB0aGlzKSkgewogCQkJCQkJCS8vIHJldHVybiB0aGUgc2luZ2xlIHZpc2li
bGUgbWF0Y2ggbm93CiAJCQkJCQkJaWYgKHNlYXJjaEZvckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkK
IAkJCQkJCQkJcmV0dXJuIGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBlLCBz
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5U3Rh
cnQsIGZvdW5kLCBuZXcgTWV0aG9kQmluZGluZyBbXSB7Y29tcGF0aWJsZU1ldGhvZH0pOwotLy8g
PT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09
PQotCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBpbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb25TaXRlLCBjb21wYXRpYmxlTWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKLQkJCQkJCQlp
ZiAoaW1wcm92ZWQgIT0gbnVsbCAmJiBpbXByb3ZlZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJ
CQkJCWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJ
CQlwcm9ibGVtTWV0aG9kID0gaW1wcm92ZWQ7Ci0JCQkJCQkJCWNvbnRpbnVlOwotCQkJCQkJCX0K
LS8vID09PT0gMS44ID09PT0KIAkJCQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZXMo
Y29tcGF0aWJsZU1ldGhvZC50aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJCQlyZXR1cm4gY29tcGF0
aWJsZU1ldGhvZDsKIAkJCQkJCX0KQEAgLTE4ODcsOCArMTczMCw3IEBACiAJCQljYXNlIDEgOgog
CQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCXJldHVybiBmaW5k
RGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhv
ZEJpbmRpbmcgW10geyBjYW5kaWRhdGVzWzBdIH0pOwotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVu
Y2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlj
YW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRhdGVz
WzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQljYW5kaWRhdGUgPSBjYW5kaWRhdGVzWzBdOwogCQkJ
CWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVu
Y2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpA
QCAtMjM4MCw3ICsyMjIyLDEwIEBACiAJCX0KIAkJaWYgKGV4YWN0TWV0aG9kID09IG51bGwgfHwg
IWV4YWN0TWV0aG9kLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCXJldHVy
biBudWxsOwotCQlpZiAoZXhhY3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgZXhhY3RNZXRob2QudHlw
ZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNp
dGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkKKwkJZmluYWwgVHlwZUJpbmRp
bmdbXSB0eXBlQXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMo
KTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdE1ldGhvZC50
eXBlVmFyaWFibGVzKCk7CisJCWlmIChleGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCAodHlwZVZh
cmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmICh0eXBlQXJndW1lbnRzID09
IG51bGwgfHwgdHlwZUFyZ3VtZW50cy5sZW5ndGggIT0gdHlwZVZhcmlhYmxlcy5sZW5ndGgpKSkK
IAkJCXJldHVybiBudWxsOwogCQkKIAkJaWYgKHJlY2VpdmVyVHlwZS5pc0FycmF5VHlwZSgpKSB7
CkBAIC0yMzk1LDYgKzIyNDAsMTAgQEAKIAkJewogCQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3Jl
YXRlR2V0Q2xhc3NNZXRob2QocmVjZWl2ZXJUeXBlLCBleGFjdE1ldGhvZCwgdGhpcyk7CiAJCX0K
KwkJCisJCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIAor
CQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qo
ZXhhY3RNZXRob2QsIHR5cGVBcmd1bWVudHMpOworCQogCQlyZXR1cm4gZXhhY3RNZXRob2Q7CiAJ
fQogCQkKQEAgLTI0MTcsMTkgKzIyNjYsMjYgQEAKIAkJTWV0aG9kQmluZGluZyBleGFjdENvbnN0
cnVjdG9yID0gbnVsbDsKIAkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2UocmVjZWl2ZXJU
eXBlKTsKIAkJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9k
cyhUeXBlQ29uc3RhbnRzLklOSVQpOworCQlmaW5hbCBUeXBlQmluZGluZ1tdIGdlbmVyaWNUeXBl
QXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKIAkJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsK
IAkJCU1ldGhvZEJpbmRpbmcgY29uc3RydWN0b3IgPSBtZXRob2RzW2ldOwogCQkJaWYgKCFjb25z
dHJ1Y3Rvci5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQkJY29udGludWU7
CiAJCQlpZiAoY29uc3RydWN0b3IuaXNWYXJhcmdzKCkpCiAJCQkJcmV0dXJuIG51bGw7Ci0JCQlp
ZiAoY29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJM
RVMgJiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkJ
aWYgKGNvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFC
TEVTICYmIGdlbmVyaWNUeXBlQXJndW1lbnRzID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJ
CQlpZiAoZXhhY3RDb25zdHJ1Y3RvciA9PSBudWxsKSB7CiAJCQkJZXhhY3RDb25zdHJ1Y3RvciA9
IGNvbnN0cnVjdG9yOwogCQkJfSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJfQor
CQlmaW5hbCBUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0Q29uc3Ry
dWN0b3IudHlwZVZhcmlhYmxlcygpOworCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTKSB7CisJCQlpZiAodHlwZVZhcmlhYmxlcy5sZW5ndGggIT0gZ2VuZXJp
Y1R5cGVBcmd1bWVudHMubGVuZ3RoKQorCQkJCXJldHVybiBudWxsOworCQkJZXhhY3RDb25zdHJ1
Y3RvciA9IGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoZXhh
Y3RDb25zdHJ1Y3RvciwgZ2VuZXJpY1R5cGVBcmd1bWVudHMpOwogCQl9CiAJCXJldHVybiBleGFj
dENvbnN0cnVjdG9yOwogCX0KQEAgLTI0NTgsNyArMjMxNCw3IEBACiAJCQlpZiAobWV0aG9kQmlu
ZGluZyAhPSBudWxsICYmIG1ldGhvZEJpbmRpbmcuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUs
IHRoaXMpKSB7CiAJCQkgICAgLy8gdGFyZ2V0aW5nIGEgbm9uIGdlbmVyaWMgY29uc3RydWN0b3Ig
d2l0aCB0eXBlIGFyZ3VtZW50cyA/CiAJCQkgICAgaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNU
eXBlQXJndW1lbnRzKCkgIT0gbnVsbCkKLQkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlLCBGVUxMX0lORkVSRU5DRSk7CisJCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSk7CiAJCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5nW10g
bWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwgYXJn
dW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtMjQ3Miw3ICsyMzI4LDcgQEAKIAkJCWludCBjb21wYXRp
YmxlSW5kZXggPSAwOwogCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbnVsbDsKIAkJ
CWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsr
KSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJ
Q0FCSUxJVFkpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
KTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRp
YmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJ
bmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC0yNDk1LDggKzIzNTEsNyBAQAogCQkJCQl2
aXNpYmxlW3Zpc2libGVJbmRleCsrXSA9IG1ldGhvZDsKIAkJCX0KIAkJCWlmICh2aXNpYmxlSW5k
ZXggPT0gMSkgewotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9y
bSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9u
VHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJcmV0
dXJuIHZpc2libGVbMF07CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDApCiAJCQkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZygKQEAgLTI3NjAsNyArMjYxNSw3IEBACiAJCQkJ
CQkJCWlmIChmb3VuZFByb2JsZW0gPT0gbnVsbCkKIAkJCQkJCQkJCWZvdW5kUHJvYmxlbSA9IHBv
c3NpYmxlOyAvLyBhbnN3ZXIgYXMgZXJyb3IgY2FzZSBtYXRjaAogCQkJCQkJCX0gZWxzZSBpZiAo
cG9zc2libGUuaXNTdGF0aWMoKSkgewotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVN
ZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBlcywg
aW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNv
bXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1l
bnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAh
PSBudWxsKSB7CiAJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygp
KSB7CiAJCQkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkodW5pdFNjb3Bl
LmZQYWNrYWdlKSkgewpAQCAtMzU5Niw4ICszNDUxLDggQEAKIAkJCWZvciAoaW50IGkgPSAob25l
UGFyYW1zTGVuZ3RoID4gdHdvUGFyYW1zTGVuZ3RoID8gdHdvUGFyYW1zTGVuZ3RoIDogb25lUGFy
YW1zTGVuZ3RoKSAtIDI7IGkgPj0gMDsgaS0tKQogCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVh
bHMob25lUGFyYW1zW2ldLCB0d29QYXJhbXNbaV0pICYmICFvbmVQYXJhbXNbaV0uaXNDb21wYXRp
YmxlV2l0aCh0d29QYXJhbXNbaV0pKQogCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQlpZiAocGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gTk9U
X0NPTVBBVElCTEUKLQkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25l
UGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gVkFSQVJHU19DT01QQVRJQkxFKQorCQkJaWYgKHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbChvbmUsIHR3b1BhcmFtcywgdHJ1ZSkgPT0gTk9UX0NPTVBB
VElCTEUKKwkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFyYW1z
LCB0cnVlKSA9PSBWQVJBUkdTX0NPTVBBVElCTEUpCiAJCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJ
cmV0dXJuIGZhbHNlOwpAQCAtNDM3Miw0NCArNDIyNywxMiBAQAogCXByb3RlY3RlZCBmaW5hbCBN
ZXRob2RCaW5kaW5nIG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdIHZp
c2libGUsIGludCB2aXNpYmxlU2l6ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5h
bCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgUmVmZXJlbmNlQmluZGluZyByZWNlaXZl
clR5cGUpIHsKIAogCQlib29sZWFuIGlzSmRrMTggPSBjb21waWxlck9wdGlvbnMoKS5zb3VyY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84OwotCi0JCS8vIGNvbW1vbiBwYXJ0IGZv
ciBhbGwgY29tcGxpYW5jZSBsZXZlbHM6CiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBu
ZXcgaW50W3Zpc2libGVTaXplXTsKLQkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7Ci0JCWZvciAo
aW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewotCQkJVHlwZUJpbmRpbmdbXSBhcmdU
eXBlcyA9IGFyZ3VtZW50VHlwZXM7Ci0JCQlpZiAoaXNKZGsxOCAmJiBpbnZvY2F0aW9uU2l0ZSBp
bnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lcklu
ZmVyZW5jZUhlbHBlciA9ICgoSW52b2NhdGlvbilpbnZvY2F0aW9uU2l0ZSkuaW5uZXJJbmZlcmVu
Y2VIZWxwZXIoKTsKLQkJCQlpZiAoaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJ
YXJnVHlwZXMgPSBpbm5lckluZmVyZW5jZUhlbHBlci5nZXRBcmd1bWVudFR5cGVzRm9yQ2FuZGlk
YXRlKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpOwotCQkJfQotCQkJaWYgKChjb21wYXRpYmls
aXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHZpc2libGVbaV0sIGFy
Z1R5cGVzKSkgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoaSAhPSBjb21wYXRpYmxlQ291
bnQpIHsKLQkJCQkJdmlzaWJsZVtjb21wYXRpYmxlQ291bnRdID0gdmlzaWJsZVtpXTsKLQkJCQkJ
Y29tcGF0aWJpbGl0eUxldmVsc1tjb21wYXRpYmxlQ291bnRdID0gY29tcGF0aWJpbGl0eUxldmVs
c1tpXTsKLQkJCQl9Ci0JCQkJY29tcGF0aWJsZUNvdW50Kys7Ci0JCQl9Ci0JCX0KLS8vIFRPRE86
IERpc2FibGVkLCBiZWNhdXNlIHdlIGtub3cgYSBzaXR1YXRpb24gd2hlcmUgdGhpcyBpcyBleHBl
Y3RlZCwgc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80Mjk0OTAKLS8vCQlpZiAoY29tcGF0
aWJsZUNvdW50ICE9IHZpc2libGVTaXplKSB7Ci0vLwkJCXByb2JsZW1SZXBvcnRlcigpLmdlbmVy
aWNJbmZlcmVuY2VQcm9ibGVtKCIoUmVjb3ZlcmVkKSBJbnRlcm5hbCBpbmNvbnNpc3RlbmN5IHdo
aWxlIGNoZWNraW5nIGludm9jYXRpb24gYW1iaWd1aXR5IiwgaW52b2NhdGlvblNpdGUsIFByb2Js
ZW1TZXZlcml0aWVzLldhcm5pbmcpOyAvLyROT04tTkxTLTEkCi0vLwkJfQotCQlpZiAoY29tcGF0
aWJsZUNvdW50ID09IDApIHsKLQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlz
aWJsZVswXS5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQp
OwotCQl9IGVsc2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7Ci0JCQlNZXRob2RCaW5kaW5n
IGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVb
MF0sIGFyZ3VtZW50VHlwZXMpOwotCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQotCQkJCWNvbXBp
bGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4
Y2VwdGlvbnMpOwotCQkJcmV0dXJuIGNhbmRpZGF0ZTsKLQkJfQotCQlpZiAoY29tcGF0aWJsZUNv
dW50ICE9IHZpc2libGVTaXplKSB7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KHZpc2libGUsIDAsIHZp
c2libGUgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZSA9IGNvbXBhdGlibGVDb3VudF0s
IDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KGNvbXBhdGliaWxpdHlM
ZXZlbHMsIDAsIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W2NvbXBhdGlibGVDb3VudF0s
IDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCX0KKwkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxl
U2l6ZTsgaSsrKQorCQkJY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJCiAJCQogCQlNZXRob2RC
aW5kaW5nW10gbW9yZVNwZWNpZmljID0gbmV3IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemVdOwot
CiAJCWlmIChpc0pkazE4KSB7CiAJCQkvLyAxNS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1vc3QgU3Bl
Y2lmaWMgTWV0aG9kCiAJCQlpbnQgY291bnQgPSAwOwpAQCAtNDQ2Myw3ICs0Mjg2LDcgQEAKIAkJ
CWlmIChjb3VudCA9PSAwKSB7CiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh2
aXNpYmxlWzBdLCB2aXNpYmxlWzBdLnNlbGVjdG9yLCB2aXNpYmxlWzBdLnBhcmFtZXRlcnMsIFBy
b2JsZW1SZWFzb25zLkFtYmlndW91cyk7CiAJCQl9IGVsc2UgaWYgKGNvdW50ID09IDEpIHsKLQkJ
CQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlv
blNpdGUsIG1vcmVTcGVjaWZpY1swXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJTWV0aG9kQmluZGlu
ZyBjYW5kaWRhdGUgPSBtb3JlU3BlY2lmaWNbMF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxs
KQogCQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRp
ZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDUxNiw3
ICs0MzM5LDcgQEAKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlNZXRob2RCaW5kaW5nIGFjY2Vw
dGFibGUgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RUb1Rlc3QsIHRpZWJyZWFrTWV0
aG9kLnBhcmFtZXRlcnMsCi0JCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlvblNpdGUsIElOVk9DQVRJ
T05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKKwkJCQkJCQkJdGllQnJlYWtJ
bnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKIAkJCQkJCS8qIFRo
ZXJlIGFyZSA0IGNob2ljZXMgdG8gY29uc2lkZXIgd2l0aCBjdXJyZW50ICYgbmV4dCA6CiAJCQkJ
CQkgZm9vKEIpICYgZm9vKEEpIHdoZXJlIEIgZXh0ZW5kcyBBCiAJCQkJCQkgMS4gdGhlIDIgbWV0
aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0IGVhY2ggb3RoZXJzIHBhcmFtZXRlcnMpIC0+IHdh
bnQgdG8gY29udGludWUKQEAgLTQ1NDAsOCArNDM2Myw3IEBACiAJCQlpZiAoY291bnQgPT0gMSkg
ewogCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewogCQkJCQlpZiAo
bW9yZVNwZWNpZmljW2ldICE9IG51bGwpIHsKLQkJCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2Ug
YSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQkJCU1l
dGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0
ZSwgdmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNhbmRp
ZGF0ZSA9IHZpc2libGVbaV07CiAJCQkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCQkJ
Y29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhy
b3duRXhjZXB0aW9ucyk7CiAJCQkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDY2Miw4ICs0NDg0
LDcgQEAKIAkJCQlpZiAobW9zdFNwZWNpZmljRXhjZXB0aW9ucyAhPSBudWxsICYmIG1vc3RTcGVj
aWZpY0V4Y2VwdGlvbnMgIT0gY3VycmVudC50aHJvd25FeGNlcHRpb25zKSB7CiAJCQkJCXJldHVy
biBuZXcgTW9zdFNwZWNpZmljRXhjZXB0aW9uTWV0aG9kQmluZGluZyhjdXJyZW50LCBtb3N0U3Bl
Y2lmaWNFeGNlcHRpb25zKTsKIAkJCQl9Ci0JCQkJLy8gMS44OiBCZWZvcmUgcmV0dXJuaW5nIGdp
dmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUu
Mik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGN1cnJl
bnQsIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVybiBjdXJyZW50OwogCQkJfQogCQl9CiAKQEAg
LTQ3MjgsOSArNDU0OSw5IEBACiAJfQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7
Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMs
IGZhbHNlLCBmYWxzZSk7CisJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0
aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKIAl9CQotCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5m
ZXJlbmNlVmFyaWFibGVzKSB7CisJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFu
IHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJz
ID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCWludCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMubGVu
Z3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKQEAgLTQ3NjIsMTQgKzQ1
ODMsMTQgQEAKIAkJCQlUeXBlQmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4XTsg
Ly8gaXMgYW4gQXJyYXlCaW5kaW5nIGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBhcmcg
PSBhcmd1bWVudHNbbGFzdEluZGV4XTsKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBh
cmFtLCBhcmcpKSB7Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFy
ZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVu
Y2VWYXJpYWJsZXMpOworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChh
cmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2
ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNhbGxl
ZCB3aXRoIFgKIAkJCQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50c1R5
cGUoKTsKIAkJCQkJCWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJYXJn
ID0gKChBcnJheUJpbmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJCQlp
ZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtp
bmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9DT01Q
QVRJQkxFKQorCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFt
LCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJ
CQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJCWxldmVsID0gVkFSQVJHU19DT01QQVRJ
QkxFOyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVlZGVkCiAJCQkJCX0KQEAgLTQ3NzksNyArNDYwMCw3
IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRlcnNb
bGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5kZXg7
IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFr
aW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5Qmlu
ZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJCQkJ
aWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0
b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlpZiAo
VHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpICYmIHBhcmFtZXRlckNvbXBhdGliaWxp
dHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5P
VF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJfQogCQkJ
CX0gIGVsc2UgaWYgKGxhc3RJbmRleCAhPSBhcmdMZW5ndGgpIHsgLy8gY2FuIGNhbGwgZm9vKGlu
dCBpLCBYIC4uLiB4KSB3aXRoIGZvbygxKSBidXQgTk9UIGZvbygpOwpAQCAtNDc5NSw3ICs0NjE2
LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVCaW5k
aW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdMZW5ndGgg
LSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFy
Z3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkgewot
CQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFt
LCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFi
bGVzKTsKKwkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJn
LCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAobmV3TGV2
ZWwgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQlp
ZiAobmV3TGV2ZWwgPiBsZXZlbCkKQEAgLTQ4MjQsNyArNDY0NSw3IEBACiAJCXJldHVybiBOT1Rf
Q09NUEFUSUJMRTsKIAl9CiAJCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25tZW50
IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25t
ZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCS8vIG9ubHkg
Y2FsbGVkIGlmIGVudi5vcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzUKIAkJaWYgKGFyZyA9PSBudWxsIHx8IHBhcmFtID09IG51bGwpCiAJCQlyZXR1cm4gTk9U
X0NPTVBBVElCTEU7CkBAIC00ODQzLDExICs0NjY0LDYgQEAKIAkJCVR5cGVCaW5kaW5nIGNvbnZl
cnRlZFR5cGUgPSBlbnYuY29tcHV0ZUJveGluZ1R5cGUoYXJnKTsKIAkJCWlmIChUeXBlQmluZGlu
Zy5lcXVhbHNFcXVhbHMoY29udmVydGVkVHlwZSwgcGFyYW0pIHx8IGNvbnZlcnRlZFR5cGUuaXND
b21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykpCiAJCQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFUSUJM
RTsKLQkJfQotCQlpZiAodG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMgJiYgKCFhcmcuaXNQcm9w
ZXJUeXBlKGZhbHNlKSB8fCAhcGFyYW0uaXNQcm9wZXJUeXBlKGZhbHNlKSkpIHsKLQkJCS8vIGR1
cmluZyB0eXBlIGluZmVyZW5jZSBpbnZvbHZpbmcgYSBSZWZlcmVuY2VFeHByZXNzaW9uIGlnbm9y
ZSBpbmNvbXBhdGliaWxpdHkgZHVlIHRvIGFuIGluZmVyZW5jZSB2YXJpYWJsZSwKLQkJCS8vIGtu
b3dpbmcgdGhhdCB3ZSB3aWxsIHByb2R1Y2UgY29uc3RyYWludHMgdGhhdCB3aWxsIGVuc3VyZSBj
b21wYXRpYmxlIGluc3RhbnRpYXRpb24gKGlmIG9uZSBleGlzdHMpLgotCQkJcmV0dXJuIENPTVBB
VElCTEU7IAogCQl9CiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CkBAIC00OTMzLDcgKzQ3
NDksNyBAQAogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRpY2Fs
IHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qgc3Bl
Y2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVsZWQg
YWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8KLQlw
dWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdU
eXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb24gYWxsb2Nh
dGlvblNpdGUpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJh
bWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3Jp
Z2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIElu
dm9jYXRpb25TaXRlIGFsbG9jYXRpb25TaXRlKSB7CiAJCQogCQkvLyBhbGxvY2F0aW9uVHlwZSBp
cyB0aGUgZGlhbW9uZCB0eXBlLiBvcmlnaW5hbEVuY2xvc2luZ1R5cGUgaXMgdGhlIHJlYWwgZW5j
bG9zaW5nIHR5cGUgPT0+IG1heSBiZSBwYXJhbWV0ZXJpemVkLCBwYXJhbWV0ZXJpemVkIHdpdGgg
b3duIHR5cGUgdmFyaWFibGVzLCByYXcsIGp1c3QgcGxhaW4gdHlwZSBvciBudWxsLgogCQlpbnQg
Y2xhc3NUeXBlVmFyaWFibGVzQXJpdHkgPSAwOwpAQCAtNTA2MCw3ICs0ODc2LDcgQEAKIAkJTWV0
aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlpbnQg
Y29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykgewot
CQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwgQVBQ
TElDQUJJTElUWSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9j
YXRpb25TaXRlKTsKIAkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQlpZiAo
Y29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQljb21wYXRpYmxlW2NvbXBh
dGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC01MDY5LDEwICs0ODg1LDYgQEAK
IAogCQlpZiAoY29tcGF0aWJsZUluZGV4ID09IDApIHsKIAkJCXJldHVybiBudWxsOwotCQl9Ci0J
CWlmIChjb21wYXRpYmxlSW5kZXggPT0gMSkgewotCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBh
IGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJY29tcGF0
aWJsZVswXSA9IGluZmVySW52b2NhdGlvblR5cGUoYWxsb2NhdGlvblNpdGUsIGNvbXBhdGlibGVb
MF0sIGFyZ3VtZW50VHlwZXMpOwogCQl9CiAJCXJldHVybiBjb21wYXRpYmxlSW5kZXggPT0gMSA/
IGNvbXBhdGlibGVbMF0gOiBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKGNvbXBhdGlibGUsIGNv
bXBhdGlibGVJbmRleCwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIGFsbG9jYXRpb25U
eXBlKTsKIAl9CkBAIC01MTQwLDMxICs0OTUyLDUgQEAKIAkJCQlicmVhazsKIAkJCX0KIAkJfQot
CX0KLQotCS8qKgotCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGljYWJsZSBtZXRob2QsIGNoZWNr
IGlmIGl0IGhhcyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVkLgot
CSAqIElmIHNvIHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVu
Y2UgYW5kIHJldHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAotCSAqIG90aGVyd2lzZSByZXR1cm4g
dGhlIGFwcGxpY2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KLQkgKi8KLQlwcm90ZWN0ZWQgTWV0aG9k
QmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRl
LCBNZXRob2RCaW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykg
ewotCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlJbnZv
Y2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7Ci0JCQlpZiAo
YXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykg
ewotCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0
aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsKLQkJ
CQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNv
bnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYg
IWluZkN0eDE4Lmhhc1Jlc3VsdEZvcihpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCkp
KSB7Ci0JCQkJCXJldHVybiBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24s
IGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCX0KLQkJCX0gZWxzZSB7
Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwg
YXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcyk7Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52
b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQlpZiAoYXBw
bGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKLQkJ
CQlhcHBsaWNhYmxlID0gYXBwbGljYWJsZS5zaGFsbG93T3JpZ2luYWwoKTsKLQkJCWlmIChhcHBs
aWNhYmxlLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQotCQkJ
CXJldHVybiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcywgaW52b2NhdGlvblNpdGUs
IEZVTExfSU5GRVJFTkNFKTsKLQkJfQotCQlyZXR1cm4gYXBwbGljYWJsZTsKIAl9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKaW5kZXgg
OTM4NDljZC4uMWM0ZDc0NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0
b3J5TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9y
eU1ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTcsMzEgKzE3LDggQEAKICAqLwogcHVibGljIGNsYXNz
IFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIGV4dGVuZHMgTWV0aG9kQmluZGluZyB7CiAK
LQlwcml2YXRlIE1ldGhvZEJpbmRpbmcgc3RhdGljRmFjdG9yeUZvcjsKLQlwcml2YXRlIExvb2t1
cEVudmlyb25tZW50IGVudmlyb25tZW50OwotCXByaXZhdGUgUmVmZXJlbmNlQmluZGluZyBlbmNs
b3NpbmdUeXBlOwotCQogCXB1YmxpYyBTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyhNZXRo
b2RCaW5kaW5nIG1ldGhvZCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQsIFJlZmVyZW5j
ZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSkgewogCQlzdXBlcihtZXRob2QubW9kaWZpZXJzIHwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYywgVHlwZUNvbnN0YW50cy5TWU5USEVUSUNfU1RBVElD
X0ZBQ1RPUlksCiAJCQkJbnVsbCwgbnVsbCwgbnVsbCwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzKTsK
LQkJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50OwotCQl0aGlzLnN0YXRpY0ZhY3RvcnlG
b3IgPSBtZXRob2Q7Ci0JCXRoaXMuZW5jbG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7Ci0JfQot
CQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlwZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJpbmcg
Y2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3RydWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkgdGhp
cyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcg
YXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVu
dHMpIHsKLQkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMuZW52aXJv
bm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUodGhpcy5kZWNsYXJpbmdDbGFzcywgdHlwZUFy
Z3VtZW50cywKLQkJCQkJCQkJCQkJCQkJCQkJCQkJCQl0aGlzLmVuY2xvc2luZ1R5cGUpOwotCQlm
b3IgKE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA6IHBhcmFtZXRlcml6ZWRUeXBl
Lm1ldGhvZHMoKSkgewotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2Qub3JpZ2luYWwoKSA9PSB0
aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9kQmlu
ZGluZykgcGFyYW1ldGVyaXplZE1ldGhvZDsKLQkJCWlmIChwYXJhbWV0ZXJpemVkTWV0aG9kIGlu
c3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nl
c3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpcGFyYW1ldGVyaXplZE1ldGhvZCkuY2xv
c2VzdE1hdGNoOwotCQkJCWlmIChjbG9zZXN0TWF0Y2ggaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZyAmJiBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSA9PSB0aGlzLnN0YXRpY0Zh
Y3RvcnlGb3IpCi0JCQkJCXJldHVybiAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGNsb3Nl
c3RNYXRjaDsKLQkJCX0KLQkJfQotCQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9u
KCJUeXBlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIG1ldGhvZD8iKTsgLy8kTk9OLU5MUy0xJAogCX0K
IH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggOTNmYzA4Yy4uMDE2YTQ5ZiAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTE1MCw3ICsxNTAsNiBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQ2FwdHVyZUJpbmRp
bmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5FeHRy
YUNvbXBpbGVyTW9kaWZpZXJzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuRmllbGRCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4OwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW52b2NhdGlvblNpdGU7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvb2t1
cEVudmlyb25tZW50OwpAQCAtMzY5Miw3ICszNjkxLDggQEAKIAkJCQlzb3VyY2VTdGFydCwKIAkJ
CQlzb3VyY2VFbmQpOwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRl
cml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25zLklu
ZmVycmVkQXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxlOgkKKwkJY2FzZSBQcm9ibGVtUmVhc29u
cy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6CiAJCQkvLyBGSVhNRShzdGVwaGFuKTog
Y29uc3RydWN0IHN1aXRhYmxlIG1lc3NhZ2UgKGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80MDQ2
NzUpCiAJCQlwcm9ibGVtQ29uc3RydWN0b3IgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHRhcmdl
dENvbnN0cnVjdG9yOwogCQkJc2hvd25Db25zdHJ1Y3RvciA9IHByb2JsZW1Db25zdHJ1Y3Rvci5j
bG9zZXN0TWF0Y2g7CkBAIC00MjI0LDE2ICs0MjI0LDEzIEBACiAJCQkJKGludCkgKG1lc3NhZ2VT
ZW5kLm5hbWVTb3VyY2VQb3NpdGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3NhZ2VTZW5kLm5h
bWVTb3VyY2VQb3NpdGlvbik7CiAJCQlyZXR1cm47Ci0JCWNhc2UgUHJvYmxlbVJlYXNvbnMuUGFy
YW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW06CisJCWNhc2UgUHJvYmxlbVJlYXNv
bnMuSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCWNhc2UgUHJvYmxlbVJl
YXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhh
bik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
NDA0Njc1KQogCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0aG9k
OwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9ibGVtTWV0aG9k
LmluZmVyZW5jZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4dCAhPSBudWxsICYmIGlu
ZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJCQkvLyBwcm9ibGVtIHJl
bGF0ZXMgdG8gYSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0aGUgb3V0ZXIgaGFuZGxl
IGl0OgotCQkJCWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFkZFByb2JsZW1NZXRob2Qo
cHJvYmxlbU1ldGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hvd25NZXRob2QgPSBwcm9i
bGVtTWV0aG9kLmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0aG9kLnJldHVyblR5cGUg
PT0gc2hvd25NZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQKKwkJCQly
ZXR1cm47IC8vIGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVlcGx5IG5lc3RlZCBjYWxs
LCBiZWNhdXNlIHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBjbG9zZXN0IG1hdGNoIGFu
ZCB0aGUgb3V0ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50ZXN0QnVnNDMwMjk2CiAJ
CQl0aGlzLmhhbmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gsCiAJCQkJbmV3IFN0cmlu
Z1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3Bl
LmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3Bl
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzk2
LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5ldyBQ
cm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNv
bnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkg
ICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkZV
TExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJu
IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJndW1l
bnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5nID0g
Y29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdbXSBj
b21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBjb21w
YXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0
aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGlu
dm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGluZyBj
b21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBu
dWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9k
OwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0g
MSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3Rh
bmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9j
YXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2libGVb
MF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2JsZW1N
ZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0aWJs
ZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247630</attachid>
            <date>2014-10-05 09:22:00 -0400</date>
            <delta_ts>2014-10-07 12:17:21 -0400</delta_ts>
            <desc>Cumulative patch - Passes all JDT/Core tests</desc>
            <filename>FANDG-reintegration.patch</filename>
            <type>text/plain</type>
            <size>188603</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uZDY4MzI4OSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTMwMTUsNiArMzA0NCw4IEBACiAJCQkifVxuIn0pOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzE1OCgpIHsKKyAgdHJ5IHsKKwl0aGlzLnNob3VsZFN3
YWxsb3dDYXB0dXJlSWQgPSB0cnVlOyAvLyB0aGlzIHRlc3QgZXhoaWJpdHMgc29tZSBub24tZGV0
ZXJtaW5pc20gaW4gY2FwdHVyZSBpZHMuIGp1c3QgY29tcGFyZSBpZ25vcmluZyBpZCwgYnV0IGVz
dGFibGlzaGluZyBwcmVzZW5jZSBvZiBjYXB0dXJlLgogCXJ1bk5lZ2F0aXZlVGVzdCgKIAkJbmV3
IFN0cmluZ1tdIHsKIAkJCSJDb2xsZWN0b3JzTWFwcy5qYXZhIiwKQEAgLTMwNDYsOCArMzA3Nywx
MSBAQAogCQkiMS4gRVJST1IgaW4gQ29sbGVjdG9yc01hcHMuamF2YSAoYXQgbGluZSAyMClcbiIg
KyAKIAkJIglwIC0+IHAubGhzLnN0cmVhbSgpLm1hcChwOjprZWVwaW5nUmhzKSkuY29sbGVjdChc
biIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5e
XlxuIiArIAotCQkiVGhlIG1ldGhvZCBjb2xsZWN0KENvbGxlY3Rvcjw/IHN1cGVyIE9iamVjdCxB
LFI+KSBpbiB0aGUgdHlwZSBTdHJlYW08T2JqZWN0PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoQ29sbGVjdG9yPENvbGxlY3RvcnNNYXBzLlBhaXI8U3RyaW5nLFN0cmluZz4s
Y2FwdHVyZSMzLW9mID8sTWFwPFN0cmluZyxMaXN0PFN0cmluZz4+PilcbiIgKyAKKwkJIlRoZSBt
ZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUg
U3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxl
Y3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8
U3RyaW5nLExpc3Q8U3RyaW5nPj4+KVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CisgIH0gZmlu
YWxseSB7CisJdGhpcy5zaG91bGRTd2FsbG93Q2FwdHVyZUlkID0gZmFsc2U7CQorICB9CiB9CiBw
dWJsaWMgdm9pZCBfdGVzdEJ1ZzQzMjYyNigpIHsKIAlydW5Db25mb3JtVGVzdCgKQEAgLTMzMzYs
NyArMzM3MCw3IEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3Ry
aW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xu
IiArCkBAIC0zMzc4LDE3ICszNDEyLDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwK
LQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQg
bGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhp
cy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0t
LVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiAr
IAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRo
KSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUg
RHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxu
IiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0
MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGIwNTk4NWIu
LjhkMmRmY2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJk
YUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MjkwLDEzICs0MjkwLDEzIEBACiAJCQki
LS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMSlcbiIg
KyAKIAkJCSIJcGVyc29ucy5zb3J0KENvbXBhcmF0b3IuY29tcGFyaW5nKENvbXBhcmF0b3IubnVs
bHNMYXN0KFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFibGUpKSk7XG4iICsgCi0JCQkiCSAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAot
CQkJIlRoZSBtZXRob2QgbnVsbHNMYXN0KENvbXBhcmF0b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5
cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoUGVyc29u
Ojo8UnVubmFibGU+aXNSdW5uYWJsZSlcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCBjb21wYXJpbmcoRnVuY3Rpb248PyBz
dXBlciBULD8gZXh0ZW5kcyBVPikgaW4gdGhlIHR5cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGlj
YWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29tcGFyYXRvcjxPYmplY3Q+KVxuIiArIAogCQkJIi0t
LS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CiAJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHBy
ZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZl
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzUwMTEwOS4uMWExMGQxZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05MTE4LDExICs5MTE4LDEyIEBACiAJCQki
CX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5vdGU6IG5ldyBtZXNzYWdlIGFsaWducyBi
ZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJRnVuY3Rpb248Q0w8SW50ZWdlcj4sIFN0
cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdHlwZSBDTCBkb2VzIG5vdCBk
ZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAK
KwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9uLXN0YXRpYyBtZXRo
b2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiAr
IAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCSIJdjUgPSB0IC0+
IHQubWV0aG9kMSgpOwlcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQppbmRleCA1M2ZjNTk5Li5lMDMw
M2Y0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFu
bm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVs
bFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC02NzQwLDYgKzY3NDAsNyBAQAogCQkJIn1cbiIg
KwogCQkJIn1cbiIsCiAJCX0sCisJCS8vIE5vdGU6IHdlIHVzZWQgdG8gZW1pdCBhIGR1cGxpY2F0
ZSBtZXNzYWdlIG9mIDIuIEZpeGVkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1Ig
aW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChw
IC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7
XG4iICsgCkBAIC02NzQ3LDExICs2NzQ4LDYgQEAKIAkJIlRoZSBjb25zdHJ1Y3RvciBQYWlyPFBh
dGgsT2JqZWN0PihQYXRoLCAoPG5vIHR5cGU+IHApIC0+IHt9KSBpcyB1bmRlZmluZWRcbiIgKyAK
IAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCi0JCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRv
RmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKLQkJIlRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIzLiBFUlJP
UiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAogCQkiCWZpbHRlcjIubWFw
KHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkp
KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhp
cyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIApkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpp
bmRleCBlZDIwNGI1Li40ZWEwMTA4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpAQCAtNjAsMTAgKzYwLDcgQEAKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYWNrYWdl
QmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
UHJvYmxlbU1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNvdXJjZVR5cGVCaW5kaW5nOwpAQCAtMzI4
LDcgKzMyNSw3IEBACiAJcHVibGljIEFTVE5vZGUoKSB7CiAKIAkJc3VwZXIoKTsKLQl9CisJfQkK
IAlwcml2YXRlIHN0YXRpYyBpbnQgY2hlY2tJbnZvY2F0aW9uQXJndW1lbnQoQmxvY2tTY29wZSBz
Y29wZSwgRXhwcmVzc2lvbiBhcmd1bWVudCwgVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSwgVHlw
ZUJpbmRpbmcgYXJndW1lbnRUeXBlLCBUeXBlQmluZGluZyBvcmlnaW5hbFBhcmFtZXRlclR5cGUp
IHsKIAkJYXJndW1lbnQuY29tcHV0ZUNvbnZlcnNpb24oc2NvcGUsIHBhcmFtZXRlclR5cGUsIGFy
Z3VtZW50VHlwZSk7CiAKQEAgLTY1MCwxMjAgKzY0Nyw0MSBAQAogCS8qKgogCSAqIEFmdGVyIG1l
dGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4
cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBh
cmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJv
dmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYgdGhp
cyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRh
dGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVuZGVk
IHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGluIGNo
ZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9jYXRp
b24gdGhlIG91dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBAcGFy
YW0gbWV0aG9kQmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkg
aW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUg
YXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZv
Y2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIG1ldGhvZCBsb29rdXAu
Ci0JICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0g
bWV0aG9kIHRoZSBtZXRob2QgcHJvZHVjZWQgYnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZpbmcg
dHlwZSBpbmZlcmVuY2UpLgorCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVudCB0
eXBlcyBhcyBjb2xsZWN0ZWQgZnJvbSBmaXJzdCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24gYXJn
dW1lbnRzIGFuZCBhcyB1c2VkIGZvciB0aGUgbWV0aG9kIGxvb2t1cC4KKwkgKiBAcGFyYW0gc2Nv
cGUgc2NvcGUgZm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJlc29s
dmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJp
bmRpbmcgbWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29wZSBz
Y29wZSkgewotCQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1YmxpYyBz
dGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZv
Y2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVz
LCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kID0g
bWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQcm9i
bGVtTWV0aG9kQmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xvc2Vz
dE1hdGNoIDogbnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJu
OwotCQlpbnQgcHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0
aG9kOwotCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5kaWRh
dGVNZXRob2QgPSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1ldGhv
ZEJpbmRpbmcucHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1NZXRo
b2RCaW5kaW5nKSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0JCQlj
YW5kaWRhdGVNZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0gbnVs
bCkgewotCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJn
cygpOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2FuZGlk
YXRlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJCQlp
bmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRo
b2RCaW5kaW5nKSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkgewot
CQkJCQlpZiAoaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVf
SU5GRVJSRUQpIHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2YgVFlQ
RV9JTkZFUlJFRAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJCQkv
LyAtIGFib3ZlIHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJCX0K
LQkJCQkJdmFyaWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlmIG5v
IGluZkN0eCBpcyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBpcyBh
IHZhcmFyZ3MgaW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24gaW5z
dGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25FeHBy
ZXNzaW9uKWludm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQotCQkJ
CQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJpbmRp
bmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHByZXNz
aW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhwcmVz
c2lvbiBbXSBhcmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0gbnVs
bCAmJiB2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVu
Z3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGluZyBs
YXN0UGFyYW0gPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJlc3Np
b24gbGFzdEFyZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChsYXN0
QXJnLmlzQ29tcGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJsZUFy
aXR5ID0gZmFsc2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFy
Z3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykg
ewotCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJpbmRp
bmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVy
VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFy
aWFibGVBcml0eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVtUmVh
c29uICE9IFByb2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVj
aCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5z
IGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2Yg
TGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNFcnJv
cnMoKSkKLQkJCQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhhcyBl
cnJvcnMKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQkJ
SW52b2NhdGlvbiBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJCQkJ
TWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1ldGVy
VHlwZSwgdHJ1ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ29u
dGV4dCA9IGlubmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRN
ZXRob2QpOwotCQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYgKCFp
bm5lckNvbnRleHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFyZ3Vt
ZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmluZGlu
ZyBpbXByb3ZlZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5l
ckludm9jYXRpb24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJvdmVk
QmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVwb3J0
SW52YWxpZEludm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwotCQkJ
CQkJCQl9Ci0JCQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1wcm92
ZWRCaW5kaW5nLCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7Ci0J
CQkJCQkJCX0KLQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVkIDwg
SW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJDb250
ZXh0LnJlYmluZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2NhdGlv
bik7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0aGVz
ZSBoYXZlIGJlZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJCQl9
Ci0JCQkJfQotCi0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJCQkv
LyBwb2x5IGV4cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0byBi
ZSByZXNvbHZlZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENv
bXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJCXVw
ZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMgY2Fz
ZSBhcmd1bWVudCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4LmFj
Y2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFyZ3Vt
ZW50VHlwZSA9IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0ZXJU
eXBlLCBzY29wZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNvbnMu
Tm9FcnJvciAvLyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRUeXBl
ICE9IG51bGwJCQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJCQkJ
CSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykpCi0J
CQkJCXsKLQkJCQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9zZWQg
dG8gYmUgb3duZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIgdG8g
Z2l2ZSBiZXR0ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlhcmd1
bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJYm9v
bGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlmaW5h
bCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVyczsK
KwkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJCWlm
ICh2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3Ro
ID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0
aC0xXS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0sIHNj
b3BlKSkgeworCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZvY2F0
aW9uLmlubmVyVXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZl
UG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5k
aW5nIG1ldGhvZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9jYXRp
b24uYXJndW1lbnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlhcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0JCQlm
b3IgKGludCBpID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3Vt
ZW50VHlwZXNbaV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAoaW50
IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3Ro
OyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNb
aV07CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4Lmdl
dFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJhbWV0
ZXJUeXBlID09IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3aXRo
b3V0IGEgdGFyZ2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSByZXNv
bHZlIGVycm9yCisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJCQlh
cmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRpbmcg
dXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJCQkJ
aWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBMRS5y
ZXNvbHZlVHlwZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUgZG9l
cyBub3QgZGV0ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxhbWJk
YUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJCQlp
ZiAoIWxhbWJkYS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBsYW1i
ZGEuaGFzRXJyb3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0ZWRB
cmd1bWVudFR5cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBCaW5k
aW5nLlBPTFlfVFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5
cGU7CisJCQl9CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRp
b24sIG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJsaWMg
c3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90YXRp
b25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YQppbmRleCA2MjRhYTQ3Li44N2RhYmE3IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxv
Y2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03NywyOSArNzcsMTAgQEAKIAogCSAvLyBob2xkIG9u
IHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2Ug
dW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgog
CXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQTUIsSUMxOD4qLyBpbmZlcmVuY2VDb250ZXh0
czsKLQlwcm90ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7
CisJcHJpdmF0ZSBCbG9ja1Njb3BlIGVuY2xvc2luZ1Njb3BlOworCXByaXZhdGUgYm9vbGVhbiBh
cmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJp
bmRpbmcuTk9fUEFSQU1FVEVSUzsKLQotCS8qKiBSZWNvcmQgdG8ga2VlcCBzdGF0ZSBiZXR3ZWVu
IGRpZmZlcmVudCBwYXJ0cyBvZiByZXNvbHV0aW9uLiAqLwotCVJlc29sdXRpb25TdGF0ZSBzdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGU7Ci0JY2xhc3MgUmVzb2x1dGlvblN0YXRlIHsKLQkJQmxvY2tT
Y29wZSBzY29wZTsKLQkJYm9vbGVhbiBpc0RpYW1vbmQ7Ci0JCWJvb2xlYW4gZGlhbW9uZE5lZWRz
RGVmZXJyaW5nOwotCQlib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKLQkJYm9vbGVhbiBjYW5ub3RJ
bmZlckRpYW1vbmQ7IC8vIHJlcXVlc3QgdGhlIGFuIGVycm9yIGJlIHJlcG9ydGVkIGluIGR1ZSB0
aW1lCi0JCWJvb2xlYW4gaGFzUmVwb3J0ZWRFcnJvcjsKLQotCQlSZXNvbHV0aW9uU3RhdGUoQmxv
Y2tTY29wZSBzY29wZSwgYm9vbGVhbiBpc0RpYW1vbmQsIGJvb2xlYW4gZGlhbW9uTmVlZHNEZWZl
cnJpbmcsCi0JCQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcykKLQkJewotCQkJdGhpcy5zY29wZSA9IHNjb3BlOwotCQkJdGhpcy5pc0RpYW1vbmQg
PSBpc0RpYW1vbmQ7Ci0JCQl0aGlzLmRpYW1vbmROZWVkc0RlZmVycmluZyA9IGRpYW1vbk5lZWRz
RGVmZXJyaW5nOwotCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSBhcmdzQ29udGFpbkNhc3Q7Ci0J
CX0KLQl9Ci0KKwkKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJl
bnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJ
Ly8gY2hlY2sgY2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBpbiBjdXJyZW50IGNv
bnRleHQgKDI2MTM0KQogCWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxpemF0aW9uSWZOZWNlc3Nh
cnkoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVyYXN1cmUo
KSwgY3VycmVudFNjb3BlLCBmbG93SW5mbyk7CkBAIC0zNDAsMTg3ICszMjEsMTUyIEBACiAJLy8g
UHJvcGFnYXRlIHRoZSB0eXBlIGNoZWNraW5nIHRvIHRoZSBhcmd1bWVudHMsIGFuZCBjaGVjayBp
ZiB0aGUgY29uc3RydWN0b3IgaXMgZGVmaW5lZC4KIAlmaW5hbCBib29sZWFuIGlzRGlhbW9uZCA9
IHRoaXMudHlwZSAhPSBudWxsICYmICh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25k
KSAhPSAwOwogCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5j
b21waWxlck9wdGlvbnMoKTsKLQlib29sZWFuIGRpYW1vbmROZWVkc0RlZmVycmluZyA9IGZhbHNl
OwogCWxvbmcgc291cmNlTGV2ZWwgPSBjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWw7CiAJaWYg
KHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7CiAJCXRoaXMuY29uc3Rh
bnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCXRoaXMuZW5jbG9zaW5nU2NvcGUgPSBzY29w
ZTsKIAkJaWYgKHRoaXMudHlwZSA9PSBudWxsKSB7CiAJCQkvLyBpbml0aWFsaXphdGlvbiBvZiBh
biBlbnVtIGNvbnN0YW50CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHNjb3BlLmVuY2xvc2luZ1Jl
Y2VpdmVyVHlwZSgpOwogCQl9IGVsc2UgewogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5
cGUucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pOwotCQkJaWYgKGlz
RGlhbW9uZCAmJiB0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNv
bnRleHQgPT0gSU5WT0NBVElPTl9DT05URVhUICYmIHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzgpIHsKLQkJCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0
aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQotCQkJCQlkaWFtb25kTmVlZHNEZWZl
cnJpbmcgPSB0cnVlOwotCQkJfQogCQl9Ci0JfSBlbHNlIHsKLQkJdGhpcy5yZXNvbHZlZFR5cGUg
PSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlOwotCX0KLQotCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkg
ewotCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwgdGhpcy5yZXNvbHZlZFR5cGUp
OwotCQljaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOiB7Ci0JCQlpZiAodGhpcy50eXBlIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxs
b3cgbmV3IFg8U3RyaW5nPi5ZPEludGVnZXI+KCkKLQkJCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJl
bnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNvbHZlZFR5cGU7Ci0JCQkJaWYgKGN1
cnJlbnRUeXBlID09IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsKLQkJCQlkbyB7Ci0JCQkJCS8v
IGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9yIHRvcGxldmVsIHR5cGVzCi0JCQkJCWlm
ICgoY3VycmVudFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYykg
IT0gMCkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKLQkJCQkJaWYgKGN1cnJl
bnRUeXBlLmlzUmF3VHlwZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOwot
CQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkh
PSBudWxsKTsKLQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSBxUmVmID0g
KFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlzLnR5cGU7Ci0JCQkJZm9y
IChpbnQgaSA9IHFSZWYudHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgewot
CQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRzW2ldICE9IG51bGwpIHsKLQkJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRp
b24odGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCQkJCQlicmVhazsKKwkJaWYgKHRo
aXMudHlwZSAhPSBudWxsKSB7CisJCQljaGVja0lsbGVnYWxOdWxsQW5ub3RhdGlvbihzY29wZSwg
dGhpcy5yZXNvbHZlZFR5cGUpOworCQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjogewor
CQkJCWlmICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJl
ZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQorCQkJCQlS
ZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5yZXNv
bHZlZFR5cGU7CisJCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVudFR5
cGU7CisJCQkJCWRvIHsKKwkJCQkJCS8vIGlzU3RhdGljKCkgaXMgYW5zd2VyaW5nIHRydWUgZm9y
IHRvcGxldmVsIHR5cGVzCisJCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNz
RmlsZUNvbnN0YW50cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb247CisJCQkJCQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNr
UGFyYW1ldGVyaXplZEFsbG9jYXRpb247CisJCQkJCX0gd2hpbGUgKChjdXJyZW50VHlwZSA9IGN1
cnJlbnRUeXBlLmVuY2xvc2luZ1R5cGUoKSkhPSBudWxsKTsKKwkJCQkJUGFyYW1ldGVyaXplZFF1
YWxpZmllZFR5cGVSZWZlcmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJl
ZmVyZW5jZSkgdGhpcy50eXBlOworCQkJCQlmb3IgKGludCBpID0gcVJlZi50eXBlQXJndW1lbnRz
Lmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7CisJCQkJCQlpZiAocVJlZi50eXBlQXJndW1lbnRz
W2ldICE9IG51bGwpIHsKKwkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVh
bGlmaWVkUGFyYW1ldGVyaXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZl
ZFR5cGUpOworCQkJCQkJCWJyZWFrOworCQkJCQkJfQogCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9
Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJ
Ly8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAogCi0JLy8gcmVz
b2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAo
dGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFy
Z3VtZW50cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRz
W2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5j
ZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsK
LQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoYXJnSGFzRXJyb3IgJiYgdHlw
ZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQot
CQlpZiAoaXNEaWFtb25kKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90
V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOwotCQkJcmV0dXJu
IG51bGw7Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9y
IChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7
Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJLy8gcmVzb2x2
ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRo
aXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJn
dW1lbnRzLmxlbmd0aDsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsg
aSsrKSB7CisJCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1l
bnRzW2ldOworCQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZl
cmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxs
KSB7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CisJCQkJaWYgKGFyZ0hhc0Vycm9y
ICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgeworCQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwogCQkJ
CX0KIAkJCX0KLQkJCXJldHVybiBudWxsOworCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJCXNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRo
aXMudHlwZUFyZ3VtZW50cyk7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQlpZiAoYXJnSGFz
RXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRl
bXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlz
LmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNb
aV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOwor
CQkJfQogCQl9Ci0JfQogCi0JLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCi0JYm9v
bGVhbiBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVs
bCkgewotCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFsc2U7Ci0JCWludCBsZW5ndGggPSB0aGlz
LmFyZ3VtZW50cy5sZW5ndGg7Ci0JCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGlu
Z1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlFeHBy
ZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07Ci0JCQlpZiAoYXJndW1lbnQgaW5z
dGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVu
bmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCi0JCQkJYXJnc0NvbnRh
aW5DYXN0ID0gdHJ1ZTsKKwkJLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCisJCWlm
ICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlib29sZWFuIGFyZ0hhc0Vycm9yID0gZmFs
c2U7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1
bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1l
bnRzW2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJ
CQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxs
IGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9
CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsK
KwkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdh
cyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJ
CWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKSB7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJCQl9CiAJCQl9Ci0JCQlh
cmd1bWVudC5zZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYg
KHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKLQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVj
dGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJaWYgKCh0aGlz
LmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwp
IHsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0g
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigp
IHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFy
Z3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNl
SGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5u
ZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0KLQkJfQotCQlpZiAoYXJnSGFzRXJyb3IpIHsKLQkJ
CS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTks
IGlmIGFyZ3VtZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4g
Y2FzZS4KKwkJCWlmIChhcmdIYXNFcnJvcikgeworCQkJCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVycm9y
cywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KIAkJCSAgIE5vIG1lYW5pbmdm
dWwgdHlwZSByZXNvbHV0aW9uIGlzIHBvc3NpYmxlIHNpbmNlIGluZmVyZW5jZSBvZiB0aGUgZWxp
ZGVkIHR5cGVzIGlzIGZ1bGx5IHRpZWQgdG8gYXJndW1lbnQgdHlwZXMuIERvCiAJCQkgICBub3Qg
cmV0dXJuIHRoZSBwYXJ0aWFsbHkgcmVzb2x2ZWQgdHlwZS4KLQkJCSAqLwotCQkJaWYgKGlzRGlh
bW9uZCkgewotCQkJCXJldHVybiBudWxsOyAvLyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhp
cy5yZXNvbHZlZFR5cGUKLQkJCX0KLQkJCWlmICh0aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9m
IFJlZmVyZW5jZUJpbmRpbmcpIHsKLQkJCQkvLyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xp
ZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCi0JCQkJ
VHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJ
Zm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KSB7Ci0JCQkJCXBzZXVkb0FyZ3NbaV0gPSB0
aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFy
Z3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlw
ZQorCQkJCSAqLworCQkJCWlmIChpc0RpYW1vbmQpIHsKKwkJCQkJcmV0dXJuIG51bGw7IC8vIG5v
dCB0aGUgcGFydGlhbGx5IGNvb2tlZCB0aGlzLnJlc29sdmVkVHlwZQogCQkJCX0KLQkJCQl0aGlz
LmJpbmRpbmcgPSBzY29wZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSwgVHlwZUNvbnN0YW50cy5JTklULCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7Ci0J
CQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRp
bmcoKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCQkJCS8vIHJlY29yZCB0aGUg
Y2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewot
CQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGlu
Zy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAotCQkJCQkJCS8vIHNob3Vs
ZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNv
bnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5KQotCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNj
b3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2Vz
dE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZyludWxsKTsKLQkJCQkJCX0KLQkJCQkJ
CXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2Vz
dE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKTsKLQkJCQkJCWlmIChjbG9z
ZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlz
RGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgewotCQkJCQkJCS8vIGlnbm9y
ZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChl
LmcuIGRpcmVjdCByZWN1cnNpb25zKQotCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlm
aWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCWlmICh0
aGlzLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJLy8g
cmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3Nz
aWJsZSBjb25zdHJ1Y3RvciBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBu
ZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49
IDA7KSB7CisJCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51
bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNl
IGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKKwkJCQkJfQorCQkJCQl0aGlzLmJpbmRp
bmcgPSBzY29wZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSwgVHlwZUNvbnN0YW50cy5JTklULCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7CisJCQkJCWlm
ICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkp
IHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmlu
ZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKKwkJCQkJCS8vIHJlY29yZCB0aGUgY2xv
c2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9z
c2libGUgbWV0aG9kIG1hdGNoCisJCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKKwkJ
CQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCisJCQkJCQkJCS8vIHNob3Vs
ZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNv
bnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5KQorCQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBz
Y29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nl
c3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7CisJCQkJCQkJfQorCQkJ
CQkJCXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7CisJCQkJCQkJaWYg
KGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2Nv
cGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7CisJCQkJCQkJCS8v
IGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRz
ZWxmIChlLmcuIGRpcmVjdCByZWN1cnNpb25zKQorCQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5h
bC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJ
CQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CisJCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRU
eXBlOwogCQkJfQorCQl9CisJCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlz
LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQor
CisJCS8vIG51bGwgdHlwZSBkZW5vdGVzIGZha2UgYWxsb2NhdGlvbiBmb3IgZW51bSBjb25zdGFu
dCBpbml0cworCQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRUeXBlLmNh
bkJlSW5zdGFudGlhdGVkKCkpIHsKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdElu
c3RhbnRpYXRlKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwogCQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwogCQl9CiAJfQotCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8
ICF0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCXJldHVybiBudWxsOwot
CX0KLQotCS8vIG51bGwgdHlwZSBkZW5vdGVzIGZha2UgYWxsb2NhdGlvbiBmb3IgZW51bSBjb25z
dGFudCBpbml0cwotCWlmICh0aGlzLnR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUu
Y2FuQmVJbnN0YW50aWF0ZWQoKSkgewotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJ
bnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKLQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwotCX0KLQlSZXNvbHV0aW9uU3RhdGUgc3RhdGUgPSBuZXcgUmVzb2x1dGlv
blN0YXRlKHNjb3BlLCBpc0RpYW1vbmQsIGRpYW1vbmROZWVkc0RlZmVycmluZywgYXJnc0NvbnRh
aW5DYXN0LCB0aGlzLmFyZ3VtZW50VHlwZXMpOwotCWlmIChkaWFtb25kTmVlZHNEZWZlcnJpbmcp
IHsKLQkJdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBzdGF0ZTsgLy8gcmVzb2x2aW5n
IHRvIGJlIGNvbnRpbnVlZCBsYXRlciAodmlhIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkpLgotCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKLQl9Ci0KLQlpZiAoIXJl
c29sdmVQYXJ0MihzdGF0ZSkpCi0JCXJldHVybiBudWxsOwotCXJldHVybiByZXNvbHZlUGFydDMo
c3RhdGUpOwotfQotCi0vKiogU2Vjb25kIHBhcnQgb2YgcmVzb2x2aW5nIHRoYXQgbWF5IGhhcHBl
biBtdWx0aXBsZSB0aW1lcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbi4gKi8KLWJvb2xlYW4g
cmVzb2x2ZVBhcnQyKFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCS8vIFRPRE86IGFsbCBpbmZv
cm1hdGlvbiBwZXJzaXN0ZWQgZHVyaW5nIHRoaXMgbWV0aG9kIG1heSBuZWVkIHRvIGJlIHN0b3Jl
ZCBwZXIgdGFyZ2V0VHlwZT8KLQlpZiAoc3RhdGUuaXNEaWFtb25kKSB7Ci0JCVJlZmVyZW5jZUJp
bmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7Ci0JCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMg
PSBpbmZlckVsaWRlZFR5cGVzKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2
ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRU
eXBlcywgc3RhdGUuc2NvcGUpOwotCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7Ci0JCQlp
ZiAoIXN0YXRlLmRpYW1vbmROZWVkc0RlZmVycmluZykgewotCQkJCXN0YXRlLnNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJc3RhdGUuaGFz
UmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwotCQkJ
fSBlbHNlIHsKLQkJCQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSB0cnVlOyAvLyBkZWZlciBy
ZXBvcnRpbmcKLQkJCX0KLQkJCXJldHVybiBmYWxzZTsKKwkKKwlpZiAoaXNEaWFtb25kICYmIHRo
aXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZP
Q0FUSU9OX0NPTlRFWFQgJiYgc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkgeworCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlw
ZS5pc1ZhbGlkQmluZGluZygpKSB7CisJCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlz
KTsKIAkJfQotCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBz
dGF0ZS5zY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNU
eXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7Ci0JCXN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCA9
IGZhbHNlOwotIAl9Ci0JUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUgPSAoUmVmZXJlbmNl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7Ci0JdGhpcy5iaW5kaW5nID0gZmluZENvbnN0cnVj
dG9yQmluZGluZyhzdGF0ZS5zY29wZSwgdGhpcywgcmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50
VHlwZXMpOwotCXJldHVybiB0cnVlOwotfQotCi0vKiogRmluYWwgcGFydCBvZiByZXNvbHZpbmcg
KG9uY2UpOiBjaGVjayBhbmQgcmVwb3J0IHZhcmlvdXMgZXJyb3IgY29uZGl0aW9ucy4gKi8KLVR5
cGVCaW5kaW5nIHJlc29sdmVQYXJ0MyhSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQlpZiAodGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiB0aGlzLnN1c3BlbmRlZFJlc29s
dXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7
Ci0JdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgPSBudWxsOwotCWlmIChzdGF0ZS5jYW5u
b3RJbmZlckRpYW1vbmQpIHsKLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90
SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVs
bDsKIAl9CisJCisJaWYgKGlzRGlhbW9uZCkgeworCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNU
eXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5l
cmljVHlwZSgpOworCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUg
PSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBl
LCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUo
KSk7CisJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBh
cmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMu
YXJndW1lbnRUeXBlcywgc2NvcGUpOworCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CisJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwor
CQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKKwkJfQorCQl0aGlzLnJlc29sdmVk
VHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7Cisg
CX0KKwkKKwlSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5n
KSB0aGlzLnJlc29sdmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5k
aW5nKHNjb3BlLCB0aGlzLCByZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJUmVm
ZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZTsKKwkKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5k
aW5nLmRlY2xhcmluZ0NsYXNzID0gYWxsb2NhdGlvblR5cGU7CkBAIC01MjgsMzAgKzQ3NCwyOSBA
QAogCQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkgewogCQkJcmV0dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJp
bmRpbmcpOwogCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5k
aW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLm1pc3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlz
LmJpbmRpbmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3Ry
dWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRl
ZCh0aGlzLmJpbmRpbmcsIHN0YXRlLnNjb3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYg
KGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhp
cyk7CiAJfQotCWlmIChjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGws
IGFsbG9jYXRpb25UeXBlLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHN0YXRlLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKKwlpZiAoY2hlY2tJbnZv
Y2F0aW9uQXJndW1lbnRzKHNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5n
LCB0aGlzLmFyZ3VtZW50cywgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2Fz
dCwgdGhpcykpIHsKIAkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIAlpZiAo
dGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlw
ZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCXN0YXRlLnNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9j
YXRpb24odGhpcy5iaW5kaW5nLCB0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzLCB0aGlzLnR5cGVB
cmd1bWVudHMpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1
bWVudHNGb3JNZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFy
Z3VtZW50cywgdGhpcy50eXBlQXJndW1lbnRzKTsKIAl9Ci0JaWYgKCFzdGF0ZS5pc0RpYW1vbmQg
JiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVu
dHMoKSkgewotIAkJY2hlY2tUeXBlQXJndW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdU
eXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc3RhdGUuc2NvcGUpOworCWlmICghaXNEaWFtb25k
ICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1l
bnRzKCkpIHsKKyAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5n
VHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKICAJfQotCUNvbXBpbGVyT3B0aW9u
cyBjb21waWxlck9wdGlvbnMgPSBzdGF0ZS5zY29wZS5jb21waWxlck9wdGlvbnMoKTsKIAlpZiAo
Y29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCAmJiAo
dGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLklzTnVsbG5lc3NLbm93bikgPT0gMCkgewot
CQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHN0YXRlLnNjb3BlLmVudmlyb25t
ZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQotCQkJCS5jaGVj
a0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8s
IGZhbHNlLCBzdGF0ZS5zY29wZSk7CisJCW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZp
ZXIoc2NvcGUuZW52aXJvbm1lbnQoKSwgY29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3Rh
dGlvbnMpCisJCQkJLmNoZWNrSW1wbGljaXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBu
dWxsLypzcmNNZXRob2QqLywgZmFsc2UsIHNjb3BlKTsKIAl9Ci0JcmVjb3JkRXhjZXB0aW9uc0Zv
ckVuY2xvc2luZ0xhbWJkYShzdGF0ZS5zY29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlv
bnMpOworCXJlY29yZEV4Y2VwdGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc2NvcGUsIHRoaXMuYmlu
ZGluZy50aHJvd25FeGNlcHRpb25zKTsKIAlyZXR1cm4gYWxsb2NhdGlvblR5cGU7CiB9CiAKQEAg
LTU3MCw3ICs1MTUsMzMgQEAKIAl9CiB9CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxp
ZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVu
Y2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5h
bCBCbG9ja1Njb3BlIHNjb3BlKSB7CisvLyBGb3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94
aW5nIGNvbXBhdGliaWxpdHkgaXMgc2FtZSBhcyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNl
IGphdmEubGFuZydzIHdyYXBwZXIgdHlwZXMgYXJlIG5vdCBnZW5lcmljLgorcHVibGljIGJvb2xl
YW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgeworCXJldHVybiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKK30K
KworcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyBsZWZ0LCBmaW5h
bCBTY29wZSBzY29wZSkgeworCWlmICh0aGlzLnJlc29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlz
LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQlyZXR1cm4gZmFsc2U7CisJVHlwZUJp
bmRpbmcgYWxsb2NhdGlvblR5cGUgPSB0aGlzLnJlc29sdmVkVHlwZTsKKwlpZiAoaXNQb2x5RXhw
cmVzc2lvbigpKSB7CisJCVR5cGVCaW5kaW5nIG9sZEV4cGVjdGVkVHlwZSA9IHRoaXMudHlwZUV4
cGVjdGVkOworCQl0cnkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBsZWZ0OworCQkJUmVmZXJl
bmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlz
LnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJpYWJsZXMoKSwgZ2VuZXJp
Y1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtdIGluZmVycmVkVHlwZXMg
PSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCBwYXJhbWV0ZXJpemVkVHlwZS5l
bmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUpOworCQkJaWYgKGluZmVy
cmVkVHlwZXMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQlhbGxvY2F0aW9uVHlwZSA9
IHRoaXMuZW5jbG9zaW5nU2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlw
ZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcp
IHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOworCQl9IGZpbmFsbHkgeworCQkJ
dGhpcy50eXBlRXhwZWN0ZWQgPSBvbGRFeHBlY3RlZFR5cGU7CisJCX0KKwl9CisJcmV0dXJuIGFs
bG9jYXRpb25UeXBlICE9IG51bGwgJiYgYWxsb2NhdGlvblR5cGUuaXNDb21wYXRpYmxlV2l0aChs
ZWZ0LCBzY29wZSk7Cit9CisKK3B1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5n
IGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBz
Y29wZSkgewogCS8qIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMg
dG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIHN5bnRoZXNpemUgYSBnZW5lcmljIHN0
YXRpYyBmYWN0b3J5CiAJICAgbWV0aG9kIHRoYXQgd291bGQsIGdpdmVuIHRoZSBhcmd1bWVudCB0
eXBlcyBhbmQgdGhlIGludm9jYXRpb24gc2l0ZSwgbWFudWZhY3R1cmUgYSBwYXJhbWV0ZXJpemVk
IG9iamVjdCBvZiB0eXBlIGFsbG9jYXRpb25UeXBlLgogCSAgIElmIHdlIGFyZSBzdWNjZXNzZnVs
IHRoZW4gYnkgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24sIHRoZSBwYXJhbWV0ZXJpemF0aW9uIG9m
IHRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZmFjdG9yeSBtZXRob2QgaXMgaWRlbnRpY2FsCkBAIC01
ODAsMTcgKzU1MSw2IEBACiAJaWYgKGZhY3RvcnkgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgJiYgZmFjdG9yeS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBnZW5lcmljRmFjdG9yeSA9IChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGZhY3Rvcnk7CiAJCXRoaXMuaW5mZXJyZWRSZXR1cm5U
eXBlID0gZ2VuZXJpY0ZhY3RvcnkuaW5mZXJyZWRSZXR1cm5UeXBlOwotCQkvLyB0aGlzIGlzIG91
ciBsYXN0IGNoYW5jZSB0byBpbnNwZWN0IHRoZSByZXN1bHQgb2YgdGhlIGluZmVyZW5jZSB0aGF0
IGlzIGNvbm5lY3RlZCB0byB0aGUgdGhyb3ctYXdheSBmYWN0b3J5IGJpbmRpbmcKLQkJSW5mZXJl
bmNlQ29udGV4dDE4IGluZkN0eDE4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChnZW5lcmljRmFjdG9y
eSk7Ci0JCWlmIChpbmZDdHgxOCAhPSBudWxsICYmIGluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPT0g
SW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCS8vIHJlZnJlc2ggYXJn
dW1lbnRUeXBlcyBmcm9tIHVwZGF0ZWQgYmluZGluZ3MgaW4gYXJndW1lbnRzOgotCQkJLy8gKHRo
aXMgc2hvdWxkbid0IGJlIHN0cmljdGx5IG5lY2Vzc2FyeSwgYXMgRnVuY3Rpb25FeHByZXNzaW9u
LmlzQ29tcGF0aWJsZVdpdGgoKSBzaG91bGQgZ2l2ZSB0aGUgc2FtZSByZXN1bHQsCi0JCQkvLyAg
YnV0IGl0J3MgcHJvYmFibHkgYmUgYSBnb29kIGlkZWEgdG8gYXZvaWQgdGhlIG5lY2Vzc2l0eSB0
byBjYWxsIGlzQ29tcGF0aWJsZVdpdGgoKSBpbiB0aGUgZmlyc3QgcGxhY2UpLiAKLQkJCWZvciAo
aW50IGkgPSAwOyBpIDwgYXJndW1lbnRUeXBzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJaWYgKGFyZ3Vt
ZW50VHlwc1tpXSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykKLQkJCQkJYXJndW1lbnRUeXBz
W2ldID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQkJfQotCQl9CiAJCXJldHVy
biAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50
czsKIAl9CiAJcmV0dXJuIG51bGw7CkBAIC02OTgsMTAyICs2NTgsNDcgQEAKIH0KIAogLy8tLSBp
bnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7
Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgdGFyZ2V0VHlw
ZSAhPSBudWxsKSB7Ci0JCXNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJaWYgKCFyZXNv
bHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpKSB7Ci0JCQlpZiAocmVwb3J0
RXJyb3JzICYmICF0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9y
KSB7Ci0JCQkJaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmNhbm5vdEluZmVyRGlh
bW9uZCkKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBl
cyh0aGlzKTsKLQkJCQllbHNlCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJ
bmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0
aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhh
c1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJfQorcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCQorCWlmICh0aGlzLnJl
c29sdmVkVHlwZSA9PSBudWxsIHx8ICF0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygp
KQorCQlyZXR1cm4gbnVsbDsKKwkKKwlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1
bWVudFR5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKQorCQlpZiAodGhpcy5hcmd1bWVudFR5
cGVzWzBdID09IG51bGwpCiAJCQlyZXR1cm4gbnVsbDsKLQkJfQotCX0KLQlpZiAocmVwb3J0RXJy
b3JzICYmIHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRp
bmcoKSkgewotCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpCi0JCQl0
aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGU7Ci0JCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7
Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhp
cy5iaW5kaW5nKTsKLQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVk
RXJyb3IgPSB0cnVlOwotCQl9Ci0JfQotCXJldHVybiB0aGlzLmJpbmRpbmc7Ci19Ci1wdWJsaWMg
VHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRUeXBlOwot
CWJvb2xlYW4gbmVlZHNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAJCQkJCQkJCQkJ
CQkJCQkJLy8gbm90IHlldCByZXNvbHZlZAotCQkJKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwg
JiYgdGFyZ2V0VHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVX
aXRoKHRhcmdldFR5cGUpKTsJLy8gcHJldmlvdXMgYXR0ZW1wdCB3YXMgd3JvbmcKLQlpZiAobmVl
ZHNVcGRhdGUgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiAhdGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkvLyBBdHRl
bXB0IHRvIHJlc29sdmUgaGFsZiByZXNvbHZlZCBkaWFtb25kCi0JCXJlc29sdmVQYXJ0Mih0aGlz
LnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCS8vIGNvbmZlciBNZXNzYWdlU2VuZC5j
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoLCwpOgotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29u
dGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKSB0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0
ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgeworCQorCVR5cGVCaW5kaW5n
IGFsbG9jYXRpb25UeXBlID0gdGhpcy5yZXNvbHZlZFR5cGU7CisJaWYgKGlzUG9seUV4cHJlc3Np
b24oKSkgeworCQlUeXBlQmluZGluZyBvbGRFeHBlY3RlZFR5cGUgPSB0aGlzLnR5cGVFeHBlY3Rl
ZDsKKwkJdHJ5IHsKIAkJCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQkJCU1ldGhv
ZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLCAo
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQkJaWYg
KHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgewotCQkJCUFTVE5v
ZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5kaW5nLCBz
Y29wZSk7Ci0JCQl9CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQkJ
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUuZW52aXJv
bm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJpY1R5cGUu
dHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJVHlwZUJp
bmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMocGFyYW1ldGVyaXplZFR5
cGUsIHBhcmFtZXRlcml6ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVz
LCBzY29wZSk7CisJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKQorCQkJCXJldHVybiBudWxs
OworCQkJYWxsb2NhdGlvblR5cGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgp
KTsKKwkJCXJldHVybiBzY29wZS5nZXRDb25zdHJ1Y3RvcigoUmVmZXJlbmNlQmluZGluZykgYWxs
b2NhdGlvblR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCX0gZmluYWxseSB7CisJ
CQl0aGlzLnR5cGVFeHBlY3RlZCA9IG9sZEV4cGVjdGVkVHlwZTsKIAkJfQogCX0KLQlpZiAodGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQlyZXR1cm4gcmVzb2x2ZVBh
cnQzKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKTsKLQl9Ci0JcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlOworCXJldHVybiBudWxsOwogfQogcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVu
dHMoKSB7CiAJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwogfQogCi1wdWJsaWMgYm9vbGVhbiB1cGRh
dGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJn
ZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJp
bmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRp
bmcub3JpZ2luYWwoKSA9PSB1cGRhdGVkQmluZGluZy5vcmlnaW5hbCgpKSB7Ci0JCUluZmVyZW5j
ZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4
dHMuZ2V0KHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGlu
ZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhp
cy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1
dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0
IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0
ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0J
CX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5
cGUgPSB1cGRhdGVkQmluZGluZy5kZWNsYXJpbmdDbGFzczsKLQlyZXR1cm4gaGFzVXBkYXRlOwot
fQogcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewog
CWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKIAl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dChtZXRob2QsIGluZkN0eDE4KTsKLQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9k
Lm9yaWdpbmFsKCk7Ci0JaWYgKG9yaWdpbmFsIGluc3RhbmNlb2YgU3ludGhldGljRmFjdG9yeU1l
dGhvZEJpbmRpbmcpIHsKLQkJU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcgc3ludGhPcmln
aW5hbCA9IChTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZylvcmlnaW5hbDsKLQkJUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZEN0b3IgPSBzeW50aE9yaWdpbmFsLmFw
cGx5VHlwZUFyZ3VtZW50c09uQ29uc3RydWN0b3IobWV0aG9kLnR5cGVBcmd1bWVudHMpOwotCQl0
aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChwYXJhbWV0ZXJpemVkQ3RvciwgaW5mQ3R4MTgpOwot
CX0KLX0KLXB1YmxpYyBib29sZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJp
bmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJ
JiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CiB9CiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdl
dEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJ
aWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKIAkJcmV0dXJuIG51bGw7CiAJcmV0
dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhv
ZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCXJldHVybiB0aGlz
LmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci19Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0
ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci19Ci1wdWJsaWMg
SW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci19Ci0KIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb25T
aXRlOiAtLQogcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkg
ewogCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwpAQCAtODAxLDQgKzcwNiw0IEBACiBw
dWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29w
ZSkgewogCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50
cywgdGhpcyk7CiB9Ci19Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
ZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggZWUzMTA4Ni4uZmU1MDlkZSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC01Nyw3ICs1Nyw2IEBACiAJcHJpdmF0ZSBi
b29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBmYWxzZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9y
aWdpbmFsVmFsdWVJZlRydWVUeXBlOwogCXByaXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1
ZUlmRmFsc2VUeXBlOwotCXByaXZhdGUgQmxvY2tTY29wZSBwb2x5RXhwcmVzc2lvblNjb3BlOwog
CXByaXZhdGUgYm9vbGVhbiB1c2UxOHNwZWNpZmljczsKIAlwdWJsaWMgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKAogCQlFeHByZXNzaW9uIGNvbmRpdGlvbiwKQEAgLTQ2NCwxMiArNDYzLDYgQEAKIAkJ
CWlmICh0aGlzLnZhbHVlSWZGYWxzZSBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZh
bHVlSWZGYWxzZS5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBj
aGVjayBsYXRlciBvbgogCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZh
bHVlSWZGYWxzZS5yZXNvbHZlVHlwZShzY29wZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9u
KCkpIHsKLQkJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBv
bHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29s
dXRpb24vZXJyb3IgcmVwb3J0aW5nLgotCQkJCX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5
cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhp
cy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJ
fSBlbHNlIHsKQEAgLTQ4NCwxMSArNDc3LDkgQEAKIAkJfQogCQlpZiAoaXNQb2x5RXhwcmVzc2lv
bigpKSB7CiAJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCXRoaXMucG9s
eUV4cHJlc3Npb25TY29wZSA9IHNjb3BlOyAvLyBwcmVzZXJ2ZSBmb3IgZXZlbnR1YWwgcmVzb2x1
dGlvbi9lcnJvciByZXBvcnRpbmcuCiAJCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhp
cyk7CiAJCQl9Ci0JCQljb21wdXRlQ29udmVyc2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBl
KTsKLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCQkJ
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gY29tcHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlz
LmV4cGVjdGVkVHlwZSkgPyB0aGlzLmV4cGVjdGVkVHlwZSA6IG51bGw7CiAJCX0KIAkJVHlwZUJp
bmRpbmcgdmFsdWVJZlRydWVUeXBlID0gdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAkJ
VHlwZUJpbmRpbmcgdmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VU
eXBlOwpAQCAtNjYxLDcgKzY1Miw4IEBACiAJCXJldHVybiBudWxsOwogCX0KIAotCXByb3RlY3Rl
ZCB2b2lkIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0
YXJnZXRUeXBlKSB7CisJcHJvdGVjdGVkIGJvb2xlYW4gY29tcHV0ZUNvbnZlcnNpb25zKEJsb2Nr
U2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJYm9vbGVhbiBvayA9IHRy
dWU7CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlICE9IG51bGwgJiYgdGhpcy5v
cmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlpZiAodGhpcy52
YWx1ZUlmVHJ1ZS5pc0NvbnN0YW50VmFsdWVPZlR5cGVBc3NpZ25hYmxlVG9UeXBlKHRoaXMub3Jp
Z2luYWxWYWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUpCiAJCQkJCXx8IHRoaXMub3JpZ2luYWxW
YWx1ZUlmVHJ1ZVR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkgewpAQCAtNjgyLDYg
KzY3NCw3IEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJnZXRU
eXBlLCB0aGlzLnZhbHVlSWZUcnVlLCBudWxsKTsKKwkJCQlvayA9IGZhbHNlOwogCQkJfQogCQl9
CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSAhPSBudWxsICYmIHRoaXMub3Jp
Z2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKQEAgLTcwNCw4ICs2OTcs
MTAgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5
cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLCB0YXJnZXRUeXBl
LCB0aGlzLnZhbHVlSWZGYWxzZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQor
CQlyZXR1cm4gb2s7CiAJfQogCiAJcHVibGljIHZvaWQgc2V0RXhwZWN0ZWRUeXBlKFR5cGVCaW5k
aW5nIGV4cGVjdGVkVHlwZSkgewpAQCAtNzE4LDE4ICs3MTMsNiBAQAogCiAJcHVibGljIEV4cHJl
c3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewogCQlyZXR1cm4gdGhpcy5leHBy
ZXNzaW9uQ29udGV4dDsKLQl9Ci0JCi0JcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQkv
LyBpbiAxLjggaWYgdHJlYXRlZCBhcyBhIHBvbHkgZXhwcmVzc2lvbjoKLQkJaWYgKGlzUG9seUV4
cHJlc3Npb24oKSkgewotCQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMu
cG9seUV4cHJlc3Npb25TY29wZSk7Ci0JCQl0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID0g
dGhpcy52YWx1ZUlmVHJ1ZS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwg
c2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZG
YWxzZS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgc2NvcGUpOwotCQkJ
Y29tcHV0ZUNvbnZlcnNpb25zKHRoaXMucG9seUV4cHJlc3Npb25TY29wZSwgdGFyZ2V0VHlwZSk7
Ci0JCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRhcmdldFR5cGU7Ci0JCX0KLQkJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOwogCX0KIAkKIAlwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGlj
YWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCmluZGV4IDI0MzQ5MTUuLjQ3MzRj
MzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKQEAgLTU2LDcgKzU2
LDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuVmFyaWFibGVCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogCiBwdWJsaWMgY2xhc3MgRXhwbGljaXRD
b25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0ZW1lbnQgaW1wbGVtZW50cyBJbnZvY2F0aW9uIHsK
IApAQCAtNzYsMTEgKzc1LDcgQEAKIAogCS8vIFRPRE8gUmVtb3ZlIG9uY2UgRE9NUGFyc2VyIGlz
IGFjdGl2YXRlZAogCXB1YmxpYyBpbnQgdHlwZUFyZ3VtZW50c1NvdXJjZVN0YXJ0OwotCi0JIC8v
IGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGlu
ZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRp
ZGF0ZSk6Ci0JcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4
dDE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByaXZhdGUgSW5uZXJJbmZlcmVuY2VIZWxwZXIg
aW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci0KKwkKIAlwdWJsaWMgRXhwbGljaXRDb25zdHJ1Y3RvckNh
bGwoaW50IGFjY2Vzc01vZGUpIHsKIAkJdGhpcy5hY2Nlc3NNb2RlID0gYWNjZXNzTW9kZTsKIAl9
CkBAIC0zOTQsMTAgKzM4OSw2IEBACiAJCQkJCWlmICgoYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3Vt
ZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgewogCQkJCQkJYXJnSGFzRXJyb3IgPSB0
cnVlOwogCQkJCQl9Ci0JCQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0
YW5jZW9mIEludm9jYXRpb24pICYmICgoSW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVu
Y2UoKSkpKSB7Ci0JCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQot
CQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxw
ZXIoKTsKLQkJCQkJfQogCQkJCX0KIAkJCQlpZiAoYXJnSGFzRXJyb3IpIHsKIAkJCQkJaWYgKHJl
Y2VpdmVyVHlwZSA9PSBudWxsKSB7CkBAIC00OTgsNTYgKzQ4OSwyMiBAQAogCQl2aXNpdG9yLmVu
ZFZpc2l0KHRoaXMsIHNjb3BlKTsKIAl9CiAKLQkvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvbjog
LS0KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewotCQlpZiAocmVwb3J0RXJyb3Jz
KSB7Ci0JCQlpZiAodGhpcy5iaW5kaW5nID09IG51bGwpCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJjb25zdHJ1Y3RvciBpcyB1bmV4cGVjdGVkbHkg
dW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQllbHNlIGlmICghdGhpcy5iaW5k
aW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxp
ZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JCX0KKwkvLyAtLSBpbnRlcmZhY2Ug
SW52b2NhdGlvbgorCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXMuYmluZGluZzsKIAl9CisJCisJ
cHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgeworCQkv
LyBOb3RoaW5nIHRvIGRvLgorCX0KKwkKKwlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldElu
ZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXJl
dHVybiBudWxsOworCX0KKwkKIAlwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAkJ
cmV0dXJuIHRoaXMuYXJndW1lbnRzOwogCX0KLQlwdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5n
cyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7
Ci0JCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwot
CQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyAhPSBudWxsKSB7Ci0JCQlJbmZlcmVuY2VDb250
ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJl
bW92ZUtleSh0aGlzLmJpbmRpbmcpOwotCQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5k
aW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJ
dGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkJLy8g
c29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cg
dGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQkJaGFz
VXBkYXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5n
KTsKLQkJCX0KLQkJfQotCQl0aGlzLmJpbmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQkJcmV0dXJu
IGhhc1VwZGF0ZTsKLQl9Ci0JcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHgxOCkgewotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQotCQkJ
dGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwotCQl0aGlz
LmluZmVyZW5jZUNvbnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsKLQl9Ci0JcHVibGljIElu
ZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RC
aW5kaW5nIG1ldGhvZCkgewotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQot
CQkJcmV0dXJuIG51bGw7Ci0JCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVy
ZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwotCX0KLQlwdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJl
bmNlKCkgewotCQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7Ci0JfQot
CXB1YmxpYyBib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKSB7Ci0JCXJldHVybiB0aGlzLmlubmVy
SW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci0JfQotCXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9u
ZSgpIHsKLQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51bGw7Ci0JfQotCXB1YmxpYyBJ
bm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpIHsKLQkJcmV0dXJuIHRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci0JfQotCiAJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRp
b25TaXRlOiAtLQogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250
ZXh0KFNjb3BlIHNjb3BlKSB7CiAJCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3Bl
LCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Np
b24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCmluZGV4IDkxOGIxYjQuLmFiMjY1
YWEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRXhwcmVzc2lvbi5qYXZhCkBAIC0xMDYzLDE2ICsxMDYzLDYgQEAKIH0KIAogLyoqCi0gKiBP
bmNlIG91dGVyIGNvbnRleHRzIGhhdmUgZmluYWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhp
cyBleHByZXNzaW9uLAotICogcGVyZm9ybSBhbnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVu
IGRlbGF5ZWQgcHJldmlvdXNseS4KLSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJn
ZXQgdHlwZSAoYWthIGV4cGVjdGVkVHlwZSkgZm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJh
bSBzY29wZSBzY29wZSBmb3IgZXJyb3IgcmVwb3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGlu
ZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2Nv
cGUgc2NvcGUpIHsKLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5
IGNob29zZSB0byBkbyByZWFsIHN0dWZmIGhlcmUKLX0KLQotLyoqCiAgKiBSZXR1cm5zIHRydWUg
aWYgdGhlIHJlY2VpdmVyIGlzIGZvcmNlZCB0byBiZSBvZiByYXcgdHlwZSBlaXRoZXIgdG8gc2F0
aXNmeSB0aGUgY29udHJhY3QgaW1wb3NlZAogICogYnkgYSBzdXBlciB0eXBlIG9yIGJlY2F1c2Ug
aXQgKmlzKiByYXcgYW5kIHRoZSBjdXJyZW50IHR5cGUgaGFzIG5vIGNvbnRyb2wgb3ZlciBpdCAo
aS5lIHRoZSByYXduZXNzCiAgKiBvcmlnaW5hdGVzIGZyb20gc29tZSBvdGhlciBmaWxlLikKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1YWMxNGYyLi44YWY5Mjc4IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0xMDksMTYgKzEwOSwxNiBAQAogCiAJ
cHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAkJaWYgKHRhcmdldFR5cGUgaW5zdGFu
Y2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSB7Ci0JCQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8g
d2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQorCQlpZiAobWV0aG9kICE9IG51bGwpIHsg
Ly8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQogCQkJCWlmICgoKFR5cGVWYXJpYWJs
ZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QpCiAJCQkJCXJl
dHVybiBmYWxzZTsKIAkJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiAoKFR5cGVWYXJp
YWJsZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QuZGVjbGFy
aW5nQ2xhc3MpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0gZWxzZSB7IC8vIGZvciBpbnRlcm5h
bCBjYWxscworCQkJCXJldHVybiBmYWxzZTsKKwkJfSBlbHNlIHsgLy8gZm9yIGludGVybmFsIGNh
bGxzCiAJCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUgPSAoVHlwZVZhcmlhYmxl
QmluZGluZykgdGFyZ2V0VHlwZTsKIAkJCQlpZiAodHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1l
bnQgaW5zdGFuY2VvZiBNZXRob2RCaW5kaW5nKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9CisJ
CQkJcmV0dXJuIGZhbHNlOworCQl9CiAJCX0KIAkJcmV0dXJuIHRydWU7CiAJfQpAQCAtMjAzLDEx
ICsyMDMsNiBAQAogCQkJCWJyZWFrOwogCQl9CiAJCXJldHVybiBudWxsOwotCX0KLQotCXB1Ymxp
YyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0
dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1cm4gcmVzb2x2ZVR5cGVFeHBlY3Rpbmco
dGhpcy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7CiAJfQogCiAJY2xhc3MgVmlzaWJpbGl0
eUluc3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRvciB7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJl
bmNlSGVscGVyLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDgzODFiNWMuLjAw
MDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhCisrKyAvZGV2
L251bGwKQEAgLTEsNDIgKzAsMCBAQAotLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHly
aWdodCAoYykgMjAxNCBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKLSAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCi0gKgot
ICogQ29udHJpYnV0b3JzOgotICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwotcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwotCi1pbXBvcnQgamF2YS51dGlsLkhh
c2hNYXA7Ci1pbXBvcnQgamF2YS51dGlsLk1hcDsKLQotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwotCi1wdWJsaWMgY2xh
c3MgSW5uZXJJbmZlcmVuY2VIZWxwZXIgewotCi0JLyoqIEZvciBlYWNoIGNhbmRpZGF0ZSBtZXRo
b2Qgc3RvcmUgaGVyZSB0aGUgYXJyYXkgb2YgYXJndW1lbnQgdHlwZXMgaWYgaW5uZXIgaW5mZXJl
bmNlIGhhcyBpbXByb3ZlZCBhbnkgZHVyaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuICov
Ci0JcHJpdmF0ZSBNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPiBhcmdUeXBlc1BlckNh
bmRpZGF0ZSA9IG5ldyBIYXNoTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXT4oKTsKLQot
CXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5uZXJSZXN1bHQoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5
cGVCaW5kaW5nIHJlc29sdmVkVHlwZSwgaW50IGFyZ0NvdW50LCBpbnQgYXJnSWR4KSB7Ci0JCVR5
cGVCaW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChtZXRo
b2QpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXRoaXMuYXJnVHlwZXNQZXJDYW5kaWRh
dGUucHV0KG1ldGhvZCwgYXJnVHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJnQ291bnRdKTsKLQkJ
YXJnVHlwZXNbYXJnSWR4XSA9IHJlc29sdmVkVHlwZTsKLQl9Ci0JCi0JcHVibGljIFR5cGVCaW5k
aW5nW10gZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZShNZXRob2RCaW5kaW5nIGNhbmRpZGF0
ZSwgVHlwZUJpbmRpbmdbXSBwbGFpbkFyZ1R5cGVzKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJnVHlw
ZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChjYW5kaWRhdGUpOwotCQlpZiAoYXJn
VHlwZXMgPT0gbnVsbCkKLQkJCXJldHVybiBwbGFpbkFyZ1R5cGVzOwotCQkvLyBmaWxsIGluIGFu
eSBibGFua3Mgbm93OgotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsgaSsr
KSB7Ci0JCQlpZiAoYXJnVHlwZXNbaV0gPT0gbnVsbCkKLQkJCQlhcmdUeXBlc1tpXSA9IHBsYWlu
QXJnVHlwZXNbaV07Ci0JCX0KLQkJcmV0dXJuIGFyZ1R5cGVzOwotCX0KLX0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEK
aW5kZXggYWM1NDQ3Zi4uMDViY2IzMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9u
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKQEAgLTE5LDcxICsxOSwzNSBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJp
bmRpbmc7CiAKIC8qKgotICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRpb24gQVNUIG5vZGVzIHRo
YXQgY2FuIHRyaWdnZXIgCi0gKiA8dWw+Ci0gKiA8bGk+SW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5
IEluZmVyZW5jZXMgKDE4LjUuMSksIGFuZDwvbGk+IAotICogPGxpPkludm9jYXRpb24gVHlwZSBJ
bmZlcmVuY2UgKDE4LjUuMikuPC9saT4KLSAqIDwvdWw+Ci0gKi8KKyAqIEFic3RyYWN0aW9uIGZv
ciBpbnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0cmlnZ2VyIG92ZXJsb2FkIHJlc29sdXRp
b24gcG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlCisqLwogcHVibGljIGludGVyZmFj
ZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgewogCiAJRXhwcmVzc2lvbltdIGFy
Z3VtZW50cygpOwotCisJCiAJLyoqCiAJICogQW5zd2VyIHRoZSByZXNvbHZlZCBtZXRob2QgYmlu
ZGluZyBvZiB0aGlzIGludm9jYXRpb24uCiAJICogSWYgYSB0YXJnZXQgdHlwZSBpcyBnaXZlbiwg
dGhlIGludm9jYXRpb24gZ2V0cyBhIGNoYW5jZSB0byBkbyByZXBlYXRlZCBtZXRob2QgbG9va3Vw
LgogCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGludm9jYXRp
b24gb3IgbnVsbCBpZiBub3QgeWV0IGtub3duCi0JICogQHBhcmFtIHJlcG9ydEVycm9ycyBpZiB0
cnVlIHRoZW4gdGhpcyBpcyB0aGUgbGFzdCBjYWxsLCBpZiBubyB2YWxpZCBiaW5kaW5nIGNhbiBi
ZSBhbnN3ZXJlZCB3ZSBzaG91bGQgcmVwb3J0IGFuIGVycm9yCi0JICogQHBhcmFtIHNjb3BlIGlm
IHJlcG9ydEVycm9ycyBpcyB0cnVlIHRoZW4gdGhpcyBzY29wZSBjYW4gYmUgdXNlZCBmb3IgZXJy
b3IgcmVwb3J0aW5nCisJICogQHBhcmFtIHNjb3BlIHRoZSBzY29wZSB0byB1c2UgZm9yIGxvb2t1
cC4KIAkgKiAKIAkgKi8KLQlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKTsKLQorCU1ldGhvZEJpbmRp
bmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSk7CisJCiAJLyoq
CiAJICogUmVnaXN0ZXIgdGhlIGdpdmVuIGluZmVyZW5jZSBjb250ZXh0LCB3aGljaCBwcm9kdWNl
ZCB0aGUgZ2l2ZW4gbWV0aG9kIGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVzdWx0LgogCSAqIExhdGVy
IHdoZW4gdGhlIHNhbWUgbWV0aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBtb3N0IHNwZWNpZmljIG1l
dGhvZCwgdGhlIGluZmVyZW5jZSBjb250ZXh0Ci0JICogZm9yIHRoaXMgcGFpciAoSW52b2NhdGlv
biB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0BsaW5rICNnZXRFeHBy
ZXNzaW9uQ29udGV4dCgpfQorCSAqIGZvciB0aGlzIHBhaXIgKEludm9jYXRpb24geCBNZXRob2RC
aW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0SW5mZXJlbmNlQ29udGV4
dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl9CiAJICogdG8gY29udGludWUgdGhlIHR5cGUg
aW5mZXJlbmNlLgogCSAqLwogCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZD
dHgxOCk7CiAJCisKIAkvKioKLQkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVuY2UgY29udGV4dCBmb3Ig
dGhlIGdpdmVuIG1ldGhvZCB3aGljaCBtdXN0IGhhdmUgYmVlbiByZWdpc3RlcmVkCi0JICogdXNp
bmcge0BsaW5rICNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpfS4KKwkgKiBSZXRyaWV2ZSBhbiBpbmZl
cmVuY2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZC4KIAkgKiBAcGFyYW0gbWV0aG9kIGFu
IGludGVybWVkaWF0ZSByZXNvbHZlZCBjYW5kaWRhdGUgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAq
IHJldHVybiBhIHN1c3BlbmRlZCBpbmZlcmVuY2UgY29udGV4dCBvciBudWxsIGlmIG5vbmUgd2Fz
IHJlZ2lzdGVyZWQgZm9yIHRoaXMgbWV0aG9kLgorCSAqIHJldHVybiB0aGUgYXNzb2NpYXRlZCBp
bmZlcmVuY2UgY29udGV4dC4KIAkgKi8KIAlJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpOwogCi0JLyoqCi0JICog
QW5zd2VyIHRydWUgaWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBkZXRlcm1pbmVkIGl0cyBiaW5kaW5n
IHVzaW5nIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFuIHVzZXNJbmZlcmVuY2UoKTsKLQkKLQkv
KioKLQkgKiBXaGVyZSB0aGUgQVNUIG5vZGUgbWF5IGhvbGQgcmVmZXJlbmNlcyB0byB0aGUgcmVz
dWx0cyBvZiBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlLAotCSAqIHRoaXMgbWV0
aG9kIGFsbG93cyB0byB1cGRhdGUgdGhvc2UgcmVmZXJlbmNlcyB0byB0aGUgcmVzdWx0IG9mIElu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuCi0JICogTm90ZSB0aGF0IHBvdGVudGlhbGx5IG1vcmUg
dGhhbiBqdXN0IHRoZSBtZXRob2QgYmluZGluZyBpcyB1cGRhdGVkLgotCSAqIEBwYXJhbSB1cGRh
dGVkQmluZGluZyB0aGUgZmluYWwgbWV0aG9kIGJpbmRpbmcgYWZ0ZXIgZnVsbCBpbmZlcmVuY2UK
LQkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgdXNlZCBkdXJpbmcgSW52b2Nh
dGlvbiBUeXBlIEluZmVyZW5jZQotCSAqIEByZXR1cm4gdHJ1ZSBpZiBhbiB1cGRhdGUgaGFzIGhh
cHBlbmVkCi0JICovCi0JYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0
ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKTsKLQkKLQkvKioKLQkgKiBBbnN3ZXIg
d2hldGhlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGhhcyBpbm5lciBleHByZXNzaW9ucyB0aGF0
IHN0aWxsIG5lZWQgdXBkYXRpbmcgYWZ0ZXIgaW5mZXJlbmNlLgotCSAqLwotCWJvb2xlYW4gaW5u
ZXJzTmVlZFVwZGF0ZSgpOwotCi0JLyoqCi0JICogTWFyayB0aGF0IHVwZGF0aW5nICh0aGUgbmVl
ZCBmb3Igd2hpY2ggaXMgc2lnbmFsZWQgdmlhIHtAbGluayAjaW5uZXJzTmVlZFVwZGF0ZSgpfSkg
aGFzIGJlZW4gZG9uZS4KLQkgKi8KLQl2b2lkIGlubmVyVXBkYXRlRG9uZSgpOwotCi0JLyoqCi0J
ICogSWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBhbnkgcG9seSBleHByZXNzaW9ucyBhcyBhcmd1bWVu
dHMsIHRoaXMgbWV0aG9kIGFuc3dlcnMgYW4gaW5mZXJlbmNlIGhlbHBlciAKLQkgKiB0aGF0IG1l
ZGlhdGVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLCBldmVuIGlmIG5vIGFjdHVhbCBpbmZl
cmVuY2UgaGFwcGVucyBmb3IgdGhpcyBpbnZvY2F0aW9uLgotCSAqLwotCUlubmVySW5mZXJlbmNl
SGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXgg
NTIwYjVjMC4uZTU1YmNiOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQpAQCAtODAsNiArODAsOCBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWlzc2luZ1R5cGVC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmc7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5UGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbU1l
dGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Qcm9ibGVtUmVhc29uczsKQEAgLTExNSwxMyArMTE3LDEyIEBACiAKIAkgLy8gaG9sZCBv
biB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNl
IHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToK
IAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8g
aW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVy
SW5mZXJlbmNlSGVscGVyOwogCXByaXZhdGUgYm9vbGVhbiByZWNlaXZlcklzVHlwZTsKIAlwcm90
ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gYXJn
dW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKIAkKIAotcHVibGljIEZsb3dJbmZv
IGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29u
dGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKKwlwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUo
QmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5m
byBmbG93SW5mbykgewogCWJvb2xlYW4gbm9uU3RhdGljID0gIXRoaXMuYmluZGluZy5pc1N0YXRp
YygpOwogCWJvb2xlYW4gd2FzSW5zaWRlQXNzZXJ0ID0gKChmbG93Q29udGV4dC50YWdCaXRzICYg
Rmxvd0NvbnRleHQuSElERV9OVUxMX0NPTVBBUklTT05fV0FSTklORykgIT0gMCk7CiAJZmxvd0lu
Zm8gPSB0aGlzLnJlY2VpdmVyLmFuYWx5c2VDb2RlKGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQs
IGZsb3dJbmZvLCBub25TdGF0aWMpLnVuY29uZGl0aW9uYWxJbml0cygpOwpAQCAtNTkyLDExNCAr
NTkzLDExMSBAQAogfQogCiBwdWJsaWMgVHlwZUJpbmRpbmcgcmVzb2x2ZVR5cGUoQmxvY2tTY29w
ZSBzY29wZSkgewotCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVybiB0eXBlCisJLy8gQW5z
d2VyIHRoZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUsIGFuc3dlcnMgUG9seVR5cGVCaW5kaW5nIGlm
IHRoZXJlIGlzIGF0IGxlYXN0IG9uZSBnZW5lcmljIG92ZXJsb2FkZWQgY2FuZGlkYXRlIHRoYXQg
ZW5jb2RlZCB0eXBlIHZhcmlhYmxlcyBpbiByZXR1cm4gdHlwZSBhbmQgdGhlcmUgaXMgbm8gdGFy
Z2V0IHR5cGUgIAogCS8vIEJhc2UgdHlwZSBwcm9tb3Rpb24KKwlpZiAodGhpcy5jb25zdGFudCAh
PSBDb25zdGFudC5Ob3RBQ29uc3RhbnQpIHsKKwkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5v
dEFDb25zdGFudDsKKwkJbG9uZyBzb3VyY2VMZXZlbCA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygp
LnNvdXJjZUxldmVsOworCQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOworCQlpZiAodGhp
cy5yZWNlaXZlciBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQl0aGlzLnJlY2VpdmVy
LmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hl
Y2sgbGF0ZXIgb24KKwkJCXJlY2VpdmVyQ2FzdCA9IHRydWU7CisJCX0KKwkJdGhpcy5hY3R1YWxS
ZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJdGhpcy5y
ZWNlaXZlcklzVHlwZSA9IHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBOYW1lUmVmZXJlbmNlICYm
ICgoKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2ZXIpLmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9
IDA7CisJCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgIT0gbnVs
bCkgeworCQkJLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcgY2xhc3Mgd2l0aCByZWNlaXZl
ciB0eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5vdGlmaWVkCisJCQlpZiAoVHlw
ZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhw
cmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgeworCQkJCXNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhp
cy5yZWNlaXZlcik7CisJCQl9CisJCX0KKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9y
IGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBu
dWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCWJv
b2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsx
XzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3Vt
ZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBs
ZW5ndGg7IGkrKykgeworCQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlw
ZUFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0
eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkg
PT0gbnVsbCkgeworCQkJCQlhcmdIYXNFcnJvciA9IHRydWU7CisJCQkJfQorCQkJCWlmIChhcmdI
YXNFcnJvciAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNl
KTsKKwkJCQl9CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hcmd1
bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJ
CQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7
IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJ
CQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQorCQl9CisJCS8vIHdpbGwgY2hlY2sg
Zm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9
IG51bGwpIHsKKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBh
bGwgYXJndW1lbnRzCisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJ
dGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKKwkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhp
cy5hcmd1bWVudHNbaV07CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAh
PSBudWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVy
cm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8v
JE5PTi1OTFMtMSQKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikg
eworCQkJCQlhcmd1bWVudC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENo
ZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0g
dHJ1ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElP
Tl9DT05URVhUKTsKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJl
c29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKKwkJ
CQl9CisJCQl9CisJCQlpZiAoYXJnSGFzRXJyb3IpIHsKKwkJCQlpZiAodGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCS8vICByZWNvcmQg
YSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1l
dGhvZCBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KQorCQkJCQkJ
cHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJpbmRp
bmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJy
b3JzIHdpdGggbnVsbCB0eXBlCiAKLQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0
YW50OwotCWxvbmcgc291cmNlTGV2ZWwgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VM
ZXZlbDsKLQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLnJlY2VpdmVy
IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IEFT
VE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9u
Ci0JCXJlY2VpdmVyQ2FzdCA9IHRydWU7Ci0JfQotCWlmICh0aGlzLnJlY2VpdmVyLnJlc29sdmVk
VHlwZSAhPSBudWxsKQotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNl
RXJyb3IoIlJlY2VpdmVyIHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsg
Ly8kTk9OLU5MUy0xJAotCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZlci5y
ZXNvbHZlVHlwZShzY29wZSk7Ci0JdGhpcy5yZWNlaXZlcklzVHlwZSA9IHRoaXMucmVjZWl2ZXIg
aW5zdGFuY2VvZiBOYW1lUmVmZXJlbmNlICYmICgoKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2
ZXIpLmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7Ci0JaWYgKHJlY2VpdmVyQ2FzdCAmJiB0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7Ci0JCSAvLyBkdWUgdG8gY2hhbmdlIG9mIGRl
Y2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2FzdCBzaG91
bGQgYmUgbm90aWZpZWQKLQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RFeHBy
ZXNzaW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFjdHVh
bFJlY2VpdmVyVHlwZSkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNzYXJ5
Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7Ci0JCX0KLQl9Ci0JLy8gcmVzb2x2
ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAodGhp
cy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3Vt
ZW50cy5sZW5ndGg7Ci0JCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzb3VyY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQl0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAo
aW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVy
ZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFy
Z3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hl
Y2sgYm91bmRzKi8pKSA9PSBudWxsKSB7Ci0JCQkJYXJnSGFzRXJyb3IgPSB0cnVlOwotCQkJfQot
CQkJaWYgKGFyZ0hhc0Vycm9yICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkg
ewotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQodHlw
ZVJlZmVyZW5jZSk7Ci0JCQl9Ci0JCX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhp
cy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1l
bnRzCi0JCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8
IG1heDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsK
LQkJCQl9Ci0JCQl9Ci0JCQlyZXR1cm4gbnVsbDsKLQkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZv
ciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCi0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51
bGwpIHsKLQkJYm9vbGVhbiBhcmdIYXNFcnJvciA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBh
cmd1bWVudHMKLQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5h
cmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAw
OyBpIDwgbGVuZ3RoOyBpKyspewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1l
bnRzW2ldOwotCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAK
LQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3Vt
ZW50IHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0x
JAotCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1
bWVudC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxs
IGNoZWNrIGxhdGVyIG9uCi0JCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOwotCQkJfQot
CQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJ
CWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKXsKLQkJCQlhcmdIYXNFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmIChhcmd1bWVudC5p
c1BvbHlFeHByZXNzaW9uKCkKLQkJCQkJfHwgKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlv
biAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYg
KHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0J
CX0KLQkJaWYgKGFyZ0hhc0Vycm9yKSB7Ci0JCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUg
aW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJLy8gIHJlY29yZCBhIGJlc3QgZ3Vl
c3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNo
Ci0JCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07
Ci0JCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KQotCQkJCQlwc2V1ZG9BcmdzW2ld
ID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhp
cy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxs
IHR5cGUKLQkJCQl0aGlzLmJpbmRpbmcgPQotCQkJCQl0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRU
aGlzKCkKLQkJCQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgcHNl
dWRvQXJncywgdGhpcykKLQkJCQkJCTogc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGlu
ZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRo
aXMsIGZhbHNlKTsKLQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGlu
Zy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0g
KChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKLQkJCQkJ
Ly8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5l
ZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQkJaWYgKGNsb3Nlc3RNYXRj
aCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlh
YmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCi0J
CQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250
ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCi0JCQkJCQkJY2xv
c2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOwot
CQkJCQkJfQotCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOwotCQkJCQkJTWV0aG9k
QmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOwot
CQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUo
KSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7Ci0J
CQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGlu
c2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCi0JCQkJCQkJY2xvc2VzdE1hdGNo
T3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVz
ZWQ7CisJCQkJCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/
CisJCQkJCQkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHBzZXVkb0Fy
Z3MsIHRoaXMpIDoKKwkJCQkJCQkJCXNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcp
IHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlz
LCBmYWxzZSk7CisKKwkJCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2gg
PSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOworCQkJ
CQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxs
IG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJCWlmIChjbG9zZXN0
TWF0Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBl
VmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRo
b2QKKwkJCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0
cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCisJCQkJ
CQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZylu
dWxsKTsKKwkJCQkJCQl9CisJCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOworCQkJ
CQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3Jp
Z2luYWwoKTsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQ
cml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmln
aW5hbCkpIHsKKwkJCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZy
b20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCisJCQkJCQkJ
CWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJz
LkFjY0xvY2FsbHlVc2VkOworCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0KKwkJCQly
ZXR1cm4gbnVsbDsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPT0g
bnVsbCkgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwkJLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNl
aXZlIGFueSBtZXNzYWdlCisJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBl
KCkpIHsKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywg
dGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7CiAJCQlyZXR1cm4g
bnVsbDsKIAkJfQogCX0KLQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPT0gbnVsbCkgewot
CQlyZXR1cm4gbnVsbDsKKwkKKwlUeXBlQmluZGluZyBtZXRob2RUeXBlID0gZmluZE1ldGhvZEJp
bmRpbmcoc2NvcGUpOworCWlmIChtZXRob2RUeXBlICE9IG51bGwgJiYgbWV0aG9kVHlwZS5pc1Bv
bHlUeXBlKCkpIHsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLmJpbmRpbmcucmV0dXJuVHlw
ZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7CisJCXJldHVybiBtZXRob2RUeXBlOwog
CX0KLQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKLQlpZiAodGhpcy5h
Y3R1YWxSZWNlaXZlclR5cGUuaXNCYXNlVHlwZSgpKSB7Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMu
YXJndW1lbnRUeXBlcyk7Ci0JCXJldHVybiBudWxsOwotCX0KLQotCWZpbmRNZXRob2RCaW5kaW5n
KHNjb3BlKTsKIAogCWlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYg
KHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKSB7CkBAIC03MTgsMTAgKzcxNiwx
NyBAQAogCQkJCQkJCQkgZGVjbGFyaW5nQ2xhc3Muc3VwZXJjbGFzcygpIGluc3RhbmNlb2YgTWlz
c2luZ1R5cGVCaW5kaW5nOwogCQlpZiAoIWF2b2lkU2Vjb25kYXJ5KQogCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworCQkKIAkJTWV0
aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmlu
ZGluZykuY2xvc2VzdE1hdGNoOwogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVtSWQoKSkg
ewogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAvLyBubyBy
ZXNpbGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFw
cGxpYWJsZU1ldGhvZEluYXBwbGljYWJsZToKKwkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2Nh
dGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgorCQkJCS8vIEdyYWJiaW5nIHRoZSBjbG9zZXN0IG1h
dGNoIGltcHJvdmVzIGVycm9yIHJlcG9ydGluZyBpbiBuZXN0ZWQgaW52b2NhdGlvbiBjb250ZXh0
cworCQkJCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkK
KwkJCQkJYnJlYWs7CisJCQkJLy8kRkFMTC1USFJPVUdIJAogCQkJY2FzZSBQcm9ibGVtUmVhc29u
cy5Ob3RWaXNpYmxlIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljUmVmZXJlbmNl
SW5Db25zdHJ1Y3Rvckludm9jYXRpb24gOgogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob25TdGF0
aWNSZWZlcmVuY2VJblN0YXRpY0NvbnRleHQgOgpAQCAtODU5LDE2ICs4NjQsMjAgQEAKIAkJCQk/
IHRoaXMucmVzb2x2ZWRUeXBlCiAJCQkJOiBudWxsOwogfQotLyoqCi0gKiBGaW5kIHRoZSBtZXRo
b2QgYmluZGluZzsgCi0gKiBpZiB0aGlzLmlubmVyc05lZWRVcGRhdGUgYWxsb3cgZm9yIHR3byBh
dHRlbXB0cyB3aGVyZSB0aGUgZmlyc3Qgcm91bmQgbWF5IHN0b3AKLSAqIGFmdGVyIGFwcGxpY2Fi
aWxpdHkgY2hlY2tpbmcgKDE4LjUuMSkgdG8gaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIGludG8g
dGhlIGZpbmFsCi0gKiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpLgotICovCi1w
cm90ZWN0ZWQgdm9pZCBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Njb3BlIHNjb3BlKSB7Ci0JdGhp
cy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpCi0JCQk/IHNjb3BlLmdl
dEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykK
KworcHJvdGVjdGVkIFR5cGVCaW5kaW5nIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUgc2Nv
cGUpIHsKKwkKKwkKKwl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlz
KCkgPyAKKwkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJn
dW1lbnRUeXBlcywgdGhpcykgCiAJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKworCWlm
ICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkgLy8gY2FuJ3QgaGFwcGVuID8gSSB0aGluayB3ZSBhbHdh
eXMgZ2V0IGEgcHJvYmxlbSBiaW5kaW5nLCBhbnl3YXlzLgorCQlyZXR1cm4gbnVsbDsKKwkKKwlp
ZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykKKwkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CisJCiAJcmVzb2x2
ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVu
dFR5cGVzLCBzY29wZSk7CiAJCiAJLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25zIGlu
IHRoZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1dGlv
biBvZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgpAQCAtODgzLDExICs4OTIsOCBA
QAogCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxl
ck9wdGlvbnMoKTsKIAlpZiAoY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmls
ZUNvbnN0YW50cy5KREsxXzggJiYgdGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIHRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7
CiAJCWlmICghY29tcGlsZXJPcHRpb25zLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxp
dHlDaGVjaykKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsK
IAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBnbWIgPSAoUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmc7Ci0JCUluZmVyZW5jZUNvbnRleHQx
OCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KHBnbWIpOwotCQlpZiAoY3R4ID09IG51bGwgfHwg
Y3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkK
LQkJCXJldHVybjsKIAkJaW50IGxlbmd0aCA9IHBnbWIudHlwZUFyZ3VtZW50cyA9PSBudWxsID8g
MCA6IHBnbWIudHlwZUFyZ3VtZW50cy5sZW5ndGg7CiAJCWJvb2xlYW4gc2F3UmF3VHlwZSA9IGZh
bHNlOwogCQlmb3IgKGludCBpID0gMDsgIGkgPCBsZW5ndGg7IGkrKykgewpAQCAtODk2LDQwICs5
MDIsMjYgQEAKIAkJCSAgIGRvZXMgbm90IGFwcGVhciBmdWxseSBob29rZWQgdXAgaW50byBpc0Nv
bXBhdGlibGVXaXRoIGFuZCBpc0VxdWl2YWxlbnQgdG8gZXZlcnl3aGVyZS4gQXQgdGhlIG1vbWVu
dCwgYmFpbCBvdXQgaWYgd2Ugc2VlIGNhcHR1cmUuCiAJCQkqLyAgIAogCQkJaWYgKHBnbWIudHlw
ZUFyZ3VtZW50c1tpXS5pc0NhcHR1cmUoKSkKLQkJCQlyZXR1cm47CisJCQkJcmV0dXJuIHRoaXMu
YmluZGluZy5yZXR1cm5UeXBlOwogCQkJaWYgKHBnbWIudHlwZUFyZ3VtZW50c1tpXS5pc1Jhd1R5
cGUoKSkKIAkJCQlzYXdSYXdUeXBlID0gdHJ1ZTsKIAkJfQogCQlpZiAoIXNhd1Jhd1R5cGUpCi0J
CQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCWxlbmd0aCA9
IHRoaXMuYXJndW1lbnRzID09IG51bGwgPyAwIDogdGhpcy5hcmd1bWVudHMubGVuZ3RoOwogCQlp
ZiAobGVuZ3RoID09IDApCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVy
blR5cGU7CiAJCVR5cGVCaW5kaW5nIFtdIGZpbmFsQXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOwogCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQlU
eXBlQmluZGluZyBmaW5hbEFyZ3VtZW50VHlwZSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVk
VHlwZTsKIAkJCWlmIChmaW5hbEFyZ3VtZW50VHlwZSA9PSBudWxsIHx8ICFmaW5hbEFyZ3VtZW50
VHlwZS5pc1ZhbGlkQmluZGluZygpKSAgLy8gYWxyZWFkeSBzaWRlZCB3aXRoIHRoZSBkZXZpbC4K
LQkJCQlyZXR1cm47CisJCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQkJZmlu
YWxBcmd1bWVudFR5cGVzW2ldID0gZmluYWxBcmd1bWVudFR5cGU7IAogCQl9Ci0JCWlmIChzY29w
ZS5wYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5iaW5kaW5nLCBmaW5hbEFyZ3VtZW50
VHlwZXMsIGZhbHNlLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCisJCWlmIChzY29w
ZS5wYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5iaW5kaW5nLCBmaW5hbEFyZ3VtZW50
VHlwZXMsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJMRSkKIAkJCXRoaXMuYmluZGluZyA9
IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRpbmcub3JpZ2luYWwoKSwgdGhpcy5i
aW5kaW5nLnNlbGVjdG9yLCBmaW5hbEFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZv
dW5kKTsKIAl9Ci19Ci0KLUBPdmVycmlkZQotcHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5z
dEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewot
CWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQo
KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9
IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZF
UlJFRCkgewotCQkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOwotCQkJTWV0aG9kQmlu
ZGluZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9jYXRpb25UeXBlKHRoaXMsIChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7Ci0JCQlpZiAodXBk
YXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5cGUpKSB7Ci0JCQkJQVNUTm9kZS5y
ZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdXBkYXRlZEJpbmRpbmcsIHNjb3Bl
KTsKLQkJCX0KLQkJfQotCX0KLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CisJcmV0dXJuIHRo
aXMuYmluZGluZy5yZXR1cm5UeXBlOwogfQogCiBwdWJsaWMgdm9pZCBzZXRBY3R1YWxSZWNlaXZl
clR5cGUoUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUpIHsKQEAgLTk2NSw2ICs5NTcsMzkg
QEAKIAkgKi8KIAlyZXR1cm4gaXNQb2x5RXhwcmVzc2lvbih0aGlzLmJpbmRpbmcpOwogfQorCitw
dWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUsIFNjb3BlIHNjb3BlKSB7CisJVHlwZUJpbmRpbmcgb2xkRXhwZWN0ZWRUeXBlID0gdGhpcy5l
eHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOwor
CQlNZXRob2RCaW5kaW5nIG1ldGhvZCA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/
IAorCQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1
bWVudFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKTsKKwkJaWYg
KG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0
dXJuVHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQor
CQkJcmV0dXJuIGZhbHNlOworCQlyZXR1cm4gc3VwZXIuaXNCb3hpbmdDb21wYXRpYmxlKG1ldGhv
ZC5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKSwgdGFyZ2V0VHlwZSwg
dGhpcywgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb2xkRXhw
ZWN0ZWRUeXBlOworCX0KK30KKworcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBl
QmluZGluZyB0YXJnZXRUeXBlLCBmaW5hbCBTY29wZSBzY29wZSkgeworCVR5cGVCaW5kaW5nIG9s
ZEV4cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0
ZWRUeXBlID0gdGFyZ2V0VHlwZTsKKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSB0aGlzLnJlY2Vp
dmVyLmlzSW1wbGljaXRUaGlzKCkgPyAKKwkJCQkgIHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRo
aXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykgCisJCQkJOiBzY29wZS5nZXRN
ZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1l
bnRUeXBlcywgdGhpcyk7CisJCisJCWlmIChtZXRob2QgPT0gbnVsbCB8fCAhbWV0aG9kLmlzVmFs
aWRCaW5kaW5nKCkgfHwgbWV0aG9kLnJldHVyblR5cGUgPT0gbnVsbCB8fCAhbWV0aG9kLnJldHVy
blR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJCXJldHVybiBmYWxzZTsKKwkJCQorCQlyZXR1cm4g
bWV0aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLmlzQ29tcGF0
aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0
ZWRUeXBlID0gb2xkRXhwZWN0ZWRUeXBlOworCX0KK30KKwogLyoqIFZhcmlhbnQgb2YgaXNQb2x5
RXhwcmVzc2lvbigpIHRvIGJlIHVzZWQgZHVyaW5nIHR5cGUgaW5mZXJlbmNlLCB3aGVuIGEgcmVz
b2x1dGlvbiBjYW5kaWRhdGUgZXhpc3RzLiAqLwogcHVibGljIGJvb2xlYW4gaXNQb2x5RXhwcmVz
c2lvbihNZXRob2RCaW5kaW5nIHJlc29sdXRpb25DYW5kaWRhdGUpIHsKIAlpZiAodGhpcy5leHBy
ZXNzaW9uQ29udGV4dCAhPSBBU1NJR05NRU5UX0NPTlRFWFQgJiYgdGhpcy5leHByZXNzaW9uQ29u
dGV4dCAhPSBJTlZPQ0FUSU9OX0NPTlRFWFQpCkBAIC0xMDI4LDIxICsxMDUzLDIwIEBACiAJcmV0
dXJuIHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKTsKIH0KIC8vIC0tIGludGVyZmFjZSBJ
bnZvY2F0aW9uOiAtLQotcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0
YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQlpZiAocmVw
b3J0RXJyb3JzKSB7Ci0JCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkKLQkJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigibWV0aG9kIGlzIHVuZXhwZWN0ZWRs
eSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJZWxzZSBpZiAoIXRoaXMuYmlu
ZGluZy5pc1ZhbGlkQmluZGluZygpKQotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxp
ZE1ldGhvZCh0aGlzLCB0aGlzLmJpbmRpbmcpOworcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCVR5cGVCaW5kaW5nIG9s
ZEV4cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0
ZWRUeXBlID0gdGFyZ2V0VHlwZTsKKwkJTWV0aG9kQmluZGluZyBtYiA9IAorCQkJCXRoaXMucmVj
ZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/IAorCQkJCSAgc2NvcGUuZ2V0SW1wbGljaXRNZXRob2Qo
dGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKSAKKwkJCQk6IHNjb3BlLmdl
dE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1
bWVudFR5cGVzLCB0aGlzKTsKKwkJcmV0dXJuIG1iOwkJICAKKwl9IGZpbmFsbHkgeworCQl0aGlz
LmV4cGVjdGVkVHlwZSA9IG9sZEV4cGVjdGVkVHlwZTsKIAl9Ci0JcmV0dXJuIHRoaXMuYmluZGlu
ZzsKIH0KLXB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewotCXJldHVybiB0aGlzLmFy
Z3VtZW50czsKLX0KLXB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4
dCgpIHsKLQlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKLX0KKwogcHVibGljIHZvaWQg
cmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVy
ZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2lt
cGxlTG9va3VwVGFibGUoKTsKQEAgLTEwNTMsMzUgKzEwNzcsMTQgQEAKIAkJcmV0dXJuIG51bGw7
CiAJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0
KG1ldGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAo
dGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOworcHVibGljIEV4cHJlc3Npb25bXSBhcmd1
bWVudHMoKSB7CisJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwogfQotcHVibGljIGJvb2xlYW4gdXBk
YXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRC
aW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwpIHsKLQkJSW5mZXJl
bmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250
ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0
ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
Ci0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsKLQkJ
CS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsg
bm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJ
aGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5k
aW5nKTsKLQkJfQotCX0KLQl0aGlzLmJpbmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQl0aGlzLnJl
c29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5nLnJldHVyblR5cGU7Ci0JcmV0dXJuIGhhc1VwZGF0
ZTsKLX0KLXB1YmxpYyBib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMu
aW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRl
RG9uZSgpIHsKLQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJ
bm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhp
cy5pbm5lckluZmVyZW5jZUhlbHBlcjsKK3B1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHBy
ZXNzaW9uQ29udGV4dCgpIHsKKwlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKIH0KIC8v
IC0tIEludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0
MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJcmV0dXJuIG5ldyBJbmZl
cmVuY2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKIH0KLX0KK30KXCBO
byBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmll
ZEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEKaW5kZXggMWQ3Mzg2YS4uZjk2ZTdhMSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNDEwLDEwICs0MTAsNiBA
QAogCQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUo
c2NvcGUpKSA9PSBudWxsKXsKIAkJCQkJaGFzRXJyb3IgPSB0cnVlOwogCQkJCX0KLQkJCQlpZiAo
c291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQ
b2x5RXhwcmVzc2lvbigpIHx8IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgKChJ
bnZvY2F0aW9uKWFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQlpZiAodGhpcy5p
bm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhl
bHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KIAkJCX0KIAkJfQogCkBA
IC02MDQsNCArNjAwLDQgQEAKIAkJfQogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsK
IAl9Ci19Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJl
c3Npb24uamF2YQppbmRleCBiODQ4NDFmLi5kZjM0NTc3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJl
c3Npb24uamF2YQpAQCAtNzA2LDYgKzcwNiw3IEBACiAJCU1ldGhvZEJpbmRpbmcgcHJldmlvdXNC
aW5kaW5nID0gdGhpcy5iaW5kaW5nOwogCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzRGVzY3JpcHRv
ciA9IHRoaXMuZGVzY3JpcHRvcjsKIAkJVHlwZUJpbmRpbmcgcHJldmlvdXNSZXNvbHZlZFR5cGUg
PSB0aGlzLnJlc29sdmVkVHlwZTsKKwkJVHlwZUJpbmRpbmcgcHJldmlvdXNFeHBlY3RlZFR5cGUg
PSB0aGlzLmV4cGVjdGVkVHlwZTsKIAkJdHJ5IHsKIAkJCXNldEV4cHJlc3Npb25Db250ZXh0KElO
Vk9DQVRJT05fQ09OVEVYVCk7CiAJCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CkBAIC03
MjAsMTkgKzcyMSw3IEBACiAJCQl0aGlzLmRlc2NyaXB0b3IgPSBwcmV2aW91c0Rlc2NyaXB0b3I7
CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHByZXZpb3VzUmVzb2x2ZWRUeXBlOwogCQkJc2V0RXhw
cmVzc2lvbkNvbnRleHQocHJldmlvdXNDb250ZXh0KTsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0g
bnVsbDsgLy8gZG9uJ3QgY2FsbCBzZXRFeHBlY3RlZFR5cGUobnVsbCksIHdvdWxkIE5QRQotCQkJ
dGhpcy50cmlhbFJlc29sdXRpb24gPSBmYWxzZTsKLQkJfQotCX0KLQotCXB1YmxpYyBNZXRob2RC
aW5kaW5nIHByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQoU2NvcGUgc2NvcGUpIHsKLQkJdHJ5IHsK
LQkJCXNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQl0aGlzLmJp
bmRpbmcgPSBudWxsOwotCQkJdGhpcy50cmlhbFJlc29sdXRpb24gPSB0cnVlOwotCQkJcmVzb2x2
ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCQlyZXR1cm4gdGhpcy5iaW5kaW5nOwotCQl9
IGZpbmFsbHkgeworCQkJdGhpcy5leHBlY3RlZFR5cGUgPSBwcmV2aW91c0V4cGVjdGVkVHlwZTsK
IAkJCXRoaXMudHJpYWxSZXNvbHV0aW9uID0gZmFsc2U7CiAJCX0KIAl9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEK
aW5kZXggYTEzMmM5Mi4uNDBlNTNkZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNl
dC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQpAQCAtNDU2LDggKzQ1Niw2
IEBACiAJCQlpZiAoIWluY29ycG9yYXRlKGNvbnRleHQsIGZyZXNoQm91bmRzLCBmcmVzaEJvdW5k
cykpCiAJCQkJcmV0dXJuIGZhbHNlOwogCi0JCQl0aGlzLmNhcHR1cmVzLmNsZWFyKCk7Ci0JCQkK
IAkJCS8vIE1lcmdlIHRoZSBib3VuZHMgaW50byBvbmUgaW5jb3Jwb3JhdGVkIGdlbmVyYXRpb24u
CiAJCQlmaW5hbCBpbnQgaW5jb3Jwb3JhdGVkTGVuZ3RoID0gdGhpcy5pbmNvcnBvcmF0ZWRCb3Vu
ZHMubGVuZ3RoOwogCQkJZmluYWwgaW50IHVuaW5jb3Jwb3JhdGVkTGVuZ3RoID0gZnJlc2hCb3Vu
ZHMubGVuZ3RoOwpAQCAtNTgzLDcgKzU4MSw5IEBACiAJCXdoaWxlIChjYXB0SXRlci5oYXNOZXh0
KCkpIHsKIAkJCUVudHJ5PFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZywgUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nPiBjYXB0ID0gY2FwdEl0ZXIubmV4dCgpOwogCQkJUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nIGdBbHBoYSA9IGNhcHQuZ2V0S2V5KCk7Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcgZ0EgPSBjYXB0LmdldFZhbHVlKCk7CisJCQkvLyBXZSBjb21lIGluIHdpdGggY2FwdHVyZShn
QSksIHdlIG5lZWQgdG8gd29yayB3aXRoIGdBIGJlbG93LiBJdCB3YXMgbmVjZXNzYXJ5IHRvIGVz
dGFibGlzaCBjYXB0dXJlIGF0IHRoZSBjYWxsIHNpdGUuCisJCQlQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcgY2dBID0gY2FwdC5nZXRWYWx1ZSgpOworCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
IGdBID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgY2dBLnVuY2FwdHVyZShjb250ZXh0LnNj
b3BlKTsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZyA9IChSZWZlcmVuY2VCaW5kaW5nKSBnQS5vcmln
aW5hbCgpOwogCQkJZmluYWwgVHlwZVZhcmlhYmxlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBnLnR5
cGVWYXJpYWJsZXMoKTsKIAkJCS8vIGNvbnN0cnVjdCB0aGV0YSA9IFtQMTo9YWxwaGExLC4uLl0K
QEAgLTYwMiw2ICs2MDIsNyBAQAogCQkJCWFkZEJvdW5kcyhwaS5nZXRUeXBlQm91bmRzKGFscGhh
LCB0aGV0YSksIGNvbnRleHQuZW52aXJvbm1lbnQpOwogCiAJCQkJVHlwZUJpbmRpbmcgYWkgPSBn
QS5hcmd1bWVudHNbaV07CisJCQkJVHlwZUJpbmRpbmcgY2FpID0gY2dBLmFyZ3VtZW50c1tpXTsK
IAkJCQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2FyZEJpbmRpbmcpIHsKIAkJCQkJV2lsZGNhcmRC
aW5kaW5nIHdpbGRjYXJkQmluZGluZyA9IChXaWxkY2FyZEJpbmRpbmcpYWk7CiAJCQkJCVR5cGVC
aW5kaW5nIHQgPSB3aWxkY2FyZEJpbmRpbmcuYm91bmQ7CkBAIC02MTMsNyArNjE0LDE0IEBACiAJ
CQkJCQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CiAJCQkJCQkJd2hpbGUgKGl0
Lmhhc05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91bmQgYm91bmQgPSBpdC5uZXh0KCk7Ci0JCQkJ
CQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpKQorCQkJ
CQkJCQkvKiBXaXRoIHRoZSBleHBlY3RlZCB0eXBlJ3MgZGVjbGFyZWQgdHlwZSBiZWluZyBDb2xs
ZWN0b3I8PyBzdXBlciBULCBBLCBSPiBhbmQgZ0FscGhhIGJlaW5nIENvbGxlY3RvcjxUIzAsPyMx
LExpc3Q8VCMwPiMyPiBhbmQgY2dBIGJlaW5nCisJCQkJCQkJCSAgIENvbGxlY3RvcjxUIzAsY2Fw
dHVyZSMxLW9mID8sTGlzdDxUIzA+Piwgd2l0aG91dCB0aGUgY29uc3RyYWludCByZWR1Y3Rpb24g
YmVsb3cgLSB3ZSB3aWxsIG5ldmVyIGRpc2NvdmVyIEEgdG8gYmUgY2FwdHVyZSMxLW9mID8gYW5k
CisJCQkJCQkJCSAgIGNsYWltIEEgaXMgamxPLiBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMjQgLSAjMjcKKwkJCQkJCQkJKi8KKwkJCQkJ
CQkJaWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNvbnRleHQsIENvbnN0cmFpbnRUeXBlRm9ybXVs
YS5jcmVhdGUoYm91bmQucmlnaHQsIGNhaSwgUmVkdWN0aW9uUmVzdWx0LlNBTUUpKSkKKwkJCQkJ
CQkJCXJldHVybiBmYWxzZTsKKwkJCQkJCQkJLy8gT3VyID0gcmVkdWN0aW9uIHRyYW5zaXRpdmVs
eSBhZGRzIGEgbmV3IGJvdW5kIHRoYXQgbmVjZXNzaXRhdGVzIHRoZSBjaGVjayBiZWxvdyBmb3Ig
Y2FwdHVyZS4gCisJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNl
VmFyaWFibGUpICYmICFib3VuZC5yaWdodC5pc0NhcHR1cmUoKSkKIAkJCQkJCQkJCXJldHVybiBm
YWxzZTsKIAkJCQkJCQl9CiAJCQkJCQl9CkBAIC02NjgsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9
CiAJCX0KKwkJdGhpcy5jYXB0dXJlcy5jbGVhcigpOwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYy
MGY0NjYuLmYyNjI2NTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lv
bkZvcm11bGEuamF2YQpAQCAtMTgsMTIgKzE4LDEwIEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsK
IAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwot
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWxsb2NhdGlvbkV4
cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5B
cmd1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNv
bmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZWZlcmVuY2VFeHByZXNzaW9u
OwpAQCAtNTYsNDEgKzU0LDggQEAKIAogCXB1YmxpYyBPYmplY3QgcmVkdWNlKEluZmVyZW5jZUNv
bnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlv
biB7CiAJCS8vIEpMUyAxOC4yLjEKLQkJcHJvcGVyOgogCQlpZiAodGhpcy5yaWdodC5pc1Byb3Bl
clR5cGUodHJ1ZSkpIHsKLQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29s
dmVkVHlwZTsKLQkJCWlmIChleHByVHlwZSA9PSBudWxsKSB7Ci0JCQkJLy8gaWYgd2UgZ2V0IGhl
cmUgZm9yIHNvbWUga2luZHMgb2YgcG9seSBleHByZXNzaW9ucyAoaW5jbC4gQ29uZGl0aW9uYWxF
eHByZXNzaW9uKSwKLQkJCQkvLyB0aGVuIG90aGVyIHdheXMgZm9yIGNoZWNraW5nIGNvbXBhdGli
aWxpdHkgYXJlIG5lZWRlZDoKLSAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0IGluc3RhbmNl
b2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMu
bGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAg
ICAgIC8vIGNmLiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25UZXN0LnRlc3Q0MTI0NTMoKQotICAg
ICAgICAgICAgICAgICAgICAgICAgTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gKChMYW1iZGFFeHBy
ZXNzaW9uKSB0aGlzLmxlZnQpLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0
aGlzLnJpZ2h0KTsKLSAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29weSAhPSBudWxs
ICYmIGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5cGUuaXNWYWxp
ZEJpbmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICAgICAgICAgIH0KLSAgICAg
ICAgICAgICAgICB9Ci0gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5pc0NvbXBhdGli
bGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpID8gVFJVRSA6IEZBTFNF
OwotCQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCXJldHVy
biBGQUxTRTsKLQkJCX0KLQkJCWlmIChpc0NvbXBhdGlibGVXaXRoSW5Mb29zZUludm9jYXRpb25D
b250ZXh0KGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0KSkgewotCQkJCXJl
dHVybiBUUlVFOwotCQkJfSBlbHNlIGlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBBbGxvY2F0aW9u
RXhwcmVzc2lvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJLy8gaGFs
Zi1yZXNvbHZlZCBkaWFtb25kIGhhcyBhIHJlc29sdmVkVHlwZSwgYnV0IHRoYXQgbWF5IG5vdCBi
ZSB0aGUgZmluYWwgd29yZCwgdHJ5IG9uZSBtb3JlIHN0ZXAgb2YgcmVzb2x1dGlvbjoKLSAgICAg
ICAgICAgIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoKEFsbG9jYXRpb25FeHByZXNzaW9uKSB0
aGlzLmxlZnQpLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAgICAg
CXJldHVybiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNDb21w
YXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSkgPyBUUlVFIDog
RkFMU0U7Ci0gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEludm9j
YXRpb24gJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJlc3Npb24oKSkgewotICAgICAgICAgICAgCUlu
dm9jYXRpb24gaW52b2MgPSAoSW52b2NhdGlvbikgdGhpcy5sZWZ0OwotICAgICAgICAgICAgCU1l
dGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51
bGwpOwotICAgICAgICAgICAgCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0gICAgICAgICAgICAJCVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBtZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSBiaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggbGVmdEN0eCA9IGludm9jLmdldElu
ZmVyZW5jZUNvbnRleHQobWV0aG9kKTsKLSAgICAgICAgICAgIAkJaWYgKGxlZnRDdHguc3RlcENv
bXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0gICAgICAgICAg
ICAJCQlicmVhayBwcm9wZXI7IC8vIGZhbGwgdGhyb3VnaCBpbnRvIG5lc3RlZCBpbmZlcmVuY2Ug
YmVsb3cgKG5vdCBleHBsaWNpdCBpbiB0aGUgc3BlYyEpCi0gICAgICAgICAgICAJCX0KLSAgICAg
ICAgICAgIAl9Ci0gICAgICAgICAgICB9Ci0JCQlyZXR1cm4gRkFMU0U7CisJCQlyZXR1cm4gdGhp
cy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29w
ZSkgfHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJl
bmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7CiAJCX0KIAkJaWYgKCFjYW5CZVBvbHlF
eHByZXNzaW9uKHRoaXMubGVmdCkpIHsKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5s
ZWZ0LnJlc29sdmVkVHlwZTsKQEAgLTEwMiw3ICs2Nyw3IEBACiAJCQkvLyAtIHBhcmVudGhlc2l6
ZWQgZXhwcmVzc2lvbiA6IHRoZXNlIGFyZSB0cmFuc3BhcmVudCBpbiBvdXIgQVNUCiAJCQlpZiAo
dGhpcy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlvbikgewogCQkJCUludm9jYXRpb24gaW52b2Nh
dGlvbiA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0JCQkJTWV0aG9kQmluZGluZyBwcmV2aW91
c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7CisJ
CQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlz
LnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKIAkJCQlpZiAocHJldmlvdXNNZXRob2Qg
PT0gbnVsbCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcuLCBpZiBpbnNpZGUgYSBjb3BpZWQgbGFtYmRh
IHdpdGggaWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0dXJuIG51bGw7IAkJCQkvLyAtPiBwcm9jZWVk
IHdpdGggbm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBwcmV2
aW91c01ldGhvZDsKQEAgLTEyOCw3ICs5Myw2IEBACiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRU
eXBlRm9ybXVsYS5jcmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMu
aXNTb2Z0KTsKIAkJCQkJCX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9
IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5vdXRlckNvbnRleHQgPSBp
bmZlcmVuY2VDb250ZXh0OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9k
LmlzQ29uc3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwog
CQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhv
ZCwgYXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtp
bmQpOwpAQCAtMjU0LDExICsyMTgsOSBAQAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9
IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7
CiAJCWlmIChmdW5jdGlvblR5cGUgPT0gbnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90
ZW50aWFsbHktYXBwbGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4g
dGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAotCQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGlj
YWJsZSA9IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJl
bmNlQ29udGV4dC5zY29wZSk7Ci0JCWlmIChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkK
LQkJCXJldHVybiBGQUxTRTsKKwogCQlpZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVu
Y2UoKSkgeworCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVu
Y2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25z
dHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmlu
ZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUucGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7
CkBAIC0yNjgsNiArMjMwLDggQEAKIAkJCWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFp
bnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMu
cmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBp
ZiAobiAhPSBrKSB7CisJCQkJcmV0dXJuIEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9m
ZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVG
b3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0y
NzYsMTEgKzI0MCwxNSBAQAogCQkJCVR5cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBs
aWNhYmxlLmlzQ29uc3RydWN0b3IoKSAmJiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJl
ZmVyZW5jZSgpID8gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50
aWFsbHlBcHBsaWNhYmxlLnJldHVyblR5cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5n
LlZPSUQpCiAJCQkJCXJldHVybiBGQUxTRTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBw
bC5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBw
b3NpdGlvbj8/CisJCQkJVHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50
cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUp
KTsKIAkJCX0KIAkJCXJldHVybiBuZXdDb25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50
Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5zaXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAor
CQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENv
bXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAv
LyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ug
d2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxl
ID09IG51bGwpCisJCQkJcmV0dXJuIEZBTFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlw
ZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJ
CWlmICghZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAt
MzIxLDcgKzI4OSw3IEBACiAJCQkJCWluZmVyZW5jZUNvbnRleHQucmVzdW1lU3VzcGVuZGVkSW5m
ZXJlbmNlKHByZXZJbnZvY2F0aW9uKTsKIAkJCQl9CiAJCQl9Ci0JCQlUeXBlQmluZGluZyByUHJp
bWUgPSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRl
Y2xhcmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGU7CisJCQlUeXBlQmluZGlu
ZyByUHJpbWUgPSBjb21waWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVE
ZWNsLmRlY2xhcmluZ0NsYXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGUuY2FwdHVyZShp
bmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKCkpOwogCQkJaWYgKHJQ
cmltZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCkKIAkJCQlyZXR1cm4gRkFMU0U7CiAJCQlyZXR1cm4g
Q29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUsIHRoaXMu
aXNTb2Z0KTsKQEAgLTM2NCw2ICszMzIsNyBAQAogCQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxs
KSB7CiAJCQkvLyBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpOgogCQkJVHlwZUJp
bmRpbmcgcmV0dXJuVHlwZSA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFy
aW5nQ2xhc3MgOiBtZXRob2QucmV0dXJuVHlwZTsKKwkJCQogCQkJaWYgKHJldHVyblR5cGUgPT0g
VHlwZUJpbmRpbmcuVk9JRCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlv
bigiZXhwcmVzc2lvbiBoYXMgbm8gdmFsdWUiKTsgLy8kTk9OLU5MUy0xJAogCkBAIC0zODQsNyAr
MzUzLDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4
dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBl
KCksIGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6
ZWRUeXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJl
bnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVzdGFi
bGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VD
b250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlw
ZS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVu
ZCgpKSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMK
IAkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVy
biBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwog
CQkJfQpAQCAtNDA0LDcgKzM3Myw3IEBACiAJCQkJCUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJl
bmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlp
ZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRp
bmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRP
RE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5n
ZXRJbnN0YW50aWF0aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3Jt
dWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdl
dFR5cGUsIENPTVBBVElCTEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VB
bmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCQl9CkBAIC00ODQsNCArNDUzLDQgQEAK
IAkJYnVmLmFwcGVuZChSSUdIVF9BTkdMRV9CUkFDS0VUKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmlu
ZygpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50VHlwZUZvcm11bGEuamF2YQppbmRleCBjYTNjYzBmLi4yNWRjYTk0IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGlt
cG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8q
KgpAQCAtMzExLDYgKzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZv
cm11bGEuY3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUs
IHRoaXMuaXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGlu
Zy5QT0xZX1RZUEU6CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5n
KSBzdXBlckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlv
bikgcG9seS5leHByZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRp
b24uYmluZGluZyhzdWJDYW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxs
IHx8ICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQly
ZXR1cm4gcmVkdWNlU3ViVHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5
cGUuY2FwdHVyZShzY29wZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93
IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRh
dGUpOyAvLyROT04tTkxTLTEkCiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVu
Y2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEK
aW5kZXggNjFmYmNjMC4uODMwNDc0MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVu
Y2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5q
YXZhCkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4
cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5J
bnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TGFtYmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEs
OSBAQAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0Pgog
ICogPGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZv
ciAxOC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRl
ZCBpbgotICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIElu
dm9jYXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVs
IGNvbnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5
cGVCaW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBM
aWZlY3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBj
YXVzZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0
cyBvZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29s
dXRpb24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcj
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2Nv
cGUsIEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoKX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1l
ZGlhdGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0
d2VlbiBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAot
ICogICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52
b2NhdGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVu
Y2VDb250ZXh0KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48
YnIvPgotICogICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNl
IG9mIEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZl
cmVuY2VLaW5kfQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxs
aT48Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJn
dW1lbnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhl
IGFyZ3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUg
SW5mZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNl
IG11c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0
aGUgaW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29scyBh
cmUgYXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHBy
ZXNzaW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNv
cnBvcmF0ZWQgaW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJs
b2NrIGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZl
cmVuY2VDb250ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMg
b2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRh
aW5lZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsg
I3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3Qg
YmUgY2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAg
PGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Np
b24gb3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAq
ICAgICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5h
bCB0YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0Bs
aW5rIEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBT
Y29wZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJp
bmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+
Rm9yIHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFu
IGludm9jYXRpb24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHBy
ZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10s
IFNjb3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9u
czogKDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5k
I2ZpbmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3Rv
ckJpbmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5r
ICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAg
ICA8bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBv
bHkgaW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJs
b2FkIHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBp
bnZvbHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGluZyBp
bmZlcmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7
QGxpbmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5n
KX0uPC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlz
IGEgPGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRl
bXB0aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9
LiBPbmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0Bs
aW5rICNDSEVDS19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2Fz
IHN1Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjUs
OSArMTI5LDYgQEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlC
b3VuZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkg
aW5mZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBl
IGluZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQogCS8qKiBG
b3IgZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0
b3JlIHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxU
eXBlQmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFw
PFR5cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAogCQogCS8q
KiBTaWduYWxzIHdoZXRoZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5j
aGVja2VkIGNvbnZlcnNpb24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNv
bnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8qKiBJbm5l
ciBwb2x5IGludm9jYXRpb25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlzIGluZmVy
ZW5jZS4gKi8KLQlMaXN0PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBBcnJheUxp
c3Q8SW52b2NhdGlvblNpdGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNlIGNv
bnRleHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJbmZl
cmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1ldGhvZEJp
bmRpbmc+IHByb2JsZW1NZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1l
bnQgZW52aXJvbm1lbnQ7CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4LjUu
MiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJlc3BvbnNp
YmxlIGZvciBhbnkgcG9zdC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5lclBvbGll
cyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0aGUgYm91
bmQgc2V0IHByb2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0
IG0gaXMgYXBwbGljYWJsZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0IGluZmVy
SW52b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52
b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAtMzk4
LDkgKzM1MCw5IEBACiAJCQl9CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlTZXQ8
Q29uc3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsK
LQkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBt
ZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DKHRo
aXMuaW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQsIGZh
bHNlIC8qIGluZmVyZW5jZSBjb250ZXh0IGFscmVhZHkgaGF2ZSB0aGUgaW5mZXJlbmNlIHZhcmlh
YmxlcyBmb3IgbWV0aG9kICovKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDog
ZGV0ZXJtaW5lIEIzIGZyb20gQworCQkJLy8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBD
CiAJCQl3aGlsZSAoIWMuaXNFbXB0eSgpKSB7CiAJCQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50
Rm9ybXVsYT4gYm90dG9tU2V0ID0gZmluZEJvdHRvbVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMo
YykpOwpAQCAtNDUwLDcgKzQwMiwxMCBAQAogCQl9CiAJfQogCi0JcHJpdmF0ZSBib29sZWFuIGFk
ZENvbnN0cmFpbnRzVG9DKEV4cHJlc3Npb25bXSBleHBycywgU2V0PENvbnN0cmFpbnRGb3JtdWxh
PiBjLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgaW50IGluZmVyZW5jZUtpbmRGb3JNZXRob2QpIHsK
Kwlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0MoRXhwcmVzc2lvbltdIGV4cHJzLCBT
ZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJl
bmNlS2luZEZvck1ldGhvZCwgYm9vbGVhbiBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCWlm
IChsaWZ0SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCQljcmVhdGVJbml0aWFsQm91bmRTZXQobWV0
aG9kLnR5cGVWYXJpYWJsZXMoKSk7CisJCX0KIAkJVHlwZUJpbmRpbmdbXSBmczsKIAkJaWYgKGV4
cHJzICE9IG51bGwpIHsKIAkJCWludCBrID0gZXhwcnMubGVuZ3RoOwpAQCAtNDcxLDE0ICs0MjYs
MTQgQEAKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgazsgaSsrKSB7CiAJCQkJVHlwZUJpbmRpbmcg
ZnNpID0gZnNbTWF0aC5taW4oaSwgcC0xKV07CiAJCQkJVHlwZUJpbmRpbmcgc3Vic3RGID0gc3Vi
c3RpdHV0ZShmc2kpOwotCQkJCWlmICghYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihleHByc1tp
XSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCkpCisJCQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQ19P
bmVFeHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBsaWZ0SW5mZXJlbmNlVmFy
aWFibGVzKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwogCSAgICAgICAgfQogCQl9CiAJCXJldHVybiB0
cnVlOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKEV4
cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcgZnNp
LCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBi
b29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENv
bnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0Riwg
TWV0aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4gbGlmdEluZmVyZW5jZVZhcmlhYmxlcykgewog
CQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRv
IGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlp
ZiAoIWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJ
Yy5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1
Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsK
QEAgLTQ4NywxMDMgKzQ0MiwyMyBAQAogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeGNlcHRpb25G
b3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmksIHN1YnN0RikpOwogCQl9IGVsc2Ug
aWYgKGV4cHJpIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBleHByaS5pc1BvbHlFeHByZXNzaW9u
KCkpIHsKIAkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByaTsKLQkJ
CU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcobnVsbCwgZmFs
c2UsIG51bGwpOworCQkJTWV0aG9kQmluZGluZyBpbm5lck1ldGhvZCA9IGludm9jYXRpb24uYmlu
ZGluZyhzdWJzdEYsIHRoaXMuc2NvcGUpOwogCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJSW5mZXJlbmNlQ29udGV4
dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJp
emVkTWV0aG9kQmluZGluZykgaW5uZXJNZXRob2QpOwogCQkJCWlmIChpbm5lckN0eCAhPSBudWxs
KSB7IC8vIG90aGVyd2lzZSBpbm5lck1ldGhvZCBkb2VzIG5vdCBwYXJ0aWNpcGF0ZSBpbiBpbmZl
cmVuY2UKLQkJCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DKGludm9jYXRpb24uYXJndW1lbnRz
KCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNNZXRob2QoKSwgaW5uZXJDdHguaW5mZXJlbmNlS2lu
ZCk7CisJCQkJCS8vIFBlciBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRL
LTgwNTIzMjUsIHdlIHNob3VsZCBub3QgYmUgYWRkaW5nIGNvbnN0cmFpbnRzIHRvIEMgaWYgdGFy
Z2V0IGlzIGEgcHJvcGVyIHR5cGUuCisJCQkJCS8vIEkgc2F3IHRoaXMgdG9vIGxhdGUgYW5kIHRv
IGF2b2lkIHRoZSAib3V0IG9mIHNjb3BlIiBpbmZlcmVuY2UgdmFyaWFibGVzIHByb2JsZW0sIEkg
YW0gbGlmdGluZyB0aGUgaW5mZXJlbmNlIHZhcmlhYmxlcyBpbnRvCisJCQkJCS8vIElDLiBGb3Ig
cG9seSBleHByZXNzaW9ucyB0YXJnZXR0aW5nIGltcHJvcGVyIHR5cGVzLCBuZXN0ZWQgaW5mZXJl
bmNlIHdvdWxkIGhhdmUgYXJyYW5nZWQgdG8gbGlmdCBjb25zdHJhaW50cyBhbmQgaW5mZXJlbmNl
CisJCQkJCS8vIHZhcmlhYmxlcyBhbmQgYm91bmRzLiBUT0RPOiBmb2xsb3cgdXAgb24gdGhpcy4g
VGhlIHByZXNlbnQgY29kZSBpcyBzdGlsbCBjb3JyZWN0LgorCQkJCQlyZXR1cm4gYWRkQ29uc3Ry
YWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywgaW5uZXJNZXRob2QuZ2VuZXJpY01l
dGhvZCgpLCBpbm5lckN0eC5pbmZlcmVuY2VLaW5kLCBsaWZ0SW5mZXJlbmNlVmFyaWFibGVzIHwg
c3Vic3RGLmlzUHJvcGVyVHlwZSh0cnVlKSk7CiAJCQkJfQogCQkJfQogCQl9IGVsc2UgaWYgKGV4
cHJpIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9uKSB7CiAJCQlDb25kaXRpb25hbEV4
cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBleHByaTsKLQkJCXJldHVybiBh
ZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZUcnVlLCBjLCBmc2ksIHN1YnN0Riwg
bWV0aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZGYWxz
ZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJCQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0Nf
T25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCwgbGlmdEluZmVy
ZW5jZVZhcmlhYmxlcykKKwkJCQkgJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1
ZUlmRmFsc2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGxpZnRJbmZlcmVuY2VWYXJpYWJsZXMp
OwogCQl9CiAJCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIFNpbXBsaWZpZWQgQVBJIHRv
IHBlcmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikKLQkgKiBhbmQg
cGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywgcmViaW5kaW5nIG9mIGlubmVy
IHBvbHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxlbSBtZXRob2Qg
YmluZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpbmZl
cmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogQHBhcmFtIGludm9jYXRpb24gaW52b2Nh
dGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIGFyZ3VtZW50cyBi
ZWluZyBwYXNzZWQgaW50byB0aGUgaW52b2NhdGlvbgotCSAqIEBwYXJhbSBtZXRob2QgY3VycmVu
dCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIEByZXR1
cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJzLAot
CSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBpbmZlcmVu
Y2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCS8qQE5vbk51bGwqLyBNZXRo
b2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBUeXBl
QmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBvcHRpbWl6ZTogaWYgb3V0ZXJDb250ZXh0IGV4aXN0cyBh
bmQgaXMgcmVzb2x2ZWQsIHdlIHByb2JhYmx5IGRvbid0IG5lZWQgdG8gaW5mZXIgYWdhaW4uCi0J
CVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBl
KCk7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBmaW5hbE1ldGhvZCA9IG51
bGw7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RUb0NoZWNrID0g
bWV0aG9kOwotCQkKLQkJYm9vbGVhbiBoYXZlUHJvcGVyVGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUg
IT0gbnVsbCAmJiB0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKTsKLQkJaWYgKGhhdmVQcm9w
ZXJUYXJnZXRUeXBlIHx8ICFpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5l
c1RhcmdldFR5cGUoKSkgewotCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmln
aW5hbE1ldGhvZDsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJn
ZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCUJvdW5kU2V0IHJlc3VsdCA9IHNvbHV0aW9uICE9
IG51bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxsOwotCQkJaWYgKHJlc3VsdCA9PSBudWxsKSB7
Ci0JCQkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJldmlvdXMgY2FuZGlkYXRlIGJ1dCBkaXNjYXJk
IGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRpb25zCi0JCQkJLy8gVE9ETzogc2hvdWxkIHdl
IHJldGFpbiBhbnkgaW5zdGFudGlhdGlvbnMgb2YgdHlwZSB2YXJpYWJsZXMgbm90IG93bmVkIGJ5
IHRoZSBtZXRob2Q/IAotCQkJCXRyeSB7Ci0JCQkJCXJlc3VsdCA9IGluZmVySW52b2NhdGlvblR5
cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9uLCBvcmlnaW5hbCk7
Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIG5v
IHNvbHV0aW9uLCBidXQgZG8gbW9yZSBjaGVja3MgYmVsb3cKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAo
cmVzdWx0ICE9IG51bGwpIHsKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0
aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCksIGludm9jYXRpb24sIHJlc3VsdCk7Ci0JCQkJ
aWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCWZpbmFsTWV0aG9kID0gdGhpcy5lbnZpcm9u
bWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25z
KTsKLQkJCQkJaWYgKHRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5vdGF0aW9uQmFz
ZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVj
a0ZvckNvbnRyYWRpdGlvbnMoZmluYWxNZXRob2QsIGludm9jYXRpb24sIHRoaXMuc2NvcGUpOwot
CQkJCQlpbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChmaW5hbE1ldGhvZCwgdGhp
cyk7Ci0JCQkJCXRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQodGFyZ2V0VHlwZSwgbmV3
IFNvbHV0aW9uKGZpbmFsTWV0aG9kLCByZXN1bHQpKTsKLQkJCQl9Ci0JCQl9Ci0JCQlpZiAoZmlu
YWxNZXRob2QgIT0gbnVsbCkKLQkJCQltZXRob2RUb0NoZWNrID0gZmluYWxNZXRob2Q7Ci0JCX0g
ZWxzZSB7Ci0JCQlmaW5hbE1ldGhvZCA9IG1ldGhvZDsKLQkJfQotCQkKLQkJTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kVG9DaGVjay5ib3VuZENoZWNrMTgodGhpcy5zY29wZSwg
YXJndW1lbnRUeXBlcyk7Ci0JCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQlyZXR1cm4g
cHJvYmxlbU1ldGhvZDsKLQotCQlpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYmIGludm9jYXRp
b24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKQotCQkJcmV0dXJu
IG1ldGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQotCi0JCWlmIChmaW5hbE1ldGhvZCAhPSBudWxs
KSB7Ci0JCQlpZiAocmViaW5kSW5uZXJQb2xpZXMoZmluYWxNZXRob2QsIGludm9jYXRpb24pKQot
CQkJCXJldHVybiBmaW5hbE1ldGhvZDsKLQkJfQotCQlyZXR1cm4gZ2V0UmV0dXJuUHJvYmxlbU1l
dGhvZElmTmVlZGVkKHRhcmdldFR5cGUsIG1ldGhvZCk7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxp
ZmllZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4y
KQotCSAqIGFuZCBwZXJmb3JtIHN1YnNlcXVlbnQgc3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRp
bmcgb2YgaW5uZXIgcG9seSBleHByZXNzaW9ucywKLQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9i
bGVtIG1ldGhvZCBiaW5kaW5nIGlmIG5lZWRlZC4KLQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQg
aWYgdGhlIGluZmVyZW5jZSBoYXMgbm90IHlldCBmaW5pc2hlZC4KLQkgKiBWZXJzaW9uIHVzZWQg
Zm9yIGlubmVyIGludm9jYXRpb25zLCB3aGVyZSBhcmd1bWVudCB0eXBlcyBuZWVkIHRvIGJlIGV4
dHJhY3RlZAotCSAqIGZyb20gYWN0dWFsIGludm9jYXRpb24gYXJndW1lbnRzLgotCSAqIEBwYXJh
bSBpbnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKLQkgKiBAcGFyYW0gbWV0aG9k
IGN1cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9jYXRpb24KLQkg
KiBAcmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1l
dGVycywKLQkgKiAJb3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGluZyBlaXRoZXIg
aW5mZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBtaXNtYXRjaC4KLQkgKi8KLQlwdWJsaWMgLypA
Tm9uTnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGlu
dm9jYXRpb24sIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJ
VHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gbnVsbDsKLQkJRXhwcmVzc2lvbltdIGFyZ3Vt
ZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChhcmd1bWVudHMgIT0gbnVsbCkg
ewotCQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsK
LQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3Vt
ZW50VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQl9Ci0JCXJldHVybiBp
bmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIG1ldGhvZCk7CiAJ
fQogCiAJcHVibGljIGJvb2xlYW4gaGFzUmVzdWx0Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUp
IHsKQEAgLTU5MSw2ICs0NjYsMTAgQEAKIAkJCXJldHVybiB0aGlzLnN0ZXBDb21wbGV0ZWQgPj0g
VFlQRV9JTkZFUlJFRDsKIAkJZWxzZQogCQkJcmV0dXJuIHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0
VHlwZS5jb250YWluc0tleSh0YXJnZXRUeXBlKTsKKwl9CisJCisJcHVibGljIFNvbHV0aW9uIGdl
dFJlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCXJldHVybiB0aGlzLnNvbHV0
aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwogCX0KIAogCXB1YmxpYyBib29sZWFu
IHJlZ2lzdGVyU29sdXRpb24oVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZykgewpAQCAtMTM2Niw4ICsxMjQ1LDYgQEAKIAkJdGhpcy5pbnZvY2F0aW9u
QXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7CiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSBp
bnZvY2F0aW9uOwogCQkKLQkJLy8gc2NoZWR1bGUgZm9yIHJlLWJpbmRpbmcgdGhlIGlubmVyIGFm
dGVyIGluZmVyZW5jZSBzdWNjZXNzOgotCQl0aGlzLmlubmVyUG9saWVzLmFkZChpbnZvY2F0aW9u
KTsKIAkJcmV0dXJuIHJlY29yZDsKIAl9CiAJCkBAIC0xMzk1LDE0NSArMTI3Miw2IEBACiAJCXRo
aXMuY3VycmVudEludm9jYXRpb24gPSByZWNvcmQuc2l0ZTsKIAkJdGhpcy5pbnZvY2F0aW9uQXJn
dW1lbnRzID0gcmVjb3JkLmludm9jYXRpb25Bcmd1bWVudHM7CiAJCXRoaXMuaW5mZXJlbmNlS2lu
ZCA9IHJlY29yZC5pbmZlcmVuY2VLaW5kOwotCX0KLQotCXB1YmxpYyBib29sZWFuIHJlYmluZElu
bmVyUG9saWVzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7Ci0J
CUJvdW5kU2V0IGJvdW5kcyA9IHRoaXMuY3VycmVudEJvdW5kczsKLQkJVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJaWYgKHRhcmdldFR5cGUg
PT0gbnVsbCB8fCAhdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCWlmICghc2l0
ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKLQkJCQkvLyBp
biB0aGlzIGNhc2Ugd2UgbWF5IG5vdCB5ZXQgaGF2ZSB0aGUgc29sdXRpb24oPywgZ2V0IG9yIGNv
bXB1dGUgaXQgbm93OgotCQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJU
YXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCQl0cnkgewotCQkJCQlpZiAoc29sdXRpb24g
IT0gbnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQkJCWJvdW5kcyA9IHNvbHV0
aW9uLmJvdW5kczsKLQkJCQkJZWxzZQotCQkJCQkJYm91bmRzID0gaW5mZXJJbnZvY2F0aW9uVHlw
ZSh0aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNpdGUsIG1ldGhvZC5zaGFsbG93T3JpZ2luYWwo
KSk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCXJl
dHVybiBmYWxzZTsKLQkJCQl9Ci0JCQkJaWYgKGJvdW5kcyA9PSBudWxsKQotCQkJCQlyZXR1cm4g
ZmFsc2U7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29s
dXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQlpZiAoc29sdXRpb24gIT0g
bnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQlib3VuZHMgPSBzb2x1dGlvbi5i
b3VuZHM7Ci0JCX0KLQkJcmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBtZXRob2QucGFyYW1ldGVy
cyk7Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIEFmdGVyIGluZmVyZW5jZSBoYXMg
ZmluaXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMgKEludm9jYXRpb25z
KSwgdGhhdAotCSAqIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNlLiBGb3IgZWFj
aCBvZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCi0JICogZnJvbSB0aGUgaW5m
ZXJlbmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNvbHZpbmcgYXMg
bmVlZGVkLgotCSAqIFNpbWlsYXIgZm9yIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBkaWQgbm90IGRp
cmVjdGx5IHBhcnRpY2lwYXRlIGluIHRoZSBpbmZlcmVuY2UKLQkgKiBidXQgYXJlIGRpcmVjdCBh
cmd1bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiAoRnVuY3Rpb25hbEV4cHJlc3Npb24s
IENvbmRpdGlvbmFsRXhwcmVzc2lvbikuCi0JICovCi0JcHVibGljIHZvaWQgcmViaW5kSW5uZXJQ
b2xpZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzKSB7Ci0J
CS8vIFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5nIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBhcmUg
ZGlyZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uOgotCQkvLyAoaGFuZGxl
cyBGdW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRpdGlvbmFsRXhwcmVzc2lvbikKLQkJaWYgKHRo
aXMuY3VycmVudEludm9jYXRpb24gaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJ
cmV0dXJuOyAvLyBubyBpbm5lciBleHByZXNzaW9ucwotCQlib29sZWFuIGlzVmFyYXJncyA9IHRo
aXMuaW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJBUkc7Ci0JCWFjY2VwdFBlbmRpbmdQb2x5QXJn
dW1lbnRzKGJvdW5kcywgcGFyYW1ldGVyVHlwZXMsIGlzVmFyYXJncyk7Ci0JCS8vIFRoaXMgbG9v
cHMgb3ZlciBhbGwgcG9seSBleHByZXNzaW9ucyBmb3Igd2hpY2ggYSBzdWItaW5mZXJlbmNlIHdh
cyB0cmlnZ2VyZWQ6Ci0JCS8vIChoYW5kbGVzIGdlbmVyaWMgaW52b2NhdGlvbnMpCi0JCWludCBs
ZW4gPSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47
IGkrKykgewotCQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlzLmlubmVyUG9s
aWVzLmdldChpKTsKLQkJCWlmIChpbm5lciBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24p
IHsKLQkJCQlSZWZlcmVuY2VFeHByZXNzaW9uIHJlZmVyZW5jZUV4cHJlc3Npb24gPSAoUmVmZXJl
bmNlRXhwcmVzc2lvbikgaW5uZXI7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21waWxlVGltZURlY2wg
PSByZWZlcmVuY2VFeHByZXNzaW9uLnByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQodGhpcy5zY29w
ZSk7Ci0JCQkJaWYJKGNvbXBpbGVUaW1lRGVjbCAhPSBudWxsKSB7Ci0JICAJCQkJVHlwZVZhcmlh
YmxlQmluZGluZ1tdIHZhcmlhYmxlcyA9IGNvbXBpbGVUaW1lRGVjbC50eXBlVmFyaWFibGVzOwot
CQkJCQlpZiAodmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkJ
CVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKHZhcmlhYmxlcywgKEludm9j
YXRpb25TaXRlKSBpbm5lciwgYm91bmRzKTsKLQkJCQkJCXJlZmVyZW5jZUV4cHJlc3Npb24uYmlu
ZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qo
Y29tcGlsZVRpbWVEZWNsLCBhcmd1bWVudHMpOwotCQkJCQl9Ci0JCQkJfQotCQkJfSBlbHNlIGlm
IChpbm5lciBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbnZvY2F0aW9uIGlubmVyTWVz
c2FnZSA9IChJbnZvY2F0aW9uKSBpbm5lcjsKLQkJCQlUeXBlQmluZGluZyBpbm5lclRhcmdldFR5
cGUgPSBpbm5lci5leHBlY3RlZFR5cGUoKTsgLy8gbWF5IGJlIHNldCBmcm9tIGFjY2VwdFBlbmRp
bmdQb2x5QXJndW1lbnRzCi0JCQkJaWYgKGlubmVyVGFyZ2V0VHlwZSAhPSBudWxsICYmICFpbm5l
clRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCQlpbm5lclRhcmdldFR5cGUgPSBu
dWxsOwotCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVyTWVzc2FnZS5iaW5kaW5nKGlu
bmVyVGFyZ2V0VHlwZSwgaW5uZXJUYXJnZXRUeXBlICE9IG51bGwsIHRoaXMuc2NvcGUpOwotCQkJ
CWlmIChiaW5kaW5nID09IG51bGwpCi0JCQkJCWNvbnRpbnVlOwotCQkJCU1ldGhvZEJpbmRpbmcg
b3JpZ2luYWwgPSBiaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpOwotCi0JCQkJLy8gYXBwbHkgaW5m
ZXJlbmNlIHJlc3VsdHMgb250byB0aGUgYWxsb2NhdGlvbiB0eXBlIG9mIGlubmVyIGRpYW1vbmRz
OgotCQkJCWlmIChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYgaW5uZXIuaXNQb2x5RXhwcmVz
c2lvbigpKSB7Ci0JCQkJCVJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MgPSBvcmlnaW5h
bC5kZWNsYXJpbmdDbGFzczsKLQkJCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1
dGlvbnMoZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpLCBpbm5lck1lc3NhZ2UsIGJvdW5k
cyk7Ci0JCQkJCWRlY2xhcmluZ0NsYXNzID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0
ZXJpemVkVHlwZShkZWNsYXJpbmdDbGFzcywgYXJndW1lbnRzLCBkZWNsYXJpbmdDbGFzcy5lbmNs
b3NpbmdUeXBlKCkpOwotCQkJCQlvcmlnaW5hbCA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
KWRlY2xhcmluZ0NsYXNzKS5jcmVhdGVQYXJhbWV0ZXJpemVkTWV0aG9kKG9yaWdpbmFsKTsKLQkJ
CQkJaW5uZXIuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKGlubmVyVGFyZ2V0VHlwZSwgdGhp
cy5zY29wZSk7CQotCQkJCQlpZiAodGhpcy5lbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0
Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG9yaWdpbmFsLCBpbm5lck1lc3NhZ2UsIHRoaXMu
c2NvcGUpOwotCQkJCX0KLQkJCQkKLQkJCQkvLyBhcHBseSByZXN1bHRzIG9mIHRoZSBjb21iaW5l
ZCBpbmZlcmVuY2Ugb250byB0aGUgYmluZGluZyBvZiB0aGUgaW5uZXIgaW52b2NhdGlvbjoKLQkJ
CQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFy
aWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsKLQkJCQlpZiAoc29sdXRpb25zID09IG51
bGwpIHsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIHsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGlubmVy
TWVzc2FnZS5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIGJpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwgJiYgIWJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlubmVyQ3R4LnJlcG9ydEludmFsaWRJbnZvY2F0
aW9uKGlubmVyTWVzc2FnZSwgYmluZGluZyk7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJY29udGlu
dWU7IC8vIGlubmVyIGluZmVyZW5jZSBub3QgcmVxdWVzdGVkIC0+IG5vdCBhIHByb2JsZW0KLQkJ
CQl9Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9
IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2lu
YWwsIHNvbHV0aW9ucyk7Ci0JCQkJCi0JCQkJaWYgKGlubmVyTWVzc2FnZS51cGRhdGVCaW5kaW5n
cyhpbm5lckJpbmRpbmcsIGlubmVyVGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0
dWFsbHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzKGlubmVyTWVzc2FnZSwgaW5uZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJ
CQl9Ci0JCQl9Ci0JCX0KLQkJdGhpcy5zdGVwQ29tcGxldGVkID0gQklORElOR1NfVVBEQVRFRDsg
Ly8gd2UncmUgZG9uZS1kb25lCi0JfQotCi0JcHJpdmF0ZSB2b2lkIGFjY2VwdFBlbmRpbmdQb2x5
QXJndW1lbnRzKEJvdW5kU2V0IGFjY2VwdGVkUmVzdWx0LCBUeXBlQmluZGluZ1tdIHBhcmFtZXRl
clR5cGVzLCBib29sZWFuIGlzVmFyQXJncykgewotCQlpZiAoYWNjZXB0ZWRSZXN1bHQgPT0gbnVs
bCB8fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0gbnVsbCkgcmV0dXJuOwotCQlTdWJzdGl0
dXRpb24gc3Vic3RpdHV0aW9uID0gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGFjY2VwdGVkUmVzdWx0
KTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3Ro
OyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBnZXRQYXJhbWV0ZXIocGFyYW1l
dGVyVHlwZXMsIGksIGlzVmFyQXJncyk7Ci0JCQlpZiAoIXRhcmdldFR5cGUuaXNQcm9wZXJUeXBl
KHRydWUpKQotCQkJCXRhcmdldFR5cGUgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwg
dGFyZ2V0VHlwZSk7Ci0JCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSB0aGlzLmludm9jYXRpb25B
cmd1bWVudHNbaV07Ci0JCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsK
LQkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmVzc2lvbjsKLQkJ
CQlpZiAoIXRoaXMuaW5uZXJQb2xpZXMuY29udGFpbnMoaW52b2NhdGlvbikpIHsKLQkJCQkJTWV0
aG9kQmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcodGFyZ2V0VHlwZSwgdHJ1ZSwg
dGhpcy5zY29wZSk7Ci0JCQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZyBwcmV2aW91c0JpbmRpbmcgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSBtZXRob2Q7Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9u
LmdldEluZmVyZW5jZUNvbnRleHQocHJldmlvdXNCaW5kaW5nKTsKLQkJCQkJCWlmIChpbm5lckN0
eCAhPSBudWxsKSB7Ci0JCQkJCQkJLy8gd2UgaGF2ZSBhIG5vbi1wb2x5IGdlbmVyaWMgaW52b2Nh
dGlvbiwgd2hpY2ggbmVlZHMgaW5mZXJlbmNlIGJ1dCBpcyBub3QgY29ubmVjdGVkIHZpYSBpbm5l
clBvbGlzLgotCQkJCQkJCS8vIEZpbmlzaCB0aGF0IGlubmVyIGluZmVyZW5jZSBub3cgKGluY2wu
IGJpbmRpbmcgdXBkYXRlcyk6Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBp
bm5lckN0eC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIHByZXZpb3VzQmluZGluZyk7
Ci0JCQkJCQkJaWYgKCFpbm5lckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQlp
bm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcp
OwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvbi51cGRhdGVCaW5kaW5ncyhpbm5lckJp
bmRpbmcsIHRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmlu
ZyBhbnl0aGluZwotCQkJCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50
cyhpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCQkJCX0KLQkJCQkJ
CX0KLQkJCQkJfSBlbHNlIGlmKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RC
aW5kaW5nKXsKLQkJCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRh
cmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJCQl9Ci0JCQkJfSBlbHNlIHsKLQkJCQkJZXhwcmVz
c2lvbi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJfQotCQkJfSBlbHNlIHsKLQkJ
CQlpZiAodGhpcy5pbm5lclBvbGllcy5jb250YWlucyhleHByZXNzaW9uKSkgLy8gbWF5IGdldCBo
ZXJlIGZvciBSZWZlcmVuY2VFeHByZXNzaW9ucyAuLi4KLQkJCQkJZXhwcmVzc2lvbi5zZXRFeHBl
Y3RlZFR5cGUodGFyZ2V0VHlwZSk7IC8vIC4uLiBwcmVwYXJlIGZvciBmaW5hbCBpbmZlcmVuY2Ug
dmlhIHJlYmluZElubmVyUG9saWVzCi0JCQkJZWxzZQotCQkJCQlleHByZXNzaW9uLmNoZWNrQWdh
aW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsKLQkJCX0KLQkJfQog
CX0KIAogCXByaXZhdGUgU3Vic3RpdHV0aW9uIGdldFJlc3VsdFN1YnN0aXR1dGlvbihmaW5hbCBC
b3VuZFNldCByZXN1bHQpIHsKQEAgLTE1ODEsMTkgKzEzMTksMTQgQEAKIAkJCWlmIChtZXRob2Qu
cmV0dXJuVHlwZS5lcmFzdXJlKCkuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFR5cGUpKQogCQkJ
CXJldHVybiBtZXRob2Q7IC8vIGRvbid0IGNvdW50IGFzIHByb2JsZW0uCiAJCX0KLQkJaWYgKGV4
cGVjdGVkVHlwZSA9PSBudWxsKQotCQkJcmV0dXJuIG1ldGhvZDsgLy8gYXNzdW1lIGluZmVyZW5j
ZSBmYWlsdXJlIGNvbmNlcm5lZCBhbm90aGVyIGV4cHJlc3Npb24KLQkJUHJvYmxlbU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1l
dGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLlBhcmFtZXRl
cml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtKTsKKwkJLyogV2UgdXNlZCB0byBjaGVjayBp
ZiBleHBlY3RlZCB0eXBlIGlzIG51bGwgYW5kIGlmIHNvIHJldHVybiBtZXRob2QsIGJ1dCB0aGF0
IGlzIHdyb25nIC0gaXQgaW5qZWN0cyBhbiBpbmNvbXBhdGlibGUgbWV0aG9kIGludG8gb3Zlcmxv
YWQgcmVzb2x1dGlvbi4KKwkJICAgaWYgd2UgZ2V0IGhlcmUgd2l0aCBleHBlY3RlZCB0eXBlIHNl
dCB0byBudWxsIGF0IGFsbCwgdGhlIHRhcmdldCBjb250ZXh0IGRvZXMgbm90IGRlZmluZSBhIHRh
cmdldCB0eXBlICh2YW5pbGxhIGNvbnRleHQpLCBzbyBpbmZlcmVuY2UgaGFzIGRvbmUgaXRzCisJ
CSAgIGJlc3QgYW5kIG5vdGhpbmcgbW9yZSB0byBkbyB0aGFuIHRvIHNpZ25hbCBlcnJvci4gCisJ
CSAqLworCQlQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1N
ZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywg
UHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlKTsKIAkJcHJvYmxl
bU1ldGhvZC5yZXR1cm5UeXBlID0gZXhwZWN0ZWRUeXBlOwogCQlwcm9ibGVtTWV0aG9kLmluZmVy
ZW5jZUNvbnRleHQgPSB0aGlzOwogCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQl9Ci0KLQlwdWJs
aWMgdm9pZCByZXBvcnRJbnZhbGlkSW52b2NhdGlvbihJbnZvY2F0aW9uIGludm9jYXRpb24sIE1l
dGhvZEJpbmRpbmcgYmluZGluZykgewotCQlpZiAoaW52b2NhdGlvbiBpbnN0YW5jZW9mIE1lc3Nh
Z2VTZW5kKQotCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKChN
ZXNzYWdlU2VuZCkgaW52b2NhdGlvbiwgYmluZGluZyk7Ci0JCWVsc2UKLQkJCXRoaXMuc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKChTdGF0ZW1lbnQpaW52b2NhdGlv
biwgYmluZGluZyk7CiAJfQogCiAJLy8gZGVidWdnaW5nOgpAQCAtMTYzMywxMiArMTM2Niw2IEBA
CiAJCWlmICh0aGlzLmN1cnJlbnRCb3VuZHMgIT0gbnVsbCkKIAkJCWJ1Zi5hcHBlbmQodGhpcy5j
dXJyZW50Qm91bmRzLnRvU3RyaW5nKCkpOwogCQlyZXR1cm4gYnVmLnRvU3RyaW5nKCk7Ci0JfQot
Ci0JcHVibGljIHZvaWQgYWRkUHJvYmxlbU1ldGhvZChQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9i
bGVtTWV0aG9kKSB7Ci0JCWlmICh0aGlzLnByb2JsZW1NZXRob2RzID09IG51bGwpCi0JCQl0aGlz
LnByb2JsZW1NZXRob2RzID0gbmV3IEFycmF5TGlzdDxNZXRob2RCaW5kaW5nPigpOwotCQl0aGlz
LnByb2JsZW1NZXRob2RzLmFkZChwcm9ibGVtTWV0aG9kKTsKIAl9CiAKIAkvKioKQEAgLTE3MTIs
NCArMTQzOSw0IEBACiAJcHVibGljIHN0YXRpYyB2b2lkIG1pc3NpbmdJbXBsZW1lbnRhdGlvbihT
dHJpbmcgbXNnKSB7CiAJCXRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbiht
c2cpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQppbmRleCAy
ZTk2YTRiLi5jNTU2YzY4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTMxLDYgKzMxLDcgQEAKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJkOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJP
cHRpb25zOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
SW5mZXJlbmNlQ29udGV4dDE4LlNvbHV0aW9uOwogCiAvKioKICAqIEJpbmRpbmcgZGVub3Rpbmcg
YSBnZW5lcmljIG1ldGhvZCBhZnRlciB0eXBlIHBhcmFtZXRlciBzdWJzdGl0dXRpb25zIGdvdCBw
ZXJmb3JtZWQuCkBAIC00MSw3ICs0Miw3IEBACiBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgaW1w
bGVtZW50cyBTdWJzdGl0dXRpb24gewogCiAgICAgcHVibGljIFR5cGVCaW5kaW5nW10gdHlwZUFy
Z3VtZW50czsKLSAgICBwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OworICAg
IHByb3RlY3RlZCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKICAgICBwdWJsaWMgYm9v
bGVhbiBpbmZlcnJlZFJldHVyblR5cGU7CiAgICAgcHVibGljIGJvb2xlYW4gd2FzSW5mZXJyZWQ7
IC8vIG9ubHkgc2V0IHRvIHRydWUgZm9yIGluc3RhbmNlcyByZXN1bHRpbmcgZnJvbSBtZXRob2Qg
aW52b2NhdGlvbiBpbmZlcnJlbmNlCiAgICAgcHVibGljIGJvb2xlYW4gaXNSYXc7IC8vIHNldCB0
byB0cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3IGZvciBzdWJzdGl0dXRpb24gcHVycG9z
ZQpAQCAtNTAsMzEgKzUxLDExIEBACiAJLyoqCiAJICogUGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2Vu
ZXJpYyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9vciBleHBlY3RlZCB0eXBlCiAJICogPHA+
Ci0JICogSW4gMS44KyB0aGUgZm9sbG93aW5nIGRpc2NpcGxpbmUgaGFzIHRvIGJlIG9ic2VydmVk
IGJ5IGNhbGxlcnM6Ci0JICogRWFjaCBpbnZvY2F0aW9uIG11c3QgYmUgc3ViamVjdGVkIHRvIHR3
byBsZXZlbHMgb2YgaW5mZXJlbmNlOgotCSAqIDwvcD4KLQkgKiA8dWw+Ci0JICogPGxpPiB7QGxp
bmsgU2NvcGUjQVBQTElDQUJJTElUWSBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNl
fSwgd2hpY2ggbWF5IGJlIGFwcGxpZWQKLQkgKiAgICAgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBz
YW1lIGludm9jYXRpb248L2xpPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0lOVk9DQVRJT05fVFlQ
RSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlfSwgd2hpY2ggaXMgZmluYWxseSBwZXJmb3JtZWQK
LQkgKiAgICAgZm9yIHRoZSBzZWxlY3RlZCBtZXRob2QgYW5kIHdoaWNoIGFkZHMgaW5mb3JtYXRp
b24gZnJvbSB0aGUgInRhcmdldCB0eXBlIi48L2xpPgotCSAqIDwvdWw+Ci0JICogPHA+Ci0JICog
Q2xpZW50cyBjYW4gY29udHJvbCB3aGljaCBwYXJ0cyBvZiB0aGUgaW5mZXJlbmNlIHNob3VsZCBi
ZSBwZXJmb3JtZWQgYnkgcGFzc2luZyB0aGUgYXBwcm9wcmlhdGUKLQkgKiBmbGFncyBpbnRvIGFy
Z3VtZW50ICdpbmZlcmVuY2VMZXZlbCcuIE9uIGVhY2ggY2FsbCBwYXRoIGl0IG11c3QgYmUgZW5z
dXJlZCB0aGF0IG9uZSBvciBtb3JlCi0JICogaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVy
ZW5jZXMgYXJlIGFsd2F5cyBmb2xsb3dlZCBieSBleGFjdGx5IG9uZSBpbnZvY2F0aW9uIHR5cGUg
aW5mZXJlbmNlCi0JICogKHVubGVzcyBlcnJvcnMgaGF2ZSBiZWVuIGRldGVjdGVkKS4KLQkgKiA8
L3A+Ci0JICogPHA+Ci0JICogSW5pdGlhbCBjbGllbnRzIGFyZSB0aGUgZGlyZWN0IGNhbGxlcnMg
b2YKLQkgKiB7QGxpbmsgU2NvcGUjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGlu
ZyxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLGludCl9LAotCSAqIHdoaWNoIHNob3VsZCBl
aXRoZXIgaW52b2tlIGJvdGggbGV2ZWxzIG9mIGluZmVyZW5jZSA8ZW0+b3I8L2VtPiBkZWxlZ2F0
ZSB0aGUgc2Vjb25kIHBhcnQgdG8KLQkgKiB7QGxpbmsgU2NvcGUjbW9zdFNwZWNpZmljTWV0aG9k
QmluZGluZyhNZXRob2RCaW5kaW5nW10saW50LFR5cGVCaW5kaW5nW10sSW52b2NhdGlvblNpdGUs
UmVmZXJlbmNlQmluZGluZyl9LAotCSAqIHdoaWNoIGlzIGludGVuZGVkIHRvIGVuc3VyZSBjb21w
bGV0aW5nIHRoZSBpbmZlcmVuY2Ugb24gYWxsIG5vbi1lcnJvciBleGl0cy4KKwkgKiBJbiAxLjgr
IGlmIHRoZSBleHBlY3RlZCB0eXBlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGR1ZSB0byB0aGlzIGNh
bGwgYmVpbmcgYW4gYXJndW1lbnQgdG8gYW4gb3V0ZXIgY2FsbCB3aGljaCBpcyBub3Qgb3Zlcmxv
YWQtcmVzb2x2ZWQgeWV0LAorCSAqIHRoZSByZXR1cm5lZCBtZXRob2QgYmluZGluZyB3aWxsIGJl
IGEgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy4KIAkgKiA8L3A+ICAKIAkg
Ki8KLQlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
TWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNj
b3BlIHNjb3BlLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVu
Y2VMZXZlbCkKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVu
dHMsIFNjb3BlIHNjb3BlLAlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkKIAl7CiAJCVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBl
VmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJp
YWJsZXM7CkBAIC05NSwxMjggKzc2LDM5IEBACiAJCQkvLyBpbml0aWFsaXplcyB0aGUgbWFwIG9m
IHN1YnN0aXR1dGVzICh2YXIgLS0+IHR5cGVbXVtdeyBlcXVhbCwgZXh0ZW5kcywgc3VwZXJ9CiAJ
CQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOwog
Ci0vLyA9PT09IDEuODogVGhlIG1haW4gZHJpdmVyIGZvciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBt
ZXRob2RzOiA9PT09Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOwogCQkJ
Q29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygp
OwotCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84KSB7Ci0JCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJ
VFkpICE9IDApCi0JCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VD
b250ZXh0KHNjb3BlKTsKLQkJCQllbHNlIGlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIElu
dm9jYXRpb24gJiYgb3JpZ2luYWxNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpCi0JCQkJCWluZkN0eDE4ID0gKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9u
U2l0ZSkuZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ID09IG51bGwpCi0JCQkJCXJl
dHVybiBvcmlnaW5hbE1ldGhvZDsKLQkJCX0KLQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0J
CQkJdHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOwotCQkJCQlC
b3VuZFNldCByZXN1bHQgPSBudWxsOwotCQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUu
QVBQTElDQUJJTElUWSkgIT0gMCkgeworCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZl
bCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJCXJldHVybiBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZDE4KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHNjb3BlLCBpbnZvY2F0aW9u
U2l0ZSk7CiAKLQkJCQkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTogLS0tLQotCQkJ
CQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCkKLQkJ
CQkJCQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uCi0JCQkJCQkJCSYm
ICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1l
dGhvZCk7Ci0JCQkJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkg
ewotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hF
Q0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9s
b29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9j
YXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7
Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQot
CQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNW
YXJhcmdzKCkpIHsKLQkJCQkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJp
bGl0eQotCQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250
ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQg
PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOwotCQkJCQkJCWluZkN0eDE4LmluZmVy
SW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFt
b25kKTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7Ci0JCQkJ
CQl9Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jl
c29sdmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJCQkJCWluZkN0eDE4LnN0b3JlZFNvbHV0
aW9uID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9
IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOwotCQkJCQkJCWlmIChp
bnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQkJCQkJCSgo
UmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZD
dHgxOC5pbmZlcmVuY2VLaW5kOwotCQkJCQkJfQotCQkJCQl9IGVsc2UgewotCQkJCQkJcHJvdmlz
aW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbjsKLQkJCQkJfQotCQkJCQlyZXN1
bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciBy
ZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCS8vIDEuNy0gb25seS4K
KwkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhv
ZCk7CisJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwg
b3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7
CisJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOwogCi0J
CQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25U
YXJnZXRUeXBlKCk7Ci0JCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJ
CQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKLQkJCQkJaWYgKChpbmZl
cmVuY2VMZXZlbCAmIFNjb3BlLklOVk9DQVRJT05fVFlQRSkgIT0gMCAvLyByZXF1ZXN0ZWQ/Ci0J
CQkJCQkJJiYgKGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHBy
ZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpKSB7IC8vIHBvc3NpYmxlPwotCi0J
CQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTogLS0tLQotCQkJCQkJcmVzdWx0
ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52
b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKLQkJCQkJCWludm9jYXRpb25UeXBlSW5mZXJy
ZWQgPSB0cnVlOwotCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKLQkJ
CQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKQotCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVz
dWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5
cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCi0JCQkJCX0gZWxzZSB7Ci0JCQkJCQkv
LyB3ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JCQkJ
CQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKLQkJCQkJfQotCi0JCQkJCWlmIChyZXN1bHQg
IT0gbnVsbCkgewotCQkJCQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoKLQkJCQkJCVR5
cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJs
ZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwotCQkJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxs
KSB7Ci0JCQkJCQkJCi0JCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50
KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0
aW9ucyk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtp
bmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIHBy
b2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhw
ZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKLQkJCQkJCQkJaWYgKHByb2JsZW1NZXRob2Qg
aW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykKLQkJCQkJCQkJCXJldHVybiBwcm9ibGVt
TWV0aG9kOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkgewot
CQkJCQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lz
RW5hYmxlZCkKLQkJCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFk
aXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7Ci0JCQkJCQkJ
CWluZkN0eDE4LnJlYmluZElubmVyUG9saWVzKHJlc3VsdCwgbWV0aG9kU3Vic3RpdHV0ZS5wYXJh
bWV0ZXJzKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vi
c3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50cyk7Ci0JCQkJCQkJCWlmIChwcm9i
bGVtTWV0aG9kICE9IG51bGwpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJ
CQl9IGVsc2UgewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0
aW9uKQotCQkJCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZl
cmVuY2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0
IHNvIHdlIGNhbiBmaW5pc2ggbGF0ZXIKLQkJCQkJCQl9Ci0JCQkJCQkJcmV0dXJuIG1ldGhvZFN1
YnN0aXR1dGU7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJfSBjYXRj
aCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIEZJWE1FIHN0b3AtZ2Fw
IG1lYXN1cmUKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVy
cm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7Ci0JCQkJCXJldHVybiBudWxsOwor
CQkJLy8gc3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJz
LCBidXQgbnVsbCBhcmd1bWVudHMgZ290IHJlcGxhY2VkIHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5h
bCB2YXJpYWJsZSBpbiBwYXJhbSBtZXRob2QKKwkJCS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1
bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCisJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJl
c29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pc1VuY2hl
Y2tlZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tlZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcK
KwkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOwor
CQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVu
Y2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwog
CQkJCX0KLQkJCX0gZWxzZSB7Ci0vLyA9PT09IDEuOCA9PT09Ci0JCQkJaW5mZXJlbmNlQ29udGV4
dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0KG9yaWdpbmFsTWV0aG9kKTsKLQkJCQltZXRob2RTdWJz
dGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFy
Z3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQkJaWYgKG1ldGhvZFN1
YnN0aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CisJCQkJCVR5cGVCaW5k
aW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7
CisJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgeworCQkJCQkJLy8gcmVjb3JkIGl0IHdh
cyBleHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9wcG9zZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0
IChzZWUgYmVsb3cpCisJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRU
eXBlID0gdHJ1ZTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdl
dEphdmFMYW5nT2JqZWN0KCk7IC8vIGFzc3VtZSBPYmplY3QgYnkgZGVmYXVsdAorCQkJCQl9CisJ
CQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlOworCQkJCX0K
KwkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZyb21FeHBlY3Rl
ZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwogCQkJCWlmIChtZXRob2RTdWJzdGl0dXRl
ID09IG51bGwpCiAJCQkJCXJldHVybiBudWxsOwotCQkJCQotCQkJCS8vIHN1YnN0aXR1dGVzIG1h
eSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwgYXJndW1lbnRz
IGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUgaW4gcGFyYW0g
bWV0aG9kCi0JCQkJLy8gMTUuMTIuMi44IC0gaW5mZXJyaW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1
bWVudHMKLQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50
KCkpIHsKLQkJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsgLy8gb25seSBy
ZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43Ci0JCQkJCQlpbnQgbGVuZ3Ro
ID0gaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRlcy5sZW5ndGg7Ci0JCQkJCQlTeXN0ZW0uYXJy
YXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50
cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwotCQkJCQl9Ci0JCQkJCWlm
IChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgewotCQkJ
CQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRh
cmdldFR5cGUoKTsKLQkJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgewotCQkJCQkJCS8v
IHJlY29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3Vt
ZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93KQotCQkJCQkJCWluZmVyZW5jZUNvbnRleHQuaGFzRXhw
bGljaXRFeHBlY3RlZFR5cGUgPSB0cnVlOwotCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQlleHBlY3Rl
ZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRl
ZmF1bHQKLQkJCQkJCX0KLQkJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhw
ZWN0ZWRUeXBlOwotCQkJCQl9Ci0JCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0
dXRlLmluZmVyRnJvbUV4cGVjdGVkVHlwZShzY29wZSwgaW5mZXJlbmNlQ29udGV4dCk7Ci0JCQkJ
CWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCi0JCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQl9
CiAJCQl9CiAJCX0KKwkJCiAKIAkJLyogYm91bmRzIGNoZWNrOiBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjQyMTU5LCBJbmZlcnJlZCB0eXBlcyBtYXkgY29u
dGFpbiBzZWxmIHJlZmVyZW5jZQogCQkgICBpbiBmb3JtYWwgYm91bmRzLiBJZiAiVCBleHRlbmRz
IEk8VD4iIGlzIGEgb3JpZ2luYWwgdHlwZSB2YXJpYWJsZSBhbmQgVCB3YXMgaW5mZXJyZWQgdG8g
YmUgSTxUPiBkdWUgcG9zc2libHkKQEAgLTI2Niw2ICsxNTgsOTMgQEAKIAkJcmV0dXJuIG1ldGhv
ZFN1YnN0aXR1dGU7CiAJfQogCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kMTgoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRp
bmdbXSBhcmd1bWVudHMsIGZpbmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0
aW9uU2l0ZSkgeworCQkKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhv
ZFN1YnN0aXR1dGUgPSBudWxsOworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxl
cyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBp
bmZDdHgxOCA9IG51bGw7CisJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0
aG9kLnBhcmFtZXRlcnM7CisJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVu
Y2VDb250ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNj
b3BlLmNvbXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQg
PSBmYWxzZTsKKwkJCisJCXRyeSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51
bGw7CisJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxp
Y2FiaWxpdHkpOiAtLS0tCisJCQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRp
b25TaXRlKS5pc1BvbHlFeHByZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNE
aWFtb25kID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9y
KCk7CisJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJ
CWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7
IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZh
cmFyZykgaXMgc3VmZmljaWVudC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNh
YmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0
ID0gaW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmln
aW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0
eSBhcHBsaWNhYmlsaXR5CisJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVy
ZW5jZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNl
S2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5m
ZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0Rp
YW1vbmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVz
dWx0ID09IG51bGwpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZl
ZChyZXN1bHQpKSB7CisJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRl
eHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0
YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikg
aW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAg
IC8vIENIRUNLCisJCQl9IGVsc2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJLy8gQXBw
bGljYWJpbGl0eSBzdWNjZWVkZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBp
ZiBwb3NzaWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRl
Lmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBm
YWxzZTsKKwkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0
RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAx
OC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJl
c3VsdDsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhl
IHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJ
CQlyZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRU
eXBlLCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9jYXRpb25UeXBl
SW5mZXJyZWQgPSB0cnVlOworCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7
CisJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVz
dWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5
cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9
IG51bGwpIHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5k
aW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGlu
dm9jYXRpb25TaXRlLCByZXN1bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJ
CQltZXRob2RTdWJzdGl0dXRlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZChvcmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhh
c1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9u
YWwgcmVzdWx0PworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTgu
Z2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3Rp
dHV0ZSk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RC
aW5kaW5nKSB7CisJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJu
IHByb2JsZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBl
SW5mZXJyZWQpIHsKKwkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWRO
dWxsQW5hbHlzaXNFbmFibGVkKQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tG
b3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7
CisJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJv
dW5kQ2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9
IG51bGwpIHsKKwkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4g
cHJvYmxlbU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdl
dFR5cGUucHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJl
c3VsdCkpOworCQkJCQl9IGVsc2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJ
CQl9CisJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJ
CQkoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQo
bWV0aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZp
bmlzaCBsYXRlcgorCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQor
CQkJcmV0dXJuIG51bGw7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkg
eworCQkJLy8gRklYTUUgc3RvcC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7
CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sx
OChTY29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9u
IHN1YnN0aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZyBtZXRob2RTdWJzdGl0dXRlID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9s
eVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Q
b2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZpbGUgbW9kZSAx
MDA2NDQKaW5kZXggMDAwMDAwMC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0wLDAg
KzEsMTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTQg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
KyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxl
IGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAq
IENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xhc3MgUG9seVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyB7IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJsaWMgUG9seVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcgYXBwbGljYWJsZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxlTWV0aG9kLm9y
aWdpbmFsTWV0aG9kLCBhcHBsaWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFwcGxpY2FibGVN
ZXRob2QuZW52aXJvbm1lbnQpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJv
YmxlbVJlYXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQppbmRl
eCA3M2UwNDFiLi43ZmJkZWMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFz
b25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCkBAIC00MCw3
ICs0MCw3IEBACiAJZmluYWwgaW50IE5vblN0YXRpY09yQWxpZW5UeXBlUmVjZWl2ZXIgPSAyMDsK
IAlmaW5hbCBpbnQgQXR0ZW1wdFRvQnlwYXNzRGlyZWN0U3VwZXIgPSAyMTsgLy8gc3VwZXIgYWNj
ZXNzIHdpdGhpbiBkZWZhdWx0IG1ldGhvZAogCWZpbmFsIGludCBEZWZlY3RpdmVDb250YWluZXJB
bm5vdGF0aW9uVHlwZSA9IDIyOwotCWZpbmFsIGludCBQYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0
ZWRUeXBlUHJvYmxlbSA9IDIzOworCWZpbmFsIGludCBJbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZh
aWx1cmUgPSAyMzsKIAlmaW5hbCBpbnQgQXBwbGljYWJsZU1ldGhvZE92ZXJyaWRkZW5CeUluYXBw
bGljYWJsZSA9IDI0OwogCWZpbmFsIGludCBDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zID0g
MjU7CiAJZmluYWwgaW50IE5vU3VjaE1ldGhvZE9uQXJyYXkgPSAyNjsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBj
OWYzZTkwLi45ZTc0OGRlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxNyArODcsNiBAQAogCXB1YmxpYyBz
dGF0aWMgZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGlu
dCBNT1JFX0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29t
cGF0aWJsZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9m
IHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgot
CSAqLwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4
LjUuMSkuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0J
LyoqIFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJs
aWMgc3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJv
dGgge0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGlu
ZmVyZW5jZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQ
UExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVi
bGljIFNjb3BlIHBhcmVudDsKIApAQCAtNjkxLDEwICs2ODAsMTAgQEAKIAkgKiBJbnRlcm5hbCB1
c2Ugb25seQogCSAqIEdpdmVuIGEgbWV0aG9kLCByZXR1cm5zIG51bGwgaWYgYXJndW1lbnRzIGNh
bm5vdCBiZSBjb252ZXJ0ZWQgdG8gcGFyYW1ldGVycy4KIAkgKiBXaWxsIGFuc3dlciBhIHN1YnN0
aXR1dGVkIG1ldGhvZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIGdlbmVyaWMgYW5kIHR5cGUgaW5m
ZXJlbmNlIGdvdCB0cmlnZ2VyZWQ7Ci0JICogaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBvcmlnaW5h
bGx5IGNvbXBhdGlibGUsIHRoZW4gc2ltcGx5IGFuc3dlciBpdCBiYWNrLgorCSAqIGluIGNhc2Ug
dGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIg
aXQgYmFjay4gCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsKSB7
Ci0JCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgaW52
b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsLCBmYWxzZSk7CisJcHJvdGVjdGVkIGZpbmFsIE1l
dGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2Qs
IFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkg
eworCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGlu
dm9jYXRpb25TaXRlLCBmYWxzZSk7CiAJfQkKIAkvKioKIAkgKiBJbnRlcm5hbCB1c2Ugb25seQpA
QCAtNzAyLDggKzY5MSw3IEBACiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2Qg
aW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJp
Z2dlcmVkOwogCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxl
LCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KIAkgKi8KLQlwcm90ZWN0ZWQgZmluYWwgTWV0
aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1ldGhvZCwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsCi0JCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0
ZSwgaW50IGluZmVyZW5jZUxldmVsLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMp
CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
TWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9u
U2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQog
CXsKIAkJVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRl
LmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1l
dGhvZC5wYXJhbWV0ZXJzOwpAQCAtNzM4LDkgKzcyNiwxNSBAQAogCQkJCWFyZ3VtZW50cyA9IG5l
d0FyZ3M7CiAJCQllbHNlICAvLyBlbnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgp
IGJlbG93IGNhbiB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2FsbGVyOiAo
VE9ETzogYWx3YXlzIGNvcHkgYmVmb3JlIHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCiAJCQkJU3lz
dGVtLmFycmF5Y29weShhcmd1bWVudHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRpbmdbYXJn
TGVuZ3RoXSwgMCwgYXJnTGVuZ3RoKTsKLQkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywg
dGhpcywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsKTsKKwkJCW1ldGhvZCA9IFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRo
b2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUpOwogCQkJaWYgKG1ldGhvZCA9PSBu
dWxsKSByZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJCQlpZiAoIW1ldGhvZC5pc1ZhbGlk
QmluZGluZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBjaGVjayBpc3N1ZSBpcyB0YWtpbmcg
cHJlY2VkZW5jZQorCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV84ICYmIG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24p
IHsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNp
dGU7CisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJl
bmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOwor
CQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVu
Y2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkKKwkJCQkJcmV0dXJuIG1ldGhvZDsgLy8gaW5mZXJl
bmNlIGlzIHJlc3BvbnNpYmxlLCBubyBuZWVkIHRvIHJlY2hlY2sKKwkJCX0KIAkJfSBlbHNlIGlm
IChnZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CiAJCQlpZiAobWV0aG9kIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJaWYgKCEo
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKS53YXNJbmZlcnJlZCkK
QEAgLTc1NSw3ICs3NDksNyBAQAogCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVn
YWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKIAkJCQl0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzID0gZmFsc2U7CiAJCX0KLQkJaWYgKChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwxOChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgaW52b2Nh
dGlvblNpdGUpKSA+IE5PVF9DT01QQVRJQkxFKSB7CisJCWlmICgocGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSkg
PiBOT1RfQ09NUEFUSUJMRSkgewogCQkJaWYgKChtZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5u
b3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJLy8gZ2VuZXJhdGUgcG9s
eW1vcnBoaWMgbWV0aG9kCiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5
bW9ycGhpY01ldGhvZChtZXRob2QsIGFyZ3VtZW50cyk7CkBAIC03NjcsMTUwICs3NjEsMTAgQEAK
IAkJLy8gaW4gd2hpY2ggY2FzZSB0aGlzIHByb2JsZW0gY2F0ZWdvcnkgd2lsbCBiZSBib2d1cwog
CQlpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiB0eXBlVmFyaWFibGVzICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBhcmd1bWVudHMsIFByb2JsZW1SZWFzb25zLlBh
cmFtZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2gpOworCQkvLyAxOC41LjEgaWdub3JlcyBhcmd1
bWVudHMgbm90IHBlcnRpbmVudCB0byBhcHBsaWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtl
biBpbnRvIGNvbnNpZGVyYXRpb24gbWV0aG9kIGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eSAoZS5n
LCBsYW1iZGEgc2hhcGUvYXJpdHkgbWlzbWF0Y2ggLi4uKQorCQlpZiAobWV0aG9kIGluc3RhbmNl
b2YgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKKwkJCXJldHVybiBuZXcg
UHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJh
bWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJs
ZSk7CiAJCXJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKLQl9Ci0KLQlwcml2YXRlIGludCBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJp
bmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgSW52
b2NhdGlvblNpdGUgc2l0ZSkgewotCQlqZGsxOGNoZWNrczoKLQkJaWYgKHNpdGUgaW5zdGFuY2Vv
ZiBJbnZvY2F0aW9uICYmIGNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52
b2NhdGlvbikgc2l0ZTsKLQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4ID0gaW52
b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIG1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eCAhPSBudWxsKSB7Ci0JCQkJCS8vIGluZmVy
ZW5jZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCi0JCQkJCWlmIChpbmZDdHgu
aXNWYXJBcmdzKCkpCi0JCQkJCQlyZXR1cm4gVkFSQVJHU19DT01QQVRJQkxFOwotCQkJCQlyZXR1
cm4gQ09NUEFUSUJMRTsKLQkJCQl9Ci0JCQl9Ci0JCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRp
b25zIHdoZXJlIHRoZSBvdXRlciBkaWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZToKLQkJCUV4
cHJlc3Npb25bXSBpbnZvY2F0aW9uQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsK
LQkJCWlmIChpbnZvY2F0aW9uQXJndW1lbnRzICE9IG51bGwpIHsKLQkJCQlJbm5lckluZmVyZW5j
ZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9IGludm9jYXRpb24uaW5uZXJJbmZlcmVuY2VI
ZWxwZXIoKTsKLQkJCQlpbnQgYXJnTGVuID0gaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7Ci0J
CQkJYm9vbGVhbiBpc1ZhckFyZ3NbXSA9IG5ldyBib29sZWFuWzFdOyAvLyBlbXVsYXRlIGFuIGlu
LW91dCBwYXJhbWV0ZXIgZm9yIGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKC4uKQotCQkJ
CWlzVmFyQXJnc1swXSA9IG1ldGhvZC5pc1ZhcmFyZ3MoKSAmJiBhcmdMZW4gIT0gbWV0aG9kLnBh
cmFtZXRlcnMubGVuZ3RoOyAvLyBpZiBzYW1lIGxlbmd0aHMsIGlzVmFyQXJncyBjYW4gc3RpbGwg
YmUgdXBkYXRlZCBiZWxvdwotCQkJCWludCBsZXZlbCA9IENPTVBBVElCTEU7Ci0JCQkJZm9yIChp
bnQgaSA9IDA7IGkgPCBhcmdMZW47IGkrKykgewotCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudFR5
cGUgPSBpIDwgYXJndW1lbnRzLmxlbmd0aCA/IGFyZ3VtZW50c1tpXSA6IG51bGw7IC8vIGxlbmd0
aCBtaXNtYXRjaCBtYXkgaGFwcGVuIGZyb20gQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5yZXNvbHZl
VHlwZSgpIGluIHRoZSBpZiAoYXJnSGFzRXJyb3IpIGJsb2NrLgotCQkJCQlpbnQgbmV4dExldmVs
ID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhl
bHBlciwgaW52b2NhdGlvbkFyZ3VtZW50c1tpXSwgYXJndW1lbnRUeXBlLCBhcmdMZW4sIGksIGlz
VmFyQXJncyk7Ci0JCQkJCWlmIChuZXh0TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQly
ZXR1cm4gbmV4dExldmVsOwotCQkJCQlpZiAobmV4dExldmVsID09IC0yKQotCQkJCQkJYnJlYWsg
amRrMThjaGVja3M7Ci0JCQkJCWxldmVsID0gTWF0aC5tYXgobGV2ZWwsICBuZXh0TGV2ZWwpOwot
CQkJCX0KLQkJCQlyZXR1cm4gbGV2ZWw7IC8vIG5laXRoZXIgTk9UX0NPTVBBVElCTEUgbm9yIHVu
a25vd24oLTIpIHNlZW4KLQkJCX0KLQkJfQotCQkvLyBmYWxsIGJhY2sgdG8gb2xkIG1ldGhvZDoK
LQkJYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyA9ICgoc2l0ZSBpbnN0YW5jZW9m
IFJlZmVyZW5jZUV4cHJlc3Npb24pICYmICgoUmVmZXJlbmNlRXhwcmVzc2lvbikgc2l0ZSkudHJp
YWxSZXNvbHV0aW9uKTsKLQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRo
b2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVu
Y2VWYXJpYWJsZXMpOwotCX0KLQotCXByaXZhdGUgaW50IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJv
bUlubmVyKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lcklu
ZmVyZW5jZUhlbHBlciwgRXhwcmVzc2lvbiBpbnZvY0FyZywgVHlwZUJpbmRpbmcgYXJnVHlwZSwg
aW50IGFyZ0xlbiwgaW50IGksIGJvb2xlYW5bXSBpc1ZhckFyZ3MpCi0JewotCQlpbnQgY29tcGF0
aWJsZSA9IGlzVmFyQXJnc1swXSA/IFZBUkFSR1NfQ09NUEFUSUJMRSA6IENPTVBBVElCTEU7Ci0J
CVR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSA9IGludm9jQXJnLnJlc29sdmVkVHlwZTsKLQkJVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0
aG9kLnBhcmFtZXRlcnMsIGksIGlzVmFyQXJnc1swXSk7Ci0JCWlmICghaXNWYXJBcmdzWzBdICYm
IHNob3VsZFRyeVZhcmFyZ3MobWV0aG9kLCByZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpKSB7Ci0J
CQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQx
OC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOwotCQl9Ci0JCWlmICh0
YXJnZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7IC8vIG1pc21hdGNo
aW5nIG51bWJlciBvZiBhcmdzIG9yIG90aGVyIHNldmVyZSBwcm9ibGVtIGluc2lkZSBtZXRob2Qg
YmluZGluZwotCQlpbnQgbGV2ZWwgPSAtMjsgLy8gZG9uJ3Qga25vdwotCQlpZiAoaW52b2NBcmcg
aW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIHJlc29sdmVkVHlwZSAhPSBudWxsKSB7Ci0JCQlJbnZv
Y2F0aW9uIGlubmVyUG9seSA9IChJbnZvY2F0aW9uKSBpbnZvY0FyZzsKLQkJCWxldmVsID0gcGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQlp
ZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1
YWxzKGFyZ1R5cGUsIHJlc29sdmVkVHlwZSkgJiYgaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVs
bCkKLQkJCQkJaW5uZXJJbmZlcmVuY2VIZWxwZXIucmVnaXN0ZXJJbm5lclJlc3VsdChtZXRob2Qs
IHJlc29sdmVkVHlwZSwgYXJnTGVuLCBpKTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJs
ZSwgbGV2ZWwpOwotCQkJfSBlbHNlIHsKLQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9
IGlubmVyUG9seS5iaW5kaW5nKG51bGwsIGZhbHNlLCBudWxsKTsgLy8gMS4gdHJ5IHdpdGhvdXQg
dXBkYXRlCi0JCQkJaWYgKGlubmVyQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgewotCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcgaW5uZXJQYXJhbWV0ZXJpemVkID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgaW5uZXJCaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5l
clBvbHkuZ2V0SW5mZXJlbmNlQ29udGV4dChpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQlpZiAo
aW5mQ3R4MTggIT0gbnVsbCAmJiAhaW5mQ3R4MTguaGFzUmVzdWx0Rm9yKHRhcmdldFR5cGUpKSB7
Ci0JCQkJCQkvLyBub3QgZGV0ZWN0ZWQgYXMgY29tcGF0aWJsZSwgYmVjYXVzZSBpbmZlcmVuY2Ug
c3RpbGwgbmVlZHMgdG8gY29tcGxldGU/Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUo
dGFyZ2V0VHlwZSk7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIHNvbHV0aW9uID0gaW5mQ3R4MTguaW5m
ZXJJbnZvY2F0aW9uVHlwZShpbm5lclBvbHksIGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCQlp
ZiAoc29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJ
CQkJaWYgKGlubmVyUG9seS51cGRhdGVCaW5kaW5ncyhzb2x1dGlvbiwgdGFyZ2V0VHlwZSkpIHsK
LQkJCQkJCQkJaWYgKGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCQkJCQlpbm5l
ckluZmVyZW5jZUhlbHBlci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwgaW52b2NBcmcucmVz
b2x2ZWRUeXBlLCBhcmdMZW4sIGkpOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoc29sdXRpb24ucmV0
dXJuVHlwZSAhPSBudWxsKSB7Ci0JCQkJCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKHNvbHV0aW9uLnJldHVyblR5cGUsIHRhcmdldFR5cGUpOwotCQkJCQkJCQlpZiAobGV2
ZWwgIT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJs
ZSwgbGV2ZWwpOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVk
VHlwZShudWxsKTsKLQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJfSBlbHNlIGlm
IChpbm5lclBvbHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQkJLy8g
bm90IGRldGVjdGVkIGFzIGNvbXBhdGlibGUsIGJlY2F1c2UgaXRzIGEgZGlhbW9uZCB3aG9zZSB0
eXBlIGhhc24ndCB5ZXQgYmVlbiBpbmZlcnJlZD8KLQkJCQkJCVR5cGVCaW5kaW5nW10gdHlwZUFy
Z3VtZW50cyA9IHJlc29sdmVkVHlwZS50eXBlQXJndW1lbnRzKCk7Ci0JCQkJCQlpZiAodHlwZUFy
Z3VtZW50cyAhPSBudWxsICYmIHR5cGVBcmd1bWVudHMubGVuZ3RoID09IDApIHsKLQkJCQkJCQlB
bGxvY2F0aW9uRXhwcmVzc2lvbiBhbGxvYyA9IChBbGxvY2F0aW9uRXhwcmVzc2lvbikgaW5uZXJQ
b2x5OwotCQkJCQkJCWlmICgoYWxsb2MudHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9
IDApIHsKLQkJCQkJCQkJLy8gbm90LXlldC1pbmZlcnJlZCBkaWFtb25kOiBlcmFzdXJlIGNvbXBh
dGliaWxpdHkgc2hvdWxkIHN1ZmZpY2UsIGRldGFpbCB3aWxsIGJlIGNoZWNrZWQgdXNpbmcgaW5m
ZXJlbmNlCi0JCQkJCQkJCWlmIChyZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRU
eXBlLmVyYXN1cmUoKSwgdGhpcykpCi0JCQkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZTsKLQkJCQkJ
CQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJfQotCQkJ
CX0gZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsK
LQkJCQkJTWV0aG9kQmluZGluZyB1cGRhdGVkTWV0aG9kID0gaW5uZXJQb2x5LmJpbmRpbmcodGFy
Z2V0VHlwZSwgZmFsc2UsIG51bGwpOyAvLyAyLiB0cnkgd2l0aCB1cGRhdGluZwotCQkJCQlpZiAo
dXBkYXRlZE1ldGhvZCAhPSBpbm5lckJpbmRpbmcgJiYgdXBkYXRlZE1ldGhvZCAhPSBudWxsKSB7
Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQlpZiAo
dXBkYXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUp
KQotCQkJCQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxF
OwotCQkJCQkJfSBlbHNlIGlmICh1cGRhdGVkTWV0aG9kLnByb2JsZW1JZCgpID09IFByb2JsZW1S
ZWFzb25zLkFtYmlndW91cykgewotCQkJCQkJCWxldmVsID0gLTI7IC8vIG5laXRoZXIgZ29vZCBu
b3IgYmFkLCBhbnN3ZXIgInVua25vd24iCi0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9Ci0J
CX0gZWxzZSBpZiAoaW52b2NBcmcuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQlpZiAoaW52b2NB
cmcgaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKLQkJCQlDb25kaXRpb25hbEV4
cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBpbnZvY0FyZzsKLQkJCQlpbnQg
bGV2ZWwxID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVy
ZW5jZUhlbHBlciwgY2UudmFsdWVJZlRydWUsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdz
KTsKLQkJCQlpZiAobGV2ZWwxID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NP
TVBBVElCTEU7Ci0JCQkJaW50IGxldmVsMiA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVy
KG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVlSWZGYWxzZSwgYXJnVHlwZSwg
YXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCWlmIChsZXZlbDIgPT0gTk9UX0NPTVBBVElCTEUp
Ci0JCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgobGV2ZWwx
LCBsZXZlbDIpOwotCQkJfQotCQkJLy8gTEUgb3IgUkU6Ci0JCQlpZiAoaW52b2NBcmcuaXNDb21w
YXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJ
CWlmICghaXNWYXJBcmdzWzBdICYmIG1ldGhvZC5pc1ZhcmFyZ3MoKSkgeyAvLyBjYW4ndCB1c2Ug
c2hvdWxkVHJ5VmFyYXJncyB3aXRob3V0IGEgcmVzb2x2ZWRUeXBlLCBzbyBqdXN0IHRyeSBpdDoK
LQkJCQlpc1ZhckFyZ3NbMF0gPSB0cnVlOwotCQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250
ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJCQlpZiAo
dGFyZ2V0VHlwZSAhPSBudWxsICYmIGludm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlw
ZSwgdGhpcykpCi0JCQkJCXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7Ci0JCQl9Ci0JCQlyZXR1
cm4gTk9UX0NPTVBBVElCTEU7Ci0JCX0gZWxzZSBpZiAocmVzb2x2ZWRUeXBlICE9IG51bGwgJiYg
cmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCS8vIG5lZWQgdG8gaGFuZGxlICJu
b3JtYWwiIGV4cHJlc3Npb25zIHRvbywgc2luY2UgbWl4ZWQgcG9seS9zdGFuZGFsb25lIGFyZ3Vt
ZW50IGxpc3RzIG11c3QgYmUgZnVsbHkgYW5hbHl6ZWQuCi0JCQlyZXR1cm4gcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCX0KLQkJcmV0dXJu
IGxldmVsOwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBzaG91bGRUcnlWYXJhcmdzKE1ldGhvZEJp
bmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZyByZXNvbHZlZFR5cGUsIFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUpIHsKLQkJaWYgKCFtZXRob2QuaXNWYXJhcmdzKCkpCi0JCQlyZXR1cm4gZmFsc2U7Ci0J
CWlmICh0YXJnZXRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8gb2ZmIHJhbmdlCi0J
CWlmICh0YXJnZXRUeXBlLmlzQXJyYXlUeXBlKCkgJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwgJiYg
IXJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJcmV0
dXJuIHRydWU7CS8vIG5vdCBhIGRpcmVjdCBtYXRjaCBidXQgaG9wZSB0byBpbXByb3ZlCi0JCXJl
dHVybiBmYWxzZTsKIAl9CiAKIAkvKioKQEAgLTEyNjcsNyArMTEyMSw3IEBACiAJCQluZXh0Ogog
CQkJZm9yIChpbnQgaSA9IHN0YXJ0Rm91bmRTaXplOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJ
CQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxl
bWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJ
CQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoY29u
Y3JldGVNYXRjaGVzICE9IG51bGwpIHsKQEAgLTEyOTcsOCArMTE1MSw2IEBACiAJCQkJCXJldHVy
biBwcm9ibGVtTWV0aG9kOyAvLyBjYW4gYmUgbnVsbAogCQkJfQogCQkJY29uY3JldGVNYXRjaCA9
IGNhbmRpZGF0ZXNbMF07Ci0JCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBl
cmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQljb25jcmV0ZU1hdGNoID0gaW5m
ZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29uY3JldGVNYXRjaCwgYXJndW1lbnRU
eXBlcyk7CiAJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsKQogCQkJCWNvbXBpbGF0aW9uVW5p
dFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29uY3JldGVNYXRjaC50aHJvd25FeGNlcHRp
b25zKTsKIAkJCXJldHVybiBjb25jcmV0ZU1hdGNoOwpAQCAtMTM3MSw3ICsxMjIzLDcgQEAKIAkJ
CQkvLyB0YXJnZXRpbmcgYSBnZW5lcmljIG1ldGhvZCBjb3VsZCBmaW5kIGFuIGV4YWN0IG1hdGNo
IHdpdGggdmFyaWFibGUgcmV0dXJuIHR5cGUKIAkJCQlpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMoKSAhPSBudWxsKSB7CiAJCQkJCS8vIGNvbXB1dGVDb21wYXRpYmxlTWV0
aG9kKC4uKSB3aWxsIHJldHVybiBhIFBvbHltb3JwaGljTWV0aG9kQmluZGluZyBpZiBuZWVkZWQK
LQkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJCQkJZXhh
Y3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRU
eXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCX0gZWxzZSBpZiAoKGV4YWN0TWV0aG9kLnRhZ0Jp
dHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJ
CQkvLyBnZW5lcmF0ZSBwb2x5bW9ycGhpYyBtZXRob2QKIAkJCQkJcmV0dXJuIHRoaXMuZW52aXJv
bm1lbnQoKS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBl
cyk7CkBAIC0xNzYzLDIyICsxNjE1LDEzIEBACiAJCQkvLyBhcmd1bWVudCB0eXBlIGNvbXBhdGli
aWxpdHkgY2hlY2sKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJ
CQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxl
bWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJ
CQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoZm91
bmRTaXplID09IDEgJiYgY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeShyZWNlaXZlclR5cGUs
IGludm9jYXRpb25TaXRlLCB0aGlzKSkgewogCQkJCQkJCS8vIHJldHVybiB0aGUgc2luZ2xlIHZp
c2libGUgbWF0Y2ggbm93CiAJCQkJCQkJaWYgKHNlYXJjaEZvckRlZmF1bHRBYnN0cmFjdE1ldGhv
ZCkKIAkJCQkJCQkJcmV0dXJuIGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBl
LCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5
U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9kQmluZGluZyBbXSB7Y29tcGF0aWJsZU1ldGhvZH0pOwot
Ly8gPT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczog
PT09PQotCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBpbmZlckludm9jYXRpb25UeXBl
KGludm9jYXRpb25TaXRlLCBjb21wYXRpYmxlTWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKLQkJCQkJ
CQlpZiAoaW1wcm92ZWQgIT0gbnVsbCAmJiBpbXByb3ZlZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0J
CQkJCQkJCWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJ
CQkJCQlwcm9ibGVtTWV0aG9kID0gaW1wcm92ZWQ7Ci0JCQkJCQkJCWNvbnRpbnVlOwotCQkJCQkJ
CX0KLS8vID09PT0gMS44ID09PT0KIAkJCQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5j
ZXMoY29tcGF0aWJsZU1ldGhvZC50aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJCQlyZXR1cm4gY29t
cGF0aWJsZU1ldGhvZDsKIAkJCQkJCX0KQEAgLTE4ODcsOCArMTczMCw3IEBACiAJCQljYXNlIDEg
OgogCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCXJldHVybiBm
aW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1l
dGhvZEJpbmRpbmcgW10geyBjYW5kaWRhdGVzWzBdIH0pOwotCQkJCS8vIDEuODogR2l2ZSBpbmZl
cmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJ
CQljYW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRh
dGVzWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQljYW5kaWRhdGUgPSBjYW5kaWRhdGVzWzBdOwog
CQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZl
cmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRl
OwpAQCAtMjM4MCw3ICsyMjIyLDEwIEBACiAJCX0KIAkJaWYgKGV4YWN0TWV0aG9kID09IG51bGwg
fHwgIWV4YWN0TWV0aG9kLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCXJl
dHVybiBudWxsOwotCQlpZiAoZXhhY3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgZXhhY3RNZXRob2Qu
dHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlv
blNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkKKwkJZmluYWwgVHlwZUJp
bmRpbmdbXSB0eXBlQXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVu
dHMoKTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdE1ldGhv
ZC50eXBlVmFyaWFibGVzKCk7CisJCWlmIChleGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCAodHlw
ZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmICh0eXBlQXJndW1lbnRz
ID09IG51bGwgfHwgdHlwZUFyZ3VtZW50cy5sZW5ndGggIT0gdHlwZVZhcmlhYmxlcy5sZW5ndGgp
KSkKIAkJCXJldHVybiBudWxsOwogCQkKIAkJaWYgKHJlY2VpdmVyVHlwZS5pc0FycmF5VHlwZSgp
KSB7CkBAIC0yMzk1LDYgKzIyNDAsMTAgQEAKIAkJewogCQkJcmV0dXJuIGVudmlyb25tZW50KCku
Y3JlYXRlR2V0Q2xhc3NNZXRob2QocmVjZWl2ZXJUeXBlLCBleGFjdE1ldGhvZCwgdGhpcyk7CiAJ
CX0KKwkJCisJCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMp
IAorCQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2QoZXhhY3RNZXRob2QsIHR5cGVBcmd1bWVudHMpOworCQogCQlyZXR1cm4gZXhhY3RNZXRob2Q7
CiAJfQogCQkKQEAgLTI0MTcsMTkgKzIyNjYsMjYgQEAKIAkJTWV0aG9kQmluZGluZyBleGFjdENv
bnN0cnVjdG9yID0gbnVsbDsKIAkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2UocmVjZWl2
ZXJUeXBlKTsKIAkJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0
aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQpOworCQlmaW5hbCBUeXBlQmluZGluZ1tdIGdlbmVyaWNU
eXBlQXJndW1lbnRzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKIAkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKIAkJCU1ldGhvZEJpbmRpbmcgY29uc3RydWN0b3IgPSBtZXRob2RzW2ldOwogCQkJaWYgKCFj
b25zdHJ1Y3Rvci5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQkJY29udGlu
dWU7CiAJCQlpZiAoY29uc3RydWN0b3IuaXNWYXJhcmdzKCkpCiAJCQkJcmV0dXJuIG51bGw7Ci0J
CQlpZiAoY29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJ
QUJMRVMgJiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQor
CQkJaWYgKGNvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFS
SUFCTEVTICYmIGdlbmVyaWNUeXBlQXJndW1lbnRzID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7
CiAJCQlpZiAoZXhhY3RDb25zdHJ1Y3RvciA9PSBudWxsKSB7CiAJCQkJZXhhY3RDb25zdHJ1Y3Rv
ciA9IGNvbnN0cnVjdG9yOwogCQkJfSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJ
fQorCQlmaW5hbCBUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0Q29u
c3RydWN0b3IudHlwZVZhcmlhYmxlcygpOworCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKSB7CisJCQlpZiAodHlwZVZhcmlhYmxlcy5sZW5ndGggIT0gZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMubGVuZ3RoKQorCQkJCXJldHVybiBudWxsOworCQkJZXhhY3RDb25z
dHJ1Y3RvciA9IGVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qo
ZXhhY3RDb25zdHJ1Y3RvciwgZ2VuZXJpY1R5cGVBcmd1bWVudHMpOwogCQl9CiAJCXJldHVybiBl
eGFjdENvbnN0cnVjdG9yOwogCX0KQEAgLTI0NTgsNyArMjMxNCw3IEBACiAJCQlpZiAobWV0aG9k
QmluZGluZyAhPSBudWxsICYmIG1ldGhvZEJpbmRpbmcuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNp
dGUsIHRoaXMpKSB7CiAJCQkgICAgLy8gdGFyZ2V0aW5nIGEgbm9uIGdlbmVyaWMgY29uc3RydWN0
b3Igd2l0aCB0eXBlIGFyZ3VtZW50cyA/CiAJCQkgICAgaWYgKGludm9jYXRpb25TaXRlLmdlbmVy
aWNUeXBlQXJndW1lbnRzKCkgIT0gbnVsbCkKLQkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRp
b25TaXRlLCBGVUxMX0lORkVSRU5DRSk7CisJCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9u
U2l0ZSk7CiAJCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5n
W10gbWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwg
YXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtMjQ3Miw3ICsyMzI4LDcgQEAKIAkJCWludCBjb21w
YXRpYmxlSW5kZXggPSAwOwogCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbnVsbDsK
IAkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsg
aSsrKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQ
UExJQ0FCSUxJVFkpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlKTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21w
YXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCQljb21wYXRpYmxlW2NvbXBhdGli
bGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC0yNDk1LDggKzIzNTEsNyBAQAogCQkJ
CQl2aXNpYmxlW3Zpc2libGVJbmRleCsrXSA9IG1ldGhvZDsKIAkJCX0KIAkJCWlmICh2aXNpYmxl
SW5kZXggPT0gMSkgewotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVy
Zm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0
aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJ
cmV0dXJuIHZpc2libGVbMF07CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDApCiAJCQkJ
cmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZygKQEAgLTI3NjAsNyArMjYxNSw3IEBACiAJ
CQkJCQkJCWlmIChmb3VuZFByb2JsZW0gPT0gbnVsbCkKIAkJCQkJCQkJCWZvdW5kUHJvYmxlbSA9
IHBvc3NpYmxlOyAvLyBhbnN3ZXIgYXMgZXJyb3IgY2FzZSBtYXRjaAogCQkJCQkJCX0gZWxzZSBp
ZiAocG9zc2libGUuaXNTdGF0aWMoKSkgewotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGli
bGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCQkJCQlNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhv
ZCAhPSBudWxsKSB7CiAJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkodW5pdFNj
b3BlLmZQYWNrYWdlKSkgewpAQCAtMzU5Niw4ICszNDUxLDggQEAKIAkJCWZvciAoaW50IGkgPSAo
b25lUGFyYW1zTGVuZ3RoID4gdHdvUGFyYW1zTGVuZ3RoID8gdHdvUGFyYW1zTGVuZ3RoIDogb25l
UGFyYW1zTGVuZ3RoKSAtIDI7IGkgPj0gMDsgaS0tKQogCQkJCWlmIChUeXBlQmluZGluZy5ub3RF
cXVhbHMob25lUGFyYW1zW2ldLCB0d29QYXJhbXNbaV0pICYmICFvbmVQYXJhbXNbaV0uaXNDb21w
YXRpYmxlV2l0aCh0d29QYXJhbXNbaV0pKQogCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQlpZiAocGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0g
Tk9UX0NPTVBBVElCTEUKLQkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywg
b25lUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gVkFSQVJHU19DT01QQVRJQkxFKQorCQkJaWYgKHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChvbmUsIHR3b1BhcmFtcywgdHJ1ZSkgPT0gTk9UX0NP
TVBBVElCTEUKKwkJCQkJJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFy
YW1zLCB0cnVlKSA9PSBWQVJBUkdTX0NPTVBBVElCTEUpCiAJCQkJcmV0dXJuIHRydWU7CiAJCX0K
IAkJcmV0dXJuIGZhbHNlOwpAQCAtNDM3Miw0NCArNDIyNywxMiBAQAogCXByb3RlY3RlZCBmaW5h
bCBNZXRob2RCaW5kaW5nIG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1td
IHZpc2libGUsIGludCB2aXNpYmxlU2l6ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBm
aW5hbCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgUmVmZXJlbmNlQmluZGluZyByZWNl
aXZlclR5cGUpIHsKIAogCQlib29sZWFuIGlzSmRrMTggPSBjb21waWxlck9wdGlvbnMoKS5zb3Vy
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84OwotCi0JCS8vIGNvbW1vbiBwYXJ0
IGZvciBhbGwgY29tcGxpYW5jZSBsZXZlbHM6CiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMg
PSBuZXcgaW50W3Zpc2libGVTaXplXTsKLQkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7Ci0JCWZv
ciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewotCQkJVHlwZUJpbmRpbmdbXSBh
cmdUeXBlcyA9IGFyZ3VtZW50VHlwZXM7Ci0JCQlpZiAoaXNKZGsxOCAmJiBpbnZvY2F0aW9uU2l0
ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5l
ckluZmVyZW5jZUhlbHBlciA9ICgoSW52b2NhdGlvbilpbnZvY2F0aW9uU2l0ZSkuaW5uZXJJbmZl
cmVuY2VIZWxwZXIoKTsKLQkJCQlpZiAoaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJ
CQkJYXJnVHlwZXMgPSBpbm5lckluZmVyZW5jZUhlbHBlci5nZXRBcmd1bWVudFR5cGVzRm9yQ2Fu
ZGlkYXRlKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpOwotCQkJfQotCQkJaWYgKChjb21wYXRp
YmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHZpc2libGVbaV0s
IGFyZ1R5cGVzKSkgIT0gTk9UX0NPTVBBVElCTEUpIHsKLQkJCQlpZiAoaSAhPSBjb21wYXRpYmxl
Q291bnQpIHsKLQkJCQkJdmlzaWJsZVtjb21wYXRpYmxlQ291bnRdID0gdmlzaWJsZVtpXTsKLQkJ
CQkJY29tcGF0aWJpbGl0eUxldmVsc1tjb21wYXRpYmxlQ291bnRdID0gY29tcGF0aWJpbGl0eUxl
dmVsc1tpXTsKLQkJCQl9Ci0JCQkJY29tcGF0aWJsZUNvdW50Kys7Ci0JCQl9Ci0JCX0KLS8vIFRP
RE86IERpc2FibGVkLCBiZWNhdXNlIHdlIGtub3cgYSBzaXR1YXRpb24gd2hlcmUgdGhpcyBpcyBl
eHBlY3RlZCwgc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80Mjk0OTAKLS8vCQlpZiAoY29t
cGF0aWJsZUNvdW50ICE9IHZpc2libGVTaXplKSB7Ci0vLwkJCXByb2JsZW1SZXBvcnRlcigpLmdl
bmVyaWNJbmZlcmVuY2VQcm9ibGVtKCIoUmVjb3ZlcmVkKSBJbnRlcm5hbCBpbmNvbnNpc3RlbmN5
IHdoaWxlIGNoZWNraW5nIGludm9jYXRpb24gYW1iaWd1aXR5IiwgaW52b2NhdGlvblNpdGUsIFBy
b2JsZW1TZXZlcml0aWVzLldhcm5pbmcpOyAvLyROT04tTkxTLTEkCi0vLwkJfQotCQlpZiAoY29t
cGF0aWJsZUNvdW50ID09IDApIHsKLQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
dmlzaWJsZVswXS5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91
bmQpOwotCQl9IGVsc2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7Ci0JCQlNZXRob2RCaW5k
aW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2li
bGVbMF0sIGFyZ3VtZW50VHlwZXMpOwotCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQotCQkJCWNv
bXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93
bkV4Y2VwdGlvbnMpOwotCQkJcmV0dXJuIGNhbmRpZGF0ZTsKLQkJfQotCQlpZiAoY29tcGF0aWJs
ZUNvdW50ICE9IHZpc2libGVTaXplKSB7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KHZpc2libGUsIDAs
IHZpc2libGUgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZSA9IGNvbXBhdGlibGVDb3Vu
dF0sIDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KGNvbXBhdGliaWxp
dHlMZXZlbHMsIDAsIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W2NvbXBhdGlibGVDb3Vu
dF0sIDAsIGNvbXBhdGlibGVDb3VudCk7Ci0JCX0KKwkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNp
YmxlU2l6ZTsgaSsrKQorCQkJY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRlckNvbXBh
dGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJCiAJCQogCQlNZXRo
b2RCaW5kaW5nW10gbW9yZVNwZWNpZmljID0gbmV3IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemVd
OwotCiAJCWlmIChpc0pkazE4KSB7CiAJCQkvLyAxNS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1vc3Qg
U3BlY2lmaWMgTWV0aG9kCiAJCQlpbnQgY291bnQgPSAwOwpAQCAtNDQ2Myw3ICs0Mjg2LDcgQEAK
IAkJCWlmIChjb3VudCA9PSAwKSB7CiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGlu
Zyh2aXNpYmxlWzBdLCB2aXNpYmxlWzBdLnNlbGVjdG9yLCB2aXNpYmxlWzBdLnBhcmFtZXRlcnMs
IFByb2JsZW1SZWFzb25zLkFtYmlndW91cyk7CiAJCQl9IGVsc2UgaWYgKGNvdW50ID09IDEpIHsK
LQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2Nh
dGlvblNpdGUsIG1vcmVTcGVjaWZpY1swXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJTWV0aG9kQmlu
ZGluZyBjYW5kaWRhdGUgPSBtb3JlU3BlY2lmaWNbMF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBu
dWxsKQogCQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNh
bmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDUx
Niw3ICs0MzM5LDcgQEAKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlNZXRob2RCaW5kaW5nIGFj
Y2VwdGFibGUgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RUb1Rlc3QsIHRpZWJyZWFr
TWV0aG9kLnBhcmFtZXRlcnMsCi0JCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlvblNpdGUsIElOVk9D
QVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKKwkJCQkJCQkJdGllQnJl
YWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKIAkJCQkJCS8q
IFRoZXJlIGFyZSA0IGNob2ljZXMgdG8gY29uc2lkZXIgd2l0aCBjdXJyZW50ICYgbmV4dCA6CiAJ
CQkJCQkgZm9vKEIpICYgZm9vKEEpIHdoZXJlIEIgZXh0ZW5kcyBBCiAJCQkJCQkgMS4gdGhlIDIg
bWV0aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0IGVhY2ggb3RoZXJzIHBhcmFtZXRlcnMpIC0+
IHdhbnQgdG8gY29udGludWUKQEAgLTQ1NDAsOCArNDM2Myw3IEBACiAJCQlpZiAoY291bnQgPT0g
MSkgewogCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykgewogCQkJCQlp
ZiAobW9yZVNwZWNpZmljW2ldICE9IG51bGwpIHsKLQkJCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVu
Y2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQkJ
CU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9u
U2l0ZSwgdmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNh
bmRpZGF0ZSA9IHZpc2libGVbaV07CiAJCQkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJ
CQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUu
dGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDY2Miw4ICs0
NDg0LDcgQEAKIAkJCQlpZiAobW9zdFNwZWNpZmljRXhjZXB0aW9ucyAhPSBudWxsICYmIG1vc3RT
cGVjaWZpY0V4Y2VwdGlvbnMgIT0gY3VycmVudC50aHJvd25FeGNlcHRpb25zKSB7CiAJCQkJCXJl
dHVybiBuZXcgTW9zdFNwZWNpZmljRXhjZXB0aW9uTWV0aG9kQmluZGluZyhjdXJyZW50LCBtb3N0
U3BlY2lmaWNFeGNlcHRpb25zKTsKIAkJCQl9Ci0JCQkJLy8gMS44OiBCZWZvcmUgcmV0dXJuaW5n
IGdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4
LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGN1
cnJlbnQsIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVybiBjdXJyZW50OwogCQkJfQogCQl9CiAK
QEAgLTQ3MjgsOSArNDU0OSw5IEBACiAJfQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
KSB7Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVu
dHMsIGZhbHNlLCBmYWxzZSk7CisJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwo
bWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKIAl9CQotCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3Vt
ZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29s
ZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0
ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCWludCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMu
bGVuZ3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKQEAgLTQ3NjIsMTQg
KzQ1ODMsMTQgQEAKIAkJCQlUeXBlQmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4
XTsgLy8gaXMgYW4gQXJyYXlCaW5kaW5nIGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBh
cmcgPSBhcmd1bWVudHNbbGFzdEluZGV4XTsKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxz
KHBhcmFtLCBhcmcpKSB7Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZl
cmVuY2VWYXJpYWJsZXMpOworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAo
bGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNh
bGxlZCB3aXRoIFgKIAkJCQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50
c1R5cGUoKTsKIAkJCQkJCWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJ
YXJnID0gKChBcnJheUJpbmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJ
CQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJl
YWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9D
T01QQVRJQkxFKQorCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBh
cmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQog
CQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJCWxldmVsID0gVkFSQVJHU19DT01Q
QVRJQkxFOyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVlZGVkCiAJCQkJCX0KQEAgLTQ3NzksNyArNDYw
MCw3IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRl
cnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5k
ZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJy
ZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5
QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJ
CQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21w
YXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
LCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlp
ZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpICYmIHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09
IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJfQog
CQkJCX0gIGVsc2UgaWYgKGxhc3RJbmRleCAhPSBhcmdMZW5ndGgpIHsgLy8gY2FuIGNhbGwgZm9v
KGludCBpLCBYIC4uLiB4KSB3aXRoIGZvbygxKSBidXQgTk9UIGZvbygpOwpAQCAtNDc5NSw3ICs0
NjE2LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVC
aW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdMZW5n
dGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6
IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkg
ewotCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBh
cmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFy
aWFibGVzKTsKKwkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwo
YXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAobmV3
TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJ
CQlpZiAobmV3TGV2ZWwgPiBsZXZlbCkKQEAgLTQ4MjQsNyArNDY0NSw3IEBACiAJCXJldHVybiBO
T1RfQ09NUEFUSUJMRTsKIAl9CiAJCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25t
ZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVy
YXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmly
b25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCS8vIG9u
bHkgY2FsbGVkIGlmIGVudi5vcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzUKIAkJaWYgKGFyZyA9PSBudWxsIHx8IHBhcmFtID09IG51bGwpCiAJCQlyZXR1cm4g
Tk9UX0NPTVBBVElCTEU7CkBAIC00ODQzLDExICs0NjY0LDYgQEAKIAkJCVR5cGVCaW5kaW5nIGNv
bnZlcnRlZFR5cGUgPSBlbnYuY29tcHV0ZUJveGluZ1R5cGUoYXJnKTsKIAkJCWlmIChUeXBlQmlu
ZGluZy5lcXVhbHNFcXVhbHMoY29udmVydGVkVHlwZSwgcGFyYW0pIHx8IGNvbnZlcnRlZFR5cGUu
aXNDb21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykpCiAJCQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFU
SUJMRTsKLQkJfQotCQlpZiAodG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMgJiYgKCFhcmcuaXNQ
cm9wZXJUeXBlKGZhbHNlKSB8fCAhcGFyYW0uaXNQcm9wZXJUeXBlKGZhbHNlKSkpIHsKLQkJCS8v
IGR1cmluZyB0eXBlIGluZmVyZW5jZSBpbnZvbHZpbmcgYSBSZWZlcmVuY2VFeHByZXNzaW9uIGln
bm9yZSBpbmNvbXBhdGliaWxpdHkgZHVlIHRvIGFuIGluZmVyZW5jZSB2YXJpYWJsZSwKLQkJCS8v
IGtub3dpbmcgdGhhdCB3ZSB3aWxsIHByb2R1Y2UgY29uc3RyYWludHMgdGhhdCB3aWxsIGVuc3Vy
ZSBjb21wYXRpYmxlIGluc3RhbnRpYXRpb24gKGlmIG9uZSBleGlzdHMpLgotCQkJcmV0dXJuIENP
TVBBVElCTEU7IAogCQl9CiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CkBAIC00OTMzLDcg
KzQ3NDksNyBAQAogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRp
Y2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qg
c3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVs
ZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8K
LQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3Np
bmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb24gYWxs
b2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcg
b3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFs
IEludm9jYXRpb25TaXRlIGFsbG9jYXRpb25TaXRlKSB7CiAJCQogCQkvLyBhbGxvY2F0aW9uVHlw
ZSBpcyB0aGUgZGlhbW9uZCB0eXBlLiBvcmlnaW5hbEVuY2xvc2luZ1R5cGUgaXMgdGhlIHJlYWwg
ZW5jbG9zaW5nIHR5cGUgPT0+IG1heSBiZSBwYXJhbWV0ZXJpemVkLCBwYXJhbWV0ZXJpemVkIHdp
dGggb3duIHR5cGUgdmFyaWFibGVzLCByYXcsIGp1c3QgcGxhaW4gdHlwZSBvciBudWxsLgogCQlp
bnQgY2xhc3NUeXBlVmFyaWFibGVzQXJpdHkgPSAwOwpAQCAtNTA2MCw3ICs0ODc2LDcgQEAKIAkJ
TWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlp
bnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykg
ewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwg
QVBQTElDQUJJTElUWSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFs
bG9jYXRpb25TaXRlKTsKIAkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQlp
ZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQljb21wYXRpYmxlW2Nv
bXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC01MDY5LDEwICs0ODg1LDYg
QEAKIAogCQlpZiAoY29tcGF0aWJsZUluZGV4ID09IDApIHsKIAkJCXJldHVybiBudWxsOwotCQl9
Ci0JCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMSkgewotCQkJLy8gMS44OiBHaXZlIGluZmVyZW5j
ZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJY29t
cGF0aWJsZVswXSA9IGluZmVySW52b2NhdGlvblR5cGUoYWxsb2NhdGlvblNpdGUsIGNvbXBhdGli
bGVbMF0sIGFyZ3VtZW50VHlwZXMpOwogCQl9CiAJCXJldHVybiBjb21wYXRpYmxlSW5kZXggPT0g
MSA/IGNvbXBhdGlibGVbMF0gOiBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKGNvbXBhdGlibGUs
IGNvbXBhdGlibGVJbmRleCwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIGFsbG9jYXRp
b25UeXBlKTsKIAl9CkBAIC01MTQwLDMxICs0OTUyLDUgQEAKIAkJCQlicmVhazsKIAkJCX0KIAkJ
fQotCX0KLQotCS8qKgotCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGljYWJsZSBtZXRob2QsIGNo
ZWNrIGlmIGl0IGhhcyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVk
LgotCSAqIElmIHNvIHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZl
cmVuY2UgYW5kIHJldHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAotCSAqIG90aGVyd2lzZSByZXR1
cm4gdGhlIGFwcGxpY2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KLQkgKi8KLQlwcm90ZWN0ZWQgTWV0
aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRlIGludm9jYXRpb25T
aXRlLCBNZXRob2RCaW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBl
cykgewotCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlJ
bnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7Ci0JCQlp
ZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgewotCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVk
TWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsK
LQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5j
ZUNvbnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ICE9IG51bGwg
JiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZvcihpbnZvY2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBl
KCkpKSB7Ci0JCQkJCXJldHVybiBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRp
b24sIGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCX0KLQkJCX0gZWxz
ZSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlv
biwgYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcyk7Ci0JCQl9Ci0JCX0gZWxzZSBpZiAo
aW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQlpZiAo
YXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykK
LQkJCQlhcHBsaWNhYmxlID0gYXBwbGljYWJsZS5zaGFsbG93T3JpZ2luYWwoKTsKLQkJCWlmIChh
cHBsaWNhYmxlLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQot
CQkJCXJldHVybiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcywgaW52b2NhdGlvblNp
dGUsIEZVTExfSU5GRVJFTkNFKTsKLQkJfQotCQlyZXR1cm4gYXBwbGljYWJsZTsKIAl9CiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKaW5k
ZXggOTM4NDljZC4uMWM0ZDc0NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNG
YWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFj
dG9yeU1ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTcsMzEgKzE3LDggQEAKICAqLwogcHVibGljIGNs
YXNzIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIGV4dGVuZHMgTWV0aG9kQmluZGluZyB7
CiAKLQlwcml2YXRlIE1ldGhvZEJpbmRpbmcgc3RhdGljRmFjdG9yeUZvcjsKLQlwcml2YXRlIExv
b2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OwotCXByaXZhdGUgUmVmZXJlbmNlQmluZGluZyBl
bmNsb3NpbmdUeXBlOwotCQogCXB1YmxpYyBTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyhN
ZXRob2RCaW5kaW5nIG1ldGhvZCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQsIFJlZmVy
ZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSkgewogCQlzdXBlcihtZXRob2QubW9kaWZpZXJzIHwg
Q2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYywgVHlwZUNvbnN0YW50cy5TWU5USEVUSUNfU1RB
VElDX0ZBQ1RPUlksCiAJCQkJbnVsbCwgbnVsbCwgbnVsbCwgbWV0aG9kLmRlY2xhcmluZ0NsYXNz
KTsKLQkJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50OwotCQl0aGlzLnN0YXRpY0ZhY3Rv
cnlGb3IgPSBtZXRob2Q7Ci0JCXRoaXMuZW5jbG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7Ci0J
fQotCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlwZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJp
bmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3RydWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkg
dGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1
bWVudHMpIHsKLQkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMuZW52
aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUodGhpcy5kZWNsYXJpbmdDbGFzcywgdHlw
ZUFyZ3VtZW50cywKLQkJCQkJCQkJCQkJCQkJCQkJCQkJCQl0aGlzLmVuY2xvc2luZ1R5cGUpOwot
CQlmb3IgKE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA6IHBhcmFtZXRlcml6ZWRU
eXBlLm1ldGhvZHMoKSkgewotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2Qub3JpZ2luYWwoKSA9
PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluZykgcGFyYW1ldGVyaXplZE1ldGhvZDsKLQkJCWlmIChwYXJhbWV0ZXJpemVkTWV0aG9k
IGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpcGFyYW1ldGVyaXplZE1ldGhvZCku
Y2xvc2VzdE1hdGNoOwotCQkJCWlmIChjbG9zZXN0TWF0Y2ggaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkTWV0aG9kQmluZGluZyAmJiBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSA9PSB0aGlzLnN0YXRp
Y0ZhY3RvcnlGb3IpCi0JCQkJCXJldHVybiAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGNs
b3Nlc3RNYXRjaDsKLQkJCX0KLQkJfQotCQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0
aW9uKCJUeXBlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIG1ldGhvZD8iKTsgLy8kTk9OLU5MUy0xJAog
CX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggOTNmYzA4Yy4uMDE2YTQ5
ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTE1MCw3ICsxNTAsNiBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQ2FwdHVyZUJp
bmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5F
eHRyYUNvbXBpbGVyTW9kaWZpZXJzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuRmllbGRCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4OwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW52b2NhdGlvblNpdGU7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmlu
ZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxv
b2t1cEVudmlyb25tZW50OwpAQCAtMzY5Miw3ICszNjkxLDggQEAKIAkJCQlzb3VyY2VTdGFydCwK
IAkJCQlzb3VyY2VFbmQpOwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25zLlBhcmFt
ZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1SZWFzb25z
LkluZmVycmVkQXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxlOgkKKwkJY2FzZSBQcm9ibGVtUmVh
c29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6CiAJCQkvLyBGSVhNRShzdGVwaGFu
KTogY29uc3RydWN0IHN1aXRhYmxlIG1lc3NhZ2UgKGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80
MDQ2NzUpCiAJCQlwcm9ibGVtQ29uc3RydWN0b3IgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHRh
cmdldENvbnN0cnVjdG9yOwogCQkJc2hvd25Db25zdHJ1Y3RvciA9IHByb2JsZW1Db25zdHJ1Y3Rv
ci5jbG9zZXN0TWF0Y2g7CkBAIC00MjI0LDE2ICs0MjI0LDEzIEBACiAJCQkJKGludCkgKG1lc3Nh
Z2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3NhZ2VTZW5k
Lm5hbWVTb3VyY2VQb3NpdGlvbik7CiAJCQlyZXR1cm47Ci0JCWNhc2UgUHJvYmxlbVJlYXNvbnMu
UGFyYW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW06CisJCWNhc2UgUHJvYmxlbVJl
YXNvbnMuSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCWNhc2UgUHJvYmxl
bVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3Rl
cGhhbik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvNDA0Njc1KQogCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0
aG9kOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9ibGVtTWV0
aG9kLmluZmVyZW5jZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4dCAhPSBudWxsICYm
IGluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJCQkvLyBwcm9ibGVt
IHJlbGF0ZXMgdG8gYSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0aGUgb3V0ZXIgaGFu
ZGxlIGl0OgotCQkJCWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFkZFByb2JsZW1NZXRo
b2QocHJvYmxlbU1ldGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hvd25NZXRob2QgPSBw
cm9ibGVtTWV0aG9kLmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0aG9kLnJldHVyblR5
cGUgPT0gc2hvd25NZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQKKwkJ
CQlyZXR1cm47IC8vIGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVlcGx5IG5lc3RlZCBj
YWxsLCBiZWNhdXNlIHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBjbG9zZXN0IG1hdGNo
IGFuZCB0aGUgb3V0ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50ZXN0QnVnNDMwMjk2
CiAJCQl0aGlzLmhhbmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gsCiAJCQkJbmV3IFN0
cmluZ1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNj
b3BlLmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNj
b3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAt
Mzk2LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5l
dyBQcm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJl
YXNvbnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsK
LQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3Bl
LkZVTExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0g
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52
b2NhdGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJn
dW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5n
ID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdb
XSBjb21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBj
b21wYXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxl
bmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAh
PSBudWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0
aG9kOwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXgg
PT0gMSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0
c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2li
bGVbMF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0
aWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247687</attachid>
            <date>2014-10-07 12:17:00 -0400</date>
            <delta_ts>2014-10-12 06:11:12 -0400</delta_ts>
            <desc>Proposed patch - Ready for review, passes all tests</desc>
            <filename>upload.patch</filename>
            <type>text/plain</type>
            <size>191117</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uNWYzNjEwMSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTI4NDMsNiArMjg3Miw3IEBACiAJCQkiCXB1YmxpYyBE
VGVzdChGdW5jdGlvbjxULCBUPiBmdW5jKSB7IH1cbiIgKyAKIAkJCSIJXG4iICsgCiAJCQkiCXB1
YmxpYyBEVGVzdChEVGVzdDxJbnRlZ2VyPiBkdGkpIHt9XG4iICsgCisJCQkiCXB1YmxpYyBEVGVz
dCgpIHt9XG4iICsgCiAJCQkiCVxuIiArIAogCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihT
dHJpbmdbXSBhcmdzKSB7XG4iICsgCiAJCQkiCQlEVGVzdDxTdHJpbmc+IHQxID0gbmV3IERUZXN0
PFN0cmluZz4obmV3IERUZXN0PEludGVnZXI+KCkpO1xuIiArIApAQCAtMjg1MCwxNiArMjg4MCwx
MSBAQAogCQkJIn1cbiIKIAkJfSwKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGlu
IERUZXN0LmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIxLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDExKVxuIiArIAogCQkiCURUZXN0PFN0cmluZz4gdDEgPSBuZXcgRFRlc3Q8U3Ry
aW5nPihuZXcgRFRlc3Q8SW50ZWdlcj4oKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAg
ICAgICBeXl5eXlxuIiArIAogCQkiUmVkdW5kYW50IHNwZWNpZmljYXRpb24gb2YgdHlwZSBhcmd1
bWVudHMgPFN0cmluZz5cbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGlu
IERUZXN0LmphdmEgKGF0IGxpbmUgMTApXG4iICsgCi0JCSIJRFRlc3Q8U3RyaW5nPiB0MSA9IG5l
dyBEVGVzdDxTdHJpbmc+KG5ldyBEVGVzdDxJbnRlZ2VyPigpKTtcbiIgKyAKLQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAK
LQkJIlRoZSBjb25zdHJ1Y3RvciBEVGVzdDxJbnRlZ2VyPigpIGlzIHVuZGVmaW5lZFxuIiArCi0J
CSItLS0tLS0tLS0tXG4iLAorCQkiLS0tLS0tLS0tLVxuIiwgCiAJCW51bGwsIHRydWUsIGN1c3Rv
bU9wdGlvbnMpOwogfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzMDI5NigpIHsKQEAgLTMwMTUsNiAr
MzA0MCw4IEBACiAJCQkifVxuIn0pOwogfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzE1OCgpIHsK
KyAgdHJ5IHsKKwl0aGlzLnNob3VsZFN3YWxsb3dDYXB0dXJlSWQgPSB0cnVlOyAvLyB0aGlzIHRl
c3QgZXhoaWJpdHMgc29tZSBub24tZGV0ZXJtaW5pc20gaW4gY2FwdHVyZSBpZHMuIGp1c3QgY29t
cGFyZSBpZ25vcmluZyBpZCwgYnV0IGVzdGFibGlzaGluZyBwcmVzZW5jZSBvZiBjYXB0dXJlLgog
CXJ1bk5lZ2F0aXZlVGVzdCgKIAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJDb2xsZWN0b3JzTWFwcy5q
YXZhIiwKQEAgLTMwNDYsOCArMzA3MywxMSBAQAogCQkiMS4gRVJST1IgaW4gQ29sbGVjdG9yc01h
cHMuamF2YSAoYXQgbGluZSAyMClcbiIgKyAKIAkJIglwIC0+IHAubGhzLnN0cmVhbSgpLm1hcChw
OjprZWVwaW5nUmhzKSkuY29sbGVjdChcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAotCQkiVGhlIG1ldGhvZCBjb2xsZWN0KENv
bGxlY3Rvcjw/IHN1cGVyIE9iamVjdCxBLFI+KSBpbiB0aGUgdHlwZSBTdHJlYW08T2JqZWN0PiBp
cyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29sbGVjdG9yPENvbGxlY3RvcnNN
YXBzLlBhaXI8U3RyaW5nLFN0cmluZz4sY2FwdHVyZSMzLW9mID8sTWFwPFN0cmluZyxMaXN0PFN0
cmluZz4+PilcbiIgKyAKKwkJIlRoZSBtZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBP
YmplY3QsQSxSPikgaW4gdGhlIHR5cGUgU3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKENvbGxlY3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxT
dHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8U3RyaW5nLExpc3Q8U3RyaW5nPj4+KVxuIiArIAogCQki
LS0tLS0tLS0tLVxuIik7CisgIH0gZmluYWxseSB7CisJdGhpcy5zaG91bGRTd2FsbG93Q2FwdHVy
ZUlkID0gZmFsc2U7CQorICB9CiB9CiBwdWJsaWMgdm9pZCBfdGVzdEJ1ZzQzMjYyNigpIHsKIAly
dW5Db25mb3JtVGVzdCgKQEAgLTMzMzYsNyArMzM2Niw3IEBACiAJCSItLS0tLS0tLS0tXG4iKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJ
CQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCkBAIC0zMzc4LDE3ICszNDA4LDcgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xs
ZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRW
YWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhl
IHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2Jq
ZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFz
cy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAo
cGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkp
O1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZh
bHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3Ig
dGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25z
VGVzdC5qYXZhCmluZGV4IGIwNTk4NWIuLjhkMmRmY2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00
MjkwLDEzICs0MjkwLDEzIEBACiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAyMSlcbiIgKyAKIAkJCSIJcGVyc29ucy5zb3J0KENvbXBhcmF0b3Iu
Y29tcGFyaW5nKENvbXBhcmF0b3IubnVsbHNMYXN0KFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFi
bGUpKSk7XG4iICsgCi0JCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIF5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSBtZXRob2QgbnVsbHNMYXN0KENvbXBhcmF0
b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBm
b3IgdGhlIGFyZ3VtZW50cyAoUGVyc29uOjo8UnVubmFibGU+aXNSdW5uYWJsZSlcbiIgKyAKKwkJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhv
ZCBjb21wYXJpbmcoRnVuY3Rpb248PyBzdXBlciBULD8gZXh0ZW5kcyBVPikgaW4gdGhlIHR5cGUg
Q29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29tcGFyYXRv
cjxPYmplY3Q+KVxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMjEpXG4iICsgCiAJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNv
bXBhcmluZyhDb21wYXJhdG9yLm51bGxzTGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxl
KSkpO1xuIiArIAogCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRo
ZSB0eXBlIFguUGVyc29uIGRvZXMgbm90IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMg
YXBwbGljYWJsZSBoZXJlXG4iICsgCisJCQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVm
aW5lIGlzUnVubmFibGUoT2JqZWN0LCBPYmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4i
ICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMxMTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5n
IGEgbWV0aG9kIHJlZmVyZW5jZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXgg
YzUwMTEwOS4uMjI3ZDVlNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05
MTE4LDExICs5MTE4LDEyIEBACiAJCQkiCX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5v
dGU6IG5ldyBtZXNzYWdlIGFsaWducyBiZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0t
LS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJ
RnVuY3Rpb248Q0w8SW50ZWdlcj4sIFN0cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0J
CSJUaGUgdHlwZSBDTCBkb2VzIG5vdCBkZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBp
cyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAKKwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5j
ZSB0byB0aGUgbm9uLXN0YXRpYyBtZXRob2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxu
IiArIAogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDgpXG4iICsgCiAJCSIJdjUgPSB0IC0+IHQubWV0aG9kMSgpOwlcbiIgKyAKQEAgLTk3MDcsNiAr
OTcwOCw0MiBAQAogCX0sCiAJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMzYsICBOUEUgaW4gYnJva2VuIGNvZGUKK3B1Ymxp
YyB2b2lkIHRlc3Q0Mzc0NDQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGls
LnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJTGlz
dDxQZXJzb24+IHJvc3RlciA9IG5ldyBBcnJheUxpc3Q8PigpO1xuIiArCisJCQkiICAgICAgICBN
YXA8U3RyaW5nLCBQZXJzb24+IG1hcCA9IFxuIiArCisJCQkiICAgICAgICAgICAgcm9zdGVyXG4i
ICsKKwkJCSIgICAgICAgICAgICAgICAgLnN0cmVhbSgpXG4iICsKKwkJCSIgICAgICAgICAgICAg
ICAgLmNvbGxlY3QoXG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICAgIENvbGxlY3RvcnMudG9N
YXAoXG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBQZXJzb246OmdldExhc3QsXG4i
ICsKKwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbi5pZGVudGl0eSgpIFxuIiAr
CisJCQkiICAgICAgICAgICAgICAgICAgICApKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4i
ICsKKwkJCSJjbGFzcyBQZXJzb24ge1xuIiArCisJCQkifVxuIiAKKwl9LAorCSItLS0tLS0tLS0t
XG4iICsgCisJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCSIJTWFwPFN0
cmluZywgUGVyc29uPiBtYXAgPSBcbiIgKyAKKwkiCV5eXlxuIiArIAorCSJNYXAgY2Fubm90IGJl
IHJlc29sdmVkIHRvIGEgdHlwZVxuIiArIAorCSItLS0tLS0tLS0tXG4iICsgCisJIjIuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkiCUZ1bmN0aW9uLmlkZW50aXR5KCkgXG4i
ICsgCisJIgleXl5eXl5eXlxuIiArIAorCSJGdW5jdGlvbiBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIg
KyAKKwkiLS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygp
IHsKIAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25U
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRp
b25UZXN0LmphdmEKaW5kZXggNTNmYzU5OS4uZTAzMDNmNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQpA
QCAtNjc0MCw2ICs2NzQwLDcgQEAKIAkJCSJ9XG4iICsKIAkJCSJ9XG4iLAogCQl9LAorCQkvLyBO
b3RlOiB3ZSB1c2VkIHRvIGVtaXQgYSBkdXBsaWNhdGUgbWVzc2FnZSBvZiAyLiBGaXhlZC4KIAkJ
Ii0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCiAJCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmls
ZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIApAQCAtNjc0NywxMSArNjc0OCw2
IEBACiAJCSJUaGUgY29uc3RydWN0b3IgUGFpcjxQYXRoLE9iamVjdD4oUGF0aCwgKDxubyB0eXBl
PiBwKSAtPiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIy
LiBFUlJPUiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAotCQkiCWZpbHRl
cjIubWFwKHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5n
ZXQocCkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdGFyZ2V0IHR5cGUg
b2YgdGhpcyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAot
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMy4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0
IGxpbmUgOSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9G
aWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxu
IiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVu
Y3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXggZWQyMDRiNS4uNGVhMDEwOCAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKQEAgLTYwLDEwICs2MCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFja2FnZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5QYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNv
bnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZl
cmVuY2VCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Tb3VyY2VUeXBlQmluZGluZzsKQEAgLTMyOCw3ICszMjUsNyBAQAogCXB1YmxpYyBBU1RO
b2RlKCkgewogCiAJCXN1cGVyKCk7Ci0JfQorCX0JCiAJcHJpdmF0ZSBzdGF0aWMgaW50IGNoZWNr
SW52b2NhdGlvbkFyZ3VtZW50KEJsb2NrU2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gYXJndW1lbnQs
IFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUsIFR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSwgVHlw
ZUJpbmRpbmcgb3JpZ2luYWxQYXJhbWV0ZXJUeXBlKSB7CiAJCWFyZ3VtZW50LmNvbXB1dGVDb252
ZXJzaW9uKHNjb3BlLCBwYXJhbWV0ZXJUeXBlLCBhcmd1bWVudFR5cGUpOwogCkBAIC02NTAsMTIw
ICs2NDcsNDEgQEAKIAkvKioKIAkgKiBBZnRlciBtZXRob2QgbG9va3VwIGhhcyBwcm9kdWNlZCAn
bWV0aG9kQmluZGluZycgYnV0IHdoZW4gcG9seSBleHByZXNzaW9ucyBoYXZlIGJlZW4gc2VlbiBh
cyBhcmd1bWVudHMsCiAJICogaW5zcGVjdCB0aGUgYXJndW1lbnRzIHRvIHRyaWdnZXIgYW5vdGhl
ciByb3VuZCBvZiByZXNvbHZpbmcgd2l0aCBpbXByb3ZlZCB0YXJnZXQgdHlwZXMgZnJvbSB0aGUg
bWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAqIElmIHRoaXMgcmVzb2x2aW5nIHByb2R1Y2VzIGJldHRl
ciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50cywgdXBkYXRlIHRoZSAnYXJndW1lbnRUeXBlcycgYXJy
YXkgaW4tcGxhY2UgYXMgYW4KLQkgKiBpbnRlbmRlZCBzaWRlIGVmZmVjdCB0aGF0IHdpbGwgZmVl
ZCBiZXR0ZXIgdHlwZSBpbmZvcm1hdGlvbiBpbiBjaGVja0ludm9jYXRpb25Bcmd1bWVudHMoKSBh
bmQgb3RoZXJzLgogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdo
aWNoIGlzIGJlaW5nIHJlc29sdmVkCi0JICogQHBhcmFtIG1ldGhvZEJpbmRpbmcgdGhlIG1ldGhv
ZCBwcm9kdWNlZCBieSBsb29rdXAgKHBvc3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZSku
Ci0JICogQHBhcmFtIGFyZ3VtZW50VHlwZXMgdGhlIGFyZ3VtZW50IHR5cGVzIGFzIGNvbGxlY3Rl
ZCBmcm9tIGZpcnN0IHJlc29sdmluZyB0aGUgaW52b2NhdGlvbiBhcmd1bWVudHMgYW5kIGFzIHVz
ZWQgZm9yCi0JICogCXRoZSBtZXRob2QgbG9va3VwLgotCSAqIEBwYXJhbSBzY29wZSBzY29wZSBm
b3IgZXJyb3IgcmVwb3J0aW5nCisJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2Vk
IGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KKwkgKiBAcGFy
YW0gYXJndW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmly
c3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhl
IG1ldGhvZCBsb29rdXAuCisJICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciByZXNvbHV0aW9uLgog
CSAqLwotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMo
SW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBlcywgU2NvcGUgc2NvcGUpIHsKLQkJaWYgKCFpbnZvY2F0aW9u
LmlubmVyc05lZWRVcGRhdGUoKSkKKwlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHBy
ZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBtZXRo
b2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgQmxvY2tTY29wZSBzY29wZSkgeworCQlN
ZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1ldGhvZCA9IG1ldGhvZC5pc1ZhbGlkQmluZGluZygpID8g
bWV0aG9kIDogbWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcgPyAoKFByb2Js
ZW1NZXRob2RCaW5kaW5nKSBtZXRob2QpLmNsb3Nlc3RNYXRjaCA6IG51bGw7CisJCWlmIChjYW5k
aWRhdGVNZXRob2QgPT0gbnVsbCkKIAkJCXJldHVybjsKLQkJaW50IHByb2JsZW1SZWFzb24gPSAw
OwotCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1ldGhvZDsKLQkJaWYgKG1ldGhvZEJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSkgewotCQkJY2FuZGlkYXRlTWV0aG9kID0gbWV0aG9kQmluZGluZzsK
LQkJfSBlbHNlIGlmIChtZXRob2RCaW5kaW5nIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRp
bmcpIHsKLQkJCXByb2JsZW1SZWFzb24gPSBtZXRob2RCaW5kaW5nLnByb2JsZW1JZCgpOwotCQkJ
Y2FuZGlkYXRlTWV0aG9kID0gKChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0aG9kQmluZGluZyku
Y2xvc2VzdE1hdGNoOwotCQl9IGVsc2UgewotCQkJY2FuZGlkYXRlTWV0aG9kID0gbnVsbDsKLQkJ
fQotCQlpZiAoY2FuZGlkYXRlTWV0aG9kICE9IG51bGwpIHsKLQkJCWJvb2xlYW4gdmFyaWFibGVB
cml0eSA9IGNhbmRpZGF0ZU1ldGhvZC5pc1ZhcmFyZ3MoKTsKLQkJCUluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHggPSBudWxsOwotCQkJaWYgKGNhbmRpZGF0ZU1ldGhvZCBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB7Ci0JCQkJaW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZl
cmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgY2FuZGlkYXRlTWV0aG9k
KTsKLQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwpIHsKLQkJCQkJaWYgKGluZkN0eC5zdGVwQ29tcGxl
dGVkICE9IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQkJCQkvLyBvbmx5
IHdvcmsgaW4gdGhlIGV4YWN0IHN0YXRlIG9mIFRZUEVfSU5GRVJSRUQKLQkJCQkJCS8vIC0gYmVs
b3cgd2UncmUgbm90IHlldCByZWFkeQotCQkJCQkJLy8gLSBhYm92ZSB3ZSdyZSBhbHJlYWR5IGRv
bmUtZG9uZQotCQkJCQkJcmV0dXJuOwotCQkJCQl9Ci0JCQkJCXZhcmlhYmxlQXJpdHkgJj0gaW5m
Q3R4LmlzVmFyQXJncygpOyAvLyBUT0RPOiBpZiBubyBpbmZDdHggaXMgYXZhaWxhYmxlLCBkbyB3
ZSBoYXZlIHRvIHJlLWNoZWNrIGlmIHRoaXMgaXMgYSB2YXJhcmdzIGludm9jYXRpb24/Ci0JCQkJ
fQotCQkJfSBlbHNlIGlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Np
b24pIHsKLQkJCQlpZiAoKChBbGxvY2F0aW9uRXhwcmVzc2lvbilpbnZvY2F0aW9uKS5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkKLQkJCQkJcmV0dXJuOyAvLyBub3QgeWV0IHJlYWR5
Ci0JCQl9Ci0JCQkKLQkJCWZpbmFsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IGNhbmRpZGF0
ZU1ldGhvZC5wYXJhbWV0ZXJzOwotCQkJRXhwcmVzc2lvbltdIGlubmVyQXJndW1lbnRzID0gaW52
b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJCUV4cHJlc3Npb24gW10gYXJndW1lbnRzID0gaW5uZXJB
cmd1bWVudHM7Ci0JCQlpZiAoaW5mQ3R4ID09IG51bGwgJiYgdmFyaWFibGVBcml0eSAmJiBhcmd1
bWVudHMgIT0gbnVsbCAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7
IC8vIHJlLWNoZWNrCi0JCQkJVHlwZUJpbmRpbmcgbGFzdFBhcmFtID0gcGFyYW1ldGVyc1twYXJh
bWV0ZXJzLmxlbmd0aC0xXTsKLQkJCQlFeHByZXNzaW9uIGxhc3RBcmcgPSBhcmd1bWVudHNbYXJn
dW1lbnRzLmxlbmd0aC0xXTsKLQkJCQlpZiAobGFzdEFyZy5pc0NvbXBhdGlibGVXaXRoKGxhc3RQ
YXJhbSwgbnVsbCkpIHsKLQkJCQkJdmFyaWFibGVBcml0eSA9IGZhbHNlOwotCQkJCX0KLQkJCX0K
LQkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1
bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCQlFeHByZXNzaW9uIGFyZ3VtZW50
ID0gYXJndW1lbnRzW2ldOwotCQkJCVR5cGVCaW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBu
dWxsOwotCQkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTgu
Z2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZhcmlhYmxlQXJpdHkpOwotCQkJCWlmIChwYXJh
bWV0ZXJUeXBlID09IG51bGwgJiYgcHJvYmxlbVJlYXNvbiAhPSBQcm9ibGVtUmVhc29ucy5Ob0Vy
cm9yKQotCQkJCQljb250aW51ZTsgLy8gbm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJn
ZXQgdHlwZSwgYXNzdW1lIGl0IG9ubHkgaGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IK
LQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24gJiYgKChMYW1i
ZGFFeHByZXNzaW9uKSBhcmd1bWVudCkuaGFzRXJyb3JzKCkpCi0JCQkJCWNvbnRpbnVlOyAvLyBk
b24ndCB1cGRhdGUgaWYgaW5uZXIgcG9seSBoYXMgZXJyb3JzCi0KLQkJCQlpZiAoYXJndW1lbnQg
aW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJCUludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9u
ID0gKEludm9jYXRpb24pYXJndW1lbnQ7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlu
bmVySW52b2NhdGlvbi5iaW5kaW5nKHBhcmFtZXRlclR5cGUsIHRydWUsIHNjb3BlKTsKLQkJCQkJ
aWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVk
TWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYmluZGluZzsKLQkJ
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckNvbnRleHQgPSBpbm5lckludm9jYXRpb24uZ2V0
SW5mZXJlbmNlQ29udGV4dChwYXJhbWV0ZXJpemVkTWV0aG9kKTsKLQkJCQkJCWlmIChpbm5lckNv
bnRleHQgIT0gbnVsbCkgewotCQkJCQkJCWlmICghaW5uZXJDb250ZXh0Lmhhc1Jlc3VsdEZvcihw
YXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1l
dGVyVHlwZSk7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWRCaW5kaW5nID0gaW5uZXJD
b250ZXh0LmluZmVySW52b2NhdGlvblR5cGUoaW5uZXJJbnZvY2F0aW9uLCBwYXJhbWV0ZXJpemVk
TWV0aG9kKTsKLQkJCQkJCQkJaWYgKCFpbXByb3ZlZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkg
ewotCQkJCQkJCQkJaW5uZXJDb250ZXh0LnJlcG9ydEludmFsaWRJbnZvY2F0aW9uKGlubmVySW52
b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nKTsKLQkJCQkJCQkJfQotCQkJCQkJCQlpZiAoaW5uZXJJ
bnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGltcHJvdmVkQmluZGluZywgcGFyYW1ldGVyVHlwZSkp
IHsKLQkJCQkJCQkJCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbm5lckludm9jYXRp
b24sIGltcHJvdmVkQmluZGluZywgc2NvcGUpOwotCQkJCQkJCQl9Ci0JCQkJCQkJfSBlbHNlIGlm
IChpbm5lckNvbnRleHQuc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5H
U19VUERBVEVEKSB7Ci0JCQkJCQkJCWlubmVyQ29udGV4dC5yZWJpbmRJbm5lclBvbGllcyhwYXJh
bWV0ZXJpemVkTWV0aG9kLCBpbm5lckludm9jYXRpb24pOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJ
CQkJCWNvbnRpbnVlOyAvLyBvdGhlcndpc2UgdGhlc2UgaGF2ZSBiZWVuIGRlYWx0IHdpdGggZHVy
aW5nIGlubmVyIG1ldGhvZCBsb29rdXAKLQkJCQkJfQotCQkJCX0KLQotCQkJCWlmIChhcmd1bWVu
dC5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQkJLy8gcG9seSBleHByZXNzaW9ucyBpbiBhbiBp
bnZvY2F0aW9uIGNvbnRleHQgbWF5IG5lZWQgdG8gYmUgcmVzb2x2ZWQgbm93OgotCQkJCQlpZiAo
aW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4
dDE4LkJJTkRJTkdTX1VQREFURUQpCi0JCQkJCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1l
bnQucmVzb2x2ZWRUeXBlOyAvLyBpbiB0aGlzIGNhc2UgYXJndW1lbnQgd2FzIGFscmVhZHkgcmVz
b2x2ZWQgdmlhIEluZmVyZW5jZUNvbnRleHQxOC5hY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cygp
Ci0JCQkJCWVsc2UKLQkJCQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5jaGVja0Fn
YWluc3RGaW5hbFRhcmdldFR5cGUocGFyYW1ldGVyVHlwZSwgc2NvcGUpOwotCi0JCQkJCWlmIChw
cm9ibGVtUmVhc29uID09IFByb2JsZW1SZWFzb25zLk5vRXJyb3IgLy8gcHJlc2VydmUgZXJyb3Jz
Ci0JCQkJCQkJJiYgdXBkYXRlZEFyZ3VtZW50VHlwZSAhPSBudWxsCQkJCQkvLyBkbyB3ZSBoYXZl
IGEgcmVsZXZhbnQgdXBkYXRlPyAuLi4KLQkJCQkJCQkmJiAhKHVwZGF0ZWRBcmd1bWVudFR5cGUg
aW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpKQotCQkJCQl7Ci0JCQkJCQkvLyB1cGRhdGUgdGhl
IGFyZ3VtZW50VHlwZXMgYXJyYXkgKHN1cHBvc2VkIHRvIGJlIG93bmVkIGJ5IHRoZSBjYWxsaW5n
IG1ldGhvZCkKLQkJCQkJCS8vIGluIG9yZGVyIHRvIGdpdmUgYmV0dGVyIGluZm9ybWF0aW9uIGZv
ciBzdWJzZXF1ZW50IGNoZWNrcwotCQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1
bWVudFR5cGU7Ci0JCQkJCX0KLQkJCQl9CisJCWJvb2xlYW4gdmFyaWFibGVBcml0eSA9IGNhbmRp
ZGF0ZU1ldGhvZC5pc1ZhcmFyZ3MoKTsKKwkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJz
ID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7CisJCUV4cHJlc3Npb25bXSBhcmd1bWVudHMg
PSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOworCQlpZiAodmFyaWFibGVBcml0eSAmJiBhcmd1bWVu
dHMgIT0gbnVsbCAmJiBwYXJhbWV0ZXJzLmxlbmd0aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7CisJ
CQlpZiAoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5ndGgtMV0uaXNDb21wYXRpYmxlV2l0aChwYXJh
bWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdLCBzY29wZSkpIHsKKwkJCQl2YXJpYWJsZUFyaXR5
ID0gZmFsc2U7CiAJCQl9CiAJCX0KLQkJaW52b2NhdGlvbi5pbm5lclVwZGF0ZURvbmUoKTsKLQl9
Ci0KLQlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKElu
dm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nLCBTY29wZSBz
Y29wZSkgewotCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNz
aW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoaW5u
ZXJBcmd1bWVudHMgIT0gbnVsbCkgewotCQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGlu
Z1tpbm5lckFyZ3VtZW50cy5sZW5ndGhdOwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbm5lckFy
Z3VtZW50cy5sZW5ndGg7IGkrKykKLQkJCQlhcmd1bWVudFR5cGVzW2ldID0gaW5uZXJBcmd1bWVu
dHNbaV0ucmVzb2x2ZWRUeXBlOworCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRz
ID09IG51bGwgPyAwIDogYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlF
eHByZXNzaW9uIGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJVHlwZUJpbmRpbmcgcGFyYW1l
dGVyVHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwg
dmFyaWFibGVBcml0eSk7CisJCQlpZiAocGFyYW1ldGVyVHlwZSA9PSBudWxsKQorCQkJCWNvbnRp
bnVlOyAvLyBub3QgbXVjaCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUg
aXQgb25seSBoYXBwZW5zIGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgorCQkJaWYgKGFyZ3VtZW50
VHlwZXNbaV0uaXNQb2x5VHlwZSgpKSB7CisJCQkJYXJndW1lbnQuc2V0RXhwZWN0ZWRUeXBlKHBh
cmFtZXRlclR5cGUpOworCQkJCVR5cGVCaW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1
bWVudC5yZXNvbHZlVHlwZShzY29wZSk7IAorCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIExh
bWJkYUV4cHJlc3Npb24pIHsKKwkJCQkJLy8gTEUucmVzb2x2ZVR5cGUgbWF5IHJldHVybiBhIHZh
bGlkIGJpbmRpbmcgYmVjYXVzZSByZXNvbHZlIGRvZXMgbm90IGRldGVjdCBzdHJ1Y3R1cmFsIGVy
cm9ycyBhdCB0aGlzIHBvaW50LgorCQkJCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1i
ZGFFeHByZXNzaW9uKSBhcmd1bWVudDsKKwkJCQkJaWYgKCFsYW1iZGEuaXNDb21wYXRpYmxlV2l0
aChwYXJhbWV0ZXJUeXBlLCBzY29wZSkgfHwgbGFtYmRhLmhhc0Vycm9ycygpKQorCQkJCQkJY29u
dGludWU7CisJCQkJfQorCQkJCWlmICh1cGRhdGVkQXJndW1lbnRUeXBlICE9IG51bGwgJiYgdXBk
YXRlZEFyZ3VtZW50VHlwZS5raW5kKCkgIT0gQmluZGluZy5QT0xZX1RZUEUpCisJCQkJCWFyZ3Vt
ZW50VHlwZXNbaV0gPSB1cGRhdGVkQXJndW1lbnRUeXBlOworCQkJfQogCQl9Ci0JCXJlc29sdmVQ
b2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbnZvY2F0aW9uLCBtZXRob2RCaW5kaW5nLCBhcmd1bWVu
dFR5cGVzLCBzY29wZSk7CiAJfQogCiAJcHVibGljIHN0YXRpYyB2b2lkIHJlc29sdmVBbm5vdGF0
aW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBBbm5vdGF0aW9uW10gc291cmNlQW5ub3RhdGlvbnMsIEJp
bmRpbmcgcmVjaXBpZW50KSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXgg
MDBhNDcxMi4uOTM2NWExMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVz
c2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAt
NzcsMzAgKzc3LDEwIEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZv
Y2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZl
cmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxl
Lyo8UE1CLElDMTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJl
bmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOworCXByaXZhdGUgYm9vbGVhbiBhcmdzQ29u
dGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcu
Tk9fUEFSQU1FVEVSUzsKLQlwdWJsaWMgYm9vbGVhbiBhcmd1bWVudHNIYXZlRXJyb3JzOwotCi0J
LyoqIFJlY29yZCB0byBrZWVwIHN0YXRlIGJldHdlZW4gZGlmZmVyZW50IHBhcnRzIG9mIHJlc29s
dXRpb24uICovCi0JUmVzb2x1dGlvblN0YXRlIHN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZTsKLQlj
bGFzcyBSZXNvbHV0aW9uU3RhdGUgewotCQlCbG9ja1Njb3BlIHNjb3BlOwotCQlib29sZWFuIGlz
RGlhbW9uZDsKLQkJYm9vbGVhbiBkaWFtb25kTmVlZHNEZWZlcnJpbmc7Ci0JCWJvb2xlYW4gYXJn
c0NvbnRhaW5DYXN0OwotCQlib29sZWFuIGNhbm5vdEluZmVyRGlhbW9uZDsgLy8gcmVxdWVzdCB0
aGUgYW4gZXJyb3IgYmUgcmVwb3J0ZWQgaW4gZHVlIHRpbWUKLQkJYm9vbGVhbiBoYXNSZXBvcnRl
ZEVycm9yOwotCi0JCVJlc29sdXRpb25TdGF0ZShCbG9ja1Njb3BlIHNjb3BlLCBib29sZWFuIGlz
RGlhbW9uZCwgYm9vbGVhbiBkaWFtb25OZWVkc0RlZmVycmluZywKLQkJCQlib29sZWFuIGFyZ3ND
b250YWluQ2FzdCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKQotCQl7Ci0JCQl0aGlzLnNj
b3BlID0gc2NvcGU7Ci0JCQl0aGlzLmlzRGlhbW9uZCA9IGlzRGlhbW9uZDsKLQkJCXRoaXMuZGlh
bW9uZE5lZWRzRGVmZXJyaW5nID0gZGlhbW9uTmVlZHNEZWZlcnJpbmc7Ci0JCQl0aGlzLmFyZ3ND
b250YWluQ2FzdCA9IGFyZ3NDb250YWluQ2FzdDsKLQkJfQotCX0KLQorCXB1YmxpYyBib29sZWFu
IGFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsKKwkKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNl
Q29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZs
b3dJbmZvIGZsb3dJbmZvKSB7CiAJLy8gY2hlY2sgY2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0
aWFsaXplZCBpbiBjdXJyZW50IGNvbnRleHQgKDI2MTM0KQogCWNoZWNrQ2FwdHVyZWRMb2NhbElu
aXRpYWxpemF0aW9uSWZOZWNlc3NhcnkoKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRl
Y2xhcmluZ0NsYXNzLmVyYXN1cmUoKSwgY3VycmVudFNjb3BlLCBmbG93SW5mbyk7CkBAIC0zNDEs
NyArMzIxLDYgQEAKIAkvLyBQcm9wYWdhdGUgdGhlIHR5cGUgY2hlY2tpbmcgdG8gdGhlIGFyZ3Vt
ZW50cywgYW5kIGNoZWNrIGlmIHRoZSBjb25zdHJ1Y3RvciBpcyBkZWZpbmVkLgogCWZpbmFsIGJv
b2xlYW4gaXNEaWFtb25kID0gdGhpcy50eXBlICE9IG51bGwgJiYgKHRoaXMudHlwZS5iaXRzICYg
QVNUTm9kZS5Jc0RpYW1vbmQpICE9IDA7CiAJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVy
T3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCWJvb2xlYW4gZGlhbW9uZE5lZWRz
RGVmZXJyaW5nID0gZmFsc2U7CiAJbG9uZyBzb3VyY2VMZXZlbCA9IGNvbXBpbGVyT3B0aW9ucy5z
b3VyY2VMZXZlbDsKIAlpZiAodGhpcy5jb25zdGFudCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQp
IHsKIAkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsKQEAgLTM1MCwxNzgg
KzMyOSwxNTYgQEAKIAkJCXRoaXMucmVzb2x2ZWRUeXBlID0gc2NvcGUuZW5jbG9zaW5nUmVjZWl2
ZXJUeXBlKCk7CiAJCX0gZWxzZSB7CiAJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5y
ZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7Ci0JCQlpZiAoaXNEaWFt
b25kICYmIHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4
dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQgJiYgc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfOCkgewotCQkJCWlmICh0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRoaXMu
cmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQkJCWRpYW1vbmROZWVkc0RlZmVycmlu
ZyA9IHRydWU7Ci0JCQl9CiAJCX0KLQl9IGVsc2UgewotCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRo
aXMudHlwZS5yZXNvbHZlZFR5cGU7Ci0JfQotCi0JaWYgKHRoaXMudHlwZSAhPSBudWxsKSB7Ci0J
CWNoZWNrSWxsZWdhbE51bGxBbm5vdGF0aW9uKHNjb3BlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0J
CWNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb246IHsKLQkJCWlmICh0aGlzLnR5cGUgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBu
ZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQotCQkJCVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5
cGUgPSAoUmVmZXJlbmNlQmluZGluZyl0aGlzLnJlc29sdmVkVHlwZTsKLQkJCQlpZiAoY3VycmVu
dFR5cGUgPT0gbnVsbCkgcmV0dXJuIGN1cnJlbnRUeXBlOwotCQkJCWRvIHsKLQkJCQkJLy8gaXNT
dGF0aWMoKSBpcyBhbnN3ZXJpbmcgdHJ1ZSBmb3IgdG9wbGV2ZWwgdHlwZXMKLQkJCQkJaWYgKChj
dXJyZW50VHlwZS5tb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAw
KSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOwotCQkJCQlpZiAoY3VycmVudFR5
cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb247Ci0JCQkJ
fSB3aGlsZSAoKGN1cnJlbnRUeXBlID0gY3VycmVudFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51
bGwpOwotCQkJCVBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFy
YW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHRoaXMudHlwZTsKLQkJCQlmb3IgKGlu
dCBpID0gcVJlZi50eXBlQXJndW1lbnRzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tKSB7Ci0JCQkJ
CWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0gIT0gbnVsbCkgewotCQkJCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuaWxsZWdhbFF1YWxpZmllZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlvbih0
aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKLQkJCQkJCWJyZWFrOworCQlpZiAodGhpcy50
eXBlICE9IG51bGwpIHsKKwkJCWNoZWNrSWxsZWdhbE51bGxBbm5vdGF0aW9uKHNjb3BlLCB0aGlz
LnJlc29sdmVkVHlwZSk7CisJCQljaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOiB7CisJCQkJ
aWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJl
bmNlKSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0cmluZz4uWTxJbnRlZ2VyPigpCisJCQkJCVJlZmVy
ZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSAoUmVmZXJlbmNlQmluZGluZyl0aGlzLnJlc29sdmVk
VHlwZTsKKwkJCQkJaWYgKGN1cnJlbnRUeXBlID09IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsK
KwkJCQkJZG8geworCQkJCQkJLy8gaXNTdGF0aWMoKSBpcyBhbnN3ZXJpbmcgdHJ1ZSBmb3IgdG9w
bGV2ZWwgdHlwZXMKKwkJCQkJCWlmICgoY3VycmVudFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxl
Q29uc3RhbnRzLkFjY1N0YXRpYykgIT0gMCkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2Nh
dGlvbjsKKwkJCQkJCWlmIChjdXJyZW50VHlwZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQYXJh
bWV0ZXJpemVkQWxsb2NhdGlvbjsKKwkJCQkJfSB3aGlsZSAoKGN1cnJlbnRUeXBlID0gY3VycmVu
dFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51bGwpOworCQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlm
aWVkVHlwZVJlZmVyZW5jZSBxUmVmID0gKFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJl
bmNlKSB0aGlzLnR5cGU7CisJCQkJCWZvciAoaW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVu
Z3RoIC0gMjsgaSA+PSAwOyBpLS0pIHsKKwkJCQkJCWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0g
IT0gbnVsbCkgeworCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZp
ZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRpb24odGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlw
ZSk7CisJCQkJCQkJYnJlYWs7CisJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KLQl9
Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAorCQkvLyB3
aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCiAKLQkvLyByZXNvbHZl
IHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlz
LnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgewotCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1l
bnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gc291cmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OwotCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50
c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVu
Y2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7
Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKLQkJCX0KLQkJCWlmICh0aGlz
LmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJk
KSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0
eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQotCQlpZiAoaXNEaWFtb25kKSB7Ci0JCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlz
LnR5cGVBcmd1bWVudHMpOwotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQkJaWYgKHRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3Rp
bGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cwotCQkJCWZvciAoaW50IGkgPSAwLCBtYXgg
PSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgewotCQkJCQl0aGlzLmFyZ3Vt
ZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMg
KGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCisJCWlmICh0aGlzLnR5cGVBcmd1bWVudHMg
IT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7CisJ
CQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5k
aW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJ
VHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOworCQkJ
CWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2
ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7CisJCQkJCXRo
aXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7CisJCQkJfQorCQkJCWlmICh0aGlzLmFyZ3Vt
ZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7CisJ
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJl
ZmVyZW5jZSk7CiAJCQkJfQogCQkJfQotCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaXNEaWFtb25k
KSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGlhbW9uZE5vdFdpdGhFeHBsaWNpdFR5
cGVBcmd1bWVudHModGhpcy50eXBlQXJndW1lbnRzKTsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0K
KwkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVu
dHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJ
CWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkr
KykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9
CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQogCQl9Ci0JfQogCi0JLy8gYnVmZmVyaW5n
IHRoZSBhcmd1bWVudHMnIHR5cGVzCi0JYm9vbGVhbiBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsK
LQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJv
cnMgPSBmYWxzZTsKLQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhp
cy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkg
PSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFy
Z3VtZW50c1tpXTsKLQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7
Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBEaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdp
bGwgY2hlY2sgbGF0ZXIgb24KLQkJCQlhcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkvLyBidWZm
ZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKKwkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwp
IHsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOworCQkJaW50IGxlbmd0aCA9
IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBl
QmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewor
CQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJn
dW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9
IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJ
CQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4
cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQkJaWYgKHRoaXMuYXJndW1l
bnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5k
IHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgeworCQkJCQl0
aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOworCQkJCX0KIAkJCX0KLQkJCWFyZ3VtZW50
LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQlpZiAodGhpcy5h
cmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBm
b3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlpZiAoKHRoaXMuYXJndW1l
bnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgewotCQkJ
CXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2
ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVz
c2lvbigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRp
b24pIGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCWlmICh0aGlzLmlubmVySW5m
ZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBu
ZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCX0KLQkJfQotCQlpZiAodGhpcy5hcmd1bWVu
dHNIYXZlRXJyb3JzKSB7Ci0JCQkvKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2ZSBlcnJvcnMsIGNvbXBsZXRlbHkg
YmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCisJCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3Jz
KSB7CisJCQkJLyogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM0NTM1OSwgaWYgYXJndW1lbnRzIGhhdmUgZXJyb3JzLCBjb21wbGV0ZWx5IGJhaWwgb3V0IGlu
IHRoZSA8PiBjYXNlLgogCQkJICAgTm8gbWVhbmluZ2Z1bCB0eXBlIHJlc29sdXRpb24gaXMgcG9z
c2libGUgc2luY2UgaW5mZXJlbmNlIG9mIHRoZSBlbGlkZWQgdHlwZXMgaXMgZnVsbHkgdGllZCB0
byBhcmd1bWVudCB0eXBlcy4gRG8KIAkJCSAgIG5vdCByZXR1cm4gdGhlIHBhcnRpYWxseSByZXNv
bHZlZCB0eXBlLgotCQkJICovCi0JCQlpZiAoaXNEaWFtb25kKSB7Ci0JCQkJcmV0dXJuIG51bGw7
IC8vIG5vdCB0aGUgcGFydGlhbGx5IGNvb2tlZCB0aGlzLnJlc29sdmVkVHlwZQotCQkJfQotCQkJ
aWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJ
CS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3Mg
PSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkg
Pj0gMDspIHsKLQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBu
dWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFj
ZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJICovCisJCQkJaWYgKGlzRGlh
bW9uZCkgeworCQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29va2VkIHRo
aXMucmVzb2x2ZWRUeXBlCiAJCQkJfQotCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRo
b2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCBUeXBlQ29uc3RhbnRzLklO
SVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKLQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51
bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJpbmRp
bmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNs
b3Nlc3RNYXRjaDsKLQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50
cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJ
CQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9y
aWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8v
IGdlbmVyaWMgbWV0aG9kCi0JCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhv
ZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgx
NzU0MDkpCi0JCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5
cGVCaW5kaW5nKW51bGwpOwotCQkJCQkJfQotCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1h
dGNoOwotCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RN
YXRjaC5vcmlnaW5hbCgpOwotCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNs
b3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1h
dGNoT3JpZ2luYWwpKSB7Ci0JCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1
c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCi0J
CQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2Rp
ZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNl
b2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJCQkvLyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3Ig
Y2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCisJ
CQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwor
CQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKKwkJCQkJCXBzZXVkb0FyZ3Nb
aV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0
aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51
bGwgdHlwZQorCQkJCQl9CisJCQkJCXRoaXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJl
ZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBz
ZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKwkJCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYm
ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJTWV0aG9kQmluZGluZyBj
bG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2Vz
dE1hdGNoOworCQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3
aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJ
CWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3Jp
Z2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8g
Z2VuZXJpYyBtZXRob2QKKwkJCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhv
ZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9kICgx
NzU0MDkpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRl
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdU
eXBlQmluZGluZyludWxsKTsKKwkJCQkJCQl9CisJCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2Vz
dE1hdGNoOworCQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9z
ZXN0TWF0Y2gub3JpZ2luYWwoKTsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNP
ckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9z
ZXN0TWF0Y2hPcmlnaW5hbCkpIHsKKwkJCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhv
ZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lv
bnMpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBp
bGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJfQog
CQkJCX0KKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJCQl9CisJCX0KKwkJaWYgKHRo
aXMucmVzb2x2ZWRUeXBlID09IG51bGwgfHwgIXRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5k
aW5nKCkpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisKKwkJLy8gbnVsbCB0eXBlIGRlbm90ZXMg
ZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNvbnN0YW50IGluaXRzCisJCWlmICh0aGlzLnR5cGUg
IT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuY2FuQmVJbnN0YW50aWF0ZWQoKSkgeworCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlz
LnJlc29sdmVkVHlwZSk7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJCX0KLQl9Ci0J
aWYgKHRoaXMucmVzb2x2ZWRUeXBlID09IG51bGwgfHwgIXRoaXMucmVzb2x2ZWRUeXBlLmlzVmFs
aWRCaW5kaW5nKCkpIHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JLy8gbnVsbCB0eXBlIGRlbm90
ZXMgZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNvbnN0YW50IGluaXRzCi0JaWYgKHRoaXMudHlw
ZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7Ci0J
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluc3RhbnRpYXRlKHRoaXMudHlwZSwgdGhp
cy5yZXNvbHZlZFR5cGUpOwotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7Ci0JfQotCVJlc29s
dXRpb25TdGF0ZSBzdGF0ZSA9IG5ldyBSZXNvbHV0aW9uU3RhdGUoc2NvcGUsIGlzRGlhbW9uZCwg
ZGlhbW9uZE5lZWRzRGVmZXJyaW5nLCBhcmdzQ29udGFpbkNhc3QsIHRoaXMuYXJndW1lbnRUeXBl
cyk7Ci0JaWYgKGRpYW1vbmROZWVkc0RlZmVycmluZykgewotCQl0aGlzLnN1c3BlbmRlZFJlc29s
dXRpb25TdGF0ZSA9IHN0YXRlOyAvLyByZXNvbHZpbmcgdG8gYmUgY29udGludWVkIGxhdGVyICh2
aWEgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlKSkuCi0JCXJldHVybiBuZXcgUG9seVR5
cGVCaW5kaW5nKHRoaXMpOwotCX0KLQotCWlmICghcmVzb2x2ZVBhcnQyKHN0YXRlKSkKLQkJcmV0
dXJuIG51bGw7Ci0JcmV0dXJuIHJlc29sdmVQYXJ0MyhzdGF0ZSk7Ci19Ci0KLS8qKiBTZWNvbmQg
cGFydCBvZiByZXNvbHZpbmcgdGhhdCBtYXkgaGFwcGVuIG11bHRpcGxlIHRpbWVzIGR1cmluZyBv
dmVybG9hZCByZXNvbHV0aW9uLiAqLwotYm9vbGVhbiByZXNvbHZlUGFydDIoUmVzb2x1dGlvblN0
YXRlIHN0YXRlKSB7Ci0JLy8gVE9ETzogYWxsIGluZm9ybWF0aW9uIHBlcnNpc3RlZCBkdXJpbmcg
dGhpcyBtZXRob2QgbWF5IG5lZWQgdG8gYmUgc3RvcmVkIHBlciB0YXJnZXRUeXBlPwotCWlmIChz
dGF0ZS5pc0RpYW1vbmQpIHsKLQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsK
LQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMoKFBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBl
LmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzdGF0ZS5zY29wZSk7Ci0JCWlm
IChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKLQkJCWlmICghc3RhdGUuZGlhbW9uZE5lZWRzRGVm
ZXJyaW5nKSB7Ci0JCQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJF
bGlkZWRUeXBlcyh0aGlzKTsKLQkJCQlzdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJ
CQl0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7Ci0JCQl9IGVsc2UgewotCQkJCXN0YXRlLmNhbm5v
dEluZmVyRGlhbW9uZCA9IHRydWU7IC8vIGRlZmVyIHJlcG9ydGluZworCQlpZiAoaXNEaWFtb25k
KSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQkJUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5j
cmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJpY1R5cGUudHlwZVZhcmlh
YmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJVHlwZUJpbmRpbmcgW10g
aW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMu
cmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7
CisJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKKwkJCQlyZXR1cm4gdGhpcy5yZXNv
bHZlZFR5cGUgPSBudWxsOwogCQkJfQotCQkJcmV0dXJuIGZhbHNlOworCQkJUmVmZXJlbmNlQmlu
ZGluZyBhbGxvY2F0aW9uVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCWlmICh0aGlz
LnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQuZGVmaW5l
c1RhcmdldFR5cGUoKSkgeworCQkJCXNjb3BlLnNob3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbCA9
IHRydWU7CisJCQkJdHJ5IHsKKwkJCQkJdGhpcy5iaW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0
b3IoYWxsb2NhdGlvblR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisJCQkJfSBmaW5h
bGx5IHsKKwkJCQkJc2NvcGUuc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsID0gZmFsc2U7CisJ
CQkJfQorCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOworCQkJfQorCQkJdGhp
cy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gYWxsb2NhdGlvblR5cGU7
IAogCQl9Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZSA9IHN0
YXRlLnNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5
cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKLQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0g
ZmFsc2U7Ci0gCX0KLQlSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKLQl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0
b3JCaW5kaW5nKHN0YXRlLnNjb3BlLCB0aGlzLCByZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRU
eXBlcyk7Ci0JcmV0dXJuIHRydWU7Ci19Ci0KLS8qKiBGaW5hbCBwYXJ0IG9mIHJlc29sdmluZyAo
b25jZSk6IGNoZWNrIGFuZCByZXBvcnQgdmFyaW91cyBlcnJvciBjb25kaXRpb25zLiAqLwotVHlw
ZUJpbmRpbmcgcmVzb2x2ZVBhcnQzKFJlc29sdXRpb25TdGF0ZSBzdGF0ZSkgewotCWlmICh0aGlz
LnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1
dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpCi0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsK
LQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSA9IG51bGw7Ci0JaWYgKHN0YXRlLmNhbm5v
dEluZmVyRGlhbW9uZCkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJ
bmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxs
OworCX0gZWxzZSB7CisJCWlmIChpc0RpYW1vbmQpIHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2Vu
ZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUp
LmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXpl
ZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVy
aWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2lu
Z1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRU
eXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgp
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51
bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVz
KHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJCQl9CisJCQl0
aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVz
LCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2lu
Z1R5cGUoKSk7CisJCX0KIAl9CisJCiAJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9
IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBm
aW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0aGlzLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5h
cmd1bWVudFR5cGVzKTsKKwkJCiAJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkg
ewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpIHsKIAkJCXRoaXMu
YmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IGFsbG9jYXRpb25UeXBlOwpAQCAtNTI5LDMwICs0ODYs
MjkgQEAKIAkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnR5cGUucmVzb2x2ZWRUeXBl
LmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCXJldHVybiBudWxsOwogCQl9Ci0JCXN0YXRlLnNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcp
OworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhp
cy5iaW5kaW5nKTsKIAkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwogCX0KIAlpZiAoKHRoaXMu
YmluZGluZy50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewotCQlzdGF0
ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywg
dGhpcy5iaW5kaW5nKTsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJbkNv
bnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CiAJfQotCWlmIChpc01ldGhvZFVzZURlcHJl
Y2F0ZWQodGhpcy5iaW5kaW5nLCBzdGF0ZS5zY29wZSwgdHJ1ZSkpIHsKLQkJc3RhdGUuc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOwor
CWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhpcy5iaW5kaW5nLCBzY29wZSwgdHJ1ZSkpIHsK
KwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcs
IHRoaXMpOwogCX0KLQlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHN0YXRlLnNjb3BlLCBu
dWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgdGhpcy5h
cmd1bWVudFR5cGVzLCBzdGF0ZS5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNr
SW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVsbCwgYWxsb2NhdGlvblR5cGUsIHRoaXMuYmlu
ZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFp
bkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAJ
aWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgp
LnR5cGVWYXJpYWJsZXMgPT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQlzdGF0ZS5z
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJ
bnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50
eXBlQXJndW1lbnRzKTsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBl
QXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5
cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50cyk7CiAJfQotCWlmICghc3RhdGUuaXNEaWFt
b25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJn
dW1lbnRzKCkpIHsKLSAJCWNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9z
aW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKKwlpZiAoIWlzRGlh
bW9uZCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlV2l0aEFjdHVhbEFy
Z3VtZW50cygpKSB7CisgCQljaGVja1R5cGVBcmd1bWVudFJlZHVuZGFuY3koKFBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xv
c2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAgCX0KLQlDb21waWxlck9w
dGlvbnMgY29tcGlsZXJPcHRpb25zID0gc3RhdGUuc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJ
aWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQg
JiYgKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5Jc051bGxuZXNzS25vd24pID09IDAp
IHsKLQkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllcihzdGF0ZS5zY29wZS5lbnZp
cm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMuaW5oZXJpdE51bGxBbm5vdGF0aW9ucykKLQkJCQku
Y2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhv
ZCovLCBmYWxzZSwgc3RhdGUuc2NvcGUpOworCQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZl
cmlmaWVyKHNjb3BlLmVudmlyb25tZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFu
bm90YXRpb25zKQorCQkJCS5jaGVja0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGlu
ZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBzY29wZSk7CiAJfQotCXJlY29yZEV4Y2VwdGlv
bnNGb3JFbmNsb3NpbmdMYW1iZGEoc3RhdGUuc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNl
cHRpb25zKTsKKwlyZWNvcmRFeGNlcHRpb25zRm9yRW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0aGlz
LmJpbmRpbmcudGhyb3duRXhjZXB0aW9ucyk7CiAJcmV0dXJuIGFsbG9jYXRpb25UeXBlOwogfQog
CkBAIC01NzEsNyArNTI3LDMzIEBACiAJfQogfQogCi1wdWJsaWMgVHlwZUJpbmRpbmdbXSBpbmZl
ckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVm
ZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywg
ZmluYWwgQmxvY2tTY29wZSBzY29wZSkgeworLy8gRm9yIGFsbG9jYXRpb24gZXhwcmVzc2lvbnMs
IGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUgYXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5LCBz
aW5jZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVzIGFyZSBub3QgZ2VuZXJpYy4KK3B1YmxpYyBi
b29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2Nv
cGUgc2NvcGUpIHsKKwlyZXR1cm4gaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7
Cit9CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgZmluYWwgU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3Jz
IHx8IHRoaXMuYmluZGluZyA9PSBudWxsIHx8ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmco
KSB8fCB0YXJnZXRUeXBlID09IG51bGwgfHwgc2NvcGUgPT0gbnVsbCkKKwkJcmV0dXJuIGZhbHNl
OworCVR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gdGhpcy5yZXNvbHZlZFR5cGU7CisJaWYg
KGlzUG9seUV4cHJlc3Npb24oKSkgeworCQlUeXBlQmluZGluZyBvcmlnaW5hbEV4cGVjdGVkVHlw
ZSA9IHRoaXMudHlwZUV4cGVjdGVkOworCQl0cnkgeworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSB0
YXJnZXRUeXBlOworCQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBh
cmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25t
ZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5
cGVWYXJpYWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5k
aW5nIFtdIGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBl
LCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywg
c2NvcGUpOworCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gZmFsc2U7
CisJCQlhbGxvY2F0aW9uVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVy
aXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJfSBmaW5hbGx5
IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0gb3JpZ2luYWxFeHBlY3RlZFR5cGU7CisJCX0KKwl9
CisJcmV0dXJuIGFsbG9jYXRpb25UeXBlICE9IG51bGwgJiYgYWxsb2NhdGlvblR5cGUuaXNDb21w
YXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7Cit9CisKK3B1YmxpYyBUeXBlQmluZGluZ1td
IGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBl
LCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRU
eXBzLCBmaW5hbCBTY29wZSBzY29wZSkgewogCS8qIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUg
YW5kIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIHN5bnRo
ZXNpemUgYSBnZW5lcmljIHN0YXRpYyBmYWN0b3J5CiAJICAgbWV0aG9kIHRoYXQgd291bGQsIGdp
dmVuIHRoZSBhcmd1bWVudCB0eXBlcyBhbmQgdGhlIGludm9jYXRpb24gc2l0ZSwgbWFudWZhY3R1
cmUgYSBwYXJhbWV0ZXJpemVkIG9iamVjdCBvZiB0eXBlIGFsbG9jYXRpb25UeXBlLgogCSAgIElm
IHdlIGFyZSBzdWNjZXNzZnVsIHRoZW4gYnkgZGVzaWduIGFuZCBjb25zdHJ1Y3Rpb24sIHRoZSBw
YXJhbWV0ZXJpemF0aW9uIG9mIHRoZSByZXR1cm4gdHlwZSBvZiB0aGUgZmFjdG9yeSBtZXRob2Qg
aXMgaWRlbnRpY2FsCkBAIC01ODEsMTcgKzU2Myw2IEBACiAJaWYgKGZhY3RvcnkgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgZmFjdG9yeS5pc1ZhbGlkQmlu
ZGluZygpKSB7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBnZW5lcmljRmFj
dG9yeSA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGZhY3Rvcnk7CiAJCXRo
aXMuaW5mZXJyZWRSZXR1cm5UeXBlID0gZ2VuZXJpY0ZhY3RvcnkuaW5mZXJyZWRSZXR1cm5UeXBl
OwotCQkvLyB0aGlzIGlzIG91ciBsYXN0IGNoYW5jZSB0byBpbnNwZWN0IHRoZSByZXN1bHQgb2Yg
dGhlIGluZmVyZW5jZSB0aGF0IGlzIGNvbm5lY3RlZCB0byB0aGUgdGhyb3ctYXdheSBmYWN0b3J5
IGJpbmRpbmcKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gZ2V0SW5mZXJlbmNlQ29u
dGV4dChnZW5lcmljRmFjdG9yeSk7Ci0JCWlmIChpbmZDdHgxOCAhPSBudWxsICYmIGluZkN0eDE4
LnN0ZXBDb21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsK
LQkJCS8vIHJlZnJlc2ggYXJndW1lbnRUeXBlcyBmcm9tIHVwZGF0ZWQgYmluZGluZ3MgaW4gYXJn
dW1lbnRzOgotCQkJLy8gKHRoaXMgc2hvdWxkbid0IGJlIHN0cmljdGx5IG5lY2Vzc2FyeSwgYXMg
RnVuY3Rpb25FeHByZXNzaW9uLmlzQ29tcGF0aWJsZVdpdGgoKSBzaG91bGQgZ2l2ZSB0aGUgc2Ft
ZSByZXN1bHQsCi0JCQkvLyAgYnV0IGl0J3MgcHJvYmFibHkgYmUgYSBnb29kIGlkZWEgdG8gYXZv
aWQgdGhlIG5lY2Vzc2l0eSB0byBjYWxsIGlzQ29tcGF0aWJsZVdpdGgoKSBpbiB0aGUgZmlyc3Qg
cGxhY2UpLiAKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRUeXBzLmxlbmd0aDsgaSsr
KSB7Ci0JCQkJaWYgKGFyZ3VtZW50VHlwc1tpXSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykK
LQkJCQkJYXJndW1lbnRUeXBzW2ldID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwot
CQkJfQotCQl9CiAJCXJldHVybiAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylmYWN0b3J5LnJl
dHVyblR5cGUpLmFyZ3VtZW50czsKIAl9CiAJcmV0dXJuIG51bGw7CkBAIC02OTksMTAyICs2NzAs
MjMgQEAKIH0KIAogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLXB1YmxpYyBNZXRob2RC
aW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJv
cnMsIFNjb3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9
IG51bGwgJiYgdGFyZ2V0VHlwZSAhPSBudWxsKSB7Ci0JCXNldEV4cGVjdGVkVHlwZSh0YXJnZXRU
eXBlKTsKLQkJaWYgKCFyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUp
KSB7Ci0JCQlpZiAocmVwb3J0RXJyb3JzICYmICF0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0
ZS5oYXNSZXBvcnRlZEVycm9yKSB7Ci0JCQkJaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0
YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fu
bm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJCQllbHNlCi0JCQkJCXNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3Rl
ZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJCXRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJfQotCQkJcmV0dXJu
IG51bGw7Ci0JCX0KLQl9Ci0JaWYgKHJlcG9ydEVycm9ycyAmJiB0aGlzLmJpbmRpbmcgIT0gbnVs
bCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJaWYgKHRoaXMuYmluZGlu
Zy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKQotCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNz
ID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwotCQlpZiAodGhpcy5zdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JCQl0aGlzLnN1c3Bl
bmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJfQotCX0KK3B1
YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKIAlyZXR1cm4gdGhpcy5iaW5kaW5nOwotfQotcHVibGljIFR5cGVCaW5kaW5nIGNo
ZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgewotCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQlib29sZWFuIG5lZWRz
VXBkYXRlID0gdGhpcy5iaW5kaW5nID09IG51bGwgfHwgCQkJCQkJCQkJCQkJCQkJCS8vIG5vdCB5
ZXQgcmVzb2x2ZWQKLQkJCSh0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRhcmdldFR5cGUg
IT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBl
KSk7CS8vIHByZXZpb3VzIGF0dGVtcHQgd2FzIHdyb25nCi0JaWYgKG5lZWRzVXBkYXRlICYmIHRo
aXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJLy8gQXR0ZW1wdCB0byByZXNvbHZl
IGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAotCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUpOwotCX0KLQkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKCwsKToKLQlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBn
ZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5k
aW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNl
Q29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0
VHlwZTsKLQkJCU1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0
aW9uVHlwZSh0aGlzLCAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJp
bmRpbmcpOwotCQkJaWYgKHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBl
KSkgewotCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVw
ZGF0ZWRCaW5kaW5nLCBzY29wZSk7Ci0JCQl9Ci0JCX0KLQl9Ci0JaWYgKHRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJcmV0dXJuIHJlc29sdmVQYXJ0Myh0aGlzLnN1
c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsK
IH0KIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewogCXJldHVybiB0aGlzLmFyZ3Vt
ZW50czsKIH0KIAotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBk
YXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5j
ZUNvbnRleHRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkgPT0gdXBkYXRlZEJp
bmRpbmcub3JpZ2luYWwoKSkgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5j
ZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldCh0aGlzLmJpbmRpbmcpOwotCQlp
ZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVw
ZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBmcm9tIGFu
IG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9uZSAoYnV0
IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24o
dGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQl9Ci0JfQotCXRoaXMuYmluZGluZyA9IHVw
ZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRUeXBlID0gdXBkYXRlZEJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3M7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRh
YmxlKCk7CiAJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7Ci0J
TWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmlnaW5hbCgpOwotCWlmIChvcmlnaW5h
bCBpbnN0YW5jZW9mIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKSB7Ci0JCVN5bnRoZXRp
Y0ZhY3RvcnlNZXRob2RCaW5kaW5nIHN5bnRoT3JpZ2luYWwgPSAoU3ludGhldGljRmFjdG9yeU1l
dGhvZEJpbmRpbmcpb3JpZ2luYWw7Ci0JCVBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIHBhcmFt
ZXRlcml6ZWRDdG9yID0gc3ludGhPcmlnaW5hbC5hcHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVj
dG9yKG1ldGhvZC50eXBlQXJndW1lbnRzKTsKLQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQo
cGFyYW1ldGVyaXplZEN0b3IsIGluZkN0eDE4KTsKLQl9Ci19Ci1wdWJsaWMgYm9vbGVhbiB1c2Vz
SW5mZXJlbmNlKCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwog
fQogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRl
cml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRz
ID09IG51bGwpCiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0
aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gaW5u
ZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBu
dWxsOwotfQotcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkgewotCXRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVy
SW5mZXJlbmNlSGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwot
fQotCiAvLy0tIGludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIHB1YmxpYyBFeHByZXNzaW9u
Q29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAlyZXR1cm4gdGhpcy5leHByZXNzaW9u
Q29udGV4dDsKQEAgLTgwMiw0ICs2OTQsNCBAQAogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBm
cmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKIAlyZXR1cm4gbmV3IEluZmVyZW5j
ZUNvbnRleHQxOChzY29wZSwgdGhpcy5hcmd1bWVudHMsIHRoaXMpOwogfQotfQorfQpcIE5vIG5l
d2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxF
eHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmlu
ZGV4IGVlMzEwODYuLmNjMjg3N2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxF
eHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2
YQpAQCAtNTcsNyArNTcsNiBAQAogCXByaXZhdGUgYm9vbGVhbiBpc1BvbHlFeHByZXNzaW9uID0g
ZmFsc2U7CiAJcHJpdmF0ZSBUeXBlQmluZGluZyBvcmlnaW5hbFZhbHVlSWZUcnVlVHlwZTsKIAlw
cml2YXRlIFR5cGVCaW5kaW5nIG9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZTsKLQlwcml2YXRlIEJs
b2NrU2NvcGUgcG9seUV4cHJlc3Npb25TY29wZTsKIAlwcml2YXRlIGJvb2xlYW4gdXNlMThzcGVj
aWZpY3M7CiAJcHVibGljIENvbmRpdGlvbmFsRXhwcmVzc2lvbigKIAkJRXhwcmVzc2lvbiBjb25k
aXRpb24sCkBAIC00NjQsMTIgKzQ2Myw2IEBACiAJCQlpZiAodGhpcy52YWx1ZUlmRmFsc2UgaW5z
dGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgdGhpcy52YWx1ZUlmRmFsc2UuYml0cyB8PSBEaXNhYmxl
VW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KIAkJCXRoaXMub3Jp
Z2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFsc2UucmVzb2x2ZVR5cGUoc2Nv
cGUpOwogCi0JCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJaWYgKHRoaXMuZXhwZWN0
ZWRUeXBlID09IG51bGwpIHsKLQkJCQkJdGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7
IC8vIHByZXNlcnZlIGZvciBldmVudHVhbCByZXNvbHV0aW9uL2Vycm9yIHJlcG9ydGluZy4KLQkJ
CQl9Ci0JCQl9Ci0KIAkJCWlmIChjb25kaXRpb25UeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5h
bFZhbHVlSWZUcnVlVHlwZSA9PSBudWxsIHx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBl
ID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJCX0gZWxzZSB7CkBAIC00ODQsMTEgKzQ3Nyw5
IEBACiAJCX0KIAkJaWYgKGlzUG9seUV4cHJlc3Npb24oKSkgewogCQkJaWYgKHRoaXMuZXhwZWN0
ZWRUeXBlID09IG51bGwpIHsKLQkJCQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUgPSBzY29wZTsg
Ly8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0aW5nLgogCQkJ
CXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwogCQkJfQotCQkJY29tcHV0ZUNvbnZl
cnNpb25zKHNjb3BlLCB0aGlzLmV4cGVjdGVkVHlwZSk7Ci0JCQlyZXR1cm4gdGhpcy5yZXNvbHZl
ZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9
IGNvbXB1dGVDb252ZXJzaW9ucyhzY29wZSwgdGhpcy5leHBlY3RlZFR5cGUpID8gdGhpcy5leHBl
Y3RlZFR5cGUgOiBudWxsOwogCQl9CiAJCVR5cGVCaW5kaW5nIHZhbHVlSWZUcnVlVHlwZSA9IHRo
aXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGU7CiAJCVR5cGVCaW5kaW5nIHZhbHVlSWZGYWxzZVR5
cGUgPSB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZTsKQEAgLTY2MSw3ICs2NTIsOCBAQAog
CQlyZXR1cm4gbnVsbDsKIAl9CiAKLQlwcm90ZWN0ZWQgdm9pZCBjb21wdXRlQ29udmVyc2lvbnMo
QmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCXByb3RlY3RlZCBi
b29sZWFuIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0
YXJnZXRUeXBlKSB7CisJCWJvb2xlYW4gb2sgPSB0cnVlOwogCQlpZiAodGhpcy5vcmlnaW5hbFZh
bHVlSWZUcnVlVHlwZSAhPSBudWxsICYmIHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkgewogCQkJaWYgKHRoaXMudmFsdWVJZlRydWUuaXNDb25zdGFudFZhbHVl
T2ZUeXBlQXNzaWduYWJsZVRvVHlwZSh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLCB0YXJn
ZXRUeXBlKQogCQkJCQl8fCB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlzQ29tcGF0aWJs
ZVdpdGgodGFyZ2V0VHlwZSkpIHsKQEAgLTY4Miw2ICs2NzQsNyBAQAogCQkJCX0KIAkJCX0gZWxz
ZSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudHlwZU1pc21hdGNoRXJyb3IodGhpcy5v
cmlnaW5hbFZhbHVlSWZUcnVlVHlwZSwgdGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlmVHJ1ZSwgbnVs
bCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQogCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVl
SWZGYWxzZVR5cGUgIT0gbnVsbCAmJiB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZS5pc1Zh
bGlkQmluZGluZygpKSB7CkBAIC03MDQsOCArNjk3LDEwIEBACiAJCQkJfQogCQkJfSBlbHNlIHsK
IAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdp
bmFsVmFsdWVJZkZhbHNlVHlwZSwgdGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlmRmFsc2UsIG51bGwp
OworCQkJCW9rID0gZmFsc2U7CiAJCQl9CiAJCX0KKwkJcmV0dXJuIG9rOwogCX0KIAogCXB1Ymxp
YyB2b2lkIHNldEV4cGVjdGVkVHlwZShUeXBlQmluZGluZyBleHBlY3RlZFR5cGUpIHsKQEAgLTcy
MCwxOCArNzE1LDExIEBACiAJCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwogCX0KIAkK
LQlwdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCS8vIGluIDEuOCBpZiB0cmVhdGVkIGFz
IGEgcG9seSBleHByZXNzaW9uOgotCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQl0YXJn
ZXRUeXBlID0gdGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlKTsK
LQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLnZhbHVlSWZUcnVlLmNoZWNr
QWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQl0aGlzLm9yaWdp
bmFsVmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNlLmNoZWNrQWdhaW5zdEZpbmFs
VGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQljb21wdXRlQ29udmVyc2lvbnModGhp
cy5wb2x5RXhwcmVzc2lvblNjb3BlLCB0YXJnZXRUeXBlKTsKLQkJCXRoaXMucmVzb2x2ZWRUeXBl
ID0gdGFyZ2V0VHlwZTsKLQkJfQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CisJcHVibGlj
IGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZVZhcmlhYmxlQmluZGluZyB0
eXBlVmFyaWFibGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXJldHVybiB0aGlzLnZhbHVl
SWZUcnVlLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHR5cGVWYXJpYWJsZSwgbWV0aG9kKSAK
KwkJCQkmJiB0aGlzLnZhbHVlSWZGYWxzZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBl
VmFyaWFibGUsIG1ldGhvZCk7IC8vIG5vdCBwZXJmZWN0LgogCX0KLQkKKwogCXB1YmxpYyBib29s
ZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1l
dGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJCXJldHVybiB0aGlzLnZhbHVlSWZUcnVlLmlzUGVydGlu
ZW50VG9BcHBsaWNhYmlsaXR5KHRhcmdldFR5cGUsIG1ldGhvZCkgCiAJCQkJJiYgdGhpcy52YWx1
ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodGFyZ2V0VHlwZSwgbWV0aG9kKTsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQppbmRleCAyNDM0OTE1Li40NzM0
YzM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCkBAIC01Niw3ICs1
Niw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5U
eXBlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlZhcmlhYmxlQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIAogcHVibGljIGNsYXNzIEV4cGxpY2l0
Q29uc3RydWN0b3JDYWxsIGV4dGVuZHMgU3RhdGVtZW50IGltcGxlbWVudHMgSW52b2NhdGlvbiB7
CiAKQEAgLTc2LDExICs3NSw3IEBACiAKIAkvLyBUT0RPIFJlbW92ZSBvbmNlIERPTVBhcnNlciBp
cyBhY3RpdmF0ZWQKIAlwdWJsaWMgaW50IHR5cGVBcmd1bWVudHNTb3VyY2VTdGFydDsKLQotCSAv
LyBob2xkIG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBp
bmZlcmVuY2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5k
aWRhdGUpOgotCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQR01CLEluZmVyZW5jZUNvbnRl
eHQxOD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcml2YXRlIElubmVySW5mZXJlbmNlSGVscGVy
IGlubmVySW5mZXJlbmNlSGVscGVyOwotCisJCiAJcHVibGljIEV4cGxpY2l0Q29uc3RydWN0b3JD
YWxsKGludCBhY2Nlc3NNb2RlKSB7CiAJCXRoaXMuYWNjZXNzTW9kZSA9IGFjY2Vzc01vZGU7CiAJ
fQpAQCAtMzk0LDEwICszODksNiBAQAogCQkJCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1
bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpIHsKIAkJCQkJCWFyZ0hhc0Vycm9yID0g
dHJ1ZTsKIAkJCQkJfQotCQkJCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8ICgoYXJndW1lbnQgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFyZ3VtZW50KS51c2VzSW5mZXJl
bmNlKCkpKSkgewotCQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkK
LQkJCQkJCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVs
cGVyKCk7Ci0JCQkJCX0KIAkJCQl9CiAJCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CiAJCQkJCWlmIChy
ZWNlaXZlclR5cGUgPT0gbnVsbCkgewpAQCAtNDk4LDU2ICs0ODksMjIgQEAKIAkJdmlzaXRvci5l
bmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJfQogCi0JLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb246
IC0tCi0JcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBl
LCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpIHsKLQkJaWYgKHJlcG9ydEVycm9y
cykgewotCQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQotCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3RlZGx5
IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJZWxzZSBpZiAoIXRoaXMuYmlu
ZGluZy5pc1ZhbGlkQmluZGluZygpKQotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFs
aWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwotCQl9CisJLy8gLS0gaW50ZXJmYWNl
IEludm9jYXRpb24KKwlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CiAJCXJldHVybiB0aGlzLmJpbmRpbmc7CiAJfQorCQor
CXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKKwkJ
Ly8gTm90aGluZyB0byBkby4KKwl9CisJCisJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJ
bmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCQly
ZXR1cm4gbnVsbDsKKwl9CisJCiAJcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CiAJ
CXJldHVybiB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGlu
Z3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkg
ewotCQlib29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsK
LQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewotCQkJSW5mZXJlbmNlQ29u
dGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5y
ZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKLQkJCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmlu
ZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJ
CXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJCS8v
IHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93
IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJCWhh
c1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGlu
Zyk7Ci0JCQl9Ci0JCX0KLQkJdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JCXJldHVy
biBoYXNVcGRhdGU7Ci0JfQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0
MTggaW5mQ3R4MTgpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKLQkJ
CXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKLQkJdGhp
cy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7Ci0JfQotCXB1YmxpYyBJ
bmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluZyBtZXRob2QpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkK
LQkJCXJldHVybiBudWxsOwotCQlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKLQl9Ci0JcHVibGljIGJvb2xlYW4gdXNlc0luZmVy
ZW5jZSgpIHsKLQkJcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJCSYmIGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBudWxsOwotCX0K
LQlwdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCQlyZXR1cm4gdGhpcy5pbm5l
ckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotCX0KLQlwdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURv
bmUoKSB7Ci0JCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotCX0KLQlwdWJsaWMg
SW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKSB7Ci0JCXJldHVybiB0
aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotCX0KLQogCS8vIC0tIGludGVyZmFjZSBJbnZvY2F0
aW9uU2l0ZTogLS0KIAlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29u
dGV4dChTY29wZSBzY29wZSkgewogCQlyZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29w
ZSwgdGhpcy5hcmd1bWVudHMsIHRoaXMpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRleCA5MThiMWI0Li40YmU3
ODkwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0V4cHJlc3Npb24uamF2YQpAQCAtOTU5LDYgKzk1OSwxMCBAQAogCXJldHVybiB0aGlzLmNv
bnN0YW50OwogfQogCitwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShU
eXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsK
KwlyZXR1cm4gdHJ1ZTsKK30KKwogcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2Fi
aWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAly
ZXR1cm4gdHJ1ZTsKIH0KQEAgLTEwNjAsMTYgKzEwNjQsNiBAQAogCQl9CiAJfQogCXJldHVybiBl
eHByZXNzaW9uVHlwZTsKLX0KLQotLyoqCi0gKiBPbmNlIG91dGVyIGNvbnRleHRzIGhhdmUgZmlu
YWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBleHByZXNzaW9uLAotICogcGVyZm9ybSBh
bnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIGRlbGF5ZWQgcHJldmlvdXNseS4KLSAqIEBw
YXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSAoYWthIGV4cGVjdGVkVHlwZSkg
Zm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJhbSBzY29wZSBzY29wZSBmb3IgZXJyb3IgcmVw
b3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5
cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlyZXR1cm4gdGhpcy5y
ZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5IGNob29zZSB0byBkbyByZWFsIHN0dWZmIGhl
cmUKIH0KIAogLyoqCkBAIC0xMjUwLDQgKzEyNDQsNCBAQAogcHVibGljIFZhcmlhYmxlQmluZGlu
ZyBudWxsQW5ub3RhdGVkVmFyaWFibGVCaW5kaW5nKGJvb2xlYW4gc3VwcG9ydFR5cGVBbm5vdGF0
aW9ucykgewogCXJldHVybiBudWxsOwogfQotfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZp
bGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1YWMxNGYyLi4wYTdiYjdh
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0xMDcsMTkgKzEwNywyMiBA
QAogCQlyZXR1cm4gdHJ1ZTsgLy8gYWx3YXlzIGFzIHBlciBpbnRyb2R1Y3Rpb24gb2YgcGFydCBE
LCBKU1IgMzM1CiAJfQogCi0JcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxp
dHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJaWYg
KHRhcmdldFR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSB7Ci0JCQlpZiAobWV0
aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQotCQkJCWlm
ICgoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBt
ZXRob2QpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3Io
KSAmJiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9
PSBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0gZWxzZSB7
IC8vIGZvciBpbnRlcm5hbCBjYWxscwotCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlh
YmxlID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcpIHRhcmdldFR5cGU7Ci0JCQkJaWYgKHR5cGVWYXJp
YWJsZS5kZWNsYXJpbmdFbGVtZW50IGluc3RhbmNlb2YgTWV0aG9kQmluZGluZykKLQkJCQkJcmV0
dXJuIGZhbHNlOwotCQkJfQorCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmls
aXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhv
ZCkgeworCQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGlu
ZmVyZW5jZQorCQkJaWYgKHR5cGVWYXJpYWJsZS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZCkK
KwkJCQlyZXR1cm4gZmFsc2U7CisJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiB0eXBl
VmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpCisJCQkJ
cmV0dXJuIGZhbHNlOworCQl9IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKKwkJCWlmICh0
eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCBpbnN0YW5jZW9mIE1ldGhvZEJpbmRpbmcpCisJ
CQkJcmV0dXJuIGZhbHNlOwogCQl9CisJCXJldHVybiB0cnVlOworCX0KKwkKKwlwdWJsaWMgYm9v
bGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBN
ZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCQlpZiAodGFyZ2V0VHlwZSBpbnN0YW5jZW9mIFR5cGVW
YXJpYWJsZUJpbmRpbmcpCisJCQlyZXR1cm4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoKFR5
cGVWYXJpYWJsZUJpbmRpbmcpIHRhcmdldFR5cGUsIG1ldGhvZCk7CiAJCXJldHVybiB0cnVlOwog
CX0KIApAQCAtMjAzLDExICsyMDYsNiBAQAogCQkJCWJyZWFrOwogCQl9CiAJCXJldHVybiBudWxs
OwotCX0KLQotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUo
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0VHlwZSA9IHRh
cmdldFR5cGUudW5jYXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1cm4gcmVzb2x2
ZVR5cGVFeHBlY3RpbmcodGhpcy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7CiAJfQogCiAJ
Y2xhc3MgVmlzaWJpbGl0eUluc3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRvciB7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0Cmlu
ZGV4IDgzODFiNWMuLjAwMDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBl
ci5qYXZhCisrKyAvZGV2L251bGwKQEAgLTEsNDIgKzAsMCBAQAotLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAxNCBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
LSAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCi0gKgotICogQ29udHJpYnV0b3JzOgotICogICAgIFN0ZXBoYW4gSGVycm1hbm4g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LwotcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwotCi1pbXBv
cnQgamF2YS51dGlsLkhhc2hNYXA7Ci1pbXBvcnQgamF2YS51dGlsLk1hcDsKLQotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5n
OwotCi1wdWJsaWMgY2xhc3MgSW5uZXJJbmZlcmVuY2VIZWxwZXIgewotCi0JLyoqIEZvciBlYWNo
IGNhbmRpZGF0ZSBtZXRob2Qgc3RvcmUgaGVyZSB0aGUgYXJyYXkgb2YgYXJndW1lbnQgdHlwZXMg
aWYgaW5uZXIgaW5mZXJlbmNlIGhhcyBpbXByb3ZlZCBhbnkgZHVyaW5nIEludm9jYXRpb24gVHlw
ZSBJbmZlcmVuY2UuICovCi0JcHJpdmF0ZSBNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1td
PiBhcmdUeXBlc1BlckNhbmRpZGF0ZSA9IG5ldyBIYXNoTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJp
bmRpbmdbXT4oKTsKLQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5uZXJSZXN1bHQoTWV0aG9kQmlu
ZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSwgaW50IGFyZ0NvdW50LCBpbnQg
YXJnSWR4KSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2Fu
ZGlkYXRlLmdldChtZXRob2QpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXRoaXMuYXJn
VHlwZXNQZXJDYW5kaWRhdGUucHV0KG1ldGhvZCwgYXJnVHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdb
YXJnQ291bnRdKTsKLQkJYXJnVHlwZXNbYXJnSWR4XSA9IHJlc29sdmVkVHlwZTsKLQl9Ci0JCi0J
cHVibGljIFR5cGVCaW5kaW5nW10gZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZShNZXRob2RC
aW5kaW5nIGNhbmRpZGF0ZSwgVHlwZUJpbmRpbmdbXSBwbGFpbkFyZ1R5cGVzKSB7Ci0JCVR5cGVC
aW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChjYW5kaWRh
dGUpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXJldHVybiBwbGFpbkFyZ1R5cGVzOwot
CQkvLyBmaWxsIGluIGFueSBibGFua3Mgbm93OgotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ1R5
cGVzLmxlbmd0aDsgaSsrKSB7Ci0JCQlpZiAoYXJnVHlwZXNbaV0gPT0gbnVsbCkKLQkJCQlhcmdU
eXBlc1tpXSA9IHBsYWluQXJnVHlwZXNbaV07Ci0JCX0KLQkJcmV0dXJuIGFyZ1R5cGVzOwotCX0K
LX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9J
bnZvY2F0aW9uLmphdmEKaW5kZXggYWM1NDQ3Zi4uMDViY2IzMiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9JbnZvY2F0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKQEAg
LTE5LDcxICsxOSwzNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuVHlwZUJpbmRpbmc7CiAKIC8qKgotICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRp
b24gQVNUIG5vZGVzIHRoYXQgY2FuIHRyaWdnZXIgCi0gKiA8dWw+Ci0gKiA8bGk+SW52b2NhdGlv
biBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZXMgKDE4LjUuMSksIGFuZDwvbGk+IAotICogPGxpPklu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKDE4LjUuMikuPC9saT4KLSAqIDwvdWw+Ci0gKi8KKyAq
IEFic3RyYWN0aW9uIGZvciBpbnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0cmlnZ2VyIG92
ZXJsb2FkIHJlc29sdXRpb24gcG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlCisqLwog
cHVibGljIGludGVyZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgewogCiAJ
RXhwcmVzc2lvbltdIGFyZ3VtZW50cygpOwotCisJCiAJLyoqCiAJICogQW5zd2VyIHRoZSByZXNv
bHZlZCBtZXRob2QgYmluZGluZyBvZiB0aGlzIGludm9jYXRpb24uCiAJICogSWYgYSB0YXJnZXQg
dHlwZSBpcyBnaXZlbiwgdGhlIGludm9jYXRpb24gZ2V0cyBhIGNoYW5jZSB0byBkbyByZXBlYXRl
ZCBtZXRob2QgbG9va3VwLgogCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0YXJnZXQgdHlwZSBv
ZiB0aGlzIGludm9jYXRpb24gb3IgbnVsbCBpZiBub3QgeWV0IGtub3duCi0JICogQHBhcmFtIHJl
cG9ydEVycm9ycyBpZiB0cnVlIHRoZW4gdGhpcyBpcyB0aGUgbGFzdCBjYWxsLCBpZiBubyB2YWxp
ZCBiaW5kaW5nIGNhbiBiZSBhbnN3ZXJlZCB3ZSBzaG91bGQgcmVwb3J0IGFuIGVycm9yCi0JICog
QHBhcmFtIHNjb3BlIGlmIHJlcG9ydEVycm9ycyBpcyB0cnVlIHRoZW4gdGhpcyBzY29wZSBjYW4g
YmUgdXNlZCBmb3IgZXJyb3IgcmVwb3J0aW5nCisJICogQHBhcmFtIHNjb3BlIHRoZSBzY29wZSB0
byB1c2UgZm9yIGxvb2t1cC4KIAkgKiAKIAkgKi8KLQlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKTsK
LQorCU1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSk7CisJCiAJLyoqCiAJICogUmVnaXN0ZXIgdGhlIGdpdmVuIGluZmVyZW5jZSBjb250ZXh0
LCB3aGljaCBwcm9kdWNlZCB0aGUgZ2l2ZW4gbWV0aG9kIGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVz
dWx0LgogCSAqIExhdGVyIHdoZW4gdGhlIHNhbWUgbWV0aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBt
b3N0IHNwZWNpZmljIG1ldGhvZCwgdGhlIGluZmVyZW5jZSBjb250ZXh0Ci0JICogZm9yIHRoaXMg
cGFpciAoSW52b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcg
e0BsaW5rICNnZXRFeHByZXNzaW9uQ29udGV4dCgpfQorCSAqIGZvciB0aGlzIHBhaXIgKEludm9j
YXRpb24geCBNZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0
SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl9CiAJICogdG8gY29u
dGludWUgdGhlIHR5cGUgaW5mZXJlbmNlLgogCSAqLwogCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VD
b250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5j
ZUNvbnRleHQxOCBpbmZDdHgxOCk7CiAJCisKIAkvKioKLQkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVu
Y2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZCB3aGljaCBtdXN0IGhhdmUgYmVlbiByZWdp
c3RlcmVkCi0JICogdXNpbmcge0BsaW5rICNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpfS4KKwkgKiBS
ZXRyaWV2ZSBhbiBpbmZlcmVuY2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZC4KIAkgKiBA
cGFyYW0gbWV0aG9kIGFuIGludGVybWVkaWF0ZSByZXNvbHZlZCBjYW5kaWRhdGUgZm9yIHRoaXMg
aW52b2NhdGlvbgotCSAqIHJldHVybiBhIHN1c3BlbmRlZCBpbmZlcmVuY2UgY29udGV4dCBvciBu
dWxsIGlmIG5vbmUgd2FzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgbWV0aG9kLgorCSAqIHJldHVybiB0
aGUgYXNzb2NpYXRlZCBpbmZlcmVuY2UgY29udGV4dC4KIAkgKi8KIAlJbmZlcmVuY2VDb250ZXh0
MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2Qp
OwogCi0JLyoqCi0JICogQW5zd2VyIHRydWUgaWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBkZXRlcm1p
bmVkIGl0cyBiaW5kaW5nIHVzaW5nIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFuIHVzZXNJbmZl
cmVuY2UoKTsKLQkKLQkvKioKLQkgKiBXaGVyZSB0aGUgQVNUIG5vZGUgbWF5IGhvbGQgcmVmZXJl
bmNlcyB0byB0aGUgcmVzdWx0cyBvZiBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNl
LAotCSAqIHRoaXMgbWV0aG9kIGFsbG93cyB0byB1cGRhdGUgdGhvc2UgcmVmZXJlbmNlcyB0byB0
aGUgcmVzdWx0IG9mIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuCi0JICogTm90ZSB0aGF0IHBv
dGVudGlhbGx5IG1vcmUgdGhhbiBqdXN0IHRoZSBtZXRob2QgYmluZGluZyBpcyB1cGRhdGVkLgot
CSAqIEBwYXJhbSB1cGRhdGVkQmluZGluZyB0aGUgZmluYWwgbWV0aG9kIGJpbmRpbmcgYWZ0ZXIg
ZnVsbCBpbmZlcmVuY2UKLQkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgdXNl
ZCBkdXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZQotCSAqIEByZXR1cm4gdHJ1ZSBpZiBh
biB1cGRhdGUgaGFzIGhhcHBlbmVkCi0JICovCi0JYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRo
b2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKTsKLQkKLQkv
KioKLQkgKiBBbnN3ZXIgd2hldGhlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGhhcyBpbm5lciBl
eHByZXNzaW9ucyB0aGF0IHN0aWxsIG5lZWQgdXBkYXRpbmcgYWZ0ZXIgaW5mZXJlbmNlLgotCSAq
LwotCWJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpOwotCi0JLyoqCi0JICogTWFyayB0aGF0IHVw
ZGF0aW5nICh0aGUgbmVlZCBmb3Igd2hpY2ggaXMgc2lnbmFsZWQgdmlhIHtAbGluayAjaW5uZXJz
TmVlZFVwZGF0ZSgpfSkgaGFzIGJlZW4gZG9uZS4KLQkgKi8KLQl2b2lkIGlubmVyVXBkYXRlRG9u
ZSgpOwotCi0JLyoqCi0JICogSWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBhbnkgcG9seSBleHByZXNz
aW9ucyBhcyBhcmd1bWVudHMsIHRoaXMgbWV0aG9kIGFuc3dlcnMgYW4gaW5mZXJlbmNlIGhlbHBl
ciAKLQkgKiB0aGF0IG1lZGlhdGVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLCBldmVuIGlm
IG5vIGFjdHVhbCBpbmZlcmVuY2UgaGFwcGVucyBmb3IgdGhpcyBpbnZvY2F0aW9uLgotCSAqLwot
CUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VT
ZW5kLmphdmEKaW5kZXggMzVmZDNkNS4uODg5YWQ5NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQpAQCAtODAs
NiArODAsOCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuTWlzc2luZ1R5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZE1l
dGhvZEJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Qb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seW1vcnBoaWNN
ZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuUHJvYmxlbU1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKQEAgLTExNSwxNCArMTE3LDEzIEBA
CiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2Fi
aWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRo
b2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJbmZlcmVu
Y2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJl
bmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwogCXByaXZhdGUgYm9vbGVhbiByZWNlaXZl
cklzVHlwZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKLQlwdWJs
aWMgYm9vbGVhbiBhcmd1bWVudHNIYXZlRXJyb3JzOworCXB1YmxpYyBib29sZWFuIGFyZ3VtZW50
c0hhdmVFcnJvcnMgPSBmYWxzZTsKIAkKIAotcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJs
b2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8g
Zmxvd0luZm8pIHsKKwlwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJy
ZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgewog
CWJvb2xlYW4gbm9uU3RhdGljID0gIXRoaXMuYmluZGluZy5pc1N0YXRpYygpOwogCWJvb2xlYW4g
d2FzSW5zaWRlQXNzZXJ0ID0gKChmbG93Q29udGV4dC50YWdCaXRzICYgRmxvd0NvbnRleHQuSElE
RV9OVUxMX0NPTVBBUklTT05fV0FSTklORykgIT0gMCk7CiAJZmxvd0luZm8gPSB0aGlzLnJlY2Vp
dmVyLmFuYWx5c2VDb2RlKGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvLCBub25T
dGF0aWMpLnVuY29uZGl0aW9uYWxJbml0cygpOwpAQCAtNTkzLDExNCArNTk0LDExMSBAQAogfQog
CiBwdWJsaWMgVHlwZUJpbmRpbmcgcmVzb2x2ZVR5cGUoQmxvY2tTY29wZSBzY29wZSkgewotCS8v
IEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVybiB0eXBlCisJLy8gQW5zd2VyIHRoZSBzaWduYXR1
cmUgcmV0dXJuIHR5cGUsIGFuc3dlcnMgUG9seVR5cGVCaW5kaW5nIGlmIHRoZXJlIGlzIGF0IGxl
YXN0IG9uZSBnZW5lcmljIG92ZXJsb2FkZWQgY2FuZGlkYXRlIHRoYXQgZW5jb2RlZCB0eXBlIHZh
cmlhYmxlcyBpbiByZXR1cm4gdHlwZSBhbmQgdGhlcmUgaXMgbm8gdGFyZ2V0IHR5cGUgIAogCS8v
IEJhc2UgdHlwZSBwcm9tb3Rpb24KKwlpZiAodGhpcy5jb25zdGFudCAhPSBDb25zdGFudC5Ob3RB
Q29uc3RhbnQpIHsKKwkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsKKwkJ
bG9uZyBzb3VyY2VMZXZlbCA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsOwor
CQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOworCQlpZiAodGhpcy5yZWNlaXZlciBpbnN0
YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9k
ZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJ
CXJlY2VpdmVyQ2FzdCA9IHRydWU7CisJCX0KKwkJdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0
aGlzLnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJdGhpcy5yZWNlaXZlcklzVHlwZSA9
IHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBOYW1lUmVmZXJlbmNlICYmICgoKE5hbWVSZWZlcmVu
Y2UpIHRoaXMucmVjZWl2ZXIpLmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7CisJCWlmIChyZWNl
aXZlckNhc3QgJiYgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkgeworCQkJLy8gZHVl
IHRvIGNoYW5nZSBvZiBkZWNsYXJpbmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBvbmx5IGlk
ZW50aXR5IGNhc3Qgc2hvdWxkIGJlIG5vdGlmaWVkCisJCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxz
RXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhwcmVzc2lvbi5yZXNvbHZl
ZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLnVubmVjZXNzYXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7CisJ
CQl9CisJCX0KKwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3Ry
dWN0b3IgY2FsbCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQg
bGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRzSGF2
ZUVycm9ycyA9IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsgLy8gdHlw
ZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJCQl0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3
IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsr
KSB7CisJCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRz
W2ldOworCQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVu
Y2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7
CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7CisJCQkJfQorCQkJCWlmICh0
aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRj
YXJkKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNh
cmQodHlwZVJlZmVyZW5jZSk7CisJCQkJfQorCQkJfQorCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2
ZUVycm9ycykgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0
dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKKwkJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRo
aXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQl0aGlzLmFyZ3VtZW50
c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIG51bGw7
CisJCQl9CisJCX0KKwkJLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFyZSByZXNv
bHZlZAorCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJdGhpcy5hcmd1bWVudHNI
YXZlRXJyb3JzID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cworCQkJaW50IGxl
bmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRUeXBlcyA9IG5l
dyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
Kyl7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOworCQkJCWlm
ICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCisJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhw
ZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCisJCQkJaWYgKGFy
Z3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCQkJYXJndW1lbnQuYml0cyB8
PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRl
ciBvbgorCQkJCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7CisJCQkJfQorCQkJCWFyZ3Vt
ZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQkJaWYgKCh0
aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51
bGwpeworCQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOworCQkJCX0KKwkJCX0K
KwkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKKwkJCQlpZiAodGhpcy5hY3R1YWxS
ZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCS8vICByZWNv
cmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAorCQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7KQorCQkJ
CQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJp
bmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGgg
ZXJyb3JzIHdpdGggbnVsbCB0eXBlCiAKLQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNv
bnN0YW50OwotCWxvbmcgc291cmNlTGV2ZWwgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3Vy
Y2VMZXZlbDsKLQlib29sZWFuIHJlY2VpdmVyQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLnJlY2Vp
dmVyIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9
IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVy
IG9uCi0JCXJlY2VpdmVyQ2FzdCA9IHRydWU7Ci0JfQotCWlmICh0aGlzLnJlY2VpdmVyLnJlc29s
dmVkVHlwZSAhPSBudWxsKQotCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJl
bmNlRXJyb3IoIlJlY2VpdmVyIHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlz
KTsgLy8kTk9OLU5MUy0xJAotCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNlaXZl
ci5yZXNvbHZlVHlwZShzY29wZSk7Ci0JdGhpcy5yZWNlaXZlcklzVHlwZSA9IHRoaXMucmVjZWl2
ZXIgaW5zdGFuY2VvZiBOYW1lUmVmZXJlbmNlICYmICgoKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVj
ZWl2ZXIpLmJpdHMgJiBCaW5kaW5nLlRZUEUpICE9IDA7Ci0JaWYgKHJlY2VpdmVyQ2FzdCAmJiB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7Ci0JCSAvLyBkdWUgdG8gY2hhbmdlIG9m
IGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2FzdCBz
aG91bGQgYmUgbm90aWZpZWQKLQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygoKENhc3RF
eHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSkpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVjZXNz
YXJ5Q2FzdCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcik7Ci0JCX0KLQl9Ci0JLy8gcmVz
b2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKLQlpZiAo
dGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKLQkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFy
Z3VtZW50cy5sZW5ndGg7Ci0JCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHNvdXJjZUxldmVs
IDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRz
Ci0JCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsK
LQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0
eXBlUmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVy
aWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1
ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKLQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVF
cnJvcnMgPSB0cnVlOwotCQkJfQotCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0
eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKLQkJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwotCQkJfQotCQl9
Ci0JCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJCWlmICh0aGlzLmFyZ3VtZW50
cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKLQkJCQlm
b3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKysp
IHsKLQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZVR5cGUoc2NvcGUpOwotCQkJCX0KLQkJ
CX0KLQkJCXJldHVybiBudWxsOwotCQl9Ci0JfQotCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0
ZXIgYXJncyBhcmUgcmVzb2x2ZWQKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQl0
aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1l
bnRzCi0JCWludCBsZW5ndGggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7Ci0JCXRoaXMuYXJndW1l
bnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8
IGxlbmd0aDsgaSsrKXsKLQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tp
XTsKLQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCi0JCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3
YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJ
CWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQu
Yml0cyB8PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVj
ayBsYXRlciBvbgotCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKLQkJCX0KLQkJCWFy
Z3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQlpZiAo
KHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0g
bnVsbCl7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKLQkJCX0KLQkJCWlm
IChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKGFy
Z3VtZW50LmlzUG9seUV4cHJlc3Npb24oKQotCQkJCQl8fCAoYXJndW1lbnQgaW5zdGFuY2VvZiBJ
bnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1bWVudCkudXNlc0luZmVyZW5jZSgpKSkgewot
CQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9PSBudWxsKQotCQkJCQkJdGhpcy5p
bm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCX0K
LQkJCX0KLQkJfQotCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJ
Ly8gIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3
IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCQkJZm9yIChpbnQgaSA9IGxlbmd0aDsgLS1pID49IDA7
KQotCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBU
eXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mg
d2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKLQkJCQl0aGlzLmJpbmRpbmcgPQotCQkJCQl0aGlz
LnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkKLQkJCQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRo
b2QodGhpcy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcykKLQkJCQkJCTogc2NvcGUuZmluZE1l
dGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2Vs
ZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKLQkJCQlpZiAodGhpcy5iaW5kaW5nICE9
IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJp
bmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcp
LmNsb3Nlc3RNYXRjaDsKLQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xp
ZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gK
LQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNo
Lm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7
IC8vIGdlbmVyaWMgbWV0aG9kCi0JCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5lcmljIG1l
dGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcgbWV0aG9k
ICgxNzU0MDkpCi0JCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVh
dGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJh
d1R5cGVCaW5kaW5nKW51bGwpOwotCQkJCQkJfQotCQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2Vz
dE1hdGNoOwotCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nl
c3RNYXRjaC5vcmlnaW5hbCgpOwotCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JF
bmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xvc2Vz
dE1hdGNoT3JpZ2luYWwpKSB7Ci0JCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBp
cyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMp
Ci0JCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJN
b2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2
ZXIuaXNJbXBsaWNpdFRoaXMoKSA/CisJCQkJCQkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRo
aXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMpIDoKKwkJCQkJCQkJCXNjb3BlLmZpbmRNZXRo
b2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVj
dG9yLCBwc2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7CisKKwkJCQkJaWYgKHRoaXMuYmluZGluZyAh
PSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJTWV0aG9k
QmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGlu
ZykuY2xvc2VzdE1hdGNoOworCQkJCQkJLy8gcmVjb3JkIHRoZSBjbG9zZXN0IG1hdGNoLCBmb3Ig
Y2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0
Y2gKKwkJCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgeworCQkJCQkJCWlmIChjbG9zZXN0
TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJM
RVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKKwkJCQkJCQkJLy8gc2hvdWxkbid0IHJldHVybiBnZW5l
cmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIgY29udmVydCBpdCB0byByYXcg
bWV0aG9kICgxNzU0MDkpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50
KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFs
KCksIChSYXdUeXBlQmluZGluZyludWxsKTsKKwkJCQkJCQl9CisJCQkJCQkJdGhpcy5iaW5kaW5n
ID0gY2xvc2VzdE1hdGNoOworCQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2lu
YWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKTsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3Jp
Z2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1l
dGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKKwkJCQkJCQkJLy8gaWdub3JlIGNhc2VzIHdo
ZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYgKGUuZy4gZGlyZWN0
IHJlY3Vyc2lvbnMpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBF
eHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOworCQkJCQkJCX0KIAkJCQkJCX0K
IAkJCQkJfQogCQkJCX0KKwkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5h
Y3R1YWxSZWNlaXZlclR5cGUgPT0gbnVsbCkgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwkJLy8g
YmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFueSBtZXNzYWdlCisJCWlmICh0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkpIHsKKwkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVy
cm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1l
bnRUeXBlcyk7CiAJCQlyZXR1cm4gbnVsbDsKIAkJfQogCX0KLQlpZiAodGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUgPT0gbnVsbCkgewotCQlyZXR1cm4gbnVsbDsKKwkKKwlUeXBlQmluZGluZyBtZXRo
b2RUeXBlID0gZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUpOworCWlmIChtZXRob2RUeXBlICE9IG51
bGwgJiYgbWV0aG9kVHlwZS5pc1BvbHlUeXBlKCkpIHsKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0
aGlzLmJpbmRpbmcucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJjZUVuZCk7CisJ
CXJldHVybiBtZXRob2RUeXBlOwogCX0KLQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55
IG1lc3NhZ2UKLQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUuaXNCYXNlVHlwZSgpKSB7Ci0J
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yTm9NZXRob2RGb3IodGhpcywgdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7Ci0JCXJldHVybiBudWxsOwotCX0K
LQotCWZpbmRNZXRob2RCaW5kaW5nKHNjb3BlKTsKIAogCWlmICghdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxs
KSB7CkBAIC03MTksMTAgKzcxNywxNyBAQAogCQkJCQkJCQkgZGVjbGFyaW5nQ2xhc3Muc3VwZXJj
bGFzcygpIGluc3RhbmNlb2YgTWlzc2luZ1R5cGVCaW5kaW5nOwogCQlpZiAoIWF2b2lkU2Vjb25k
YXJ5KQogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCh0aGlzLCB0aGlz
LmJpbmRpbmcpOworCQkKIAkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwogCQlzd2l0Y2ggKHRoaXMu
YmluZGluZy5wcm9ibGVtSWQoKSkgewogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMg
OgogCQkJCWJyZWFrOyAvLyBubyByZXNpbGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9i
bGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJsZToKKwkJCWNhc2Ug
UHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgorCQkJCS8vIEdy
YWJiaW5nIHRoZSBjbG9zZXN0IG1hdGNoIGltcHJvdmVzIGVycm9yIHJlcG9ydGluZyBpbiBuZXN0
ZWQgaW52b2NhdGlvbiBjb250ZXh0cworCQkJCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9
IElOVk9DQVRJT05fQ09OVEVYVCkKKwkJCQkJYnJlYWs7CisJCQkJLy8kRkFMTC1USFJPVUdIJAog
CQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNv
bnMuTm9uU3RhdGljUmVmZXJlbmNlSW5Db25zdHJ1Y3Rvckludm9jYXRpb24gOgogCQkJY2FzZSBQ
cm9ibGVtUmVhc29ucy5Ob25TdGF0aWNSZWZlcmVuY2VJblN0YXRpY0NvbnRleHQgOgpAQCAtODYw
LDE2ICs4NjUsMjAgQEAKIAkJCQk/IHRoaXMucmVzb2x2ZWRUeXBlCiAJCQkJOiBudWxsOwogfQot
LyoqCi0gKiBGaW5kIHRoZSBtZXRob2QgYmluZGluZzsgCi0gKiBpZiB0aGlzLmlubmVyc05lZWRV
cGRhdGUgYWxsb3cgZm9yIHR3byBhdHRlbXB0cyB3aGVyZSB0aGUgZmlyc3Qgcm91bmQgbWF5IHN0
b3AKLSAqIGFmdGVyIGFwcGxpY2FiaWxpdHkgY2hlY2tpbmcgKDE4LjUuMSkgdG8gaW5jbHVkZSBt
b3JlIGluZm9ybWF0aW9uIGludG8gdGhlIGZpbmFsCi0gKiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJl
bmNlICgxOC41LjIpLgotICovCi1wcm90ZWN0ZWQgdm9pZCBmaW5kTWV0aG9kQmluZGluZyhCbG9j
a1Njb3BlIHNjb3BlKSB7Ci0JdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0
VGhpcygpCi0JCQk/IHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIHRoaXMu
YXJndW1lbnRUeXBlcywgdGhpcykKKworcHJvdGVjdGVkIFR5cGVCaW5kaW5nIGZpbmRNZXRob2RC
aW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkKKwkKKwl0aGlzLmJpbmRpbmcgPSB0aGlzLnJl
Y2VpdmVyLmlzSW1wbGljaXRUaGlzKCkgPyAKKwkJCXNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRo
aXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcykgCiAJCQk6IHNjb3BlLmdldE1l
dGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKTsKKworCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkgLy8gY2FuJ3QgaGFw
cGVuID8gSSB0aGluayB3ZSBhbHdheXMgZ2V0IGEgcHJvYmxlbSBiaW5kaW5nLCBhbnl3YXlzLgor
CQlyZXR1cm4gbnVsbDsKKwkKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKKwkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRp
bmcodGhpcyk7CisJCiAJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHRoaXMu
YmluZGluZywgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCiAJLyogVGhlcmUgYXJlIGVt
YmVkZGVkIGFzc3VtcHRpb25zIGluIHRoZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0
IGEgc3VjY2Vzc2Z1bCBzb2x1dGlvbiBvZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBh
bgpAQCAtODg0LDExICs4OTMsOCBAQAogCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKIAlpZiAoY29tcGlsZXJPcHRpb25zLnNv
dXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgdGhpcy5iaW5kaW5nIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIHRoaXMuYmluZGlu
Zy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlmICghY29tcGlsZXJPcHRpb25zLnBvc3RSZXNvbHV0
aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjaykKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IHBnbWIgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmc7
Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KHBnbWIpOwot
CQlpZiAoY3R4ID09IG51bGwgfHwgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0
MTguQklORElOR1NfVVBEQVRFRCkKLQkJCXJldHVybjsKIAkJaW50IGxlbmd0aCA9IHBnbWIudHlw
ZUFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHBnbWIudHlwZUFyZ3VtZW50cy5sZW5ndGg7CiAJCWJv
b2xlYW4gc2F3UmF3VHlwZSA9IGZhbHNlOwogCQlmb3IgKGludCBpID0gMDsgIGkgPCBsZW5ndGg7
IGkrKykgewpAQCAtODk3LDQwICs5MDMsMjYgQEAKIAkJCSAgIGRvZXMgbm90IGFwcGVhciBmdWxs
eSBob29rZWQgdXAgaW50byBpc0NvbXBhdGlibGVXaXRoIGFuZCBpc0VxdWl2YWxlbnQgdG8gZXZl
cnl3aGVyZS4gQXQgdGhlIG1vbWVudCwgYmFpbCBvdXQgaWYgd2Ugc2VlIGNhcHR1cmUuCiAJCQkq
LyAgIAogCQkJaWYgKHBnbWIudHlwZUFyZ3VtZW50c1tpXS5pc0NhcHR1cmUoKSkKLQkJCQlyZXR1
cm47CisJCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQkJaWYgKHBnbWIudHlw
ZUFyZ3VtZW50c1tpXS5pc1Jhd1R5cGUoKSkKIAkJCQlzYXdSYXdUeXBlID0gdHJ1ZTsKIAkJfQog
CQlpZiAoIXNhd1Jhd1R5cGUpCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJl
dHVyblR5cGU7CiAJCWxlbmd0aCA9IHRoaXMuYXJndW1lbnRzID09IG51bGwgPyAwIDogdGhpcy5h
cmd1bWVudHMubGVuZ3RoOwogCQlpZiAobGVuZ3RoID09IDApCi0JCQlyZXR1cm47CisJCQlyZXR1
cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCVR5cGVCaW5kaW5nIFtdIGZpbmFsQXJndW1l
bnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwogCQlmb3IgKGludCBpID0gMDsgaSA8
IGxlbmd0aDsgaSsrKSB7CiAJCQlUeXBlQmluZGluZyBmaW5hbEFyZ3VtZW50VHlwZSA9IHRoaXMu
YXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKIAkJCWlmIChmaW5hbEFyZ3VtZW50VHlwZSA9PSBu
dWxsIHx8ICFmaW5hbEFyZ3VtZW50VHlwZS5pc1ZhbGlkQmluZGluZygpKSAgLy8gYWxyZWFkeSBz
aWRlZCB3aXRoIHRoZSBkZXZpbC4KLQkJCQlyZXR1cm47CisJCQkJcmV0dXJuIHRoaXMuYmluZGlu
Zy5yZXR1cm5UeXBlOwogCQkJZmluYWxBcmd1bWVudFR5cGVzW2ldID0gZmluYWxBcmd1bWVudFR5
cGU7IAogCQl9Ci0JCWlmIChzY29wZS5wYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5i
aW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlwZXMsIGZhbHNlLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NP
TVBBVElCTEUpCisJCWlmIChzY29wZS5wYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5i
aW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlwZXMsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJM
RSkKIAkJCXRoaXMuYmluZGluZyA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRp
bmcub3JpZ2luYWwoKSwgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCBmaW5hbEFyZ3VtZW50VHlwZXMs
IFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKIAl9Ci19Ci0KLUBPdmVycmlkZQotcHVibGljIFR5
cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRU
eXBlLCBTY29wZSBzY29wZSkgewotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9
IGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJp
bmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVu
Y2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewotCQkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJn
ZXRUeXBlOwotCQkJTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9j
YXRpb25UeXBlKHRoaXMsIChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMu
YmluZGluZyk7Ci0JCQlpZiAodXBkYXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5
cGUpKSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywg
dXBkYXRlZEJpbmRpbmcsIHNjb3BlKTsKLQkJCX0KLQkJfQotCX0KLQlyZXR1cm4gdGhpcy5yZXNv
bHZlZFR5cGU7CisJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogfQogCiBwdWJsaWMg
dm9pZCBzZXRBY3R1YWxSZWNlaXZlclR5cGUoUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUp
IHsKQEAgLTk2Niw2ICs5NTgsMzkgQEAKIAkgKi8KIAlyZXR1cm4gaXNQb2x5RXhwcmVzc2lvbih0
aGlzLmJpbmRpbmcpOwogfQorCitwdWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRo
KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlz
VmFsaWRCaW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJ
CXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmlnaW5hbEV4cGVjdGVkVHlwZSA9IHRoaXMu
ZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsK
KwkJLy8gTm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBvdmVybG9hZCByZXNvbHV0aW9uLiB0aGlz
LmJpbmRpbmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gaXNQb2x5RXhw
cmVzc2lvbigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmluZGluZzsKKwkJaWYgKG1ldGhvZCA9PSBu
dWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJuVHlwZSA9PSBu
dWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJcmV0dXJuIGZh
bHNlOworCQlyZXR1cm4gc3VwZXIuaXNCb3hpbmdDb21wYXRpYmxlKG1ldGhvZC5yZXR1cm5UeXBl
LmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKSwgdGFyZ2V0VHlwZSwgdGhpcywgc2NvcGUp
OworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb3JpZ2luYWxFeHBlY3RlZFR5
cGU7CisJfQorfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1lbnRzSGF2
ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJCXJldHVy
biBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmlnaW5hbEV4cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0
ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsKKwkJLy8g
Tm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBvdmVybG9hZCByZXNvbHV0aW9uLiB0aGlzLmJpbmRp
bmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gaXNQb2x5RXhwcmVzc2lv
bigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmluZGluZzsKKwkJaWYgKG1ldGhvZCA9PSBudWxsIHx8
ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJuVHlwZSA9PSBudWxsIHx8
ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJcmV0dXJuIGZhbHNlOwor
CQlyZXR1cm4gbWV0aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQp
LmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRo
aXMuZXhwZWN0ZWRUeXBlID0gb3JpZ2luYWxFeHBlY3RlZFR5cGU7CisJfQorfQorCiAvKiogVmFy
aWFudCBvZiBpc1BvbHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBkdXJpbmcgdHlwZSBpbmZlcmVu
Y2UsIHdoZW4gYSByZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMuICovCiBwdWJsaWMgYm9vbGVh
biBpc1BvbHlFeHByZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1dGlvbkNhbmRpZGF0ZSkgewog
CWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1FTlRfQ09OVEVYVCAmJiB0aGlz
LmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKQEAgLTEwMjksMjEgKzEw
NTQsMTAgQEAKIAlyZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwogfQogLy8g
LS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5n
KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29w
ZSkgewotCWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQot
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJtZXRob2Qg
aXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQllbHNl
IGlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5pbnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JfQorcHVibGljIE1l
dGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkg
ewogCXJldHVybiB0aGlzLmJpbmRpbmc7CiB9Ci1wdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50
cygpIHsKLQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7Ci19Ci1wdWJsaWMgRXhwcmVzc2lvbkNvbnRl
eHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7Ci0JcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRl
eHQ7Ci19CisKIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4
MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQl0aGlzLmluZmVy
ZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CkBAIC0xMDU0LDM1ICsxMDY4
LDE0IEBACiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlz
LmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gdXNlc0lu
ZmVyZW5jZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBnZXRJbmZlcmVuY2VDb250ZXh0KChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykgIT0gbnVsbDsKK3B1
YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgeworCXJldHVybiB0aGlzLmFyZ3VtZW50czsK
IH0KLXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJp
bmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQlib29sZWFuIGhhc1VwZGF0ZSA9IHRo
aXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyAhPSBudWxsKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4
dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7Ci0JCWlm
IChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBk
YXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4g
b3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQg
bm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0
YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBk
YXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5yZXR1cm5U
eXBlOwotCXJldHVybiBoYXNVcGRhdGU7Ci19Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBk
YXRlKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci19Ci1w
dWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5jZUhlbHBl
ciA9IG51bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VI
ZWxwZXIoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7CitwdWJsaWMgRXhw
cmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CisJcmV0dXJuIHRoaXMuZXhw
cmVzc2lvbkNvbnRleHQ7CiB9CiAvLyAtLSBJbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiBw
dWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29w
ZSkgewogCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50
cywgdGhpcyk7CiB9Ci19Cit9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDU5ZmZiMjAuLmIy
ZmJkM2IgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Np
b24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9uLmph
dmEKQEAgLTQxMCwxMCArNDEwLDYgQEAKIAkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9
IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CiAJCQkJCWhhc0Vycm9yID0g
dHJ1ZTsKIAkJCQl9Ci0JCQkJaWYgKHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSB8fCAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBJbnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1bWVudCkudXNlc0luZmVyZW5jZSgp
KSkpIHsKLQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJ
CXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsK
LQkJCQl9CiAJCQl9CiAJCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQppbmRleCAz
NDMzOGNhLi41N2Q1ZGVhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Np
b24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQpAQCAtNzI2
LDE4ICs3MjYsNiBAQAogCQl9CiAJfQogCi0JcHVibGljIE1ldGhvZEJpbmRpbmcgcHJlcGFyZUZv
ckluZmVyZW5jZVJlc3VsdChTY29wZSBzY29wZSkgewotCQl0cnkgewotCQkJc2V0RXhwcmVzc2lv
bkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCXRoaXMuYmluZGluZyA9IG51bGw7Ci0J
CQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IHRydWU7Ci0JCQlyZXNvbHZlVHlwZSh0aGlzLmVuY2xv
c2luZ1Njb3BlKTsKLQkJCXJldHVybiB0aGlzLmJpbmRpbmc7Ci0JCX0gZmluYWxseSB7Ci0JCQl0
aGlzLnRyaWFsUmVzb2x1dGlvbiA9IGZhbHNlOwotCQl9Ci0JfQotCiAJcHVibGljIGJvb2xlYW4g
aXNDb25zdHJ1Y3RvclJlZmVyZW5jZSgpIHsKIAkJcmV0dXJuIENoYXJPcGVyYXRpb24uZXF1YWxz
KHRoaXMuc2VsZWN0b3IsICBDb25zdGFudFBvb2wuSW5pdCk7CiAJfQpAQCAtOTEwLDQgKzg5OCw0
IEBACiAJcHVibGljIGJvb2xlYW4gaXNBcnJheUNvbnN0cnVjdG9yUmVmZXJlbmNlKCkgewogCQly
ZXR1cm4gaXNDb25zdHJ1Y3RvclJlZmVyZW5jZSgpICYmIHRoaXMubGhzLnJlc29sdmVkVHlwZSAh
PSBudWxsICYmIHRoaXMubGhzLnJlc29sdmVkVHlwZS5pc0FycmF5VHlwZSgpOwogCX0KLX0KK30K
XCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jv
dW5kU2V0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKaW5kZXggYTEzMmM5Mi4u
NDBlNTNkZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQm91bmRTZXQuamF2YQpAQCAtNDU2LDggKzQ1Niw2IEBACiAJCQlpZiAoIWlu
Y29ycG9yYXRlKGNvbnRleHQsIGZyZXNoQm91bmRzLCBmcmVzaEJvdW5kcykpCiAJCQkJcmV0dXJu
IGZhbHNlOwogCi0JCQl0aGlzLmNhcHR1cmVzLmNsZWFyKCk7Ci0JCQkKIAkJCS8vIE1lcmdlIHRo
ZSBib3VuZHMgaW50byBvbmUgaW5jb3Jwb3JhdGVkIGdlbmVyYXRpb24uCiAJCQlmaW5hbCBpbnQg
aW5jb3Jwb3JhdGVkTGVuZ3RoID0gdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoOwogCQkJ
ZmluYWwgaW50IHVuaW5jb3Jwb3JhdGVkTGVuZ3RoID0gZnJlc2hCb3VuZHMubGVuZ3RoOwpAQCAt
NTgzLDcgKzU4MSw5IEBACiAJCXdoaWxlIChjYXB0SXRlci5oYXNOZXh0KCkpIHsKIAkJCUVudHJ5
PFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZywgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nPiBjYXB0
ID0gY2FwdEl0ZXIubmV4dCgpOwogCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBbHBoYSA9
IGNhcHQuZ2V0S2V5KCk7Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSBjYXB0Lmdl
dFZhbHVlKCk7CisJCQkvLyBXZSBjb21lIGluIHdpdGggY2FwdHVyZShnQSksIHdlIG5lZWQgdG8g
d29yayB3aXRoIGdBIGJlbG93LiBJdCB3YXMgbmVjZXNzYXJ5IHRvIGVzdGFibGlzaCBjYXB0dXJl
IGF0IHRoZSBjYWxsIHNpdGUuCisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgY2dBID0gY2Fw
dC5nZXRWYWx1ZSgpOworCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgY2dBLnVuY2FwdHVyZShjb250ZXh0LnNjb3BlKTsKIAkJCVJlZmVy
ZW5jZUJpbmRpbmcgZyA9IChSZWZlcmVuY2VCaW5kaW5nKSBnQS5vcmlnaW5hbCgpOwogCQkJZmlu
YWwgVHlwZVZhcmlhYmxlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBnLnR5cGVWYXJpYWJsZXMoKTsK
IAkJCS8vIGNvbnN0cnVjdCB0aGV0YSA9IFtQMTo9YWxwaGExLC4uLl0KQEAgLTYwMiw2ICs2MDIs
NyBAQAogCQkJCWFkZEJvdW5kcyhwaS5nZXRUeXBlQm91bmRzKGFscGhhLCB0aGV0YSksIGNvbnRl
eHQuZW52aXJvbm1lbnQpOwogCiAJCQkJVHlwZUJpbmRpbmcgYWkgPSBnQS5hcmd1bWVudHNbaV07
CisJCQkJVHlwZUJpbmRpbmcgY2FpID0gY2dBLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoYWkgaW5z
dGFuY2VvZiBXaWxkY2FyZEJpbmRpbmcpIHsKIAkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJk
QmluZGluZyA9IChXaWxkY2FyZEJpbmRpbmcpYWk7CiAJCQkJCVR5cGVCaW5kaW5nIHQgPSB3aWxk
Y2FyZEJpbmRpbmcuYm91bmQ7CkBAIC02MTMsNyArNjE0LDE0IEBACiAJCQkJCQkJaXQgPSB0aHJl
ZS5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhhc05leHQoKSkgewog
CQkJCQkJCQlUeXBlQm91bmQgYm91bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJCWlmICghKGJvdW5k
LnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpKQorCQkJCQkJCQkvKiBXaXRoIHRo
ZSBleHBlY3RlZCB0eXBlJ3MgZGVjbGFyZWQgdHlwZSBiZWluZyBDb2xsZWN0b3I8PyBzdXBlciBU
LCBBLCBSPiBhbmQgZ0FscGhhIGJlaW5nIENvbGxlY3RvcjxUIzAsPyMxLExpc3Q8VCMwPiMyPiBh
bmQgY2dBIGJlaW5nCisJCQkJCQkJCSAgIENvbGxlY3RvcjxUIzAsY2FwdHVyZSMxLW9mID8sTGlz
dDxUIzA+Piwgd2l0aG91dCB0aGUgY29uc3RyYWludCByZWR1Y3Rpb24gYmVsb3cgLSB3ZSB3aWxs
IG5ldmVyIGRpc2NvdmVyIEEgdG8gYmUgY2FwdHVyZSMxLW9mID8gYW5kCisJCQkJCQkJCSAgIGNs
YWltIEEgaXMgamxPLiBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTQzNzQ0NCNjMjQgLSAjMjcKKwkJCQkJCQkJKi8KKwkJCQkJCQkJaWYgKCFyZWR1Y2VP
bmVDb25zdHJhaW50KGNvbnRleHQsIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoYm91bmQu
cmlnaHQsIGNhaSwgUmVkdWN0aW9uUmVzdWx0LlNBTUUpKSkKKwkJCQkJCQkJCXJldHVybiBmYWxz
ZTsKKwkJCQkJCQkJLy8gT3VyID0gcmVkdWN0aW9uIHRyYW5zaXRpdmVseSBhZGRzIGEgbmV3IGJv
dW5kIHRoYXQgbmVjZXNzaXRhdGVzIHRoZSBjaGVjayBiZWxvdyBmb3IgY2FwdHVyZS4gCisJCQkJ
CQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpICYmICFi
b3VuZC5yaWdodC5pc0NhcHR1cmUoKSkKIAkJCQkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJCQl9
CiAJCQkJCQl9CkBAIC02NjgsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9CiAJCX0KKwkJdGhpcy5j
YXB0dXJlcy5jbGVhcigpOwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0NjYuLmYyNjI2NTMg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpA
QCAtMTgsMTIgKzE4LDEwIEBACiBpbXBvcnQgamF2YS51dGlsLlNldDsKIAogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVz
c2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJl
c3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHBy
ZXNzaW9uQ29udGV4dDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuSW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZWZlcmVuY2VFeHByZXNzaW9uOwpAQCAtNTYsNDEgKzU0
LDggQEAKIAogCXB1YmxpYyBPYmplY3QgcmVkdWNlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVu
Y2VDb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCS8vIEpMUyAx
OC4yLjEKLQkJcHJvcGVyOgogCQlpZiAodGhpcy5yaWdodC5pc1Byb3BlclR5cGUodHJ1ZSkpIHsK
LQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKLQkJCWlm
IChleHByVHlwZSA9PSBudWxsKSB7Ci0JCQkJLy8gaWYgd2UgZ2V0IGhlcmUgZm9yIHNvbWUga2lu
ZHMgb2YgcG9seSBleHByZXNzaW9ucyAoaW5jbC4gQ29uZGl0aW9uYWxFeHByZXNzaW9uKSwKLQkJ
CQkvLyB0aGVuIG90aGVyIHdheXMgZm9yIGNoZWNraW5nIGNvbXBhdGliaWxpdHkgYXJlIG5lZWRl
ZDoKLSAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4
cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9m
IExhbWJkYUV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNmLiBOZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25UZXN0LnRlc3Q0MTI0NTMoKQotICAgICAgICAgICAgICAgICAg
ICAgICAgTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gKChMYW1iZGFFeHByZXNzaW9uKSB0aGlzLmxl
ZnQpLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0aGlzLnJpZ2h0KTsKLSAg
ICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29weSAhPSBudWxsICYmIGNvcHkucmVzb2x2
ZWRUeXBlICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgPyBU
UlVFIDogRkFMU0U7Ci0gICAgICAgICAgICAgICAgICAgIH0KLSAgICAgICAgICAgICAgICB9Ci0g
ICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmln
aHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpID8gVFJVRSA6IEZBTFNFOwotCQkJfSBlbHNlIGlm
ICghZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCXJldHVybiBGQUxTRTsKLQkJCX0K
LQkJCWlmIChpc0NvbXBhdGlibGVXaXRoSW5Mb29zZUludm9jYXRpb25Db250ZXh0KGV4cHJUeXBl
LCB0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0KSkgewotCQkJCXJldHVybiBUUlVFOwotCQkJ
fSBlbHNlIGlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbiAmJiB0
aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJLy8gaGFsZi1yZXNvbHZlZCBkaWFt
b25kIGhhcyBhIHJlc29sdmVkVHlwZSwgYnV0IHRoYXQgbWF5IG5vdCBiZSB0aGUgZmluYWwgd29y
ZCwgdHJ5IG9uZSBtb3JlIHN0ZXAgb2YgcmVzb2x1dGlvbjoKLSAgICAgICAgICAgIAlNZXRob2RC
aW5kaW5nIGJpbmRpbmcgPSAoKEFsbG9jYXRpb25FeHByZXNzaW9uKSB0aGlzLmxlZnQpLmJpbmRp
bmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCXJldHVybiAoYmluZGlu
ZyAhPSBudWxsICYmIGJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNDb21wYXRpYmxlV2l0aCh0aGlz
LnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAg
ICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgdGhpcy5s
ZWZ0LmlzUG9seUV4cHJlc3Npb24oKSkgewotICAgICAgICAgICAgCUludm9jYXRpb24gaW52b2Mg
PSAoSW52b2NhdGlvbikgdGhpcy5sZWZ0OwotICAgICAgICAgICAgCU1ldGhvZEJpbmRpbmcgYmlu
ZGluZyA9IGludm9jLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAg
ICAgCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7Ci0gICAgICAgICAgICAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJ
CQlJbmZlcmVuY2VDb250ZXh0MTggbGVmdEN0eCA9IGludm9jLmdldEluZmVyZW5jZUNvbnRleHQo
bWV0aG9kKTsKLSAgICAgICAgICAgIAkJaWYgKGxlZnRDdHguc3RlcENvbXBsZXRlZCA8IEluZmVy
ZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0gICAgICAgICAgICAJCQlicmVhayBwcm9w
ZXI7IC8vIGZhbGwgdGhyb3VnaCBpbnRvIG5lc3RlZCBpbmZlcmVuY2UgYmVsb3cgKG5vdCBleHBs
aWNpdCBpbiB0aGUgc3BlYyEpCi0gICAgICAgICAgICAJCX0KLSAgICAgICAgICAgIAl9Ci0gICAg
ICAgICAgICB9Ci0JCQlyZXR1cm4gRkFMU0U7CisJCQlyZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0
aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgfHwgdGhpcy5sZWZ0
LmlzQm94aW5nQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29w
ZSkgPyBUUlVFIDogRkFMU0U7CiAJCX0KIAkJaWYgKCFjYW5CZVBvbHlFeHByZXNzaW9uKHRoaXMu
bGVmdCkpIHsKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlw
ZTsKQEAgLTEwMiw3ICs2Nyw3IEBACiAJCQkvLyAtIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbiA6
IHRoZXNlIGFyZSB0cmFuc3BhcmVudCBpbiBvdXIgQVNUCiAJCQlpZiAodGhpcy5sZWZ0IGluc3Rh
bmNlb2YgSW52b2NhdGlvbikgewogCQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0
aW9uKSB0aGlzLmxlZnQ7Ci0JCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9j
YXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7CisJCQkJTWV0aG9kQmluZGlu
ZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlKTsKIAkJCQlpZiAocHJldmlvdXNNZXRob2QgPT0gbnVsbCkgIAkvLyBj
YW4gaGFwcGVuLCBlLmcuLCBpZiBpbnNpZGUgYSBjb3BpZWQgbGFtYmRhIHdpdGggaWdub3JlZCBl
cnJvcnMKIAkJCQkJcmV0dXJuIG51bGw7IAkJCQkvLyAtPiBwcm9jZWVkIHdpdGggbm8gbmV3IGNv
bnN0cmFpbnRzCiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBwcmV2aW91c01ldGhvZDsKQEAg
LTEyOCw3ICs5Myw2IEBACiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVh
dGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQkJ
CX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVy
ZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5vdXRlckNvbnRleHQgPSBpbmZlcmVuY2VDb250ZXh0
OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9kLmlzQ29uc3RydWN0b3Io
KSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwogCQkJCQlpbmZlckludm9j
YXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwgYXJndW1lbnRUeXBl
cywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQpOwpAQCAtMjU0LDEx
ICsyMTgsOSBAQAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJz
dHJhY3RNZXRob2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlv
blR5cGUgPT0gbnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFsbHktYXBwbGlj
YWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1
LjEzLjEpLAotCQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5j
ZS5maW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29w
ZSk7Ci0JCWlmIChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJldHVybiBGQUxT
RTsKKwogCQlpZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgeworCQkJTWV0
aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRo
b2QoKTsgCiAJCQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBB
cnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5j
dGlvblR5cGUucGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yNjgsNiArMjMw
LDggQEAKIAkJCWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJh
aW50VHlwZUZvcm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBD
T01QQVRJQkxFKSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAhPSBrKSB7CisJ
CQkJcmV0dXJuIEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkr
KykKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShw
W2ldLCBwUHJpbWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYsMTEgKzI0MCwxNSBA
QAogCQkJCVR5cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmlzQ29uc3Ry
dWN0b3IoKSAmJiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5jZSgpID8gcG90
ZW50aWFsbHlBcHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlBcHBsaWNhYmxl
LnJldHVyblR5cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJCXJl
dHVybiBGQUxTRTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVy
ZW5jZUNvbnRleHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlvbj8/CisJCQkJ
VHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3Bl
LCByZWZlcmVuY2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJCX0KIAkJCXJl
dHVybiBuZXdDb25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25z
dHJhaW50cy5zaXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0aG9kQmluZGlu
ZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9k
VGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1h
cHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcg
VCAoMTUuMTMuMSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCisJCQkJ
cmV0dXJuIEZBTFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxl
bmd0aDsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25U
eXBlLnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzIxLDcgKzI4OSw3IEBA
CiAJCQkJCWluZmVyZW5jZUNvbnRleHQucmVzdW1lU3VzcGVuZGVkSW5mZXJlbmNlKHByZXZJbnZv
Y2F0aW9uKTsKIAkJCQl9CiAJCQl9Ci0JCQlUeXBlQmluZGluZyByUHJpbWUgPSBjb21waWxlVGlt
ZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xhcmluZ0NsYXNzIDog
Y29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGU7CisJCQlUeXBlQmluZGluZyByUHJpbWUgPSBjb21w
aWxlVGltZURlY2wuaXNDb25zdHJ1Y3RvcigpID8gY29tcGlsZVRpbWVEZWNsLmRlY2xhcmluZ0Ns
YXNzIDogY29tcGlsZVRpbWVEZWNsLnJldHVyblR5cGUuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0
LnNjb3BlLCByZWZlcmVuY2Uuc291cmNlRW5kKCkpOwogCQkJaWYgKHJQcmltZS5pZCA9PSBUeXBl
SWRzLlRfdm9pZCkKIAkJCQlyZXR1cm4gRkFMU0U7CiAJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVG
b3JtdWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKQEAgLTM2
NCw2ICszMzIsNyBAQAogCQlpZiAodHlwZUFyZ3VtZW50cyA9PSBudWxsKSB7CiAJCQkvLyBpbnZv
Y2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpOgogCQkJVHlwZUJpbmRpbmcgcmV0dXJuVHlw
ZSA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgPyBtZXRob2QuZGVjbGFyaW5nQ2xhc3MgOiBtZXRo
b2QucmV0dXJuVHlwZTsKKwkJCQogCQkJaWYgKHJldHVyblR5cGUgPT0gVHlwZUJpbmRpbmcuVk9J
RCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbigiZXhwcmVzc2lvbiBo
YXMgbm8gdmFsdWUiKTsgLy8kTk9OLU5MUy0xJAogCkBAIC0zODQsNyArMzUzLDcgQEAKIAkJCQlJ
bmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFi
bGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
IGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVk
VHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBwYXJh
bWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5cGVB
bm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVy
ZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5
cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRC
b3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0dXJlKGluZmVy
ZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7IC8vIGVzdGFi
bGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKIAkJCQlDb25zdHJhaW50
VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUo
Z2JldGEsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBpbmZlcmVuY2VDb250
ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJfQpAQCAtNDA0LDcg
KzM3Myw3IEBACiAJCQkJCUJvdW5kU2V0IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2
ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVbXXthbHBoYX0pOwogCQkJCQlpZiAoc29sdXRpb24gPT0g
bnVsbCkKIAkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9u
LmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5z
Y29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlv
biB1bmlxdWU/CisJCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9u
KGFscGhhLCBudWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25T
aXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFp
bnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElC
TEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShu
ZXdDb25zdHJhaW50KTsKIAkJCQl9CkBAIC00ODQsNCArNDUzLDQgQEAKIAkJYnVmLmFwcGVuZChS
SUdIVF9BTkdMRV9CUkFDS0VUKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOwogCX0KLX0KK30K
XCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZv
cm11bGEuamF2YQppbmRleCBjYTNjYzBmLi4yNWRjYTk0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3Ry
YWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGltcG9ydCBqYXZhLnV0aWwu
QXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8qKgpAQCAtMzExLDYgKzMx
MiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHN1
YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUsIHRoaXMuaXNTb2Z0KTsK
IAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGluZy5QT0xZX1RZUEU6CisJ
CQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5nKSBzdXBlckNhbmRpZGF0
ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgcG9seS5leHByZXNz
aW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRpb24uYmluZGluZyhzdWJD
YW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxsIHx8ICFiaW5kaW5nLmlz
VmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQlyZXR1cm4gcmVkdWNlU3Vi
VHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29w
ZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93IG5ldyBJbGxlZ2FsU3Rh
dGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRhdGUpOyAvLyROT04tTkxT
LTEkCiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggNjFmYmNjMC4u
ZTI2MDA0YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0yMywxNiAr
MjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4cHJlc3Npb247CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lv
bjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1lc3NhZ2VT
ZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTnVsbEFu
bm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEsOSBAQAogICogPGR0PjE4
LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0PgogICogPGRkPjxlbT5Ob3Qg
WWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZvciAxOC41LjEgYW5kIDE4
LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRlZCBpbgotICogIHtAbGlu
ayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25TaXRlLCBp
bnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVsIGNvbnRyb2wgaXMgaW1w
bGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
I2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNj
b3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBMaWZlY3ljbGU8L2gyPgot
ICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBjYXVzZXMgc29tZSBjb21w
bGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0cyBvZiBpbmZlcmVuY2Ug
aXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29sdXRpb24uIFNlZSAKLSAq
IHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25T
aXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKX0gZm9yIHRoZSBi
YXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1lZGlhdGUgPGI+c3RhdGU8
L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0d2VlbiBib3RoIHBoYXNl
cy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAotICogICBpbnB1dHMgZm9y
IGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52b2NhdGlvbiNyZWdpc3Rl
ckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLCBJbmZl
cmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KCl9IGFu
ZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJp
emVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48YnIvPgotICogICAgQXMg
cGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNlIG9mIEluZmVyZW5jZUNv
bnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZlcmVuY2VLaW5kfQotICog
ICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxsaT48Yj5OZXN0ZWQgaW5m
ZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJndW1lbnQgaXMgYSBwb2x5
IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhlIGFyZ3VtZW50IGNhbiBv
bmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIHJlZ2Fy
ZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNlIG11c3QgcHJvZHVjZSB0
aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0aGUgaW5uZXIgaW5mZXJl
bmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29scyBhcmUgYXBwbGllZDoKLSAq
ICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHByZXNzaW9uIGlzIGFuIGlu
dm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNvcnBvcmF0ZWQgaW50bwot
ICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJsb2NrIGluc2lkZSB7QGxp
bmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZlcmVuY2VDb250ZXh0MTgp
fS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMgb2YgdGhlIGNvbWJpbmVk
IGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lZCBpbm5lciBpbnZv
Y2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsgI3JlYmluZElubmVyUG9s
aWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3QgYmUgY2FsbGVkIHdoZW5l
dmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAgPGxpPklmIHRoZSBpbm5l
ciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Npb24gb3IgYSBjb25kaXRp
b25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAqICAgICAgZXhpc3QgcmVw
cmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSBp
cyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0BsaW5rIEV4cHJlc3Npb24j
Y2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBTY29wZSl9LCB3aGljaCwg
dG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhC
b3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+Rm9yIHJlY3Vyc2l2ZWx5
IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFuIGludm9jYXRpb24KLSAq
ICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRz
KEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlKX0gZXhpc3Rz
LAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9uczogKDEpIGZvciBub24t
Z2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5kI2ZpbmRNZXRob2RCaW5k
aW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoKTsgKDIp
IGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5rICNyZWJpbmRJbm5lclBv
bGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+SW4gc29tZSBz
aXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBvbHkgaW52b2NhdGlvbnMg
bmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJsb2FkIHJlc29sdXRpb24K
LSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBpbnZvbHZlIGFueSBpbmZl
cmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGluZyBpbmZlcmVuY2UgcmVzdWx0
cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7QGxpbmsgSW52b2NhdGlv
biN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nKX0uPC9saT4KICAqIDxs
aT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlzIGEgPGI+dmFyaWFibGUt
YXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRlbXB0aW5nCiAgKiAJCXRv
IHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9LiBPbmx5IGlmIHRoYXQg
ZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0BsaW5rICNDSEVDS19WQVJB
Ukd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2FzIHN1Y2Nlc3NmdWwgaXMg
c3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjUsOSArMTI5LDYgQEAKIAkv
KiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3VuZFNldCBjdXJyZW50
Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlLCBzdG9y
ZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSBmYWls
cy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQogCS8qKiBGb3IgZWFjaCBjYW5kaWRh
dGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3JlIHRoZSBzb2x1dGlv
biBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxUeXBlQmluZGluZyxTb2x1
dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBT
b2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAogCQogCS8qKiBTaWduYWxzIHdoZXRo
ZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVja2VkIGNvbnZlcnNp
b24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNvbnN0cmFpbnRzV2l0aFVu
Y2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8qKiBJbm5lciBwb2x5IGludm9jYXRp
b25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlzIGluZmVyZW5jZS4gKi8KLQlMaXN0
PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBBcnJheUxpc3Q8SW52b2NhdGlvblNp
dGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNlIGNvbnRleHQsIHVzZWQgZm9y
IGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
b3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+IHByb2JsZW1N
ZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7
CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4LjUuMiBJbnZvY2F0aW9uIFR5
cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJlc3BvbnNpYmxlIGZvciBhbnkgcG9z
dC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlw
ZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0aGUgYm91bmQgc2V0IHByb2R1Y2Vk
IGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0IG0gaXMgYXBwbGljYWJs
ZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0IGluZmVySW52b2NhdGlvblR5cGUo
Qm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52b2NhdGlvblNpdGUgaW52
b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAtNDAwLDcgKzM1Miw3IEBACiAJ
CQlTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVs
YT4oKTsKIAkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRz
LCBjLCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCiAJCQkJcmV0dXJuIG51bGw7Ci0JCQkv
LyA1LiBidWxsZXQ6IGRldGVybWluZSBCMyBmcm9tIEMKKwkJCS8vIDUuIGJ1bGxldDogZGV0ZXJt
aW5lIEI0IGZyb20gQwogCQkJd2hpbGUgKCFjLmlzRW1wdHkoKSkgewogCQkJCS8vICoKIAkJCQlT
ZXQ8Q29uc3RyYWludEZvcm11bGE+IGJvdHRvbVNldCA9IGZpbmRCb3R0b21TZXQoYywgYWxsT3V0
cHV0VmFyaWFibGVzKGMpKTsKQEAgLTQ4NSw5ICs0MzcsMTUgQEAKIAkJfQogCQlpZiAoZXhwcmkg
aW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewogCQkJYy5hZGQobmV3IENvbnN0cmFp
bnRFeGNlcHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmksIHN1YnN0Rikp
OwotCQl9IGVsc2UgaWYgKGV4cHJpIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBleHByaS5pc1Bv
bHlFeHByZXNzaW9uKCkpIHsKKwkJfSBlbHNlIHsKKwkJCS8vIFNlZSBodHRwczovL2J1Z3Mub3Bl
bmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIzMjUgZm9yIGV4Y2x1c2lvbiBvZiBwb2x5IGV4
cHJlc3Npb25zIHRhcmdldGluZyBwcm9wZXIgdHlwZXMuIENFRi5yZWR1Y2UgdmFsaWRhdGVzIAor
CQkJLy8gdGhhdCB0aGV5IGFyZSBjb21wYXRpYmxlIGluIGEgbG9vc2UgaW52b2NhdGlvbiBjb250
ZXh0IGFnYWluc3QgdGhlIHRhcmdldCB0eXBlLiBUaGV5IGNvbnRyaWJ1dGUgbm90aGluZyBmdXJ0
aGVyIHRvIHNvbHZpbmcgdGhlIGZvcm11bGFzLgorCQkJaWYgKHN1YnN0Ri5pc1Byb3BlclR5cGUo
dHJ1ZSkpCisJCQkJcmV0dXJuIHRydWU7CisJCX0JCisJCWlmIChleHByaSBpbnN0YW5jZW9mIElu
dm9jYXRpb24gJiYgZXhwcmkuaXNQb2x5RXhwcmVzc2lvbigpKSB7CiAJCQlJbnZvY2F0aW9uIGlu
dm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmk7Ci0JCQlNZXRob2RCaW5kaW5nIGlubmVyTWV0
aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKG51bGwsIGZhbHNlLCBudWxsKTsKKwkJCU1ldGhvZEJp
bmRpbmcgaW5uZXJNZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcoc3Vic3RGLCB0aGlzLnNjb3Bl
KTsKIAkJCWlmIChpbm5lck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykgewogCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRp
b24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVy
TWV0aG9kKTsKIAkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCkgeyAvLyBvdGhlcndpc2UgaW5uZXJN
ZXRob2QgZG9lcyBub3QgcGFydGljaXBhdGUgaW4gaW5mZXJlbmNlCkBAIC00OTcsOTMgKzQ1NSw5
IEBACiAJCX0gZWxzZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24p
IHsKIAkJCUNvbmRpdGlvbmFsRXhwcmVzc2lvbiBjZSA9IChDb25kaXRpb25hbEV4cHJlc3Npb24p
IGV4cHJpOwogCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZlRy
dWUsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpCi0JCQkJICYmIGFkZENvbnN0cmFpbnRzVG9DX09u
ZUV4cHIoY2UudmFsdWVJZkZhbHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKTsKKwkJCQkJJiYg
YWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmRmFsc2UsIGMsIGZzaSwgc3Vic3RG
LCBtZXRob2QpOwogCQl9CiAJCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIFNpbXBsaWZp
ZWQgQVBJIHRvIHBlcmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikK
LQkgKiBhbmQgcGVyZm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywgcmViaW5kaW5n
IG9mIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxl
bSBtZXRob2QgYmluZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlm
IHRoZSBpbmZlcmVuY2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogQHBhcmFtIGludm9jYXRp
b24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIGFy
Z3VtZW50cyBiZWluZyBwYXNzZWQgaW50byB0aGUgaW52b2NhdGlvbgotCSAqIEBwYXJhbSBtZXRo
b2QgY3VycmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgot
CSAqIEByZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJh
bWV0ZXJzLAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhl
ciBpbmZlcmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCS8qQE5vbk51
bGwqLyBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvbiBpbnZvY2F0
aW9uLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBvcHRpbWl6ZTogaWYgb3V0ZXJDb250ZXh0
IGV4aXN0cyBhbmQgaXMgcmVzb2x2ZWQsIHdlIHByb2JhYmx5IGRvbid0IG5lZWQgdG8gaW5mZXIg
YWdhaW4uCi0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBpbnZvY2F0aW9uLmludm9jYXRpb25U
YXJnZXRUeXBlKCk7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBmaW5hbE1l
dGhvZCA9IG51bGw7Ci0JCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RU
b0NoZWNrID0gbWV0aG9kOwotCQkKLQkJYm9vbGVhbiBoYXZlUHJvcGVyVGFyZ2V0VHlwZSA9IHRh
cmdldFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKTsKLQkJaWYg
KGhhdmVQcm9wZXJUYXJnZXRUeXBlIHx8ICFpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0
KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1l
dGhvZC5vcmlnaW5hbE1ldGhvZDsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlv
bnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCUJvdW5kU2V0IHJlc3VsdCA9IHNv
bHV0aW9uICE9IG51bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxsOwotCQkJaWYgKHJlc3VsdCA9
PSBudWxsKSB7Ci0JCQkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJldmlvdXMgY2FuZGlkYXRlIGJ1
dCBkaXNjYXJkIGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRpb25zCi0JCQkJLy8gVE9ETzog
c2hvdWxkIHdlIHJldGFpbiBhbnkgaW5zdGFudGlhdGlvbnMgb2YgdHlwZSB2YXJpYWJsZXMgbm90
IG93bmVkIGJ5IHRoZSBtZXRob2Q/IAotCQkJCXRyeSB7Ci0JCQkJCXJlc3VsdCA9IGluZmVySW52
b2NhdGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9uLCBv
cmlnaW5hbCk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0J
CQkJCS8vIG5vIHNvbHV0aW9uLCBidXQgZG8gbW9yZSBjaGVja3MgYmVsb3cKLQkJCQl9Ci0JCQl9
Ci0JCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9
IGdldFNvbHV0aW9ucyhvcmlnaW5hbC50eXBlVmFyaWFibGVzKCksIGludm9jYXRpb24sIHJlc3Vs
dCk7Ci0JCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCWZpbmFsTWV0aG9kID0gdGhp
cy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwg
c29sdXRpb25zKTsKLQkJCQkJaWYgKHRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRj
aGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMoZmluYWxNZXRob2QsIGludm9jYXRpb24sIHRoaXMu
c2NvcGUpOwotCQkJCQlpbnZvY2F0aW9uLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChmaW5hbE1l
dGhvZCwgdGhpcyk7Ci0JCQkJCXRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQodGFyZ2V0
VHlwZSwgbmV3IFNvbHV0aW9uKGZpbmFsTWV0aG9kLCByZXN1bHQpKTsKLQkJCQl9Ci0JCQl9Ci0J
CQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkKLQkJCQltZXRob2RUb0NoZWNrID0gZmluYWxNZXRo
b2Q7Ci0JCX0gZWxzZSB7Ci0JCQlmaW5hbE1ldGhvZCA9IG1ldGhvZDsKLQkJfQotCQkKLQkJTWV0
aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kVG9DaGVjay5ib3VuZENoZWNrMTgodGhp
cy5zY29wZSwgYXJndW1lbnRUeXBlcyk7Ci0JCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0J
CQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQotCQlpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYm
IGludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKQot
CQkJcmV0dXJuIG1ldGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQotCi0JCWlmIChmaW5hbE1ldGhv
ZCAhPSBudWxsKSB7Ci0JCQlpZiAocmViaW5kSW5uZXJQb2xpZXMoZmluYWxNZXRob2QsIGludm9j
YXRpb24pKQotCQkJCXJldHVybiBmaW5hbE1ldGhvZDsKLQkJfQotCQlyZXR1cm4gZ2V0UmV0dXJu
UHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdldFR5cGUsIG1ldGhvZCk7Ci0JfQotCi0JLyoqCi0J
ICogU2ltcGxpZmllZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIChK
TFMgMTguNS4yKQotCSAqIGFuZCBwZXJmb3JtIHN1YnNlcXVlbnQgc3RlcHM6IGJvdW5kIGNoZWNr
LCByZWJpbmRpbmcgb2YgaW5uZXIgcG9seSBleHByZXNzaW9ucywKLQkgKiBhbmQgY3JlYXRpbmcg
b2YgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIGlmIG5lZWRlZC4KLQkgKiBTaG91bGQgb25seSBi
ZSBjYWxsZWQgaWYgdGhlIGluZmVyZW5jZSBoYXMgbm90IHlldCBmaW5pc2hlZC4KLQkgKiBWZXJz
aW9uIHVzZWQgZm9yIGlubmVyIGludm9jYXRpb25zLCB3aGVyZSBhcmd1bWVudCB0eXBlcyBuZWVk
IHRvIGJlIGV4dHJhY3RlZAotCSAqIGZyb20gYWN0dWFsIGludm9jYXRpb24gYXJndW1lbnRzLgot
CSAqIEBwYXJhbSBpbnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKLQkgKiBAcGFy
YW0gbWV0aG9kIGN1cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9j
YXRpb24KLQkgKiBAcmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5
cGUgcGFyYW1ldGVycywKLQkgKiAJb3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGlu
ZyBlaXRoZXIgaW5mZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBtaXNtYXRjaC4KLQkgKi8KLQlw
dWJsaWMgLypATm9uTnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZv
Y2F0aW9uIGludm9jYXRpb24sIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRo
b2QpIHsKLQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gbnVsbDsKLQkJRXhwcmVzc2lv
bltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChhcmd1bWVudHMg
IT0gbnVsbCkgewotCQkJYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMu
bGVuZ3RoXTsKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKQot
CQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOwotCQl9Ci0J
CXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIG1l
dGhvZCk7CiAJfQogCiAJcHVibGljIGJvb2xlYW4gaGFzUmVzdWx0Rm9yKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUpIHsKQEAgLTU5MSw2ICs0NjUsMTAgQEAKIAkJCXJldHVybiB0aGlzLnN0ZXBDb21w
bGV0ZWQgPj0gVFlQRV9JTkZFUlJFRDsKIAkJZWxzZQogCQkJcmV0dXJuIHRoaXMuc29sdXRpb25z
UGVyVGFyZ2V0VHlwZS5jb250YWluc0tleSh0YXJnZXRUeXBlKTsKKwl9CisJCisJcHVibGljIFNv
bHV0aW9uIGdldFJlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCXJldHVybiB0
aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwogCX0KIAogCXB1Ymxp
YyBib29sZWFuIHJlZ2lzdGVyU29sdXRpb24oVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9k
QmluZGluZyB1cGRhdGVkQmluZGluZykgewpAQCAtMTM2Niw4ICsxMjQ0LDYgQEAKIAkJdGhpcy5p
bnZvY2F0aW9uQXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7CiAJCXRoaXMuY3VycmVudEludm9j
YXRpb24gPSBpbnZvY2F0aW9uOwogCQkKLQkJLy8gc2NoZWR1bGUgZm9yIHJlLWJpbmRpbmcgdGhl
IGlubmVyIGFmdGVyIGluZmVyZW5jZSBzdWNjZXNzOgotCQl0aGlzLmlubmVyUG9saWVzLmFkZChp
bnZvY2F0aW9uKTsKIAkJcmV0dXJuIHJlY29yZDsKIAl9CiAJCkBAIC0xMzk1LDE0NSArMTI3MSw2
IEBACiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSByZWNvcmQuc2l0ZTsKIAkJdGhpcy5pbnZv
Y2F0aW9uQXJndW1lbnRzID0gcmVjb3JkLmludm9jYXRpb25Bcmd1bWVudHM7CiAJCXRoaXMuaW5m
ZXJlbmNlS2luZCA9IHJlY29yZC5pbmZlcmVuY2VLaW5kOwotCX0KLQotCXB1YmxpYyBib29sZWFu
IHJlYmluZElubmVyUG9saWVzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9uU2l0ZSBz
aXRlKSB7Ci0JCUJvdW5kU2V0IGJvdW5kcyA9IHRoaXMuY3VycmVudEJvdW5kczsKLQkJVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJaWYgKHRh
cmdldFR5cGUgPT0gbnVsbCB8fCAhdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJ
CWlmICghc2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpIHsK
LQkJCQkvLyBpbiB0aGlzIGNhc2Ugd2UgbWF5IG5vdCB5ZXQgaGF2ZSB0aGUgc29sdXRpb24oPywg
Z2V0IG9yIGNvbXB1dGUgaXQgbm93OgotCQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1
dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCQl0cnkgewotCQkJCQlpZiAo
c29sdXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQkJCWJvdW5k
cyA9IHNvbHV0aW9uLmJvdW5kczsKLQkJCQkJZWxzZQotCQkJCQkJYm91bmRzID0gaW5mZXJJbnZv
Y2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNpdGUsIG1ldGhvZC5zaGFsbG93
T3JpZ2luYWwoKSk7Ci0JCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7
Ci0JCQkJCXJldHVybiBmYWxzZTsKLQkJCQl9Ci0JCQkJaWYgKGJvdW5kcyA9PSBudWxsKQotCQkJ
CQlyZXR1cm4gZmFsc2U7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlTb2x1dGlvbiBzb2x1dGlvbiA9
IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7Ci0JCQlpZiAoc29s
dXRpb24gIT0gbnVsbCAmJiBzb2x1dGlvbi5ib3VuZHMgIT0gbnVsbCkKLQkJCQlib3VuZHMgPSBz
b2x1dGlvbi5ib3VuZHM7Ci0JCX0KLQkJcmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBtZXRob2Qu
cGFyYW1ldGVycyk7Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCS8qKgotCSAqIEFmdGVyIGluZmVy
ZW5jZSBoYXMgZmluaXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMgKElu
dm9jYXRpb25zKSwgdGhhdAotCSAqIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNl
LiBGb3IgZWFjaCBvZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCi0JICogZnJv
bSB0aGUgaW5mZXJlbmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNv
bHZpbmcgYXMgbmVlZGVkLgotCSAqIFNpbWlsYXIgZm9yIHBvbHkgZXhwcmVzc2lvbnMgdGhhdCBk
aWQgbm90IGRpcmVjdGx5IHBhcnRpY2lwYXRlIGluIHRoZSBpbmZlcmVuY2UKLQkgKiBidXQgYXJl
IGRpcmVjdCBhcmd1bWVudHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiAoRnVuY3Rpb25hbEV4
cHJlc3Npb24sIENvbmRpdGlvbmFsRXhwcmVzc2lvbikuCi0JICovCi0JcHVibGljIHZvaWQgcmVi
aW5kSW5uZXJQb2xpZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5
cGVzKSB7Ci0JCS8vIFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5nIHBvbHkgZXhwcmVzc2lvbnMg
dGhhdCBhcmUgZGlyZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uOgotCQkv
LyAoaGFuZGxlcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRpdGlvbmFsRXhwcmVzc2lvbikK
LQkJaWYgKHRoaXMuY3VycmVudEludm9jYXRpb24gaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNz
aW9uKQotCQkJcmV0dXJuOyAvLyBubyBpbm5lciBleHByZXNzaW9ucwotCQlib29sZWFuIGlzVmFy
YXJncyA9IHRoaXMuaW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJBUkc7Ci0JCWFjY2VwdFBlbmRp
bmdQb2x5QXJndW1lbnRzKGJvdW5kcywgcGFyYW1ldGVyVHlwZXMsIGlzVmFyYXJncyk7Ci0JCS8v
IFRoaXMgbG9vcHMgb3ZlciBhbGwgcG9seSBleHByZXNzaW9ucyBmb3Igd2hpY2ggYSBzdWItaW5m
ZXJlbmNlIHdhcyB0cmlnZ2VyZWQ6Ci0JCS8vIChoYW5kbGVzIGdlbmVyaWMgaW52b2NhdGlvbnMp
Ci0JCWludCBsZW4gPSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsKLQkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW47IGkrKykgewotCQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlz
LmlubmVyUG9saWVzLmdldChpKTsKLQkJCWlmIChpbm5lciBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4
cHJlc3Npb24pIHsKLQkJCQlSZWZlcmVuY2VFeHByZXNzaW9uIHJlZmVyZW5jZUV4cHJlc3Npb24g
PSAoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW5uZXI7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21waWxl
VGltZURlY2wgPSByZWZlcmVuY2VFeHByZXNzaW9uLnByZXBhcmVGb3JJbmZlcmVuY2VSZXN1bHQo
dGhpcy5zY29wZSk7Ci0JCQkJaWYJKGNvbXBpbGVUaW1lRGVjbCAhPSBudWxsKSB7Ci0JICAJCQkJ
VHlwZVZhcmlhYmxlQmluZGluZ1tdIHZhcmlhYmxlcyA9IGNvbXBpbGVUaW1lRGVjbC50eXBlVmFy
aWFibGVzOwotCQkJCQlpZiAodmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMp
IHsKLQkJCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKHZhcmlhYmxl
cywgKEludm9jYXRpb25TaXRlKSBpbm5lciwgYm91bmRzKTsKLQkJCQkJCXJlZmVyZW5jZUV4cHJl
c3Npb24uYmluZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2QoY29tcGlsZVRpbWVEZWNsLCBhcmd1bWVudHMpOwotCQkJCQl9Ci0JCQkJfQotCQkJ
fSBlbHNlIGlmIChpbm5lciBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQlJbnZvY2F0aW9u
IGlubmVyTWVzc2FnZSA9IChJbnZvY2F0aW9uKSBpbm5lcjsKLQkJCQlUeXBlQmluZGluZyBpbm5l
clRhcmdldFR5cGUgPSBpbm5lci5leHBlY3RlZFR5cGUoKTsgLy8gbWF5IGJlIHNldCBmcm9tIGFj
Y2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzCi0JCQkJaWYgKGlubmVyVGFyZ2V0VHlwZSAhPSBudWxs
ICYmICFpbm5lclRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCQlpbm5lclRhcmdl
dFR5cGUgPSBudWxsOwotCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVyTWVzc2FnZS5i
aW5kaW5nKGlubmVyVGFyZ2V0VHlwZSwgaW5uZXJUYXJnZXRUeXBlICE9IG51bGwsIHRoaXMuc2Nv
cGUpOwotCQkJCWlmIChiaW5kaW5nID09IG51bGwpCi0JCQkJCWNvbnRpbnVlOwotCQkJCU1ldGhv
ZEJpbmRpbmcgb3JpZ2luYWwgPSBiaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpOwotCi0JCQkJLy8g
YXBwbHkgaW5mZXJlbmNlIHJlc3VsdHMgb250byB0aGUgYWxsb2NhdGlvbiB0eXBlIG9mIGlubmVy
IGRpYW1vbmRzOgotCQkJCWlmIChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYgaW5uZXIuaXNQ
b2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJCVJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3Mg
PSBvcmlnaW5hbC5kZWNsYXJpbmdDbGFzczsKLQkJCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMg
PSBnZXRTb2x1dGlvbnMoZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpLCBpbm5lck1lc3Nh
Z2UsIGJvdW5kcyk7Ci0JCQkJCWRlY2xhcmluZ0NsYXNzID0gdGhpcy5lbnZpcm9ubWVudC5jcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZShkZWNsYXJpbmdDbGFzcywgYXJndW1lbnRzLCBkZWNsYXJpbmdD
bGFzcy5lbmNsb3NpbmdUeXBlKCkpOwotCQkJCQlvcmlnaW5hbCA9ICgoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nKWRlY2xhcmluZ0NsYXNzKS5jcmVhdGVQYXJhbWV0ZXJpemVkTWV0aG9kKG9yaWdp
bmFsKTsKLQkJCQkJaW5uZXIuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKGlubmVyVGFyZ2V0
VHlwZSwgdGhpcy5zY29wZSk7CQotCQkJCQlpZiAodGhpcy5lbnZpcm9ubWVudC5nbG9iYWxPcHRp
b25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCU51bGxBbm5v
dGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG9yaWdpbmFsLCBpbm5lck1lc3Nh
Z2UsIHRoaXMuc2NvcGUpOwotCQkJCX0KLQkJCQkKLQkJCQkvLyBhcHBseSByZXN1bHRzIG9mIHRo
ZSBjb21iaW5lZCBpbmZlcmVuY2Ugb250byB0aGUgYmluZGluZyBvZiB0aGUgaW5uZXIgaW52b2Nh
dGlvbjoKLQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhvcmlnaW5h
bC50eXBlVmFyaWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsKLQkJCQlpZiAoc29sdXRp
b25zID09IG51bGwpIHsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0
eCA9IGlubmVyTWVzc2FnZS5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIGJpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwgJiYg
IWJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlubmVyQ3R4LnJlcG9ydEludmFs
aWRJbnZvY2F0aW9uKGlubmVyTWVzc2FnZSwgYmluZGluZyk7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJ
CQkJY29udGludWU7IC8vIGlubmVyIGluZmVyZW5jZSBub3QgcmVxdWVzdGVkIC0+IG5vdCBhIHBy
b2JsZW0KLQkJCQl9Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlubmVy
QmluZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2Qob3JpZ2luYWwsIHNvbHV0aW9ucyk7Ci0JCQkJCi0JCQkJaWYgKGlubmVyTWVzc2FnZS51cGRh
dGVCaW5kaW5ncyhpbm5lckJpbmRpbmcsIGlubmVyVGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3
ZSBhcmUgYWN0dWFsbHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJCUFTVE5vZGUucmVzb2x2ZVBv
bHlFeHByZXNzaW9uQXJndW1lbnRzKGlubmVyTWVzc2FnZSwgaW5uZXJCaW5kaW5nLCB0aGlzLnNj
b3BlKTsKLQkJCQl9Ci0JCQl9Ci0JCX0KLQkJdGhpcy5zdGVwQ29tcGxldGVkID0gQklORElOR1Nf
VVBEQVRFRDsgLy8gd2UncmUgZG9uZS1kb25lCi0JfQotCi0JcHJpdmF0ZSB2b2lkIGFjY2VwdFBl
bmRpbmdQb2x5QXJndW1lbnRzKEJvdW5kU2V0IGFjY2VwdGVkUmVzdWx0LCBUeXBlQmluZGluZ1td
IHBhcmFtZXRlclR5cGVzLCBib29sZWFuIGlzVmFyQXJncykgewotCQlpZiAoYWNjZXB0ZWRSZXN1
bHQgPT0gbnVsbCB8fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0gbnVsbCkgcmV0dXJuOwot
CQlTdWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGFjY2Vw
dGVkUmVzdWx0KTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmludm9jYXRpb25Bcmd1bWVu
dHMubGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBnZXRQYXJhbWV0
ZXIocGFyYW1ldGVyVHlwZXMsIGksIGlzVmFyQXJncyk7Ci0JCQlpZiAoIXRhcmdldFR5cGUuaXNQ
cm9wZXJUeXBlKHRydWUpKQotCQkJCXRhcmdldFR5cGUgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0
aXR1dGlvbiwgdGFyZ2V0VHlwZSk7Ci0JCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSB0aGlzLmlu
dm9jYXRpb25Bcmd1bWVudHNbaV07Ci0JCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIEludm9j
YXRpb24pIHsKLQkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmVz
c2lvbjsKLQkJCQlpZiAoIXRoaXMuaW5uZXJQb2xpZXMuY29udGFpbnMoaW52b2NhdGlvbikpIHsK
LQkJCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcodGFyZ2V0VHlw
ZSwgdHJ1ZSwgdGhpcy5zY29wZSk7Ci0JCQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBwcmV2aW91c0JpbmRpbmcgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSBtZXRob2Q7Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBp
bnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocHJldmlvdXNCaW5kaW5nKTsKLQkJCQkJCWlm
IChpbm5lckN0eCAhPSBudWxsKSB7Ci0JCQkJCQkJLy8gd2UgaGF2ZSBhIG5vbi1wb2x5IGdlbmVy
aWMgaW52b2NhdGlvbiwgd2hpY2ggbmVlZHMgaW5mZXJlbmNlIGJ1dCBpcyBub3QgY29ubmVjdGVk
IHZpYSBpbm5lclBvbGlzLgotCQkJCQkJCS8vIEZpbmlzaCB0aGF0IGlubmVyIGluZmVyZW5jZSBu
b3cgKGluY2wuIGJpbmRpbmcgdXBkYXRlcyk6Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBpbm5lckJp
bmRpbmcgPSBpbm5lckN0eC5pbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIHByZXZpb3Vz
QmluZGluZyk7Ci0JCQkJCQkJaWYgKCFpbm5lckJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewot
CQkJCQkJCQlpbm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbm5l
ckJpbmRpbmcpOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvbi51cGRhdGVCaW5kaW5n
cyhpbm5lckJpbmRpbmcsIHRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5
IGltcHJvdmluZyBhbnl0aGluZwotCQkJCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lv
bkFyZ3VtZW50cyhpbnZvY2F0aW9uLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCQkJ
CX0KLQkJCQkJCX0KLQkJCQkJfSBlbHNlIGlmKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6
ZWRNZXRob2RCaW5kaW5nKXsKLQkJCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0RmluYWxUYXJn
ZXRUeXBlKHRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJCQl9Ci0JCQkJfSBlbHNlIHsKLQkJ
CQkJZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJfQotCQkJfSBl
bHNlIHsKLQkJCQlpZiAodGhpcy5pbm5lclBvbGllcy5jb250YWlucyhleHByZXNzaW9uKSkgLy8g
bWF5IGdldCBoZXJlIGZvciBSZWZlcmVuY2VFeHByZXNzaW9ucyAuLi4KLQkJCQkJZXhwcmVzc2lv
bi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7IC8vIC4uLiBwcmVwYXJlIGZvciBmaW5hbCBp
bmZlcmVuY2UgdmlhIHJlYmluZElubmVyUG9saWVzCi0JCQkJZWxzZQotCQkJCQlleHByZXNzaW9u
LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsKLQkJ
CX0KLQkJfQogCX0KIAogCXByaXZhdGUgU3Vic3RpdHV0aW9uIGdldFJlc3VsdFN1YnN0aXR1dGlv
bihmaW5hbCBCb3VuZFNldCByZXN1bHQpIHsKQEAgLTE1ODEsMTkgKzEzMTgsMTQgQEAKIAkJCWlm
IChtZXRob2QucmV0dXJuVHlwZS5lcmFzdXJlKCkuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFR5
cGUpKQogCQkJCXJldHVybiBtZXRob2Q7IC8vIGRvbid0IGNvdW50IGFzIHByb2JsZW0uCiAJCX0K
LQkJaWYgKGV4cGVjdGVkVHlwZSA9PSBudWxsKQotCQkJcmV0dXJuIG1ldGhvZDsgLy8gYXNzdW1l
IGluZmVyZW5jZSBmYWlsdXJlIGNvbmNlcm5lZCBhbm90aGVyIGV4cHJlc3Npb24KLQkJUHJvYmxl
bU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyht
ZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25z
LlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtKTsKKwkJLyogV2UgdXNlZCB0
byBjaGVjayBpZiBleHBlY3RlZCB0eXBlIGlzIG51bGwgYW5kIGlmIHNvIHJldHVybiBtZXRob2Qs
IGJ1dCB0aGF0IGlzIHdyb25nIC0gaXQgaW5qZWN0cyBhbiBpbmNvbXBhdGlibGUgbWV0aG9kIGlu
dG8gb3ZlcmxvYWQgcmVzb2x1dGlvbi4KKwkJICAgaWYgd2UgZ2V0IGhlcmUgd2l0aCBleHBlY3Rl
ZCB0eXBlIHNldCB0byBudWxsIGF0IGFsbCwgdGhlIHRhcmdldCBjb250ZXh0IGRvZXMgbm90IGRl
ZmluZSBhIHRhcmdldCB0eXBlICh2YW5pbGxhIGNvbnRleHQpLCBzbyBpbmZlcmVuY2UgaGFzIGRv
bmUgaXRzCisJCSAgIGJlc3QgYW5kIG5vdGhpbmcgbW9yZSB0byBkbyB0aGFuIHRvIHNpZ25hbCBl
cnJvci4gCisJCSAqLworCQlQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFy
YW1ldGVycywgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlKTsK
IAkJcHJvYmxlbU1ldGhvZC5yZXR1cm5UeXBlID0gZXhwZWN0ZWRUeXBlOwogCQlwcm9ibGVtTWV0
aG9kLmluZmVyZW5jZUNvbnRleHQgPSB0aGlzOwogCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQl9
Ci0KLQlwdWJsaWMgdm9pZCByZXBvcnRJbnZhbGlkSW52b2NhdGlvbihJbnZvY2F0aW9uIGludm9j
YXRpb24sIE1ldGhvZEJpbmRpbmcgYmluZGluZykgewotCQlpZiAoaW52b2NhdGlvbiBpbnN0YW5j
ZW9mIE1lc3NhZ2VTZW5kKQotCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlk
TWV0aG9kKChNZXNzYWdlU2VuZCkgaW52b2NhdGlvbiwgYmluZGluZyk7Ci0JCWVsc2UKLQkJCXRo
aXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKChTdGF0ZW1lbnQp
aW52b2NhdGlvbiwgYmluZGluZyk7CiAJfQogCiAJLy8gZGVidWdnaW5nOgpAQCAtMTYzMywxMiAr
MTM2NSw2IEBACiAJCWlmICh0aGlzLmN1cnJlbnRCb3VuZHMgIT0gbnVsbCkKIAkJCWJ1Zi5hcHBl
bmQodGhpcy5jdXJyZW50Qm91bmRzLnRvU3RyaW5nKCkpOwogCQlyZXR1cm4gYnVmLnRvU3RyaW5n
KCk7Ci0JfQotCi0JcHVibGljIHZvaWQgYWRkUHJvYmxlbU1ldGhvZChQcm9ibGVtTWV0aG9kQmlu
ZGluZyBwcm9ibGVtTWV0aG9kKSB7Ci0JCWlmICh0aGlzLnByb2JsZW1NZXRob2RzID09IG51bGwp
Ci0JCQl0aGlzLnByb2JsZW1NZXRob2RzID0gbmV3IEFycmF5TGlzdDxNZXRob2RCaW5kaW5nPigp
OwotCQl0aGlzLnByb2JsZW1NZXRob2RzLmFkZChwcm9ibGVtTWV0aG9kKTsKIAl9CiAKIAkvKioK
QEAgLTE3MTIsNCArMTQzOCw0IEBACiAJcHVibGljIHN0YXRpYyB2b2lkIG1pc3NpbmdJbXBsZW1l
bnRhdGlvbihTdHJpbmcgbXNnKSB7CiAJCXRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4
Y2VwdGlvbihtc2cpOwogCX0KLX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2
YQppbmRleCAyZTk2YTRiLi5jNTU2YzY4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTMxLDYgKzMxLDcgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJkOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVD
b25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwu
Q29tcGlsZXJPcHRpb25zOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4LlNvbHV0aW9uOwogCiAvKioKICAqIEJpbmRpbmcg
ZGVub3RpbmcgYSBnZW5lcmljIG1ldGhvZCBhZnRlciB0eXBlIHBhcmFtZXRlciBzdWJzdGl0dXRp
b25zIGdvdCBwZXJmb3JtZWQuCkBAIC00MSw3ICs0Miw3IEBACiBwdWJsaWMgY2xhc3MgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJp
bmRpbmcgaW1wbGVtZW50cyBTdWJzdGl0dXRpb24gewogCiAgICAgcHVibGljIFR5cGVCaW5kaW5n
W10gdHlwZUFyZ3VtZW50czsKLSAgICBwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25t
ZW50OworICAgIHByb3RlY3RlZCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKICAgICBw
dWJsaWMgYm9vbGVhbiBpbmZlcnJlZFJldHVyblR5cGU7CiAgICAgcHVibGljIGJvb2xlYW4gd2Fz
SW5mZXJyZWQ7IC8vIG9ubHkgc2V0IHRvIHRydWUgZm9yIGluc3RhbmNlcyByZXN1bHRpbmcgZnJv
bSBtZXRob2QgaW52b2NhdGlvbiBpbmZlcnJlbmNlCiAgICAgcHVibGljIGJvb2xlYW4gaXNSYXc7
IC8vIHNldCB0byB0cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3IGZvciBzdWJzdGl0dXRp
b24gcHVycG9zZQpAQCAtNTAsMzEgKzUxLDExIEBACiAJLyoqCiAJICogUGVyZm9ybSBpbmZlcmVu
Y2Ugb2YgZ2VuZXJpYyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9vciBleHBlY3RlZCB0eXBl
CiAJICogPHA+Ci0JICogSW4gMS44KyB0aGUgZm9sbG93aW5nIGRpc2NpcGxpbmUgaGFzIHRvIGJl
IG9ic2VydmVkIGJ5IGNhbGxlcnM6Ci0JICogRWFjaCBpbnZvY2F0aW9uIG11c3QgYmUgc3ViamVj
dGVkIHRvIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlOgotCSAqIDwvcD4KLQkgKiA8dWw+Ci0JICog
PGxpPiB7QGxpbmsgU2NvcGUjQVBQTElDQUJJTElUWSBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkg
SW5mZXJlbmNlfSwgd2hpY2ggbWF5IGJlIGFwcGxpZWQKLQkgKiAgICAgbXVsdGlwbGUgdGltZXMg
Zm9yIHRoZSBzYW1lIGludm9jYXRpb248L2xpPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0lOVk9D
QVRJT05fVFlQRSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlfSwgd2hpY2ggaXMgZmluYWxseSBw
ZXJmb3JtZWQKLQkgKiAgICAgZm9yIHRoZSBzZWxlY3RlZCBtZXRob2QgYW5kIHdoaWNoIGFkZHMg
aW5mb3JtYXRpb24gZnJvbSB0aGUgInRhcmdldCB0eXBlIi48L2xpPgotCSAqIDwvdWw+Ci0JICog
PHA+Ci0JICogQ2xpZW50cyBjYW4gY29udHJvbCB3aGljaCBwYXJ0cyBvZiB0aGUgaW5mZXJlbmNl
IHNob3VsZCBiZSBwZXJmb3JtZWQgYnkgcGFzc2luZyB0aGUgYXBwcm9wcmlhdGUKLQkgKiBmbGFn
cyBpbnRvIGFyZ3VtZW50ICdpbmZlcmVuY2VMZXZlbCcuIE9uIGVhY2ggY2FsbCBwYXRoIGl0IG11
c3QgYmUgZW5zdXJlZCB0aGF0IG9uZSBvciBtb3JlCi0JICogaW52b2NhdGlvbiBhcHBsaWNhYmls
aXR5IGluZmVyZW5jZXMgYXJlIGFsd2F5cyBmb2xsb3dlZCBieSBleGFjdGx5IG9uZSBpbnZvY2F0
aW9uIHR5cGUgaW5mZXJlbmNlCi0JICogKHVubGVzcyBlcnJvcnMgaGF2ZSBiZWVuIGRldGVjdGVk
KS4KLQkgKiA8L3A+Ci0JICogPHA+Ci0JICogSW5pdGlhbCBjbGllbnRzIGFyZSB0aGUgZGlyZWN0
IGNhbGxlcnMgb2YKLQkgKiB7QGxpbmsgU2NvcGUjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0
aG9kQmluZGluZyxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLGludCl9LAotCSAqIHdoaWNo
IHNob3VsZCBlaXRoZXIgaW52b2tlIGJvdGggbGV2ZWxzIG9mIGluZmVyZW5jZSA8ZW0+b3I8L2Vt
PiBkZWxlZ2F0ZSB0aGUgc2Vjb25kIHBhcnQgdG8KLQkgKiB7QGxpbmsgU2NvcGUjbW9zdFNwZWNp
ZmljTWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10saW50LFR5cGVCaW5kaW5nW10sSW52b2Nh
dGlvblNpdGUsUmVmZXJlbmNlQmluZGluZyl9LAotCSAqIHdoaWNoIGlzIGludGVuZGVkIHRvIGVu
c3VyZSBjb21wbGV0aW5nIHRoZSBpbmZlcmVuY2Ugb24gYWxsIG5vbi1lcnJvciBleGl0cy4KKwkg
KiBJbiAxLjgrIGlmIHRoZSBleHBlY3RlZCB0eXBlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGR1ZSB0
byB0aGlzIGNhbGwgYmVpbmcgYW4gYXJndW1lbnQgdG8gYW4gb3V0ZXIgY2FsbCB3aGljaCBpcyBu
b3Qgb3ZlcmxvYWQtcmVzb2x2ZWQgeWV0LAorCSAqIHRoZSByZXR1cm5lZCBtZXRob2QgYmluZGlu
ZyB3aWxsIGJlIGEgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy4KIAkgKiA8
L3A+ICAKIAkgKi8KLQlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1
bWVudHMsIFNjb3BlIHNjb3BlLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGlu
dCBpbmZlcmVuY2VMZXZlbCkKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdb
XSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkK
IAl7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRl
OwogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9k
LnR5cGVWYXJpYWJsZXM7CkBAIC05NSwxMjggKzc2LDM5IEBACiAJCQkvLyBpbml0aWFsaXplcyB0
aGUgbWFwIG9mIHN1YnN0aXR1dGVzICh2YXIgLS0+IHR5cGVbXVtdeyBlcXVhbCwgZXh0ZW5kcywg
c3VwZXJ9CiAJCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJh
bWV0ZXJzOwogCi0vLyA9PT09IDEuODogVGhlIG1haW4gZHJpdmVyIGZvciBpbmZlcmVuY2Ugb2Yg
Z2VuZXJpYyBtZXRob2RzOiA9PT09Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBu
dWxsOwogCQkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVy
T3B0aW9ucygpOwotCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQ
UExJQ0FCSUxJVFkpICE9IDApCi0JCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJ
bmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKLQkJCQllbHNlIGlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0
YW5jZW9mIEludm9jYXRpb24gJiYgb3JpZ2luYWxNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCi0JCQkJCWluZkN0eDE4ID0gKChJbnZvY2F0aW9uKSBp
bnZvY2F0aW9uU2l0ZSkuZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ID09IG51bGwp
Ci0JCQkJCXJldHVybiBvcmlnaW5hbE1ldGhvZDsKLQkJCX0KLQkJCWlmIChpbmZDdHgxOCAhPSBu
dWxsKSB7Ci0JCQkJdHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxs
OwotCQkJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOwotCQkJCQlpZiAoKGluZmVyZW5jZUxldmVs
ICYgU2NvcGUuQVBQTElDQUJJTElUWSkgIT0gMCkgeworCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5z
b3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJCXJldHVybiBjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZDE4KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHNjb3BlLCBp
bnZvY2F0aW9uU2l0ZSk7CiAKLQkJCQkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTog
LS0tLQotCQkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVj
dG9yKCkKLQkJCQkJCQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uCi0J
CQkJCQkJCSYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihv
cmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJz
Lmxlbmd0aCkgewotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250
ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcg
KHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJCQkJCQlpbmZDdHgxOC5p
bmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlz
RGlhbW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwot
CQkJCQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxN
ZXRob2QuaXNWYXJhcmdzKCkpIHsKLQkJCQkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkg
YXBwbGljYWJpbGl0eQotCQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZl
cmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJCWluZkN0eDE4LmluZmVy
ZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOwotCQkJCQkJCWluZkN0
eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50
cywgaXNEaWFtb25kKTsKLQkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZl
KCk7Ci0JCQkJCQl9Ci0JCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZD
dHgxOC5pc1Jlc29sdmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJCQkJCWluZkN0eDE4LnN0
b3JlZFNvbHV0aW9uID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCQkJaW5mQ3R4MTguc3RlcENv
bXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOwotCQkJ
CQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0J
CQkJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtp
bmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOwotCQkJCQkJfQotCQkJCQl9IGVsc2UgewotCQkJ
CQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbjsKLQkJCQkJfQot
CQkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3Vs
dCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCS8vIDEu
Ny0gb25seS4KKwkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmln
aW5hbE1ldGhvZCk7CisJCQltZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBl
cyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNl
Q29udGV4dCk7CisJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQorCQkJCXJldHVybiBu
dWxsOwogCi0JCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmlu
dm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZh
bHNlOwotCQkJCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKLQkJCQkJ
aWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLklOVk9DQVRJT05fVFlQRSkgIT0gMCAvLyByZXF1
ZXN0ZWQ/Ci0JCQkJCQkJJiYgKGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uU2l0
ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpKSB7IC8vIHBvc3Np
YmxlPwotCi0JCQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTogLS0tLQotCQkJ
CQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVk
VHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKLQkJCQkJCWludm9jYXRpb25U
eXBlSW5mZXJyZWQgPSB0cnVlOwotCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0g
bnVsbDsKLQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKQotCQkJCQkJCXJlc3VsdCA9IHByb3Zp
c2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUg
cmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCi0JCQkJCX0gZWxzZSB7
Ci0JCQkJCQkvLyB3ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0aW9uIHR5cGUgaW5mZXJl
bmNlCi0JCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKLQkJCQkJfQotCi0JCQkJCWlm
IChyZXN1bHQgIT0gbnVsbCkgewotCQkJCQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoK
LQkJCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5
cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwotCQkJCQkJaWYgKHNvbHV0aW9u
cyAhPSBudWxsKSB7Ci0JCQkJCQkJCi0JCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3BlLmVu
dmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxNZXRo
b2QsIHNvbHV0aW9ucyk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdh
bGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PwotCQkJCQkJCQlNZXRob2RC
aW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZO
ZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKLQkJCQkJCQkJaWYgKHByb2Js
ZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykKLQkJCQkJCQkJCXJldHVy
biBwcm9ibGVtTWV0aG9kOwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZl
cnJlZCkgewotCQkJCQkJCQlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVs
bEFuYWx5c2lzRW5hYmxlZCkKLQkJCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tG
b3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7
Ci0JCQkJCQkJCWluZkN0eDE4LnJlYmluZElubmVyUG9saWVzKHJlc3VsdCwgbWV0aG9kU3Vic3Rp
dHV0ZS5wYXJhbWV0ZXJzKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0g
bWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50cyk7Ci0JCQkJCQkJ
CWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhv
ZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2Vv
ZiBJbnZvY2F0aW9uKQotCQkJCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkucmVn
aXN0ZXJJbmZlcmVuY2VDb250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4KTsgLy8ga2Vl
cCBjb250ZXh0IHNvIHdlIGNhbiBmaW5pc2ggbGF0ZXIKLQkJCQkJCQl9Ci0JCQkJCQkJcmV0dXJu
IG1ldGhvZFN1YnN0aXR1dGU7Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJcmV0dXJuIG51bGw7Ci0J
CQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIEZJWE1F
IHN0b3AtZ2FwIG1lYXN1cmUKLQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0lu
ZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7Ci0JCQkJCXJldHVy
biBudWxsOworCQkJLy8gc3Vic3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0byBkZW5vdGUgdW5yZXNv
bHZlZCB2YXJzLCBidXQgbnVsbCBhcmd1bWVudHMgZ290IHJlcGxhY2VkIHdpdGggcmVzcGVjdGl2
ZSBvcmlnaW5hbCB2YXJpYWJsZSBpbiBwYXJhbSBtZXRob2QKKwkJCS8vIDE1LjEyLjIuOCAtIGlu
ZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCisJCQlpZiAoaW5mZXJlbmNlQ29udGV4
dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4
dC5pc1VuY2hlY2tlZCkgeyAvLyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tlZCBzdGF0dXMgcG9zdCAx
NS4xMi4yLjcKKwkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMu
bGVuZ3RoOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0
ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBs
ZW5ndGgpOwogCQkJCX0KLQkJCX0gZWxzZSB7Ci0vLyA9PT09IDEuOCA9PT09Ci0JCQkJaW5mZXJl
bmNlQ29udGV4dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0KG9yaWdpbmFsTWV0aG9kKTsKLQkJCQlt
ZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxN
ZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQkJaWYg
KG1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CisJCQkJ
CVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJn
ZXRUeXBlKCk7CisJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgeworCQkJCQkJLy8gcmVj
b3JkIGl0IHdhcyBleHBsaWNpdCBmcm9tIGNvbnRleHQsIGFzIG9wcG9zZWQgdG8gYXNzdW1lZCBi
eSBkZWZhdWx0IChzZWUgYmVsb3cpCisJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0
RXhwZWN0ZWRUeXBlID0gdHJ1ZTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCWV4cGVjdGVkVHlwZSA9
IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7IC8vIGFzc3VtZSBPYmplY3QgYnkgZGVmYXVsdAor
CQkJCQl9CisJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBl
OworCQkJCX0KKwkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZy
b21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwogCQkJCWlmIChtZXRob2RT
dWJzdGl0dXRlID09IG51bGwpCiAJCQkJCXJldHVybiBudWxsOwotCQkJCQotCQkJCS8vIHN1YnN0
aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwg
YXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUg
aW4gcGFyYW0gbWV0aG9kCi0JCQkJLy8gMTUuMTIuMi44IC0gaW5mZXJyaW5nIHVucmVzb2x2ZWQg
dHlwZSBhcmd1bWVudHMKLQkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlw
ZUFyZ3VtZW50KCkpIHsKLQkJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsg
Ly8gb25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43Ci0JCQkJCQlp
bnQgbGVuZ3RoID0gaW5mZXJlbmNlQ29udGV4dC5zdWJzdGl0dXRlcy5sZW5ndGg7Ci0JCQkJCQlT
eXN0ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tl
ZEFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwotCQkJCQl9
Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9J
RCkgewotCQkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52
b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgewot
CQkJCQkJCS8vIHJlY29yZCBpdCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2Vk
IHRvIGFzc3VtZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93KQotCQkJCQkJCWluZmVyZW5jZUNvbnRl
eHQuaGFzRXhwbGljaXRFeHBlY3RlZFR5cGUgPSB0cnVlOwotCQkJCQkJfSBlbHNlIHsKLQkJCQkJ
CQlleHBlY3RlZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2Jq
ZWN0IGJ5IGRlZmF1bHQKLQkJCQkJCX0KLQkJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRU
eXBlID0gZXhwZWN0ZWRUeXBlOwotCQkJCQl9Ci0JCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBtZXRo
b2RTdWJzdGl0dXRlLmluZmVyRnJvbUV4cGVjdGVkVHlwZShzY29wZSwgaW5mZXJlbmNlQ29udGV4
dCk7Ci0JCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwpCi0JCQkJCQlyZXR1cm4gbnVs
bDsKLQkJCQl9CiAJCQl9CiAJCX0KKwkJCiAKIAkJLyogYm91bmRzIGNoZWNrOiBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjQyMTU5LCBJbmZlcnJlZCB0eXBl
cyBtYXkgY29udGFpbiBzZWxmIHJlZmVyZW5jZQogCQkgICBpbiBmb3JtYWwgYm91bmRzLiBJZiAi
VCBleHRlbmRzIEk8VD4iIGlzIGEgb3JpZ2luYWwgdHlwZSB2YXJpYWJsZSBhbmQgVCB3YXMgaW5m
ZXJyZWQgdG8gYmUgSTxUPiBkdWUgcG9zc2libHkKQEAgLTI2Niw2ICsxNTgsOTMgQEAKIAkJcmV0
dXJuIG1ldGhvZFN1YnN0aXR1dGU7CiAJfQogCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5n
IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGZpbmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0
ZSBpbnZvY2F0aW9uU2l0ZSkgeworCQkKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIG1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlw
ZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNv
bnRleHQxOCBpbmZDdHgxOCA9IG51bGw7CisJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9y
aWdpbmFsTWV0aG9kLnBhcmFtZXRlcnM7CisJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJl
c2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0
aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBl
SW5mZXJyZWQgPSBmYWxzZTsKKwkJCisJCXRyeSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJl
c3VsdCA9IG51bGw7CisJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41
LjEgKEFwcGxpY2FiaWxpdHkpOiAtLS0tCisJCQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Np
b24gPSBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9u
KWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHByZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJv
b2xlYW4gaXNEaWFtb25kID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0Nv
bnN0cnVjdG9yKCk7CisJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0
aCkgeworCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hF
Q0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9s
b29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRp
b25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJ
CQkJcmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVs
bCAmJiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJp
YWJsZS1hcml0eSBhcHBsaWNhYmlsaXR5CisJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5m
cmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTgu
aW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5m
Q3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1l
bnRzLCBpc0RpYW1vbmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJ
CQlpZiAocmVzdWx0ID09IG51bGwpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTgu
aXNSZXNvbHZlZChyZXN1bHQpKSB7CisJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVy
ZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9u
U2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhw
cmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVu
Y2VLaW5kOyAgIC8vIENIRUNLCisJCQl9IGVsc2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQor
CQkJLy8gQXBwbGljYWJpbGl0eSBzdWNjZWVkZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlv
biB0eXBlLCBpZiBwb3NzaWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9j
YXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblBy
b2JsZW0gPSBmYWxzZTsKKwkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlv
blNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJ
Ly8gLS0tLSAxOC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJl
c3VsdCA9IHJlc3VsdDsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHko
KTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNv
bHZlKCkKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwg
ZXhwZWN0ZWRUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9j
YXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOworCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0
ID09IG51bGw7CisJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zp
c2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUg
cmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAo
cmVzdWx0ICE9IG51bGwpIHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJ
CVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJp
YWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVs
bCkgeworCQkJCQltZXRob2RTdWJzdGl0dXRlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJ
CQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUg
cHJvdmlzaW9uYWwgcmVzdWx0PworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0g
aW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0
aG9kU3Vic3RpdHV0ZSk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2Js
ZW1NZXRob2RCaW5kaW5nKSB7CisJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJ
CQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9j
YXRpb25UeXBlSW5mZXJyZWQpIHsKKwkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRl
LCBzY29wZSk7CisJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJz
dGl0dXRlLmJvdW5kQ2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVt
TWV0aG9kICE9IG51bGwpIHsKKwkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJ
CQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9u
c1BlclRhcmdldFR5cGUucHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0
aXR1dGUsIHJlc3VsdCkpOworCQkJCQl9IGVsc2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9
IG5ldyBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1
dGUpOworCQkJCQl9CisJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRp
b24pCisJCQkJCQkoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5j
ZUNvbnRleHQobWV0aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28g
d2UgY2FuIGZpbmlzaCBsYXRlcgorCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJ
fQorCQkJfQorCQkJcmV0dXJuIG51bGw7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNl
cHRpb24gZSkgeworCQkJLy8gRklYTUUgc3RvcC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0
aW9uU2l0ZSk7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJv
dW5kQ2hlY2sxOChTY29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vi
c3RpdHV0aW9uIHN1YnN0aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Qb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZp
bGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZh
CkBAIC0wLDAgKzEsMTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQg
KGMpIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMg
YXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRt
bAorICoKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xh
c3MgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyB7IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJs
aWMgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgYXBwbGljYWJsZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxl
TWV0aG9kLm9yaWdpbmFsTWV0aG9kLCBhcHBsaWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFw
cGxpY2FibGVNZXRob2QuZW52aXJvbm1lbnQpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMu
amF2YQppbmRleCA3M2UwNDFiLi43ZmJkZWMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1By
b2JsZW1SZWFzb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZh
CkBAIC00MCw3ICs0MCw3IEBACiAJZmluYWwgaW50IE5vblN0YXRpY09yQWxpZW5UeXBlUmVjZWl2
ZXIgPSAyMDsKIAlmaW5hbCBpbnQgQXR0ZW1wdFRvQnlwYXNzRGlyZWN0U3VwZXIgPSAyMTsgLy8g
c3VwZXIgYWNjZXNzIHdpdGhpbiBkZWZhdWx0IG1ldGhvZAogCWZpbmFsIGludCBEZWZlY3RpdmVD
b250YWluZXJBbm5vdGF0aW9uVHlwZSA9IDIyOwotCWZpbmFsIGludCBQYXJhbWV0ZXJpemVkTWV0
aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSA9IDIzOworCWZpbmFsIGludCBJbnZvY2F0aW9uVHlwZUlu
ZmVyZW5jZUZhaWx1cmUgPSAyMzsKIAlmaW5hbCBpbnQgQXBwbGljYWJsZU1ldGhvZE92ZXJyaWRk
ZW5CeUluYXBwbGljYWJsZSA9IDI0OwogCWZpbmFsIGludCBDb250cmFkaWN0b3J5TnVsbEFubm90
YXRpb25zID0gMjU7CiAJZmluYWwgaW50IE5vU3VjaE1ldGhvZE9uQXJyYXkgPSAyNjsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2
YQppbmRleCBjOWYzZTkwLi44NWVhMzVhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3Bl
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxOSArODcsOSBAQAog
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBNT1JFX0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5j
b21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAq
IHdoaWNoIG9mIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9y
IGJvdGgpLgotCSAqLwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZl
cmVuY2UgKDE4LjUuMSkuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElU
WSA9IDE7Ci0JLyoqIFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4g
Ki8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBS
ZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9O
X1RZUEV9IGluZmVyZW5jZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVS
RU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtp
bmQ7CiAJcHVibGljIFNjb3BlIHBhcmVudDsKKwkKIAogCXByb3RlY3RlZCBTY29wZShpbnQga2lu
ZCwgU2NvcGUgcGFyZW50KSB7CiAJCXRoaXMua2luZCA9IGtpbmQ7CkBAIC00MzcsNiArNDI3LDkg
QEAKIAkJcmV0dXJuIGRlZmF1bHRTdWJzdGl0dXRvci5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwg
b3JpZ2luYWxUeXBlKTsKIAl9CiAKKwlwdWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93
T3JpZ2luYWwoKSB7CisJCXJldHVybiBmYWxzZTsgCisJfQogCS8qKgogCSAqIFJldHVybnMgYW4g
YXJyYXkgb2YgdHlwZXMsIHdoZXJlIG9yaWdpbmFsIHR5cGVzIGdvdCBzdWJzdGl0dXRlZCBnaXZl
biBhIHN1YnN0aXR1dGlvbi4KIAkgKiBPbmx5IGFsbG9jYXRlIGFuIGFycmF5IGlmIGFueXRoaW5n
IGlzIGRpZmZlcmVudC4KQEAgLTY5MSwxMCArNjg0LDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9u
bHkKIAkgKiBHaXZlbiBhIG1ldGhvZCwgcmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3Qg
YmUgY29udmVydGVkIHRvIHBhcmFtZXRlcnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRl
ZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5j
ZSBnb3QgdHJpZ2dlcmVkOwotCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBj
b21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBt
ZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJh
Y2suIAogCSAqLwotCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywg
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQly
ZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRp
b25TaXRlLCBpbmZlcmVuY2VMZXZlbCwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RC
aW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBl
QmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJ
cmV0dXJuIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0
aW9uU2l0ZSwgZmFsc2UpOwogCX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcw
Miw4ICs2OTUsNyBAQAogCSAqIFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNh
c2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJl
ZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhl
biBzaW1wbHkgYW5zd2VyIGl0IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGlu
dCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXBy
b3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJ
CVR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5l
cmljVHlwZUFyZ3VtZW50cygpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2Qu
cGFyYW1ldGVyczsKQEAgLTczOCw5ICs3MzAsMTUgQEAKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdz
OwogCQkJZWxzZSAgLy8gZW5zdXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxv
dyBjYW4gdXBkYXRlIGFyZ3VtZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86
IGFsd2F5cyBjb3B5IGJlZm9yZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5h
cnJheWNvcHkoYXJndW1lbnRzLCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0
aF0sIDAsIGFyZ0xlbmd0aCk7Ci0JCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMs
IGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VMZXZlbCk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBh
cmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkg
cmV0dXJuIG51bGw7IC8vIGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRp
bmcoKSkgcmV0dXJuIG1ldGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNl
ZGVuY2UKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfOCAmJiBtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJ
CQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlOwor
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNv
bnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKKwkJCQlp
ZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29u
dGV4dDE4LlRZUEVfSU5GRVJSRUQpCisJCQkJCXJldHVybiBtZXRob2Q7IC8vIGluZmVyZW5jZSBp
cyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCisJCQl9CiAJCX0gZWxzZSBpZiAoZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxl
dmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCkBAIC03
NTUsNyArNzUzLDcgQEAKIAkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1i
aWd1b3VzVmFyYXJnc0ludm9jYXRpb24gJiYgY29tcGlsZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcyA9IGZhbHNlOwogCQl9Ci0JCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgo
bWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRpb25T
aXRlKSkgPiBOT1RfQ09NUEFUSUJMRSkgeworCQlpZiAoKHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4gTk9U
X0NPTVBBVElCTEUpIHsKIAkJCWlmICgobWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRp
b25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCS8vIGdlbmVyYXRlIHBvbHltb3Jw
aGljIG1ldGhvZAogCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBo
aWNNZXRob2QobWV0aG9kLCBhcmd1bWVudHMpOwpAQCAtNzY3LDE1MCArNzY1LDEwIEBACiAJCS8v
IGluIHdoaWNoIGNhc2UgdGhpcyBwcm9ibGVtIGNhdGVnb3J5IHdpbGwgYmUgYm9ndXMKIAkJaWYg
KGdlbmVyaWNUeXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyht
ZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgYXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0
ZXJpemVkTWV0aG9kVHlwZU1pc21hdGNoKTsKKwkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRz
IG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50
byBjb25zaWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywgbGFt
YmRhIHNoYXBlL2FyaXR5IG1pc21hdGNoIC4uLikKKwkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBv
bHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCisJCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVy
cywgUHJvYmxlbVJlYXNvbnMuSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJbmFwcGxpY2FibGUpOwog
CQlyZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCi0JfQotCi0JcHJpdmF0ZSBpbnQgcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsMTgoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5n
W10gYXJndW1lbnRzLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRp
b25TaXRlIHNpdGUpIHsKLQkJamRrMThjaGVja3M6Ci0JCWlmIChzaXRlIGluc3RhbmNlb2YgSW52
b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCkgewotCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRp
b24pIHNpdGU7Ci0JCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7Ci0JCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRp
b24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSBtZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkgewotCQkJCQkvLyBpbmZlcmVuY2Ug
aXMgcmVzcG9uc2libGUsIG5vIG5lZWQgdG8gcmVjaGVjawotCQkJCQlpZiAoaW5mQ3R4LmlzVmFy
QXJncygpKQotCQkJCQkJcmV0dXJuIFZBUkFSR1NfQ09NUEFUSUJMRTsKLQkJCQkJcmV0dXJuIENP
TVBBVElCTEU7Ci0JCQkJfQotCQkJfQotCQkJLy8gY29sbGVjdCBpbm5lciBpbnZvY2F0aW9ucyB3
aGVyZSB0aGUgb3V0ZXIgZGlkIG5vdCBpbnZvbHZlIGFueSBpbmZlcmVuY2U6Ci0JCQlFeHByZXNz
aW9uW10gaW52b2NhdGlvbkFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7Ci0JCQlp
ZiAoaW52b2NhdGlvbkFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQkJSW5uZXJJbmZlcmVuY2VIZWxw
ZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBpbnZvY2F0aW9uLmlubmVySW5mZXJlbmNlSGVscGVy
KCk7Ci0JCQkJaW50IGFyZ0xlbiA9IGludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoOwotCQkJCWJv
b2xlYW4gaXNWYXJBcmdzW10gPSBuZXcgYm9vbGVhblsxXTsgLy8gZW11bGF0ZSBhbiBpbi1vdXQg
cGFyYW1ldGVyIGZvciBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lciguLikKLQkJCQlpc1Zh
ckFyZ3NbMF0gPSBtZXRob2QuaXNWYXJhcmdzKCkgJiYgYXJnTGVuICE9IG1ldGhvZC5wYXJhbWV0
ZXJzLmxlbmd0aDsgLy8gaWYgc2FtZSBsZW5ndGhzLCBpc1ZhckFyZ3MgY2FuIHN0aWxsIGJlIHVw
ZGF0ZWQgYmVsb3cKLQkJCQlpbnQgbGV2ZWwgPSBDT01QQVRJQkxFOwotCQkJCWZvciAoaW50IGkg
PSAwOyBpIDwgYXJnTGVuOyBpKyspIHsKLQkJCQkJVHlwZUJpbmRpbmcgYXJndW1lbnRUeXBlID0g
aSA8IGFyZ3VtZW50cy5sZW5ndGggPyBhcmd1bWVudHNbaV0gOiBudWxsOyAvLyBsZW5ndGggbWlz
bWF0Y2ggbWF5IGhhcHBlbiBmcm9tIENvZGVTbmlwcGV0TWVzc2FnZVNlbmQucmVzb2x2ZVR5cGUo
KSBpbiB0aGUgaWYgKGFyZ0hhc0Vycm9yKSBibG9jay4KLQkJCQkJaW50IG5leHRMZXZlbCA9IGNv
bXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIs
IGludm9jYXRpb25Bcmd1bWVudHNbaV0sIGFyZ3VtZW50VHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFy
Z3MpOwotCQkJCQlpZiAobmV4dExldmVsID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJcmV0dXJu
IG5leHRMZXZlbDsKLQkJCQkJaWYgKG5leHRMZXZlbCA9PSAtMikKLQkJCQkJCWJyZWFrIGpkazE4
Y2hlY2tzOwotCQkJCQlsZXZlbCA9IE1hdGgubWF4KGxldmVsLCAgbmV4dExldmVsKTsKLQkJCQl9
Ci0JCQkJcmV0dXJuIGxldmVsOyAvLyBuZWl0aGVyIE5PVF9DT01QQVRJQkxFIG5vciB1bmtub3du
KC0yKSBzZWVuCi0JCQl9Ci0JCX0KLQkJLy8gZmFsbCBiYWNrIHRvIG9sZCBtZXRob2Q6Ci0JCWJv
b2xlYW4gdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMgPSAoKHNpdGUgaW5zdGFuY2VvZiBSZWZl
cmVuY2VFeHByZXNzaW9uKSAmJiAoKFJlZmVyZW5jZUV4cHJlc3Npb24pIHNpdGUpLnRyaWFsUmVz
b2x1dGlvbik7Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBh
cmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFy
aWFibGVzKTsKLQl9Ci0KLQlwcml2YXRlIGludCBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5l
cihNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVu
Y2VIZWxwZXIsIEV4cHJlc3Npb24gaW52b2NBcmcsIFR5cGVCaW5kaW5nIGFyZ1R5cGUsIGludCBh
cmdMZW4sIGludCBpLCBib29sZWFuW10gaXNWYXJBcmdzKQotCXsKLQkJaW50IGNvbXBhdGlibGUg
PSBpc1ZhckFyZ3NbMF0gPyBWQVJBUkdTX0NPTVBBVElCTEUgOiBDT01QQVRJQkxFOwotCQlUeXBl
QmluZGluZyByZXNvbHZlZFR5cGUgPSBpbnZvY0FyZy5yZXNvbHZlZFR5cGU7Ci0JCVR5cGVCaW5k
aW5nIHRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5w
YXJhbWV0ZXJzLCBpLCBpc1ZhckFyZ3NbMF0pOwotCQlpZiAoIWlzVmFyQXJnc1swXSAmJiBzaG91
bGRUcnlWYXJhcmdzKG1ldGhvZCwgcmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKSkgewotCQkJaXNW
YXJBcmdzWzBdID0gdHJ1ZTsKLQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0
UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJfQotCQlpZiAodGFyZ2V0
VHlwZSA9PSBudWxsKQotCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOyAvLyBtaXNtYXRjaGluZyBu
dW1iZXIgb2YgYXJncyBvciBvdGhlciBzZXZlcmUgcHJvYmxlbSBpbnNpZGUgbWV0aG9kIGJpbmRp
bmcKLQkJaW50IGxldmVsID0gLTI7IC8vIGRvbid0IGtub3cKLQkJaWYgKGludm9jQXJnIGluc3Rh
bmNlb2YgSW52b2NhdGlvbiAmJiByZXNvbHZlZFR5cGUgIT0gbnVsbCkgewotCQkJSW52b2NhdGlv
biBpbm5lclBvbHkgPSAoSW52b2NhdGlvbikgaW52b2NBcmc7Ci0JCQlsZXZlbCA9IHBhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbChyZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpOwotCQkJaWYgKGxl
dmVsICE9IE5PVF9DT01QQVRJQkxFKSB7Ci0JCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhh
cmdUeXBlLCByZXNvbHZlZFR5cGUpICYmIGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0J
CQkJCWlubmVySW5mZXJlbmNlSGVscGVyLnJlZ2lzdGVySW5uZXJSZXN1bHQobWV0aG9kLCByZXNv
bHZlZFR5cGUsIGFyZ0xlbiwgaSk7Ci0JCQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxl
dmVsKTsKLQkJCX0gZWxzZSB7Ci0JCQkJTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSBpbm5l
clBvbHkuYmluZGluZyhudWxsLCBmYWxzZSwgbnVsbCk7IC8vIDEuIHRyeSB3aXRob3V0IHVwZGF0
ZQotCQkJCWlmIChpbm5lckJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIHsKLQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGlu
bmVyUGFyYW1ldGVyaXplZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlu
bmVyQmluZGluZzsKLQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJQb2x5
LmdldEluZmVyZW5jZUNvbnRleHQoaW5uZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJaWYgKGluZkN0
eDE4ICE9IG51bGwgJiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZvcih0YXJnZXRUeXBlKSkgewotCQkJ
CQkJLy8gbm90IGRldGVjdGVkIGFzIGNvbXBhdGlibGUsIGJlY2F1c2UgaW5mZXJlbmNlIHN0aWxs
IG5lZWRzIHRvIGNvbXBsZXRlPwotCQkJCQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBlKHRhcmdl
dFR5cGUpOwotCQkJCQkJTWV0aG9kQmluZGluZyBzb2x1dGlvbiA9IGluZkN0eDE4LmluZmVySW52
b2NhdGlvblR5cGUoaW5uZXJQb2x5LCBpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQkJaWYgKHNv
bHV0aW9uICE9IG51bGwgJiYgc29sdXRpb24uaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCWlm
IChpbm5lclBvbHkudXBkYXRlQmluZGluZ3Moc29sdXRpb24sIHRhcmdldFR5cGUpKSB7Ci0JCQkJ
CQkJCWlmIChpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQkJCQkJaW5uZXJJbmZl
cmVuY2VIZWxwZXIucmVnaXN0ZXJJbm5lclJlc3VsdChtZXRob2QsIGludm9jQXJnLnJlc29sdmVk
VHlwZSwgYXJnTGVuLCBpKTsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYgKHNvbHV0aW9uLnJldHVyblR5
cGUgIT0gbnVsbCkgewotCQkJCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChzb2x1dGlvbi5yZXR1cm5UeXBlLCB0YXJnZXRUeXBlKTsKLQkJCQkJCQkJaWYgKGxldmVsICE9
IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJCQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxl
dmVsKTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUo
bnVsbCk7Ci0JCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCX0gZWxzZSBpZiAoaW5u
ZXJQb2x5IGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQkJCS8vIG5vdCBk
ZXRlY3RlZCBhcyBjb21wYXRpYmxlLCBiZWNhdXNlIGl0cyBhIGRpYW1vbmQgd2hvc2UgdHlwZSBo
YXNuJ3QgeWV0IGJlZW4gaW5mZXJyZWQ/Ci0JCQkJCQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVu
dHMgPSByZXNvbHZlZFR5cGUudHlwZUFyZ3VtZW50cygpOwotCQkJCQkJaWYgKHR5cGVBcmd1bWVu
dHMgIT0gbnVsbCAmJiB0eXBlQXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7Ci0JCQkJCQkJQWxsb2Nh
dGlvbkV4cHJlc3Npb24gYWxsb2MgPSAoQWxsb2NhdGlvbkV4cHJlc3Npb24pIGlubmVyUG9seTsK
LQkJCQkJCQlpZiAoKGFsbG9jLnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25kKSAhPSAwKSB7
Ci0JCQkJCQkJCS8vIG5vdC15ZXQtaW5mZXJyZWQgZGlhbW9uZDogZXJhc3VyZSBjb21wYXRpYmls
aXR5IHNob3VsZCBzdWZmaWNlLCBkZXRhaWwgd2lsbCBiZSBjaGVja2VkIHVzaW5nIGluZmVyZW5j
ZQotCQkJCQkJCQlpZiAocmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZS5l
cmFzdXJlKCksIHRoaXMpKQotCQkJCQkJCQkJcmV0dXJuIGNvbXBhdGlibGU7Ci0JCQkJCQkJCXJl
dHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9IGVs
c2UgaWYgKGlubmVyUG9seSBpbnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJ
CU1ldGhvZEJpbmRpbmcgdXBkYXRlZE1ldGhvZCA9IGlubmVyUG9seS5iaW5kaW5nKHRhcmdldFR5
cGUsIGZhbHNlLCBudWxsKTsgLy8gMi4gdHJ5IHdpdGggdXBkYXRpbmcKLQkJCQkJaWYgKHVwZGF0
ZWRNZXRob2QgIT0gaW5uZXJCaW5kaW5nICYmIHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJ
CQkJaWYgKHVwZGF0ZWRNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJaWYgKHVwZGF0
ZWRNZXRob2QuZGVjbGFyaW5nQ2xhc3MuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkKLQkJ
CQkJCQlyZXR1cm4gY29tcGF0aWJsZTsKLQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJ
CQkJCX0gZWxzZSBpZiAodXBkYXRlZE1ldGhvZC5wcm9ibGVtSWQoKSA9PSBQcm9ibGVtUmVhc29u
cy5BbWJpZ3VvdXMpIHsKLQkJCQkJCQlsZXZlbCA9IC0yOyAvLyBuZWl0aGVyIGdvb2Qgbm9yIGJh
ZCwgYW5zd2VyICJ1bmtub3duIgotCQkJCQkJfQotCQkJCQl9Ci0JCQkJfQotCQkJfQotCQl9IGVs
c2UgaWYgKGludm9jQXJnLmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJaWYgKGludm9jQXJnIGlu
c3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9uKSB7Ci0JCQkJQ29uZGl0aW9uYWxFeHByZXNz
aW9uIGNlID0gKENvbmRpdGlvbmFsRXhwcmVzc2lvbikgaW52b2NBcmc7Ci0JCQkJaW50IGxldmVs
MSA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VI
ZWxwZXIsIGNlLnZhbHVlSWZUcnVlLCBhcmdUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0J
CQkJaWYgKGxldmVsMSA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJ
QkxFOwotCQkJCWludCBsZXZlbDIgPSBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRo
b2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBjZS52YWx1ZUlmRmFsc2UsIGFyZ1R5cGUsIGFyZ0xl
biwgaSwgaXNWYXJBcmdzKTsKLQkJCQlpZiAobGV2ZWwyID09IE5PVF9DT01QQVRJQkxFKQotCQkJ
CQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJcmV0dXJuIE1hdGgubWF4KGxldmVsMSwgbGV2
ZWwyKTsKLQkJCX0KLQkJCS8vIExFIG9yIFJFOgotCQkJaWYgKGludm9jQXJnLmlzQ29tcGF0aWJs
ZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCQlpZiAo
IWlzVmFyQXJnc1swXSAmJiBtZXRob2QuaXNWYXJhcmdzKCkpIHsgLy8gY2FuJ3QgdXNlIHNob3Vs
ZFRyeVZhcmFyZ3Mgd2l0aG91dCBhIHJlc29sdmVkVHlwZSwgc28ganVzdCB0cnkgaXQ6Ci0JCQkJ
aXNWYXJBcmdzWzBdID0gdHJ1ZTsKLQkJCQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4
LmdldFBhcmFtZXRlcihtZXRob2QucGFyYW1ldGVycywgaSwgdHJ1ZSk7Ci0JCQkJaWYgKHRhcmdl
dFR5cGUgIT0gbnVsbCAmJiBpbnZvY0FyZy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRo
aXMpKQotCQkJCQlyZXR1cm4gVkFSQVJHU19DT01QQVRJQkxFOwotCQkJfQotCQkJcmV0dXJuIE5P
VF9DT01QQVRJQkxFOwotCQl9IGVsc2UgaWYgKHJlc29sdmVkVHlwZSAhPSBudWxsICYmIHJlc29s
dmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkvLyBuZWVkIHRvIGhhbmRsZSAibm9ybWFs
IiBleHByZXNzaW9ucyB0b28sIHNpbmNlIG1peGVkIHBvbHkvc3RhbmRhbG9uZSBhcmd1bWVudCBs
aXN0cyBtdXN0IGJlIGZ1bGx5IGFuYWx5emVkLgotCQkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChyZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpOwotCQl9Ci0JCXJldHVybiBsZXZl
bDsKLQl9Ci0KLQlwcml2YXRlIGJvb2xlYW4gc2hvdWxkVHJ5VmFyYXJncyhNZXRob2RCaW5kaW5n
IG1ldGhvZCwgVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBl
KSB7Ci0JCWlmICghbWV0aG9kLmlzVmFyYXJncygpKQotCQkJcmV0dXJuIGZhbHNlOwotCQlpZiAo
dGFyZ2V0VHlwZSA9PSBudWxsKQotCQkJcmV0dXJuIHRydWU7CS8vIG9mZiByYW5nZQotCQlpZiAo
dGFyZ2V0VHlwZS5pc0FycmF5VHlwZSgpICYmIHJlc29sdmVkVHlwZSAhPSBudWxsICYmICFyZXNv
bHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCXJldHVybiB0
cnVlOwkvLyBub3QgYSBkaXJlY3QgbWF0Y2ggYnV0IGhvcGUgdG8gaW1wcm92ZQotCQlyZXR1cm4g
ZmFsc2U7CiAJfQogCiAJLyoqCkBAIC0xMjY3LDcgKzExMjUsNyBAQAogCQkJbmV4dDoKIAkJCWZv
ciAoaW50IGkgPSBzdGFydEZvdW5kU2l6ZTsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0
aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRB
dChpKTsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
QVBQTElDQUJJTElUWSk7CisJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGNvbmNyZXRl
TWF0Y2hlcyAhPSBudWxsKSB7CkBAIC0xMjk3LDggKzExNTUsNiBAQAogCQkJCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsgLy8gY2FuIGJlIG51bGwKIAkJCX0KIAkJCWNvbmNyZXRlTWF0Y2ggPSBjYW5k
aWRhdGVzWzBdOwotCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3Jt
IG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJY29uY3JldGVNYXRjaCA9IGluZmVySW52
b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNvbmNyZXRlTWF0Y2gsIGFyZ3VtZW50VHlwZXMp
OwogCQkJaWYgKGNvbmNyZXRlTWF0Y2ggIT0gbnVsbCkKIAkJCQljb21waWxhdGlvblVuaXRTY29w
ZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNvbmNyZXRlTWF0Y2gudGhyb3duRXhjZXB0aW9ucyk7
CiAJCQlyZXR1cm4gY29uY3JldGVNYXRjaDsKQEAgLTEzNzEsNyArMTIyNyw3IEBACiAJCQkJLy8g
dGFyZ2V0aW5nIGEgZ2VuZXJpYyBtZXRob2QgY291bGQgZmluZCBhbiBleGFjdCBtYXRjaCB3aXRo
IHZhcmlhYmxlIHJldHVybiB0eXBlCiAJCQkJaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBl
QXJndW1lbnRzKCkgIT0gbnVsbCkgewogCQkJCQkvLyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgu
Likgd2lsbCByZXR1cm4gYSBQb2x5bW9ycGhpY01ldGhvZEJpbmRpbmcgaWYgbmVlZGVkCi0JCQkJ
CWV4YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7CisJCQkJCWV4YWN0TWV0
aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlKTsKIAkJCQl9IGVsc2UgaWYgKChleGFjdE1ldGhvZC50YWdCaXRzICYg
VGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJCQkJLy8g
Z2VuZXJhdGUgcG9seW1vcnBoaWMgbWV0aG9kCiAJCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50
KCkuY3JlYXRlUG9seW1vcnBoaWNNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwpA
QCAtMTc2MywyMiArMTYxOSwxMyBAQAogCQkJLy8gYXJndW1lbnQgdHlwZSBjb21wYXRpYmlsaXR5
IGNoZWNrCiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0
aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRB
dChpKTsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
QVBQTElDQUJJTElUWSk7CisJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGZvdW5kU2l6
ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBpbnZv
Y2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2aXNpYmxl
IG1hdGNoIG5vdwogCQkJCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJ
CQkJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2Vs
ZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0
LCBmb3VuZCwgbmV3IE1ldGhvZEJpbmRpbmcgW10ge2NvbXBhdGlibGVNZXRob2R9KTsKLS8vID09
PT0gMS44OiBGaW5hbGl6ZSB0eXBlIGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0K
LQkJCQkJCQlNZXRob2RCaW5kaW5nIGltcHJvdmVkID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZv
Y2F0aW9uU2l0ZSwgY29tcGF0aWJsZU1ldGhvZCwgYXJndW1lbnRUeXBlcyk7Ci0JCQkJCQkJaWYg
KGltcHJvdmVkICE9IG51bGwgJiYgaW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJ
CQljb21wYXRpYmxlTWV0aG9kID0gaW1wcm92ZWQ7Ci0JCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQkJ
cHJvYmxlbU1ldGhvZCA9IGltcHJvdmVkOwotCQkJCQkJCQljb250aW51ZTsKLQkJCQkJCQl9Ci0v
LyA9PT09IDEuOCA9PT09CiAJCQkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNv
bXBhdGlibGVNZXRob2QudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJCQkJcmV0dXJuIGNvbXBhdGli
bGVNZXRob2Q7CiAJCQkJCQl9CkBAIC0xODg3LDggKzE3MzQsNyBAQAogCQkJY2FzZSAxIDoKIAkJ
CQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQogCQkJCQlyZXR1cm4gZmluZERl
ZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVz
LCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBNZXRob2RC
aW5kaW5nIFtdIHsgY2FuZGlkYXRlc1swXSB9KTsKLQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNl
IGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJY2Fu
ZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY2FuZGlkYXRlc1sw
XSwgYXJndW1lbnRUeXBlcyk7CisJCQkJY2FuZGlkYXRlID0gY2FuZGlkYXRlc1swXTsKIAkJCQlp
ZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNl
cyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAg
LTIzODAsNyArMjIyNiwxMCBAQAogCQl9CiAJCWlmIChleGFjdE1ldGhvZCA9PSBudWxsIHx8ICFl
eGFjdE1ldGhvZC5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQlyZXR1cm4g
bnVsbDsKLQkJaWYgKGV4YWN0TWV0aG9kLmlzVmFyYXJncygpIHx8IGV4YWN0TWV0aG9kLnR5cGVW
YXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGludm9jYXRpb25TaXRl
LmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgPT0gbnVsbCkKKwkJCisJCWZpbmFsIFR5cGVCaW5kaW5n
W10gdHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7
CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gZXhhY3RNZXRob2QudHlw
ZVZhcmlhYmxlcygpOworCQlpZiAoZXhhY3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgKHR5cGVWYXJp
YWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiAodHlwZUFyZ3VtZW50cyA9PSBu
dWxsIHx8IHR5cGVBcmd1bWVudHMubGVuZ3RoICE9IHR5cGVWYXJpYWJsZXMubGVuZ3RoKSkpCiAJ
CQlyZXR1cm4gbnVsbDsKIAkJCiAJCWlmIChyZWNlaXZlclR5cGUuaXNBcnJheVR5cGUoKSkgewpA
QCAtMjM5NSw2ICsyMjQ0LDEwIEBACiAJCXsKIAkJCXJldHVybiBlbnZpcm9ubWVudCgpLmNyZWF0
ZUdldENsYXNzTWV0aG9kKHJlY2VpdmVyVHlwZSwgZXhhY3RNZXRob2QsIHRoaXMpOwogCQl9CisJ
CQorCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSAKKwkJ
CXJldHVybiBlbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4
YWN0TWV0aG9kLCB0eXBlQXJndW1lbnRzKTsKKwkKIAkJcmV0dXJuIGV4YWN0TWV0aG9kOwogCX0K
IAkJCkBAIC0yNDE3LDE5ICsyMjcwLDI2IEBACiAJCU1ldGhvZEJpbmRpbmcgZXhhY3RDb25zdHJ1
Y3RvciA9IG51bGw7CiAJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlKHJlY2VpdmVyVHlw
ZSk7CiAJCU1ldGhvZEJpbmRpbmdbXSBtZXRob2RzID0gcmVjZWl2ZXJUeXBlLmdldE1ldGhvZHMo
VHlwZUNvbnN0YW50cy5JTklUKTsKKwkJZmluYWwgVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFy
Z3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJ
CQlNZXRob2RCaW5kaW5nIGNvbnN0cnVjdG9yID0gbWV0aG9kc1tpXTsKIAkJCWlmICghY29uc3Ry
dWN0b3IuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKQogCQkJCWNvbnRpbnVlOwog
CQkJaWYgKGNvbnN0cnVjdG9yLmlzVmFyYXJncygpKQogCQkJCXJldHVybiBudWxsOwotCQkJaWYg
KGNvbnN0cnVjdG9yLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVT
ICYmIGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgPT0gbnVsbCkKKwkJCWlm
IChjb25zdHJ1Y3Rvci50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxF
UyAmJiBnZW5lcmljVHlwZUFyZ3VtZW50cyA9PSBudWxsKQogCQkJCXJldHVybiBudWxsOwogCQkJ
aWYgKGV4YWN0Q29uc3RydWN0b3IgPT0gbnVsbCkgewogCQkJCWV4YWN0Q29uc3RydWN0b3IgPSBj
b25zdHJ1Y3RvcjsKIAkJCX0gZWxzZSB7CiAJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJ
ZmluYWwgVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdENvbnN0cnVj
dG9yLnR5cGVWYXJpYWJsZXMoKTsKKwkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19U
WVBFX1ZBUklBQkxFUykgeworCQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IGdlbmVyaWNU
eXBlQXJndW1lbnRzLmxlbmd0aCkKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCWV4YWN0Q29uc3RydWN0
b3IgPSBlbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGV4YWN0
Q29uc3RydWN0b3IsIGdlbmVyaWNUeXBlQXJndW1lbnRzKTsKIAkJfQogCQlyZXR1cm4gZXhhY3RD
b25zdHJ1Y3RvcjsKIAl9CkBAIC0yNDU4LDcgKzIzMTgsNyBAQAogCQkJaWYgKG1ldGhvZEJpbmRp
bmcgIT0gbnVsbCAmJiBtZXRob2RCaW5kaW5nLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0
aGlzKSkgewogCQkJICAgIC8vIHRhcmdldGluZyBhIG5vbiBnZW5lcmljIGNvbnN0cnVjdG9yIHdp
dGggdHlwZSBhcmd1bWVudHMgPwogCQkJICAgIGlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlw
ZUFyZ3VtZW50cygpICE9IG51bGwpCi0JCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSwgRlVMTF9JTkZFUkVOQ0UpOworCQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUp
OwogCQkJCXJldHVybiBtZXRob2RCaW5kaW5nOwogCQkJfQogCQkJTWV0aG9kQmluZGluZ1tdIG1l
dGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQsIGFyZ3Vt
ZW50VHlwZXMubGVuZ3RoKTsKQEAgLTI0NzIsNyArMjMzMiw3IEBACiAJCQlpbnQgY29tcGF0aWJs
ZUluZGV4ID0gMDsKIAkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG51bGw7CiAJCQlm
b3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykg
ewotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNB
QklMSVRZKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7
CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJs
ZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5k
ZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAtMjQ5NSw4ICsyMzU1LDcgQEAKIAkJCQkJdmlz
aWJsZVt2aXNpYmxlSW5kZXgrK10gPSBtZXRob2Q7CiAJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4
ID09IDEpIHsKLQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0g
b3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5
cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCXJldHVy
biB2aXNpYmxlWzBdOwogCQkJfQogCQkJaWYgKHZpc2libGVJbmRleCA9PSAwKQogCQkJCXJldHVy
biBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcoCkBAIC0yNzYwLDcgKzI2MTksNyBAQAogCQkJCQkJ
CQlpZiAoZm91bmRQcm9ibGVtID09IG51bGwpCiAJCQkJCQkJCQlmb3VuZFByb2JsZW0gPSBwb3Nz
aWJsZTsgLy8gYW5zd2VyIGFzIGVycm9yIGNhc2UgbWF0Y2gKIAkJCQkJCQl9IGVsc2UgaWYgKHBv
c3NpYmxlLmlzU3RhdGljKCkpIHsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0
aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QocG9zc2libGUsIGFyZ3VtZW50VHlwZXMsIGlu
dm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCQkJCQkJTWV0aG9kQmluZGluZyBjb21w
YXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QocG9zc2libGUsIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0g
bnVsbCkgewogCQkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkg
ewogCQkJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmNhbkJlU2VlbkJ5KHVuaXRTY29wZS5m
UGFja2FnZSkpIHsKQEAgLTM1OTYsOCArMzQ1NSw4IEBACiAJCQlmb3IgKGludCBpID0gKG9uZVBh
cmFtc0xlbmd0aCA+IHR3b1BhcmFtc0xlbmd0aCA/IHR3b1BhcmFtc0xlbmd0aCA6IG9uZVBhcmFt
c0xlbmd0aCkgLSAyOyBpID49IDA7IGktLSkKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxz
KG9uZVBhcmFtc1tpXSwgdHdvUGFyYW1zW2ldKSAmJiAhb25lUGFyYW1zW2ldLmlzQ29tcGF0aWJs
ZVdpdGgodHdvUGFyYW1zW2ldKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwotCQkJaWYgKHBhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbChvbmUsIHR3b1BhcmFtcywgdHJ1ZSwgZmFsc2UpID09IE5PVF9D
T01QQVRJQkxFCi0JCQkJCSYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBh
cmFtcywgdHJ1ZSwgZmFsc2UpID09IFZBUkFSR1NfQ09NUEFUSUJMRSkKKwkJCWlmIChwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwob25lLCB0d29QYXJhbXMsIHRydWUpID09IE5PVF9DT01QQVRJ
QkxFCisJCQkJCSYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0d28sIG9uZVBhcmFtcywg
dHJ1ZSkgPT0gVkFSQVJHU19DT01QQVRJQkxFKQogCQkJCXJldHVybiB0cnVlOwogCQl9CiAJCXJl
dHVybiBmYWxzZTsKQEAgLTQzNzIsNDQgKzQyMzEsMTIgQEAKIAlwcm90ZWN0ZWQgZmluYWwgTWV0
aG9kQmluZGluZyBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmdbXSB2aXNp
YmxlLCBpbnQgdmlzaWJsZVNpemUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwg
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJU
eXBlKSB7CiAKIAkJYm9vbGVhbiBpc0pkazE4ID0gY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2
ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfODsKLQotCQkvLyBjb21tb24gcGFydCBmb3Ig
YWxsIGNvbXBsaWFuY2UgbGV2ZWxzOgogCQlpbnRbXSBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3
IGludFt2aXNpYmxlU2l6ZV07Ci0JCWludCBjb21wYXRpYmxlQ291bnQgPSAwOwotCQlmb3IgKGlu
dCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nW10gYXJnVHlw
ZXMgPSBhcmd1bWVudFR5cGVzOwotCQkJaWYgKGlzSmRrMTggJiYgaW52b2NhdGlvblNpdGUgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSAoKEludm9jYXRpb24paW52b2NhdGlvblNpdGUpLmlubmVySW5mZXJlbmNl
SGVscGVyKCk7Ci0JCQkJaWYgKGlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCWFy
Z1R5cGVzID0gaW5uZXJJbmZlcmVuY2VIZWxwZXIuZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0
ZSh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKLQkJCX0KLQkJCWlmICgoY29tcGF0aWJpbGl0
eUxldmVsc1tpXSA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmdU
eXBlcykpICE9IE5PVF9DT01QQVRJQkxFKSB7Ci0JCQkJaWYgKGkgIT0gY29tcGF0aWJsZUNvdW50
KSB7Ci0JCQkJCXZpc2libGVbY29tcGF0aWJsZUNvdW50XSA9IHZpc2libGVbaV07Ci0JCQkJCWNv
bXBhdGliaWxpdHlMZXZlbHNbY29tcGF0aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNb
aV07Ci0JCQkJfQotCQkJCWNvbXBhdGlibGVDb3VudCsrOwotCQkJfQotCQl9Ci0vLyBUT0RPOiBE
aXNhYmxlZCwgYmVjYXVzZSB3ZSBrbm93IGEgc2l0dWF0aW9uIHdoZXJlIHRoaXMgaXMgZXhwZWN0
ZWQsIHNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDI5NDkwCi0vLwkJaWYgKGNvbXBhdGli
bGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkgewotLy8JCQlwcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmlj
SW5mZXJlbmNlUHJvYmxlbSgiKFJlY292ZXJlZCkgSW50ZXJuYWwgaW5jb25zaXN0ZW5jeSB3aGls
ZSBjaGVja2luZyBpbnZvY2F0aW9uIGFtYmlndWl0eSIsIGludm9jYXRpb25TaXRlLCBQcm9ibGVt
U2V2ZXJpdGllcy5XYXJuaW5nKTsgLy8kTk9OLU5MUy0xJAotLy8JCX0KLQkJaWYgKGNvbXBhdGli
bGVDb3VudCA9PSAwKSB7Ci0JCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2li
bGVbMF0uc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsK
LQkJfSBlbHNlIGlmIChjb21wYXRpYmxlQ291bnQgPT0gMSkgewotCQkJTWV0aG9kQmluZGluZyBj
YW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBd
LCBhcmd1bWVudFR5cGVzKTsKLQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKLQkJCQljb21waWxh
dGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNl
cHRpb25zKTsKLQkJCXJldHVybiBjYW5kaWRhdGU7Ci0JCX0KLQkJaWYgKGNvbXBhdGlibGVDb3Vu
dCAhPSB2aXNpYmxlU2l6ZSkgewotCQkJU3lzdGVtLmFycmF5Y29weSh2aXNpYmxlLCAwLCB2aXNp
YmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemUgPSBjb21wYXRpYmxlQ291bnRdLCAw
LCBjb21wYXRpYmxlQ291bnQpOwotCQkJU3lzdGVtLmFycmF5Y29weShjb21wYXRpYmlsaXR5TGV2
ZWxzLCAwLCBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3IGludFtjb21wYXRpYmxlQ291bnRdLCAw
LCBjb21wYXRpYmxlQ291bnQpOwotCQl9CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNp
emU7IGkrKykKKwkJCWNvbXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcyk7CisJCQogCQkKIAkJTWV0aG9kQmlu
ZGluZ1tdIG1vcmVTcGVjaWZpYyA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2libGVTaXplXTsKLQog
CQlpZiAoaXNKZGsxOCkgewogCQkJLy8gMTUuMTIuMi41IENob29zaW5nIHRoZSBNb3N0IFNwZWNp
ZmljIE1ldGhvZAogCQkJaW50IGNvdW50ID0gMDsKQEAgLTQ0NjMsNyArNDI5MCw3IEBACiAJCQlp
ZiAoY291bnQgPT0gMCkgewogCQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlz
aWJsZVswXSwgdmlzaWJsZVswXS5zZWxlY3RvciwgdmlzaWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9i
bGVtUmVhc29ucy5BbWJpZ3VvdXMpOwogCQkJfSBlbHNlIGlmIChjb3VudCA9PSAxKSB7Ci0JCQkJ
TWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25T
aXRlLCBtb3JlU3BlY2lmaWNbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCU1ldGhvZEJpbmRpbmcg
Y2FuZGlkYXRlID0gbW9yZVNwZWNpZmljWzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkK
IAkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRh
dGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ1MTYsNyAr
NDM0Myw3IEBACiAJCQkJCQkJfQogCQkJCQkJfQogCQkJCQkJTWV0aG9kQmluZGluZyBhY2NlcHRh
YmxlID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kVG9UZXN0LCB0aWVicmVha01ldGhv
ZC5wYXJhbWV0ZXJzLAotCQkJCQkJCQl0aWVCcmVha0ludm9jYXRpb25TaXRlLCBJTlZPQ0FUSU9O
X1RZUEUsIGxldmVsID09IFZBUkFSR1NfQ09NUEFUSUJMRSk7CisJCQkJCQkJCXRpZUJyZWFrSW52
b2NhdGlvblNpdGUsIGxldmVsID09IFZBUkFSR1NfQ09NUEFUSUJMRSk7CiAJCQkJCQkvKiBUaGVy
ZSBhcmUgNCBjaG9pY2VzIHRvIGNvbnNpZGVyIHdpdGggY3VycmVudCAmIG5leHQgOgogCQkJCQkJ
IGZvbyhCKSAmIGZvbyhBKSB3aGVyZSBCIGV4dGVuZHMgQQogCQkJCQkJIDEuIHRoZSAyIG1ldGhv
ZHMgYXJlIGVxdWFsIChib3RoIGFjY2VwdCBlYWNoIG90aGVycyBwYXJhbWV0ZXJzKSAtPiB3YW50
IHRvIGNvbnRpbnVlCkBAIC00NTQwLDggKzQzNjcsNyBAQAogCQkJaWYgKGNvdW50ID09IDEpIHsK
IAkJCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspIHsKIAkJCQkJaWYgKG1v
cmVTcGVjaWZpY1tpXSAhPSBudWxsKSB7Ci0JCQkJCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEg
Y2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJCQlNZXRo
b2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUs
IHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpOworCQkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRh
dGUgPSB2aXNpYmxlW2ldOwogCQkJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQkJCWNv
bXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93
bkV4Y2VwdGlvbnMpOwogCQkJCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ2NjIsOCArNDQ4OCw3
IEBACiAJCQkJaWYgKG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgIT0gbnVsbCAmJiBtb3N0U3BlY2lm
aWNFeGNlcHRpb25zICE9IGN1cnJlbnQudGhyb3duRXhjZXB0aW9ucykgewogCQkJCQlyZXR1cm4g
bmV3IE1vc3RTcGVjaWZpY0V4Y2VwdGlvbk1ldGhvZEJpbmRpbmcoY3VycmVudCwgbW9zdFNwZWNp
ZmljRXhjZXB0aW9ucyk7CiAJCQkJfQotCQkJCS8vIDEuODogQmVmb3JlIHJldHVybmluZyBnaXZl
IGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIp
OgotCQkJCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjdXJyZW50
LCBhcmd1bWVudFR5cGVzKTsKKwkJCQlyZXR1cm4gY3VycmVudDsKIAkJCX0KIAkJfQogCkBAIC00
NzI4LDE0ICs0NTUzLDIyIEBACiAJfQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7
Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMs
IGZhbHNlLCBmYWxzZSk7CisJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0
aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKIAl9CQotCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5m
ZXJlbmNlVmFyaWFibGVzKSB7CisJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFu
IHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJz
ID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCWludCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMubGVu
Z3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKIAogCQlDb21waWxlck9w
dGlvbnMgY29tcGlsZXJPcHRpb25zID0gY29tcGlsZXJPcHRpb25zKCk7CisJCVR5cGVCaW5kaW5n
IFtdIHNoYWxsb3dQYXJhbWV0ZXJzID0gcGFyYW1ldGVyczsKKwkJTWV0aG9kQmluZGluZyBzaGFs
bG93T3JpZ2luYWwgPSBtZXRob2Q7CisJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwg
Pj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9m
IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgfHwgc2hvdWxkQ29uc3VsdFNo
YWRvd09yaWdpbmFsKCkpIHsKKwkJCQlzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Quc2hhbGxvd09y
aWdpbmFsKCk7CisJCQkJc2hhbGxvd1BhcmFtZXRlcnMgPSBzaGFsbG93T3JpZ2luYWwucGFyYW1l
dGVyczsKKwkJCX0KKwkJfQogCQlpZiAoY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgewogCQkJaWYgKHBhcmFtTGVuZ3RoICE9IGFyZ0xlbmd0
aCkKIAkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CkBAIC00NzYxLDE1ICs0NTk0LDE2IEBACiAJ
CQlpZiAocGFyYW1MZW5ndGggPT0gYXJnTGVuZ3RoKSB7IC8vIGFjY2VwdCBYIG9yIFhbXSBidXQg
bm90IFhbXVtdCiAJCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBwYXJhbWV0ZXJzW2xhc3RJbmRleF07
IC8vIGlzIGFuIEFycmF5QmluZGluZyBieSBkZWZpbml0aW9uCiAJCQkJVHlwZUJpbmRpbmcgYXJn
ID0gYXJndW1lbnRzW2xhc3RJbmRleF07CisJCQkJCiAJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVx
dWFscyhwYXJhbSwgYXJnKSkgewotCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQkJ
aWYgKGxldmVsID09IE5PVF9DT01QQVRJQkxFKSB7CiAJCQkJCQkvLyBleHBlY3QgWFtdLCBpcyBp
dCBjYWxsZWQgd2l0aCBYCiAJCQkJCQlwYXJhbSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbSkuZWxl
bWVudHNUeXBlKCk7CiAJCQkJCQlpZiAodGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgewogCQkJ
CQkJCWFyZyA9ICgoQXJyYXlCaW5kaW5nKSBhcmcpLmVsZW1lbnRzVHlwZSgpOwogCQkJCQkJfQot
CQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRp
ZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSA9PSBO
T1RfQ09NUEFUSUJMRSkKKwkJCQkJCWlmIChzaGFsbG93UGFyYW1ldGVyc1tsYXN0SW5kZXhdLmlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZywgc2hhbGxvd09yaWdpbmFsKSAmJiBwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7
CiAJCQkJCQlsZXZlbCA9IFZBUkFSR1NfQ09NUEFUSUJMRTsgLy8gdmFyYXJncyBzdXBwb3J0IG5l
ZWRlZAogCQkJCQl9CkBAIC00Nzc5LDcgKzQ2MTMsOSBAQAogCQkJCQlUeXBlQmluZGluZyBwYXJh
bSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbWV0ZXJzW2xhc3RJbmRleF0pLmVsZW1lbnRzVHlwZSgp
OwogCQkJCQlmb3IgKGludCBpID0gbGFzdEluZGV4OyBpIDwgYXJnTGVuZ3RoOyBpKyspIHsKIAkJ
CQkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09
IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50
c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKLQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
cGFyYW0sIGFyZykgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVu
diwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMp
ID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKCFzaGFsbG93UGFyYW1ldGVyc1tsYXN0SW5k
ZXhdLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZywgc2hhbGxvd09yaWdpbmFsKSkKKwkJ
CQkJCQljb250aW51ZTsKKwkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW0sIGFy
ZykgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJl
YWtpbmdWYXJhcmdzTWV0aG9kcykgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCQkJcmV0dXJuIE5P
VF9DT01QQVRJQkxFOwogCQkJCQl9CiAJCQkJfSAgZWxzZSBpZiAobGFzdEluZGV4ICE9IGFyZ0xl
bmd0aCkgeyAvLyBjYW4gY2FsbCBmb28oaW50IGksIFggLi4uIHgpIHdpdGggZm9vKDEpIGJ1dCBO
T1QgZm9vKCk7CkBAIC00Nzk1LDcgKzQ2MzEsOSBAQAogCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBw
YXJhbWV0ZXJzW2ldOwogCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVu
dHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwogCQkJaWYgKFR5cGVCaW5kaW5n
Lm5vdEVxdWFscyhhcmcscGFyYW0pKSB7Ci0JCQkJaW50IG5ld0xldmVsID0gcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9k
cywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCWlmICghc2hhbGxvd1BhcmFtZXRl
cnNbaV0uaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQor
CQkJCQljb250aW51ZTsKKwkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlp
ZiAobmV3TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKIAkJCQlpZiAobmV3TGV2ZWwgPiBsZXZlbCkKQEAgLTQ4MjQsNyArNDY2Miw3IEBACiAJCXJl
dHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CiAJCi0JcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVu
dmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBib29sZWFu
IHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJpbmRpbmcgcGFyYW0sIExvb2t1
cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJ
CS8vIG9ubHkgY2FsbGVkIGlmIGVudi5vcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzUKIAkJaWYgKGFyZyA9PSBudWxsIHx8IHBhcmFtID09IG51bGwpCiAJCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7CkBAIC00ODQzLDExICs0NjgxLDYgQEAKIAkJCVR5cGVCaW5k
aW5nIGNvbnZlcnRlZFR5cGUgPSBlbnYuY29tcHV0ZUJveGluZ1R5cGUoYXJnKTsKIAkJCWlmIChU
eXBlQmluZGluZy5lcXVhbHNFcXVhbHMoY29udmVydGVkVHlwZSwgcGFyYW0pIHx8IGNvbnZlcnRl
ZFR5cGUuaXNDb21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykpCiAJCQkJcmV0dXJuIEFVVE9CT1hf
Q09NUEFUSUJMRTsKLQkJfQotCQlpZiAodG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMgJiYgKCFh
cmcuaXNQcm9wZXJUeXBlKGZhbHNlKSB8fCAhcGFyYW0uaXNQcm9wZXJUeXBlKGZhbHNlKSkpIHsK
LQkJCS8vIGR1cmluZyB0eXBlIGluZmVyZW5jZSBpbnZvbHZpbmcgYSBSZWZlcmVuY2VFeHByZXNz
aW9uIGlnbm9yZSBpbmNvbXBhdGliaWxpdHkgZHVlIHRvIGFuIGluZmVyZW5jZSB2YXJpYWJsZSwK
LQkJCS8vIGtub3dpbmcgdGhhdCB3ZSB3aWxsIHByb2R1Y2UgY29uc3RyYWludHMgdGhhdCB3aWxs
IGVuc3VyZSBjb21wYXRpYmxlIGluc3RhbnRpYXRpb24gKGlmIG9uZSBleGlzdHMpLgotCQkJcmV0
dXJuIENPTVBBVElCTEU7IAogCQl9CiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CkBAIC00
OTMzLDcgKzQ3NjYsNyBAQAogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGgg
aWRlbnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUs
IG1vc3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlz
IG1vZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4K
IAkgKi8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxF
bmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRp
b24gYWxsb2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0
b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJp
bmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMs
IGZpbmFsIEludm9jYXRpb25TaXRlIGFsbG9jYXRpb25TaXRlKSB7CiAJCQogCQkvLyBhbGxvY2F0
aW9uVHlwZSBpcyB0aGUgZGlhbW9uZCB0eXBlLiBvcmlnaW5hbEVuY2xvc2luZ1R5cGUgaXMgdGhl
IHJlYWwgZW5jbG9zaW5nIHR5cGUgPT0+IG1heSBiZSBwYXJhbWV0ZXJpemVkLCBwYXJhbWV0ZXJp
emVkIHdpdGggb3duIHR5cGUgdmFyaWFibGVzLCByYXcsIGp1c3QgcGxhaW4gdHlwZSBvciBudWxs
LgogCQlpbnQgY2xhc3NUeXBlVmFyaWFibGVzQXJpdHkgPSAwOwpAQCAtNTA2MCw3ICs0ODkzLDcg
QEAKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGluZ1tzZmld
OwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBzZmk7
IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9u
U2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlw
ZXMsIGFsbG9jYXRpb25TaXRlKTsKIAkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsK
IAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQljb21wYXRp
YmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC01MDY5LDEwICs0
OTAyLDYgQEAKIAogCQlpZiAoY29tcGF0aWJsZUluZGV4ID09IDApIHsKIAkJCXJldHVybiBudWxs
OwotCQl9Ci0JCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMSkgewotCQkJLy8gMS44OiBHaXZlIGlu
ZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgot
CQkJY29tcGF0aWJsZVswXSA9IGluZmVySW52b2NhdGlvblR5cGUoYWxsb2NhdGlvblNpdGUsIGNv
bXBhdGlibGVbMF0sIGFyZ3VtZW50VHlwZXMpOwogCQl9CiAJCXJldHVybiBjb21wYXRpYmxlSW5k
ZXggPT0gMSA/IGNvbXBhdGlibGVbMF0gOiBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKGNvbXBh
dGlibGUsIGNvbXBhdGlibGVJbmRleCwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUsIGFs
bG9jYXRpb25UeXBlKTsKIAl9CkBAIC01MTQwLDMxICs0OTY5LDUgQEAKIAkJCQlicmVhazsKIAkJ
CX0KIAkJfQotCX0KLQotCS8qKgotCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGljYWJsZSBtZXRo
b2QsIGNoZWNrIGlmIGl0IGhhcyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3Nv
Y2lhdGVkLgotCSAqIElmIHNvIHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlw
ZSBJbmZlcmVuY2UgYW5kIHJldHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAotCSAqIG90aGVyd2lz
ZSByZXR1cm4gdGhlIGFwcGxpY2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KLQkgKi8KLQlwcm90ZWN0
ZWQgTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRlIGludm9j
YXRpb25TaXRlLCBNZXRob2RCaW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcykgewotCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7
Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7
Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0
ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGlj
YWJsZTsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9uLmdldElu
ZmVyZW5jZUNvbnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ICE9
IG51bGwgJiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZvcihpbnZvY2F0aW9uLmludm9jYXRpb25UYXJn
ZXRUeXBlKCkpKSB7Ci0JCQkJCXJldHVybiBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCX0KLQkJ
CX0gZWxzZSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52
b2NhdGlvbiwgYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcyk7Ci0JCQl9Ci0JCX0gZWxz
ZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0J
CQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykKLQkJCQlhcHBsaWNhYmxlID0gYXBwbGljYWJsZS5zaGFsbG93T3JpZ2luYWwoKTsKLQkJ
CWlmIChhcHBsaWNhYmxlLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFC
TEVTKQotCQkJCXJldHVybiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QoYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywgdGhpcywgaW52b2Nh
dGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKLQkJfQotCQlyZXR1cm4gYXBwbGljYWJsZTsKIAl9
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmph
dmEKaW5kZXggOTM4NDljZC4uMWM0ZDc0NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50
aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhl
dGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTcsMzEgKzE3LDggQEAKICAqLwogcHVi
bGljIGNsYXNzIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIGV4dGVuZHMgTWV0aG9kQmlu
ZGluZyB7CiAKLQlwcml2YXRlIE1ldGhvZEJpbmRpbmcgc3RhdGljRmFjdG9yeUZvcjsKLQlwcml2
YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OwotCXByaXZhdGUgUmVmZXJlbmNlQmlu
ZGluZyBlbmNsb3NpbmdUeXBlOwotCQogCXB1YmxpYyBTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmlu
ZGluZyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQs
IFJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSkgewogCQlzdXBlcihtZXRob2QubW9kaWZp
ZXJzIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYywgVHlwZUNvbnN0YW50cy5TWU5USEVU
SUNfU1RBVElDX0ZBQ1RPUlksCiAJCQkJbnVsbCwgbnVsbCwgbnVsbCwgbWV0aG9kLmRlY2xhcmlu
Z0NsYXNzKTsKLQkJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50OwotCQl0aGlzLnN0YXRp
Y0ZhY3RvcnlGb3IgPSBtZXRob2Q7Ci0JCXRoaXMuZW5jbG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5
cGU7Ci0JfQotCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlwZSBhcmd1bWVudHMgb24gdGhlIChk
ZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3RydWN0b3IgYmVpbmcgcmVwcmVzZW50
ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhv
ZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5
cGVBcmd1bWVudHMpIHsKLQkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRo
aXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUodGhpcy5kZWNsYXJpbmdDbGFz
cywgdHlwZUFyZ3VtZW50cywKLQkJCQkJCQkJCQkJCQkJCQkJCQkJCQl0aGlzLmVuY2xvc2luZ1R5
cGUpOwotCQlmb3IgKE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA6IHBhcmFtZXRl
cml6ZWRUeXBlLm1ldGhvZHMoKSkgewotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2Qub3JpZ2lu
YWwoKSA9PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZykgcGFyYW1ldGVyaXplZE1ldGhvZDsKLQkJCWlmIChwYXJhbWV0ZXJpemVk
TWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQlNZXRob2RCaW5k
aW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpcGFyYW1ldGVyaXplZE1l
dGhvZCkuY2xvc2VzdE1hdGNoOwotCQkJCWlmIChjbG9zZXN0TWF0Y2ggaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZyAmJiBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSA9PSB0aGlz
LnN0YXRpY0ZhY3RvcnlGb3IpCi0JCQkJCXJldHVybiAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcpIGNsb3Nlc3RNYXRjaDsKLQkJCX0KLQkJfQotCQl0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50
RXhjZXB0aW9uKCJUeXBlIGRvZXNuJ3QgaGF2ZSBpdHMgb3duIG1ldGhvZD8iKTsgLy8kTk9OLU5M
Uy0xJAogCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggOTNmYzA4Yy4u
MDE2YTQ5ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTE1MCw3ICsxNTAs
NiBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQ2Fw
dHVyZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5FeHRyYUNvbXBpbGVyTW9kaWZpZXJzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuRmllbGRCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4OwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW52b2NhdGlvblNpdGU7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlh
YmxlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkxvb2t1cEVudmlyb25tZW50OwpAQCAtMzY5Miw3ICszNjkxLDggQEAKIAkJCQlzb3VyY2VT
dGFydCwKIAkJCQlzb3VyY2VFbmQpOwogCQkJcmV0dXJuOwotCQljYXNlIFByb2JsZW1SZWFzb25z
LlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQljYXNlIFByb2JsZW1S
ZWFzb25zLkluZmVycmVkQXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxlOgkKKwkJY2FzZSBQcm9i
bGVtUmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6CiAJCQkvLyBGSVhNRShz
dGVwaGFuKTogY29uc3RydWN0IHN1aXRhYmxlIG1lc3NhZ2UgKGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy80MDQ2NzUpCiAJCQlwcm9ibGVtQ29uc3RydWN0b3IgPSAoUHJvYmxlbU1ldGhvZEJpbmRp
bmcpIHRhcmdldENvbnN0cnVjdG9yOwogCQkJc2hvd25Db25zdHJ1Y3RvciA9IHByb2JsZW1Db25z
dHJ1Y3Rvci5jbG9zZXN0TWF0Y2g7CkBAIC00MjI0LDE2ICs0MjI0LDEzIEBACiAJCQkJKGludCkg
KG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3Nh
Z2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbik7CiAJCQlyZXR1cm47Ci0JCWNhc2UgUHJvYmxlbVJl
YXNvbnMuUGFyYW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW06CisJCWNhc2UgUHJv
YmxlbVJlYXNvbnMuSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCWNhc2Ug
UHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklY
TUUoc3RlcGhhbik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvNDA0Njc1KQogCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGlu
ZykgbWV0aG9kOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9i
bGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4dCAhPSBu
dWxsICYmIGluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJCQkvLyBw
cm9ibGVtIHJlbGF0ZXMgdG8gYSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0aGUgb3V0
ZXIgaGFuZGxlIGl0OgotCQkJCWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFkZFByb2Js
ZW1NZXRob2QocHJvYmxlbU1ldGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hvd25NZXRo
b2QgPSBwcm9ibGVtTWV0aG9kLmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0aG9kLnJl
dHVyblR5cGUgPT0gc2hvd25NZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09NUEFSSVNP
TiQKKwkJCQlyZXR1cm47IC8vIGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVlcGx5IG5l
c3RlZCBjYWxsLCBiZWNhdXNlIHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBjbG9zZXN0
IG1hdGNoIGFuZCB0aGUgb3V0ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50ZXN0QnVn
NDMwMjk2CiAJCQl0aGlzLmhhbmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gsCiAJCQkJ
bmV3IFN0cmluZ1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25p
cHBldFNjb3BlLmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25p
cHBldFNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBA
CiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dApAQCAtMzk2LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJv
YmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkpIHsKLQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUs
IFNjb3BlLkZVTExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0
aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQog
CQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3Rv
ciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RC
aW5kaW5nID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJp
bmRpbmdbXSBjb21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwog
CWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRo
b2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0
aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9k
QmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9k
c1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1l
dGhvZCAhPSBudWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRp
YmxlTWV0aG9kOwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxl
SW5kZXggPT0gMSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZv
cm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25U
eXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJu
IHZpc2libGVbMF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwg
Y29tcGF0aWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247700</attachid>
            <date>2014-10-07 23:02:00 -0400</date>
            <delta_ts>2014-10-12 06:11:12 -0400</delta_ts>
            <desc>Incremental fix to bug 428811</desc>
            <filename>428811.patch</filename>
            <type>text/plain</type>
            <size>4770</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDVmMzYxMDEuLjNjOGFmMDEgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjU0OSw5ICsyNTQ5LDggQEAKICAgICAgICAgICAgICJ9
XG4iCiAgICAgICAgIH0pOwogfQotcHVibGljIHZvaWQgX3Rlc3RCdWc0Mjg4MTEoKSB7Ci0JLy8g
cGVyaGFwcyBmYWlsIGlzIHRoZSBjb3JyZWN0IGFuc3dlcj8gRklYTUU6IHZhbGlkYXRlIQotCXJ1
bk5lZ2F0aXZlVGVzdCgKK3B1YmxpYyB2b2lkIHRlc3RCdWc0Mjg4MTEoKSB7CisJcnVuQ29uZm9y
bVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiTW9yZUNvbGxlY3RvcnMuamF2YSIsCiAJCQki
aW1wb3J0IGphdmEudXRpbC5BYnN0cmFjdExpc3Q7XG4iICsgCkBAIC0yNTk4LDE4ICsyNTk3LDcg
QEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAK
LQkJIjEuIEVSUk9SIGluIE1vcmVDb2xsZWN0b3JzLmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCi0J
CSIJcmV0dXJuIENvbGxlY3Rvci5vZihBcnJheUxpc3Q8VD46Om5ldyxcbiIgKyAKLQkJIgkgICAg
ICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIG9mKEFycmF5TGlzdDxUPjo6bmV3
LCBMaXN0PFQ+OjphZGQsICg8bm8gdHlwZT4gbGVmdCwgPG5vIHR5cGU+IHJpZ2h0KSAtPiB7fSIg
KyAKLQkJIiwgSW1tdXRhYmxlTGlzdDo6Y29weU9mKSBpcyB1bmRlZmluZWQgZm9yIHRoZSB0eXBl
IENvbGxlY3RvclxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gV0FSTklORyBpbiBN
b3JlQ29sbGVjdG9ycy5qYXZhIChhdCBsaW5lIDIzKVxuIiArIAotCQkiCXB1YmxpYyBzdGF0aWMg
PFQ+IEltbXV0YWJsZUxpc3Q8VD4gY29weU9mIChDb2xsZWN0aW9uPFQ+IGMpIHtcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXlxuIiArIAotCQkiVGhlIG1ldGhvZCBjb3B5T2YoQ29sbGVjdGlvbjxUPikgZnJvbSB0aGUg
dHlwZSBNb3JlQ29sbGVjdG9ycy5JbW11dGFibGVMaXN0PFQ+IGlzIG5ldmVyIHVzZWQgbG9jYWxs
eVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSJbYSwgYiwgY10iKTsKIH0KIC8vIGFsbCBl
eGNlcHRpb25zIGNhbiBiZSBpbmZlcnJlZCB0byBtYXRjaAogcHVibGljIHZvaWQgdGVzdEJ1ZzQy
OTQzMCgpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25G
b3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5q
YXZhCmluZGV4IGYyNjI2NTMuLmMyMWExMWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29u
c3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJh
aW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtMjY3LDcgKzI2Nyw3IEBACiAJCQlUeXBlQmlu
ZGluZyBjb21waWxlVHlwZVJldHVybiA9IG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSA/IG9yaWdp
bmFsLmRlY2xhcmluZ0NsYXNzIDogb3JpZ2luYWwucmV0dXJuVHlwZTsKIAkJCWlmIChyZWZlcmVu
Y2UudHlwZUFyZ3VtZW50cyA9PSBudWxsCiAJCQkJCSYmICgob3JpZ2luYWwudHlwZVZhcmlhYmxl
cygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgY29tcGlsZVR5cGVSZXR1cm4ubWVu
dGlvbnNBbnkob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCAtMSkpCi0JCQkJCQl8fCAob3JpZ2lu
YWwuaXNDb25zdHJ1Y3RvcigpICYmIG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNzLnR5cGVWYXJpYWJs
ZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSkpCisJCQkJCQl8fCAob3JpZ2luYWwu
aXNDb25zdHJ1Y3RvcigpICYmIGNvbXBpbGVUaW1lRGVjbC5kZWNsYXJpbmdDbGFzcy5pc1Jhd1R5
cGUoKSkpKQogCQkJCQkJCS8vIG5vdCBjaGVja2luZyByLm1lbnRpb25zQW55IGZvciBjb25zdHJ1
Y3RvcnMsIGJlY2F1c2UgQTo6bmV3IHJlc29sdmVzIHRvIHRoZSByYXcgdHlwZQogCQkJCQkJCS8v
IHdoZXJlYXMgaW4gZmFjdCB0aGUgdHlwZSBvZiBhbGwgZXhwcmVzc2lvbnMgb2YgdGhpcyBzaGFw
ZSBkZXBlbmRzIG9uIHRoZWlyIHR5cGUgdmFyaWFibGUgKGlmIGFueSkKIAkJCXsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpp
bmRleCA4NWVhMzVhLi44MGMyNzA0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC00MjMxLDkgKzQyMzEsMzAgQEAK
IAlwcm90ZWN0ZWQgZmluYWwgTWV0aG9kQmluZGluZyBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5n
KE1ldGhvZEJpbmRpbmdbXSB2aXNpYmxlLCBpbnQgdmlzaWJsZVNpemUsIFR5cGVCaW5kaW5nW10g
YXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIFJlZmVy
ZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CiAKIAkJYm9vbGVhbiBpc0pkazE4ID0gY29tcGls
ZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfODsKKwkJ
Ly8gY29tbW9uIHBhcnQgZm9yIGFsbCBjb21wbGlhbmNlIGxldmVsczoKIAkJaW50W10gY29tcGF0
aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbdmlzaWJsZVNpemVdOworCQlpbnQgY29tcGF0aWJsZUNv
dW50ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKQotCQkJY29t
cGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxl
W2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKSkgIT0g
Tk9UX0NPTVBBVElCTEUpIHsKKwkJCQlpZiAoaSAhPSBjb21wYXRpYmxlQ291bnQpIHsKKwkJCQkJ
dmlzaWJsZVtjb21wYXRpYmxlQ291bnRdID0gdmlzaWJsZVtpXTsKKwkJCQkJY29tcGF0aWJpbGl0
eUxldmVsc1tjb21wYXRpYmxlQ291bnRdID0gY29tcGF0aWJpbGl0eUxldmVsc1tpXTsKKwkJCQl9
CisJCQkJY29tcGF0aWJsZUNvdW50Kys7CisJCQl9CisJCQorCQlpZiAoY29tcGF0aWJsZUNvdW50
ID09IDApIHsKKwkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXS5z
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOworCQl9IGVs
c2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7CisJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0
ZSA9IHZpc2libGVbMF07CisJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCisJCQkJY29tcGlsYXRp
b25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0
aW9ucyk7CisJCQlyZXR1cm4gY2FuZGlkYXRlOworCQl9CisJCWlmIChjb21wYXRpYmxlQ291bnQg
IT0gdmlzaWJsZVNpemUpIHsKKwkJCVN5c3RlbS5hcnJheWNvcHkodmlzaWJsZSwgMCwgdmlzaWJs
ZSA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2libGVTaXplID0gY29tcGF0aWJsZUNvdW50XSwgMCwg
Y29tcGF0aWJsZUNvdW50KTsKKwkJCVN5c3RlbS5hcnJheWNvcHkoY29tcGF0aWJpbGl0eUxldmVs
cywgMCwgY29tcGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbY29tcGF0aWJsZUNvdW50XSwgMCwg
Y29tcGF0aWJsZUNvdW50KTsKKwkJfQogCQkKIAkJCiAJCU1ldGhvZEJpbmRpbmdbXSBtb3JlU3Bl
Y2lmaWMgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZV07
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>247764</attachid>
            <date>2014-10-09 14:04:00 -0400</date>
            <delta_ts>2014-10-09 23:53:18 -0400</delta_ts>
            <desc>Incremental fix to bug 444891 (specification amendment)</desc>
            <filename>specfix.patch</filename>
            <type>application/octet-stream</type>
            <size>30837</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDNjOGFmMDEuLjM1MWU3NzggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzAyOCw5ICszMDI4LDcgQEAKIAkJCSJ9XG4ifSk7CiB9
CiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDMzMTU4KCkgewotICB0cnkgewotCXRoaXMuc2hvdWxkU3dh
bGxvd0NhcHR1cmVJZCA9IHRydWU7IC8vIHRoaXMgdGVzdCBleGhpYml0cyBzb21lIG5vbi1kZXRl
cm1pbmlzbSBpbiBjYXB0dXJlIGlkcy4ganVzdCBjb21wYXJlIGlnbm9yaW5nIGlkLCBidXQgZXN0
YWJsaXNoaW5nIHByZXNlbmNlIG9mIGNhcHR1cmUuCi0JcnVuTmVnYXRpdmVUZXN0KAorICBydW5O
ZWdhdGl2ZVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiQ29sbGVjdG9yc01hcHMuamF2YSIs
CiAJCQkiXG4iICsgCkBAIC0zMDU3LDE1ICszMDU1LDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIENvbGxlY3RvcnNN
YXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCi0JCSIJcCAtPiBwLmxocy5zdHJlYW0oKS5tYXAo
cDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29sbGVjdChD
b2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUgU3RyZWFtPE9iamVjdD4g
aXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxlY3RvcjxDb2xsZWN0b3Jz
TWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8U3RyaW5nLExpc3Q8U3Ry
aW5nPj4+KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7Ci0gIH0gZmluYWxseSB7Ci0JdGhpcy5z
aG91bGRTd2FsbG93Q2FwdHVyZUlkID0gZmFsc2U7CQotICB9CisJCSIiKTsKIH0KIHB1YmxpYyB2
b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAtMzM0NywxMCArMzMz
NywxMCBAQAogCQkJIn1cbiIKIAkJfSwKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDIyKVxuIiArIAotCQkiCSkuY29s
bGVjdChncm91cGluZ0J5KTtcbiIgKyAKLQkJIgkgIF5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRo
b2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUgU3Ry
ZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxlY3Rv
cjxNYXAuRW50cnk8U3RyaW5nLFN0cmluZz4sY2FwdHVyZSMxLW9mID8sTWFwPFN0cmluZyxMaXN0
PFN0cmluZz4+PilcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gRXh0cmFjdExvY2FsTGFtYmRhLmph
dmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0
aW9uO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAK
KwkJIlRoZSBpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uIGlzIG5ldmVyIHVzZWRc
biIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTc2Nygp
IHsKQEAgLTQ0MTIsNCArNDQwMiwxOTkgQEAKIAkJCSJ9XG4iCiAJCX0pOwogfQorLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzOTU5NCAgWzEuOF1bY29t
cGlsZXJdIG5lc3RlZCBsYW1iZGEgdHlwZSBpbmNvcnJlY3RseSBpbmZlcnJlZCB2cyBqYXZhYwor
cHVibGljIHZvaWQgX3Rlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxp
c3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5j
dGlvbi5QcmVkaWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0
b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgaW50ZXJmYWNlIElM
aXN0RW50cnkge1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRSZWNvcmRzV2l0aFJlc3Vs
dChGdW5jdGlvbjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiArCisJCQkiCX1cbiIgKwor
CQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJsZVJlY29yZCB7XG4iICsK
KwkJCSIJCXB1YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsgfVxuIiArCisJCQkiCX1c
biIgKworCQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJlY29yZCB7fVxuIiArCisJ
CQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoRWNsaXBzZUFuZEph
dmFjKCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJl
c3VsdCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAt
PiB7XG4iICsKKwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNvcmQ+IHJlc3VsdDEgPSBl
bnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJ
IgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJ
bW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9y
cy50b0xpc3QoKSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJCXJldHVybiByZXN1
bHQxO1xuIiArCisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29s
bGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7
CQlcbiIgKworCQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+
IGNvbXBpbGVzV2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJ
CSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQki
CQkJcmV0dXJuIHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJIgkJCQlyZXR1cm4gZW50
cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJ
CQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1t
dXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMu
dG9MaXN0KCkgKVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExp
c3Q6OnN0cmVhbSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6
Om5ldyApICk7XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVi
bGljIExpc3Q8SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2Uy
KCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3Vs
dCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBl
bnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJ
IgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJ
bW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9y
cy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29s
bGVjdCggQ29sbGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKwor
CQkJIgkJfSk7CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJs
ZVJlY29yZD4gY29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygpIFxuIiArCisJCQkiCXtc
biIgKworCQkJIgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiBzdHJl
YW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+
IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsK
KwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQku
Y29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSlcbiIgKworCQkJ
IgkJCS5mbGF0TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJLmNvbGxlY3QoIENvbGxl
Y3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIgKworCQkJIgkJKTsJCVxu
IiArCisJCQkiCX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJlZGljYXRlPFJlY29yZD4g
c29tZVByZWRpY2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29yZCAtPiB0cnVlO1xuIiAr
CisJCQkiCX0JCVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRFbnRyaWVzV2l0aFJlc3Vs
dChGdW5jdGlvbjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xuIiArCisJCQkiCQlyZXR1
cm4gZnVuYy5hcHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5PigpLnN0cmVhbSgpICk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQorLy9odHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzODUyLCBbMS44XVtjb21waWxlcl0g
SmF2YWMgcmVqZWN0cyB0eXBlIGluZmVyZW5jZSByZXN1bHRzIHRoYXQgRUNKIGFjY2VwdHMKK3B1
YmxpYyB2b2lkIHRlc3Q0MzM4NTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5PcHRpb25hbDtc
biIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiAr
CisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4odGVzdChTdHJlYW0ub2YoU3RyZWFtLm9mKFwiM1wi
KSkpKTtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QyKFN0cmVhbS5vZihTdHJl
YW0ub2YoXCIxXCIpKS5za2lwKDEpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0
ZXN0MzEoU3RyZWFtLm9mKFN0cmVhbS5vZihcIjJcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJc3RhdGljIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PiB0ZXN0KFN0cmVhbTxT
dHJlYW08U3RyaW5nPj4gczMxKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMzEubWFwKHMyIC0+IHMy
Lm1hcChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJc3RhdGljIE9iamVjdCB0ZXN0MihTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMz
KSB7XG4iICsKKwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIu
cGFyc2VJbnQoczEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JF
bHNlKFxuIiArCisJCQkiCQkgIFguY2xhc3MpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0
aWMgU3RyZWFtPE9iamVjdD4gdGVzdDMxKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMpIHtcbiIg
KworCQkJIgkJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUlu
dChzMSkpKS5maW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKwor
CQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCisJIglyZXR1cm4gczMxLm1hcChzMiAtPiBz
Mi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55KCk7XG4iICsgCisJIgkg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5cbiIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPcHRp
b25hbDxTdHJlYW08SW50ZWdlcj4+IHRvIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PlxuIiArIAor
CSItLS0tLS0tLS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIg
KyAKKwkiCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiAr
IAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAK
KwkiVGhlIG1ldGhvZCBvckVsc2UoSW50ZWdlcikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8SW50ZWdl
cj4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPFg+KVxuIiArIAor
CSItLS0tLS0tLS0tXG4iICsgCisJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIg
KyAKKwkiCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmluZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9iamVjdCgpKSk7XG4iICsgCisJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1ldGhvZCBvckVsc2UoU3RyZWFtPEludGVn
ZXI+KSBpbiB0aGUgdHlwZSBPcHRpb25hbDxTdHJlYW08SW50ZWdlcj4+IGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzIChTdHJlYW08T2JqZWN0PilcbiIgKyAKKwkiLS0tLS0tLS0t
LVxuIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQyOTE2LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBlIEluZmVyZW5jZSBpcyBicm9rZW4gZm9y
IENvbXBsZXRhYmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2
KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZh
IiwKKwkJCSJpbXBvcnQgc3RhdGljIGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0
dXJlLmNvbXBsZXRlZEZ1dHVyZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xu
IiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgQ29t
cGxldGFibGVGdXR1cmU8SW50ZWdlcj4gY2YoaW50IHZhbHVlKSB7XG4iICsKKwkJCSIJCXJldHVy
biBjb21wbGV0ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCWNmKDEp
LnRoZW5Db21wb3NlKCh4SW50KSAtPiBjZigyKS50aGVuQXBwbHkoKHpJbnQpIC0+IEFycmF5cy5h
c0xpc3QoeEludCwgekludCkpKVxuIiArCisJCQkiCQkudGhlbkFjY2VwdCgoaW50cykgLT4ge1xu
IiArCisJCQkiCQkJLyogISEhISBpbnRzIGlzIGluY29ycmVjdGx5IGluZmVycmVkIHRvIGJlIGFu
IE9iamVjdCwgYnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4gKi9cbiIgKworCQkJIgkJCVN5c3RlbS5v
dXQucHJpbnRsbihpbnRzLmdldCgwKSArIGludHMuZ2V0KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7
XG4iICsKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIjMi
KTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
NDI3NjksIFsxLjhdW2NvbXBpbGVyXSBJbnZhbGlkIHR5cGUgaW5mZXJlbmNlIHVzaW5nIFN0cmVh
bSAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyNzY5KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5Q
YXRoO1xuIiArCisJCQkiaW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHM7XG4iICsKKwkJCSJpbXBv
cnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtc
biIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0
aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4iICsKKwkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51
dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0u
U3RyZWFtO1xuIiArCisJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJTWFwPE9iamVjdCwgSW50ZWdlcj4gYWxsb2NhdGVkID0g
bmV3IEhhc2hNYXA8PigpO1xuIiArCisJCQkiCQkgICBBcnJheXMuYXNMaXN0KFwiYVwiLCBcImJc
IiwgXCJjXCIsIFwiZFwiLCBcImVcIikgLy8gTGlzdDxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAg
ICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08U3RyaW5nPlxuIiArCisJCQkiCSAgICAgICAgICAubWFw
KFBhdGhzOjpnZXQpIC8vIFN0cmVhbTxQYXRoPlxuIiArCisJCQkiCSAgICAgICAgICAuZmxhdE1h
cChwYXRoIC0+IGFsbG9jYXRlZC5rZXlTZXQoKSAvLyBTZXQ8T2JqZWN0PlxuIiArCisJCQkiCSAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08T2Jq
ZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAo
Z3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVjdCxQYXRoPiovKSAvLyBT
dHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICApIC8vIFN0cmVh
bTxPYmplY3Q+IFtGQUlMXVxuIiArCisJCQkiCSAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3Jz
LnRvTGlzdCgpKSAvLyBMaXN0PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgLmZvckVhY2go
aXRlbSAtPiBTeXN0ZW0ub3V0LnByaW50bG4oaXRlbS5nZXRLZXkoKSArIFwiOiBcIiArIGl0ZW0u
Z2V0VmFsdWUoKSkpOyAvLyBDb25zdW1lcjw/IHN1cGVyIE9iamVjdD5cbiIgKworCQkJIgkgICAg
Ly8gd2l0aCBleHBsaWNpdCB0eXBlXG4iICsKKwkJCSIJICAgIEFycmF5cy5hc0xpc3QoXCJhXCIs
IFwiYlwiLCBcImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkg
ICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAg
IC5tYXAoUGF0aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5m
bGF0TWFwKHBhdGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVh
bTxPYmplY3Q+XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
LjxQYWlyPE9iamVjdCxQYXRoPj5tYXAoZ3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQ
YWlyPE9iamVjdCxQYXRoPiovKSAvLyBTdHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJ
CQkiCSAgICAgICAgICApIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJ
ICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpIC8vIExpc3Q8UGFpcjxPYmpl
Y3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChpdGVtIC0+IFN5c3RlbS5v
dXQucHJpbnRsbihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5nZXRWYWx1ZSgpKSk7IC8v
IENvbnN1bWVyPD8gc3VwZXIgUGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCX1cbiIgKwor
CQkJIn1cbiIgKworCQkJImFic3RyYWN0IGNsYXNzIFBhaXI8TCwgUj4gaW1wbGVtZW50cyBNYXAu
RW50cnk8TCwgUj4sIENvbXBhcmFibGU8UGFpcjxMLCBSPj4sIFNlcmlhbGl6YWJsZSB7XG4iICsK
KwkJCSIgICAgcHVibGljIHN0YXRpYyA8TCwgUj4gUGFpcjxMLCBSPiBvZihmaW5hbCBMIGxlZnQs
IGZpbmFsIFIgcmlnaHQpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJ
CSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBmaW5hbCBMIGdldEtleSgpIHtcbiIgKworCQkJ
IiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1Ymxp
YyBSIGdldFZhbHVlKCkge1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJ
IiAgICB9XG4iICsKKwkJCSJ9XG4iCisJCX0sCisJCSIiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
aW5kZXggOGQyZGZjYS4uMWViMTQwYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTQxNjMsNyArNDE2
Myw3IEBACiAJCSJPSyIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQzMjY4MiwgWzEuOF1bY29tcGlsZXJdIFR5cGUgbWlzbWF0Y2ggZXJyb3Ig
d2l0aCBsYW1iZGEgZXhwcmVzc2lvbgotcHVibGljIHZvaWQgX3Rlc3Q0MzI2ODIoKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKK3B1YmxpYyB2b2lkIHRlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
IAl0aGlzLnJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBA
IC00MTgxLDcgKzQxODEsNyBAQAogCQkJIgl9XG4iICsKIAkJCSJ9XG4iCiAJCX0sCi0JCSJPSyIp
OworCQkidHJ1ZSIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzMjUyMCwgY29tcGlsZXIgImR1cGxpY2F0ZSBtZXRob2QiIGJ1ZyB3aXRoIGxh
bWRhcyBhbmQgZ2VuZXJpYyBpbnRlcmZhY2VzIAogcHVibGljIHZvaWQgdGVzdDQzMjUyMCgpIHRo
cm93cyBFeGNlcHRpb24gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggMjI3
ZDVlNi4uZjMwZWJlMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05NjQy
LDcgKzk2NDIsNyBAQAogCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDI0NDYsIFsxLjhdW2NvbXBpbGVyXSBjb21w
aWxlciB1bmFibGUgdG8gaW5mZXIgbGFtYmRhJ3MgZ2VuZXJpYyBhcmd1bWVudCB0eXBlcwotcHVi
bGljIHZvaWQgX3Rlc3Q0NDI0NDYoKSB7CitwdWJsaWMgdm9pZCB0ZXN0NDQyNDQ2KCkgewogCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsIApkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDkzNjVhMTIuLjI5M2JhNGUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTUyOSw3ICs1MjksNyBAQAogCiAvLyBG
b3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94aW5nIGNvbXBhdGliaWxpdHkgaXMgc2FtZSBh
cyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNlIGphdmEubGFuZydzIHdyYXBwZXIgdHlwZXMg
YXJlIG5vdCBnZW5lcmljLgogcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChU
eXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXJldHVybiBpc0NvbXBhdGli
bGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwlyZXR1cm4gaXNQb2x5RXhwcmVzc2lvbigpID8g
ZmFsc2UgOiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKIH0KIAogcHVibGlj
IGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBmaW5hbCBT
Y29wZSBzY29wZSkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IDBhN2Ji
N2EuLjk5MTE3MTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24u
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTc0LDkg
Kzc0LDggQEAKIAkJc3VwZXIoKTsKIAl9CiAJCi0JLy8gZm9yIGxhbWJkYSdzIGFuZCByZWZlcmVu
Y2UgZXhwcmVzc2lvbnMgYm94aW5nIGNvbXBhdGliaWxpdHkgaXMgc2FtZSBhcyB2YW5pbGxhIGNv
bXBhdGliaWxpdHkuCiAJcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBl
QmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQlyZXR1cm4gaXNDb21wYXRpYmxl
V2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJCXJldHVybiBmYWxzZTsKIAl9CiAJCiAJcHVibGlj
IHZvaWQgc2V0Q29tcGlsYXRpb25SZXN1bHQoQ29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRpb25S
ZXN1bHQpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggMTMzZmNhZC4uZDYzZTUzYSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTQxLDYgKzQxLDcgQEAKIGltcG9ydCBzdGF0
aWMgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4
dC5JTlZPQ0FUSU9OX0NPTlRFWFQ7CiAKIGltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7Citp
bXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBv
cnQgamF2YS51dGlsLkxpbmtlZEhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLlNldDsKQEAgLTIz
OCw2ICsyMzksNyBAQAogCQkJCXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRz
W2ldLnR5cGUucmVzb2x2ZVR5cGUoYmxvY2tTY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7
CiAJCX0KIAkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9u
Q29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQpIHsKKwkJCXRoaXMucmVzb2x2ZWRDb3BpZXMg
PSBuZXcgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4oKTsKIAkJCXJldHVy
biBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwogCQl9IAogCQkKQEAgLTM5Nyw2ICszOTksNyBA
QAogCQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewogCQkJRXhwcmVzc2lv
biBleHByZXNzaW9uID0gKEV4cHJlc3Npb24pIHRoaXMuYm9keTsKIAkJCW5ldyBSZXR1cm5TdGF0
ZW1lbnQoZXhwcmVzc2lvbiwgZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwgZXhwcmVzc2lvbi5zb3Vy
Y2VFbmQsIHRydWUpLnJlc29sdmUodGhpcy5zY29wZSk7IC8vIDotKSA7LSkKKwkJCXRoaXMudm9p
ZENvbXBhdGlibGUgPSB0aGlzLm9yaWdpbmFsLnZvaWRDb21wYXRpYmxlID0gZXhwcmVzc2lvbi5z
dGF0ZW1lbnRFeHByZXNzaW9uKCk7CiAJCX0gZWxzZSB7CiAJCQl0aGlzLmJvZHkucmVzb2x2ZSh0
aGlzLnNjb3BlKTsKIAkJfQpAQCAtNzEwLDcgKzcxMyw2IEBACiAJCWlmICghKGxlZnQgaW5zdGFu
Y2VvZiBSZWZlcmVuY2VCaW5kaW5nKSkKIAkJCXJldHVybiBmYWxzZTsKIAotCQlsZWZ0ID0gbGVm
dC51bmNhcHR1cmUodGhpcy5lbmNsb3NpbmdTY29wZSk7CiAJCXNoYXBlQW5hbHlzaXM6IGlmICgh
dGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUpIHsKIAkJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9s
ZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJy
b3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKIAkJCWZpbmFsIENv
bXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBp
bGVyT3B0aW9ucygpOwpAQCAtODEzLDYgKzgxNSw4IEBACiAJCXJldHVybiB0cnVlOwogCX0KIAor
CXByaXZhdGUgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4gcmVzb2x2ZWRD
b3BpZXM7CisJCiAJLyoqCiAJICogR2V0IGEgcmVzb2x2ZWQgY29weSBvZiB0aGlzIGxhbWJkYSBm
b3IgdXNlIGJ5IHR5cGUgaW5mZXJlbmNlLCBhcyB0byBhdm9pZCBzcGlsbGluZyBhbnkgcHJlbWF0
dXJlCiAJICogdHlwZSByZXN1bHRzIGludG8gdGhlIG9yaWdpbmFsIGxhbWJkYS4KQEAgLTgyMSwx
MiArODI1LDIxIEBACiAJICogQHJldHVybiBhIHJlc29sdmVkIGNvcHkgb2YgJ3RoaXMnIG9yIG51
bGwgaWYgc2lnbmlmaWNhbnQgZXJyb3JzIHdoZXJlIGVuY291bnRlcmVkCiAJICovCiAJcHVibGlj
IExhbWJkYUV4cHJlc3Npb24gZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSB0aGlz
LnJlc29sdmVkQ29waWVzLmdldCh0YXJnZXRUeXBlKTsKKwkJaWYgKGxhbWJkYSA9PSBudWxsKSB7
CisJCQlsYW1iZGEgPSBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdl
dFR5cGUpOworCQkJaWYgKGxhbWJkYSAhPSBudWxsKSB7CisJCQkJdGhpcy5yZXNvbHZlZENvcGll
cy5wdXQodGFyZ2V0VHlwZSwgbGFtYmRhKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGFtYmRhOwor
CX0KKwkKKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVu
Y2VUYXJnZXRpbmcwKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKIAkJLy8gbm90ZTogdGhpcyBp
cyBlc3NlbnRpYWxseSBhIHNpbXBsaWZpZWQgZXh0cmFjdCBmcm9tIGlzQ29tcGF0aWJsZVdpdGgo
VHlwZUJpbmRpbmcsU2NvcGUpLgogCQlpZiAodGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgJiYg
dGhpcy5iaW5kaW5nICE9IG51bGwpCiAJCQlyZXR1cm4gdGhpczsKIAkJCi0JCXRhcmdldFR5cGUg
PSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJLy8gVE9ETzog
Y2FjaGluZwogCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xvc2lu
Z1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2lsZW50
RXJyb3JIYW5kbGluZ1BvbGljeSk7CiAJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCQlib29sZWFu
IGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlz
aXNFbmFibGVkOwpAQCAtOTQ4LDYgKzk2MSw3IEBACiAKIAkJaWYgKGNvcHkgIT0gbnVsbCkgeyAv
LyA9PT4gc3ludGF4IGVycm9ycyA9PSBudWxsCiAJCQljb3B5Lm9yaWdpbmFsID0gdGhpczsKKwkJ
CWNvcHkuZW5jbG9zaW5nU2NvcGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlOwogCQl9CiAJCXJldHVy
biBjb3B5OwogCX0KQEAgLTk1Niw3ICs5NzAsNyBAQAogCQlpZiAodGhpcy5vcmlnaW5hbCA9PSB0
aGlzKSAvLyBub3QgaW4gb3ZlcmxvYWQgcmVzb2x1dGlvbiBjb250ZXh0LgogCQkJcmV0dXJuOwog
CQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJdGhpcy5vcmlnaW5h
bC52YWx1ZUNvbXBhdGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCAh
PSBUeXBlSWRzLlRfdm9pZDsKKwkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVz
dWx0VHlwZSAhPSBudWxsICYmIHJlc3VsdFR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQgPyBmYWxz
ZSA6IHRydWU7CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zID0gbmV3IEV4cHJl
c3Npb25bMV07CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zWzBdID0gZXhwcmVz
c2lvbjsKIAkJCXJldHVybjsgLy8gdm9pZCBjb21wYXRpYmlsaXR5IGRldGVybWluZWQgdmlhIHN0
YXRlbWVudEV4cHJlc3Npb24oKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDg4OWFkOTcuLjdkMWUxZDYg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKQEAgLTk2Miw2ICs5NjIsOCBAQAogcHVibGljIGJvb2xlYW4gaXNC
b3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkg
ewogCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgfHwgdGhpcy5iaW5kaW5nID09IG51bGwg
fHwgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpIHx8IHRhcmdldFR5cGUgPT0gbnVsbCB8
fCBzY29wZSA9PSBudWxsKQogCQlyZXR1cm4gZmFsc2U7CisJaWYgKGlzUG9seUV4cHJlc3Npb24o
KSAmJiAhdGFyZ2V0VHlwZS5pc1ByaW1pdGl2ZU9yQm94ZWRQcmltaXRpdmVUeXBlKCkpIC8vIGku
ZSBpdCBpcyBkdW1iIHRvIHRyaWdnZXIgaW5mZXJlbmNlLCBjaGVja2luZyBib3hpbmcgY29tcGF0
aWJpbGl0eSBhZ2FpbnN0IHNheSBDb2xsZWN0b3I8PyBzdXBlciBULCBBLCBSPi4KKwkJcmV0dXJu
IGZhbHNlOwogCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBlID0gdGhpcy5leHBlY3Rl
ZFR5cGU7CiAJdHJ5IHsKIAkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBlOwpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggYzIxYTEx
Yi4uMWVlNTViNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lv
bkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9y
bXVsYS5qYXZhCkBAIC0xNyw3ICsxNyw2IEBACiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiBpbXBv
cnQgamF2YS51dGlsLlNldDsKIAotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5BU1RWaXNpdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwpAQCAtMjUsOCArMjQsNiBAQAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlvbjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZWZlcmVuY2VFeHBy
ZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUmV0
dXJuU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuU3RhdGVtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuSW5mZXJlbmNlQ29udGV4dDE4LlN1c3BlbmRlZEluZmVyZW5jZVJlY29yZDsKIAogLyoq
CkBAIC05Miw2ICs4OSwxMCBAQAogCQkJCQkJCQlyZXR1cm4gRkFMU0U7CiAJCQkJCQkJcmV0dXJu
IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBB
VElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQkJCX0KKwkJCQkJCWlmIChpbm5lckN0eC5zdGVwQ29t
cGxldGVkID49IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7CisJCQkJCQkJLy8g
VGhlIGNvbnN0cmFpbnRzIGFuZCBpbml0aWFsIGJvdW5kcyB0aGF0IHdvdWxkIGVmZmVjdGl2ZWx5
IHJlZHVjZSB0byBiMyBhcmUgYWxyZWFkeSB0cmFuc2ZlcnJlZCB0byBjdXJyZW50IGNvbnRleHQg
ZHVyaW5nIEMgU2V0IGNvbnN0cnVjdGlvbi4KKwkJCQkJCQlyZXR1cm4gVFJVRTsKKwkJCQkJCX0K
IAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5j
ZUtpbmQ7CiAJCQkJCX0KIAkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBtZXRob2QuaXNDb25zdHJ1
Y3RvcigpICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKG1ldGhvZCk7CkBAIC0xNTIsMTMg
KzE1Myw4IEBACiAJCQkJfQogCQkJCWlmIChmdW5jdGlvblR5cGUucmV0dXJuVHlwZSAhPSBUeXBl
QmluZGluZy5WT0lEKSB7CiAJCQkJCVR5cGVCaW5kaW5nIHIgPSBmdW5jdGlvblR5cGUucmV0dXJu
VHlwZTsKLQkJCQkJRXhwcmVzc2lvbltdIGV4cHJzOwotCQkJCQlpZiAobGFtYmRhLmJvZHkoKSBp
bnN0YW5jZW9mIEV4cHJlc3Npb24pIHsKLQkJCQkJCWV4cHJzID0gbmV3IEV4cHJlc3Npb25bXSB7
KEV4cHJlc3Npb24pbGFtYmRhLmJvZHkoKX07Ci0JCQkJCX0gZWxzZSB7Ci0JCQkJCQlleHBycyA9
IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOwotCQkJCQl9Ci0JCQkJCWZvciAoaW50IGkgPSAw
OyBpIDwgZXhwcnMubGVuZ3RoOyBpKyspIHsKKwkJCQkJRXhwcmVzc2lvbltdIGV4cHJzID0gbGFt
YmRhLnJlc3VsdEV4cHJlc3Npb25zKCk7CisJCQkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBl
eHBycyA9PSBudWxsID8gMCA6IGV4cHJzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQkJ
CQlFeHByZXNzaW9uIGV4cHIgPSBleHByc1tpXTsKIAkJCQkJCWlmIChyLmlzUHJvcGVyVHlwZSh0
cnVlKSAmJiBleHByLnJlc29sdmVkVHlwZSAhPSBudWxsKSB7CiAJCQkJCQkJVHlwZUJpbmRpbmcg
ZXhwclR5cGUgPSBleHByLnJlc29sdmVkVHlwZTsKQEAgLTE4MSw3ICsxNzcsNyBAQAogCQlyZXR1
cm4gRkFMU0U7CiAJfQogCi0JcHVibGljIFJlZmVyZW5jZUJpbmRpbmcgZmluZEdyb3VuZFRhcmdl
dFR5cGUoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQsIEJsb2NrU2NvcGUgc2Nv
cGUsCisJcHVibGljIHN0YXRpYyBSZWZlcmVuY2VCaW5kaW5nIGZpbmRHcm91bmRUYXJnZXRUeXBl
KEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0LCBCbG9ja1Njb3BlIHNjb3BlLAog
CQkJCQkJCQkJCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhLCBQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZVdpdGhXaWxkQ2FyZHMpCiAJewogCQlpZiAobGFtYmRhLmFyZ3VtZW50
c1R5cGVFbGlkZWQoKSkgewpAQCAtNDA2LDE3ICs0MDIsOSBAQAogCQkJCQkvLyBpaSkKIAkJCQkJ
ZmluYWwgVHlwZUJpbmRpbmcgciA9IHNhbS5yZXR1cm5UeXBlOwogCQkJCQlMYW1iZGFFeHByZXNz
aW9uIHJlc29sdmVkID0gbGFtYmRhLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGlu
Zyh0aGlzLnJpZ2h0KTsKLQkJCQkJU3RhdGVtZW50IGJvZHkgPSByZXNvbHZlZCAhPSBudWxsID8g
cmVzb2x2ZWQuYm9keSgpIDogbGFtYmRhLmJvZHkoKTsKLQkJCQkJaWYgKGJvZHkgaW5zdGFuY2Vv
ZiBFeHByZXNzaW9uKSB7Ci0JCQkJCQl2YXJpYWJsZXMuYWRkQWxsKG5ldyBDb25zdHJhaW50RXhw
cmVzc2lvbkZvcm11bGEoKEV4cHJlc3Npb24pIGJvZHksIHIsIENPTVBBVElCTEUpLmlucHV0VmFy
aWFibGVzKGNvbnRleHQpKTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCS8vIFRPRE86IHNob3VsZCBJ
IHVzZSBMYW1iZGFFeHByZXNzaW9uLnJlc3VsdEV4cHJlc3Npb25zPyAoaXMgY3VycmVudGx5IHBy
aXZhdGUpLgotCQkJCQkJYm9keS50cmF2ZXJzZShuZXcgQVNUVmlzaXRvcigpIHsKLQkJCQkJCQlw
dWJsaWMgYm9vbGVhbiB2aXNpdChSZXR1cm5TdGF0ZW1lbnQgcmV0dXJuU3RhdGVtZW50LCBCbG9j
a1Njb3BlIHNjb3BlKSB7Ci0JCQkJCQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRF
eHByZXNzaW9uRm9ybXVsYShyZXR1cm5TdGF0ZW1lbnQuZXhwcmVzc2lvbiwgciwgQ09NUEFUSUJM
RSkuaW5wdXRWYXJpYWJsZXMoY29udGV4dCkpOwotCQkJCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJ
CQkJfQotCQkJCQkJfSwgKEJsb2NrU2NvcGUpbnVsbCk7CisJCQkJCUV4cHJlc3Npb25bXSByZXN1
bHRFeHByZXNzaW9ucyA9IHJlc29sdmVkICE9IG51bGwgPyByZXNvbHZlZC5yZXN1bHRFeHByZXNz
aW9ucygpIDogbnVsbDsKKwkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJl
c3Npb25zID09IG51bGwgPyAwIDogcmVzdWx0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3Ro
OyBpKyspIHsKKwkJCQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYShyZXN1bHRFeHByZXNzaW9uc1tpXSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJs
ZXMoY29udGV4dCkpOwogCQkJCQl9CiAJCQkJfQogCQkJCXJldHVybiB2YXJpYWJsZXM7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCBlMjYwMDRjLi4yNzQyZWRlIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTM1MCw3ICszNTAsNyBAQAogCQkJ
fQogCQkJLy8gNC4gYnVsbGV0OiBhc3NlbWJsZSBDOgogCQkJU2V0PENvbnN0cmFpbnRGb3JtdWxh
PiBjID0gbmV3IEhhc2hTZXQ8Q29uc3RyYWludEZvcm11bGE+KCk7Ci0JCQlpZiAoIWFkZENvbnN0
cmFpbnRzVG9DKHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVy
ZW5jZUtpbmQpKQorCQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQyh0aGlzLmludm9jYXRpb25Bcmd1
bWVudHMsIGMsIG1ldGhvZCwgdGhpcy5pbmZlcmVuY2VLaW5kLCBmYWxzZSkpCiAJCQkJcmV0dXJu
IG51bGw7CiAJCQkvLyA1LiBidWxsZXQ6IGRldGVybWluZSBCNCBmcm9tIEMKIAkJCXdoaWxlICgh
Yy5pc0VtcHR5KCkpIHsKQEAgLTQwMiw3ICs0MDIsNyBAQAogCQl9CiAJfQogCi0JcHJpdmF0ZSBi
b29sZWFuIGFkZENvbnN0cmFpbnRzVG9DKEV4cHJlc3Npb25bXSBleHBycywgU2V0PENvbnN0cmFp
bnRGb3JtdWxhPiBjLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgaW50IGluZmVyZW5jZUtpbmRGb3JN
ZXRob2QpIHsKKwlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0MoRXhwcmVzc2lvbltd
IGV4cHJzLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBp
bnQgaW5mZXJlbmNlS2luZEZvck1ldGhvZCwgYm9vbGVhbiBpbnRlcmxlYXZlZCkgdGhyb3dzIElu
ZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gewogCQlUeXBlQmluZGluZ1tdIGZzOwogCQlpZiAoZXhw
cnMgIT0gbnVsbCkgewogCQkJaW50IGsgPSBleHBycy5sZW5ndGg7CkBAIC00MjMsMzkgKzQyMyw4
NCBAQAogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBrOyBpKyspIHsKIAkJCQlUeXBlQmluZGluZyBm
c2kgPSBmc1tNYXRoLm1pbihpLCBwLTEpXTsKIAkJCQlUeXBlQmluZGluZyBzdWJzdEYgPSBzdWJz
dGl0dXRlKGZzaSk7Ci0JCQkJaWYgKCFhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGV4cHJzW2ld
LCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKSkKKwkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DX09u
ZUV4cHIoZXhwcnNbaV0sIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGZhbHNlKSkKIAkJCQkJcmV0
dXJuIGZhbHNlOwogCSAgICAgICAgfQogCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZh
dGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNl
dDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJz
dEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFp
bnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBj
LCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRo
b2QsIGJvb2xlYW4gaW50ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9u
IHsKKwkJCisJCS8vIFNlZSBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRL
LTgwNTIzMjUgZm9yIGV4Y2x1c2lvbiBvZiBwb2x5IGV4cHJlc3Npb25zIHRhcmdldGluZyBwcm9w
ZXIgdHlwZXMuIENFRi5yZWR1Y2UgdmFsaWRhdGVzIAorCQkvLyB0aGF0IHRoZXkgYXJlIGNvbXBh
dGlibGUgaW4gYSBsb29zZSBpbnZvY2F0aW9uIGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0IHR5
cGUuIFRoZXkgY29udHJpYnV0ZSBub3RoaW5nIGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9ybXVs
YXMuCisJCWlmIChzdWJzdEYuaXNQcm9wZXJUeXBlKHRydWUpKQorCQkJcmV0dXJuIHRydWU7CisJ
CQogCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50
IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgog
CQlpZiAoIWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewog
CQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBS
ZWR1Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQp
KTsKIAkJfQogCQlpZiAoZXhwcmkgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewog
CQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVz
c2lvbikgZXhwcmksIHN1YnN0RikpOwotCQl9IGVsc2UgewotCQkJLy8gU2VlIGh0dHBzOi8vYnVn
cy5vcGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1MjMyNSBmb3IgZXhjbHVzaW9uIG9mIHBv
bHkgZXhwcmVzc2lvbnMgdGFyZ2V0aW5nIHByb3BlciB0eXBlcy4gQ0VGLnJlZHVjZSB2YWxpZGF0
ZXMgCi0JCQkvLyB0aGF0IHRoZXkgYXJlIGNvbXBhdGlibGUgaW4gYSBsb29zZSBpbnZvY2F0aW9u
IGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0IHR5cGUuIFRoZXkgY29udHJpYnV0ZSBub3RoaW5n
IGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9ybXVsYXMuCi0JCQlpZiAoc3Vic3RGLmlzUHJvcGVy
VHlwZSh0cnVlKSkKLQkJCQlyZXR1cm4gdHJ1ZTsKLQkJfQkKLQkJaWYgKGV4cHJpIGluc3RhbmNl
b2YgSW52b2NhdGlvbiAmJiBleHByaS5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCUludm9jYXRp
b24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByaTsKLQkJCU1ldGhvZEJpbmRpbmcgaW5u
ZXJNZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcoc3Vic3RGLCB0aGlzLnNjb3BlKTsKLQkJCWlm
IChpbm5lck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgewotCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5m
ZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9kKTsK
LQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCkgeyAvLyBvdGhlcndpc2UgaW5uZXJNZXRob2QgZG9l
cyBub3QgcGFydGljaXBhdGUgaW4gaW5mZXJlbmNlCi0JCQkJCXJldHVybiBhZGRDb25zdHJhaW50
c1RvQyhpbnZvY2F0aW9uLmFyZ3VtZW50cygpLCBjLCBpbm5lck1ldGhvZC5nZW5lcmljTWV0aG9k
KCksIGlubmVyQ3R4LmluZmVyZW5jZUtpbmQpOworCQkJaWYgKGV4cHJpIGluc3RhbmNlb2YgTGFt
YmRhRXhwcmVzc2lvbikgeworCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4
cHJlc3Npb24pIGV4cHJpOworCQkJCUJsb2NrU2NvcGUgc2tvcGUgPSBsYW1iZGEuZW5jbG9zaW5n
U2NvcGU7CisJCQkJaWYgKHN1YnN0Ri5pc0Z1bmN0aW9uYWxJbnRlcmZhY2Uoc2tvcGUpKSB7IC8v
IGNvdWxkIGJlIGFuIGluZmVyZW5jZSB2YXJpYWJsZS4KKwkJCQkJUmVmZXJlbmNlQmluZGluZyB0
ID0gKFJlZmVyZW5jZUJpbmRpbmcpIHN1YnN0RjsKKwkJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIHdpdGhXaWxkQ2FyZHMgPSBJbmZlcmVuY2VDb250ZXh0MTgucGFyYW1ldGVyaXplZFdpdGhX
aWxkY2FyZCh0KTsKKwkJCQkJaWYgKHdpdGhXaWxkQ2FyZHMgIT0gbnVsbCkgeworCQkJCQkJdCA9
IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5maW5kR3JvdW5kVGFyZ2V0VHlwZSh0aGlzLCBz
a29wZSwgbGFtYmRhLCB3aXRoV2lsZENhcmRzKTsKKwkJCQkJfQorCQkJCQlNZXRob2RCaW5kaW5n
IGZ1bmN0aW9uVHlwZTsKKwkJCQkJaWYgKHQgIT0gbnVsbCAmJiAoZnVuY3Rpb25UeXBlID0gdC5n
ZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChza29wZSwgdHJ1ZSkpICE9IG51bGwgJiYgKGxhbWJkYSA9
IGxhbWJkYS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodCkpICE9IG51bGwp
IHsKKwkJCQkJCVR5cGVCaW5kaW5nIHIgPSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsKKwkJCQkJ
CUV4cHJlc3Npb25bXSByZXN1bHRFeHByZXNzaW9ucyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9u
cygpOworCQkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJlc3Npb25zID09
IG51bGwgPyAwIDogcmVzdWx0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsK
KwkJCQkJCQlFeHByZXNzaW9uIHJlc3VsdEV4cHJlc3Npb24gPSByZXN1bHRFeHByZXNzaW9uc1tp
XTsKKwkJCQkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIocmVzdWx0RXhwcmVzc2lv
biwgYywgci5vcmlnaW5hbCgpLCByLCBtZXRob2QsIHRydWUpKQorCQkJCQkJCQlyZXR1cm4gZmFs
c2U7CisJCQkJCQl9CisJCQkJCX0KIAkJCQl9CiAJCQl9CisJCX0gZWxzZSBpZiAoZXhwcmkgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uICYmIGV4cHJpLmlzUG9seUV4cHJlc3Npb24oKSkgeworCQkJSW52
b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGV4cHJpOworCQkJTWV0aG9kQmluZGlu
ZyBpbm5lck1ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyhzdWJzdEYsIHRoaXMuc2NvcGUpOwor
CQkJaWYgKGlubmVyTWV0aG9kID09IG51bGwpCisJCQkJcmV0dXJuIHRydWU7IAkJICAvLyAtPiBw
cm9jZWVkIHdpdGggbm8gbmV3IEMgc2V0IGVsZW1lbnRzLgorCQkJCisJCQlpZiAoaW50ZXJsZWF2
ZWQpIHsKKwkJCQlNZXRob2RCaW5kaW5nIHNoYWxsb3dNZXRob2QgPSBpbm5lck1ldGhvZC5zaGFs
bG93T3JpZ2luYWwoKTsKKwkJCQlTdXNwZW5kZWRJbmZlcmVuY2VSZWNvcmQgcHJldkludm9jYXRp
b24gPSBlbnRlclBvbHlJbnZvY2F0aW9uKGludm9jYXRpb24sIGludm9jYXRpb24uYXJndW1lbnRz
KCkpOworCQkJCXRyeSB7CisJCQkJCUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9u
LmFyZ3VtZW50cygpOworCQkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBhcmd1bWVu
dHMgPT0gbnVsbCA/IEJpbmRpbmcuTk9fUEFSQU1FVEVSUyA6IG5ldyBUeXBlQmluZGluZ1thcmd1
bWVudHMubGVuZ3RoXTsKKwkJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudFR5cGVzLmxl
bmd0aDsgaSsrKQorCQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZl
ZFR5cGU7CisJCQkJCWlmIChpbm5lck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgeworCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0g
aW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcpIGlubmVyTWV0aG9kKTsKKwkJCQkJCXRoaXMuaW5mZXJlbmNlS2luZCA9IGlubmVy
Q3R4LmluZmVyZW5jZUtpbmQ7CisJCQkJCX0KKwkJCQkJaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJp
bGl0eShzaGFsbG93TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBzaGFsbG93TWV0aG9kLmlzQ29uc3Ry
dWN0b3IoKSk7CisJCQkJCWlmICghQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmluZmVyUG9s
eUludm9jYXRpb25UeXBlKHRoaXMsIGludm9jYXRpb24sIHN1YnN0Riwgc2hhbGxvd01ldGhvZCkp
CisJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJfSBmaW5hbGx5IHsKKwkJCQkJcmVzdW1lU3VzcGVu
ZGVkSW5mZXJlbmNlKHByZXZJbnZvY2F0aW9uKTsKKwkJCQl9CisJCQl9CisJCQlpbnQgYXBwbGlj
YWJpbGl0eUtpbmQgPSBDSEVDS19MT09TRTsgIC8vIEZJWE1FLCBmb3IgPD4gcmVzb2x2aW5nIHRv
IGEgbm9uLWdlbmVyaWMgbWV0aG9kLCB0aGlzIG5lZWQgdG8gYmUgY29tcHV0ZWQuCisJCQlpZiAo
aW5uZXJNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IHsKKwkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVy
ZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBpbm5lck1ldGhvZCk7CisJ
CQkJaWYgKGlubmVyQ3R4ICE9IG51bGwpIHsKKwkJCQkJYXBwbGljYWJpbGl0eUtpbmQgPSBpbm5l
ckN0eC5pbmZlcmVuY2VLaW5kOworCQkJCX0KKwkJCX0KKwkJCXJldHVybiBhZGRDb25zdHJhaW50
c1RvQyhpbnZvY2F0aW9uLmFyZ3VtZW50cygpLCBjLCBpbm5lck1ldGhvZC5nZW5lcmljTWV0aG9k
KCksIGFwcGxpY2FiaWxpdHlLaW5kLCBpbnRlcmxlYXZlZCk7CiAJCX0gZWxzZSBpZiAoZXhwcmkg
aW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKIAkJCUNvbmRpdGlvbmFsRXhwcmVz
c2lvbiBjZSA9IChDb25kaXRpb25hbEV4cHJlc3Npb24pIGV4cHJpOwotCQkJcmV0dXJuIGFkZENv
bnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZlRydWUsIGMsIGZzaSwgc3Vic3RGLCBtZXRo
b2QpCi0JCQkJCSYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZkZhbHNlLCBj
LCBmc2ksIHN1YnN0RiwgbWV0aG9kKTsKKwkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQ19PbmVF
eHByKGNlLnZhbHVlSWZUcnVlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBpbnRlcmxlYXZlZCkK
KwkJCQkJJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmRmFsc2UsIGMsIGZz
aSwgc3Vic3RGLCBtZXRob2QsIGludGVybGVhdmVkKTsKIAkJfQogCQlyZXR1cm4gdHJ1ZTsKIAl9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247783</attachid>
            <date>2014-10-09 23:53:00 -0400</date>
            <delta_ts>2014-10-12 06:11:35 -0400</delta_ts>
            <desc>Incremental fix to bug 444891 (specification amendment)</desc>
            <filename>specfix.patch</filename>
            <type>text/plain</type>
            <size>30842</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDNjOGFmMDEuLjQyZTFlMzQgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzAyOCw5ICszMDI4LDcgQEAKIAkJCSJ9XG4ifSk7CiB9
CiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDMzMTU4KCkgewotICB0cnkgewotCXRoaXMuc2hvdWxkU3dh
bGxvd0NhcHR1cmVJZCA9IHRydWU7IC8vIHRoaXMgdGVzdCBleGhpYml0cyBzb21lIG5vbi1kZXRl
cm1pbmlzbSBpbiBjYXB0dXJlIGlkcy4ganVzdCBjb21wYXJlIGlnbm9yaW5nIGlkLCBidXQgZXN0
YWJsaXNoaW5nIHByZXNlbmNlIG9mIGNhcHR1cmUuCi0JcnVuTmVnYXRpdmVUZXN0KAorICBydW5O
ZWdhdGl2ZVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiQ29sbGVjdG9yc01hcHMuamF2YSIs
CiAJCQkiXG4iICsgCkBAIC0zMDU3LDE1ICszMDU1LDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIENvbGxlY3RvcnNN
YXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCi0JCSIJcCAtPiBwLmxocy5zdHJlYW0oKS5tYXAo
cDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29sbGVjdChD
b2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUgU3RyZWFtPE9iamVjdD4g
aXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxlY3RvcjxDb2xsZWN0b3Jz
TWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUtb2YgPyxNYXA8U3RyaW5nLExpc3Q8U3Ry
aW5nPj4+KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7Ci0gIH0gZmluYWxseSB7Ci0JdGhpcy5z
aG91bGRTd2FsbG93Q2FwdHVyZUlkID0gZmFsc2U7CQotICB9CisJCSIiKTsKIH0KIHB1YmxpYyB2
b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAtMzM0NywxMCArMzMz
NywxMCBAQAogCQkJIn1cbiIKIAkJfSwKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDIyKVxuIiArIAotCQkiCSkuY29s
bGVjdChncm91cGluZ0J5KTtcbiIgKyAKLQkJIgkgIF5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRo
b2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhlIHR5cGUgU3Ry
ZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENvbGxlY3Rv
cjxNYXAuRW50cnk8U3RyaW5nLFN0cmluZz4sY2FwdHVyZSMxLW9mID8sTWFwPFN0cmluZyxMaXN0
PFN0cmluZz4+PilcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gRXh0cmFjdExvY2FsTGFtYmRhLmph
dmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0
aW9uO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAK
KwkJIlRoZSBpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uIGlzIG5ldmVyIHVzZWRc
biIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTc2Nygp
IHsKQEAgLTQ0MTIsNCArNDQwMiwxOTkgQEAKIAkJCSJ9XG4iCiAJCX0pOwogfQorLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzOTU5NCAgWzEuOF1bY29t
cGlsZXJdIG5lc3RlZCBsYW1iZGEgdHlwZSBpbmNvcnJlY3RseSBpbmZlcnJlZCB2cyBqYXZhYwor
cHVibGljIHZvaWQgdGVzdDQzOTU5NCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3
IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlz
dDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZh
LnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0
aW9uLlByZWRpY2F0ZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3Rv
cnM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJcHJvdGVjdGVkIHN0YXRpYyBpbnRlcmZhY2UgSUxp
c3RFbnRyeSB7XG4iICsKKwkJCSIJCXB1YmxpYyA8VD4gVCB2aXNpdFJlY29yZHNXaXRoUmVzdWx0
KEZ1bmN0aW9uPFN0cmVhbTxSZWNvcmQ+LFQ+IGZ1bmMpOwkJXG4iICsKKwkJCSIJfVxuIiArCisJ
CQkiCXByb3RlY3RlZCBzdGF0aWMgZmluYWwgY2xhc3MgSW1tdXRhYmxlUmVjb3JkIHtcbiIgKwor
CQkJIgkJcHVibGljIEltbXV0YWJsZVJlY29yZChSZWNvcmQgcikgeyB9XG4iICsKKwkJCSIJfVxu
IiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgZmluYWwgY2xhc3MgUmVjb3JkIHt9XG4iICsKKwkJ
CSIJcHVibGljIExpc3Q8SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhFY2xpcHNlQW5kSmF2
YWMoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVz
dWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQkiCQkJcmV0dXJuIHN0cmVhbS5tYXAoIGVudHJ5IC0+
IHtcbiIgKworCQkJIgkJCQlmaW5hbCBMaXN0PEltbXV0YWJsZVJlY29yZD4gcmVzdWx0MSA9IGVu
dHJ5LnZpc2l0UmVjb3Jkc1dpdGhSZXN1bHQoIHN0cmVhbTIgLT4gc3RyZWFtMlxuIiArCisJCQki
CQkJCQkJLmZpbHRlciggc29tZVByZWRpY2F0ZSgpIClcbiIgKworCQkJIgkJCQkJCS5tYXAoIElt
bXV0YWJsZVJlY29yZDo6bmV3IClcbiIgKworCQkJIgkJCQkJCS5jb2xsZWN0KCBDb2xsZWN0b3Jz
LnRvTGlzdCgpIClcbiIgKworCQkJIgkJCQkJKTsJXG4iICsKKwkJCSIJCQkJcmV0dXJuIHJlc3Vs
dDE7XG4iICsKKwkJCSIJCQl9KS5mbGF0TWFwKCBMaXN0OjpzdHJlYW0gKS5jb2xsZWN0KCBDb2xs
ZWN0b3JzLnRvQ29sbGVjdGlvbiggQXJyYXlMaXN0OjpuZXcgKSApO1xuIiArCisJCQkiCQl9KTsJ
CVxuIiArCisJCQkiCX0JCVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4g
Y29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMSgpIFxuIiArCisJCQkiCXtcbiIgKworCQkJ
IgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiB7XG4iICsKKwkJCSIJ
CQlyZXR1cm4gc3RyZWFtLm1hcCggZW50cnkgLT4ge1xuIiArCisJCQkiCQkJCXJldHVybiBlbnRy
eS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJ
CQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11
dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50
b0xpc3QoKSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJfSkuZmxhdE1hcCggTGlz
dDo6c3RyZWFtICkuY29sbGVjdCggQ29sbGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6
bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7CQlcbiIgKworCQkJIgl9CQlcbiIgKworCQkJIglwdWJs
aWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVzV2l0aEphdmFjQnV0Tm90RWNsaXBzZTIo
KSBcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVzdWx0
KCBzdHJlYW0gLT4ge1xuIiArCisJCQkiCQkJcmV0dXJuIHN0cmVhbS5tYXAoIGVudHJ5IC0+IGVu
dHJ5LnZpc2l0UmVjb3Jkc1dpdGhSZXN1bHQoIHN0cmVhbTIgLT4gc3RyZWFtMlxuIiArCisJCQki
CQkJCQkJLmZpbHRlciggc29tZVByZWRpY2F0ZSgpIClcbiIgKworCQkJIgkJCQkJCS5tYXAoIElt
bXV0YWJsZVJlY29yZDo6bmV3IClcbiIgKworCQkJIgkJCQkJCS5jb2xsZWN0KCBDb2xsZWN0b3Jz
LnRvTGlzdCgpICkgKVxuIiArCisJCQkiCQkJKS5mbGF0TWFwKCBMaXN0OjpzdHJlYW0gKS5jb2xs
ZWN0KCBDb2xsZWN0b3JzLnRvQ29sbGVjdGlvbiggQXJyYXlMaXN0OjpuZXcgKSApO1xuIiArCisJ
CQkiCQl9KTsJCVxuIiArCisJCQkiCX0JXG4iICsKKwkJCSIJcHVibGljIExpc3Q8SW1tdXRhYmxl
UmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2UzKCkgXG4iICsKKwkJCSIJe1xu
IiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFtIC0+IHN0cmVh
bS5tYXAoIGVudHJ5IC0+IGVudHJ5LnZpc2l0UmVjb3Jkc1dpdGhSZXN1bHQoIHN0cmVhbTIgLT4g
c3RyZWFtMlxuIiArCisJCQkiCQkJCQkJLmZpbHRlciggc29tZVByZWRpY2F0ZSgpIClcbiIgKwor
CQkJIgkJCQkJCS5tYXAoIEltbXV0YWJsZVJlY29yZDo6bmV3IClcbiIgKworCQkJIgkJCQkJCS5j
b2xsZWN0KCBDb2xsZWN0b3JzLnRvTGlzdCgpICkgKVxuIiArCisJCQkiCQkJKVxuIiArCisJCQki
CQkJLmZsYXRNYXAoIExpc3Q6OnN0cmVhbSApXG4iICsKKwkJCSIJCQkuY29sbGVjdCggQ29sbGVj
dG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKVxuIiArCisJCQkiCQkpOwkJXG4i
ICsKKwkJCSIJfQlcbiIgKworCQkJIglwcml2YXRlIHN0YXRpYyBQcmVkaWNhdGU8UmVjb3JkPiBz
b21lUHJlZGljYXRlKCkge1xuIiArCisJCQkiCQlyZXR1cm4gcmVjb3JkIC0+IHRydWU7XG4iICsK
KwkJCSIJfQkJXG4iICsKKwkJCSIJcHJpdmF0ZSA8VD4gVCB2aXNpdEVudHJpZXNXaXRoUmVzdWx0
KEZ1bmN0aW9uPFN0cmVhbTxJTGlzdEVudHJ5PixUPiBmdW5jKSB7XG4iICsKKwkJCSIJCXJldHVy
biBmdW5jLmFwcGx5KCBuZXcgQXJyYXlMaXN0PElMaXN0RW50cnk+KCkuc3RyZWFtKCkgKTtcbiIg
KworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiIik7Cit9CisvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzM4NTIsIFsxLjhdW2NvbXBpbGVyXSBK
YXZhYyByZWplY3RzIHR5cGUgaW5mZXJlbmNlIHJlc3VsdHMgdGhhdCBFQ0ogYWNjZXB0cworcHVi
bGljIHZvaWQgdGVzdDQzMzg1MigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLk9wdGlvbmFsO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKworCQkJImlt
cG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0cmVhbTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsK
KwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0KFN0cmVhbS5vZihTdHJlYW0ub2YoXCIzXCIp
KSkpO1xuIiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4odGVzdDIoU3RyZWFtLm9mKFN0cmVh
bS5vZihcIjFcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRl
c3QzMShTdHJlYW0ub2YoU3RyZWFtLm9mKFwiMlwiKSkuc2tpcCgxKSkpO1xuIiArCisJCQkiCX1c
biIgKworCQkJIglzdGF0aWMgT3B0aW9uYWw8U3RyZWFtPE9iamVjdD4+IHRlc3QoU3RyZWFtPFN0
cmVhbTxTdHJpbmc+PiBzMzEpIHtcbiIgKworCQkJIgkJcmV0dXJuIHMzMS5tYXAoczIgLT4gczIu
bWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmluZEFueSgpO1xuIiArCisJCQkiCX1c
biIgKworCQkJIglzdGF0aWMgT2JqZWN0IHRlc3QyKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMp
IHtcbiIgKworCQkJIgkJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5w
YXJzZUludChzMSkpKS5mbGF0TWFwKEZ1bmN0aW9uLmlkZW50aXR5KCkpLmZpbmRBbnkoKS5vckVs
c2UoXG4iICsKKwkJCSIJCSAgWC5jbGFzcyk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRp
YyBTdHJlYW08T2JqZWN0PiB0ZXN0MzEoU3RyZWFtPFN0cmVhbTxTdHJpbmc+PiBzMykge1xuIiAr
CisJCQkiCQlyZXR1cm4gczMubWFwKHMyIC0+IHMyLm1hcChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50
KHMxKSkpLmZpbmRBbnkoKS5vckVsc2UoU3RyZWFtLm9mKG5ldyBPYmplY3QoKSkpO1xuIiArCisJ
CQkiCX1cbiIgKworCQkJIn1cbiIKKwl9LAorCSItLS0tLS0tLS0tXG4iICsgCisJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkiCXJldHVybiBzMzEubWFwKHMyIC0+IHMy
Lm1hcChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKyAKKwkiCSAg
ICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXlxuIiArIAorCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIE9wdGlv
bmFsPFN0cmVhbTxJbnRlZ2VyPj4gdG8gT3B0aW9uYWw8U3RyZWFtPE9iamVjdD4+XG4iICsgCisJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiAr
IAorCSIJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChz
MSkpKS5mbGF0TWFwKEZ1bmN0aW9uLmlkZW50aXR5KCkpLmZpbmRBbnkoKS5vckVsc2UoXG4iICsg
CisJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXlxuIiArIAor
CSJUaGUgbWV0aG9kIG9yRWxzZShJbnRlZ2VyKSBpbiB0aGUgdHlwZSBPcHRpb25hbDxJbnRlZ2Vy
PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8WD4pXG4iICsgCisJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE4KVxuIiAr
IAorCSIJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChz
MSkpKS5maW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKyAKKwki
CSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIF5eXl5eXlxuIiArIAorCSJUaGUgbWV0aG9kIG9yRWxzZShTdHJlYW08SW50ZWdl
cj4pIGluIHRoZSB0eXBlIE9wdGlvbmFsPFN0cmVhbTxJbnRlZ2VyPj4gaXMgbm90IGFwcGxpY2Fi
bGUgZm9yIHRoZSBhcmd1bWVudHMgKFN0cmVhbTxPYmplY3Q+KVxuIiArIAorCSItLS0tLS0tLS0t
XG4iKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00NDI5MTYsICBbMS44XVtpbmZlcmVuY2VdIFR5cGUgSW5mZXJlbmNlIGlzIGJyb2tlbiBmb3Ig
Q29tcGxldGFibGVGdXR1cmUgdGhlbi1tZXRob2RzICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDI5MTYo
KSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImltcG9ydCBzdGF0aWMgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29tcGxldGFibGVGdXR1
cmUuY29tcGxldGVkRnV0dXJlO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQuQ29tcGxldGFibGVGdXR1cmU7XG4i
ICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRpYyBDb21w
bGV0YWJsZUZ1dHVyZTxJbnRlZ2VyPiBjZihpbnQgdmFsdWUpIHtcbiIgKworCQkJIgkJcmV0dXJu
IGNvbXBsZXRlZEZ1dHVyZSh2YWx1ZSk7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJY2YoMSku
dGhlbkNvbXBvc2UoKHhJbnQpIC0+IGNmKDIpLnRoZW5BcHBseSgoekludCkgLT4gQXJyYXlzLmFz
TGlzdCh4SW50LCB6SW50KSkpXG4iICsKKwkJCSIJCS50aGVuQWNjZXB0KChpbnRzKSAtPiB7XG4i
ICsKKwkJCSIJCQkvKiAhISEhIGludHMgaXMgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdG8gYmUgYW4g
T2JqZWN0LCBidXQgaXQgaXMgTGlzdDxJbnRlZ2VyPiAqL1xuIiArCisJCQkiCQkJU3lzdGVtLm91
dC5wcmludGxuKGludHMuZ2V0KDApICsgaW50cy5nZXQoMSkpOyAvLyBzaG91bGQgcHJpbnQgMztc
biIgKworCQkJIgkJfSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCQl9LAorCQkiMyIp
OworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0
Mjc2OSwgWzEuOF1bY29tcGlsZXJdIEludmFsaWQgdHlwZSBpbmZlcmVuY2UgdXNpbmcgU3RyZWFt
ICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDI3NjkoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJ
bmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImltcG9ydCBqYXZhLm5pby5maWxlLlBh
dGg7XG4iICsKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5QYXRocztcbiIgKworCQkJImltcG9y
dCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRp
bC5NYXA7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLk1hcC5FbnRyeTtcbiIgKworCQkJImlt
cG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0
aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5T
dHJlYW07XG4iICsKKwkJCSJpbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG4iICsKKwkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5n
W10gYXJncykge1xuIiArCisJCQkiCQlNYXA8T2JqZWN0LCBJbnRlZ2VyPiBhbGxvY2F0ZWQgPSBu
ZXcgSGFzaE1hcDw+KCk7XG4iICsKKwkJCSIJCSAgIEFycmF5cy5hc0xpc3QoXCJhXCIsIFwiYlwi
LCBcImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkgICAgICAg
ICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5tYXAo
UGF0aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5mbGF0TWFw
KHBhdGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxPYmpl
Y3Q+XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChn
cm91cCAtPiBQYWlyLm9mKGdyb3VwLCBwYXRoKSAvKlBhaXI8T2JqZWN0LFBhdGg+Ki8pIC8vIFN0
cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJICAgICAgICAgICkgLy8gU3RyZWFt
PE9iamVjdD4gW0ZBSUxdXG4iICsKKwkJCSIJICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMu
dG9MaXN0KCkpIC8vIExpc3Q8T2JqZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChp
dGVtIC0+IFN5c3RlbS5vdXQucHJpbnRsbihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5n
ZXRWYWx1ZSgpKSk7IC8vIENvbnN1bWVyPD8gc3VwZXIgT2JqZWN0PlxuIiArCisJCQkiCSAgICAv
LyB3aXRoIGV4cGxpY2l0IHR5cGVcbiIgKworCQkJIgkgICAgQXJyYXlzLmFzTGlzdChcImFcIiwg
XCJiXCIsIFwiY1wiLCBcImRcIiwgXCJlXCIpIC8vIExpc3Q8U3RyaW5nPlxuIiArCisJCQkiCSAg
ICAgICAgICAuc3RyZWFtKCkgLy8gU3RyZWFtPFN0cmluZz5cbiIgKworCQkJIgkgICAgICAgICAg
Lm1hcChQYXRoczo6Z2V0KSAvLyBTdHJlYW08UGF0aD5cbiIgKworCQkJIgkgICAgICAgICAgLmZs
YXRNYXAocGF0aCAtPiBhbGxvY2F0ZWQua2V5U2V0KCkgLy8gU2V0PE9iamVjdD5cbiIgKworCQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3RyZWFtKCkgLy8gU3RyZWFt
PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAu
PFBhaXI8T2JqZWN0LFBhdGg+Pm1hcChncm91cCAtPiBQYWlyLm9mKGdyb3VwLCBwYXRoKSAvKlBh
aXI8T2JqZWN0LFBhdGg+Ki8pIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJ
CSIJICAgICAgICAgICkgLy8gU3RyZWFtPFBhaXI8T2JqZWN0LCBQYXRoPj5cbiIgKworCQkJIgkg
ICAgICAgICAgLmNvbGxlY3QoQ29sbGVjdG9ycy50b0xpc3QoKSkgLy8gTGlzdDxQYWlyPE9iamVj
dCwgUGF0aD4+XG4iICsKKwkJCSIJICAgICAgICAgIC5mb3JFYWNoKGl0ZW0gLT4gU3lzdGVtLm91
dC5wcmludGxuKGl0ZW0uZ2V0S2V5KCkgKyBcIjogXCIgKyBpdGVtLmdldFZhbHVlKCkpKTsgLy8g
Q29uc3VtZXI8PyBzdXBlciBQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJfVxuIiArCisJ
CQkifVxuIiArCisJCQkiYWJzdHJhY3QgY2xhc3MgUGFpcjxMLCBSPiBpbXBsZW1lbnRzIE1hcC5F
bnRyeTxMLCBSPiwgQ29tcGFyYWJsZTxQYWlyPEwsIFI+PiwgU2VyaWFsaXphYmxlIHtcbiIgKwor
CQkJIiAgICBwdWJsaWMgc3RhdGljIDxMLCBSPiBQYWlyPEwsIFI+IG9mKGZpbmFsIEwgbGVmdCwg
ZmluYWwgUiByaWdodCkge1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJ
IiAgICB9XG4iICsKKwkJCSIgICAgcHVibGljIGZpbmFsIEwgZ2V0S2V5KCkge1xuIiArCisJCQki
ICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgcHVibGlj
IFIgZ2V0VmFsdWUoKSB7XG4iICsKKwkJCSIgICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQki
ICAgIH1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIiIpOworfQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpp
bmRleCA4ZDJkZmNhLi4xZWIxNDBjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNDE2Myw3ICs0MTYz
LDcgQEAKIAkJIk9LIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9NDMyNjgyLCBbMS44XVtjb21waWxlcl0gVHlwZSBtaXNtYXRjaCBlcnJvciB3
aXRoIGxhbWJkYSBleHByZXNzaW9uCi1wdWJsaWMgdm9pZCBfdGVzdDQzMjY4MigpIHRocm93cyBF
eGNlcHRpb24geworcHVibGljIHZvaWQgdGVzdDQzMjY4MigpIHRocm93cyBFeGNlcHRpb24gewog
CXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwKQEAg
LTQxODEsNyArNDE4MSw3IEBACiAJCQkiCX1cbiIgKwogCQkJIn1cbiIKIAkJfSwKLQkJIk9LIik7
CisJCSJ0cnVlIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDMyNTIwLCBjb21waWxlciAiZHVwbGljYXRlIG1ldGhvZCIgYnVnIHdpdGggbGFt
ZGFzIGFuZCBnZW5lcmljIGludGVyZmFjZXMgCiBwdWJsaWMgdm9pZCB0ZXN0NDMyNTIwKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCAyMjdk
NWU2Li5mMzBlYmUxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21w
aWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9O
ZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTk2NDIs
NyArOTY0Miw3IEBACiAJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0MjQ0NiwgWzEuOF1bY29tcGlsZXJdIGNvbXBp
bGVyIHVuYWJsZSB0byBpbmZlciBsYW1iZGEncyBnZW5lcmljIGFyZ3VtZW50IHR5cGVzCi1wdWJs
aWMgdm9pZCBfdGVzdDQ0MjQ0NigpIHsKK3B1YmxpYyB2b2lkIHRlc3Q0NDI0NDYoKSB7CiAJdGhp
cy5ydW5OZWdhdGl2ZVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwgCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggOTM2NWExMi4uMjkzYmE0ZSAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNTI5LDcgKzUyOSw3IEBACiAKIC8vIEZv
ciBhbGxvY2F0aW9uIGV4cHJlc3Npb25zLCBib3hpbmcgY29tcGF0aWJpbGl0eSBpcyBzYW1lIGFz
IHZhbmlsbGEgY29tcGF0aWJpbGl0eSwgc2luY2UgamF2YS5sYW5nJ3Mgd3JhcHBlciB0eXBlcyBh
cmUgbm90IGdlbmVyaWMuCiBwdWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JcmV0dXJuIGlzQ29tcGF0aWJs
ZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCXJldHVybiBpc1BvbHlFeHByZXNzaW9uKCkgPyBm
YWxzZSA6IGlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOwogfQogCiBwdWJsaWMg
Ym9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNj
b3BlIHNjb3BlKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9u
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggMGE3YmI3
YS4uOTkxMTcxNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNzQsOSAr
NzQsOCBAQAogCQlzdXBlcigpOwogCX0KIAkKLQkvLyBmb3IgbGFtYmRhJ3MgYW5kIHJlZmVyZW5j
ZSBleHByZXNzaW9ucyBib3hpbmcgY29tcGF0aWJpbGl0eSBpcyBzYW1lIGFzIHZhbmlsbGEgY29t
cGF0aWJpbGl0eS4KIAlwdWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCXJldHVybiBpc0NvbXBhdGlibGVX
aXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJcmV0dXJuIGZhbHNlOwogCX0KIAkKIAlwdWJsaWMg
dm9pZCBzZXRDb21waWxhdGlvblJlc3VsdChDb21waWxhdGlvblJlc3VsdCBjb21waWxhdGlvblJl
c3VsdCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCAxMzNmY2FkLi5kNjNlNTNhIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtNDEsNiArNDEsNyBAQAogaW1wb3J0IHN0YXRp
YyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0
LklOVk9DQVRJT05fQ09OVEVYVDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2lt
cG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9y
dCBqYXZhLnV0aWwuTGlua2VkSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMjM4
LDYgKzIzOSw3IEBACiAJCQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVudHNb
aV0udHlwZS5yZXNvbHZlVHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsK
IAkJfQogCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Npb25D
b250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCkgeworCQkJdGhpcy5yZXNvbHZlZENvcGllcyA9
IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOwogCQkJcmV0dXJu
IG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0gCiAJCQpAQCAtMzk3LDYgKzM5OSw3IEBA
CiAJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7CiAJCQlFeHByZXNzaW9u
IGV4cHJlc3Npb24gPSAoRXhwcmVzc2lvbikgdGhpcy5ib2R5OwogCQkJbmV3IFJldHVyblN0YXRl
bWVudChleHByZXNzaW9uLCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJj
ZUVuZCwgdHJ1ZSkucmVzb2x2ZSh0aGlzLnNjb3BlKTsgLy8gOi0pIDstKQorCQkJdGhpcy52b2lk
Q29tcGF0aWJsZSA9IHRoaXMub3JpZ2luYWwudm9pZENvbXBhdGlibGUgPSBleHByZXNzaW9uLnN0
YXRlbWVudEV4cHJlc3Npb24oKTsKIAkJfSBlbHNlIHsKIAkJCXRoaXMuYm9keS5yZXNvbHZlKHRo
aXMuc2NvcGUpOwogCQl9CkBAIC03MTAsNyArNzEzLDYgQEAKIAkJaWYgKCEobGVmdCBpbnN0YW5j
ZW9mIFJlZmVyZW5jZUJpbmRpbmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0
LnVuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKIAkJc2hhcGVBbmFseXNpczogaWYgKCF0
aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkgewogCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xk
UG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJv
ckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQkJZmluYWwgQ29t
cGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGls
ZXJPcHRpb25zKCk7CkBAIC04MTMsNiArODE1LDggQEAKIAkJcmV0dXJuIHRydWU7CiAJfQogCisJ
cHJpdmF0ZSBIYXNoTWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPiByZXNvbHZlZENv
cGllczsKKwkKIAkvKioKIAkgKiBHZXQgYSByZXNvbHZlZCBjb3B5IG9mIHRoaXMgbGFtYmRhIGZv
ciB1c2UgYnkgdHlwZSBpbmZlcmVuY2UsIGFzIHRvIGF2b2lkIHNwaWxsaW5nIGFueSBwcmVtYXR1
cmUKIAkgKiB0eXBlIHJlc3VsdHMgaW50byB0aGUgb3JpZ2luYWwgbGFtYmRhLgpAQCAtODIxLDEy
ICs4MjUsMjEgQEAKIAkgKiBAcmV0dXJuIGEgcmVzb2x2ZWQgY29weSBvZiAndGhpcycgb3IgbnVs
bCBpZiBzaWduaWZpY2FudCBlcnJvcnMgd2hlcmUgZW5jb3VudGVyZWQKIAkgKi8KIAlwdWJsaWMg
TGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IHRoaXMu
cmVzb2x2ZWRDb3BpZXMuZ2V0KHRhcmdldFR5cGUpOworCQlpZiAobGFtYmRhID09IG51bGwpIHsK
KwkJCWxhbWJkYSA9IGdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAodGFyZ2V0
VHlwZSk7CisJCQlpZiAobGFtYmRhICE9IG51bGwpIHsKKwkJCQl0aGlzLnJlc29sdmVkQ29waWVz
LnB1dCh0YXJnZXRUeXBlLCBsYW1iZGEpOworCQkJfQorCQl9CisJCXJldHVybiBsYW1iZGE7CisJ
fQorCQorCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uIGdldFJlc29sdmVkQ29weUZvckluZmVyZW5j
ZVRhcmdldGluZzAoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewogCQkvLyBub3RlOiB0aGlzIGlz
IGVzc2VudGlhbGx5IGEgc2ltcGxpZmllZCBleHRyYWN0IGZyb20gaXNDb21wYXRpYmxlV2l0aChU
eXBlQmluZGluZyxTY29wZSkuCiAJCWlmICh0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSAmJiB0
aGlzLmJpbmRpbmcgIT0gbnVsbCkKIAkJCXJldHVybiB0aGlzOwogCQkKLQkJdGFyZ2V0VHlwZSA9
IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkvLyBUT0RPOiBj
YWNoaW5nCiAJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5n
U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShzaWxlbnRF
cnJvckhhbmRsaW5nUG9saWN5KTsKIAkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0
aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJCWJvb2xlYW4g
YW5hbHl6ZU5QRSA9IGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNp
c0VuYWJsZWQ7CkBAIC05NDgsNiArOTYxLDcgQEAKIAogCQlpZiAoY29weSAhPSBudWxsKSB7IC8v
ID09PiBzeW50YXggZXJyb3JzID09IG51bGwKIAkJCWNvcHkub3JpZ2luYWwgPSB0aGlzOworCQkJ
Y29weS5lbmNsb3NpbmdTY29wZSA9IHRoaXMuZW5jbG9zaW5nU2NvcGU7CiAJCX0KIAkJcmV0dXJu
IGNvcHk7CiAJfQpAQCAtOTU2LDcgKzk3MCw3IEBACiAJCWlmICh0aGlzLm9yaWdpbmFsID09IHRo
aXMpIC8vIG5vdCBpbiBvdmVybG9hZCByZXNvbHV0aW9uIGNvbnRleHQuCiAJCQlyZXR1cm47CiAJ
CWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQl0aGlzLm9yaWdpbmFs
LnZhbHVlQ29tcGF0aWJsZSA9IHJlc3VsdFR5cGUgIT0gbnVsbCAmJiByZXN1bHRUeXBlLmlkICE9
IFR5cGVJZHMuVF92b2lkOworCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGUgPSByZXN1
bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCA/IGZhbHNl
IDogdHJ1ZTsKIAkJCXRoaXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnMgPSBuZXcgRXhwcmVz
c2lvblsxXTsKIAkJCXRoaXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnNbMF0gPSBleHByZXNz
aW9uOwogCQkJcmV0dXJuOyAvLyB2b2lkIGNvbXBhdGliaWxpdHkgZGV0ZXJtaW5lZCB2aWEgc3Rh
dGVtZW50RXhwcmVzc2lvbigpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggODg5YWQ5Ny4uN2QxZTFkNiAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TWVzc2FnZVNlbmQuamF2YQpAQCAtOTYyLDYgKzk2Miw4IEBACiBwdWJsaWMgYm9vbGVhbiBpc0Jv
eGluZ0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7
CiAJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8
fCAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8
IHNjb3BlID09IG51bGwpCiAJCXJldHVybiBmYWxzZTsKKwlpZiAoaXNQb2x5RXhwcmVzc2lvbigp
ICYmICF0YXJnZXRUeXBlLmlzUHJpbWl0aXZlT3JCb3hlZFByaW1pdGl2ZVR5cGUoKSkgLy8gaS5l
IGl0IGlzIGR1bWIgdG8gdHJpZ2dlciBpbmZlcmVuY2UsIGNoZWNraW5nIGJveGluZyBjb21wYXRp
YmlsaXR5IGFnYWluc3Qgc2F5IENvbGxlY3Rvcjw/IHN1cGVyIFQsIEEsIFI+LgorCQlyZXR1cm4g
ZmFsc2U7CiAJVHlwZUJpbmRpbmcgb3JpZ2luYWxFeHBlY3RlZFR5cGUgPSB0aGlzLmV4cGVjdGVk
VHlwZTsKIAl0cnkgewogCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCBjMjFhMTFi
Li4xZWU1NWI0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEKQEAgLTE3LDcgKzE3LDYgQEAKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIGltcG9y
dCBqYXZhLnV0aWwuU2V0OwogCi1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLkFTVFZpc2l0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5Bcmd1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CkBAIC0yNSw4ICsyNCw2IEBACiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJl
c3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5SZXR1
cm5TdGF0ZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5JbmZlcmVuY2VDb250ZXh0MTguU3VzcGVuZGVkSW5mZXJlbmNlUmVjb3JkOwogCiAvKioK
QEAgLTkyLDYgKzg5LDEwIEBACiAJCQkJCQkJCXJldHVybiBGQUxTRTsKIAkJCQkJCQlyZXR1cm4g
Q29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShleHByVHlwZSwgdGhpcy5yaWdodCwgQ09NUEFU
SUJMRSwgdGhpcy5pc1NvZnQpOwogCQkJCQkJfQorCQkJCQkJaWYgKGlubmVyQ3R4LnN0ZXBDb21w
bGV0ZWQgPj0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKKwkJCQkJCQkvLyBU
aGUgY29uc3RyYWludHMgYW5kIGluaXRpYWwgYm91bmRzIHRoYXQgd291bGQgZWZmZWN0aXZlbHkg
cmVkdWNlIHRvIGIzIGFyZSBhbHJlYWR5IHRyYW5zZmVycmVkIHRvIGN1cnJlbnQgY29udGV4dCBk
dXJpbmcgQyBTZXQgY29uc3RydWN0aW9uLgorCQkJCQkJCXJldHVybiBUUlVFOworCQkJCQkJfQog
CQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNl
S2luZDsKIAkJCQkJfQogCQkJCQlib29sZWFuIGlzRGlhbW9uZCA9IG1ldGhvZC5pc0NvbnN0cnVj
dG9yKCkgJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJlc3Npb24obWV0aG9kKTsKQEAgLTE1MiwxMyAr
MTUzLDggQEAKIAkJCQl9CiAJCQkJaWYgKGZ1bmN0aW9uVHlwZS5yZXR1cm5UeXBlICE9IFR5cGVC
aW5kaW5nLlZPSUQpIHsKIAkJCQkJVHlwZUJpbmRpbmcgciA9IGZ1bmN0aW9uVHlwZS5yZXR1cm5U
eXBlOwotCQkJCQlFeHByZXNzaW9uW10gZXhwcnM7Ci0JCQkJCWlmIChsYW1iZGEuYm9keSgpIGlu
c3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJCQkJZXhwcnMgPSBuZXcgRXhwcmVzc2lvbltdIHso
RXhwcmVzc2lvbilsYW1iZGEuYm9keSgpfTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCWV4cHJzID0g
bGFtYmRhLnJlc3VsdEV4cHJlc3Npb25zKCk7Ci0JCQkJCX0KLQkJCQkJZm9yIChpbnQgaSA9IDA7
IGkgPCBleHBycy5sZW5ndGg7IGkrKykgeworCQkJCQlFeHByZXNzaW9uW10gZXhwcnMgPSBsYW1i
ZGEucmVzdWx0RXhwcmVzc2lvbnMoKTsKKwkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGV4
cHJzID09IG51bGwgPyAwIDogZXhwcnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCQkJ
CUV4cHJlc3Npb24gZXhwciA9IGV4cHJzW2ldOwogCQkJCQkJaWYgKHIuaXNQcm9wZXJUeXBlKHRy
dWUpICYmIGV4cHIucmVzb2x2ZWRUeXBlICE9IG51bGwpIHsKIAkJCQkJCQlUeXBlQmluZGluZyBl
eHByVHlwZSA9IGV4cHIucmVzb2x2ZWRUeXBlOwpAQCAtMTgxLDcgKzE3Nyw3IEBACiAJCXJldHVy
biBGQUxTRTsKIAl9CiAKLQlwdWJsaWMgUmVmZXJlbmNlQmluZGluZyBmaW5kR3JvdW5kVGFyZ2V0
VHlwZShJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dCwgQmxvY2tTY29wZSBzY29w
ZSwKKwlwdWJsaWMgc3RhdGljIFJlZmVyZW5jZUJpbmRpbmcgZmluZEdyb3VuZFRhcmdldFR5cGUo
SW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQsIEJsb2NrU2NvcGUgc2NvcGUsCiAJ
CQkJCQkJCQkJCQkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEsIFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlV2l0aFdpbGRDYXJkcykKIAl7CiAJCWlmIChsYW1iZGEuYXJndW1lbnRz
VHlwZUVsaWRlZCgpKSB7CkBAIC00MDYsMTcgKzQwMiw5IEBACiAJCQkJCS8vIGlpKQogCQkJCQlm
aW5hbCBUeXBlQmluZGluZyByID0gc2FtLnJldHVyblR5cGU7CiAJCQkJCUxhbWJkYUV4cHJlc3Np
b24gcmVzb2x2ZWQgPSBsYW1iZGEuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5n
KHRoaXMucmlnaHQpOwotCQkJCQlTdGF0ZW1lbnQgYm9keSA9IHJlc29sdmVkICE9IG51bGwgPyBy
ZXNvbHZlZC5ib2R5KCkgOiBsYW1iZGEuYm9keSgpOwotCQkJCQlpZiAoYm9keSBpbnN0YW5jZW9m
IEV4cHJlc3Npb24pIHsKLQkJCQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYSgoRXhwcmVzc2lvbikgYm9keSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJp
YWJsZXMoY29udGV4dCkpOwotCQkJCQl9IGVsc2UgewotCQkJCQkJLy8gVE9ETzogc2hvdWxkIEkg
dXNlIExhbWJkYUV4cHJlc3Npb24ucmVzdWx0RXhwcmVzc2lvbnM/IChpcyBjdXJyZW50bHkgcHJp
dmF0ZSkuCi0JCQkJCQlib2R5LnRyYXZlcnNlKG5ldyBBU1RWaXNpdG9yKCkgewotCQkJCQkJCXB1
YmxpYyBib29sZWFuIHZpc2l0KFJldHVyblN0YXRlbWVudCByZXR1cm5TdGF0ZW1lbnQsIEJsb2Nr
U2NvcGUgc2NvcGUpIHsKLQkJCQkJCQkJdmFyaWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4
cHJlc3Npb25Gb3JtdWxhKHJldHVyblN0YXRlbWVudC5leHByZXNzaW9uLCByLCBDT01QQVRJQkxF
KS5pbnB1dFZhcmlhYmxlcyhjb250ZXh0KSk7Ci0JCQkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJ
CQl9Ci0JCQkJCQl9LCAoQmxvY2tTY29wZSludWxsKTsKKwkJCQkJRXhwcmVzc2lvbltdIHJlc3Vs
dEV4cHJlc3Npb25zID0gcmVzb2x2ZWQgIT0gbnVsbCA/IHJlc29sdmVkLnJlc3VsdEV4cHJlc3Np
b25zKCkgOiBudWxsOworCQkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gcmVzdWx0RXhwcmVz
c2lvbnMgPT0gbnVsbCA/IDAgOiByZXN1bHRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW5ndGg7
IGkrKykgeworCQkJCQkJdmFyaWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25G
b3JtdWxhKHJlc3VsdEV4cHJlc3Npb25zW2ldLCByLCBDT01QQVRJQkxFKS5pbnB1dFZhcmlhYmxl
cyhjb250ZXh0KSk7CiAJCQkJCX0KIAkJCQl9CiAJCQkJcmV0dXJuIHZhcmlhYmxlczsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4IGUyNjAwNGMuLmNjMzljOGMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpAQCAtMzUwLDcgKzM1MCw3IEBACiAJCQl9
CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlTZXQ8Q29uc3RyYWludEZvcm11bGE+
IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKLQkJCWlmICghYWRkQ29uc3Ry
YWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBtZXRob2QsIHRoaXMuaW5mZXJl
bmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DKHRoaXMuaW52b2NhdGlvbkFyZ3Vt
ZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQsIGZhbHNlKSkKIAkJCQlyZXR1cm4g
bnVsbDsKIAkJCS8vIDUuIGJ1bGxldDogZGV0ZXJtaW5lIEI0IGZyb20gQwogCQkJd2hpbGUgKCFj
LmlzRW1wdHkoKSkgewpAQCAtNDAyLDcgKzQwMiw3IEBACiAJCX0KIAl9CiAKLQlwcml2YXRlIGJv
b2xlYW4gYWRkQ29uc3RyYWludHNUb0MoRXhwcmVzc2lvbltdIGV4cHJzLCBTZXQ8Q29uc3RyYWlu
dEZvcm11bGE+IGMsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJlbmNlS2luZEZvck1l
dGhvZCkgeworCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQyhFeHByZXNzaW9uW10g
ZXhwcnMsIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgTWV0aG9kQmluZGluZyBtZXRob2QsIGlu
dCBpbmZlcmVuY2VLaW5kRm9yTWV0aG9kLCBib29sZWFuIGludGVybGVhdmVkKSB0aHJvd3MgSW5m
ZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCVR5cGVCaW5kaW5nW10gZnM7CiAJCWlmIChleHBy
cyAhPSBudWxsKSB7CiAJCQlpbnQgayA9IGV4cHJzLmxlbmd0aDsKQEAgLTQyMywzOSArNDIzLDg0
IEBACiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGs7IGkrKykgewogCQkJCVR5cGVCaW5kaW5nIGZz
aSA9IGZzW01hdGgubWluKGksIHAtMSldOwogCQkJCVR5cGVCaW5kaW5nIHN1YnN0RiA9IHN1YnN0
aXR1dGUoZnNpKTsKLQkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0s
IGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpKQorCQkJCWlmICghYWRkQ29uc3RyYWludHNUb0NfT25l
RXhwcihleHByc1tpXSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCwgaW50ZXJsZWF2ZWQpKQogCQkJ
CQlyZXR1cm4gZmFsc2U7CiAJICAgICAgICB9CiAJCX0KIAkJcmV0dXJuIHRydWU7CiAJfQogCi0J
cHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHBy
aSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5n
IHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwlwcml2YXRlIGJvb2xlYW4gYWRkQ29u
c3RyYWludHNUb0NfT25lRXhwcihFeHByZXNzaW9uIGV4cHJpLCBTZXQ8Q29uc3RyYWludEZvcm11
bGE+IGMsIFR5cGVCaW5kaW5nIGZzaSwgVHlwZUJpbmRpbmcgc3Vic3RGLCBNZXRob2RCaW5kaW5n
IG1ldGhvZCwgYm9vbGVhbiBpbnRlcmxlYXZlZCkgdGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNl
cHRpb24geworCQkKKwkJLy8gU2VlIGh0dHBzOi8vYnVncy5vcGVuamRrLmphdmEubmV0L2Jyb3dz
ZS9KREstODA1MjMyNSBmb3IgZXhjbHVzaW9uIG9mIHBvbHkgZXhwcmVzc2lvbnMgdGFyZ2V0aW5n
IHByb3BlciB0eXBlcy4gQ0VGLnJlZHVjZSB2YWxpZGF0ZXMgCisJCS8vIHRoYXQgdGhleSBhcmUg
Y29tcGF0aWJsZSBpbiBhIGxvb3NlIGludm9jYXRpb24gY29udGV4dCBhZ2FpbnN0IHRoZSB0YXJn
ZXQgdHlwZS4gVGhleSBjb250cmlidXRlIG5vdGhpbmcgZnVydGhlciB0byBzb2x2aW5nIHRoZSBm
b3JtdWxhcy4KKwkJaWYgKHN1YnN0Ri5pc1Byb3BlclR5cGUodHJ1ZSkpCisJCQlyZXR1cm4gdHJ1
ZTsKKwkJCiAJCS8vIEZvciBhbGwgaSAoMSDiiaQgaSDiiaQgayksIGlmIGVpIGlzIG5vdCBwZXJ0
aW5lbnQgdG8gYXBwbGljYWJpbGl0eSwgdGhlIHNldCBjb250YWlucyDin6hlaSDihpIgzrggRmni
n6kuCiAJCWlmICghZXhwcmkuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoZnNpLCBtZXRob2Qp
KSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGV4cHJpLCBzdWJz
dEYsIFJlZHVjdGlvblJlc3VsdC5DT01QQVRJQkxFLCBBUkdVTUVOVF9DT05TVFJBSU5UU19BUkVf
U09GVCkpOwogCQl9CiAJCWlmIChleHByaSBpbnN0YW5jZW9mIEZ1bmN0aW9uYWxFeHByZXNzaW9u
KSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEoKEZ1bmN0aW9uYWxF
eHByZXNzaW9uKSBleHByaSwgc3Vic3RGKSk7Ci0JCX0gZWxzZSB7Ci0JCQkvLyBTZWUgaHR0cHM6
Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQvYnJvd3NlL0pESy04MDUyMzI1IGZvciBleGNsdXNpb24g
b2YgcG9seSBleHByZXNzaW9ucyB0YXJnZXRpbmcgcHJvcGVyIHR5cGVzLiBDRUYucmVkdWNlIHZh
bGlkYXRlcyAKLQkJCS8vIHRoYXQgdGhleSBhcmUgY29tcGF0aWJsZSBpbiBhIGxvb3NlIGludm9j
YXRpb24gY29udGV4dCBhZ2FpbnN0IHRoZSB0YXJnZXQgdHlwZS4gVGhleSBjb250cmlidXRlIG5v
dGhpbmcgZnVydGhlciB0byBzb2x2aW5nIHRoZSBmb3JtdWxhcy4KLQkJCWlmIChzdWJzdEYuaXNQ
cm9wZXJUeXBlKHRydWUpKQotCQkJCXJldHVybiB0cnVlOwotCQl9CQotCQlpZiAoZXhwcmkgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uICYmIGV4cHJpLmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJSW52
b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGV4cHJpOwotCQkJTWV0aG9kQmluZGlu
ZyBpbm5lck1ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyhzdWJzdEYsIHRoaXMuc2NvcGUpOwot
CQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nKSB7Ci0JCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5n
ZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgaW5uZXJNZXRo
b2QpOwotCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7IC8vIG90aGVyd2lzZSBpbm5lck1ldGhv
ZCBkb2VzIG5vdCBwYXJ0aWNpcGF0ZSBpbiBpbmZlcmVuY2UKLQkJCQkJcmV0dXJuIGFkZENvbnN0
cmFpbnRzVG9DKGludm9jYXRpb24uYXJndW1lbnRzKCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNN
ZXRob2QoKSwgaW5uZXJDdHguaW5mZXJlbmNlS2luZCk7CisJCQlpZiAoZXhwcmkgaW5zdGFuY2Vv
ZiBMYW1iZGFFeHByZXNzaW9uKSB7CisJCQkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSAoTGFt
YmRhRXhwcmVzc2lvbikgZXhwcmk7CisJCQkJQmxvY2tTY29wZSBza29wZSA9IGxhbWJkYS5lbmNs
b3NpbmdTY29wZTsKKwkJCQlpZiAoc3Vic3RGLmlzRnVuY3Rpb25hbEludGVyZmFjZShza29wZSkp
IHsgLy8gY291bGQgYmUgYW4gaW5mZXJlbmNlIHZhcmlhYmxlLgorCQkJCQlSZWZlcmVuY2VCaW5k
aW5nIHQgPSAoUmVmZXJlbmNlQmluZGluZykgc3Vic3RGOworCQkJCQlQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcgd2l0aFdpbGRDYXJkcyA9IEluZmVyZW5jZUNvbnRleHQxOC5wYXJhbWV0ZXJpemVk
V2l0aFdpbGRjYXJkKHQpOworCQkJCQlpZiAod2l0aFdpbGRDYXJkcyAhPSBudWxsKSB7CisJCQkJ
CQl0ID0gQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmZpbmRHcm91bmRUYXJnZXRUeXBlKHRo
aXMsIHNrb3BlLCBsYW1iZGEsIHdpdGhXaWxkQ2FyZHMpOworCQkJCQl9CisJCQkJCU1ldGhvZEJp
bmRpbmcgZnVuY3Rpb25UeXBlOworCQkJCQlpZiAodCAhPSBudWxsICYmIChmdW5jdGlvblR5cGUg
PSB0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHNrb3BlLCB0cnVlKSkgIT0gbnVsbCAmJiAobGFt
YmRhID0gbGFtYmRhLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0KSkgIT0g
bnVsbCkgeworCQkJCQkJVHlwZUJpbmRpbmcgciA9IGZ1bmN0aW9uVHlwZS5yZXR1cm5UeXBlOwor
CQkJCQkJRXhwcmVzc2lvbltdIHJlc3VsdEV4cHJlc3Npb25zID0gbGFtYmRhLnJlc3VsdEV4cHJl
c3Npb25zKCk7CisJCQkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gcmVzdWx0RXhwcmVzc2lv
bnMgPT0gbnVsbCA/IDAgOiByZXN1bHRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkr
KykgeworCQkJCQkJCUV4cHJlc3Npb24gcmVzdWx0RXhwcmVzc2lvbiA9IHJlc3VsdEV4cHJlc3Np
b25zW2ldOworCQkJCQkJCWlmICghYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihyZXN1bHRFeHBy
ZXNzaW9uLCBjLCByLm9yaWdpbmFsKCksIHIsIG1ldGhvZCwgdHJ1ZSkpCisJCQkJCQkJCXJldHVy
biBmYWxzZTsKKwkJCQkJCX0KKwkJCQkJfQogCQkJCX0KIAkJCX0KKwkJfSBlbHNlIGlmIChleHBy
aSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgZXhwcmkuaXNQb2x5RXhwcmVzc2lvbigpKSB7CisJ
CQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmk7CisJCQlNZXRob2RC
aW5kaW5nIGlubmVyTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHN1YnN0RiwgdGhpcy5zY29w
ZSk7CisJCQlpZiAoaW5uZXJNZXRob2QgPT0gbnVsbCkKKwkJCQlyZXR1cm4gdHJ1ZTsgCQkgIC8v
IC0+IHByb2NlZWQgd2l0aCBubyBuZXcgQyBzZXQgZWxlbWVudHMuCisJCQkKKwkJCWlmIChpbnRl
cmxlYXZlZCkgeworCQkJCU1ldGhvZEJpbmRpbmcgc2hhbGxvd01ldGhvZCA9IGlubmVyTWV0aG9k
LnNoYWxsb3dPcmlnaW5hbCgpOworCQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52
b2NhdGlvbiA9IGVudGVyUG9seUludm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1
bWVudHMoKSk7CisJCQkJdHJ5IHsKKwkJCQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9j
YXRpb24uYXJndW1lbnRzKCk7CisJCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IGFy
Z3VtZW50cyA9PSBudWxsID8gQmluZGluZy5OT19QQVJBTUVURVJTIDogbmV3IFR5cGVCaW5kaW5n
W2FyZ3VtZW50cy5sZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlw
ZXMubGVuZ3RoOyBpKyspCisJCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnRzW2ldLnJl
c29sdmVkVHlwZTsKKwkJCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJD
dHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgaW5uZXJNZXRob2QpOworCQkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0g
aW5uZXJDdHguaW5mZXJlbmNlS2luZDsKKwkJCQkJfQorCQkJCQlpbmZlckludm9jYXRpb25BcHBs
aWNhYmlsaXR5KHNoYWxsb3dNZXRob2QsIGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXND
b25zdHJ1Y3RvcigpKTsKKwkJCQkJaWYgKCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5m
ZXJQb2x5SW52b2NhdGlvblR5cGUodGhpcywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0
aG9kKSkKKwkJCQkJCXJldHVybiBmYWxzZTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlyZXN1bWVT
dXNwZW5kZWRJbmZlcmVuY2UocHJldkludm9jYXRpb24pOworCQkJCX0KKwkJCX0KKwkJCWludCBh
cHBsaWNhYmlsaXR5S2luZCA9IENIRUNLX0xPT1NFOyAgLy8gRklYTUUsIGZvciA8PiByZXNvbHZp
bmcgdG8gYSBub24tZ2VuZXJpYyBtZXRob2QsIHRoaXMgbmVlZCB0byBiZSBjb21wdXRlZC4KKwkJ
CWlmIChpbm5lck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgeworCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0
SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9k
KTsKKwkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCkgeworCQkJCQlhcHBsaWNhYmlsaXR5S2luZCA9
IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7CisJCQkJfQorCQkJfQorCQkJcmV0dXJuIGFkZENvbnN0
cmFpbnRzVG9DKGludm9jYXRpb24uYXJndW1lbnRzKCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNN
ZXRob2QoKSwgYXBwbGljYWJpbGl0eUtpbmQsIGludGVybGVhdmVkKTsKIAkJfSBlbHNlIGlmIChl
eHByaSBpbnN0YW5jZW9mIENvbmRpdGlvbmFsRXhwcmVzc2lvbikgewogCQkJQ29uZGl0aW9uYWxF
eHByZXNzaW9uIGNlID0gKENvbmRpdGlvbmFsRXhwcmVzc2lvbikgZXhwcmk7Ci0JCQlyZXR1cm4g
YWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYs
IG1ldGhvZCkKLQkJCQkJJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmRmFs
c2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpOworCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9D
X09uZUV4cHIoY2UudmFsdWVJZlRydWUsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGludGVybGVh
dmVkKQorCQkJCQkmJiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZGYWxzZSwg
YywgZnNpLCBzdWJzdEYsIG1ldGhvZCwgaW50ZXJsZWF2ZWQpOwogCQl9CiAJCXJldHVybiB0cnVl
OwogCX0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247816</attachid>
            <date>2014-10-11 05:56:00 -0400</date>
            <delta_ts>2014-10-12 06:11:12 -0400</delta_ts>
            <desc>Incremental fix to bug 432626</desc>
            <filename>432626.patch</filename>
            <type>text/plain</type>
            <size>6236</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDQyZTFlMzQuLjM0ZGY3NzIgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzA1Nyw3ICszMDU3LDcgQEAKIAkJfSwKIAkJIiIpOwog
fQotcHVibGljIHZvaWQgX3Rlc3RCdWc0MzI2MjYoKSB7CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDMy
NjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlN0cmVhbUlu
dGVyZmFjZTIuamF2YSIsCkBAIC0zMTI0LDYgKzMxMjQsMjkgQEAKIAkJCSJ9XG4iCiAJCX0pOwog
fQorcHVibGljIHZvaWQgdGVzdEJ1ZzQzMjYyNl9yZWR1Y2VkKCkgeworCXJ1bkNvbmZvcm1UZXN0
KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC5B
cnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7XG4iICsKKwkJCSJp
bXBvcnQgamF2YS51dGlsLk1hcDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24u
RnVuY3Rpb247XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkicHVi
bGljIGludGVyZmFjZSBYIHtcbiIgKworCQkJIglzdGF0aWMgPFQsIEs+IE1hcDxLLCBBcnJheUxp
c3Q8VD4+IHRlcm1pbmFsQXNNYXBUb0xpc3QoRnVuY3Rpb248PyBzdXBlciBULCA/IGV4dGVuZHMg
Sz4gY2xhc3NpZmllcikgIHtcbiIgKworCQkJIgkJcmV0dXJuIHRlcm1pbmFsQXNDb2xsZWN0ZWQo
Q29sbGVjdG9ycy5ncm91cGluZ0J5KFxuIiArCisJCQkiCQkJICBjbGFzc2lmaWVyLFxuIiArCisJ
CQkiCQkJICAoKSAtPiBuZXcgSGFzaE1hcDw+KCksXG4iICsKKwkJCSIJCQkgIChDb2xsZWN0b3I8
VCxBcnJheUxpc3Q8VD4sQXJyYXlMaXN0PFQ+PikgbnVsbCkpO1xuIiArCisJCQkiCX1cbiIgKwor
CQkJIglzdGF0aWMgPFQsIE0+IE0gdGVybWluYWxBc0NvbGxlY3RlZChDb2xsZWN0b3I8VCwgPywg
TT4gY29sbGVjdG9yKSB7XG4iICsKKwkJCSIJCXJldHVybiBudWxsO1xuIiArCisJCQkiCX1cbiIg
KworCQkJIn1cbiIKKwkJfSk7Cit9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9NDMzODI1IFsxLjhdW2NvbXBpbGVyXSBJbnRlcm5hbCBjb21waWxlciBl
cnJvcjogTnVsbFBvaW50ZXJFeGNlcHRpb24gaW4gQWxsb2NhdGlvbkV4cHJlc3Npb24jcmVzb2x2
ZVBhcnQzCiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDMzODI1KCkgewogCXRoaXMucnVuQ29uZm9ybVRl
c3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0JvdW5kU2V0LmphdmEKaW5kZXggNDBlNTNkZi4uYjkzYzA2MyAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2
YQpAQCAtOTY2LDYgKzk2NiwyMCBAQAogCQlyZXR1cm4gdGhyZWUuZmluZFNpbmdsZVdyYXBwZXJU
eXBlKCk7CiAJfQogCisJcHJpdmF0ZSBUeXBlQmluZGluZyBhcHBseUluc3RhbnRpYXRpb25zKFR5
cGVCaW5kaW5nIHR5cGUpIHsKKwkJaWYgKHR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQorCQkJcmV0
dXJuIHR5cGU7CisJCisJCUl0ZXJhdG9yPEluZmVyZW5jZVZhcmlhYmxlPiB2YXJpYWJsZUl0ID0g
dGhpcy5ib3VuZHNQZXJWYXJpYWJsZS5rZXlTZXQoKS5pdGVyYXRvcigpOworCQl3aGlsZSAodmFy
aWFibGVJdC5oYXNOZXh0KCkpIHsKKwkJCUluZmVyZW5jZVZhcmlhYmxlIGluZmVyZW5jZVZhcmlh
YmxlID0gdmFyaWFibGVJdC5uZXh0KCk7CisJCQlUeXBlQmluZGluZyBpbnN0YW50aWF0aW9uID0g
Z2V0SW5zdGFudGlhdGlvbihpbmZlcmVuY2VWYXJpYWJsZSwgbnVsbCk7CisJCQlpZiAoaW5zdGFu
dGlhdGlvbiAhPSBudWxsKQorCQkJCXR5cGUgPSB0eXBlLnN1YnN0aXR1dGVJbmZlcmVuY2VWYXJp
YWJsZShpbmZlcmVuY2VWYXJpYWJsZSwgaW5zdGFudGlhdGlvbik7CisJCX0KKwkJcmV0dXJuIHR5
cGU7CisJfQorCQogCS8vIHRoaXMgY29uZGl0aW9uIGlzIGp1c3Qgd2F5IHRvbyBjb21wbGV4IHRv
IGNoZWNrIGl0IGluLWxpbmU6CiAJcHVibGljIGJvb2xlYW4gY29uZGl0aW9uMThfNV8yX2J1bGxl
dF8zXzNfMShJbmZlcmVuY2VWYXJpYWJsZSBhbHBoYSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkg
ewogCQkvLyBUIGlzIGEgcmVmZXJlbmNlIHR5cGUsIGJ1dCBpcyBub3QgYSB3aWxkY2FyZC1wYXJh
bWV0ZXJpemVkIHR5cGUsIGFuZCBlaXRoZXIgCkBAIC0xMDAxLDggKzEwMTUsMTYgQEAKIAkJCQlm
b3IgKGludCBqPWkrMTsgajxsZW47IGorKykgewogCQkJCQlUeXBlQmluZGluZyBzMiA9IHN1cGVy
Qm91bmRzLmdldChqKS5yaWdodDsKIAkJCQkJVHlwZUJpbmRpbmdbXSBzdXBlcnMgPSBzdXBlclR5
cGVzV2l0aENvbW1vbkdlbmVyaWNUeXBlKHMxLCBzMik7Ci0JCQkJCWlmIChzdXBlcnMgIT0gbnVs
bCAmJiAhVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHN1cGVyc1swXSwgc3VwZXJzWzFdKSkKLQkJ
CQkJCXJldHVybiB0cnVlOworCQkJCQlpZiAoc3VwZXJzICE9IG51bGwpIHsKKwkJCQkJCS8qIEhh
c2hNYXA8SyM4LFYjOT4gYW5kIEhhc2hNYXA8SyM4LEFycmF5TGlzdDxUPj4gd2l0aCBhbiBpbnN0
YW50aWF0aW9uIGZvciBWOSA9IEFycmF5TGlzdDxUPiBhbHJlYWR5IGluIHRoZSAKKwkJCQkJCSAg
IGJvdW5kIHNldCBzaG91bGQgbm90IGJlIHNlZW4gYXMgdHdvIGRpZmZlcmVudCBwYXJhbWV0ZXJp
emF0aW9ucyBvZiB0aGUgc2FtZSBnZW5lcmljIGNsYXNzIG9yIGludGVyZmFjZS4KKwkJCQkJCSAg
IFNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyNjI2
IGZvciBhIHRlc3QgdGhhdCB0cmlnZ2VycyB0aGlzIGNvbmRpdGlvbi4KKwkJCQkJCSovCisJCQkJ
CQlzdXBlcnNbMF0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1swXSk7CisJCQkJCQlzdXBl
cnNbMV0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sxXSk7CisJCQkJCQlpZiAoIVR5cGVC
aW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkpCisJCQkJCQkJcmV0dXJu
IHRydWU7CisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRU
eXBlRm9ybXVsYS5qYXZhCmluZGV4IDI1ZGNhOTQuLjIwYmE5NWUgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50VHlwZUZvcm11bGEuamF2YQpAQCAtMzU1LDI3ICszNTUsMTMgQEAKIAkJCXJldHVy
biB0cnVlOwogCQlpZiAoIShjYiBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykp
IHsKIAkJCS8vIGlmIEMgaXMgcGFyYW1ldGVyaXplZCB3aXRoIGl0cyBvd24gdHlwZSB2YXJpYWJs
ZXMsIHRoZXJlJ3JlIG5vIG1vcmUgY29uc3RyYWludHMgdG8gYmUgY3JlYXRlZCBoZXJlLCBvdGhl
cndpc2UgbGV0J3MgZmFpbAotCQkJcmV0dXJuIGlzSW5zaWduaWZpY2FudFBhcmFtZXRlcml6ZWQo
Y2EpOworCQkJcmV0dXJuIGNhLmlzUGFyYW1ldGVyaXplZFdpdGhPd25WYXJpYWJsZXMoKTsKIAkJ
fQogCQlUeXBlQmluZGluZ1tdIGJpID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIGNiKS5h
cmd1bWVudHM7CiAJCWlmIChjYi5pc1Jhd1R5cGUoKSB8fCBiaSA9PSBudWxsIHx8IGJpLmxlbmd0
aCA9PSAwKQogCQkJcmV0dXJuICh0aGlzLmlzU29mdCAmJiBJbmZlcmVuY2VDb250ZXh0MTguU0lN
VUxBVEVfQlVHX0pES184MDI2NTI3KSA/IHRydWUgOiBmYWxzZTsgLy8gRkFMU0Ugd291bGQgY29u
Zm9ybSB0byB0aGUgc3BlYyAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBhaS5sZW5ndGg7IGkrKykK
IAkJCWNvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJpW2ldLCBh
aVtpXSwgVFlQRV9BUkdVTUVOVF9DT05UQUlORUQsIHRoaXMuaXNTb2Z0KSk7Ci0JCXJldHVybiB0
cnVlOwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBpc0luc2lnbmlmaWNhbnRQYXJhbWV0ZXJpemVk
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBjYSkgewotCQlUeXBlVmFyaWFibGVCaW5kaW5nW10g
dHlwZVZhcmlhYmxlcyA9IGNhLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcygpOwotCQlUeXBlQmlu
ZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBjYS5hcmd1bWVudHM7Ci0JCWlmICh0eXBlVmFyaWFibGVz
ID09IG51bGwgfHwgdHlwZUFyZ3VtZW50cyA9PSBudWxsKQotCQkJcmV0dXJuIHR5cGVWYXJpYWJs
ZXMgPT0gdHlwZUFyZ3VtZW50czsKLQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IHR5cGVB
cmd1bWVudHMubGVuZ3RoKQotCQkJcmV0dXJuIGZhbHNlOwotCQlmb3IgKGludCBpID0gMDsgaSA8
IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVh
bHModHlwZVZhcmlhYmxlc1tpXSwgdHlwZUFyZ3VtZW50c1tpXSkpCi0JCQkJcmV0dXJuIGZhbHNl
OwotCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9S
YXdUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCmlu
ZGV4IGUxNGM3NWYuLjMxNzAwYWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJp
bmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKQEAgLTIw
NSw2ICsyMDUsMTEgQEAKIAkJfQogCQl0aGlzLmFyZ3VtZW50cyA9IHR5cGVBcmd1bWVudHM7CiAJ
fQorCQkKKwlAT3ZlcnJpZGUgCisJcHVibGljIFR5cGVCaW5kaW5nIHVuY2FwdHVyZShTY29wZSBz
Y29wZSkgeworCQlyZXR1cm4gdGhpczsKKwl9CiAJCiAJQE92ZXJyaWRlCiAJVHlwZUJpbmRpbmcg
c3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKEluZmVyZW5jZVZhcmlhYmxlIHZhciwgVHlwZUJp
bmRpbmcgc3Vic3RpdHV0ZVR5cGUpIHs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247819</attachid>
            <date>2014-10-12 06:11:00 -0400</date>
            <delta_ts>2014-10-13 23:34:19 -0400</delta_ts>
            <desc>Cumulative proposed patch</desc>
            <filename>alternate.patch</filename>
            <type>text/plain</type>
            <size>227147</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uMzg5ZjdhYSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTI1MjAsOSArMjU0OSw4IEBACiAgICAgICAgICAgICAi
fVxuIgogICAgICAgICB9KTsKIH0KLXB1YmxpYyB2b2lkIF90ZXN0QnVnNDI4ODExKCkgewotCS8v
IHBlcmhhcHMgZmFpbCBpcyB0aGUgY29ycmVjdCBhbnN3ZXI/IEZJWE1FOiB2YWxpZGF0ZSEKLQly
dW5OZWdhdGl2ZVRlc3QoCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI4ODExKCkgeworCXJ1bkNvbmZv
cm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIk1vcmVDb2xsZWN0b3JzLmphdmEiLAogCQkJ
ImltcG9ydCBqYXZhLnV0aWwuQWJzdHJhY3RMaXN0O1xuIiArIApAQCAtMjU2OSwxOCArMjU5Nyw3
IEBACiAJCQkiICAgIH1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsg
Ci0JCSIxLiBFUlJPUiBpbiBNb3JlQ29sbGVjdG9ycy5qYXZhIChhdCBsaW5lIDE2KVxuIiArIAot
CQkiCXJldHVybiBDb2xsZWN0b3Iub2YoQXJyYXlMaXN0PFQ+OjpuZXcsXG4iICsgCi0JCSIJICAg
ICAgICAgICAgICAgICBeXlxuIiArIAotCQkiVGhlIG1ldGhvZCBvZihBcnJheUxpc3Q8VD46Om5l
dywgTGlzdDxUPjo6YWRkLCAoPG5vIHR5cGU+IGxlZnQsIDxubyB0eXBlPiByaWdodCkgLT4ge30i
ICsgCi0JCSIsIEltbXV0YWJsZUxpc3Q6OmNvcHlPZikgaXMgdW5kZWZpbmVkIGZvciB0aGUgdHlw
ZSBDb2xsZWN0b3JcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdBUk5JTkcgaW4g
TW9yZUNvbGxlY3RvcnMuamF2YSAoYXQgbGluZSAyMylcbiIgKyAKLQkJIglwdWJsaWMgc3RhdGlj
IDxUPiBJbW11dGFibGVMaXN0PFQ+IGNvcHlPZiAoQ29sbGVjdGlvbjxUPiBjKSB7XG4iICsgCi0J
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29weU9mKENvbGxlY3Rpb248VD4pIGZyb20gdGhl
IHR5cGUgTW9yZUNvbGxlY3RvcnMuSW1tdXRhYmxlTGlzdDxUPiBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIpOworCQkiW2EsIGIsIGNdIik7CiB9CiAvLyBhbGwg
ZXhjZXB0aW9ucyBjYW4gYmUgaW5mZXJyZWQgdG8gbWF0Y2gKIHB1YmxpYyB2b2lkIHRlc3RCdWc0
Mjk0MzAoKSB7CkBAIC0yODQzLDYgKzI4NjAsNyBAQAogCQkJIglwdWJsaWMgRFRlc3QoRnVuY3Rp
b248VCwgVD4gZnVuYykgeyB9XG4iICsgCiAJCQkiCVxuIiArIAogCQkJIglwdWJsaWMgRFRlc3Qo
RFRlc3Q8SW50ZWdlcj4gZHRpKSB7fVxuIiArIAorCQkJIglwdWJsaWMgRFRlc3QoKSB7fVxuIiAr
IAogCQkJIglcbiIgKyAKIAkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJn
cykge1xuIiArIAogCQkJIgkJRFRlc3Q8U3RyaW5nPiB0MSA9IG5ldyBEVGVzdDxTdHJpbmc+KG5l
dyBEVGVzdDxJbnRlZ2VyPigpKTtcbiIgKyAKQEAgLTI4NTAsMTYgKzI4NjgsMTEgQEAKIAkJCSJ9
XG4iCiAJCX0sCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAorCQkiMS4gRVJST1IgaW4gRFRlc3QuamF2YSAoYXQgbGluZSAx
MSlcbiIgKyAKIAkJIglEVGVzdDxTdHJpbmc+IHQxID0gbmV3IERUZXN0PFN0cmluZz4obmV3IERU
ZXN0PEludGVnZXI+KCkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5c
biIgKyAKIAkJIlJlZHVuZGFudCBzcGVjaWZpY2F0aW9uIG9mIHR5cGUgYXJndW1lbnRzIDxTdHJp
bmc+XG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAotCQkiCURUZXN0PFN0cmluZz4gdDEgPSBuZXcgRFRlc3Q8U3Ry
aW5nPihuZXcgRFRlc3Q8SW50ZWdlcj4oKSk7XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgY29u
c3RydWN0b3IgRFRlc3Q8SW50ZWdlcj4oKSBpcyB1bmRlZmluZWRcbiIgKwotCQkiLS0tLS0tLS0t
LVxuIiwKKwkJIi0tLS0tLS0tLS1cbiIsIAogCQludWxsLCB0cnVlLCBjdXN0b21PcHRpb25zKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzAyOTYoKSB7CkBAIC0zMDQyLDE0ICszMDU1LDkgQEAK
IAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEu
IEVSUk9SIGluIENvbGxlY3RvcnNNYXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCi0JCSIJcCAt
PiBwLmxocy5zdHJlYW0oKS5tYXAocDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4iICsgCi0JCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhl
IHR5cGUgU3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KENvbGxlY3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMy1v
ZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsK
KwkJIiIpOwogfQotcHVibGljIHZvaWQgX3Rlc3RCdWc0MzI2MjYoKSB7CitwdWJsaWMgdm9pZCB0
ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJ
IlN0cmVhbUludGVyZmFjZTIuamF2YSIsCkBAIC0zMTEyLDYgKzMxMjAsMjkgQEAKIAkJCSIJc3Rh
dGljIDxUPiBBcnJheUxpc3Q8VD4gY29tYmluZWQoQXJyYXlMaXN0PFQ+IGxlZnQsIEFycmF5TGlz
dDxUPiByaWdodCkge1xuIiArIAogCQkJIgkJbGVmdC5hZGRBbGwocmlnaHQpO1xuIiArIAogCQkJ
IgkJcmV0dXJuIGxlZnQ7XG4iICsgCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9Citw
dWJsaWMgdm9pZCB0ZXN0QnVnNDMyNjI2X3JlZHVjZWQoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5
TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJImltcG9y
dCBqYXZhLnV0aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5j
dGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKwor
CQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyA8VCwgSz4gTWFwPEssIEFycmF5TGlzdDxU
Pj4gdGVybWluYWxBc01hcFRvTGlzdChGdW5jdGlvbjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPiBj
bGFzc2lmaWVyKSAge1xuIiArCisJCQkiCQlyZXR1cm4gdGVybWluYWxBc0NvbGxlY3RlZChDb2xs
ZWN0b3JzLmdyb3VwaW5nQnkoXG4iICsKKwkJCSIJCQkgIGNsYXNzaWZpZXIsXG4iICsKKwkJCSIJ
CQkgICgpIC0+IG5ldyBIYXNoTWFwPD4oKSxcbiIgKworCQkJIgkJCSAgKENvbGxlY3RvcjxULEFy
cmF5TGlzdDxUPixBcnJheUxpc3Q8VD4+KSBudWxsKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQki
CXN0YXRpYyA8VCwgTT4gTSB0ZXJtaW5hbEFzQ29sbGVjdGVkKENvbGxlY3RvcjxULCA/LCBNPiBj
b2xsZWN0b3IpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKIAkJCSIJfVxuIiArCiAJ
CQkifVxuIgogCQl9KTsKQEAgLTMzMjksMTQgKzMzNjAsMTQgQEAKIAkJCSJ9XG4iCiAJCX0sCiAJ
CSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2
YSAoYXQgbGluZSAyMilcbiIgKyAKLQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0J
CSIJICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3Vw
ZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+
LGNhcHR1cmUjMS1vZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCisJCSIxLiBX
QVJOSU5HIGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCSIJ
aW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKKwkJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IGphdmEudXRpbC5m
dW5jdGlvbi5GdW5jdGlvbiBpcyBuZXZlciB1c2VkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJ
CQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCkBAIC0zMzc4LDE3ICszNDA5LDcgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xs
ZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRW
YWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhl
IHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2Jq
ZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFz
cy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAo
cGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkp
O1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZh
bHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3Ig
dGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCkBAIC00
NDA0LDQgKzQ0MjUsMTk5IEBACiAJCQkifVxuIgogCQl9KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBu
ZXN0ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1
bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5QcmVk
aWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgaW50ZXJmYWNlIElMaXN0RW50cnkg
e1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRSZWNvcmRzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIglwcm90
ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJsZVJlY29yZCB7XG4iICsKKwkJCSIJCXB1
YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsgfVxuIiArCisJCQkiCX1cbiIgKworCQkJ
Iglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJlY29yZCB7fVxuIiArCisJCQkiCXB1Ymxp
YyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoRWNsaXBzZUFuZEphdmFjKCkgXG4i
ICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3Ry
ZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiB7XG4iICsK
KwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNvcmQ+IHJlc3VsdDEgPSBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJCXJldHVybiByZXN1bHQxO1xuIiAr
CisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29sbGVjdG9ycy50
b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7CQlcbiIgKwor
CQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVz
V2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVy
biB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQkiCQkJcmV0dXJu
IHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJIgkJCQlyZXR1cm4gZW50cnkudmlzaXRS
ZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJCQkJCQkuZmls
dGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1tdXRhYmxlUmVj
b3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9MaXN0KCkg
KVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExpc3Q6OnN0cmVh
bSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApICk7
XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVibGljIExpc3Q8
SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2UyKCkgXG4iICsK
KwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFt
IC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29s
bGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7
CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4g
Y29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygpIFxuIiArCisJCQkiCXtcbiIgKworCQkJ
IgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiBzdHJlYW0ubWFwKCBl
bnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJc
biIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJ
CQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCgg
Q29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSlcbiIgKworCQkJIgkJCS5mbGF0
TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9D
b2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIgKworCQkJIgkJKTsJCVxuIiArCisJCQki
CX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJlZGljYXRlPFJlY29yZD4gc29tZVByZWRp
Y2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29yZCAtPiB0cnVlO1xuIiArCisJCQkiCX0J
CVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRFbnRyaWVzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xuIiArCisJCQkiCQlyZXR1cm4gZnVuYy5h
cHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5PigpLnN0cmVhbSgpICk7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzODUyLCBbMS44XVtjb21waWxlcl0gSmF2YWMgcmVq
ZWN0cyB0eXBlIGluZmVyZW5jZSByZXN1bHRzIHRoYXQgRUNKIGFjY2VwdHMKK3B1YmxpYyB2b2lk
IHRlc3Q0MzM4NTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5PcHRpb25hbDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4odGVzdChTdHJlYW0ub2YoU3RyZWFtLm9mKFwiM1wiKSkpKTtcbiIg
KworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QyKFN0cmVhbS5vZihTdHJlYW0ub2YoXCIx
XCIpKS5za2lwKDEpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0MzEoU3Ry
ZWFtLm9mKFN0cmVhbS5vZihcIjJcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PiB0ZXN0KFN0cmVhbTxTdHJlYW08U3Ry
aW5nPj4gczMxKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMzEubWFwKHMyIC0+IHMyLm1hcChzMSAt
PiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9iamVjdCB0ZXN0MihTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMzKSB7XG4iICsK
KwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiAr
CisJCQkiCQkgIFguY2xhc3MpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgU3RyZWFt
PE9iamVjdD4gdGVzdDMxKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMpIHtcbiIgKworCQkJIgkJ
cmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5m
aW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTEpXG4iICsgCisJIglyZXR1cm4gczMxLm1hcChzMiAtPiBzMi5tYXAoczEg
LT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55KCk7XG4iICsgCisJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPcHRpb25hbDxTdHJl
YW08SW50ZWdlcj4+IHRvIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PlxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmxh
dE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiArIAorCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1l
dGhvZCBvckVsc2UoSW50ZWdlcikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8SW50ZWdlcj4gaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPFg+KVxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmlu
ZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9iamVjdCgpKSk7XG4iICsgCisJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1ldGhvZCBvckVsc2UoU3RyZWFtPEludGVnZXI+KSBpbiB0
aGUgdHlwZSBPcHRpb25hbDxTdHJlYW08SW50ZWdlcj4+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0
aGUgYXJndW1lbnRzIChTdHJlYW08T2JqZWN0PilcbiIgKyAKKwkiLS0tLS0tLS0tLVxuIik7Cit9
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQyOTE2
LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBlIEluZmVyZW5jZSBpcyBicm9rZW4gZm9yIENvbXBsZXRh
YmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2KCkgeworCXRo
aXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJp
bXBvcnQgc3RhdGljIGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlLmNvbXBs
ZXRlZEZ1dHVyZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgQ29tcGxldGFibGVG
dXR1cmU8SW50ZWdlcj4gY2YoaW50IHZhbHVlKSB7XG4iICsKKwkJCSIJCXJldHVybiBjb21wbGV0
ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCWNmKDEpLnRoZW5Db21w
b3NlKCh4SW50KSAtPiBjZigyKS50aGVuQXBwbHkoKHpJbnQpIC0+IEFycmF5cy5hc0xpc3QoeElu
dCwgekludCkpKVxuIiArCisJCQkiCQkudGhlbkFjY2VwdCgoaW50cykgLT4ge1xuIiArCisJCQki
CQkJLyogISEhISBpbnRzIGlzIGluY29ycmVjdGx5IGluZmVycmVkIHRvIGJlIGFuIE9iamVjdCwg
YnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4gKi9cbiIgKworCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bihpbnRzLmdldCgwKSArIGludHMuZ2V0KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7XG4iICsKKwkJ
CSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIjMiKTsKK30KKy8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDI3NjksIFsx
LjhdW2NvbXBpbGVyXSBJbnZhbGlkIHR5cGUgaW5mZXJlbmNlIHVzaW5nIFN0cmVhbSAgCitwdWJs
aWMgdm9pZCB0ZXN0NDQyNzY5KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5QYXRoO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTWFwO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVh
bS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xu
IiArCisJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJIgkJTWFwPE9iamVjdCwgSW50ZWdlcj4gYWxsb2NhdGVkID0gbmV3IEhhc2hN
YXA8PigpO1xuIiArCisJCQkiCQkgICBBcnJheXMuYXNMaXN0KFwiYVwiLCBcImJcIiwgXCJjXCIs
IFwiZFwiLCBcImVcIikgLy8gTGlzdDxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5zdHJl
YW0oKSAvLyBTdHJlYW08U3RyaW5nPlxuIiArCisJCQkiCSAgICAgICAgICAubWFwKFBhdGhzOjpn
ZXQpIC8vIFN0cmVhbTxQYXRoPlxuIiArCisJCQkiCSAgICAgICAgICAuZmxhdE1hcChwYXRoIC0+
IGFsbG9jYXRlZC5rZXlTZXQoKSAvLyBTZXQ8T2JqZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08T2JqZWN0PlxuIiAr
CisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZ3JvdXAgLT4g
UGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVjdCxQYXRoPiovKSAvLyBTdHJlYW08UGFp
cjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICApIC8vIFN0cmVhbTxPYmplY3Q+
IFtGQUlMXVxuIiArCisJCQkiCSAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgp
KSAvLyBMaXN0PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgLmZvckVhY2goaXRlbSAtPiBT
eXN0ZW0ub3V0LnByaW50bG4oaXRlbS5nZXRLZXkoKSArIFwiOiBcIiArIGl0ZW0uZ2V0VmFsdWUo
KSkpOyAvLyBDb25zdW1lcjw/IHN1cGVyIE9iamVjdD5cbiIgKworCQkJIgkgICAgLy8gd2l0aCBl
eHBsaWNpdCB0eXBlXG4iICsKKwkJCSIJICAgIEFycmF5cy5hc0xpc3QoXCJhXCIsIFwiYlwiLCBc
ImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkgICAgICAgICAg
LnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5tYXAoUGF0
aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5mbGF0TWFwKHBh
dGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxPYmplY3Q+
XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLjxQYWlyPE9i
amVjdCxQYXRoPj5tYXAoZ3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVj
dCxQYXRoPiovKSAvLyBTdHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAg
ICAgICApIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJICAgICAgICAg
IC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpIC8vIExpc3Q8UGFpcjxPYmplY3QsIFBhdGg+
PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChpdGVtIC0+IFN5c3RlbS5vdXQucHJpbnRs
bihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5nZXRWYWx1ZSgpKSk7IC8vIENvbnN1bWVy
PD8gc3VwZXIgUGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIg
KworCQkJImFic3RyYWN0IGNsYXNzIFBhaXI8TCwgUj4gaW1wbGVtZW50cyBNYXAuRW50cnk8TCwg
Uj4sIENvbXBhcmFibGU8UGFpcjxMLCBSPj4sIFNlcmlhbGl6YWJsZSB7XG4iICsKKwkJCSIgICAg
cHVibGljIHN0YXRpYyA8TCwgUj4gUGFpcjxMLCBSPiBvZihmaW5hbCBMIGxlZnQsIGZpbmFsIFIg
cmlnaHQpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxu
IiArCisJCQkiICAgIHB1YmxpYyBmaW5hbCBMIGdldEtleSgpIHtcbiIgKworCQkJIiAgICAgICAg
cmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBSIGdldFZh
bHVlKCkge1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgICB9XG4i
ICsKKwkJCSJ9XG4iCisJCX0sCisJCSIiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYjA1
OTg1Yi4uZDM5MDU3MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTQxNjMsNyArNDE2Myw3IEBACiAJ
CSJPSyIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQzMjY4MiwgWzEuOF1bY29tcGlsZXJdIFR5cGUgbWlzbWF0Y2ggZXJyb3Igd2l0aCBsYW1i
ZGEgZXhwcmVzc2lvbgotcHVibGljIHZvaWQgX3Rlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9u
IHsKK3B1YmxpYyB2b2lkIHRlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBAIC00MTgxLDcg
KzQxODEsNyBAQAogCQkJIgl9XG4iICsKIAkJCSJ9XG4iCiAJCX0sCi0JCSJPSyIpOworCQkidHJ1
ZSIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTQzMjUyMCwgY29tcGlsZXIgImR1cGxpY2F0ZSBtZXRob2QiIGJ1ZyB3aXRoIGxhbWRhcyBhbmQg
Z2VuZXJpYyBpbnRlcmZhY2VzIAogcHVibGljIHZvaWQgdGVzdDQzMjUyMCgpIHRocm93cyBFeGNl
cHRpb24gewpAQCAtNDI5MCwxMyArNDI5MCwxOCBAQAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsgCiAJCQkiCXBlcnNvbnMuc29y
dChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxzTGFzdChQZXJzb246OjxSdW5u
YWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAotCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5cbiIgKyAKLQkJCSJUaGUgbWV0aG9kIG51bGxz
TGFzdChDb21wYXJhdG9yPD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFi
bGUpXG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAor
CQkJIlRoZSBtZXRob2QgY29tcGFyaW5nKEZ1bmN0aW9uPD8gc3VwZXIgVCw/IGV4dGVuZHMgVT4p
IGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKENvbXBhcmF0b3I8T2JqZWN0PilcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQki
Mi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIxKVxuIiArIAogCQkJIglwZXJzb25zLnNvcnQo
Q29tcGFyYXRvci5jb21wYXJpbmcoQ29tcGFyYXRvci5udWxsc0xhc3QoUGVyc29uOjo8UnVubmFi
bGU+aXNSdW5uYWJsZSkpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb21wYXJhdG9y
PE9iamVjdD4gdG8gRnVuY3Rpb248PyBzdXBlciBULD8gZXh0ZW5kcyBVPlxuIiArIAorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CisJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpAQCAt
NDg4Miw2ICs0ODg3LDg2IEBACiAJCX0sCiAJCSIiKTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MDUsIFsxLjhdIEluY29ycmVjdCBlcnJv
ciAiVGhlIHR5cGUgQXJyYXlMaXN0PFQ+IGRvZXMgbm90IGRlZmluZSBhZGQoQXJyYXlMaXN0PFQ+
LCBPYmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlIgorcHVibGljIHZvaWQgdGVzdDQzMjYw
NSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2
YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuIiArCisJCQkiaW1wb3J0IGph
dmEudXRpbC5IYXNoTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5j
dGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uU3VwcGxpZXI7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQg
amF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5z
dHJlYW0uU3RyZWFtO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkic3RhdGlj
IDxULCBFIGV4dGVuZHMgRXhjZXB0aW9uLCBLLCBMLCBNPiBNIHRlcm1pbmFsQXNNYXBUb0xpc3Qo
XG4iICsKKwkJCSIgICAgRnVuY3Rpb248PyBzdXBlciBULCA/IGV4dGVuZHMgSz4gY2xhc3NpZmll
cixcbiIgKworCQkJIiAgICBGdW5jdGlvbjxIYXNoTWFwPEssIEw+LCBNPiBpbnRvTWFwLFxuIiAr
CisJCQkiICAgIEZ1bmN0aW9uPEFycmF5TGlzdDxUPiwgTD4gaW50b0xpc3QsXG4iICsKKwkJCSIg
ICAgU3VwcGxpZXI8U3RyZWFtPFQ+PiBzdXBwbGllcixcbiIgKworCQkJIiAgICBDbGFzczxFPiBj
bGFzc09mRSkgdGhyb3dzIEUge1xuIiArCisJCQkiICAJcmV0dXJuIHRlcm1pbmFsQXNDb2xsZWN0
ZWQoXG4iICsKKwkJCSIgIAkgIGNsYXNzT2ZFLFxuIiArCisJCQkiICAJICBDb2xsZWN0b3JzLmNv
bGxlY3RpbmdBbmRUaGVuKFxuIiArCisJCQkiICAJICAgIENvbGxlY3RvcnMuZ3JvdXBpbmdCeShc
biIgKworCQkJIiAgCSAgICAgIGNsYXNzaWZpZXIsXG4iICsKKwkJCSIgIAkgICAgICBIYXNoTWFw
PEssIEw+OjpuZXcsXG4iICsKKwkJCSIgIAkgICAgICBDb2xsZWN0b3JzLmNvbGxlY3RpbmdBbmRU
aGVuKFxuIiArCisJCQkiICAJICAgICAgCS8vIFRoZSB0eXBlIEFycmF5TGlzdDxUPiBkb2VzIG5v
dCBkZWZpbmUgYWRkKEFycmF5TGlzdDxUPiwgT2JqZWN0KSB0aGF0IGlzIGFwcGxpY2FibGUgaGVy
ZVxuIiArCisJCQkiICAJICAgICAgCS8vIGZyb20gQXJyYXlMaXN0PFQ+OjphZGQ6XG4iICsKKwkJ
CSIgIAkgICAgICAgIENvbGxlY3Rvci5vZihBcnJheUxpc3Q8VD46Om5ldywgQXJyYXlMaXN0PFQ+
OjphZGQsIChBcnJheUxpc3Q8VD4gbGVmdCwgQXJyYXlMaXN0PFQ+IHJpZ2h0KSAtPiB7IFxuIiAr
CisJCQkiICAJCSAgICAgICAgbGVmdC5hZGRBbGwocmlnaHQpO1xuIiArCisJCQkiICAJCSAgICAg
ICAgcmV0dXJuIGxlZnQ7XG4iICsKKwkJCSIgIAkgICAgICAgIH0pLFxuIiArCisJCQkiICAJICAg
ICAgICBpbnRvTGlzdCkpLFxuIiArCisJCQkiICAJICAgIGludG9NYXApLFxuIiArCisJCQkiICAJ
ICBzdXBwbGllcik7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIglzdGF0aWMgPEUgZXh0ZW5kcyBF
eGNlcHRpb24sIFQsIE0+IE0gdGVybWluYWxBc0NvbGxlY3RlZChcbiIgKworCQkJIiAgICBDbGFz
czxFPiBjbGFzczEsXG4iICsKKwkJCSIgICAgQ29sbGVjdG9yPFQsID8sIE0+IGNvbGxlY3Rvcixc
biIgKworCQkJIiAgICBTdXBwbGllcjxTdHJlYW08VD4+IHN1cHBsaWVyKSB0aHJvd3MgRSB7XG4i
ICsKKwkJCSIgIAl0cnkoU3RyZWFtPFQ+IHMgPSBzdXBwbGllci5nZXQoKSkge1xuIiArCisJCQki
ICAJCXJldHVybiBzLmNvbGxlY3QoY29sbGVjdG9yKTtcbiIgKworCQkJIiAgCX0gY2F0Y2goUnVu
dGltZUV4Y2VwdGlvbiBlKSB7XG4iICsKKwkJCSIgIAkJdGhyb3cgdW53cmFwQ2F1c2UoY2xhc3Mx
LCBlKTtcbiIgKworCQkJIiAgCX1cbiIgKworCQkJIiAgfVxuIiArCisJCQkiCXN0YXRpYyA8RSBl
eHRlbmRzIEV4Y2VwdGlvbj4gRSB1bndyYXBDYXVzZShDbGFzczxFPiBjbGFzc09mRSwgUnVudGlt
ZUV4Y2VwdGlvbiBlKSB0aHJvd3MgRSB7XG4iICsKKwkJCSIJCVRocm93YWJsZSBjYXVzZSA9IGUu
Z2V0Q2F1c2UoKTtcbiIgKworCQkJIgkJaWYoY2xhc3NPZkUuaXNJbnN0YW5jZShjYXVzZSkgPT0g
ZmFsc2UpIHtcbiIgKworCQkJIgkJCXRocm93IGU7XG4iICsKKwkJCSIJCX1cbiIgKworCQkJIgkJ
dGhyb3cgY2xhc3NPZkUuY2FzdChjYXVzZSk7XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJ9XG4iCisJ
fSwKKwkiIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9NDMyNjA1LCBbMS44XSBJbmNvcnJlY3QgZXJyb3IgIlRoZSB0eXBlIEFycmF5TGlzdDxU
PiBkb2VzIG5vdCBkZWZpbmUgYWRkKEFycmF5TGlzdDxUPiwgT2JqZWN0KSB0aGF0IGlzIGFwcGxp
Y2FibGUgaGVyZSIKK3B1YmxpYyB2b2lkIHRlc3RyZWR1Y2VkNDMyNjA1KCkgeworCXRoaXMucnVu
Q29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0
IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7
XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yO1xuIiArCisJCQkiaW1wb3J0IGphdmEu
dXRpbC5zdHJlYW0uQ29sbGVjdG9ycztcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIiAgICBzdGF0aWMgPFQsIEssIEwsIE0+IHZvaWQgZm9vKCkge1xuIiArCisJCQkiCUNvbGxl
Y3RvcjxULCA/LCBNPiBjYXQgPSBcbiIgKworCQkJIiAgICAgICAgICAgIENvbGxlY3RvcnMuY29s
bGVjdGluZ0FuZFRoZW4oXG4iICsKKwkJCSIJCUNvbGxlY3RvcnMuZ3JvdXBpbmdCeSgoRnVuY3Rp
b248PyBzdXBlciBULCA/IGV4dGVuZHMgSz4pIG51bGwsIFxuIiArCisJCQkiCQkJCUhhc2hNYXA8
SywgTD46Om5ldywgXG4iICsKKwkJCSIJCQkJKENvbGxlY3RvcjxULCBBcnJheUxpc3Q8VD4sIEw+
KSBudWxsKSwgXG4iICsKKwkJCSIJCQkJKEZ1bmN0aW9uPEhhc2hNYXA8SywgTD4sIE0+KSBudWxs
KTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiIik7Cit9CiBwdWJsaWMgc3Rh
dGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNs
YXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRp
dmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzUwMTEwOS4uZjM1
ZGFmOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVM
YW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05MTE4LDExICs5MTE4
LDEyIEBACiAJCQkiCX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5vdGU6IG5ldyBtZXNz
YWdlIGFsaWducyBiZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0tLS0tLVxuIiArIAog
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJRnVuY3Rpb248Q0w8
SW50ZWdlcj4sIFN0cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJIgkgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdHlwZSBD
TCBkb2VzIG5vdCBkZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBpcyBhcHBsaWNhYmxl
IGhlcmVcbiIgKyAKKwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9u
LXN0YXRpYyBtZXRob2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxuIiArIAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJ
CSIJdjUgPSB0IC0+IHQubWV0aG9kMSgpOwlcbiIgKyAKQEAgLTk2NDEsNyArOTY0Miw3IEBACiAJ
Ii0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQ0MjQ0NiwgWzEuOF1bY29tcGlsZXJdIGNvbXBpbGVyIHVuYWJsZSB0byBp
bmZlciBsYW1iZGEncyBnZW5lcmljIGFyZ3VtZW50IHR5cGVzCi1wdWJsaWMgdm9pZCBfdGVzdDQ0
MjQ0NigpIHsKK3B1YmxpYyB2b2lkIHRlc3Q0NDI0NDYoKSB7CiAJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwgCkBAIC05NzA1LDcgKzk3MDYsNDgg
QEAKIAkJCSIJfVxuIiArCiAJCQkifVxuIiAKIAl9LAotCSIiKTsKKwkiLS0tLS0tLS0tLVxuIiAr
IAorCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCisJIglCaW5hcnlPcGVy
YXRvcjxTdWJzdW1lcjw/IHN1cGVyIFQ+PiBhdHRlbXB0X1hfMyA9IFN1YnN1bWVyOjphbmRUaGUz
O1xuIiArIAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBeXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCSJUaGUgdHlwZSBTdWJzdW1lciBkb2VzIG5v
dCBkZWZpbmUgYW5kVGhlMyhTdWJzdW1lcjxjYXB0dXJlIzUtb2YgPyBzdXBlciBUPiwgU3Vic3Vt
ZXI8Y2FwdHVyZSM1LW9mID8gc3VwZXIgVD4pIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsg
CisJIi0tLS0tLS0tLS1cbiIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMzYsICBOUEUgaW4gYnJva2VuIGNvZGUKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzc0NDQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0
cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJTGlzdDxQ
ZXJzb24+IHJvc3RlciA9IG5ldyBBcnJheUxpc3Q8PigpO1xuIiArCisJCQkiICAgICAgICBNYXA8
U3RyaW5nLCBQZXJzb24+IG1hcCA9IFxuIiArCisJCQkiICAgICAgICAgICAgcm9zdGVyXG4iICsK
KwkJCSIgICAgICAgICAgICAgICAgLnN0cmVhbSgpXG4iICsKKwkJCSIgICAgICAgICAgICAgICAg
LmNvbGxlY3QoXG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICAgIENvbGxlY3RvcnMudG9NYXAo
XG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBQZXJzb246OmdldExhc3QsXG4iICsK
KwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbi5pZGVudGl0eSgpIFxuIiArCisJ
CQkiICAgICAgICAgICAgICAgICAgICApKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iICsK
KwkJCSJjbGFzcyBQZXJzb24ge1xuIiArCisJCQkifVxuIiAKKwl9LAorCSItLS0tLS0tLS0tXG4i
ICsgCisJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCSIJTWFwPFN0cmlu
ZywgUGVyc29uPiBtYXAgPSBcbiIgKyAKKwkiCV5eXlxuIiArIAorCSJNYXAgY2Fubm90IGJlIHJl
c29sdmVkIHRvIGEgdHlwZVxuIiArIAorCSItLS0tLS0tLS0tXG4iICsgCisJIjIuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkiCUZ1bmN0aW9uLmlkZW50aXR5KCkgXG4iICsg
CisJIgleXl5eXl5eXlxuIiArIAorCSJGdW5jdGlvbiBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAK
KwkiLS0tLS0tLS0tLVxuIik7CiB9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsK
IAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0
LmphdmEKaW5kZXggNTNmYzU5OS4uZTAzMDNmNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNjc0
MCw2ICs2NzQwLDcgQEAKIAkJCSJ9XG4iICsKIAkJCSJ9XG4iLAogCQl9LAorCQkvLyBOb3RlOiB3
ZSB1c2VkIHRvIGVtaXQgYSBkdXBsaWNhdGUgbWVzc2FnZSBvZiAyLiBGaXhlZC4KIAkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkp
XG4iICsgCiAJCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQo
cCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIApAQCAtNjc0NywxMSArNjc0OCw2IEBACiAJ
CSJUaGUgY29uc3RydWN0b3IgUGFpcjxQYXRoLE9iamVjdD4oUGF0aCwgKDxubyB0eXBlPiBwKSAt
PiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJP
UiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAotCQkiCWZpbHRlcjIubWFw
KHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkp
KTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhp
cyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAotCQkiLS0t
LS0tLS0tLVxuIiArIAotCQkiMy4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUg
OSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdl
dChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAog
CQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25h
bCBpbnRlcmZhY2VcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXggZWQyMDRiNS4uNGYxYWNlYSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEK
QEAgLTYwLDEwICs2MCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuUGFja2FnZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
U2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5T
b3VyY2VUeXBlQmluZGluZzsKQEAgLTY1MCwxMjAgKzY0Nyw0MSBAQAogCS8qKgogCSAqIEFmdGVy
IG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5
IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRo
ZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGlt
cHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYg
dGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1
cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVu
ZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGlu
IGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9j
YXRpb24gdGhlIG91dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBA
cGFyYW0gbWV0aG9kQmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2li
bHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0
aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBp
bnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIG1ldGhvZCBsb29r
dXAuCi0JICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFy
YW0gbWV0aG9kIHRoZSBtZXRob2QgcHJvZHVjZWQgYnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZp
bmcgdHlwZSBpbmZlcmVuY2UpLgorCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVu
dCB0eXBlcyBhcyBjb2xsZWN0ZWQgZnJvbSBmaXJzdCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24g
YXJndW1lbnRzIGFuZCBhcyB1c2VkIGZvciB0aGUgbWV0aG9kIGxvb2t1cC4KKwkgKiBAcGFyYW0g
c2NvcGUgc2NvcGUgZm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJl
c29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhv
ZEJpbmRpbmcgbWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29w
ZSBzY29wZSkgewotCQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1Ymxp
YyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBp
bnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5
cGVzLCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9k
ID0gbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQ
cm9ibGVtTWV0aG9kQmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xv
c2VzdE1hdGNoIDogbnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0
dXJuOwotCQlpbnQgcHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRl
TWV0aG9kOwotCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5k
aWRhdGVNZXRob2QgPSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcg
aW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1l
dGhvZEJpbmRpbmcucHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0J
CQljYW5kaWRhdGVNZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0g
bnVsbCkgewotCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFy
YXJncygpOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2Fu
ZGlkYXRlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJ
CQlpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRN
ZXRob2RCaW5kaW5nKSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkg
ewotCQkJCQlpZiAoaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZ
UEVfSU5GRVJSRUQpIHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2Yg
VFlQRV9JTkZFUlJFRAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJ
CQkvLyAtIGFib3ZlIHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJ
CX0KLQkJCQkJdmFyaWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlm
IG5vIGluZkN0eCBpcyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBp
cyBhIHZhcmFyZ3MgaW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24g
aW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25F
eHByZXNzaW9uKWludm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQot
CQkJCQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJp
bmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHBy
ZXNzaW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhw
cmVzc2lvbiBbXSBhcmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0g
bnVsbCAmJiB2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMu
bGVuZ3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGlu
ZyBsYXN0UGFyYW0gPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJl
c3Npb24gbGFzdEFyZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChs
YXN0QXJnLmlzQ29tcGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJs
ZUFyaXR5ID0gZmFsc2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9
IGFyZ3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJp
bmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1l
dGVyVHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwg
dmFyaWFibGVBcml0eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVt
UmVhc29uICE9IFByb2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3Qg
bXVjaCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBw
ZW5zIGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNF
cnJvcnMoKSkKLQkJCQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhh
cyBlcnJvcnMKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJ
CQkJSW52b2NhdGlvbiBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJ
CQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1l
dGVyVHlwZSwgdHJ1ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVy
Q29udGV4dCA9IGlubmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6
ZWRNZXRob2QpOwotCQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYg
KCFpbm5lckNvbnRleHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFy
Z3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmlu
ZGluZyBpbXByb3ZlZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShp
bm5lckludm9jYXRpb24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJv
dmVkQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVw
b3J0SW52YWxpZEludm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwot
CQkJCQkJCQl9Ci0JCQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1w
cm92ZWRCaW5kaW5nLCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHBy
ZXNzaW9uQXJndW1lbnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7
Ci0JCQkJCQkJCX0KLQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVk
IDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJD
b250ZXh0LnJlYmluZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2Nh
dGlvbik7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0
aGVzZSBoYXZlIGJlZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJ
CQl9Ci0JCQkJfQotCi0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJ
CQkvLyBwb2x5IGV4cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0
byBiZSByZXNvbHZlZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3Rl
cENvbXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJ
CXVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMg
Y2FzZSBhcmd1bWVudCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4
LmFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFy
Z3VtZW50VHlwZSA9IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0
ZXJUeXBlLCBzY29wZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNv
bnMuTm9FcnJvciAvLyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRU
eXBlICE9IG51bGwJCQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJ
CQkJCSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykp
Ci0JCQkJCXsKLQkJCQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9z
ZWQgdG8gYmUgb3duZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIg
dG8gZ2l2ZSBiZXR0ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlh
cmd1bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJ
Ym9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlm
aW5hbCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVy
czsKKwkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJ
CWlmICh2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVu
Z3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxl
bmd0aC0xXS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0s
IHNjb3BlKSkgeworCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZv
Y2F0aW9uLmlubmVyVXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RC
aW5kaW5nIG1ldGhvZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJn
dW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9j
YXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlh
cmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0J
CQlmb3IgKGludCBpID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFy
Z3VtZW50VHlwZXNbaV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVu
Z3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVu
dHNbaV07CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4
LmdldFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJh
bWV0ZXJUeXBlID09IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3
aXRob3V0IGEgdGFyZ2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSBy
ZXNvbHZlIGVycm9yCisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJ
CQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRp
bmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJ
CQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBM
RS5yZXNvbHZlVHlwZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUg
ZG9lcyBub3QgZGV0ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxh
bWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJ
CQlpZiAoIWxhbWJkYS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBs
YW1iZGEuaGFzRXJyb3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0
ZWRBcmd1bWVudFR5cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBC
aW5kaW5nLlBPTFlfVFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVu
dFR5cGU7CisJCQl9CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9j
YXRpb24sIG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJs
aWMgc3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90
YXRpb25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAwMGE0NzEyLi4yOTNiYTRlIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03NywzMCArNzcsMTAgQEAKIAogCSAvLyBob2xk
IG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVu
Y2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUp
OgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQTUIsSUMxOD4qLyBpbmZlcmVuY2VDb250
ZXh0czsKLQlwcm90ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxw
ZXI7CisJcHJpdmF0ZSBib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKIAlwdWJsaWMgVHlwZUJpbmRp
bmdbXSBhcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19QQVJBTUVURVJTOwotCXB1YmxpYyBib29s
ZWFuIGFyZ3VtZW50c0hhdmVFcnJvcnM7Ci0KLQkvKiogUmVjb3JkIHRvIGtlZXAgc3RhdGUgYmV0
d2VlbiBkaWZmZXJlbnQgcGFydHMgb2YgcmVzb2x1dGlvbi4gKi8KLQlSZXNvbHV0aW9uU3RhdGUg
c3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlOwotCWNsYXNzIFJlc29sdXRpb25TdGF0ZSB7Ci0JCUJs
b2NrU2NvcGUgc2NvcGU7Ci0JCWJvb2xlYW4gaXNEaWFtb25kOwotCQlib29sZWFuIGRpYW1vbmRO
ZWVkc0RlZmVycmluZzsKLQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7Ci0JCWJvb2xlYW4gY2Fu
bm90SW5mZXJEaWFtb25kOyAvLyByZXF1ZXN0IHRoZSBhbiBlcnJvciBiZSByZXBvcnRlZCBpbiBk
dWUgdGltZQotCQlib29sZWFuIGhhc1JlcG9ydGVkRXJyb3I7Ci0KLQkJUmVzb2x1dGlvblN0YXRl
KEJsb2NrU2NvcGUgc2NvcGUsIGJvb2xlYW4gaXNEaWFtb25kLCBib29sZWFuIGRpYW1vbk5lZWRz
RGVmZXJyaW5nLAotCQkJCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0LCBUeXBlQmluZGluZ1tdIGFy
Z3VtZW50VHlwZXMpCi0JCXsKLQkJCXRoaXMuc2NvcGUgPSBzY29wZTsKLQkJCXRoaXMuaXNEaWFt
b25kID0gaXNEaWFtb25kOwotCQkJdGhpcy5kaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBkaWFtb25O
ZWVkc0RlZmVycmluZzsKLQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gYXJnc0NvbnRhaW5DYXN0
OwotCQl9Ci0JfQotCisJcHVibGljIGJvb2xlYW4gYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNl
OworCQogcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3Bl
LCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAkvLyBjaGVj
ayBjYXB0dXJlZCB2YXJpYWJsZXMgYXJlIGluaXRpYWxpemVkIGluIGN1cnJlbnQgY29udGV4dCAo
MjYxMzQpCiAJY2hlY2tDYXB0dXJlZExvY2FsSW5pdGlhbGl6YXRpb25JZk5lY2Vzc2FyeSgoUmVm
ZXJlbmNlQmluZGluZyl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuZXJhc3VyZSgpLCBjdXJy
ZW50U2NvcGUsIGZsb3dJbmZvKTsKQEAgLTM0MSw3ICszMjEsNiBAQAogCS8vIFByb3BhZ2F0ZSB0
aGUgdHlwZSBjaGVja2luZyB0byB0aGUgYXJndW1lbnRzLCBhbmQgY2hlY2sgaWYgdGhlIGNvbnN0
cnVjdG9yIGlzIGRlZmluZWQuCiAJZmluYWwgYm9vbGVhbiBpc0RpYW1vbmQgPSB0aGlzLnR5cGUg
IT0gbnVsbCAmJiAodGhpcy50eXBlLmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMDsKIAlm
aW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRp
b25zKCk7Ci0JYm9vbGVhbiBkaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBmYWxzZTsKIAlsb25nIHNv
dXJjZUxldmVsID0gY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsOwogCWlmICh0aGlzLmNvbnN0
YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkgewogCQl0aGlzLmNvbnN0YW50ID0gQ29uc3Rh
bnQuTm90QUNvbnN0YW50OwpAQCAtMzUwLDE3OCArMzI5LDE1NiBAQAogCQkJdGhpcy5yZXNvbHZl
ZFR5cGUgPSBzY29wZS5lbmNsb3NpbmdSZWNlaXZlclR5cGUoKTsKIAkJfSBlbHNlIHsKIAkJCXRo
aXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNo
ZWNrIGJvdW5kcyovKTsKLQkJCWlmIChpc0RpYW1vbmQgJiYgdGhpcy50eXBlRXhwZWN0ZWQgPT0g
bnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCAmJiBz
b3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKHRoaXMu
cmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmco
KSkKLQkJCQkJZGlhbW9uZE5lZWRzRGVmZXJyaW5nID0gdHJ1ZTsKLQkJCX0KIAkJfQotCX0gZWxz
ZSB7Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZTsKLQl9Ci0K
LQlpZiAodGhpcy50eXBlICE9IG51bGwpIHsKLQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90YXRpb24o
c2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKLQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlv
bjogewotCQkJaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRU
eXBlUmVmZXJlbmNlKSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0cmluZz4uWTxJbnRlZ2VyPigpCi0J
CQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKXRoaXMu
cmVzb2x2ZWRUeXBlOwotCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVu
dFR5cGU7Ci0JCQkJZG8gewotCQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dlcmluZyB0cnVlIGZv
ciB0b3BsZXZlbCB0eXBlcwotCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNz
RmlsZUNvbnN0YW50cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb247Ci0JCQkJCWlmIChjdXJyZW50VHlwZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQ
YXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKLQkJCQl9IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJy
ZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVsbCk7Ci0JCQkJUGFyYW1ldGVyaXplZFF1YWxp
ZmllZFR5cGVSZWZlcmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVy
ZW5jZSkgdGhpcy50eXBlOwotCQkJCWZvciAoaW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVu
Z3RoIC0gMjsgaSA+PSAwOyBpLS0pIHsKLQkJCQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAh
PSBudWxsKSB7Ci0JCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVhbGlmaWVk
UGFyYW1ldGVyaXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUp
OwotCQkJCQkJYnJlYWs7CisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkgeworCQkJY2hlY2tJbGxl
Z2FsTnVsbEFubm90YXRpb24oc2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCWNoZWNrUGFy
YW1ldGVyaXplZEFsbG9jYXRpb246IHsKKwkJCQlpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3Ry
aW5nPi5ZPEludGVnZXI+KCkKKwkJCQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChS
ZWZlcmVuY2VCaW5kaW5nKXRoaXMucmVzb2x2ZWRUeXBlOworCQkJCQlpZiAoY3VycmVudFR5cGUg
PT0gbnVsbCkgcmV0dXJuIGN1cnJlbnRUeXBlOworCQkJCQlkbyB7CisJCQkJCQkvLyBpc1N0YXRp
YygpIGlzIGFuc3dlcmluZyB0cnVlIGZvciB0b3BsZXZlbCB0eXBlcworCQkJCQkJaWYgKChjdXJy
ZW50VHlwZS5tb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBi
cmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQkJaWYgKGN1cnJlbnRUeXBl
LmlzUmF3VHlwZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQl9
IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVs
bCk7CisJCQkJCVBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFy
YW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHRoaXMudHlwZTsKKwkJCQkJZm9yIChp
bnQgaSA9IHFSZWYudHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgeworCQkJ
CQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAhPSBudWxsKSB7CisJCQkJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaWxsZWdhbFF1YWxpZmllZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlv
bih0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCQkJCQlicmVhazsKKwkJCQkJCX0K
IAkJCQkJfQogCQkJCX0KIAkJCX0KIAkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFm
dGVyIGFyZ3MgYXJlIHJlc29sdmVkCisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJn
cyBhcmUgcmVzb2x2ZWQKIAotCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmlj
IGNvbnN0cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0J
CWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50
c0hhdmVFcnJvcnMgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0J
CXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBl
UmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAv
KiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKLQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJv
cnMgPSB0cnVlOwotCQkJfQotCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBl
UmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwotCQkJfQotCQl9Ci0J
CWlmIChpc0RpYW1vbmQpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RX
aXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRoaXMudHlwZUFyZ3VtZW50cyk7Ci0JCQlyZXR1cm4g
bnVsbDsKLQkJfQotCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhp
cy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1l
bnRzCi0JCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8
IG1heDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsK
KwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2Fs
bCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0g
dGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9
IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKKwkJCXRoaXMuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkg
PSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2Ug
PSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1l
bnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBi
b3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1
ZTsKKwkJCQl9CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJl
bmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
aWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKIAkJCQl9CiAJCQl9Ci0JCQly
ZXR1cm4gbnVsbDsKKwkJCWlmIChpc0RpYW1vbmQpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVu
dHMpOworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVy
cm9ycykgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVt
cHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKKwkJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMu
YXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQl0aGlzLmFyZ3VtZW50c1tp
XS5yZXNvbHZlVHlwZShzY29wZSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJ
CQl9CiAJCX0KLQl9CiAKLQkvLyBidWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKLQlib29s
ZWFuIGFyZ3NDb250YWluQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxs
KSB7Ci0JCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOwotCQlpbnQgbGVuZ3RoID0g
dGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJ
RXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3VtZW50
IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFyZ3ND
b250YWluQ2FzdCA9IHRydWU7CisJCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBlcwor
CQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJy
b3JzID0gZmFsc2U7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJ
dGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRo
aXMuYXJndW1lbnRzW2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNz
aW9uKSB7CisJCQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNr
OyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1
ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9D
T05URVhUKTsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwp
IAorCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFy
Z3VtZW50IHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5M
Uy0xJAorCQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5
cGUoc2NvcGUpKSA9PSBudWxsKSB7CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRy
dWU7CisJCQkJfQogCQkJfQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NB
VElPTl9DT05URVhUKTsKLQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0g
bnVsbCkgCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5P
Ti1OTFMtMSQKLQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2
ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0g
dHJ1ZTsKLQkJCX0KLQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRL
MV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0YW5j
ZW9mIEludm9jYXRpb24pICYmICgoSW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVuY2Uo
KSkpKSB7Ci0JCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJ
dGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwot
CQkJfQotCQl9Ci0JCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJCS8qIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3Vt
ZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KKwkJ
CWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKKwkJCQkvKiBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2ZSBl
cnJvcnMsIGNvbXBsZXRlbHkgYmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCiAJCQkgICBObyBtZWFu
aW5nZnVsIHR5cGUgcmVzb2x1dGlvbiBpcyBwb3NzaWJsZSBzaW5jZSBpbmZlcmVuY2Ugb2YgdGhl
IGVsaWRlZCB0eXBlcyBpcyBmdWxseSB0aWVkIHRvIGFyZ3VtZW50IHR5cGVzLiBEbwogCQkJICAg
bm90IHJldHVybiB0aGUgcGFydGlhbGx5IHJlc29sdmVkIHR5cGUuCi0JCQkgKi8KLQkJCWlmIChp
c0RpYW1vbmQpIHsKLQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29va2Vk
IHRoaXMucmVzb2x2ZWRUeXBlCi0JCQl9Ci0JCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFu
Y2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJLy8gcmVjb3JkIGEgYmVzdCBndWVzcywgZm9y
IGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBjb25zdHJ1Y3RvciBtYXRjaAot
CQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwot
CQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewotCQkJCQlwc2V1ZG9BcmdzW2ld
ID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhp
cy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxs
IHR5cGUKKwkJCQkgKi8KKwkJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJCXJldHVybiBudWxsOyAv
LyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQl9Ci0JCQkJ
dGhpcy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5y
ZXNvbHZlZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2Up
OwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQg
dGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFi
b3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwp
IHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2gg
PSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNs
b3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0J
CQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAo
Y2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29w
ZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBp
Z25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2Vs
ZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5t
b2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQlp
ZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJ
CS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9Bcmdz
ID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0t
aSA+PSAwOykgeworCQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9
PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVw
bGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJCX0KKwkJCQkJdGhpcy5i
aW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZl
ZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOworCQkJ
CQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhl
IGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0
IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7
CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmlu
ZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNo
ID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChj
bG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0K
KwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGlu
ZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJ
CWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYg
IXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJ
CQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRl
IGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3Jp
Z2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7
CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZTsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAh
dGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG51bGw7CisJ
CX0KKworCQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0gY29u
c3RhbnQgaW5pdHMKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlw
ZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5u
b3RJbnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKIAkJCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKIAkJfQotCX0KLQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVs
bCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlyZXR1cm4gbnVs
bDsKLQl9Ci0KLQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0g
Y29uc3RhbnQgaW5pdHMKLQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRU
eXBlLmNhbkJlSW5zdGFudGlhdGVkKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fu
bm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKLQl9Ci0JUmVzb2x1dGlvblN0YXRlIHN0YXRlID0gbmV3IFJlc29s
dXRpb25TdGF0ZShzY29wZSwgaXNEaWFtb25kLCBkaWFtb25kTmVlZHNEZWZlcnJpbmcsIGFyZ3ND
b250YWluQ2FzdCwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQlpZiAoZGlhbW9uZE5lZWRzRGVmZXJy
aW5nKSB7Ci0JCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlID0gc3RhdGU7IC8vIHJlc29s
dmluZyB0byBiZSBjb250aW51ZWQgbGF0ZXIgKHZpYSBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUpKS4KLQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7Ci0JfQotCi0JaWYg
KCFyZXNvbHZlUGFydDIoc3RhdGUpKQotCQlyZXR1cm4gbnVsbDsKLQlyZXR1cm4gcmVzb2x2ZVBh
cnQzKHN0YXRlKTsKLX0KLQotLyoqIFNlY29uZCBwYXJ0IG9mIHJlc29sdmluZyB0aGF0IG1heSBo
YXBwZW4gbXVsdGlwbGUgdGltZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29sdXRpb24uICovCi1ib29s
ZWFuIHJlc29sdmVQYXJ0MihSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQkvLyBUT0RPOiBhbGwg
aW5mb3JtYXRpb24gcGVyc2lzdGVkIGR1cmluZyB0aGlzIG1ldGhvZCBtYXkgbmVlZCB0byBiZSBz
dG9yZWQgcGVyIHRhcmdldFR5cGU/Ci0JaWYgKHN0YXRlLmlzRGlhbW9uZCkgewotCQlSZWZlcmVu
Y2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMu
cmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOwotCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5
cGVzID0gaW5mZXJFbGlkZWRUeXBlcygoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgewot
CQkJaWYgKCFzdGF0ZS5kaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlzdGF0ZS5zY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCXN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsK
LQkJCX0gZWxzZSB7Ci0JCQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gdHJ1ZTsgLy8gZGVm
ZXIgcmVwb3J0aW5nCisJCWlmIChpc0RpYW1vbmQpIHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2Vu
ZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUp
LmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXpl
ZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVy
aWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2lu
Z1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRU
eXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgp
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51
bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVz
KHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CiAJCQl9Ci0JCQly
ZXR1cm4gZmFsc2U7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJy
ZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5l
bmNsb3NpbmdUeXBlKCkpOworCQkJaWYgKHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgY29t
cGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYg
dGhpcy5leHByZXNzaW9uQ29udGV4dC5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJc2NvcGUu
c2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsID0gdHJ1ZTsKKwkJCQl0cnkgeworCQkJCQl0aGlz
LmJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcihhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1
bWVudFR5cGVzLCB0aGlzKTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlzY29wZS5zaG91bGRDb25z
dWx0U2hhZG93T3JpZ2luYWwgPSBmYWxzZTsKKwkJCQl9CisJCQkJcmV0dXJuIG5ldyBQb2x5VHlw
ZUJpbmRpbmcodGhpcyk7CisJCQl9CisJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5y
ZXNvbHZlZFR5cGUgPSBhbGxvY2F0aW9uVHlwZTsgCiAJCX0KLQkJdGhpcy5yZXNvbHZlZFR5cGUg
PSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gc3RhdGUuc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOwot
CQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSBmYWxzZTsKLSAJfQotCVJlZmVyZW5jZUJpbmRp
bmcgcmVjZWl2ZXJUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwot
CXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc3RhdGUuc2NvcGUsIHRoaXMs
IHJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQlyZXR1cm4gdHJ1ZTsKLX0KLQot
LyoqIEZpbmFsIHBhcnQgb2YgcmVzb2x2aW5nIChvbmNlKTogY2hlY2sgYW5kIHJlcG9ydCB2YXJp
b3VzIGVycm9yIGNvbmRpdGlvbnMuICovCi1UeXBlQmluZGluZyByZXNvbHZlUGFydDMoUmVzb2x1
dGlvblN0YXRlIHN0YXRlKSB7Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9
IG51bGwgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikK
LQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwotCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0
YXRlID0gbnVsbDsKLQlpZiAoc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kKSB7Ci0JCXN0YXRlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJfSBlbHNlIHsKKwkJaWYgKGlzRGlhbW9u
ZCkgeworCQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJp
YWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtd
IGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCB0aGlz
LnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUp
OworCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQkJcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlID0gbnVsbDsKKwkJCX0KKwkJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBl
LnJlc29sdmVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5
cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
KSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJfQogCX0KKwkKIAlSZWZl
cmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVz
b2x2ZWRUeXBlOworCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUs
IHRoaXMsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOworCQkKIAlpZiAoIXRo
aXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gYWxs
b2NhdGlvblR5cGU7CkBAIC01MjksMzAgKzQ4NiwyOSBAQAogCQlpZiAodGhpcy50eXBlICE9IG51
bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJcmV0
dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENv
bnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwogCQlyZXR1cm4gdGhpcy5y
ZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkhh
c01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1p
c3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOworCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5n
KTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHN0YXRlLnNj
b3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVk
TWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0
aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5k
ZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CiAJfQotCWlmIChjaGVja0ludm9j
YXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGwsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmJp
bmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHN0YXRlLmFyZ3NDb250
YWluQ2FzdCwgdGhpcykpIHsKKwlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCBu
dWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgdGhpcy5h
cmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJdGhpcy5iaXRz
IHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIAlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51
bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVj
ZXNzYXJ5VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9jYXRpb24odGhpcy5iaW5kaW5nLCB0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzLCB0aGlzLnR5cGVBcmd1bWVudHMpOworCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0aW9u
KHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJndW1l
bnRzKTsKIAl9Ci0JaWYgKCFzdGF0ZS5pc0RpYW1vbmQgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNQ
YXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVudHMoKSkgewotIAkJY2hlY2tUeXBlQXJn
dW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRU
eXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBl
cywgc3RhdGUuc2NvcGUpOworCWlmICghaXNEaWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlz
UGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRzKCkpIHsKKyAJCWNoZWNrVHlwZUFy
Z3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVk
VHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHNjb3BlKTsKICAJfQotCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzdGF0
ZS5zY29wZS5jb21waWxlck9wdGlvbnMoKTsKIAlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3Rh
dGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCAmJiAodGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBU
YWdCaXRzLklzTnVsbG5lc3NLbm93bikgPT0gMCkgewotCQluZXcgSW1wbGljaXROdWxsQW5ub3Rh
dGlvblZlcmlmaWVyKHN0YXRlLnNjb3BlLmVudmlyb25tZW50KCksIGNvbXBpbGVyT3B0aW9ucy5p
bmhlcml0TnVsbEFubm90YXRpb25zKQotCQkJCS5jaGVja0ltcGxpY2l0TnVsbEFubm90YXRpb25z
KHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBzdGF0ZS5zY29wZSk7CisJ
CW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIoc2NvcGUuZW52aXJvbm1lbnQoKSwg
Y29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3RhdGlvbnMpCisJCQkJLmNoZWNrSW1wbGlj
aXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBudWxsLypzcmNNZXRob2QqLywgZmFsc2Us
IHNjb3BlKTsKIAl9Ci0JcmVjb3JkRXhjZXB0aW9uc0ZvckVuY2xvc2luZ0xhbWJkYShzdGF0ZS5z
Y29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlvbnMpOworCXJlY29yZEV4Y2VwdGlvbnNG
b3JFbmNsb3NpbmdMYW1iZGEoc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNlcHRpb25zKTsK
IAlyZXR1cm4gYWxsb2NhdGlvblR5cGU7CiB9CiAKQEAgLTU3MSw3ICs1MjcsMzMgQEAKIAl9CiB9
CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUs
IFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBCbG9ja1Njb3BlIHNjb3BlKSB7Cisv
LyBGb3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94aW5nIGNvbXBhdGliaWxpdHkgaXMgc2Ft
ZSBhcyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNlIGphdmEubGFuZydzIHdyYXBwZXIgdHlw
ZXMgYXJlIG5vdCBnZW5lcmljLgorcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0
aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCXJldHVybiBpc1BvbHlF
eHByZXNzaW9uKCkgPyBmYWxzZSA6IGlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUp
OworfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9y
cyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJCXJldHVybiBmYWxz
ZTsKKwlUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRoaXMucmVzb2x2ZWRUeXBlOworCWlm
IChpc1BvbHlFeHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRpbmcgb3JpZ2luYWxFeHBlY3RlZFR5
cGUgPSB0aGlzLnR5cGVFeHBlY3RlZDsKKwkJdHJ5IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0g
dGFyZ2V0VHlwZTsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCQlQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50
eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlUeXBlQmlu
ZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlw
ZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpCisJCQkJcmV0dXJuIGZhbHNl
OworCQkJYWxsb2NhdGlvblR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRl
cml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisJCX0gZmluYWxs
eSB7CisJCQl0aGlzLnR5cGVFeHBlY3RlZCA9IG9yaWdpbmFsRXhwZWN0ZWRUeXBlOworCQl9CisJ
fQorCXJldHVybiBhbGxvY2F0aW9uVHlwZSAhPSBudWxsICYmIGFsbG9jYXRpb25UeXBlLmlzQ29t
cGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworfQorCitwdWJsaWMgVHlwZUJpbmRpbmdb
XSBpbmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlw
ZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
VHlwcywgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZlbiB0aGUgYWxsb2NhdGlvbiB0eXBl
IGFuZCB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rvciwgc2VlIGlmIHdlIGNhbiBzeW50
aGVzaXplIGEgZ2VuZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAgIG1ldGhvZCB0aGF0IHdvdWxkLCBn
aXZlbiB0aGUgYXJndW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZvY2F0aW9uIHNpdGUsIG1hbnVmYWN0
dXJlIGEgcGFyYW1ldGVyaXplZCBvYmplY3Qgb2YgdHlwZSBhbGxvY2F0aW9uVHlwZS4KIAkgICBJ
ZiB3ZSBhcmUgc3VjY2Vzc2Z1bCB0aGVuIGJ5IGRlc2lnbiBhbmQgY29uc3RydWN0aW9uLCB0aGUg
cGFyYW1ldGVyaXphdGlvbiBvZiB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZhY3RvcnkgbWV0aG9k
IGlzIGlkZW50aWNhbApAQCAtNTgxLDE3ICs1NjMsNiBAQAogCWlmIChmYWN0b3J5IGluc3RhbmNl
b2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJp
bmRpbmcoKSkgewogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZ2VuZXJpY0Zh
Y3RvcnkgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBmYWN0b3J5OwogCQl0
aGlzLmluZmVycmVkUmV0dXJuVHlwZSA9IGdlbmVyaWNGYWN0b3J5LmluZmVycmVkUmV0dXJuVHlw
ZTsKLQkJLy8gdGhpcyBpcyBvdXIgbGFzdCBjaGFuY2UgdG8gaW5zcGVjdCB0aGUgcmVzdWx0IG9m
IHRoZSBpbmZlcmVuY2UgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIHRocm93LWF3YXkgZmFjdG9y
eSBiaW5kaW5nCi0JCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGdldEluZmVyZW5jZUNv
bnRleHQoZ2VuZXJpY0ZhY3RvcnkpOwotCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiBpbmZDdHgx
OC5zdGVwQ29tcGxldGVkID09IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKSB7
Ci0JCQkvLyByZWZyZXNoIGFyZ3VtZW50VHlwZXMgZnJvbSB1cGRhdGVkIGJpbmRpbmdzIGluIGFy
Z3VtZW50czoKLQkJCS8vICh0aGlzIHNob3VsZG4ndCBiZSBzdHJpY3RseSBuZWNlc3NhcnksIGFz
IEZ1bmN0aW9uRXhwcmVzc2lvbi5pc0NvbXBhdGlibGVXaXRoKCkgc2hvdWxkIGdpdmUgdGhlIHNh
bWUgcmVzdWx0LAotCQkJLy8gIGJ1dCBpdCdzIHByb2JhYmx5IGJlIGEgZ29vZCBpZGVhIHRvIGF2
b2lkIHRoZSBuZWNlc3NpdHkgdG8gY2FsbCBpc0NvbXBhdGlibGVXaXRoKCkgaW4gdGhlIGZpcnN0
IHBsYWNlKS4gCi0JCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwcy5sZW5ndGg7IGkr
KykgewotCQkJCWlmIChhcmd1bWVudFR5cHNbaV0gaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcp
Ci0JCQkJCWFyZ3VtZW50VHlwc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsK
LQkJCX0KLQkJfQogCQlyZXR1cm4gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpZmFjdG9yeS5y
ZXR1cm5UeXBlKS5hcmd1bWVudHM7CiAJfQogCXJldHVybiBudWxsOwpAQCAtNjk5LDEwMiArNjcw
LDIzIEBACiB9CiAKIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9k
QmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJy
b3JzLCBTY29wZSBzY29wZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAh
PSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCkgewotCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0
VHlwZSk7Ci0JCWlmICghcmVzb2x2ZVBhcnQyKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
KSkgewotCQkJaWYgKHJlcG9ydEVycm9ycyAmJiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3Rh
dGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkJCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25T
dGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQpCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNh
bm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJZWxzZQotCQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0
ZWRseSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCQl0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJCX0KLQkJCXJldHVy
biBudWxsOwotCQl9Ci0JfQotCWlmIChyZXBvcnRFcnJvcnMgJiYgdGhpcy5iaW5kaW5nICE9IG51
bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCWlmICh0aGlzLmJpbmRp
bmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkKLQkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKLQkJaWYgKHRoaXMuc3Vz
cGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwotCQkJdGhpcy5zdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCX0KLQl9Citw
dWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7CiAJcmV0dXJuIHRoaXMuYmluZGluZzsKLX0KLXB1YmxpYyBUeXBlQmluZGluZyBj
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKLQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRhcmdldFR5cGU7Ci0JYm9vbGVhbiBuZWVk
c1VwZGF0ZSA9IHRoaXMuYmluZGluZyA9PSBudWxsIHx8IAkJCQkJCQkJCQkJCQkJCQkvLyBub3Qg
eWV0IHJlc29sdmVkCi0JCQkodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBl
ICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlw
ZSkpOwkvLyBwcmV2aW91cyBhdHRlbXB0IHdhcyB3cm9uZwotCWlmIChuZWVkc1VwZGF0ZSAmJiB0
aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmICF0aGlzLnN1c3BlbmRlZFJl
c29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKSB7Ci0JCS8vIEF0dGVtcHQgdG8gcmVzb2x2
ZSBoYWxmIHJlc29sdmVkIGRpYW1vbmQKLQkJcmVzb2x2ZVBhcnQyKHRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlKTsKLQl9Ci0JLy8gY29uZmVyIE1lc3NhZ2VTZW5kLmNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZSgsLCk6Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0g
Z2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMuYmlu
ZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5j
ZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRhcmdl
dFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2Nh
dGlvblR5cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5i
aW5kaW5nKTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlw
ZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1
cGRhdGVkQmluZGluZywgc2NvcGUpOwotCQkJfQotCQl9Ci0JfQotCWlmICh0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7Ci0JCXJldHVybiByZXNvbHZlUGFydDModGhpcy5z
dXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpOwotCX0KLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7
CiB9CiBwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAlyZXR1cm4gdGhpcy5hcmd1
bWVudHM7CiB9CiAKLXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcg
dXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQlib29sZWFuIGhhc1Vw
ZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlpZiAodGhpcy5pbmZlcmVu
Y2VDb250ZXh0cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpID09IHVwZGF0ZWRC
aW5kaW5nLm9yaWdpbmFsKCkpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVu
Y2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQodGhpcy5iaW5kaW5nKTsKLQkJ
aWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1
cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBh
biBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1
dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9u
KHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJfQotCX0KLQl0aGlzLmJpbmRpbmcgPSB1
cGRhdGVkQmluZGluZzsKLQl0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5nLmRlY2xh
cmluZ0NsYXNzOwotCXJldHVybiBoYXNVcGRhdGU7Ci19CiBwdWJsaWMgdm9pZCByZWdpc3Rlcklu
ZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwg
SW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4
dHMgPT0gbnVsbCkKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBU
YWJsZSgpOwogCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KG1ldGhvZCwgaW5mQ3R4MTgpOwot
CU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBtZXRob2Qub3JpZ2luYWwoKTsKLQlpZiAob3JpZ2lu
YWwgaW5zdGFuY2VvZiBTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgewotCQlTeW50aGV0
aWNGYWN0b3J5TWV0aG9kQmluZGluZyBzeW50aE9yaWdpbmFsID0gKFN5bnRoZXRpY0ZhY3RvcnlN
ZXRob2RCaW5kaW5nKW9yaWdpbmFsOwotCQlQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBwYXJh
bWV0ZXJpemVkQ3RvciA9IHN5bnRoT3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1
Y3RvcihtZXRob2QudHlwZUFyZ3VtZW50cyk7Ci0JCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0
KHBhcmFtZXRlcml6ZWRDdG9yLCBpbmZDdHgxOCk7Ci0JfQotfQotcHVibGljIGJvb2xlYW4gdXNl
c0luZmVyZW5jZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBnZXRJbmZlcmVuY2VDb250ZXh0KChQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykgIT0gbnVsbDsK
IH0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0
ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyA9PSBudWxsKQogCQlyZXR1cm4gbnVsbDsKIAlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkg
dGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKIH0KLXB1YmxpYyBib29sZWFuIGlu
bmVyc05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0g
bnVsbDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQl0aGlzLmlubmVySW5m
ZXJlbmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5l
ckluZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsK
LX0KLQogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiBwdWJsaWMgRXhwcmVzc2lv
bkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CiAJcmV0dXJuIHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQ7CkBAIC04MDIsNCArNjk0LDQgQEAKIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
ZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJcmV0dXJuIG5ldyBJbmZlcmVu
Y2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKIH0KLX0KK30KXCBObyBu
ZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpp
bmRleCBlZTMxMDg2Li43ZjBjY2JmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmph
dmEKQEAgLTU3LDcgKzU3LDYgQEAKIAlwcml2YXRlIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9
IGZhbHNlOwogCXByaXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGU7CiAJ
cHJpdmF0ZSBUeXBlQmluZGluZyBvcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGU7Ci0JcHJpdmF0ZSBC
bG9ja1Njb3BlIHBvbHlFeHByZXNzaW9uU2NvcGU7CiAJcHJpdmF0ZSBib29sZWFuIHVzZTE4c3Bl
Y2lmaWNzOwogCXB1YmxpYyBDb25kaXRpb25hbEV4cHJlc3Npb24oCiAJCUV4cHJlc3Npb24gY29u
ZGl0aW9uLApAQCAtNDY0LDMxICs0NjMsMjUgQEAKIAkJCWlmICh0aGlzLnZhbHVlSWZGYWxzZSBp
bnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZhbHVlSWZGYWxzZS5iaXRzIHw9IERpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgogCQkJdGhpcy5v
cmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5yZXNvbHZlVHlwZShz
Y29wZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQlpZiAodGhpcy5leHBl
Y3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUgPSBzY29w
ZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0aW5nLgot
CQkJCX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdp
bmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5
cGUgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJfSBlbHNlIHsKLQkJCS8qIE5vdCByZWFj
aGVkIGFzIG9mIG5vdyBhcyB3ZSBkb24ndCBldmFsdWF0ZSBjb25kaXRpb25hbCBleHByZXNzaW9u
cyBtdWx0aXBsZSB0aW1lcywgbGVmdCBpbiBmb3Igbm93LgotCQkJICAgSWYgaW4gZnV0dXJlLCB3
ZSBjaGFuZ2UgdGhpbmdzIHNvIGNvbnRyb2wgcmVhY2hlcyBoZXJlLCBhIHByZWNvbmRpdGlvbiBp
cyB0aGF0IHRoaXMuZXhwZWN0ZWRUeXBlIGlzCi0JCQkgICB0aGUgZmluYWwgdGFyZ2V0IHR5cGUu
Ci0JCQkqLworCiAJCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5raW5kKCkgPT0g
QmluZGluZy5QT0xZX1RZUEUpCiAJCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9IHRo
aXMudmFsdWVJZlRydWUucmVzb2x2ZVR5cGUoc2NvcGUpOwogCQkJaWYgKHRoaXMub3JpZ2luYWxW
YWx1ZUlmRmFsc2VUeXBlLmtpbmQoKSA9PSBCaW5kaW5nLlBPTFlfVFlQRSkKIAkJCQl0aGlzLm9y
aWdpbmFsVmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNlLnJlc29sdmVUeXBlKHNj
b3BlKTsKKwkJCQorCQkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPT0gbnVsbCB8
fCAhdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVl
SWZGYWxzZVR5cGUgPT0gbnVsbCB8fCAhdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkKKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCQl9
CiAJCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKIAkJCWlmICh0aGlzLmV4cGVjdGVkVHlwZSA9
PSBudWxsKSB7Ci0JCQkJdGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7IC8vIHByZXNl
cnZlIGZvciBldmVudHVhbCByZXNvbHV0aW9uL2Vycm9yIHJlcG9ydGluZy4KIAkJCQlyZXR1cm4g
bmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKIAkJCX0KLQkJCWNvbXB1dGVDb252ZXJzaW9ucyhz
Y29wZSwgdGhpcy5leHBlY3RlZFR5cGUpOwotCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy5leHBlY3RlZFR5cGU7CisJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBjb21wdXRl
Q29udmVyc2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBlKSA/IHRoaXMuZXhwZWN0ZWRUeXBl
IDogbnVsbDsKIAkJfQogCQlUeXBlQmluZGluZyB2YWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLm9yaWdp
bmFsVmFsdWVJZlRydWVUeXBlOwogCQlUeXBlQmluZGluZyB2YWx1ZUlmRmFsc2VUeXBlID0gdGhp
cy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGU7CkBAIC02NjEsNyArNjU0LDggQEAKIAkJcmV0dXJu
IG51bGw7CiAJfQogCi0JcHJvdGVjdGVkIHZvaWQgY29tcHV0ZUNvbnZlcnNpb25zKEJsb2NrU2Nv
cGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwlwcm90ZWN0ZWQgYm9vbGVhbiBj
b21wdXRlQ29udmVyc2lvbnMoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkgeworCQlib29sZWFuIG9rID0gdHJ1ZTsKIAkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1
ZVR5cGUgIT0gbnVsbCAmJiB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlzVmFsaWRCaW5k
aW5nKCkpIHsKIAkJCWlmICh0aGlzLnZhbHVlSWZUcnVlLmlzQ29uc3RhbnRWYWx1ZU9mVHlwZUFz
c2lnbmFibGVUb1R5cGUodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSwgdGFyZ2V0VHlwZSkK
IAkJCQkJfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRh
cmdldFR5cGUpKSB7CkBAIC02ODIsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxW
YWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUsIHRoaXMudmFsdWVJZlRydWUsIG51bGwpOworCQkJ
CW9rID0gZmFsc2U7CiAJCQl9CiAJCX0KIAkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VU
eXBlICE9IG51bGwgJiYgdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUuaXNWYWxpZEJpbmRp
bmcoKSkgewpAQCAtNzA0LDggKzY5OSwxMCBAQAogCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkudHlwZU1pc21hdGNoRXJyb3IodGhpcy5vcmlnaW5hbFZhbHVl
SWZGYWxzZVR5cGUsIHRhcmdldFR5cGUsIHRoaXMudmFsdWVJZkZhbHNlLCBudWxsKTsKKwkJCQlv
ayA9IGZhbHNlOwogCQkJfQogCQl9CisJCXJldHVybiBvazsKIAl9CiAKIAlwdWJsaWMgdm9pZCBz
ZXRFeHBlY3RlZFR5cGUoVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlKSB7CkBAIC03MjAsMTYgKzcx
Nyw5IEBACiAJCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwogCX0KIAkKLQlwdWJsaWMg
VHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCS8vIGluIDEuOCBpZiB0cmVhdGVkIGFzIGEgcG9seSBl
eHByZXNzaW9uOgotCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQl0YXJnZXRUeXBlID0g
dGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlKTsKLQkJCXRoaXMu
b3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLnZhbHVlSWZUcnVlLmNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQl0aGlzLm9yaWdpbmFsVmFsdWVJ
ZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNlLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlw
ZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQljb21wdXRlQ29udmVyc2lvbnModGhpcy5wb2x5RXhw
cmVzc2lvblNjb3BlLCB0YXJnZXRUeXBlKTsKLQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGFyZ2V0
VHlwZTsKLQkJfQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CisJcHVibGljIGJvb2xlYW4g
aXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFi
bGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXJldHVybiB0aGlzLnZhbHVlSWZUcnVlLmlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHR5cGVWYXJpYWJsZSwgbWV0aG9kKSAKKwkJCQkmJiB0
aGlzLnZhbHVlSWZGYWxzZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUs
IG1ldGhvZCk7IC8vIG5vdCBwZXJmZWN0LgogCX0KIAkKIAlwdWJsaWMgYm9vbGVhbiBpc1BlcnRp
bmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5n
IG1ldGhvZCkgewpAQCAtNzM3LDYgKzcyNywxMSBAQAogCQkJCSYmIHRoaXMudmFsdWVJZkZhbHNl
LmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHRhcmdldFR5cGUsIG1ldGhvZCk7CiAJfQogCQor
CUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbFR5cGUoKSB7CisJCXJldHVy
biB0aGlzLnZhbHVlSWZUcnVlLmlzRnVuY3Rpb25hbFR5cGUoKSB8fCB0aGlzLnZhbHVlSWZGYWxz
ZS5pc0Z1bmN0aW9uYWxUeXBlKCk7CisJfQorCQogCXB1YmxpYyBib29sZWFuIGlzUG9seUV4cHJl
c3Npb24oKSB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gewogCQkKIAkJaWYg
KCF0aGlzLnVzZTE4c3BlY2lmaWNzKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENv
bnN0cnVjdG9yQ2FsbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5q
YXZhCmluZGV4IDI0MzQ5MTUuLmExNjEzMmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0
b3JDYWxsLmphdmEKQEAgLTU2LDcgKzU2LDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVmFyaWFibGVCaW5kaW5nOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwog
CiBwdWJsaWMgY2xhc3MgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0ZW1lbnQg
aW1wbGVtZW50cyBJbnZvY2F0aW9uIHsKIApAQCAtNzYsMTAgKzc1LDYgQEAKIAogCS8vIFRPRE8g
UmVtb3ZlIG9uY2UgRE9NUGFyc2VyIGlzIGFjdGl2YXRlZAogCXB1YmxpYyBpbnQgdHlwZUFyZ3Vt
ZW50c1NvdXJjZVN0YXJ0OwotCi0JIC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52
b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5m
ZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0ZSk6Ci0JcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJs
ZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4dDE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByaXZh
dGUgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7CiAKIAlwdWJsaWMg
RXhwbGljaXRDb25zdHJ1Y3RvckNhbGwoaW50IGFjY2Vzc01vZGUpIHsKIAkJdGhpcy5hY2Nlc3NN
b2RlID0gYWNjZXNzTW9kZTsKQEAgLTM5NCwxMCArMzg5LDYgQEAKIAkJCQkJaWYgKChhcmd1bWVu
dFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7CiAJCQkJ
CQlhcmdIYXNFcnJvciA9IHRydWU7CiAJCQkJCX0KLQkJCQkJaWYgKHNvdXJjZUxldmVsID49IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSB8
fCAoKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbikgJiYgKChJbnZvY2F0aW9uKSBhcmd1
bWVudCkudXNlc0luZmVyZW5jZSgpKSkpIHsKLQkJCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNl
SGVscGVyID09IG51bGwpCi0JCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJ
bm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCQl9CiAJCQkJfQogCQkJCWlmIChhcmdIYXNFcnJv
cikgewogCQkJCQlpZiAocmVjZWl2ZXJUeXBlID09IG51bGwpIHsKQEAgLTQ5OCw1NiArNDg5LDIy
IEBACiAJCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgc2NvcGUpOwogCX0KIAotCS8vIC0tIGludGVy
ZmFjZSBJbnZvY2F0aW9uOiAtLQotCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0J
CWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkKLQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9y
IGlzIHVuZXhwZWN0ZWRseSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWVs
c2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKLQkJfQor
CS8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uCisJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewogCQlyZXR1cm4gdGhpcy5i
aW5kaW5nOwogCX0KKworCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4MTgpIHsKKwkJLy8gTm90aGluZyB0byBkby4KKwl9CisJCisJcHVibGljIEluZmVyZW5j
ZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
IG1ldGhvZCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisJCiAJcHVibGljIEV4cHJlc3Npb25bXSBh
cmd1bWVudHMoKSB7CiAJCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIGJvb2xl
YW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRp
bmcgdGFyZ2V0VHlwZSkgewotCQlib29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1
cGRhdGVkQmluZGluZzsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewot
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKLQkJCWlmIChjdHggIT0gbnVs
bCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5n
LCBjdHgpOwotCQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZl
cmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBp
bm5lcnMpOgotCQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBl
LCB1cGRhdGVkQmluZGluZyk7Ci0JCQl9Ci0JCX0KLQkJdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJp
bmRpbmc7Ci0JCXJldHVybiBoYXNVcGRhdGU7Ci0JfQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4
dHMgPT0gbnVsbCkKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3Vw
VGFibGUoKTsKLQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7
Ci0JfQotCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMgPT0gbnVsbCkKLQkJCXJldHVybiBudWxsOwotCQlyZXR1cm4gKEluZmVyZW5jZUNvbnRl
eHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKLQl9Ci0JcHVibGljIGJv
b2xlYW4gdXNlc0luZmVyZW5jZSgpIHsKLQkJcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJCSYmIGdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5n
KSAhPSBudWxsOwotCX0KLQlwdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCQly
ZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotCX0KLQlwdWJsaWMgdm9p
ZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxs
OwotCX0KLQlwdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIo
KSB7Ci0JCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotCX0KLQogCS8vIC0tIGlu
dGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIAlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZy
ZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewogCQlyZXR1cm4gbmV3IEluZmVyZW5j
ZUNvbnRleHQxOChzY29wZSwgdGhpcy5hcmd1bWVudHMsIHRoaXMpOwpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRl
eCA5MThiMWI0Li44N2MwZmNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQpAQCAtOTU5LDYgKzk1OSwxMCBAQAog
CXJldHVybiB0aGlzLmNvbnN0YW50OwogfQogCitwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRv
QXBwbGljYWJpbGl0eShUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSwgTWV0aG9kQmlu
ZGluZyBtZXRob2QpIHsKKwlyZXR1cm4gdHJ1ZTsKK30KKwogcHVibGljIGJvb2xlYW4gaXNQZXJ0
aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGlu
ZyBtZXRob2QpIHsKIAlyZXR1cm4gdHJ1ZTsKIH0KQEAgLTEwNjAsMTYgKzEwNjQsNiBAQAogCQl9
CiAJfQogCXJldHVybiBleHByZXNzaW9uVHlwZTsKLX0KLQotLyoqCi0gKiBPbmNlIG91dGVyIGNv
bnRleHRzIGhhdmUgZmluYWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBleHByZXNzaW9u
LAotICogcGVyZm9ybSBhbnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIGRlbGF5ZWQgcHJl
dmlvdXNseS4KLSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSAoYWth
IGV4cGVjdGVkVHlwZSkgZm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJhbSBzY29wZSBzY29w
ZSBmb3IgZXJyb3IgcmVwb3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWlu
c3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsK
LQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5IGNob29zZSB0byBk
byByZWFsIHN0dWZmIGhlcmUKIH0KIAogLyoqCkBAIC0xMjUwLDQgKzEyNDQsOCBAQAogcHVibGlj
IFZhcmlhYmxlQmluZGluZyBudWxsQW5ub3RhdGVkVmFyaWFibGVCaW5kaW5nKGJvb2xlYW4gc3Vw
cG9ydFR5cGVBbm5vdGF0aW9ucykgewogCXJldHVybiBudWxsOwogfQorCitwdWJsaWMgYm9vbGVh
biBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCXJldHVybiBmYWxzZTsKIH0KK30KXCBObyBuZXdsaW5l
IGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggNWFj
MTRmMi4uNTJmM2FiMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lv
bi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNzQs
OSArNzQsOCBAQAogCQlzdXBlcigpOwogCX0KIAkKLQkvLyBmb3IgbGFtYmRhJ3MgYW5kIHJlZmVy
ZW5jZSBleHByZXNzaW9ucyBib3hpbmcgY29tcGF0aWJpbGl0eSBpcyBzYW1lIGFzIHZhbmlsbGEg
Y29tcGF0aWJpbGl0eS4KIAlwdWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCXJldHVybiBpc0NvbXBhdGli
bGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJcmV0dXJuIGZhbHNlOwogCX0KIAkKIAlwdWJs
aWMgdm9pZCBzZXRDb21waWxhdGlvblJlc3VsdChDb21waWxhdGlvblJlc3VsdCBjb21waWxhdGlv
blJlc3VsdCkgewpAQCAtMTA3LDE5ICsxMDYsMjcgQEAKIAkJcmV0dXJuIHRydWU7IC8vIGFsd2F5
cyBhcyBwZXIgaW50cm9kdWN0aW9uIG9mIHBhcnQgRCwgSlNSIDMzNQogCX0KIAotCXB1YmxpYyBi
b29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCWlmICh0YXJnZXRUeXBlIGluc3RhbmNlb2YgVHlw
ZVZhcmlhYmxlQmluZGluZykgewotCQkJaWYgKG1ldGhvZCAhPSBudWxsKSB7IC8vIHdoZW4gY2Fs
bGVkIGZyb20gdHlwZSBpbmZlcmVuY2UKLQkJCQlpZiAoKChUeXBlVmFyaWFibGVCaW5kaW5nKXRh
cmdldFR5cGUpLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kKQotCQkJCQlyZXR1cm4gZmFsc2U7
Ci0JCQkJaWYgKG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgJiYgKChUeXBlVmFyaWFibGVCaW5kaW5n
KXRhcmdldFR5cGUpLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kLmRlY2xhcmluZ0NsYXNzKQot
CQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKLQkJ
CQlUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSA9IChUeXBlVmFyaWFibGVCaW5kaW5n
KSB0YXJnZXRUeXBlOwotCQkJCWlmICh0eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCBpbnN0
YW5jZW9mIE1ldGhvZEJpbmRpbmcpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0KKwlAT3ZlcnJp
ZGUKKwlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCQlyZXR1cm4gdHJ1ZTsK
Kwl9CisJCisJcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZVZh
cmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCWlm
IChtZXRob2QgIT0gbnVsbCkgeyAvLyB3aGVuIGNhbGxlZCBmcm9tIHR5cGUgaW5mZXJlbmNlCisJ
CQlpZiAodHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kKQorCQkJCXJldHVy
biBmYWxzZTsKKwkJCWlmIChtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHR5cGVWYXJpYWJsZS5k
ZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZC5kZWNsYXJpbmdDbGFzcykKKwkJCQlyZXR1cm4gZmFs
c2U7CisJCX0gZWxzZSB7IC8vIGZvciBpbnRlcm5hbCBjYWxscworCQkJaWYgKHR5cGVWYXJpYWJs
ZS5kZWNsYXJpbmdFbGVtZW50IGluc3RhbmNlb2YgTWV0aG9kQmluZGluZykKKwkJCQlyZXR1cm4g
ZmFsc2U7CiAJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorCQorCXB1YmxpYyBib29sZWFuIGlzUGVy
dGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRp
bmcgbWV0aG9kKSB7CisJCWlmICh0YXJnZXRUeXBlIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmlu
ZGluZykKKwkJCXJldHVybiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSgoVHlwZVZhcmlhYmxl
QmluZGluZykgdGFyZ2V0VHlwZSwgbWV0aG9kKTsKIAkJcmV0dXJuIHRydWU7CiAJfQogCkBAIC0y
MDMsMTEgKzIxMCw2IEBACiAJCQkJYnJlYWs7CiAJCX0KIAkJcmV0dXJuIG51bGw7Ci0JfQotCi0J
cHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQl0YXJnZXRUeXBlID0gdGFyZ2V0VHlwZS51
bmNhcHR1cmUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCXJldHVybiByZXNvbHZlVHlwZUV4cGVj
dGluZyh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0YXJnZXRUeXBlKTsKIAl9CiAKIAljbGFzcyBWaXNp
YmlsaXR5SW5zcGVjdG9yIGV4dGVuZHMgVHlwZUJpbmRpbmdWaXNpdG9yIHsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvSW5uZXJJbmZlcmVuY2VIZWxwZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJ
bmZlcmVuY2VIZWxwZXIuamF2YQpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggODM4MWI1
Yy4uMDAwMDAwMAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKKysr
IC9kZXYvbnVsbApAQCAtMSw0MiArMCwwIEBACi0vKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDE0IEdLIFNvZnR3YXJlIEFHLgotICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwotICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCi0gKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdAotICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwK
LSAqCi0gKiBDb250cmlidXRvcnM6Ci0gKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwg
QVBJIGFuZCBpbXBsZW1lbnRhdGlvbgotICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi1wYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7Ci0KLWltcG9ydCBqYXZhLnV0
aWwuSGFzaE1hcDsKLWltcG9ydCBqYXZhLnV0aWwuTWFwOwotCi1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7Ci0KLXB1Ymxp
YyBjbGFzcyBJbm5lckluZmVyZW5jZUhlbHBlciB7Ci0KLQkvKiogRm9yIGVhY2ggY2FuZGlkYXRl
IG1ldGhvZCBzdG9yZSBoZXJlIHRoZSBhcnJheSBvZiBhcmd1bWVudCB0eXBlcyBpZiBpbm5lciBp
bmZlcmVuY2UgaGFzIGltcHJvdmVkIGFueSBkdXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5j
ZS4gKi8KLQlwcml2YXRlIE1hcDxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10+IGFyZ1R5cGVz
UGVyQ2FuZGlkYXRlID0gbmV3IEhhc2hNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPigp
OwotCi0JcHVibGljIHZvaWQgcmVnaXN0ZXJJbm5lclJlc3VsdChNZXRob2RCaW5kaW5nIG1ldGhv
ZCwgVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlLCBpbnQgYXJnQ291bnQsIGludCBhcmdJZHgpIHsK
LQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0
KG1ldGhvZCk7Ci0JCWlmIChhcmdUeXBlcyA9PSBudWxsKQotCQkJdGhpcy5hcmdUeXBlc1BlckNh
bmRpZGF0ZS5wdXQobWV0aG9kLCBhcmdUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmdDb3VudF0p
OwotCQlhcmdUeXBlc1thcmdJZHhdID0gcmVzb2x2ZWRUeXBlOwotCX0KLQkKLQlwdWJsaWMgVHlw
ZUJpbmRpbmdbXSBnZXRBcmd1bWVudFR5cGVzRm9yQ2FuZGlkYXRlKE1ldGhvZEJpbmRpbmcgY2Fu
ZGlkYXRlLCBUeXBlQmluZGluZ1tdIHBsYWluQXJnVHlwZXMpIHsKLQkJVHlwZUJpbmRpbmdbXSBh
cmdUeXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0KGNhbmRpZGF0ZSk7Ci0JCWlm
IChhcmdUeXBlcyA9PSBudWxsKQotCQkJcmV0dXJuIHBsYWluQXJnVHlwZXM7Ci0JCS8vIGZpbGwg
aW4gYW55IGJsYW5rcyBub3c6Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3Ro
OyBpKyspIHsKLQkJCWlmIChhcmdUeXBlc1tpXSA9PSBudWxsKQotCQkJCWFyZ1R5cGVzW2ldID0g
cGxhaW5BcmdUeXBlc1tpXTsKLQkJfQotCQlyZXR1cm4gYXJnVHlwZXM7Ci0JfQotfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24u
amF2YQppbmRleCBhYzU0NDdmLi4zOGRjOWRjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9j
YXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQpAQCAtMTksMTIgKzE5
LDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVCaW5kaW5nOwogCiAvKioKLSAqIEFic3RyYWN0aW9uIGZvciBpbnZvY2F0aW9uIEFTVCBub2Rl
cyB0aGF0IGNhbiB0cmlnZ2VyIAotICogPHVsPgotICogPGxpPkludm9jYXRpb24gQXBwbGljYWJp
bGl0eSBJbmZlcmVuY2VzICgxOC41LjEpLCBhbmQ8L2xpPiAKLSAqIDxsaT5JbnZvY2F0aW9uIFR5
cGUgSW5mZXJlbmNlICgxOC41LjIpLjwvbGk+Ci0gKiA8L3VsPgotICovCisgKiBBYnN0cmFjdGlv
biBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhhdCBjYW4gdHJpZ2dlciBvdmVybG9hZCByZXNv
bHV0aW9uIHBvc3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZQorKi8KIHB1YmxpYyBpbnRl
cmZhY2UgSW52b2NhdGlvbiBleHRlbmRzIEludm9jYXRpb25TaXRlIHsKIAogCUV4cHJlc3Npb25b
XSBhcmd1bWVudHMoKTsKQEAgLTMzLDU3ICsyOSwyNCBAQAogCSAqIEFuc3dlciB0aGUgcmVzb2x2
ZWQgbWV0aG9kIGJpbmRpbmcgb2YgdGhpcyBpbnZvY2F0aW9uLgogCSAqIElmIGEgdGFyZ2V0IHR5
cGUgaXMgZ2l2ZW4sIHRoZSBpbnZvY2F0aW9uIGdldHMgYSBjaGFuY2UgdG8gZG8gcmVwZWF0ZWQg
bWV0aG9kIGxvb2t1cC4KIAkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgb2Yg
dGhpcyBpbnZvY2F0aW9uIG9yIG51bGwgaWYgbm90IHlldCBrbm93bgotCSAqIEBwYXJhbSByZXBv
cnRFcnJvcnMgaWYgdHJ1ZSB0aGVuIHRoaXMgaXMgdGhlIGxhc3QgY2FsbCwgaWYgbm8gdmFsaWQg
YmluZGluZyBjYW4gYmUgYW5zd2VyZWQgd2Ugc2hvdWxkIHJlcG9ydCBhbiBlcnJvcgotCSAqIEBw
YXJhbSBzY29wZSBpZiByZXBvcnRFcnJvcnMgaXMgdHJ1ZSB0aGVuIHRoaXMgc2NvcGUgY2FuIGJl
IHVzZWQgZm9yIGVycm9yIHJlcG9ydGluZworCSAqIEBwYXJhbSBzY29wZSB0aGUgc2NvcGUgdG8g
dXNlIGZvciBsb29rdXAuCiAJICogCiAJICovCi0JTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSk7Ci0K
KwlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2Nv
cGUpOworCQogCS8qKgogCSAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBpbmZlcmVuY2UgY29udGV4dCwg
d2hpY2ggcHJvZHVjZWQgdGhlIGdpdmVuIG1ldGhvZCBhcyBpdHMgaW50ZXJtZWRpYXRlIHJlc3Vs
dC4KIAkgKiBMYXRlciB3aGVuIHRoZSBzYW1lIG1ldGhvZCBpcyBzZWxlY3RlZCBhcyB0aGUgbW9z
dCBzcGVjaWZpYyBtZXRob2QsIHRoZSBpbmZlcmVuY2UgY29udGV4dAotCSAqIGZvciB0aGlzIHBh
aXIgKEludm9jYXRpb24geCBNZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtA
bGluayAjZ2V0RXhwcmVzc2lvbkNvbnRleHQoKX0KKwkgKiBmb3IgdGhpcyBwYWlyIChJbnZvY2F0
aW9uIHggTWV0aG9kQmluZGluZykgY2FuIGJlIGxvb2tlZCB1cCB1c2luZyB7QGxpbmsgI2dldElu
ZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpfQogCSAqIHRvIGNvbnRp
bnVlIHRoZSB0eXBlIGluZmVyZW5jZS4KIAkgKi8KIAl2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VD
b250ZXh0MTggaW5mQ3R4MTgpOwotCQorCiAJLyoqCi0JICogUmV0cmlldmUgYW4gaW5mZXJlbmNl
IGNvbnRleHQgZm9yIHRoZSBnaXZlbiBtZXRob2Qgd2hpY2ggbXVzdCBoYXZlIGJlZW4gcmVnaXN0
ZXJlZAotCSAqIHVzaW5nIHtAbGluayAjcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZywgSW5mZXJlbmNlQ29udGV4dDE4KX0uCisJICogUmV0
cmlldmUgYW4gaW5mZXJlbmNlIGNvbnRleHQgZm9yIHRoZSBnaXZlbiBtZXRob2QuCiAJICogQHBh
cmFtIG1ldGhvZCBhbiBpbnRlcm1lZGlhdGUgcmVzb2x2ZWQgY2FuZGlkYXRlIGZvciB0aGlzIGlu
dm9jYXRpb24KLQkgKiByZXR1cm4gYSBzdXNwZW5kZWQgaW5mZXJlbmNlIGNvbnRleHQgb3IgbnVs
bCBpZiBub25lIHdhcyByZWdpc3RlcmVkIGZvciB0aGlzIG1ldGhvZC4KKwkgKiByZXR1cm4gdGhl
IGFzc29jaWF0ZWQgaW5mZXJlbmNlIGNvbnRleHQuCiAJICovCiAJSW5mZXJlbmNlQ29udGV4dDE4
IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKTsK
IAotCS8qKgotCSAqIEFuc3dlciB0cnVlIGlmIHRoaXMgaW52b2NhdGlvbiBoYXMgZGV0ZXJtaW5l
ZCBpdHMgYmluZGluZyB1c2luZyBpbmZlcmVuY2UuCi0JICovCi0JYm9vbGVhbiB1c2VzSW5mZXJl
bmNlKCk7Ci0JCi0JLyoqCi0JICogV2hlcmUgdGhlIEFTVCBub2RlIG1heSBob2xkIHJlZmVyZW5j
ZXMgdG8gdGhlIHJlc3VsdHMgb2YgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZSwK
LQkgKiB0aGlzIG1ldGhvZCBhbGxvd3MgdG8gdXBkYXRlIHRob3NlIHJlZmVyZW5jZXMgdG8gdGhl
IHJlc3VsdCBvZiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlLgotCSAqIE5vdGUgdGhhdCBwb3Rl
bnRpYWxseSBtb3JlIHRoYW4ganVzdCB0aGUgbWV0aG9kIGJpbmRpbmcgaXMgdXBkYXRlZC4KLQkg
KiBAcGFyYW0gdXBkYXRlZEJpbmRpbmcgdGhlIGZpbmFsIG1ldGhvZCBiaW5kaW5nIGFmdGVyIGZ1
bGwgaW5mZXJlbmNlCi0JICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIHRhcmdldCB0eXBlIHVzZWQg
ZHVyaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UKLQkgKiBAcmV0dXJuIHRydWUgaWYgYW4g
dXBkYXRlIGhhcyBoYXBwZW5lZAotCSAqLwotCWJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9k
QmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSk7Ci0JCi0JLyoq
Ci0JICogQW5zd2VyIHdoZXRoZXIgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiBoYXMgaW5uZXIgZXhw
cmVzc2lvbnMgdGhhdCBzdGlsbCBuZWVkIHVwZGF0aW5nIGFmdGVyIGluZmVyZW5jZS4KLQkgKi8K
LQlib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKTsKLQotCS8qKgotCSAqIE1hcmsgdGhhdCB1cGRh
dGluZyAodGhlIG5lZWQgZm9yIHdoaWNoIGlzIHNpZ25hbGVkIHZpYSB7QGxpbmsgI2lubmVyc05l
ZWRVcGRhdGUoKX0pIGhhcyBiZWVuIGRvbmUuCi0JICovCi0Jdm9pZCBpbm5lclVwZGF0ZURvbmUo
KTsKLQotCS8qKgotCSAqIElmIHRoaXMgaW52b2NhdGlvbiBoYXMgYW55IHBvbHkgZXhwcmVzc2lv
bnMgYXMgYXJndW1lbnRzLCB0aGlzIG1ldGhvZCBhbnN3ZXJzIGFuIGluZmVyZW5jZSBoZWxwZXIg
Ci0JICogdGhhdCBtZWRpYXRlcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbiwgZXZlbiBpZiBu
byBhY3R1YWwgaW5mZXJlbmNlIGhhcHBlbnMgZm9yIHRoaXMgaW52b2NhdGlvbi4KLQkgKi8KLQlJ
bm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJk
YUV4cHJlc3Npb24uamF2YQppbmRleCAxMzNmY2FkLi5kNjNlNTNhIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YQpAQCAtNDEsNiArNDEsNyBAQAogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09O
VEVYVDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwu
SGFzaE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlu
a2VkSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMjM4LDYgKzIzOSw3IEBACiAJ
CQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVudHNbaV0udHlwZS5yZXNvbHZl
VHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsKIAkJfQogCQlpZiAodGhp
cy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9D
QVRJT05fQ09OVEVYVCkgeworCQkJdGhpcy5yZXNvbHZlZENvcGllcyA9IG5ldyBIYXNoTWFwPFR5
cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOwogCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJp
bmRpbmcodGhpcyk7CiAJCX0gCiAJCQpAQCAtMzk3LDYgKzM5OSw3IEBACiAJCWlmICh0aGlzLmJv
ZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7CiAJCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSAo
RXhwcmVzc2lvbikgdGhpcy5ib2R5OwogCQkJbmV3IFJldHVyblN0YXRlbWVudChleHByZXNzaW9u
LCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVuZCwgdHJ1ZSkucmVz
b2x2ZSh0aGlzLnNjb3BlKTsgLy8gOi0pIDstKQorCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9IHRo
aXMub3JpZ2luYWwudm9pZENvbXBhdGlibGUgPSBleHByZXNzaW9uLnN0YXRlbWVudEV4cHJlc3Np
b24oKTsKIAkJfSBlbHNlIHsKIAkJCXRoaXMuYm9keS5yZXNvbHZlKHRoaXMuc2NvcGUpOwogCQl9
CkBAIC03MTAsNyArNzEzLDYgQEAKIAkJaWYgKCEobGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUJp
bmRpbmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0LnVuY2FwdHVyZSh0aGlz
LmVuY2xvc2luZ1Njb3BlKTsKIAkJc2hhcGVBbmFseXNpczogaWYgKCF0aGlzLnNoYXBlQW5hbHlz
aXNDb21wbGV0ZSkgewogCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5l
bmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5
KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNv
bXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CkBA
IC04MTMsNiArODE1LDggQEAKIAkJcmV0dXJuIHRydWU7CiAJfQogCisJcHJpdmF0ZSBIYXNoTWFw
PFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPiByZXNvbHZlZENvcGllczsKKwkKIAkvKioK
IAkgKiBHZXQgYSByZXNvbHZlZCBjb3B5IG9mIHRoaXMgbGFtYmRhIGZvciB1c2UgYnkgdHlwZSBp
bmZlcmVuY2UsIGFzIHRvIGF2b2lkIHNwaWxsaW5nIGFueSBwcmVtYXR1cmUKIAkgKiB0eXBlIHJl
c3VsdHMgaW50byB0aGUgb3JpZ2luYWwgbGFtYmRhLgpAQCAtODIxLDEyICs4MjUsMjEgQEAKIAkg
KiBAcmV0dXJuIGEgcmVzb2x2ZWQgY29weSBvZiAndGhpcycgb3IgbnVsbCBpZiBzaWduaWZpY2Fu
dCBlcnJvcnMgd2hlcmUgZW5jb3VudGVyZWQKIAkgKi8KIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lv
biBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSkgeworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IHRoaXMucmVzb2x2ZWRDb3BpZXMu
Z2V0KHRhcmdldFR5cGUpOworCQlpZiAobGFtYmRhID09IG51bGwpIHsKKwkJCWxhbWJkYSA9IGdl
dFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAodGFyZ2V0VHlwZSk7CisJCQlpZiAo
bGFtYmRhICE9IG51bGwpIHsKKwkJCQl0aGlzLnJlc29sdmVkQ29waWVzLnB1dCh0YXJnZXRUeXBl
LCBsYW1iZGEpOworCQkJfQorCQl9CisJCXJldHVybiBsYW1iZGE7CisJfQorCQorCXB1YmxpYyBM
YW1iZGFFeHByZXNzaW9uIGdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewogCQkvLyBub3RlOiB0aGlzIGlzIGVzc2VudGlhbGx5IGEg
c2ltcGxpZmllZCBleHRyYWN0IGZyb20gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyxTY29w
ZSkuCiAJCWlmICh0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSAmJiB0aGlzLmJpbmRpbmcgIT0g
bnVsbCkKIAkJCXJldHVybiB0aGlzOwogCQkKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5j
YXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkvLyBUT0RPOiBjYWNoaW5nCiAJCUlFcnJv
ckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9s
aWN5KTsKIAkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5j
bG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJCWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNv
bXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7CkBAIC05
NDgsNiArOTYxLDcgQEAKIAogCQlpZiAoY29weSAhPSBudWxsKSB7IC8vID09PiBzeW50YXggZXJy
b3JzID09IG51bGwKIAkJCWNvcHkub3JpZ2luYWwgPSB0aGlzOworCQkJY29weS5lbmNsb3NpbmdT
Y29wZSA9IHRoaXMuZW5jbG9zaW5nU2NvcGU7CiAJCX0KIAkJcmV0dXJuIGNvcHk7CiAJfQpAQCAt
OTU2LDcgKzk3MCw3IEBACiAJCWlmICh0aGlzLm9yaWdpbmFsID09IHRoaXMpIC8vIG5vdCBpbiBv
dmVybG9hZCByZXNvbHV0aW9uIGNvbnRleHQuCiAJCQlyZXR1cm47CiAJCWlmICh0aGlzLmJvZHkg
aW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQl0aGlzLm9yaWdpbmFsLnZhbHVlQ29tcGF0aWJs
ZSA9IHJlc3VsdFR5cGUgIT0gbnVsbCAmJiByZXN1bHRUeXBlLmlkICE9IFR5cGVJZHMuVF92b2lk
OworCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwg
JiYgcmVzdWx0VHlwZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCA/IGZhbHNlIDogdHJ1ZTsKIAkJCXRo
aXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnMgPSBuZXcgRXhwcmVzc2lvblsxXTsKIAkJCXRo
aXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnNbMF0gPSBleHByZXNzaW9uOwogCQkJcmV0dXJu
OyAvLyB2b2lkIGNvbXBhdGliaWxpdHkgZGV0ZXJtaW5lZCB2aWEgc3RhdGVtZW50RXhwcmVzc2lv
bigpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggMzVmZDNkNS4uMDIyNDlkOCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2
YQpAQCAtODAsNiArODAsOCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuTWlzc2luZ1R5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9s
eW1vcnBoaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuUHJvYmxlbU1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKQEAgLTExNSwxMSAr
MTE3LDEwIEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9u
IGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2Ug
KHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdN
QixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElu
bmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwogCXByaXZhdGUgYm9vbGVh
biByZWNlaXZlcklzVHlwZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJ
cHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVS
UzsKLQlwdWJsaWMgYm9vbGVhbiBhcmd1bWVudHNIYXZlRXJyb3JzOworCXB1YmxpYyBib29sZWFu
IGFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsKIAkKIAogcHVibGljIEZsb3dJbmZvIGFuYWx5
c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwg
Rmxvd0luZm8gZmxvd0luZm8pIHsKQEAgLTU5MywxMTQgKzU5NCwxMTEgQEAKIH0KIAogcHVibGlj
IFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkvLyBBbnN3ZXIg
dGhlIHNpZ25hdHVyZSByZXR1cm4gdHlwZQorCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVy
biB0eXBlLCBhbnN3ZXJzIFBvbHlUeXBlQmluZGluZyBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUg
Z2VuZXJpYyBvdmVybG9hZGVkIGNhbmRpZGF0ZSB0aGF0IGVuY29kZWQgdHlwZSB2YXJpYWJsZXMg
aW4gcmV0dXJuIHR5cGUgYW5kIHRoZXJlIGlzIG5vIHRhcmdldCB0eXBlICAKIAkvLyBCYXNlIHR5
cGUgcHJvbW90aW9uCisJaWYgKHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50
KSB7CisJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCWxvbmcgc291
cmNlTGV2ZWwgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbDsKKwkJYm9vbGVh
biByZWNlaXZlckNhc3QgPSBmYWxzZTsKKwkJaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBD
YXN0RXhwcmVzc2lvbikgeworCQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IEFTVE5vZGUuRGlzYWJs
ZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQlyZWNlaXZl
ckNhc3QgPSB0cnVlOworCQl9CisJCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNl
aXZlci5yZXNvbHZlVHlwZShzY29wZSk7CisJCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJl
Y2VpdmVyIGluc3RhbmNlb2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlz
LnJlY2VpdmVyKS5iaXRzICYgQmluZGluZy5UWVBFKSAhPSAwOworCQlpZiAocmVjZWl2ZXJDYXN0
ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlICE9IG51bGwpIHsKKwkJCS8vIGR1ZSB0byBjaGFu
Z2Ugb2YgZGVjbGFyaW5nIGNsYXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBj
YXN0IHNob3VsZCBiZSBub3RpZmllZAorCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygo
KENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSkpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51
bm5lY2Vzc2FyeUNhc3QoKENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOworCQkJfQorCQl9
CisJCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNh
bGwpCisJCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9
IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMg
PSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3Mg
YWxsIGFyZ3VtZW50cworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJ
CVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKKwkJ
CQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29s
dmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgeworCQkJCQl0
aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOworCQkJCX0KKwkJCQlpZiAodGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewor
CQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVS
ZWZlcmVuY2UpOworCQkJCX0KKwkJCX0KKwkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMp
IHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRv
IHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3Vt
ZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVz
b2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQor
CQl9CisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9y
cyA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCWludCBsZW5ndGggPSB0
aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspeworCQkJ
CUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAodGhpcy5h
cmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVjdGVkbHkg
Zm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJCWlmIChhcmd1bWVudCBp
bnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQkJCWFyZ3VtZW50LmJpdHMgfD0gQVNUTm9k
ZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJ
CQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVudC5zZXRF
eHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICgodGhpcy5hcmd1
bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKKwkJ
CQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKKwkJCQl9CisJCQl9CisJCQlpZiAo
dGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7CisJCQkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJCQkvLyAgcmVjb3JkIGEgYmVz
dCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2Qg
bWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xl
bmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykKKwkJCQkJCXBzZXVk
b0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5V
TEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3
aXRoIG51bGwgdHlwZQogCi0JdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsK
LQlsb25nIHNvdXJjZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWw7
Ci0JYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5yZWNlaXZlciBpbnN0
YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBBU1ROb2Rl
LkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQly
ZWNlaXZlckNhc3QgPSB0cnVlOwotCX0KLQlpZiAodGhpcy5yZWNlaXZlci5yZXNvbHZlZFR5cGUg
IT0gbnVsbCkKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KCJSZWNlaXZlciB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5P
Ti1OTFMtMSQKLQl0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2ZXIucmVzb2x2
ZVR5cGUoc2NvcGUpOwotCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJlY2VpdmVyIGluc3Rh
bmNlb2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5i
aXRzICYgQmluZGluZy5UWVBFKSAhPSAwOwotCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkgewotCQkgLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJp
bmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJl
IG5vdGlmaWVkCi0JCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lv
bil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUpKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3Qo
KENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOwotCQl9Ci0JfQotCS8vIHJlc29sdmUgdHlw
ZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlw
ZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMu
bGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBzb3VyY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQl0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAo
aW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVy
ZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFy
Z3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hl
Y2sgYm91bmRzKi8pKSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0g
dHJ1ZTsKLQkJCX0KLQkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVy
ZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
aWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQotCQlpZiAo
dGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVs
bCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9yIChpbnQg
aSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7Ci0JCQkJ
CXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKLQkJCQl9Ci0JCQl9Ci0JCQly
ZXR1cm4gbnVsbDsKLQkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3Mg
YXJlIHJlc29sdmVkCi0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJdGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQlp
bnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMg
PSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7
IGkrKyl7Ci0JCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07Ci0JCQlp
ZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhw
ZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlpZiAoYXJn
dW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQkJCWFyZ3VtZW50LmJpdHMgfD0g
QVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIg
b24KLQkJCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5z
ZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKCh0aGlzLmFy
Z3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewot
CQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmIChhcmd1bWVudC5p
c1BvbHlFeHByZXNzaW9uKCkKLQkJCQkJfHwgKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlv
biAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYg
KHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0J
CX0KLQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJCS8vICByZWNv
cmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAotCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOwotCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykKLQkJCQkJ
cHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJpbmRp
bmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJy
b3JzIHdpdGggbnVsbCB0eXBlCi0JCQkJdGhpcy5iaW5kaW5nID0KLQkJCQkJdGhpcy5yZWNlaXZl
ci5pc0ltcGxpY2l0VGhpcygpCi0JCQkJCQk/IHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMu
c2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMpCi0JCQkJCQk6IHNjb3BlLmZpbmRNZXRob2QoKFJl
ZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBw
c2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7Ci0JCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYm
ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0
TWF0Y2g7Ci0JCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hv
IG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJCWlm
IChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewotCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5h
bCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5l
cmljIG1ldGhvZAotCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0
c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5
KQotCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmlu
ZGluZyludWxsKTsKLQkJCQkJCX0KLQkJCQkJCXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsK
LQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKTsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRC
eVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9y
aWdpbmFsKSkgewotCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBm
cm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVjdCByZWN1cnNpb25zKQotCQkJCQkJ
CWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJz
LkFjY0xvY2FsbHlVc2VkOworCQkJCQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1w
bGljaXRUaGlzKCkgPworCQkJCQkJCQlzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVj
dG9yLCBwc2V1ZG9BcmdzLCB0aGlzKSA6CisJCQkJCQkJCQlzY29wZS5maW5kTWV0aG9kKChSZWZl
cmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgcHNl
dWRvQXJncywgdGhpcywgZmFsc2UpOworCisJCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAm
JiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcg
Y2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nl
c3RNYXRjaDsKKwkJCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMg
d2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCisJCQkJ
CQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9y
aWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8v
IGdlbmVyaWMgbWV0aG9kCisJCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRo
b2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAo
MTc1NDA5KQorCQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3
VHlwZUJpbmRpbmcpbnVsbCk7CisJCQkJCQkJfQorCQkJCQkJCXRoaXMuYmluZGluZyA9IGNsb3Nl
c3RNYXRjaDsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xv
c2VzdE1hdGNoLm9yaWdpbmFsKCk7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlz
T3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xv
c2VzdE1hdGNoT3JpZ2luYWwpKSB7CisJCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRo
b2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVjdCByZWN1cnNp
b25zKQorCQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFDb21w
aWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0K
IAkJCQl9CisJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJaWYgKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlID09IG51bGwpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCS8vIGJhc2UgdHlw
ZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQorCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5
cGUuaXNCYXNlVHlwZSgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0
aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMp
OwogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9Ci0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBl
ID09IG51bGwpIHsKLQkJcmV0dXJuIG51bGw7CisJCisJVHlwZUJpbmRpbmcgbWV0aG9kVHlwZSA9
IGZpbmRNZXRob2RCaW5kaW5nKHNjb3BlKTsKKwlpZiAobWV0aG9kVHlwZSAhPSBudWxsICYmIG1l
dGhvZFR5cGUuaXNQb2x5VHlwZSgpKSB7CisJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy5iaW5k
aW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOworCQlyZXR1cm4g
bWV0aG9kVHlwZTsKIAl9Ci0JLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFueSBtZXNzYWdl
Ci0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgewotCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOwotCQlyZXR1cm4gbnVsbDsKLQl9Ci0KLQlmaW5k
TWV0aG9kQmluZGluZyhzY29wZSk7CiAKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewpAQCAt
NzIzLDYgKzcyMSwxMiBAQAogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVtSWQoKSkgewog
CQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAvLyBubyByZXNp
bGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxp
Y2FibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9jYXRp
b25UeXBlSW5mZXJlbmNlRmFpbHVyZToKKwkJCQkvLyBHcmFiYmluZyB0aGUgY2xvc2VzdCBtYXRj
aCBpbXByb3ZlcyBlcnJvciByZXBvcnRpbmcgaW4gbmVzdGVkIGludm9jYXRpb24gY29udGV4dHMK
KwkJCQlpZiAodGhpcy5leHByZXNzaW9uQ29udGV4dCAhPSBJTlZPQ0FUSU9OX0NPTlRFWFQpCisJ
CQkJCWJyZWFrOworCQkJCS8vJEZBTEwtVEhST1VHSCQKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMu
Tm90VmlzaWJsZSA6CiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1JlZmVyZW5jZUlu
Q29uc3RydWN0b3JJbnZvY2F0aW9uIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGlj
UmVmZXJlbmNlSW5TdGF0aWNDb250ZXh0IDoKQEAgLTg2MCwxNiArODY0LDIwIEBACiAJCQkJPyB0
aGlzLnJlc29sdmVkVHlwZQogCQkJCTogbnVsbDsKIH0KLS8qKgotICogRmluZCB0aGUgbWV0aG9k
IGJpbmRpbmc7IAotICogaWYgdGhpcy5pbm5lcnNOZWVkVXBkYXRlIGFsbG93IGZvciB0d28gYXR0
ZW1wdHMgd2hlcmUgdGhlIGZpcnN0IHJvdW5kIG1heSBzdG9wCi0gKiBhZnRlciBhcHBsaWNhYmls
aXR5IGNoZWNraW5nICgxOC41LjEpIHRvIGluY2x1ZGUgbW9yZSBpbmZvcm1hdGlvbiBpbnRvIHRo
ZSBmaW5hbAotICogaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAoMTguNS4yKS4KLSAqLwotcHJv
dGVjdGVkIHZvaWQgZmluZE1ldGhvZEJpbmRpbmcoQmxvY2tTY29wZSBzY29wZSkgewotCXRoaXMu
YmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJPyBzY29wZS5nZXRJ
bXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpCisK
K3Byb3RlY3RlZCBUeXBlQmluZGluZyBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Njb3BlIHNjb3Bl
KSB7CisJCisJCisJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygp
ID8gCisJCQlzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHRoaXMpIAogCQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisKKwlpZiAo
dGhpcy5iaW5kaW5nID09IG51bGwpIC8vIGNhbid0IGhhcHBlbiA/IEkgdGhpbmsgd2UgYWx3YXlz
IGdldCBhIHByb2JsZW0gYmluZGluZywgYW55d2F5cy4KKwkJcmV0dXJuIG51bGw7CisJCisJaWYg
KHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpCisJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOworCQogCXJlc29sdmVQ
b2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRU
eXBlcywgc2NvcGUpOwogCQogCS8qIFRoZXJlIGFyZSBlbWJlZGRlZCBhc3N1bXB0aW9ucyBpbiB0
aGUgSkxTOCB0eXBlIGluZmVyZW5jZSBzY2hlbWUgdGhhdCBhIHN1Y2Nlc3NmdWwgc29sdXRpb24g
b2YgdGhlIHR5cGUgZXF1YXRpb25zIHJlc3VsdHMgaW4gYW4KQEAgLTg4NCwxMSArODkyLDggQEAK
IAlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJP
cHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewog
CQlpZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5
Q2hlY2spCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwZ21iID0gKFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nOwotCQlJbmZlcmVuY2VDb250ZXh0MTgg
Y3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChwZ21iKTsKLQkJaWYgKGN0eCA9PSBudWxsIHx8IGN0
eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpCi0J
CQlyZXR1cm47CiAJCWludCBsZW5ndGggPSBwZ21iLnR5cGVBcmd1bWVudHMgPT0gbnVsbCA/IDAg
OiBwZ21iLnR5cGVBcmd1bWVudHMubGVuZ3RoOwogCQlib29sZWFuIHNhd1Jhd1R5cGUgPSBmYWxz
ZTsKIAkJZm9yIChpbnQgaSA9IDA7ICBpIDwgbGVuZ3RoOyBpKyspIHsKQEAgLTg5Nyw0MCArOTAy
LDI2IEBACiAJCQkgICBkb2VzIG5vdCBhcHBlYXIgZnVsbHkgaG9va2VkIHVwIGludG8gaXNDb21w
YXRpYmxlV2l0aCBhbmQgaXNFcXVpdmFsZW50IHRvIGV2ZXJ5d2hlcmUuIEF0IHRoZSBtb21lbnQs
IGJhaWwgb3V0IGlmIHdlIHNlZSBjYXB0dXJlLgogCQkJKi8gICAKIAkJCWlmIChwZ21iLnR5cGVB
cmd1bWVudHNbaV0uaXNDYXB0dXJlKCkpCi0JCQkJcmV0dXJuOworCQkJCXJldHVybiB0aGlzLmJp
bmRpbmcucmV0dXJuVHlwZTsKIAkJCWlmIChwZ21iLnR5cGVBcmd1bWVudHNbaV0uaXNSYXdUeXBl
KCkpCiAJCQkJc2F3UmF3VHlwZSA9IHRydWU7CiAJCX0KIAkJaWYgKCFzYXdSYXdUeXBlKQotCQkJ
cmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQlsZW5ndGggPSB0
aGlzLmFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKIAkJaWYg
KGxlbmd0aCA9PSAwKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5U
eXBlOwogCQlUeXBlQmluZGluZyBbXSBmaW5hbEFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJVHlw
ZUJpbmRpbmcgZmluYWxBcmd1bWVudFR5cGUgPSB0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5
cGU7CiAJCQlpZiAoZmluYWxBcmd1bWVudFR5cGUgPT0gbnVsbCB8fCAhZmluYWxBcmd1bWVudFR5
cGUuaXNWYWxpZEJpbmRpbmcoKSkgIC8vIGFscmVhZHkgc2lkZWQgd2l0aCB0aGUgZGV2aWwuCi0J
CQkJcmV0dXJuOworCQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJCWZpbmFs
QXJndW1lbnRUeXBlc1tpXSA9IGZpbmFsQXJndW1lbnRUeXBlOyAKIAkJfQotCQlpZiAoc2NvcGUu
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1bWVudFR5
cGVzLCBmYWxzZSwgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxFKQorCQlpZiAoc2NvcGUu
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1bWVudFR5
cGVzLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCiAJCQl0aGlzLmJpbmRpbmcgPSBu
ZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLm9yaWdpbmFsKCksIHRoaXMuYmlu
ZGluZy5zZWxlY3RvciwgZmluYWxBcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3Vu
ZCk7CiAJfQotfQotCi1AT3ZlcnJpZGUKLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RG
aW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlp
ZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KChQ
YXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBu
dWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJS
RUQpIHsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsKLQkJCU1ldGhvZEJpbmRp
bmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLCAoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQkJaWYgKHVwZGF0
ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgewotCQkJCUFTVE5vZGUucmVz
b2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5kaW5nLCBzY29wZSk7
Ci0JCQl9Ci0JCX0KLQl9Ci0JcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOworCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIH0KIAogcHVibGljIHZvaWQgc2V0QWN0dWFsUmVjZWl2ZXJU
eXBlKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CkBAIC05NjYsNiArOTU3LDQxIEBA
CiAJICovCiAJcmV0dXJuIGlzUG9seUV4cHJlc3Npb24odGhpcy5iaW5kaW5nKTsKIH0KKworcHVi
bGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBl
LCBTY29wZSBzY29wZSkgeworCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgfHwgdGhpcy5i
aW5kaW5nID09IG51bGwgfHwgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpIHx8IHRhcmdl
dFR5cGUgPT0gbnVsbCB8fCBzY29wZSA9PSBudWxsKQorCQlyZXR1cm4gZmFsc2U7CisJaWYgKGlz
UG9seUV4cHJlc3Npb24oKSAmJiAhdGFyZ2V0VHlwZS5pc1ByaW1pdGl2ZU9yQm94ZWRQcmltaXRp
dmVUeXBlKCkpIC8vIGkuZSBpdCBpcyBkdW1iIHRvIHRyaWdnZXIgaW5mZXJlbmNlLCBjaGVja2lu
ZyBib3hpbmcgY29tcGF0aWJpbGl0eSBhZ2FpbnN0IHNheSBDb2xsZWN0b3I8PyBzdXBlciBULCBB
LCBSPi4KKwkJcmV0dXJuIGZhbHNlOworCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBl
ID0gdGhpcy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJn
ZXRUeXBlOworCQkvLyBObyBuZWVkIHRvIHR1bm5lbCB0aHJvdWdoIG92ZXJsb2FkIHJlc29sdXRp
b24uIHRoaXMuYmluZGluZyBpcyB0aGUgTVNNQi4KKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBp
c1BvbHlFeHByZXNzaW9uKCkgPyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QxOCh0aGlzLmJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCksIHRo
aXMuYXJndW1lbnRUeXBlcywgc2NvcGUsIHRoaXMpIDogdGhpcy5iaW5kaW5nOworCQlpZiAobWV0
aG9kID09IG51bGwgfHwgIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5U
eXBlID09IG51bGwgfHwgIW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQly
ZXR1cm4gZmFsc2U7CisJCXJldHVybiBzdXBlci5pc0JveGluZ0NvbXBhdGlibGUobWV0aG9kLnJl
dHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLCB0YXJnZXRUeXBlLCB0aGlz
LCBzY29wZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvcmlnaW5hbEV4
cGVjdGVkVHlwZTsKKwl9Cit9CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgZmluYWwgU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzIHx8IHRoaXMuYmluZGluZyA9PSBudWxsIHx8ICF0aGlzLmJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSB8fCB0YXJnZXRUeXBlID09IG51bGwgfHwgc2NvcGUgPT0gbnVsbCkK
KwkJcmV0dXJuIGZhbHNlOworCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBlID0gdGhp
cy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBl
OworCQkvLyBObyBuZWVkIHRvIHR1bm5lbCB0aHJvdWdoIG92ZXJsb2FkIHJlc29sdXRpb24uIHRo
aXMuYmluZGluZyBpcyB0aGUgTVNNQi4KKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBpc1BvbHlF
eHByZXNzaW9uKCkgPyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QxOCh0aGlzLmJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCksIHRoaXMuYXJn
dW1lbnRUeXBlcywgc2NvcGUsIHRoaXMpIDogdGhpcy5iaW5kaW5nOworCQlpZiAobWV0aG9kID09
IG51bGwgfHwgIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5UeXBlID09
IG51bGwgfHwgIW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4g
ZmFsc2U7CisJCXJldHVybiBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNv
dXJjZUVuZCkuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJfSBmaW5hbGx5
IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvcmlnaW5hbEV4cGVjdGVkVHlwZTsKKwl9Cit9CisK
IC8qKiBWYXJpYW50IG9mIGlzUG9seUV4cHJlc3Npb24oKSB0byBiZSB1c2VkIGR1cmluZyB0eXBl
IGluZmVyZW5jZSwgd2hlbiBhIHJlc29sdXRpb24gY2FuZGlkYXRlIGV4aXN0cy4gKi8KIHB1Ymxp
YyBib29sZWFuIGlzUG9seUV4cHJlc3Npb24oTWV0aG9kQmluZGluZyByZXNvbHV0aW9uQ2FuZGlk
YXRlKSB7CiAJaWYgKHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gQVNTSUdOTUVOVF9DT05URVhU
ICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gSU5WT0NBVElPTl9DT05URVhUKQpAQCAtMTAy
OSwyMSArMTA1NSwxMCBAQAogCXJldHVybiB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCk7
CiB9CiAvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLXB1YmxpYyBNZXRob2RCaW5kaW5n
IGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNj
b3BlIHNjb3BlKSB7Ci0JaWYgKHJlcG9ydEVycm9ycykgewotCQlpZiAodGhpcy5iaW5kaW5nID09
IG51bGwpCi0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3Io
Im1ldGhvZCBpcyB1bmV4cGVjdGVkbHkgdW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEk
Ci0JCWVsc2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKLQl9Citw
dWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7CiAJcmV0dXJuIHRoaXMuYmluZGluZzsKIH0KLXB1YmxpYyBFeHByZXNzaW9uW10g
YXJndW1lbnRzKCkgewotCXJldHVybiB0aGlzLmFyZ3VtZW50czsKLX0KLXB1YmxpYyBFeHByZXNz
aW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKLQlyZXR1cm4gdGhpcy5leHByZXNz
aW9uQ29udGV4dDsKLX0KKwogcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXRo
aXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKQEAgLTEwNTQs
MzIgKzEwNjksMTEgQEAKIAkJcmV0dXJuIG51bGw7CiAJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0
MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVh
biB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRl
eHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBu
dWxsOworcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CisJcmV0dXJuIHRoaXMuYXJn
dW1lbnRzOwogfQotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBk
YXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5j
ZUNvbnRleHRzICE9IG51bGwpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVu
Y2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5n
KTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUg
ZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRv
bmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNv
bHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJfQotCX0KLQl0aGlzLmJpbmRp
bmcgPSB1cGRhdGVkQmluZGluZzsKLQl0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5n
LnJldHVyblR5cGU7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KLXB1YmxpYyBib29sZWFuIGlubmVy
c05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVs
bDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQl0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lcklu
ZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsKK3B1
YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKKwlyZXR1cm4g
dGhpcy5leHByZXNzaW9uQ29udGV4dDsKIH0KIC8vIC0tIEludGVyZmFjZSBJbnZvY2F0aW9uU2l0
ZTogLS0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNj
b3BlIHNjb3BlKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25F
eHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9u
LmphdmEKaW5kZXggNTlmZmIyMC4uYjJmYmQzYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFs
aWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVk
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNDEwLDEwICs0MTAsNiBAQAogCQkJCWlmICgo
dGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBu
dWxsKXsKIAkJCQkJaGFzRXJyb3IgPSB0cnVlOwogCQkJCX0KLQkJCQlpZiAoc291cmNlTGV2ZWwg
Pj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lv
bigpIHx8IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZvY2F0aW9uKWFy
Z3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5j
ZUhlbHBlciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJ
bm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KIAkJCX0KIAkJfQogCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNl
RXhwcmVzc2lvbi5qYXZhCmluZGV4IDM0MzM4Y2EuLmRmMzQ1NzcgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNl
RXhwcmVzc2lvbi5qYXZhCkBAIC03MjYsMTggKzcyNiw2IEBACiAJCX0KIAl9CiAKLQlwdWJsaWMg
TWV0aG9kQmluZGluZyBwcmVwYXJlRm9ySW5mZXJlbmNlUmVzdWx0KFNjb3BlIHNjb3BlKSB7Ci0J
CXRyeSB7Ci0JCQlzZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJ
dGhpcy5iaW5kaW5nID0gbnVsbDsKLQkJCXRoaXMudHJpYWxSZXNvbHV0aW9uID0gdHJ1ZTsKLQkJ
CXJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJcmV0dXJuIHRoaXMuYmluZGlu
ZzsKLQkJfSBmaW5hbGx5IHsKLQkJCXRoaXMudHJpYWxSZXNvbHV0aW9uID0gZmFsc2U7Ci0JCX0K
LQl9Ci0KIAlwdWJsaWMgYm9vbGVhbiBpc0NvbnN0cnVjdG9yUmVmZXJlbmNlKCkgewogCQlyZXR1
cm4gQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zZWxlY3RvciwgIENvbnN0YW50UG9vbC5Jbml0
KTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JvdW5kU2V0LmphdmEKaW5kZXggYTEzMmM5Mi4uYjkzYzA2MyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQu
amF2YQpAQCAtNDU2LDggKzQ1Niw2IEBACiAJCQlpZiAoIWluY29ycG9yYXRlKGNvbnRleHQsIGZy
ZXNoQm91bmRzLCBmcmVzaEJvdW5kcykpCiAJCQkJcmV0dXJuIGZhbHNlOwogCi0JCQl0aGlzLmNh
cHR1cmVzLmNsZWFyKCk7Ci0JCQkKIAkJCS8vIE1lcmdlIHRoZSBib3VuZHMgaW50byBvbmUgaW5j
b3Jwb3JhdGVkIGdlbmVyYXRpb24uCiAJCQlmaW5hbCBpbnQgaW5jb3Jwb3JhdGVkTGVuZ3RoID0g
dGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoOwogCQkJZmluYWwgaW50IHVuaW5jb3Jwb3Jh
dGVkTGVuZ3RoID0gZnJlc2hCb3VuZHMubGVuZ3RoOwpAQCAtNTgzLDcgKzU4MSw5IEBACiAJCXdo
aWxlIChjYXB0SXRlci5oYXNOZXh0KCkpIHsKIAkJCUVudHJ5PFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZywgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nPiBjYXB0ID0gY2FwdEl0ZXIubmV4dCgpOwog
CQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBbHBoYSA9IGNhcHQuZ2V0S2V5KCk7Ci0JCQlQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSBjYXB0LmdldFZhbHVlKCk7CisJCQkvLyBXZSBj
b21lIGluIHdpdGggY2FwdHVyZShnQSksIHdlIG5lZWQgdG8gd29yayB3aXRoIGdBIGJlbG93LiBJ
dCB3YXMgbmVjZXNzYXJ5IHRvIGVzdGFibGlzaCBjYXB0dXJlIGF0IHRoZSBjYWxsIHNpdGUuCisJ
CQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgY2dBID0gY2FwdC5nZXRWYWx1ZSgpOworCQkJUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgY2dB
LnVuY2FwdHVyZShjb250ZXh0LnNjb3BlKTsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZyA9IChSZWZl
cmVuY2VCaW5kaW5nKSBnQS5vcmlnaW5hbCgpOwogCQkJZmluYWwgVHlwZVZhcmlhYmxlQmluZGlu
Z1tdIHBhcmFtZXRlcnMgPSBnLnR5cGVWYXJpYWJsZXMoKTsKIAkJCS8vIGNvbnN0cnVjdCB0aGV0
YSA9IFtQMTo9YWxwaGExLC4uLl0KQEAgLTYwMiw2ICs2MDIsNyBAQAogCQkJCWFkZEJvdW5kcyhw
aS5nZXRUeXBlQm91bmRzKGFscGhhLCB0aGV0YSksIGNvbnRleHQuZW52aXJvbm1lbnQpOwogCiAJ
CQkJVHlwZUJpbmRpbmcgYWkgPSBnQS5hcmd1bWVudHNbaV07CisJCQkJVHlwZUJpbmRpbmcgY2Fp
ID0gY2dBLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2FyZEJpbmRp
bmcpIHsKIAkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkQmluZGluZyA9IChXaWxkY2FyZEJp
bmRpbmcpYWk7CiAJCQkJCVR5cGVCaW5kaW5nIHQgPSB3aWxkY2FyZEJpbmRpbmcuYm91bmQ7CkBA
IC02MTMsNyArNjE0LDE0IEBACiAJCQkJCQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9y
KCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhhc05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91bmQgYm91
bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5m
ZXJlbmNlVmFyaWFibGUpKQorCQkJCQkJCQkvKiBXaXRoIHRoZSBleHBlY3RlZCB0eXBlJ3MgZGVj
bGFyZWQgdHlwZSBiZWluZyBDb2xsZWN0b3I8PyBzdXBlciBULCBBLCBSPiBhbmQgZ0FscGhhIGJl
aW5nIENvbGxlY3RvcjxUIzAsPyMxLExpc3Q8VCMwPiMyPiBhbmQgY2dBIGJlaW5nCisJCQkJCQkJ
CSAgIENvbGxlY3RvcjxUIzAsY2FwdHVyZSMxLW9mID8sTGlzdDxUIzA+Piwgd2l0aG91dCB0aGUg
Y29uc3RyYWludCByZWR1Y3Rpb24gYmVsb3cgLSB3ZSB3aWxsIG5ldmVyIGRpc2NvdmVyIEEgdG8g
YmUgY2FwdHVyZSMxLW9mID8gYW5kCisJCQkJCQkJCSAgIGNsYWltIEEgaXMgamxPLiBTZWUgaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMjQgLSAj
MjcKKwkJCQkJCQkJKi8KKwkJCQkJCQkJaWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNvbnRleHQs
IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoYm91bmQucmlnaHQsIGNhaSwgUmVkdWN0aW9u
UmVzdWx0LlNBTUUpKSkKKwkJCQkJCQkJCXJldHVybiBmYWxzZTsKKwkJCQkJCQkJLy8gT3VyID0g
cmVkdWN0aW9uIHRyYW5zaXRpdmVseSBhZGRzIGEgbmV3IGJvdW5kIHRoYXQgbmVjZXNzaXRhdGVz
IHRoZSBjaGVjayBiZWxvdyBmb3IgY2FwdHVyZS4gCisJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0
IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpICYmICFib3VuZC5yaWdodC5pc0NhcHR1cmUo
KSkKIAkJCQkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJCQl9CiAJCQkJCQl9CkBAIC02NjgsNiAr
Njc2LDcgQEAKIAkJCQl9CiAJCQl9CiAJCX0KKwkJdGhpcy5jYXB0dXJlcy5jbGVhcigpOwogCQly
ZXR1cm4gdHJ1ZTsKIAl9CiAKQEAgLTk1Nyw2ICs5NjYsMjAgQEAKIAkJcmV0dXJuIHRocmVlLmZp
bmRTaW5nbGVXcmFwcGVyVHlwZSgpOwogCX0KIAorCXByaXZhdGUgVHlwZUJpbmRpbmcgYXBwbHlJ
bnN0YW50aWF0aW9ucyhUeXBlQmluZGluZyB0eXBlKSB7CisJCWlmICh0eXBlLmlzUHJvcGVyVHlw
ZSh0cnVlKSkKKwkJCXJldHVybiB0eXBlOworCQorCQlJdGVyYXRvcjxJbmZlcmVuY2VWYXJpYWJs
ZT4gdmFyaWFibGVJdCA9IHRoaXMuYm91bmRzUGVyVmFyaWFibGUua2V5U2V0KCkuaXRlcmF0b3Io
KTsKKwkJd2hpbGUgKHZhcmlhYmxlSXQuaGFzTmV4dCgpKSB7CisJCQlJbmZlcmVuY2VWYXJpYWJs
ZSBpbmZlcmVuY2VWYXJpYWJsZSA9IHZhcmlhYmxlSXQubmV4dCgpOworCQkJVHlwZUJpbmRpbmcg
aW5zdGFudGlhdGlvbiA9IGdldEluc3RhbnRpYXRpb24oaW5mZXJlbmNlVmFyaWFibGUsIG51bGwp
OworCQkJaWYgKGluc3RhbnRpYXRpb24gIT0gbnVsbCkKKwkJCQl0eXBlID0gdHlwZS5zdWJzdGl0
dXRlSW5mZXJlbmNlVmFyaWFibGUoaW5mZXJlbmNlVmFyaWFibGUsIGluc3RhbnRpYXRpb24pOwor
CQl9CisJCXJldHVybiB0eXBlOworCX0KKwkKIAkvLyB0aGlzIGNvbmRpdGlvbiBpcyBqdXN0IHdh
eSB0b28gY29tcGxleCB0byBjaGVjayBpdCBpbi1saW5lOgogCXB1YmxpYyBib29sZWFuIGNvbmRp
dGlvbjE4XzVfMl9idWxsZXRfM18zXzEoSW5mZXJlbmNlVmFyaWFibGUgYWxwaGEsIFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUpIHsKIAkJLy8gVCBpcyBhIHJlZmVyZW5jZSB0eXBlLCBidXQgaXMgbm90
IGEgd2lsZGNhcmQtcGFyYW1ldGVyaXplZCB0eXBlLCBhbmQgZWl0aGVyIApAQCAtOTkyLDggKzEw
MTUsMTYgQEAKIAkJCQlmb3IgKGludCBqPWkrMTsgajxsZW47IGorKykgewogCQkJCQlUeXBlQmlu
ZGluZyBzMiA9IHN1cGVyQm91bmRzLmdldChqKS5yaWdodDsKIAkJCQkJVHlwZUJpbmRpbmdbXSBz
dXBlcnMgPSBzdXBlclR5cGVzV2l0aENvbW1vbkdlbmVyaWNUeXBlKHMxLCBzMik7Ci0JCQkJCWlm
IChzdXBlcnMgIT0gbnVsbCAmJiAhVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHN1cGVyc1swXSwg
c3VwZXJzWzFdKSkKLQkJCQkJCXJldHVybiB0cnVlOworCQkJCQlpZiAoc3VwZXJzICE9IG51bGwp
IHsKKwkJCQkJCS8qIEhhc2hNYXA8SyM4LFYjOT4gYW5kIEhhc2hNYXA8SyM4LEFycmF5TGlzdDxU
Pj4gd2l0aCBhbiBpbnN0YW50aWF0aW9uIGZvciBWOSA9IEFycmF5TGlzdDxUPiBhbHJlYWR5IGlu
IHRoZSAKKwkJCQkJCSAgIGJvdW5kIHNldCBzaG91bGQgbm90IGJlIHNlZW4gYXMgdHdvIGRpZmZl
cmVudCBwYXJhbWV0ZXJpemF0aW9ucyBvZiB0aGUgc2FtZSBnZW5lcmljIGNsYXNzIG9yIGludGVy
ZmFjZS4KKwkJCQkJCSAgIFNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDMyNjI2IGZvciBhIHRlc3QgdGhhdCB0cmlnZ2VycyB0aGlzIGNvbmRpdGlvbi4K
KwkJCQkJCSovCisJCQkJCQlzdXBlcnNbMF0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sw
XSk7CisJCQkJCQlzdXBlcnNbMV0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sxXSk7CisJ
CQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkp
CisJCQkJCQkJcmV0dXJuIHRydWU7CisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0NjYu
LjI4MjA2MzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25G
b3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11
bGEuamF2YQpAQCAtMTcsMTggKzE3LDEzIEBACiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiBpbXBv
cnQgamF2YS51dGlsLlNldDsKIAotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5BU1RWaXNpdG9yOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4
cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5S
ZWZlcmVuY2VFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuUmV0dXJuU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuU3RhdGVtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4LlN1c3BlbmRlZEluZmVyZW5jZVJl
Y29yZDsKIAogLyoqCkBAIC01Niw0MSArNTEsOCBAQAogCiAJcHVibGljIE9iamVjdCByZWR1Y2Uo
SW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQpIHRocm93cyBJbmZlcmVuY2VGYWls
dXJlRXhjZXB0aW9uIHsKIAkJLy8gSkxTIDE4LjIuMQotCQlwcm9wZXI6CiAJCWlmICh0aGlzLnJp
Z2h0LmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSB0aGlz
LmxlZnQucmVzb2x2ZWRUeXBlOwotCQkJaWYgKGV4cHJUeXBlID09IG51bGwpIHsKLQkJCQkvLyBp
ZiB3ZSBnZXQgaGVyZSBmb3Igc29tZSBraW5kcyBvZiBwb2x5IGV4cHJlc3Npb25zIChpbmNsLiBD
b25kaXRpb25hbEV4cHJlc3Npb24pLAotCQkJCS8vIHRoZW4gb3RoZXIgd2F5cyBmb3IgY2hlY2tp
bmcgY29tcGF0aWJpbGl0eSBhcmUgbmVlZGVkOgotICAgICAgICAgICAgICAgIGlmICh0aGlzLmxl
ZnQgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewotICAgICAgICAgICAgICAgICAg
ICBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewotICAgICAgICAg
ICAgICAgICAgICAgICAgLy8gY2YuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvblRlc3QudGVzdDQx
MjQ1MygpCi0gICAgICAgICAgICAgICAgICAgICAgICBMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSAo
KExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdCkuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNl
VGFyZ2V0aW5nKHRoaXMucmlnaHQpOwotICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChj
b3B5ICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiBjb3B5LnJlc29sdmVk
VHlwZS5pc1ZhbGlkQmluZGluZygpKSA/IFRSVUUgOiBGQUxTRTsKLSAgICAgICAgICAgICAgICAg
ICAgfQotICAgICAgICAgICAgICAgIH0KLSAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0
LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBU
UlVFIDogRkFMU0U7Ci0JCQl9IGVsc2UgaWYgKCFleHByVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7
Ci0JCQkJcmV0dXJuIEZBTFNFOwotCQkJfQotCQkJaWYgKGlzQ29tcGF0aWJsZVdpdGhJbkxvb3Nl
SW52b2NhdGlvbkNvbnRleHQoZXhwclR5cGUsIHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQp
KSB7Ci0JCQkJcmV0dXJuIFRSVUU7Ci0JCQl9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9m
IEFsbG9jYXRpb25FeHByZXNzaW9uICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKCkpIHsK
LQkJCQkvLyBoYWxmLXJlc29sdmVkIGRpYW1vbmQgaGFzIGEgcmVzb2x2ZWRUeXBlLCBidXQgdGhh
dCBtYXkgbm90IGJlIHRoZSBmaW5hbCB3b3JkLCB0cnkgb25lIG1vcmUgc3RlcCBvZiByZXNvbHV0
aW9uOgotICAgICAgICAgICAgCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9ICgoQWxsb2NhdGlvbkV4
cHJlc3Npb24pIHRoaXMubGVmdCkuYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7Ci0g
ICAgICAgICAgICAJcmV0dXJuIChiaW5kaW5nICE9IG51bGwgJiYgYmluZGluZy5kZWNsYXJpbmdD
bGFzcy5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUp
KSA/IFRSVUUgOiBGQUxTRTsKLSAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0IGluc3Rh
bmNlb2YgSW52b2NhdGlvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0gICAg
ICAgICAgICAJSW52b2NhdGlvbiBpbnZvYyA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0gICAg
ICAgICAgICAJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW52b2MuYmluZGluZyh0aGlzLnJpZ2h0
LCBmYWxzZSwgbnVsbCk7Ci0gICAgICAgICAgICAJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLSAgICAgICAgICAgIAkJUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIGJpbmRpbmc7Ci0JCQkJCUluZmVyZW5jZUNvbnRleHQxOCBsZWZ0Q3R4ID0g
aW52b2MuZ2V0SW5mZXJlbmNlQ29udGV4dChtZXRob2QpOwotICAgICAgICAgICAgCQlpZiAobGVm
dEN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsK
LSAgICAgICAgICAgIAkJCWJyZWFrIHByb3BlcjsgLy8gZmFsbCB0aHJvdWdoIGludG8gbmVzdGVk
IGluZmVyZW5jZSBiZWxvdyAobm90IGV4cGxpY2l0IGluIHRoZSBzcGVjISkKLSAgICAgICAgICAg
IAkJfQotICAgICAgICAgICAgCX0KLSAgICAgICAgICAgIH0KLQkJCXJldHVybiBGQUxTRTsKKwkJ
CXJldHVybiB0aGlzLmxlZnQuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VD
b250ZXh0LnNjb3BlKSB8fCB0aGlzLmxlZnQuaXNCb3hpbmdDb21wYXRpYmxlV2l0aCh0aGlzLnJp
Z2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRSVUUgOiBGQUxTRTsKIAkJfQogCQlpZiAo
IWNhbkJlUG9seUV4cHJlc3Npb24odGhpcy5sZWZ0KSkgewogCQkJVHlwZUJpbmRpbmcgZXhwclR5
cGUgPSB0aGlzLmxlZnQucmVzb2x2ZWRUeXBlOwpAQCAtMTAyLDcgKzY0LDcgQEAKIAkJCS8vIC0g
cGFyZW50aGVzaXplZCBleHByZXNzaW9uIDogdGhlc2UgYXJlIHRyYW5zcGFyZW50IGluIG91ciBB
U1QKIAkJCWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CiAJCQkJSW52b2Nh
dGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIHRoaXMubGVmdDsKLQkJCQlNZXRob2RCaW5k
aW5nIHByZXZpb3VzTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHRoaXMucmlnaHQsIGZhbHNl
LCBudWxsKTsKKwkJCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzTWV0aG9kID0gaW52b2NhdGlvbi5i
aW5kaW5nKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOwogCQkJCWlmIChwcmV2
aW91c01ldGhvZCA9PSBudWxsKSAgCS8vIGNhbiBoYXBwZW4sIGUuZy4sIGlmIGluc2lkZSBhIGNv
cGllZCBsYW1iZGEgd2l0aCBpZ25vcmVkIGVycm9ycwogCQkJCQlyZXR1cm4gbnVsbDsgCQkJCS8v
IC0+IHByb2NlZWQgd2l0aCBubyBuZXcgY29uc3RyYWludHMKIAkJCQlNZXRob2RCaW5kaW5nIG1l
dGhvZCA9IHByZXZpb3VzTWV0aG9kOwpAQCAtMTI3LDggKzg5LDExIEBACiAJCQkJCQkJCXJldHVy
biBGQUxTRTsKIAkJCQkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShleHBy
VHlwZSwgdGhpcy5yaWdodCwgQ09NUEFUSUJMRSwgdGhpcy5pc1NvZnQpOwogCQkJCQkJfQorCQkJ
CQkJaWYgKGlubmVyQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVf
SU5GRVJSRUQpIHsKKwkJCQkJCQkvLyBUaGUgY29uc3RyYWludHMgYW5kIGluaXRpYWwgYm91bmRz
IHRoYXQgd291bGQgZWZmZWN0aXZlbHkgcmVkdWNlIHRvIGIzIGFyZSBhbHJlYWR5IHRyYW5zZmVy
cmVkIHRvIGN1cnJlbnQgY29udGV4dCBkdXJpbmcgQyBTZXQgY29uc3RydWN0aW9uLgorCQkJCQkJ
CXJldHVybiBUUlVFOworCQkJCQkJfQogCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VL
aW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKLQkJCQkJCWlubmVyQ3R4Lm91dGVyQ29udGV4
dCA9IGluZmVyZW5jZUNvbnRleHQ7CiAJCQkJCX0KIAkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBt
ZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKG1ldGhv
ZCk7CiAJCQkJCWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwg
bWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpc0RpYW1vbmQsIGluZmVyZW5jZUNvbnRleHQuaW5mZXJl
bmNlS2luZCk7CkBAIC0xODgsMTMgKzE1Myw4IEBACiAJCQkJfQogCQkJCWlmIChmdW5jdGlvblR5
cGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CiAJCQkJCVR5cGVCaW5kaW5nIHIg
PSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsKLQkJCQkJRXhwcmVzc2lvbltdIGV4cHJzOwotCQkJ
CQlpZiAobGFtYmRhLmJvZHkoKSBpbnN0YW5jZW9mIEV4cHJlc3Npb24pIHsKLQkJCQkJCWV4cHJz
ID0gbmV3IEV4cHJlc3Npb25bXSB7KEV4cHJlc3Npb24pbGFtYmRhLmJvZHkoKX07Ci0JCQkJCX0g
ZWxzZSB7Ci0JCQkJCQlleHBycyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOwotCQkJCQl9
Ci0JCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgZXhwcnMubGVuZ3RoOyBpKyspIHsKKwkJCQkJRXhw
cmVzc2lvbltdIGV4cHJzID0gbGFtYmRhLnJlc3VsdEV4cHJlc3Npb25zKCk7CisJCQkJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBleHBycyA9PSBudWxsID8gMCA6IGV4cHJzLmxlbmd0aDsgaSA8
IGxlbmd0aDsgaSsrKSB7CiAJCQkJCQlFeHByZXNzaW9uIGV4cHIgPSBleHByc1tpXTsKIAkJCQkJ
CWlmIChyLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBleHByLnJlc29sdmVkVHlwZSAhPSBudWxsKSB7
CiAJCQkJCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSBleHByLnJlc29sdmVkVHlwZTsKQEAgLTIx
Nyw3ICsxNzcsNyBAQAogCQlyZXR1cm4gRkFMU0U7CiAJfQogCi0JcHVibGljIFJlZmVyZW5jZUJp
bmRpbmcgZmluZEdyb3VuZFRhcmdldFR5cGUoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNv
bnRleHQsIEJsb2NrU2NvcGUgc2NvcGUsCisJcHVibGljIHN0YXRpYyBSZWZlcmVuY2VCaW5kaW5n
IGZpbmRHcm91bmRUYXJnZXRUeXBlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0
LCBCbG9ja1Njb3BlIHNjb3BlLAogCQkJCQkJCQkJCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRh
LCBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZVdpdGhXaWxkQ2FyZHMpCiAJewog
CQlpZiAobGFtYmRhLmFyZ3VtZW50c1R5cGVFbGlkZWQoKSkgewpAQCAtMjU0LDExICsyMTQsOSBA
QAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRo
b2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0g
bnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBtZXRo
b2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAot
CQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29t
cGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7Ci0JCWlm
IChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJldHVybiBGQUxTRTsKKwogCQlp
ZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgeworCQkJTWV0aG9kQmluZGlu
ZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJ
CQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8
Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUu
cGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yNjgsNiArMjI2LDggQEAKIAkJ
CWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZv
cm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxF
KSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAhPSBrKSB7CisJCQkJcmV0dXJu
IEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQlu
ZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJp
bWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYsMTEgKzIzNiwxNSBAQAogCQkJCVR5
cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmlzQ29uc3RydWN0b3IoKSAm
JiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5jZSgpID8gcG90ZW50aWFsbHlB
cHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlBcHBsaWNhYmxlLnJldHVyblR5
cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJCXJldHVybiBGQUxT
RTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlvbj8/CisJCQkJVHlwZUJpbmRp
bmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVu
Y2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJCX0KIAkJCXJldHVybiBuZXdD
b25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5z
aXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0aG9kQmluZGluZyBwb3RlbnRp
YWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5n
KHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxl
IG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMu
MSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCisJCQkJcmV0dXJuIEZB
TFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBlLnBhcmFt
ZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMjk5LDcgKzI2Myw3IEBACiAJCQlUeXBl
QmluZGluZyBjb21waWxlVHlwZVJldHVybiA9IG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSA/IG9y
aWdpbmFsLmRlY2xhcmluZ0NsYXNzIDogb3JpZ2luYWwucmV0dXJuVHlwZTsKIAkJCWlmIChyZWZl
cmVuY2UudHlwZUFyZ3VtZW50cyA9PSBudWxsCiAJCQkJCSYmICgob3JpZ2luYWwudHlwZVZhcmlh
YmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgY29tcGlsZVR5cGVSZXR1cm4u
bWVudGlvbnNBbnkob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCAtMSkpCi0JCQkJCQl8fCAob3Jp
Z2luYWwuaXNDb25zdHJ1Y3RvcigpICYmIG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNzLnR5cGVWYXJp
YWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSkpCisJCQkJCQl8fCAob3JpZ2lu
YWwuaXNDb25zdHJ1Y3RvcigpICYmIGNvbXBpbGVUaW1lRGVjbC5kZWNsYXJpbmdDbGFzcy5pc1Jh
d1R5cGUoKSkpKQogCQkJCQkJCS8vIG5vdCBjaGVja2luZyByLm1lbnRpb25zQW55IGZvciBjb25z
dHJ1Y3RvcnMsIGJlY2F1c2UgQTo6bmV3IHJlc29sdmVzIHRvIHRoZSByYXcgdHlwZQogCQkJCQkJ
CS8vIHdoZXJlYXMgaW4gZmFjdCB0aGUgdHlwZSBvZiBhbGwgZXhwcmVzc2lvbnMgb2YgdGhpcyBz
aGFwZSBkZXBlbmRzIG9uIHRoZWlyIHR5cGUgdmFyaWFibGUgKGlmIGFueSkKIAkJCXsKQEAgLTMy
MSw3ICsyODUsNyBAQAogCQkJCQlpbmZlcmVuY2VDb250ZXh0LnJlc3VtZVN1c3BlbmRlZEluZmVy
ZW5jZShwcmV2SW52b2NhdGlvbik7CiAJCQkJfQogCQkJfQotCQkJVHlwZUJpbmRpbmcgclByaW1l
ID0gY29tcGlsZVRpbWVEZWNsLmlzQ29uc3RydWN0b3IoKSA/IGNvbXBpbGVUaW1lRGVjbC5kZWNs
YXJpbmdDbGFzcyA6IGNvbXBpbGVUaW1lRGVjbC5yZXR1cm5UeXBlOworCQkJVHlwZUJpbmRpbmcg
clByaW1lID0gY29tcGlsZVRpbWVEZWNsLmlzQ29uc3RydWN0b3IoKSA/IGNvbXBpbGVUaW1lRGVj
bC5kZWNsYXJpbmdDbGFzcyA6IGNvbXBpbGVUaW1lRGVjbC5yZXR1cm5UeXBlLmNhcHR1cmUoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgcmVmZXJlbmNlLnNvdXJjZUVuZCgpKTsKIAkJCWlmIChyUHJp
bWUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQpCiAJCQkJcmV0dXJuIEZBTFNFOwogCQkJcmV0dXJuIENv
bnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoclByaW1lLCByLCBDT01QQVRJQkxFLCB0aGlzLmlz
U29mdCk7CkBAIC0zODQsNyArMzQ4LDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFz
ID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50
cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4
dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6
ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdU
eXBlKCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZl
cmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJp
emVkVHlwZSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVu
dHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRh
LCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9j
YXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUg
bm9ubnVsbCBhcmd1bWVudHMKIAkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWlu
dCA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBB
VElCTEUpOwogCQkJCXJldHVybiBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRl
KG5ld0NvbnN0cmFpbnQpOwogCQkJfQpAQCAtNDA0LDcgKzM2OCw3IEBACiAJCQkJCUJvdW5kU2V0
IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVb
XXthbHBoYX0pOwogCQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxz
ZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEs
IG51bGwpLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291
cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJCVR5cGVCaW5k
aW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGlu
ZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJ
Q29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11
bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCQlyZXR1cm4gaW5mZXJl
bmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCQl9CkBA
IC00MzcsMTcgKzQwMSw5IEBACiAJCQkJCS8vIGlpKQogCQkJCQlmaW5hbCBUeXBlQmluZGluZyBy
ID0gc2FtLnJldHVyblR5cGU7CiAJCQkJCUxhbWJkYUV4cHJlc3Npb24gcmVzb2x2ZWQgPSBsYW1i
ZGEuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOwotCQkJ
CQlTdGF0ZW1lbnQgYm9keSA9IHJlc29sdmVkICE9IG51bGwgPyByZXNvbHZlZC5ib2R5KCkgOiBs
YW1iZGEuYm9keSgpOwotCQkJCQlpZiAoYm9keSBpbnN0YW5jZW9mIEV4cHJlc3Npb24pIHsKLQkJ
CQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSgoRXhw
cmVzc2lvbikgYm9keSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJsZXMoY29udGV4dCkpOwot
CQkJCQl9IGVsc2UgewotCQkJCQkJLy8gVE9ETzogc2hvdWxkIEkgdXNlIExhbWJkYUV4cHJlc3Np
b24ucmVzdWx0RXhwcmVzc2lvbnM/IChpcyBjdXJyZW50bHkgcHJpdmF0ZSkuCi0JCQkJCQlib2R5
LnRyYXZlcnNlKG5ldyBBU1RWaXNpdG9yKCkgewotCQkJCQkJCXB1YmxpYyBib29sZWFuIHZpc2l0
KFJldHVyblN0YXRlbWVudCByZXR1cm5TdGF0ZW1lbnQsIEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkJ
CQkJCQkJdmFyaWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKHJl
dHVyblN0YXRlbWVudC5leHByZXNzaW9uLCByLCBDT01QQVRJQkxFKS5pbnB1dFZhcmlhYmxlcyhj
b250ZXh0KSk7Ci0JCQkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJCQl9Ci0JCQkJCQl9LCAoQmxv
Y2tTY29wZSludWxsKTsKKwkJCQkJRXhwcmVzc2lvbltdIHJlc3VsdEV4cHJlc3Npb25zID0gcmVz
b2x2ZWQgIT0gbnVsbCA/IHJlc29sdmVkLnJlc3VsdEV4cHJlc3Npb25zKCkgOiBudWxsOworCQkJ
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gcmVzdWx0RXhwcmVzc2lvbnMgPT0gbnVsbCA/IDAg
OiByZXN1bHRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQkJdmFy
aWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKHJlc3VsdEV4cHJl
c3Npb25zW2ldLCByLCBDT01QQVRJQkxFKS5pbnB1dFZhcmlhYmxlcyhjb250ZXh0KSk7CiAJCQkJ
CX0KIAkJCQl9CiAJCQkJcmV0dXJuIHZhcmlhYmxlczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRU
eXBlRm9ybXVsYS5qYXZhCmluZGV4IGNhM2NjMGYuLmFiY2MxZjggMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50VHlwZUZvcm11bGEuamF2YQpAQCAtMTMsNiArMTMsNyBAQAogaW1wb3J0IGphdmEu
dXRpbC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiAKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIAogLyoqCkBAIC0xMTEs
MTAgKzExMiwxMCBAQAogCQkJCWlmICh0LmJvdW5kS2luZCA9PSBXaWxkY2FyZC5VTkJPVU5EKQog
CQkJCQlyZXR1cm4gVFJVRTsKIAkJCQlpZiAodC5ib3VuZEtpbmQgPT0gV2lsZGNhcmQuRVhURU5E
UykgewotCQkJCQlpZiAodGhpcy5sZWZ0LmtpbmQoKSAhPSBCaW5kaW5nLldJTERDQVJEX1RZUEUp
IHsKKwkJCQkJaWYgKHRoaXMubGVmdC5raW5kKCkgIT0gQmluZGluZy5XSUxEQ0FSRF9UWVBFICYm
ICF0aGlzLmxlZnQuaXNDYXB0dXJlKCkpIHsKIAkJCQkJCXJldHVybiBDb25zdHJhaW50VHlwZUZv
cm11bGEuY3JlYXRlKHRoaXMubGVmdCwgdC5ib3VuZCwgU1VCVFlQRSwgdGhpcy5pc1NvZnQpOwog
CQkJCQl9IGVsc2UgewotCQkJCQkJV2lsZGNhcmRCaW5kaW5nIHMgPSAoV2lsZGNhcmRCaW5kaW5n
KSB0aGlzLmxlZnQ7CisJCQkJCQlXaWxkY2FyZEJpbmRpbmcgcyA9IHRoaXMubGVmdC5pc0NhcHR1
cmUoKSA/ICgoQ2FwdHVyZUJpbmRpbmcpIHRoaXMubGVmdCkud2lsZGNhcmQgOiAoV2lsZGNhcmRC
aW5kaW5nKSB0aGlzLmxlZnQ7CiAJCQkJCQlzd2l0Y2ggKHMuYm91bmRLaW5kKSB7CiAJCQkJCQkJ
Y2FzZSBXaWxkY2FyZC5VTkJPVU5EOgogCQkJCQkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZShpbmZlcmVuY2VDb250ZXh0Lm9iamVjdCwgdC5ib3VuZCwgU1VCVFlQRSwgdGhp
cy5pc1NvZnQpOwpAQCAtMTI3LDEwICsxMjgsMTAgQEAKIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0g
ZWxzZSB7IC8vIFNVUEVSIAotCQkJCQlpZiAodGhpcy5sZWZ0LmtpbmQoKSAhPSBCaW5kaW5nLldJ
TERDQVJEX1RZUEUpIHsKKwkJCQkJaWYgKHRoaXMubGVmdC5raW5kKCkgIT0gQmluZGluZy5XSUxE
Q0FSRF9UWVBFICYmICF0aGlzLmxlZnQuaXNDYXB0dXJlKCkpIHsKIAkJCQkJCXJldHVybiBDb25z
dHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHQuYm91bmQsIHRoaXMubGVmdCwgU1VCVFlQRSwgdGhp
cy5pc1NvZnQpOwogCQkJCQl9IGVsc2UgewotCQkJCQkJV2lsZGNhcmRCaW5kaW5nIHMgPSAoV2ls
ZGNhcmRCaW5kaW5nKSB0aGlzLmxlZnQ7CisJCQkJCQlXaWxkY2FyZEJpbmRpbmcgcyA9IHRoaXMu
bGVmdC5pc0NhcHR1cmUoKSA/ICgoQ2FwdHVyZUJpbmRpbmcpIHRoaXMubGVmdCkud2lsZGNhcmQg
OiAoV2lsZGNhcmRCaW5kaW5nKSB0aGlzLmxlZnQ7CiAJCQkJCQlpZiAocy5ib3VuZEtpbmQgPT0g
V2lsZGNhcmQuU1VQRVIpIHsKIAkJCQkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNy
ZWF0ZSh0LmJvdW5kLCBzLmJvdW5kLCBTVUJUWVBFLCB0aGlzLmlzU29mdCk7CiAJCQkJCQl9IGVs
c2UgewpAQCAtMzExLDYgKzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlw
ZUZvcm11bGEuY3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZ
UEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmlu
ZGluZy5QT0xZX1RZUEU6CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5k
aW5nKSBzdXBlckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2Nh
dGlvbikgcG9seS5leHByZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9j
YXRpb24uYmluZGluZyhzdWJDYW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBu
dWxsIHx8ICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJ
CQlyZXR1cm4gcmVkdWNlU3ViVHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVy
blR5cGUuY2FwdHVyZShzY29wZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRo
cm93IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5k
aWRhdGUpOyAvLyROT04tTkxTLTEkCiAJfQpAQCAtMzQ3LDI3ICszNTUsMTMgQEAKIAkJCXJldHVy
biB0cnVlOwogCQlpZiAoIShjYiBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykp
IHsKIAkJCS8vIGlmIEMgaXMgcGFyYW1ldGVyaXplZCB3aXRoIGl0cyBvd24gdHlwZSB2YXJpYWJs
ZXMsIHRoZXJlJ3JlIG5vIG1vcmUgY29uc3RyYWludHMgdG8gYmUgY3JlYXRlZCBoZXJlLCBvdGhl
cndpc2UgbGV0J3MgZmFpbAotCQkJcmV0dXJuIGlzSW5zaWduaWZpY2FudFBhcmFtZXRlcml6ZWQo
Y2EpOworCQkJcmV0dXJuIGNhLmlzUGFyYW1ldGVyaXplZFdpdGhPd25WYXJpYWJsZXMoKTsKIAkJ
fQogCQlUeXBlQmluZGluZ1tdIGJpID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIGNiKS5h
cmd1bWVudHM7CiAJCWlmIChjYi5pc1Jhd1R5cGUoKSB8fCBiaSA9PSBudWxsIHx8IGJpLmxlbmd0
aCA9PSAwKQogCQkJcmV0dXJuICh0aGlzLmlzU29mdCAmJiBJbmZlcmVuY2VDb250ZXh0MTguU0lN
VUxBVEVfQlVHX0pES184MDI2NTI3KSA/IHRydWUgOiBmYWxzZTsgLy8gRkFMU0Ugd291bGQgY29u
Zm9ybSB0byB0aGUgc3BlYyAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBhaS5sZW5ndGg7IGkrKykK
IAkJCWNvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJpW2ldLCBh
aVtpXSwgVFlQRV9BUkdVTUVOVF9DT05UQUlORUQsIHRoaXMuaXNTb2Z0KSk7Ci0JCXJldHVybiB0
cnVlOwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBpc0luc2lnbmlmaWNhbnRQYXJhbWV0ZXJpemVk
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBjYSkgewotCQlUeXBlVmFyaWFibGVCaW5kaW5nW10g
dHlwZVZhcmlhYmxlcyA9IGNhLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcygpOwotCQlUeXBlQmlu
ZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBjYS5hcmd1bWVudHM7Ci0JCWlmICh0eXBlVmFyaWFibGVz
ID09IG51bGwgfHwgdHlwZUFyZ3VtZW50cyA9PSBudWxsKQotCQkJcmV0dXJuIHR5cGVWYXJpYWJs
ZXMgPT0gdHlwZUFyZ3VtZW50czsKLQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IHR5cGVB
cmd1bWVudHMubGVuZ3RoKQotCQkJcmV0dXJuIGZhbHNlOwotCQlmb3IgKGludCBpID0gMDsgaSA8
IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVh
bHModHlwZVZhcmlhYmxlc1tpXSwgdHlwZUFyZ3VtZW50c1tpXSkpCi0JCQkJcmV0dXJuIGZhbHNl
OwotCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9J
bmZlcmVuY2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKaW5kZXggNjFmYmNjMC4uZDQwMTVlZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9J
bmZlcmVuY2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRl
eHQxOC5qYXZhCkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Np
b247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNz
aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rp
b25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0
MSArOTEsOSBAQAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8
L2R0PgogICogPGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4K
LSAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBs
ZW1lbnRlZCBpbgotICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcj
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2Nv
cGUsIEludm9jYXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdo
LWxldmVsIGNvbnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRp
bmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVy
ZW5jZSBMaWZlY3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4
LjUuMiBjYXVzZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90
aCBwYXJ0cyBvZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2Fk
IHJlc29sdXRpb24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdb
XSwgU2NvcGUsIEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoKX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5J
bnRlcm1lZGlhdGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9y
ZWQgYmV0d2VlbiBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZl
cmVudAotICogICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7
QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxp
bmsgSW52b2NhdGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJ
bmZlcmVuY2VDb250ZXh0KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJl
bmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4
dCgpfS48YnIvPgotICogICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGlu
c3RhbmNlIG9mIEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5r
ICNpbmZlcmVuY2VLaW5kfQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4K
LSAqIDxsaT48Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRp
b24gYXJndW1lbnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcg
b2YgdGhlIGFyZ3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9u
IFR5cGUgSW5mZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5m
ZXJlbmNlIG11c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0g
KiAgICB0aGUgaW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3Rv
Y29scyBhcmUgYXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9s
eSBleHByZXNzaW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3Rs
eSBpbmNvcnBvcmF0ZWQgaW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwg
c2VlIGJsb2NrIGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVj
ZShJbmZlcmVuY2VDb250ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJl
c3VsdHMgb2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxs
IGNvbnRhaW5lZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7
QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNo
IG11c3QgYmUgY2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgot
ICogICAgPGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4
cHJlc3Npb24gb3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJs
ZXMKLSAqICAgICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRo
ZSBmaW5hbCB0YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAg
ICAge0BsaW5rIEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5k
aW5nLCBTY29wZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5r
ICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAg
ICA8bGk+Rm9yIHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRz
IG9mIGFuIGludm9jYXRpb24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBv
bHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5k
aW5nW10sIFNjb3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0
dWF0aW9uczogKDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3Nh
Z2VTZW5kI2ZpbmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25z
dHJ1Y3RvckJpbmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20g
e0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+
Ci0gKiAgICA8bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQg
YXJlIHBvbHkgaW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9m
IG92ZXJsb2FkIHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlk
IG5vdCBpbnZvbHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVz
aGluZyBpbmZlcmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1
c2luZyB7QGxpbmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVC
aW5kaW5nKX0uPC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0
aW9uIGlzIGEgPGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJz
dCBhdHRlbXB0aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tf
TE9PU0V9LiBPbmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1v
ZGUge0BsaW5rICNDSEVDS19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1w
dHMgd2FzIHN1Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBA
IC0xNjUsOSArMTI5LDYgQEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4g
Ki8KIAlCb3VuZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2Fi
aWxpdHkgaW5mZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlv
biB0eXBlIGluZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQog
CS8qKiBGb3IgZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRz
aWRlIHN0b3JlIHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwog
CU1hcDxUeXBlQmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBI
YXNoTWFwPFR5cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAog
CQogCS8qKiBTaWduYWxzIHdoZXRoZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ug
b2YgdW5jaGVja2VkIGNvbnZlcnNpb24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11
bGE+IGNvbnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8q
KiBJbm5lciBwb2x5IGludm9jYXRpb25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlz
IGluZmVyZW5jZS4gKi8KLQlMaXN0PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBB
cnJheUxpc3Q8SW52b2NhdGlvblNpdGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJl
bmNlIGNvbnRleHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1Ymxp
YyBJbmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1l
dGhvZEJpbmRpbmc+IHByb2JsZW1NZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52
aXJvbm1lbnQgZW52aXJvbm1lbnQ7CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxT
IDE4LjUuMiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJl
c3BvbnNpYmxlIGZvciBhbnkgcG9zdC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5l
clBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0
aGUgYm91bmQgc2V0IHByb2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0
ZSB0aGF0IG0gaXMgYXBwbGljYWJsZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0
IGluZmVySW52b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlw
ZSwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpA
QCAtMzk4LDkgKzM1MCw5IEBACiAJCQl9CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJ
CQlTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVs
YT4oKTsKLQkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRz
LCBjLCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRz
VG9DKHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtp
bmQsIGZhbHNlKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDogZGV0ZXJtaW5l
IEIzIGZyb20gQworCQkJLy8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBDCiAJCQl3aGls
ZSAoIWMuaXNFbXB0eSgpKSB7CiAJCQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50Rm9ybXVsYT4g
Ym90dG9tU2V0ID0gZmluZEJvdHRvbVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMoYykpOwpAQCAt
NDUwLDcgKzQwMiw3IEBACiAJCX0KIAl9CiAKLQlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWlu
dHNUb0MoRXhwcmVzc2lvbltdIGV4cHJzLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJlbmNlS2luZEZvck1ldGhvZCkgeworCXByaXZhdGUg
Ym9vbGVhbiBhZGRDb25zdHJhaW50c1RvQyhFeHByZXNzaW9uW10gZXhwcnMsIFNldDxDb25zdHJh
aW50Rm9ybXVsYT4gYywgTWV0aG9kQmluZGluZyBtZXRob2QsIGludCBpbmZlcmVuY2VLaW5kRm9y
TWV0aG9kLCBib29sZWFuIGludGVybGVhdmVkKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2Vw
dGlvbiB7CiAJCVR5cGVCaW5kaW5nW10gZnM7CiAJCWlmIChleHBycyAhPSBudWxsKSB7CiAJCQlp
bnQgayA9IGV4cHJzLmxlbmd0aDsKQEAgLTQ3MSwxMTkgKzQyMyw4NiBAQAogCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBrOyBpKyspIHsKIAkJCQlUeXBlQmluZGluZyBmc2kgPSBmc1tNYXRoLm1pbihp
LCBwLTEpXTsKIAkJCQlUeXBlQmluZGluZyBzdWJzdEYgPSBzdWJzdGl0dXRlKGZzaSk7Ci0JCQkJ
aWYgKCFhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0Riwg
bWV0aG9kKSkKKwkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0sIGMs
IGZzaSwgc3Vic3RGLCBtZXRob2QsIGludGVybGVhdmVkKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwog
CSAgICAgICAgfQogCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBh
ZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50
Rm9ybXVsYT4gYywgVHlwZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJp
bmRpbmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4
cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGlu
ZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4g
aW50ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKKwkJCisJCS8v
IFNlZSBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIzMjUgZm9y
IGV4Y2x1c2lvbiBvZiBwb2x5IGV4cHJlc3Npb25zIHRhcmdldGluZyBwcm9wZXIgdHlwZXMuIENF
Ri5yZWR1Y2UgdmFsaWRhdGVzIAorCQkvLyB0aGF0IHRoZXkgYXJlIGNvbXBhdGlibGUgaW4gYSBs
b29zZSBpbnZvY2F0aW9uIGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0IHR5cGUuIFRoZXkgY29u
dHJpYnV0ZSBub3RoaW5nIGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9ybXVsYXMuCisJCWlmIChz
dWJzdEYuaXNQcm9wZXJUeXBlKHRydWUpKQorCQkJcmV0dXJuIHRydWU7CisJCQogCQkvLyBGb3Ig
YWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRvIGFwcGxpY2Fi
aWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlpZiAoIWV4cHJp
LmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJYy5hZGQobmV3
IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1Y3Rpb25SZXN1
bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsKIAkJfQogCQlp
ZiAoZXhwcmkgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewogCQkJYy5hZGQobmV3
IENvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmks
IHN1YnN0RikpOworCQkJaWYgKGV4cHJpIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewor
CQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGV4cHJpOwor
CQkJCUJsb2NrU2NvcGUgc2tvcGUgPSBsYW1iZGEuZW5jbG9zaW5nU2NvcGU7CisJCQkJaWYgKHN1
YnN0Ri5pc0Z1bmN0aW9uYWxJbnRlcmZhY2Uoc2tvcGUpKSB7IC8vIGNvdWxkIGJlIGFuIGluZmVy
ZW5jZSB2YXJpYWJsZS4KKwkJCQkJUmVmZXJlbmNlQmluZGluZyB0ID0gKFJlZmVyZW5jZUJpbmRp
bmcpIHN1YnN0RjsKKwkJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHdpdGhXaWxkQ2FyZHMg
PSBJbmZlcmVuY2VDb250ZXh0MTgucGFyYW1ldGVyaXplZFdpdGhXaWxkY2FyZCh0KTsKKwkJCQkJ
aWYgKHdpdGhXaWxkQ2FyZHMgIT0gbnVsbCkgeworCQkJCQkJdCA9IENvbnN0cmFpbnRFeHByZXNz
aW9uRm9ybXVsYS5maW5kR3JvdW5kVGFyZ2V0VHlwZSh0aGlzLCBza29wZSwgbGFtYmRhLCB3aXRo
V2lsZENhcmRzKTsKKwkJCQkJfQorCQkJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZTsKKwkJ
CQkJaWYgKHQgIT0gbnVsbCAmJiAoZnVuY3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1l
dGhvZChza29wZSwgdHJ1ZSkpICE9IG51bGwgJiYgKGxhbWJkYSA9IGxhbWJkYS5nZXRSZXNvbHZl
ZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodCkpICE9IG51bGwpIHsKKwkJCQkJCVR5cGVCaW5k
aW5nIHIgPSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsKKwkJCQkJCUV4cHJlc3Npb25bXSByZXN1
bHRFeHByZXNzaW9ucyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOworCQkJCQkJZm9yIChp
bnQgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJlc3Npb25zID09IG51bGwgPyAwIDogcmVzdWx0
RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCQlFeHByZXNzaW9u
IHJlc3VsdEV4cHJlc3Npb24gPSByZXN1bHRFeHByZXNzaW9uc1tpXTsKKwkJCQkJCQlpZiAoIWFk
ZENvbnN0cmFpbnRzVG9DX09uZUV4cHIocmVzdWx0RXhwcmVzc2lvbiwgYywgci5vcmlnaW5hbCgp
LCByLCBtZXRob2QsIHRydWUpKQorCQkJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJCQl9CisJCQkJ
CX0KKwkJCQl9CisJCQl9CiAJCX0gZWxzZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBJbnZvY2F0aW9u
ICYmIGV4cHJpLmlzUG9seUV4cHJlc3Npb24oKSkgewogCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9u
ID0gKEludm9jYXRpb24pIGV4cHJpOwotCQkJTWV0aG9kQmluZGluZyBpbm5lck1ldGhvZCA9IGlu
dm9jYXRpb24uYmluZGluZyhudWxsLCBmYWxzZSwgbnVsbCk7CisJCQlNZXRob2RCaW5kaW5nIGlu
bmVyTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHN1YnN0RiwgdGhpcy5zY29wZSk7CisJCQlp
ZiAoaW5uZXJNZXRob2QgPT0gbnVsbCkKKwkJCQlyZXR1cm4gdHJ1ZTsgCQkgIC8vIC0+IHByb2Nl
ZWQgd2l0aCBubyBuZXcgQyBzZXQgZWxlbWVudHMuCisJCQkKKwkJCWlmIChpbnRlcmxlYXZlZCkg
eworCQkJCU1ldGhvZEJpbmRpbmcgc2hhbGxvd01ldGhvZCA9IGlubmVyTWV0aG9kLnNoYWxsb3dP
cmlnaW5hbCgpOworCQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9
IGVudGVyUG9seUludm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7
CisJCQkJdHJ5IHsKKwkJCQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJn
dW1lbnRzKCk7CisJCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IGFyZ3VtZW50cyA9
PSBudWxsID8gQmluZGluZy5OT19QQVJBTUVURVJTIDogbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50
cy5sZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwZXMubGVuZ3Ro
OyBpKyspCisJCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnRzW2ldLnJlc29sdmVkVHlw
ZTsKKwkJCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZv
Y2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgaW5uZXJNZXRob2QpOworCQkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gaW5uZXJDdHgu
aW5mZXJlbmNlS2luZDsKKwkJCQkJfQorCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5
KHNoYWxsb3dNZXRob2QsIGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3Rv
cigpKTsKKwkJCQkJaWYgKCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52
b2NhdGlvblR5cGUodGhpcywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKKwkJ
CQkJCXJldHVybiBmYWxzZTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlyZXN1bWVTdXNwZW5kZWRJ
bmZlcmVuY2UocHJldkludm9jYXRpb24pOworCQkJCX0KKwkJCX0KKwkJCWludCBhcHBsaWNhYmls
aXR5S2luZCA9IENIRUNLX0xPT1NFOyAgLy8gRklYTUUsIGZvciA8PiByZXNvbHZpbmcgdG8gYSBu
b24tZ2VuZXJpYyBtZXRob2QsIHRoaXMgbmVlZCB0byBiZSBjb21wdXRlZC4KIAkJCWlmIChpbm5l
ck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewog
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNl
Q29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9kKTsKLQkJCQlp
ZiAoaW5uZXJDdHggIT0gbnVsbCkgeyAvLyBvdGhlcndpc2UgaW5uZXJNZXRob2QgZG9lcyBub3Qg
cGFydGljaXBhdGUgaW4gaW5mZXJlbmNlCi0JCQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQyhp
bnZvY2F0aW9uLmFyZ3VtZW50cygpLCBjLCBpbm5lck1ldGhvZC5nZW5lcmljTWV0aG9kKCksIGlu
bmVyQ3R4LmluZmVyZW5jZUtpbmQpOworCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7CisJCQkJ
CWFwcGxpY2FiaWxpdHlLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKIAkJCQl9CiAJCQl9
CisJCQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywg
aW5uZXJNZXRob2QuZ2VuZXJpY01ldGhvZCgpLCBhcHBsaWNhYmlsaXR5S2luZCwgaW50ZXJsZWF2
ZWQpOwogCQl9IGVsc2UgaWYgKGV4cHJpIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9u
KSB7CiAJCQlDb25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9u
KSBleHByaTsKLQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZU
cnVlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50c1RvQ19P
bmVFeHByKGNlLnZhbHVlSWZGYWxzZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJCQlyZXR1
cm4gYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJz
dEYsIG1ldGhvZCwgaW50ZXJsZWF2ZWQpCisJCQkJCSYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4
cHIoY2UudmFsdWVJZkZhbHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBpbnRlcmxlYXZlZCk7
CiAJCX0KIAkJcmV0dXJuIHRydWU7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxpZmllZCBBUEkgdG8g
cGVyZm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4yKQotCSAqIGFuZCBw
ZXJmb3JtIHN1YnNlcXVlbnQgc3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRpbmcgb2YgaW5uZXIg
cG9seSBleHByZXNzaW9ucywKLQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9ibGVtIG1ldGhvZCBi
aW5kaW5nIGlmIG5lZWRlZC4KLQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIGluZmVy
ZW5jZSBoYXMgbm90IHlldCBmaW5pc2hlZC4KLQkgKiBAcGFyYW0gaW52b2NhdGlvbiBpbnZvY2F0
aW9uIGJlaW5nIGluZmVycmVkCi0JICogQHBhcmFtIGFyZ3VtZW50VHlwZXMgYXJndW1lbnRzIGJl
aW5nIHBhc3NlZCBpbnRvIHRoZSBpbnZvY2F0aW9uCi0JICogQHBhcmFtIG1ldGhvZCBjdXJyZW50
IGNhbmRpZGF0ZSBtZXRob2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogQHJldHVy
biBhIHZhbGlkIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMsCi0J
ICogCW9yIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcgZWl0aGVyIGluZmVyZW5j
ZSBmYWlsdXJlIG9yIGEgYm91bmQgbWlzbWF0Y2guCi0JICovCi0JLypATm9uTnVsbCovIE1ldGhv
ZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGludm9jYXRpb24sIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBlcywgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IG1ldGhvZCkgewotCQkvLyBUT0RPIG9wdGltaXplOiBpZiBvdXRlckNvbnRleHQgZXhpc3RzIGFu
ZCBpcyByZXNvbHZlZCwgd2UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBpbmZlciBhZ2Fpbi4KLQkJ
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGludm9jYXRpb24uaW52b2NhdGlvblRhcmdldFR5cGUo
KTsKLQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGZpbmFsTWV0aG9kID0gbnVs
bDsKLQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFRvQ2hlY2sgPSBt
ZXRob2Q7Ci0JCQotCQlib29sZWFuIGhhdmVQcm9wZXJUYXJnZXRUeXBlID0gdGFyZ2V0VHlwZSAh
PSBudWxsICYmIHRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpOwotCQlpZiAoaGF2ZVByb3Bl
clRhcmdldFR5cGUgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVz
VGFyZ2V0VHlwZSgpKSB7Ci0JCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9kLm9yaWdp
bmFsTWV0aG9kOwotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdl
dFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJQm91bmRTZXQgcmVzdWx0ID0gc29sdXRpb24gIT0g
bnVsbCA/IHNvbHV0aW9uLmJvdW5kcyA6IG51bGw7Ci0JCQlpZiAocmVzdWx0ID09IG51bGwpIHsK
LQkJCQkvLyBzdGFydCBvdmVyIGZyb20gYSBwcmV2aW91cyBjYW5kaWRhdGUgYnV0IGRpc2NhcmQg
aXRzIHR5cGUgdmFyaWFibGUgaW5zdGFudGlhdGlvbnMKLQkJCQkvLyBUT0RPOiBzaG91bGQgd2Ug
cmV0YWluIGFueSBpbnN0YW50aWF0aW9ucyBvZiB0eXBlIHZhcmlhYmxlcyBub3Qgb3duZWQgYnkg
dGhlIG1ldGhvZD8gCi0JCQkJdHJ5IHsKLQkJCQkJcmVzdWx0ID0gaW5mZXJJbnZvY2F0aW9uVHlw
ZSh0aGlzLmN1cnJlbnRCb3VuZHMsIHRhcmdldFR5cGUsIGludm9jYXRpb24sIG9yaWdpbmFsKTsK
LQkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJLy8gbm8g
c29sdXRpb24sIGJ1dCBkbyBtb3JlIGNoZWNrcyBiZWxvdwotCQkJCX0KLQkJCX0KLQkJCWlmIChy
ZXN1bHQgIT0gbnVsbCkgewotCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRp
b25zKG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlvbiwgcmVzdWx0KTsKLQkJCQlp
ZiAoc29sdXRpb25zICE9IG51bGwpIHsKLQkJCQkJZmluYWxNZXRob2QgPSB0aGlzLmVudmlyb25t
ZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1dGlvbnMp
OwotCQkJCQlpZiAodGhpcy5zY29wZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25CYXNl
ZE51bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNr
Rm9yQ29udHJhZGl0aW9ucyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbiwgdGhpcy5zY29wZSk7Ci0J
CQkJCWludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KGZpbmFsTWV0aG9kLCB0aGlz
KTsKLQkJCQkJdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1dCh0YXJnZXRUeXBlLCBuZXcg
U29sdXRpb24oZmluYWxNZXRob2QsIHJlc3VsdCkpOwotCQkJCX0KLQkJCX0KLQkJCWlmIChmaW5h
bE1ldGhvZCAhPSBudWxsKQotCQkJCW1ldGhvZFRvQ2hlY2sgPSBmaW5hbE1ldGhvZDsKLQkJfSBl
bHNlIHsKLQkJCWZpbmFsTWV0aG9kID0gbWV0aG9kOwotCQl9Ci0JCQotCQlNZXRob2RCaW5kaW5n
IHByb2JsZW1NZXRob2QgPSBtZXRob2RUb0NoZWNrLmJvdW5kQ2hlY2sxOCh0aGlzLnNjb3BlLCBh
cmd1bWVudFR5cGVzKTsKLQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKLQkJCXJldHVybiBw
cm9ibGVtTWV0aG9kOwotCi0JCWlmICghaGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlv
bi5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpCi0JCQlyZXR1cm4g
bWV0aG9kOyAvLyBzdGlsbCBub3QgcmVhZHkhCi0KLQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwp
IHsKLQkJCWlmIChyZWJpbmRJbm5lclBvbGllcyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbikpCi0J
CQkJcmV0dXJuIGZpbmFsTWV0aG9kOwotCQl9Ci0JCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVtTWV0
aG9kSWZOZWVkZWQodGFyZ2V0VHlwZSwgbWV0aG9kKTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1wbGlm
aWVkIEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIp
Ci0JICogYW5kIHBlcmZvcm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmluZGlu
ZyBvZiBpbm5lciBwb2x5IGV4cHJlc3Npb25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHByb2Js
ZW0gbWV0aG9kIGJpbmRpbmcgaWYgbmVlZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBp
ZiB0aGUgaW5mZXJlbmNlIGhhcyBub3QgeWV0IGZpbmlzaGVkLgotCSAqIFZlcnNpb24gdXNlZCBm
b3IgaW5uZXIgaW52b2NhdGlvbnMsIHdoZXJlIGFyZ3VtZW50IHR5cGVzIG5lZWQgdG8gYmUgZXh0
cmFjdGVkCi0JICogZnJvbSBhY3R1YWwgaW52b2NhdGlvbiBhcmd1bWVudHMuCi0JICogQHBhcmFt
IGludm9jYXRpb24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBtZXRob2Qg
Y3VycmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAq
IEByZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0
ZXJzLAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBp
bmZlcmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCXB1YmxpYyAvKkBO
b25OdWxsKi8gTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb24gaW52
b2NhdGlvbiwgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQlU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gYXJndW1l
bnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7
Ci0JCQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhdOwot
CQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJYXJndW1l
bnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCX0KLQkJcmV0dXJuIGlu
ZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgbWV0aG9kKTsKIAl9
CiAKIAlwdWJsaWMgYm9vbGVhbiBoYXNSZXN1bHRGb3IoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkg
ewpAQCAtNTkxLDYgKzUxMCwxMCBAQAogCQkJcmV0dXJuIHRoaXMuc3RlcENvbXBsZXRlZCA+PSBU
WVBFX0lORkVSUkVEOwogCQllbHNlCiAJCQlyZXR1cm4gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRU
eXBlLmNvbnRhaW5zS2V5KHRhcmdldFR5cGUpOworCX0KKwkKKwlwdWJsaWMgU29sdXRpb24gZ2V0
UmVzdWx0Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJcmV0dXJuIHRoaXMuc29sdXRp
b25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7CiAJfQogCiAJcHVibGljIGJvb2xlYW4g
cmVnaXN0ZXJTb2x1dGlvbihUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIHVw
ZGF0ZWRCaW5kaW5nKSB7CkBAIC0xMzY2LDggKzEyODksNiBAQAogCQl0aGlzLmludm9jYXRpb25B
cmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKIAkJdGhpcy5jdXJyZW50SW52b2NhdGlvbiA9IGlu
dm9jYXRpb247CiAJCQotCQkvLyBzY2hlZHVsZSBmb3IgcmUtYmluZGluZyB0aGUgaW5uZXIgYWZ0
ZXIgaW5mZXJlbmNlIHN1Y2Nlc3M6Ci0JCXRoaXMuaW5uZXJQb2xpZXMuYWRkKGludm9jYXRpb24p
OwogCQlyZXR1cm4gcmVjb3JkOwogCX0KIAkKQEAgLTEzOTUsMTQ1ICsxMzE2LDYgQEAKIAkJdGhp
cy5jdXJyZW50SW52b2NhdGlvbiA9IHJlY29yZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1
bWVudHMgPSByZWNvcmQuaW52b2NhdGlvbkFyZ3VtZW50czsKIAkJdGhpcy5pbmZlcmVuY2VLaW5k
ID0gcmVjb3JkLmluZmVyZW5jZUtpbmQ7Ci0JfQotCi0JcHVibGljIGJvb2xlYW4gcmViaW5kSW5u
ZXJQb2xpZXMoTWV0aG9kQmluZGluZyBtZXRob2QsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKLQkJ
Qm91bmRTZXQgYm91bmRzID0gdGhpcy5jdXJyZW50Qm91bmRzOwotCQlUeXBlQmluZGluZyB0YXJn
ZXRUeXBlID0gc2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQlpZiAodGFyZ2V0VHlwZSA9
PSBudWxsIHx8ICF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJaWYgKCFzaXRl
LmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJCS8vIGlu
IHRoaXMgY2FzZSB3ZSBtYXkgbm90IHlldCBoYXZlIHRoZSBzb2x1dGlvbig/LCBnZXQgb3IgY29t
cHV0ZSBpdCBub3c6Ci0JCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRh
cmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJCXRyeSB7Ci0JCQkJCWlmIChzb2x1dGlvbiAh
PSBudWxsICYmIHNvbHV0aW9uLmJvdW5kcyAhPSBudWxsKQotCQkJCQkJYm91bmRzID0gc29sdXRp
b24uYm91bmRzOwotCQkJCQllbHNlCi0JCQkJCQlib3VuZHMgPSBpbmZlckludm9jYXRpb25UeXBl
KHRoaXMuY3VycmVudEJvdW5kcywgbnVsbCwgc2l0ZSwgbWV0aG9kLnNoYWxsb3dPcmlnaW5hbCgp
KTsKLQkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJcmV0
dXJuIGZhbHNlOwotCQkJCX0KLQkJCQlpZiAoYm91bmRzID09IG51bGwpCi0JCQkJCXJldHVybiBm
YWxzZTsKLQkJCX0KLQkJfSBlbHNlIHsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1
dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCWlmIChzb2x1dGlvbiAhPSBu
dWxsICYmIHNvbHV0aW9uLmJvdW5kcyAhPSBudWxsKQotCQkJCWJvdW5kcyA9IHNvbHV0aW9uLmJv
dW5kczsKLQkJfQotCQlyZWJpbmRJbm5lclBvbGllcyhib3VuZHMsIG1ldGhvZC5wYXJhbWV0ZXJz
KTsKLQkJcmV0dXJuIHRydWU7Ci0JfQotCi0JLyoqCi0JICogQWZ0ZXIgaW5mZXJlbmNlIGhhcyBm
aW5pc2hlZCwgaXRlcmF0ZSBhbGwgaW5uZXIgcG9seSBleHByZXNzaW9ucyAoSW52b2NhdGlvbnMp
LCB0aGF0Ci0JICogaGF2ZSBiZWVuIGluY2x1ZGVkIGluIHRoZSBpbmZlcmVuY2UuIEZvciBlYWNo
IG9mIHRoZXNlIHVwZGF0ZSBzb21lIHR5cGUgaW5mb3JtYXRpb24KLQkgKiBmcm9tIHRoZSBpbmZl
cmVuY2UgcmVzdWx0IGFuZCBwZXJoYXBzIHRyaWdnZXIgZm9sbG93LXVwIHJlc29sdmluZyBhcyBu
ZWVkZWQuCi0JICogU2ltaWxhciBmb3IgcG9seSBleHByZXNzaW9ucyB0aGF0IGRpZCBub3QgZGly
ZWN0bHkgcGFydGljaXBhdGUgaW4gdGhlIGluZmVyZW5jZQotCSAqIGJ1dCBhcmUgZGlyZWN0IGFy
Z3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uIChGdW5jdGlvbmFsRXhwcmVzc2lvbiwg
Q29uZGl0aW9uYWxFeHByZXNzaW9uKS4KLQkgKi8KLQlwdWJsaWMgdm9pZCByZWJpbmRJbm5lclBv
bGllcyhCb3VuZFNldCBib3VuZHMsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMpIHsKLQkJ
Ly8gVGhpcyB1cGRhdGVzIGFsbCByZW1haW5pbmcgcG9seSBleHByZXNzaW9ucyB0aGF0IGFyZSBk
aXJlY3QgYXJndW1lbnRzIG9mIHRoZSBjdXJyZW50IGludm9jYXRpb246Ci0JCS8vIChoYW5kbGVz
IEZ1bmN0aW9uYWxFeHByZXNzaW9uICYgQ29uZGl0aW9uYWxFeHByZXNzaW9uKQotCQlpZiAodGhp
cy5jdXJyZW50SW52b2NhdGlvbiBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQly
ZXR1cm47IC8vIG5vIGlubmVyIGV4cHJlc3Npb25zCi0JCWJvb2xlYW4gaXNWYXJhcmdzID0gdGhp
cy5pbmZlcmVuY2VLaW5kID09IENIRUNLX1ZBUkFSRzsKLQkJYWNjZXB0UGVuZGluZ1BvbHlBcmd1
bWVudHMoYm91bmRzLCBwYXJhbWV0ZXJUeXBlcywgaXNWYXJhcmdzKTsKLQkJLy8gVGhpcyBsb29w
cyBvdmVyIGFsbCBwb2x5IGV4cHJlc3Npb25zIGZvciB3aGljaCBhIHN1Yi1pbmZlcmVuY2Ugd2Fz
IHRyaWdnZXJlZDoKLQkJLy8gKGhhbmRsZXMgZ2VuZXJpYyBpbnZvY2F0aW9ucykKLQkJaW50IGxl
biA9IHRoaXMuaW5uZXJQb2xpZXMuc2l6ZSgpOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsg
aSsrKSB7Ci0JCQlFeHByZXNzaW9uIGlubmVyID0gKEV4cHJlc3Npb24pIHRoaXMuaW5uZXJQb2xp
ZXMuZ2V0KGkpOwotCQkJaWYgKGlubmVyIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikg
ewotCQkJCVJlZmVyZW5jZUV4cHJlc3Npb24gcmVmZXJlbmNlRXhwcmVzc2lvbiA9IChSZWZlcmVu
Y2VFeHByZXNzaW9uKSBpbm5lcjsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBpbGVUaW1lRGVjbCA9
IHJlZmVyZW5jZUV4cHJlc3Npb24ucHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdCh0aGlzLnNjb3Bl
KTsKLQkJCQlpZgkoY29tcGlsZVRpbWVEZWNsICE9IG51bGwpIHsKLQkgIAkJCQlUeXBlVmFyaWFi
bGVCaW5kaW5nW10gdmFyaWFibGVzID0gY29tcGlsZVRpbWVEZWNsLnR5cGVWYXJpYWJsZXM7Ci0J
CQkJCWlmICh2YXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQkJCQkJ
VHlwZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1dGlvbnModmFyaWFibGVzLCAoSW52b2Nh
dGlvblNpdGUpIGlubmVyLCBib3VuZHMpOwotCQkJCQkJcmVmZXJlbmNlRXhwcmVzc2lvbi5iaW5k
aW5nID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChj
b21waWxlVGltZURlY2wsIGFyZ3VtZW50cyk7Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9IGVsc2UgaWYg
KGlubmVyIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJCUludm9jYXRpb24gaW5uZXJNZXNz
YWdlID0gKEludm9jYXRpb24pIGlubmVyOwotCQkJCVR5cGVCaW5kaW5nIGlubmVyVGFyZ2V0VHlw
ZSA9IGlubmVyLmV4cGVjdGVkVHlwZSgpOyAvLyBtYXkgYmUgc2V0IGZyb20gYWNjZXB0UGVuZGlu
Z1BvbHlBcmd1bWVudHMKLQkJCQlpZiAoaW5uZXJUYXJnZXRUeXBlICE9IG51bGwgJiYgIWlubmVy
VGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQkJCWlubmVyVGFyZ2V0VHlwZSA9IG51
bGw7Ci0JCQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJNZXNzYWdlLmJpbmRpbmcoaW5u
ZXJUYXJnZXRUeXBlLCBpbm5lclRhcmdldFR5cGUgIT0gbnVsbCwgdGhpcy5zY29wZSk7Ci0JCQkJ
aWYgKGJpbmRpbmcgPT0gbnVsbCkKLQkJCQkJY29udGludWU7Ci0JCQkJTWV0aG9kQmluZGluZyBv
cmlnaW5hbCA9IGJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCk7Ci0KLQkJCQkvLyBhcHBseSBpbmZl
cmVuY2UgcmVzdWx0cyBvbnRvIHRoZSBhbGxvY2F0aW9uIHR5cGUgb2YgaW5uZXIgZGlhbW9uZHM6
Ci0JCQkJaWYgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBpbm5lci5pc1BvbHlFeHByZXNz
aW9uKCkpIHsKLQkJCQkJUmVmZXJlbmNlQmluZGluZyBkZWNsYXJpbmdDbGFzcyA9IG9yaWdpbmFs
LmRlY2xhcmluZ0NsYXNzOwotCQkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50cyA9IGdldFNvbHV0
aW9ucyhkZWNsYXJpbmdDbGFzcy50eXBlVmFyaWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRz
KTsKLQkJCQkJZGVjbGFyaW5nQ2xhc3MgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRl
cml6ZWRUeXBlKGRlY2xhcmluZ0NsYXNzLCBhcmd1bWVudHMsIGRlY2xhcmluZ0NsYXNzLmVuY2xv
c2luZ1R5cGUoKSk7Ci0JCQkJCW9yaWdpbmFsID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcp
ZGVjbGFyaW5nQ2xhc3MpLmNyZWF0ZVBhcmFtZXRlcml6ZWRNZXRob2Qob3JpZ2luYWwpOwotCQkJ
CQlpbm5lci5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoaW5uZXJUYXJnZXRUeXBlLCB0aGlz
LnNjb3BlKTsJCi0JCQkJCWlmICh0aGlzLmVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRj
aGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMob3JpZ2luYWwsIGlubmVyTWVzc2FnZSwgdGhpcy5z
Y29wZSk7Ci0JCQkJfQotCQkJCQotCQkJCS8vIGFwcGx5IHJlc3VsdHMgb2YgdGhlIGNvbWJpbmVk
IGluZmVyZW5jZSBvbnRvIHRoZSBiaW5kaW5nIG9mIHRoZSBpbm5lciBpbnZvY2F0aW9uOgotCQkJ
CVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRpb25zKG9yaWdpbmFsLnR5cGVWYXJp
YWJsZXMoKSwgaW5uZXJNZXNzYWdlLCBib3VuZHMpOwotCQkJCWlmIChzb2x1dGlvbnMgPT0gbnVs
bCkgewotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykgewotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW5uZXJN
ZXNzYWdlLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgYmluZGluZyk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCAmJiAhYmluZGluZy5p
c1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJaW5uZXJDdHgucmVwb3J0SW52YWxpZEludm9jYXRp
b24oaW5uZXJNZXNzYWdlLCBiaW5kaW5nKTsKLQkJCQkJCX0KLQkJCQkJfQotCQkJCQljb250aW51
ZTsgLy8gaW5uZXIgaW5mZXJlbmNlIG5vdCByZXF1ZXN0ZWQgLT4gbm90IGEgcHJvYmxlbQotCQkJ
CX0KLQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0g
dGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5h
bCwgc29sdXRpb25zKTsKLQkJCQkKLQkJCQlpZiAoaW5uZXJNZXNzYWdlLnVwZGF0ZUJpbmRpbmdz
KGlubmVyQmluZGluZywgaW5uZXJUYXJnZXRUeXBlKSkgeyAvLyBvbmx5IGlmIHdlIGFyZSBhY3R1
YWxseSBpbXByb3ZpbmcgYW55dGhpbmcKLQkJCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Np
b25Bcmd1bWVudHMoaW5uZXJNZXNzYWdlLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJ
CX0KLQkJCX0KLQkJfQotCQl0aGlzLnN0ZXBDb21wbGV0ZWQgPSBCSU5ESU5HU19VUERBVEVEOyAv
LyB3ZSdyZSBkb25lLWRvbmUKLQl9Ci0KLQlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ1BvbHlB
cmd1bWVudHMoQm91bmRTZXQgYWNjZXB0ZWRSZXN1bHQsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVy
VHlwZXMsIGJvb2xlYW4gaXNWYXJBcmdzKSB7Ci0JCWlmIChhY2NlcHRlZFJlc3VsdCA9PSBudWxs
IHx8IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9PSBudWxsKSByZXR1cm47Ci0JCVN1YnN0aXR1
dGlvbiBzdWJzdGl0dXRpb24gPSBnZXRSZXN1bHRTdWJzdGl0dXRpb24oYWNjZXB0ZWRSZXN1bHQp
OwotCQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7
IGkrKykgewotCQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGdldFBhcmFtZXRlcihwYXJhbWV0
ZXJUeXBlcywgaSwgaXNWYXJBcmdzKTsKLQkJCWlmICghdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUo
dHJ1ZSkpCi0JCQkJdGFyZ2V0VHlwZSA9IFNjb3BlLnN1YnN0aXR1dGUoc3Vic3RpdHV0aW9uLCB0
YXJnZXRUeXBlKTsKLQkJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IHRoaXMuaW52b2NhdGlvbkFy
Z3VtZW50c1tpXTsKLQkJCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewot
CQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByZXNzaW9uOwotCQkJ
CWlmICghdGhpcy5pbm5lclBvbGllcy5jb250YWlucyhpbnZvY2F0aW9uKSkgewotCQkJCQlNZXRo
b2RCaW5kaW5nIG1ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0YXJnZXRUeXBlLCB0cnVlLCB0
aGlzLnNjb3BlKTsKLQkJCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIHByZXZpb3VzQmluZGluZyA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IG1ldGhvZDsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24u
Z2V0SW5mZXJlbmNlQ29udGV4dChwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4
ICE9IG51bGwpIHsKLQkJCQkJCQkvLyB3ZSBoYXZlIGEgbm9uLXBvbHkgZ2VuZXJpYyBpbnZvY2F0
aW9uLCB3aGljaCBuZWVkcyBpbmZlcmVuY2UgYnV0IGlzIG5vdCBjb25uZWN0ZWQgdmlhIGlubmVy
UG9saXMuCi0JCQkJCQkJLy8gRmluaXNoIHRoYXQgaW5uZXIgaW5mZXJlbmNlIG5vdyAoaW5jbC4g
YmluZGluZyB1cGRhdGVzKToKLQkJCQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlu
bmVyQ3R4LmluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgcHJldmlvdXNCaW5kaW5nKTsK
LQkJCQkJCQlpZiAoIWlubmVyQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCWlu
bmVyQ3R4LnJlcG9ydEludmFsaWRJbnZvY2F0aW9uKGludm9jYXRpb24sIGlubmVyQmluZGluZyk7
Ci0JCQkJCQkJfQotCQkJCQkJCWlmIChpbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmlu
ZGluZywgdGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFsbHkgaW1wcm92aW5n
IGFueXRoaW5nCi0JCQkJCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRz
KGludm9jYXRpb24sIGlubmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJCQkJfQotCQkJCQkJ
fQotCQkJCQl9IGVsc2UgaWYobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJp
bmRpbmcpewotCQkJCQkJZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFy
Z2V0VHlwZSwgdGhpcy5zY29wZSk7Ci0JCQkJCX0KLQkJCQl9IGVsc2UgewotCQkJCQlleHByZXNz
aW9uLnNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJCQl9Ci0JCQl9IGVsc2UgewotCQkJ
CWlmICh0aGlzLmlubmVyUG9saWVzLmNvbnRhaW5zKGV4cHJlc3Npb24pKSAvLyBtYXkgZ2V0IGhl
cmUgZm9yIFJlZmVyZW5jZUV4cHJlc3Npb25zIC4uLgotCQkJCQlleHByZXNzaW9uLnNldEV4cGVj
dGVkVHlwZSh0YXJnZXRUeXBlKTsgLy8gLi4uIHByZXBhcmUgZm9yIGZpbmFsIGluZmVyZW5jZSB2
aWEgcmViaW5kSW5uZXJQb2xpZXMKLQkJCQllbHNlCi0JCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2Fp
bnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJfQotCQl9CiAJ
fQogCiAJcHJpdmF0ZSBTdWJzdGl0dXRpb24gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGZpbmFsIEJv
dW5kU2V0IHJlc3VsdCkgewpAQCAtMTU4MSwxOSArMTM2MywxNCBAQAogCQkJaWYgKG1ldGhvZC5y
ZXR1cm5UeXBlLmVyYXN1cmUoKS5pc0NvbXBhdGlibGVXaXRoKGV4cGVjdGVkVHlwZSkpCiAJCQkJ
cmV0dXJuIG1ldGhvZDsgLy8gZG9uJ3QgY291bnQgYXMgcHJvYmxlbS4KIAkJfQotCQlpZiAoZXhw
ZWN0ZWRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBhc3N1bWUgaW5mZXJlbmNl
IGZhaWx1cmUgY29uY2VybmVkIGFub3RoZXIgZXhwcmVzc2lvbgotCQlQcm9ibGVtTWV0aG9kQmlu
ZGluZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0
aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuUGFyYW1ldGVy
aXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0pOworCQkvKiBXZSB1c2VkIHRvIGNoZWNrIGlm
IGV4cGVjdGVkIHR5cGUgaXMgbnVsbCBhbmQgaWYgc28gcmV0dXJuIG1ldGhvZCwgYnV0IHRoYXQg
aXMgd3JvbmcgLSBpdCBpbmplY3RzIGFuIGluY29tcGF0aWJsZSBtZXRob2QgaW50byBvdmVybG9h
ZCByZXNvbHV0aW9uLgorCQkgICBpZiB3ZSBnZXQgaGVyZSB3aXRoIGV4cGVjdGVkIHR5cGUgc2V0
IHRvIG51bGwgYXQgYWxsLCB0aGUgdGFyZ2V0IGNvbnRleHQgZG9lcyBub3QgZGVmaW5lIGEgdGFy
Z2V0IHR5cGUgKHZhbmlsbGEgY29udGV4dCksIHNvIGluZmVyZW5jZSBoYXMgZG9uZSBpdHMKKwkJ
ICAgYmVzdCBhbmQgbm90aGluZyBtb3JlIHRvIGRvIHRoYW4gdG8gc2lnbmFsIGVycm9yLiAKKwkJ
ICovCisJCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1l
dGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQ
cm9ibGVtUmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUpOwogCQlwcm9ibGVt
TWV0aG9kLnJldHVyblR5cGUgPSBleHBlY3RlZFR5cGU7CiAJCXByb2JsZW1NZXRob2QuaW5mZXJl
bmNlQ29udGV4dCA9IHRoaXM7CiAJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCX0KLQotCXB1Ymxp
YyB2b2lkIHJlcG9ydEludmFsaWRJbnZvY2F0aW9uKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0
aG9kQmluZGluZyBiaW5kaW5nKSB7Ci0JCWlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgTWVzc2Fn
ZVNlbmQpCi0JCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QoKE1l
c3NhZ2VTZW5kKSBpbnZvY2F0aW9uLCBiaW5kaW5nKTsKLQkJZWxzZQotCQkJdGhpcy5zY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IoKFN0YXRlbWVudClpbnZvY2F0aW9u
LCBiaW5kaW5nKTsKIAl9CiAKIAkvLyBkZWJ1Z2dpbmc6CkBAIC0xNjMzLDEyICsxNDEwLDYgQEAK
IAkJaWYgKHRoaXMuY3VycmVudEJvdW5kcyAhPSBudWxsKQogCQkJYnVmLmFwcGVuZCh0aGlzLmN1
cnJlbnRCb3VuZHMudG9TdHJpbmcoKSk7CiAJCXJldHVybiBidWYudG9TdHJpbmcoKTsKLQl9Ci0K
LQlwdWJsaWMgdm9pZCBhZGRQcm9ibGVtTWV0aG9kKFByb2JsZW1NZXRob2RCaW5kaW5nIHByb2Js
ZW1NZXRob2QpIHsKLQkJaWYgKHRoaXMucHJvYmxlbU1ldGhvZHMgPT0gbnVsbCkKLQkJCXRoaXMu
cHJvYmxlbU1ldGhvZHMgPSBuZXcgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+KCk7Ci0JCXRoaXMu
cHJvYmxlbU1ldGhvZHMuYWRkKHByb2JsZW1NZXRob2QpOwogCX0KIAogCS8qKgpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKaW5k
ZXggMmU5NmE0Yi4uZjM3MDNlNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0zMSw2ICszMSw3IEBACiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3Rh
bnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBp
bGVyT3B0aW9uczsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkluZmVyZW5jZUNvbnRleHQxOC5Tb2x1dGlvbjsKIAogLyoqCiAgKiBCaW5kaW5nIGRlbm90
aW5nIGEgZ2VuZXJpYyBtZXRob2QgYWZ0ZXIgdHlwZSBwYXJhbWV0ZXIgc3Vic3RpdHV0aW9ucyBn
b3QgcGVyZm9ybWVkLgpAQCAtNDEsNyArNDIsNyBAQAogcHVibGljIGNsYXNzIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
IGltcGxlbWVudHMgU3Vic3RpdHV0aW9uIHsKIAogICAgIHB1YmxpYyBUeXBlQmluZGluZ1tdIHR5
cGVBcmd1bWVudHM7Ci0gICAgcHJpdmF0ZSBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsK
KyAgICBwcm90ZWN0ZWQgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7CiAgICAgcHVibGlj
IGJvb2xlYW4gaW5mZXJyZWRSZXR1cm5UeXBlOwogICAgIHB1YmxpYyBib29sZWFuIHdhc0luZmVy
cmVkOyAvLyBvbmx5IHNldCB0byB0cnVlIGZvciBpbnN0YW5jZXMgcmVzdWx0aW5nIGZyb20gbWV0
aG9kIGludm9jYXRpb24gaW5mZXJyZW5jZQogICAgIHB1YmxpYyBib29sZWFuIGlzUmF3OyAvLyBz
ZXQgdG8gdHJ1ZSBmb3IgbWV0aG9kIGJlaGF2aW5nIGFzIHJhdyBmb3Igc3Vic3RpdHV0aW9uIHB1
cnBvc2UKQEAgLTUwLDMxICs1MSwxMSBAQAogCS8qKgogCSAqIFBlcmZvcm0gaW5mZXJlbmNlIG9m
IGdlbmVyaWMgbWV0aG9kIHR5cGUgcGFyYW1ldGVycyBhbmQvb3IgZXhwZWN0ZWQgdHlwZQogCSAq
IDxwPgotCSAqIEluIDEuOCsgdGhlIGZvbGxvd2luZyBkaXNjaXBsaW5lIGhhcyB0byBiZSBvYnNl
cnZlZCBieSBjYWxsZXJzOgotCSAqIEVhY2ggaW52b2NhdGlvbiBtdXN0IGJlIHN1YmplY3RlZCB0
byB0d28gbGV2ZWxzIG9mIGluZmVyZW5jZToKLQkgKiA8L3A+Ci0JICogPHVsPgotCSAqIDxsaT4g
e0BsaW5rIFNjb3BlI0FQUExJQ0FCSUxJVFkgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVy
ZW5jZX0sIHdoaWNoIG1heSBiZSBhcHBsaWVkCi0JICogICAgIG11bHRpcGxlIHRpbWVzIGZvciB0
aGUgc2FtZSBpbnZvY2F0aW9uPC9saT4KLQkgKiA8bGk+IHtAbGluayBTY29wZSNJTlZPQ0FUSU9O
X1RZUEUgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZX0sIHdoaWNoIGlzIGZpbmFsbHkgcGVyZm9y
bWVkCi0JICogICAgIGZvciB0aGUgc2VsZWN0ZWQgbWV0aG9kIGFuZCB3aGljaCBhZGRzIGluZm9y
bWF0aW9uIGZyb20gdGhlICJ0YXJnZXQgdHlwZSIuPC9saT4KLQkgKiA8L3VsPgotCSAqIDxwPgot
CSAqIENsaWVudHMgY2FuIGNvbnRyb2wgd2hpY2ggcGFydHMgb2YgdGhlIGluZmVyZW5jZSBzaG91
bGQgYmUgcGVyZm9ybWVkIGJ5IHBhc3NpbmcgdGhlIGFwcHJvcHJpYXRlCi0JICogZmxhZ3MgaW50
byBhcmd1bWVudCAnaW5mZXJlbmNlTGV2ZWwnLiBPbiBlYWNoIGNhbGwgcGF0aCBpdCBtdXN0IGJl
IGVuc3VyZWQgdGhhdCBvbmUgb3IgbW9yZQotCSAqIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBp
bmZlcmVuY2VzIGFyZSBhbHdheXMgZm9sbG93ZWQgYnkgZXhhY3RseSBvbmUgaW52b2NhdGlvbiB0
eXBlIGluZmVyZW5jZQotCSAqICh1bmxlc3MgZXJyb3JzIGhhdmUgYmVlbiBkZXRlY3RlZCkuCi0J
ICogPC9wPgotCSAqIDxwPgotCSAqIEluaXRpYWwgY2xpZW50cyBhcmUgdGhlIGRpcmVjdCBjYWxs
ZXJzIG9mCi0JICoge0BsaW5rIFNjb3BlI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJp
bmRpbmcsVHlwZUJpbmRpbmdbXSxJbnZvY2F0aW9uU2l0ZSxpbnQpfSwKLQkgKiB3aGljaCBzaG91
bGQgZWl0aGVyIGludm9rZSBib3RoIGxldmVscyBvZiBpbmZlcmVuY2UgPGVtPm9yPC9lbT4gZGVs
ZWdhdGUgdGhlIHNlY29uZCBwYXJ0IHRvCi0JICoge0BsaW5rIFNjb3BlI21vc3RTcGVjaWZpY01l
dGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdLGludCxUeXBlQmluZGluZ1tdLEludm9jYXRpb25T
aXRlLFJlZmVyZW5jZUJpbmRpbmcpfSwKLQkgKiB3aGljaCBpcyBpbnRlbmRlZCB0byBlbnN1cmUg
Y29tcGxldGluZyB0aGUgaW5mZXJlbmNlIG9uIGFsbCBub24tZXJyb3IgZXhpdHMuCisJICogSW4g
MS44KyBpZiB0aGUgZXhwZWN0ZWQgdHlwZSBpcyBub3QgeWV0IGF2YWlsYWJsZSBkdWUgdG8gdGhp
cyBjYWxsIGJlaW5nIGFuIGFyZ3VtZW50IHRvIGFuIG91dGVyIGNhbGwgd2hpY2ggaXMgbm90IG92
ZXJsb2FkLXJlc29sdmVkIHlldCwKKwkgKiB0aGUgcmV0dXJuZWQgbWV0aG9kIGJpbmRpbmcgd2ls
bCBiZSBhIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuCiAJICogPC9wPiAg
CiAJICovCi0JcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0
aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRz
LCBTY29wZSBzY29wZSwKLQkJCUludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBpbnQgaW5m
ZXJlbmNlTGV2ZWwpCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJn
dW1lbnRzLCBTY29wZSBzY29wZSwJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpCiAJewog
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZTsKIAkJ
VHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBl
VmFyaWFibGVzOwpAQCAtOTUsMTI2ICs3NiwzNiBAQAogCQkJLy8gaW5pdGlhbGl6ZXMgdGhlIG1h
cCBvZiBzdWJzdGl0dXRlcyAodmFyIC0tPiB0eXBlW11bXXsgZXF1YWwsIGV4dGVuZHMsIHN1cGVy
fQogCQkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVy
czsKIAotLy8gPT09PSAxLjg6IFRoZSBtYWluIGRyaXZlciBmb3IgaW5mZXJlbmNlIG9mIGdlbmVy
aWMgbWV0aG9kczogPT09PQotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsK
IAkJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlv
bnMoKTsKLQkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfOCkgewotCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBTY29wZS5BUFBMSUNB
QklMSVRZKSAhPSAwKQotCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJl
bmNlQ29udGV4dChzY29wZSk7Ci0JCQkJZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2Vv
ZiBJbnZvY2F0aW9uICYmIG9yaWdpbmFsTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKQotCQkJCQlpbmZDdHgxOCA9ICgoSW52b2NhdGlvbikgaW52b2Nh
dGlvblNpdGUpLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgb3JpZ2luYWxNZXRob2QpOwotCQkJCWlmIChpbmZDdHgxOCA9PSBudWxsKQotCQkJ
CQlyZXR1cm4gb3JpZ2luYWxNZXRob2Q7Ci0JCQl9Ci0JCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCkg
ewotCQkJCXRyeSB7Ci0JCQkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVzdWx0ID0gbnVsbDsKLQkJ
CQkJQm91bmRTZXQgcmVzdWx0ID0gbnVsbDsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNj
b3BlLkFQUExJQ0FCSUxJVFkpICE9IDApIHsKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCQlyZXR1cm4gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QxOChvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBzY29wZSwgaW52b2Nh
dGlvblNpdGUpOwogCi0JCQkJCQkvLyAtLS0tIDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0K
LQkJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3Rvcigp
Ci0JCQkJCQkJCSYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgRXhwcmVzc2lvbgotCQkJCQkJ
CQkmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2lu
YWxNZXRob2QpOwotCQkJCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gcGFyYW1ldGVycy5sZW5n
dGgpIHsKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4
LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJp
Y3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCi0JCQkJCQkJaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1v
bmQpOwotCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKLQkJCQkJ
CX0KLQkJCQkJCWlmIChwcm92aXNpb25hbFJlc3VsdCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9k
LmlzVmFyYXJncygpKSB7Ci0JCQkJCQkJLy8gY2hlY2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxp
Y2FiaWxpdHkKLQkJCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNl
Q29udGV4dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VL
aW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKLQkJCQkJCQlpbmZDdHgxOC5p
bmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlz
RGlhbW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwot
CQkJCQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ICE9IG51bGwgJiYgaW5mQ3R4MTgu
aXNSZXNvbHZlZChwcm92aXNpb25hbFJlc3VsdCkpIHsKLQkJCQkJCQlpbmZDdHgxOC5zdG9yZWRT
b2x1dGlvbiA9IHByb3Zpc2lvbmFsUmVzdWx0OwotCQkJCQkJCWluZkN0eDE4LnN0ZXBDb21wbGV0
ZWQgPSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRDsKLQkJCQkJCQlp
ZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJCQkJ
CQkoKFJlZmVyZW5jZUV4cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kID0g
aW5mQ3R4MTguaW5mZXJlbmNlS2luZDsKLQkJCQkJCX0KLQkJCQkJfSBlbHNlIHsKLQkJCQkJCXBy
b3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc3RvcmVkU29sdXRpb247Ci0JCQkJCX0KLQkJCQkJ
cmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0
ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkvLyAxLjctIG9u
bHkuCisJCQlpbmZlcmVuY2VDb250ZXh0ID0gbmV3IEluZmVyZW5jZUNvbnRleHQob3JpZ2luYWxN
ZXRob2QpOworCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2Nv
cGUsIG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRl
eHQpOworCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUgPT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsK
IAotCQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0
aW9uVGFyZ2V0VHlwZSgpOwotCQkJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsK
LQkJCQkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7Ci0JCQkJCWlmICgo
aW5mZXJlbmNlTGV2ZWwgJiBTY29wZS5JTlZPQ0FUSU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVk
PwotCQkJCQkJCSYmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0
RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSkgeyAvLyBwb3NzaWJsZT8K
LQotCQkJCQkJLy8gLS0tLSAxOC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KLQkJCQkJCXJl
c3VsdCA9IGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUs
IGludm9jYXRpb25TaXRlLCBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpbnZvY2F0aW9uVHlwZUlu
ZmVycmVkID0gdHJ1ZTsKLQkJCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7
Ci0JCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkKLQkJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25h
bFJlc3VsdDsgLy8gbGV0J3MgcHJlZmVyIGEgdHlwZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVy
biB0eXBlIG92ZXIgcmVwb3J0aW5nIG5vIG1hdGNoIGF0IGFsbAotCQkJCQl9IGVsc2UgewotCQkJ
CQkJLy8gd2UncmUgbm90IHlldCByZWFkeSBmb3IgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQot
CQkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCX0KLQotCQkJCQlpZiAocmVz
dWx0ICE9IG51bGwpIHsKLQkJCQkJCS8vIGFzc2VtYmxlIHRoZSBzb2x1dGlvbiBldGM6Ci0JCQkJ
CQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGluZkN0eDE4LmdldFNvbHV0aW9ucyh0eXBlVmFy
aWFibGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVzdWx0KTsKLQkJCQkJCWlmIChzb2x1dGlvbnMgIT0g
bnVsbCkgewotCQkJCQkJCQotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBzY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsTWV0aG9kLCBz
b2x1dGlvbnMpOwotCQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3
b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJlc3VsdD8KLQkJCQkJCQkJTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVk
KGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0
aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpCi0JCQkJCQkJCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQp
IHsKLQkJCQkJCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFs
eXNpc0VuYWJsZWQpCi0JCQkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29u
dHJhZGl0aW9ucyhtZXRob2RTdWJzdGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOwotCQkJ
CQkJCQlpbmZDdHgxOC5yZWJpbmRJbm5lclBvbGllcyhyZXN1bHQsIG1ldGhvZFN1YnN0aXR1dGUu
cGFyYW1ldGVycyk7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhv
ZFN1YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOwotCQkJCQkJCQlpZiAo
cHJvYmxlbU1ldGhvZCAhPSBudWxsKQotCQkJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0J
CQkJCQkJfSBlbHNlIHsKLQkJCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52
b2NhdGlvbikKLQkJCQkJCQkJCSgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLnJlZ2lzdGVy
SW5mZXJlbmNlQ29udGV4dChtZXRob2RTdWJzdGl0dXRlLCBpbmZDdHgxOCk7IC8vIGtlZXAgY29u
dGV4dCBzbyB3ZSBjYW4gZmluaXNoIGxhdGVyCi0JCQkJCQkJfQotCQkJCQkJCXJldHVybiBtZXRo
b2RTdWJzdGl0dXRlOwotCQkJCQkJfQotCQkJCQl9Ci0JCQkJCXJldHVybiBudWxsOwotCQkJCX0g
Y2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBGSVhNRSBzdG9w
LWdhcCBtZWFzdXJlCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVu
Y2VFcnJvcihlLmdldE1lc3NhZ2UoKSwgaW52b2NhdGlvblNpdGUpOwotCQkJCQlyZXR1cm4gbnVs
bDsKKwkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQg
dmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3Jp
Z2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9kCisJCQkvLyAxNS4xMi4yLjggLSBpbmZlcnJp
bmcgdW5yZXNvbHZlZCB0eXBlIGFyZ3VtZW50cworCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFz
VW5yZXNvbHZlZFR5cGVBcmd1bWVudCgpKSB7CisJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNV
bmNoZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIu
Mi43CisJCQkJCWludCBsZW5ndGggPSBpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLmxlbmd0
aDsKKwkJCQkJU3lzdGVtLmFycmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAw
LCB1bmNoZWNrZWRBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3Ro
KTsKIAkJCQl9Ci0JCQl9IGVsc2UgewotLy8gPT09PSAxLjggPT09PQotCQkJCWluZmVyZW5jZUNv
bnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJbWV0aG9k
U3Vic3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0aG9k
LCBhcmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQpOworCQkJCWlmIChtZXRo
b2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgeworCQkJCQlUeXBl
QmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlw
ZSgpOworCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKKwkJCQkJCS8vIHJlY29yZCBp
dCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVm
YXVsdCAoc2VlIGJlbG93KQorCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5oYXNFeHBsaWNpdEV4cGVj
dGVkVHlwZSA9IHRydWU7CisJCQkJCX0gZWxzZSB7CisJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29w
ZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKKwkJCQkJ
fQorCQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJ
CQl9CisJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG1ldGhvZFN1YnN0aXR1dGUuaW5mZXJGcm9tRXhw
ZWN0ZWRUeXBlKHNjb3BlLCBpbmZlcmVuY2VDb250ZXh0KTsKIAkJCQlpZiAobWV0aG9kU3Vic3Rp
dHV0ZSA9PSBudWxsKQogCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQkKLQkJCQkvLyBzdWJzdGl0dXRl
cyBtYXkgaG9sZCBudWxsIHRvIGRlbm90ZSB1bnJlc29sdmVkIHZhcnMsIGJ1dCBudWxsIGFyZ3Vt
ZW50cyBnb3QgcmVwbGFjZWQgd2l0aCByZXNwZWN0aXZlIG9yaWdpbmFsIHZhcmlhYmxlIGluIHBh
cmFtIG1ldGhvZAotCQkJCS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUg
YXJndW1lbnRzCi0JCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5yZXNvbHZlZFR5cGVBcmd1
bWVudCgpKSB7Ci0JCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0LmlzVW5jaGVja2VkKSB7IC8vIG9u
bHkgcmVtZW1iZXIgdW5jaGVja2VkIHN0YXR1cyBwb3N0IDE1LjEyLjIuNwotCQkJCQkJaW50IGxl
bmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOwotCQkJCQkJU3lzdGVt
LmFycmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1
bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKLQkJCQkJfQotCQkJ
CQlpZiAobWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQpIHsK
LQkJCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRp
b25UYXJnZXRUeXBlKCk7Ci0JCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKLQkJCQkJ
CQkvLyByZWNvcmQgaXQgd2FzIGV4cGxpY2l0IGZyb20gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBh
c3N1bWVkIGJ5IGRlZmF1bHQgKHNlZSBiZWxvdykKLQkJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhh
c0V4cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1ZTsKLQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJZXhw
ZWN0ZWRUeXBlID0gc2NvcGUuZ2V0SmF2YUxhbmdPYmplY3QoKTsgLy8gYXNzdW1lIE9iamVjdCBi
eSBkZWZhdWx0Ci0JCQkJCQl9Ci0JCQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9
IGV4cGVjdGVkVHlwZTsKLQkJCQkJfQotCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vi
c3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwot
CQkJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQotCQkJCQkJcmV0dXJuIG51bGw7Ci0J
CQkJfQogCQkJfQogCQl9CiAKQEAgLTI2Niw2ICsxNTcsOTMgQEAKIAkJcmV0dXJuIG1ldGhvZFN1
YnN0aXR1dGU7CiAJfQogCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kMTgoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdb
XSBhcmd1bWVudHMsIGZpbmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9u
U2l0ZSkgeworCQkKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1
YnN0aXR1dGUgPSBudWxsOworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9
IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZD
dHgxOCA9IG51bGw7CisJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9k
LnBhcmFtZXRlcnM7CisJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VD
b250ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3Bl
LmNvbXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBm
YWxzZTsKKwkJCisJCXRyeSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7
CisJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2Fi
aWxpdHkpOiAtLS0tCisJCQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0
aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25T
aXRlKS5pc1BvbHlFeHByZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNEaWFt
b25kID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7
CisJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJCWlu
ZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8v
IFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFy
ZykgaXMgc3VmZmljaWVudC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmls
aXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0g
aW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5h
bE1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBh
cHBsaWNhYmlsaXR5CisJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5j
ZUNvbnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2lu
ZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1v
bmQpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVzdWx0
ID09IG51bGwpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChy
ZXN1bHQpKSB7CisJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQx
OC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52
b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8v
IENIRUNLCisJCQl9IGVsc2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJLy8gQXBwbGlj
YWJpbGl0eSBzdWNjZWVkZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBpZiBw
b3NzaWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmlu
dm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxz
ZTsKKwkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAxOC41
LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJlc3Vs
dDsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJl
c3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCQly
ZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBl
LCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9jYXRpb25UeXBlSW5m
ZXJyZWQgPSB0cnVlOworCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7CisJ
CQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0
OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUg
b3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9IG51
bGwpIHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5kaW5n
W10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9j
YXRpb25TaXRlLCByZXN1bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCQlt
ZXRob2RTdWJzdGl0dXRlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZChvcmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhhc1Jl
dHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwg
cmVzdWx0PworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0
UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0
ZSk7CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5k
aW5nKSB7CisJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHBy
b2JsZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5m
ZXJyZWQpIHsKKwkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkKQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JD
b250cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7CisJ
CQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5k
Q2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51
bGwpIHsKKwkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJv
YmxlbU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdldFR5
cGUucHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJlc3Vs
dCkpOworCQkJCQl9IGVsc2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5UGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQl9
CisJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJCQko
KEludm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0
aG9kU3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlz
aCBsYXRlcgorCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQorCQkJ
cmV0dXJuIG51bGw7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewor
CQkJLy8gRklYTUUgc3RvcC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
Z2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7CisJ
CQlyZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sxOChT
Y29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9uIHN1
YnN0aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2RTdWJzdGl0dXRlID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0wLDAgKzEs
MTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENv
bnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xhc3MgUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyB7IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJsaWMgUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgYXBwbGljYWJsZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxlTWV0aG9kLm9yaWdp
bmFsTWV0aG9kLCBhcHBsaWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFwcGxpY2FibGVNZXRo
b2QuZW52aXJvbm1lbnQpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5
cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCmluZGV4
IDVjNzViOTAuLmZkYmQyZjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2YQpAQCAtNTEs
NiArNTEsMTEgQEAKIAlwdWJsaWMgYm9vbGVhbiBpc1BvbHlUeXBlKCkgewogCQlyZXR1cm4gdHJ1
ZTsKIAl9CisJCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgp
IHsKKwkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5pc0Z1bmN0aW9uYWxUeXBlKCk7CisJfQogCiAJ
cHVibGljIGNoYXJbXSBxdWFsaWZpZWRTb3VyY2VOYW1lKCkgewogCQlyZXR1cm4gcmVhZGFibGVO
YW1lKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKaW5kZXggNzNlMDQxYi4uZWQ1M2QyOSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQpAQCAtNDAsOSArNDAsOSBAQAogCWZpbmFsIGlu
dCBOb25TdGF0aWNPckFsaWVuVHlwZVJlY2VpdmVyID0gMjA7CiAJZmluYWwgaW50IEF0dGVtcHRU
b0J5cGFzc0RpcmVjdFN1cGVyID0gMjE7IC8vIHN1cGVyIGFjY2VzcyB3aXRoaW4gZGVmYXVsdCBt
ZXRob2QKIAlmaW5hbCBpbnQgRGVmZWN0aXZlQ29udGFpbmVyQW5ub3RhdGlvblR5cGUgPSAyMjsK
LQlmaW5hbCBpbnQgUGFyYW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0gPSAyMzsK
KwlmaW5hbCBpbnQgSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlID0gMjM7CiAJZmluYWwg
aW50IEFwcGxpY2FibGVNZXRob2RPdmVycmlkZGVuQnlJbmFwcGxpY2FibGUgPSAyNDsKIAlmaW5h
bCBpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9ucyA9IDI1OwogCWZpbmFsIGludCBOb1N1
Y2hNZXRob2RPbkFycmF5ID0gMjY7Ci0JZmluYWwgaW50IEluZmVycmVkQXBwbGlhYmxlTWV0aG9k
SW5hcHBsaWNhYmxlID0gMjc7IC8vIDE4LjUuMSBpZ25vcmVzIGFyZ3VtZW50cyBub3QgcGVydGlu
ZW50IHRvIGFwcGxpY2FiaWxpdHkuIFdoZW4gdGhlc2UgYXJlIHRha2VuIGludG8gY29uc2lkZXJh
dGlvbiBtZXRob2QgY291bGQgZmFpbCBhcHBsaWNhYmlsaXR5CisJZmluYWwgaW50IEluZmVycmVk
QXBwbGljYWJsZU1ldGhvZEluYXBwbGljYWJsZSA9IDI3OyAvLyAxOC41LjEgaWdub3JlcyBhcmd1
bWVudHMgbm90IHBlcnRpbmVudCB0byBhcHBsaWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtl
biBpbnRvIGNvbnNpZGVyYXRpb24gbWV0aG9kIGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eQogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCmluZGV4IGUxNGM3NWYuLjMxNzAwYWYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Jhd1R5cGVCaW5kaW5nLmphdmEKQEAgLTIwNSw2ICsyMDUsMTEgQEAKIAkJfQogCQl0aGlzLmFy
Z3VtZW50cyA9IHR5cGVBcmd1bWVudHM7CiAJfQorCQkKKwlAT3ZlcnJpZGUgCisJcHVibGljIFR5
cGVCaW5kaW5nIHVuY2FwdHVyZShTY29wZSBzY29wZSkgeworCQlyZXR1cm4gdGhpczsKKwl9CiAJ
CiAJQE92ZXJyaWRlCiAJVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKElu
ZmVyZW5jZVZhcmlhYmxlIHZhciwgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZVR5cGUpIHsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2
YQppbmRleCBjOWYzZTkwLi5mNTE4YjkzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3Bl
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxOSArODcsOSBAQAog
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBNT1JFX0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5j
b21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAq
IHdoaWNoIG9mIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9y
IGJvdGgpLgotCSAqLwotCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZl
cmVuY2UgKDE4LjUuMSkuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElU
WSA9IDE7Ci0JLyoqIFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4g
Ki8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBS
ZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9O
X1RZUEV9IGluZmVyZW5jZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVS
RU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtp
bmQ7CiAJcHVibGljIFNjb3BlIHBhcmVudDsKKwkKIAogCXByb3RlY3RlZCBTY29wZShpbnQga2lu
ZCwgU2NvcGUgcGFyZW50KSB7CiAJCXRoaXMua2luZCA9IGtpbmQ7CkBAIC00MzcsNiArNDI3LDkg
QEAKIAkJcmV0dXJuIGRlZmF1bHRTdWJzdGl0dXRvci5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwg
b3JpZ2luYWxUeXBlKTsKIAl9CiAKKwlwdWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93
T3JpZ2luYWwoKSB7CisJCXJldHVybiBmYWxzZTsgCisJfQogCS8qKgogCSAqIFJldHVybnMgYW4g
YXJyYXkgb2YgdHlwZXMsIHdoZXJlIG9yaWdpbmFsIHR5cGVzIGdvdCBzdWJzdGl0dXRlZCBnaXZl
biBhIHN1YnN0aXR1dGlvbi4KIAkgKiBPbmx5IGFsbG9jYXRlIGFuIGFycmF5IGlmIGFueXRoaW5n
IGlzIGRpZmZlcmVudC4KQEAgLTY5MSwxMCArNjg0LDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9u
bHkKIAkgKiBHaXZlbiBhIG1ldGhvZCwgcmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3Qg
YmUgY29udmVydGVkIHRvIHBhcmFtZXRlcnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRl
ZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5j
ZSBnb3QgdHJpZ2dlcmVkOwotCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBj
b21wYXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBt
ZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJh
Y2suIAogCSAqLwotCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywg
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQly
ZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRp
b25TaXRlLCBpbmZlcmVuY2VMZXZlbCwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RC
aW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBl
QmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJ
cmV0dXJuIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0
aW9uU2l0ZSwgZmFsc2UpOwogCX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcw
Miw4ICs2OTUsNyBAQAogCSAqIFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNh
c2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJl
ZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhl
biBzaW1wbHkgYW5zd2VyIGl0IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGlu
dCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXBy
b3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJ
CVR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5l
cmljVHlwZUFyZ3VtZW50cygpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2Qu
cGFyYW1ldGVyczsKQEAgLTczOCw5ICs3MzAsMTUgQEAKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdz
OwogCQkJZWxzZSAgLy8gZW5zdXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxv
dyBjYW4gdXBkYXRlIGFyZ3VtZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86
IGFsd2F5cyBjb3B5IGJlZm9yZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5h
cnJheWNvcHkoYXJndW1lbnRzLCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0
aF0sIDAsIGFyZ0xlbmd0aCk7Ci0JCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMs
IGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VMZXZlbCk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBh
cmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkg
cmV0dXJuIG51bGw7IC8vIGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRp
bmcoKSkgcmV0dXJuIG1ldGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNl
ZGVuY2UKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfOCAmJiBtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJ
CQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlOwor
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNv
bnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKKwkJCQlp
ZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29u
dGV4dDE4LlRZUEVfSU5GRVJSRUQpCisJCQkJCXJldHVybiBtZXRob2Q7IC8vIGluZmVyZW5jZSBp
cyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCisJCQl9CiAJCX0gZWxzZSBpZiAoZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxl
dmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCkBAIC03
NTUsNyArNzUzLDcgQEAKIAkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1i
aWd1b3VzVmFyYXJnc0ludm9jYXRpb24gJiYgY29tcGlsZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcyA9IGZhbHNlOwogCQl9Ci0JCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgo
bWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRpb25T
aXRlKSkgPiBOT1RfQ09NUEFUSUJMRSkgeworCQlpZiAoKHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4gTk9U
X0NPTVBBVElCTEUpIHsKIAkJCWlmICgobWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRp
b25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCS8vIGdlbmVyYXRlIHBvbHltb3Jw
aGljIG1ldGhvZAogCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBo
aWNNZXRob2QobWV0aG9kLCBhcmd1bWVudHMpOwpAQCAtNzY3LDE1MCArNzY1LDEwIEBACiAJCS8v
IGluIHdoaWNoIGNhc2UgdGhpcyBwcm9ibGVtIGNhdGVnb3J5IHdpbGwgYmUgYm9ndXMKIAkJaWYg
KGdlbmVyaWNUeXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyht
ZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgYXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0
ZXJpemVkTWV0aG9kVHlwZU1pc21hdGNoKTsKKwkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRz
IG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50
byBjb25zaWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywgbGFt
YmRhIHNoYXBlL2FyaXR5IG1pc21hdGNoIC4uLikKKwkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBv
bHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCisJCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVy
cywgUHJvYmxlbVJlYXNvbnMuSW5mZXJyZWRBcHBsaWNhYmxlTWV0aG9kSW5hcHBsaWNhYmxlKTsK
IAkJcmV0dXJuIG51bGw7IC8vIGluY29tcGF0aWJsZQotCX0KLQotCXByaXZhdGUgaW50IHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbDE4KE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBJbnZvY2F0
aW9uU2l0ZSBzaXRlKSB7Ci0JCWpkazE4Y2hlY2tzOgotCQlpZiAoc2l0ZSBpbnN0YW5jZW9mIElu
dm9jYXRpb24gJiYgY29tcGlsZXJPcHRpb25zKCkuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmls
ZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0
aW9uKSBzaXRlOwotCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewotCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0
aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgbWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwpIHsKLQkJCQkJLy8gaW5mZXJlbmNl
IGlzIHJlc3BvbnNpYmxlLCBubyBuZWVkIHRvIHJlY2hlY2sKLQkJCQkJaWYgKGluZkN0eC5pc1Zh
ckFyZ3MoKSkKLQkJCQkJCXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7Ci0JCQkJCXJldHVybiBD
T01QQVRJQkxFOwotCQkJCX0KLQkJCX0KLQkJCS8vIGNvbGxlY3QgaW5uZXIgaW52b2NhdGlvbnMg
d2hlcmUgdGhlIG91dGVyIGRpZCBub3QgaW52b2x2ZSBhbnkgaW5mZXJlbmNlOgotCQkJRXhwcmVz
c2lvbltdIGludm9jYXRpb25Bcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJ
aWYgKGludm9jYXRpb25Bcmd1bWVudHMgIT0gbnVsbCkgewotCQkJCUlubmVySW5mZXJlbmNlSGVs
cGVyIGlubmVySW5mZXJlbmNlSGVscGVyID0gaW52b2NhdGlvbi5pbm5lckluZmVyZW5jZUhlbHBl
cigpOwotCQkJCWludCBhcmdMZW4gPSBpbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsKLQkJCQli
b29sZWFuIGlzVmFyQXJnc1tdID0gbmV3IGJvb2xlYW5bMV07IC8vIGVtdWxhdGUgYW4gaW4tb3V0
IHBhcmFtZXRlciBmb3IgY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIoLi4pCi0JCQkJaXNW
YXJBcmdzWzBdID0gbWV0aG9kLmlzVmFyYXJncygpICYmIGFyZ0xlbiAhPSBtZXRob2QucGFyYW1l
dGVycy5sZW5ndGg7IC8vIGlmIHNhbWUgbGVuZ3RocywgaXNWYXJBcmdzIGNhbiBzdGlsbCBiZSB1
cGRhdGVkIGJlbG93Ci0JCQkJaW50IGxldmVsID0gQ09NUEFUSUJMRTsKLQkJCQlmb3IgKGludCBp
ID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7Ci0JCQkJCVR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSA9
IGkgPCBhcmd1bWVudHMubGVuZ3RoID8gYXJndW1lbnRzW2ldIDogbnVsbDsgLy8gbGVuZ3RoIG1p
c21hdGNoIG1heSBoYXBwZW4gZnJvbSBDb2RlU25pcHBldE1lc3NhZ2VTZW5kLnJlc29sdmVUeXBl
KCkgaW4gdGhlIGlmIChhcmdIYXNFcnJvcikgYmxvY2suCi0JCQkJCWludCBuZXh0TGV2ZWwgPSBj
b21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVy
LCBpbnZvY2F0aW9uQXJndW1lbnRzW2ldLCBhcmd1bWVudFR5cGUsIGFyZ0xlbiwgaSwgaXNWYXJB
cmdzKTsKLQkJCQkJaWYgKG5leHRMZXZlbCA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJCXJldHVy
biBuZXh0TGV2ZWw7Ci0JCQkJCWlmIChuZXh0TGV2ZWwgPT0gLTIpCi0JCQkJCQlicmVhayBqZGsx
OGNoZWNrczsKLQkJCQkJbGV2ZWwgPSBNYXRoLm1heChsZXZlbCwgIG5leHRMZXZlbCk7Ci0JCQkJ
fQotCQkJCXJldHVybiBsZXZlbDsgLy8gbmVpdGhlciBOT1RfQ09NUEFUSUJMRSBub3IgdW5rbm93
bigtMikgc2VlbgotCQkJfQotCQl9Ci0JCS8vIGZhbGwgYmFjayB0byBvbGQgbWV0aG9kOgotCQli
b29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzID0gKChzaXRlIGluc3RhbmNlb2YgUmVm
ZXJlbmNlRXhwcmVzc2lvbikgJiYgKChSZWZlcmVuY2VFeHByZXNzaW9uKSBzaXRlKS50cmlhbFJl
c29sdXRpb24pOwotCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwg
YXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZh
cmlhYmxlcyk7Ci0JfQotCi0JcHJpdmF0ZSBpbnQgY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5u
ZXIoTWV0aG9kQmluZGluZyBtZXRob2QsIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJl
bmNlSGVscGVyLCBFeHByZXNzaW9uIGludm9jQXJnLCBUeXBlQmluZGluZyBhcmdUeXBlLCBpbnQg
YXJnTGVuLCBpbnQgaSwgYm9vbGVhbltdIGlzVmFyQXJncykKLQl7Ci0JCWludCBjb21wYXRpYmxl
ID0gaXNWYXJBcmdzWzBdID8gVkFSQVJHU19DT01QQVRJQkxFIDogQ09NUEFUSUJMRTsKLQkJVHlw
ZUJpbmRpbmcgcmVzb2x2ZWRUeXBlID0gaW52b2NBcmcucmVzb2x2ZWRUeXBlOwotCQlUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2Qu
cGFyYW1ldGVycywgaSwgaXNWYXJBcmdzWzBdKTsKLQkJaWYgKCFpc1ZhckFyZ3NbMF0gJiYgc2hv
dWxkVHJ5VmFyYXJncyhtZXRob2QsIHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSkpIHsKLQkJCWlz
VmFyQXJnc1swXSA9IHRydWU7Ci0JCQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4Lmdl
dFBhcmFtZXRlcihtZXRob2QucGFyYW1ldGVycywgaSwgdHJ1ZSk7Ci0JCX0KLQkJaWYgKHRhcmdl
dFR5cGUgPT0gbnVsbCkKLQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsgLy8gbWlzbWF0Y2hpbmcg
bnVtYmVyIG9mIGFyZ3Mgb3Igb3RoZXIgc2V2ZXJlIHByb2JsZW0gaW5zaWRlIG1ldGhvZCBiaW5k
aW5nCi0JCWludCBsZXZlbCA9IC0yOyAvLyBkb24ndCBrbm93Ci0JCWlmIChpbnZvY0FyZyBpbnN0
YW5jZW9mIEludm9jYXRpb24gJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwpIHsKLQkJCUludm9jYXRp
b24gaW5uZXJQb2x5ID0gKEludm9jYXRpb24pIGludm9jQXJnOwotCQkJbGV2ZWwgPSBwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwocmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKLQkJCWlmIChs
ZXZlbCAhPSBOT1RfQ09NUEFUSUJMRSkgewotCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
YXJnVHlwZSwgcmVzb2x2ZWRUeXBlKSAmJiBpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQot
CQkJCQlpbm5lckluZmVyZW5jZUhlbHBlci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwgcmVz
b2x2ZWRUeXBlLCBhcmdMZW4sIGkpOwotCQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBs
ZXZlbCk7Ci0JCQl9IGVsc2UgewotCQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5u
ZXJQb2x5LmJpbmRpbmcobnVsbCwgZmFsc2UsIG51bGwpOyAvLyAxLiB0cnkgd2l0aG91dCB1cGRh
dGUKLQkJCQlpZiAoaW5uZXJCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7Ci0JCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBp
bm5lclBhcmFtZXRlcml6ZWQgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBp
bm5lckJpbmRpbmc7Ci0JCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGlubmVyUG9s
eS5nZXRJbmZlcmVuY2VDb250ZXh0KGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCWlmIChpbmZD
dHgxOCAhPSBudWxsICYmICFpbmZDdHgxOC5oYXNSZXN1bHRGb3IodGFyZ2V0VHlwZSkpIHsKLQkJ
CQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBjb21wYXRpYmxlLCBiZWNhdXNlIGluZmVyZW5jZSBzdGls
bCBuZWVkcyB0byBjb21wbGV0ZT8KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlwZSh0YXJn
ZXRUeXBlKTsKLQkJCQkJCU1ldGhvZEJpbmRpbmcgc29sdXRpb24gPSBpbmZDdHgxOC5pbmZlcklu
dm9jYXRpb25UeXBlKGlubmVyUG9seSwgaW5uZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJCWlmIChz
b2x1dGlvbiAhPSBudWxsICYmIHNvbHV0aW9uLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQlp
ZiAoaW5uZXJQb2x5LnVwZGF0ZUJpbmRpbmdzKHNvbHV0aW9uLCB0YXJnZXRUeXBlKSkgewotCQkJ
CQkJCQlpZiAoaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJCQkJCWlubmVySW5m
ZXJlbmNlSGVscGVyLnJlZ2lzdGVySW5uZXJSZXN1bHQobWV0aG9kLCBpbnZvY0FyZy5yZXNvbHZl
ZFR5cGUsIGFyZ0xlbiwgaSk7Ci0JCQkJCQkJfQotCQkJCQkJCWlmIChzb2x1dGlvbi5yZXR1cm5U
eXBlICE9IG51bGwpIHsKLQkJCQkJCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoc29sdXRpb24ucmV0dXJuVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQkJCQkJCWlmIChsZXZlbCAh
PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJCQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBs
ZXZlbCk7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBl
KG51bGwpOwotCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQl9IGVsc2UgaWYgKGlu
bmVyUG9seSBpbnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJCQkvLyBub3Qg
ZGV0ZWN0ZWQgYXMgY29tcGF0aWJsZSwgYmVjYXVzZSBpdHMgYSBkaWFtb25kIHdob3NlIHR5cGUg
aGFzbid0IHlldCBiZWVuIGluZmVycmVkPwotCQkJCQkJVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1l
bnRzID0gcmVzb2x2ZWRUeXBlLnR5cGVBcmd1bWVudHMoKTsKLQkJCQkJCWlmICh0eXBlQXJndW1l
bnRzICE9IG51bGwgJiYgdHlwZUFyZ3VtZW50cy5sZW5ndGggPT0gMCkgewotCQkJCQkJCUFsbG9j
YXRpb25FeHByZXNzaW9uIGFsbG9jID0gKEFsbG9jYXRpb25FeHByZXNzaW9uKSBpbm5lclBvbHk7
Ci0JCQkJCQkJaWYgKChhbGxvYy50eXBlLmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMCkg
ewotCQkJCQkJCQkvLyBub3QteWV0LWluZmVycmVkIGRpYW1vbmQ6IGVyYXN1cmUgY29tcGF0aWJp
bGl0eSBzaG91bGQgc3VmZmljZSwgZGV0YWlsIHdpbGwgYmUgY2hlY2tlZCB1c2luZyBpbmZlcmVu
Y2UKLQkJCQkJCQkJaWYgKHJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUu
ZXJhc3VyZSgpLCB0aGlzKSkKLQkJCQkJCQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQl9Ci0JCQkJfSBl
bHNlIGlmIChpbm5lclBvbHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJ
CQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRNZXRob2QgPSBpbm5lclBvbHkuYmluZGluZyh0YXJnZXRU
eXBlLCBmYWxzZSwgbnVsbCk7IC8vIDIuIHRyeSB3aXRoIHVwZGF0aW5nCi0JCQkJCWlmICh1cGRh
dGVkTWV0aG9kICE9IGlubmVyQmluZGluZyAmJiB1cGRhdGVkTWV0aG9kICE9IG51bGwpIHsKLQkJ
CQkJCWlmICh1cGRhdGVkTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCWlmICh1cGRh
dGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0J
CQkJCQkJcmV0dXJuIGNvbXBhdGlibGU7Ci0JCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0J
CQkJCQl9IGVsc2UgaWYgKHVwZGF0ZWRNZXRob2QucHJvYmxlbUlkKCkgPT0gUHJvYmxlbVJlYXNv
bnMuQW1iaWd1b3VzKSB7Ci0JCQkJCQkJbGV2ZWwgPSAtMjsgLy8gbmVpdGhlciBnb29kIG5vciBi
YWQsIGFuc3dlciAidW5rbm93biIKLQkJCQkJCX0KLQkJCQkJfQotCQkJCX0KLQkJCX0KLQkJfSBl
bHNlIGlmIChpbnZvY0FyZy5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCWlmIChpbnZvY0FyZyBp
bnN0YW5jZW9mIENvbmRpdGlvbmFsRXhwcmVzc2lvbikgewotCQkJCUNvbmRpdGlvbmFsRXhwcmVz
c2lvbiBjZSA9IChDb25kaXRpb25hbEV4cHJlc3Npb24pIGludm9jQXJnOwotCQkJCWludCBsZXZl
bDEgPSBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNl
SGVscGVyLCBjZS52YWx1ZUlmVHJ1ZSwgYXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwot
CQkJCWlmIChsZXZlbDEgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09NUEFU
SUJMRTsKLQkJCQlpbnQgbGV2ZWwyID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0
aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgY2UudmFsdWVJZkZhbHNlLCBhcmdUeXBlLCBhcmdM
ZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJaWYgKGxldmVsMiA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJ
CQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCXJldHVybiBNYXRoLm1heChsZXZlbDEsIGxl
dmVsMik7Ci0JCQl9Ci0JCQkvLyBMRSBvciBSRToKLQkJCWlmIChpbnZvY0FyZy5pc0NvbXBhdGli
bGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJCXJldHVybiBDT01QQVRJQkxFOwotCQkJaWYg
KCFpc1ZhckFyZ3NbMF0gJiYgbWV0aG9kLmlzVmFyYXJncygpKSB7IC8vIGNhbid0IHVzZSBzaG91
bGRUcnlWYXJhcmdzIHdpdGhvdXQgYSByZXNvbHZlZFR5cGUsIHNvIGp1c3QgdHJ5IGl0OgotCQkJ
CWlzVmFyQXJnc1swXSA9IHRydWU7Ci0JCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQx
OC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOwotCQkJCWlmICh0YXJn
ZXRUeXBlICE9IG51bGwgJiYgaW52b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0
aGlzKSkKLQkJCQkJcmV0dXJuIFZBUkFSR1NfQ09NUEFUSUJMRTsKLQkJCX0KLQkJCXJldHVybiBO
T1RfQ09NUEFUSUJMRTsKLQkJfSBlbHNlIGlmIChyZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiByZXNv
bHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJLy8gbmVlZCB0byBoYW5kbGUgIm5vcm1h
bCIgZXhwcmVzc2lvbnMgdG9vLCBzaW5jZSBtaXhlZCBwb2x5L3N0YW5kYWxvbmUgYXJndW1lbnQg
bGlzdHMgbXVzdCBiZSBmdWxseSBhbmFseXplZC4KLQkJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwocmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKLQkJfQotCQlyZXR1cm4gbGV2
ZWw7Ci0JfQotCi0JcHJpdmF0ZSBib29sZWFuIHNob3VsZFRyeVZhcmFyZ3MoTWV0aG9kQmluZGlu
ZyBtZXRob2QsIFR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkgewotCQlpZiAoIW1ldGhvZC5pc1ZhcmFyZ3MoKSkKLQkJCXJldHVybiBmYWxzZTsKLQkJaWYg
KHRhcmdldFR5cGUgPT0gbnVsbCkKLQkJCXJldHVybiB0cnVlOwkvLyBvZmYgcmFuZ2UKLQkJaWYg
KHRhcmdldFR5cGUuaXNBcnJheVR5cGUoKSAmJiByZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiAhcmVz
b2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQlyZXR1cm4g
dHJ1ZTsJLy8gbm90IGEgZGlyZWN0IG1hdGNoIGJ1dCBob3BlIHRvIGltcHJvdmUKLQkJcmV0dXJu
IGZhbHNlOwogCX0KIAogCS8qKgpAQCAtMTI2Nyw3ICsxMTI1LDcgQEAKIAkJCW5leHQ6CiAJCQlm
b3IgKGludCBpID0gc3RhcnRGb3VuZFNpemU7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1l
dGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50
QXQoaSk7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUs
IEFQUExJQ0FCSUxJVFkpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNv
bXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9j
YXRpb25TaXRlKTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlm
IChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChjb25jcmV0
ZU1hdGNoZXMgIT0gbnVsbCkgewpAQCAtMTI5Nyw4ICsxMTU1LDYgQEAKIAkJCQkJcmV0dXJuIHBy
b2JsZW1NZXRob2Q7IC8vIGNhbiBiZSBudWxsCiAJCQl9CiAJCQljb25jcmV0ZU1hdGNoID0gY2Fu
ZGlkYXRlc1swXTsKLQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9y
bSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCWNvbmNyZXRlTWF0Y2ggPSBpbmZlcklu
dm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjb25jcmV0ZU1hdGNoLCBhcmd1bWVudFR5cGVz
KTsKIAkJCWlmIChjb25jcmV0ZU1hdGNoICE9IG51bGwpCiAJCQkJY29tcGlsYXRpb25Vbml0U2Nv
cGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjb25jcmV0ZU1hdGNoLnRocm93bkV4Y2VwdGlvbnMp
OwogCQkJcmV0dXJuIGNvbmNyZXRlTWF0Y2g7CkBAIC0xMzcxLDcgKzEyMjcsNyBAQAogCQkJCS8v
IHRhcmdldGluZyBhIGdlbmVyaWMgbWV0aG9kIGNvdWxkIGZpbmQgYW4gZXhhY3QgbWF0Y2ggd2l0
aCB2YXJpYWJsZSByZXR1cm4gdHlwZQogCQkJCWlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlw
ZUFyZ3VtZW50cygpICE9IG51bGwpIHsKIAkJCQkJLy8gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
Li4pIHdpbGwgcmV0dXJuIGEgUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nIGlmIG5lZWRlZAotCQkJ
CQlleGFjdE1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0UpOworCQkJCQlleGFjdE1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVz
LCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJfSBlbHNlIGlmICgoZXhhY3RNZXRob2QudGFnQml0cyAm
IFRhZ0JpdHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJCS8v
IGdlbmVyYXRlIHBvbHltb3JwaGljIG1ldGhvZAogCQkJCQlyZXR1cm4gdGhpcy5lbnZpcm9ubWVu
dCgpLmNyZWF0ZVBvbHltb3JwaGljTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzKTsK
QEAgLTE3NjMsMjIgKzE2MTksMTMgQEAKIAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0
eSBjaGVjawogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1l
dGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50
QXQoaSk7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUs
IEFQUExJQ0FCSUxJVFkpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNv
bXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9j
YXRpb25TaXRlKTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlm
IChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChmb3VuZFNp
emUgPT0gMSAmJiBjb21wYXRpYmxlTWV0aG9kLmNhbkJlU2VlbkJ5KHJlY2VpdmVyVHlwZSwgaW52
b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJCQkJCQkJLy8gcmV0dXJuIHRoZSBzaW5nbGUgdmlzaWJs
ZSBtYXRjaCBub3cKIAkJCQkJCQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQog
CQkJCQkJCQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNl
bGVjdG9yLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFy
dCwgZm91bmQsIG5ldyBNZXRob2RCaW5kaW5nIFtdIHtjb21wYXRpYmxlTWV0aG9kfSk7Ci0vLyA9
PT09IDEuODogRmluYWxpemUgdHlwZSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09
Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBpbXByb3ZlZCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52
b2NhdGlvblNpdGUsIGNvbXBhdGlibGVNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwotCQkJCQkJCWlm
IChpbXByb3ZlZCAhPSBudWxsICYmIGltcHJvdmVkLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJ
CQkJY29tcGF0aWJsZU1ldGhvZCA9IGltcHJvdmVkOwotCQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJ
CXByb2JsZW1NZXRob2QgPSBpbXByb3ZlZDsKLQkJCQkJCQkJY29udGludWU7Ci0JCQkJCQkJfQot
Ly8gPT09PSAxLjggPT09PQogCQkJCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhj
b21wYXRpYmxlTWV0aG9kLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCQkJCXJldHVybiBjb21wYXRp
YmxlTWV0aG9kOwogCQkJCQkJfQpAQCAtMTg4Nyw4ICsxNzM0LDcgQEAKIAkJCWNhc2UgMSA6CiAJ
CQkJaWYgKHNlYXJjaEZvckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkKIAkJCQkJcmV0dXJuIGZpbmRE
ZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9k
QmluZGluZyBbXSB7IGNhbmRpZGF0ZXNbMF0gfSk7Ci0JCQkJLy8gMS44OiBHaXZlIGluZmVyZW5j
ZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCWNh
bmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNhbmRpZGF0ZXNb
MF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCWNhbmRpZGF0ZSA9IGNhbmRpZGF0ZXNbMF07CiAJCQkJ
aWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5j
ZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCXJldHVybiBjYW5kaWRhdGU7CkBA
IC0yMzgwLDcgKzIyMjYsMTAgQEAKIAkJfQogCQlpZiAoZXhhY3RNZXRob2QgPT0gbnVsbCB8fCAh
ZXhhY3RNZXRob2QuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKQogCQkJcmV0dXJu
IG51bGw7Ci0JCWlmIChleGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCBleGFjdE1ldGhvZC50eXBl
VmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBpbnZvY2F0aW9uU2l0
ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQorCQlmaW5hbCBUeXBlQmluZGlu
Z1tdIHR5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygp
OworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0TWV0aG9kLnR5
cGVWYXJpYWJsZXMoKTsKKwkJaWYgKGV4YWN0TWV0aG9kLmlzVmFyYXJncygpIHx8ICh0eXBlVmFy
aWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgKHR5cGVBcmd1bWVudHMgPT0g
bnVsbCB8fCB0eXBlQXJndW1lbnRzLmxlbmd0aCAhPSB0eXBlVmFyaWFibGVzLmxlbmd0aCkpKQog
CQkJcmV0dXJuIG51bGw7CiAJCQogCQlpZiAocmVjZWl2ZXJUeXBlLmlzQXJyYXlUeXBlKCkpIHsK
QEAgLTIzOTUsNiArMjI0NCwxMCBAQAogCQl7CiAJCQlyZXR1cm4gZW52aXJvbm1lbnQoKS5jcmVh
dGVHZXRDbGFzc01ldGhvZChyZWNlaXZlclR5cGUsIGV4YWN0TWV0aG9kLCB0aGlzKTsKIAkJfQor
CQkKKwkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgCisJ
CQlyZXR1cm4gZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChl
eGFjdE1ldGhvZCwgdHlwZUFyZ3VtZW50cyk7CisJCiAJCXJldHVybiBleGFjdE1ldGhvZDsKIAl9
CiAJCQpAQCAtMjQxNywxOSArMjI3MCwyNiBAQAogCQlNZXRob2RCaW5kaW5nIGV4YWN0Q29uc3Ry
dWN0b3IgPSBudWxsOwogCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZShyZWNlaXZlclR5
cGUpOwogCQlNZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2Rz
KFR5cGVDb25zdGFudHMuSU5JVCk7CisJCWZpbmFsIFR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVB
cmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOwogCQlmb3Ig
KGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewog
CQkJTWV0aG9kQmluZGluZyBjb25zdHJ1Y3RvciA9IG1ldGhvZHNbaV07CiAJCQlpZiAoIWNvbnN0
cnVjdG9yLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCQljb250aW51ZTsK
IAkJCWlmIChjb25zdHJ1Y3Rvci5pc1ZhcmFyZ3MoKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCWlm
IChjb25zdHJ1Y3Rvci50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxF
UyAmJiBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQlp
ZiAoY29uc3RydWN0b3IudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJM
RVMgJiYgZ2VuZXJpY1R5cGVBcmd1bWVudHMgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJ
CWlmIChleGFjdENvbnN0cnVjdG9yID09IG51bGwpIHsKIAkJCQlleGFjdENvbnN0cnVjdG9yID0g
Y29uc3RydWN0b3I7CiAJCQl9IGVsc2UgewogCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJ
CWZpbmFsIFR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gZXhhY3RDb25zdHJ1
Y3Rvci50eXBlVmFyaWFibGVzKCk7CisJCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9f
VFlQRV9WQVJJQUJMRVMpIHsKKwkJCWlmICh0eXBlVmFyaWFibGVzLmxlbmd0aCAhPSBnZW5lcmlj
VHlwZUFyZ3VtZW50cy5sZW5ndGgpCisJCQkJcmV0dXJuIG51bGw7CisJCQlleGFjdENvbnN0cnVj
dG9yID0gZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChleGFj
dENvbnN0cnVjdG9yLCBnZW5lcmljVHlwZUFyZ3VtZW50cyk7CiAJCX0KIAkJcmV0dXJuIGV4YWN0
Q29uc3RydWN0b3I7CiAJfQpAQCAtMjQ1OCw3ICsyMzE4LDcgQEAKIAkJCWlmIChtZXRob2RCaW5k
aW5nICE9IG51bGwgJiYgbWV0aG9kQmluZGluZy5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwg
dGhpcykpIHsKIAkJCSAgICAvLyB0YXJnZXRpbmcgYSBub24gZ2VuZXJpYyBjb25zdHJ1Y3RvciB3
aXRoIHR5cGUgYXJndW1lbnRzID8KIAkJCSAgICBpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5
cGVBcmd1bWVudHMoKSAhPSBudWxsKQotCQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNp
dGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
KTsKIAkJCQlyZXR1cm4gbWV0aG9kQmluZGluZzsKIAkJCX0KIAkJCU1ldGhvZEJpbmRpbmdbXSBt
ZXRob2RzID0gcmVjZWl2ZXJUeXBlLmdldE1ldGhvZHMoVHlwZUNvbnN0YW50cy5JTklULCBhcmd1
bWVudFR5cGVzLmxlbmd0aCk7CkBAIC0yNDcyLDcgKzIzMzIsNyBAQAogCQkJaW50IGNvbXBhdGli
bGVJbmRleCA9IDA7CiAJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBudWxsOwogCQkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElD
QUJJTElUWSk7CisJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUp
OwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGli
bGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCWNvbXBhdGlibGVbY29tcGF0aWJsZUlu
ZGV4KytdID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTI0OTUsOCArMjM1NSw3IEBACiAJCQkJCXZp
c2libGVbdmlzaWJsZUluZGV4KytdID0gbWV0aG9kOwogCQkJfQogCQkJaWYgKHZpc2libGVJbmRl
eCA9PSAxKSB7Ci0JCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3Jt
IG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCXJldHVybiBpbmZlckludm9jYXRpb25U
eXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlyZXR1
cm4gdmlzaWJsZVswXTsKIAkJCX0KIAkJCWlmICh2aXNpYmxlSW5kZXggPT0gMCkKIAkJCQlyZXR1
cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKApAQCAtMjc2MCw3ICsyNjE5LDcgQEAKIAkJCQkJ
CQkJaWYgKGZvdW5kUHJvYmxlbSA9PSBudWxsKQogCQkJCQkJCQkJZm91bmRQcm9ibGVtID0gcG9z
c2libGU7IC8vIGFuc3dlciBhcyBlcnJvciBjYXNlIG1hdGNoCiAJCQkJCQkJfSBlbHNlIGlmIChw
b3NzaWJsZS5pc1N0YXRpYygpKSB7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29t
cGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVu
dFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9
IG51bGwpIHsKIAkJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkp
IHsKIAkJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeSh1bml0U2NvcGUu
ZlBhY2thZ2UpKSB7CkBAIC0zNTk2LDggKzM0NTUsOCBAQAogCQkJZm9yIChpbnQgaSA9IChvbmVQ
YXJhbXNMZW5ndGggPiB0d29QYXJhbXNMZW5ndGggPyB0d29QYXJhbXNMZW5ndGggOiBvbmVQYXJh
bXNMZW5ndGgpIC0gMjsgaSA+PSAwOyBpLS0pCiAJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFs
cyhvbmVQYXJhbXNbaV0sIHR3b1BhcmFtc1tpXSkgJiYgIW9uZVBhcmFtc1tpXS5pc0NvbXBhdGli
bGVXaXRoKHR3b1BhcmFtc1tpXSkpCiAJCQkJCXJldHVybiBmYWxzZTsKLQkJCWlmIChwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwob25lLCB0d29QYXJhbXMsIHRydWUsIGZhbHNlKSA9PSBOT1Rf
Q09NUEFUSUJMRQotCQkJCQkmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQ
YXJhbXMsIHRydWUsIGZhbHNlKSA9PSBWQVJBUkdTX0NPTVBBVElCTEUpCisJCQlpZiAocGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVlKSA9PSBOT1RfQ09NUEFU
SUJMRQorCQkJCQkmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQYXJhbXMs
IHRydWUpID09IFZBUkFSR1NfQ09NUEFUSUJMRSkKIAkJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQly
ZXR1cm4gZmFsc2U7CkBAIC00MzcyLDMzICs0MjMxLDIyIEBACiAJcHJvdGVjdGVkIGZpbmFsIE1l
dGhvZEJpbmRpbmcgbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10gdmlz
aWJsZSwgaW50IHZpc2libGVTaXplLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFs
IEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVy
VHlwZSkgewogCiAJCWJvb2xlYW4gaXNKZGsxOCA9IGNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzg7Ci0KIAkJLy8gY29tbW9uIHBhcnQgZm9y
IGFsbCBjb21wbGlhbmNlIGxldmVsczoKIAkJaW50W10gY29tcGF0aWJpbGl0eUxldmVscyA9IG5l
dyBpbnRbdmlzaWJsZVNpemVdOwogCQlpbnQgY29tcGF0aWJsZUNvdW50ID0gMDsKLQkJZm9yIChp
bnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKSB7Ci0JCQlUeXBlQmluZGluZ1tdIGFyZ1R5
cGVzID0gYXJndW1lbnRUeXBlczsKLQkJCWlmIChpc0pkazE4ICYmIGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJCUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5m
ZXJlbmNlSGVscGVyID0gKChJbnZvY2F0aW9uKWludm9jYXRpb25TaXRlKS5pbm5lckluZmVyZW5j
ZUhlbHBlcigpOwotCQkJCWlmIChpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQlh
cmdUeXBlcyA9IGlubmVySW5mZXJlbmNlSGVscGVyLmdldEFyZ3VtZW50VHlwZXNGb3JDYW5kaWRh
dGUodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcyk7Ci0JCQl9Ci0JCQlpZiAoKGNvbXBhdGliaWxp
dHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJn
VHlwZXMpKSAhPSBOT1RfQ09NUEFUSUJMRSkgeworCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2li
bGVTaXplOyBpKyspCisJCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcykpICE9IE5PVF9DT01Q
QVRJQkxFKSB7CiAJCQkJaWYgKGkgIT0gY29tcGF0aWJsZUNvdW50KSB7CiAJCQkJCXZpc2libGVb
Y29tcGF0aWJsZUNvdW50XSA9IHZpc2libGVbaV07CiAJCQkJCWNvbXBhdGliaWxpdHlMZXZlbHNb
Y29tcGF0aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNbaV07CiAJCQkJfQogCQkJCWNv
bXBhdGlibGVDb3VudCsrOwogCQkJfQotCQl9Ci0vLyBUT0RPOiBEaXNhYmxlZCwgYmVjYXVzZSB3
ZSBrbm93IGEgc2l0dWF0aW9uIHdoZXJlIHRoaXMgaXMgZXhwZWN0ZWQsIHNlZSBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvNDI5NDkwCi0vLwkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxl
U2l6ZSkgewotLy8JCQlwcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlUHJvYmxlbSgi
KFJlY292ZXJlZCkgSW50ZXJuYWwgaW5jb25zaXN0ZW5jeSB3aGlsZSBjaGVja2luZyBpbnZvY2F0
aW9uIGFtYmlndWl0eSIsIGludm9jYXRpb25TaXRlLCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5n
KTsgLy8kTk9OLU5MUy0xJAotLy8JCX0KKwkJCiAJCWlmIChjb21wYXRpYmxlQ291bnQgPT0gMCkg
ewogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLnNlbGVjdG9y
LCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCX0gZWxzZSBpZiAo
Y29tcGF0aWJsZUNvdW50ID09IDEpIHsKLQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5m
ZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBl
cyk7CisJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IHZpc2libGVbMF07CiAJCQlpZiAoY2Fu
ZGlkYXRlICE9IG51bGwpCiAJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVm
ZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQlyZXR1cm4gY2FuZGlkYXRl
OwpAQCAtNDQwOCw4ICs0MjU2LDggQEAKIAkJCVN5c3RlbS5hcnJheWNvcHkoY29tcGF0aWJpbGl0
eUxldmVscywgMCwgY29tcGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbY29tcGF0aWJsZUNvdW50
XSwgMCwgY29tcGF0aWJsZUNvdW50KTsKIAkJfQogCQkKKwkJCiAJCU1ldGhvZEJpbmRpbmdbXSBt
b3JlU3BlY2lmaWMgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZV07Ci0KIAkJaWYgKGlz
SmRrMTgpIHsKIAkJCS8vIDE1LjEyLjIuNSBDaG9vc2luZyB0aGUgTW9zdCBTcGVjaWZpYyBNZXRo
b2QKIAkJCWludCBjb3VudCA9IDA7CkBAIC00NDYzLDcgKzQzMTEsNyBAQAogCQkJaWYgKGNvdW50
ID09IDApIHsKIAkJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0s
IHZpc2libGVbMF0uc2VsZWN0b3IsIHZpc2libGVbMF0ucGFyYW1ldGVycywgUHJvYmxlbVJlYXNv
bnMuQW1iaWd1b3VzKTsKIAkJCX0gZWxzZSBpZiAoY291bnQgPT0gMSkgewotCQkJCU1ldGhvZEJp
bmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgbW9y
ZVNwZWNpZmljWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0
ZSA9IG1vcmVTcGVjaWZpY1swXTsKIAkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCWNv
bXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93
bkV4Y2VwdGlvbnMpOwogCQkJCXJldHVybiBjYW5kaWRhdGU7CkBAIC00NTE2LDcgKzQzNjQsNyBA
QAogCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJCU1ldGhvZEJpbmRpbmcgYWNjZXB0YWJsZSA9IGNv
bXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZFRvVGVzdCwgdGllYnJlYWtNZXRob2QucGFyYW1l
dGVycywKLQkJCQkJCQkJdGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgSU5WT0NBVElPTl9UWVBFLCBs
ZXZlbCA9PSBWQVJBUkdTX0NPTVBBVElCTEUpOworCQkJCQkJCQl0aWVCcmVha0ludm9jYXRpb25T
aXRlLCBsZXZlbCA9PSBWQVJBUkdTX0NPTVBBVElCTEUpOwogCQkJCQkJLyogVGhlcmUgYXJlIDQg
Y2hvaWNlcyB0byBjb25zaWRlciB3aXRoIGN1cnJlbnQgJiBuZXh0IDoKIAkJCQkJCSBmb28oQikg
JiBmb28oQSkgd2hlcmUgQiBleHRlbmRzIEEKIAkJCQkJCSAxLiB0aGUgMiBtZXRob2RzIGFyZSBl
cXVhbCAoYm90aCBhY2NlcHQgZWFjaCBvdGhlcnMgcGFyYW1ldGVycykgLT4gd2FudCB0byBjb250
aW51ZQpAQCAtNDU0MCw4ICs0Mzg4LDcgQEAKIAkJCWlmIChjb3VudCA9PSAxKSB7CiAJCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKSB7CiAJCQkJCWlmIChtb3JlU3BlY2lm
aWNbaV0gIT0gbnVsbCkgewotCQkJCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0
byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCQkJTWV0aG9kQmluZGlu
ZyBjYW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxl
W2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gdmlz
aWJsZVtpXTsKIAkJCQkJCWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJCQljb21waWxhdGlv
blVuaXRTY29wZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRp
b25zKTsKIAkJCQkJCXJldHVybiBjYW5kaWRhdGU7CkBAIC00NjYyLDggKzQ1MDksNyBAQAogCQkJ
CWlmIChtb3N0U3BlY2lmaWNFeGNlcHRpb25zICE9IG51bGwgJiYgbW9zdFNwZWNpZmljRXhjZXB0
aW9ucyAhPSBjdXJyZW50LnRocm93bkV4Y2VwdGlvbnMpIHsKIAkJCQkJcmV0dXJuIG5ldyBNb3N0
U3BlY2lmaWNFeGNlcHRpb25NZXRob2RCaW5kaW5nKGN1cnJlbnQsIG1vc3RTcGVjaWZpY0V4Y2Vw
dGlvbnMpOwogCQkJCX0KLQkJCQkvLyAxLjg6IEJlZm9yZSByZXR1cm5pbmcgZ2l2ZSBpbmZlcmVu
Y2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQly
ZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY3VycmVudCwgYXJndW1l
bnRUeXBlcyk7CisJCQkJcmV0dXJuIGN1cnJlbnQ7CiAJCQl9CiAJCX0KIApAQCAtNDcyOCwxNCAr
NDU3NCwyNSBAQAogCX0KIAogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewotCQlyZXR1
cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSwg
ZmFsc2UpOworCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJn
dW1lbnRzLCBmYWxzZSk7CiAJfQkKLQlwdWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xl
YW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZh
cmlhYmxlcykgeworCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVh
a2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhv
ZC5wYXJhbWV0ZXJzOwogCQlpbnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJ
aW50IGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7Ci0KKwkJVHlwZUJpbmRpbmcgW10gamxP
ID0geyBnZXRKYXZhTGFuZ09iamVjdCgpIH07CiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSBjb21waWxlck9wdGlvbnMoKTsKKwkJLy8gQWZ0ZXIgYXBwbGljYWJpbGl0eSBpbmZl
cmVuY2UgYXQgMS44KyB0aGVyZSBpcyBubyB1c2UgY2hlY2tpbmcgbm9uLWZ1bmN0aW9uYWwgdHlw
ZSBhcmd1bWVudHMvcGFyYW1ldGVycyBmb3IgY29tcGF0aWJpbGl0eSBzaW5jZSBpbmZlcmVuY2Ug
d291bGQgaGF2ZSBndWFyYW50ZWVkIHRoYXQuCisJCWJvb2xlYW4gY2hlY2tPbmx5RnVuY3Rpb25h
bFR5cGVzID0gZmFsc2U7CisJCVR5cGVCaW5kaW5nIFtdIHNoYWxsb3dQYXJhbWV0ZXJzID0gcGFy
YW1ldGVyczsKKwkJTWV0aG9kQmluZGluZyBzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Q7CisJCWlm
IChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkgeworCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgfHwgc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsKCkpIHsKKwkJCQljaGVj
a09ubHlGdW5jdGlvbmFsVHlwZXMgPSBtZXRob2QgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nOworCQkJCXNoYWxsb3dPcmlnaW5hbCA9IG1ldGhvZC5zaGFs
bG93T3JpZ2luYWwoKTsKKwkJCQlzaGFsbG93UGFyYW1ldGVycyA9IHNoYWxsb3dPcmlnaW5hbC5w
YXJhbWV0ZXJzOworCQkJfQorCQl9CiAJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CiAJCQlpZiAocGFyYW1MZW5ndGggIT0gYXJn
TGVuZ3RoKQogCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKQEAgLTQ3NjEsMTYgKzQ2MTgsMjcg
QEAKIAkJCWlmIChwYXJhbUxlbmd0aCA9PSBhcmdMZW5ndGgpIHsgLy8gYWNjZXB0IFggb3IgWFtd
IGJ1dCBub3QgWFtdW10KIAkJCQlUeXBlQmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdElu
ZGV4XTsgLy8gaXMgYW4gQXJyYXlCaW5kaW5nIGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGlu
ZyBhcmcgPSBhcmd1bWVudHNbbGFzdEluZGV4XTsKKwkJCQkKIAkJCQlpZiAoVHlwZUJpbmRpbmcu
bm90RXF1YWxzKHBhcmFtLCBhcmcpKSB7Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9s
ZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwog
CQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBYW10s
IGlzIGl0IGNhbGxlZCB3aXRoIFgKIAkJCQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFt
KS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJCWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7
CiAJCQkJCQkJYXJnID0gKChBcnJheUJpbmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJ
CQl9Ci0JCQkJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVu
diwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMp
ID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJ
CWlmICgoKEFycmF5QmluZGluZykgc2hhbGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVu
dHNUeXBlKCkuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwp
KSB7CisJCQkJCQkJaWYgKGNoZWNrT25seUZ1bmN0aW9uYWxUeXBlcykgeworCQkJCQkJCQlpZiAo
YXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAhcGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRo
aXMpKQorCQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCQkJCQkvLyBBcHBsaWNh
YmlsaXR5IGluZmVyZW5jZSBtYXkgaGF2ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFy
aWFibGVzIHdpdGggamxPLCBkb24ndCB0cmlwIG9uIHRoZXNlLgorCQkJCQkJCQlpZiAoIXBhcmFt
Lm1lbnRpb25zQW55KGpsTywgLTEpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcs
IHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxF
KQorCQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCQkJCX0gZWxzZSB7CisJCQkJ
CQkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCQkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJCQl9CisJCQkJCQl9CiAJCQkJCQlsZXZlbCA9IFZBUkFS
R1NfQ09NUEFUSUJMRTsgLy8gdmFyYXJncyBzdXBwb3J0IG5lZWRlZAogCQkJCQl9CiAJCQkJfQpA
QCAtNDc3OSw3ICs0NjQ3LDE3IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJp
bmRpbmcpIHBhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAo
aW50IGkgPSBsYXN0SW5kZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRp
bmcgYXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAt
IDEpKSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJn
dW1lbnRzW2ldOwotCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAm
JiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBB
VElCTEUpCisJCQkJCQlpZiAoISgoQXJyYXlCaW5kaW5nKXNoYWxsb3dQYXJhbWV0ZXJzW2xhc3RJ
bmRleF0pLmVsZW1lbnRzVHlwZSgpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZywgc2hh
bGxvd09yaWdpbmFsKSkKKwkJCQkJCQljb250aW51ZTsKKwkJCQkJCWlmIChjaGVja09ubHlGdW5j
dGlvbmFsVHlwZXMpIHsKKwkJCQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAhcGFy
YW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpKQorCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7CisJCQkJCQkJLy8gQXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgbWF5IGhhdmUgc3Vic3Rp
dHV0ZWQgdW5yZXNvbHZlZCB0eXBlIHZhcmlhYmxlcyB3aXRoIGpsTywgZG9uJ3QgdHJpcCBvbiB0
aGVzZS4KKwkJCQkJCQlpZiAocGFyYW0ubWVudGlvbnNBbnkoamxPLCAtMSkpCisJCQkJCQkJCWNv
bnRpbnVlOworCQkJCQkJCS8vIEZBTEwgVEhST1VHSCBhbmQgY2hlY2sgY29tcGF0aWJpbGl0eS4K
KwkJCQkJCX0KKwkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW0sIGFyZykgJiYg
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcykgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCQkJcmV0dXJuIE5PVF9DT01Q
QVRJQkxFOwogCQkJCQl9CiAJCQkJfSAgZWxzZSBpZiAobGFzdEluZGV4ICE9IGFyZ0xlbmd0aCkg
eyAvLyBjYW4gY2FsbCBmb28oaW50IGksIFggLi4uIHgpIHdpdGggZm9vKDEpIGJ1dCBOT1QgZm9v
KCk7CkBAIC00Nzk1LDcgKzQ2NzMsMTggQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1l
dGVyc1tpXTsKIAkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
ICYmIChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ld
KS5lbGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RF
cXVhbHMoYXJnLHBhcmFtKSkgewotCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRv
bGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQkvLyBDYXJlZnVsOiBUIG1heSBoYXZlIGJl
ZW4gc3Vic3RpdHV0ZWQgd2l0aCBqbE8uIENvbnN1bHQgdGhlIHNoYWxsb3cgcGFyYW1ldGVyIGZv
ciBwZXJ0aW5lbmN5IGZpcnN0LgorCQkJCWlmICghc2hhbGxvd1BhcmFtZXRlcnNbaV0uaXNQZXJ0
aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQorCQkJCQljb250aW51
ZTsKKwkJCQlpZiAoY2hlY2tPbmx5RnVuY3Rpb25hbFR5cGVzKSB7CisJCQkJCWlmIChhcmcuaXNG
dW5jdGlvbmFsVHlwZSgpICYmICFwYXJhbS5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UodGhpcykpCisJ
CQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCS8vIEFwcGxpY2FiaWxpdHkgaW5mZXJl
bmNlIG1heSBoYXZlIHN1YnN0aXR1dGVkIHVucmVzb2x2ZWQgdHlwZSB2YXJpYWJsZXMgd2l0aCBq
bE8sIGRvbid0IHRyaXAgb24gdGhlc2UuCisJCQkJCWlmIChwYXJhbS5tZW50aW9uc0FueShqbE8s
IC0xKSkKKwkJCQkJCWNvbnRpbnVlOworCQkJCQkvLyBGQUxMIFRIUk9VR0ggYW5kIGNoZWNrIGNv
bXBhdGliaWxpdHkuCisJCQkJfQorCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwog
CQkJCWlmIChuZXdMZXZlbCA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJcmV0dXJuIE5PVF9DT01Q
QVRJQkxFOwogCQkJCWlmIChuZXdMZXZlbCA+IGxldmVsKQpAQCAtNDgyNCw3ICs0NzEzLDcgQEAK
IAkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCX0KIAkKLQlwcml2YXRlIGludCBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwoVHlwZUJpbmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwgTG9v
a3VwRW52aXJvbm1lbnQgZW52LCBib29sZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGJv
b2xlYW4gdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpIHsKKwlwcml2YXRlIGludCBwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwoVHlwZUJpbmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwg
TG9va3VwRW52aXJvbm1lbnQgZW52LCBib29sZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMp
IHsKIAkJLy8gb25seSBjYWxsZWQgaWYgZW52Lm9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfNQogCQlpZiAoYXJnID09IG51bGwgfHwgcGFyYW0gPT0gbnVsbCkK
IAkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKQEAgLTQ4NDMsMTEgKzQ3MzIsNiBAQAogCQkJVHlw
ZUJpbmRpbmcgY29udmVydGVkVHlwZSA9IGVudi5jb21wdXRlQm94aW5nVHlwZShhcmcpOwogCQkJ
aWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhjb252ZXJ0ZWRUeXBlLCBwYXJhbSkgfHwgY29u
dmVydGVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtLCB0aGlzKSkKIAkJCQlyZXR1cm4gQVVU
T0JPWF9DT01QQVRJQkxFOwotCQl9Ci0JCWlmICh0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyAm
JiAoIWFyZy5pc1Byb3BlclR5cGUoZmFsc2UpIHx8ICFwYXJhbS5pc1Byb3BlclR5cGUoZmFsc2Up
KSkgewotCQkJLy8gZHVyaW5nIHR5cGUgaW5mZXJlbmNlIGludm9sdmluZyBhIFJlZmVyZW5jZUV4
cHJlc3Npb24gaWdub3JlIGluY29tcGF0aWJpbGl0eSBkdWUgdG8gYW4gaW5mZXJlbmNlIHZhcmlh
YmxlLAotCQkJLy8ga25vd2luZyB0aGF0IHdlIHdpbGwgcHJvZHVjZSBjb25zdHJhaW50cyB0aGF0
IHdpbGwgZW5zdXJlIGNvbXBhdGlibGUgaW5zdGFudGlhdGlvbiAoaWYgb25lIGV4aXN0cykuCi0J
CQlyZXR1cm4gQ09NUEFUSUJMRTsgCiAJCX0KIAkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCX0K
QEAgLTQ5MzMsNyArNDgxNyw3IEBACiAJICAgdGhhdCBjb3VsZCBpbnN0ZWFkIGJlIGludm9rZWQg
d2l0aCBpZGVudGljYWwgcmVzdWx0cy4gUmV0dXJuIG51bGwgaWYgbm8gY29tcGF0aWJsZSwgdmlz
aWJsZSwgbW9zdCBzcGVjaWZpYyBtZXRob2QKIAkgICBjb3VsZCBiZSBmb3VuZC4gVGhpcyBtZXRo
b2QgaXMgbW9kZWxlZCBhZnRlciBTY29wZS5nZXRDb25zdHJ1Y3RvciBhbmQgU2NvcGUuZ2V0TWV0
aG9kLgogCSAqLwotCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmln
aW5hbEVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52
b2NhdGlvbiBhbGxvY2F0aW9uU2l0ZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRp
Y0ZhY3RvcnkgKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJl
bmNlQmluZGluZyBvcmlnaW5hbEVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRU
eXBlcywgZmluYWwgSW52b2NhdGlvblNpdGUgYWxsb2NhdGlvblNpdGUpIHsKIAkJCiAJCS8vIGFs
bG9jYXRpb25UeXBlIGlzIHRoZSBkaWFtb25kIHR5cGUuIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSBp
cyB0aGUgcmVhbCBlbmNsb3NpbmcgdHlwZSA9PT4gbWF5IGJlIHBhcmFtZXRlcml6ZWQsIHBhcmFt
ZXRlcml6ZWQgd2l0aCBvd24gdHlwZSB2YXJpYWJsZXMsIHJhdywganVzdCBwbGFpbiB0eXBlIG9y
IG51bGwuCiAJCWludCBjbGFzc1R5cGVWYXJpYWJsZXNBcml0eSA9IDA7CkBAIC01MDYwLDcgKzQ5
NDQsNyBAQAogCQlNZXRob2RCaW5kaW5nW10gY29tcGF0aWJsZSA9IG5ldyBNZXRob2RCaW5kaW5n
W3NmaV07CiAJCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQlmb3IgKGludCBpID0gMDsgaSA8
IHNmaTsgaSsrKSB7Ci0JCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9j
YXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKKwkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1l
dGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHN0YXRpY0ZhY3Rvcmllc1tpXSwgYXJndW1l
bnRUeXBlcywgYWxsb2NhdGlvblNpdGUpOwogCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVs
bCkgewogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCWNv
bXBhdGlibGVbY29tcGF0aWJsZUluZGV4KytdID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTUwNjks
MTAgKzQ5NTMsNiBAQAogCiAJCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMCkgewogCQkJcmV0dXJu
IG51bGw7Ci0JCX0KLQkJaWYgKGNvbXBhdGlibGVJbmRleCA9PSAxKSB7Ci0JCQkvLyAxLjg6IEdp
dmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUu
Mik6Ci0JCQljb21wYXRpYmxlWzBdID0gaW5mZXJJbnZvY2F0aW9uVHlwZShhbGxvY2F0aW9uU2l0
ZSwgY29tcGF0aWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CiAJCX0KIAkJcmV0dXJuIGNvbXBhdGli
bGVJbmRleCA9PSAxID8gY29tcGF0aWJsZVswXSA6IG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmco
Y29tcGF0aWJsZSwgY29tcGF0aWJsZUluZGV4LCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0
ZSwgYWxsb2NhdGlvblR5cGUpOwogCX0KQEAgLTUxNDAsMzEgKzUwMjAsNSBAQAogCQkJCWJyZWFr
OwogCQkJfQogCQl9Ci0JfQotCi0JLyoqCi0JICogR2l2ZW4gYSBzZWxlY3RlZCBhcHBsaWNhYmxl
IG1ldGhvZCwgY2hlY2sgaWYgaXQgaGFzIGFuIHVuZmluaXNoZWQgSW5mZXJlbmNlQ29udGV4dDE4
IGFzc29jaWF0ZWQuCi0JICogSWYgc28gcGVyZm9ybSB0aGUgb3V0c3RhbmRpbmcgSW52b2NhdGlv
biBUeXBlIEluZmVyZW5jZSBhbmQgcmV0dXJuIHRoZSBpbXByb3ZlZCBtZXRob2QsCi0JICogb3Ro
ZXJ3aXNlIHJldHVybiB0aGUgYXBwbGljYWJsZSBtZXRob2QgdW5jaGFuZ2VkLgotCSAqLwotCXBy
b3RlY3RlZCBNZXRob2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgYXBwbGljYWJsZSwgVHlwZUJpbmRpbmdbXSBh
cmd1bWVudFR5cGVzKSB7Ci0JCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRp
b24pIHsKLQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBpbnZvY2F0aW9u
U2l0ZTsKLQkJCWlmIChhcHBsaWNhYmxlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBh
cmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBh
cHBsaWNhYmxlOwotCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGludm9jYXRpb24u
Z2V0SW5mZXJlbmNlQ29udGV4dChwYXJhbWV0ZXJpemVkTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4
MTggIT0gbnVsbCAmJiAhaW5mQ3R4MTguaGFzUmVzdWx0Rm9yKGludm9jYXRpb24uaW52b2NhdGlv
blRhcmdldFR5cGUoKSkpIHsKLQkJCQkJcmV0dXJuIGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5
cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgcGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJ
fQotCQkJfSBlbHNlIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50
cyhpbnZvY2F0aW9uLCBhcHBsaWNhYmxlLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQkJCX0KLQkJ
fSBlbHNlIGlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24p
IHsKLQkJCWlmIChhcHBsaWNhYmxlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKQotCQkJCWFwcGxpY2FibGUgPSBhcHBsaWNhYmxlLnNoYWxsb3dPcmlnaW5hbCgp
OwotCQkJaWYgKGFwcGxpY2FibGUudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9W
QVJJQUJMRVMpCi0JCQkJcmV0dXJuIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5j
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChhcHBsaWNhYmxlLCBhcmd1bWVudFR5cGVzLCB0aGlzLCBp
bnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0UpOwotCQl9Ci0JCXJldHVybiBhcHBsaWNhYmxl
OwogCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhv
ZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRp
bmcuamF2YQppbmRleCA5Mzg0OWNkLi4xYzRkNzQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9T
eW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCkBAIC0xNywzMSArMTcsOCBAQAogICov
CiBwdWJsaWMgY2xhc3MgU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcgZXh0ZW5kcyBNZXRo
b2RCaW5kaW5nIHsKIAotCXByaXZhdGUgTWV0aG9kQmluZGluZyBzdGF0aWNGYWN0b3J5Rm9yOwot
CXByaXZhdGUgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7Ci0JcHJpdmF0ZSBSZWZlcmVu
Y2VCaW5kaW5nIGVuY2xvc2luZ1R5cGU7Ci0JCiAJcHVibGljIFN5bnRoZXRpY0ZhY3RvcnlNZXRo
b2RCaW5kaW5nKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9u
bWVudCwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlKSB7CiAJCXN1cGVyKG1ldGhvZC5t
b2RpZmllcnMgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljLCBUeXBlQ29uc3RhbnRzLlNZ
TlRIRVRJQ19TVEFUSUNfRkFDVE9SWSwKIAkJCQludWxsLCBudWxsLCBudWxsLCBtZXRob2QuZGVj
bGFyaW5nQ2xhc3MpOwotCQl0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7Ci0JCXRoaXMu
c3RhdGljRmFjdG9yeUZvciA9IG1ldGhvZDsKLQkJdGhpcy5lbmNsb3NpbmdUeXBlID0gZW5jbG9z
aW5nVHlwZTsKLQl9Ci0JCi0JLyoqIEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0
aGUgKGRlY2xhcmluZyBjbGFzcyBvZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXBy
ZXNlbnRlZCBieSB0aGlzIGZhY3RvcnkgbWV0aG9kLiAqLwotCXB1YmxpYyBQYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZyBhcHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKFR5cGVCaW5kaW5n
W10gdHlwZUFyZ3VtZW50cykgewotCQlSZWZlcmVuY2VCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBl
ID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSh0aGlzLmRlY2xhcmlu
Z0NsYXNzLCB0eXBlQXJndW1lbnRzLAotCQkJCQkJCQkJCQkJCQkJCQkJCQkJCXRoaXMuZW5jbG9z
aW5nVHlwZSk7Ci0JCWZvciAoTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kIDogcGFy
YW1ldGVyaXplZFR5cGUubWV0aG9kcygpKSB7Ci0JCQlpZiAocGFyYW1ldGVyaXplZE1ldGhvZC5v
cmlnaW5hbCgpID09IHRoaXMuc3RhdGljRmFjdG9yeUZvcikKLQkJCQlyZXR1cm4gKFBhcmFtZXRl
cml6ZWRNZXRob2RCaW5kaW5nKSBwYXJhbWV0ZXJpemVkTWV0aG9kOwotCQkJaWYgKHBhcmFtZXRl
cml6ZWRNZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJCU1ldGhv
ZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZylwYXJhbWV0ZXJp
emVkTWV0aG9kKS5jbG9zZXN0TWF0Y2g7Ci0JCQkJaWYgKGNsb3Nlc3RNYXRjaCBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nICYmIGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpID09
IHRoaXMuc3RhdGljRmFjdG9yeUZvcikKLQkJCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluZykgY2xvc2VzdE1hdGNoOwotCQkJfQotCQl9Ci0JCXRocm93IG5ldyBJbGxlZ2FsQXJn
dW1lbnRFeGNlcHRpb24oIlR5cGUgZG9lc24ndCBoYXZlIGl0cyBvd24gbWV0aG9kPyIpOyAvLyRO
T04tTkxTLTEkCiAJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4IGUwZDkwM2QuLjA0NzQz
YTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKQEAgLTE2MjEsNCArMTYyMSw4IEBACiBwdWJsaWMg
dm9pZCBleGl0UmVjdXJzaXZlRnVuY3Rpb24oKSB7CiAJLy8gZW1wdHksIHN1YmNsYXNzZXMgdG8g
b3ZlcnJpZGUKIH0KKworcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsKKwlyZXR1
cm4gZmFsc2U7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0
ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDkzZmMw
OGMuLjFhNzk2ZWUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0xNTAsNyAr
MTUwLDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkNhcHR1cmVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRl
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxW
YXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5Mb29rdXBFbnZpcm9ubWVudDsKQEAgLTM2OTIsNyArMzY5MSw4IEBACiAJCQkJc291
cmNlU3RhcnQsCiAJCQkJc291cmNlRW5kKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVh
c29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9i
bGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGU6CQorCQljYXNl
IFByb2JsZW1SZWFzb25zLkludm9jYXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJ
WE1FKHN0ZXBoYW4pOiBjb25zdHJ1Y3Qgc3VpdGFibGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnLzQwNDY3NSkKIAkJCXByb2JsZW1Db25zdHJ1Y3RvciA9IChQcm9ibGVtTWV0aG9k
QmluZGluZykgdGFyZ2V0Q29uc3RydWN0b3I7CiAJCQlzaG93bkNvbnN0cnVjdG9yID0gcHJvYmxl
bUNvbnN0cnVjdG9yLmNsb3Nlc3RNYXRjaDsKQEAgLTQyMjQsMTYgKzQyMjQsMTMgQEAKIAkJCQko
aW50KSAobWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uID4+PiAzMiksCiAJCQkJKGludCkg
bWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9i
bGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2Fz
ZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGU6CisJ
CWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJ
Ly8gRklYTUUoc3RlcGhhbik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQogCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9k
QmluZGluZykgbWV0aG9kOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQg
PSBwcm9ibGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4
dCAhPSBudWxsICYmIGluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJ
CQkvLyBwcm9ibGVtIHJlbGF0ZXMgdG8gYSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0
aGUgb3V0ZXIgaGFuZGxlIGl0OgotCQkJCWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFk
ZFByb2JsZW1NZXRob2QocHJvYmxlbU1ldGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hv
d25NZXRob2QgPSBwcm9ibGVtTWV0aG9kLmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0
aG9kLnJldHVyblR5cGUgPT0gc2hvd25NZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09N
UEFSSVNPTiQKKwkJCQlyZXR1cm47IC8vIGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVl
cGx5IG5lc3RlZCBjYWxsLCBiZWNhdXNlIHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBj
bG9zZXN0IG1hdGNoIGFuZCB0aGUgb3V0ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50
ZXN0QnVnNDMwMjk2CiAJCQl0aGlzLmhhbmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gs
CiAJCQkJbmV3IFN0cmluZ1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2
YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9D
b2RlU25pcHBldFNjb3BlLmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9D
b2RlU25pcHBldFNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSAr
MSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdApAQCAtMzk2LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkK
IAkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBl
cywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlv
blNpdGUsIFNjb3BlLkZVTExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRp
YmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1l
bnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBu
dWxsKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBz
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBt
ZXRob2RCaW5kaW5nID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1l
dGhvZEJpbmRpbmdbXSBjb21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5n
dGhdOwogCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcg
Y29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFy
Z3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAg
TWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
bWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0
aWJsZU1ldGhvZCAhPSBudWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBj
b21wYXRpYmxlTWV0aG9kOwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2
aXNpYmxlSW5kZXggPT0gMSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRv
IHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9j
YXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJ
cmV0dXJuIHZpc2libGVbMF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1
cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMu
SU5JVCwgY29tcGF0aWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxl
KTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247850</attachid>
            <date>2014-10-13 23:34:00 -0400</date>
            <delta_ts>2014-10-21 02:15:43 -0400</delta_ts>
            <desc>Cumulative proposed patch</desc>
            <filename>FANDG.patch</filename>
            <type>text/plain</type>
            <size>225422</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uMzg5ZjdhYSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTI1MjAsOSArMjU0OSw4IEBACiAgICAgICAgICAgICAi
fVxuIgogICAgICAgICB9KTsKIH0KLXB1YmxpYyB2b2lkIF90ZXN0QnVnNDI4ODExKCkgewotCS8v
IHBlcmhhcHMgZmFpbCBpcyB0aGUgY29ycmVjdCBhbnN3ZXI/IEZJWE1FOiB2YWxpZGF0ZSEKLQly
dW5OZWdhdGl2ZVRlc3QoCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI4ODExKCkgeworCXJ1bkNvbmZv
cm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIk1vcmVDb2xsZWN0b3JzLmphdmEiLAogCQkJ
ImltcG9ydCBqYXZhLnV0aWwuQWJzdHJhY3RMaXN0O1xuIiArIApAQCAtMjU2OSwxOCArMjU5Nyw3
IEBACiAJCQkiICAgIH1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsg
Ci0JCSIxLiBFUlJPUiBpbiBNb3JlQ29sbGVjdG9ycy5qYXZhIChhdCBsaW5lIDE2KVxuIiArIAot
CQkiCXJldHVybiBDb2xsZWN0b3Iub2YoQXJyYXlMaXN0PFQ+OjpuZXcsXG4iICsgCi0JCSIJICAg
ICAgICAgICAgICAgICBeXlxuIiArIAotCQkiVGhlIG1ldGhvZCBvZihBcnJheUxpc3Q8VD46Om5l
dywgTGlzdDxUPjo6YWRkLCAoPG5vIHR5cGU+IGxlZnQsIDxubyB0eXBlPiByaWdodCkgLT4ge30i
ICsgCi0JCSIsIEltbXV0YWJsZUxpc3Q6OmNvcHlPZikgaXMgdW5kZWZpbmVkIGZvciB0aGUgdHlw
ZSBDb2xsZWN0b3JcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdBUk5JTkcgaW4g
TW9yZUNvbGxlY3RvcnMuamF2YSAoYXQgbGluZSAyMylcbiIgKyAKLQkJIglwdWJsaWMgc3RhdGlj
IDxUPiBJbW11dGFibGVMaXN0PFQ+IGNvcHlPZiAoQ29sbGVjdGlvbjxUPiBjKSB7XG4iICsgCi0J
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29weU9mKENvbGxlY3Rpb248VD4pIGZyb20gdGhl
IHR5cGUgTW9yZUNvbGxlY3RvcnMuSW1tdXRhYmxlTGlzdDxUPiBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIpOworCQkiW2EsIGIsIGNdIik7CiB9CiAvLyBhbGwg
ZXhjZXB0aW9ucyBjYW4gYmUgaW5mZXJyZWQgdG8gbWF0Y2gKIHB1YmxpYyB2b2lkIHRlc3RCdWc0
Mjk0MzAoKSB7CkBAIC0yODQzLDYgKzI4NjAsNyBAQAogCQkJIglwdWJsaWMgRFRlc3QoRnVuY3Rp
b248VCwgVD4gZnVuYykgeyB9XG4iICsgCiAJCQkiCVxuIiArIAogCQkJIglwdWJsaWMgRFRlc3Qo
RFRlc3Q8SW50ZWdlcj4gZHRpKSB7fVxuIiArIAorCQkJIglwdWJsaWMgRFRlc3QoKSB7fVxuIiAr
IAogCQkJIglcbiIgKyAKIAkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJn
cykge1xuIiArIAogCQkJIgkJRFRlc3Q8U3RyaW5nPiB0MSA9IG5ldyBEVGVzdDxTdHJpbmc+KG5l
dyBEVGVzdDxJbnRlZ2VyPigpKTtcbiIgKyAKQEAgLTI4NTAsMTYgKzI4NjgsMTEgQEAKIAkJCSJ9
XG4iCiAJCX0sCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAorCQkiMS4gRVJST1IgaW4gRFRlc3QuamF2YSAoYXQgbGluZSAx
MSlcbiIgKyAKIAkJIglEVGVzdDxTdHJpbmc+IHQxID0gbmV3IERUZXN0PFN0cmluZz4obmV3IERU
ZXN0PEludGVnZXI+KCkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5c
biIgKyAKIAkJIlJlZHVuZGFudCBzcGVjaWZpY2F0aW9uIG9mIHR5cGUgYXJndW1lbnRzIDxTdHJp
bmc+XG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAotCQkiCURUZXN0PFN0cmluZz4gdDEgPSBuZXcgRFRlc3Q8U3Ry
aW5nPihuZXcgRFRlc3Q8SW50ZWdlcj4oKSk7XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgY29u
c3RydWN0b3IgRFRlc3Q8SW50ZWdlcj4oKSBpcyB1bmRlZmluZWRcbiIgKwotCQkiLS0tLS0tLS0t
LVxuIiwKKwkJIi0tLS0tLS0tLS1cbiIsIAogCQludWxsLCB0cnVlLCBjdXN0b21PcHRpb25zKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzAyOTYoKSB7CkBAIC0zMDQyLDE0ICszMDU1LDkgQEAK
IAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEu
IEVSUk9SIGluIENvbGxlY3RvcnNNYXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCi0JCSIJcCAt
PiBwLmxocy5zdHJlYW0oKS5tYXAocDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4iICsgCi0JCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhl
IHR5cGUgU3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KENvbGxlY3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMy1v
ZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsK
KwkJIiIpOwogfQotcHVibGljIHZvaWQgX3Rlc3RCdWc0MzI2MjYoKSB7CitwdWJsaWMgdm9pZCB0
ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJ
IlN0cmVhbUludGVyZmFjZTIuamF2YSIsCkBAIC0zMTEyLDYgKzMxMjAsMjkgQEAKIAkJCSIJc3Rh
dGljIDxUPiBBcnJheUxpc3Q8VD4gY29tYmluZWQoQXJyYXlMaXN0PFQ+IGxlZnQsIEFycmF5TGlz
dDxUPiByaWdodCkge1xuIiArIAogCQkJIgkJbGVmdC5hZGRBbGwocmlnaHQpO1xuIiArIAogCQkJ
IgkJcmV0dXJuIGxlZnQ7XG4iICsgCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9Citw
dWJsaWMgdm9pZCB0ZXN0QnVnNDMyNjI2X3JlZHVjZWQoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5
TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJImltcG9y
dCBqYXZhLnV0aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5j
dGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKwor
CQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyA8VCwgSz4gTWFwPEssIEFycmF5TGlzdDxU
Pj4gdGVybWluYWxBc01hcFRvTGlzdChGdW5jdGlvbjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPiBj
bGFzc2lmaWVyKSAge1xuIiArCisJCQkiCQlyZXR1cm4gdGVybWluYWxBc0NvbGxlY3RlZChDb2xs
ZWN0b3JzLmdyb3VwaW5nQnkoXG4iICsKKwkJCSIJCQkgIGNsYXNzaWZpZXIsXG4iICsKKwkJCSIJ
CQkgICgpIC0+IG5ldyBIYXNoTWFwPD4oKSxcbiIgKworCQkJIgkJCSAgKENvbGxlY3RvcjxULEFy
cmF5TGlzdDxUPixBcnJheUxpc3Q8VD4+KSBudWxsKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQki
CXN0YXRpYyA8VCwgTT4gTSB0ZXJtaW5hbEFzQ29sbGVjdGVkKENvbGxlY3RvcjxULCA/LCBNPiBj
b2xsZWN0b3IpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKIAkJCSIJfVxuIiArCiAJ
CQkifVxuIgogCQl9KTsKQEAgLTMzMjksMTQgKzMzNjAsMTQgQEAKIAkJCSJ9XG4iCiAJCX0sCiAJ
CSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2
YSAoYXQgbGluZSAyMilcbiIgKyAKLQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0J
CSIJICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3Vw
ZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+
LGNhcHR1cmUjMS1vZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCisJCSIxLiBX
QVJOSU5HIGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCSIJ
aW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKKwkJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IGphdmEudXRpbC5m
dW5jdGlvbi5GdW5jdGlvbiBpcyBuZXZlciB1c2VkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJ
CQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCkBAIC0zMzc4LDE3ICszNDA5LDcgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xs
ZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRW
YWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhl
IHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2Jq
ZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFz
cy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAo
cGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkp
O1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZh
bHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3Ig
dGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCkBAIC00
NDA0LDQgKzQ0MjUsMTk5IEBACiAJCQkifVxuIgogCQl9KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBu
ZXN0ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1
bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5QcmVk
aWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgaW50ZXJmYWNlIElMaXN0RW50cnkg
e1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRSZWNvcmRzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIglwcm90
ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJsZVJlY29yZCB7XG4iICsKKwkJCSIJCXB1
YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsgfVxuIiArCisJCQkiCX1cbiIgKworCQkJ
Iglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJlY29yZCB7fVxuIiArCisJCQkiCXB1Ymxp
YyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoRWNsaXBzZUFuZEphdmFjKCkgXG4i
ICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3Ry
ZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiB7XG4iICsK
KwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNvcmQ+IHJlc3VsdDEgPSBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJCXJldHVybiByZXN1bHQxO1xuIiAr
CisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29sbGVjdG9ycy50
b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7CQlcbiIgKwor
CQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVz
V2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVy
biB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQkiCQkJcmV0dXJu
IHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJIgkJCQlyZXR1cm4gZW50cnkudmlzaXRS
ZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJCQkJCQkuZmls
dGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1tdXRhYmxlUmVj
b3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9MaXN0KCkg
KVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExpc3Q6OnN0cmVh
bSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApICk7
XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVibGljIExpc3Q8
SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2UyKCkgXG4iICsK
KwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFt
IC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29s
bGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7
CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4g
Y29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygpIFxuIiArCisJCQkiCXtcbiIgKworCQkJ
IgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiBzdHJlYW0ubWFwKCBl
bnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJc
biIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJ
CQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCgg
Q29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSlcbiIgKworCQkJIgkJCS5mbGF0
TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9D
b2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIgKworCQkJIgkJKTsJCVxuIiArCisJCQki
CX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJlZGljYXRlPFJlY29yZD4gc29tZVByZWRp
Y2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29yZCAtPiB0cnVlO1xuIiArCisJCQkiCX0J
CVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRFbnRyaWVzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xuIiArCisJCQkiCQlyZXR1cm4gZnVuYy5h
cHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5PigpLnN0cmVhbSgpICk7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzODUyLCBbMS44XVtjb21waWxlcl0gSmF2YWMgcmVq
ZWN0cyB0eXBlIGluZmVyZW5jZSByZXN1bHRzIHRoYXQgRUNKIGFjY2VwdHMKK3B1YmxpYyB2b2lk
IHRlc3Q0MzM4NTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5PcHRpb25hbDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4odGVzdChTdHJlYW0ub2YoU3RyZWFtLm9mKFwiM1wiKSkpKTtcbiIg
KworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QyKFN0cmVhbS5vZihTdHJlYW0ub2YoXCIx
XCIpKS5za2lwKDEpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0MzEoU3Ry
ZWFtLm9mKFN0cmVhbS5vZihcIjJcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PiB0ZXN0KFN0cmVhbTxTdHJlYW08U3Ry
aW5nPj4gczMxKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMzEubWFwKHMyIC0+IHMyLm1hcChzMSAt
PiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9iamVjdCB0ZXN0MihTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMzKSB7XG4iICsK
KwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiAr
CisJCQkiCQkgIFguY2xhc3MpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgU3RyZWFt
PE9iamVjdD4gdGVzdDMxKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMpIHtcbiIgKworCQkJIgkJ
cmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5m
aW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTEpXG4iICsgCisJIglyZXR1cm4gczMxLm1hcChzMiAtPiBzMi5tYXAoczEg
LT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55KCk7XG4iICsgCisJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPcHRpb25hbDxTdHJl
YW08SW50ZWdlcj4+IHRvIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PlxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmxh
dE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiArIAorCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1l
dGhvZCBvckVsc2UoSW50ZWdlcikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8SW50ZWdlcj4gaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPFg+KVxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmlu
ZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9iamVjdCgpKSk7XG4iICsgCisJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1ldGhvZCBvckVsc2UoU3RyZWFtPEludGVnZXI+KSBpbiB0
aGUgdHlwZSBPcHRpb25hbDxTdHJlYW08SW50ZWdlcj4+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0
aGUgYXJndW1lbnRzIChTdHJlYW08T2JqZWN0PilcbiIgKyAKKwkiLS0tLS0tLS0tLVxuIik7Cit9
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQyOTE2
LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBlIEluZmVyZW5jZSBpcyBicm9rZW4gZm9yIENvbXBsZXRh
YmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2KCkgeworCXRo
aXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJp
bXBvcnQgc3RhdGljIGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlLmNvbXBs
ZXRlZEZ1dHVyZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgQ29tcGxldGFibGVG
dXR1cmU8SW50ZWdlcj4gY2YoaW50IHZhbHVlKSB7XG4iICsKKwkJCSIJCXJldHVybiBjb21wbGV0
ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCWNmKDEpLnRoZW5Db21w
b3NlKCh4SW50KSAtPiBjZigyKS50aGVuQXBwbHkoKHpJbnQpIC0+IEFycmF5cy5hc0xpc3QoeElu
dCwgekludCkpKVxuIiArCisJCQkiCQkudGhlbkFjY2VwdCgoaW50cykgLT4ge1xuIiArCisJCQki
CQkJLyogISEhISBpbnRzIGlzIGluY29ycmVjdGx5IGluZmVycmVkIHRvIGJlIGFuIE9iamVjdCwg
YnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4gKi9cbiIgKworCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bihpbnRzLmdldCgwKSArIGludHMuZ2V0KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7XG4iICsKKwkJ
CSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIjMiKTsKK30KKy8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDI3NjksIFsx
LjhdW2NvbXBpbGVyXSBJbnZhbGlkIHR5cGUgaW5mZXJlbmNlIHVzaW5nIFN0cmVhbSAgCitwdWJs
aWMgdm9pZCB0ZXN0NDQyNzY5KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5QYXRoO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTWFwO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVh
bS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xu
IiArCisJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJIgkJTWFwPE9iamVjdCwgSW50ZWdlcj4gYWxsb2NhdGVkID0gbmV3IEhhc2hN
YXA8PigpO1xuIiArCisJCQkiCQkgICBBcnJheXMuYXNMaXN0KFwiYVwiLCBcImJcIiwgXCJjXCIs
IFwiZFwiLCBcImVcIikgLy8gTGlzdDxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5zdHJl
YW0oKSAvLyBTdHJlYW08U3RyaW5nPlxuIiArCisJCQkiCSAgICAgICAgICAubWFwKFBhdGhzOjpn
ZXQpIC8vIFN0cmVhbTxQYXRoPlxuIiArCisJCQkiCSAgICAgICAgICAuZmxhdE1hcChwYXRoIC0+
IGFsbG9jYXRlZC5rZXlTZXQoKSAvLyBTZXQ8T2JqZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08T2JqZWN0PlxuIiAr
CisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZ3JvdXAgLT4g
UGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVjdCxQYXRoPiovKSAvLyBTdHJlYW08UGFp
cjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICApIC8vIFN0cmVhbTxPYmplY3Q+
IFtGQUlMXVxuIiArCisJCQkiCSAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgp
KSAvLyBMaXN0PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgLmZvckVhY2goaXRlbSAtPiBT
eXN0ZW0ub3V0LnByaW50bG4oaXRlbS5nZXRLZXkoKSArIFwiOiBcIiArIGl0ZW0uZ2V0VmFsdWUo
KSkpOyAvLyBDb25zdW1lcjw/IHN1cGVyIE9iamVjdD5cbiIgKworCQkJIgkgICAgLy8gd2l0aCBl
eHBsaWNpdCB0eXBlXG4iICsKKwkJCSIJICAgIEFycmF5cy5hc0xpc3QoXCJhXCIsIFwiYlwiLCBc
ImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkgICAgICAgICAg
LnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5tYXAoUGF0
aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5mbGF0TWFwKHBh
dGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxPYmplY3Q+
XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLjxQYWlyPE9i
amVjdCxQYXRoPj5tYXAoZ3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVj
dCxQYXRoPiovKSAvLyBTdHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAg
ICAgICApIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJICAgICAgICAg
IC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpIC8vIExpc3Q8UGFpcjxPYmplY3QsIFBhdGg+
PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChpdGVtIC0+IFN5c3RlbS5vdXQucHJpbnRs
bihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5nZXRWYWx1ZSgpKSk7IC8vIENvbnN1bWVy
PD8gc3VwZXIgUGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIg
KworCQkJImFic3RyYWN0IGNsYXNzIFBhaXI8TCwgUj4gaW1wbGVtZW50cyBNYXAuRW50cnk8TCwg
Uj4sIENvbXBhcmFibGU8UGFpcjxMLCBSPj4sIFNlcmlhbGl6YWJsZSB7XG4iICsKKwkJCSIgICAg
cHVibGljIHN0YXRpYyA8TCwgUj4gUGFpcjxMLCBSPiBvZihmaW5hbCBMIGxlZnQsIGZpbmFsIFIg
cmlnaHQpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxu
IiArCisJCQkiICAgIHB1YmxpYyBmaW5hbCBMIGdldEtleSgpIHtcbiIgKworCQkJIiAgICAgICAg
cmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBSIGdldFZh
bHVlKCkge1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgICB9XG4i
ICsKKwkJCSJ9XG4iCisJCX0sCisJCSIiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYjA1
OTg1Yi4uZDM5MDU3MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTQxNjMsNyArNDE2Myw3IEBACiAJ
CSJPSyIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQzMjY4MiwgWzEuOF1bY29tcGlsZXJdIFR5cGUgbWlzbWF0Y2ggZXJyb3Igd2l0aCBsYW1i
ZGEgZXhwcmVzc2lvbgotcHVibGljIHZvaWQgX3Rlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9u
IHsKK3B1YmxpYyB2b2lkIHRlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBAIC00MTgxLDcg
KzQxODEsNyBAQAogCQkJIgl9XG4iICsKIAkJCSJ9XG4iCiAJCX0sCi0JCSJPSyIpOworCQkidHJ1
ZSIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTQzMjUyMCwgY29tcGlsZXIgImR1cGxpY2F0ZSBtZXRob2QiIGJ1ZyB3aXRoIGxhbWRhcyBhbmQg
Z2VuZXJpYyBpbnRlcmZhY2VzIAogcHVibGljIHZvaWQgdGVzdDQzMjUyMCgpIHRocm93cyBFeGNl
cHRpb24gewpAQCAtNDI5MCwxMyArNDI5MCwxOCBAQAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsgCiAJCQkiCXBlcnNvbnMuc29y
dChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxzTGFzdChQZXJzb246OjxSdW5u
YWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAotCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5cbiIgKyAKLQkJCSJUaGUgbWV0aG9kIG51bGxz
TGFzdChDb21wYXJhdG9yPD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFi
bGUpXG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAor
CQkJIlRoZSBtZXRob2QgY29tcGFyaW5nKEZ1bmN0aW9uPD8gc3VwZXIgVCw/IGV4dGVuZHMgVT4p
IGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKENvbXBhcmF0b3I8T2JqZWN0PilcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQki
Mi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIxKVxuIiArIAogCQkJIglwZXJzb25zLnNvcnQo
Q29tcGFyYXRvci5jb21wYXJpbmcoQ29tcGFyYXRvci5udWxsc0xhc3QoUGVyc29uOjo8UnVubmFi
bGU+aXNSdW5uYWJsZSkpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb21wYXJhdG9y
PE9iamVjdD4gdG8gRnVuY3Rpb248PyBzdXBlciBULD8gZXh0ZW5kcyBVPlxuIiArIAorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CisJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpAQCAt
NDg4Miw2ICs0ODg3LDg2IEBACiAJCX0sCiAJCSIiKTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MDUsIFsxLjhdIEluY29ycmVjdCBlcnJv
ciAiVGhlIHR5cGUgQXJyYXlMaXN0PFQ+IGRvZXMgbm90IGRlZmluZSBhZGQoQXJyYXlMaXN0PFQ+
LCBPYmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlIgorcHVibGljIHZvaWQgdGVzdDQzMjYw
NSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2
YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuIiArCisJCQkiaW1wb3J0IGph
dmEudXRpbC5IYXNoTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5j
dGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uU3VwcGxpZXI7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQg
amF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5z
dHJlYW0uU3RyZWFtO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkic3RhdGlj
IDxULCBFIGV4dGVuZHMgRXhjZXB0aW9uLCBLLCBMLCBNPiBNIHRlcm1pbmFsQXNNYXBUb0xpc3Qo
XG4iICsKKwkJCSIgICAgRnVuY3Rpb248PyBzdXBlciBULCA/IGV4dGVuZHMgSz4gY2xhc3NpZmll
cixcbiIgKworCQkJIiAgICBGdW5jdGlvbjxIYXNoTWFwPEssIEw+LCBNPiBpbnRvTWFwLFxuIiAr
CisJCQkiICAgIEZ1bmN0aW9uPEFycmF5TGlzdDxUPiwgTD4gaW50b0xpc3QsXG4iICsKKwkJCSIg
ICAgU3VwcGxpZXI8U3RyZWFtPFQ+PiBzdXBwbGllcixcbiIgKworCQkJIiAgICBDbGFzczxFPiBj
bGFzc09mRSkgdGhyb3dzIEUge1xuIiArCisJCQkiICAJcmV0dXJuIHRlcm1pbmFsQXNDb2xsZWN0
ZWQoXG4iICsKKwkJCSIgIAkgIGNsYXNzT2ZFLFxuIiArCisJCQkiICAJICBDb2xsZWN0b3JzLmNv
bGxlY3RpbmdBbmRUaGVuKFxuIiArCisJCQkiICAJICAgIENvbGxlY3RvcnMuZ3JvdXBpbmdCeShc
biIgKworCQkJIiAgCSAgICAgIGNsYXNzaWZpZXIsXG4iICsKKwkJCSIgIAkgICAgICBIYXNoTWFw
PEssIEw+OjpuZXcsXG4iICsKKwkJCSIgIAkgICAgICBDb2xsZWN0b3JzLmNvbGxlY3RpbmdBbmRU
aGVuKFxuIiArCisJCQkiICAJICAgICAgCS8vIFRoZSB0eXBlIEFycmF5TGlzdDxUPiBkb2VzIG5v
dCBkZWZpbmUgYWRkKEFycmF5TGlzdDxUPiwgT2JqZWN0KSB0aGF0IGlzIGFwcGxpY2FibGUgaGVy
ZVxuIiArCisJCQkiICAJICAgICAgCS8vIGZyb20gQXJyYXlMaXN0PFQ+OjphZGQ6XG4iICsKKwkJ
CSIgIAkgICAgICAgIENvbGxlY3Rvci5vZihBcnJheUxpc3Q8VD46Om5ldywgQXJyYXlMaXN0PFQ+
OjphZGQsIChBcnJheUxpc3Q8VD4gbGVmdCwgQXJyYXlMaXN0PFQ+IHJpZ2h0KSAtPiB7IFxuIiAr
CisJCQkiICAJCSAgICAgICAgbGVmdC5hZGRBbGwocmlnaHQpO1xuIiArCisJCQkiICAJCSAgICAg
ICAgcmV0dXJuIGxlZnQ7XG4iICsKKwkJCSIgIAkgICAgICAgIH0pLFxuIiArCisJCQkiICAJICAg
ICAgICBpbnRvTGlzdCkpLFxuIiArCisJCQkiICAJICAgIGludG9NYXApLFxuIiArCisJCQkiICAJ
ICBzdXBwbGllcik7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIglzdGF0aWMgPEUgZXh0ZW5kcyBF
eGNlcHRpb24sIFQsIE0+IE0gdGVybWluYWxBc0NvbGxlY3RlZChcbiIgKworCQkJIiAgICBDbGFz
czxFPiBjbGFzczEsXG4iICsKKwkJCSIgICAgQ29sbGVjdG9yPFQsID8sIE0+IGNvbGxlY3Rvcixc
biIgKworCQkJIiAgICBTdXBwbGllcjxTdHJlYW08VD4+IHN1cHBsaWVyKSB0aHJvd3MgRSB7XG4i
ICsKKwkJCSIgIAl0cnkoU3RyZWFtPFQ+IHMgPSBzdXBwbGllci5nZXQoKSkge1xuIiArCisJCQki
ICAJCXJldHVybiBzLmNvbGxlY3QoY29sbGVjdG9yKTtcbiIgKworCQkJIiAgCX0gY2F0Y2goUnVu
dGltZUV4Y2VwdGlvbiBlKSB7XG4iICsKKwkJCSIgIAkJdGhyb3cgdW53cmFwQ2F1c2UoY2xhc3Mx
LCBlKTtcbiIgKworCQkJIiAgCX1cbiIgKworCQkJIiAgfVxuIiArCisJCQkiCXN0YXRpYyA8RSBl
eHRlbmRzIEV4Y2VwdGlvbj4gRSB1bndyYXBDYXVzZShDbGFzczxFPiBjbGFzc09mRSwgUnVudGlt
ZUV4Y2VwdGlvbiBlKSB0aHJvd3MgRSB7XG4iICsKKwkJCSIJCVRocm93YWJsZSBjYXVzZSA9IGUu
Z2V0Q2F1c2UoKTtcbiIgKworCQkJIgkJaWYoY2xhc3NPZkUuaXNJbnN0YW5jZShjYXVzZSkgPT0g
ZmFsc2UpIHtcbiIgKworCQkJIgkJCXRocm93IGU7XG4iICsKKwkJCSIJCX1cbiIgKworCQkJIgkJ
dGhyb3cgY2xhc3NPZkUuY2FzdChjYXVzZSk7XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJ9XG4iCisJ
fSwKKwkiIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9NDMyNjA1LCBbMS44XSBJbmNvcnJlY3QgZXJyb3IgIlRoZSB0eXBlIEFycmF5TGlzdDxU
PiBkb2VzIG5vdCBkZWZpbmUgYWRkKEFycmF5TGlzdDxUPiwgT2JqZWN0KSB0aGF0IGlzIGFwcGxp
Y2FibGUgaGVyZSIKK3B1YmxpYyB2b2lkIHRlc3RyZWR1Y2VkNDMyNjA1KCkgeworCXRoaXMucnVu
Q29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0
IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7
XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yO1xuIiArCisJCQkiaW1wb3J0IGphdmEu
dXRpbC5zdHJlYW0uQ29sbGVjdG9ycztcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIiAgICBzdGF0aWMgPFQsIEssIEwsIE0+IHZvaWQgZm9vKCkge1xuIiArCisJCQkiCUNvbGxl
Y3RvcjxULCA/LCBNPiBjYXQgPSBcbiIgKworCQkJIiAgICAgICAgICAgIENvbGxlY3RvcnMuY29s
bGVjdGluZ0FuZFRoZW4oXG4iICsKKwkJCSIJCUNvbGxlY3RvcnMuZ3JvdXBpbmdCeSgoRnVuY3Rp
b248PyBzdXBlciBULCA/IGV4dGVuZHMgSz4pIG51bGwsIFxuIiArCisJCQkiCQkJCUhhc2hNYXA8
SywgTD46Om5ldywgXG4iICsKKwkJCSIJCQkJKENvbGxlY3RvcjxULCBBcnJheUxpc3Q8VD4sIEw+
KSBudWxsKSwgXG4iICsKKwkJCSIJCQkJKEZ1bmN0aW9uPEhhc2hNYXA8SywgTD4sIE0+KSBudWxs
KTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiIik7Cit9CiBwdWJsaWMgc3Rh
dGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNs
YXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRp
dmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzUwMTEwOS4uZjMw
ZWJlMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVM
YW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC05MTE4LDExICs5MTE4
LDEyIEBACiAJCQkiCX0JXG4iICsKIAkJCSJ9XG4iCiAJCX0sCisJCS8vIE5vdGU6IG5ldyBtZXNz
YWdlIGFsaWducyBiZXR0ZXIgd2l0aCBqYXZhYyA4dTIwLgogCQkiLS0tLS0tLS0tLVxuIiArIAog
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJRnVuY3Rpb248Q0w8
SW50ZWdlcj4sIFN0cmluZz4gdjUgPSBDTDo6bWV0aG9kMTtcbiIgKyAKIAkJIgkgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdHlwZSBD
TCBkb2VzIG5vdCBkZWZpbmUgbWV0aG9kMShDTDxJbnRlZ2VyPikgdGhhdCBpcyBhcHBsaWNhYmxl
IGhlcmVcbiIgKyAKKwkJIkNhbm5vdCBtYWtlIGEgc3RhdGljIHJlZmVyZW5jZSB0byB0aGUgbm9u
LXN0YXRpYyBtZXRob2QgbWV0aG9kMShDTCkgZnJvbSB0aGUgdHlwZSBDTFxuIiArIAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJ
CSIJdjUgPSB0IC0+IHQubWV0aG9kMSgpOwlcbiIgKyAKQEAgLTk2NDEsNyArOTY0Miw3IEBACiAJ
Ii0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQ0MjQ0NiwgWzEuOF1bY29tcGlsZXJdIGNvbXBpbGVyIHVuYWJsZSB0byBp
bmZlciBsYW1iZGEncyBnZW5lcmljIGFyZ3VtZW50IHR5cGVzCi1wdWJsaWMgdm9pZCBfdGVzdDQ0
MjQ0NigpIHsKK3B1YmxpYyB2b2lkIHRlc3Q0NDI0NDYoKSB7CiAJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwgCkBAIC05NzA3LDYgKzk3MDgsNDIg
QEAKIAl9LAogCSIiKTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD00Mzc0NDQjYzM2LCAgTlBFIGluIGJyb2tlbiBjb2RlCitwdWJsaWMgdm9pZCB0
ZXN0NDM3NDQ0KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10gewor
CQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0O1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0u
Q29sbGVjdG9ycztcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCUxpc3Q8UGVyc29u
PiByb3N0ZXIgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKworCQkJIiAgICAgICAgTWFwPFN0cmlu
ZywgUGVyc29uPiBtYXAgPSBcbiIgKworCQkJIiAgICAgICAgICAgIHJvc3RlclxuIiArCisJCQki
ICAgICAgICAgICAgICAgIC5zdHJlYW0oKVxuIiArCisJCQkiICAgICAgICAgICAgICAgIC5jb2xs
ZWN0KFxuIiArCisJCQkiICAgICAgICAgICAgICAgICAgICBDb2xsZWN0b3JzLnRvTWFwKFxuIiAr
CisJCQkiICAgICAgICAgICAgICAgICAgICAgICAgUGVyc29uOjpnZXRMYXN0LFxuIiArCisJCQki
ICAgICAgICAgICAgICAgICAgICAgICAgRnVuY3Rpb24uaWRlbnRpdHkoKSBcbiIgKworCQkJIiAg
ICAgICAgICAgICAgICAgICAgKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiArCisJCQki
Y2xhc3MgUGVyc29uIHtcbiIgKworCQkJIn1cbiIgCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAor
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkiCU1hcDxTdHJpbmcsIFBl
cnNvbj4gbWFwID0gXG4iICsgCisJIgleXl5cbiIgKyAKKwkiTWFwIGNhbm5vdCBiZSByZXNvbHZl
ZCB0byBhIHR5cGVcbiIgKyAKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIyLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTMpXG4iICsgCisJIglGdW5jdGlvbi5pZGVudGl0eSgpIFxuIiArIAorCSIJ
Xl5eXl5eXl5cbiIgKyAKKwkiRnVuY3Rpb24gY2Fubm90IGJlIHJlc29sdmVkXG4iICsgCisJIi0t
LS0tLS0tLS1cbiIpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0
dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCmluZGV4IDZiMmJmMTMuLjM2MTQwZTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKQEAgLTY3NDAs
NiArNjc0MCw3IEBACiAJCQkifVxuIiArCiAJCQkifVxuIiwKIAkJfSwKKwkJLy8gTm90ZTogd2Ug
dXNlZCB0byBlbWl0IGEgZHVwbGljYXRlIG1lc3NhZ2Ugb2YgMi4gRml4ZWQuCiAJCSItLS0tLS0t
LS0tXG4iICsgCiAJCSIxLiBFUlJPUiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxu
IiArIAogCQkiCWZpbHRlcjIubWFwKHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHAp
LCBwLT5pZGVGaWxlcy5nZXQocCkpKTtcbiIgKyAKQEAgLTY3NDcsMTEgKzY3NDgsNiBAQAogCQki
VGhlIGNvbnN0cnVjdG9yIFBhaXI8UGF0aCxPYmplY3Q+KFBhdGgsICg8bm8gdHlwZT4gcCkgLT4g
e30pIGlzIHVuZGVmaW5lZFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMi4gRVJST1Ig
aW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKLQkJIglmaWx0ZXIyLm1hcChw
IC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7
XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMg
ZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjMuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkp
XG4iICsgCiAJCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQo
cCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJ
IlRoZSB0YXJnZXQgdHlwZSBvZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1bmN0aW9uYWwg
aW50ZXJmYWNlXG4iICsgCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQVNUTm9kZS5qYXZhCmluZGV4IGVkMjA0YjUuLjRmMWFjZWEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBA
IC02MCwxMCArNjAsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlBhY2thZ2VCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qb2x5VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1SZWFzb25zOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVmZXJlbmNlQmlu
ZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNj
b3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU291
cmNlVHlwZUJpbmRpbmc7CkBAIC02NTAsMTIwICs2NDcsNDEgQEAKIAkvKioKIAkgKiBBZnRlciBt
ZXRob2QgbG9va3VwIGhhcyBwcm9kdWNlZCAnbWV0aG9kQmluZGluZycgYnV0IHdoZW4gcG9seSBl
eHByZXNzaW9ucyBoYXZlIGJlZW4gc2VlbiBhcyBhcmd1bWVudHMsCiAJICogaW5zcGVjdCB0aGUg
YXJndW1lbnRzIHRvIHRyaWdnZXIgYW5vdGhlciByb3VuZCBvZiByZXNvbHZpbmcgd2l0aCBpbXBy
b3ZlZCB0YXJnZXQgdHlwZXMgZnJvbSB0aGUgbWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAqIElmIHRo
aXMgcmVzb2x2aW5nIHByb2R1Y2VzIGJldHRlciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50cywgdXBk
YXRlIHRoZSAnYXJndW1lbnRUeXBlcycgYXJyYXkgaW4tcGxhY2UgYXMgYW4KLQkgKiBpbnRlbmRl
ZCBzaWRlIGVmZmVjdCB0aGF0IHdpbGwgZmVlZCBiZXR0ZXIgdHlwZSBpbmZvcm1hdGlvbiBpbiBj
aGVja0ludm9jYXRpb25Bcmd1bWVudHMoKSBhbmQgb3RoZXJzLgogCSAqIEBwYXJhbSBpbnZvY2F0
aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJlaW5nIHJlc29sdmVkCi0JICogQHBh
cmFtIG1ldGhvZEJpbmRpbmcgdGhlIG1ldGhvZCBwcm9kdWNlZCBieSBsb29rdXAgKHBvc3NpYmx5
IGludm9sdmluZyB0eXBlIGluZmVyZW5jZSkuCi0JICogQHBhcmFtIGFyZ3VtZW50VHlwZXMgdGhl
IGFyZ3VtZW50IHR5cGVzIGFzIGNvbGxlY3RlZCBmcm9tIGZpcnN0IHJlc29sdmluZyB0aGUgaW52
b2NhdGlvbiBhcmd1bWVudHMgYW5kIGFzIHVzZWQgZm9yCi0JICogCXRoZSBtZXRob2QgbG9va3Vw
LgotCSAqIEBwYXJhbSBzY29wZSBzY29wZSBmb3IgZXJyb3IgcmVwb3J0aW5nCisJICogQHBhcmFt
IG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5n
IHR5cGUgaW5mZXJlbmNlKS4KKwkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUgYXJndW1lbnQg
dHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFy
Z3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhlIG1ldGhvZCBsb29rdXAuCisJICogQHBhcmFtIHNj
b3BlIHNjb3BlIGZvciByZXNvbHV0aW9uLgogCSAqLwotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RC
aW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgU2NvcGUg
c2NvcGUpIHsKLQkJaWYgKCFpbnZvY2F0aW9uLmlubmVyc05lZWRVcGRhdGUoKSkKKwlwdWJsaWMg
c3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24gaW52
b2NhdGlvbiwgTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBl
cywgQmxvY2tTY29wZSBzY29wZSkgeworCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1ldGhvZCA9
IG1ldGhvZC5pc1ZhbGlkQmluZGluZygpID8gbWV0aG9kIDogbWV0aG9kIGluc3RhbmNlb2YgUHJv
YmxlbU1ldGhvZEJpbmRpbmcgPyAoKFByb2JsZW1NZXRob2RCaW5kaW5nKSBtZXRob2QpLmNsb3Nl
c3RNYXRjaCA6IG51bGw7CisJCWlmIChjYW5kaWRhdGVNZXRob2QgPT0gbnVsbCkKIAkJCXJldHVy
bjsKLQkJaW50IHByb2JsZW1SZWFzb24gPSAwOwotCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1l
dGhvZDsKLQkJaWYgKG1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJY2FuZGlk
YXRlTWV0aG9kID0gbWV0aG9kQmluZGluZzsKLQkJfSBlbHNlIGlmIChtZXRob2RCaW5kaW5nIGlu
c3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCXByb2JsZW1SZWFzb24gPSBtZXRo
b2RCaW5kaW5nLnByb2JsZW1JZCgpOwotCQkJY2FuZGlkYXRlTWV0aG9kID0gKChQcm9ibGVtTWV0
aG9kQmluZGluZykgbWV0aG9kQmluZGluZykuY2xvc2VzdE1hdGNoOwotCQl9IGVsc2UgewotCQkJ
Y2FuZGlkYXRlTWV0aG9kID0gbnVsbDsKLQkJfQotCQlpZiAoY2FuZGlkYXRlTWV0aG9kICE9IG51
bGwpIHsKLQkJCWJvb2xlYW4gdmFyaWFibGVBcml0eSA9IGNhbmRpZGF0ZU1ldGhvZC5pc1ZhcmFy
Z3MoKTsKLQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBudWxsOwotCQkJaWYgKGNhbmRp
ZGF0ZU1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB7Ci0JCQkJ
aW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0
aG9kQmluZGluZykgY2FuZGlkYXRlTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwpIHsK
LQkJCQkJaWYgKGluZkN0eC5zdGVwQ29tcGxldGVkICE9IEluZmVyZW5jZUNvbnRleHQxOC5UWVBF
X0lORkVSUkVEKSB7Ci0JCQkJCQkvLyBvbmx5IHdvcmsgaW4gdGhlIGV4YWN0IHN0YXRlIG9mIFRZ
UEVfSU5GRVJSRUQKLQkJCQkJCS8vIC0gYmVsb3cgd2UncmUgbm90IHlldCByZWFkeQotCQkJCQkJ
Ly8gLSBhYm92ZSB3ZSdyZSBhbHJlYWR5IGRvbmUtZG9uZQotCQkJCQkJcmV0dXJuOwotCQkJCQl9
Ci0JCQkJCXZhcmlhYmxlQXJpdHkgJj0gaW5mQ3R4LmlzVmFyQXJncygpOyAvLyBUT0RPOiBpZiBu
byBpbmZDdHggaXMgYXZhaWxhYmxlLCBkbyB3ZSBoYXZlIHRvIHJlLWNoZWNrIGlmIHRoaXMgaXMg
YSB2YXJhcmdzIGludm9jYXRpb24/Ci0JCQkJfQotCQkJfSBlbHNlIGlmIChpbnZvY2F0aW9uIGlu
c3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQlpZiAoKChBbGxvY2F0aW9uRXhw
cmVzc2lvbilpbnZvY2F0aW9uKS5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkKLQkJ
CQkJcmV0dXJuOyAvLyBub3QgeWV0IHJlYWR5Ci0JCQl9Ci0JCQkKLQkJCWZpbmFsIFR5cGVCaW5k
aW5nW10gcGFyYW1ldGVycyA9IGNhbmRpZGF0ZU1ldGhvZC5wYXJhbWV0ZXJzOwotCQkJRXhwcmVz
c2lvbltdIGlubmVyQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJCUV4cHJl
c3Npb24gW10gYXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7Ci0JCQlpZiAoaW5mQ3R4ID09IG51
bGwgJiYgdmFyaWFibGVBcml0eSAmJiBhcmd1bWVudHMgIT0gbnVsbCAmJiBwYXJhbWV0ZXJzLmxl
bmd0aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7IC8vIHJlLWNoZWNrCi0JCQkJVHlwZUJpbmRpbmcg
bGFzdFBhcmFtID0gcGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aC0xXTsKLQkJCQlFeHByZXNz
aW9uIGxhc3RBcmcgPSBhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXTsKLQkJCQlpZiAobGFz
dEFyZy5pc0NvbXBhdGlibGVXaXRoKGxhc3RQYXJhbSwgbnVsbCkpIHsKLQkJCQkJdmFyaWFibGVB
cml0eSA9IGZhbHNlOwotCQkJCX0KLQkJCX0KLQkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBh
cmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKLQkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOwotCQkJCVR5cGVCaW5k
aW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBudWxsOwotCQkJCVR5cGVCaW5kaW5nIHBhcmFtZXRl
clR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZh
cmlhYmxlQXJpdHkpOwotCQkJCWlmIChwYXJhbWV0ZXJUeXBlID09IG51bGwgJiYgcHJvYmxlbVJl
YXNvbiAhPSBQcm9ibGVtUmVhc29ucy5Ob0Vycm9yKQotCQkJCQljb250aW51ZTsgLy8gbm90IG11
Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9ubHkgaGFwcGVu
cyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9m
IExhbWJkYUV4cHJlc3Npb24gJiYgKChMYW1iZGFFeHByZXNzaW9uKSBhcmd1bWVudCkuaGFzRXJy
b3JzKCkpCi0JCQkJCWNvbnRpbnVlOyAvLyBkb24ndCB1cGRhdGUgaWYgaW5uZXIgcG9seSBoYXMg
ZXJyb3JzCi0KLQkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJ
CUludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9uID0gKEludm9jYXRpb24pYXJndW1lbnQ7Ci0JCQkJ
CU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGlubmVySW52b2NhdGlvbi5iaW5kaW5nKHBhcmFtZXRl
clR5cGUsIHRydWUsIHNjb3BlKTsKLQkJCQkJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgYmluZGluZzsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckNv
bnRleHQgPSBpbm5lckludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dChwYXJhbWV0ZXJpemVk
TWV0aG9kKTsKLQkJCQkJCWlmIChpbm5lckNvbnRleHQgIT0gbnVsbCkgewotCQkJCQkJCWlmICgh
aW5uZXJDb250ZXh0Lmhhc1Jlc3VsdEZvcihwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQlhcmd1
bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7Ci0JCQkJCQkJCU1ldGhvZEJpbmRp
bmcgaW1wcm92ZWRCaW5kaW5nID0gaW5uZXJDb250ZXh0LmluZmVySW52b2NhdGlvblR5cGUoaW5u
ZXJJbnZvY2F0aW9uLCBwYXJhbWV0ZXJpemVkTWV0aG9kKTsKLQkJCQkJCQkJaWYgKCFpbXByb3Zl
ZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQkJCQkJaW5uZXJDb250ZXh0LnJlcG9y
dEludmFsaWRJbnZvY2F0aW9uKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nKTsKLQkJ
CQkJCQkJfQotCQkJCQkJCQlpZiAoaW5uZXJJbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGltcHJv
dmVkQmluZGluZywgcGFyYW1ldGVyVHlwZSkpIHsKLQkJCQkJCQkJCXJlc29sdmVQb2x5RXhwcmVz
c2lvbkFyZ3VtZW50cyhpbm5lckludm9jYXRpb24sIGltcHJvdmVkQmluZGluZywgc2NvcGUpOwot
CQkJCQkJCQl9Ci0JCQkJCQkJfSBlbHNlIGlmIChpbm5lckNvbnRleHQuc3RlcENvbXBsZXRlZCA8
IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKSB7Ci0JCQkJCQkJCWlubmVyQ29u
dGV4dC5yZWJpbmRJbm5lclBvbGllcyhwYXJhbWV0ZXJpemVkTWV0aG9kLCBpbm5lckludm9jYXRp
b24pOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJCWNvbnRpbnVlOyAvLyBvdGhlcndpc2UgdGhl
c2UgaGF2ZSBiZWVuIGRlYWx0IHdpdGggZHVyaW5nIGlubmVyIG1ldGhvZCBsb29rdXAKLQkJCQkJ
fQotCQkJCX0KLQotCQkJCWlmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQkJ
Ly8gcG9seSBleHByZXNzaW9ucyBpbiBhbiBpbnZvY2F0aW9uIGNvbnRleHQgbWF5IG5lZWQgdG8g
YmUgcmVzb2x2ZWQgbm93OgotCQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4LnN0ZXBD
b21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpCi0JCQkJCQl1
cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVzb2x2ZWRUeXBlOyAvLyBpbiB0aGlzIGNh
c2UgYXJndW1lbnQgd2FzIGFscmVhZHkgcmVzb2x2ZWQgdmlhIEluZmVyZW5jZUNvbnRleHQxOC5h
Y2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cygpCi0JCQkJCWVsc2UKLQkJCQkJCXVwZGF0ZWRBcmd1
bWVudFR5cGUgPSBhcmd1bWVudC5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUocGFyYW1ldGVy
VHlwZSwgc2NvcGUpOwotCi0JCQkJCWlmIChwcm9ibGVtUmVhc29uID09IFByb2JsZW1SZWFzb25z
Lk5vRXJyb3IgLy8gcHJlc2VydmUgZXJyb3JzCi0JCQkJCQkJJiYgdXBkYXRlZEFyZ3VtZW50VHlw
ZSAhPSBudWxsCQkJCQkvLyBkbyB3ZSBoYXZlIGEgcmVsZXZhbnQgdXBkYXRlPyAuLi4KLQkJCQkJ
CQkmJiAhKHVwZGF0ZWRBcmd1bWVudFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpKQot
CQkJCQl7Ci0JCQkJCQkvLyB1cGRhdGUgdGhlIGFyZ3VtZW50VHlwZXMgYXJyYXkgKHN1cHBvc2Vk
IHRvIGJlIG93bmVkIGJ5IHRoZSBjYWxsaW5nIG1ldGhvZCkKLQkJCQkJCS8vIGluIG9yZGVyIHRv
IGdpdmUgYmV0dGVyIGluZm9ybWF0aW9uIGZvciBzdWJzZXF1ZW50IGNoZWNrcwotCQkJCQkJYXJn
dW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5cGU7Ci0JCQkJCX0KLQkJCQl9CisJCWJv
b2xlYW4gdmFyaWFibGVBcml0eSA9IGNhbmRpZGF0ZU1ldGhvZC5pc1ZhcmFyZ3MoKTsKKwkJZmlu
YWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7
CisJCUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOworCQlp
ZiAodmFyaWFibGVBcml0eSAmJiBhcmd1bWVudHMgIT0gbnVsbCAmJiBwYXJhbWV0ZXJzLmxlbmd0
aCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7CisJCQlpZiAoYXJndW1lbnRzW2FyZ3VtZW50cy5sZW5n
dGgtMV0uaXNDb21wYXRpYmxlV2l0aChwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdLCBz
Y29wZSkpIHsKKwkJCQl2YXJpYWJsZUFyaXR5ID0gZmFsc2U7CiAJCQl9CiAJCX0KLQkJaW52b2Nh
dGlvbi5pbm5lclVwZGF0ZURvbmUoKTsKLQl9Ci0KLQlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2
ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9kQmlu
ZGluZyBtZXRob2RCaW5kaW5nLCBTY29wZSBzY29wZSkgewotCQlUeXBlQmluZGluZ1tdIGFyZ3Vt
ZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0
aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoaW5uZXJBcmd1bWVudHMgIT0gbnVsbCkgewotCQkJYXJn
dW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tpbm5lckFyZ3VtZW50cy5sZW5ndGhdOwotCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBpbm5lckFyZ3VtZW50cy5sZW5ndGg7IGkrKykKLQkJCQlhcmd1
bWVudFR5cGVzW2ldID0gaW5uZXJBcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOworCQlmb3IgKGlu
dCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAwIDogYXJndW1lbnRzLmxlbmd0
aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gYXJndW1lbnRz
W2ldOworCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5n
ZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFyaWFibGVBcml0eSk7CisJCQlpZiAocGFyYW1l
dGVyVHlwZSA9PSBudWxsKQorCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVjaCB3ZSBjYW4gZG8gd2l0
aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5zIGFmdGVyIHNvbWUgcmVz
b2x2ZSBlcnJvcgorCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0uaXNQb2x5VHlwZSgpKSB7CisJCQkJ
YXJndW1lbnQuc2V0RXhwZWN0ZWRUeXBlKHBhcmFtZXRlclR5cGUpOworCQkJCVR5cGVCaW5kaW5n
IHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSk7IAorCQkJ
CWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKKwkJCQkJLy8gTEUu
cmVzb2x2ZVR5cGUgbWF5IHJldHVybiBhIHZhbGlkIGJpbmRpbmcgYmVjYXVzZSByZXNvbHZlIGRv
ZXMgbm90IGRldGVjdCBzdHJ1Y3R1cmFsIGVycm9ycyBhdCB0aGlzIHBvaW50LgorCQkJCQlMYW1i
ZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNzaW9uKSBhcmd1bWVudDsKKwkJCQkJ
aWYgKCFsYW1iZGEuaXNDb21wYXRpYmxlV2l0aChwYXJhbWV0ZXJUeXBlLCBzY29wZSkgfHwgbGFt
YmRhLmhhc0Vycm9ycygpKQorCQkJCQkJY29udGludWU7CisJCQkJfQorCQkJCWlmICh1cGRhdGVk
QXJndW1lbnRUeXBlICE9IG51bGwgJiYgdXBkYXRlZEFyZ3VtZW50VHlwZS5raW5kKCkgIT0gQmlu
ZGluZy5QT0xZX1RZUEUpCisJCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSB1cGRhdGVkQXJndW1lbnRU
eXBlOworCQkJfQogCQl9Ci0JCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbnZvY2F0
aW9uLCBtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJfQogCiAJcHVibGlj
IHN0YXRpYyB2b2lkIHJlc29sdmVBbm5vdGF0aW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBBbm5vdGF0
aW9uW10gc291cmNlQW5ub3RhdGlvbnMsIEJpbmRpbmcgcmVjaXBpZW50KSB7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggMDBhNDcxMi4uMjkzYmE0ZSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNzcsMzAgKzc3LDEwIEBACiAKIAkgLy8gaG9sZCBv
biB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNl
IHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToK
IAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UE1CLElDMTg+Ki8gaW5mZXJlbmNlQ29udGV4
dHM7Ci0JcHJvdGVjdGVkIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVy
OworCXByaXZhdGUgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJcHVibGljIFR5cGVCaW5kaW5n
W10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVSUzsKLQlwdWJsaWMgYm9vbGVh
biBhcmd1bWVudHNIYXZlRXJyb3JzOwotCi0JLyoqIFJlY29yZCB0byBrZWVwIHN0YXRlIGJldHdl
ZW4gZGlmZmVyZW50IHBhcnRzIG9mIHJlc29sdXRpb24uICovCi0JUmVzb2x1dGlvblN0YXRlIHN1
c3BlbmRlZFJlc29sdXRpb25TdGF0ZTsKLQljbGFzcyBSZXNvbHV0aW9uU3RhdGUgewotCQlCbG9j
a1Njb3BlIHNjb3BlOwotCQlib29sZWFuIGlzRGlhbW9uZDsKLQkJYm9vbGVhbiBkaWFtb25kTmVl
ZHNEZWZlcnJpbmc7Ci0JCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0OwotCQlib29sZWFuIGNhbm5v
dEluZmVyRGlhbW9uZDsgLy8gcmVxdWVzdCB0aGUgYW4gZXJyb3IgYmUgcmVwb3J0ZWQgaW4gZHVl
IHRpbWUKLQkJYm9vbGVhbiBoYXNSZXBvcnRlZEVycm9yOwotCi0JCVJlc29sdXRpb25TdGF0ZShC
bG9ja1Njb3BlIHNjb3BlLCBib29sZWFuIGlzRGlhbW9uZCwgYm9vbGVhbiBkaWFtb25OZWVkc0Rl
ZmVycmluZywKLQkJCQlib29sZWFuIGFyZ3NDb250YWluQ2FzdCwgVHlwZUJpbmRpbmdbXSBhcmd1
bWVudFR5cGVzKQotCQl7Ci0JCQl0aGlzLnNjb3BlID0gc2NvcGU7Ci0JCQl0aGlzLmlzRGlhbW9u
ZCA9IGlzRGlhbW9uZDsKLQkJCXRoaXMuZGlhbW9uZE5lZWRzRGVmZXJyaW5nID0gZGlhbW9uTmVl
ZHNEZWZlcnJpbmc7Ci0JCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IGFyZ3NDb250YWluQ2FzdDsK
LQkJfQotCX0KLQorCXB1YmxpYyBib29sZWFuIGFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsK
KwkKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwg
Rmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJLy8gY2hlY2sg
Y2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBpbiBjdXJyZW50IGNvbnRleHQgKDI2
MTM0KQogCWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxpemF0aW9uSWZOZWNlc3NhcnkoKFJlZmVy
ZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVyYXN1cmUoKSwgY3VycmVu
dFNjb3BlLCBmbG93SW5mbyk7CkBAIC0zNDEsNyArMzIxLDYgQEAKIAkvLyBQcm9wYWdhdGUgdGhl
IHR5cGUgY2hlY2tpbmcgdG8gdGhlIGFyZ3VtZW50cywgYW5kIGNoZWNrIGlmIHRoZSBjb25zdHJ1
Y3RvciBpcyBkZWZpbmVkLgogCWZpbmFsIGJvb2xlYW4gaXNEaWFtb25kID0gdGhpcy50eXBlICE9
IG51bGwgJiYgKHRoaXMudHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDA7CiAJZmlu
YWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9u
cygpOwotCWJvb2xlYW4gZGlhbW9uZE5lZWRzRGVmZXJyaW5nID0gZmFsc2U7CiAJbG9uZyBzb3Vy
Y2VMZXZlbCA9IGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbDsKIAlpZiAodGhpcy5jb25zdGFu
dCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQpIHsKIAkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50
Lk5vdEFDb25zdGFudDsKQEAgLTM1MCwxNzggKzMyOSwxNTYgQEAKIAkJCXRoaXMucmVzb2x2ZWRU
eXBlID0gc2NvcGUuZW5jbG9zaW5nUmVjZWl2ZXJUeXBlKCk7CiAJCX0gZWxzZSB7CiAJCQl0aGlz
LnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVj
ayBib3VuZHMqLyk7Ci0JCQlpZiAoaXNEaWFtb25kICYmIHRoaXMudHlwZUV4cGVjdGVkID09IG51
bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZPQ0FUSU9OX0NPTlRFWFQgJiYgc291
cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmICh0aGlzLnJl
c29sdmVkVHlwZSAhPSBudWxsICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkp
Ci0JCQkJCWRpYW1vbmROZWVkc0RlZmVycmluZyA9IHRydWU7Ci0JCQl9CiAJCX0KLQl9IGVsc2Ug
ewotCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5yZXNvbHZlZFR5cGU7Ci0JfQotCi0J
aWYgKHRoaXMudHlwZSAhPSBudWxsKSB7Ci0JCWNoZWNrSWxsZWdhbE51bGxBbm5vdGF0aW9uKHNj
b3BlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCWNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb246
IHsKLQkJCWlmICh0aGlzLnR5cGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlw
ZVJlZmVyZW5jZSkgeyAvLyBkaXNhbGxvdyBuZXcgWDxTdHJpbmc+Llk8SW50ZWdlcj4oKQotCQkJ
CVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSAoUmVmZXJlbmNlQmluZGluZyl0aGlzLnJl
c29sdmVkVHlwZTsKLQkJCQlpZiAoY3VycmVudFR5cGUgPT0gbnVsbCkgcmV0dXJuIGN1cnJlbnRU
eXBlOwotCQkJCWRvIHsKLQkJCQkJLy8gaXNTdGF0aWMoKSBpcyBhbnN3ZXJpbmcgdHJ1ZSBmb3Ig
dG9wbGV2ZWwgdHlwZXMKLQkJCQkJaWYgKChjdXJyZW50VHlwZS5tb2RpZmllcnMgJiBDbGFzc0Zp
bGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxv
Y2F0aW9uOwotCQkJCQlpZiAoY3VycmVudFR5cGUuaXNSYXdUeXBlKCkpIGJyZWFrIGNoZWNrUGFy
YW1ldGVyaXplZEFsbG9jYXRpb247Ci0JCQkJfSB3aGlsZSAoKGN1cnJlbnRUeXBlID0gY3VycmVu
dFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51bGwpOwotCQkJCVBhcmFtZXRlcml6ZWRRdWFsaWZp
ZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVu
Y2UpIHRoaXMudHlwZTsKLQkJCQlmb3IgKGludCBpID0gcVJlZi50eXBlQXJndW1lbnRzLmxlbmd0
aCAtIDI7IGkgPj0gMDsgaS0tKSB7Ci0JCQkJCWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0gIT0g
bnVsbCkgewotCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFF1YWxpZmllZFBh
cmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlvbih0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsK
LQkJCQkJCWJyZWFrOworCQlpZiAodGhpcy50eXBlICE9IG51bGwpIHsKKwkJCWNoZWNrSWxsZWdh
bE51bGxBbm5vdGF0aW9uKHNjb3BlLCB0aGlzLnJlc29sdmVkVHlwZSk7CisJCQljaGVja1BhcmFt
ZXRlcml6ZWRBbGxvY2F0aW9uOiB7CisJCQkJaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0cmlu
Zz4uWTxJbnRlZ2VyPigpCisJCQkJCVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSAoUmVm
ZXJlbmNlQmluZGluZyl0aGlzLnJlc29sdmVkVHlwZTsKKwkJCQkJaWYgKGN1cnJlbnRUeXBlID09
IG51bGwpIHJldHVybiBjdXJyZW50VHlwZTsKKwkJCQkJZG8geworCQkJCQkJLy8gaXNTdGF0aWMo
KSBpcyBhbnN3ZXJpbmcgdHJ1ZSBmb3IgdG9wbGV2ZWwgdHlwZXMKKwkJCQkJCWlmICgoY3VycmVu
dFR5cGUubW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYykgIT0gMCkgYnJl
YWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKKwkJCQkJCWlmIChjdXJyZW50VHlwZS5p
c1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKKwkJCQkJfSB3
aGlsZSAoKGN1cnJlbnRUeXBlID0gY3VycmVudFR5cGUuZW5jbG9zaW5nVHlwZSgpKSE9IG51bGwp
OworCQkJCQlQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSBxUmVmID0gKFBhcmFt
ZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKSB0aGlzLnR5cGU7CisJCQkJCWZvciAoaW50
IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVuZ3RoIC0gMjsgaSA+PSAwOyBpLS0pIHsKKwkJCQkJ
CWlmIChxUmVmLnR5cGVBcmd1bWVudHNbaV0gIT0gbnVsbCkgeworCQkJCQkJCXNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmlsbGVnYWxRdWFsaWZpZWRQYXJhbWV0ZXJpemVkVHlwZUFsbG9jYXRpb24o
dGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7CisJCQkJCQkJYnJlYWs7CisJCQkJCQl9CiAJ
CQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KLQl9Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRl
ciBhcmdzIGFyZSByZXNvbHZlZAorCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3Mg
YXJlIHJlc29sdmVkCiAKLQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBj
b25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgewotCQlp
bnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1bWVudHNI
YXZlRXJyb3JzID0gc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OwotCQl0
aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJl
ZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlw
ZUFyZ3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyog
Y2hlY2sgYm91bmRzKi8pKSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3Jz
ID0gdHJ1ZTsKLQkJCX0KLQkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJl
ZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQotCQlp
ZiAoaXNEaWFtb25kKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25kTm90V2l0
aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOwotCQkJcmV0dXJuIG51
bGw7Ci0JCX0KLQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMu
YXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50
cwotCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBt
YXg7IGkrKykgewotCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7CisJ
CS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwp
CisJCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9IHRo
aXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBz
b3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7CisJCQl0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0g
MDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0g
dGhpcy50eXBlQXJndW1lbnRzW2ldOworCQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50
c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hlY2sgYm91
bmRzKi8pKSA9PSBudWxsKSB7CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7
CisJCQkJfQorCQkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVyZW5j
ZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmls
bGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJlZmVyZW5jZSk7CiAJCQkJfQogCQkJfQotCQkJcmV0
dXJuIG51bGw7CisJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuZGlhbW9uZE5vdFdpdGhFeHBsaWNpdFR5cGVBcmd1bWVudHModGhpcy50eXBlQXJndW1lbnRz
KTsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJv
cnMpIHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0
IHRvIHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFy
Z3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0u
cmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJ
fQogCQl9Ci0JfQogCi0JLy8gYnVmZmVyaW5nIHRoZSBhcmd1bWVudHMnIHR5cGVzCi0JYm9vbGVh
biBhcmdzQ29udGFpbkNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkg
ewotCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsKLQkJaW50IGxlbmd0aCA9IHRo
aXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5k
aW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCUV4
cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKLQkJCWlmIChhcmd1bWVudCBp
bnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCQkJYXJndW1lbnQuYml0cyB8PSBEaXNhYmxl
VW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJCQlhcmdzQ29u
dGFpbkNhc3QgPSB0cnVlOworCQkvLyBidWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKKwkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9y
cyA9IGZhbHNlOworCQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKKwkJCXRo
aXMuYXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlz
LmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lv
bikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsg
Ly8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7
CisJCQkJfQorCQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09O
VEVYVCk7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAK
KwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1
bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMt
MSQKKwkJCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBl
KHNjb3BlKSkgPT0gbnVsbCkgeworCQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVl
OworCQkJCX0KIAkJCX0KLQkJCWFyZ3VtZW50LnNldEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJ
T05fQ09OVEVYVCk7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51
bGwpIAotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigi
QXJndW1lbnQgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04t
TkxTLTEkCi0JCQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVU
eXBlKHNjb3BlKSkgPT0gbnVsbCkgewotCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRy
dWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2Vv
ZiBJbnZvY2F0aW9uKSAmJiAoKEludm9jYXRpb24pIGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkp
KSkgewotCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCXRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJ
CX0KLQkJfQotCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQkvKiBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVu
dHMgaGF2ZSBlcnJvcnMsIGNvbXBsZXRlbHkgYmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCisJCQlp
ZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7CisJCQkJLyogaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTM1OSwgaWYgYXJndW1lbnRzIGhhdmUgZXJy
b3JzLCBjb21wbGV0ZWx5IGJhaWwgb3V0IGluIHRoZSA8PiBjYXNlLgogCQkJICAgTm8gbWVhbmlu
Z2Z1bCB0eXBlIHJlc29sdXRpb24gaXMgcG9zc2libGUgc2luY2UgaW5mZXJlbmNlIG9mIHRoZSBl
bGlkZWQgdHlwZXMgaXMgZnVsbHkgdGllZCB0byBhcmd1bWVudCB0eXBlcy4gRG8KIAkJCSAgIG5v
dCByZXR1cm4gdGhlIHBhcnRpYWxseSByZXNvbHZlZCB0eXBlLgotCQkJICovCi0JCQlpZiAoaXNE
aWFtb25kKSB7Ci0JCQkJcmV0dXJuIG51bGw7IC8vIG5vdCB0aGUgcGFydGlhbGx5IGNvb2tlZCB0
aGlzLnJlc29sdmVkVHlwZQotCQkJfQotCQkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNl
b2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJCS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBj
bGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKLQkJ
CQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJ
CQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspIHsKLQkJCQkJcHNldWRvQXJnc1tpXSA9
IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMu
YXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0
eXBlCisJCQkJICovCisJCQkJaWYgKGlzRGlhbW9uZCkgeworCQkJCQlyZXR1cm4gbnVsbDsgLy8g
bm90IHRoZSBwYXJ0aWFsbHkgY29va2VkIHRoaXMucmVzb2x2ZWRUeXBlCiAJCQkJfQotCQkJCXRo
aXMuYmluZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVz
b2x2ZWRUeXBlLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsK
LQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0
aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nlc3RNYXRjaDsKLQkJCQkJLy8gcmVjb3JkIHRo
ZSBjbG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91
dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7
Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5k
aW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8vIGdlbmVyaWMgbWV0aG9kCi0JCQkJCQkJLy8gc2hv
dWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIg
Y29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCi0JCQkJCQkJY2xvc2VzdE1hdGNoID0g
c2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9z
ZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOwotCQkJCQkJfQotCQkJ
CQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOwotCQkJCQkJTWV0aG9kQmluZGluZyBjbG9z
ZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOwotCQkJCQkJaWYgKGNs
b3Nlc3RNYXRjaE9yaWdpbmFsLmlzT3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUu
aXNEZWZpbmVkSW5NZXRob2QoY2xvc2VzdE1hdGNoT3JpZ2luYWwpKSB7Ci0JCQkJCQkJLy8gaWdu
b3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBpdHNlbGYg
KGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCi0JCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9k
aWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJaWYg
KHRoaXMucmVzb2x2ZWRUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJCQkv
LyByZWNvcmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBv
c3NpYmxlIGNvbnN0cnVjdG9yIG1hdGNoCisJCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9
IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkg
Pj0gMDspIHsKKwkJCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0g
bnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxh
Y2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQorCQkJCQl9CisJCQkJCXRoaXMuYmlu
ZGluZyA9IHNjb3BlLmZpbmRNZXRob2QoKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRU
eXBlLCBUeXBlQ29uc3RhbnRzLklOSVQsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKwkJCQkJ
aWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmco
KSkgeworCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RC
aW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOworCQkJCQkJLy8gcmVjb3JkIHRoZSBj
bG9zZXN0IG1hdGNoLCBmb3IgY2xpZW50cyB3aG8gbWF5IHN0aWxsIG5lZWQgaGludCBhYm91dCBw
b3NzaWJsZSBtZXRob2QgbWF0Y2gKKwkJCQkJCWlmIChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewor
CQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRp
bmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKKwkJCQkJCQkJLy8gc2hv
dWxkbid0IHJldHVybiBnZW5lcmljIG1ldGhvZCBvdXRzaWRlIGl0cyBjb250ZXh0LCByYXRoZXIg
Y29udmVydCBpdCB0byByYXcgbWV0aG9kICgxNzU0MDkpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaCA9
IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoY2xv
c2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmluZGluZyludWxsKTsKKwkJCQkJCQl9CisJ
CQkJCQkJdGhpcy5iaW5kaW5nID0gY2xvc2VzdE1hdGNoOworCQkJCQkJCU1ldGhvZEJpbmRpbmcg
Y2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKTsKKwkJCQkJCQlp
ZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFz
Y29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKKwkJCQkJCQkJ
Ly8gaWdub3JlIGNhc2VzIHdoZXJlIG1ldGhvZCBpcyB1c2VkIGZyb20gd2l0aGluIGluc2lkZSBp
dHNlbGYgKGUuZy4gZGlyZWN0IHJlY3Vyc2lvbnMpCisJCQkJCQkJCWNsb3Nlc3RNYXRjaE9yaWdp
bmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0xvY2FsbHlVc2VkOwor
CQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0KKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZl
ZFR5cGU7CiAJCQl9CisJCX0KKwkJaWYgKHRoaXMucmVzb2x2ZWRUeXBlID09IG51bGwgfHwgIXRo
aXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCXJldHVybiBudWxsOworCQl9
CisKKwkJLy8gbnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNvbnN0
YW50IGluaXRzCisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUu
Y2FuQmVJbnN0YW50aWF0ZWQoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90
SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7CiAJCQlyZXR1cm4gdGhp
cy5yZXNvbHZlZFR5cGU7CiAJCX0KLQl9Ci0JaWYgKHRoaXMucmVzb2x2ZWRUeXBlID09IG51bGwg
fHwgIXRoaXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJcmV0dXJuIG51bGw7
Ci0JfQotCi0JLy8gbnVsbCB0eXBlIGRlbm90ZXMgZmFrZSBhbGxvY2F0aW9uIGZvciBlbnVtIGNv
bnN0YW50IGluaXRzCi0JaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlw
ZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7Ci0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5v
dEluc3RhbnRpYXRlKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwotCQlyZXR1cm4gdGhp
cy5yZXNvbHZlZFR5cGU7Ci0JfQotCVJlc29sdXRpb25TdGF0ZSBzdGF0ZSA9IG5ldyBSZXNvbHV0
aW9uU3RhdGUoc2NvcGUsIGlzRGlhbW9uZCwgZGlhbW9uZE5lZWRzRGVmZXJyaW5nLCBhcmdzQ29u
dGFpbkNhc3QsIHRoaXMuYXJndW1lbnRUeXBlcyk7Ci0JaWYgKGRpYW1vbmROZWVkc0RlZmVycmlu
ZykgewotCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSA9IHN0YXRlOyAvLyByZXNvbHZp
bmcgdG8gYmUgY29udGludWVkIGxhdGVyICh2aWEgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRU
eXBlKSkuCi0JCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwotCX0KLQotCWlmICgh
cmVzb2x2ZVBhcnQyKHN0YXRlKSkKLQkJcmV0dXJuIG51bGw7Ci0JcmV0dXJuIHJlc29sdmVQYXJ0
MyhzdGF0ZSk7Ci19Ci0KLS8qKiBTZWNvbmQgcGFydCBvZiByZXNvbHZpbmcgdGhhdCBtYXkgaGFw
cGVuIG11bHRpcGxlIHRpbWVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLiAqLwotYm9vbGVh
biByZXNvbHZlUGFydDIoUmVzb2x1dGlvblN0YXRlIHN0YXRlKSB7Ci0JLy8gVE9ETzogYWxsIGlu
Zm9ybWF0aW9uIHBlcnNpc3RlZCBkdXJpbmcgdGhpcyBtZXRob2QgbWF5IG5lZWQgdG8gYmUgc3Rv
cmVkIHBlciB0YXJnZXRUeXBlPwotCWlmIChzdGF0ZS5pc0RpYW1vbmQpIHsKLQkJUmVmZXJlbmNl
QmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKLQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBl
cyA9IGluZmVyRWxpZGVkVHlwZXMoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNv
bHZlZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVu
dFR5cGVzLCBzdGF0ZS5zY29wZSk7Ci0JCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKLQkJ
CWlmICghc3RhdGUuZGlhbW9uZE5lZWRzRGVmZXJyaW5nKSB7Ci0JCQkJc3RhdGUuc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJCQlzdGF0ZS5o
YXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJCQl0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7Ci0J
CQl9IGVsc2UgewotCQkJCXN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCA9IHRydWU7IC8vIGRlZmVy
IHJlcG9ydGluZworCQlpZiAoaXNEaWFtb25kKSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVy
aWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5n
ZW5lcmljVHlwZSgpOworCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRU
eXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmlj
VHlwZSwgZ2VuZXJpY1R5cGUudHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdU
eXBlKCkpOworCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlw
ZXMocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwg
dGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CisJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxs
KSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0
aGlzKTsKKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCQkJfQotCQkJcmV0
dXJuIGZhbHNlOworCQkJUmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHNjb3BlLmVu
dmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVk
VHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5j
bG9zaW5nVHlwZSgpKTsKKwkJCWlmICh0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIGNvbXBp
bGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRo
aXMuZXhwcmVzc2lvbkNvbnRleHQuZGVmaW5lc1RhcmdldFR5cGUoKSkgeworCQkJCXNjb3BlLnNo
b3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbCA9IHRydWU7CisJCQkJdHJ5IHsKKwkJCQkJdGhpcy5i
aW5kaW5nID0gc2NvcGUuZ2V0Q29uc3RydWN0b3IoYWxsb2NhdGlvblR5cGUsIHRoaXMuYXJndW1l
bnRUeXBlcywgdGhpcyk7CisJCQkJfSBmaW5hbGx5IHsKKwkJCQkJc2NvcGUuc2hvdWxkQ29uc3Vs
dFNoYWRvd09yaWdpbmFsID0gZmFsc2U7CisJCQkJfQorCQkJCXJldHVybiBuZXcgUG9seVR5cGVC
aW5kaW5nKHRoaXMpOworCQkJfQorCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVz
b2x2ZWRUeXBlID0gYWxsb2NhdGlvblR5cGU7IAogCQl9Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy50eXBlLnJlc29sdmVkVHlwZSA9IHN0YXRlLnNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRl
UGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKLQkJ
c3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gZmFsc2U7Ci0gCX0KLQlSZWZlcmVuY2VCaW5kaW5n
IHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKLQl0
aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHN0YXRlLnNjb3BlLCB0aGlzLCBy
ZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7Ci0JcmV0dXJuIHRydWU7Ci19Ci0KLS8q
KiBGaW5hbCBwYXJ0IG9mIHJlc29sdmluZyAob25jZSk6IGNoZWNrIGFuZCByZXBvcnQgdmFyaW91
cyBlcnJvciBjb25kaXRpb25zLiAqLwotVHlwZUJpbmRpbmcgcmVzb2x2ZVBhcnQzKFJlc29sdXRp
b25TdGF0ZSBzdGF0ZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBu
dWxsICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpCi0J
CXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKLQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0
ZSA9IG51bGw7Ci0JaWYgKHN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkgewotCQlzdGF0ZS5zY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOworCX0gZWxzZSB7CisJCWlmIChpc0RpYW1vbmQp
IHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNy
ZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFi
bGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBp
bmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5y
ZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsK
KwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZSA9IG51bGw7CisJCQl9CisJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5y
ZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBl
KGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykg
dGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisJCX0KIAl9CisJCiAJUmVmZXJl
bmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0
aGlzLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKKwkJCiAJaWYgKCF0aGlz
LmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmlu
Z0NsYXNzID09IG51bGwpIHsKIAkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IGFsbG9j
YXRpb25UeXBlOwpAQCAtNTI5LDMwICs0ODYsMjkgQEAKIAkJaWYgKHRoaXMudHlwZSAhPSBudWxs
ICYmICF0aGlzLnR5cGUucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCXJldHVy
biBudWxsOwogCQl9Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25z
dHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5p
bnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlOwogCX0KIAlpZiAoKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5IYXNN
aXNzaW5nVHlwZSkgIT0gMCkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNz
aW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKKwkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJbkNvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7
CiAJfQotCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhpcy5iaW5kaW5nLCBzdGF0ZS5zY29w
ZSwgdHJ1ZSkpIHsKLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1l
dGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOworCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhp
cy5iaW5kaW5nLCBzY29wZSwgdHJ1ZSkpIHsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVw
cmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOwogCX0KLQlpZiAoY2hlY2tJbnZvY2F0
aW9uQXJndW1lbnRzKHN0YXRlLnNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5k
aW5nLCB0aGlzLmFyZ3VtZW50cywgdGhpcy5hcmd1bWVudFR5cGVzLCBzdGF0ZS5hcmdzQ29udGFp
bkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVs
bCwgYWxsb2NhdGlvblR5cGUsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJn
dW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8
PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxs
ICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgPT0gQmluZGluZy5OT19U
WVBFX1ZBUklBQkxFUykgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vz
c2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5n
ZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJndW1lbnRzKTsKKwkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0
aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50
cyk7CiAJfQotCWlmICghc3RhdGUuaXNEaWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFy
YW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRzKCkpIHsKLSAJCWNoZWNrVHlwZUFyZ3Vt
ZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHN0YXRlLnNjb3BlKTsKKwlpZiAoIWlzRGlhbW9uZCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1Bh
cmFtZXRlcml6ZWRUeXBlV2l0aEFjdHVhbEFyZ3VtZW50cygpKSB7CisgCQljaGVja1R5cGVBcmd1
bWVudFJlZHVuZGFuY3koKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5
cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVz
LCBzY29wZSk7CiAgCX0KLQlDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc3RhdGUu
c2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgJiYgKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFn
Qml0cy5Jc051bGxuZXNzS25vd24pID09IDApIHsKLQkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRp
b25WZXJpZmllcihzdGF0ZS5zY29wZS5lbnZpcm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMuaW5o
ZXJpdE51bGxBbm5vdGF0aW9ucykKLQkJCQkuY2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0
aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhvZCovLCBmYWxzZSwgc3RhdGUuc2NvcGUpOworCQlu
ZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHNjb3BlLmVudmlyb25tZW50KCksIGNv
bXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQorCQkJCS5jaGVja0ltcGxpY2l0
TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBz
Y29wZSk7CiAJfQotCXJlY29yZEV4Y2VwdGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc3RhdGUuc2Nv
cGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNlcHRpb25zKTsKKwlyZWNvcmRFeGNlcHRpb25zRm9y
RW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9ucyk7CiAJ
cmV0dXJuIGFsbG9jYXRpb25UeXBlOwogfQogCkBAIC01NzEsNyArNTI3LDMzIEBACiAJfQogfQog
Ci1wdWJsaWMgVHlwZUJpbmRpbmdbXSBpbmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywgZmluYWwgQmxvY2tTY29wZSBzY29wZSkgeworLy8g
Rm9yIGFsbG9jYXRpb24gZXhwcmVzc2lvbnMsIGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUg
YXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5LCBzaW5jZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVz
IGFyZSBub3QgZ2VuZXJpYy4KK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgo
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlyZXR1cm4gaXNQb2x5RXhw
cmVzc2lvbigpID8gZmFsc2UgOiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsK
K30KKworcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRU
eXBlLCBmaW5hbCBTY29wZSBzY29wZSkgeworCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMg
fHwgdGhpcy5iaW5kaW5nID09IG51bGwgfHwgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygp
IHx8IHRhcmdldFR5cGUgPT0gbnVsbCB8fCBzY29wZSA9PSBudWxsKQorCQlyZXR1cm4gZmFsc2U7
CisJVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUgPSB0aGlzLnJlc29sdmVkVHlwZTsKKwlpZiAo
aXNQb2x5RXhwcmVzc2lvbigpKSB7CisJCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBl
ID0gdGhpcy50eXBlRXhwZWN0ZWQ7CisJCXRyeSB7CisJCQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRh
cmdldFR5cGU7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOworCQkJUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUuZW52aXJvbm1l
bnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJpY1R5cGUudHlw
ZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJVHlwZUJpbmRp
bmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVkVHlwZXMocGFyYW1ldGVyaXplZFR5cGUs
IHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBz
Y29wZSk7CisJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBudWxsKQorCQkJCXJldHVybiBmYWxzZTsK
KwkJCWFsbG9jYXRpb25UeXBlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJp
emVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOworCQl9IGZpbmFsbHkg
eworCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSBvcmlnaW5hbEV4cGVjdGVkVHlwZTsKKwkJfQorCX0K
KwlyZXR1cm4gYWxsb2NhdGlvblR5cGUgIT0gbnVsbCAmJiBhbGxvY2F0aW9uVHlwZS5pc0NvbXBh
dGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKK30KKworcHVibGljIFR5cGVCaW5kaW5nW10g
aW5mZXJFbGlkZWRUeXBlcyhQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUs
IFJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5
cHMsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CiAJLyogR2l2ZW4gdGhlIGFsbG9jYXRpb24gdHlwZSBh
bmQgdGhlIGFyZ3VtZW50cyB0byB0aGUgY29uc3RydWN0b3IsIHNlZSBpZiB3ZSBjYW4gc3ludGhl
c2l6ZSBhIGdlbmVyaWMgc3RhdGljIGZhY3RvcnkKIAkgICBtZXRob2QgdGhhdCB3b3VsZCwgZ2l2
ZW4gdGhlIGFyZ3VtZW50IHR5cGVzIGFuZCB0aGUgaW52b2NhdGlvbiBzaXRlLCBtYW51ZmFjdHVy
ZSBhIHBhcmFtZXRlcml6ZWQgb2JqZWN0IG9mIHR5cGUgYWxsb2NhdGlvblR5cGUuCiAJICAgSWYg
d2UgYXJlIHN1Y2Nlc3NmdWwgdGhlbiBieSBkZXNpZ24gYW5kIGNvbnN0cnVjdGlvbiwgdGhlIHBh
cmFtZXRlcml6YXRpb24gb2YgdGhlIHJldHVybiB0eXBlIG9mIHRoZSBmYWN0b3J5IG1ldGhvZCBp
cyBpZGVudGljYWwKQEAgLTU4MSwxNyArNTYzLDYgQEAKIAlpZiAoZmFjdG9yeSBpbnN0YW5jZW9m
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiBmYWN0b3J5LmlzVmFsaWRCaW5k
aW5nKCkpIHsKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGdlbmVyaWNGYWN0
b3J5ID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgZmFjdG9yeTsKIAkJdGhp
cy5pbmZlcnJlZFJldHVyblR5cGUgPSBnZW5lcmljRmFjdG9yeS5pbmZlcnJlZFJldHVyblR5cGU7
Ci0JCS8vIHRoaXMgaXMgb3VyIGxhc3QgY2hhbmNlIHRvIGluc3BlY3QgdGhlIHJlc3VsdCBvZiB0
aGUgaW5mZXJlbmNlIHRoYXQgaXMgY29ubmVjdGVkIHRvIHRoZSB0aHJvdy1hd2F5IGZhY3Rvcnkg
YmluZGluZwotCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBnZXRJbmZlcmVuY2VDb250
ZXh0KGdlbmVyaWNGYWN0b3J5KTsKLQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgaW5mQ3R4MTgu
c3RlcENvbXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkgewot
CQkJLy8gcmVmcmVzaCBhcmd1bWVudFR5cGVzIGZyb20gdXBkYXRlZCBiaW5kaW5ncyBpbiBhcmd1
bWVudHM6Ci0JCQkvLyAodGhpcyBzaG91bGRuJ3QgYmUgc3RyaWN0bHkgbmVjZXNzYXJ5LCBhcyBG
dW5jdGlvbkV4cHJlc3Npb24uaXNDb21wYXRpYmxlV2l0aCgpIHNob3VsZCBnaXZlIHRoZSBzYW1l
IHJlc3VsdCwKLQkJCS8vICBidXQgaXQncyBwcm9iYWJseSBiZSBhIGdvb2QgaWRlYSB0byBhdm9p
ZCB0aGUgbmVjZXNzaXR5IHRvIGNhbGwgaXNDb21wYXRpYmxlV2l0aCgpIGluIHRoZSBmaXJzdCBw
bGFjZSkuIAotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudFR5cHMubGVuZ3RoOyBpKysp
IHsKLQkJCQlpZiAoYXJndW1lbnRUeXBzW2ldIGluc3RhbmNlb2YgUG9seVR5cGVCaW5kaW5nKQot
CQkJCQlhcmd1bWVudFR5cHNbaV0gPSB0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0J
CQl9Ci0JCX0KIAkJcmV0dXJuICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZhY3RvcnkucmV0
dXJuVHlwZSkuYXJndW1lbnRzOwogCX0KIAlyZXR1cm4gbnVsbDsKQEAgLTY5OSwxMDIgKzY3MCwy
MyBAQAogfQogCiAvLy0tIGludGVyZmFjZSBJbnZvY2F0aW9uOiAtLQotcHVibGljIE1ldGhvZEJp
bmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9y
cywgU2NvcGUgc2NvcGUpIHsKLQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0g
bnVsbCAmJiB0YXJnZXRUeXBlICE9IG51bGwpIHsKLQkJc2V0RXhwZWN0ZWRUeXBlKHRhcmdldFR5
cGUpOwotCQlpZiAoIXJlc29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSkp
IHsKLQkJCWlmIChyZXBvcnRFcnJvcnMgJiYgIXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJCQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3Rh
dGUuY2Fubm90SW5mZXJEaWFtb25kKQotCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5u
b3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCWVsc2UKLQkJCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJjb25zdHJ1Y3RvciBpcyB1bmV4cGVjdGVk
bHkgdW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQkJdGhpcy5zdXNwZW5kZWRS
ZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCQl9Ci0JCQlyZXR1cm4g
bnVsbDsKLQkJfQotCX0KLQlpZiAocmVwb3J0RXJyb3JzICYmIHRoaXMuYmluZGluZyAhPSBudWxs
ICYmICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlpZiAodGhpcy5iaW5kaW5n
LmRlY2xhcmluZ0NsYXNzID09IG51bGwpCi0JCQl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3Mg
PSAoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7Ci0JCWlmICh0aGlzLnN1c3Bl
bmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKLQkJCXRoaXMuc3VzcGVu
ZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQl9Ci0JfQorcHVi
bGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgewogCXJldHVybiB0aGlzLmJpbmRpbmc7Ci19Ci1wdWJsaWMgVHlwZUJpbmRpbmcgY2hl
Y2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNj
b3BlKSB7Ci0JdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRUeXBlOwotCWJvb2xlYW4gbmVlZHNV
cGRhdGUgPSB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAJCQkJCQkJCQkJCQkJCQkJLy8gbm90IHll
dCByZXNvbHZlZAotCQkJKHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGFyZ2V0VHlwZSAh
PSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUp
KTsJLy8gcHJldmlvdXMgYXR0ZW1wdCB3YXMgd3JvbmcKLQlpZiAobmVlZHNVcGRhdGUgJiYgdGhp
cy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiAhdGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkvLyBBdHRlbXB0IHRvIHJlc29sdmUg
aGFsZiByZXNvbHZlZCBkaWFtb25kCi0JCXJlc29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJlc29s
dXRpb25TdGF0ZSk7Ci0JfQotCS8vIGNvbmZlciBNZXNzYWdlU2VuZC5jaGVja0FnYWluc3RGaW5h
bFRhcmdldFR5cGUoLCwpOgotCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdl
dEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRp
bmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgY3R4LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VD
b250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewotCQkJdGhpcy50eXBlRXhwZWN0ZWQgPSB0YXJnZXRU
eXBlOwotCQkJTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZyA9IGN0eC5pbmZlckludm9jYXRp
b25UeXBlKHRoaXMsIChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmlu
ZGluZyk7Ci0JCQlpZiAodXBkYXRlQmluZGluZ3ModXBkYXRlZEJpbmRpbmcsIHRhcmdldFR5cGUp
KSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdXBk
YXRlZEJpbmRpbmcsIHNjb3BlKTsKLQkJCX0KLQkJfQotCX0KLQlpZiAodGhpcy5zdXNwZW5kZWRS
ZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQlyZXR1cm4gcmVzb2x2ZVBhcnQzKHRoaXMuc3Vz
cGVuZGVkUmVzb2x1dGlvblN0YXRlKTsKLQl9Ci0JcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwog
fQogcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CiAJcmV0dXJuIHRoaXMuYXJndW1l
bnRzOwogfQogCi1wdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVw
ZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JYm9vbGVhbiBoYXNVcGRh
dGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBkYXRlZEJpbmRpbmc7Ci0JaWYgKHRoaXMuaW5mZXJlbmNl
Q29udGV4dHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcub3JpZ2luYWwoKSA9PSB1cGRhdGVkQmlu
ZGluZy5vcmlnaW5hbCgpKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNl
Q29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KHRoaXMuYmluZGluZyk7Ci0JCWlm
IChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBk
YXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4g
b3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQg
bm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0
YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBk
YXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5kZWNsYXJp
bmdDbGFzczsKLQlyZXR1cm4gaGFzVXBkYXRlOwotfQogcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZl
cmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIElu
ZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRz
ID09IG51bGwpCiAJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFi
bGUoKTsKIAl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsKLQlN
ZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9kLm9yaWdpbmFsKCk7Ci0JaWYgKG9yaWdpbmFs
IGluc3RhbmNlb2YgU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcpIHsKLQkJU3ludGhldGlj
RmFjdG9yeU1ldGhvZEJpbmRpbmcgc3ludGhPcmlnaW5hbCA9IChTeW50aGV0aWNGYWN0b3J5TWV0
aG9kQmluZGluZylvcmlnaW5hbDsKLQkJUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgcGFyYW1l
dGVyaXplZEN0b3IgPSBzeW50aE9yaWdpbmFsLmFwcGx5VHlwZUFyZ3VtZW50c09uQ29uc3RydWN0
b3IobWV0aG9kLnR5cGVBcmd1bWVudHMpOwotCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dChw
YXJhbWV0ZXJpemVkQ3RvciwgaW5mQ3R4MTgpOwotCX0KLX0KLXB1YmxpYyBib29sZWFuIHVzZXNJ
bmZlcmVuY2UoKSB7Ci0JcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7CiB9
CiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVy
aXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMg
PT0gbnVsbCkKIAkJcmV0dXJuIG51bGw7CiAJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0MTgpIHRo
aXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiBpbm5l
cnNOZWVkVXBkYXRlKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51
bGw7Ci19Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVy
ZW5jZUhlbHBlciA9IG51bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJ
bmZlcmVuY2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7Ci19
Ci0KIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogcHVibGljIEV4cHJlc3Npb25D
b250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkgewogCXJldHVybiB0aGlzLmV4cHJlc3Npb25D
b250ZXh0OwpAQCAtODAyLDQgKzY5NCw0IEBACiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZy
ZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewogCXJldHVybiBuZXcgSW5mZXJlbmNl
Q29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CiB9Ci19Cit9ClwgTm8gbmV3
bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5k
ZXggZWUzMTA4Ni4uN2YwY2NiZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4
cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZh
CkBAIC01Nyw3ICs1Nyw2IEBACiAJcHJpdmF0ZSBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBm
YWxzZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9yaWdpbmFsVmFsdWVJZlRydWVUeXBlOwogCXBy
aXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlOwotCXByaXZhdGUgQmxv
Y2tTY29wZSBwb2x5RXhwcmVzc2lvblNjb3BlOwogCXByaXZhdGUgYm9vbGVhbiB1c2UxOHNwZWNp
ZmljczsKIAlwdWJsaWMgQ29uZGl0aW9uYWxFeHByZXNzaW9uKAogCQlFeHByZXNzaW9uIGNvbmRp
dGlvbiwKQEAgLTQ2NCwzMSArNDYzLDI1IEBACiAJCQlpZiAodGhpcy52YWx1ZUlmRmFsc2UgaW5z
dGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgdGhpcy52YWx1ZUlmRmFsc2UuYml0cyB8PSBEaXNhYmxl
VW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KIAkJCXRoaXMub3Jp
Z2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFsc2UucmVzb2x2ZVR5cGUoc2Nv
cGUpOwogCi0JCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQkJaWYgKHRoaXMuZXhwZWN0
ZWRUeXBlID09IG51bGwpIHsKLQkJCQkJdGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7
IC8vIHByZXNlcnZlIGZvciBldmVudHVhbCByZXNvbHV0aW9uL2Vycm9yIHJlcG9ydGluZy4KLQkJ
CQl9Ci0JCQl9Ci0KIAkJCWlmIChjb25kaXRpb25UeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5h
bFZhbHVlSWZUcnVlVHlwZSA9PSBudWxsIHx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBl
ID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJCX0gZWxzZSB7Ci0JCQkvKiBOb3QgcmVhY2hl
ZCBhcyBvZiBub3cgYXMgd2UgZG9uJ3QgZXZhbHVhdGUgY29uZGl0aW9uYWwgZXhwcmVzc2lvbnMg
bXVsdGlwbGUgdGltZXMsIGxlZnQgaW4gZm9yIG5vdy4KLQkJCSAgIElmIGluIGZ1dHVyZSwgd2Ug
Y2hhbmdlIHRoaW5ncyBzbyBjb250cm9sIHJlYWNoZXMgaGVyZSwgYSBwcmVjb25kaXRpb24gaXMg
dGhhdCB0aGlzLmV4cGVjdGVkVHlwZSBpcwotCQkJICAgdGhlIGZpbmFsIHRhcmdldCB0eXBlLgot
CQkJKi8KKwogCQkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUua2luZCgpID09IEJp
bmRpbmcuUE9MWV9UWVBFKQogCQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlz
LnZhbHVlSWZUcnVlLnJlc29sdmVUeXBlKHNjb3BlKTsKIAkJCWlmICh0aGlzLm9yaWdpbmFsVmFs
dWVJZkZhbHNlVHlwZS5raW5kKCkgPT0gQmluZGluZy5QT0xZX1RZUEUpCiAJCQkJdGhpcy5vcmln
aW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5yZXNvbHZlVHlwZShzY29w
ZSk7CisJCQkKKwkJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwg
IXRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJCQlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOworCQkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlm
RmFsc2VUeXBlID09IG51bGwgfHwgIXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFs
aWRCaW5kaW5nKCkpCisJCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKIAkJfQog
CQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7CiAJCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0g
bnVsbCkgewotCQkJCXRoaXMucG9seUV4cHJlc3Npb25TY29wZSA9IHNjb3BlOyAvLyBwcmVzZXJ2
ZSBmb3IgZXZlbnR1YWwgcmVzb2x1dGlvbi9lcnJvciByZXBvcnRpbmcuCiAJCQkJcmV0dXJuIG5l
dyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCQl9Ci0JCQljb21wdXRlQ29udmVyc2lvbnMoc2Nv
cGUsIHRoaXMuZXhwZWN0ZWRUeXBlKTsKLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHRo
aXMuZXhwZWN0ZWRUeXBlOworCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gY29tcHV0ZUNv
bnZlcnNpb25zKHNjb3BlLCB0aGlzLmV4cGVjdGVkVHlwZSkgPyB0aGlzLmV4cGVjdGVkVHlwZSA6
IG51bGw7CiAJCX0KIAkJVHlwZUJpbmRpbmcgdmFsdWVJZlRydWVUeXBlID0gdGhpcy5vcmlnaW5h
bFZhbHVlSWZUcnVlVHlwZTsKIAkJVHlwZUJpbmRpbmcgdmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMu
b3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlOwpAQCAtNjYxLDcgKzY1NCw4IEBACiAJCXJldHVybiBu
dWxsOwogCX0KIAotCXByb3RlY3RlZCB2b2lkIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3Bl
IHNjb3BlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJcHJvdGVjdGVkIGJvb2xlYW4gY29t
cHV0ZUNvbnZlcnNpb25zKEJsb2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUp
IHsKKwkJYm9vbGVhbiBvayA9IHRydWU7CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVU
eXBlICE9IG51bGwgJiYgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQlpZiAodGhpcy52YWx1ZUlmVHJ1ZS5pc0NvbnN0YW50VmFsdWVPZlR5cGVBc3Np
Z25hYmxlVG9UeXBlKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUpCiAJ
CQkJCXx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJn
ZXRUeXBlKSkgewpAQCAtNjgyLDYgKzY3Niw3IEBACiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBlTWlzbWF0Y2hFcnJvcih0aGlzLm9yaWdpbmFsVmFs
dWVJZlRydWVUeXBlLCB0YXJnZXRUeXBlLCB0aGlzLnZhbHVlSWZUcnVlLCBudWxsKTsKKwkJCQlv
ayA9IGZhbHNlOwogCQkJfQogCQl9CiAJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlw
ZSAhPSBudWxsICYmIHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlLmlzVmFsaWRCaW5kaW5n
KCkpIHsKQEAgLTcwNCw4ICs2OTksMTAgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJCXNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnR5cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxWYWx1ZUlm
RmFsc2VUeXBlLCB0YXJnZXRUeXBlLCB0aGlzLnZhbHVlSWZGYWxzZSwgbnVsbCk7CisJCQkJb2sg
PSBmYWxzZTsKIAkJCX0KIAkJfQorCQlyZXR1cm4gb2s7CiAJfQogCiAJcHVibGljIHZvaWQgc2V0
RXhwZWN0ZWRUeXBlKFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSkgewpAQCAtNzIwLDE2ICs3MTcs
OSBAQAogCQlyZXR1cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKIAl9CiAJCi0JcHVibGljIFR5
cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRU
eXBlLCBTY29wZSBzY29wZSkgewotCQkvLyBpbiAxLjggaWYgdHJlYXRlZCBhcyBhIHBvbHkgZXhw
cmVzc2lvbjoKLQkJaWYgKGlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJdGFyZ2V0VHlwZSA9IHRh
cmdldFR5cGUudW5jYXB0dXJlKHRoaXMucG9seUV4cHJlc3Npb25TY29wZSk7Ci0JCQl0aGlzLm9y
aWdpbmFsVmFsdWVJZlRydWVUeXBlID0gdGhpcy52YWx1ZUlmVHJ1ZS5jaGVja0FnYWluc3RGaW5h
bFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgc2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZG
YWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUo
dGFyZ2V0VHlwZSwgc2NvcGUpOwotCQkJY29tcHV0ZUNvbnZlcnNpb25zKHRoaXMucG9seUV4cHJl
c3Npb25TY29wZSwgdGFyZ2V0VHlwZSk7Ci0JCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRhcmdldFR5
cGU7Ci0JCX0KLQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOworCXB1YmxpYyBib29sZWFuIGlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxl
LCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc1Bl
cnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCkgCisJCQkJJiYgdGhp
cy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodHlwZVZhcmlhYmxlLCBt
ZXRob2QpOyAvLyBub3QgcGVyZmVjdC4KIAl9CiAJCiAJcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKQEAgLTczNyw2ICs3MjcsMTEgQEAKIAkJCQkmJiB0aGlzLnZhbHVlSWZGYWxzZS5p
c1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0YXJnZXRUeXBlLCBtZXRob2QpOwogCX0KIAkKKwlA
T3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCQlyZXR1cm4g
dGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlmRmFsc2Uu
aXNGdW5jdGlvbmFsVHlwZSgpOworCX0KKwkKIAlwdWJsaWMgYm9vbGVhbiBpc1BvbHlFeHByZXNz
aW9uKCkgdGhyb3dzIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uIHsKIAkJCiAJCWlmICgh
dGhpcy51c2UxOHNwZWNpZmljcykKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25z
dHJ1Y3RvckNhbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2
YQppbmRleCAyNDM0OTE1Li5hMTYxMzJhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0
Q29uc3RydWN0b3JDYWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9y
Q2FsbC5qYXZhCkBAIC01Niw3ICs1Niw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlZhcmlhYmxlQmluZGluZzsKLWltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIAog
cHVibGljIGNsYXNzIEV4cGxpY2l0Q29uc3RydWN0b3JDYWxsIGV4dGVuZHMgU3RhdGVtZW50IGlt
cGxlbWVudHMgSW52b2NhdGlvbiB7CiAKQEAgLTc2LDEwICs3NSw2IEBACiAKIAkvLyBUT0RPIFJl
bW92ZSBvbmNlIERPTVBhcnNlciBpcyBhY3RpdmF0ZWQKIAlwdWJsaWMgaW50IHR5cGVBcmd1bWVu
dHNTb3VyY2VTdGFydDsKLQotCSAvLyBob2xkIG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9j
YXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVy
ZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgotCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUv
KjxQR01CLEluZmVyZW5jZUNvbnRleHQxOD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcml2YXRl
IElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwogCiAJcHVibGljIEV4
cGxpY2l0Q29uc3RydWN0b3JDYWxsKGludCBhY2Nlc3NNb2RlKSB7CiAJCXRoaXMuYWNjZXNzTW9k
ZSA9IGFjY2Vzc01vZGU7CkBAIC0zOTQsMTAgKzM4OSw2IEBACiAJCQkJCWlmICgoYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCkgewogCQkJCQkJ
YXJnSGFzRXJyb3IgPSB0cnVlOwogCQkJCQl9Ci0JCQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwg
KChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pICYmICgoSW52b2NhdGlvbikgYXJndW1l
bnQpLnVzZXNJbmZlcmVuY2UoKSkpKSB7Ci0JCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5jZUhl
bHBlciA9PSBudWxsKQotCQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5u
ZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQkJfQogCQkJCX0KIAkJCQlpZiAoYXJnSGFzRXJyb3Ip
IHsKIAkJCQkJaWYgKHJlY2VpdmVyVHlwZSA9PSBudWxsKSB7CkBAIC00OTgsNTYgKzQ4OSwyMiBA
QAogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsKIAl9CiAKLQkvLyAtLSBpbnRlcmZh
Y2UgSW52b2NhdGlvbjogLS0KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewotCQlp
ZiAocmVwb3J0RXJyb3JzKSB7Ci0JCQlpZiAodGhpcy5iaW5kaW5nID09IG51bGwpCi0JCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJjb25zdHJ1Y3RvciBp
cyB1bmV4cGVjdGVkbHkgdW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQllbHNl
IGlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQkJc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JCX0KKwkv
LyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvbgorCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmco
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXMuYmlu
ZGluZzsKIAl9CisKKwlwdWJsaWMgdm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGlu
ZkN0eDE4KSB7CisJCS8vIE5vdGhpbmcgdG8gZG8uCisJfQorCQorCXB1YmxpYyBJbmZlcmVuY2VD
b250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCQogCXB1YmxpYyBFeHByZXNzaW9uW10gYXJn
dW1lbnRzKCkgewogCQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7CiAJfQotCXB1YmxpYyBib29sZWFu
IHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUpIHsKLQkJYm9vbGVhbiBoYXNVcGRhdGUgPSB0aGlzLmJpbmRpbmcgIT0gdXBk
YXRlZEJpbmRpbmc7Ci0JCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwpIHsKLQkJ
CUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRoaXMuaW5mZXJl
bmNlQ29udGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7Ci0JCQlpZiAoY3R4ICE9IG51bGwg
JiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIHsKLQkJCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1cGRhdGVkQmluZGluZywg
Y3R4KTsKLQkJCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIgaW5mZXJl
bmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRlZXAgaW5u
ZXJzKToKLQkJCQloYXNVcGRhdGUgfD0gY3R4LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwg
dXBkYXRlZEJpbmRpbmcpOwotCQkJfQotCQl9Ci0JCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5k
aW5nOwotCQlyZXR1cm4gaGFzVXBkYXRlOwotCX0KLQlwdWJsaWMgdm9pZCByZWdpc3RlckluZmVy
ZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5m
ZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7Ci0JCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRz
ID09IG51bGwpCi0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRh
YmxlKCk7Ci0JCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KG1ldGhvZCwgaW5mQ3R4MTgpOwot
CX0KLQlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCWlmICh0aGlzLmluZmVyZW5jZUNvbnRl
eHRzID09IG51bGwpCi0JCQlyZXR1cm4gbnVsbDsKLQkJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0
MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7Ci0JfQotCXB1YmxpYyBib29s
ZWFuIHVzZXNJbmZlcmVuY2UoKSB7Ci0JCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCQkmJiBnZXRJbmZlcmVuY2VD
b250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykg
IT0gbnVsbDsKLQl9Ci0JcHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQkJcmV0
dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbDsKLQl9Ci0JcHVibGljIHZvaWQg
aW5uZXJVcGRhdGVEb25lKCkgewotCQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbnVsbDsK
LQl9Ci0JcHVibGljIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkg
ewotCQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsKLQl9Ci0KIAkvLyAtLSBpbnRl
cmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiAJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBmcmVz
aEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIG5ldyBJbmZlcmVuY2VD
b250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKaW5kZXgg
OTE4YjFiNC4uODdjMGZjZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKQEAgLTk1OSw2ICs5NTksMTAgQEAKIAly
ZXR1cm4gdGhpcy5jb25zdGFudDsKIH0KIAorcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0Fw
cGxpY2FiaWxpdHkoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUsIE1ldGhvZEJpbmRp
bmcgbWV0aG9kKSB7CisJcmV0dXJuIHRydWU7Cit9CisKIHB1YmxpYyBib29sZWFuIGlzUGVydGlu
ZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcg
bWV0aG9kKSB7CiAJcmV0dXJuIHRydWU7CiB9CkBAIC0xMDYwLDE2ICsxMDY0LDYgQEAKIAkJfQog
CX0KIAlyZXR1cm4gZXhwcmVzc2lvblR5cGU7Ci19Ci0KLS8qKgotICogT25jZSBvdXRlciBjb250
ZXh0cyBoYXZlIGZpbmFsaXplZCB0aGUgdGFyZ2V0IHR5cGUgZm9yIHRoaXMgZXhwcmVzc2lvbiwK
LSAqIHBlcmZvcm0gYW55IGNoZWNrcyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiBkZWxheWVkIHByZXZp
b3VzbHkuCi0gKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgZmluYWwgdGFyZ2V0IHR5cGUgKGFrYSBl
eHBlY3RlZFR5cGUpIGZvciB0aGlzIGV4cHJlc3Npb24uCi0gKiBAcGFyYW0gc2NvcGUgc2NvcGUg
Zm9yIGVycm9yIHJlcG9ydGluZwotICovCi1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0
RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0J
cmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOyAvLyBzdWJjbGFzc2VzIG1heSBjaG9vc2UgdG8gZG8g
cmVhbCBzdHVmZiBoZXJlCiB9CiAKIC8qKgpAQCAtMTI1MCw0ICsxMjQ0LDggQEAKIHB1YmxpYyBW
YXJpYWJsZUJpbmRpbmcgbnVsbEFubm90YXRlZFZhcmlhYmxlQmluZGluZyhib29sZWFuIHN1cHBv
cnRUeXBlQW5ub3RhdGlvbnMpIHsKIAlyZXR1cm4gbnVsbDsKIH0KKworcHVibGljIGJvb2xlYW4g
aXNGdW5jdGlvbmFsVHlwZSgpIHsKKwlyZXR1cm4gZmFsc2U7CiB9Cit9ClwgTm8gbmV3bGluZSBh
dCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IDVhYzE0
ZjIuLjUyZjNhYjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24u
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTc0LDkg
Kzc0LDggQEAKIAkJc3VwZXIoKTsKIAl9CiAJCi0JLy8gZm9yIGxhbWJkYSdzIGFuZCByZWZlcmVu
Y2UgZXhwcmVzc2lvbnMgYm94aW5nIGNvbXBhdGliaWxpdHkgaXMgc2FtZSBhcyB2YW5pbGxhIGNv
bXBhdGliaWxpdHkuCiAJcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBl
QmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQlyZXR1cm4gaXNDb21wYXRpYmxl
V2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJCXJldHVybiBmYWxzZTsKIAl9CiAJCiAJcHVibGlj
IHZvaWQgc2V0Q29tcGlsYXRpb25SZXN1bHQoQ29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRpb25S
ZXN1bHQpIHsKQEAgLTEwNywxOSArMTA2LDI3IEBACiAJCXJldHVybiB0cnVlOyAvLyBhbHdheXMg
YXMgcGVyIGludHJvZHVjdGlvbiBvZiBwYXJ0IEQsIEpTUiAzMzUKIAl9CiAKLQlwdWJsaWMgYm9v
bGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBN
ZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQlpZiAodGFyZ2V0VHlwZSBpbnN0YW5jZW9mIFR5cGVW
YXJpYWJsZUJpbmRpbmcpIHsKLQkJCWlmIChtZXRob2QgIT0gbnVsbCkgeyAvLyB3aGVuIGNhbGxl
ZCBmcm9tIHR5cGUgaW5mZXJlbmNlCi0JCQkJaWYgKCgoVHlwZVZhcmlhYmxlQmluZGluZyl0YXJn
ZXRUeXBlKS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZCkKLQkJCQkJcmV0dXJuIGZhbHNlOwot
CQkJCWlmIChtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmICgoVHlwZVZhcmlhYmxlQmluZGluZyl0
YXJnZXRUeXBlKS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZC5kZWNsYXJpbmdDbGFzcykKLQkJ
CQkJcmV0dXJuIGZhbHNlOwotCQkJfSBlbHNlIHsgLy8gZm9yIGludGVybmFsIGNhbGxzCi0JCQkJ
VHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUgPSAoVHlwZVZhcmlhYmxlQmluZGluZykg
dGFyZ2V0VHlwZTsKLQkJCQlpZiAodHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQgaW5zdGFu
Y2VvZiBNZXRob2RCaW5kaW5nKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9CisJQE92ZXJyaWRl
CisJcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsKKwkJcmV0dXJuIHRydWU7CisJ
fQorCQorCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJp
YWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCQlpZiAo
bWV0aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxsZWQgZnJvbSB0eXBlIGluZmVyZW5jZQorCQkJ
aWYgKHR5cGVWYXJpYWJsZS5kZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZCkKKwkJCQlyZXR1cm4g
ZmFsc2U7CisJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiB0eXBlVmFyaWFibGUuZGVj
bGFyaW5nRWxlbWVudCA9PSBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpCisJCQkJcmV0dXJuIGZhbHNl
OworCQl9IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKKwkJCWlmICh0eXBlVmFyaWFibGUu
ZGVjbGFyaW5nRWxlbWVudCBpbnN0YW5jZW9mIE1ldGhvZEJpbmRpbmcpCisJCQkJcmV0dXJuIGZh
bHNlOwogCQl9CisJCXJldHVybiB0cnVlOworCX0KKwkKKwlwdWJsaWMgYm9vbGVhbiBpc1BlcnRp
bmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5n
IG1ldGhvZCkgeworCQlpZiAodGFyZ2V0VHlwZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRp
bmcpCisJCQlyZXR1cm4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoKFR5cGVWYXJpYWJsZUJp
bmRpbmcpIHRhcmdldFR5cGUsIG1ldGhvZCk7CiAJCXJldHVybiB0cnVlOwogCX0KIApAQCAtMjAz
LDExICsyMTAsNiBAQAogCQkJCWJyZWFrOwogCQl9CiAJCXJldHVybiBudWxsOwotCX0KLQotCXB1
YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcg
dGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5j
YXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQlyZXR1cm4gcmVzb2x2ZVR5cGVFeHBlY3Rp
bmcodGhpcy5lbmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7CiAJfQogCiAJY2xhc3MgVmlzaWJp
bGl0eUluc3BlY3RvciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRvciB7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5m
ZXJlbmNlSGVscGVyLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDgzODFiNWMu
LjAwMDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhCisrKyAv
ZGV2L251bGwKQEAgLTEsNDIgKzAsMCBAQAotLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENv
cHlyaWdodCAoYykgMjAxNCBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKLSAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCi0g
KgotICogQ29udHJpYnV0b3JzOgotICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQ
SSBhbmQgaW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwotcGFja2FnZSBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwotCi1pbXBvcnQgamF2YS51dGls
Lkhhc2hNYXA7Ci1pbXBvcnQgamF2YS51dGlsLk1hcDsKLQotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwotCi1wdWJsaWMg
Y2xhc3MgSW5uZXJJbmZlcmVuY2VIZWxwZXIgewotCi0JLyoqIEZvciBlYWNoIGNhbmRpZGF0ZSBt
ZXRob2Qgc3RvcmUgaGVyZSB0aGUgYXJyYXkgb2YgYXJndW1lbnQgdHlwZXMgaWYgaW5uZXIgaW5m
ZXJlbmNlIGhhcyBpbXByb3ZlZCBhbnkgZHVyaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2Uu
ICovCi0JcHJpdmF0ZSBNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPiBhcmdUeXBlc1Bl
ckNhbmRpZGF0ZSA9IG5ldyBIYXNoTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXT4oKTsK
LQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5uZXJSZXN1bHQoTWV0aG9kQmluZGluZyBtZXRob2Qs
IFR5cGVCaW5kaW5nIHJlc29sdmVkVHlwZSwgaW50IGFyZ0NvdW50LCBpbnQgYXJnSWR4KSB7Ci0J
CVR5cGVCaW5kaW5nW10gYXJnVHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldCht
ZXRob2QpOwotCQlpZiAoYXJnVHlwZXMgPT0gbnVsbCkKLQkJCXRoaXMuYXJnVHlwZXNQZXJDYW5k
aWRhdGUucHV0KG1ldGhvZCwgYXJnVHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJnQ291bnRdKTsK
LQkJYXJnVHlwZXNbYXJnSWR4XSA9IHJlc29sdmVkVHlwZTsKLQl9Ci0JCi0JcHVibGljIFR5cGVC
aW5kaW5nW10gZ2V0QXJndW1lbnRUeXBlc0ZvckNhbmRpZGF0ZShNZXRob2RCaW5kaW5nIGNhbmRp
ZGF0ZSwgVHlwZUJpbmRpbmdbXSBwbGFpbkFyZ1R5cGVzKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJn
VHlwZXMgPSB0aGlzLmFyZ1R5cGVzUGVyQ2FuZGlkYXRlLmdldChjYW5kaWRhdGUpOwotCQlpZiAo
YXJnVHlwZXMgPT0gbnVsbCkKLQkJCXJldHVybiBwbGFpbkFyZ1R5cGVzOwotCQkvLyBmaWxsIGlu
IGFueSBibGFua3Mgbm93OgotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ1R5cGVzLmxlbmd0aDsg
aSsrKSB7Ci0JCQlpZiAoYXJnVHlwZXNbaV0gPT0gbnVsbCkKLQkJCQlhcmdUeXBlc1tpXSA9IHBs
YWluQXJnVHlwZXNbaV07Ci0JCX0KLQkJcmV0dXJuIGFyZ1R5cGVzOwotCX0KLX0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmph
dmEKaW5kZXggYWM1NDQ3Zi4uMzhkYzlkYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKQEAgLTE5LDEyICsxOSw4
IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
QmluZGluZzsKIAogLyoqCi0gKiBBYnN0cmFjdGlvbiBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMg
dGhhdCBjYW4gdHJpZ2dlciAKLSAqIDx1bD4KLSAqIDxsaT5JbnZvY2F0aW9uIEFwcGxpY2FiaWxp
dHkgSW5mZXJlbmNlcyAoMTguNS4xKSwgYW5kPC9saT4gCi0gKiA8bGk+SW52b2NhdGlvbiBUeXBl
IEluZmVyZW5jZSAoMTguNS4yKS48L2xpPgotICogPC91bD4KLSAqLworICogQWJzdHJhY3Rpb24g
Zm9yIGludm9jYXRpb24gQVNUIG5vZGVzIHRoYXQgY2FuIHRyaWdnZXIgb3ZlcmxvYWQgcmVzb2x1
dGlvbiBwb3NzaWJseSBpbnZvbHZpbmcgdHlwZSBpbmZlcmVuY2UKKyovCiBwdWJsaWMgaW50ZXJm
YWNlIEludm9jYXRpb24gZXh0ZW5kcyBJbnZvY2F0aW9uU2l0ZSB7CiAKIAlFeHByZXNzaW9uW10g
YXJndW1lbnRzKCk7CkBAIC0zMyw1NyArMjksMjQgQEAKIAkgKiBBbnN3ZXIgdGhlIHJlc29sdmVk
IG1ldGhvZCBiaW5kaW5nIG9mIHRoaXMgaW52b2NhdGlvbi4KIAkgKiBJZiBhIHRhcmdldCB0eXBl
IGlzIGdpdmVuLCB0aGUgaW52b2NhdGlvbiBnZXRzIGEgY2hhbmNlIHRvIGRvIHJlcGVhdGVkIG1l
dGhvZCBsb29rdXAuCiAJICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIHRhcmdldCB0eXBlIG9mIHRo
aXMgaW52b2NhdGlvbiBvciBudWxsIGlmIG5vdCB5ZXQga25vd24KLQkgKiBAcGFyYW0gcmVwb3J0
RXJyb3JzIGlmIHRydWUgdGhlbiB0aGlzIGlzIHRoZSBsYXN0IGNhbGwsIGlmIG5vIHZhbGlkIGJp
bmRpbmcgY2FuIGJlIGFuc3dlcmVkIHdlIHNob3VsZCByZXBvcnQgYW4gZXJyb3IKLQkgKiBAcGFy
YW0gc2NvcGUgaWYgcmVwb3J0RXJyb3JzIGlzIHRydWUgdGhlbiB0aGlzIHNjb3BlIGNhbiBiZSB1
c2VkIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0gc2NvcGUgdGhlIHNjb3BlIHRvIHVz
ZSBmb3IgbG9va3VwLgogCSAqIAogCSAqLwotCU1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywgU2NvcGUgc2NvcGUpOwotCisJ
TWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3Bl
KTsKKwkKIAkvKioKIAkgKiBSZWdpc3RlciB0aGUgZ2l2ZW4gaW5mZXJlbmNlIGNvbnRleHQsIHdo
aWNoIHByb2R1Y2VkIHRoZSBnaXZlbiBtZXRob2QgYXMgaXRzIGludGVybWVkaWF0ZSByZXN1bHQu
CiAJICogTGF0ZXIgd2hlbiB0aGUgc2FtZSBtZXRob2QgaXMgc2VsZWN0ZWQgYXMgdGhlIG1vc3Qg
c3BlY2lmaWMgbWV0aG9kLCB0aGUgaW5mZXJlbmNlIGNvbnRleHQKLQkgKiBmb3IgdGhpcyBwYWly
IChJbnZvY2F0aW9uIHggTWV0aG9kQmluZGluZykgY2FuIGJlIGxvb2tlZCB1cCB1c2luZyB7QGxp
bmsgI2dldEV4cHJlc3Npb25Db250ZXh0KCl9CisJICogZm9yIHRoaXMgcGFpciAoSW52b2NhdGlv
biB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0BsaW5rICNnZXRJbmZl
cmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKX0KIAkgKiB0byBjb250aW51
ZSB0aGUgdHlwZSBpbmZlcmVuY2UuCiAJICovCiAJdm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRl
eHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29u
dGV4dDE4IGluZkN0eDE4KTsKLQkKKwogCS8qKgotCSAqIFJldHJpZXZlIGFuIGluZmVyZW5jZSBj
b250ZXh0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kIHdoaWNoIG11c3QgaGF2ZSBiZWVuIHJlZ2lzdGVy
ZWQKLQkgKiB1c2luZyB7QGxpbmsgI3JlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcsIEluZmVyZW5jZUNvbnRleHQxOCl9LgorCSAqIFJldHJp
ZXZlIGFuIGluZmVyZW5jZSBjb250ZXh0IGZvciB0aGUgZ2l2ZW4gbWV0aG9kLgogCSAqIEBwYXJh
bSBtZXRob2QgYW4gaW50ZXJtZWRpYXRlIHJlc29sdmVkIGNhbmRpZGF0ZSBmb3IgdGhpcyBpbnZv
Y2F0aW9uCi0JICogcmV0dXJuIGEgc3VzcGVuZGVkIGluZmVyZW5jZSBjb250ZXh0IG9yIG51bGwg
aWYgbm9uZSB3YXMgcmVnaXN0ZXJlZCBmb3IgdGhpcyBtZXRob2QuCisJICogcmV0dXJuIHRoZSBh
c3NvY2lhdGVkIGluZmVyZW5jZSBjb250ZXh0LgogCSAqLwogCUluZmVyZW5jZUNvbnRleHQxOCBn
ZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCk7CiAK
LQkvKioKLQkgKiBBbnN3ZXIgdHJ1ZSBpZiB0aGlzIGludm9jYXRpb24gaGFzIGRldGVybWluZWQg
aXRzIGJpbmRpbmcgdXNpbmcgaW5mZXJlbmNlLgotCSAqLwotCWJvb2xlYW4gdXNlc0luZmVyZW5j
ZSgpOwotCQotCS8qKgotCSAqIFdoZXJlIHRoZSBBU1Qgbm9kZSBtYXkgaG9sZCByZWZlcmVuY2Vz
IHRvIHRoZSByZXN1bHRzIG9mIEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UsCi0J
ICogdGhpcyBtZXRob2QgYWxsb3dzIHRvIHVwZGF0ZSB0aG9zZSByZWZlcmVuY2VzIHRvIHRoZSBy
ZXN1bHQgb2YgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4KLQkgKiBOb3RlIHRoYXQgcG90ZW50
aWFsbHkgbW9yZSB0aGFuIGp1c3QgdGhlIG1ldGhvZCBiaW5kaW5nIGlzIHVwZGF0ZWQuCi0JICog
QHBhcmFtIHVwZGF0ZWRCaW5kaW5nIHRoZSBmaW5hbCBtZXRob2QgYmluZGluZyBhZnRlciBmdWxs
IGluZmVyZW5jZQotCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0YXJnZXQgdHlwZSB1c2VkIGR1
cmluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlCi0JICogQHJldHVybiB0cnVlIGlmIGFuIHVw
ZGF0ZSBoYXMgaGFwcGVuZWQKLQkgKi8KLQlib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJp
bmRpbmcgdXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpOwotCQotCS8qKgot
CSAqIEFuc3dlciB3aGV0aGVyIHRoZSBjdXJyZW50IGludm9jYXRpb24gaGFzIGlubmVyIGV4cHJl
c3Npb25zIHRoYXQgc3RpbGwgbmVlZCB1cGRhdGluZyBhZnRlciBpbmZlcmVuY2UuCi0JICovCi0J
Ym9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCk7Ci0KLQkvKioKLQkgKiBNYXJrIHRoYXQgdXBkYXRp
bmcgKHRoZSBuZWVkIGZvciB3aGljaCBpcyBzaWduYWxlZCB2aWEge0BsaW5rICNpbm5lcnNOZWVk
VXBkYXRlKCl9KSBoYXMgYmVlbiBkb25lLgotCSAqLwotCXZvaWQgaW5uZXJVcGRhdGVEb25lKCk7
Ci0KLQkvKioKLQkgKiBJZiB0aGlzIGludm9jYXRpb24gaGFzIGFueSBwb2x5IGV4cHJlc3Npb25z
IGFzIGFyZ3VtZW50cywgdGhpcyBtZXRob2QgYW5zd2VycyBhbiBpbmZlcmVuY2UgaGVscGVyIAot
CSAqIHRoYXQgbWVkaWF0ZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29sdXRpb24sIGV2ZW4gaWYgbm8g
YWN0dWFsIGluZmVyZW5jZSBoYXBwZW5zIGZvciB0aGlzIGludm9jYXRpb24uCi0JICovCi0JSW5u
ZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkKIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFF
eHByZXNzaW9uLmphdmEKaW5kZXggMTMzZmNhZC4uZDYzZTUzYSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNz
aW9uLmphdmEKQEAgLTQxLDYgKzQxLDcgQEAKIGltcG9ydCBzdGF0aWMgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dC5JTlZPQ0FUSU9OX0NPTlRF
WFQ7CiAKIGltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7CitpbXBvcnQgamF2YS51dGlsLkhh
c2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLkxpbmtl
ZEhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLlNldDsKQEAgLTIzOCw2ICsyMzksNyBAQAogCQkJ
CXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnR5cGUucmVzb2x2ZVR5
cGUoYmxvY2tTY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7CiAJCX0KIAkJaWYgKHRoaXMu
ZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9PSBJTlZPQ0FU
SU9OX0NPTlRFWFQpIHsKKwkJCXRoaXMucmVzb2x2ZWRDb3BpZXMgPSBuZXcgSGFzaE1hcDxUeXBl
QmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4oKTsKIAkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5k
aW5nKHRoaXMpOwogCQl9IAogCQkKQEAgLTM5Nyw2ICszOTksNyBAQAogCQlpZiAodGhpcy5ib2R5
IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewogCQkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gKEV4
cHJlc3Npb24pIHRoaXMuYm9keTsKIAkJCW5ldyBSZXR1cm5TdGF0ZW1lbnQoZXhwcmVzc2lvbiwg
ZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwgZXhwcmVzc2lvbi5zb3VyY2VFbmQsIHRydWUpLnJlc29s
dmUodGhpcy5zY29wZSk7IC8vIDotKSA7LSkKKwkJCXRoaXMudm9pZENvbXBhdGlibGUgPSB0aGlz
Lm9yaWdpbmFsLnZvaWRDb21wYXRpYmxlID0gZXhwcmVzc2lvbi5zdGF0ZW1lbnRFeHByZXNzaW9u
KCk7CiAJCX0gZWxzZSB7CiAJCQl0aGlzLmJvZHkucmVzb2x2ZSh0aGlzLnNjb3BlKTsKIAkJfQpA
QCAtNzEwLDcgKzcxMyw2IEBACiAJCWlmICghKGxlZnQgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5k
aW5nKSkKIAkJCXJldHVybiBmYWxzZTsKIAotCQlsZWZ0ID0gbGVmdC51bmNhcHR1cmUodGhpcy5l
bmNsb3NpbmdTY29wZSk7CiAJCXNoYXBlQW5hbHlzaXM6IGlmICghdGhpcy5zaGFwZUFuYWx5c2lz
Q29tcGxldGUpIHsKIAkJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5j
bG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShz
aWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKIAkJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21w
aWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwpAQCAt
ODEzLDYgKzgxNSw4IEBACiAJCXJldHVybiB0cnVlOwogCX0KIAorCXByaXZhdGUgSGFzaE1hcDxU
eXBlQmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4gcmVzb2x2ZWRDb3BpZXM7CisJCiAJLyoqCiAJ
ICogR2V0IGEgcmVzb2x2ZWQgY29weSBvZiB0aGlzIGxhbWJkYSBmb3IgdXNlIGJ5IHR5cGUgaW5m
ZXJlbmNlLCBhcyB0byBhdm9pZCBzcGlsbGluZyBhbnkgcHJlbWF0dXJlCiAJICogdHlwZSByZXN1
bHRzIGludG8gdGhlIG9yaWdpbmFsIGxhbWJkYS4KQEAgLTgyMSwxMiArODI1LDIxIEBACiAJICog
QHJldHVybiBhIHJlc29sdmVkIGNvcHkgb2YgJ3RoaXMnIG9yIG51bGwgaWYgc2lnbmlmaWNhbnQg
ZXJyb3JzIHdoZXJlIGVuY291bnRlcmVkCiAJICovCiAJcHVibGljIExhbWJkYUV4cHJlc3Npb24g
Z2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUpIHsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSB0aGlzLnJlc29sdmVkQ29waWVzLmdl
dCh0YXJnZXRUeXBlKTsKKwkJaWYgKGxhbWJkYSA9PSBudWxsKSB7CisJCQlsYW1iZGEgPSBnZXRS
ZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdldFR5cGUpOworCQkJaWYgKGxh
bWJkYSAhPSBudWxsKSB7CisJCQkJdGhpcy5yZXNvbHZlZENvcGllcy5wdXQodGFyZ2V0VHlwZSwg
bGFtYmRhKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGFtYmRhOworCX0KKwkKKwlwdWJsaWMgTGFt
YmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUpIHsKIAkJLy8gbm90ZTogdGhpcyBpcyBlc3NlbnRpYWxseSBhIHNp
bXBsaWZpZWQgZXh0cmFjdCBmcm9tIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcsU2NvcGUp
LgogCQlpZiAodGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgJiYgdGhpcy5iaW5kaW5nICE9IG51
bGwpCiAJCQlyZXR1cm4gdGhpczsKIAkJCi0JCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVuY2Fw
dHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJLy8gVE9ETzogY2FjaGluZwogCQlJRXJyb3JI
YW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBv
cnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2lsZW50RXJyb3JIYW5kbGluZ1BvbGlj
eSk7CiAJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0aGlzLmVuY2xv
c2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCQlib29sZWFuIGFuYWx5emVOUEUgPSBjb21w
aWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkOwpAQCAtOTQ4
LDYgKzk2MSw3IEBACiAKIAkJaWYgKGNvcHkgIT0gbnVsbCkgeyAvLyA9PT4gc3ludGF4IGVycm9y
cyA9PSBudWxsCiAJCQljb3B5Lm9yaWdpbmFsID0gdGhpczsKKwkJCWNvcHkuZW5jbG9zaW5nU2Nv
cGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlOwogCQl9CiAJCXJldHVybiBjb3B5OwogCX0KQEAgLTk1
Niw3ICs5NzAsNyBAQAogCQlpZiAodGhpcy5vcmlnaW5hbCA9PSB0aGlzKSAvLyBub3QgaW4gb3Zl
cmxvYWQgcmVzb2x1dGlvbiBjb250ZXh0LgogCQkJcmV0dXJuOwogCQlpZiAodGhpcy5ib2R5IGlu
c3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGUg
PSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCAhPSBUeXBlSWRzLlRfdm9pZDsK
KwkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVzdWx0VHlwZSAhPSBudWxsICYm
IHJlc3VsdFR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQgPyBmYWxzZSA6IHRydWU7CiAJCQl0aGlz
Lm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zID0gbmV3IEV4cHJlc3Npb25bMV07CiAJCQl0aGlz
Lm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zWzBdID0gZXhwcmVzc2lvbjsKIAkJCXJldHVybjsg
Ly8gdm9pZCBjb21wYXRpYmlsaXR5IGRldGVybWluZWQgdmlhIHN0YXRlbWVudEV4cHJlc3Npb24o
KQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhCmluZGV4IDM1ZmQzZDUuLjAyMjQ5ZDggMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEK
QEAgLTgwLDYgKzgwLDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLk1pc3NpbmdUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRl
cml6ZWRNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZzsKK2ltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBvbHlUeXBlQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBvbHlt
b3JwaGljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CkBAIC0xMTUsMTEgKzEx
NywxMCBAQAogCiAJIC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBh
cHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIChw
ZXIgbWV0aG9kIGNhbmRpZGF0ZSk6CiAJcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZS8qPFBHTUIs
SW5mZXJlbmNlQ29udGV4dDE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByb3RlY3RlZCBJbm5l
ckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcjsKIAlwcml2YXRlIGJvb2xlYW4g
cmVjZWl2ZXJJc1R5cGU7CiAJcHJvdGVjdGVkIGJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0OwogCXB1
YmxpYyBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlM7
Ci0JcHVibGljIGJvb2xlYW4gYXJndW1lbnRzSGF2ZUVycm9yczsKKwlwdWJsaWMgYm9vbGVhbiBh
cmd1bWVudHNIYXZlRXJyb3JzID0gZmFsc2U7CiAJCiAKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNl
Q29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZs
b3dJbmZvIGZsb3dJbmZvKSB7CkBAIC01OTMsMTE0ICs1OTQsMTExIEBACiB9CiAKIHB1YmxpYyBU
eXBlQmluZGluZyByZXNvbHZlVHlwZShCbG9ja1Njb3BlIHNjb3BlKSB7Ci0JLy8gQW5zd2VyIHRo
ZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUKKwkvLyBBbnN3ZXIgdGhlIHNpZ25hdHVyZSByZXR1cm4g
dHlwZSwgYW5zd2VycyBQb2x5VHlwZUJpbmRpbmcgaWYgdGhlcmUgaXMgYXQgbGVhc3Qgb25lIGdl
bmVyaWMgb3ZlcmxvYWRlZCBjYW5kaWRhdGUgdGhhdCBlbmNvZGVkIHR5cGUgdmFyaWFibGVzIGlu
IHJldHVybiB0eXBlIGFuZCB0aGVyZSBpcyBubyB0YXJnZXQgdHlwZSAgCiAJLy8gQmFzZSB0eXBl
IHByb21vdGlvbgorCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkg
eworCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50OworCQlsb25nIHNvdXJj
ZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWw7CisJCWJvb2xlYW4g
cmVjZWl2ZXJDYXN0ID0gZmFsc2U7CisJCWlmICh0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgQ2Fz
dEV4cHJlc3Npb24pIHsKKwkJCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBBU1ROb2RlLkRpc2FibGVV
bm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgorCQkJcmVjZWl2ZXJD
YXN0ID0gdHJ1ZTsKKwkJfQorCQl0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2
ZXIucmVzb2x2ZVR5cGUoc2NvcGUpOworCQl0aGlzLnJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNl
aXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5y
ZWNlaXZlcikuYml0cyAmIEJpbmRpbmcuVFlQRSkgIT0gMDsKKwkJaWYgKHJlY2VpdmVyQ2FzdCAm
JiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7CisJCQkvLyBkdWUgdG8gY2hhbmdl
IG9mIGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUsIG9ubHkgaWRlbnRpdHkgY2Fz
dCBzaG91bGQgYmUgbm90aWZpZWQKKwkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChD
YXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhp
cy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5u
ZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKKwkJCX0KKwkJfQor
CQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxs
KQorCQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsKKwkJCWludCBsZW5ndGggPSB0
aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0g
c291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFs
bCBhcmd1bWVudHMKKwkJCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlU
eXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJ
aWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZl
VHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJdGhp
cy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKKwkJCQl9CisJCQkJaWYgKHRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJ
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVm
ZXJlbmNlKTsKKwkJCQl9CisJCQl9CisJCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7
CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byBy
ZXNvbHZlIGFyZ3VtZW50cworCQkJCQlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhpcy5hcmd1bWVu
dHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29s
dmVUeXBlKHNjb3BlKTsKKwkJCQkJfQorCQkJCX0KKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJ
fQorCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJlIHJlc29sdmVkCisJCWlm
ICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMg
PSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJCQlpbnQgbGVuZ3RoID0gdGhp
cy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5k
aW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKXsKKwkJCQlF
eHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkJaWYgKHRoaXMuYXJn
dW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZv
dW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKKwkJCQlpZiAoYXJndW1lbnQgaW5z
dGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgeworCQkJCQlhcmd1bWVudC5iaXRzIHw9IEFTVE5vZGUu
RGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJ
CXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhw
cmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKKwkJCQlpZiAoKHRoaXMuYXJndW1l
bnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CisJCQkJ
CXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7CisJCQkJfQorCQkJfQorCQkJaWYgKHRo
aXMuYXJndW1lbnRzSGF2ZUVycm9ycykgeworCQkJCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlw
ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJLy8gIHJlY29yZCBhIGJlc3Qg
Z3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1h
dGNoCisJCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5n
dGhdOworCQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspCisJCQkJCQlwc2V1ZG9B
cmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxM
IDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0
aCBudWxsIHR5cGUKIAotCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7Ci0J
bG9uZyBzb3VyY2VMZXZlbCA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsOwot
CWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0gZmFsc2U7Ci0JaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFu
Y2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQl0aGlzLnJlY2VpdmVyLmJpdHMgfD0gQVNUTm9kZS5E
aXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KLQkJcmVj
ZWl2ZXJDYXN0ID0gdHJ1ZTsKLQl9Ci0JaWYgKHRoaXMucmVjZWl2ZXIucmVzb2x2ZWRUeXBlICE9
IG51bGwpCi0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigi
UmVjZWl2ZXIgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04t
TkxTLTEkCi0JdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlzLnJlY2VpdmVyLnJlc29sdmVU
eXBlKHNjb3BlKTsKLQl0aGlzLnJlY2VpdmVySXNUeXBlID0gdGhpcy5yZWNlaXZlciBpbnN0YW5j
ZW9mIE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcikuYml0
cyAmIEJpbmRpbmcuVFlQRSkgIT0gMDsKLQlpZiAocmVjZWl2ZXJDYXN0ICYmIHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlICE9IG51bGwpIHsKLQkJIC8vIGR1ZSB0byBjaGFuZ2Ugb2YgZGVjbGFyaW5n
IGNsYXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBjYXN0IHNob3VsZCBiZSBu
b3RpZmllZAotCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKCgoQ2FzdEV4cHJlc3Npb24p
dGhpcy5yZWNlaXZlcikuZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUsIHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlKSkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChD
YXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKLQkJfQotCX0KLQkvLyByZXNvbHZlIHR5cGUg
YXJndW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxsKQotCWlmICh0aGlzLnR5cGVB
cmd1bWVudHMgIT0gbnVsbCkgewotCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJndW1lbnRzLmxl
bmd0aDsKLQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gc291cmNlTGV2ZWwgPCBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJdGhpcy5n
ZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVu
Y2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07Ci0JCQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1
bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNr
IGJvdW5kcyovKSkgPT0gbnVsbCkgewotCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRy
dWU7Ci0JCQl9Ci0JCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzICYmIHR5cGVSZWZlcmVu
Y2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmls
bGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJlZmVyZW5jZSk7Ci0JCQl9Ci0JCX0KLQkJaWYgKHRo
aXMuYXJndW1lbnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwp
IHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cwotCQkJCWZvciAoaW50IGkg
PSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgewotCQkJCQl0
aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7Ci0JCQkJfQotCQkJfQotCQkJcmV0
dXJuIG51bGw7Ci0JCX0KLQl9Ci0JLy8gd2lsbCBjaGVjayBmb3IgbnVsbCBhZnRlciBhcmdzIGFy
ZSByZXNvbHZlZAotCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCXRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKLQkJaW50
IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1bWVudFR5cGVzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYg
KHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKLQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVj
dGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQkJaWYgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IEFT
VE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9u
Ci0JCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOwotCQkJfQotCQkJYXJndW1lbnQuc2V0
RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCWlmICgodGhpcy5hcmd1
bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKLQkJ
CQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOwotCQkJfQotCQkJaWYgKHNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJCQlpZiAoYXJndW1lbnQuaXNQ
b2x5RXhwcmVzc2lvbigpCi0JCQkJCXx8IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24g
JiYgKChJbnZvY2F0aW9uKWFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSB7Ci0JCQkJCWlmICh0
aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJCQl0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJfQotCQkJfQotCQl9
Ci0JCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJCWlmICh0aGlzLmFjdHVhbFJl
Y2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKLQkJCQkvLyAgcmVjb3Jk
IGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBt
ZXRob2QgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0FyZ3MgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0gMDspCi0JCQkJCXBz
ZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5n
Lk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9y
cyB3aXRoIG51bGwgdHlwZQotCQkJCXRoaXMuYmluZGluZyA9Ci0JCQkJCXRoaXMucmVjZWl2ZXIu
aXNJbXBsaWNpdFRoaXMoKQotCQkJCQkJPyBzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNl
bGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKQotCQkJCQkJOiBzY29wZS5maW5kTWV0aG9kKChSZWZl
cmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgcHNl
dWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAh
dGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBjbG9z
ZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1h
dGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBt
YXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlpZiAo
Y2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwo
KS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJp
YyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNp
ZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkK
LQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRp
bmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0J
CQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9y
aWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQ
cml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmln
aW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJv
bSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJCQlj
bG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5B
Y2NMb2NhbGx5VXNlZDsKKwkJCQkJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxp
Y2l0VGhpcygpID8KKwkJCQkJCQkJc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3Rv
ciwgcHNldWRvQXJncywgdGhpcykgOgorCQkJCQkJCQkJc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJl
bmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIHBzZXVk
b0FyZ3MsIHRoaXMsIGZhbHNlKTsKKworCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYg
IXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0
TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdo
byBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQkJ
aWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmln
aW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBn
ZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9k
IG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3
NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5
cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0
TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nl
c3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09y
RW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nl
c3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9k
IGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9u
cykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGls
ZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9CiAJ
CQkJfQorCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWlmICh0aGlzLmFjdHVhbFJlY2Vp
dmVyVHlwZSA9PSBudWxsKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQorCQkvLyBiYXNlIHR5cGUg
Y2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKKwkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBl
LmlzQmFzZVR5cGUoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhv
ZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsK
IAkJCXJldHVybiBudWxsOwogCQl9CiAJfQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9
PSBudWxsKSB7Ci0JCXJldHVybiBudWxsOworCQorCVR5cGVCaW5kaW5nIG1ldGhvZFR5cGUgPSBm
aW5kTWV0aG9kQmluZGluZyhzY29wZSk7CisJaWYgKG1ldGhvZFR5cGUgIT0gbnVsbCAmJiBtZXRo
b2RUeXBlLmlzUG9seVR5cGUoKSkgeworCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMuYmluZGlu
Zy5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKTsKKwkJcmV0dXJuIG1l
dGhvZFR5cGU7CiAJfQotCS8vIGJhc2UgdHlwZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQot
CWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBlKCkpIHsKLQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JZmluZE1l
dGhvZEJpbmRpbmcoc2NvcGUpOwogCiAJaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmco
KSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09IG51bGwpIHsKQEAgLTcy
Myw2ICs3MjEsMTIgQEAKIAkJc3dpdGNoICh0aGlzLmJpbmRpbmcucHJvYmxlbUlkKCkpIHsKIAkJ
CWNhc2UgUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzIDoKIAkJCQlicmVhazsgLy8gbm8gcmVzaWxp
ZW5jZSBvbiBhbWJpZ3VvdXMKKwkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW5mZXJyZWRBcHBsaWNh
YmxlTWV0aG9kSW5hcHBsaWNhYmxlOgorCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbnZvY2F0aW9u
VHlwZUluZmVyZW5jZUZhaWx1cmU6CisJCQkJLy8gR3JhYmJpbmcgdGhlIGNsb3Nlc3QgbWF0Y2gg
aW1wcm92ZXMgZXJyb3IgcmVwb3J0aW5nIGluIG5lc3RlZCBpbnZvY2F0aW9uIGNvbnRleHRzCisJ
CQkJaWYgKHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gSU5WT0NBVElPTl9DT05URVhUKQorCQkJ
CQlicmVhazsKKwkJCQkvLyRGQUxMLVRIUk9VR0gkCiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5v
dFZpc2libGUgOgogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob25TdGF0aWNSZWZlcmVuY2VJbkNv
bnN0cnVjdG9ySW52b2NhdGlvbiA6CiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1Jl
ZmVyZW5jZUluU3RhdGljQ29udGV4dCA6CkBAIC04NjAsMTYgKzg2NCwyMCBAQAogCQkJCT8gdGhp
cy5yZXNvbHZlZFR5cGUKIAkJCQk6IG51bGw7CiB9Ci0vKioKLSAqIEZpbmQgdGhlIG1ldGhvZCBi
aW5kaW5nOyAKLSAqIGlmIHRoaXMuaW5uZXJzTmVlZFVwZGF0ZSBhbGxvdyBmb3IgdHdvIGF0dGVt
cHRzIHdoZXJlIHRoZSBmaXJzdCByb3VuZCBtYXkgc3RvcAotICogYWZ0ZXIgYXBwbGljYWJpbGl0
eSBjaGVja2luZyAoMTguNS4xKSB0byBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24gaW50byB0aGUg
ZmluYWwKLSAqIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKDE4LjUuMikuCi0gKi8KLXByb3Rl
Y3RlZCB2b2lkIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQl0aGlzLmJp
bmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkKLQkJCT8gc2NvcGUuZ2V0SW1w
bGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKQorCitw
cm90ZWN0ZWQgVHlwZUJpbmRpbmcgZmluZE1ldGhvZEJpbmRpbmcoQmxvY2tTY29wZSBzY29wZSkg
eworCQorCQorCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKSA/
IAorCQkJc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKSAKIAkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpOworCisJaWYgKHRo
aXMuYmluZGluZyA9PSBudWxsKSAvLyBjYW4ndCBoYXBwZW4gPyBJIHRoaW5rIHdlIGFsd2F5cyBn
ZXQgYSBwcm9ibGVtIGJpbmRpbmcsIGFueXdheXMuCisJCXJldHVybiBudWxsOworCQorCWlmICh0
aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKQorCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKKwkKIAlyZXNvbHZlUG9s
eUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHNjb3BlKTsKIAkKIAkvKiBUaGVyZSBhcmUgZW1iZWRkZWQgYXNzdW1wdGlvbnMgaW4gdGhl
IEpMUzggdHlwZSBpbmZlcmVuY2Ugc2NoZW1lIHRoYXQgYSBzdWNjZXNzZnVsIHNvbHV0aW9uIG9m
IHRoZSB0eXBlIGVxdWF0aW9ucyByZXN1bHRzIGluIGFuCkBAIC04ODQsMTEgKzg5Miw4IEBACiAJ
ZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0
aW9ucygpOwogCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfOCAmJiB0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJ
aWYgKCFjb21waWxlck9wdGlvbnMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNo
ZWNrKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQlQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGdtYiA9IChQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZzsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0
eCA9IGdldEluZmVyZW5jZUNvbnRleHQocGdtYik7Ci0JCWlmIChjdHggPT0gbnVsbCB8fCBjdHgu
c3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKQotCQkJ
cmV0dXJuOwogCQlpbnQgbGVuZ3RoID0gcGdtYi50eXBlQXJndW1lbnRzID09IG51bGwgPyAwIDog
cGdtYi50eXBlQXJndW1lbnRzLmxlbmd0aDsKIAkJYm9vbGVhbiBzYXdSYXdUeXBlID0gZmFsc2U7
CiAJCWZvciAoaW50IGkgPSAwOyAgaSA8IGxlbmd0aDsgaSsrKSB7CkBAIC04OTcsNDAgKzkwMiwy
NiBAQAogCQkJICAgZG9lcyBub3QgYXBwZWFyIGZ1bGx5IGhvb2tlZCB1cCBpbnRvIGlzQ29tcGF0
aWJsZVdpdGggYW5kIGlzRXF1aXZhbGVudCB0byBldmVyeXdoZXJlLiBBdCB0aGUgbW9tZW50LCBi
YWlsIG91dCBpZiB3ZSBzZWUgY2FwdHVyZS4KIAkJCSovICAgCiAJCQlpZiAocGdtYi50eXBlQXJn
dW1lbnRzW2ldLmlzQ2FwdHVyZSgpKQotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5k
aW5nLnJldHVyblR5cGU7CiAJCQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3VHlwZSgp
KQogCQkJCXNhd1Jhd1R5cGUgPSB0cnVlOwogCQl9CiAJCWlmICghc2F3UmF3VHlwZSkKLQkJCXJl
dHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJbGVuZ3RoID0gdGhp
cy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CiAJCWlmIChs
ZW5ndGggPT0gMCkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlw
ZTsKIAkJVHlwZUJpbmRpbmcgW10gZmluYWxBcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5n
W2xlbmd0aF07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCVR5cGVC
aW5kaW5nIGZpbmFsQXJndW1lbnRUeXBlID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBl
OwogCQkJaWYgKGZpbmFsQXJndW1lbnRUeXBlID09IG51bGwgfHwgIWZpbmFsQXJndW1lbnRUeXBl
LmlzVmFsaWRCaW5kaW5nKCkpICAvLyBhbHJlYWR5IHNpZGVkIHdpdGggdGhlIGRldmlsLgotCQkJ
CXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlmaW5hbEFy
Z3VtZW50VHlwZXNbaV0gPSBmaW5hbEFyZ3VtZW50VHlwZTsgCiAJCX0KLQkJaWYgKHNjb3BlLnBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBl
cywgZmFsc2UsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJMRSkKKwkJaWYgKHNjb3BlLnBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcsIGZpbmFsQXJndW1lbnRUeXBl
cywgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxFKQogCQkJdGhpcy5iaW5kaW5nID0gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLCB0aGlzLmJpbmRp
bmcuc2VsZWN0b3IsIGZpbmFsQXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQp
OwogCX0KLX0KLQotQE92ZXJyaWRlCi1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JaWYg
KHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFy
YW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHggIT0gbnVs
bCAmJiBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVE
KSB7Ci0JCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2NhdGlvblR5cGUodGhpcywgKFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJCWlmICh1cGRhdGVC
aW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlwZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29s
dmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1cGRhdGVkQmluZGluZywgc2NvcGUpOwot
CQkJfQotCQl9Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKKwlyZXR1cm4gdGhpcy5i
aW5kaW5nLnJldHVyblR5cGU7CiB9CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2VpdmVyVHlw
ZShSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewpAQCAtOTY2LDYgKzk1Nyw0MSBAQAog
CSAqLwogCXJldHVybiBpc1BvbHlFeHByZXNzaW9uKHRoaXMuYmluZGluZyk7CiB9CisKK3B1Ymxp
YyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
U2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzIHx8IHRoaXMuYmlu
ZGluZyA9PSBudWxsIHx8ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSB8fCB0YXJnZXRU
eXBlID09IG51bGwgfHwgc2NvcGUgPT0gbnVsbCkKKwkJcmV0dXJuIGZhbHNlOworCWlmIChpc1Bv
bHlFeHByZXNzaW9uKCkgJiYgIXRhcmdldFR5cGUuaXNQcmltaXRpdmVPckJveGVkUHJpbWl0aXZl
VHlwZSgpKSAvLyBpLmUgaXQgaXMgZHVtYiB0byB0cmlnZ2VyIGluZmVyZW5jZSwgY2hlY2tpbmcg
Ym94aW5nIGNvbXBhdGliaWxpdHkgYWdhaW5zdCBzYXkgQ29sbGVjdG9yPD8gc3VwZXIgVCwgQSwg
Uj4uCisJCXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmlnaW5hbEV4cGVjdGVkVHlwZSA9
IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0
VHlwZTsKKwkJLy8gTm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBvdmVybG9hZCByZXNvbHV0aW9u
LiB0aGlzLmJpbmRpbmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gaXNQ
b2x5RXhwcmVzc2lvbigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpLCB0aGlz
LmFyZ3VtZW50VHlwZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmluZGluZzsKKwkJaWYgKG1ldGhv
ZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJuVHlw
ZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJcmV0
dXJuIGZhbHNlOworCQlyZXR1cm4gc3VwZXIuaXNCb3hpbmdDb21wYXRpYmxlKG1ldGhvZC5yZXR1
cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKSwgdGFyZ2V0VHlwZSwgdGhpcywg
c2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb3JpZ2luYWxFeHBl
Y3RlZFR5cGU7CisJfQorfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlz
VmFsaWRCaW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJ
CXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmlnaW5hbEV4cGVjdGVkVHlwZSA9IHRoaXMu
ZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsK
KwkJLy8gTm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBvdmVybG9hZCByZXNvbHV0aW9uLiB0aGlz
LmJpbmRpbmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gaXNQb2x5RXhw
cmVzc2lvbigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxsb3dPcmlnaW5hbCgpLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmluZGluZzsKKwkJaWYgKG1ldGhvZCA9PSBu
dWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCBtZXRob2QucmV0dXJuVHlwZSA9PSBu
dWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJcmV0dXJuIGZh
bHNlOworCQlyZXR1cm4gbWV0aG9kLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3Vy
Y2VFbmQpLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCX0gZmluYWxseSB7
CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb3JpZ2luYWxFeHBlY3RlZFR5cGU7CisJfQorfQorCiAv
KiogVmFyaWFudCBvZiBpc1BvbHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBkdXJpbmcgdHlwZSBp
bmZlcmVuY2UsIHdoZW4gYSByZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMuICovCiBwdWJsaWMg
Ym9vbGVhbiBpc1BvbHlFeHByZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1dGlvbkNhbmRpZGF0
ZSkgewogCWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1FTlRfQ09OVEVYVCAm
JiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKQEAgLTEwMjks
MjEgKzEwNTUsMTAgQEAKIAlyZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwog
fQogLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9kQmluZGluZyBi
aW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29w
ZSBzY29wZSkgewotCWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJaWYgKHRoaXMuYmluZGluZyA9PSBu
dWxsKQotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJt
ZXRob2QgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAot
CQllbHNlIGlmICghdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5pbnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JfQorcHVi
bGljIE1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBz
Y29wZSkgewogCXJldHVybiB0aGlzLmJpbmRpbmc7CiB9Ci1wdWJsaWMgRXhwcmVzc2lvbltdIGFy
Z3VtZW50cygpIHsKLQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7Ci19Ci1wdWJsaWMgRXhwcmVzc2lv
bkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7Ci0JcmV0dXJuIHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQ7Ci19CisKIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4MTgpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQl0aGlz
LmluZmVyZW5jZUNvbnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CkBAIC0xMDU0LDMy
ICsxMDY5LDExIEBACiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4
KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4g
dXNlc0luZmVyZW5jZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBnZXRJbmZlcmVuY2VDb250ZXh0
KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykgIT0gbnVs
bDsKK3B1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgeworCXJldHVybiB0aGlzLmFyZ3Vt
ZW50czsKIH0KLXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBk
YXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQlib29sZWFuIGhhc1VwZGF0
ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlpZiAodGhpcy5pbmZlcmVuY2VD
b250ZXh0cyAhPSBudWxsKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNl
Q29udGV4dDE4KXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7
Ci0JCWlmIChjdHggIT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5w
dXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZy
b20gYW4gb3V0ZXIgaW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25l
IChidXQgbm90IGRlZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1
dGlvbih0YXJnZXRUeXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0KLQl9Ci0JdGhpcy5iaW5kaW5n
ID0gdXBkYXRlZEJpbmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5y
ZXR1cm5UeXBlOwotCXJldHVybiBoYXNVcGRhdGU7Ci19Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNO
ZWVkVXBkYXRlKCkgewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7
Ci19Ci1wdWJsaWMgdm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5j
ZUhlbHBlciA9IG51bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZl
cmVuY2VIZWxwZXIoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7CitwdWJs
aWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CisJcmV0dXJuIHRo
aXMuZXhwcmVzc2lvbkNvbnRleHQ7CiB9CiAvLyAtLSBJbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6
IC0tCiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29w
ZSBzY29wZSkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhw
cmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhCmluZGV4IDU5ZmZiMjAuLmIyZmJkM2IgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlm
aWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFs
bG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTQxMCwxMCArNDEwLDYgQEAKIAkJCQlpZiAoKHRo
aXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVs
bCl7CiAJCQkJCWhhc0Vycm9yID0gdHJ1ZTsKIAkJCQl9Ci0JCQkJaWYgKHNvdXJjZUxldmVsID49
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24o
KSB8fCAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1
bWVudCkudXNlc0luZmVyZW5jZSgpKSkpIHsKLQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgPT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5u
ZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQl9CiAJCQl9CiAJCX0KIApkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YQppbmRleCAzNDMzOGNhLi5kZjM0NTc3IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YQpAQCAtNzI2LDE4ICs3MjYsNiBAQAogCQl9CiAJfQogCi0JcHVibGljIE1l
dGhvZEJpbmRpbmcgcHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdChTY29wZSBzY29wZSkgewotCQl0
cnkgewotCQkJc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCXRo
aXMuYmluZGluZyA9IG51bGw7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IHRydWU7Ci0JCQly
ZXNvbHZlVHlwZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJCXJldHVybiB0aGlzLmJpbmRpbmc7
Ci0JCX0gZmluYWxseSB7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IGZhbHNlOwotCQl9Ci0J
fQotCiAJcHVibGljIGJvb2xlYW4gaXNDb25zdHJ1Y3RvclJlZmVyZW5jZSgpIHsKIAkJcmV0dXJu
IENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc2VsZWN0b3IsICBDb25zdGFudFBvb2wuSW5pdCk7
CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9Cb3VuZFNldC5qYXZhCmluZGV4IGExMzJjOTIuLmI5M2MwNjMgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQm91bmRTZXQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0Lmph
dmEKQEAgLTQ1Niw4ICs0NTYsNiBAQAogCQkJaWYgKCFpbmNvcnBvcmF0ZShjb250ZXh0LCBmcmVz
aEJvdW5kcywgZnJlc2hCb3VuZHMpKQogCQkJCXJldHVybiBmYWxzZTsKIAotCQkJdGhpcy5jYXB0
dXJlcy5jbGVhcigpOwotCQkJCiAJCQkvLyBNZXJnZSB0aGUgYm91bmRzIGludG8gb25lIGluY29y
cG9yYXRlZCBnZW5lcmF0aW9uLgogCQkJZmluYWwgaW50IGluY29ycG9yYXRlZExlbmd0aCA9IHRo
aXMuaW5jb3Jwb3JhdGVkQm91bmRzLmxlbmd0aDsKIAkJCWZpbmFsIGludCB1bmluY29ycG9yYXRl
ZExlbmd0aCA9IGZyZXNoQm91bmRzLmxlbmd0aDsKQEAgLTU4Myw3ICs1ODEsOSBAQAogCQl3aGls
ZSAoY2FwdEl0ZXIuaGFzTmV4dCgpKSB7CiAJCQlFbnRyeTxQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcsIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZz4gY2FwdCA9IGNhcHRJdGVyLm5leHQoKTsKIAkJ
CVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBnQWxwaGEgPSBjYXB0LmdldEtleSgpOwotCQkJUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gY2FwdC5nZXRWYWx1ZSgpOworCQkJLy8gV2UgY29t
ZSBpbiB3aXRoIGNhcHR1cmUoZ0EpLCB3ZSBuZWVkIHRvIHdvcmsgd2l0aCBnQSBiZWxvdy4gSXQg
d2FzIG5lY2Vzc2FyeSB0byBlc3RhYmxpc2ggY2FwdHVyZSBhdCB0aGUgY2FsbCBzaXRlLgorCQkJ
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGNnQSA9IGNhcHQuZ2V0VmFsdWUoKTsKKwkJCVBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZyBnQSA9IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIGNnQS51
bmNhcHR1cmUoY29udGV4dC5zY29wZSk7CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGcgPSAoUmVmZXJl
bmNlQmluZGluZykgZ0Eub3JpZ2luYWwoKTsKIAkJCWZpbmFsIFR5cGVWYXJpYWJsZUJpbmRpbmdb
XSBwYXJhbWV0ZXJzID0gZy50eXBlVmFyaWFibGVzKCk7CiAJCQkvLyBjb25zdHJ1Y3QgdGhldGEg
PSBbUDE6PWFscGhhMSwuLi5dCkBAIC02MDIsNiArNjAyLDcgQEAKIAkJCQlhZGRCb3VuZHMocGku
Z2V0VHlwZUJvdW5kcyhhbHBoYSwgdGhldGEpLCBjb250ZXh0LmVudmlyb25tZW50KTsKIAogCQkJ
CVR5cGVCaW5kaW5nIGFpID0gZ0EuYXJndW1lbnRzW2ldOworCQkJCVR5cGVCaW5kaW5nIGNhaSA9
IGNnQS5hcmd1bWVudHNbaV07CiAJCQkJaWYgKGFpIGluc3RhbmNlb2YgV2lsZGNhcmRCaW5kaW5n
KSB7CiAJCQkJCVdpbGRjYXJkQmluZGluZyB3aWxkY2FyZEJpbmRpbmcgPSAoV2lsZGNhcmRCaW5k
aW5nKWFpOwogCQkJCQlUeXBlQmluZGluZyB0ID0gd2lsZGNhcmRCaW5kaW5nLmJvdW5kOwpAQCAt
NjEzLDcgKzYxNCwxNCBAQAogCQkJCQkJCWl0ID0gdGhyZWUuc2FtZUJvdW5kcy5pdGVyYXRvcigp
OwogCQkJCQkJCXdoaWxlIChpdC5oYXNOZXh0KCkpIHsKIAkJCQkJCQkJVHlwZUJvdW5kIGJvdW5k
ID0gaXQubmV4dCgpOwotCQkJCQkJCQlpZiAoIShib3VuZC5yaWdodCBpbnN0YW5jZW9mIEluZmVy
ZW5jZVZhcmlhYmxlKSkKKwkJCQkJCQkJLyogV2l0aCB0aGUgZXhwZWN0ZWQgdHlwZSdzIGRlY2xh
cmVkIHR5cGUgYmVpbmcgQ29sbGVjdG9yPD8gc3VwZXIgVCwgQSwgUj4gYW5kIGdBbHBoYSBiZWlu
ZyBDb2xsZWN0b3I8VCMwLD8jMSxMaXN0PFQjMD4jMj4gYW5kIGNnQSBiZWluZworCQkJCQkJCQkg
ICBDb2xsZWN0b3I8VCMwLGNhcHR1cmUjMS1vZiA/LExpc3Q8VCMwPj4sIHdpdGhvdXQgdGhlIGNv
bnN0cmFpbnQgcmVkdWN0aW9uIGJlbG93IC0gd2Ugd2lsbCBuZXZlciBkaXNjb3ZlciBBIHRvIGJl
IGNhcHR1cmUjMS1vZiA/IGFuZAorCQkJCQkJCQkgICBjbGFpbSBBIGlzIGpsTy4gU2VlIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc0NDQjYzI0IC0gIzI3
CisJCQkJCQkJCSovCisJCQkJCQkJCWlmICghcmVkdWNlT25lQ29uc3RyYWludChjb250ZXh0LCBD
b25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJvdW5kLnJpZ2h0LCBjYWksIFJlZHVjdGlvblJl
c3VsdC5TQU1FKSkpCisJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJCQkJCS8vIE91ciA9IHJl
ZHVjdGlvbiB0cmFuc2l0aXZlbHkgYWRkcyBhIG5ldyBib3VuZCB0aGF0IG5lY2Vzc2l0YXRlcyB0
aGUgY2hlY2sgYmVsb3cgZm9yIGNhcHR1cmUuIAorCQkJCQkJCQlpZiAoIShib3VuZC5yaWdodCBp
bnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSAmJiAhYm91bmQucmlnaHQuaXNDYXB0dXJlKCkp
CiAJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CiAJCQkJCQkJfQogCQkJCQkJfQpAQCAtNjY4LDYgKzY3
Niw3IEBACiAJCQkJfQogCQkJfQogCQl9CisJCXRoaXMuY2FwdHVyZXMuY2xlYXIoKTsKIAkJcmV0
dXJuIHRydWU7CiAJfQogCkBAIC05NTcsNiArOTY2LDIwIEBACiAJCXJldHVybiB0aHJlZS5maW5k
U2luZ2xlV3JhcHBlclR5cGUoKTsKIAl9CiAKKwlwcml2YXRlIFR5cGVCaW5kaW5nIGFwcGx5SW5z
dGFudGlhdGlvbnMoVHlwZUJpbmRpbmcgdHlwZSkgeworCQlpZiAodHlwZS5pc1Byb3BlclR5cGUo
dHJ1ZSkpCisJCQlyZXR1cm4gdHlwZTsKKwkKKwkJSXRlcmF0b3I8SW5mZXJlbmNlVmFyaWFibGU+
IHZhcmlhYmxlSXQgPSB0aGlzLmJvdW5kc1BlclZhcmlhYmxlLmtleVNldCgpLml0ZXJhdG9yKCk7
CisJCXdoaWxlICh2YXJpYWJsZUl0Lmhhc05leHQoKSkgeworCQkJSW5mZXJlbmNlVmFyaWFibGUg
aW5mZXJlbmNlVmFyaWFibGUgPSB2YXJpYWJsZUl0Lm5leHQoKTsKKwkJCVR5cGVCaW5kaW5nIGlu
c3RhbnRpYXRpb24gPSBnZXRJbnN0YW50aWF0aW9uKGluZmVyZW5jZVZhcmlhYmxlLCBudWxsKTsK
KwkJCWlmIChpbnN0YW50aWF0aW9uICE9IG51bGwpCisJCQkJdHlwZSA9IHR5cGUuc3Vic3RpdHV0
ZUluZmVyZW5jZVZhcmlhYmxlKGluZmVyZW5jZVZhcmlhYmxlLCBpbnN0YW50aWF0aW9uKTsKKwkJ
fQorCQlyZXR1cm4gdHlwZTsKKwl9CisJCiAJLy8gdGhpcyBjb25kaXRpb24gaXMganVzdCB3YXkg
dG9vIGNvbXBsZXggdG8gY2hlY2sgaXQgaW4tbGluZToKIAlwdWJsaWMgYm9vbGVhbiBjb25kaXRp
b24xOF81XzJfYnVsbGV0XzNfM18xKEluZmVyZW5jZVZhcmlhYmxlIGFscGhhLCBUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlKSB7CiAJCS8vIFQgaXMgYSByZWZlcmVuY2UgdHlwZSwgYnV0IGlzIG5vdCBh
IHdpbGRjYXJkLXBhcmFtZXRlcml6ZWQgdHlwZSwgYW5kIGVpdGhlciAKQEAgLTk5Miw4ICsxMDE1
LDE2IEBACiAJCQkJZm9yIChpbnQgaj1pKzE7IGo8bGVuOyBqKyspIHsKIAkJCQkJVHlwZUJpbmRp
bmcgczIgPSBzdXBlckJvdW5kcy5nZXQoaikucmlnaHQ7CiAJCQkJCVR5cGVCaW5kaW5nW10gc3Vw
ZXJzID0gc3VwZXJUeXBlc1dpdGhDb21tb25HZW5lcmljVHlwZShzMSwgczIpOwotCQkJCQlpZiAo
c3VwZXJzICE9IG51bGwgJiYgIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1
cGVyc1sxXSkpCi0JCQkJCQlyZXR1cm4gdHJ1ZTsKKwkJCQkJaWYgKHN1cGVycyAhPSBudWxsKSB7
CisJCQkJCQkvKiBIYXNoTWFwPEsjOCxWIzk+IGFuZCBIYXNoTWFwPEsjOCxBcnJheUxpc3Q8VD4+
IHdpdGggYW4gaW5zdGFudGlhdGlvbiBmb3IgVjkgPSBBcnJheUxpc3Q8VD4gYWxyZWFkeSBpbiB0
aGUgCisJCQkJCQkgICBib3VuZCBzZXQgc2hvdWxkIG5vdCBiZSBzZWVuIGFzIHR3byBkaWZmZXJl
bnQgcGFyYW1ldGVyaXphdGlvbnMgb2YgdGhlIHNhbWUgZ2VuZXJpYyBjbGFzcyBvciBpbnRlcmZh
Y2UuCisJCQkJCQkgICBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTQzMjYyNiBmb3IgYSB0ZXN0IHRoYXQgdHJpZ2dlcnMgdGhpcyBjb25kaXRpb24uCisJ
CQkJCQkqLworCQkJCQkJc3VwZXJzWzBdID0gYXBwbHlJbnN0YW50aWF0aW9ucyhzdXBlcnNbMF0p
OworCQkJCQkJc3VwZXJzWzFdID0gYXBwbHlJbnN0YW50aWF0aW9ucyhzdXBlcnNbMV0pOworCQkJ
CQkJaWYgKCFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoc3VwZXJzWzBdLCBzdXBlcnNbMV0pKQor
CQkJCQkJCXJldHVybiB0cnVlOworCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCA2MjBmNDY2Li4y
ODIwNjM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9y
bXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxh
LmphdmEKQEAgLTE3LDE4ICsxNywxMyBAQAogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogaW1wb3J0
IGphdmEudXRpbC5TZXQ7CiAKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuQVNUVmlzaXRvcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkFsbG9jYXRpb25FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbkNvbnRleHQ7Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5GdW5jdGlvbmFsRXhwcmVzc2lvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRpb247
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHBy
ZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUmVm
ZXJlbmNlRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LlJldHVyblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LlN0YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxOC5TdXNwZW5kZWRJbmZlcmVuY2VSZWNv
cmQ7CiAKIC8qKgpAQCAtNTYsNDEgKzUxLDggQEAKIAogCXB1YmxpYyBPYmplY3QgcmVkdWNlKElu
ZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVy
ZUV4Y2VwdGlvbiB7CiAJCS8vIEpMUyAxOC4yLjEKLQkJcHJvcGVyOgogCQlpZiAodGhpcy5yaWdo
dC5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5s
ZWZ0LnJlc29sdmVkVHlwZTsKLQkJCWlmIChleHByVHlwZSA9PSBudWxsKSB7Ci0JCQkJLy8gaWYg
d2UgZ2V0IGhlcmUgZm9yIHNvbWUga2luZHMgb2YgcG9seSBleHByZXNzaW9ucyAoaW5jbC4gQ29u
ZGl0aW9uYWxFeHByZXNzaW9uKSwKLQkJCQkvLyB0aGVuIG90aGVyIHdheXMgZm9yIGNoZWNraW5n
IGNvbXBhdGliaWxpdHkgYXJlIG5lZWRlZDoKLSAgICAgICAgICAgICAgICBpZiAodGhpcy5sZWZ0
IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKLSAgICAgICAgICAgICAgICAgICAg
aWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKLSAgICAgICAgICAg
ICAgICAgICAgICAgIC8vIGNmLiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25UZXN0LnRlc3Q0MTI0
NTMoKQotICAgICAgICAgICAgICAgICAgICAgICAgTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gKChM
YW1iZGFFeHByZXNzaW9uKSB0aGlzLmxlZnQpLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRh
cmdldGluZyh0aGlzLnJpZ2h0KTsKLSAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoY29w
eSAhPSBudWxsICYmIGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5
cGUuaXNWYWxpZEJpbmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICAgICAgICAg
IH0KLSAgICAgICAgICAgICAgICB9Ci0gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGVmdC5p
c0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpID8gVFJV
RSA6IEZBTFNFOwotCQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewot
CQkJCXJldHVybiBGQUxTRTsKLQkJCX0KLQkJCWlmIChpc0NvbXBhdGlibGVXaXRoSW5Mb29zZUlu
dm9jYXRpb25Db250ZXh0KGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0KSkg
ewotCQkJCXJldHVybiBUUlVFOwotCQkJfSBlbHNlIGlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBB
bGxvY2F0aW9uRXhwcmVzc2lvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0J
CQkJLy8gaGFsZi1yZXNvbHZlZCBkaWFtb25kIGhhcyBhIHJlc29sdmVkVHlwZSwgYnV0IHRoYXQg
bWF5IG5vdCBiZSB0aGUgZmluYWwgd29yZCwgdHJ5IG9uZSBtb3JlIHN0ZXAgb2YgcmVzb2x1dGlv
bjoKLSAgICAgICAgICAgIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoKEFsbG9jYXRpb25FeHBy
ZXNzaW9uKSB0aGlzLmxlZnQpLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAg
ICAgICAgICAgCXJldHVybiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuZGVjbGFyaW5nQ2xh
c3MuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSkg
PyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5j
ZW9mIEludm9jYXRpb24gJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJlc3Npb24oKSkgewotICAgICAg
ICAgICAgCUludm9jYXRpb24gaW52b2MgPSAoSW52b2NhdGlvbikgdGhpcy5sZWZ0OwotICAgICAg
ICAgICAgCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jLmJpbmRpbmcodGhpcy5yaWdodCwg
ZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0gICAgICAgICAgICAJCVBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggbGVmdEN0eCA9IGlu
dm9jLmdldEluZmVyZW5jZUNvbnRleHQobWV0aG9kKTsKLSAgICAgICAgICAgIAkJaWYgKGxlZnRD
dHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0g
ICAgICAgICAgICAJCQlicmVhayBwcm9wZXI7IC8vIGZhbGwgdGhyb3VnaCBpbnRvIG5lc3RlZCBp
bmZlcmVuY2UgYmVsb3cgKG5vdCBleHBsaWNpdCBpbiB0aGUgc3BlYyEpCi0gICAgICAgICAgICAJ
CX0KLSAgICAgICAgICAgIAl9Ci0gICAgICAgICAgICB9Ci0JCQlyZXR1cm4gRkFMU0U7CisJCQly
ZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29u
dGV4dC5zY29wZSkgfHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdo
dCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7CiAJCX0KIAkJaWYgKCFj
YW5CZVBvbHlFeHByZXNzaW9uKHRoaXMubGVmdCkpIHsKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBl
ID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKQEAgLTEwMiw3ICs2NCw3IEBACiAJCQkvLyAtIHBh
cmVudGhlc2l6ZWQgZXhwcmVzc2lvbiA6IHRoZXNlIGFyZSB0cmFuc3BhcmVudCBpbiBvdXIgQVNU
CiAJCQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlvbikgewogCQkJCUludm9jYXRp
b24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0JCQkJTWV0aG9kQmluZGlu
ZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwg
bnVsbCk7CisJCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmlu
ZGluZyh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKIAkJCQlpZiAocHJldmlv
dXNNZXRob2QgPT0gbnVsbCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcuLCBpZiBpbnNpZGUgYSBjb3Bp
ZWQgbGFtYmRhIHdpdGggaWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0dXJuIG51bGw7IAkJCQkvLyAt
PiBwcm9jZWVkIHdpdGggbm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJTWV0aG9kQmluZGluZyBtZXRo
b2QgPSBwcmV2aW91c01ldGhvZDsKQEAgLTEyNyw4ICs4OSwxMSBAQAogCQkJCQkJCQlyZXR1cm4g
RkFMU0U7CiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZXhwclR5
cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQkJCX0KKwkJCQkJ
CWlmIChpbm5lckN0eC5zdGVwQ29tcGxldGVkID49IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lO
RkVSUkVEKSB7CisJCQkJCQkJLy8gVGhlIGNvbnN0cmFpbnRzIGFuZCBpbml0aWFsIGJvdW5kcyB0
aGF0IHdvdWxkIGVmZmVjdGl2ZWx5IHJlZHVjZSB0byBiMyBhcmUgYWxyZWFkeSB0cmFuc2ZlcnJl
ZCB0byBjdXJyZW50IGNvbnRleHQgZHVyaW5nIEMgU2V0IGNvbnN0cnVjdGlvbi4KKwkJCQkJCQly
ZXR1cm4gVFJVRTsKKwkJCQkJCX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2lu
ZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5vdXRlckNvbnRleHQg
PSBpbmZlcmVuY2VDb250ZXh0OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0
aG9kLmlzQ29uc3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2Qp
OwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1l
dGhvZCwgYXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5j
ZUtpbmQpOwpAQCAtMTg4LDEzICsxNTMsOCBAQAogCQkJCX0KIAkJCQlpZiAoZnVuY3Rpb25UeXBl
LnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgewogCQkJCQlUeXBlQmluZGluZyByID0g
ZnVuY3Rpb25UeXBlLnJldHVyblR5cGU7Ci0JCQkJCUV4cHJlc3Npb25bXSBleHByczsKLQkJCQkJ
aWYgKGxhbWJkYS5ib2R5KCkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQkJCQlleHBycyA9
IG5ldyBFeHByZXNzaW9uW10geyhFeHByZXNzaW9uKWxhbWJkYS5ib2R5KCl9OwotCQkJCQl9IGVs
c2UgewotCQkJCQkJZXhwcnMgPSBsYW1iZGEucmVzdWx0RXhwcmVzc2lvbnMoKTsKLQkJCQkJfQot
CQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGV4cHJzLmxlbmd0aDsgaSsrKSB7CisJCQkJCUV4cHJl
c3Npb25bXSBleHBycyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOworCQkJCQlmb3IgKGlu
dCBpID0gMCwgbGVuZ3RoID0gZXhwcnMgPT0gbnVsbCA/IDAgOiBleHBycy5sZW5ndGg7IGkgPCBs
ZW5ndGg7IGkrKykgewogCQkJCQkJRXhwcmVzc2lvbiBleHByID0gZXhwcnNbaV07CiAJCQkJCQlp
ZiAoci5pc1Byb3BlclR5cGUodHJ1ZSkgJiYgZXhwci5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgewog
CQkJCQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gZXhwci5yZXNvbHZlZFR5cGU7CkBAIC0yMTcs
NyArMTc3LDcgQEAKIAkJcmV0dXJuIEZBTFNFOwogCX0KIAotCXB1YmxpYyBSZWZlcmVuY2VCaW5k
aW5nIGZpbmRHcm91bmRUYXJnZXRUeXBlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250
ZXh0LCBCbG9ja1Njb3BlIHNjb3BlLAorCXB1YmxpYyBzdGF0aWMgUmVmZXJlbmNlQmluZGluZyBm
aW5kR3JvdW5kVGFyZ2V0VHlwZShJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dCwg
QmxvY2tTY29wZSBzY29wZSwKIAkJCQkJCQkJCQkJCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSwg
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHRhcmdldFR5cGVXaXRoV2lsZENhcmRzKQogCXsKIAkJ
aWYgKGxhbWJkYS5hcmd1bWVudHNUeXBlRWxpZGVkKCkpIHsKQEAgLTI1NCwxMSArMjE0LDkgQEAK
IAkJTWV0aG9kQmluZGluZyBmdW5jdGlvblR5cGUgPSB0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9k
KGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIHRydWUpOwogCQlpZiAoZnVuY3Rpb25UeXBlID09IG51
bGwpCiAJCQlyZXR1cm4gRkFMU0U7Ci0JCS8vIHBvdGVudGlhbGx5LWFwcGxpY2FibGUgbWV0aG9k
IGZvciB0aGUgbWV0aG9kIHJlZmVyZW5jZSB3aGVuIHRhcmdldGluZyBUICgxNS4xMy4xKSwKLQkJ
TWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBp
bGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOwotCQlpZiAo
cG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCi0JCQlyZXR1cm4gRkFMU0U7CisKIAkJaWYg
KHJlZmVyZW5jZS5pc0V4YWN0TWV0aG9kUmVmZXJlbmNlKCkpIHsKKwkJCU1ldGhvZEJpbmRpbmcg
cG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmdldEV4YWN0TWV0aG9kKCk7IAogCQkJ
TGlzdDxDb25zdHJhaW50Rm9ybXVsYT4gbmV3Q29uc3RyYWludHMgPSBuZXcgQXJyYXlMaXN0PENv
bnN0cmFpbnRGb3JtdWxhPigpOwogCQkJVHlwZUJpbmRpbmdbXSBwID0gZnVuY3Rpb25UeXBlLnBh
cmFtZXRlcnM7CiAJCQlpbnQgbiA9IHAubGVuZ3RoOwpAQCAtMjY4LDYgKzIyNiw4IEBACiAJCQlp
ZiAobiA9PSBrKzEpIHsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZShwWzBdLCByZWZlcmVuY2UubGhzLnJlc29sdmVkVHlwZSwgQ09NUEFUSUJMRSkp
OwogCQkJCW9mZnNldCA9IDE7CisJCQl9IGVsc2UgaWYgKG4gIT0gaykgeworCQkJCXJldHVybiBG
QUxTRTsKIAkJCX0KIAkJCWZvciAoaW50IGkgPSBvZmZzZXQ7IGkgPCBuOyBpKyspCiAJCQkJbmV3
Q29uc3RyYWludHMuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUocFtpXSwgcFByaW1l
W2ktb2Zmc2V0XSwgQ09NUEFUSUJMRSkpOwpAQCAtMjc2LDExICsyMzYsMTUgQEAKIAkJCQlUeXBl
QmluZGluZyByQXBwbCA9IHBvdGVudGlhbGx5QXBwbGljYWJsZS5pc0NvbnN0cnVjdG9yKCkgJiYg
IXJlZmVyZW5jZS5pc0FycmF5Q29uc3RydWN0b3JSZWZlcmVuY2UoKSA/IHBvdGVudGlhbGx5QXBw
bGljYWJsZS5kZWNsYXJpbmdDbGFzcyA6IHBvdGVudGlhbGx5QXBwbGljYWJsZS5yZXR1cm5UeXBl
OwogCQkJCWlmIChyQXBwbCA9PSBUeXBlQmluZGluZy5WT0lEKQogCQkJCQlyZXR1cm4gRkFMU0U7
Ci0JCQkJVHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0
LnNjb3BlLCAxNCk7IC8vIEZJWE1FIGNhcHR1cmUgcG9zaXRpb24/PworCQkJCVR5cGVCaW5kaW5n
IHJQcmltZSA9IHJBcHBsLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgcmVmZXJlbmNl
LnNvdXJjZUVuZCk7CiAJCQkJbmV3Q29uc3RyYWludHMuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVs
YS5jcmVhdGUoclByaW1lLCByLCBDT01QQVRJQkxFKSk7CiAJCQl9CiAJCQlyZXR1cm4gbmV3Q29u
c3RyYWludHMudG9BcnJheShuZXcgQ29uc3RyYWludEZvcm11bGFbbmV3Q29uc3RyYWludHMuc2l6
ZSgpXSk7CiAJCX0gZWxzZSB7IC8vIGluZXhhY3QKKwkJCU1ldGhvZEJpbmRpbmcgcG90ZW50aWFs
bHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxlVGltZU1ldGhvZFRhcmdldGluZyh0
LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsgLy8gLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBt
ZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEp
LAorCQkJaWYgKHBvdGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQorCQkJCXJldHVybiBGQUxT
RTsKKwkJCQogCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVycy5sZW5ndGg7CiAJCQlm
b3IgKGludCBpID0gMDsgaSA8IG47IGkrKykKIAkJCQlpZiAoIWZ1bmN0aW9uVHlwZS5wYXJhbWV0
ZXJzW2ldLmlzUHJvcGVyVHlwZSh0cnVlKSkKQEAgLTI5OSw3ICsyNjMsNyBAQAogCQkJVHlwZUJp
bmRpbmcgY29tcGlsZVR5cGVSZXR1cm4gPSBvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgPyBvcmln
aW5hbC5kZWNsYXJpbmdDbGFzcyA6IG9yaWdpbmFsLnJldHVyblR5cGU7CiAJCQlpZiAocmVmZXJl
bmNlLnR5cGVBcmd1bWVudHMgPT0gbnVsbAogCQkJCQkmJiAoKG9yaWdpbmFsLnR5cGVWYXJpYWJs
ZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGNvbXBpbGVUeXBlUmV0dXJuLm1l
bnRpb25zQW55KG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgLTEpKQotCQkJCQkJfHwgKG9yaWdp
bmFsLmlzQ29uc3RydWN0b3IoKSAmJiBvcmlnaW5hbC5kZWNsYXJpbmdDbGFzcy50eXBlVmFyaWFi
bGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykpKQorCQkJCQkJfHwgKG9yaWdpbmFs
LmlzQ29uc3RydWN0b3IoKSAmJiBjb21waWxlVGltZURlY2wuZGVjbGFyaW5nQ2xhc3MuaXNSYXdU
eXBlKCkpKSkKIAkJCQkJCQkvLyBub3QgY2hlY2tpbmcgci5tZW50aW9uc0FueSBmb3IgY29uc3Ry
dWN0b3JzLCBiZWNhdXNlIEE6Om5ldyByZXNvbHZlcyB0byB0aGUgcmF3IHR5cGUKIAkJCQkJCQkv
LyB3aGVyZWFzIGluIGZhY3QgdGhlIHR5cGUgb2YgYWxsIGV4cHJlc3Npb25zIG9mIHRoaXMgc2hh
cGUgZGVwZW5kcyBvbiB0aGVpciB0eXBlIHZhcmlhYmxlIChpZiBhbnkpCiAJCQl7CkBAIC0zMjEs
NyArMjg1LDcgQEAKIAkJCQkJaW5mZXJlbmNlQ29udGV4dC5yZXN1bWVTdXNwZW5kZWRJbmZlcmVu
Y2UocHJldkludm9jYXRpb24pOwogCQkJCX0KIAkJCX0KLQkJCVR5cGVCaW5kaW5nIHJQcmltZSA9
IGNvbXBpbGVUaW1lRGVjbC5pc0NvbnN0cnVjdG9yKCkgPyBjb21waWxlVGltZURlY2wuZGVjbGFy
aW5nQ2xhc3MgOiBjb21waWxlVGltZURlY2wucmV0dXJuVHlwZTsKKwkJCVR5cGVCaW5kaW5nIHJQ
cmltZSA9IGNvbXBpbGVUaW1lRGVjbC5pc0NvbnN0cnVjdG9yKCkgPyBjb21waWxlVGltZURlY2wu
ZGVjbGFyaW5nQ2xhc3MgOiBjb21waWxlVGltZURlY2wucmV0dXJuVHlwZS5jYXB0dXJlKGluZmVy
ZW5jZUNvbnRleHQuc2NvcGUsIHJlZmVyZW5jZS5zb3VyY2VFbmQoKSk7CiAJCQlpZiAoclByaW1l
LmlkID09IFR5cGVJZHMuVF92b2lkKQogCQkJCXJldHVybiBGQUxTRTsKIAkJCXJldHVybiBDb25z
dHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHJQcmltZSwgciwgQ09NUEFUSUJMRSwgdGhpcy5pc1Nv
ZnQpOwpAQCAtMzg0LDcgKzM0OCw3IEBACiAJCQkJSW5mZXJlbmNlVmFyaWFibGVbXSBiZXRhcyA9
IGluZmVyZW5jZUNvbnRleHQuYWRkVHlwZVZhcmlhYmxlU3Vic3RpdHV0aW9ucyhhcmd1bWVudHMp
OwogCQkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBnYmV0YSA9IGluZmVyZW5jZUNvbnRleHQu
ZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoCiAJCQkJCQlwYXJhbWV0ZXJpemVk
VHlwZS5nZW5lcmljVHlwZSgpLCBiZXRhcywgcGFyYW1ldGVyaXplZFR5cGUuZW5jbG9zaW5nVHlw
ZSgpLCBwYXJhbWV0ZXJpemVkVHlwZS5nZXRUeXBlQW5ub3RhdGlvbnMoKSk7Ci0JCQkJaW5mZXJl
bmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmNhcHR1cmVzLnB1dChnYmV0YSwgcGFyYW1ldGVyaXpl
ZFR5cGUpOyAvLyBlc3RhYmxpc2hlZDogYm90aCB0eXBlcyBoYXZlIG5vbm51bGwgYXJndW1lbnRz
CisJCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmNhcHR1cmVzLnB1dChnYmV0YSwg
cGFyYW1ldGVyaXplZFR5cGUuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0
aW9uU2l0ZS5zb3VyY2VFbmQoKSkpOyAvLyBlc3RhYmxpc2hlZDogYm90aCB0eXBlcyBoYXZlIG5v
bm51bGwgYXJndW1lbnRzCiAJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQg
PSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGdiZXRhLCB0YXJnZXRUeXBlLCBDT01QQVRJ
QkxFKTsKIAkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShu
ZXdDb25zdHJhaW50KTsKIAkJCX0KQEAgLTQwNCw3ICszNjgsNyBAQAogCQkJCQlCb3VuZFNldCBz
b2x1dGlvbiA9IGluZmVyZW5jZUNvbnRleHQuc29sdmUobmV3IEluZmVyZW5jZVZhcmlhYmxlW117
YWxwaGF9KTsKIAkJCQkJaWYgKHNvbHV0aW9uID09IG51bGwpCiAJCQkJCQlyZXR1cm4gZmFsc2U7
Ci0JCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9uKGFscGhhLCBu
dWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJj
ZVN0YXJ0KCkpOyAvLyBUT0RPIG1ha2UgcG9zaXRpb24gdW5pcXVlPworCQkJCQlUeXBlQmluZGlu
ZyB1ID0gc29sdXRpb24uZ2V0SW5zdGFudGlhdGlvbihhbHBoYSwgbnVsbCkuY2FwdHVyZShpbmZl
cmVuY2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQoKSk7CiAJCQkJCUNv
bnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxh
LmNyZWF0ZSh1LCB0YXJnZXRUeXBlLCBDT01QQVRJQkxFKTsKIAkJCQkJcmV0dXJuIGluZmVyZW5j
ZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CiAJCQkJfQpAQCAt
NDM3LDE3ICs0MDEsOSBAQAogCQkJCQkvLyBpaSkKIAkJCQkJZmluYWwgVHlwZUJpbmRpbmcgciA9
IHNhbS5yZXR1cm5UeXBlOwogCQkJCQlMYW1iZGFFeHByZXNzaW9uIHJlc29sdmVkID0gbGFtYmRh
LmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0aGlzLnJpZ2h0KTsKLQkJCQkJ
U3RhdGVtZW50IGJvZHkgPSByZXNvbHZlZCAhPSBudWxsID8gcmVzb2x2ZWQuYm9keSgpIDogbGFt
YmRhLmJvZHkoKTsKLQkJCQkJaWYgKGJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQkJ
CQl2YXJpYWJsZXMuYWRkQWxsKG5ldyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEoKEV4cHJl
c3Npb24pIGJvZHksIHIsIENPTVBBVElCTEUpLmlucHV0VmFyaWFibGVzKGNvbnRleHQpKTsKLQkJ
CQkJfSBlbHNlIHsKLQkJCQkJCS8vIFRPRE86IHNob3VsZCBJIHVzZSBMYW1iZGFFeHByZXNzaW9u
LnJlc3VsdEV4cHJlc3Npb25zPyAoaXMgY3VycmVudGx5IHByaXZhdGUpLgotCQkJCQkJYm9keS50
cmF2ZXJzZShuZXcgQVNUVmlzaXRvcigpIHsKLQkJCQkJCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChS
ZXR1cm5TdGF0ZW1lbnQgcmV0dXJuU3RhdGVtZW50LCBCbG9ja1Njb3BlIHNjb3BlKSB7Ci0JCQkJ
CQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShyZXR1
cm5TdGF0ZW1lbnQuZXhwcmVzc2lvbiwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJsZXMoY29u
dGV4dCkpOwotCQkJCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJCQkJfQotCQkJCQkJfSwgKEJsb2Nr
U2NvcGUpbnVsbCk7CisJCQkJCUV4cHJlc3Npb25bXSByZXN1bHRFeHByZXNzaW9ucyA9IHJlc29s
dmVkICE9IG51bGwgPyByZXNvbHZlZC5yZXN1bHRFeHByZXNzaW9ucygpIDogbnVsbDsKKwkJCQkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJlc3Npb25zID09IG51bGwgPyAwIDog
cmVzdWx0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCXZhcmlh
Ymxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShyZXN1bHRFeHByZXNz
aW9uc1tpXSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJsZXMoY29udGV4dCkpOwogCQkJCQl9
CiAJCQkJfQogCQkJCXJldHVybiB2YXJpYWJsZXM7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlw
ZUZvcm11bGEuamF2YQppbmRleCBjYTNjYzBmLi4yMGJhOTVlIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29u
c3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGltcG9ydCBqYXZhLnV0
aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8qKgpAQCAtMzExLDYg
KzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRl
KHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUsIHRoaXMuaXNTb2Z0
KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGluZy5QT0xZX1RZUEU6
CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5nKSBzdXBlckNhbmRp
ZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgcG9seS5leHBy
ZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRpb24uYmluZGluZyhz
dWJDYW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxsIHx8ICFiaW5kaW5n
LmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQlyZXR1cm4gcmVkdWNl
U3ViVHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5cGUuY2FwdHVyZShz
Y29wZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93IG5ldyBJbGxlZ2Fs
U3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRhdGUpOyAvLyROT04t
TkxTLTEkCiAJfQpAQCAtMzQ3LDI3ICszNTUsMTMgQEAKIAkJCXJldHVybiB0cnVlOwogCQlpZiAo
IShjYiBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykpIHsKIAkJCS8vIGlmIEMg
aXMgcGFyYW1ldGVyaXplZCB3aXRoIGl0cyBvd24gdHlwZSB2YXJpYWJsZXMsIHRoZXJlJ3JlIG5v
IG1vcmUgY29uc3RyYWludHMgdG8gYmUgY3JlYXRlZCBoZXJlLCBvdGhlcndpc2UgbGV0J3MgZmFp
bAotCQkJcmV0dXJuIGlzSW5zaWduaWZpY2FudFBhcmFtZXRlcml6ZWQoY2EpOworCQkJcmV0dXJu
IGNhLmlzUGFyYW1ldGVyaXplZFdpdGhPd25WYXJpYWJsZXMoKTsKIAkJfQogCQlUeXBlQmluZGlu
Z1tdIGJpID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIGNiKS5hcmd1bWVudHM7CiAJCWlm
IChjYi5pc1Jhd1R5cGUoKSB8fCBiaSA9PSBudWxsIHx8IGJpLmxlbmd0aCA9PSAwKQogCQkJcmV0
dXJuICh0aGlzLmlzU29mdCAmJiBJbmZlcmVuY2VDb250ZXh0MTguU0lNVUxBVEVfQlVHX0pES184
MDI2NTI3KSA/IHRydWUgOiBmYWxzZTsgLy8gRkFMU0Ugd291bGQgY29uZm9ybSB0byB0aGUgc3Bl
YyAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBhaS5sZW5ndGg7IGkrKykKIAkJCWNvbnN0cmFpbnRz
LmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJpW2ldLCBhaVtpXSwgVFlQRV9BUkdV
TUVOVF9DT05UQUlORUQsIHRoaXMuaXNTb2Z0KSk7Ci0JCXJldHVybiB0cnVlOwotCX0KLQotCXBy
aXZhdGUgYm9vbGVhbiBpc0luc2lnbmlmaWNhbnRQYXJhbWV0ZXJpemVkKFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZyBjYSkgewotCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9
IGNhLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcygpOwotCQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1
bWVudHMgPSBjYS5hcmd1bWVudHM7Ci0JCWlmICh0eXBlVmFyaWFibGVzID09IG51bGwgfHwgdHlw
ZUFyZ3VtZW50cyA9PSBudWxsKQotCQkJcmV0dXJuIHR5cGVWYXJpYWJsZXMgPT0gdHlwZUFyZ3Vt
ZW50czsKLQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IHR5cGVBcmd1bWVudHMubGVuZ3Ro
KQotCQkJcmV0dXJuIGZhbHNlOwotCQlmb3IgKGludCBpID0gMDsgaSA8IHR5cGVBcmd1bWVudHMu
bGVuZ3RoOyBpKyspIHsKLQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHModHlwZVZhcmlhYmxl
c1tpXSwgdHlwZUFyZ3VtZW50c1tpXSkpCi0JCQkJcmV0dXJuIGZhbHNlOwotCQl9CiAJCXJldHVy
biB0cnVlOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0
MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggNjFm
YmNjMC4uZDQwMTVlZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0
MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0y
MywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4cHJlc3Npb247
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhw
cmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1l
c3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSArOTEsOSBAQAogICog
PGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0PgogICogPGRkPjxl
bT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAqIEZvciAxOC41LjEg
YW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1lbnRlZCBpbgotICog
IHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9jYXRpb25T
aXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxldmVsIGNvbnRyb2wg
aXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5n
W10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5jZSBMaWZlY3ljbGU8
L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUuMiBjYXVzZXMgc29t
ZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBwYXJ0cyBvZiBpbmZl
cmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJlc29sdXRpb24uIFNl
ZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUsIEludm9j
YXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKX0gZm9y
IHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRlcm1lZGlhdGUgPGI+
c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQgYmV0d2VlbiBib3Ro
IHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVudAotICogICBpbnB1
dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxpbmsgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsgSW52b2NhdGlvbiNy
ZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
LCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0
KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgpfS48YnIvPgotICog
ICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3RhbmNlIG9mIEluZmVy
ZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNpbmZlcmVuY2VLaW5k
fQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAqIDxsaT48Yj5OZXN0
ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24gYXJndW1lbnQgaXMg
YSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2YgdGhlIGFyZ3VtZW50
IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNl
IHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJlbmNlIG11c3QgcHJv
ZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAgICB0aGUgaW5uZXIg
aW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29scyBhcmUgYXBwbGll
ZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBleHByZXNzaW9uIGlz
IGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBpbmNvcnBvcmF0ZWQg
aW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2VlIGJsb2NrIGluc2lk
ZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJbmZlcmVuY2VDb250
ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3VsdHMgb2YgdGhlIGNv
bWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNvbnRhaW5lZCBpbm5l
ciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxpbmsgI3JlYmluZElu
bmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11c3QgYmUgY2FsbGVk
IHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICogICAgPGxpPklmIHRo
ZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJlc3Npb24gb3IgYSBj
b25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMKLSAqICAgICAgZXhp
c3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBmaW5hbCB0YXJnZXQg
dHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAge0BsaW5rIEV4cHJl
c3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nLCBTY29wZSl9LCB3
aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNyZWJpbmRJbm5lclBv
bGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+Rm9yIHJlY3Vy
c2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9mIGFuIGludm9jYXRp
b24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJn
dW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10sIFNjb3BlKX0g
ZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0aW9uczogKDEpIGZv
ciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VTZW5kI2ZpbmRNZXRo
b2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1Y3RvckJpbmRpbmco
KTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0BsaW5rICNyZWJpbmRJ
bm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8bGk+SW4g
c29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJlIHBvbHkgaW52b2Nh
dGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92ZXJsb2FkIHJlc29s
dXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRlckNvbXBhdGliaWxp
dHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5vdCBpbnZvbHZlIGFu
eSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGluZyBpbmZlcmVuY2Ug
cmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2luZyB7QGxpbmsgSW52
b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nKX0uPC9saT4K
ICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9uIGlzIGEgPGI+dmFy
aWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBhdHRlbXB0aW5nCiAg
KiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9PU0V9LiBPbmx5IGlm
IHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUge0BsaW5rICNDSEVD
S19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMgd2FzIHN1Y2Nlc3Nm
dWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0xNjUsOSArMTI5LDYg
QEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8KIAlCb3VuZFNldCBj
dXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNl
LCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5j
ZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQogCS8qKiBGb3IgZWFjaCBj
YW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRlIHN0b3JlIHRoZSBz
b2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1hcDxUeXBlQmluZGlu
ZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNoTWFwPFR5cGVCaW5k
aW5nLCBTb2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAogCQogCS8qKiBTaWduYWxz
IHdoZXRoZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVja2VkIGNv
bnZlcnNpb24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNvbnN0cmFpbnRz
V2l0aFVuY2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8qKiBJbm5lciBwb2x5IGlu
dm9jYXRpb25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlzIGluZmVyZW5jZS4gKi8K
LQlMaXN0PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBBcnJheUxpc3Q8SW52b2Nh
dGlvblNpdGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNlIGNvbnRleHQsIHVz
ZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJbmZlcmVuY2VDb250
ZXh0MTggb3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+IHBy
b2JsZW1NZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1lbnQgZW52aXJv
bm1lbnQ7CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4LjUuMiBJbnZvY2F0
aW9uIFR5cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJlc3BvbnNpYmxlIGZvciBh
bnkgcG9zdC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNl
dCwgVHlwZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0aGUgYm91bmQgc2V0IHBy
b2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0IG0gaXMgYXBw
bGljYWJsZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0IGluZmVySW52b2NhdGlv
blR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52b2NhdGlvblNp
dGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAtMzk4LDkgKzM1MCw5
IEBACiAJCQl9CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlTZXQ8Q29uc3RyYWlu
dEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKLQkJCWlmICgh
YWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLCBjLCBtZXRob2QsIHRo
aXMuaW5mZXJlbmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DKHRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQsIGZhbHNlKSkKIAkJ
CQlyZXR1cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDogZGV0ZXJtaW5lIEIzIGZyb20gQworCQkJ
Ly8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBDCiAJCQl3aGlsZSAoIWMuaXNFbXB0eSgp
KSB7CiAJCQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50Rm9ybXVsYT4gYm90dG9tU2V0ID0gZmlu
ZEJvdHRvbVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMoYykpOwpAQCAtNDUwLDcgKzQwMiw3IEBA
CiAJCX0KIAl9CiAKLQlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0MoRXhwcmVzc2lv
bltdIGV4cHJzLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBpbnQgaW5mZXJlbmNlS2luZEZvck1ldGhvZCkgeworCXByaXZhdGUgYm9vbGVhbiBhZGRDb25z
dHJhaW50c1RvQyhFeHByZXNzaW9uW10gZXhwcnMsIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywg
TWV0aG9kQmluZGluZyBtZXRob2QsIGludCBpbmZlcmVuY2VLaW5kRm9yTWV0aG9kLCBib29sZWFu
IGludGVybGVhdmVkKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCVR5cGVC
aW5kaW5nW10gZnM7CiAJCWlmIChleHBycyAhPSBudWxsKSB7CiAJCQlpbnQgayA9IGV4cHJzLmxl
bmd0aDsKQEAgLTQ3MSwxMTkgKzQyMyw4NiBAQAogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBrOyBp
KyspIHsKIAkJCQlUeXBlQmluZGluZyBmc2kgPSBmc1tNYXRoLm1pbihpLCBwLTEpXTsKIAkJCQlU
eXBlQmluZGluZyBzdWJzdEYgPSBzdWJzdGl0dXRlKGZzaSk7Ci0JCQkJaWYgKCFhZGRDb25zdHJh
aW50c1RvQ19PbmVFeHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKSkKKwkJCQlp
ZiAoIWFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0sIGMsIGZzaSwgc3Vic3RGLCBt
ZXRob2QsIGludGVybGVhdmVkKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwogCSAgICAgICAgfQogCQl9
CiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1Rv
Q19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlw
ZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7
CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBl
eHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5k
aW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4gaW50ZXJsZWF2ZWQpIHRo
cm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKKwkJCisJCS8vIFNlZSBodHRwczovL2J1
Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIzMjUgZm9yIGV4Y2x1c2lvbiBvZiBw
b2x5IGV4cHJlc3Npb25zIHRhcmdldGluZyBwcm9wZXIgdHlwZXMuIENFRi5yZWR1Y2UgdmFsaWRh
dGVzIAorCQkvLyB0aGF0IHRoZXkgYXJlIGNvbXBhdGlibGUgaW4gYSBsb29zZSBpbnZvY2F0aW9u
IGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0IHR5cGUuIFRoZXkgY29udHJpYnV0ZSBub3RoaW5n
IGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9ybXVsYXMuCisJCWlmIChzdWJzdEYuaXNQcm9wZXJU
eXBlKHRydWUpKQorCQkJcmV0dXJuIHRydWU7CisJCQogCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg
4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQg
Y29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlpZiAoIWV4cHJpLmlzUGVydGluZW50VG9B
cHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwg
QVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsKIAkJfQogCQlpZiAoZXhwcmkgaW5zdGFu
Y2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeGNl
cHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmksIHN1YnN0RikpOworCQkJ
aWYgKGV4cHJpIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCUxhbWJkYUV4cHJl
c3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGV4cHJpOworCQkJCUJsb2NrU2NvcGUg
c2tvcGUgPSBsYW1iZGEuZW5jbG9zaW5nU2NvcGU7CisJCQkJaWYgKHN1YnN0Ri5pc0Z1bmN0aW9u
YWxJbnRlcmZhY2Uoc2tvcGUpKSB7IC8vIGNvdWxkIGJlIGFuIGluZmVyZW5jZSB2YXJpYWJsZS4K
KwkJCQkJUmVmZXJlbmNlQmluZGluZyB0ID0gKFJlZmVyZW5jZUJpbmRpbmcpIHN1YnN0RjsKKwkJ
CQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHdpdGhXaWxkQ2FyZHMgPSBJbmZlcmVuY2VDb250
ZXh0MTgucGFyYW1ldGVyaXplZFdpdGhXaWxkY2FyZCh0KTsKKwkJCQkJaWYgKHdpdGhXaWxkQ2Fy
ZHMgIT0gbnVsbCkgeworCQkJCQkJdCA9IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5maW5k
R3JvdW5kVGFyZ2V0VHlwZSh0aGlzLCBza29wZSwgbGFtYmRhLCB3aXRoV2lsZENhcmRzKTsKKwkJ
CQkJfQorCQkJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZTsKKwkJCQkJaWYgKHQgIT0gbnVs
bCAmJiAoZnVuY3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChza29wZSwgdHJ1
ZSkpICE9IG51bGwgJiYgKGxhbWJkYSA9IGxhbWJkYS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVu
Y2VUYXJnZXRpbmcodCkpICE9IG51bGwpIHsKKwkJCQkJCVR5cGVCaW5kaW5nIHIgPSBmdW5jdGlv
blR5cGUucmV0dXJuVHlwZTsKKwkJCQkJCUV4cHJlc3Npb25bXSByZXN1bHRFeHByZXNzaW9ucyA9
IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOworCQkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0
aCA9IHJlc3VsdEV4cHJlc3Npb25zID09IG51bGwgPyAwIDogcmVzdWx0RXhwcmVzc2lvbnMubGVu
Z3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCQlFeHByZXNzaW9uIHJlc3VsdEV4cHJlc3Np
b24gPSByZXN1bHRFeHByZXNzaW9uc1tpXTsKKwkJCQkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9D
X09uZUV4cHIocmVzdWx0RXhwcmVzc2lvbiwgYywgci5vcmlnaW5hbCgpLCByLCBtZXRob2QsIHRy
dWUpKQorCQkJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJCQl9CisJCQkJCX0KKwkJCQl9CisJCQl9
CiAJCX0gZWxzZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGV4cHJpLmlzUG9s
eUV4cHJlc3Npb24oKSkgewogCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24p
IGV4cHJpOwotCQkJTWV0aG9kQmluZGluZyBpbm5lck1ldGhvZCA9IGludm9jYXRpb24uYmluZGlu
ZyhudWxsLCBmYWxzZSwgbnVsbCk7CisJCQlNZXRob2RCaW5kaW5nIGlubmVyTWV0aG9kID0gaW52
b2NhdGlvbi5iaW5kaW5nKHN1YnN0RiwgdGhpcy5zY29wZSk7CisJCQlpZiAoaW5uZXJNZXRob2Qg
PT0gbnVsbCkKKwkJCQlyZXR1cm4gdHJ1ZTsgCQkgIC8vIC0+IHByb2NlZWQgd2l0aCBubyBuZXcg
QyBzZXQgZWxlbWVudHMuCisJCQkKKwkJCWlmIChpbnRlcmxlYXZlZCkgeworCQkJCU1ldGhvZEJp
bmRpbmcgc2hhbGxvd01ldGhvZCA9IGlubmVyTWV0aG9kLnNoYWxsb3dPcmlnaW5hbCgpOworCQkJ
CVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGVudGVyUG9seUludm9j
YXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7CisJCQkJdHJ5IHsKKwkJ
CQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJCQkJ
CVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IGFyZ3VtZW50cyA9PSBudWxsID8gQmluZGlu
Zy5OT19QQVJBTUVURVJTIDogbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhdOworCQkJ
CQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwZXMubGVuZ3RoOyBpKyspCisJCQkJCQlh
cmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKKwkJCQkJaWYgKGlu
bmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVy
ZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgaW5uZXJNZXRo
b2QpOworCQkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsK
KwkJCQkJfQorCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHNoYWxsb3dNZXRob2Qs
IGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3RvcigpKTsKKwkJCQkJaWYg
KCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52b2NhdGlvblR5cGUodGhp
cywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKKwkJCQkJCXJldHVybiBmYWxz
ZTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlyZXN1bWVTdXNwZW5kZWRJbmZlcmVuY2UocHJldklu
dm9jYXRpb24pOworCQkJCX0KKwkJCX0KKwkJCWludCBhcHBsaWNhYmlsaXR5S2luZCA9IENIRUNL
X0xPT1NFOyAgLy8gRklYTUUsIGZvciA8PiByZXNvbHZpbmcgdG8gYSBub24tZ2VuZXJpYyBtZXRo
b2QsIHRoaXMgbmVlZCB0byBiZSBjb21wdXRlZC4KIAkJCWlmIChpbm5lck1ldGhvZCBpbnN0YW5j
ZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCUluZmVyZW5jZUNv
bnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9kKTsKLQkJCQlpZiAoaW5uZXJDdHggIT0g
bnVsbCkgeyAvLyBvdGhlcndpc2UgaW5uZXJNZXRob2QgZG9lcyBub3QgcGFydGljaXBhdGUgaW4g
aW5mZXJlbmNlCi0JCQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQyhpbnZvY2F0aW9uLmFyZ3Vt
ZW50cygpLCBjLCBpbm5lck1ldGhvZC5nZW5lcmljTWV0aG9kKCksIGlubmVyQ3R4LmluZmVyZW5j
ZUtpbmQpOworCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7CisJCQkJCWFwcGxpY2FiaWxpdHlL
aW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKIAkJCQl9CiAJCQl9CisJCQlyZXR1cm4gYWRk
Q29uc3RyYWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywgaW5uZXJNZXRob2QuZ2Vu
ZXJpY01ldGhvZCgpLCBhcHBsaWNhYmlsaXR5S2luZCwgaW50ZXJsZWF2ZWQpOwogCQl9IGVsc2Ug
aWYgKGV4cHJpIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9uKSB7CiAJCQlDb25kaXRp
b25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBleHByaTsKLQkJCXJl
dHVybiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZUcnVlLCBjLCBmc2ksIHN1
YnN0RiwgbWV0aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVl
SWZGYWxzZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJCQlyZXR1cm4gYWRkQ29uc3RyYWlu
dHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCwgaW50
ZXJsZWF2ZWQpCisJCQkJCSYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZkZh
bHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBpbnRlcmxlYXZlZCk7CiAJCX0KIAkJcmV0dXJu
IHRydWU7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxpZmllZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0
aW9uIFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4yKQotCSAqIGFuZCBwZXJmb3JtIHN1YnNlcXVl
bnQgc3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRpbmcgb2YgaW5uZXIgcG9seSBleHByZXNzaW9u
cywKLQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIGlmIG5lZWRl
ZC4KLQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIGluZmVyZW5jZSBoYXMgbm90IHll
dCBmaW5pc2hlZC4KLQkgKiBAcGFyYW0gaW52b2NhdGlvbiBpbnZvY2F0aW9uIGJlaW5nIGluZmVy
cmVkCi0JICogQHBhcmFtIGFyZ3VtZW50VHlwZXMgYXJndW1lbnRzIGJlaW5nIHBhc3NlZCBpbnRv
IHRoZSBpbnZvY2F0aW9uCi0JICogQHBhcmFtIG1ldGhvZCBjdXJyZW50IGNhbmRpZGF0ZSBtZXRo
b2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogQHJldHVybiBhIHZhbGlkIG1ldGhv
ZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMsCi0JICogCW9yIGEgcHJvYmxl
bSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcgZWl0aGVyIGluZmVyZW5jZSBmYWlsdXJlIG9yIGEg
Ym91bmQgbWlzbWF0Y2guCi0JICovCi0JLypATm9uTnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJ
bnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGludm9jYXRpb24sIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRUeXBlcywgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQkv
LyBUT0RPIG9wdGltaXplOiBpZiBvdXRlckNvbnRleHQgZXhpc3RzIGFuZCBpcyByZXNvbHZlZCwg
d2UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBpbmZlciBhZ2Fpbi4KLQkJVHlwZUJpbmRpbmcgdGFy
Z2V0VHlwZSA9IGludm9jYXRpb24uaW52b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGZpbmFsTWV0aG9kID0gbnVsbDsKLQkJUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFRvQ2hlY2sgPSBtZXRob2Q7Ci0JCQotCQli
b29sZWFuIGhhdmVQcm9wZXJUYXJnZXRUeXBlID0gdGFyZ2V0VHlwZSAhPSBudWxsICYmIHRhcmdl
dFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpOwotCQlpZiAoaGF2ZVByb3BlclRhcmdldFR5cGUgfHwg
IWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7
Ci0JCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9kLm9yaWdpbmFsTWV0aG9kOwotCQkJ
U29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRhcmdl
dFR5cGUpOwotCQkJQm91bmRTZXQgcmVzdWx0ID0gc29sdXRpb24gIT0gbnVsbCA/IHNvbHV0aW9u
LmJvdW5kcyA6IG51bGw7Ci0JCQlpZiAocmVzdWx0ID09IG51bGwpIHsKLQkJCQkvLyBzdGFydCBv
dmVyIGZyb20gYSBwcmV2aW91cyBjYW5kaWRhdGUgYnV0IGRpc2NhcmQgaXRzIHR5cGUgdmFyaWFi
bGUgaW5zdGFudGlhdGlvbnMKLQkJCQkvLyBUT0RPOiBzaG91bGQgd2UgcmV0YWluIGFueSBpbnN0
YW50aWF0aW9ucyBvZiB0eXBlIHZhcmlhYmxlcyBub3Qgb3duZWQgYnkgdGhlIG1ldGhvZD8gCi0J
CQkJdHJ5IHsKLQkJCQkJcmVzdWx0ID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRC
b3VuZHMsIHRhcmdldFR5cGUsIGludm9jYXRpb24sIG9yaWdpbmFsKTsKLQkJCQl9IGNhdGNoIChJ
bmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJLy8gbm8gc29sdXRpb24sIGJ1dCBk
byBtb3JlIGNoZWNrcyBiZWxvdwotCQkJCX0KLQkJCX0KLQkJCWlmIChyZXN1bHQgIT0gbnVsbCkg
ewotCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRpb25zKG9yaWdpbmFsLnR5
cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlvbiwgcmVzdWx0KTsKLQkJCQlpZiAoc29sdXRpb25zICE9
IG51bGwpIHsKLQkJCQkJZmluYWxNZXRob2QgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1dGlvbnMpOwotCQkJCQlpZiAodGhp
cy5zY29wZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0Vu
YWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9u
cyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbiwgdGhpcy5zY29wZSk7Ci0JCQkJCWludm9jYXRpb24u
cmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KGZpbmFsTWV0aG9kLCB0aGlzKTsKLQkJCQkJdGhpcy5z
b2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1dCh0YXJnZXRUeXBlLCBuZXcgU29sdXRpb24oZmluYWxN
ZXRob2QsIHJlc3VsdCkpOwotCQkJCX0KLQkJCX0KLQkJCWlmIChmaW5hbE1ldGhvZCAhPSBudWxs
KQotCQkJCW1ldGhvZFRvQ2hlY2sgPSBmaW5hbE1ldGhvZDsKLQkJfSBlbHNlIHsKLQkJCWZpbmFs
TWV0aG9kID0gbWV0aG9kOwotCQl9Ci0JCQotCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2Qg
PSBtZXRob2RUb0NoZWNrLmJvdW5kQ2hlY2sxOCh0aGlzLnNjb3BlLCBhcmd1bWVudFR5cGVzKTsK
LQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKLQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwot
Ci0JCWlmICghaGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlvbi5nZXRFeHByZXNzaW9u
Q29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBzdGls
bCBub3QgcmVhZHkhCi0KLQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwpIHsKLQkJCWlmIChyZWJp
bmRJbm5lclBvbGllcyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbikpCi0JCQkJcmV0dXJuIGZpbmFs
TWV0aG9kOwotCQl9Ci0JCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQodGFy
Z2V0VHlwZSwgbWV0aG9kKTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1wbGlmaWVkIEFQSSB0byBwZXJm
b3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIpCi0JICogYW5kIHBlcmZv
cm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmluZGluZyBvZiBpbm5lciBwb2x5
IGV4cHJlc3Npb25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHByb2JsZW0gbWV0aG9kIGJpbmRp
bmcgaWYgbmVlZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgaW5mZXJlbmNl
IGhhcyBub3QgeWV0IGZpbmlzaGVkLgotCSAqIFZlcnNpb24gdXNlZCBmb3IgaW5uZXIgaW52b2Nh
dGlvbnMsIHdoZXJlIGFyZ3VtZW50IHR5cGVzIG5lZWQgdG8gYmUgZXh0cmFjdGVkCi0JICogZnJv
bSBhY3R1YWwgaW52b2NhdGlvbiBhcmd1bWVudHMuCi0JICogQHBhcmFtIGludm9jYXRpb24gaW52
b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBtZXRob2QgY3VycmVudCBjYW5kaWRh
dGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIEByZXR1cm4gYSB2YWxp
ZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJzLAotCSAqIAlvciBh
IHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBpbmZlcmVuY2UgZmFpbHVy
ZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCXB1YmxpYyAvKkBOb25OdWxsKi8gTWV0aG9k
QmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb24gaW52b2NhdGlvbiwgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQlUeXBlQmluZGluZ1tdIGFy
Z3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gYXJndW1lbnRzID0gaW52b2NhdGlv
bi5hcmd1bWVudHMoKTsKLQkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlhcmd1bWVudFR5
cGVzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhdOwotCQkJZm9yIChpbnQgaSA9
IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJYXJndW1lbnRUeXBlc1tpXSA9IGFy
Z3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCX0KLQkJcmV0dXJuIGluZmVySW52b2NhdGlvblR5
cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgbWV0aG9kKTsKIAl9CiAKIAlwdWJsaWMgYm9v
bGVhbiBoYXNSZXN1bHRGb3IoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewpAQCAtNTkxLDYgKzUx
MCwxMCBAQAogCQkJcmV0dXJuIHRoaXMuc3RlcENvbXBsZXRlZCA+PSBUWVBFX0lORkVSUkVEOwog
CQllbHNlCiAJCQlyZXR1cm4gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLmNvbnRhaW5zS2V5
KHRhcmdldFR5cGUpOworCX0KKwkKKwlwdWJsaWMgU29sdXRpb24gZ2V0UmVzdWx0Rm9yKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJcmV0dXJuIHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlw
ZS5nZXQodGFyZ2V0VHlwZSk7CiAJfQogCiAJcHVibGljIGJvb2xlYW4gcmVnaXN0ZXJTb2x1dGlv
bihUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nKSB7
CkBAIC0xMzY2LDggKzEyODksNiBAQAogCQl0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPSBpbm5l
ckFyZ3VtZW50czsKIAkJdGhpcy5jdXJyZW50SW52b2NhdGlvbiA9IGludm9jYXRpb247CiAJCQot
CQkvLyBzY2hlZHVsZSBmb3IgcmUtYmluZGluZyB0aGUgaW5uZXIgYWZ0ZXIgaW5mZXJlbmNlIHN1
Y2Nlc3M6Ci0JCXRoaXMuaW5uZXJQb2xpZXMuYWRkKGludm9jYXRpb24pOwogCQlyZXR1cm4gcmVj
b3JkOwogCX0KIAkKQEAgLTEzOTUsMTQ1ICsxMzE2LDYgQEAKIAkJdGhpcy5jdXJyZW50SW52b2Nh
dGlvbiA9IHJlY29yZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPSByZWNvcmQu
aW52b2NhdGlvbkFyZ3VtZW50czsKIAkJdGhpcy5pbmZlcmVuY2VLaW5kID0gcmVjb3JkLmluZmVy
ZW5jZUtpbmQ7Ci0JfQotCi0JcHVibGljIGJvb2xlYW4gcmViaW5kSW5uZXJQb2xpZXMoTWV0aG9k
QmluZGluZyBtZXRob2QsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKLQkJQm91bmRTZXQgYm91bmRz
ID0gdGhpcy5jdXJyZW50Qm91bmRzOwotCQlUeXBlQmluZGluZyB0YXJnZXRUeXBlID0gc2l0ZS5p
bnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsIHx8ICF0YXJn
ZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJaWYgKCFzaXRlLmdldEV4cHJlc3Npb25D
b250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJCS8vIGluIHRoaXMgY2FzZSB3ZSBt
YXkgbm90IHlldCBoYXZlIHRoZSBzb2x1dGlvbig/LCBnZXQgb3IgY29tcHV0ZSBpdCBub3c6Ci0J
CQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuZ2V0KHRh
cmdldFR5cGUpOwotCQkJCXRyeSB7Ci0JCQkJCWlmIChzb2x1dGlvbiAhPSBudWxsICYmIHNvbHV0
aW9uLmJvdW5kcyAhPSBudWxsKQotCQkJCQkJYm91bmRzID0gc29sdXRpb24uYm91bmRzOwotCQkJ
CQllbHNlCi0JCQkJCQlib3VuZHMgPSBpbmZlckludm9jYXRpb25UeXBlKHRoaXMuY3VycmVudEJv
dW5kcywgbnVsbCwgc2l0ZSwgbWV0aG9kLnNoYWxsb3dPcmlnaW5hbCgpKTsKLQkJCQl9IGNhdGNo
IChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJcmV0dXJuIGZhbHNlOwotCQkJ
CX0KLQkJCQlpZiAoYm91bmRzID09IG51bGwpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0KLQkJ
fSBlbHNlIHsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRU
eXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCWlmIChzb2x1dGlvbiAhPSBudWxsICYmIHNvbHV0aW9u
LmJvdW5kcyAhPSBudWxsKQotCQkJCWJvdW5kcyA9IHNvbHV0aW9uLmJvdW5kczsKLQkJfQotCQly
ZWJpbmRJbm5lclBvbGllcyhib3VuZHMsIG1ldGhvZC5wYXJhbWV0ZXJzKTsKLQkJcmV0dXJuIHRy
dWU7Ci0JfQotCi0JLyoqCi0JICogQWZ0ZXIgaW5mZXJlbmNlIGhhcyBmaW5pc2hlZCwgaXRlcmF0
ZSBhbGwgaW5uZXIgcG9seSBleHByZXNzaW9ucyAoSW52b2NhdGlvbnMpLCB0aGF0Ci0JICogaGF2
ZSBiZWVuIGluY2x1ZGVkIGluIHRoZSBpbmZlcmVuY2UuIEZvciBlYWNoIG9mIHRoZXNlIHVwZGF0
ZSBzb21lIHR5cGUgaW5mb3JtYXRpb24KLQkgKiBmcm9tIHRoZSBpbmZlcmVuY2UgcmVzdWx0IGFu
ZCBwZXJoYXBzIHRyaWdnZXIgZm9sbG93LXVwIHJlc29sdmluZyBhcyBuZWVkZWQuCi0JICogU2lt
aWxhciBmb3IgcG9seSBleHByZXNzaW9ucyB0aGF0IGRpZCBub3QgZGlyZWN0bHkgcGFydGljaXBh
dGUgaW4gdGhlIGluZmVyZW5jZQotCSAqIGJ1dCBhcmUgZGlyZWN0IGFyZ3VtZW50cyBvZiB0aGUg
Y3VycmVudCBpbnZvY2F0aW9uIChGdW5jdGlvbmFsRXhwcmVzc2lvbiwgQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uKS4KLQkgKi8KLQlwdWJsaWMgdm9pZCByZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCBi
b3VuZHMsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMpIHsKLQkJLy8gVGhpcyB1cGRhdGVz
IGFsbCByZW1haW5pbmcgcG9seSBleHByZXNzaW9ucyB0aGF0IGFyZSBkaXJlY3QgYXJndW1lbnRz
IG9mIHRoZSBjdXJyZW50IGludm9jYXRpb246Ci0JCS8vIChoYW5kbGVzIEZ1bmN0aW9uYWxFeHBy
ZXNzaW9uICYgQ29uZGl0aW9uYWxFeHByZXNzaW9uKQotCQlpZiAodGhpcy5jdXJyZW50SW52b2Nh
dGlvbiBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQlyZXR1cm47IC8vIG5vIGlu
bmVyIGV4cHJlc3Npb25zCi0JCWJvb2xlYW4gaXNWYXJhcmdzID0gdGhpcy5pbmZlcmVuY2VLaW5k
ID09IENIRUNLX1ZBUkFSRzsKLQkJYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMoYm91bmRzLCBw
YXJhbWV0ZXJUeXBlcywgaXNWYXJhcmdzKTsKLQkJLy8gVGhpcyBsb29wcyBvdmVyIGFsbCBwb2x5
IGV4cHJlc3Npb25zIGZvciB3aGljaCBhIHN1Yi1pbmZlcmVuY2Ugd2FzIHRyaWdnZXJlZDoKLQkJ
Ly8gKGhhbmRsZXMgZ2VuZXJpYyBpbnZvY2F0aW9ucykKLQkJaW50IGxlbiA9IHRoaXMuaW5uZXJQ
b2xpZXMuc2l6ZSgpOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7Ci0JCQlFeHBy
ZXNzaW9uIGlubmVyID0gKEV4cHJlc3Npb24pIHRoaXMuaW5uZXJQb2xpZXMuZ2V0KGkpOwotCQkJ
aWYgKGlubmVyIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikgewotCQkJCVJlZmVyZW5j
ZUV4cHJlc3Npb24gcmVmZXJlbmNlRXhwcmVzc2lvbiA9IChSZWZlcmVuY2VFeHByZXNzaW9uKSBp
bm5lcjsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBpbGVUaW1lRGVjbCA9IHJlZmVyZW5jZUV4cHJl
c3Npb24ucHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdCh0aGlzLnNjb3BlKTsKLQkJCQlpZgkoY29t
cGlsZVRpbWVEZWNsICE9IG51bGwpIHsKLQkgIAkJCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdmFy
aWFibGVzID0gY29tcGlsZVRpbWVEZWNsLnR5cGVWYXJpYWJsZXM7Ci0JCQkJCWlmICh2YXJpYWJs
ZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQkJCQkJVHlwZUJpbmRpbmdbXSBh
cmd1bWVudHMgPSBnZXRTb2x1dGlvbnModmFyaWFibGVzLCAoSW52b2NhdGlvblNpdGUpIGlubmVy
LCBib3VuZHMpOwotCQkJCQkJcmVmZXJlbmNlRXhwcmVzc2lvbi5iaW5kaW5nID0gdGhpcy5lbnZp
cm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjb21waWxlVGltZURlY2ws
IGFyZ3VtZW50cyk7Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGlubmVyIGluc3RhbmNl
b2YgSW52b2NhdGlvbikgewotCQkJCUludm9jYXRpb24gaW5uZXJNZXNzYWdlID0gKEludm9jYXRp
b24pIGlubmVyOwotCQkJCVR5cGVCaW5kaW5nIGlubmVyVGFyZ2V0VHlwZSA9IGlubmVyLmV4cGVj
dGVkVHlwZSgpOyAvLyBtYXkgYmUgc2V0IGZyb20gYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMK
LQkJCQlpZiAoaW5uZXJUYXJnZXRUeXBlICE9IG51bGwgJiYgIWlubmVyVGFyZ2V0VHlwZS5pc1By
b3BlclR5cGUodHJ1ZSkpCi0JCQkJCWlubmVyVGFyZ2V0VHlwZSA9IG51bGw7Ci0JCQkJTWV0aG9k
QmluZGluZyBiaW5kaW5nID0gaW5uZXJNZXNzYWdlLmJpbmRpbmcoaW5uZXJUYXJnZXRUeXBlLCBp
bm5lclRhcmdldFR5cGUgIT0gbnVsbCwgdGhpcy5zY29wZSk7Ci0JCQkJaWYgKGJpbmRpbmcgPT0g
bnVsbCkKLQkJCQkJY29udGludWU7Ci0JCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IGJpbmRp
bmcuc2hhbGxvd09yaWdpbmFsKCk7Ci0KLQkJCQkvLyBhcHBseSBpbmZlcmVuY2UgcmVzdWx0cyBv
bnRvIHRoZSBhbGxvY2F0aW9uIHR5cGUgb2YgaW5uZXIgZGlhbW9uZHM6Ci0JCQkJaWYgKG9yaWdp
bmFsLmlzQ29uc3RydWN0b3IoKSAmJiBpbm5lci5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQkJ
UmVmZXJlbmNlQmluZGluZyBkZWNsYXJpbmdDbGFzcyA9IG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNz
OwotCQkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50cyA9IGdldFNvbHV0aW9ucyhkZWNsYXJpbmdD
bGFzcy50eXBlVmFyaWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsKLQkJCQkJZGVjbGFy
aW5nQ2xhc3MgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGRlY2xh
cmluZ0NsYXNzLCBhcmd1bWVudHMsIGRlY2xhcmluZ0NsYXNzLmVuY2xvc2luZ1R5cGUoKSk7Ci0J
CQkJCW9yaWdpbmFsID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpZGVjbGFyaW5nQ2xhc3Mp
LmNyZWF0ZVBhcmFtZXRlcml6ZWRNZXRob2Qob3JpZ2luYWwpOwotCQkJCQlpbm5lci5jaGVja0Fn
YWluc3RGaW5hbFRhcmdldFR5cGUoaW5uZXJUYXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsJCi0JCQkJ
CWlmICh0aGlzLmVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0ZvckNv
bnRyYWRpdGlvbnMob3JpZ2luYWwsIGlubmVyTWVzc2FnZSwgdGhpcy5zY29wZSk7Ci0JCQkJfQot
CQkJCQotCQkJCS8vIGFwcGx5IHJlc3VsdHMgb2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBvbnRv
IHRoZSBiaW5kaW5nIG9mIHRoZSBpbm5lciBpbnZvY2F0aW9uOgotCQkJCVR5cGVCaW5kaW5nW10g
c29sdXRpb25zID0gZ2V0U29sdXRpb25zKG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgaW5uZXJN
ZXNzYWdlLCBib3VuZHMpOwotCQkJCWlmIChzb2x1dGlvbnMgPT0gbnVsbCkgewotCQkJCQlpZiAo
YmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewot
CQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW5uZXJNZXNzYWdlLmdldEluZmVy
ZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYmluZGluZyk7
Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCAmJiAhYmluZGluZy5pc1ZhbGlkQmluZGluZygp
KSB7Ci0JCQkJCQkJaW5uZXJDdHgucmVwb3J0SW52YWxpZEludm9jYXRpb24oaW5uZXJNZXNzYWdl
LCBiaW5kaW5nKTsKLQkJCQkJCX0KLQkJCQkJfQotCQkJCQljb250aW51ZTsgLy8gaW5uZXIgaW5m
ZXJlbmNlIG5vdCByZXF1ZXN0ZWQgLT4gbm90IGEgcHJvYmxlbQotCQkJCX0KLQkJCQlQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gdGhpcy5lbnZpcm9ubWVu
dC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25zKTsK
LQkJCQkKLQkJCQlpZiAoaW5uZXJNZXNzYWdlLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmluZGluZywg
aW5uZXJUYXJnZXRUeXBlKSkgeyAvLyBvbmx5IGlmIHdlIGFyZSBhY3R1YWxseSBpbXByb3Zpbmcg
YW55dGhpbmcKLQkJCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW5u
ZXJNZXNzYWdlLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCX0KLQkJCX0KLQkJfQot
CQl0aGlzLnN0ZXBDb21wbGV0ZWQgPSBCSU5ESU5HU19VUERBVEVEOyAvLyB3ZSdyZSBkb25lLWRv
bmUKLQl9Ci0KLQlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMoQm91bmRT
ZXQgYWNjZXB0ZWRSZXN1bHQsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMsIGJvb2xlYW4g
aXNWYXJBcmdzKSB7Ci0JCWlmIChhY2NlcHRlZFJlc3VsdCA9PSBudWxsIHx8IHRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cyA9PSBudWxsKSByZXR1cm47Ci0JCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRp
b24gPSBnZXRSZXN1bHRTdWJzdGl0dXRpb24oYWNjZXB0ZWRSZXN1bHQpOwotCQlmb3IgKGludCBp
ID0gMDsgaSA8IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7IGkrKykgewotCQkJVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGdldFBhcmFtZXRlcihwYXJhbWV0ZXJUeXBlcywgaSwgaXNW
YXJBcmdzKTsKLQkJCWlmICghdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQkJdGFy
Z2V0VHlwZSA9IFNjb3BlLnN1YnN0aXR1dGUoc3Vic3RpdHV0aW9uLCB0YXJnZXRUeXBlKTsKLQkJ
CUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50c1tpXTsKLQkJ
CWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJCUludm9jYXRpb24g
aW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByZXNzaW9uOwotCQkJCWlmICghdGhpcy5pbm5l
clBvbGllcy5jb250YWlucyhpbnZvY2F0aW9uKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIG1ldGhv
ZCA9IGludm9jYXRpb24uYmluZGluZyh0YXJnZXRUeXBlLCB0cnVlLCB0aGlzLnNjb3BlKTsKLQkJ
CQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHByZXZpb3VzQmlu
ZGluZyA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZDsKLQkJCQkJ
CUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29u
dGV4dChwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwpIHsKLQkJ
CQkJCQkvLyB3ZSBoYXZlIGEgbm9uLXBvbHkgZ2VuZXJpYyBpbnZvY2F0aW9uLCB3aGljaCBuZWVk
cyBpbmZlcmVuY2UgYnV0IGlzIG5vdCBjb25uZWN0ZWQgdmlhIGlubmVyUG9saXMuCi0JCQkJCQkJ
Ly8gRmluaXNoIHRoYXQgaW5uZXIgaW5mZXJlbmNlIG5vdyAoaW5jbC4gYmluZGluZyB1cGRhdGVz
KToKLQkJCQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlubmVyQ3R4LmluZmVySW52
b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgcHJldmlvdXNCaW5kaW5nKTsKLQkJCQkJCQlpZiAoIWlu
bmVyQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCWlubmVyQ3R4LnJlcG9ydElu
dmFsaWRJbnZvY2F0aW9uKGludm9jYXRpb24sIGlubmVyQmluZGluZyk7Ci0JCQkJCQkJfQotCQkJ
CQkJCWlmIChpbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmluZGluZywgdGFyZ2V0VHlw
ZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFsbHkgaW1wcm92aW5nIGFueXRoaW5nCi0JCQkJ
CQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRpb24sIGlu
bmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQl9IGVsc2Ug
aWYobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpewotCQkJCQkJ
ZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgdGhpcy5z
Y29wZSk7Ci0JCQkJCX0KLQkJCQl9IGVsc2UgewotCQkJCQlleHByZXNzaW9uLnNldEV4cGVjdGVk
VHlwZSh0YXJnZXRUeXBlKTsKLQkJCQl9Ci0JCQl9IGVsc2UgewotCQkJCWlmICh0aGlzLmlubmVy
UG9saWVzLmNvbnRhaW5zKGV4cHJlc3Npb24pKSAvLyBtYXkgZ2V0IGhlcmUgZm9yIFJlZmVyZW5j
ZUV4cHJlc3Npb25zIC4uLgotCQkJCQlleHByZXNzaW9uLnNldEV4cGVjdGVkVHlwZSh0YXJnZXRU
eXBlKTsgLy8gLi4uIHByZXBhcmUgZm9yIGZpbmFsIGluZmVyZW5jZSB2aWEgcmViaW5kSW5uZXJQ
b2xpZXMKLQkJCQllbHNlCi0JCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRU
eXBlKHRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJfQotCQl9CiAJfQogCiAJcHJpdmF0ZSBT
dWJzdGl0dXRpb24gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGZpbmFsIEJvdW5kU2V0IHJlc3VsdCkg
ewpAQCAtMTU4MSwxOSArMTM2MywxNCBAQAogCQkJaWYgKG1ldGhvZC5yZXR1cm5UeXBlLmVyYXN1
cmUoKS5pc0NvbXBhdGlibGVXaXRoKGV4cGVjdGVkVHlwZSkpCiAJCQkJcmV0dXJuIG1ldGhvZDsg
Ly8gZG9uJ3QgY291bnQgYXMgcHJvYmxlbS4KIAkJfQotCQlpZiAoZXhwZWN0ZWRUeXBlID09IG51
bGwpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBhc3N1bWUgaW5mZXJlbmNlIGZhaWx1cmUgY29uY2Vy
bmVkIGFub3RoZXIgZXhwcmVzc2lvbgotCQlQcm9ibGVtTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0
aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBt
ZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuUGFyYW1ldGVyaXplZE1ldGhvZEV4cGVj
dGVkVHlwZVByb2JsZW0pOworCQkvKiBXZSB1c2VkIHRvIGNoZWNrIGlmIGV4cGVjdGVkIHR5cGUg
aXMgbnVsbCBhbmQgaWYgc28gcmV0dXJuIG1ldGhvZCwgYnV0IHRoYXQgaXMgd3JvbmcgLSBpdCBp
bmplY3RzIGFuIGluY29tcGF0aWJsZSBtZXRob2QgaW50byBvdmVybG9hZCByZXNvbHV0aW9uLgor
CQkgICBpZiB3ZSBnZXQgaGVyZSB3aXRoIGV4cGVjdGVkIHR5cGUgc2V0IHRvIG51bGwgYXQgYWxs
LCB0aGUgdGFyZ2V0IGNvbnRleHQgZG9lcyBub3QgZGVmaW5lIGEgdGFyZ2V0IHR5cGUgKHZhbmls
bGEgY29udGV4dCksIHNvIGluZmVyZW5jZSBoYXMgZG9uZSBpdHMKKwkJICAgYmVzdCBhbmQgbm90
aGluZyBtb3JlIHRvIGRvIHRoYW4gdG8gc2lnbmFsIGVycm9yLiAKKwkJICovCisJCVByb2JsZW1N
ZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0
aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5J
bnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUpOwogCQlwcm9ibGVtTWV0aG9kLnJldHVyblR5
cGUgPSBleHBlY3RlZFR5cGU7CiAJCXByb2JsZW1NZXRob2QuaW5mZXJlbmNlQ29udGV4dCA9IHRo
aXM7CiAJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCX0KLQotCXB1YmxpYyB2b2lkIHJlcG9ydElu
dmFsaWRJbnZvY2F0aW9uKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9kQmluZGluZyBiaW5k
aW5nKSB7Ci0JCWlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgTWVzc2FnZVNlbmQpCi0JCQl0aGlz
LnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QoKE1lc3NhZ2VTZW5kKSBpbnZv
Y2F0aW9uLCBiaW5kaW5nKTsKLQkJZWxzZQotCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5pbnZhbGlkQ29uc3RydWN0b3IoKFN0YXRlbWVudClpbnZvY2F0aW9uLCBiaW5kaW5nKTsKIAl9
CiAKIAkvLyBkZWJ1Z2dpbmc6CkBAIC0xNjMzLDEyICsxNDEwLDYgQEAKIAkJaWYgKHRoaXMuY3Vy
cmVudEJvdW5kcyAhPSBudWxsKQogCQkJYnVmLmFwcGVuZCh0aGlzLmN1cnJlbnRCb3VuZHMudG9T
dHJpbmcoKSk7CiAJCXJldHVybiBidWYudG9TdHJpbmcoKTsKLQl9Ci0KLQlwdWJsaWMgdm9pZCBh
ZGRQcm9ibGVtTWV0aG9kKFByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QpIHsKLQkJ
aWYgKHRoaXMucHJvYmxlbU1ldGhvZHMgPT0gbnVsbCkKLQkJCXRoaXMucHJvYmxlbU1ldGhvZHMg
PSBuZXcgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+KCk7Ci0JCXRoaXMucHJvYmxlbU1ldGhvZHMu
YWRkKHByb2JsZW1NZXRob2QpOwogCX0KIAogCS8qKgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggMmU5NmE0Yi4uZjM3
MDNlNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy5qYXZhCkBAIC0zMSw2ICszMSw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9uczsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNv
bnRleHQxOC5Tb2x1dGlvbjsKIAogLyoqCiAgKiBCaW5kaW5nIGRlbm90aW5nIGEgZ2VuZXJpYyBt
ZXRob2QgYWZ0ZXIgdHlwZSBwYXJhbWV0ZXIgc3Vic3RpdHV0aW9ucyBnb3QgcGVyZm9ybWVkLgpA
QCAtNDEsNyArNDIsNyBAQAogcHVibGljIGNsYXNzIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIGltcGxlbWVudHMgU3Vi
c3RpdHV0aW9uIHsKIAogICAgIHB1YmxpYyBUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHM7Ci0g
ICAgcHJpdmF0ZSBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKKyAgICBwcm90ZWN0ZWQg
TG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7CiAgICAgcHVibGljIGJvb2xlYW4gaW5mZXJy
ZWRSZXR1cm5UeXBlOwogICAgIHB1YmxpYyBib29sZWFuIHdhc0luZmVycmVkOyAvLyBvbmx5IHNl
dCB0byB0cnVlIGZvciBpbnN0YW5jZXMgcmVzdWx0aW5nIGZyb20gbWV0aG9kIGludm9jYXRpb24g
aW5mZXJyZW5jZQogICAgIHB1YmxpYyBib29sZWFuIGlzUmF3OyAvLyBzZXQgdG8gdHJ1ZSBmb3Ig
bWV0aG9kIGJlaGF2aW5nIGFzIHJhdyBmb3Igc3Vic3RpdHV0aW9uIHB1cnBvc2UKQEAgLTUwLDMx
ICs1MSwxMSBAQAogCS8qKgogCSAqIFBlcmZvcm0gaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9k
IHR5cGUgcGFyYW1ldGVycyBhbmQvb3IgZXhwZWN0ZWQgdHlwZQogCSAqIDxwPgotCSAqIEluIDEu
OCsgdGhlIGZvbGxvd2luZyBkaXNjaXBsaW5lIGhhcyB0byBiZSBvYnNlcnZlZCBieSBjYWxsZXJz
OgotCSAqIEVhY2ggaW52b2NhdGlvbiBtdXN0IGJlIHN1YmplY3RlZCB0byB0d28gbGV2ZWxzIG9m
IGluZmVyZW5jZToKLQkgKiA8L3A+Ci0JICogPHVsPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0FQ
UExJQ0FCSUxJVFkgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZX0sIHdoaWNoIG1h
eSBiZSBhcHBsaWVkCi0JICogICAgIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZSBpbnZvY2F0
aW9uPC9saT4KLQkgKiA8bGk+IHtAbGluayBTY29wZSNJTlZPQ0FUSU9OX1RZUEUgSW52b2NhdGlv
biBUeXBlIEluZmVyZW5jZX0sIHdoaWNoIGlzIGZpbmFsbHkgcGVyZm9ybWVkCi0JICogICAgIGZv
ciB0aGUgc2VsZWN0ZWQgbWV0aG9kIGFuZCB3aGljaCBhZGRzIGluZm9ybWF0aW9uIGZyb20gdGhl
ICJ0YXJnZXQgdHlwZSIuPC9saT4KLQkgKiA8L3VsPgotCSAqIDxwPgotCSAqIENsaWVudHMgY2Fu
IGNvbnRyb2wgd2hpY2ggcGFydHMgb2YgdGhlIGluZmVyZW5jZSBzaG91bGQgYmUgcGVyZm9ybWVk
IGJ5IHBhc3NpbmcgdGhlIGFwcHJvcHJpYXRlCi0JICogZmxhZ3MgaW50byBhcmd1bWVudCAnaW5m
ZXJlbmNlTGV2ZWwnLiBPbiBlYWNoIGNhbGwgcGF0aCBpdCBtdXN0IGJlIGVuc3VyZWQgdGhhdCBv
bmUgb3IgbW9yZQotCSAqIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2VzIGFyZSBh
bHdheXMgZm9sbG93ZWQgYnkgZXhhY3RseSBvbmUgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQot
CSAqICh1bmxlc3MgZXJyb3JzIGhhdmUgYmVlbiBkZXRlY3RlZCkuCi0JICogPC9wPgotCSAqIDxw
PgotCSAqIEluaXRpYWwgY2xpZW50cyBhcmUgdGhlIGRpcmVjdCBjYWxsZXJzIG9mCi0JICoge0Bs
aW5rIFNjb3BlI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRp
bmdbXSxJbnZvY2F0aW9uU2l0ZSxpbnQpfSwKLQkgKiB3aGljaCBzaG91bGQgZWl0aGVyIGludm9r
ZSBib3RoIGxldmVscyBvZiBpbmZlcmVuY2UgPGVtPm9yPC9lbT4gZGVsZWdhdGUgdGhlIHNlY29u
ZCBwYXJ0IHRvCi0JICoge0BsaW5rIFNjb3BlI21vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0
aG9kQmluZGluZ1tdLGludCxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLFJlZmVyZW5jZUJp
bmRpbmcpfSwKLQkgKiB3aGljaCBpcyBpbnRlbmRlZCB0byBlbnN1cmUgY29tcGxldGluZyB0aGUg
aW5mZXJlbmNlIG9uIGFsbCBub24tZXJyb3IgZXhpdHMuCisJICogSW4gMS44KyBpZiB0aGUgZXhw
ZWN0ZWQgdHlwZSBpcyBub3QgeWV0IGF2YWlsYWJsZSBkdWUgdG8gdGhpcyBjYWxsIGJlaW5nIGFu
IGFyZ3VtZW50IHRvIGFuIG91dGVyIGNhbGwgd2hpY2ggaXMgbm90IG92ZXJsb2FkLXJlc29sdmVk
IHlldCwKKwkgKiB0aGUgcmV0dXJuZWQgbWV0aG9kIGJpbmRpbmcgd2lsbCBiZSBhIFBvbHlQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuCiAJICogPC9wPiAgCiAJICovCi0JcHVibGlj
IHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRp
bmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBzY29wZSwK
LQkJCUludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBpbnQgaW5mZXJlbmNlTGV2ZWwpCisJ
cHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBz
Y29wZSwJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpCiAJewogCQlQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZTsKIAkJVHlwZVZhcmlhYmxlQmlu
ZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFyaWFibGVzOwpAQCAt
OTUsMTI2ICs3NiwzNiBAQAogCQkJLy8gaW5pdGlhbGl6ZXMgdGhlIG1hcCBvZiBzdWJzdGl0dXRl
cyAodmFyIC0tPiB0eXBlW11bXXsgZXF1YWwsIGV4dGVuZHMsIHN1cGVyfQogCQkJVHlwZUJpbmRp
bmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsKIAotLy8gPT09PSAx
Ljg6IFRoZSBtYWluIGRyaXZlciBmb3IgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09
PQotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKIAkJCUNvbXBpbGVyT3B0
aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKLQkJCWlmIChj
b21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkg
ewotCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBTY29wZS5BUFBMSUNBQklMSVRZKSAhPSAwKQot
CQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29w
ZSk7Ci0JCQkJZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYm
IG9yaWdpbmFsTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKQotCQkJCQlpbmZDdHgxOCA9ICgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLmdldElu
ZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgb3JpZ2lu
YWxNZXRob2QpOwotCQkJCWlmIChpbmZDdHgxOCA9PSBudWxsKQotCQkJCQlyZXR1cm4gb3JpZ2lu
YWxNZXRob2Q7Ci0JCQl9Ci0JCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCkgewotCQkJCXRyeSB7Ci0J
CQkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVzdWx0ID0gbnVsbDsKLQkJCQkJQm91bmRTZXQgcmVz
dWx0ID0gbnVsbDsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJ
VFkpICE9IDApIHsKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qx
OChvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBzY29wZSwgaW52b2NhdGlvblNpdGUpOwogCi0J
CQkJCQkvLyAtLS0tIDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0KLQkJCQkJCWJvb2xlYW4g
aXNEaWFtb25kID0gb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCi0JCQkJCQkJCSYmIGlu
dm9jYXRpb25TaXRlIGluc3RhbmNlb2YgRXhwcmVzc2lvbgotCQkJCQkJCQkmJiAoKEV4cHJlc3Np
b24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOwotCQkJ
CQkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gcGFyYW1ldGVycy5sZW5ndGgpIHsKLQkJCQkJCQlp
bmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAv
LyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJpY3QvbG9vc2UgKyB2YXJh
cmcpIGlzIHN1ZmZpY2llbnQuCi0JCQkJCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGlj
YWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQpOwotCQkJCQkJCXBy
b3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKLQkJCQkJCX0KLQkJCQkJCWlmIChw
cm92aXNpb25hbFJlc3VsdCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlzVmFyYXJncygpKSB7
Ci0JCQkJCQkJLy8gY2hlY2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxpY2FiaWxpdHkKLQkJCQkJ
CQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7
IC8vIHN0YXJ0IG92ZXIKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNl
Q29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKLQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25B
cHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJ
CQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJCQkJ
aWYgKHByb3Zpc2lvbmFsUmVzdWx0ICE9IG51bGwgJiYgaW5mQ3R4MTguaXNSZXNvbHZlZChwcm92
aXNpb25hbFJlc3VsdCkpIHsKLQkJCQkJCQlpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbiA9IHByb3Zp
c2lvbmFsUmVzdWx0OwotCQkJCQkJCWluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPSBJbmZlcmVuY2VD
b250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRDsKLQkJCQkJCQlpZiAoaW52b2NhdGlvblNp
dGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJCQkJCQkoKFJlZmVyZW5jZUV4
cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kID0gaW5mQ3R4MTguaW5mZXJl
bmNlS2luZDsKLQkJCQkJCX0KLQkJCQkJfSBlbHNlIHsKLQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0
ID0gaW5mQ3R4MTguc3RvcmVkU29sdXRpb247Ci0JCQkJCX0KLQkJCQkJcmVzdWx0ID0gaW5mQ3R4
MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0ZXIgcmVkdWN0aW9uLCB3
aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkvLyAxLjctIG9ubHkuCisJCQlpbmZlcmVu
Y2VDb250ZXh0ID0gbmV3IEluZmVyZW5jZUNvbnRleHQob3JpZ2luYWxNZXRob2QpOworCQkJbWV0
aG9kU3Vic3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0
aG9kLCBhcmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQpOworCQkJaWYgKG1l
dGhvZFN1YnN0aXR1dGUgPT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsKIAotCQkJCQlUeXBlQmlu
ZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgp
OwotCQkJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKLQkJCQkJYm9vbGVhbiBp
bnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7Ci0JCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwg
JiBTY29wZS5JTlZPQ0FUSU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVkPwotCQkJCQkJCSYmIChl
eHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRl
eHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSkgeyAvLyBwb3NzaWJsZT8KLQotCQkJCQkJLy8gLS0t
LSAxOC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KLQkJCQkJCXJlc3VsdCA9IGluZkN0eDE4
LmluZmVySW52b2NhdGlvblR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUsIGludm9jYXRpb25TaXRl
LCBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gdHJ1ZTsK
LQkJCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7Ci0JCQkJCQlpZiAoaGFz
UmV0dXJuUHJvYmxlbSkKLQkJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsgLy8gbGV0
J3MgcHJlZmVyIGEgdHlwZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVybiB0eXBlIG92ZXIgcmVw
b3J0aW5nIG5vIG1hdGNoIGF0IGFsbAotCQkJCQl9IGVsc2UgewotCQkJCQkJLy8gd2UncmUgbm90
IHlldCByZWFkeSBmb3IgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQotCQkJCQkJcmVzdWx0ID0g
cHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCX0KLQotCQkJCQlpZiAocmVzdWx0ICE9IG51bGwpIHsK
LQkJCQkJCS8vIGFzc2VtYmxlIHRoZSBzb2x1dGlvbiBldGM6Ci0JCQkJCQlUeXBlQmluZGluZ1td
IHNvbHV0aW9ucyA9IGluZkN0eDE4LmdldFNvbHV0aW9ucyh0eXBlVmFyaWFibGVzLCBpbnZvY2F0
aW9uU2l0ZSwgcmVzdWx0KTsKLQkJCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgewotCQkJCQkJ
CQotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsTWV0aG9kLCBzb2x1dGlvbnMpOwotCQkJ
CQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3b3JraW5nIGZyb20gdGhl
IHByb3Zpc2lvbmFsIHJlc3VsdD8KLQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9k
ID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwg
bWV0aG9kU3Vic3RpdHV0ZSk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9kIGluc3RhbmNlb2Yg
UHJvYmxlbU1ldGhvZEJpbmRpbmcpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJ
CQkJCQl9Ci0JCQkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQpIHsKLQkJCQkJCQkJaWYg
KGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpCi0J
CQkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhtZXRo
b2RTdWJzdGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOwotCQkJCQkJCQlpbmZDdHgxOC5y
ZWJpbmRJbm5lclBvbGllcyhyZXN1bHQsIG1ldGhvZFN1YnN0aXR1dGUucGFyYW1ldGVycyk7Ci0J
CQkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0aXR1dGUuYm91
bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOwotCQkJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCAh
PSBudWxsKQotCQkJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JCQkJCQkJfSBlbHNlIHsK
LQkJCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikKLQkJCQkJ
CQkJCSgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4
dChtZXRob2RTdWJzdGl0dXRlLCBpbmZDdHgxOCk7IC8vIGtlZXAgY29udGV4dCBzbyB3ZSBjYW4g
ZmluaXNoIGxhdGVyCi0JCQkJCQkJfQotCQkJCQkJCXJldHVybiBtZXRob2RTdWJzdGl0dXRlOwot
CQkJCQkJfQotCQkJCQl9Ci0JCQkJCXJldHVybiBudWxsOwotCQkJCX0gY2F0Y2ggKEluZmVyZW5j
ZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBGSVhNRSBzdG9wLWdhcCBtZWFzdXJlCi0J
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcihlLmdldE1l
c3NhZ2UoKSwgaW52b2NhdGlvblNpdGUpOwotCQkJCQlyZXR1cm4gbnVsbDsKKwkJCS8vIHN1YnN0
aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwg
YXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUg
aW4gcGFyYW0gbWV0aG9kCisJCQkvLyAxNS4xMi4yLjggLSBpbmZlcnJpbmcgdW5yZXNvbHZlZCB0
eXBlIGFyZ3VtZW50cworCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5yZXNvbHZlZFR5cGVB
cmd1bWVudCgpKSB7CisJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsgLy8g
b25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43CisJCQkJCWludCBs
ZW5ndGggPSBpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLmxlbmd0aDsKKwkJCQkJU3lzdGVt
LmFycmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1
bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKIAkJCQl9Ci0JCQl9
IGVsc2UgewotLy8gPT09PSAxLjggPT09PQotCQkJCWluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5m
ZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IGlu
ZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHBh
cmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQpOworCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJl
dHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgeworCQkJCQlUeXBlQmluZGluZyBleHBlY3Rl
ZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQkJCQlpZiAo
ZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKKwkJCQkJCS8vIHJlY29yZCBpdCB3YXMgZXhwbGljaXQg
ZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVmYXVsdCAoc2VlIGJlbG93
KQorCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5oYXNFeHBsaWNpdEV4cGVjdGVkVHlwZSA9IHRydWU7
CisJCQkJCX0gZWxzZSB7CisJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29wZS5nZXRKYXZhTGFuZ09i
amVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKKwkJCQkJfQorCQkJCQlpbmZlcmVu
Y2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJCQl9CisJCQkJbWV0aG9k
U3Vic3RpdHV0ZSA9IG1ldGhvZFN1YnN0aXR1dGUuaW5mZXJGcm9tRXhwZWN0ZWRUeXBlKHNjb3Bl
LCBpbmZlcmVuY2VDb250ZXh0KTsKIAkJCQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQog
CQkJCQlyZXR1cm4gbnVsbDsKLQkJCQkKLQkJCQkvLyBzdWJzdGl0dXRlcyBtYXkgaG9sZCBudWxs
IHRvIGRlbm90ZSB1bnJlc29sdmVkIHZhcnMsIGJ1dCBudWxsIGFyZ3VtZW50cyBnb3QgcmVwbGFj
ZWQgd2l0aCByZXNwZWN0aXZlIG9yaWdpbmFsIHZhcmlhYmxlIGluIHBhcmFtIG1ldGhvZAotCQkJ
CS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJndW1lbnRzCi0JCQkJ
aWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5yZXNvbHZlZFR5cGVBcmd1bWVudCgpKSB7Ci0JCQkJ
CWlmIChpbmZlcmVuY2VDb250ZXh0LmlzVW5jaGVja2VkKSB7IC8vIG9ubHkgcmVtZW1iZXIgdW5j
aGVja2VkIHN0YXR1cyBwb3N0IDE1LjEyLjIuNwotCQkJCQkJaW50IGxlbmd0aCA9IGluZmVyZW5j
ZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOwotCQkJCQkJU3lzdGVtLmFycmF5Y29weShpbmZl
cmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1bWVudHMgPSBuZXcgVHlw
ZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKLQkJCQkJfQotCQkJCQlpZiAobWV0aG9kU3Vi
c3RpdHV0ZS5yZXR1cm5UeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQpIHsKLQkJCQkJCVR5cGVCaW5k
aW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7
Ci0JCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKLQkJCQkJCQkvLyByZWNvcmQgaXQg
d2FzIGV4cGxpY2l0IGZyb20gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBhc3N1bWVkIGJ5IGRlZmF1
bHQgKHNlZSBiZWxvdykKLQkJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0
ZWRUeXBlID0gdHJ1ZTsKLQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJZXhwZWN0ZWRUeXBlID0gc2Nv
cGUuZ2V0SmF2YUxhbmdPYmplY3QoKTsgLy8gYXNzdW1lIE9iamVjdCBieSBkZWZhdWx0Ci0JCQkJ
CQl9Ci0JCQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsK
LQkJCQkJfQotCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZy
b21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwotCQkJCQlpZiAobWV0aG9k
U3Vic3RpdHV0ZSA9PSBudWxsKQotCQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJfQogCQkJfQogCQl9
CiAKQEAgLTI2Niw2ICsxNTcsOTMgQEAKIAkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7CiAJfQog
CisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgo
TWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGZp
bmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkgeworCQkKKwkJ
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0aXR1dGUgPSBudWxs
OworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9k
LnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IG51bGw7CisJ
CVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9kLnBhcmFtZXRlcnM7CisJ
CWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsK
KwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9u
cygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKKwkJCisJCXRy
eSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7CisJCQlCb3VuZFNldCBy
ZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2FiaWxpdHkpOiAtLS0tCisJ
CQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHBy
ZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNEaWFtb25kID0gaXNQb2x5RXhw
cmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7CisJCQlpZiAoYXJndW1l
bnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJCWluZkN0eDE4LmluZmVyZW5j
ZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRl
IGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVu
dC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0
aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0gaW5mQ3R4MTguc29sdmUo
KTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFy
Z3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBhcHBsaWNhYmlsaXR5CisJ
CQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUp
OyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNv
bnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGlj
YWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQpOworCQkJCXJlc3Vs
dCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVzdWx0ID09IG51bGwpCisJCQkJ
cmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChyZXN1bHQpKSB7CisJCQkJ
aW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZ
X0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4
cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmlu
ZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8vIENIRUNLCisJCQl9IGVs
c2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJLy8gQXBwbGljYWJpbGl0eSBzdWNjZWVk
ZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBpZiBwb3NzaWJsZS4KKwkJCVR5
cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRU
eXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKKwkJCWlmIChleHBl
Y3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQo
KS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAxOC41LjIgKEludm9jYXRpb24g
dHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJlc3VsdDsKKwkJCQlyZXN1bHQg
PSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1
Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCQlyZXN1bHQgPSBpbmZDdHgx
OC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBlLCBpbnZvY2F0aW9uU2l0
ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOwor
CQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7CisJCQkJaWYgKGhhc1JldHVy
blByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVm
ZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcg
bm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKKwkJCQkvLyBh
c3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0g
aW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1
bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCQltZXRob2RTdWJzdGl0dXRl
ID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChv
cmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsg
Ly8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PworCQkJCQkJ
TWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1l
dGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7CisJCQkJCQlpZiAo
cHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7CisJCQkJCQkJ
bWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CisJ
CQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQpIHsKKwkJCQkJ
CWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVk
KQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1l
dGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7CisJCQkJCQlNZXRob2RCaW5k
aW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5kQ2hlY2sxOChzY29wZSwg
YXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpIHsKKwkJCQkJCQlt
ZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKKwkJ
CQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdldFR5cGUucHV0KGV4cGVjdGVk
VHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJlc3VsdCkpOworCQkJCQl9IGVs
c2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5UGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQl9CisJCQkJCWlmIChpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJCQkoKEludm9jYXRpb24pIGlu
dm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0aG9kU3Vic3RpdHV0ZSwg
aW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlzaCBsYXRlcgorCQkJCQly
ZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQorCQkJcmV0dXJuIG51bGw7CisJ
CX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgeworCQkJLy8gRklYTUUgc3Rv
cC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5j
ZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQlyZXR1cm4gbnVsbDsK
KwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sxOChTY29wZSBzY29wZSwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9uIHN1YnN0aXR1dGlvbiA9IHRo
aXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRl
ID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0wLDAgKzEsMTggQEAKKy8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENvbnRyaWJ1dG9yczoKKyAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xhc3MgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyB7
IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJsaWMgUG9seVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgYXBwbGljYWJs
ZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxlTWV0aG9kLm9yaWdpbmFsTWV0aG9kLCBhcHBs
aWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFwcGxpY2FibGVNZXRob2QuZW52aXJvbm1lbnQp
OworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCmluZGV4IDVjNzViOTAuLmZkYmQy
ZjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2YQpAQCAtNTEsNiArNTEsMTEgQEAKIAlw
dWJsaWMgYm9vbGVhbiBpc1BvbHlUeXBlKCkgewogCQlyZXR1cm4gdHJ1ZTsKIAl9CisJCisJQE92
ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsKKwkJcmV0dXJuIHRo
aXMuZXhwcmVzc2lvbi5pc0Z1bmN0aW9uYWxUeXBlKCk7CisJfQogCiAJcHVibGljIGNoYXJbXSBx
dWFsaWZpZWRTb3VyY2VOYW1lKCkgewogCQlyZXR1cm4gcmVhZGFibGVOYW1lKCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1By
b2JsZW1SZWFzb25zLmphdmEKaW5kZXggNzNlMDQxYi4uZWQ1M2QyOSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxl
bVJlYXNvbnMuamF2YQpAQCAtNDAsOSArNDAsOSBAQAogCWZpbmFsIGludCBOb25TdGF0aWNPckFs
aWVuVHlwZVJlY2VpdmVyID0gMjA7CiAJZmluYWwgaW50IEF0dGVtcHRUb0J5cGFzc0RpcmVjdFN1
cGVyID0gMjE7IC8vIHN1cGVyIGFjY2VzcyB3aXRoaW4gZGVmYXVsdCBtZXRob2QKIAlmaW5hbCBp
bnQgRGVmZWN0aXZlQ29udGFpbmVyQW5ub3RhdGlvblR5cGUgPSAyMjsKLQlmaW5hbCBpbnQgUGFy
YW1ldGVyaXplZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0gPSAyMzsKKwlmaW5hbCBpbnQgSW52
b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlID0gMjM7CiAJZmluYWwgaW50IEFwcGxpY2FibGVN
ZXRob2RPdmVycmlkZGVuQnlJbmFwcGxpY2FibGUgPSAyNDsKIAlmaW5hbCBpbnQgQ29udHJhZGlj
dG9yeU51bGxBbm5vdGF0aW9ucyA9IDI1OwogCWZpbmFsIGludCBOb1N1Y2hNZXRob2RPbkFycmF5
ID0gMjY7Ci0JZmluYWwgaW50IEluZmVycmVkQXBwbGlhYmxlTWV0aG9kSW5hcHBsaWNhYmxlID0g
Mjc7IC8vIDE4LjUuMSBpZ25vcmVzIGFyZ3VtZW50cyBub3QgcGVydGluZW50IHRvIGFwcGxpY2Fi
aWxpdHkuIFdoZW4gdGhlc2UgYXJlIHRha2VuIGludG8gY29uc2lkZXJhdGlvbiBtZXRob2QgY291
bGQgZmFpbCBhcHBsaWNhYmlsaXR5CisJZmluYWwgaW50IEluZmVycmVkQXBwbGljYWJsZU1ldGhv
ZEluYXBwbGljYWJsZSA9IDI3OyAvLyAxOC41LjEgaWdub3JlcyBhcmd1bWVudHMgbm90IHBlcnRp
bmVudCB0byBhcHBsaWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtlbiBpbnRvIGNvbnNpZGVy
YXRpb24gbWV0aG9kIGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmlu
ZGluZy5qYXZhCmluZGV4IGUxNGM3NWYuLjMxNzAwYWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUmF3VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5n
LmphdmEKQEAgLTIwNSw2ICsyMDUsMTEgQEAKIAkJfQogCQl0aGlzLmFyZ3VtZW50cyA9IHR5cGVB
cmd1bWVudHM7CiAJfQorCQkKKwlAT3ZlcnJpZGUgCisJcHVibGljIFR5cGVCaW5kaW5nIHVuY2Fw
dHVyZShTY29wZSBzY29wZSkgeworCQlyZXR1cm4gdGhpczsKKwl9CiAJCiAJQE92ZXJyaWRlCiAJ
VHlwZUJpbmRpbmcgc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKEluZmVyZW5jZVZhcmlhYmxl
IHZhciwgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZVR5cGUpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBjOWYzZTkw
Li5mNTE4YjkzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04NywxOSArODcsOSBAQAogCXB1YmxpYyBzdGF0aWMg
ZmluYWwgaW50IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNT1JF
X0dFTkVSSUMgPSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZCgpIGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9mIHR3byBs
ZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgotCSAqLwot
CS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4LjUuMSku
ICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0JLyoqIFJl
cXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJsaWMgc3Rh
dGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJvdGgge0Bs
aW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGluZmVyZW5j
ZS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQUExJQ0FC
SUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVibGljIFNj
b3BlIHBhcmVudDsKKwkKIAogCXByb3RlY3RlZCBTY29wZShpbnQga2luZCwgU2NvcGUgcGFyZW50
KSB7CiAJCXRoaXMua2luZCA9IGtpbmQ7CkBAIC00MzcsNiArNDI3LDkgQEAKIAkJcmV0dXJuIGRl
ZmF1bHRTdWJzdGl0dXRvci5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgb3JpZ2luYWxUeXBlKTsK
IAl9CiAKKwlwdWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93T3JpZ2luYWwoKSB7CisJ
CXJldHVybiBmYWxzZTsgCisJfQogCS8qKgogCSAqIFJldHVybnMgYW4gYXJyYXkgb2YgdHlwZXMs
IHdoZXJlIG9yaWdpbmFsIHR5cGVzIGdvdCBzdWJzdGl0dXRlZCBnaXZlbiBhIHN1YnN0aXR1dGlv
bi4KIAkgKiBPbmx5IGFsbG9jYXRlIGFuIGFycmF5IGlmIGFueXRoaW5nIGlzIGRpZmZlcmVudC4K
QEAgLTY5MSwxMCArNjg0LDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9ubHkKIAkgKiBHaXZlbiBh
IG1ldGhvZCwgcmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3QgYmUgY29udmVydGVkIHRv
IHBhcmFtZXRlcnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2QgaW4gY2Fz
ZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJpZ2dlcmVk
OwotCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVu
IHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdp
bmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2suIAogCSAqLwotCXBy
b3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQlyZXR1cm4gY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVu
Y2VMZXZlbCwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3Vt
ZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJcmV0dXJuIGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0aW9uU2l0ZSwgZmFsc2Up
OwogCX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcwMiw4ICs2OTUsNyBAQAog
CSAqIFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNhc2UgdGhlIG1ldGhvZCB3
YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJlZDsKIAkgKiBpbiBjYXNl
IHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2Vy
IGl0IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRzLAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZl
bCwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXByb3RlY3RlZCBmaW5hbCBN
ZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUs
IGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJCVR5cGVCaW5kaW5nW10g
Z2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50
cygpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2QucGFyYW1ldGVyczsKQEAg
LTczOCw5ICs3MzAsMTUgQEAKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdzOwogCQkJZWxzZSAgLy8g
ZW5zdXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxvdyBjYW4gdXBkYXRlIGFy
Z3VtZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86IGFsd2F5cyBjb3B5IGJl
Zm9yZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1l
bnRzLCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF0sIDAsIGFyZ0xlbmd0
aCk7Ci0JCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRl
LCBpbmZlcmVuY2VMZXZlbCk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMs
IGludm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkgcmV0dXJuIG51bGw7IC8v
IGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgcmV0dXJuIG1l
dGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNlZGVuY2UKKwkJCWlmIChj
b21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAm
JiBtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYg
aW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJSW52b2NhdGlvbiBp
bnZvY2F0aW9uID0gKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlOworCQkJCUluZmVyZW5jZUNv
bnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKKwkJCQlpZiAoaW5mQ3R4ICE9IG51
bGwgJiYgaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5G
RVJSRUQpCisJCQkJCXJldHVybiBtZXRob2Q7IC8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwg
bm8gbmVlZCB0byByZWNoZWNrCisJCQl9CiAJCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCkBAIC03NTUsNyArNzUzLDcgQEAK
IAkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0lu
dm9jYXRpb24gJiYgY29tcGlsZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzcpCiAJCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyA9IGZhbHNlOwog
CQl9Ci0JCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgobWV0aG9kLCBhcmd1bWVu
dHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRpb25TaXRlKSkgPiBOT1RfQ09N
UEFUSUJMRSkgeworCQlpZiAoKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFy
Z3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4gTk9UX0NPTVBBVElCTEUpIHsK
IAkJCWlmICgobWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1Np
Z25hdHVyZSkgIT0gMCkgewogCQkJCS8vIGdlbmVyYXRlIHBvbHltb3JwaGljIG1ldGhvZAogCQkJ
CXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBoaWNNZXRob2QobWV0aG9k
LCBhcmd1bWVudHMpOwpAQCAtNzY3LDE1MCArNzY1LDEwIEBACiAJCS8vIGluIHdoaWNoIGNhc2Ug
dGhpcyBwcm9ibGVtIGNhdGVnb3J5IHdpbGwgYmUgYm9ndXMKIAkJaWYgKGdlbmVyaWNUeXBlQXJn
dW1lbnRzICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFC
TEVTKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1ldGhvZC5z
ZWxlY3RvciwgYXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kVHlw
ZU1pc21hdGNoKTsKKwkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBwZXJ0aW5lbnQg
dG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9u
IG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywgbGFtYmRhIHNoYXBlL2FyaXR5
IG1pc21hdGNoIC4uLikKKwkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpCisJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5n
KG1ldGhvZCwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNv
bnMuSW5mZXJyZWRBcHBsaWNhYmxlTWV0aG9kSW5hcHBsaWNhYmxlKTsKIAkJcmV0dXJuIG51bGw7
IC8vIGluY29tcGF0aWJsZQotCX0KLQotCXByaXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxp
dHlMZXZlbDE4KE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywg
Ym9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7
Ci0JCWpkazE4Y2hlY2tzOgotCQlpZiAoc2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgY29t
cGlsZXJPcHRpb25zKCkuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsx
XzgpIHsKLQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBzaXRlOwotCQkJ
aWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykg
ewotCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKLQkJ
CQlpZiAoaW5mQ3R4ICE9IG51bGwpIHsKLQkJCQkJLy8gaW5mZXJlbmNlIGlzIHJlc3BvbnNpYmxl
LCBubyBuZWVkIHRvIHJlY2hlY2sKLQkJCQkJaWYgKGluZkN0eC5pc1ZhckFyZ3MoKSkKLQkJCQkJ
CXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7Ci0JCQkJCXJldHVybiBDT01QQVRJQkxFOwotCQkJ
CX0KLQkJCX0KLQkJCS8vIGNvbGxlY3QgaW5uZXIgaW52b2NhdGlvbnMgd2hlcmUgdGhlIG91dGVy
IGRpZCBub3QgaW52b2x2ZSBhbnkgaW5mZXJlbmNlOgotCQkJRXhwcmVzc2lvbltdIGludm9jYXRp
b25Bcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJaWYgKGludm9jYXRpb25B
cmd1bWVudHMgIT0gbnVsbCkgewotCQkJCUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJl
bmNlSGVscGVyID0gaW52b2NhdGlvbi5pbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCWludCBh
cmdMZW4gPSBpbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsKLQkJCQlib29sZWFuIGlzVmFyQXJn
c1tdID0gbmV3IGJvb2xlYW5bMV07IC8vIGVtdWxhdGUgYW4gaW4tb3V0IHBhcmFtZXRlciBmb3Ig
Y29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIoLi4pCi0JCQkJaXNWYXJBcmdzWzBdID0gbWV0
aG9kLmlzVmFyYXJncygpICYmIGFyZ0xlbiAhPSBtZXRob2QucGFyYW1ldGVycy5sZW5ndGg7IC8v
IGlmIHNhbWUgbGVuZ3RocywgaXNWYXJBcmdzIGNhbiBzdGlsbCBiZSB1cGRhdGVkIGJlbG93Ci0J
CQkJaW50IGxldmVsID0gQ09NUEFUSUJMRTsKLQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ0xl
bjsgaSsrKSB7Ci0JCQkJCVR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSA9IGkgPCBhcmd1bWVudHMu
bGVuZ3RoID8gYXJndW1lbnRzW2ldIDogbnVsbDsgLy8gbGVuZ3RoIG1pc21hdGNoIG1heSBoYXBw
ZW4gZnJvbSBDb2RlU25pcHBldE1lc3NhZ2VTZW5kLnJlc29sdmVUeXBlKCkgaW4gdGhlIGlmIChh
cmdIYXNFcnJvcikgYmxvY2suCi0JCQkJCWludCBuZXh0TGV2ZWwgPSBjb21wYXRpYmlsaXR5TGV2
ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBpbnZvY2F0aW9uQXJn
dW1lbnRzW2ldLCBhcmd1bWVudFR5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsKLQkJCQkJaWYg
KG5leHRMZXZlbCA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJCXJldHVybiBuZXh0TGV2ZWw7Ci0J
CQkJCWlmIChuZXh0TGV2ZWwgPT0gLTIpCi0JCQkJCQlicmVhayBqZGsxOGNoZWNrczsKLQkJCQkJ
bGV2ZWwgPSBNYXRoLm1heChsZXZlbCwgIG5leHRMZXZlbCk7Ci0JCQkJfQotCQkJCXJldHVybiBs
ZXZlbDsgLy8gbmVpdGhlciBOT1RfQ09NUEFUSUJMRSBub3IgdW5rbm93bigtMikgc2VlbgotCQkJ
fQotCQl9Ci0JCS8vIGZhbGwgYmFjayB0byBvbGQgbWV0aG9kOgotCQlib29sZWFuIHRvbGVyYXRl
SW5mZXJlbmNlVmFyaWFibGVzID0gKChzaXRlIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lv
bikgJiYgKChSZWZlcmVuY2VFeHByZXNzaW9uKSBzaXRlKS50cmlhbFJlc29sdXRpb24pOwotCQly
ZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyk7Ci0JfQot
Ci0JcHJpdmF0ZSBpbnQgY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIoTWV0aG9kQmluZGlu
ZyBtZXRob2QsIElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyLCBFeHBy
ZXNzaW9uIGludm9jQXJnLCBUeXBlQmluZGluZyBhcmdUeXBlLCBpbnQgYXJnTGVuLCBpbnQgaSwg
Ym9vbGVhbltdIGlzVmFyQXJncykKLQl7Ci0JCWludCBjb21wYXRpYmxlID0gaXNWYXJBcmdzWzBd
ID8gVkFSQVJHU19DT01QQVRJQkxFIDogQ09NUEFUSUJMRTsKLQkJVHlwZUJpbmRpbmcgcmVzb2x2
ZWRUeXBlID0gaW52b2NBcmcucmVzb2x2ZWRUeXBlOwotCQlUeXBlQmluZGluZyB0YXJnZXRUeXBl
ID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2QucGFyYW1ldGVycywgaSwg
aXNWYXJBcmdzWzBdKTsKLQkJaWYgKCFpc1ZhckFyZ3NbMF0gJiYgc2hvdWxkVHJ5VmFyYXJncyht
ZXRob2QsIHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSkpIHsKLQkJCWlzVmFyQXJnc1swXSA9IHRy
dWU7Ci0JCQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRo
b2QucGFyYW1ldGVycywgaSwgdHJ1ZSk7Ci0JCX0KLQkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCkK
LQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsgLy8gbWlzbWF0Y2hpbmcgbnVtYmVyIG9mIGFyZ3Mg
b3Igb3RoZXIgc2V2ZXJlIHByb2JsZW0gaW5zaWRlIG1ldGhvZCBiaW5kaW5nCi0JCWludCBsZXZl
bCA9IC0yOyAvLyBkb24ndCBrbm93Ci0JCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIEludm9jYXRp
b24gJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwpIHsKLQkJCUludm9jYXRpb24gaW5uZXJQb2x5ID0g
KEludm9jYXRpb24pIGludm9jQXJnOwotCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwocmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKLQkJCWlmIChsZXZlbCAhPSBOT1RfQ09N
UEFUSUJMRSkgewotCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnVHlwZSwgcmVzb2x2
ZWRUeXBlKSAmJiBpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQlpbm5lckluZmVy
ZW5jZUhlbHBlci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwgcmVzb2x2ZWRUeXBlLCBhcmdM
ZW4sIGkpOwotCQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBsZXZlbCk7Ci0JCQl9IGVs
c2UgewotCQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5uZXJQb2x5LmJpbmRpbmco
bnVsbCwgZmFsc2UsIG51bGwpOyAvLyAxLiB0cnkgd2l0aG91dCB1cGRhdGUKLQkJCQlpZiAoaW5u
ZXJCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
Ci0JCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBpbm5lclBhcmFtZXRlcml6
ZWQgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBpbm5lckJpbmRpbmc7Ci0J
CQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGlubmVyUG9seS5nZXRJbmZlcmVuY2VD
b250ZXh0KGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCWlmIChpbmZDdHgxOCAhPSBudWxsICYm
ICFpbmZDdHgxOC5oYXNSZXN1bHRGb3IodGFyZ2V0VHlwZSkpIHsKLQkJCQkJCS8vIG5vdCBkZXRl
Y3RlZCBhcyBjb21wYXRpYmxlLCBiZWNhdXNlIGluZmVyZW5jZSBzdGlsbCBuZWVkcyB0byBjb21w
bGV0ZT8KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJCQkJ
CU1ldGhvZEJpbmRpbmcgc29sdXRpb24gPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKGlu
bmVyUG9seSwgaW5uZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJCWlmIChzb2x1dGlvbiAhPSBudWxs
ICYmIHNvbHV0aW9uLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQlpZiAoaW5uZXJQb2x5LnVw
ZGF0ZUJpbmRpbmdzKHNvbHV0aW9uLCB0YXJnZXRUeXBlKSkgewotCQkJCQkJCQlpZiAoaW5uZXJJ
bmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJCQkJCWlubmVySW5mZXJlbmNlSGVscGVyLnJl
Z2lzdGVySW5uZXJSZXN1bHQobWV0aG9kLCBpbnZvY0FyZy5yZXNvbHZlZFR5cGUsIGFyZ0xlbiwg
aSk7Ci0JCQkJCQkJfQotCQkJCQkJCWlmIChzb2x1dGlvbi5yZXR1cm5UeXBlICE9IG51bGwpIHsK
LQkJCQkJCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoc29sdXRpb24ucmV0
dXJuVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQkJCQkJCWlmIChsZXZlbCAhPSBOT1RfQ09NUEFUSUJM
RSkKLQkJCQkJCQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBsZXZlbCk7Ci0JCQkJCQkJ
fQotCQkJCQkJfQotCQkJCQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBlKG51bGwpOwotCQkJCQkJ
cmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQl9IGVsc2UgaWYgKGlubmVyUG9seSBpbnN0YW5j
ZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJCQkvLyBub3QgZGV0ZWN0ZWQgYXMgY29t
cGF0aWJsZSwgYmVjYXVzZSBpdHMgYSBkaWFtb25kIHdob3NlIHR5cGUgaGFzbid0IHlldCBiZWVu
IGluZmVycmVkPwotCQkJCQkJVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRzID0gcmVzb2x2ZWRU
eXBlLnR5cGVBcmd1bWVudHMoKTsKLQkJCQkJCWlmICh0eXBlQXJndW1lbnRzICE9IG51bGwgJiYg
dHlwZUFyZ3VtZW50cy5sZW5ndGggPT0gMCkgewotCQkJCQkJCUFsbG9jYXRpb25FeHByZXNzaW9u
IGFsbG9jID0gKEFsbG9jYXRpb25FeHByZXNzaW9uKSBpbm5lclBvbHk7Ci0JCQkJCQkJaWYgKChh
bGxvYy50eXBlLmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMCkgewotCQkJCQkJCQkvLyBu
b3QteWV0LWluZmVycmVkIGRpYW1vbmQ6IGVyYXN1cmUgY29tcGF0aWJpbGl0eSBzaG91bGQgc3Vm
ZmljZSwgZGV0YWlsIHdpbGwgYmUgY2hlY2tlZCB1c2luZyBpbmZlcmVuY2UKLQkJCQkJCQkJaWYg
KHJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUuZXJhc3VyZSgpLCB0aGlz
KSkKLQkJCQkJCQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQl9Ci0JCQkJfSBlbHNlIGlmIChpbm5lclBv
bHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQlNZXRob2RCaW5kaW5n
IHVwZGF0ZWRNZXRob2QgPSBpbm5lclBvbHkuYmluZGluZyh0YXJnZXRUeXBlLCBmYWxzZSwgbnVs
bCk7IC8vIDIuIHRyeSB3aXRoIHVwZGF0aW5nCi0JCQkJCWlmICh1cGRhdGVkTWV0aG9kICE9IGlu
bmVyQmluZGluZyAmJiB1cGRhdGVkTWV0aG9kICE9IG51bGwpIHsKLQkJCQkJCWlmICh1cGRhdGVk
TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCWlmICh1cGRhdGVkTWV0aG9kLmRlY2xh
cmluZ0NsYXNzLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0JCQkJCQkJcmV0dXJuIGNv
bXBhdGlibGU7Ci0JCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCQl9IGVsc2UgaWYg
KHVwZGF0ZWRNZXRob2QucHJvYmxlbUlkKCkgPT0gUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKSB7
Ci0JCQkJCQkJbGV2ZWwgPSAtMjsgLy8gbmVpdGhlciBnb29kIG5vciBiYWQsIGFuc3dlciAidW5r
bm93biIKLQkJCQkJCX0KLQkJCQkJfQotCQkJCX0KLQkJCX0KLQkJfSBlbHNlIGlmIChpbnZvY0Fy
Zy5pc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIENvbmRp
dGlvbmFsRXhwcmVzc2lvbikgewotCQkJCUNvbmRpdGlvbmFsRXhwcmVzc2lvbiBjZSA9IChDb25k
aXRpb25hbEV4cHJlc3Npb24pIGludm9jQXJnOwotCQkJCWludCBsZXZlbDEgPSBjb21wYXRpYmls
aXR5TGV2ZWwxOEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBjZS52YWx1
ZUlmVHJ1ZSwgYXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCWlmIChsZXZlbDEg
PT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQlpbnQg
bGV2ZWwyID0gY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVy
ZW5jZUhlbHBlciwgY2UudmFsdWVJZkZhbHNlLCBhcmdUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJn
cyk7Ci0JCQkJaWYgKGxldmVsMiA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJcmV0dXJuIE5PVF9D
T01QQVRJQkxFOwotCQkJCXJldHVybiBNYXRoLm1heChsZXZlbDEsIGxldmVsMik7Ci0JCQl9Ci0J
CQkvLyBMRSBvciBSRToKLQkJCWlmIChpbnZvY0FyZy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5
cGUsIHRoaXMpKQotCQkJCXJldHVybiBDT01QQVRJQkxFOwotCQkJaWYgKCFpc1ZhckFyZ3NbMF0g
JiYgbWV0aG9kLmlzVmFyYXJncygpKSB7IC8vIGNhbid0IHVzZSBzaG91bGRUcnlWYXJhcmdzIHdp
dGhvdXQgYSByZXNvbHZlZFR5cGUsIHNvIGp1c3QgdHJ5IGl0OgotCQkJCWlzVmFyQXJnc1swXSA9
IHRydWU7Ci0JCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIo
bWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOwotCQkJCWlmICh0YXJnZXRUeXBlICE9IG51bGwg
JiYgaW52b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCQkJcmV0
dXJuIFZBUkFSR1NfQ09NUEFUSUJMRTsKLQkJCX0KLQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsK
LQkJfSBlbHNlIGlmIChyZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiByZXNvbHZlZFR5cGUuaXNWYWxp
ZEJpbmRpbmcoKSkgewotCQkJLy8gbmVlZCB0byBoYW5kbGUgIm5vcm1hbCIgZXhwcmVzc2lvbnMg
dG9vLCBzaW5jZSBtaXhlZCBwb2x5L3N0YW5kYWxvbmUgYXJndW1lbnQgbGlzdHMgbXVzdCBiZSBm
dWxseSBhbmFseXplZC4KLQkJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwocmVz
b2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKLQkJfQotCQlyZXR1cm4gbGV2ZWw7Ci0JfQotCi0JcHJp
dmF0ZSBib29sZWFuIHNob3VsZFRyeVZhcmFyZ3MoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nIHJlc29sdmVkVHlwZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQlpZiAoIW1l
dGhvZC5pc1ZhcmFyZ3MoKSkKLQkJCXJldHVybiBmYWxzZTsKLQkJaWYgKHRhcmdldFR5cGUgPT0g
bnVsbCkKLQkJCXJldHVybiB0cnVlOwkvLyBvZmYgcmFuZ2UKLQkJaWYgKHRhcmdldFR5cGUuaXNB
cnJheVR5cGUoKSAmJiByZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiAhcmVzb2x2ZWRUeXBlLmlzQ29t
cGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8gbm90IGEg
ZGlyZWN0IG1hdGNoIGJ1dCBob3BlIHRvIGltcHJvdmUKLQkJcmV0dXJuIGZhbHNlOwogCX0KIAog
CS8qKgpAQCAtMTI2Nyw3ICsxMTI1LDcgQEAKIAkJCW5leHQ6CiAJCQlmb3IgKGludCBpID0gc3Rh
cnRGb3VuZFNpemU7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1ldGhvZEJpbmRpbmcgbWV0
aG9kQmluZGluZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50QXQoaSk7Ci0JCQkJTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkp
OworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJ
CQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0
aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChjb25jcmV0ZU1hdGNoZXMgIT0gbnVs
bCkgewpAQCAtMTI5Nyw4ICsxMTU1LDYgQEAKIAkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7IC8v
IGNhbiBiZSBudWxsCiAJCQl9CiAJCQljb25jcmV0ZU1hdGNoID0gY2FuZGlkYXRlc1swXTsKLQkJ
CS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0
YXNrcyAoMTguNS4yKToKLQkJCWNvbmNyZXRlTWF0Y2ggPSBpbmZlckludm9jYXRpb25UeXBlKGlu
dm9jYXRpb25TaXRlLCBjb25jcmV0ZU1hdGNoLCBhcmd1bWVudFR5cGVzKTsKIAkJCWlmIChjb25j
cmV0ZU1hdGNoICE9IG51bGwpCiAJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBl
UmVmZXJlbmNlcyhjb25jcmV0ZU1hdGNoLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJcmV0dXJuIGNv
bmNyZXRlTWF0Y2g7CkBAIC0xMzcxLDcgKzEyMjcsNyBAQAogCQkJCS8vIHRhcmdldGluZyBhIGdl
bmVyaWMgbWV0aG9kIGNvdWxkIGZpbmQgYW4gZXhhY3QgbWF0Y2ggd2l0aCB2YXJpYWJsZSByZXR1
cm4gdHlwZQogCQkJCWlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpICE9
IG51bGwpIHsKIAkJCQkJLy8gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoLi4pIHdpbGwgcmV0dXJu
IGEgUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nIGlmIG5lZWRlZAotCQkJCQlleGFjdE1ldGhvZCA9
IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0UpOworCQkJCQlleGFjdE1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSk7CiAJCQkJfSBlbHNlIGlmICgoZXhhY3RNZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5ub3Rh
dGlvblBvbHltb3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJCS8vIGdlbmVyYXRlIHBvbHlt
b3JwaGljIG1ldGhvZAogCQkJCQlyZXR1cm4gdGhpcy5lbnZpcm9ubWVudCgpLmNyZWF0ZVBvbHlt
b3JwaGljTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKQEAgLTE3NjMsMjIgKzE2
MTksMTMgQEAKIAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1ldGhvZEJpbmRpbmcgbWV0
aG9kQmluZGluZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50QXQoaSk7Ci0JCQkJTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkp
OworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJ
CQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0
aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChmb3VuZFNpemUgPT0gMSAmJiBjb21w
YXRpYmxlTWV0aG9kLmNhbkJlU2VlbkJ5KHJlY2VpdmVyVHlwZSwgaW52b2NhdGlvblNpdGUsIHRo
aXMpKSB7CiAJCQkJCQkJLy8gcmV0dXJuIHRoZSBzaW5nbGUgdmlzaWJsZSBtYXRjaCBub3cKIAkJ
CQkJCQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQogCQkJCQkJCQlyZXR1cm4g
ZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVu
dFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBN
ZXRob2RCaW5kaW5nIFtdIHtjb21wYXRpYmxlTWV0aG9kfSk7Ci0vLyA9PT09IDEuODogRmluYWxp
emUgdHlwZSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09Ci0JCQkJCQkJTWV0aG9k
QmluZGluZyBpbXByb3ZlZCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNv
bXBhdGlibGVNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwotCQkJCQkJCWlmIChpbXByb3ZlZCAhPSBu
dWxsICYmIGltcHJvdmVkLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQkJY29tcGF0aWJsZU1l
dGhvZCA9IGltcHJvdmVkOwotCQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJCXByb2JsZW1NZXRob2Qg
PSBpbXByb3ZlZDsKLQkJCQkJCQkJY29udGludWU7Ci0JCQkJCQkJfQotLy8gPT09PSAxLjggPT09
PQogCQkJCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjb21wYXRpYmxlTWV0aG9k
LnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCQkJCXJldHVybiBjb21wYXRpYmxlTWV0aG9kOwogCQkJ
CQkJfQpAQCAtMTg4Nyw4ICsxNzM0LDcgQEAKIAkJCWNhc2UgMSA6CiAJCQkJaWYgKHNlYXJjaEZv
ckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkKIAkJCQkJcmV0dXJuIGZpbmREZWZhdWx0QWJzdHJhY3RN
ZXRob2QocmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNp
dGUsIGNsYXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9kQmluZGluZyBbXSB7IGNh
bmRpZGF0ZXNbMF0gfSk7Ci0JCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBw
ZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCWNhbmRpZGF0ZSA9IGluZmVy
SW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNhbmRpZGF0ZXNbMF0sIGFyZ3VtZW50VHlw
ZXMpOworCQkJCWNhbmRpZGF0ZSA9IGNhbmRpZGF0ZXNbMF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAh
PSBudWxsKQogCQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRo
cm93bkV4Y2VwdGlvbnMpOwogCQkJCXJldHVybiBjYW5kaWRhdGU7CkBAIC0yMzgwLDcgKzIyMjYs
MTAgQEAKIAkJfQogCQlpZiAoZXhhY3RNZXRob2QgPT0gbnVsbCB8fCAhZXhhY3RNZXRob2QuY2Fu
QmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKQogCQkJcmV0dXJuIG51bGw7Ci0JCWlmIChl
eGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCBleGFjdE1ldGhvZC50eXBlVmFyaWFibGVzKCkgIT0g
QmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFy
Z3VtZW50cygpID09IG51bGwpCisJCQorCQlmaW5hbCBUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVu
dHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOworCQlUeXBlVmFyaWFi
bGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0TWV0aG9kLnR5cGVWYXJpYWJsZXMoKTsK
KwkJaWYgKGV4YWN0TWV0aG9kLmlzVmFyYXJncygpIHx8ICh0eXBlVmFyaWFibGVzICE9IEJpbmRp
bmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgKHR5cGVBcmd1bWVudHMgPT0gbnVsbCB8fCB0eXBlQXJn
dW1lbnRzLmxlbmd0aCAhPSB0eXBlVmFyaWFibGVzLmxlbmd0aCkpKQogCQkJcmV0dXJuIG51bGw7
CiAJCQogCQlpZiAocmVjZWl2ZXJUeXBlLmlzQXJyYXlUeXBlKCkpIHsKQEAgLTIzOTUsNiArMjI0
NCwxMCBAQAogCQl7CiAJCQlyZXR1cm4gZW52aXJvbm1lbnQoKS5jcmVhdGVHZXRDbGFzc01ldGhv
ZChyZWNlaXZlclR5cGUsIGV4YWN0TWV0aG9kLCB0aGlzKTsKIAkJfQorCQkKKwkJaWYgKHR5cGVW
YXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgCisJCQlyZXR1cm4gZW52aXJv
bm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChleGFjdE1ldGhvZCwgdHlw
ZUFyZ3VtZW50cyk7CisJCiAJCXJldHVybiBleGFjdE1ldGhvZDsKIAl9CiAJCQpAQCAtMjQxNywx
OSArMjI3MCwyNiBAQAogCQlNZXRob2RCaW5kaW5nIGV4YWN0Q29uc3RydWN0b3IgPSBudWxsOwog
CQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZShyZWNlaXZlclR5cGUpOwogCQlNZXRob2RC
aW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMu
SU5JVCk7CisJCWZpbmFsIFR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZv
Y2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOwogCQlmb3IgKGludCBpID0gMCwgbGVu
Z3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJTWV0aG9kQmluZGlu
ZyBjb25zdHJ1Y3RvciA9IG1ldGhvZHNbaV07CiAJCQlpZiAoIWNvbnN0cnVjdG9yLmNhbkJlU2Vl
bkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCQljb250aW51ZTsKIAkJCWlmIChjb25zdHJ1
Y3Rvci5pc1ZhcmFyZ3MoKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCWlmIChjb25zdHJ1Y3Rvci50
eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBpbnZvY2F0aW9u
U2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQlpZiAoY29uc3RydWN0b3Iu
dHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgZ2VuZXJpY1R5
cGVBcmd1bWVudHMgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCWlmIChleGFjdENvbnN0
cnVjdG9yID09IG51bGwpIHsKIAkJCQlleGFjdENvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7CiAJ
CQl9IGVsc2UgewogCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWZpbmFsIFR5cGVWYXJp
YWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gZXhhY3RDb25zdHJ1Y3Rvci50eXBlVmFyaWFi
bGVzKCk7CisJCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMp
IHsKKwkJCWlmICh0eXBlVmFyaWFibGVzLmxlbmd0aCAhPSBnZW5lcmljVHlwZUFyZ3VtZW50cy5s
ZW5ndGgpCisJCQkJcmV0dXJuIG51bGw7CisJCQlleGFjdENvbnN0cnVjdG9yID0gZW52aXJvbm1l
bnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChleGFjdENvbnN0cnVjdG9yLCBn
ZW5lcmljVHlwZUFyZ3VtZW50cyk7CiAJCX0KIAkJcmV0dXJuIGV4YWN0Q29uc3RydWN0b3I7CiAJ
fQpAQCAtMjQ1OCw3ICsyMzE4LDcgQEAKIAkJCWlmIChtZXRob2RCaW5kaW5nICE9IG51bGwgJiYg
bWV0aG9kQmluZGluZy5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCSAg
ICAvLyB0YXJnZXRpbmcgYSBub24gZ2VuZXJpYyBjb25zdHJ1Y3RvciB3aXRoIHR5cGUgYXJndW1l
bnRzID8KIAkJCSAgICBpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAh
PSBudWxsKQotCQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
bWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJF
TkNFKTsKKwkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlyZXR1cm4g
bWV0aG9kQmluZGluZzsKIAkJCX0KIAkJCU1ldGhvZEJpbmRpbmdbXSBtZXRob2RzID0gcmVjZWl2
ZXJUeXBlLmdldE1ldGhvZHMoVHlwZUNvbnN0YW50cy5JTklULCBhcmd1bWVudFR5cGVzLmxlbmd0
aCk7CkBAIC0yNDcyLDcgKzIzMzIsNyBAQAogCQkJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJ
CQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBudWxsOwogCQkJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCQlNZXRob2RC
aW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2Rz
W2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQkJ
TWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
bWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlmIChjb21w
YXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxp
ZEJpbmRpbmcoKSkKIAkJCQkJCWNvbXBhdGlibGVbY29tcGF0aWJsZUluZGV4KytdID0gY29tcGF0
aWJsZU1ldGhvZDsKQEAgLTI0OTUsOCArMjM1NSw3IEBACiAJCQkJCXZpc2libGVbdmlzaWJsZUlu
ZGV4KytdID0gbWV0aG9kOwogCQkJfQogCQkJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7Ci0JCQkJ
Ly8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRh
c2tzICgxOC41LjIpOgotCQkJCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25T
aXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlyZXR1cm4gdmlzaWJsZVswXTsK
IAkJCX0KIAkJCWlmICh2aXNpYmxlSW5kZXggPT0gMCkKIAkJCQlyZXR1cm4gbmV3IFByb2JsZW1N
ZXRob2RCaW5kaW5nKApAQCAtMjc2MCw3ICsyNjE5LDcgQEAKIAkJCQkJCQkJaWYgKGZvdW5kUHJv
YmxlbSA9PSBudWxsKQogCQkJCQkJCQkJZm91bmRQcm9ibGVtID0gcG9zc2libGU7IC8vIGFuc3dl
ciBhcyBlcnJvciBjYXNlIG1hdGNoCiAJCQkJCQkJfSBlbHNlIGlmIChwb3NzaWJsZS5pc1N0YXRp
YygpKSB7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
QVBQTElDQUJJTElUWSk7CisJCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9
IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0
aW9uU2l0ZSk7CiAJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJ
CQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCQkJCQlp
ZiAoY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeSh1bml0U2NvcGUuZlBhY2thZ2UpKSB7CkBA
IC0zNTk2LDggKzM0NTUsOCBAQAogCQkJZm9yIChpbnQgaSA9IChvbmVQYXJhbXNMZW5ndGggPiB0
d29QYXJhbXNMZW5ndGggPyB0d29QYXJhbXNMZW5ndGggOiBvbmVQYXJhbXNMZW5ndGgpIC0gMjsg
aSA+PSAwOyBpLS0pCiAJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhvbmVQYXJhbXNbaV0s
IHR3b1BhcmFtc1tpXSkgJiYgIW9uZVBhcmFtc1tpXS5pc0NvbXBhdGlibGVXaXRoKHR3b1BhcmFt
c1tpXSkpCiAJCQkJCXJldHVybiBmYWxzZTsKLQkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwob25lLCB0d29QYXJhbXMsIHRydWUsIGZhbHNlKSA9PSBOT1RfQ09NUEFUSUJMRQotCQkJ
CQkmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQYXJhbXMsIHRydWUsIGZh
bHNlKSA9PSBWQVJBUkdTX0NPTVBBVElCTEUpCisJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVlKSA9PSBOT1RfQ09NUEFUSUJMRQorCQkJCQkmJiBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQYXJhbXMsIHRydWUpID09IFZBUkFS
R1NfQ09NUEFUSUJMRSkKIAkJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQlyZXR1cm4gZmFsc2U7CkBA
IC00MzcyLDMzICs0MjMxLDIyIEBACiAJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgbW9z
dFNwZWNpZmljTWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10gdmlzaWJsZSwgaW50IHZpc2li
bGVTaXplLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb25TaXRl
IGludm9jYXRpb25TaXRlLCBSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewogCiAJCWJv
b2xlYW4gaXNKZGsxOCA9IGNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNzRmls
ZUNvbnN0YW50cy5KREsxXzg7Ci0KIAkJLy8gY29tbW9uIHBhcnQgZm9yIGFsbCBjb21wbGlhbmNl
IGxldmVsczoKIAkJaW50W10gY29tcGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbdmlzaWJsZVNp
emVdOwogCQlpbnQgY29tcGF0aWJsZUNvdW50ID0gMDsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCB2
aXNpYmxlU2l6ZTsgaSsrKSB7Ci0JCQlUeXBlQmluZGluZ1tdIGFyZ1R5cGVzID0gYXJndW1lbnRU
eXBlczsKLQkJCWlmIChpc0pkazE4ICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2Nh
dGlvbikgewotCQkJCUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyID0g
KChJbnZvY2F0aW9uKWludm9jYXRpb25TaXRlKS5pbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJ
CWlmIChpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQlhcmdUeXBlcyA9IGlubmVy
SW5mZXJlbmNlSGVscGVyLmdldEFyZ3VtZW50VHlwZXNGb3JDYW5kaWRhdGUodmlzaWJsZVtpXSwg
YXJndW1lbnRUeXBlcyk7Ci0JCQl9Ci0JCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNbaV0gPSBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJnVHlwZXMpKSAhPSBOT1Rf
Q09NUEFUSUJMRSkgeworCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspCisJ
CQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcykpICE9IE5PVF9DT01QQVRJQkxFKSB7CiAJCQkJ
aWYgKGkgIT0gY29tcGF0aWJsZUNvdW50KSB7CiAJCQkJCXZpc2libGVbY29tcGF0aWJsZUNvdW50
XSA9IHZpc2libGVbaV07CiAJCQkJCWNvbXBhdGliaWxpdHlMZXZlbHNbY29tcGF0aWJsZUNvdW50
XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNbaV07CiAJCQkJfQogCQkJCWNvbXBhdGlibGVDb3VudCsr
OwogCQkJfQotCQl9Ci0vLyBUT0RPOiBEaXNhYmxlZCwgYmVjYXVzZSB3ZSBrbm93IGEgc2l0dWF0
aW9uIHdoZXJlIHRoaXMgaXMgZXhwZWN0ZWQsIHNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
NDI5NDkwCi0vLwkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkgewotLy8JCQlw
cm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlUHJvYmxlbSgiKFJlY292ZXJlZCkgSW50
ZXJuYWwgaW5jb25zaXN0ZW5jeSB3aGlsZSBjaGVja2luZyBpbnZvY2F0aW9uIGFtYmlndWl0eSIs
IGludm9jYXRpb25TaXRlLCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5nKTsgLy8kTk9OLU5MUy0x
JAotLy8JCX0KKwkJCiAJCWlmIChjb21wYXRpYmxlQ291bnQgPT0gMCkgewogCQkJcmV0dXJuIG5l
dyBQcm9ibGVtTWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVz
LCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJCX0gZWxzZSBpZiAoY29tcGF0aWJsZUNvdW50
ID09IDEpIHsKLQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlw
ZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQlNZXRob2RC
aW5kaW5nIGNhbmRpZGF0ZSA9IHZpc2libGVbMF07CiAJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwp
CiAJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRh
dGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDQwOCw4ICs0
MjU2LDggQEAKIAkJCVN5c3RlbS5hcnJheWNvcHkoY29tcGF0aWJpbGl0eUxldmVscywgMCwgY29t
cGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbY29tcGF0aWJsZUNvdW50XSwgMCwgY29tcGF0aWJs
ZUNvdW50KTsKIAkJfQogCQkKKwkJCiAJCU1ldGhvZEJpbmRpbmdbXSBtb3JlU3BlY2lmaWMgPSBu
ZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlU2l6ZV07Ci0KIAkJaWYgKGlzSmRrMTgpIHsKIAkJCS8v
IDE1LjEyLjIuNSBDaG9vc2luZyB0aGUgTW9zdCBTcGVjaWZpYyBNZXRob2QKIAkJCWludCBjb3Vu
dCA9IDA7CkBAIC00NDYzLDcgKzQzMTEsNyBAQAogCQkJaWYgKGNvdW50ID09IDApIHsKIAkJCQly
ZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0sIHZpc2libGVbMF0uc2Vs
ZWN0b3IsIHZpc2libGVbMF0ucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKTsK
IAkJCX0gZWxzZSBpZiAoY291bnQgPT0gMSkgewotCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRl
ID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgbW9yZVNwZWNpZmljWzBdLCBh
cmd1bWVudFR5cGVzKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IG1vcmVTcGVjaWZp
Y1swXTsKIAkJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCWNvbXBpbGF0aW9uVW5pdFNj
b3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwog
CQkJCXJldHVybiBjYW5kaWRhdGU7CkBAIC00NTE2LDcgKzQzNjQsNyBAQAogCQkJCQkJCX0KIAkJ
CQkJCX0KIAkJCQkJCU1ldGhvZEJpbmRpbmcgYWNjZXB0YWJsZSA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKG1ldGhvZFRvVGVzdCwgdGllYnJlYWtNZXRob2QucGFyYW1ldGVycywKLQkJCQkJCQkJ
dGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgSU5WT0NBVElPTl9UWVBFLCBsZXZlbCA9PSBWQVJBUkdT
X0NPTVBBVElCTEUpOworCQkJCQkJCQl0aWVCcmVha0ludm9jYXRpb25TaXRlLCBsZXZlbCA9PSBW
QVJBUkdTX0NPTVBBVElCTEUpOwogCQkJCQkJLyogVGhlcmUgYXJlIDQgY2hvaWNlcyB0byBjb25z
aWRlciB3aXRoIGN1cnJlbnQgJiBuZXh0IDoKIAkJCQkJCSBmb28oQikgJiBmb28oQSkgd2hlcmUg
QiBleHRlbmRzIEEKIAkJCQkJCSAxLiB0aGUgMiBtZXRob2RzIGFyZSBlcXVhbCAoYm90aCBhY2Nl
cHQgZWFjaCBvdGhlcnMgcGFyYW1ldGVycykgLT4gd2FudCB0byBjb250aW51ZQpAQCAtNDU0MCw4
ICs0Mzg4LDcgQEAKIAkJCWlmIChjb3VudCA9PSAxKSB7CiAJCQkJZm9yIChpbnQgaSA9IDA7IGkg
PCB2aXNpYmxlU2l6ZTsgaSsrKSB7CiAJCQkJCWlmIChtb3JlU3BlY2lmaWNbaV0gIT0gbnVsbCkg
ewotCQkJCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0
YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBp
bmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlW2ldLCBhcmd1bWVudFR5
cGVzKTsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gdmlzaWJsZVtpXTsKIAkJCQkJ
CWlmIChjYW5kaWRhdGUgIT0gbnVsbCkKIAkJCQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJl
Y29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJCXJl
dHVybiBjYW5kaWRhdGU7CkBAIC00NjYyLDggKzQ1MDksNyBAQAogCQkJCWlmIChtb3N0U3BlY2lm
aWNFeGNlcHRpb25zICE9IG51bGwgJiYgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyAhPSBjdXJyZW50
LnRocm93bkV4Y2VwdGlvbnMpIHsKIAkJCQkJcmV0dXJuIG5ldyBNb3N0U3BlY2lmaWNFeGNlcHRp
b25NZXRob2RCaW5kaW5nKGN1cnJlbnQsIG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMpOwogCQkJCX0K
LQkJCQkvLyAxLjg6IEJlZm9yZSByZXR1cm5pbmcgZ2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8g
cGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZv
Y2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY3VycmVudCwgYXJndW1lbnRUeXBlcyk7CisJCQkJ
cmV0dXJuIGN1cnJlbnQ7CiAJCQl9CiAJCX0KIApAQCAtNDcyOCwxNCArNDU3NCwyNSBAQAogCX0K
IAogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewotCQlyZXR1cm4gcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UpOworCQlyZXR1
cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSk7
CiAJfQkKLQlwdWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RCaW5k
aW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgeworCXB1
YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRo
b2RzKSB7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwog
CQlpbnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJaW50IGFyZ0xlbmd0aCA9
IGFyZ3VtZW50cy5sZW5ndGg7Ci0KKwkJVHlwZUJpbmRpbmcgW10gamxPID0geyBnZXRKYXZhTGFu
Z09iamVjdCgpIH07CiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBjb21waWxl
ck9wdGlvbnMoKTsKKwkJLy8gQWZ0ZXIgYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgYXQgMS44KyB0
aGVyZSBpcyBubyB1c2UgY2hlY2tpbmcgbm9uLWZ1bmN0aW9uYWwgdHlwZSBhcmd1bWVudHMvcGFy
YW1ldGVycyBmb3IgY29tcGF0aWJpbGl0eSBzaW5jZSBpbmZlcmVuY2Ugd291bGQgaGF2ZSBndWFy
YW50ZWVkIHRoYXQuCisJCWJvb2xlYW4gY2hlY2tPbmx5RnVuY3Rpb25hbFR5cGVzID0gZmFsc2U7
CisJCVR5cGVCaW5kaW5nIFtdIHNoYWxsb3dQYXJhbWV0ZXJzID0gcGFyYW1ldGVyczsKKwkJTWV0
aG9kQmluZGluZyBzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Q7CisJCWlmIChjb21waWxlck9wdGlv
bnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQkJaWYgKG1l
dGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgfHwg
c2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsKCkpIHsKKwkJCQljaGVja09ubHlGdW5jdGlvbmFs
VHlwZXMgPSBtZXRob2QgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nOworCQkJCXNoYWxsb3dPcmlnaW5hbCA9IG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsK
KwkJCQlzaGFsbG93UGFyYW1ldGVycyA9IHNoYWxsb3dPcmlnaW5hbC5wYXJhbWV0ZXJzOworCQkJ
fQorCQl9CiAJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV81KSB7CiAJCQlpZiAocGFyYW1MZW5ndGggIT0gYXJnTGVuZ3RoKQogCQkJCXJl
dHVybiBOT1RfQ09NUEFUSUJMRTsKQEAgLTQ3NjEsMTYgKzQ2MTgsMjcgQEAKIAkJCWlmIChwYXJh
bUxlbmd0aCA9PSBhcmdMZW5ndGgpIHsgLy8gYWNjZXB0IFggb3IgWFtdIGJ1dCBub3QgWFtdW10K
IAkJCQlUeXBlQmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4XTsgLy8gaXMgYW4g
QXJyYXlCaW5kaW5nIGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBhcmcgPSBhcmd1bWVu
dHNbbGFzdEluZGV4XTsKKwkJCQkKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFt
LCBhcmcpKSB7Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywg
cGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VW
YXJpYWJsZXMpOworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcs
IHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2ZWwg
PT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNhbGxlZCB3
aXRoIFgKIAkJCQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50c1R5cGUo
KTsKIAkJCQkJCWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJYXJnID0g
KChBcnJheUJpbmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAo
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9DT01QQVRJ
QkxFKQotCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJCWlmICgoKEFycmF5Qmlu
ZGluZykgc2hhbGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCkuaXNQZXJ0
aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKSB7CisJCQkJCQkJaWYg
KGNoZWNrT25seUZ1bmN0aW9uYWxUeXBlcykgeworCQkJCQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25h
bFR5cGUoKSAmJiAhcGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpKQorCQkJCQkJCQkJ
cmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCQkJCQkvLyBBcHBsaWNhYmlsaXR5IGluZmVyZW5j
ZSBtYXkgaGF2ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFyaWFibGVzIHdpdGggamxP
LCBkb24ndCB0cmlwIG9uIHRoZXNlLgorCQkJCQkJCQlpZiAoIXBhcmFtLm1lbnRpb25zQW55KGps
TywgLTEpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRp
ZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJCQkJcmV0
dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCWlmIChwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKKwkJCQkJCQl9CisJCQkJCQl9CiAJCQkJCQlsZXZlbCA9IFZBUkFSR1NfQ09NUEFUSUJMRTsg
Ly8gdmFyYXJncyBzdXBwb3J0IG5lZWRlZAogCQkJCQl9CiAJCQkJfQpAQCAtNDc3OSw3ICs0NjQ3
LDE3IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRl
cnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5k
ZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJy
ZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5
QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJ
CQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21w
YXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
LCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlp
ZiAoISgoQXJyYXlCaW5kaW5nKXNoYWxsb3dQYXJhbWV0ZXJzW2xhc3RJbmRleF0pLmVsZW1lbnRz
VHlwZSgpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZywgc2hhbGxvd09yaWdpbmFsKSkK
KwkJCQkJCQljb250aW51ZTsKKwkJCQkJCWlmIChjaGVja09ubHlGdW5jdGlvbmFsVHlwZXMpIHsK
KwkJCQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAhcGFyYW0uaXNGdW5jdGlvbmFs
SW50ZXJmYWNlKHRoaXMpKQorCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCQkJ
Ly8gQXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgbWF5IGhhdmUgc3Vic3RpdHV0ZWQgdW5yZXNvbHZl
ZCB0eXBlIHZhcmlhYmxlcyB3aXRoIGpsTywgZG9uJ3QgdHJpcCBvbiB0aGVzZS4KKwkJCQkJCQlp
ZiAocGFyYW0ubWVudGlvbnNBbnkoamxPLCAtMSkpCisJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJ
CS8vIEZBTEwgVEhST1VHSCBhbmQgY2hlY2sgY29tcGF0aWJpbGl0eS4KKwkJCQkJCX0KKwkJCQkJ
CWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW0sIGFyZykgJiYgcGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykg
PT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCQl9
CiAJCQkJfSAgZWxzZSBpZiAobGFzdEluZGV4ICE9IGFyZ0xlbmd0aCkgeyAvLyBjYW4gY2FsbCBm
b28oaW50IGksIFggLi4uIHgpIHdpdGggZm9vKDEpIGJ1dCBOT1QgZm9vKCk7CkBAIC00Nzk1LDcg
KzQ2NzMsMTggQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5
cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdM
ZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUo
KSA6IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFt
KSkgewotCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcs
IHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNl
VmFyaWFibGVzKTsKKwkJCQkvLyBDYXJlZnVsOiBUIG1heSBoYXZlIGJlZW4gc3Vic3RpdHV0ZWQg
d2l0aCBqbE8uIENvbnN1bHQgdGhlIHNoYWxsb3cgcGFyYW1ldGVyIGZvciBwZXJ0aW5lbmN5IGZp
cnN0LgorCQkJCWlmICghc2hhbGxvd1BhcmFtZXRlcnNbaV0uaXNQZXJ0aW5lbnRUb0FwcGxpY2Fi
aWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQorCQkJCQljb250aW51ZTsKKwkJCQlpZiAoY2hl
Y2tPbmx5RnVuY3Rpb25hbFR5cGVzKSB7CisJCQkJCWlmIChhcmcuaXNGdW5jdGlvbmFsVHlwZSgp
ICYmICFwYXJhbS5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UodGhpcykpCisJCQkJCQlyZXR1cm4gTk9U
X0NPTVBBVElCTEU7CisJCQkJCS8vIEFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIG1heSBoYXZlIHN1
YnN0aXR1dGVkIHVucmVzb2x2ZWQgdHlwZSB2YXJpYWJsZXMgd2l0aCBqbE8sIGRvbid0IHRyaXAg
b24gdGhlc2UuCisJCQkJCWlmIChwYXJhbS5tZW50aW9uc0FueShqbE8sIC0xKSkKKwkJCQkJCWNv
bnRpbnVlOworCQkJCQkvLyBGQUxMIFRIUk9VR0ggYW5kIGNoZWNrIGNvbXBhdGliaWxpdHkuCisJ
CQkJfQorCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcs
IHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCWlmIChuZXdMZXZl
bCA9PSBOT1RfQ09NUEFUSUJMRSkKIAkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCWlm
IChuZXdMZXZlbCA+IGxldmVsKQpAQCAtNDgyNCw3ICs0NzEzLDcgQEAKIAkJcmV0dXJuIE5PVF9D
T01QQVRJQkxFOwogCX0KIAkKLQlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoVHlwZUJpbmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwgTG9va3VwRW52aXJvbm1lbnQg
ZW52LCBib29sZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGJvb2xlYW4gdG9sZXJhdGVJ
bmZlcmVuY2VWYXJpYWJsZXMpIHsKKwlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwoVHlwZUJpbmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwgTG9va3VwRW52aXJvbm1l
bnQgZW52LCBib29sZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJLy8gb25seSBj
YWxsZWQgaWYgZW52Lm9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfNQogCQlpZiAoYXJnID09IG51bGwgfHwgcGFyYW0gPT0gbnVsbCkKIAkJCXJldHVybiBOT1Rf
Q09NUEFUSUJMRTsKQEAgLTQ4NDMsMTEgKzQ3MzIsNiBAQAogCQkJVHlwZUJpbmRpbmcgY29udmVy
dGVkVHlwZSA9IGVudi5jb21wdXRlQm94aW5nVHlwZShhcmcpOwogCQkJaWYgKFR5cGVCaW5kaW5n
LmVxdWFsc0VxdWFscyhjb252ZXJ0ZWRUeXBlLCBwYXJhbSkgfHwgY29udmVydGVkVHlwZS5pc0Nv
bXBhdGlibGVXaXRoKHBhcmFtLCB0aGlzKSkKIAkJCQlyZXR1cm4gQVVUT0JPWF9DT01QQVRJQkxF
OwotCQl9Ci0JCWlmICh0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyAmJiAoIWFyZy5pc1Byb3Bl
clR5cGUoZmFsc2UpIHx8ICFwYXJhbS5pc1Byb3BlclR5cGUoZmFsc2UpKSkgewotCQkJLy8gZHVy
aW5nIHR5cGUgaW5mZXJlbmNlIGludm9sdmluZyBhIFJlZmVyZW5jZUV4cHJlc3Npb24gaWdub3Jl
IGluY29tcGF0aWJpbGl0eSBkdWUgdG8gYW4gaW5mZXJlbmNlIHZhcmlhYmxlLAotCQkJLy8ga25v
d2luZyB0aGF0IHdlIHdpbGwgcHJvZHVjZSBjb25zdHJhaW50cyB0aGF0IHdpbGwgZW5zdXJlIGNv
bXBhdGlibGUgaW5zdGFudGlhdGlvbiAoaWYgb25lIGV4aXN0cykuCi0JCQlyZXR1cm4gQ09NUEFU
SUJMRTsgCiAJCX0KIAkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCX0KQEAgLTQ5MzMsNyArNDgx
Nyw3IEBACiAJICAgdGhhdCBjb3VsZCBpbnN0ZWFkIGJlIGludm9rZWQgd2l0aCBpZGVudGljYWwg
cmVzdWx0cy4gUmV0dXJuIG51bGwgaWYgbm8gY29tcGF0aWJsZSwgdmlzaWJsZSwgbW9zdCBzcGVj
aWZpYyBtZXRob2QKIAkgICBjb3VsZCBiZSBmb3VuZC4gVGhpcyBtZXRob2QgaXMgbW9kZWxlZCBh
ZnRlciBTY29wZS5nZXRDb25zdHJ1Y3RvciBhbmQgU2NvcGUuZ2V0TWV0aG9kLgogCSAqLwotCXB1
YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmlnaW5hbEVuY2xvc2luZ1R5
cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvbiBhbGxvY2F0
aW9uU2l0ZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmln
aW5hbEVuY2xvc2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52
b2NhdGlvblNpdGUgYWxsb2NhdGlvblNpdGUpIHsKIAkJCiAJCS8vIGFsbG9jYXRpb25UeXBlIGlz
IHRoZSBkaWFtb25kIHR5cGUuIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSBpcyB0aGUgcmVhbCBlbmNs
b3NpbmcgdHlwZSA9PT4gbWF5IGJlIHBhcmFtZXRlcml6ZWQsIHBhcmFtZXRlcml6ZWQgd2l0aCBv
d24gdHlwZSB2YXJpYWJsZXMsIHJhdywganVzdCBwbGFpbiB0eXBlIG9yIG51bGwuCiAJCWludCBj
bGFzc1R5cGVWYXJpYWJsZXNBcml0eSA9IDA7CkBAIC01MDYwLDcgKzQ5NDQsNyBAQAogCQlNZXRo
b2RCaW5kaW5nW10gY29tcGF0aWJsZSA9IG5ldyBNZXRob2RCaW5kaW5nW3NmaV07CiAJCWludCBj
b21wYXRpYmxlSW5kZXggPSAwOwogCQlmb3IgKGludCBpID0gMDsgaSA8IHNmaTsgaSsrKSB7Ci0J
CQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBBUFBM
SUNBQklMSVRZKTsKKwkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKHN0YXRpY0ZhY3Rvcmllc1tpXSwgYXJndW1lbnRUeXBlcywgYWxsb2Nh
dGlvblNpdGUpOwogCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCWlmIChj
b21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCWNvbXBhdGlibGVbY29tcGF0
aWJsZUluZGV4KytdID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTUwNjksMTAgKzQ5NTMsNiBAQAog
CiAJCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMCkgewogCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQkJ
aWYgKGNvbXBhdGlibGVJbmRleCA9PSAxKSB7Ci0JCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEg
Y2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQljb21wYXRp
YmxlWzBdID0gaW5mZXJJbnZvY2F0aW9uVHlwZShhbGxvY2F0aW9uU2l0ZSwgY29tcGF0aWJsZVsw
XSwgYXJndW1lbnRUeXBlcyk7CiAJCX0KIAkJcmV0dXJuIGNvbXBhdGlibGVJbmRleCA9PSAxID8g
Y29tcGF0aWJsZVswXSA6IG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoY29tcGF0aWJsZSwgY29t
cGF0aWJsZUluZGV4LCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwgYWxsb2NhdGlvblR5
cGUpOwogCX0KQEAgLTUxNDAsMzEgKzUwMjAsNSBAQAogCQkJCWJyZWFrOwogCQkJfQogCQl9Ci0J
fQotCi0JLyoqCi0JICogR2l2ZW4gYSBzZWxlY3RlZCBhcHBsaWNhYmxlIG1ldGhvZCwgY2hlY2sg
aWYgaXQgaGFzIGFuIHVuZmluaXNoZWQgSW5mZXJlbmNlQ29udGV4dDE4IGFzc29jaWF0ZWQuCi0J
ICogSWYgc28gcGVyZm9ybSB0aGUgb3V0c3RhbmRpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5j
ZSBhbmQgcmV0dXJuIHRoZSBpbXByb3ZlZCBtZXRob2QsCi0JICogb3RoZXJ3aXNlIHJldHVybiB0
aGUgYXBwbGljYWJsZSBtZXRob2QgdW5jaGFuZ2VkLgotCSAqLwotCXByb3RlY3RlZCBNZXRob2RC
aW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUs
IE1ldGhvZEJpbmRpbmcgYXBwbGljYWJsZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKSB7
Ci0JCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCUludm9j
YXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZTsKLQkJCWlmIChh
cHBsaWNhYmxlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
Ci0JCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRo
b2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBhcHBsaWNhYmxlOwotCQkJ
CUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29u
dGV4dChwYXJhbWV0ZXJpemVkTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiAh
aW5mQ3R4MTguaGFzUmVzdWx0Rm9yKGludm9jYXRpb24uaW52b2NhdGlvblRhcmdldFR5cGUoKSkp
IHsKLQkJCQkJcmV0dXJuIGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwg
YXJndW1lbnRUeXBlcywgcGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJfQotCQkJfSBlbHNlIHsK
LQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbnZvY2F0aW9uLCBh
cHBsaWNhYmxlLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQkJCX0KLQkJfSBlbHNlIGlmIChpbnZv
Y2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKLQkJCWlmIChhcHBs
aWNhYmxlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQotCQkJ
CWFwcGxpY2FibGUgPSBhcHBsaWNhYmxlLnNoYWxsb3dPcmlnaW5hbCgpOwotCQkJaWYgKGFwcGxp
Y2FibGUudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCi0JCQkJ
cmV0dXJuIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZChhcHBsaWNhYmxlLCBhcmd1bWVudFR5cGVzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSwg
RlVMTF9JTkZFUkVOQ0UpOwotCQl9Ci0JCXJldHVybiBhcHBsaWNhYmxlOwogCX0KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQppbmRleCA5
Mzg0OWNkLi4xYzRkNzQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3Rv
cnlNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5
TWV0aG9kQmluZGluZy5qYXZhCkBAIC0xNywzMSArMTcsOCBAQAogICovCiBwdWJsaWMgY2xhc3Mg
U3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcgZXh0ZW5kcyBNZXRob2RCaW5kaW5nIHsKIAot
CXByaXZhdGUgTWV0aG9kQmluZGluZyBzdGF0aWNGYWN0b3J5Rm9yOwotCXByaXZhdGUgTG9va3Vw
RW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7Ci0JcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nIGVuY2xv
c2luZ1R5cGU7Ci0JCiAJcHVibGljIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCwgUmVmZXJlbmNl
QmluZGluZyBlbmNsb3NpbmdUeXBlKSB7CiAJCXN1cGVyKG1ldGhvZC5tb2RpZmllcnMgfCBDbGFz
c0ZpbGVDb25zdGFudHMuQWNjU3RhdGljLCBUeXBlQ29uc3RhbnRzLlNZTlRIRVRJQ19TVEFUSUNf
RkFDVE9SWSwKIAkJCQludWxsLCBudWxsLCBudWxsLCBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpOwot
CQl0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7Ci0JCXRoaXMuc3RhdGljRmFjdG9yeUZv
ciA9IG1ldGhvZDsKLQkJdGhpcy5lbmNsb3NpbmdUeXBlID0gZW5jbG9zaW5nVHlwZTsKLQl9Ci0J
Ci0JLyoqIEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmluZyBj
bGFzcyBvZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0aGlz
IGZhY3RvcnkgbWV0aG9kLiAqLwotCXB1YmxpYyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBh
cHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50
cykgewotCQlSZWZlcmVuY2VCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gdGhpcy5lbnZpcm9u
bWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSh0aGlzLmRlY2xhcmluZ0NsYXNzLCB0eXBlQXJn
dW1lbnRzLAotCQkJCQkJCQkJCQkJCQkJCQkJCQkJCXRoaXMuZW5jbG9zaW5nVHlwZSk7Ci0JCWZv
ciAoTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kIDogcGFyYW1ldGVyaXplZFR5cGUu
bWV0aG9kcygpKSB7Ci0JCQlpZiAocGFyYW1ldGVyaXplZE1ldGhvZC5vcmlnaW5hbCgpID09IHRo
aXMuc3RhdGljRmFjdG9yeUZvcikKLQkJCQlyZXR1cm4gKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nKSBwYXJhbWV0ZXJpemVkTWV0aG9kOwotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2QgaW5z
dGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2Vz
dE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZylwYXJhbWV0ZXJpemVkTWV0aG9kKS5jbG9z
ZXN0TWF0Y2g7Ci0JCQkJaWYgKGNsb3Nlc3RNYXRjaCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRN
ZXRob2RCaW5kaW5nICYmIGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpID09IHRoaXMuc3RhdGljRmFj
dG9yeUZvcikKLQkJCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgY2xvc2Vz
dE1hdGNoOwotCQkJfQotCQl9Ci0JCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24o
IlR5cGUgZG9lc24ndCBoYXZlIGl0cyBvd24gbWV0aG9kPyIpOyAvLyROT04tTkxTLTEkCiAJfQog
fQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4IGUwZDkwM2QuLjA0NzQzYTcgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVC
aW5kaW5nLmphdmEKQEAgLTE2MjEsNCArMTYyMSw4IEBACiBwdWJsaWMgdm9pZCBleGl0UmVjdXJz
aXZlRnVuY3Rpb24oKSB7CiAJLy8gZW1wdHksIHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUKIH0KKwor
cHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsKKwlyZXR1cm4gZmFsc2U7Cit9CiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDkzZmMwOGMuLjFhNzk2ZWUgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0xNTAsNyArMTUwLDYgQEAKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkNhcHR1cmVCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFD
b21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb29rdXBF
bnZpcm9ubWVudDsKQEAgLTM2OTIsNyArMzY5MSw4IEBACiAJCQkJc291cmNlU3RhcnQsCiAJCQkJ
c291cmNlRW5kKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJp
emVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZl
cnJlZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGU6CQorCQljYXNlIFByb2JsZW1SZWFzb25z
Lkludm9jYXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBj
b25zdHJ1Y3Qgc3VpdGFibGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3
NSkKIAkJCXByb2JsZW1Db25zdHJ1Y3RvciA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgdGFyZ2V0
Q29uc3RydWN0b3I7CiAJCQlzaG93bkNvbnN0cnVjdG9yID0gcHJvYmxlbUNvbnN0cnVjdG9yLmNs
b3Nlc3RNYXRjaDsKQEAgLTQyMjQsMTYgKzQyMjQsMTMgQEAKIAkJCQkoaW50KSAobWVzc2FnZVNl
bmQubmFtZVNvdXJjZVBvc2l0aW9uID4+PiAzMiksCiAJCQkJKGludCkgbWVzc2FnZVNlbmQubmFt
ZVNvdXJjZVBvc2l0aW9uKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJh
bWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29u
cy5JbmZlcnJlZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCWNhc2UgUHJvYmxlbVJl
YXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhh
bik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
NDA0Njc1KQogCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0aG9k
OwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9ibGVtTWV0aG9k
LmluZmVyZW5jZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4dCAhPSBudWxsICYmIGlu
ZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJCQkvLyBwcm9ibGVtIHJl
bGF0ZXMgdG8gYSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0aGUgb3V0ZXIgaGFuZGxl
IGl0OgotCQkJCWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFkZFByb2JsZW1NZXRob2Qo
cHJvYmxlbU1ldGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hvd25NZXRob2QgPSBwcm9i
bGVtTWV0aG9kLmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0aG9kLnJldHVyblR5cGUg
PT0gc2hvd25NZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQKKwkJCQly
ZXR1cm47IC8vIGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVlcGx5IG5lc3RlZCBjYWxs
LCBiZWNhdXNlIHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBjbG9zZXN0IG1hdGNoIGFu
ZCB0aGUgb3V0ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50ZXN0QnVnNDMwMjk2CiAJ
CQl0aGlzLmhhbmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gsCiAJCQkJbmV3IFN0cmlu
Z1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3Bl
LmphdmEKaW5kZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3Bl
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzk2
LDcgKzM5Niw3IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5ldyBQ
cm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNv
bnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkg
ICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkZV
TExfSU5GRVJFTkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJu
IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJndW1l
bnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5nID0g
Y29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdbXSBj
b21wYXRpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBjb21w
YXRpYmxlSW5kZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0
aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGlu
dm9jYXRpb25TaXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGluZyBj
b21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBu
dWxsKQogCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9k
OwogCX0KQEAgLTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0g
MSkgewotCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3Rh
bmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9j
YXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2libGVb
MF07CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2JsZW1N
ZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0aWJs
ZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247885</attachid>
            <date>2014-10-15 04:52:00 -0400</date>
            <delta_ts>2014-10-18 10:42:50 -0400</delta_ts>
            <desc>Patch to remove deviations.</desc>
            <filename>align.patch</filename>
            <type>text/plain</type>
            <size>9064</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggZDM5MDU3MC4uYjRhYmJkMiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTI5LDcgKzI5LDcgQEAKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uc1Rlc3QgZXh0
ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IHsKIAogc3RhdGljIHsKLS8vCVRFU1RTX05BTUVT
ID0gbmV3IFN0cmluZ1tdIHsgInRlc3RSZWZlcmVuY2VFeHByZXNzaW9uSW5mZXJlbmNlMSJ9Owor
CVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RDYXB0dXJlIn07CiAvLwlURVNUU19O
VU1CRVJTID0gbmV3IGludFtdIHsgNTAgfTsKIC8vCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsg
MTEsIC0xIH07CiB9CkBAIC00OTY3LDYgKzQ5NjcsMzQgQEAKIAl9LAogCSIiKTsKIH0KKworLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMjYwNSwgWzEu
OF0gSW5jb3JyZWN0IGVycm9yICJUaGUgdHlwZSBBcnJheUxpc3Q8VD4gZG9lcyBub3QgZGVmaW5l
IGFkZChBcnJheUxpc3Q8VD4sIE9iamVjdCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmUiCitwdWJs
aWMgdm9pZCB0ZXN0Q2FwdHVyZSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3Ry
aW5nW10geworCQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKwor
CQkJImltcG9ydCBqYXZhLnV0aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJl
YW0uQ29sbGVjdG9ycztcbiIgKworCQkJImNsYXNzIFBlcnNvbiB7XG4iICsKKwkJCSIJU3RyaW5n
IGdldExhc3QoKSB7IHJldHVybiBudWxsOyB9O1xuIiArCisJCQkifVxuIiArCisJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgdGVzdDEoTGlzdDxQZXJzb24+IHJvc3Rlcikge1xu
IiArCisJCQkiICAgICAgICBNYXA8U3RyaW5nLCBQZXJzb24+IG1hcCA9IFxuIiArCisJCQkiICAg
ICAgICAgICAgICAgIHJvc3RlclxuIiArCisJCQkiICAgICAgICAgICAgICAgICAgICAuc3RyZWFt
KClcbiIgKworCQkJIiAgICAgICAgICAgICAgICAgICAgLmNvbGxlY3QoXG4iICsKKwkJCSIgICAg
ICAgICAgICAgICAgICAgICAgICBDb2xsZWN0b3JzLnRvTWFwKFxuIiArCisJCQkiICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHAgLT4gcC5nZXRMYXN0KCksIC8vWzFdXG4iICsKKwkJCSIgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgcCAtPiBwICAgICAgICAgICAgLy9bMl1cbiIgKworCQkJ
IiAgICAgICAgICAgICAgICAgICAgICAgICkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIK
Kwl9LAorCSIiKTsKK30KKwogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0
dXJuIExhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCBi
OTNjMDYzLi5mZTgxYjA2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBAIC01ODEsOSArNTgxLDcgQEAKIAkJ
d2hpbGUgKGNhcHRJdGVyLmhhc05leHQoKSkgewogCQkJRW50cnk8UGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nLCBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmc+IGNhcHQgPSBjYXB0SXRlci5uZXh0KCk7
CiAJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0FscGhhID0gY2FwdC5nZXRLZXkoKTsKLQkJ
CS8vIFdlIGNvbWUgaW4gd2l0aCBjYXB0dXJlKGdBKSwgd2UgbmVlZCB0byB3b3JrIHdpdGggZ0Eg
YmVsb3cuIEl0IHdhcyBuZWNlc3NhcnkgdG8gZXN0YWJsaXNoIGNhcHR1cmUgYXQgdGhlIGNhbGwg
c2l0ZS4KLQkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBjZ0EgPSBjYXB0LmdldFZhbHVlKCk7
Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSAoUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nKSBjZ0EudW5jYXB0dXJlKGNvbnRleHQuc2NvcGUpOworCQkJUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nIGdBID0gY2FwdC5nZXRWYWx1ZSgpOwogCQkJUmVmZXJlbmNlQmluZGluZyBnID0gKFJl
ZmVyZW5jZUJpbmRpbmcpIGdBLm9yaWdpbmFsKCk7CiAJCQlmaW5hbCBUeXBlVmFyaWFibGVCaW5k
aW5nW10gcGFyYW1ldGVycyA9IGcudHlwZVZhcmlhYmxlcygpOwogCQkJLy8gY29uc3RydWN0IHRo
ZXRhID0gW1AxOj1hbHBoYTEsLi4uXQpAQCAtNjAyLDcgKzYwMCw2IEBACiAJCQkJYWRkQm91bmRz
KHBpLmdldFR5cGVCb3VuZHMoYWxwaGEsIHRoZXRhKSwgY29udGV4dC5lbnZpcm9ubWVudCk7CiAK
IAkJCQlUeXBlQmluZGluZyBhaSA9IGdBLmFyZ3VtZW50c1tpXTsKLQkJCQlUeXBlQmluZGluZyBj
YWkgPSBjZ0EuYXJndW1lbnRzW2ldOwogCQkJCWlmIChhaSBpbnN0YW5jZW9mIFdpbGRjYXJkQmlu
ZGluZykgewogCQkJCQlXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmRCaW5kaW5nID0gKFdpbGRjYXJk
QmluZGluZylhaTsKIAkJCQkJVHlwZUJpbmRpbmcgdCA9IHdpbGRjYXJkQmluZGluZy5ib3VuZDsK
QEAgLTYxNCwxNCArNjExLDcgQEAKIAkJCQkJCQlpdCA9IHRocmVlLnNhbWVCb3VuZHMuaXRlcmF0
b3IoKTsKIAkJCQkJCQl3aGlsZSAoaXQuaGFzTmV4dCgpKSB7CiAJCQkJCQkJCVR5cGVCb3VuZCBi
b3VuZCA9IGl0Lm5leHQoKTsKLQkJCQkJCQkJLyogV2l0aCB0aGUgZXhwZWN0ZWQgdHlwZSdzIGRl
Y2xhcmVkIHR5cGUgYmVpbmcgQ29sbGVjdG9yPD8gc3VwZXIgVCwgQSwgUj4gYW5kIGdBbHBoYSBi
ZWluZyBDb2xsZWN0b3I8VCMwLD8jMSxMaXN0PFQjMD4jMj4gYW5kIGNnQSBiZWluZwotCQkJCQkJ
CQkgICBDb2xsZWN0b3I8VCMwLGNhcHR1cmUjMS1vZiA/LExpc3Q8VCMwPj4sIHdpdGhvdXQgdGhl
IGNvbnN0cmFpbnQgcmVkdWN0aW9uIGJlbG93IC0gd2Ugd2lsbCBuZXZlciBkaXNjb3ZlciBBIHRv
IGJlIGNhcHR1cmUjMS1vZiA/IGFuZAotCQkJCQkJCQkgICBjbGFpbSBBIGlzIGpsTy4gU2VlIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc0NDQjYzI0IC0g
IzI3Ci0JCQkJCQkJCSovCi0JCQkJCQkJCWlmICghcmVkdWNlT25lQ29uc3RyYWludChjb250ZXh0
LCBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJvdW5kLnJpZ2h0LCBjYWksIFJlZHVjdGlv
blJlc3VsdC5TQU1FKSkpCi0JCQkJCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJCQkJCS8vIE91ciA9
IHJlZHVjdGlvbiB0cmFuc2l0aXZlbHkgYWRkcyBhIG5ldyBib3VuZCB0aGF0IG5lY2Vzc2l0YXRl
cyB0aGUgY2hlY2sgYmVsb3cgZm9yIGNhcHR1cmUuIAotCQkJCQkJCQlpZiAoIShib3VuZC5yaWdo
dCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSAmJiAhYm91bmQucmlnaHQuaXNDYXB0dXJl
KCkpCisJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFi
bGUpKQogCQkJCQkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCQkJCX0KIAkJCQkJCX0KQEAgLTY3Niw3
ICs2NjYsNiBAQAogCQkJCX0KIAkJCX0KIAkJfQotCQl0aGlzLmNhcHR1cmVzLmNsZWFyKCk7CiAJ
CXJldHVybiB0cnVlOwogCX0KIApAQCAtOTY2LDIwICs5NTUsNiBAQAogCQlyZXR1cm4gdGhyZWUu
ZmluZFNpbmdsZVdyYXBwZXJUeXBlKCk7CiAJfQogCi0JcHJpdmF0ZSBUeXBlQmluZGluZyBhcHBs
eUluc3RhbnRpYXRpb25zKFR5cGVCaW5kaW5nIHR5cGUpIHsKLQkJaWYgKHR5cGUuaXNQcm9wZXJU
eXBlKHRydWUpKQotCQkJcmV0dXJuIHR5cGU7Ci0JCi0JCUl0ZXJhdG9yPEluZmVyZW5jZVZhcmlh
YmxlPiB2YXJpYWJsZUl0ID0gdGhpcy5ib3VuZHNQZXJWYXJpYWJsZS5rZXlTZXQoKS5pdGVyYXRv
cigpOwotCQl3aGlsZSAodmFyaWFibGVJdC5oYXNOZXh0KCkpIHsKLQkJCUluZmVyZW5jZVZhcmlh
YmxlIGluZmVyZW5jZVZhcmlhYmxlID0gdmFyaWFibGVJdC5uZXh0KCk7Ci0JCQlUeXBlQmluZGlu
ZyBpbnN0YW50aWF0aW9uID0gZ2V0SW5zdGFudGlhdGlvbihpbmZlcmVuY2VWYXJpYWJsZSwgbnVs
bCk7Ci0JCQlpZiAoaW5zdGFudGlhdGlvbiAhPSBudWxsKQotCQkJCXR5cGUgPSB0eXBlLnN1YnN0
aXR1dGVJbmZlcmVuY2VWYXJpYWJsZShpbmZlcmVuY2VWYXJpYWJsZSwgaW5zdGFudGlhdGlvbik7
Ci0JCX0KLQkJcmV0dXJuIHR5cGU7Ci0JfQotCQogCS8vIHRoaXMgY29uZGl0aW9uIGlzIGp1c3Qg
d2F5IHRvbyBjb21wbGV4IHRvIGNoZWNrIGl0IGluLWxpbmU6CiAJcHVibGljIGJvb2xlYW4gY29u
ZGl0aW9uMThfNV8yX2J1bGxldF8zXzNfMShJbmZlcmVuY2VWYXJpYWJsZSBhbHBoYSwgVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSkgewogCQkvLyBUIGlzIGEgcmVmZXJlbmNlIHR5cGUsIGJ1dCBpcyBu
b3QgYSB3aWxkY2FyZC1wYXJhbWV0ZXJpemVkIHR5cGUsIGFuZCBlaXRoZXIgCkBAIC0xMDE1LDE5
ICs5OTAsMTEgQEAKIAkJCQlmb3IgKGludCBqPWkrMTsgajxsZW47IGorKykgewogCQkJCQlUeXBl
QmluZGluZyBzMiA9IHN1cGVyQm91bmRzLmdldChqKS5yaWdodDsKIAkJCQkJVHlwZUJpbmRpbmdb
XSBzdXBlcnMgPSBzdXBlclR5cGVzV2l0aENvbW1vbkdlbmVyaWNUeXBlKHMxLCBzMik7Ci0JCQkJ
CWlmIChzdXBlcnMgIT0gbnVsbCkgewotCQkJCQkJLyogSGFzaE1hcDxLIzgsViM5PiBhbmQgSGFz
aE1hcDxLIzgsQXJyYXlMaXN0PFQ+PiB3aXRoIGFuIGluc3RhbnRpYXRpb24gZm9yIFY5ID0gQXJy
YXlMaXN0PFQ+IGFscmVhZHkgaW4gdGhlIAotCQkJCQkJICAgYm91bmQgc2V0IHNob3VsZCBub3Qg
YmUgc2VlbiBhcyB0d28gZGlmZmVyZW50IHBhcmFtZXRlcml6YXRpb25zIG9mIHRoZSBzYW1lIGdl
bmVyaWMgY2xhc3Mgb3IgaW50ZXJmYWNlLgotCQkJCQkJICAgU2VlIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MjYgZm9yIGEgdGVzdCB0aGF0IHRyaWdn
ZXJzIHRoaXMgY29uZGl0aW9uLgotCQkJCQkJKi8KLQkJCQkJCXN1cGVyc1swXSA9IGFwcGx5SW5z
dGFudGlhdGlvbnMoc3VwZXJzWzBdKTsKLQkJCQkJCXN1cGVyc1sxXSA9IGFwcGx5SW5zdGFudGlh
dGlvbnMoc3VwZXJzWzFdKTsKLQkJCQkJCWlmICghVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHN1
cGVyc1swXSwgc3VwZXJzWzFdKSkKKwkJCQkJaWYgKHN1cGVycyAhPSBudWxsICYmIHN1cGVyc1sw
XS5pc1Byb3BlclR5cGUodHJ1ZSkgJiYgc3VwZXJzWzFdLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiAh
VHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHN1cGVyc1swXSwgc3VwZXJzWzFdKSkKIAkJCQkJCQly
ZXR1cm4gdHJ1ZTsKIAkJCQkJfQogCQkJCX0KIAkJCX0KLQkJfQogCQlyZXR1cm4gZmFsc2U7CiAJ
fQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVs
YS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpp
bmRleCAyODIwNjM4Li5mZWU4NDU3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFp
bnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4
cHJlc3Npb25Gb3JtdWxhLmphdmEKQEAgLTM0OCw3ICszNDgsNyBAQAogCQkJCUluZmVyZW5jZVZh
cmlhYmxlW10gYmV0YXMgPSBpbmZlcmVuY2VDb250ZXh0LmFkZFR5cGVWYXJpYWJsZVN1YnN0aXR1
dGlvbnMoYXJndW1lbnRzKTsKIAkJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ2JldGEgPSBp
bmZlcmVuY2VDb250ZXh0LmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKAogCQkJ
CQkJcGFyYW1ldGVyaXplZFR5cGUuZ2VuZXJpY1R5cGUoKSwgYmV0YXMsIHBhcmFtZXRlcml6ZWRU
eXBlLmVuY2xvc2luZ1R5cGUoKSwgcGFyYW1ldGVyaXplZFR5cGUuZ2V0VHlwZUFubm90YXRpb25z
KCkpOwotCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5jYXB0dXJlcy5wdXQoZ2Jl
dGEsIHBhcmFtZXRlcml6ZWRUeXBlLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52
b2NhdGlvblNpdGUuc291cmNlRW5kKCkpKTsgLy8gZXN0YWJsaXNoZWQ6IGJvdGggdHlwZXMgaGF2
ZSBub25udWxsIGFyZ3VtZW50cworCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5j
YXB0dXJlcy5wdXQoZ2JldGEsIHBhcmFtZXRlcml6ZWRUeXBlKTsgLy8gZXN0YWJsaXNoZWQ6IGJv
dGggdHlwZXMgaGF2ZSBub25udWxsIGFyZ3VtZW50cwogCQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVs
YSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShnYmV0YSwgdGFy
Z2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJcmV0dXJuIGluZmVyZW5jZUNvbnRleHQucmVkdWNl
QW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CiAJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VD
b250ZXh0MTguamF2YQppbmRleCBkNDAxNWVkLi43MWZkYmE2IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJl
bmNlQ29udGV4dDE4LmphdmEKQEAgLTI4NiwxMSArMjg2LDggQEAKIAkJSW5mZXJlbmNlVmFyaWFi
bGVbXSB0b0FkZCA9IG5ldyBJbmZlcmVuY2VWYXJpYWJsZVtsZW4yXTsKIAkJaW50IG51bVRvQWRk
ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCB0eXBlVmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7
Ci0JCQlpZiAodHlwZVZhcmlhYmxlc1tpXSBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKQot
CQkJCW5ld1ZhcmlhYmxlc1tpXSA9IChJbmZlcmVuY2VWYXJpYWJsZSkgdHlwZVZhcmlhYmxlc1tp
XTsgLy8gcHJldmVudCBkb3VibGUgc3Vic3RpdHV0aW9uIG9mIGFuIGFscmVhZHktc3Vic3RpdHV0
ZWQgaW5mZXJlbmNlVmFyaWFibGUKLQkJCWVsc2UKLQkJCQl0b0FkZFtudW1Ub0FkZCsrXSA9Ci0J
CQkJCW5ld1ZhcmlhYmxlc1tpXSA9IG5ldyBJbmZlcmVuY2VWYXJpYWJsZSh0eXBlVmFyaWFibGVz
W2ldLCB0aGlzLnZhcmlhYmxlQ291bnQrKywgdGhpcy5jdXJyZW50SW52b2NhdGlvbiwgdGhpcy5l
bnZpcm9ubWVudCwgdGhpcy5vYmplY3QpOworCQkJdG9BZGRbbnVtVG9BZGQrK10gPQorCQkJCW5l
d1ZhcmlhYmxlc1tpXSA9IG5ldyBJbmZlcmVuY2VWYXJpYWJsZSh0eXBlVmFyaWFibGVzW2ldLCB0
aGlzLnZhcmlhYmxlQ291bnQrKywgdGhpcy5jdXJyZW50SW52b2NhdGlvbiwgdGhpcy5lbnZpcm9u
bWVudCwgdGhpcy5vYmplY3QpOwogCQl9CiAJCWlmIChudW1Ub0FkZCA+IDApIHsKIAkJCWludCBz
dGFydCA9IDA7CkBAIC04MzksNyArODM2LDkgQEAKIAogCS8qKiBXaGVuIGluZmVyZW5jZSBwcm9k
dWNlcyBhIG5ldyBjb25zdHJhaW50LCByZWR1Y2UgaXQgdG8gYSBzdWl0YWJsZSB0eXBlIGJvdW5k
IGFuZCBhZGQgdGhlIGxhdHRlciB0byB0aGUgYm91bmQgc2V0LiAqLwogCXB1YmxpYyBib29sZWFu
IHJlZHVjZUFuZEluY29ycG9yYXRlKENvbnN0cmFpbnRGb3JtdWxhIGNvbnN0cmFpbnQpIHRocm93
cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKLQkJcmV0dXJuIHRoaXMuY3VycmVudEJvdW5k
cy5yZWR1Y2VPbmVDb25zdHJhaW50KHRoaXMsIGNvbnN0cmFpbnQpOyAvLyBUT0RPKFNIKTogc2hv
dWxkIHdlIGltbWVkaWF0ZWx5IGNhbGwgYSBkaWF0IGluY29ycG9yYXRlLCBvciBjYW4gd2Ugc2lt
cGx5IHdhaXQgZm9yIHRoZSBuZXh0IHJvdW5kPworCQlpZiAoIXRoaXMuY3VycmVudEJvdW5kcy5y
ZWR1Y2VPbmVDb25zdHJhaW50KHRoaXMsIGNvbnN0cmFpbnQpKQorCQkJcmV0dXJuIGZhbHNlOwor
CQlyZXR1cm4gdGhpcy5jdXJyZW50Qm91bmRzLmluY29ycG9yYXRlKHRoaXMpOwogCX0KIAogCS8q
Kg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247955</attachid>
            <date>2014-10-17 00:52:00 -0400</date>
            <delta_ts>2014-10-21 02:15:43 -0400</delta_ts>
            <desc>Fixes for two problems found by other IBM projects.</desc>
            <filename>ibmfixes.patch</filename>
            <type>text/plain</type>
            <size>5330</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDM4OWY3YWEuLjM5MDI3MDUgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtNDYyMCw0ICs0NjIwLDIyIEBACiAJCX0sCiAJCSIiKTsK
IH0KKy8vIFRlc3QgYWxsb2NhdGlvbiBleHByZXNzaW9uIGJveGluZyBjb21wYXRpYmlsaXR5Citw
dWJsaWMgdm9pZCB0ZXN0QWxsb2NhdGlvbkJveGluZ0NvbXBhdGliaWxpdHkoKSB7CisJdGhpcy5y
dW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBYICB7XG4iICsKKwkJCSIgICAgc3RhdGljIDxUPiBpbnQgbShUIG8xLCBieXRlIG8y
KSB7cmV0dXJuIDE7fSAgICAgICBcbiIgKworCQkJIiAgICBzdGF0aWMgYm9vbGVhbiBjYWxsKCkg
e1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbShuZXcgTG9uZygxMmwpLCBuZXcgQnl0ZSgoYnl0
ZSkxKSkgPT0gMTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJcbiIgKworCQkJIiAgICBwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJndltdKSB7XG4iICsKKwkJCSIgICAgICAgU3lz
dGVtLm91dC5wcmludGxuKGNhbGwoKSk7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIiwK
KwkJfSwgInRydWUiKTsKK30KKwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5k
ZXggZjMwZWJlMS4uMzllY2U5ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBA
IC05NzQ0LDYgKzk3NDQsMzYgQEAKIAkiRnVuY3Rpb24gY2Fubm90IGJlIHJlc29sdmVkXG4iICsg
CiAJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gdGVzdCBncm91bmQgdGFyZ2V0IHR5cGUgd2l0aCB3
aWxkY2FyZHMgbGVmdCBpbiBub24gcGFyYW1ldGVyIHBvc2l0aW9ucy4KK3B1YmxpYyB2b2lkIHRl
c3RHcm91bmRUYXJnZXRUeXBlV2l0aFdpdGhXaWxkY2FyZHMoKSB7CisJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJjbGFzcyBBIHt9XG4i
ICsKKwkJCSJjbGFzcyBCIHt9XG4iICsKKwkJCSJjbGFzcyBDIHt9XG4iICsKKwkJCSJjbGFzcyBZ
IGV4dGVuZHMgQyB7fVxuIiArCisJCQkiaW50ZXJmYWNlIEk8UiwgUywgVD4ge1xuIiArCisJCQki
ICAgIFQgbShSIHIsIFMgcyk7XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCBl
eHRlbmRzIEEge1xuIiArCisJCQkiICAgIE9iamVjdCBtKEk8PyBleHRlbmRzIEEsID8gZXh0ZW5k
cyBCLCA/IGV4dGVuZHMgQz4gaSkge1xuIiArCisJCQkiICAgIAlyZXR1cm4gbSgoWCB4MSwgWCB4
MikgLT4geyByZXR1cm4gbmV3IFkoKTsgfSk7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxu
IiwKKwkJfSwgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTApXG4iICsgCisJCSIJcmV0dXJuIG0oKFggeDEsIFggeDIpIC0+IHsgcmV0dXJuIG5l
dyBZKCk7IH0pO1xuIiArIAorCQkiCSAgICAgICBeXG4iICsgCisJCSJUaGUgbWV0aG9kIG0oSTw/
IGV4dGVuZHMgQSw/IGV4dGVuZHMgQiw/IGV4dGVuZHMgQz4pIGluIHRoZSB0eXBlIFggaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKChYIHgxLCBYIHgyKSAtPiB7fSlcbiIgKyAK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClc
biIgKyAKKwkJIglyZXR1cm4gbSgoWCB4MSwgWCB4MikgLT4geyByZXR1cm4gbmV3IFkoKTsgfSk7
XG4iICsgCisJCSIJICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gSTxYLFgsPyBleHRl
bmRzIEM+IHRvIEk8PyBleHRlbmRzIEEsPyBleHRlbmRzIEIsPyBleHRlbmRzIEM+XG4iICsgCisJ
CSItLS0tLS0tLS0tXG4iKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewog
CXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAyOTNiYTRlLi5iODVlYjNkIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC01MjksNyArNTI5LDcgQEAKIAogLy8gRm9yIGFs
bG9jYXRpb24gZXhwcmVzc2lvbnMsIGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUgYXMgdmFu
aWxsYSBjb21wYXRpYmlsaXR5LCBzaW5jZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVzIGFyZSBu
b3QgZ2VuZXJpYy4KIHB1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlyZXR1cm4gaXNQb2x5RXhwcmVzc2lv
bigpID8gZmFsc2UgOiBpc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwlyZXR1
cm4gaXNQb2x5RXhwcmVzc2lvbigpID8gZmFsc2UgOiBpc0NvbXBhdGlibGVXaXRoKHNjb3BlLmJv
eGluZyh0YXJnZXRUeXBlKSwgc2NvcGUpOwogfQogCiBwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGli
bGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFt
YmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IGQ2M2U1M2EuLjkzZTEwMWYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhw
cmVzc2lvbi5qYXZhCkBAIC0zMTcsMTEgKzMxNywxOCBAQAogCQkJCWV4cGVjdGVkU0FNVHlwZSA9
IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmV4cGVjdGVkVHlwZTsKIAkJCWlmIChleHBlY3RlZFNB
TVR5cGUgIT0gbnVsbCkKIAkJCQlncm91bmRUeXBlID0gZmluZEdyb3VuZFRhcmdldFR5cGUoYmxv
Y2tTY29wZSwgZXhwZWN0ZWRTQU1UeXBlLCBhcmd1bWVudHNUeXBlRWxpZGVkKTsKKwkJCQogCQkJ
aWYgKGdyb3VuZFR5cGUgIT0gbnVsbCkgewogCQkJCXRoaXMuZGVzY3JpcHRvciA9IGdyb3VuZFR5
cGUuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoYmxvY2tTY29wZSwgdHJ1ZSk7CiAJCQkJaWYgKCF0
aGlzLmRlc2NyaXB0b3IuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQlyZXBvcnRTYW1Qcm9ibGVt
KGJsb2NrU2NvcGUsIHRoaXMuZGVzY3JpcHRvcik7CiAJCQkJfSBlbHNlIHsKKwkJCQkJaWYgKGdy
b3VuZFR5cGUgIT0gZXhwZWN0ZWRTQU1UeXBlKSB7IC8vJElERU5USVRZLUNPTVBBUklTT04kCisJ
CQkJCQlpZiAoIWdyb3VuZFR5cGUuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFNBTVR5cGUsIHRo
aXMuc2NvcGUpKSB7IC8vIHRoZSBncm91bmQgaGFzIHNoaWZ0ZWQsIGFyZSB3ZSBzdGlsbCBvbiBm
aXJtIGdyb3VuZHMgPyAKKwkJCQkJCQlibG9ja1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVN
aXNtYXRjaEVycm9yKGdyb3VuZFR5cGUsIHRoaXMuZXhwZWN0ZWRUeXBlLCB0aGlzLCBudWxsKTsg
Ly8gcmVwb3J0IGRlbGliZXJhdGVseSBhZ2FpbnN0IGJsb2NrIHNjb3BlIHNvIGFzIG5vdCB0byBi
bGFtZSB0aGUgbGFtYmRhLgorCQkJCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7
CisJCQkJCQl9CisJCQkJCX0KIAkJCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBncm91bmRUeXBlOwog
CQkJCX0KIAkJCQkvLyBUT0RPOiBpbiB3aGljaCBjYXNlcyBkbyB3ZSBoYXZlIHRvIGFzc2lnbiB0
aGlzLnJlc29sdmVkVHlwZSAmIHRoaXMuZGVzY3JpcHRvciAod2l0aCBwcm9ibGVtIGJpbmRpbmdz
KSB0byBwcmV2ZW50IE5QRSBkb3duc3RyZWFtPz8=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247972</attachid>
            <date>2014-10-17 08:12:00 -0400</date>
            <delta_ts>2014-10-21 02:15:43 -0400</delta_ts>
            <desc>Fix for JRE8 build problems</desc>
            <filename>JRE-build-issues-fix.patch</filename>
            <type>text/plain</type>
            <size>6157</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlvbmFsRXhw
cmVzc2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlv
bmFsRXhwcmVzc2lvblRlc3QuamF2YQppbmRleCBjMmEwMTA0Li4yZTE5OWQwIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db25kaXRpb25hbEV4cHJlc3Npb25UZXN0
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uVGVzdC5qYXZhCkBAIC01NjEsNCArNTYxLDI0IEBACiAJCQkiVGhlIG1ldGhvZCBmMigp
IGlzIHVuZGVmaW5lZCBmb3IgdGhlIHR5cGUgWVxuIiArCiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJ
fQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc0
NDQjYzExMywgLSBFcnJvciBidWlsZGluZyBKUkU4CisJcHVibGljIHZvaWQgdGVzdDQzNzQ0NF9j
MTEzKCkgeworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84KQorCQkJcmV0dXJuOworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQluZXcgU3Ry
aW5nW10geworCQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFggZXh0ZW5kcyBZ
IHtcbiIgKworCQkJCQkJIiAgICBwdWJsaWMgWChaW10gbikge1xuIiArCisJCQkJCQkiICAgICAg
ICBzdXBlcigobiA9PSBudWxsKSA/IG51bGwgOiBuLmNsb25lKCkpO1xuIiArCisJCQkJCQkiICAg
IH1cbiIgKworCQkJCQkJIn1cbiIgKworCQkJCQkJImNsYXNzIFkgIHtcbiIgKworCQkJCQkJIiAg
ICBwdWJsaWMgWShaW10gbm90aWZpY2F0aW9ucykge1xuIiArCisJCQkJCQkiICAgIH1cbiIgKwor
CQkJCQkJIn1cbiIgKworCQkJCQkJImludGVyZmFjZSBaIHt9XG4iLAorCQkJCX0sCisJCQkJIiIp
OworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVy
aWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDM5MDI3MDUuLjAyYjJmZmQg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2Vu
ZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtNDYxNCw3ICs0NjE0LDcgQEAKIAkJCSIg
ICAgICAgIHJldHVybiBudWxsO1xuIiArCiAJCQkiICAgIH1cbiIgKwogCQkJIiAgICBwdWJsaWMg
UiBnZXRWYWx1ZSgpIHtcbiIgKwotCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJIiAg
ICAgICAgcmV0dXJuIG51bGw7XG4iICsKIAkJCSIgICAgfVxuIiArCiAJCQkifVxuIgogCQl9LApA
QCAtNDYzNyw1ICs0NjM3LDQ3IEBACiAJCQkifVxuIiwKIAkJfSwgInRydWUiKTsKIH0KLQorLy8g
TlBFIHdoaWxlIGJ1aWxkaW5nIEpSRTg6IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD00Mzc0NDQjYzExMworcHVibGljIHZvaWQgdGVzdDQzNzQ0NF9jMTEzKCkg
eworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIs
CisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkiCWZpbmFsIExpc3Q8U3RyaW5nPltdIGxzID0gVXRpbC5jYXN0KG5ldyBMaXN0PD5b
XSB7IG51bGwgfSk7XG4iICsKKwkJCSIJXG4iICsKKwkJCSJ9XG4iICsKKwkJCSJjbGFzcyBVdGls
IHtcbiIgKworCQkJIglAU3VwcHJlc3NXYXJuaW5ncyhcInVuY2hlY2tlZFwiKVxuIiArCisJCQki
CXB1YmxpYyBzdGF0aWMgPFQ+IFQgY2FzdChPYmplY3QgeCkge1xuIiArCisJCQkiCQlyZXR1cm4g
KFQpIHg7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiwKKwkJfSwgCisJCSItLS0tLS0tLS0t
XG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglmaW5h
bCBMaXN0PFN0cmluZz5bXSBscyA9IFV0aWwuY2FzdChuZXcgTGlzdDw+W10geyBudWxsIH0pO1xu
IiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4i
ICsgCisJCSJJbmNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgdHlwZSBMaXN0PEU+OyBp
dCBjYW5ub3QgYmUgcGFyYW1ldGVyaXplZCB3aXRoIGFyZ3VtZW50cyA8PlxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIik7Cit9CisvLyBFcnJvciB3aGlsZSBidWlsZGluZyBKUkU4OiBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM3NDQ0I2MxMTMKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzc0NDRfYzExM2EoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKwor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglmaW5hbCBMaXN0PFN0cmluZz5bXSBscyA9
IFV0aWwuY2FzdChuZXcgTGlzdDw/PltdIHsgbnVsbCB9KTtcbiIgKworCQkJIglcbiIgKworCQkJ
In1cbiIgKworCQkJImNsYXNzIFV0aWwge1xuIiArCisJCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwi
dW5jaGVja2VkXCIpXG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyA8VD4gVCBjYXN0KE9iamVjdCB4
KSB7XG4iICsKKwkJCSIJCXJldHVybiAoVCkgeDtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4i
LAorCQl9LCAKKwkJIiIpOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9u
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRleCA4N2MwZmNkLi40MDY4YWUw
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0V4cHJlc3Npb24uamF2YQpAQCAtMTE1OCw3ICsxMTU4LDcgQEAKIH0KIAogcHVibGljIGJvb2xl
YW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyBsZWZ0LCBTY29wZSBzY29wZSkg
ewotCXJldHVybiBpc0JveGluZ0NvbXBhdGlibGUodGhpcy5yZXNvbHZlZFR5cGUsIGxlZnQsIHRo
aXMsIHNjb3BlKTsKKwlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiBpc0JveGlu
Z0NvbXBhdGlibGUodGhpcy5yZXNvbHZlZFR5cGUsIGxlZnQsIHRoaXMsIHNjb3BlKTsKIH0KIAog
cHVibGljIGJvb2xlYW4gc0lzTW9yZVNwZWNpZmljKFR5cGVCaW5kaW5nIHMsIFR5cGVCaW5kaW5n
IHQsIFNjb3BlIHNjb3BlKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggNWI5MmZjMC4uNzI5NTJmOCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TWVzc2FnZVNlbmQuamF2YQpAQCAtOTg0LDkgKzk4NCwxMiBAQAogCQl0aGlzLmV4cGVjdGVkVHlw
ZSA9IHRhcmdldFR5cGU7CiAJCS8vIE5vIG5lZWQgdG8gdHVubmVsIHRocm91Z2ggb3ZlcmxvYWQg
cmVzb2x1dGlvbi4gdGhpcy5iaW5kaW5nIGlzIHRoZSBNU01CLgogCQlNZXRob2RCaW5kaW5nIG1l
dGhvZCA9IGlzUG9seUV4cHJlc3Npb24oKSA/IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KHRoaXMuYmluZGluZy5zaGFsbG93T3JpZ2lu
YWwoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSwgdGhpcykgOiB0aGlzLmJpbmRpbmc7Ci0J
CWlmIChtZXRob2QgPT0gbnVsbCB8fCAhbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgfHwgbWV0aG9k
LnJldHVyblR5cGUgPT0gbnVsbCB8fCAhbWV0aG9kLnJldHVyblR5cGUuaXNWYWxpZEJpbmRpbmco
KSkKKwkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZTsKKwkJaWYgKG1ldGhvZCA9PSBudWxsIHx8ICFt
ZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCAocmV0dXJuVHlwZSA9IG1ldGhvZC5yZXR1cm5UeXBl
KSA9PSBudWxsIHx8ICFyZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQlyZXR1cm4gZmFs
c2U7Ci0JCXJldHVybiBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNvdXJj
ZUVuZCkuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJCWlmIChtZXRob2Qg
PT0gc2NvcGUuZW52aXJvbm1lbnQoKS5hcnJheUNsb25lKQorCQkJcmV0dXJuVHlwZSA9IHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlOworCQlyZXR1cm4gcmV0dXJuVHlwZSAhPSBudWxsICYmIHJldHVy
blR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLmlzQ29tcGF0aWJsZVdpdGgodGFy
Z2V0VHlwZSwgc2NvcGUpOwogCX0gZmluYWxseSB7CiAJCXRoaXMuZXhwZWN0ZWRUeXBlID0gb3Jp
Z2luYWxFeHBlY3RlZFR5cGU7CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNl
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCmluZGV4IGI5M2MwNjMuLmMxY2E5
YzYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JvdW5kU2V0LmphdmEKQEAgLTEwNCw3ICsxMDQsNyBAQAogCQkJCX0KIAkJCX0KIAkJ
CWlmIChpID09IDApCi0JCQkJcmV0dXJuIEJpbmRpbmcuTk9fVFlQRVM7CisJCQkJcmV0dXJuIHNp
bXBsZVVwcGVyICE9IG51bGwgPyBuZXcgVHlwZUJpbmRpbmdbXSB7IHNpbXBsZVVwcGVyIH0gOiBC
aW5kaW5nLk5PX1RZUEVTOwogCQkJaWYgKGkgPT0gMSAmJiBzaW1wbGVVcHBlciAhPSBudWxsKQog
CQkJCXJldHVybiBuZXcgVHlwZUJpbmRpbmdbXSB7IHNpbXBsZVVwcGVyIH07IC8vIG5vIG51bGxI
aW50cyBzaW5jZSBub3QgYSByZWZlcmVuY2UgdHlwZQogCQkJaWYgKGkgPCByaWdodHMubGVuZ3Ro
KQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247988</attachid>
            <date>2014-10-18 01:12:00 -0400</date>
            <delta_ts>2014-10-18 10:42:50 -0400</delta_ts>
            <desc>Patch with much clearer version of Scope.parameterCompatibilityLevel</desc>
            <filename>Remove-consultShadowOriginal.patch</filename>
            <type>text/plain</type>
            <size>12746</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBiODVlYjNkLi5mMmRhNTEwIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC00NDYsMjEgKzQ0NiwyMCBAQAog
CQlpZiAoaXNEaWFtb25kKSB7CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgp
OwogCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJp
Y1R5cGUudHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJ
aWYgKHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgY29tcGlsZXJPcHRpb25zLnNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgdGhpcy5leHByZXNzaW9uQ29udGV4
dC5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJdGhpcy5iaW5kaW5nID0gaW5mZXJDb25zdHJ1
Y3Rvck9mRWxpZGVkUGFyYW1ldGVyaXplZFR5cGUocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMucmVz
b2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CisJ
CQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZSA9IG51bGw7CisJCQkJfQorCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRo
aXMpOworCQkJfQogCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVk
VHlwZXMocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUo
KSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBu
dWxsKSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBl
cyh0aGlzKTsKIAkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCQkJfQogCQkJ
UmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3Jl
YXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsK
LQkJCWlmICh0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5zb3Vy
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuZXhwcmVzc2lvbkNv
bnRleHQuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJCXNjb3BlLnNob3VsZENvbnN1bHRTaGFk
b3dPcmlnaW5hbCA9IHRydWU7Ci0JCQkJdHJ5IHsKLQkJCQkJdGhpcy5iaW5kaW5nID0gc2NvcGUu
Z2V0Q29uc3RydWN0b3IoYWxsb2NhdGlvblR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7
Ci0JCQkJfSBmaW5hbGx5IHsKLQkJCQkJc2NvcGUuc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFs
ID0gZmFsc2U7Ci0JCQkJfQotCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwot
CQkJfQogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gYWxs
b2NhdGlvblR5cGU7IAogCQl9CiAJfSBlbHNlIHsKQEAgLTU1Myw2ICs1NTIsMTYgQEAKIAlyZXR1
cm4gYWxsb2NhdGlvblR5cGUgIT0gbnVsbCAmJiBhbGxvY2F0aW9uVHlwZS5pc0NvbXBhdGlibGVX
aXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKIH0KIAorcHVibGljIE1ldGhvZEJpbmRpbmcgaW5mZXJD
b25zdHJ1Y3Rvck9mRWxpZGVkUGFyYW1ldGVyaXplZFR5cGUoUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBzY29wZSkgeworCS8vIEdpdmVuIHRo
ZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBz
ZWUgaWYgd2UgY2FuIGluZmVyIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgZWxpZGVkIHBhcmFtZXRl
cml6ZWQgdHlwZS4KKwlNZXRob2RCaW5kaW5nIGZhY3RvcnkgPSBzY29wZS5nZXRTdGF0aWNGYWN0
b3J5KGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHRoaXMpOwor
CWlmIChmYWN0b3J5IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
ICYmIGZhY3RvcnkuaXNWYWxpZEJpbmRpbmcoKSkgeworCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9k
QmluZGluZyBvcmlnaW5hbCA9IChTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgZmFjdG9y
eS5vcmlnaW5hbCgpOworCQlyZXR1cm4gb3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25z
dHJ1Y3RvcigoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFy
Z3VtZW50cyk7CisJfQorCXJldHVybiBudWxsOworfQorCiBwdWJsaWMgVHlwZUJpbmRpbmdbXSBp
bmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwg
UmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlw
cywgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZlbiB0aGUgYWxsb2NhdGlvbiB0eXBlIGFu
ZCB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rvciwgc2VlIGlmIHdlIGNhbiBzeW50aGVz
aXplIGEgZ2VuZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAgIG1ldGhvZCB0aGF0IHdvdWxkLCBnaXZl
biB0aGUgYXJndW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZvY2F0aW9uIHNpdGUsIG1hbnVmYWN0dXJl
IGEgcGFyYW1ldGVyaXplZCBvYmplY3Qgb2YgdHlwZSBhbGxvY2F0aW9uVHlwZS4KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQmxvY2tTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Nj
b3BlLmphdmEKaW5kZXggYzA0ZTlhOC4uMjVmMmNjMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9CbG9ja1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEKQEAg
LTEwMzcsMTEgKzEwMzcsNyBAQAogcHJpdmF0ZSBMaXN0IHRyYWNraW5nVmFyaWFibGVzOyAvLyBj
YW4gYmUgbnVsbCBpZiBubyByZXNvdXJjZXMgYXJlIHRyYWNrZWQKIC8qKiBVc2VkIG9ubHkgZHVy
aW5nIGFuYWx5c2VDb2RlIGFuZCBvbmx5IGZvciBjaGVja2luZyBpZiBhIHJlc291cmNlIHdhcyBj
bG9zZWQgaW4gYSBmaW5hbGx5QmxvY2suICovCiBwdWJsaWMgRmxvd0luZm8gZmluYWxseUluZm87
Ci1wdWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93T3JpZ2luYWw7CiAKLXB1YmxpYyBi
b29sZWFuIHNob3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbCgpIHsKLQlyZXR1cm4gdGhpcy5zaG91
bGRDb25zdWx0U2hhZG93T3JpZ2luYWw7Ci19CiAvKioKICAqIFJlZ2lzdGVyIGEgdHJhY2tpbmcg
dmFyaWFibGUgYW5kIGNvbXB1dGUgaXRzIGlkLgogICovCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggMjczNjhkNi4u
NDBmOWUzNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU2NvcGUuamF2YQpAQCAtNDI3LDkgKzQyNyw2IEBACiAJCXJldHVybiBkZWZhdWx0
U3Vic3RpdHV0b3Iuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIG9yaWdpbmFsVHlwZSk7CiAJfQog
Ci0JcHVibGljIGJvb2xlYW4gc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsKCkgewotCQlyZXR1
cm4gZmFsc2U7IAotCX0KIAkvKioKIAkgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHR5cGVzLCB3aGVy
ZSBvcmlnaW5hbCB0eXBlcyBnb3Qgc3Vic3RpdHV0ZWQgZ2l2ZW4gYSBzdWJzdGl0dXRpb24uCiAJ
ICogT25seSBhbGxvY2F0ZSBhbiBhcnJheSBpZiBhbnl0aGluZyBpcyBkaWZmZXJlbnQuCkBAIC00
NTg3LDE3ICs0NTg0LDE5IEBACiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5w
YXJhbWV0ZXJzOwogCQlpbnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJaW50
IGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7Ci0JCVR5cGVCaW5kaW5nIFtdIGpsTyA9IHsg
Z2V0SmF2YUxhbmdPYmplY3QoKSB9OworCiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlv
bnMgPSBjb21waWxlck9wdGlvbnMoKTsKIAkJLy8gQWZ0ZXIgYXBwbGljYWJpbGl0eSBpbmZlcmVu
Y2UgYXQgMS44KyB0aGVyZSBpcyBubyB1c2UgY2hlY2tpbmcgbm9uLWZ1bmN0aW9uYWwgdHlwZSBh
cmd1bWVudHMvcGFyYW1ldGVycyBmb3IgY29tcGF0aWJpbGl0eSBzaW5jZSBpbmZlcmVuY2Ugd291
bGQgaGF2ZSBndWFyYW50ZWVkIHRoYXQuCiAJCWJvb2xlYW4gY2hlY2tPbmx5RnVuY3Rpb25hbFR5
cGVzID0gZmFsc2U7Ci0JCVR5cGVCaW5kaW5nIFtdIHNoYWxsb3dQYXJhbWV0ZXJzID0gcGFyYW1l
dGVyczsKLQkJTWV0aG9kQmluZGluZyBzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Q7CisJCVR5cGVC
aW5kaW5nIFtdIGpsTyA9IG51bGw7CisJCVR5cGVCaW5kaW5nIFtdIHNoYWxsb3dQYXJhbWV0ZXJz
ID0gbnVsbDsKKwkJTWV0aG9kQmluZGluZyBzaGFsbG93T3JpZ2luYWwgPSBudWxsOwogCQlpZiAo
Y29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgp
IHsKLQkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nIHx8IHNob3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbCgpKSB7Ci0JCQkJY2hlY2tP
bmx5RnVuY3Rpb25hbFR5cGVzID0gbWV0aG9kIGluc3RhbmNlb2YgUG9seVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZzsKKwkJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQb2x5UGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CisJCQkJY2hlY2tPbmx5RnVuY3Rpb25hbFR5
cGVzID0gdHJ1ZTsgLy8gU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00Mzc0NDQjYzEyNSBmb3IgYSBkZXRhaWxlZCBleHBsYW5hdGlvbi4gCiAJCQkJc2hh
bGxvd09yaWdpbmFsID0gbWV0aG9kLnNoYWxsb3dPcmlnaW5hbCgpOwogCQkJCXNoYWxsb3dQYXJh
bWV0ZXJzID0gc2hhbGxvd09yaWdpbmFsLnBhcmFtZXRlcnM7CisJCQkJamxPID0gbmV3IFR5cGVC
aW5kaW5nIFtdIHsgZ2V0SmF2YUxhbmdPYmplY3QoKSB9OwogCQkJfQogCQl9CiAJCWlmIChjb21w
aWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CkBA
IC00NjI1LDcgKzQ2MjQsNiBAQAogCQkJaWYgKHBhcmFtTGVuZ3RoID09IGFyZ0xlbmd0aCkgeyAv
LyBhY2NlcHQgWCBvciBYW10gYnV0IG5vdCBYW11bXQogCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0g
cGFyYW1ldGVyc1tsYXN0SW5kZXhdOyAvLyBpcyBhbiBBcnJheUJpbmRpbmcgYnkgZGVmaW5pdGlv
bgogCQkJCVR5cGVCaW5kaW5nIGFyZyA9IGFyZ3VtZW50c1tsYXN0SW5kZXhdOwotCQkJCQogCQkJ
CWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW0sIGFyZykpIHsKIAkJCQkJbGV2ZWwgPSBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzKTsKIAkJCQkJaWYgKGxldmVsID09IE5PVF9DT01QQVRJQkxFKSB7CkBAIC00
NjM0LDE4ICs0NjMyLDIwIEBACiAJCQkJCQlpZiAodGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykg
ewogCQkJCQkJCWFyZyA9ICgoQXJyYXlCaW5kaW5nKSBhcmcpLmVsZW1lbnRzVHlwZSgpOwogCQkJ
CQkJfQotCQkJCQkJaWYgKCgoQXJyYXlCaW5kaW5nKSBzaGFsbG93UGFyYW1ldGVyc1tsYXN0SW5k
ZXhdKS5lbGVtZW50c1R5cGUoKS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShhcmcsIHNoYWxs
b3dPcmlnaW5hbCkpIHsKLQkJCQkJCQlpZiAoY2hlY2tPbmx5RnVuY3Rpb25hbFR5cGVzKSB7Ci0J
CQkJCQkJCWlmIChhcmcuaXNGdW5jdGlvbmFsVHlwZSgpICYmICFwYXJhbS5pc0Z1bmN0aW9uYWxJ
bnRlcmZhY2UodGhpcykpCi0JCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCQkJ
CS8vIEFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIG1heSBoYXZlIHN1YnN0aXR1dGVkIHVucmVzb2x2
ZWQgdHlwZSB2YXJpYWJsZXMgd2l0aCBqbE8sIGRvbid0IHRyaXAgb24gdGhlc2UuCi0JCQkJCQkJ
CWlmICghcGFyYW0ubWVudGlvbnNBbnkoamxPLCAtMSkgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgPT0gTk9U
X0NPTVBBVElCTEUpCi0JCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCQkJfSBl
bHNlIHsKLQkJCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFt
LCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQotCQkJ
CQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCQkJYm9vbGVhbiBjaGVja0NvbXBhdGli
aWxpdHkgPSB0cnVlOworCQkJCQkJaWYgKGNoZWNrT25seUZ1bmN0aW9uYWxUeXBlcykgeworCQkJ
CQkJCWNoZWNrQ29tcGF0aWJpbGl0eSA9IGZhbHNlOworCQkJCQkJCWlmIChhcmcuaXNGdW5jdGlv
bmFsVHlwZSgpKSB7CisJCQkJCQkJCWlmICgoKEFycmF5QmluZGluZykgc2hhbGxvd1BhcmFtZXRl
cnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCkuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHko
YXJnLCBzaGFsbG93T3JpZ2luYWwpKSB7CisJCQkJCQkJCQlpZiAoIXBhcmFtLmlzRnVuY3Rpb25h
bEludGVyZmFjZSh0aGlzKSkKKwkJCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJ
CQkJCQlpZiAoIXBhcmFtLm1lbnRpb25zQW55KGpsTywgLTEpKQorCQkJCQkJCQkJCWNoZWNrQ29t
cGF0aWJpbGl0eSA9IHRydWU7CisJCQkJCQkJCX0KIAkJCQkJCQl9CiAJCQkJCQl9CisJCQkJCQlp
ZiAoY2hlY2tDb21wYXRpYmlsaXR5ICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcs
IHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxF
KQorCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJCWxldmVsID0gVkFSQVJHU19D
T01QQVRJQkxFOyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVlZGVkCiAJCQkJCX0KIAkJCQl9CkBAIC00
NjU0LDE1ICs0NjU0LDE1IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRp
bmcpIHBhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50
IGkgPSBsYXN0SW5kZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcg
YXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEp
KSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1l
bnRzW2ldOwotCQkJCQkJaWYgKCEoKEFycmF5QmluZGluZylzaGFsbG93UGFyYW1ldGVyc1tsYXN0
SW5kZXhdKS5lbGVtZW50c1R5cGUoKS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShhcmcsIHNo
YWxsb3dPcmlnaW5hbCkpCi0JCQkJCQkJY29udGludWU7CiAJCQkJCQlpZiAoY2hlY2tPbmx5RnVu
Y3Rpb25hbFR5cGVzKSB7Ci0JCQkJCQkJaWYgKGFyZy5pc0Z1bmN0aW9uYWxUeXBlKCkgJiYgIXBh
cmFtLmlzRnVuY3Rpb25hbEludGVyZmFjZSh0aGlzKSkKKwkJCQkJCQlpZiAoIWFyZy5pc0Z1bmN0
aW9uYWxUeXBlKCkpCisJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJCWlmICghKChBcnJheUJpbmRp
bmcpc2hhbGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCkuaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQorCQkJCQkJCQljb250aW51
ZTsKKwkJCQkJCQlpZiAoIXBhcmFtLmlzRnVuY3Rpb25hbEludGVyZmFjZSh0aGlzKSkKIAkJCQkJ
CQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCS8vIEFwcGxpY2FiaWxpdHkgaW5mZXJl
bmNlIG1heSBoYXZlIHN1YnN0aXR1dGVkIHVucmVzb2x2ZWQgdHlwZSB2YXJpYWJsZXMgd2l0aCBq
bE8sIGRvbid0IHRyaXAgb24gdGhlc2UuCiAJCQkJCQkJaWYgKHBhcmFtLm1lbnRpb25zQW55KGps
TywgLTEpKQogCQkJCQkJCQljb250aW51ZTsKLQkJCQkJCQkvLyBGQUxMIFRIUk9VR0ggYW5kIGNo
ZWNrIGNvbXBhdGliaWxpdHkuCiAJCQkJCQl9CiAJCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1
YWxzKHBhcmFtLCBhcmcpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFt
LCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJ
CQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKQEAgLTQ2ODAsMTYgKzQ2ODAsMTUgQEAKIAkJCVR5
cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0
aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChB
cnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsK
IAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkgewotCQkJCS8vIENhcmVm
dWw6IFQgbWF5IGhhdmUgYmVlbiBzdWJzdGl0dXRlZCB3aXRoIGpsTy4gQ29uc3VsdCB0aGUgc2hh
bGxvdyBwYXJhbWV0ZXIgZm9yIHBlcnRpbmVuY3kgZmlyc3QuCi0JCQkJaWYgKCFzaGFsbG93UGFy
YW1ldGVyc1tpXS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShhcmcsIHNoYWxsb3dPcmlnaW5h
bCkpCi0JCQkJCWNvbnRpbnVlOwogCQkJCWlmIChjaGVja09ubHlGdW5jdGlvbmFsVHlwZXMpIHsK
LQkJCQkJaWYgKGFyZy5pc0Z1bmN0aW9uYWxUeXBlKCkgJiYgIXBhcmFtLmlzRnVuY3Rpb25hbElu
dGVyZmFjZSh0aGlzKSkKKwkJCQkJaWYgKCFhcmcuaXNGdW5jdGlvbmFsVHlwZSgpKQorCQkJCQkJ
Y29udGludWU7CisJCQkJICAgIGlmICghc2hhbGxvd1BhcmFtZXRlcnNbaV0uaXNQZXJ0aW5lbnRU
b0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQorCQkJCQkgICAgY29udGludWU7
CisJCQkJCWlmICghcGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpKQogCQkJCQkJcmV0
dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkvLyBBcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBtYXkg
aGF2ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFyaWFibGVzIHdpdGggamxPLCBkb24n
dCB0cmlwIG9uIHRoZXNlLgogCQkJCQlpZiAocGFyYW0ubWVudGlvbnNBbnkoamxPLCAtMSkpCiAJ
CQkJCQljb250aW51ZTsKLQkJCQkJLy8gRkFMTCBUSFJPVUdIIGFuZCBjaGVjayBjb21wYXRpYmls
aXR5LgogCQkJCX0KIAkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAo
bmV3TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5
bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRp
Y0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggMWM0ZDc0Ny4uOTM4NDljZCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQpAQCAt
MTcsOCArMTcsMzEgQEAKICAqLwogcHVibGljIGNsYXNzIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RC
aW5kaW5nIGV4dGVuZHMgTWV0aG9kQmluZGluZyB7CiAKKwlwcml2YXRlIE1ldGhvZEJpbmRpbmcg
c3RhdGljRmFjdG9yeUZvcjsKKwlwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50
OworCXByaXZhdGUgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlOworCQogCXB1YmxpYyBT
eW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nIG1ldGhvZCwgTG9va3Vw
RW52aXJvbm1lbnQgZW52aXJvbm1lbnQsIFJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSkg
ewogCQlzdXBlcihtZXRob2QubW9kaWZpZXJzIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRp
YywgVHlwZUNvbnN0YW50cy5TWU5USEVUSUNfU1RBVElDX0ZBQ1RPUlksCiAJCQkJbnVsbCwgbnVs
bCwgbnVsbCwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzKTsKKwkJdGhpcy5lbnZpcm9ubWVudCA9IGVu
dmlyb25tZW50OworCQl0aGlzLnN0YXRpY0ZhY3RvcnlGb3IgPSBtZXRob2Q7CisJCXRoaXMuZW5j
bG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7CisJfQorCQorCS8qKiBBcHBseSB0aGUgZ2l2ZW4g
dHlwZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29u
c3RydWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KKwlw
dWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25z
dHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMpIHsKKwkJUmVmZXJlbmNlQmluZGlu
ZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXpl
ZFR5cGUodGhpcy5kZWNsYXJpbmdDbGFzcywgdHlwZUFyZ3VtZW50cywKKwkJCQkJCQkJCQkJCQkJ
CQkJCQkJCQl0aGlzLmVuY2xvc2luZ1R5cGUpOworCQlmb3IgKE1ldGhvZEJpbmRpbmcgcGFyYW1l
dGVyaXplZE1ldGhvZCA6IHBhcmFtZXRlcml6ZWRUeXBlLm1ldGhvZHMoKSkgeworCQkJaWYgKHBh
cmFtZXRlcml6ZWRNZXRob2Qub3JpZ2luYWwoKSA9PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCisJ
CQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgcGFyYW1ldGVyaXplZE1ldGhv
ZDsKKwkJCWlmIChwYXJhbWV0ZXJpemVkTWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJp
bmRpbmcpIHsKKwkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpcGFyYW1ldGVyaXplZE1ldGhvZCkuY2xvc2VzdE1hdGNoOworCQkJCWlmIChjbG9z
ZXN0TWF0Y2ggaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyAmJiBjbG9zZXN0
TWF0Y2gub3JpZ2luYWwoKSA9PSB0aGlzLnN0YXRpY0ZhY3RvcnlGb3IpCisJCQkJCXJldHVybiAo
UGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGNsb3Nlc3RNYXRjaDsKKwkJCX0KKwkJfQorCQl0
aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCJUeXBlIGRvZXNuJ3QgaGF2ZSBpdHMg
b3duIG1ldGhvZD8iKTsgLy8kTk9OLU5MUy0xJAogCX0KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247989</attachid>
            <date>2014-10-18 10:42:00 -0400</date>
            <delta_ts>2014-10-21 02:15:43 -0400</delta_ts>
            <desc>Patch to eliminate post inference compatibility checks.</desc>
            <filename>Scope-cleanup.patch</filename>
            <type>text/plain</type>
            <size>13162</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBiODVlYjNkLi5mMmRhNTEwIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC00NDYsMjEgKzQ0NiwyMCBAQAog
CQlpZiAoaXNEaWFtb25kKSB7CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgp
OwogCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgZ2VuZXJp
Y1R5cGUudHlwZVZhcmlhYmxlcygpLCBnZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQkJ
aWYgKHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgY29tcGlsZXJPcHRpb25zLnNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgdGhpcy5leHByZXNzaW9uQ29udGV4
dC5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJdGhpcy5iaW5kaW5nID0gaW5mZXJDb25zdHJ1
Y3Rvck9mRWxpZGVkUGFyYW1ldGVyaXplZFR5cGUocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMucmVz
b2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CisJ
CQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKSB7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZSA9IG51bGw7CisJCQkJfQorCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRo
aXMpOworCQkJfQogCQkJVHlwZUJpbmRpbmcgW10gaW5mZXJyZWRUeXBlcyA9IGluZmVyRWxpZGVk
VHlwZXMocGFyYW1ldGVyaXplZFR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUo
KSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSk7CiAJCQlpZiAoaW5mZXJyZWRUeXBlcyA9PSBu
dWxsKSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBl
cyh0aGlzKTsKIAkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCQkJfQogCQkJ
UmVmZXJlbmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3Jl
YXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsK
LQkJCWlmICh0aGlzLnR5cGVFeHBlY3RlZCA9PSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5zb3Vy
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuZXhwcmVzc2lvbkNv
bnRleHQuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJCXNjb3BlLnNob3VsZENvbnN1bHRTaGFk
b3dPcmlnaW5hbCA9IHRydWU7Ci0JCQkJdHJ5IHsKLQkJCQkJdGhpcy5iaW5kaW5nID0gc2NvcGUu
Z2V0Q29uc3RydWN0b3IoYWxsb2NhdGlvblR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7
Ci0JCQkJfSBmaW5hbGx5IHsKLQkJCQkJc2NvcGUuc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFs
ID0gZmFsc2U7Ci0JCQkJfQotCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwot
CQkJfQogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gYWxs
b2NhdGlvblR5cGU7IAogCQl9CiAJfSBlbHNlIHsKQEAgLTU1Myw2ICs1NTIsMTYgQEAKIAlyZXR1
cm4gYWxsb2NhdGlvblR5cGUgIT0gbnVsbCAmJiBhbGxvY2F0aW9uVHlwZS5pc0NvbXBhdGlibGVX
aXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKIH0KIAorcHVibGljIE1ldGhvZEJpbmRpbmcgaW5mZXJD
b25zdHJ1Y3Rvck9mRWxpZGVkUGFyYW1ldGVyaXplZFR5cGUoUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBzY29wZSkgeworCS8vIEdpdmVuIHRo
ZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBz
ZWUgaWYgd2UgY2FuIGluZmVyIHRoZSBjb25zdHJ1Y3RvciBvZiB0aGUgZWxpZGVkIHBhcmFtZXRl
cml6ZWQgdHlwZS4KKwlNZXRob2RCaW5kaW5nIGZhY3RvcnkgPSBzY29wZS5nZXRTdGF0aWNGYWN0
b3J5KGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHRoaXMpOwor
CWlmIChmYWN0b3J5IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
ICYmIGZhY3RvcnkuaXNWYWxpZEJpbmRpbmcoKSkgeworCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9k
QmluZGluZyBvcmlnaW5hbCA9IChTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgZmFjdG9y
eS5vcmlnaW5hbCgpOworCQlyZXR1cm4gb3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25z
dHJ1Y3RvcigoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFy
Z3VtZW50cyk7CisJfQorCXJldHVybiBudWxsOworfQorCiBwdWJsaWMgVHlwZUJpbmRpbmdbXSBp
bmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwg
UmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlw
cywgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZlbiB0aGUgYWxsb2NhdGlvbiB0eXBlIGFu
ZCB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rvciwgc2VlIGlmIHdlIGNhbiBzeW50aGVz
aXplIGEgZ2VuZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAgIG1ldGhvZCB0aGF0IHdvdWxkLCBnaXZl
biB0aGUgYXJndW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZvY2F0aW9uIHNpdGUsIG1hbnVmYWN0dXJl
IGEgcGFyYW1ldGVyaXplZCBvYmplY3Qgb2YgdHlwZSBhbGxvY2F0aW9uVHlwZS4KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQmxvY2tTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Nj
b3BlLmphdmEKaW5kZXggYzA0ZTlhOC4uMjVmMmNjMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9CbG9ja1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEKQEAg
LTEwMzcsMTEgKzEwMzcsNyBAQAogcHJpdmF0ZSBMaXN0IHRyYWNraW5nVmFyaWFibGVzOyAvLyBj
YW4gYmUgbnVsbCBpZiBubyByZXNvdXJjZXMgYXJlIHRyYWNrZWQKIC8qKiBVc2VkIG9ubHkgZHVy
aW5nIGFuYWx5c2VDb2RlIGFuZCBvbmx5IGZvciBjaGVja2luZyBpZiBhIHJlc291cmNlIHdhcyBj
bG9zZWQgaW4gYSBmaW5hbGx5QmxvY2suICovCiBwdWJsaWMgRmxvd0luZm8gZmluYWxseUluZm87
Ci1wdWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93T3JpZ2luYWw7CiAKLXB1YmxpYyBi
b29sZWFuIHNob3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbCgpIHsKLQlyZXR1cm4gdGhpcy5zaG91
bGRDb25zdWx0U2hhZG93T3JpZ2luYWw7Ci19CiAvKioKICAqIFJlZ2lzdGVyIGEgdHJhY2tpbmcg
dmFyaWFibGUgYW5kIGNvbXB1dGUgaXRzIGlkLgogICovCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggMjczNjhkNi4u
OGE5ZjM1NSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU2NvcGUuamF2YQpAQCAtNDI3LDkgKzQyNyw2IEBACiAJCXJldHVybiBkZWZhdWx0
U3Vic3RpdHV0b3Iuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIG9yaWdpbmFsVHlwZSk7CiAJfQog
Ci0JcHVibGljIGJvb2xlYW4gc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsKCkgewotCQlyZXR1
cm4gZmFsc2U7IAotCX0KIAkvKioKIAkgKiBSZXR1cm5zIGFuIGFycmF5IG9mIHR5cGVzLCB3aGVy
ZSBvcmlnaW5hbCB0eXBlcyBnb3Qgc3Vic3RpdHV0ZWQgZ2l2ZW4gYSBzdWJzdGl0dXRpb24uCiAJ
ICogT25seSBhbGxvY2F0ZSBhbiBhcnJheSBpZiBhbnl0aGluZyBpcyBkaWZmZXJlbnQuCkBAIC03
MzYsOCArNzMzLDggQEAKIAkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiBtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0
aW9uKSB7CiAJCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGludm9jYXRp
b25TaXRlOwogCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldElu
ZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9k
KTsKLQkJCQlpZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5m
ZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpCi0JCQkJCXJldHVybiBtZXRob2Q7IC8vIGlu
ZmVyZW5jZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCisJCQkJaWYgKGluZkN0
eCAhPSBudWxsKQorCQkJCQlyZXR1cm4gbWV0aG9kOyAvLyBpbmZlcmVuY2UgaXMgcmVzcG9uc2li
bGUsIG5vIG5lZWQgdG8gcmVjaGVjaywgYWN0dWFsbHkgd2UgY291bGQgY2hlY2sgZnVuY3Rpb25h
bCBhcmd1bWVudHMsIHNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9NDM3NDQ0I2MxMjUKIAkJCX0KIAkJfSBlbHNlIGlmIChnZW5lcmljVHlwZUFyZ3VtZW50
cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV83KSB7CiAJCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CkBAIC03NjYsNyArNzYzLDcgQEAKIAkJaWYgKGdlbmVy
aWNUeXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZ
UEVfVkFSSUFCTEVTKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2Qs
IG1ldGhvZC5zZWxlY3RvciwgYXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVk
TWV0aG9kVHlwZU1pc21hdGNoKTsKIAkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBw
ZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25z
aWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywgbGFtYmRhIHNo
YXBlL2FyaXR5IG1pc21hdGNoIC4uLikKLQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpCisJCWlmIChtZXRob2QgaW5zdGFuY2VvZiBQ
b2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAvLyBOb3QgcmVhY2hlZCwgYnV0
IGxlZnQgaW4gZm9yIG5vdy4KIAkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0
aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5J
bmZlcnJlZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGUpOwogCQlyZXR1cm4gbnVsbDsgLy8g
aW5jb21wYXRpYmxlCiAJfQpAQCAtNDU4NywxOSArNDU4NCw4IEBACiAJCVR5cGVCaW5kaW5nW10g
cGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwogCQlpbnQgcGFyYW1MZW5ndGggPSBwYXJh
bWV0ZXJzLmxlbmd0aDsKIAkJaW50IGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7Ci0JCVR5
cGVCaW5kaW5nIFtdIGpsTyA9IHsgZ2V0SmF2YUxhbmdPYmplY3QoKSB9OworCiAJCUNvbXBpbGVy
T3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBjb21waWxlck9wdGlvbnMoKTsKLQkJLy8gQWZ0ZXIg
YXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgYXQgMS44KyB0aGVyZSBpcyBubyB1c2UgY2hlY2tpbmcg
bm9uLWZ1bmN0aW9uYWwgdHlwZSBhcmd1bWVudHMvcGFyYW1ldGVycyBmb3IgY29tcGF0aWJpbGl0
eSBzaW5jZSBpbmZlcmVuY2Ugd291bGQgaGF2ZSBndWFyYW50ZWVkIHRoYXQuCi0JCWJvb2xlYW4g
Y2hlY2tPbmx5RnVuY3Rpb25hbFR5cGVzID0gZmFsc2U7Ci0JCVR5cGVCaW5kaW5nIFtdIHNoYWxs
b3dQYXJhbWV0ZXJzID0gcGFyYW1ldGVyczsKLQkJTWV0aG9kQmluZGluZyBzaGFsbG93T3JpZ2lu
YWwgPSBtZXRob2Q7Ci0JCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgfHwgc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdp
bmFsKCkpIHsKLQkJCQljaGVja09ubHlGdW5jdGlvbmFsVHlwZXMgPSBtZXRob2QgaW5zdGFuY2Vv
ZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwotCQkJCXNoYWxsb3dPcmln
aW5hbCA9IG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsKLQkJCQlzaGFsbG93UGFyYW1ldGVycyA9
IHNoYWxsb3dPcmlnaW5hbC5wYXJhbWV0ZXJzOwotCQkJfQotCQl9CiAJCWlmIChjb21waWxlck9w
dGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CiAJCQlpZiAo
cGFyYW1MZW5ndGggIT0gYXJnTGVuZ3RoKQogCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKQEAg
LTQ2MjUsNyArNDYxMSw2IEBACiAJCQlpZiAocGFyYW1MZW5ndGggPT0gYXJnTGVuZ3RoKSB7IC8v
IGFjY2VwdCBYIG9yIFhbXSBidXQgbm90IFhbXVtdCiAJCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBw
YXJhbWV0ZXJzW2xhc3RJbmRleF07IC8vIGlzIGFuIEFycmF5QmluZGluZyBieSBkZWZpbml0aW9u
CiAJCQkJVHlwZUJpbmRpbmcgYXJnID0gYXJndW1lbnRzW2xhc3RJbmRleF07Ci0JCQkJCiAJCQkJ
aWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSkgewogCQkJCQlsZXZlbCA9IHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKQEAgLTQ2
MzQsMTggKzQ2MTksOCBAQAogCQkJCQkJaWYgKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsK
IAkJCQkJCQlhcmcgPSAoKEFycmF5QmluZGluZykgYXJnKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJ
CX0KLQkJCQkJCWlmICgoKEFycmF5QmluZGluZykgc2hhbGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4
XSkuZWxlbWVudHNUeXBlKCkuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93
T3JpZ2luYWwpKSB7Ci0JCQkJCQkJaWYgKGNoZWNrT25seUZ1bmN0aW9uYWxUeXBlcykgewotCQkJ
CQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAhcGFyYW0uaXNGdW5jdGlvbmFsSW50
ZXJmYWNlKHRoaXMpKQotCQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCQkv
LyBBcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBtYXkgaGF2ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVk
IHR5cGUgdmFyaWFibGVzIHdpdGggamxPLCBkb24ndCB0cmlwIG9uIHRoZXNlLgotCQkJCQkJCQlp
ZiAoIXBhcmFtLm1lbnRpb25zQW55KGpsTywgLTEpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9D
T01QQVRJQkxFKQotCQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJCX0gZWxz
ZSB7Ci0JCQkJCQkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwg
ZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJ
CQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJCQl9Ci0JCQkJCQl9CisJCQkJCQlpZiAo
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQkJcmV0dXJuIE5PVF9DT01Q
QVRJQkxFOwogCQkJCQkJbGV2ZWwgPSBWQVJBUkdTX0NPTVBBVElCTEU7IC8vIHZhcmFyZ3Mgc3Vw
cG9ydCBuZWVkZWQKIAkJCQkJfQogCQkJCX0KQEAgLTQ2NTQsMTYgKzQ2MjksNiBAQAogCQkJCQlU
eXBlQmluZGluZyBwYXJhbSA9ICgoQXJyYXlCaW5kaW5nKSBwYXJhbWV0ZXJzW2xhc3RJbmRleF0p
LmVsZW1lbnRzVHlwZSgpOwogCQkJCQlmb3IgKGludCBpID0gbGFzdEluZGV4OyBpIDwgYXJnTGVu
Z3RoOyBpKyspIHsKIAkJCQkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzICYmIChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1l
bnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKLQkJCQkJCWlmICghKChBcnJh
eUJpbmRpbmcpc2hhbGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCkuaXNQ
ZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKQotCQkJCQkJCWNv
bnRpbnVlOwotCQkJCQkJaWYgKGNoZWNrT25seUZ1bmN0aW9uYWxUeXBlcykgewotCQkJCQkJCWlm
IChhcmcuaXNGdW5jdGlvbmFsVHlwZSgpICYmICFwYXJhbS5pc0Z1bmN0aW9uYWxJbnRlcmZhY2Uo
dGhpcykpCi0JCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJCQkvLyBBcHBsaWNh
YmlsaXR5IGluZmVyZW5jZSBtYXkgaGF2ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFy
aWFibGVzIHdpdGggamxPLCBkb24ndCB0cmlwIG9uIHRoZXNlLgotCQkJCQkJCWlmIChwYXJhbS5t
ZW50aW9uc0FueShqbE8sIC0xKSkKLQkJCQkJCQkJY29udGludWU7Ci0JCQkJCQkJLy8gRkFMTCBU
SFJPVUdIIGFuZCBjaGVjayBjb21wYXRpYmlsaXR5LgotCQkJCQkJfQogCQkJCQkJaWYgKFR5cGVC
aW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2
ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09N
UEFUSUJMRSkKIAkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CiAJCQkJCX0KQEAgLTQ2ODAs
MTcgKzQ2NDUsNiBAQAogCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBwYXJhbWV0ZXJzW2ldOwogCQkJ
VHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0gKGFy
Z0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRzVHlw
ZSgpIDogYXJndW1lbnRzW2ldOwogCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhhcmcscGFy
YW0pKSB7Ci0JCQkJLy8gQ2FyZWZ1bDogVCBtYXkgaGF2ZSBiZWVuIHN1YnN0aXR1dGVkIHdpdGgg
amxPLiBDb25zdWx0IHRoZSBzaGFsbG93IHBhcmFtZXRlciBmb3IgcGVydGluZW5jeSBmaXJzdC4K
LQkJCQlpZiAoIXNoYWxsb3dQYXJhbWV0ZXJzW2ldLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5
KGFyZywgc2hhbGxvd09yaWdpbmFsKSkKLQkJCQkJY29udGludWU7Ci0JCQkJaWYgKGNoZWNrT25s
eUZ1bmN0aW9uYWxUeXBlcykgewotCQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAh
cGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpKQotCQkJCQkJcmV0dXJuIE5PVF9DT01Q
QVRJQkxFOwotCQkJCQkvLyBBcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBtYXkgaGF2ZSBzdWJzdGl0
dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFyaWFibGVzIHdpdGggamxPLCBkb24ndCB0cmlwIG9uIHRo
ZXNlLgotCQkJCQlpZiAocGFyYW0ubWVudGlvbnNBbnkoamxPLCAtMSkpCi0JCQkJCQljb250aW51
ZTsKLQkJCQkJLy8gRkFMTCBUSFJPVUdIIGFuZCBjaGVjayBjb21wYXRpYmlsaXR5LgotCQkJCX0K
IAkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJh
bSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAobmV3TGV2ZWwgPT0g
Tk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQppbmRleCAxYzRkNzQ3
Li45Mzg0OWNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRo
b2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9k
QmluZGluZy5qYXZhCkBAIC0xNyw4ICsxNywzMSBAQAogICovCiBwdWJsaWMgY2xhc3MgU3ludGhl
dGljRmFjdG9yeU1ldGhvZEJpbmRpbmcgZXh0ZW5kcyBNZXRob2RCaW5kaW5nIHsKIAorCXByaXZh
dGUgTWV0aG9kQmluZGluZyBzdGF0aWNGYWN0b3J5Rm9yOworCXByaXZhdGUgTG9va3VwRW52aXJv
bm1lbnQgZW52aXJvbm1lbnQ7CisJcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5
cGU7CisJCiAJcHVibGljIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRp
bmcgbWV0aG9kLCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCwgUmVmZXJlbmNlQmluZGlu
ZyBlbmNsb3NpbmdUeXBlKSB7CiAJCXN1cGVyKG1ldGhvZC5tb2RpZmllcnMgfCBDbGFzc0ZpbGVD
b25zdGFudHMuQWNjU3RhdGljLCBUeXBlQ29uc3RhbnRzLlNZTlRIRVRJQ19TVEFUSUNfRkFDVE9S
WSwKIAkJCQludWxsLCBudWxsLCBudWxsLCBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpOworCQl0aGlz
LmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7CisJCXRoaXMuc3RhdGljRmFjdG9yeUZvciA9IG1l
dGhvZDsKKwkJdGhpcy5lbmNsb3NpbmdUeXBlID0gZW5jbG9zaW5nVHlwZTsKKwl9CisJCisJLyoq
IEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmluZyBjbGFzcyBv
ZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0aGlzIGZhY3Rv
cnkgbWV0aG9kLiAqLworCXB1YmxpYyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBhcHBseVR5
cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cykgewor
CQlSZWZlcmVuY2VCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gdGhpcy5lbnZpcm9ubWVudC5j
cmVhdGVQYXJhbWV0ZXJpemVkVHlwZSh0aGlzLmRlY2xhcmluZ0NsYXNzLCB0eXBlQXJndW1lbnRz
LAorCQkJCQkJCQkJCQkJCQkJCQkJCQkJCXRoaXMuZW5jbG9zaW5nVHlwZSk7CisJCWZvciAoTWV0
aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kIDogcGFyYW1ldGVyaXplZFR5cGUubWV0aG9k
cygpKSB7CisJCQlpZiAocGFyYW1ldGVyaXplZE1ldGhvZC5vcmlnaW5hbCgpID09IHRoaXMuc3Rh
dGljRmFjdG9yeUZvcikKKwkJCQlyZXR1cm4gKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBw
YXJhbWV0ZXJpemVkTWV0aG9kOworCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2QgaW5zdGFuY2Vv
ZiBQcm9ibGVtTWV0aG9kQmluZGluZykgeworCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNo
ID0gKChQcm9ibGVtTWV0aG9kQmluZGluZylwYXJhbWV0ZXJpemVkTWV0aG9kKS5jbG9zZXN0TWF0
Y2g7CisJCQkJaWYgKGNsb3Nlc3RNYXRjaCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RC
aW5kaW5nICYmIGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpID09IHRoaXMuc3RhdGljRmFjdG9yeUZv
cikKKwkJCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgY2xvc2VzdE1hdGNo
OworCQkJfQorCQl9CisJCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oIlR5cGUg
ZG9lc24ndCBoYXZlIGl0cyBvd24gbWV0aG9kPyIpOyAvLyROT04tTkxTLTEkCiAJfQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248033</attachid>
            <date>2014-10-21 02:15:00 -0400</date>
            <delta_ts>2014-10-21 02:20:26 -0400</delta_ts>
            <desc>Merged patch brought up to date with master.</desc>
            <filename>FANDG.patch</filename>
            <type>text/plain</type>
            <size>225470</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICszOTYyMSwyNCBA
QAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNvbXBpbGVyIHJl
c3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9nICovCiAJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBjb21wb3VuZChh
c0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJIlRoZSBtZXRo
b2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGlu
IHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIKKwkJLy8g
MS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5lciBwb2x5IGV4
cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNMaXN0KGEs
IGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgY29t
cG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4pIGluIHRoZSB0
eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8Q29tcGFyYXRv
cjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQoYXNM
aXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXG4iICsg
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29tcGFyYXRvcjw/
IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlvbnMKIAkJSmF2
YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGphdmFjIHRlc3Qg
b3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9XG4iICsKIAkJ
CQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0tLS0tLVxuIiAr
CiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQkiCXB1dChJbnRl
Z2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5eXlxuIiArCiAJ
CQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4gdGhlIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50ZWdlcj4sIFgu
T088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6IC8vIEFUTSwg
aW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3duLgorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsg
CisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArIAor
CQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5UTzw/IHN1cGVy
IEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAorCQkJIglw
dXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0byBYLlRPPD8g
c3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlvbgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uMzg5ZjdhYSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiArIAogCQkJIn1c
biIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJlYWRzIGEgYml0
IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBmb28obnVsbCwg
U2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4g
cm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKKwkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVjdD4gdG8gPHVu
a25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8WT4pIGZvbyhu
dWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVz
c2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9zdGVyU2V0ID0g
KFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3RhbnRpYXRlIHRo
ZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5eXl5eXl5eXl5e
XG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkg
aW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVz
dC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGluZSA1KVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJYWRkQXR0
cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0ZSwgXCJcIiks
XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJpYnV0ZTxUPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmlidXRlLmdldERl
ZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFk
ZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3Qg
YXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMzLW9m
ID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBAQAogCQkiLS0t
LS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAog
CQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVDYXBhY2l0eSkp
O1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+PigoKSAtPiB7
fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4oKCkgLT4gbmV3
IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgbWFr
ZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVxdWVDYXBhY2l0
eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUgbWVzc2FnZSBp
bmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0oncyBtZXNzYWdl
IGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkgMSBlcnJvciBo
ZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFpbHMgbGVhZGlu
ZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJCSIgICAgICAg
ICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xuIiArIAorCQki
ICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAgIH1cbiIgKyAK
KwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAorCQkiICAg
ICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIgKyAKKwkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVHlw
ZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0byA8dW5rbm93
bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiArIAog
CQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5ub3QgcmV0dXJu
IGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTI1MjAsOSArMjU0OSw4IEBACiAgICAgICAgICAgICAi
fVxuIgogICAgICAgICB9KTsKIH0KLXB1YmxpYyB2b2lkIF90ZXN0QnVnNDI4ODExKCkgewotCS8v
IHBlcmhhcHMgZmFpbCBpcyB0aGUgY29ycmVjdCBhbnN3ZXI/IEZJWE1FOiB2YWxpZGF0ZSEKLQly
dW5OZWdhdGl2ZVRlc3QoCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI4ODExKCkgeworCXJ1bkNvbmZv
cm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIk1vcmVDb2xsZWN0b3JzLmphdmEiLAogCQkJ
ImltcG9ydCBqYXZhLnV0aWwuQWJzdHJhY3RMaXN0O1xuIiArIApAQCAtMjU2OSwxOCArMjU5Nyw3
IEBACiAJCQkiICAgIH1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsg
Ci0JCSIxLiBFUlJPUiBpbiBNb3JlQ29sbGVjdG9ycy5qYXZhIChhdCBsaW5lIDE2KVxuIiArIAot
CQkiCXJldHVybiBDb2xsZWN0b3Iub2YoQXJyYXlMaXN0PFQ+OjpuZXcsXG4iICsgCi0JCSIJICAg
ICAgICAgICAgICAgICBeXlxuIiArIAotCQkiVGhlIG1ldGhvZCBvZihBcnJheUxpc3Q8VD46Om5l
dywgTGlzdDxUPjo6YWRkLCAoPG5vIHR5cGU+IGxlZnQsIDxubyB0eXBlPiByaWdodCkgLT4ge30i
ICsgCi0JCSIsIEltbXV0YWJsZUxpc3Q6OmNvcHlPZikgaXMgdW5kZWZpbmVkIGZvciB0aGUgdHlw
ZSBDb2xsZWN0b3JcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdBUk5JTkcgaW4g
TW9yZUNvbGxlY3RvcnMuamF2YSAoYXQgbGluZSAyMylcbiIgKyAKLQkJIglwdWJsaWMgc3RhdGlj
IDxUPiBJbW11dGFibGVMaXN0PFQ+IGNvcHlPZiAoQ29sbGVjdGlvbjxUPiBjKSB7XG4iICsgCi0J
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29weU9mKENvbGxlY3Rpb248VD4pIGZyb20gdGhl
IHR5cGUgTW9yZUNvbGxlY3RvcnMuSW1tdXRhYmxlTGlzdDxUPiBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIpOworCQkiW2EsIGIsIGNdIik7CiB9CiAvLyBhbGwg
ZXhjZXB0aW9ucyBjYW4gYmUgaW5mZXJyZWQgdG8gbWF0Y2gKIHB1YmxpYyB2b2lkIHRlc3RCdWc0
Mjk0MzAoKSB7CkBAIC0yODQzLDYgKzI4NjAsNyBAQAogCQkJIglwdWJsaWMgRFRlc3QoRnVuY3Rp
b248VCwgVD4gZnVuYykgeyB9XG4iICsgCiAJCQkiCVxuIiArIAogCQkJIglwdWJsaWMgRFRlc3Qo
RFRlc3Q8SW50ZWdlcj4gZHRpKSB7fVxuIiArIAorCQkJIglwdWJsaWMgRFRlc3QoKSB7fVxuIiAr
IAogCQkJIglcbiIgKyAKIAkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJn
cykge1xuIiArIAogCQkJIgkJRFRlc3Q8U3RyaW5nPiB0MSA9IG5ldyBEVGVzdDxTdHJpbmc+KG5l
dyBEVGVzdDxJbnRlZ2VyPigpKTtcbiIgKyAKQEAgLTI4NTAsMTYgKzI4NjgsMTEgQEAKIAkJCSJ9
XG4iCiAJCX0sCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAorCQkiMS4gRVJST1IgaW4gRFRlc3QuamF2YSAoYXQgbGluZSAx
MSlcbiIgKyAKIAkJIglEVGVzdDxTdHJpbmc+IHQxID0gbmV3IERUZXN0PFN0cmluZz4obmV3IERU
ZXN0PEludGVnZXI+KCkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5c
biIgKyAKIAkJIlJlZHVuZGFudCBzcGVjaWZpY2F0aW9uIG9mIHR5cGUgYXJndW1lbnRzIDxTdHJp
bmc+XG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBEVGVzdC5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAotCQkiCURUZXN0PFN0cmluZz4gdDEgPSBuZXcgRFRlc3Q8U3Ry
aW5nPihuZXcgRFRlc3Q8SW50ZWdlcj4oKSk7XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgY29u
c3RydWN0b3IgRFRlc3Q8SW50ZWdlcj4oKSBpcyB1bmRlZmluZWRcbiIgKwotCQkiLS0tLS0tLS0t
LVxuIiwKKwkJIi0tLS0tLS0tLS1cbiIsIAogCQludWxsLCB0cnVlLCBjdXN0b21PcHRpb25zKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzAyOTYoKSB7CkBAIC0zMDQyLDE0ICszMDU1LDkgQEAK
IAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEu
IEVSUk9SIGluIENvbGxlY3RvcnNNYXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCi0JCSIJcCAt
PiBwLmxocy5zdHJlYW0oKS5tYXAocDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4iICsgCi0JCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKLQkJ
IlRoZSBtZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxSPikgaW4gdGhl
IHR5cGUgU3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KENvbGxlY3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMy1v
ZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsK
KwkJIiIpOwogfQotcHVibGljIHZvaWQgX3Rlc3RCdWc0MzI2MjYoKSB7CitwdWJsaWMgdm9pZCB0
ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJ
IlN0cmVhbUludGVyZmFjZTIuamF2YSIsCkBAIC0zMTEyLDYgKzMxMjAsMjkgQEAKIAkJCSIJc3Rh
dGljIDxUPiBBcnJheUxpc3Q8VD4gY29tYmluZWQoQXJyYXlMaXN0PFQ+IGxlZnQsIEFycmF5TGlz
dDxUPiByaWdodCkge1xuIiArIAogCQkJIgkJbGVmdC5hZGRBbGwocmlnaHQpO1xuIiArIAogCQkJ
IgkJcmV0dXJuIGxlZnQ7XG4iICsgCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9Citw
dWJsaWMgdm9pZCB0ZXN0QnVnNDMyNjI2X3JlZHVjZWQoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5
TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJImltcG9y
dCBqYXZhLnV0aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5j
dGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKwor
CQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyA8VCwgSz4gTWFwPEssIEFycmF5TGlzdDxU
Pj4gdGVybWluYWxBc01hcFRvTGlzdChGdW5jdGlvbjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPiBj
bGFzc2lmaWVyKSAge1xuIiArCisJCQkiCQlyZXR1cm4gdGVybWluYWxBc0NvbGxlY3RlZChDb2xs
ZWN0b3JzLmdyb3VwaW5nQnkoXG4iICsKKwkJCSIJCQkgIGNsYXNzaWZpZXIsXG4iICsKKwkJCSIJ
CQkgICgpIC0+IG5ldyBIYXNoTWFwPD4oKSxcbiIgKworCQkJIgkJCSAgKENvbGxlY3RvcjxULEFy
cmF5TGlzdDxUPixBcnJheUxpc3Q8VD4+KSBudWxsKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQki
CXN0YXRpYyA8VCwgTT4gTSB0ZXJtaW5hbEFzQ29sbGVjdGVkKENvbGxlY3RvcjxULCA/LCBNPiBj
b2xsZWN0b3IpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKIAkJCSIJfVxuIiArCiAJ
CQkifVxuIgogCQl9KTsKQEAgLTMzMjksMTQgKzMzNjAsMTQgQEAKIAkJCSJ9XG4iCiAJCX0sCiAJ
CSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2
YSAoYXQgbGluZSAyMilcbiIgKyAKLQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0J
CSIJICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3Vw
ZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+
LGNhcHR1cmUjMS1vZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCisJCSIxLiBX
QVJOSU5HIGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCSIJ
aW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKKwkJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IGphdmEudXRpbC5m
dW5jdGlvbi5GdW5jdGlvbiBpcyBuZXZlciB1c2VkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVUZXN0KAorCXJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIkR1bW15Q2xhc3MuamF2YSIsCiAJ
CQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCkBAIC0zMzc4LDE3ICszNDA5LDcgQEAKIAkJCSIJ
fVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9S
IGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClcbiIgKyAKLQkJIgkuY29sbGVjdChDb2xs
ZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXkocGF0aCksIHBhdGggLT4gdGhpcy5nZXRW
YWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0S2V5KFN0cmluZykgaW4gdGhl
IHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2Jq
ZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4gRHVtbXlDbGFz
cy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3RvcnMudG9NYXAo
cGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVlKHBhdGgpKSkp
O1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGdldFZh
bHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3Ig
dGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsK
IH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRlc3QoCkBAIC00
NDA0LDQgKzQ0MjUsMTk5IEBACiAJCQkifVxuIgogCQl9KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBu
ZXN0ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1
bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5QcmVk
aWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgaW50ZXJmYWNlIElMaXN0RW50cnkg
e1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRSZWNvcmRzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIglwcm90
ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJsZVJlY29yZCB7XG4iICsKKwkJCSIJCXB1
YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsgfVxuIiArCisJCQkiCX1cbiIgKworCQkJ
Iglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJlY29yZCB7fVxuIiArCisJCQkiCXB1Ymxp
YyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoRWNsaXBzZUFuZEphdmFjKCkgXG4i
ICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3Ry
ZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiB7XG4iICsK
KwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNvcmQ+IHJlc3VsdDEgPSBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJCXJldHVybiByZXN1bHQxO1xuIiAr
CisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29sbGVjdG9ycy50
b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7CQlcbiIgKwor
CQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVz
V2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVy
biB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQkiCQkJcmV0dXJu
IHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJIgkJCQlyZXR1cm4gZW50cnkudmlzaXRS
ZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJCQkJCQkuZmls
dGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1tdXRhYmxlUmVj
b3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9MaXN0KCkg
KVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExpc3Q6OnN0cmVh
bSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApICk7
XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVibGljIExpc3Q8
SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2UyKCkgXG4iICsK
KwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFt
IC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNp
dFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5m
aWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVS
ZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3Qo
KSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29s
bGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7
CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4g
Y29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygpIFxuIiArCisJCQkiCXtcbiIgKworCQkJ
IgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiBzdHJlYW0ubWFwKCBl
bnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJc
biIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJ
CQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCgg
Q29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSlcbiIgKworCQkJIgkJCS5mbGF0
TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9D
b2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIgKworCQkJIgkJKTsJCVxuIiArCisJCQki
CX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJlZGljYXRlPFJlY29yZD4gc29tZVByZWRp
Y2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29yZCAtPiB0cnVlO1xuIiArCisJCQkiCX0J
CVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRFbnRyaWVzV2l0aFJlc3VsdChGdW5jdGlv
bjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xuIiArCisJCQkiCQlyZXR1cm4gZnVuYy5h
cHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5PigpLnN0cmVhbSgpICk7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzODUyLCBbMS44XVtjb21waWxlcl0gSmF2YWMgcmVq
ZWN0cyB0eXBlIGluZmVyZW5jZSByZXN1bHRzIHRoYXQgRUNKIGFjY2VwdHMKK3B1YmxpYyB2b2lk
IHRlc3Q0MzM4NTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5PcHRpb25hbDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4odGVzdChTdHJlYW0ub2YoU3RyZWFtLm9mKFwiM1wiKSkpKTtcbiIg
KworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QyKFN0cmVhbS5vZihTdHJlYW0ub2YoXCIx
XCIpKS5za2lwKDEpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0MzEoU3Ry
ZWFtLm9mKFN0cmVhbS5vZihcIjJcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PiB0ZXN0KFN0cmVhbTxTdHJlYW08U3Ry
aW5nPj4gczMxKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMzEubWFwKHMyIC0+IHMyLm1hcChzMSAt
PiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJc3RhdGljIE9iamVjdCB0ZXN0MihTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMzKSB7XG4iICsK
KwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiAr
CisJCQkiCQkgIFguY2xhc3MpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgU3RyZWFt
PE9iamVjdD4gdGVzdDMxKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMpIHtcbiIgKworCQkJIgkJ
cmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5m
aW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTEpXG4iICsgCisJIglyZXR1cm4gczMxLm1hcChzMiAtPiBzMi5tYXAoczEg
LT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55KCk7XG4iICsgCisJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPcHRpb25hbDxTdHJl
YW08SW50ZWdlcj4+IHRvIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PlxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmxh
dE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiArIAorCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1l
dGhvZCBvckVsc2UoSW50ZWdlcikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8SW50ZWdlcj4gaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPFg+KVxuIiArIAorCSItLS0tLS0t
LS0tXG4iICsgCisJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIgKyAKKwkiCXJl
dHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmlu
ZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9iamVjdCgpKSk7XG4iICsgCisJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1ldGhvZCBvckVsc2UoU3RyZWFtPEludGVnZXI+KSBpbiB0
aGUgdHlwZSBPcHRpb25hbDxTdHJlYW08SW50ZWdlcj4+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0
aGUgYXJndW1lbnRzIChTdHJlYW08T2JqZWN0PilcbiIgKyAKKwkiLS0tLS0tLS0tLVxuIik7Cit9
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQyOTE2
LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBlIEluZmVyZW5jZSBpcyBicm9rZW4gZm9yIENvbXBsZXRh
YmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2KCkgeworCXRo
aXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJp
bXBvcnQgc3RhdGljIGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlLmNvbXBs
ZXRlZEZ1dHVyZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgQ29tcGxldGFibGVG
dXR1cmU8SW50ZWdlcj4gY2YoaW50IHZhbHVlKSB7XG4iICsKKwkJCSIJCXJldHVybiBjb21wbGV0
ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCWNmKDEpLnRoZW5Db21w
b3NlKCh4SW50KSAtPiBjZigyKS50aGVuQXBwbHkoKHpJbnQpIC0+IEFycmF5cy5hc0xpc3QoeElu
dCwgekludCkpKVxuIiArCisJCQkiCQkudGhlbkFjY2VwdCgoaW50cykgLT4ge1xuIiArCisJCQki
CQkJLyogISEhISBpbnRzIGlzIGluY29ycmVjdGx5IGluZmVycmVkIHRvIGJlIGFuIE9iamVjdCwg
YnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4gKi9cbiIgKworCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRs
bihpbnRzLmdldCgwKSArIGludHMuZ2V0KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7XG4iICsKKwkJ
CSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIjMiKTsKK30KKy8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDI3NjksIFsx
LjhdW2NvbXBpbGVyXSBJbnZhbGlkIHR5cGUgaW5mZXJlbmNlIHVzaW5nIFN0cmVhbSAgCitwdWJs
aWMgdm9pZCB0ZXN0NDQyNzY5KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5QYXRoO1xuIiAr
CisJCQkiaW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKworCQkJ
ImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTWFwO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVh
bS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xu
IiArCisJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJIgkJTWFwPE9iamVjdCwgSW50ZWdlcj4gYWxsb2NhdGVkID0gbmV3IEhhc2hN
YXA8PigpO1xuIiArCisJCQkiCQkgICBBcnJheXMuYXNMaXN0KFwiYVwiLCBcImJcIiwgXCJjXCIs
IFwiZFwiLCBcImVcIikgLy8gTGlzdDxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5zdHJl
YW0oKSAvLyBTdHJlYW08U3RyaW5nPlxuIiArCisJCQkiCSAgICAgICAgICAubWFwKFBhdGhzOjpn
ZXQpIC8vIFN0cmVhbTxQYXRoPlxuIiArCisJCQkiCSAgICAgICAgICAuZmxhdE1hcChwYXRoIC0+
IGFsbG9jYXRlZC5rZXlTZXQoKSAvLyBTZXQ8T2JqZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08T2JqZWN0PlxuIiAr
CisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZ3JvdXAgLT4g
UGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVjdCxQYXRoPiovKSAvLyBTdHJlYW08UGFp
cjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICApIC8vIFN0cmVhbTxPYmplY3Q+
IFtGQUlMXVxuIiArCisJCQkiCSAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3JzLnRvTGlzdCgp
KSAvLyBMaXN0PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgLmZvckVhY2goaXRlbSAtPiBT
eXN0ZW0ub3V0LnByaW50bG4oaXRlbS5nZXRLZXkoKSArIFwiOiBcIiArIGl0ZW0uZ2V0VmFsdWUo
KSkpOyAvLyBDb25zdW1lcjw/IHN1cGVyIE9iamVjdD5cbiIgKworCQkJIgkgICAgLy8gd2l0aCBl
eHBsaWNpdCB0eXBlXG4iICsKKwkJCSIJICAgIEFycmF5cy5hc0xpc3QoXCJhXCIsIFwiYlwiLCBc
ImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkgICAgICAgICAg
LnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAgIC5tYXAoUGF0
aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5mbGF0TWFwKHBh
dGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxPYmplY3Q+
XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLjxQYWlyPE9i
amVjdCxQYXRoPj5tYXAoZ3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVj
dCxQYXRoPiovKSAvLyBTdHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAg
ICAgICApIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJICAgICAgICAg
IC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpIC8vIExpc3Q8UGFpcjxPYmplY3QsIFBhdGg+
PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChpdGVtIC0+IFN5c3RlbS5vdXQucHJpbnRs
bihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5nZXRWYWx1ZSgpKSk7IC8vIENvbnN1bWVy
PD8gc3VwZXIgUGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIg
KworCQkJImFic3RyYWN0IGNsYXNzIFBhaXI8TCwgUj4gaW1wbGVtZW50cyBNYXAuRW50cnk8TCwg
Uj4sIENvbXBhcmFibGU8UGFpcjxMLCBSPj4sIFNlcmlhbGl6YWJsZSB7XG4iICsKKwkJCSIgICAg
cHVibGljIHN0YXRpYyA8TCwgUj4gUGFpcjxMLCBSPiBvZihmaW5hbCBMIGxlZnQsIGZpbmFsIFIg
cmlnaHQpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxu
IiArCisJCQkiICAgIHB1YmxpYyBmaW5hbCBMIGdldEtleSgpIHtcbiIgKworCQkJIiAgICAgICAg
cmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBSIGdldFZh
bHVlKCkge1xuIiArCisJCQkiICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgICB9XG4i
ICsKKwkJCSJ9XG4iCisJCX0sCisJCSIiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggYzg3
OGRiMy4uMWIyZGQ5YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTQxNjMsNyArNDE2Myw3IEBACiAJ
CSJPSyIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQzMjY4MiwgWzEuOF1bY29tcGlsZXJdIFR5cGUgbWlzbWF0Y2ggZXJyb3Igd2l0aCBsYW1i
ZGEgZXhwcmVzc2lvbgotcHVibGljIHZvaWQgX3Rlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9u
IHsKK3B1YmxpYyB2b2lkIHRlc3Q0MzI2ODIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBAIC00MTgxLDcg
KzQxODEsNyBAQAogCQkJIgl9XG4iICsKIAkJCSJ9XG4iCiAJCX0sCi0JCSJPSyIpOworCQkidHJ1
ZSIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTQzMjUyMCwgY29tcGlsZXIgImR1cGxpY2F0ZSBtZXRob2QiIGJ1ZyB3aXRoIGxhbWRhcyBhbmQg
Z2VuZXJpYyBpbnRlcmZhY2VzIAogcHVibGljIHZvaWQgdGVzdDQzMjUyMCgpIHRocm93cyBFeGNl
cHRpb24gewpAQCAtNDI5MCwxMyArNDI5MCwxOCBAQAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsgCiAJCQkiCXBlcnNvbnMuc29y
dChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxzTGFzdChQZXJzb246OjxSdW5u
YWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAotCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5cbiIgKyAKLQkJCSJUaGUgbWV0aG9kIG51bGxz
TGFzdChDb21wYXJhdG9yPD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVubmFi
bGUpXG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAor
CQkJIlRoZSBtZXRob2QgY29tcGFyaW5nKEZ1bmN0aW9uPD8gc3VwZXIgVCw/IGV4dGVuZHMgVT4p
IGluIHRoZSB0eXBlIENvbXBhcmF0b3IgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVu
dHMgKENvbXBhcmF0b3I8T2JqZWN0PilcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQki
Mi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIxKVxuIiArIAogCQkJIglwZXJzb25zLnNvcnQo
Q29tcGFyYXRvci5jb21wYXJpbmcoQ29tcGFyYXRvci5udWxsc0xhc3QoUGVyc29uOjo8UnVubmFi
bGU+aXNSdW5uYWJsZSkpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb21wYXJhdG9y
PE9iamVjdD4gdG8gRnVuY3Rpb248PyBzdXBlciBULD8gZXh0ZW5kcyBVPlxuIiArIAorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsg
CisJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9yLmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxz
TGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5hYmxlKSkpO1xuIiArIAogCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSB0eXBlIFguUGVyc29uIGRvZXMgbm90
IGRlZmluZSBpc1J1bm5hYmxlKFQsIFQpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCisJ
CQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlzUnVubmFibGUoT2JqZWN0LCBP
YmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMx
MTkwLCBbMS44XSBWZXJpZnlFcnJvciB3aGVuIHVzaW5nIGEgbWV0aG9kIHJlZmVyZW5jZQpAQCAt
NTA0OCw2ICs1MDUzLDg2IEBACiAJCQl9LAogCQkJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMjYwNSwgWzEuOF0gSW5jb3JyZWN0IGVy
cm9yICJUaGUgdHlwZSBBcnJheUxpc3Q8VD4gZG9lcyBub3QgZGVmaW5lIGFkZChBcnJheUxpc3Q8
VD4sIE9iamVjdCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmUiCitwdWJsaWMgdm9pZCB0ZXN0NDMy
NjA1KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5q
YXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQg
amF2YS51dGlsLkhhc2hNYXA7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1
bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5TdXBwbGllcjtcbiIg
KworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKworCQkJImltcG9y
dCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGls
LnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSJzdGF0
aWMgPFQsIEUgZXh0ZW5kcyBFeGNlcHRpb24sIEssIEwsIE0+IE0gdGVybWluYWxBc01hcFRvTGlz
dChcbiIgKworCQkJIiAgICBGdW5jdGlvbjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPiBjbGFzc2lm
aWVyLFxuIiArCisJCQkiICAgIEZ1bmN0aW9uPEhhc2hNYXA8SywgTD4sIE0+IGludG9NYXAsXG4i
ICsKKwkJCSIgICAgRnVuY3Rpb248QXJyYXlMaXN0PFQ+LCBMPiBpbnRvTGlzdCxcbiIgKworCQkJ
IiAgICBTdXBwbGllcjxTdHJlYW08VD4+IHN1cHBsaWVyLFxuIiArCisJCQkiICAgIENsYXNzPEU+
IGNsYXNzT2ZFKSB0aHJvd3MgRSB7XG4iICsKKwkJCSIgIAlyZXR1cm4gdGVybWluYWxBc0NvbGxl
Y3RlZChcbiIgKworCQkJIiAgCSAgY2xhc3NPZkUsXG4iICsKKwkJCSIgIAkgIENvbGxlY3RvcnMu
Y29sbGVjdGluZ0FuZFRoZW4oXG4iICsKKwkJCSIgIAkgICAgQ29sbGVjdG9ycy5ncm91cGluZ0J5
KFxuIiArCisJCQkiICAJICAgICAgY2xhc3NpZmllcixcbiIgKworCQkJIiAgCSAgICAgIEhhc2hN
YXA8SywgTD46Om5ldyxcbiIgKworCQkJIiAgCSAgICAgIENvbGxlY3RvcnMuY29sbGVjdGluZ0Fu
ZFRoZW4oXG4iICsKKwkJCSIgIAkgICAgICAJLy8gVGhlIHR5cGUgQXJyYXlMaXN0PFQ+IGRvZXMg
bm90IGRlZmluZSBhZGQoQXJyYXlMaXN0PFQ+LCBPYmplY3QpIHRoYXQgaXMgYXBwbGljYWJsZSBo
ZXJlXG4iICsKKwkJCSIgIAkgICAgICAJLy8gZnJvbSBBcnJheUxpc3Q8VD46OmFkZDpcbiIgKwor
CQkJIiAgCSAgICAgICAgQ29sbGVjdG9yLm9mKEFycmF5TGlzdDxUPjo6bmV3LCBBcnJheUxpc3Q8
VD46OmFkZCwgKEFycmF5TGlzdDxUPiBsZWZ0LCBBcnJheUxpc3Q8VD4gcmlnaHQpIC0+IHsgXG4i
ICsKKwkJCSIgIAkJICAgICAgICBsZWZ0LmFkZEFsbChyaWdodCk7XG4iICsKKwkJCSIgIAkJICAg
ICAgICByZXR1cm4gbGVmdDtcbiIgKworCQkJIiAgCSAgICAgICAgfSksXG4iICsKKwkJCSIgIAkg
ICAgICAgIGludG9MaXN0KSksXG4iICsKKwkJCSIgIAkgICAgaW50b01hcCksXG4iICsKKwkJCSIg
IAkgIHN1cHBsaWVyKTtcbiIgKworCQkJIiAgfVxuIiArCisJCQkiCXN0YXRpYyA8RSBleHRlbmRz
IEV4Y2VwdGlvbiwgVCwgTT4gTSB0ZXJtaW5hbEFzQ29sbGVjdGVkKFxuIiArCisJCQkiICAgIENs
YXNzPEU+IGNsYXNzMSxcbiIgKworCQkJIiAgICBDb2xsZWN0b3I8VCwgPywgTT4gY29sbGVjdG9y
LFxuIiArCisJCQkiICAgIFN1cHBsaWVyPFN0cmVhbTxUPj4gc3VwcGxpZXIpIHRocm93cyBFIHtc
biIgKworCQkJIiAgCXRyeShTdHJlYW08VD4gcyA9IHN1cHBsaWVyLmdldCgpKSB7XG4iICsKKwkJ
CSIgIAkJcmV0dXJuIHMuY29sbGVjdChjb2xsZWN0b3IpO1xuIiArCisJCQkiICAJfSBjYXRjaChS
dW50aW1lRXhjZXB0aW9uIGUpIHtcbiIgKworCQkJIiAgCQl0aHJvdyB1bndyYXBDYXVzZShjbGFz
czEsIGUpO1xuIiArCisJCQkiICAJfVxuIiArCisJCQkiICB9XG4iICsKKwkJCSIJc3RhdGljIDxF
IGV4dGVuZHMgRXhjZXB0aW9uPiBFIHVud3JhcENhdXNlKENsYXNzPEU+IGNsYXNzT2ZFLCBSdW50
aW1lRXhjZXB0aW9uIGUpIHRocm93cyBFIHtcbiIgKworCQkJIgkJVGhyb3dhYmxlIGNhdXNlID0g
ZS5nZXRDYXVzZSgpO1xuIiArCisJCQkiCQlpZihjbGFzc09mRS5pc0luc3RhbmNlKGNhdXNlKSA9
PSBmYWxzZSkge1xuIiArCisJCQkiCQkJdGhyb3cgZTtcbiIgKworCQkJIgkJfVxuIiArCisJCQki
CQl0aHJvdyBjbGFzc09mRS5jYXN0KGNhdXNlKTtcbiIgKworCQkJIn1cbiIgKworCQkJIn1cbiIK
Kwl9LAorCSIiKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00MzI2MDUsIFsxLjhdIEluY29ycmVjdCBlcnJvciAiVGhlIHR5cGUgQXJyYXlMaXN0
PFQ+IGRvZXMgbm90IGRlZmluZSBhZGQoQXJyYXlMaXN0PFQ+LCBPYmplY3QpIHRoYXQgaXMgYXBw
bGljYWJsZSBoZXJlIgorcHVibGljIHZvaWQgdGVzdHJlZHVjZWQ0MzI2MDUoKSB7CisJdGhpcy5y
dW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBv
cnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1h
cDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJ
CSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkiICAgIHN0YXRpYyA8VCwgSywgTCwgTT4gdm9pZCBmb28oKSB7XG4iICsKKwkJCSIJQ29s
bGVjdG9yPFQsID8sIE0+IGNhdCA9IFxuIiArCisJCQkiICAgICAgICAgICAgQ29sbGVjdG9ycy5j
b2xsZWN0aW5nQW5kVGhlbihcbiIgKworCQkJIgkJQ29sbGVjdG9ycy5ncm91cGluZ0J5KChGdW5j
dGlvbjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPikgbnVsbCwgXG4iICsKKwkJCSIJCQkJSGFzaE1h
cDxLLCBMPjo6bmV3LCBcbiIgKworCQkJIgkJCQkoQ29sbGVjdG9yPFQsIEFycmF5TGlzdDxUPiwg
TD4pIG51bGwpLCBcbiIgKworCQkJIgkJCQkoRnVuY3Rpb248SGFzaE1hcDxLLCBMPiwgTT4pIG51
bGwpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwl9LAorCSIiKTsKK30KIHB1YmxpYyBz
dGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3Qu
Y2xhc3M7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBlYmQ4MDQ5Li4w
YzdlMzUxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTkxMTgsMTEgKzkx
MTgsMTIgQEAKIAkJCSIJfQlcbiIgKwogCQkJIn1cbiIKIAkJfSwKKwkJLy8gTm90ZTogbmV3IG1l
c3NhZ2UgYWxpZ25zIGJldHRlciB3aXRoIGphdmFjIDh1MjAuCiAJCSItLS0tLS0tLS0tXG4iICsg
CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKIAkJIglGdW5jdGlvbjxD
TDxJbnRlZ2VyPiwgU3RyaW5nPiB2NSA9IENMOjptZXRob2QxO1xuIiArIAogCQkiCSAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5cbiIgKyAKLQkJIlRoZSB0eXBl
IENMIGRvZXMgbm90IGRlZmluZSBtZXRob2QxKENMPEludGVnZXI+KSB0aGF0IGlzIGFwcGxpY2Fi
bGUgaGVyZVxuIiArIAorCQkiQ2Fubm90IG1ha2UgYSBzdGF0aWMgcmVmZXJlbmNlIHRvIHRoZSBu
b24tc3RhdGljIG1ldGhvZCBtZXRob2QxKENMKSBmcm9tIHRoZSB0eXBlIENMXG4iICsgCiAJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAK
IAkJIgl2NSA9IHQgLT4gdC5tZXRob2QxKCk7CVxuIiArIApAQCAtOTY0MSw3ICs5NjQyLDcgQEAK
IAkiLS0tLS0tLS0tLVxuIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9NDQyNDQ2LCBbMS44XVtjb21waWxlcl0gY29tcGlsZXIgdW5hYmxlIHRv
IGluZmVyIGxhbWJkYSdzIGdlbmVyaWMgYXJndW1lbnQgdHlwZXMKLXB1YmxpYyB2b2lkIF90ZXN0
NDQyNDQ2KCkgeworcHVibGljIHZvaWQgdGVzdDQ0MjQ0NigpIHsKIAl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKIAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmphdmEiLCAKQEAgLTk3MDcsNiArOTcwOCw0
MiBAQAogCX0sCiAJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQzNzQ0NCNjMzYsICBOUEUgaW4gYnJva2VuIGNvZGUKK3B1YmxpYyB2b2lk
IHRlc3Q0Mzc0NDQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7XG4iICsKKwkJ
CSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVh
bS5Db2xsZWN0b3JzO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1Ymxp
YyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJTGlzdDxQZXJz
b24+IHJvc3RlciA9IG5ldyBBcnJheUxpc3Q8PigpO1xuIiArCisJCQkiICAgICAgICBNYXA8U3Ry
aW5nLCBQZXJzb24+IG1hcCA9IFxuIiArCisJCQkiICAgICAgICAgICAgcm9zdGVyXG4iICsKKwkJ
CSIgICAgICAgICAgICAgICAgLnN0cmVhbSgpXG4iICsKKwkJCSIgICAgICAgICAgICAgICAgLmNv
bGxlY3QoXG4iICsKKwkJCSIgICAgICAgICAgICAgICAgICAgIENvbGxlY3RvcnMudG9NYXAoXG4i
ICsKKwkJCSIgICAgICAgICAgICAgICAgICAgICAgICBQZXJzb246OmdldExhc3QsXG4iICsKKwkJ
CSIgICAgICAgICAgICAgICAgICAgICAgICBGdW5jdGlvbi5pZGVudGl0eSgpIFxuIiArCisJCQki
ICAgICAgICAgICAgICAgICAgICApKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iICsKKwkJ
CSJjbGFzcyBQZXJzb24ge1xuIiArCisJCQkifVxuIiAKKwl9LAorCSItLS0tLS0tLS0tXG4iICsg
CisJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCSIJTWFwPFN0cmluZywg
UGVyc29uPiBtYXAgPSBcbiIgKyAKKwkiCV5eXlxuIiArIAorCSJNYXAgY2Fubm90IGJlIHJlc29s
dmVkIHRvIGEgdHlwZVxuIiArIAorCSItLS0tLS0tLS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkiCUZ1bmN0aW9uLmlkZW50aXR5KCkgXG4iICsgCisJ
IgleXl5eXl5eXlxuIiArIAorCSJGdW5jdGlvbiBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAKKwki
LS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAly
ZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0
LmphdmEKaW5kZXggNmIyYmYxMy4uMzYxNDBlMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNjc0
MCw2ICs2NzQwLDcgQEAKIAkJCSJ9XG4iICsKIAkJCSJ9XG4iLAogCQl9LAorCQkvLyBOb3RlOiB3
ZSB1c2VkIHRvIGVtaXQgYSBkdXBsaWNhdGUgbWVzc2FnZSBvZiAyLiBGaXhlZC4KIAkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkp
XG4iICsgCiAJCSIJZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQo
cCksIHAtPmlkZUZpbGVzLmdldChwKSkpO1xuIiArIApAQCAtNjc0NywxMSArNjc0OCw2IEBACiAJ
CSJUaGUgY29uc3RydWN0b3IgUGFpcjxQYXRoLE9iamVjdD4oUGF0aCwgKDxubyB0eXBlPiBwKSAt
PiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJP
UiBpbiBCdWlsZElkZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAotCQkiCWZpbHRlcjIubWFw
KHAgLT4gbmV3IFBhaXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkp
KTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhp
cyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAotCQkiLS0t
LS0tLS0tLVxuIiArIAotCQkiMy4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUg
OSlcbiIgKyAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdl
dChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAog
CQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25h
bCBpbnRlcmZhY2VcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXggZTdiNTM0YS4uNzlmZDNiNyAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEK
QEAgLTYwLDEwICs2MCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuUGFja2FnZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VC
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
U2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5T
b3VyY2VUeXBlQmluZGluZzsKQEAgLTY1NSwxMjAgKzY1Miw0MSBAQAogCS8qKgogCSAqIEFmdGVy
IG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5
IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRo
ZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGlt
cHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYg
dGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1
cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVu
ZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGlu
IGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9j
YXRpb24gdGhlIG91dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBA
cGFyYW0gbWV0aG9kQmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2li
bHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0
aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBp
bnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIG1ldGhvZCBsb29r
dXAuCi0JICogQHBhcmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFy
YW0gbWV0aG9kIHRoZSBtZXRob2QgcHJvZHVjZWQgYnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZp
bmcgdHlwZSBpbmZlcmVuY2UpLgorCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVu
dCB0eXBlcyBhcyBjb2xsZWN0ZWQgZnJvbSBmaXJzdCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24g
YXJndW1lbnRzIGFuZCBhcyB1c2VkIGZvciB0aGUgbWV0aG9kIGxvb2t1cC4KKwkgKiBAcGFyYW0g
c2NvcGUgc2NvcGUgZm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJl
c29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhv
ZEJpbmRpbmcgbWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29w
ZSBzY29wZSkgewotCQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1Ymxp
YyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBp
bnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5
cGVzLCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9k
ID0gbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQ
cm9ibGVtTWV0aG9kQmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xv
c2VzdE1hdGNoIDogbnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0
dXJuOwotCQlpbnQgcHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRl
TWV0aG9kOwotCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5k
aWRhdGVNZXRob2QgPSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcg
aW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1l
dGhvZEJpbmRpbmcucHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0J
CQljYW5kaWRhdGVNZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0g
bnVsbCkgewotCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFy
YXJncygpOwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2Fu
ZGlkYXRlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJ
CQlpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRN
ZXRob2RCaW5kaW5nKSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkg
ewotCQkJCQlpZiAoaW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZ
UEVfSU5GRVJSRUQpIHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2Yg
VFlQRV9JTkZFUlJFRAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJ
CQkvLyAtIGFib3ZlIHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJ
CX0KLQkJCQkJdmFyaWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlm
IG5vIGluZkN0eCBpcyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBp
cyBhIHZhcmFyZ3MgaW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24g
aW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25F
eHByZXNzaW9uKWludm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQot
CQkJCQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJp
bmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHBy
ZXNzaW9uW10gaW5uZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhw
cmVzc2lvbiBbXSBhcmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0g
bnVsbCAmJiB2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMu
bGVuZ3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGlu
ZyBsYXN0UGFyYW0gPSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJl
c3Npb24gbGFzdEFyZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChs
YXN0QXJnLmlzQ29tcGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJs
ZUFyaXR5ID0gZmFsc2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9
IGFyZ3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkr
KykgewotCQkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJp
bmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1l
dGVyVHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwg
dmFyaWFibGVBcml0eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVt
UmVhc29uICE9IFByb2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3Qg
bXVjaCB3ZSBjYW4gZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBw
ZW5zIGFmdGVyIHNvbWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNl
b2YgTGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNF
cnJvcnMoKSkKLQkJCQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhh
cyBlcnJvcnMKLQotCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJ
CQkJSW52b2NhdGlvbiBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJ
CQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1l
dGVyVHlwZSwgdHJ1ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVy
Q29udGV4dCA9IGlubmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6
ZWRNZXRob2QpOwotCQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYg
KCFpbm5lckNvbnRleHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFy
Z3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmlu
ZGluZyBpbXByb3ZlZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShp
bm5lckludm9jYXRpb24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJv
dmVkQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVw
b3J0SW52YWxpZEludm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwot
CQkJCQkJCQl9Ci0JCQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1w
cm92ZWRCaW5kaW5nLCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHBy
ZXNzaW9uQXJndW1lbnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7
Ci0JCQkJCQkJCX0KLQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVk
IDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJD
b250ZXh0LnJlYmluZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2Nh
dGlvbik7Ci0JCQkJCQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0
aGVzZSBoYXZlIGJlZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJ
CQl9Ci0JCQkJfQotCi0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJ
CQkvLyBwb2x5IGV4cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0
byBiZSByZXNvbHZlZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3Rl
cENvbXBsZXRlZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJ
CXVwZGF0ZWRBcmd1bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMg
Y2FzZSBhcmd1bWVudCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4
LmFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFy
Z3VtZW50VHlwZSA9IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0
ZXJUeXBlLCBzY29wZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNv
bnMuTm9FcnJvciAvLyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRU
eXBlICE9IG51bGwJCQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJ
CQkJCSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykp
Ci0JCQkJCXsKLQkJCQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9z
ZWQgdG8gYmUgb3duZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIg
dG8gZ2l2ZSBiZXR0ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlh
cmd1bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJ
Ym9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlm
aW5hbCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVy
czsKKwkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJ
CWlmICh2YXJpYWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVu
Z3RoID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxl
bmd0aC0xXS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0s
IHNjb3BlKSkgeworCQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZv
Y2F0aW9uLmlubmVyVXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RC
aW5kaW5nIG1ldGhvZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJn
dW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9j
YXRpb24uYXJndW1lbnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlh
cmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0J
CQlmb3IgKGludCBpID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFy
Z3VtZW50VHlwZXNbaV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVu
Z3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVu
dHNbaV07CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4
LmdldFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJh
bWV0ZXJUeXBlID09IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3
aXRob3V0IGEgdGFyZ2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSBy
ZXNvbHZlIGVycm9yCisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJ
CQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRp
bmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJ
CQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBM
RS5yZXNvbHZlVHlwZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUg
ZG9lcyBub3QgZGV0ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxh
bWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJ
CQlpZiAoIWxhbWJkYS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBs
YW1iZGEuaGFzRXJyb3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0
ZWRBcmd1bWVudFR5cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBC
aW5kaW5nLlBPTFlfVFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVu
dFR5cGU7CisJCQl9CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9j
YXRpb24sIG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJs
aWMgc3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90
YXRpb25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAwMGE0NzEyLi4yOTNiYTRlIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03NywzMCArNzcsMTAgQEAKIAogCSAvLyBob2xk
IG9uIHRvIHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVu
Y2UgdW50aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUp
OgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQTUIsSUMxOD4qLyBpbmZlcmVuY2VDb250
ZXh0czsKLQlwcm90ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxw
ZXI7CisJcHJpdmF0ZSBib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKIAlwdWJsaWMgVHlwZUJpbmRp
bmdbXSBhcmd1bWVudFR5cGVzID0gQmluZGluZy5OT19QQVJBTUVURVJTOwotCXB1YmxpYyBib29s
ZWFuIGFyZ3VtZW50c0hhdmVFcnJvcnM7Ci0KLQkvKiogUmVjb3JkIHRvIGtlZXAgc3RhdGUgYmV0
d2VlbiBkaWZmZXJlbnQgcGFydHMgb2YgcmVzb2x1dGlvbi4gKi8KLQlSZXNvbHV0aW9uU3RhdGUg
c3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlOwotCWNsYXNzIFJlc29sdXRpb25TdGF0ZSB7Ci0JCUJs
b2NrU2NvcGUgc2NvcGU7Ci0JCWJvb2xlYW4gaXNEaWFtb25kOwotCQlib29sZWFuIGRpYW1vbmRO
ZWVkc0RlZmVycmluZzsKLQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7Ci0JCWJvb2xlYW4gY2Fu
bm90SW5mZXJEaWFtb25kOyAvLyByZXF1ZXN0IHRoZSBhbiBlcnJvciBiZSByZXBvcnRlZCBpbiBk
dWUgdGltZQotCQlib29sZWFuIGhhc1JlcG9ydGVkRXJyb3I7Ci0KLQkJUmVzb2x1dGlvblN0YXRl
KEJsb2NrU2NvcGUgc2NvcGUsIGJvb2xlYW4gaXNEaWFtb25kLCBib29sZWFuIGRpYW1vbk5lZWRz
RGVmZXJyaW5nLAotCQkJCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0LCBUeXBlQmluZGluZ1tdIGFy
Z3VtZW50VHlwZXMpCi0JCXsKLQkJCXRoaXMuc2NvcGUgPSBzY29wZTsKLQkJCXRoaXMuaXNEaWFt
b25kID0gaXNEaWFtb25kOwotCQkJdGhpcy5kaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBkaWFtb25O
ZWVkc0RlZmVycmluZzsKLQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gYXJnc0NvbnRhaW5DYXN0
OwotCQl9Ci0JfQotCisJcHVibGljIGJvb2xlYW4gYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNl
OworCQogcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3Bl
LCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAkvLyBjaGVj
ayBjYXB0dXJlZCB2YXJpYWJsZXMgYXJlIGluaXRpYWxpemVkIGluIGN1cnJlbnQgY29udGV4dCAo
MjYxMzQpCiAJY2hlY2tDYXB0dXJlZExvY2FsSW5pdGlhbGl6YXRpb25JZk5lY2Vzc2FyeSgoUmVm
ZXJlbmNlQmluZGluZyl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuZXJhc3VyZSgpLCBjdXJy
ZW50U2NvcGUsIGZsb3dJbmZvKTsKQEAgLTM0MSw3ICszMjEsNiBAQAogCS8vIFByb3BhZ2F0ZSB0
aGUgdHlwZSBjaGVja2luZyB0byB0aGUgYXJndW1lbnRzLCBhbmQgY2hlY2sgaWYgdGhlIGNvbnN0
cnVjdG9yIGlzIGRlZmluZWQuCiAJZmluYWwgYm9vbGVhbiBpc0RpYW1vbmQgPSB0aGlzLnR5cGUg
IT0gbnVsbCAmJiAodGhpcy50eXBlLmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMDsKIAlm
aW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRp
b25zKCk7Ci0JYm9vbGVhbiBkaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBmYWxzZTsKIAlsb25nIHNv
dXJjZUxldmVsID0gY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsOwogCWlmICh0aGlzLmNvbnN0
YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkgewogCQl0aGlzLmNvbnN0YW50ID0gQ29uc3Rh
bnQuTm90QUNvbnN0YW50OwpAQCAtMzUwLDE3OCArMzI5LDE1NiBAQAogCQkJdGhpcy5yZXNvbHZl
ZFR5cGUgPSBzY29wZS5lbmNsb3NpbmdSZWNlaXZlclR5cGUoKTsKIAkJfSBlbHNlIHsKIAkJCXRo
aXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNo
ZWNrIGJvdW5kcyovKTsKLQkJCWlmIChpc0RpYW1vbmQgJiYgdGhpcy50eXBlRXhwZWN0ZWQgPT0g
bnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCAmJiBz
b3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKHRoaXMu
cmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmco
KSkKLQkJCQkJZGlhbW9uZE5lZWRzRGVmZXJyaW5nID0gdHJ1ZTsKLQkJCX0KIAkJfQotCX0gZWxz
ZSB7Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZTsKLQl9Ci0K
LQlpZiAodGhpcy50eXBlICE9IG51bGwpIHsKLQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90YXRpb24o
c2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKLQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlv
bjogewotCQkJaWYgKHRoaXMudHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRU
eXBlUmVmZXJlbmNlKSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0cmluZz4uWTxJbnRlZ2VyPigpCi0J
CQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKXRoaXMu
cmVzb2x2ZWRUeXBlOwotCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVu
dFR5cGU7Ci0JCQkJZG8gewotCQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dlcmluZyB0cnVlIGZv
ciB0b3BsZXZlbCB0eXBlcwotCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNz
RmlsZUNvbnN0YW50cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb247Ci0JCQkJCWlmIChjdXJyZW50VHlwZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQ
YXJhbWV0ZXJpemVkQWxsb2NhdGlvbjsKLQkJCQl9IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJy
ZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVsbCk7Ci0JCQkJUGFyYW1ldGVyaXplZFF1YWxp
ZmllZFR5cGVSZWZlcmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVy
ZW5jZSkgdGhpcy50eXBlOwotCQkJCWZvciAoaW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVu
Z3RoIC0gMjsgaSA+PSAwOyBpLS0pIHsKLQkJCQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAh
PSBudWxsKSB7Ci0JCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVhbGlmaWVk
UGFyYW1ldGVyaXplZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUp
OwotCQkJCQkJYnJlYWs7CisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkgeworCQkJY2hlY2tJbGxl
Z2FsTnVsbEFubm90YXRpb24oc2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCWNoZWNrUGFy
YW1ldGVyaXplZEFsbG9jYXRpb246IHsKKwkJCQlpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3Ry
aW5nPi5ZPEludGVnZXI+KCkKKwkJCQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChS
ZWZlcmVuY2VCaW5kaW5nKXRoaXMucmVzb2x2ZWRUeXBlOworCQkJCQlpZiAoY3VycmVudFR5cGUg
PT0gbnVsbCkgcmV0dXJuIGN1cnJlbnRUeXBlOworCQkJCQlkbyB7CisJCQkJCQkvLyBpc1N0YXRp
YygpIGlzIGFuc3dlcmluZyB0cnVlIGZvciB0b3BsZXZlbCB0eXBlcworCQkJCQkJaWYgKChjdXJy
ZW50VHlwZS5tb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBi
cmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQkJaWYgKGN1cnJlbnRUeXBl
LmlzUmF3VHlwZSgpKSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQl9
IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVs
bCk7CisJCQkJCVBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFy
YW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZlcmVuY2UpIHRoaXMudHlwZTsKKwkJCQkJZm9yIChp
bnQgaSA9IHFSZWYudHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgeworCQkJ
CQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAhPSBudWxsKSB7CisJCQkJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuaWxsZWdhbFF1YWxpZmllZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlv
bih0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCQkJCQlicmVhazsKKwkJCQkJCX0K
IAkJCQkJfQogCQkJCX0KIAkJCX0KIAkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFm
dGVyIGFyZ3MgYXJlIHJlc29sdmVkCisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJn
cyBhcmUgcmVzb2x2ZWQKIAotCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmlj
IGNvbnN0cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0J
CWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50
c0hhdmVFcnJvcnMgPSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0J
CXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBl
UmVmZXJlbmNlID0gdGhpcy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNU
eXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAv
KiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsKLQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJv
cnMgPSB0cnVlOwotCQkJfQotCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBl
UmVmZXJlbmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwotCQkJfQotCQl9Ci0J
CWlmIChpc0RpYW1vbmQpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RX
aXRoRXhwbGljaXRUeXBlQXJndW1lbnRzKHRoaXMudHlwZUFyZ3VtZW50cyk7Ci0JCQlyZXR1cm4g
bnVsbDsKLQkJfQotCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhp
cy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1l
bnRzCi0JCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8
IG1heDsgaSsrKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsK
KwkJLy8gcmVzb2x2ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2Fs
bCkKKwkJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0g
dGhpcy50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9
IHNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKKwkJCXRoaXMuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkg
PSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2Ug
PSB0aGlzLnR5cGVBcmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1l
bnRzW2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBi
b3VuZHMqLykpID09IG51bGwpIHsKKwkJCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1
ZTsKKwkJCQl9CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJl
bmNlIGluc3RhbmNlb2YgV2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
aWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKIAkJCQl9CiAJCQl9Ci0JCQly
ZXR1cm4gbnVsbDsKKwkJCWlmIChpc0RpYW1vbmQpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5kaWFtb25kTm90V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVu
dHMpOworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVy
cm9ycykgeworCQkJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVt
cHQgdG8gcmVzb2x2ZSBhcmd1bWVudHMKKwkJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMu
YXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQl0aGlzLmFyZ3VtZW50c1tp
XS5yZXNvbHZlVHlwZShzY29wZSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJ
CQl9CiAJCX0KLQl9CiAKLQkvLyBidWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKLQlib29s
ZWFuIGFyZ3NDb250YWluQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxs
KSB7Ci0JCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOwotCQlpbnQgbGVuZ3RoID0g
dGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJ
RXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3VtZW50
IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFyZ3ND
b250YWluQ2FzdCA9IHRydWU7CisJCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBlcwor
CQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJy
b3JzID0gZmFsc2U7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJ
dGhpcy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRo
aXMuYXJndW1lbnRzW2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNz
aW9uKSB7CisJCQkJCWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNr
OyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1
ZTsKKwkJCQl9CisJCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9D
T05URVhUKTsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwp
IAorCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFy
Z3VtZW50IHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5M
Uy0xJAorCQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5
cGUoc2NvcGUpKSA9PSBudWxsKSB7CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRy
dWU7CisJCQkJfQogCQkJfQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NB
VElPTl9DT05URVhUKTsKLQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0g
bnVsbCkgCi0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KCJBcmd1bWVudCB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5P
Ti1OTFMtMSQKLQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2
ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0g
dHJ1ZTsKLQkJCX0KLQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRL
MV84ICYmIChhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0YW5j
ZW9mIEludm9jYXRpb24pICYmICgoSW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVuY2Uo
KSkpKSB7Ci0JCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJ
dGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwot
CQkJfQotCQl9Ci0JCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJCS8qIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3Vt
ZW50cyBoYXZlIGVycm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KKwkJ
CWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKKwkJCQkvKiBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2ZSBl
cnJvcnMsIGNvbXBsZXRlbHkgYmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCiAJCQkgICBObyBtZWFu
aW5nZnVsIHR5cGUgcmVzb2x1dGlvbiBpcyBwb3NzaWJsZSBzaW5jZSBpbmZlcmVuY2Ugb2YgdGhl
IGVsaWRlZCB0eXBlcyBpcyBmdWxseSB0aWVkIHRvIGFyZ3VtZW50IHR5cGVzLiBEbwogCQkJICAg
bm90IHJldHVybiB0aGUgcGFydGlhbGx5IHJlc29sdmVkIHR5cGUuCi0JCQkgKi8KLQkJCWlmIChp
c0RpYW1vbmQpIHsKLQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29va2Vk
IHRoaXMucmVzb2x2ZWRUeXBlCi0JCQl9Ci0JCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFu
Y2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7Ci0JCQkJLy8gcmVjb3JkIGEgYmVzdCBndWVzcywgZm9y
IGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBjb25zdHJ1Y3RvciBtYXRjaAot
CQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwot
CQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewotCQkJCQlwc2V1ZG9BcmdzW2ld
ID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhp
cy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxs
IHR5cGUKKwkJCQkgKi8KKwkJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJCXJldHVybiBudWxsOyAv
LyBub3QgdGhlIHBhcnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQl9Ci0JCQkJ
dGhpcy5iaW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5y
ZXNvbHZlZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2Up
OwotCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1N
ZXRob2RCaW5kaW5nKXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQg
dGhlIGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFi
b3V0IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwp
IHsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2gg
PSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNs
b3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0J
CQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAo
Y2xvc2VzdE1hdGNoT3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29w
ZS5pc0RlZmluZWRJbk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBp
Z25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2Vs
ZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5t
b2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQlp
ZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJ
CS8vIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgY29uc3RydWN0b3IgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9Bcmdz
ID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0t
aSA+PSAwOykgeworCQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9
PSBudWxsID8gVHlwZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVw
bGFjZSBhcmdzIHdpdGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJCX0KKwkJCQkJdGhpcy5i
aW5kaW5nID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZl
ZFR5cGUsIFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOworCQkJ
CQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhv
ZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhl
IGNsb3Nlc3QgbWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0
IHBvc3NpYmxlIG1ldGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7
CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmlu
ZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBz
aG91bGRuJ3QgcmV0dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhl
ciBjb252ZXJ0IGl0IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNo
ID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChj
bG9zZXN0TWF0Y2gub3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0K
KwkJCQkJCQl0aGlzLmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGlu
ZyBjbG9zZXN0TWF0Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJ
CWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYg
IXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJ
CQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRl
IGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3Jp
Z2luYWwubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7
CisJCQkJCQkJfQogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZTsKIAkJCX0KKwkJfQorCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAh
dGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG51bGw7CisJ
CX0KKworCQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0gY29u
c3RhbnQgaW5pdHMKKwkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlw
ZS5jYW5CZUluc3RhbnRpYXRlZCgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5u
b3RJbnN0YW50aWF0ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKIAkJCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKIAkJfQotCX0KLQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVs
bCB8fCAhdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlyZXR1cm4gbnVs
bDsKLQl9Ci0KLQkvLyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0g
Y29uc3RhbnQgaW5pdHMKLQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRU
eXBlLmNhbkJlSW5zdGFudGlhdGVkKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fu
bm90SW5zdGFudGlhdGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKLQl9Ci0JUmVzb2x1dGlvblN0YXRlIHN0YXRlID0gbmV3IFJlc29s
dXRpb25TdGF0ZShzY29wZSwgaXNEaWFtb25kLCBkaWFtb25kTmVlZHNEZWZlcnJpbmcsIGFyZ3ND
b250YWluQ2FzdCwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQlpZiAoZGlhbW9uZE5lZWRzRGVmZXJy
aW5nKSB7Ci0JCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlID0gc3RhdGU7IC8vIHJlc29s
dmluZyB0byBiZSBjb250aW51ZWQgbGF0ZXIgKHZpYSBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUpKS4KLQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7Ci0JfQotCi0JaWYg
KCFyZXNvbHZlUGFydDIoc3RhdGUpKQotCQlyZXR1cm4gbnVsbDsKLQlyZXR1cm4gcmVzb2x2ZVBh
cnQzKHN0YXRlKTsKLX0KLQotLyoqIFNlY29uZCBwYXJ0IG9mIHJlc29sdmluZyB0aGF0IG1heSBo
YXBwZW4gbXVsdGlwbGUgdGltZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29sdXRpb24uICovCi1ib29s
ZWFuIHJlc29sdmVQYXJ0MihSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQkvLyBUT0RPOiBhbGwg
aW5mb3JtYXRpb24gcGVyc2lzdGVkIGR1cmluZyB0aGlzIG1ldGhvZCBtYXkgbmVlZCB0byBiZSBz
dG9yZWQgcGVyIHRhcmdldFR5cGU/Ci0JaWYgKHN0YXRlLmlzRGlhbW9uZCkgewotCQlSZWZlcmVu
Y2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMu
cmVzb2x2ZWRUeXBlKS5nZW5lcmljVHlwZSgpOwotCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5
cGVzID0gaW5mZXJFbGlkZWRUeXBlcygoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJl
c29sdmVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHN0YXRlLnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgewot
CQkJaWYgKCFzdGF0ZS5kaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlzdGF0ZS5zY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCXN0YXRl
Lmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsK
LQkJCX0gZWxzZSB7Ci0JCQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gdHJ1ZTsgLy8gZGVm
ZXIgcmVwb3J0aW5nCisJCWlmIChpc0RpYW1vbmQpIHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2Vu
ZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUp
LmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXpl
ZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVy
aWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2lu
Z1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRU
eXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgp
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51
bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVz
KHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CiAJCQl9Ci0JCQly
ZXR1cm4gZmFsc2U7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gc2NvcGUu
ZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJy
ZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5l
bmNsb3NpbmdUeXBlKCkpOworCQkJaWYgKHRoaXMudHlwZUV4cGVjdGVkID09IG51bGwgJiYgY29t
cGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYg
dGhpcy5leHByZXNzaW9uQ29udGV4dC5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJc2NvcGUu
c2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsID0gdHJ1ZTsKKwkJCQl0cnkgeworCQkJCQl0aGlz
LmJpbmRpbmcgPSBzY29wZS5nZXRDb25zdHJ1Y3RvcihhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1
bWVudFR5cGVzLCB0aGlzKTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlzY29wZS5zaG91bGRDb25z
dWx0U2hhZG93T3JpZ2luYWwgPSBmYWxzZTsKKwkJCQl9CisJCQkJcmV0dXJuIG5ldyBQb2x5VHlw
ZUJpbmRpbmcodGhpcyk7CisJCQl9CisJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5y
ZXNvbHZlZFR5cGUgPSBhbGxvY2F0aW9uVHlwZTsgCiAJCX0KLQkJdGhpcy5yZXNvbHZlZFR5cGUg
PSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlID0gc3RhdGUuc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5mZXJyZWRUeXBlcywgKChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlKS5lbmNsb3NpbmdUeXBlKCkpOwot
CQlzdGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQgPSBmYWxzZTsKLSAJfQotCVJlZmVyZW5jZUJpbmRp
bmcgcmVjZWl2ZXJUeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwot
CXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc3RhdGUuc2NvcGUsIHRoaXMs
IHJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQlyZXR1cm4gdHJ1ZTsKLX0KLQot
LyoqIEZpbmFsIHBhcnQgb2YgcmVzb2x2aW5nIChvbmNlKTogY2hlY2sgYW5kIHJlcG9ydCB2YXJp
b3VzIGVycm9yIGNvbmRpdGlvbnMuICovCi1UeXBlQmluZGluZyByZXNvbHZlUGFydDMoUmVzb2x1
dGlvblN0YXRlIHN0YXRlKSB7Ci0JaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9
IG51bGwgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvcikK
LQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwotCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0
YXRlID0gbnVsbDsKLQlpZiAoc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kKSB7Ci0JCXN0YXRlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJfSBlbHNlIHsKKwkJaWYgKGlzRGlhbW9u
ZCkgeworCQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9ICgoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZ2VuZXJpY1R5cGUoKTsKKwkJCVBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCku
Y3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGdlbmVyaWNUeXBlLnR5cGVWYXJp
YWJsZXMoKSwgZ2VuZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKKwkJCVR5cGVCaW5kaW5nIFtd
IGluZmVycmVkVHlwZXMgPSBpbmZlckVsaWRlZFR5cGVzKHBhcmFtZXRlcml6ZWRUeXBlLCB0aGlz
LnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBlcywgc2NvcGUp
OworCQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmNhbm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7CisJCQkJcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlID0gbnVsbDsKKwkJCX0KKwkJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy50eXBl
LnJlc29sdmVkVHlwZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5
cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
KSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKKwkJfQogCX0KKwkKIAlSZWZl
cmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVz
b2x2ZWRUeXBlOworCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUs
IHRoaXMsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOworCQkKIAlpZiAoIXRo
aXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MgPT0gbnVsbCkgewogCQkJdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID0gYWxs
b2NhdGlvblR5cGU7CkBAIC01MjksMzAgKzQ4NiwyOSBAQAogCQlpZiAodGhpcy50eXBlICE9IG51
bGwgJiYgIXRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJcmV0
dXJuIG51bGw7CiAJCX0KLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENv
bnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7CisJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwogCQlyZXR1cm4gdGhpcy5y
ZXNvbHZlZFR5cGU7CiAJfQogCWlmICgodGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkhh
c01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1p
c3NpbmdUeXBlSW5Db25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOworCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5taXNzaW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5n
KTsKIAl9Ci0JaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHN0YXRlLnNj
b3BlLCB0cnVlKSkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kZXByZWNhdGVk
TWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CisJaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0
aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVlKSkgeworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5k
ZXByZWNhdGVkTWV0aG9kKHRoaXMuYmluZGluZywgdGhpcyk7CiAJfQotCWlmIChjaGVja0ludm9j
YXRpb25Bcmd1bWVudHMoc3RhdGUuc2NvcGUsIG51bGwsIGFsbG9jYXRpb25UeXBlLCB0aGlzLmJp
bmRpbmcsIHRoaXMuYXJndW1lbnRzLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHN0YXRlLmFyZ3NDb250
YWluQ2FzdCwgdGhpcykpIHsKKwlpZiAoY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKHNjb3BlLCBu
dWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5kaW5nLCB0aGlzLmFyZ3VtZW50cywgdGhpcy5h
cmd1bWVudFR5cGVzLCB0aGlzLmFyZ3NDb250YWluQ2FzdCwgdGhpcykpIHsKIAkJdGhpcy5iaXRz
IHw9IEFTVE5vZGUuVW5jaGVja2VkOwogCX0KIAlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51
bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTKSB7Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVubmVj
ZXNzYXJ5VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9jYXRpb24odGhpcy5iaW5kaW5nLCB0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzLCB0aGlzLnR5cGVBcmd1bWVudHMpOworCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0aW9u
KHRoaXMuYmluZGluZywgdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJndW1l
bnRzKTsKIAl9Ci0JaWYgKCFzdGF0ZS5pc0RpYW1vbmQgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNQ
YXJhbWV0ZXJpemVkVHlwZVdpdGhBY3R1YWxBcmd1bWVudHMoKSkgewotIAkJY2hlY2tUeXBlQXJn
dW1lbnRSZWR1bmRhbmN5KChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRU
eXBlLCB0aGlzLnJlc29sdmVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHRoaXMuYXJndW1lbnRUeXBl
cywgc3RhdGUuc2NvcGUpOworCWlmICghaXNEaWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlz
UGFyYW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRzKCkpIHsKKyAJCWNoZWNrVHlwZUFy
Z3VtZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVk
VHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlw
ZXMsIHNjb3BlKTsKICAJfQotCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzdGF0
ZS5zY29wZS5jb21waWxlck9wdGlvbnMoKTsKIAlpZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3Rh
dGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCAmJiAodGhpcy5iaW5kaW5nLnRhZ0JpdHMgJiBU
YWdCaXRzLklzTnVsbG5lc3NLbm93bikgPT0gMCkgewotCQluZXcgSW1wbGljaXROdWxsQW5ub3Rh
dGlvblZlcmlmaWVyKHN0YXRlLnNjb3BlLmVudmlyb25tZW50KCksIGNvbXBpbGVyT3B0aW9ucy5p
bmhlcml0TnVsbEFubm90YXRpb25zKQotCQkJCS5jaGVja0ltcGxpY2l0TnVsbEFubm90YXRpb25z
KHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBzdGF0ZS5zY29wZSk7CisJ
CW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIoc2NvcGUuZW52aXJvbm1lbnQoKSwg
Y29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3RhdGlvbnMpCisJCQkJLmNoZWNrSW1wbGlj
aXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBudWxsLypzcmNNZXRob2QqLywgZmFsc2Us
IHNjb3BlKTsKIAl9Ci0JcmVjb3JkRXhjZXB0aW9uc0ZvckVuY2xvc2luZ0xhbWJkYShzdGF0ZS5z
Y29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlvbnMpOworCXJlY29yZEV4Y2VwdGlvbnNG
b3JFbmNsb3NpbmdMYW1iZGEoc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNlcHRpb25zKTsK
IAlyZXR1cm4gYWxsb2NhdGlvblR5cGU7CiB9CiAKQEAgLTU3MSw3ICs1MjcsMzMgQEAKIAl9CiB9
CiAKLXB1YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5
cGVCaW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUs
IFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBCbG9ja1Njb3BlIHNjb3BlKSB7Cisv
LyBGb3IgYWxsb2NhdGlvbiBleHByZXNzaW9ucywgYm94aW5nIGNvbXBhdGliaWxpdHkgaXMgc2Ft
ZSBhcyB2YW5pbGxhIGNvbXBhdGliaWxpdHksIHNpbmNlIGphdmEubGFuZydzIHdyYXBwZXIgdHlw
ZXMgYXJlIG5vdCBnZW5lcmljLgorcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0
aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeworCXJldHVybiBpc1BvbHlF
eHByZXNzaW9uKCkgPyBmYWxzZSA6IGlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUp
OworfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9y
cyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJCXJldHVybiBmYWxz
ZTsKKwlUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRoaXMucmVzb2x2ZWRUeXBlOworCWlm
IChpc1BvbHlFeHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRpbmcgb3JpZ2luYWxFeHBlY3RlZFR5
cGUgPSB0aGlzLnR5cGVFeHBlY3RlZDsKKwkJdHJ5IHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0g
dGFyZ2V0VHlwZTsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCQlQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9u
bWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50
eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlUeXBlQmlu
ZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlw
ZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpCisJCQkJcmV0dXJuIGZhbHNl
OworCQkJYWxsb2NhdGlvblR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRl
cml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisJCX0gZmluYWxs
eSB7CisJCQl0aGlzLnR5cGVFeHBlY3RlZCA9IG9yaWdpbmFsRXhwZWN0ZWRUeXBlOworCQl9CisJ
fQorCXJldHVybiBhbGxvY2F0aW9uVHlwZSAhPSBudWxsICYmIGFsbG9jYXRpb25UeXBlLmlzQ29t
cGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworfQorCitwdWJsaWMgVHlwZUJpbmRpbmdb
XSBpbmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlw
ZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
VHlwcywgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAkvKiBHaXZlbiB0aGUgYWxsb2NhdGlvbiB0eXBl
IGFuZCB0aGUgYXJndW1lbnRzIHRvIHRoZSBjb25zdHJ1Y3Rvciwgc2VlIGlmIHdlIGNhbiBzeW50
aGVzaXplIGEgZ2VuZXJpYyBzdGF0aWMgZmFjdG9yeQogCSAgIG1ldGhvZCB0aGF0IHdvdWxkLCBn
aXZlbiB0aGUgYXJndW1lbnQgdHlwZXMgYW5kIHRoZSBpbnZvY2F0aW9uIHNpdGUsIG1hbnVmYWN0
dXJlIGEgcGFyYW1ldGVyaXplZCBvYmplY3Qgb2YgdHlwZSBhbGxvY2F0aW9uVHlwZS4KIAkgICBJ
ZiB3ZSBhcmUgc3VjY2Vzc2Z1bCB0aGVuIGJ5IGRlc2lnbiBhbmQgY29uc3RydWN0aW9uLCB0aGUg
cGFyYW1ldGVyaXphdGlvbiBvZiB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIGZhY3RvcnkgbWV0aG9k
IGlzIGlkZW50aWNhbApAQCAtNTgxLDE3ICs1NjMsNiBAQAogCWlmIChmYWN0b3J5IGluc3RhbmNl
b2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJp
bmRpbmcoKSkgewogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZ2VuZXJpY0Zh
Y3RvcnkgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBmYWN0b3J5OwogCQl0
aGlzLmluZmVycmVkUmV0dXJuVHlwZSA9IGdlbmVyaWNGYWN0b3J5LmluZmVycmVkUmV0dXJuVHlw
ZTsKLQkJLy8gdGhpcyBpcyBvdXIgbGFzdCBjaGFuY2UgdG8gaW5zcGVjdCB0aGUgcmVzdWx0IG9m
IHRoZSBpbmZlcmVuY2UgdGhhdCBpcyBjb25uZWN0ZWQgdG8gdGhlIHRocm93LWF3YXkgZmFjdG9y
eSBiaW5kaW5nCi0JCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGdldEluZmVyZW5jZUNv
bnRleHQoZ2VuZXJpY0ZhY3RvcnkpOwotCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiBpbmZDdHgx
OC5zdGVwQ29tcGxldGVkID09IEluZmVyZW5jZUNvbnRleHQxOC5CSU5ESU5HU19VUERBVEVEKSB7
Ci0JCQkvLyByZWZyZXNoIGFyZ3VtZW50VHlwZXMgZnJvbSB1cGRhdGVkIGJpbmRpbmdzIGluIGFy
Z3VtZW50czoKLQkJCS8vICh0aGlzIHNob3VsZG4ndCBiZSBzdHJpY3RseSBuZWNlc3NhcnksIGFz
IEZ1bmN0aW9uRXhwcmVzc2lvbi5pc0NvbXBhdGlibGVXaXRoKCkgc2hvdWxkIGdpdmUgdGhlIHNh
bWUgcmVzdWx0LAotCQkJLy8gIGJ1dCBpdCdzIHByb2JhYmx5IGJlIGEgZ29vZCBpZGVhIHRvIGF2
b2lkIHRoZSBuZWNlc3NpdHkgdG8gY2FsbCBpc0NvbXBhdGlibGVXaXRoKCkgaW4gdGhlIGZpcnN0
IHBsYWNlKS4gCi0JCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwcy5sZW5ndGg7IGkr
KykgewotCQkJCWlmIChhcmd1bWVudFR5cHNbaV0gaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcp
Ci0JCQkJCWFyZ3VtZW50VHlwc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsK
LQkJCX0KLQkJfQogCQlyZXR1cm4gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpZmFjdG9yeS5y
ZXR1cm5UeXBlKS5hcmd1bWVudHM7CiAJfQogCXJldHVybiBudWxsOwpAQCAtNjk5LDEwMiArNjcw
LDIzIEBACiB9CiAKIC8vLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9k
QmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJy
b3JzLCBTY29wZSBzY29wZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAh
PSBudWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCkgewotCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0
VHlwZSk7Ci0JCWlmICghcmVzb2x2ZVBhcnQyKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRl
KSkgewotCQkJaWYgKHJlcG9ydEVycm9ycyAmJiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3Rh
dGUuaGFzUmVwb3J0ZWRFcnJvcikgewotCQkJCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25T
dGF0ZS5jYW5ub3RJbmZlckRpYW1vbmQpCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNh
bm5vdEluZmVyRWxpZGVkVHlwZXModGhpcyk7Ci0JCQkJZWxzZQotCQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9yIGlzIHVuZXhwZWN0
ZWRseSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCQl0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0gdHJ1ZTsKLQkJCX0KLQkJCXJldHVy
biBudWxsOwotCQl9Ci0JfQotCWlmIChyZXBvcnRFcnJvcnMgJiYgdGhpcy5iaW5kaW5nICE9IG51
bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCWlmICh0aGlzLmJpbmRp
bmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkKLQkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKLQkJaWYgKHRoaXMuc3Vz
cGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOwotCQkJdGhpcy5zdXNw
ZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJvciA9IHRydWU7Ci0JCX0KLQl9Citw
dWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7CiAJcmV0dXJuIHRoaXMuYmluZGluZzsKLX0KLXB1YmxpYyBUeXBlQmluZGluZyBj
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKLQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRhcmdldFR5cGU7Ci0JYm9vbGVhbiBuZWVk
c1VwZGF0ZSA9IHRoaXMuYmluZGluZyA9PSBudWxsIHx8IAkJCQkJCQkJCQkJCQkJCQkvLyBub3Qg
eWV0IHJlc29sdmVkCi0JCQkodGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBl
ICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlw
ZSkpOwkvLyBwcmV2aW91cyBhdHRlbXB0IHdhcyB3cm9uZwotCWlmIChuZWVkc1VwZGF0ZSAmJiB0
aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsICYmICF0aGlzLnN1c3BlbmRlZFJl
c29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKSB7Ci0JCS8vIEF0dGVtcHQgdG8gcmVzb2x2
ZSBoYWxmIHJlc29sdmVkIGRpYW1vbmQKLQkJcmVzb2x2ZVBhcnQyKHRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlKTsKLQl9Ci0JLy8gY29uZmVyIE1lc3NhZ2VTZW5kLmNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZSgsLCk6Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0g
Z2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMuYmlu
ZGluZyk7Ci0JCWlmIChjdHggIT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5j
ZUNvbnRleHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQl0aGlzLnR5cGVFeHBlY3RlZCA9IHRhcmdl
dFR5cGU7Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2Nh
dGlvblR5cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5i
aW5kaW5nKTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlw
ZSkpIHsKLQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1
cGRhdGVkQmluZGluZywgc2NvcGUpOwotCQkJfQotCQl9Ci0JfQotCWlmICh0aGlzLnN1c3BlbmRl
ZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKSB7Ci0JCXJldHVybiByZXNvbHZlUGFydDModGhpcy5z
dXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpOwotCX0KLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7
CiB9CiBwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAlyZXR1cm4gdGhpcy5hcmd1
bWVudHM7CiB9CiAKLXB1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcg
dXBkYXRlZEJpbmRpbmcsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQlib29sZWFuIGhhc1Vw
ZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlpZiAodGhpcy5pbmZlcmVu
Y2VDb250ZXh0cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpID09IHVwZGF0ZWRC
aW5kaW5nLm9yaWdpbmFsKCkpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVu
Y2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQodGhpcy5iaW5kaW5nKTsKLQkJ
aWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1
cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBh
biBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1
dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNvbHV0aW9u
KHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJfQotCX0KLQl0aGlzLmJpbmRpbmcgPSB1
cGRhdGVkQmluZGluZzsKLQl0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5nLmRlY2xh
cmluZ0NsYXNzOwotCXJldHVybiBoYXNVcGRhdGU7Ci19CiBwdWJsaWMgdm9pZCByZWdpc3Rlcklu
ZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwg
SW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4KSB7CiAJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4
dHMgPT0gbnVsbCkKIAkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBU
YWJsZSgpOwogCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KG1ldGhvZCwgaW5mQ3R4MTgpOwot
CU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBtZXRob2Qub3JpZ2luYWwoKTsKLQlpZiAob3JpZ2lu
YWwgaW5zdGFuY2VvZiBTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgewotCQlTeW50aGV0
aWNGYWN0b3J5TWV0aG9kQmluZGluZyBzeW50aE9yaWdpbmFsID0gKFN5bnRoZXRpY0ZhY3RvcnlN
ZXRob2RCaW5kaW5nKW9yaWdpbmFsOwotCQlQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBwYXJh
bWV0ZXJpemVkQ3RvciA9IHN5bnRoT3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1
Y3RvcihtZXRob2QudHlwZUFyZ3VtZW50cyk7Ci0JCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0
KHBhcmFtZXRlcml6ZWRDdG9yLCBpbmZDdHgxOCk7Ci0JfQotfQotcHVibGljIGJvb2xlYW4gdXNl
c0luZmVyZW5jZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBnZXRJbmZlcmVuY2VDb250ZXh0KChQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykgIT0gbnVsbDsK
IH0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0
ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0
cyA9PSBudWxsKQogCQlyZXR1cm4gbnVsbDsKIAlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkg
dGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKIH0KLXB1YmxpYyBib29sZWFuIGlu
bmVyc05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0g
bnVsbDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQl0aGlzLmlubmVySW5m
ZXJlbmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5l
ckluZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsK
LX0KLQogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiBwdWJsaWMgRXhwcmVzc2lv
bkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CiAJcmV0dXJuIHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQ7CkBAIC04MDIsNCArNjk0LDQgQEAKIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTgg
ZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJcmV0dXJuIG5ldyBJbmZlcmVu
Y2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1lbnRzLCB0aGlzKTsKIH0KLX0KK30KXCBObyBu
ZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpp
bmRleCBlZTMxMDg2Li43ZjBjY2JmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmph
dmEKQEAgLTU3LDcgKzU3LDYgQEAKIAlwcml2YXRlIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9
IGZhbHNlOwogCXByaXZhdGUgVHlwZUJpbmRpbmcgb3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGU7CiAJ
cHJpdmF0ZSBUeXBlQmluZGluZyBvcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGU7Ci0JcHJpdmF0ZSBC
bG9ja1Njb3BlIHBvbHlFeHByZXNzaW9uU2NvcGU7CiAJcHJpdmF0ZSBib29sZWFuIHVzZTE4c3Bl
Y2lmaWNzOwogCXB1YmxpYyBDb25kaXRpb25hbEV4cHJlc3Npb24oCiAJCUV4cHJlc3Npb24gY29u
ZGl0aW9uLApAQCAtNDY0LDMxICs0NjMsMjUgQEAKIAkJCWlmICh0aGlzLnZhbHVlSWZGYWxzZSBp
bnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB0aGlzLnZhbHVlSWZGYWxzZS5iaXRzIHw9IERpc2Fi
bGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgogCQkJdGhpcy5v
cmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5yZXNvbHZlVHlwZShz
Y29wZSk7CiAKLQkJCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKLQkJCQlpZiAodGhpcy5leHBl
Y3RlZFR5cGUgPT0gbnVsbCkgewotCQkJCQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUgPSBzY29w
ZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0aW5nLgot
CQkJCX0KLQkJCX0KLQogCQkJaWYgKGNvbmRpdGlvblR5cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdp
bmFsVmFsdWVJZlRydWVUeXBlID09IG51bGwgfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5
cGUgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJfSBlbHNlIHsKLQkJCS8qIE5vdCByZWFj
aGVkIGFzIG9mIG5vdyBhcyB3ZSBkb24ndCBldmFsdWF0ZSBjb25kaXRpb25hbCBleHByZXNzaW9u
cyBtdWx0aXBsZSB0aW1lcywgbGVmdCBpbiBmb3Igbm93LgotCQkJICAgSWYgaW4gZnV0dXJlLCB3
ZSBjaGFuZ2UgdGhpbmdzIHNvIGNvbnRyb2wgcmVhY2hlcyBoZXJlLCBhIHByZWNvbmRpdGlvbiBp
cyB0aGF0IHRoaXMuZXhwZWN0ZWRUeXBlIGlzCi0JCQkgICB0aGUgZmluYWwgdGFyZ2V0IHR5cGUu
Ci0JCQkqLworCiAJCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5raW5kKCkgPT0g
QmluZGluZy5QT0xZX1RZUEUpCiAJCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9IHRo
aXMudmFsdWVJZlRydWUucmVzb2x2ZVR5cGUoc2NvcGUpOwogCQkJaWYgKHRoaXMub3JpZ2luYWxW
YWx1ZUlmRmFsc2VUeXBlLmtpbmQoKSA9PSBCaW5kaW5nLlBPTFlfVFlQRSkKIAkJCQl0aGlzLm9y
aWdpbmFsVmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNlLnJlc29sdmVUeXBlKHNj
b3BlKTsKKwkJCQorCQkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPT0gbnVsbCB8
fCAhdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJCXJl
dHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CisJCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVl
SWZGYWxzZVR5cGUgPT0gbnVsbCB8fCAhdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkKKwkJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCQl9
CiAJCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKIAkJCWlmICh0aGlzLmV4cGVjdGVkVHlwZSA9
PSBudWxsKSB7Ci0JCQkJdGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlID0gc2NvcGU7IC8vIHByZXNl
cnZlIGZvciBldmVudHVhbCByZXNvbHV0aW9uL2Vycm9yIHJlcG9ydGluZy4KIAkJCQlyZXR1cm4g
bmV3IFBvbHlUeXBlQmluZGluZyh0aGlzKTsKIAkJCX0KLQkJCWNvbXB1dGVDb252ZXJzaW9ucyhz
Y29wZSwgdGhpcy5leHBlY3RlZFR5cGUpOwotCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy5leHBlY3RlZFR5cGU7CisJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBjb21wdXRl
Q29udmVyc2lvbnMoc2NvcGUsIHRoaXMuZXhwZWN0ZWRUeXBlKSA/IHRoaXMuZXhwZWN0ZWRUeXBl
IDogbnVsbDsKIAkJfQogCQlUeXBlQmluZGluZyB2YWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLm9yaWdp
bmFsVmFsdWVJZlRydWVUeXBlOwogCQlUeXBlQmluZGluZyB2YWx1ZUlmRmFsc2VUeXBlID0gdGhp
cy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGU7CkBAIC02NjEsNyArNjU0LDggQEAKIAkJcmV0dXJu
IG51bGw7CiAJfQogCi0JcHJvdGVjdGVkIHZvaWQgY29tcHV0ZUNvbnZlcnNpb25zKEJsb2NrU2Nv
cGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwlwcm90ZWN0ZWQgYm9vbGVhbiBj
b21wdXRlQ29udmVyc2lvbnMoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSkgeworCQlib29sZWFuIG9rID0gdHJ1ZTsKIAkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1
ZVR5cGUgIT0gbnVsbCAmJiB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlzVmFsaWRCaW5k
aW5nKCkpIHsKIAkJCWlmICh0aGlzLnZhbHVlSWZUcnVlLmlzQ29uc3RhbnRWYWx1ZU9mVHlwZUFz
c2lnbmFibGVUb1R5cGUodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSwgdGFyZ2V0VHlwZSkK
IAkJCQkJfHwgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRh
cmdldFR5cGUpKSB7CkBAIC02ODIsNiArNjc2LDcgQEAKIAkJCQl9CiAJCQl9IGVsc2UgewogCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnR5cGVNaXNtYXRjaEVycm9yKHRoaXMub3JpZ2luYWxW
YWx1ZUlmVHJ1ZVR5cGUsIHRhcmdldFR5cGUsIHRoaXMudmFsdWVJZlRydWUsIG51bGwpOworCQkJ
CW9rID0gZmFsc2U7CiAJCQl9CiAJCX0KIAkJaWYgKHRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VU
eXBlICE9IG51bGwgJiYgdGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUuaXNWYWxpZEJpbmRp
bmcoKSkgewpAQCAtNzA0LDggKzY5OSwxMCBAQAogCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkudHlwZU1pc21hdGNoRXJyb3IodGhpcy5vcmlnaW5hbFZhbHVl
SWZGYWxzZVR5cGUsIHRhcmdldFR5cGUsIHRoaXMudmFsdWVJZkZhbHNlLCBudWxsKTsKKwkJCQlv
ayA9IGZhbHNlOwogCQkJfQogCQl9CisJCXJldHVybiBvazsKIAl9CiAKIAlwdWJsaWMgdm9pZCBz
ZXRFeHBlY3RlZFR5cGUoVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlKSB7CkBAIC03MjAsMTYgKzcx
Nyw5IEBACiAJCXJldHVybiB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwogCX0KIAkKLQlwdWJsaWMg
VHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCS8vIGluIDEuOCBpZiB0cmVhdGVkIGFzIGEgcG9seSBl
eHByZXNzaW9uOgotCQlpZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQl0YXJnZXRUeXBlID0g
dGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5wb2x5RXhwcmVzc2lvblNjb3BlKTsKLQkJCXRoaXMu
b3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLnZhbHVlSWZUcnVlLmNoZWNrQWdhaW5zdEZp
bmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQl0aGlzLm9yaWdpbmFsVmFsdWVJ
ZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZhbHNlLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlw
ZSh0YXJnZXRUeXBlLCBzY29wZSk7Ci0JCQljb21wdXRlQ29udmVyc2lvbnModGhpcy5wb2x5RXhw
cmVzc2lvblNjb3BlLCB0YXJnZXRUeXBlKTsKLQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGFyZ2V0
VHlwZTsKLQkJfQotCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CisJcHVibGljIGJvb2xlYW4g
aXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFi
bGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXJldHVybiB0aGlzLnZhbHVlSWZUcnVlLmlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHR5cGVWYXJpYWJsZSwgbWV0aG9kKSAKKwkJCQkmJiB0
aGlzLnZhbHVlSWZGYWxzZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUs
IG1ldGhvZCk7IC8vIG5vdCBwZXJmZWN0LgogCX0KIAkKIAlwdWJsaWMgYm9vbGVhbiBpc1BlcnRp
bmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5n
IG1ldGhvZCkgewpAQCAtNzM3LDYgKzcyNywxMSBAQAogCQkJCSYmIHRoaXMudmFsdWVJZkZhbHNl
LmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KHRhcmdldFR5cGUsIG1ldGhvZCk7CiAJfQogCQor
CUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbFR5cGUoKSB7CisJCXJldHVy
biB0aGlzLnZhbHVlSWZUcnVlLmlzRnVuY3Rpb25hbFR5cGUoKSB8fCB0aGlzLnZhbHVlSWZGYWxz
ZS5pc0Z1bmN0aW9uYWxUeXBlKCk7CisJfQorCQogCXB1YmxpYyBib29sZWFuIGlzUG9seUV4cHJl
c3Npb24oKSB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gewogCQkKIAkJaWYg
KCF0aGlzLnVzZTE4c3BlY2lmaWNzKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENv
bnN0cnVjdG9yQ2FsbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5q
YXZhCmluZGV4IDI0MzQ5MTUuLmExNjEzMmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0
b3JDYWxsLmphdmEKQEAgLTU2LDcgKzU2LDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVmFyaWFibGVCaW5kaW5nOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwog
CiBwdWJsaWMgY2xhc3MgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0ZW1lbnQg
aW1wbGVtZW50cyBJbnZvY2F0aW9uIHsKIApAQCAtNzYsMTAgKzc1LDYgQEAKIAogCS8vIFRPRE8g
UmVtb3ZlIG9uY2UgRE9NUGFyc2VyIGlzIGFjdGl2YXRlZAogCXB1YmxpYyBpbnQgdHlwZUFyZ3Vt
ZW50c1NvdXJjZVN0YXJ0OwotCi0JIC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52
b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5m
ZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0ZSk6Ci0JcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJs
ZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4dDE4PiovIGluZmVyZW5jZUNvbnRleHRzOwotCXByaXZh
dGUgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7CiAKIAlwdWJsaWMg
RXhwbGljaXRDb25zdHJ1Y3RvckNhbGwoaW50IGFjY2Vzc01vZGUpIHsKIAkJdGhpcy5hY2Nlc3NN
b2RlID0gYWNjZXNzTW9kZTsKQEAgLTM5NCwxMCArMzg5LDYgQEAKIAkJCQkJaWYgKChhcmd1bWVu
dFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKSB7CiAJCQkJ
CQlhcmdIYXNFcnJvciA9IHRydWU7CiAJCQkJCX0KLQkJCQkJaWYgKHNvdXJjZUxldmVsID49IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSB8
fCAoKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbikgJiYgKChJbnZvY2F0aW9uKSBhcmd1
bWVudCkudXNlc0luZmVyZW5jZSgpKSkpIHsKLQkJCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNl
SGVscGVyID09IG51bGwpCi0JCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJ
bm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCQl9CiAJCQkJfQogCQkJCWlmIChhcmdIYXNFcnJv
cikgewogCQkJCQlpZiAocmVjZWl2ZXJUeXBlID09IG51bGwpIHsKQEAgLTQ5OCw1NiArNDg5LDIy
IEBACiAJCXZpc2l0b3IuZW5kVmlzaXQodGhpcywgc2NvcGUpOwogCX0KIAotCS8vIC0tIGludGVy
ZmFjZSBJbnZvY2F0aW9uOiAtLQotCXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0J
CWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJCWlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCkKLQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoImNvbnN0cnVjdG9y
IGlzIHVuZXhwZWN0ZWRseSB1bnJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJCWVs
c2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKLQkJfQor
CS8vIC0tIGludGVyZmFjZSBJbnZvY2F0aW9uCisJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGlu
ZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewogCQlyZXR1cm4gdGhpcy5i
aW5kaW5nOwogCX0KKworCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTgg
aW5mQ3R4MTgpIHsKKwkJLy8gTm90aGluZyB0byBkby4KKwl9CisJCisJcHVibGljIEluZmVyZW5j
ZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
IG1ldGhvZCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisJCiAJcHVibGljIEV4cHJlc3Npb25bXSBh
cmd1bWVudHMoKSB7CiAJCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIGJvb2xl
YW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRp
bmcgdGFyZ2V0VHlwZSkgewotCQlib29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmluZGluZyAhPSB1
cGRhdGVkQmluZGluZzsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVsbCkgewot
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKLQkJCWlmIChjdHggIT0gbnVs
bCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5n
LCBjdHgpOwotCQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJvbSBhbiBvdXRlciBpbmZl
cmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUgKGJ1dCBub3QgZGVlcCBp
bm5lcnMpOgotCQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRUeXBl
LCB1cGRhdGVkQmluZGluZyk7Ci0JCQl9Ci0JCX0KLQkJdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJp
bmRpbmc7Ci0JCXJldHVybiBoYXNVcGRhdGU7Ci0JfQotCXB1YmxpYyB2b2lkIHJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4
dHMgPT0gbnVsbCkKLQkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3Vw
VGFibGUoKTsKLQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0aG9kLCBpbmZDdHgxOCk7
Ci0JfQotCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29udGV4dChQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJaWYgKHRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMgPT0gbnVsbCkKLQkJCXJldHVybiBudWxsOwotCQlyZXR1cm4gKEluZmVyZW5jZUNvbnRl
eHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsKLQl9Ci0JcHVibGljIGJv
b2xlYW4gdXNlc0luZmVyZW5jZSgpIHsKLQkJcmV0dXJuICh0aGlzLmJpbmRpbmcgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIAotCQkJCSYmIGdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5n
KSAhPSBudWxsOwotCX0KLQlwdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkgewotCQly
ZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsOwotCX0KLQlwdWJsaWMgdm9p
ZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxs
OwotCX0KLQlwdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIo
KSB7Ci0JCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyOwotCX0KLQogCS8vIC0tIGlu
dGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0KIAlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZy
ZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewogCQlyZXR1cm4gbmV3IEluZmVyZW5j
ZUNvbnRleHQxOChzY29wZSwgdGhpcy5hcmd1bWVudHMsIHRoaXMpOwpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRl
eCA5MThiMWI0Li44N2MwZmNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQpAQCAtOTU5LDYgKzk1OSwxMCBAQAog
CXJldHVybiB0aGlzLmNvbnN0YW50OwogfQogCitwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRv
QXBwbGljYWJpbGl0eShUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSwgTWV0aG9kQmlu
ZGluZyBtZXRob2QpIHsKKwlyZXR1cm4gdHJ1ZTsKK30KKwogcHVibGljIGJvb2xlYW4gaXNQZXJ0
aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGlu
ZyBtZXRob2QpIHsKIAlyZXR1cm4gdHJ1ZTsKIH0KQEAgLTEwNjAsMTYgKzEwNjQsNiBAQAogCQl9
CiAJfQogCXJldHVybiBleHByZXNzaW9uVHlwZTsKLX0KLQotLyoqCi0gKiBPbmNlIG91dGVyIGNv
bnRleHRzIGhhdmUgZmluYWxpemVkIHRoZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBleHByZXNzaW9u
LAotICogcGVyZm9ybSBhbnkgY2hlY2tzIHRoYXQgbWlnaHQgaGF2ZSBiZWVuIGRlbGF5ZWQgcHJl
dmlvdXNseS4KLSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSBmaW5hbCB0YXJnZXQgdHlwZSAoYWth
IGV4cGVjdGVkVHlwZSkgZm9yIHRoaXMgZXhwcmVzc2lvbi4KLSAqIEBwYXJhbSBzY29wZSBzY29w
ZSBmb3IgZXJyb3IgcmVwb3J0aW5nCi0gKi8KLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWlu
c3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsK
LQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7IC8vIHN1YmNsYXNzZXMgbWF5IGNob29zZSB0byBk
byByZWFsIHN0dWZmIGhlcmUKIH0KIAogLyoqCkBAIC0xMjUwLDQgKzEyNDQsOCBAQAogcHVibGlj
IFZhcmlhYmxlQmluZGluZyBudWxsQW5ub3RhdGVkVmFyaWFibGVCaW5kaW5nKGJvb2xlYW4gc3Vw
cG9ydFR5cGVBbm5vdGF0aW9ucykgewogCXJldHVybiBudWxsOwogfQorCitwdWJsaWMgYm9vbGVh
biBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCXJldHVybiBmYWxzZTsKIH0KK30KXCBObyBuZXdsaW5l
IGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggNWFj
MTRmMi4uNTJmM2FiMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lv
bi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNzQs
OSArNzQsOCBAQAogCQlzdXBlcigpOwogCX0KIAkKLQkvLyBmb3IgbGFtYmRhJ3MgYW5kIHJlZmVy
ZW5jZSBleHByZXNzaW9ucyBib3hpbmcgY29tcGF0aWJpbGl0eSBpcyBzYW1lIGFzIHZhbmlsbGEg
Y29tcGF0aWJpbGl0eS4KIAlwdWJsaWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCXJldHVybiBpc0NvbXBhdGli
bGVXaXRoKHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJcmV0dXJuIGZhbHNlOwogCX0KIAkKIAlwdWJs
aWMgdm9pZCBzZXRDb21waWxhdGlvblJlc3VsdChDb21waWxhdGlvblJlc3VsdCBjb21waWxhdGlv
blJlc3VsdCkgewpAQCAtMTA3LDE5ICsxMDYsMjcgQEAKIAkJcmV0dXJuIHRydWU7IC8vIGFsd2F5
cyBhcyBwZXIgaW50cm9kdWN0aW9uIG9mIHBhcnQgRCwgSlNSIDMzNQogCX0KIAotCXB1YmxpYyBi
b29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCWlmICh0YXJnZXRUeXBlIGluc3RhbmNlb2YgVHlw
ZVZhcmlhYmxlQmluZGluZykgewotCQkJaWYgKG1ldGhvZCAhPSBudWxsKSB7IC8vIHdoZW4gY2Fs
bGVkIGZyb20gdHlwZSBpbmZlcmVuY2UKLQkJCQlpZiAoKChUeXBlVmFyaWFibGVCaW5kaW5nKXRh
cmdldFR5cGUpLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kKQotCQkJCQlyZXR1cm4gZmFsc2U7
Ci0JCQkJaWYgKG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgJiYgKChUeXBlVmFyaWFibGVCaW5kaW5n
KXRhcmdldFR5cGUpLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kLmRlY2xhcmluZ0NsYXNzKQot
CQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQl9IGVsc2UgeyAvLyBmb3IgaW50ZXJuYWwgY2FsbHMKLQkJ
CQlUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSA9IChUeXBlVmFyaWFibGVCaW5kaW5n
KSB0YXJnZXRUeXBlOwotCQkJCWlmICh0eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCBpbnN0
YW5jZW9mIE1ldGhvZEJpbmRpbmcpCi0JCQkJCXJldHVybiBmYWxzZTsKLQkJCX0KKwlAT3ZlcnJp
ZGUKKwlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCQlyZXR1cm4gdHJ1ZTsK
Kwl9CisJCisJcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZVZh
cmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCWlm
IChtZXRob2QgIT0gbnVsbCkgeyAvLyB3aGVuIGNhbGxlZCBmcm9tIHR5cGUgaW5mZXJlbmNlCisJ
CQlpZiAodHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kKQorCQkJCXJldHVy
biBmYWxzZTsKKwkJCWlmIChtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHR5cGVWYXJpYWJsZS5k
ZWNsYXJpbmdFbGVtZW50ID09IG1ldGhvZC5kZWNsYXJpbmdDbGFzcykKKwkJCQlyZXR1cm4gZmFs
c2U7CisJCX0gZWxzZSB7IC8vIGZvciBpbnRlcm5hbCBjYWxscworCQkJaWYgKHR5cGVWYXJpYWJs
ZS5kZWNsYXJpbmdFbGVtZW50IGluc3RhbmNlb2YgTWV0aG9kQmluZGluZykKKwkJCQlyZXR1cm4g
ZmFsc2U7CiAJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorCQorCXB1YmxpYyBib29sZWFuIGlzUGVy
dGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRp
bmcgbWV0aG9kKSB7CisJCWlmICh0YXJnZXRUeXBlIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmlu
ZGluZykKKwkJCXJldHVybiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSgoVHlwZVZhcmlhYmxl
QmluZGluZykgdGFyZ2V0VHlwZSwgbWV0aG9kKTsKIAkJcmV0dXJuIHRydWU7CiAJfQogCkBAIC0y
MDMsMTEgKzIxMCw2IEBACiAJCQkJYnJlYWs7CiAJCX0KIAkJcmV0dXJuIG51bGw7Ci0JfQotCi0J
cHVibGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQl0YXJnZXRUeXBlID0gdGFyZ2V0VHlwZS51
bmNhcHR1cmUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCXJldHVybiByZXNvbHZlVHlwZUV4cGVj
dGluZyh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0YXJnZXRUeXBlKTsKIAl9CiAKIAljbGFzcyBWaXNp
YmlsaXR5SW5zcGVjdG9yIGV4dGVuZHMgVHlwZUJpbmRpbmdWaXNpdG9yIHsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvSW5uZXJJbmZlcmVuY2VIZWxwZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJ
bmZlcmVuY2VIZWxwZXIuamF2YQpkZWxldGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggODM4MWI1
Yy4uMDAwMDAwMAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0lubmVySW5mZXJlbmNlSGVscGVyLmphdmEKKysr
IC9kZXYvbnVsbApAQCAtMSw0MiArMCwwIEBACi0vKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDE0IEdLIFNvZnR3YXJlIEFHLgotICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwotICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCi0gKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdAotICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwK
LSAqCi0gKiBDb250cmlidXRvcnM6Ci0gKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwg
QVBJIGFuZCBpbXBsZW1lbnRhdGlvbgotICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCi1wYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7Ci0KLWltcG9ydCBqYXZhLnV0
aWwuSGFzaE1hcDsKLWltcG9ydCBqYXZhLnV0aWwuTWFwOwotCi1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7Ci0KLXB1Ymxp
YyBjbGFzcyBJbm5lckluZmVyZW5jZUhlbHBlciB7Ci0KLQkvKiogRm9yIGVhY2ggY2FuZGlkYXRl
IG1ldGhvZCBzdG9yZSBoZXJlIHRoZSBhcnJheSBvZiBhcmd1bWVudCB0eXBlcyBpZiBpbm5lciBp
bmZlcmVuY2UgaGFzIGltcHJvdmVkIGFueSBkdXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5j
ZS4gKi8KLQlwcml2YXRlIE1hcDxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10+IGFyZ1R5cGVz
UGVyQ2FuZGlkYXRlID0gbmV3IEhhc2hNYXA8TWV0aG9kQmluZGluZyxUeXBlQmluZGluZ1tdPigp
OwotCi0JcHVibGljIHZvaWQgcmVnaXN0ZXJJbm5lclJlc3VsdChNZXRob2RCaW5kaW5nIG1ldGhv
ZCwgVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlLCBpbnQgYXJnQ291bnQsIGludCBhcmdJZHgpIHsK
LQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0
KG1ldGhvZCk7Ci0JCWlmIChhcmdUeXBlcyA9PSBudWxsKQotCQkJdGhpcy5hcmdUeXBlc1BlckNh
bmRpZGF0ZS5wdXQobWV0aG9kLCBhcmdUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1thcmdDb3VudF0p
OwotCQlhcmdUeXBlc1thcmdJZHhdID0gcmVzb2x2ZWRUeXBlOwotCX0KLQkKLQlwdWJsaWMgVHlw
ZUJpbmRpbmdbXSBnZXRBcmd1bWVudFR5cGVzRm9yQ2FuZGlkYXRlKE1ldGhvZEJpbmRpbmcgY2Fu
ZGlkYXRlLCBUeXBlQmluZGluZ1tdIHBsYWluQXJnVHlwZXMpIHsKLQkJVHlwZUJpbmRpbmdbXSBh
cmdUeXBlcyA9IHRoaXMuYXJnVHlwZXNQZXJDYW5kaWRhdGUuZ2V0KGNhbmRpZGF0ZSk7Ci0JCWlm
IChhcmdUeXBlcyA9PSBudWxsKQotCQkJcmV0dXJuIHBsYWluQXJnVHlwZXM7Ci0JCS8vIGZpbGwg
aW4gYW55IGJsYW5rcyBub3c6Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnVHlwZXMubGVuZ3Ro
OyBpKyspIHsKLQkJCWlmIChhcmdUeXBlc1tpXSA9PSBudWxsKQotCQkJCWFyZ1R5cGVzW2ldID0g
cGxhaW5BcmdUeXBlc1tpXTsKLQkJfQotCQlyZXR1cm4gYXJnVHlwZXM7Ci0JfQotfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24u
amF2YQppbmRleCBhYzU0NDdmLi4zOGRjOWRjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9j
YXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YQpAQCAtMTksMTIgKzE5
LDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVCaW5kaW5nOwogCiAvKioKLSAqIEFic3RyYWN0aW9uIGZvciBpbnZvY2F0aW9uIEFTVCBub2Rl
cyB0aGF0IGNhbiB0cmlnZ2VyIAotICogPHVsPgotICogPGxpPkludm9jYXRpb24gQXBwbGljYWJp
bGl0eSBJbmZlcmVuY2VzICgxOC41LjEpLCBhbmQ8L2xpPiAKLSAqIDxsaT5JbnZvY2F0aW9uIFR5
cGUgSW5mZXJlbmNlICgxOC41LjIpLjwvbGk+Ci0gKiA8L3VsPgotICovCisgKiBBYnN0cmFjdGlv
biBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhhdCBjYW4gdHJpZ2dlciBvdmVybG9hZCByZXNv
bHV0aW9uIHBvc3NpYmx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZQorKi8KIHB1YmxpYyBpbnRl
cmZhY2UgSW52b2NhdGlvbiBleHRlbmRzIEludm9jYXRpb25TaXRlIHsKIAogCUV4cHJlc3Npb25b
XSBhcmd1bWVudHMoKTsKQEAgLTMzLDU3ICsyOSwyNCBAQAogCSAqIEFuc3dlciB0aGUgcmVzb2x2
ZWQgbWV0aG9kIGJpbmRpbmcgb2YgdGhpcyBpbnZvY2F0aW9uLgogCSAqIElmIGEgdGFyZ2V0IHR5
cGUgaXMgZ2l2ZW4sIHRoZSBpbnZvY2F0aW9uIGdldHMgYSBjaGFuY2UgdG8gZG8gcmVwZWF0ZWQg
bWV0aG9kIGxvb2t1cC4KIAkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgb2Yg
dGhpcyBpbnZvY2F0aW9uIG9yIG51bGwgaWYgbm90IHlldCBrbm93bgotCSAqIEBwYXJhbSByZXBv
cnRFcnJvcnMgaWYgdHJ1ZSB0aGVuIHRoaXMgaXMgdGhlIGxhc3QgY2FsbCwgaWYgbm8gdmFsaWQg
YmluZGluZyBjYW4gYmUgYW5zd2VyZWQgd2Ugc2hvdWxkIHJlcG9ydCBhbiBlcnJvcgotCSAqIEBw
YXJhbSBzY29wZSBpZiByZXBvcnRFcnJvcnMgaXMgdHJ1ZSB0aGVuIHRoaXMgc2NvcGUgY2FuIGJl
IHVzZWQgZm9yIGVycm9yIHJlcG9ydGluZworCSAqIEBwYXJhbSBzY29wZSB0aGUgc2NvcGUgdG8g
dXNlIGZvciBsb29rdXAuCiAJICogCiAJICovCi0JTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSk7Ci0K
KwlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2Nv
cGUpOworCQogCS8qKgogCSAqIFJlZ2lzdGVyIHRoZSBnaXZlbiBpbmZlcmVuY2UgY29udGV4dCwg
d2hpY2ggcHJvZHVjZWQgdGhlIGdpdmVuIG1ldGhvZCBhcyBpdHMgaW50ZXJtZWRpYXRlIHJlc3Vs
dC4KIAkgKiBMYXRlciB3aGVuIHRoZSBzYW1lIG1ldGhvZCBpcyBzZWxlY3RlZCBhcyB0aGUgbW9z
dCBzcGVjaWZpYyBtZXRob2QsIHRoZSBpbmZlcmVuY2UgY29udGV4dAotCSAqIGZvciB0aGlzIHBh
aXIgKEludm9jYXRpb24geCBNZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtA
bGluayAjZ2V0RXhwcmVzc2lvbkNvbnRleHQoKX0KKwkgKiBmb3IgdGhpcyBwYWlyIChJbnZvY2F0
aW9uIHggTWV0aG9kQmluZGluZykgY2FuIGJlIGxvb2tlZCB1cCB1c2luZyB7QGxpbmsgI2dldElu
ZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpfQogCSAqIHRvIGNvbnRp
bnVlIHRoZSB0eXBlIGluZmVyZW5jZS4KIAkgKi8KIAl2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VD
b250ZXh0MTggaW5mQ3R4MTgpOwotCQorCiAJLyoqCi0JICogUmV0cmlldmUgYW4gaW5mZXJlbmNl
IGNvbnRleHQgZm9yIHRoZSBnaXZlbiBtZXRob2Qgd2hpY2ggbXVzdCBoYXZlIGJlZW4gcmVnaXN0
ZXJlZAotCSAqIHVzaW5nIHtAbGluayAjcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZywgSW5mZXJlbmNlQ29udGV4dDE4KX0uCisJICogUmV0
cmlldmUgYW4gaW5mZXJlbmNlIGNvbnRleHQgZm9yIHRoZSBnaXZlbiBtZXRob2QuCiAJICogQHBh
cmFtIG1ldGhvZCBhbiBpbnRlcm1lZGlhdGUgcmVzb2x2ZWQgY2FuZGlkYXRlIGZvciB0aGlzIGlu
dm9jYXRpb24KLQkgKiByZXR1cm4gYSBzdXNwZW5kZWQgaW5mZXJlbmNlIGNvbnRleHQgb3IgbnVs
bCBpZiBub25lIHdhcyByZWdpc3RlcmVkIGZvciB0aGlzIG1ldGhvZC4KKwkgKiByZXR1cm4gdGhl
IGFzc29jaWF0ZWQgaW5mZXJlbmNlIGNvbnRleHQuCiAJICovCiAJSW5mZXJlbmNlQ29udGV4dDE4
IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKTsK
IAotCS8qKgotCSAqIEFuc3dlciB0cnVlIGlmIHRoaXMgaW52b2NhdGlvbiBoYXMgZGV0ZXJtaW5l
ZCBpdHMgYmluZGluZyB1c2luZyBpbmZlcmVuY2UuCi0JICovCi0JYm9vbGVhbiB1c2VzSW5mZXJl
bmNlKCk7Ci0JCi0JLyoqCi0JICogV2hlcmUgdGhlIEFTVCBub2RlIG1heSBob2xkIHJlZmVyZW5j
ZXMgdG8gdGhlIHJlc3VsdHMgb2YgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZSwK
LQkgKiB0aGlzIG1ldGhvZCBhbGxvd3MgdG8gdXBkYXRlIHRob3NlIHJlZmVyZW5jZXMgdG8gdGhl
IHJlc3VsdCBvZiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlLgotCSAqIE5vdGUgdGhhdCBwb3Rl
bnRpYWxseSBtb3JlIHRoYW4ganVzdCB0aGUgbWV0aG9kIGJpbmRpbmcgaXMgdXBkYXRlZC4KLQkg
KiBAcGFyYW0gdXBkYXRlZEJpbmRpbmcgdGhlIGZpbmFsIG1ldGhvZCBiaW5kaW5nIGFmdGVyIGZ1
bGwgaW5mZXJlbmNlCi0JICogQHBhcmFtIHRhcmdldFR5cGUgdGhlIHRhcmdldCB0eXBlIHVzZWQg
ZHVyaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UKLQkgKiBAcmV0dXJuIHRydWUgaWYgYW4g
dXBkYXRlIGhhcyBoYXBwZW5lZAotCSAqLwotCWJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9k
QmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSk7Ci0JCi0JLyoq
Ci0JICogQW5zd2VyIHdoZXRoZXIgdGhlIGN1cnJlbnQgaW52b2NhdGlvbiBoYXMgaW5uZXIgZXhw
cmVzc2lvbnMgdGhhdCBzdGlsbCBuZWVkIHVwZGF0aW5nIGFmdGVyIGluZmVyZW5jZS4KLQkgKi8K
LQlib29sZWFuIGlubmVyc05lZWRVcGRhdGUoKTsKLQotCS8qKgotCSAqIE1hcmsgdGhhdCB1cGRh
dGluZyAodGhlIG5lZWQgZm9yIHdoaWNoIGlzIHNpZ25hbGVkIHZpYSB7QGxpbmsgI2lubmVyc05l
ZWRVcGRhdGUoKX0pIGhhcyBiZWVuIGRvbmUuCi0JICovCi0Jdm9pZCBpbm5lclVwZGF0ZURvbmUo
KTsKLQotCS8qKgotCSAqIElmIHRoaXMgaW52b2NhdGlvbiBoYXMgYW55IHBvbHkgZXhwcmVzc2lv
bnMgYXMgYXJndW1lbnRzLCB0aGlzIG1ldGhvZCBhbnN3ZXJzIGFuIGluZmVyZW5jZSBoZWxwZXIg
Ci0JICogdGhhdCBtZWRpYXRlcyBkdXJpbmcgb3ZlcmxvYWQgcmVzb2x1dGlvbiwgZXZlbiBpZiBu
byBhY3R1YWwgaW5mZXJlbmNlIGhhcHBlbnMgZm9yIHRoaXMgaW52b2NhdGlvbi4KLQkgKi8KLQlJ
bm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJk
YUV4cHJlc3Npb24uamF2YQppbmRleCBjYzIwODc3Li4xZDBkM2U1IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YQpAQCAtNDEsNiArNDEsNyBAQAogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09O
VEVYVDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwu
SGFzaE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlu
a2VkSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMjQ0LDYgKzI0NSw3IEBACiAJ
CQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVudHNbaV0udHlwZS5yZXNvbHZl
VHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsKIAkJfQogCQlpZiAodGhp
cy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9D
QVRJT05fQ09OVEVYVCkgeworCQkJdGhpcy5yZXNvbHZlZENvcGllcyA9IG5ldyBIYXNoTWFwPFR5
cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOwogCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJp
bmRpbmcodGhpcyk7CiAJCX0gCiAJCQpAQCAtNDE0LDYgKzQxNiw3IEBACiAJCWlmICh0aGlzLmJv
ZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7CiAJCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSAo
RXhwcmVzc2lvbikgdGhpcy5ib2R5OwogCQkJbmV3IFJldHVyblN0YXRlbWVudChleHByZXNzaW9u
LCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVuZCwgdHJ1ZSkucmVz
b2x2ZSh0aGlzLnNjb3BlKTsgLy8gOi0pIDstKQorCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9IHRo
aXMub3JpZ2luYWwudm9pZENvbXBhdGlibGUgPSBleHByZXNzaW9uLnN0YXRlbWVudEV4cHJlc3Np
b24oKTsKIAkJfSBlbHNlIHsKIAkJCXRoaXMuYm9keS5yZXNvbHZlKHRoaXMuc2NvcGUpOwogCQl9
CkBAIC03MzAsNyArNzMzLDYgQEAKIAkJaWYgKCEobGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUJp
bmRpbmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0LnVuY2FwdHVyZSh0aGlz
LmVuY2xvc2luZ1Njb3BlKTsKIAkJc2hhcGVBbmFseXNpczogaWYgKCF0aGlzLnNoYXBlQW5hbHlz
aXNDb21wbGV0ZSkgewogCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5l
bmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5
KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNv
bXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CkBA
IC04MzMsNiArODM1LDggQEAKIAkJcmV0dXJuIHRydWU7CiAJfQogCisJcHJpdmF0ZSBIYXNoTWFw
PFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPiByZXNvbHZlZENvcGllczsKKwkKIAkvKioK
IAkgKiBHZXQgYSByZXNvbHZlZCBjb3B5IG9mIHRoaXMgbGFtYmRhIGZvciB1c2UgYnkgdHlwZSBp
bmZlcmVuY2UsIGFzIHRvIGF2b2lkIHNwaWxsaW5nIGFueSBwcmVtYXR1cmUKIAkgKiB0eXBlIHJl
c3VsdHMgaW50byB0aGUgb3JpZ2luYWwgbGFtYmRhLgpAQCAtODQxLDEyICs4NDUsMjEgQEAKIAkg
KiBAcmV0dXJuIGEgcmVzb2x2ZWQgY29weSBvZiAndGhpcycgb3IgbnVsbCBpZiBzaWduaWZpY2Fu
dCBlcnJvcnMgd2hlcmUgZW5jb3VudGVyZWQKIAkgKi8KIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lv
biBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSkgeworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IHRoaXMucmVzb2x2ZWRDb3BpZXMu
Z2V0KHRhcmdldFR5cGUpOworCQlpZiAobGFtYmRhID09IG51bGwpIHsKKwkJCWxhbWJkYSA9IGdl
dFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAodGFyZ2V0VHlwZSk7CisJCQlpZiAo
bGFtYmRhICE9IG51bGwpIHsKKwkJCQl0aGlzLnJlc29sdmVkQ29waWVzLnB1dCh0YXJnZXRUeXBl
LCBsYW1iZGEpOworCQkJfQorCQl9CisJCXJldHVybiBsYW1iZGE7CisJfQorCQorCXB1YmxpYyBM
YW1iZGFFeHByZXNzaW9uIGdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewogCQkvLyBub3RlOiB0aGlzIGlzIGVzc2VudGlhbGx5IGEg
c2ltcGxpZmllZCBleHRyYWN0IGZyb20gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyxTY29w
ZSkuCiAJCWlmICh0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSAmJiB0aGlzLmJpbmRpbmcgIT0g
bnVsbCkKIAkJCXJldHVybiB0aGlzOwogCQkKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5j
YXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkvLyBUT0RPOiBjYWNoaW5nCiAJCUlFcnJv
ckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9s
aWN5KTsKIAkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5j
bG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJCWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNv
bXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7CkBAIC05
NjgsNiArOTgxLDcgQEAKIAogCQlpZiAoY29weSAhPSBudWxsKSB7IC8vID09PiBzeW50YXggZXJy
b3JzID09IG51bGwKIAkJCWNvcHkub3JpZ2luYWwgPSB0aGlzOworCQkJY29weS5lbmNsb3NpbmdT
Y29wZSA9IHRoaXMuZW5jbG9zaW5nU2NvcGU7CiAJCX0KIAkJcmV0dXJuIGNvcHk7CiAJfQpAQCAt
OTc2LDcgKzk5MCw3IEBACiAJCWlmICh0aGlzLm9yaWdpbmFsID09IHRoaXMpIC8vIG5vdCBpbiBv
dmVybG9hZCByZXNvbHV0aW9uIGNvbnRleHQuCiAJCQlyZXR1cm47CiAJCWlmICh0aGlzLmJvZHkg
aW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQl0aGlzLm9yaWdpbmFsLnZhbHVlQ29tcGF0aWJs
ZSA9IHJlc3VsdFR5cGUgIT0gbnVsbCAmJiByZXN1bHRUeXBlLmlkICE9IFR5cGVJZHMuVF92b2lk
OworCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwg
JiYgcmVzdWx0VHlwZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCA/IGZhbHNlIDogdHJ1ZTsKIAkJCXRo
aXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnMgPSBuZXcgRXhwcmVzc2lvblsxXTsKIAkJCXRo
aXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnNbMF0gPSBleHByZXNzaW9uOwogCQkJcmV0dXJu
OyAvLyB2b2lkIGNvbXBhdGliaWxpdHkgZGV0ZXJtaW5lZCB2aWEgc3RhdGVtZW50RXhwcmVzc2lv
bigpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggNGM0ZWVhMi4uNWI5MmZjMCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2
YQpAQCAtODAsNiArODAsOCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuTWlzc2luZ1R5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Qb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVR5cGVCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9s
eW1vcnBoaWNNZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuUHJvYmxlbU1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKQEAgLTExNSwxMSAr
MTE3LDEwIEBACiAKIAkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZvY2F0aW9u
IGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2Ug
KHBlciBtZXRob2QgY2FuZGlkYXRlKToKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdN
QixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7Ci0JcHJvdGVjdGVkIElu
bmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyOwogCXByaXZhdGUgYm9vbGVh
biByZWNlaXZlcklzVHlwZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7CiAJ
cHVibGljIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IEJpbmRpbmcuTk9fUEFSQU1FVEVS
UzsKLQlwdWJsaWMgYm9vbGVhbiBhcmd1bWVudHNIYXZlRXJyb3JzOworCXB1YmxpYyBib29sZWFu
IGFyZ3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsKIAkKIAogcHVibGljIEZsb3dJbmZvIGFuYWx5
c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwg
Rmxvd0luZm8gZmxvd0luZm8pIHsKQEAgLTU5MywxMTQgKzU5NCwxMTEgQEAKIH0KIAogcHVibGlj
IFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkvLyBBbnN3ZXIg
dGhlIHNpZ25hdHVyZSByZXR1cm4gdHlwZQorCS8vIEFuc3dlciB0aGUgc2lnbmF0dXJlIHJldHVy
biB0eXBlLCBhbnN3ZXJzIFBvbHlUeXBlQmluZGluZyBpZiB0aGVyZSBpcyBhdCBsZWFzdCBvbmUg
Z2VuZXJpYyBvdmVybG9hZGVkIGNhbmRpZGF0ZSB0aGF0IGVuY29kZWQgdHlwZSB2YXJpYWJsZXMg
aW4gcmV0dXJuIHR5cGUgYW5kIHRoZXJlIGlzIG5vIHRhcmdldCB0eXBlICAKIAkvLyBCYXNlIHR5
cGUgcHJvbW90aW9uCisJaWYgKHRoaXMuY29uc3RhbnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50
KSB7CisJCXRoaXMuY29uc3RhbnQgPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQ7CisJCWxvbmcgc291
cmNlTGV2ZWwgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbDsKKwkJYm9vbGVh
biByZWNlaXZlckNhc3QgPSBmYWxzZTsKKwkJaWYgKHRoaXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBD
YXN0RXhwcmVzc2lvbikgeworCQkJdGhpcy5yZWNlaXZlci5iaXRzIHw9IEFTVE5vZGUuRGlzYWJs
ZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxhdGVyIG9uCisJCQlyZWNlaXZl
ckNhc3QgPSB0cnVlOworCQl9CisJCXRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlID0gdGhpcy5yZWNl
aXZlci5yZXNvbHZlVHlwZShzY29wZSk7CisJCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJl
Y2VpdmVyIGluc3RhbmNlb2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlz
LnJlY2VpdmVyKS5iaXRzICYgQmluZGluZy5UWVBFKSAhPSAwOworCQlpZiAocmVjZWl2ZXJDYXN0
ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlICE9IG51bGwpIHsKKwkJCS8vIGR1ZSB0byBjaGFu
Z2Ugb2YgZGVjbGFyaW5nIGNsYXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0eSBj
YXN0IHNob3VsZCBiZSBub3RpZmllZAorCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscygo
KENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpLmV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSkpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51
bm5lY2Vzc2FyeUNhc3QoKENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOworCQkJfQorCQl9
CisJCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNh
bGwpCisJCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJaW50IGxlbmd0aCA9
IHRoaXMudHlwZUFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMg
PSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3Mg
YWxsIGFyZ3VtZW50cworCQkJdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJ
CVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKKwkJ
CQlpZiAoKHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29s
dmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgeworCQkJCQl0
aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOworCQkJCX0KKwkJCQlpZiAodGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewor
CQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVS
ZWZlcmVuY2UpOworCQkJCX0KKwkJCX0KKwkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMp
IHsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRv
IHJlc29sdmUgYXJndW1lbnRzCisJCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3Vt
ZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQkJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVz
b2x2ZVR5cGUoc2NvcGUpOworCQkJCQl9CisJCQkJfQorCQkJCXJldHVybiBudWxsOworCQkJfQor
CQl9CisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2ZWQKKwkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9y
cyA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCWludCBsZW5ndGggPSB0
aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisJCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJp
bmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspeworCQkJ
CUV4cHJlc3Npb24gYXJndW1lbnQgPSB0aGlzLmFyZ3VtZW50c1tpXTsKKwkJCQlpZiAodGhpcy5h
cmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1bmV4cGVjdGVkbHkg
Zm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJCWlmIChhcmd1bWVudCBp
bnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQkJCWFyZ3VtZW50LmJpdHMgfD0gQVNUTm9k
ZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIgb24KKwkJ
CQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOworCQkJCX0KKwkJCQlhcmd1bWVudC5zZXRF
eHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOworCQkJCWlmICgodGhpcy5hcmd1
bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBudWxsKXsKKwkJ
CQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKKwkJCQl9CisJCQl9CisJCQlpZiAo
dGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7CisJCQkJaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJU
eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgeworCQkJCQkvLyAgcmVjb3JkIGEgYmVz
dCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBtZXRob2Qg
bWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVCaW5kaW5nW2xl
bmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykKKwkJCQkJCXBzZXVk
b0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0gbnVsbCA/IFR5cGVCaW5kaW5nLk5V
TEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxhY2UgYXJncyB3aXRoIGVycm9ycyB3
aXRoIG51bGwgdHlwZQogCi0JdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFudDsK
LQlsb25nIHNvdXJjZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWw7
Ci0JYm9vbGVhbiByZWNlaXZlckNhc3QgPSBmYWxzZTsKLQlpZiAodGhpcy5yZWNlaXZlciBpbnN0
YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7Ci0JCXRoaXMucmVjZWl2ZXIuYml0cyB8PSBBU1ROb2Rl
LkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQly
ZWNlaXZlckNhc3QgPSB0cnVlOwotCX0KLQlpZiAodGhpcy5yZWNlaXZlci5yZXNvbHZlZFR5cGUg
IT0gbnVsbCkKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9y
KCJSZWNlaXZlciB3YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5P
Ti1OTFMtMSQKLQl0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9IHRoaXMucmVjZWl2ZXIucmVzb2x2
ZVR5cGUoc2NvcGUpOwotCXRoaXMucmVjZWl2ZXJJc1R5cGUgPSB0aGlzLnJlY2VpdmVyIGluc3Rh
bmNlb2YgTmFtZVJlZmVyZW5jZSAmJiAoKChOYW1lUmVmZXJlbmNlKSB0aGlzLnJlY2VpdmVyKS5i
aXRzICYgQmluZGluZy5UWVBFKSAhPSAwOwotCWlmIChyZWNlaXZlckNhc3QgJiYgdGhpcy5hY3R1
YWxSZWNlaXZlclR5cGUgIT0gbnVsbCkgewotCQkgLy8gZHVlIHRvIGNoYW5nZSBvZiBkZWNsYXJp
bmcgY2xhc3Mgd2l0aCByZWNlaXZlciB0eXBlLCBvbmx5IGlkZW50aXR5IGNhc3Qgc2hvdWxkIGJl
IG5vdGlmaWVkCi0JCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lv
bil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNl
aXZlclR5cGUpKSB7Ci0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vzc2FyeUNhc3Qo
KENhc3RFeHByZXNzaW9uKXRoaXMucmVjZWl2ZXIpOwotCQl9Ci0JfQotCS8vIHJlc29sdmUgdHlw
ZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9yIGNhbGwpCi0JaWYgKHRoaXMudHlw
ZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMu
bGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSBzb3VyY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQl0aGlz
LmdlbmVyaWNUeXBlQXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAo
aW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVy
ZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tpXTsKLQkJCWlmICgodGhpcy5nZW5lcmljVHlwZUFy
Z3VtZW50c1tpXSA9IHR5cGVSZWZlcmVuY2UucmVzb2x2ZVR5cGUoc2NvcGUsIHRydWUgLyogY2hl
Y2sgYm91bmRzKi8pKSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0g
dHJ1ZTsKLQkJCX0KLQkJCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgJiYgdHlwZVJlZmVy
ZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
aWxsZWdhbFVzYWdlT2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKLQkJCX0KLQkJfQotCQlpZiAo
dGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVs
bCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9yIChpbnQg
aSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7Ci0JCQkJ
CXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKLQkJCQl9Ci0JCQl9Ci0JCQly
ZXR1cm4gbnVsbDsKLQkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3Mg
YXJlIHJlc29sdmVkCi0JaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKLQkJdGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzID0gZmFsc2U7IC8vIHR5cGVDaGVja3MgYWxsIGFyZ3VtZW50cwotCQlp
bnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMg
PSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7
IGkrKyl7Ci0JCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07Ci0JCQlp
ZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAotCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiQXJndW1lbnQgd2FzIHVuZXhw
ZWN0ZWRseSBmb3VuZCByZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JCQlpZiAoYXJn
dW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQkJCWFyZ3VtZW50LmJpdHMgfD0g
QVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hlY2sgbGF0ZXIg
b24KLQkJCQl0aGlzLmFyZ3NDb250YWluQ2FzdCA9IHRydWU7Ci0JCQl9Ci0JCQlhcmd1bWVudC5z
ZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJaWYgKCh0aGlzLmFy
Z3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkpID09IG51bGwpewot
CQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAoc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgewotCQkJCWlmIChhcmd1bWVudC5p
c1BvbHlFeHByZXNzaW9uKCkKLQkJCQkJfHwgKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlv
biAmJiAoKEludm9jYXRpb24pYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpIHsKLQkJCQkJaWYg
KHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZl
cmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQl9Ci0JCQl9Ci0J
CX0KLQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMuYWN0dWFs
UmVjZWl2ZXJUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewotCQkJCS8vICByZWNv
cmQgYSBiZXN0IGd1ZXNzLCBmb3IgY2xpZW50cyB3aG8gbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAotCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmlu
ZGluZ1tsZW5ndGhdOwotCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykKLQkJCQkJ
cHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlwZUJpbmRp
bmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdpdGggZXJy
b3JzIHdpdGggbnVsbCB0eXBlCi0JCQkJdGhpcy5iaW5kaW5nID0KLQkJCQkJdGhpcy5yZWNlaXZl
ci5pc0ltcGxpY2l0VGhpcygpCi0JCQkJCQk/IHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMu
c2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMpCi0JCQkJCQk6IHNjb3BlLmZpbmRNZXRob2QoKFJl
ZmVyZW5jZUJpbmRpbmcpIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBw
c2V1ZG9BcmdzLCB0aGlzLCBmYWxzZSk7Ci0JCQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYm
ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQkJCQlNZXRob2RCaW5kaW5nIGNs
b3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhpcy5iaW5kaW5nKS5jbG9zZXN0
TWF0Y2g7Ci0JCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMgd2hv
IG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCi0JCQkJCWlm
IChjbG9zZXN0TWF0Y2ggIT0gbnVsbCkgewotCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaC5vcmlnaW5h
bCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgeyAvLyBnZW5l
cmljIG1ldGhvZAotCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRob2Qgb3V0
c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAoMTc1NDA5
KQotCQkJCQkJCWNsb3Nlc3RNYXRjaCA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2QoY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCksIChSYXdUeXBlQmlu
ZGluZyludWxsKTsKLQkJCQkJCX0KLQkJCQkJCXRoaXMuYmluZGluZyA9IGNsb3Nlc3RNYXRjaDsK
LQkJCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoT3JpZ2luYWwgPSBjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKTsKLQkJCQkJCWlmIChjbG9zZXN0TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRC
eVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVmaW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9y
aWdpbmFsKSkgewotCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRob2QgaXMgdXNlZCBm
cm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVjdCByZWN1cnNpb25zKQotCQkJCQkJ
CWNsb3Nlc3RNYXRjaE9yaWdpbmFsLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJz
LkFjY0xvY2FsbHlVc2VkOworCQkJCQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1w
bGljaXRUaGlzKCkgPworCQkJCQkJCQlzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVj
dG9yLCBwc2V1ZG9BcmdzLCB0aGlzKSA6CisJCQkJCQkJCQlzY29wZS5maW5kTWV0aG9kKChSZWZl
cmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgcHNl
dWRvQXJncywgdGhpcywgZmFsc2UpOworCisJCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAm
JiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcg
Y2xvc2VzdE1hdGNoID0gKChQcm9ibGVtTWV0aG9kQmluZGluZyl0aGlzLmJpbmRpbmcpLmNsb3Nl
c3RNYXRjaDsKKwkJCQkJCS8vIHJlY29yZCB0aGUgY2xvc2VzdCBtYXRjaCwgZm9yIGNsaWVudHMg
d2hvIG1heSBzdGlsbCBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgbWV0aG9kIG1hdGNoCisJCQkJ
CQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKKwkJCQkJCQlpZiAoY2xvc2VzdE1hdGNoLm9y
aWdpbmFsKCkudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7IC8v
IGdlbmVyaWMgbWV0aG9kCisJCQkJCQkJCS8vIHNob3VsZG4ndCByZXR1cm4gZ2VuZXJpYyBtZXRo
b2Qgb3V0c2lkZSBpdHMgY29udGV4dCwgcmF0aGVyIGNvbnZlcnQgaXQgdG8gcmF3IG1ldGhvZCAo
MTc1NDA5KQorCQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLCAoUmF3
VHlwZUJpbmRpbmcpbnVsbCk7CisJCQkJCQkJfQorCQkJCQkJCXRoaXMuYmluZGluZyA9IGNsb3Nl
c3RNYXRjaDsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFsID0gY2xv
c2VzdE1hdGNoLm9yaWdpbmFsKCk7CisJCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaE9yaWdpbmFsLmlz
T3JFbmNsb3NlZEJ5UHJpdmF0ZVR5cGUoKSAmJiAhc2NvcGUuaXNEZWZpbmVkSW5NZXRob2QoY2xv
c2VzdE1hdGNoT3JpZ2luYWwpKSB7CisJCQkJCQkJCS8vIGlnbm9yZSBjYXNlcyB3aGVyZSBtZXRo
b2QgaXMgdXNlZCBmcm9tIHdpdGhpbiBpbnNpZGUgaXRzZWxmIChlLmcuIGRpcmVjdCByZWN1cnNp
b25zKQorCQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFDb21w
aWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0K
IAkJCQl9CisJCQkJcmV0dXJuIG51bGw7CiAJCQl9CisJCX0KKwkJaWYgKHRoaXMuYWN0dWFsUmVj
ZWl2ZXJUeXBlID09IG51bGwpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCS8vIGJhc2UgdHlw
ZSBjYW5ub3QgcmVjZWl2ZSBhbnkgbWVzc2FnZQorCQlpZiAodGhpcy5hY3R1YWxSZWNlaXZlclR5
cGUuaXNCYXNlVHlwZSgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0
aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMp
OwogCQkJcmV0dXJuIG51bGw7CiAJCX0KIAl9Ci0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBl
ID09IG51bGwpIHsKLQkJcmV0dXJuIG51bGw7CisJCisJVHlwZUJpbmRpbmcgbWV0aG9kVHlwZSA9
IGZpbmRNZXRob2RCaW5kaW5nKHNjb3BlKTsKKwlpZiAobWV0aG9kVHlwZSAhPSBudWxsICYmIG1l
dGhvZFR5cGUuaXNQb2x5VHlwZSgpKSB7CisJCXRoaXMucmVzb2x2ZWRUeXBlID0gdGhpcy5iaW5k
aW5nLnJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpOworCQlyZXR1cm4g
bWV0aG9kVHlwZTsKIAl9Ci0JLy8gYmFzZSB0eXBlIGNhbm5vdCByZWNlaXZlIGFueSBtZXNzYWdl
Ci0JaWYgKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgewotCQlzY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5lcnJvck5vTWV0aG9kRm9yKHRoaXMsIHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlLCB0aGlzLmFyZ3VtZW50VHlwZXMpOwotCQlyZXR1cm4gbnVsbDsKLQl9Ci0KLQlmaW5k
TWV0aG9kQmluZGluZyhzY29wZSk7CiAKIAlpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCkgewpAQCAt
NzIzLDYgKzcyMSwxMiBAQAogCQlzd2l0Y2ggKHRoaXMuYmluZGluZy5wcm9ibGVtSWQoKSkgewog
CQkJY2FzZSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgOgogCQkJCWJyZWFrOyAvLyBubyByZXNp
bGllbmNlIG9uIGFtYmlndW91cworCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxp
Y2FibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9jYXRp
b25UeXBlSW5mZXJlbmNlRmFpbHVyZToKKwkJCQkvLyBHcmFiYmluZyB0aGUgY2xvc2VzdCBtYXRj
aCBpbXByb3ZlcyBlcnJvciByZXBvcnRpbmcgaW4gbmVzdGVkIGludm9jYXRpb24gY29udGV4dHMK
KwkJCQlpZiAodGhpcy5leHByZXNzaW9uQ29udGV4dCAhPSBJTlZPQ0FUSU9OX0NPTlRFWFQpCisJ
CQkJCWJyZWFrOworCQkJCS8vJEZBTEwtVEhST1VHSCQKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMu
Tm90VmlzaWJsZSA6CiAJCQljYXNlIFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1JlZmVyZW5jZUlu
Q29uc3RydWN0b3JJbnZvY2F0aW9uIDoKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGlj
UmVmZXJlbmNlSW5TdGF0aWNDb250ZXh0IDoKQEAgLTg2MCwxNiArODY0LDIwIEBACiAJCQkJPyB0
aGlzLnJlc29sdmVkVHlwZQogCQkJCTogbnVsbDsKIH0KLS8qKgotICogRmluZCB0aGUgbWV0aG9k
IGJpbmRpbmc7IAotICogaWYgdGhpcy5pbm5lcnNOZWVkVXBkYXRlIGFsbG93IGZvciB0d28gYXR0
ZW1wdHMgd2hlcmUgdGhlIGZpcnN0IHJvdW5kIG1heSBzdG9wCi0gKiBhZnRlciBhcHBsaWNhYmls
aXR5IGNoZWNraW5nICgxOC41LjEpIHRvIGluY2x1ZGUgbW9yZSBpbmZvcm1hdGlvbiBpbnRvIHRo
ZSBmaW5hbAotICogaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAoMTguNS4yKS4KLSAqLwotcHJv
dGVjdGVkIHZvaWQgZmluZE1ldGhvZEJpbmRpbmcoQmxvY2tTY29wZSBzY29wZSkgewotCXRoaXMu
YmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJPyBzY29wZS5nZXRJ
bXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHRoaXMpCisK
K3Byb3RlY3RlZCBUeXBlQmluZGluZyBmaW5kTWV0aG9kQmluZGluZyhCbG9ja1Njb3BlIHNjb3Bl
KSB7CisJCisJCisJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygp
ID8gCisJCQlzY29wZS5nZXRJbXBsaWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3Vt
ZW50VHlwZXMsIHRoaXMpIAogCQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZl
clR5cGUsIHRoaXMuc2VsZWN0b3IsIHRoaXMuYXJndW1lbnRUeXBlcywgdGhpcyk7CisKKwlpZiAo
dGhpcy5iaW5kaW5nID09IG51bGwpIC8vIGNhbid0IGhhcHBlbiA/IEkgdGhpbmsgd2UgYWx3YXlz
IGdldCBhIHByb2JsZW0gYmluZGluZywgYW55d2F5cy4KKwkJcmV0dXJuIG51bGw7CisJCisJaWYg
KHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpCisJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOworCQogCXJlc29sdmVQ
b2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB0aGlzLmJpbmRpbmcsIHRoaXMuYXJndW1lbnRU
eXBlcywgc2NvcGUpOwogCQogCS8qIFRoZXJlIGFyZSBlbWJlZGRlZCBhc3N1bXB0aW9ucyBpbiB0
aGUgSkxTOCB0eXBlIGluZmVyZW5jZSBzY2hlbWUgdGhhdCBhIHN1Y2Nlc3NmdWwgc29sdXRpb24g
b2YgdGhlIHR5cGUgZXF1YXRpb25zIHJlc3VsdHMgaW4gYW4KQEAgLTg4NCwxMSArODkyLDggQEAK
IAlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJP
cHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewog
CQlpZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5
Q2hlY2spCi0JCQlyZXR1cm47CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwZ21iID0gKFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nOwotCQlJbmZlcmVuY2VDb250ZXh0MTgg
Y3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChwZ21iKTsKLQkJaWYgKGN0eCA9PSBudWxsIHx8IGN0
eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpCi0J
CQlyZXR1cm47CiAJCWludCBsZW5ndGggPSBwZ21iLnR5cGVBcmd1bWVudHMgPT0gbnVsbCA/IDAg
OiBwZ21iLnR5cGVBcmd1bWVudHMubGVuZ3RoOwogCQlib29sZWFuIHNhd1Jhd1R5cGUgPSBmYWxz
ZTsKIAkJZm9yIChpbnQgaSA9IDA7ICBpIDwgbGVuZ3RoOyBpKyspIHsKQEAgLTg5Nyw0MCArOTAy
LDI2IEBACiAJCQkgICBkb2VzIG5vdCBhcHBlYXIgZnVsbHkgaG9va2VkIHVwIGludG8gaXNDb21w
YXRpYmxlV2l0aCBhbmQgaXNFcXVpdmFsZW50IHRvIGV2ZXJ5d2hlcmUuIEF0IHRoZSBtb21lbnQs
IGJhaWwgb3V0IGlmIHdlIHNlZSBjYXB0dXJlLgogCQkJKi8gICAKIAkJCWlmIChwZ21iLnR5cGVB
cmd1bWVudHNbaV0uaXNDYXB0dXJlKCkpCi0JCQkJcmV0dXJuOworCQkJCXJldHVybiB0aGlzLmJp
bmRpbmcucmV0dXJuVHlwZTsKIAkJCWlmIChwZ21iLnR5cGVBcmd1bWVudHNbaV0uaXNSYXdUeXBl
KCkpCiAJCQkJc2F3UmF3VHlwZSA9IHRydWU7CiAJCX0KIAkJaWYgKCFzYXdSYXdUeXBlKQotCQkJ
cmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwogCQlsZW5ndGggPSB0
aGlzLmFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKIAkJaWYg
KGxlbmd0aCA9PSAwKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5U
eXBlOwogCQlUeXBlQmluZGluZyBbXSBmaW5hbEFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRp
bmdbbGVuZ3RoXTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJVHlw
ZUJpbmRpbmcgZmluYWxBcmd1bWVudFR5cGUgPSB0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5
cGU7CiAJCQlpZiAoZmluYWxBcmd1bWVudFR5cGUgPT0gbnVsbCB8fCAhZmluYWxBcmd1bWVudFR5
cGUuaXNWYWxpZEJpbmRpbmcoKSkgIC8vIGFscmVhZHkgc2lkZWQgd2l0aCB0aGUgZGV2aWwuCi0J
CQkJcmV0dXJuOworCQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJCWZpbmFs
QXJndW1lbnRUeXBlc1tpXSA9IGZpbmFsQXJndW1lbnRUeXBlOyAKIAkJfQotCQlpZiAoc2NvcGUu
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1bWVudFR5
cGVzLCBmYWxzZSwgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxFKQorCQlpZiAoc2NvcGUu
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1bWVudFR5
cGVzLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCiAJCQl0aGlzLmJpbmRpbmcgPSBu
ZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLm9yaWdpbmFsKCksIHRoaXMuYmlu
ZGluZy5zZWxlY3RvciwgZmluYWxBcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3Vu
ZCk7CiAJfQotfQotCi1AT3ZlcnJpZGUKLXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RG
aW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQlp
ZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KChQ
YXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBu
dWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJS
RUQpIHsKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsKLQkJCU1ldGhvZEJpbmRp
bmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLCAoUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQkJaWYgKHVwZGF0
ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgewotCQkJCUFTVE5vZGUucmVz
b2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5kaW5nLCBzY29wZSk7
Ci0JCQl9Ci0JCX0KLQl9Ci0JcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOworCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIH0KIAogcHVibGljIHZvaWQgc2V0QWN0dWFsUmVjZWl2ZXJU
eXBlKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CkBAIC05NjYsNiArOTU3LDQxIEBA
CiAJICovCiAJcmV0dXJuIGlzUG9seUV4cHJlc3Npb24odGhpcy5iaW5kaW5nKTsKIH0KKworcHVi
bGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBl
LCBTY29wZSBzY29wZSkgeworCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgfHwgdGhpcy5i
aW5kaW5nID09IG51bGwgfHwgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpIHx8IHRhcmdl
dFR5cGUgPT0gbnVsbCB8fCBzY29wZSA9PSBudWxsKQorCQlyZXR1cm4gZmFsc2U7CisJaWYgKGlz
UG9seUV4cHJlc3Npb24oKSAmJiAhdGFyZ2V0VHlwZS5pc1ByaW1pdGl2ZU9yQm94ZWRQcmltaXRp
dmVUeXBlKCkpIC8vIGkuZSBpdCBpcyBkdW1iIHRvIHRyaWdnZXIgaW5mZXJlbmNlLCBjaGVja2lu
ZyBib3hpbmcgY29tcGF0aWJpbGl0eSBhZ2FpbnN0IHNheSBDb2xsZWN0b3I8PyBzdXBlciBULCBB
LCBSPi4KKwkJcmV0dXJuIGZhbHNlOworCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBl
ID0gdGhpcy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJn
ZXRUeXBlOworCQkvLyBObyBuZWVkIHRvIHR1bm5lbCB0aHJvdWdoIG92ZXJsb2FkIHJlc29sdXRp
b24uIHRoaXMuYmluZGluZyBpcyB0aGUgTVNNQi4KKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBp
c1BvbHlFeHByZXNzaW9uKCkgPyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QxOCh0aGlzLmJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCksIHRo
aXMuYXJndW1lbnRUeXBlcywgc2NvcGUsIHRoaXMpIDogdGhpcy5iaW5kaW5nOworCQlpZiAobWV0
aG9kID09IG51bGwgfHwgIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5U
eXBlID09IG51bGwgfHwgIW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQly
ZXR1cm4gZmFsc2U7CisJCXJldHVybiBzdXBlci5pc0JveGluZ0NvbXBhdGlibGUobWV0aG9kLnJl
dHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLCB0YXJnZXRUeXBlLCB0aGlz
LCBzY29wZSk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvcmlnaW5hbEV4
cGVjdGVkVHlwZTsKKwl9Cit9CisKK3B1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgZmluYWwgU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzIHx8IHRoaXMuYmluZGluZyA9PSBudWxsIHx8ICF0aGlzLmJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSB8fCB0YXJnZXRUeXBlID09IG51bGwgfHwgc2NvcGUgPT0gbnVsbCkK
KwkJcmV0dXJuIGZhbHNlOworCVR5cGVCaW5kaW5nIG9yaWdpbmFsRXhwZWN0ZWRUeXBlID0gdGhp
cy5leHBlY3RlZFR5cGU7CisJdHJ5IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSB0YXJnZXRUeXBl
OworCQkvLyBObyBuZWVkIHRvIHR1bm5lbCB0aHJvdWdoIG92ZXJsb2FkIHJlc29sdXRpb24uIHRo
aXMuYmluZGluZyBpcyB0aGUgTVNNQi4KKwkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBpc1BvbHlF
eHByZXNzaW9uKCkgPyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNv
bXBhdGlibGVNZXRob2QxOCh0aGlzLmJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCksIHRoaXMuYXJn
dW1lbnRUeXBlcywgc2NvcGUsIHRoaXMpIDogdGhpcy5iaW5kaW5nOworCQlpZiAobWV0aG9kID09
IG51bGwgfHwgIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpIHx8IG1ldGhvZC5yZXR1cm5UeXBlID09
IG51bGwgfHwgIW1ldGhvZC5yZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4g
ZmFsc2U7CisJCXJldHVybiBtZXRob2QucmV0dXJuVHlwZS5jYXB0dXJlKHNjb3BlLCB0aGlzLnNv
dXJjZUVuZCkuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCBzY29wZSk7CisJfSBmaW5hbGx5
IHsKKwkJdGhpcy5leHBlY3RlZFR5cGUgPSBvcmlnaW5hbEV4cGVjdGVkVHlwZTsKKwl9Cit9CisK
IC8qKiBWYXJpYW50IG9mIGlzUG9seUV4cHJlc3Npb24oKSB0byBiZSB1c2VkIGR1cmluZyB0eXBl
IGluZmVyZW5jZSwgd2hlbiBhIHJlc29sdXRpb24gY2FuZGlkYXRlIGV4aXN0cy4gKi8KIHB1Ymxp
YyBib29sZWFuIGlzUG9seUV4cHJlc3Npb24oTWV0aG9kQmluZGluZyByZXNvbHV0aW9uQ2FuZGlk
YXRlKSB7CiAJaWYgKHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gQVNTSUdOTUVOVF9DT05URVhU
ICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gSU5WT0NBVElPTl9DT05URVhUKQpAQCAtMTAy
OSwyMSArMTA1NSwxMCBAQAogCXJldHVybiB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCk7
CiB9CiAvLyAtLSBpbnRlcmZhY2UgSW52b2NhdGlvbjogLS0KLXB1YmxpYyBNZXRob2RCaW5kaW5n
IGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNj
b3BlIHNjb3BlKSB7Ci0JaWYgKHJlcG9ydEVycm9ycykgewotCQlpZiAodGhpcy5iaW5kaW5nID09
IG51bGwpCi0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3Io
Im1ldGhvZCBpcyB1bmV4cGVjdGVkbHkgdW5yZXNvbHZlZCIsIHRoaXMpOyAvLyROT04tTkxTLTEk
Ci0JCWVsc2UgaWYgKCF0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKLQl9Citw
dWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7CiAJcmV0dXJuIHRoaXMuYmluZGluZzsKIH0KLXB1YmxpYyBFeHByZXNzaW9uW10g
YXJndW1lbnRzKCkgewotCXJldHVybiB0aGlzLmFyZ3VtZW50czsKLX0KLXB1YmxpYyBFeHByZXNz
aW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKLQlyZXR1cm4gdGhpcy5leHByZXNz
aW9uQ29udGV4dDsKLX0KKwogcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHgxOCkgewogCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXRo
aXMuaW5mZXJlbmNlQ29udGV4dHMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKQEAgLTEwNTQs
MzIgKzEwNjksMTEgQEAKIAkJcmV0dXJuIG51bGw7CiAJcmV0dXJuIChJbmZlcmVuY2VDb250ZXh0
MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7CiB9Ci1wdWJsaWMgYm9vbGVh
biB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldEluZmVyZW5jZUNvbnRl
eHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKSAhPSBu
dWxsOworcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CisJcmV0dXJuIHRoaXMuYXJn
dW1lbnRzOwogfQotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1
cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCWJvb2xlYW4gaGFzVXBk
YXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5j
ZUNvbnRleHRzICE9IG51bGwpIHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVu
Y2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5n
KTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQl0aGlzLmluZmVyZW5jZUNvbnRleHRz
LnB1dCh1cGRhdGVkQmluZGluZywgY3R4KTsKLQkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUg
ZnJvbSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRv
bmUgKGJ1dCBub3QgZGVlcCBpbm5lcnMpOgotCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNv
bHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJfQotCX0KLQl0aGlzLmJpbmRp
bmcgPSB1cGRhdGVkQmluZGluZzsKLQl0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5kaW5n
LnJldHVyblR5cGU7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KLXB1YmxpYyBib29sZWFuIGlubmVy
c05lZWRVcGRhdGUoKSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVs
bDsKLX0KLXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQl0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyID0gbnVsbDsKLX0KLXB1YmxpYyBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lcklu
ZmVyZW5jZUhlbHBlcigpIHsKLQlyZXR1cm4gdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlcjsKK3B1
YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKKwlyZXR1cm4g
dGhpcy5leHByZXNzaW9uQ29udGV4dDsKIH0KIC8vIC0tIEludGVyZmFjZSBJbnZvY2F0aW9uU2l0
ZTogLS0KIHB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNj
b3BlIHNjb3BlKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25F
eHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9u
LmphdmEKaW5kZXggNTlmZmIyMC4uYjJmYmQzYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFs
aWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVk
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNDEwLDEwICs0MTAsNiBAQAogCQkJCWlmICgo
dGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9PSBu
dWxsKXsKIAkJCQkJaGFzRXJyb3IgPSB0cnVlOwogCQkJCX0KLQkJCQlpZiAoc291cmNlTGV2ZWwg
Pj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lv
bigpIHx8IChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZvY2F0aW9uKWFy
Z3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQlpZiAodGhpcy5pbm5lckluZmVyZW5j
ZUhlbHBlciA9PSBudWxsKQotCQkJCQkJdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG5ldyBJ
bm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCX0KIAkJCX0KIAkJfQogCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNl
RXhwcmVzc2lvbi5qYXZhCmluZGV4IGU5NDY1ZjMuLjFkYjI2NjggMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNl
RXhwcmVzc2lvbi5qYXZhCkBAIC03MjcsMTggKzcyNyw2IEBACiAJCX0KIAl9CiAKLQlwdWJsaWMg
TWV0aG9kQmluZGluZyBwcmVwYXJlRm9ySW5mZXJlbmNlUmVzdWx0KFNjb3BlIHNjb3BlKSB7Ci0J
CXRyeSB7Ci0JCQlzZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRFWFQpOwotCQkJ
dGhpcy5iaW5kaW5nID0gbnVsbDsKLQkJCXRoaXMudHJpYWxSZXNvbHV0aW9uID0gdHJ1ZTsKLQkJ
CXJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJcmV0dXJuIHRoaXMuYmluZGlu
ZzsKLQkJfSBmaW5hbGx5IHsKLQkJCXRoaXMudHJpYWxSZXNvbHV0aW9uID0gZmFsc2U7Ci0JCX0K
LQl9Ci0KIAlwdWJsaWMgYm9vbGVhbiBpc0NvbnN0cnVjdG9yUmVmZXJlbmNlKCkgewogCQlyZXR1
cm4gQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zZWxlY3RvciwgIENvbnN0YW50UG9vbC5Jbml0
KTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JvdW5kU2V0LmphdmEKaW5kZXggYTEzMmM5Mi4uYjkzYzA2MyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQu
amF2YQpAQCAtNDU2LDggKzQ1Niw2IEBACiAJCQlpZiAoIWluY29ycG9yYXRlKGNvbnRleHQsIGZy
ZXNoQm91bmRzLCBmcmVzaEJvdW5kcykpCiAJCQkJcmV0dXJuIGZhbHNlOwogCi0JCQl0aGlzLmNh
cHR1cmVzLmNsZWFyKCk7Ci0JCQkKIAkJCS8vIE1lcmdlIHRoZSBib3VuZHMgaW50byBvbmUgaW5j
b3Jwb3JhdGVkIGdlbmVyYXRpb24uCiAJCQlmaW5hbCBpbnQgaW5jb3Jwb3JhdGVkTGVuZ3RoID0g
dGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoOwogCQkJZmluYWwgaW50IHVuaW5jb3Jwb3Jh
dGVkTGVuZ3RoID0gZnJlc2hCb3VuZHMubGVuZ3RoOwpAQCAtNTgzLDcgKzU4MSw5IEBACiAJCXdo
aWxlIChjYXB0SXRlci5oYXNOZXh0KCkpIHsKIAkJCUVudHJ5PFBhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZywgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nPiBjYXB0ID0gY2FwdEl0ZXIubmV4dCgpOwog
CQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBbHBoYSA9IGNhcHQuZ2V0S2V5KCk7Ci0JCQlQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSBjYXB0LmdldFZhbHVlKCk7CisJCQkvLyBXZSBj
b21lIGluIHdpdGggY2FwdHVyZShnQSksIHdlIG5lZWQgdG8gd29yayB3aXRoIGdBIGJlbG93LiBJ
dCB3YXMgbmVjZXNzYXJ5IHRvIGVzdGFibGlzaCBjYXB0dXJlIGF0IHRoZSBjYWxsIHNpdGUuCisJ
CQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgY2dBID0gY2FwdC5nZXRWYWx1ZSgpOworCQkJUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgY2dB
LnVuY2FwdHVyZShjb250ZXh0LnNjb3BlKTsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgZyA9IChSZWZl
cmVuY2VCaW5kaW5nKSBnQS5vcmlnaW5hbCgpOwogCQkJZmluYWwgVHlwZVZhcmlhYmxlQmluZGlu
Z1tdIHBhcmFtZXRlcnMgPSBnLnR5cGVWYXJpYWJsZXMoKTsKIAkJCS8vIGNvbnN0cnVjdCB0aGV0
YSA9IFtQMTo9YWxwaGExLC4uLl0KQEAgLTYwMiw2ICs2MDIsNyBAQAogCQkJCWFkZEJvdW5kcyhw
aS5nZXRUeXBlQm91bmRzKGFscGhhLCB0aGV0YSksIGNvbnRleHQuZW52aXJvbm1lbnQpOwogCiAJ
CQkJVHlwZUJpbmRpbmcgYWkgPSBnQS5hcmd1bWVudHNbaV07CisJCQkJVHlwZUJpbmRpbmcgY2Fp
ID0gY2dBLmFyZ3VtZW50c1tpXTsKIAkJCQlpZiAoYWkgaW5zdGFuY2VvZiBXaWxkY2FyZEJpbmRp
bmcpIHsKIAkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkQmluZGluZyA9IChXaWxkY2FyZEJp
bmRpbmcpYWk7CiAJCQkJCVR5cGVCaW5kaW5nIHQgPSB3aWxkY2FyZEJpbmRpbmcuYm91bmQ7CkBA
IC02MTMsNyArNjE0LDE0IEBACiAJCQkJCQkJaXQgPSB0aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9y
KCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhhc05leHQoKSkgewogCQkJCQkJCQlUeXBlQm91bmQgYm91
bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5m
ZXJlbmNlVmFyaWFibGUpKQorCQkJCQkJCQkvKiBXaXRoIHRoZSBleHBlY3RlZCB0eXBlJ3MgZGVj
bGFyZWQgdHlwZSBiZWluZyBDb2xsZWN0b3I8PyBzdXBlciBULCBBLCBSPiBhbmQgZ0FscGhhIGJl
aW5nIENvbGxlY3RvcjxUIzAsPyMxLExpc3Q8VCMwPiMyPiBhbmQgY2dBIGJlaW5nCisJCQkJCQkJ
CSAgIENvbGxlY3RvcjxUIzAsY2FwdHVyZSMxLW9mID8sTGlzdDxUIzA+Piwgd2l0aG91dCB0aGUg
Y29uc3RyYWludCByZWR1Y3Rpb24gYmVsb3cgLSB3ZSB3aWxsIG5ldmVyIGRpc2NvdmVyIEEgdG8g
YmUgY2FwdHVyZSMxLW9mID8gYW5kCisJCQkJCQkJCSAgIGNsYWltIEEgaXMgamxPLiBTZWUgaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMjQgLSAj
MjcKKwkJCQkJCQkJKi8KKwkJCQkJCQkJaWYgKCFyZWR1Y2VPbmVDb25zdHJhaW50KGNvbnRleHQs
IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoYm91bmQucmlnaHQsIGNhaSwgUmVkdWN0aW9u
UmVzdWx0LlNBTUUpKSkKKwkJCQkJCQkJCXJldHVybiBmYWxzZTsKKwkJCQkJCQkJLy8gT3VyID0g
cmVkdWN0aW9uIHRyYW5zaXRpdmVseSBhZGRzIGEgbmV3IGJvdW5kIHRoYXQgbmVjZXNzaXRhdGVz
IHRoZSBjaGVjayBiZWxvdyBmb3IgY2FwdHVyZS4gCisJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0
IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpICYmICFib3VuZC5yaWdodC5pc0NhcHR1cmUo
KSkKIAkJCQkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJCQl9CiAJCQkJCQl9CkBAIC02NjgsNiAr
Njc2LDcgQEAKIAkJCQl9CiAJCQl9CiAJCX0KKwkJdGhpcy5jYXB0dXJlcy5jbGVhcigpOwogCQly
ZXR1cm4gdHJ1ZTsKIAl9CiAKQEAgLTk1Nyw2ICs5NjYsMjAgQEAKIAkJcmV0dXJuIHRocmVlLmZp
bmRTaW5nbGVXcmFwcGVyVHlwZSgpOwogCX0KIAorCXByaXZhdGUgVHlwZUJpbmRpbmcgYXBwbHlJ
bnN0YW50aWF0aW9ucyhUeXBlQmluZGluZyB0eXBlKSB7CisJCWlmICh0eXBlLmlzUHJvcGVyVHlw
ZSh0cnVlKSkKKwkJCXJldHVybiB0eXBlOworCQorCQlJdGVyYXRvcjxJbmZlcmVuY2VWYXJpYWJs
ZT4gdmFyaWFibGVJdCA9IHRoaXMuYm91bmRzUGVyVmFyaWFibGUua2V5U2V0KCkuaXRlcmF0b3Io
KTsKKwkJd2hpbGUgKHZhcmlhYmxlSXQuaGFzTmV4dCgpKSB7CisJCQlJbmZlcmVuY2VWYXJpYWJs
ZSBpbmZlcmVuY2VWYXJpYWJsZSA9IHZhcmlhYmxlSXQubmV4dCgpOworCQkJVHlwZUJpbmRpbmcg
aW5zdGFudGlhdGlvbiA9IGdldEluc3RhbnRpYXRpb24oaW5mZXJlbmNlVmFyaWFibGUsIG51bGwp
OworCQkJaWYgKGluc3RhbnRpYXRpb24gIT0gbnVsbCkKKwkJCQl0eXBlID0gdHlwZS5zdWJzdGl0
dXRlSW5mZXJlbmNlVmFyaWFibGUoaW5mZXJlbmNlVmFyaWFibGUsIGluc3RhbnRpYXRpb24pOwor
CQl9CisJCXJldHVybiB0eXBlOworCX0KKwkKIAkvLyB0aGlzIGNvbmRpdGlvbiBpcyBqdXN0IHdh
eSB0b28gY29tcGxleCB0byBjaGVjayBpdCBpbi1saW5lOgogCXB1YmxpYyBib29sZWFuIGNvbmRp
dGlvbjE4XzVfMl9idWxsZXRfM18zXzEoSW5mZXJlbmNlVmFyaWFibGUgYWxwaGEsIFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUpIHsKIAkJLy8gVCBpcyBhIHJlZmVyZW5jZSB0eXBlLCBidXQgaXMgbm90
IGEgd2lsZGNhcmQtcGFyYW1ldGVyaXplZCB0eXBlLCBhbmQgZWl0aGVyIApAQCAtOTkyLDggKzEw
MTUsMTYgQEAKIAkJCQlmb3IgKGludCBqPWkrMTsgajxsZW47IGorKykgewogCQkJCQlUeXBlQmlu
ZGluZyBzMiA9IHN1cGVyQm91bmRzLmdldChqKS5yaWdodDsKIAkJCQkJVHlwZUJpbmRpbmdbXSBz
dXBlcnMgPSBzdXBlclR5cGVzV2l0aENvbW1vbkdlbmVyaWNUeXBlKHMxLCBzMik7Ci0JCQkJCWlm
IChzdXBlcnMgIT0gbnVsbCAmJiAhVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHN1cGVyc1swXSwg
c3VwZXJzWzFdKSkKLQkJCQkJCXJldHVybiB0cnVlOworCQkJCQlpZiAoc3VwZXJzICE9IG51bGwp
IHsKKwkJCQkJCS8qIEhhc2hNYXA8SyM4LFYjOT4gYW5kIEhhc2hNYXA8SyM4LEFycmF5TGlzdDxU
Pj4gd2l0aCBhbiBpbnN0YW50aWF0aW9uIGZvciBWOSA9IEFycmF5TGlzdDxUPiBhbHJlYWR5IGlu
IHRoZSAKKwkJCQkJCSAgIGJvdW5kIHNldCBzaG91bGQgbm90IGJlIHNlZW4gYXMgdHdvIGRpZmZl
cmVudCBwYXJhbWV0ZXJpemF0aW9ucyBvZiB0aGUgc2FtZSBnZW5lcmljIGNsYXNzIG9yIGludGVy
ZmFjZS4KKwkJCQkJCSAgIFNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDMyNjI2IGZvciBhIHRlc3QgdGhhdCB0cmlnZ2VycyB0aGlzIGNvbmRpdGlvbi4K
KwkJCQkJCSovCisJCQkJCQlzdXBlcnNbMF0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sw
XSk7CisJCQkJCQlzdXBlcnNbMV0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sxXSk7CisJ
CQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkp
CisJCQkJCQkJcmV0dXJuIHRydWU7CisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0NjYu
LjI4MjA2MzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25G
b3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11
bGEuamF2YQpAQCAtMTcsMTggKzE3LDEzIEBACiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiBpbXBv
cnQgamF2YS51dGlsLlNldDsKIAotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5BU1RWaXNpdG9yOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4
cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5S
ZWZlcmVuY2VFeHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuUmV0dXJuU3RhdGVtZW50OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuU3RhdGVtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4LlN1c3BlbmRlZEluZmVyZW5jZVJl
Y29yZDsKIAogLyoqCkBAIC01Niw0MSArNTEsOCBAQAogCiAJcHVibGljIE9iamVjdCByZWR1Y2Uo
SW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQpIHRocm93cyBJbmZlcmVuY2VGYWls
dXJlRXhjZXB0aW9uIHsKIAkJLy8gSkxTIDE4LjIuMQotCQlwcm9wZXI6CiAJCWlmICh0aGlzLnJp
Z2h0LmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSB0aGlz
LmxlZnQucmVzb2x2ZWRUeXBlOwotCQkJaWYgKGV4cHJUeXBlID09IG51bGwpIHsKLQkJCQkvLyBp
ZiB3ZSBnZXQgaGVyZSBmb3Igc29tZSBraW5kcyBvZiBwb2x5IGV4cHJlc3Npb25zIChpbmNsLiBD
b25kaXRpb25hbEV4cHJlc3Npb24pLAotCQkJCS8vIHRoZW4gb3RoZXIgd2F5cyBmb3IgY2hlY2tp
bmcgY29tcGF0aWJpbGl0eSBhcmUgbmVlZGVkOgotICAgICAgICAgICAgICAgIGlmICh0aGlzLmxl
ZnQgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewotICAgICAgICAgICAgICAgICAg
ICBpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewotICAgICAgICAg
ICAgICAgICAgICAgICAgLy8gY2YuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvblRlc3QudGVzdDQx
MjQ1MygpCi0gICAgICAgICAgICAgICAgICAgICAgICBMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSAo
KExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdCkuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNl
VGFyZ2V0aW5nKHRoaXMucmlnaHQpOwotICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChj
b3B5ICE9IG51bGwgJiYgY29weS5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiBjb3B5LnJlc29sdmVk
VHlwZS5pc1ZhbGlkQmluZGluZygpKSA/IFRSVUUgOiBGQUxTRTsKLSAgICAgICAgICAgICAgICAg
ICAgfQotICAgICAgICAgICAgICAgIH0KLSAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sZWZ0
LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBU
UlVFIDogRkFMU0U7Ci0JCQl9IGVsc2UgaWYgKCFleHByVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7
Ci0JCQkJcmV0dXJuIEZBTFNFOwotCQkJfQotCQkJaWYgKGlzQ29tcGF0aWJsZVdpdGhJbkxvb3Nl
SW52b2NhdGlvbkNvbnRleHQoZXhwclR5cGUsIHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQp
KSB7Ci0JCQkJcmV0dXJuIFRSVUU7Ci0JCQl9IGVsc2UgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9m
IEFsbG9jYXRpb25FeHByZXNzaW9uICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKCkpIHsK
LQkJCQkvLyBoYWxmLXJlc29sdmVkIGRpYW1vbmQgaGFzIGEgcmVzb2x2ZWRUeXBlLCBidXQgdGhh
dCBtYXkgbm90IGJlIHRoZSBmaW5hbCB3b3JkLCB0cnkgb25lIG1vcmUgc3RlcCBvZiByZXNvbHV0
aW9uOgotICAgICAgICAgICAgCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9ICgoQWxsb2NhdGlvbkV4
cHJlc3Npb24pIHRoaXMubGVmdCkuYmluZGluZyh0aGlzLnJpZ2h0LCBmYWxzZSwgbnVsbCk7Ci0g
ICAgICAgICAgICAJcmV0dXJuIChiaW5kaW5nICE9IG51bGwgJiYgYmluZGluZy5kZWNsYXJpbmdD
bGFzcy5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUp
KSA/IFRSVUUgOiBGQUxTRTsKLSAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5sZWZ0IGluc3Rh
bmNlb2YgSW52b2NhdGlvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0gICAg
ICAgICAgICAJSW52b2NhdGlvbiBpbnZvYyA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0gICAg
ICAgICAgICAJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW52b2MuYmluZGluZyh0aGlzLnJpZ2h0
LCBmYWxzZSwgbnVsbCk7Ci0gICAgICAgICAgICAJaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLSAgICAgICAgICAgIAkJUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIGJpbmRpbmc7Ci0JCQkJCUluZmVyZW5jZUNvbnRleHQxOCBsZWZ0Q3R4ID0g
aW52b2MuZ2V0SW5mZXJlbmNlQ29udGV4dChtZXRob2QpOwotICAgICAgICAgICAgCQlpZiAobGVm
dEN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsK
LSAgICAgICAgICAgIAkJCWJyZWFrIHByb3BlcjsgLy8gZmFsbCB0aHJvdWdoIGludG8gbmVzdGVk
IGluZmVyZW5jZSBiZWxvdyAobm90IGV4cGxpY2l0IGluIHRoZSBzcGVjISkKLSAgICAgICAgICAg
IAkJfQotICAgICAgICAgICAgCX0KLSAgICAgICAgICAgIH0KLQkJCXJldHVybiBGQUxTRTsKKwkJ
CXJldHVybiB0aGlzLmxlZnQuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VD
b250ZXh0LnNjb3BlKSB8fCB0aGlzLmxlZnQuaXNCb3hpbmdDb21wYXRpYmxlV2l0aCh0aGlzLnJp
Z2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRSVUUgOiBGQUxTRTsKIAkJfQogCQlpZiAo
IWNhbkJlUG9seUV4cHJlc3Npb24odGhpcy5sZWZ0KSkgewogCQkJVHlwZUJpbmRpbmcgZXhwclR5
cGUgPSB0aGlzLmxlZnQucmVzb2x2ZWRUeXBlOwpAQCAtMTAyLDcgKzY0LDcgQEAKIAkJCS8vIC0g
cGFyZW50aGVzaXplZCBleHByZXNzaW9uIDogdGhlc2UgYXJlIHRyYW5zcGFyZW50IGluIG91ciBB
U1QKIAkJCWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CiAJCQkJSW52b2Nh
dGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIHRoaXMubGVmdDsKLQkJCQlNZXRob2RCaW5k
aW5nIHByZXZpb3VzTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHRoaXMucmlnaHQsIGZhbHNl
LCBudWxsKTsKKwkJCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzTWV0aG9kID0gaW52b2NhdGlvbi5i
aW5kaW5nKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOwogCQkJCWlmIChwcmV2
aW91c01ldGhvZCA9PSBudWxsKSAgCS8vIGNhbiBoYXBwZW4sIGUuZy4sIGlmIGluc2lkZSBhIGNv
cGllZCBsYW1iZGEgd2l0aCBpZ25vcmVkIGVycm9ycwogCQkJCQlyZXR1cm4gbnVsbDsgCQkJCS8v
IC0+IHByb2NlZWQgd2l0aCBubyBuZXcgY29uc3RyYWludHMKIAkJCQlNZXRob2RCaW5kaW5nIG1l
dGhvZCA9IHByZXZpb3VzTWV0aG9kOwpAQCAtMTI3LDggKzg5LDExIEBACiAJCQkJCQkJCXJldHVy
biBGQUxTRTsKIAkJCQkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShleHBy
VHlwZSwgdGhpcy5yaWdodCwgQ09NUEFUSUJMRSwgdGhpcy5pc1NvZnQpOwogCQkJCQkJfQorCQkJ
CQkJaWYgKGlubmVyQ3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVf
SU5GRVJSRUQpIHsKKwkJCQkJCQkvLyBUaGUgY29uc3RyYWludHMgYW5kIGluaXRpYWwgYm91bmRz
IHRoYXQgd291bGQgZWZmZWN0aXZlbHkgcmVkdWNlIHRvIGIzIGFyZSBhbHJlYWR5IHRyYW5zZmVy
cmVkIHRvIGN1cnJlbnQgY29udGV4dCBkdXJpbmcgQyBTZXQgY29uc3RydWN0aW9uLgorCQkJCQkJ
CXJldHVybiBUUlVFOworCQkJCQkJfQogCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VL
aW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKLQkJCQkJCWlubmVyQ3R4Lm91dGVyQ29udGV4
dCA9IGluZmVyZW5jZUNvbnRleHQ7CiAJCQkJCX0KIAkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBt
ZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKG1ldGhv
ZCk7CiAJCQkJCWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwg
bWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpc0RpYW1vbmQsIGluZmVyZW5jZUNvbnRleHQuaW5mZXJl
bmNlS2luZCk7CkBAIC0xODgsMTMgKzE1Myw4IEBACiAJCQkJfQogCQkJCWlmIChmdW5jdGlvblR5
cGUucmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CiAJCQkJCVR5cGVCaW5kaW5nIHIg
PSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsKLQkJCQkJRXhwcmVzc2lvbltdIGV4cHJzOwotCQkJ
CQlpZiAobGFtYmRhLmJvZHkoKSBpbnN0YW5jZW9mIEV4cHJlc3Npb24pIHsKLQkJCQkJCWV4cHJz
ID0gbmV3IEV4cHJlc3Npb25bXSB7KEV4cHJlc3Npb24pbGFtYmRhLmJvZHkoKX07Ci0JCQkJCX0g
ZWxzZSB7Ci0JCQkJCQlleHBycyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOwotCQkJCQl9
Ci0JCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgZXhwcnMubGVuZ3RoOyBpKyspIHsKKwkJCQkJRXhw
cmVzc2lvbltdIGV4cHJzID0gbGFtYmRhLnJlc3VsdEV4cHJlc3Npb25zKCk7CisJCQkJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBleHBycyA9PSBudWxsID8gMCA6IGV4cHJzLmxlbmd0aDsgaSA8
IGxlbmd0aDsgaSsrKSB7CiAJCQkJCQlFeHByZXNzaW9uIGV4cHIgPSBleHByc1tpXTsKIAkJCQkJ
CWlmIChyLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBleHByLnJlc29sdmVkVHlwZSAhPSBudWxsKSB7
CiAJCQkJCQkJVHlwZUJpbmRpbmcgZXhwclR5cGUgPSBleHByLnJlc29sdmVkVHlwZTsKQEAgLTIx
Nyw3ICsxNzcsNyBAQAogCQlyZXR1cm4gRkFMU0U7CiAJfQogCi0JcHVibGljIFJlZmVyZW5jZUJp
bmRpbmcgZmluZEdyb3VuZFRhcmdldFR5cGUoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNv
bnRleHQsIEJsb2NrU2NvcGUgc2NvcGUsCisJcHVibGljIHN0YXRpYyBSZWZlcmVuY2VCaW5kaW5n
IGZpbmRHcm91bmRUYXJnZXRUeXBlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0
LCBCbG9ja1Njb3BlIHNjb3BlLAogCQkJCQkJCQkJCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRh
LCBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZVdpdGhXaWxkQ2FyZHMpCiAJewog
CQlpZiAobGFtYmRhLmFyZ3VtZW50c1R5cGVFbGlkZWQoKSkgewpAQCAtMjU0LDExICsyMTQsOSBA
QAogCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRo
b2QoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0g
bnVsbCkKIAkJCXJldHVybiBGQUxTRTsKLQkJLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBtZXRo
b2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAot
CQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29t
cGlsZVRpbWVNZXRob2RUYXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7Ci0JCWlm
IChwb3RlbnRpYWxseUFwcGxpY2FibGUgPT0gbnVsbCkKLQkJCXJldHVybiBGQUxTRTsKKwogCQlp
ZiAocmVmZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgeworCQkJTWV0aG9kQmluZGlu
ZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJ
CQlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8
Q29uc3RyYWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUu
cGFyYW1ldGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yNjgsNiArMjI2LDggQEAKIAkJ
CWlmIChuID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZv
cm11bGEuY3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxF
KSk7CiAJCQkJb2Zmc2V0ID0gMTsKKwkJCX0gZWxzZSBpZiAobiAhPSBrKSB7CisJCQkJcmV0dXJu
IEZBTFNFOwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQlu
ZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJp
bWVbaS1vZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNzYsMTEgKzIzNiwxNSBAQAogCQkJCVR5
cGVCaW5kaW5nIHJBcHBsID0gcG90ZW50aWFsbHlBcHBsaWNhYmxlLmlzQ29uc3RydWN0b3IoKSAm
JiAhcmVmZXJlbmNlLmlzQXJyYXlDb25zdHJ1Y3RvclJlZmVyZW5jZSgpID8gcG90ZW50aWFsbHlB
cHBsaWNhYmxlLmRlY2xhcmluZ0NsYXNzIDogcG90ZW50aWFsbHlBcHBsaWNhYmxlLnJldHVyblR5
cGU7CiAJCQkJaWYgKHJBcHBsID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJCXJldHVybiBGQUxT
RTsKLQkJCQlUeXBlQmluZGluZyByUHJpbWUgPSByQXBwbC5jYXB0dXJlKGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUsIDE0KTsgLy8gRklYTUUgY2FwdHVyZSBwb3NpdGlvbj8/CisJCQkJVHlwZUJpbmRp
bmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCByZWZlcmVu
Y2Uuc291cmNlRW5kKTsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmNyZWF0ZShyUHJpbWUsIHIsIENPTVBBVElCTEUpKTsKIAkJCX0KIAkJCXJldHVybiBuZXdD
b25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5z
aXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAorCQkJTWV0aG9kQmluZGluZyBwb3RlbnRp
YWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5n
KHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxl
IG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMu
MSksCisJCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCisJCQkJcmV0dXJuIEZB
TFNFOworCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBlLnBhcmFt
ZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMjk5LDcgKzI2Myw3IEBACiAJCQlUeXBl
QmluZGluZyBjb21waWxlVHlwZVJldHVybiA9IG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSA/IG9y
aWdpbmFsLmRlY2xhcmluZ0NsYXNzIDogb3JpZ2luYWwucmV0dXJuVHlwZTsKIAkJCWlmIChyZWZl
cmVuY2UudHlwZUFyZ3VtZW50cyA9PSBudWxsCiAJCQkJCSYmICgob3JpZ2luYWwudHlwZVZhcmlh
YmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgY29tcGlsZVR5cGVSZXR1cm4u
bWVudGlvbnNBbnkob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCAtMSkpCi0JCQkJCQl8fCAob3Jp
Z2luYWwuaXNDb25zdHJ1Y3RvcigpICYmIG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNzLnR5cGVWYXJp
YWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSkpCisJCQkJCQl8fCAob3JpZ2lu
YWwuaXNDb25zdHJ1Y3RvcigpICYmIGNvbXBpbGVUaW1lRGVjbC5kZWNsYXJpbmdDbGFzcy5pc1Jh
d1R5cGUoKSkpKQogCQkJCQkJCS8vIG5vdCBjaGVja2luZyByLm1lbnRpb25zQW55IGZvciBjb25z
dHJ1Y3RvcnMsIGJlY2F1c2UgQTo6bmV3IHJlc29sdmVzIHRvIHRoZSByYXcgdHlwZQogCQkJCQkJ
CS8vIHdoZXJlYXMgaW4gZmFjdCB0aGUgdHlwZSBvZiBhbGwgZXhwcmVzc2lvbnMgb2YgdGhpcyBz
aGFwZSBkZXBlbmRzIG9uIHRoZWlyIHR5cGUgdmFyaWFibGUgKGlmIGFueSkKIAkJCXsKQEAgLTMy
MSw3ICsyODUsNyBAQAogCQkJCQlpbmZlcmVuY2VDb250ZXh0LnJlc3VtZVN1c3BlbmRlZEluZmVy
ZW5jZShwcmV2SW52b2NhdGlvbik7CiAJCQkJfQogCQkJfQotCQkJVHlwZUJpbmRpbmcgclByaW1l
ID0gY29tcGlsZVRpbWVEZWNsLmlzQ29uc3RydWN0b3IoKSA/IGNvbXBpbGVUaW1lRGVjbC5kZWNs
YXJpbmdDbGFzcyA6IGNvbXBpbGVUaW1lRGVjbC5yZXR1cm5UeXBlOworCQkJVHlwZUJpbmRpbmcg
clByaW1lID0gY29tcGlsZVRpbWVEZWNsLmlzQ29uc3RydWN0b3IoKSA/IGNvbXBpbGVUaW1lRGVj
bC5kZWNsYXJpbmdDbGFzcyA6IGNvbXBpbGVUaW1lRGVjbC5yZXR1cm5UeXBlLmNhcHR1cmUoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgcmVmZXJlbmNlLnNvdXJjZUVuZCgpKTsKIAkJCWlmIChyUHJp
bWUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQpCiAJCQkJcmV0dXJuIEZBTFNFOwogCQkJcmV0dXJuIENv
bnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoclByaW1lLCByLCBDT01QQVRJQkxFLCB0aGlzLmlz
U29mdCk7CkBAIC0zODQsNyArMzQ4LDcgQEAKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFz
ID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50
cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4
dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6
ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBwYXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdU
eXBlKCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZl
cmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJp
emVkVHlwZSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVu
dHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRh
LCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9j
YXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7IC8vIGVzdGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUg
bm9ubnVsbCBhcmd1bWVudHMKIAkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWlu
dCA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBB
VElCTEUpOwogCQkJCXJldHVybiBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRl
KG5ld0NvbnN0cmFpbnQpOwogCQkJfQpAQCAtNDA0LDcgKzM2OCw3IEBACiAJCQkJCUJvdW5kU2V0
IHNvbHV0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVb
XXthbHBoYX0pOwogCQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxz
ZTsKLQkJCQkJVHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEs
IG51bGwpLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291
cmNlU3RhcnQoKSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CisJCQkJCVR5cGVCaW5k
aW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGlu
ZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKTsKIAkJCQkJ
Q29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11
bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCQlyZXR1cm4gaW5mZXJl
bmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCQl9CkBA
IC00MzcsMTcgKzQwMSw5IEBACiAJCQkJCS8vIGlpKQogCQkJCQlmaW5hbCBUeXBlQmluZGluZyBy
ID0gc2FtLnJldHVyblR5cGU7CiAJCQkJCUxhbWJkYUV4cHJlc3Npb24gcmVzb2x2ZWQgPSBsYW1i
ZGEuZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOwotCQkJ
CQlTdGF0ZW1lbnQgYm9keSA9IHJlc29sdmVkICE9IG51bGwgPyByZXNvbHZlZC5ib2R5KCkgOiBs
YW1iZGEuYm9keSgpOwotCQkJCQlpZiAoYm9keSBpbnN0YW5jZW9mIEV4cHJlc3Npb24pIHsKLQkJ
CQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSgoRXhw
cmVzc2lvbikgYm9keSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJsZXMoY29udGV4dCkpOwot
CQkJCQl9IGVsc2UgewotCQkJCQkJLy8gVE9ETzogc2hvdWxkIEkgdXNlIExhbWJkYUV4cHJlc3Np
b24ucmVzdWx0RXhwcmVzc2lvbnM/IChpcyBjdXJyZW50bHkgcHJpdmF0ZSkuCi0JCQkJCQlib2R5
LnRyYXZlcnNlKG5ldyBBU1RWaXNpdG9yKCkgewotCQkJCQkJCXB1YmxpYyBib29sZWFuIHZpc2l0
KFJldHVyblN0YXRlbWVudCByZXR1cm5TdGF0ZW1lbnQsIEJsb2NrU2NvcGUgc2NvcGUpIHsKLQkJ
CQkJCQkJdmFyaWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKHJl
dHVyblN0YXRlbWVudC5leHByZXNzaW9uLCByLCBDT01QQVRJQkxFKS5pbnB1dFZhcmlhYmxlcyhj
b250ZXh0KSk7Ci0JCQkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJCQl9Ci0JCQkJCQl9LCAoQmxv
Y2tTY29wZSludWxsKTsKKwkJCQkJRXhwcmVzc2lvbltdIHJlc3VsdEV4cHJlc3Npb25zID0gcmVz
b2x2ZWQgIT0gbnVsbCA/IHJlc29sdmVkLnJlc3VsdEV4cHJlc3Npb25zKCkgOiBudWxsOworCQkJ
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gcmVzdWx0RXhwcmVzc2lvbnMgPT0gbnVsbCA/IDAg
OiByZXN1bHRFeHByZXNzaW9ucy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQkJdmFy
aWFibGVzLmFkZEFsbChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKHJlc3VsdEV4cHJl
c3Npb25zW2ldLCByLCBDT01QQVRJQkxFKS5pbnB1dFZhcmlhYmxlcyhjb250ZXh0KSk7CiAJCQkJ
CX0KIAkJCQl9CiAJCQkJcmV0dXJuIHZhcmlhYmxlczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRU
eXBlRm9ybXVsYS5qYXZhCmluZGV4IGNhM2NjMGYuLjIwYmE5NWUgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50VHlwZUZvcm11bGEuamF2YQpAQCAtMTMsNiArMTMsNyBAQAogaW1wb3J0IGphdmEu
dXRpbC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiAKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIAogLyoqCkBAIC0zMTEs
NiArMzEyLDEzIEBACiAJCQkJCXJlc3VsdFtpXSA9IENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVh
dGUoc3ViQ2FuZGlkYXRlLCBpbnRlcnNlY3RpbmdUeXBlc1tpXSwgU1VCVFlQRSwgdGhpcy5pc1Nv
ZnQpOwogCQkJCX0KIAkJCQlyZXR1cm4gcmVzdWx0OworCQkJY2FzZSBCaW5kaW5nLlBPTFlfVFlQ
RToKKwkJCQlQb2x5VHlwZUJpbmRpbmcgcG9seSA9IChQb2x5VHlwZUJpbmRpbmcpIHN1cGVyQ2Fu
ZGlkYXRlOworCQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBwb2x5LmV4
cHJlc3Npb247CisJCQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW52b2NhdGlvbi5iaW5kaW5n
KHN1YkNhbmRpZGF0ZSwgc2NvcGUpOworCQkJCWlmIChiaW5kaW5nID09IG51bGwgfHwgIWJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkKKwkJCQkJcmV0dXJuIEZBTFNFOworCQkJCXJldHVybiByZWR1
Y2VTdWJUeXBlKHNjb3BlLCBzdWJDYW5kaWRhdGUsIGJpbmRpbmcucmV0dXJuVHlwZS5jYXB0dXJl
KHNjb3BlLCBpbnZvY2F0aW9uLnNvdXJjZUVuZCgpKSk7CiAJCX0KIAkJdGhyb3cgbmV3IElsbGVn
YWxTdGF0ZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBSSFMgIitzdXBlckNhbmRpZGF0ZSk7IC8vJE5P
Ti1OTFMtMSQKIAl9CkBAIC0zNDcsMjcgKzM1NSwxMyBAQAogCQkJcmV0dXJuIHRydWU7CiAJCWlm
ICghKGNiIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSkgewogCQkJLy8gaWYg
QyBpcyBwYXJhbWV0ZXJpemVkIHdpdGggaXRzIG93biB0eXBlIHZhcmlhYmxlcywgdGhlcmUncmUg
bm8gbW9yZSBjb25zdHJhaW50cyB0byBiZSBjcmVhdGVkIGhlcmUsIG90aGVyd2lzZSBsZXQncyBm
YWlsCi0JCQlyZXR1cm4gaXNJbnNpZ25pZmljYW50UGFyYW1ldGVyaXplZChjYSk7CisJCQlyZXR1
cm4gY2EuaXNQYXJhbWV0ZXJpemVkV2l0aE93blZhcmlhYmxlcygpOwogCQl9CiAJCVR5cGVCaW5k
aW5nW10gYmkgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgY2IpLmFyZ3VtZW50czsKIAkJ
aWYgKGNiLmlzUmF3VHlwZSgpIHx8IGJpID09IG51bGwgfHwgYmkubGVuZ3RoID09IDApCiAJCQly
ZXR1cm4gKHRoaXMuaXNTb2Z0ICYmIEluZmVyZW5jZUNvbnRleHQxOC5TSU1VTEFURV9CVUdfSkRL
XzgwMjY1MjcpID8gdHJ1ZSA6IGZhbHNlOyAvLyBGQUxTRSB3b3VsZCBjb25mb3JtIHRvIHRoZSBz
cGVjIAogCQlmb3IgKGludCBpID0gMDsgaSA8IGFpLmxlbmd0aDsgaSsrKQogCQkJY29uc3RyYWlu
dHMuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUoYmlbaV0sIGFpW2ldLCBUWVBFX0FS
R1VNRU5UX0NPTlRBSU5FRCwgdGhpcy5pc1NvZnQpKTsKLQkJcmV0dXJuIHRydWU7Ci0JfQotCi0J
cHJpdmF0ZSBib29sZWFuIGlzSW5zaWduaWZpY2FudFBhcmFtZXRlcml6ZWQoUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nIGNhKSB7Ci0JCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVz
ID0gY2Eub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzKCk7Ci0JCVR5cGVCaW5kaW5nW10gdHlwZUFy
Z3VtZW50cyA9IGNhLmFyZ3VtZW50czsKLQkJaWYgKHR5cGVWYXJpYWJsZXMgPT0gbnVsbCB8fCB0
eXBlQXJndW1lbnRzID09IG51bGwpCi0JCQlyZXR1cm4gdHlwZVZhcmlhYmxlcyA9PSB0eXBlQXJn
dW1lbnRzOwotCQlpZiAodHlwZVZhcmlhYmxlcy5sZW5ndGggIT0gdHlwZUFyZ3VtZW50cy5sZW5n
dGgpCi0JCQlyZXR1cm4gZmFsc2U7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgdHlwZUFyZ3VtZW50
cy5sZW5ndGg7IGkrKykgewotCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyh0eXBlVmFyaWFi
bGVzW2ldLCB0eXBlQXJndW1lbnRzW2ldKSkKLQkJCQlyZXR1cm4gZmFsc2U7Ci0JCX0KIAkJcmV0
dXJuIHRydWU7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRl
eHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCA2
MWZiY2MwLi5kNDAxNWVkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRl
eHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAg
LTIzLDE2ICsyMywxMiBAQAogaW1wb3J0IGphdmEudXRpbC5TZXQ7CiAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5GdW5jdGlvbmFsRXhwcmVzc2lv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRp
b247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFF
eHByZXNzaW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
TWVzc2FnZVNlbmQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5OdWxsQW5ub3RhdGlvbk1hdGNoaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuUmVmZXJlbmNlRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlN0YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJkOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNvcnRpbmc7CiAKQEAgLTk1LDQxICs5MSw5IEBACiAg
KiA8ZHQ+MTguNS40IE1vcmUgU3BlY2lmaWMgTWV0aG9kIEluZmVyZW5jZTwvZHQ+CiAgKiA8ZGQ+
PGVtPk5vdCBZZXQgSW1wbGVtZW50ZWQ8L2VtPjwvZGQ+CiAgKiA8L2RsPgotICogRm9yIDE4LjUu
MSBhbmQgMTguNS4yIHNvbWUgaGlnaC1sZXZlbCBjb250cm9sIGlzIGltcGxlbWVudGVkIGluCi0g
KiAge0BsaW5rIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyNjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1tdLCBTY29wZSwgSW52b2NhdGlv
blNpdGUsIGludCl9LgorICogRm9yIDE4LjUuMSBhbmQgMTguNS4yIGhpZ2gtbGV2ZWwgY29udHJv
bCBpcyBpbXBsZW1lbnRlZCBpbgorICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRp
bmdbXSwgU2NvcGUsIEludm9jYXRpb25TaXRlKX0uCiAgKiA8aDI+SW5mZXJlbmNlIExpZmVjeWNs
ZTwvaDI+Ci0gKiBUaGUgc2VwYXJhdGlvbiBpbnRvIDE4LjUuMSBhbmQgMTguNS4yIGNhdXNlcyBz
b21lIGNvbXBsZXhpdHk6Ci0gKiA8dWw+Ci0gKiA8bGk+Q2FsbGluZyBib3RoIHBhcnRzIG9mIGlu
ZmVyZW5jZSBpcyBkaXJlY3RseSBpbnRlcndvdmVuIHdpdGggb3ZlcmxvYWQgcmVzb2x1dGlvbi4g
U2VlIAotICoge0BsaW5rIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyNjb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1tdLCBTY29wZSwgSW52
b2NhdGlvblNpdGUsIGludCkKLSAqIAkJUEdNQiNjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpfSBm
b3IgdGhlIGJhc2ljIDxiPnByb3RvY29sPC9iPi48L2xpPgotICogPGxpPkludGVybWVkaWF0ZSA8
Yj5zdGF0ZTwvYj4gcmVnYXJkaW5nIGluZmVyZW5jZSBtdXN0IGJlIHN0b3JlZCBiZXR3ZWVuIGJv
dGggcGhhc2VzLiBJbmZlcmVuY2UgaXMgcGVyZm9ybWVkIHdpdGggZGlmZmVyZW50Ci0gKiAgIGlu
cHV0cyBmb3IgZWFjaCBwYWlyIG9mIHtAbGluayBJbnZvY2F0aW9ufSB4IHtAbGluayBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmd9LAotICogICAgc2VlIHtAbGluayBJbnZvY2F0aW9u
I3JlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcsIEluZmVyZW5jZUNvbnRleHQxOCkgSW52b2NhdGlvbi5yZWdpc3RlckluZmVyZW5jZUNvbnRl
eHQoKX0gYW5kCi0gKiAgICB7QGxpbmsgSW52b2NhdGlvbiNnZXRJbmZlcmVuY2VDb250ZXh0KFBh
cmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBnZXRJbmZlcmVuY2VDb250ZXh0KCl9Ljxici8+Ci0g
KiAgICBBcyBwYXJ0IG9mIHRoZSBsaWZlY3ljbGUgc3RhdGUsIGVhY2ggaW5zdGFuY2Ugb2YgSW5m
ZXJlbmNlQ29udGV4dDE4IHJlbWVtYmVycyB0aGUgY3VycmVudCB7QGxpbmsgI2luZmVyZW5jZUtp
bmR9Ci0gKiAgICBhbmQge0BsaW5rICNzdGVwQ29tcGxldGVkfS48L2xpPgotICogPGxpPjxiPk5l
c3RlZCBpbmZlcmVuY2UvcmVzb2x2aW5nPC9iPjogSWYgYW4gaW52b2NhdGlvbiBhcmd1bWVudCBp
cyBhIHBvbHkgZXhwcmVzc2lvbiBpdHNlbGYsIGZpbmFsIHJlc29sdmluZyBvZiB0aGUgYXJndW1l
bnQgY2FuIG9ubHkgaGFwcGVuZWQKLSAqICAgIGFmdGVyIEludm9jYXRpb24gVHlwZSBJbmZlcmVu
Y2UgcmVnYXJkaW5nIHRoZSBvdXRlciBpbnZvY2F0aW9uLiBPdXRlciBpbmZlcmVuY2UgbXVzdCBw
cm9kdWNlIHRoZSA8Yj50YXJnZXQgdHlwZTwvYj4gdGhhdCBkcml2ZXMKLSAqICAgIHRoZSBpbm5l
ciBpbmZlcmVuY2UgLyByZXNvbHZpbmcuIFR3byBkaWZmZXJlbnQgcHJvdG9jb2xzIGFyZSBhcHBs
aWVkOgotICogICAgPHVsPgotICogICAgPGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24g
aXMgYW4gaW52b2NhdGlvbiwgaW5uZXIgaW5mZXJlbmNlIGlzIGRpcmVjdGx5IGluY29ycG9yYXRl
ZCBpbnRvCi0gKiAgICAgIHRoZSB7QGxpbmsgI2N1cnJlbnRCb3VuZHN9LCBzZWUgYmxvY2sgaW5z
aWRlIHtAbGluayBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEjcmVkdWNlKEluZmVyZW5jZUNv
bnRleHQxOCl9Ljxici8+Ci0gKiAgICAgIEluIHRoaXMgY2FzZSB0aGUgcmVzdWx0cyBvZiB0aGUg
Y29tYmluZWQgaW5mZXJlbmNlIG5lZWQgdG8gYmUgYXBwbGllZCB0byBhbGwgY29udGFpbmVkIGlu
bmVyIGludm9jYXRpb25zLAotICogICAgICB3aGljaCBoYXBwZW5zIGluIHtAbGluayAjcmViaW5k
SW5uZXJQb2xpZXMoQm91bmRTZXQsIFR5cGVCaW5kaW5nW10pfSwgd2hpY2ggbXVzdCBiZSBjYWxs
ZWQgd2hlbmV2ZXIKLSAqICAgICAgMTguNS4yIGZpbmlzaGVzLjwvbGk+Ci0gKiAgICA8bGk+SWYg
dGhlIGlubmVyIHBvbHkgZXhwcmVzc2lvbiBpcyBhIGZ1bmN0aW9uYWwgZXhwcmVzc2lvbiBvciBh
IGNvbmRpdGlvbmFsIGV4cHJlc3Npb24gbm8gaW5mZXJlbmNlIHZhcmlhYmxlcwotICogICAgICBl
eGlzdCByZXByZXNlbnRpbmcgdGhlIGlubmVyLiBJbiB0aGlzIGNhc2UgdGhlIGZpbmFsIHRhcmdl
dCB0eXBlIGlzIHB1c2hlZCBpbnRvIHRoZSBpbm5lciB1c2luZwotICogICAgICB7QGxpbmsgRXhw
cmVzc2lvbiNjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcsIFNjb3BlKX0s
IHdoaWNoLCB0b28sIGlzIGNhbGxlZCBmcm9tIAotICogICAgICB7QGxpbmsgI3JlYmluZElubmVy
UG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0uPC9saT4KLSAqICAgIDxsaT5Gb3IgcmVj
dXJzaXZlbHkgcHVzaGluZyB0YXJnZXQgdHlwZXMgaW50byBhcmd1bWVudHMgb2YgYW4gaW52b2Nh
dGlvbgotICogICAgCW1ldGhvZCB7QGxpbmsgQVNUTm9kZSNyZXNvbHZlUG9seUV4cHJlc3Npb25B
cmd1bWVudHMoSW52b2NhdGlvbiwgTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUp
fSBleGlzdHMsCi0gKiAgICAJd2hpY2ggaXMgY2FsbGVkIGluIHR3byBzaXR1YXRpb25zOiAoMSkg
Zm9yIG5vbi1nZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20gTWVzc2FnZVNlbmQjZmluZE1l
dGhvZEJpbmRpbmcoKSBhbmQKLSAqICAgIAlTdGF0ZW1lbnQjZmluZENvbnN0cnVjdG9yQmluZGlu
ZygpOyAoMikgZm9yIGdlbmVyaWMgb3V0ZXIgaW52b2NhdGlvbnMgZnJvbSB7QGxpbmsgI3JlYmlu
ZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0uPC9saT4KLSAqICAgIDxsaT5J
biBzb21lIHNpdHVhdGlvbnMgaW52b2NhdGlvbiBhcmd1bWVudHMgdGhhdCBhcmUgcG9seSBpbnZv
Y2F0aW9ucyBuZWVkIHRvIGJlIHJlc29sdmVkIGluIHRoZSBtaWRkbGUgb2Ygb3ZlcmxvYWQgcmVz
b2x1dGlvbgotICogICAgCXRvIGFuc3dlciB7QGxpbmsgU2NvcGUjcGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsMTh9ICh3aGVyZSB0aGUgb3V0ZXIgaW52b2NhdGlvbiBkaWQgbm90IGludm9sdmUg
YW55IGluZmVyZW5jZSkuPGJyLz4KLSAqICAgIDwvdWw+Ci0gKiAgICBQdXNoaW5nIGluZmVyZW5j
ZSByZXN1bHRzIGludG8gYW4gaW5uZXIgaW52b2NhdGlvbiBoYXBwZW5zIHVzaW5nIHtAbGluayBJ
bnZvY2F0aW9uI3VwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmcpfS48L2xp
PgogICogPGxpPkRlY2lzaW9uIHdoZXRoZXIgb3Igbm90IGFuIGludm9jYXRpb24gaXMgYSA8Yj52
YXJpYWJsZS1hcml0eTwvYj4gaW52b2NhdGlvbiBpcyBtYWRlIGJ5IGZpcnN0IGF0dGVtcHRpbmcK
ICAqIAkJdG8gc29sdmUgMTguNS4xIGluIG1vZGUge0BsaW5rICNDSEVDS19MT09TRX0uIE9ubHkg
aWYgdGhhdCBmYWlscywgYW5vdGhlciBhdHRlbXB0IGlzIG1hZGUgaW4gbW9kZSB7QGxpbmsgI0NI
RUNLX1ZBUkFSR30uCiAgKiAJCVdoaWNoIG9mIHRoZXNlIHR3byBhdHRlbXB0cyB3YXMgc3VjY2Vz
c2Z1bCBpcyBzdG9yZWQgaW4ge0BsaW5rICNpbmZlcmVuY2VLaW5kfS4KQEAgLTE2NSw5ICsxMjks
NiBAQAogCS8qKiBUaGUgYWNjdW11bGF0ZWQgdHlwZSBib3VuZHMgZXRjLiAqLwogCUJvdW5kU2V0
IGN1cnJlbnRCb3VuZHM7CiAKLQkvKiogc29sdXRpb24gb2YgYXBwbGljYWJpbGl0eSBpbmZlcmVu
Y2UsIHN0b3JlZCBmb3IgdXNlIGFzIGZhbGxiYWNrLCBpZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJl
bmNlIGZhaWxzLiAqLwotCUJvdW5kU2V0IHN0b3JlZFNvbHV0aW9uOwotCiAJLyoqIEZvciBlYWNo
IGNhbmRpZGF0ZSB0YXJnZXQgdHlwZSBpbXBvc2VkIGZyb20gdGhlIG91dHNpZGUgc3RvcmUgdGhl
IHNvbHV0aW9uIG9mIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UuICovCiAJTWFwPFR5cGVCaW5k
aW5nLFNvbHV0aW9uPiBzb2x1dGlvbnNQZXJUYXJnZXRUeXBlID0gbmV3IEhhc2hNYXA8VHlwZUJp
bmRpbmcsIFNvbHV0aW9uPigpOwogCkBAIC0xODYsMTQgKzE0Nyw2IEBACiAJCiAJLyoqIFNpZ25h
bHMgd2hldGhlciBhbnkgdHlwZSBjb21wYXRpYmlsaXR5IG1ha2VzIHVzZSBvZiB1bmNoZWNrZWQg
Y29udmVyc2lvbi4gKi8KIAlwdWJsaWMgTGlzdDxDb25zdHJhaW50Rm9ybXVsYT4gY29uc3RyYWlu
dHNXaXRoVW5jaGVja2VkQ29udmVyc2lvbjsKLQotCS8vIC0tLQotCi0JLyoqIElubmVyIHBvbHkg
aW52b2NhdGlvbnMgd2hpY2ggaGF2ZSBiZWVuIGluY2x1ZGVkIGluIHRoaXMgaW5mZXJlbmNlLiAq
LwotCUxpc3Q8SW52b2NhdGlvblNpdGU+IGlubmVyUG9saWVzID0gbmV3IEFycmF5TGlzdDxJbnZv
Y2F0aW9uU2l0ZT4oKTsKLQkvKiogTGluayB0byBhbiBvdXRlciBpbmZlcmVuY2UgY29udGV4dCwg
dXNlZCBmb3IgYnVuZGxlZCBlcnJvciByZXBvcnRpbmcuICovCi0JcHVibGljIEluZmVyZW5jZUNv
bnRleHQxOCBvdXRlckNvbnRleHQ7Ci0JcHJpdmF0ZSBBcnJheUxpc3Q8TWV0aG9kQmluZGluZz4g
cHJvYmxlbU1ldGhvZHM7CiAKIAlTY29wZSBzY29wZTsKIAlMb29rdXBFbnZpcm9ubWVudCBlbnZp
cm9ubWVudDsKQEAgLTM3Miw3ICszMjUsNiBAQAogCX0KIAogCS8qKiBKTFMgMTguNS4yIEludm9j
YXRpb24gVHlwZSBJbmZlcmVuY2UgCi0JICogPHA+Q2FsbGVycyBhcmUgcmVzcG9uc2libGUgZm9y
IGFueSBwb3N0LXByb2Nlc3NpbmcgKHNlZSB7QGxpbmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5k
U2V0LCBUeXBlQmluZGluZ1tdKX0pLjwvcD4KIAkgKiBAcGFyYW0gYjEgInRoZSBib3VuZCBzZXQg
cHJvZHVjZWQgYnkgcmVkdWN0aW9uIGluIG9yZGVyIHRvIGRlbW9uc3RyYXRlIHRoYXQgbSBpcyBh
cHBsaWNhYmxlIGluIDE4LjUuMSIKIAkgKi8KIAlwdWJsaWMgQm91bmRTZXQgaW5mZXJJbnZvY2F0
aW9uVHlwZShCb3VuZFNldCBiMSwgVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlLCBJbnZvY2F0aW9u
U2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0aG9kQmluZGluZyBtZXRob2QpCkBAIC0zOTgsOSArMzUw
LDkgQEAKIAkJCX0KIAkJCS8vIDQuIGJ1bGxldDogYXNzZW1ibGUgQzoKIAkJCVNldDxDb25zdHJh
aW50Rm9ybXVsYT4gYyA9IG5ldyBIYXNoU2V0PENvbnN0cmFpbnRGb3JtdWxhPigpOwotCQkJaWYg
KCFhZGRDb25zdHJhaW50c1RvQyh0aGlzLmludm9jYXRpb25Bcmd1bWVudHMsIGMsIG1ldGhvZCwg
dGhpcy5pbmZlcmVuY2VLaW5kKSkKKwkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZv
Y2F0aW9uQXJndW1lbnRzLCBjLCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCwgZmFsc2UpKQog
CQkJCXJldHVybiBudWxsOwotCQkJLy8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjMgZnJvbSBDCisJ
CQkvLyA1LiBidWxsZXQ6IGRldGVybWluZSBCNCBmcm9tIEMKIAkJCXdoaWxlICghYy5pc0VtcHR5
KCkpIHsKIAkJCQkvLyAqCiAJCQkJU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBib3R0b21TZXQgPSBm
aW5kQm90dG9tU2V0KGMsIGFsbE91dHB1dFZhcmlhYmxlcyhjKSk7CkBAIC00NTAsNyArNDAyLDcg
QEAKIAkJfQogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1RvQyhFeHByZXNz
aW9uW10gZXhwcnMsIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgTWV0aG9kQmluZGluZyBtZXRo
b2QsIGludCBpbmZlcmVuY2VLaW5kRm9yTWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENv
bnN0cmFpbnRzVG9DKEV4cHJlc3Npb25bXSBleHBycywgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBj
LCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgaW50IGluZmVyZW5jZUtpbmRGb3JNZXRob2QsIGJvb2xl
YW4gaW50ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKIAkJVHlw
ZUJpbmRpbmdbXSBmczsKIAkJaWYgKGV4cHJzICE9IG51bGwpIHsKIAkJCWludCBrID0gZXhwcnMu
bGVuZ3RoOwpAQCAtNDcxLDExOSArNDIzLDg2IEBACiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGs7
IGkrKykgewogCQkJCVR5cGVCaW5kaW5nIGZzaSA9IGZzW01hdGgubWluKGksIHAtMSldOwogCQkJ
CVR5cGVCaW5kaW5nIHN1YnN0RiA9IHN1YnN0aXR1dGUoZnNpKTsKLQkJCQlpZiAoIWFkZENvbnN0
cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0sIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QpKQorCQkJ
CWlmICghYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihleHByc1tpXSwgYywgZnNpLCBzdWJzdEYs
IG1ldGhvZCwgaW50ZXJsZWF2ZWQpKQogCQkJCQlyZXR1cm4gZmFsc2U7CiAJICAgICAgICB9CiAJ
CX0KIAkJcmV0dXJuIHRydWU7CiAJfQogCi0JcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRz
VG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBU
eXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2Qp
IHsKKwlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihFeHByZXNzaW9u
IGV4cHJpLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIFR5cGVCaW5kaW5nIGZzaSwgVHlwZUJp
bmRpbmcgc3Vic3RGLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgYm9vbGVhbiBpbnRlcmxlYXZlZCkg
dGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24geworCQkKKwkJLy8gU2VlIGh0dHBzOi8v
YnVncy5vcGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1MjMyNSBmb3IgZXhjbHVzaW9uIG9m
IHBvbHkgZXhwcmVzc2lvbnMgdGFyZ2V0aW5nIHByb3BlciB0eXBlcy4gQ0VGLnJlZHVjZSB2YWxp
ZGF0ZXMgCisJCS8vIHRoYXQgdGhleSBhcmUgY29tcGF0aWJsZSBpbiBhIGxvb3NlIGludm9jYXRp
b24gY29udGV4dCBhZ2FpbnN0IHRoZSB0YXJnZXQgdHlwZS4gVGhleSBjb250cmlidXRlIG5vdGhp
bmcgZnVydGhlciB0byBzb2x2aW5nIHRoZSBmb3JtdWxhcy4KKwkJaWYgKHN1YnN0Ri5pc1Byb3Bl
clR5cGUodHJ1ZSkpCisJCQlyZXR1cm4gdHJ1ZTsKKwkJCiAJCS8vIEZvciBhbGwgaSAoMSDiiaQg
aSDiiaQgayksIGlmIGVpIGlzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eSwgdGhlIHNl
dCBjb250YWlucyDin6hlaSDihpIgzrggRmnin6kuCiAJCWlmICghZXhwcmkuaXNQZXJ0aW5lbnRU
b0FwcGxpY2FiaWxpdHkoZnNpLCBtZXRob2QpKSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWludEV4
cHJlc3Npb25Gb3JtdWxhKGV4cHJpLCBzdWJzdEYsIFJlZHVjdGlvblJlc3VsdC5DT01QQVRJQkxF
LCBBUkdVTUVOVF9DT05TVFJBSU5UU19BUkVfU09GVCkpOwogCQl9CiAJCWlmIChleHByaSBpbnN0
YW5jZW9mIEZ1bmN0aW9uYWxFeHByZXNzaW9uKSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWludEV4
Y2VwdGlvbkZvcm11bGEoKEZ1bmN0aW9uYWxFeHByZXNzaW9uKSBleHByaSwgc3Vic3RGKSk7CisJ
CQlpZiAoZXhwcmkgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CisJCQkJTGFtYmRhRXhw
cmVzc2lvbiBsYW1iZGEgPSAoTGFtYmRhRXhwcmVzc2lvbikgZXhwcmk7CisJCQkJQmxvY2tTY29w
ZSBza29wZSA9IGxhbWJkYS5lbmNsb3NpbmdTY29wZTsKKwkJCQlpZiAoc3Vic3RGLmlzRnVuY3Rp
b25hbEludGVyZmFjZShza29wZSkpIHsgLy8gY291bGQgYmUgYW4gaW5mZXJlbmNlIHZhcmlhYmxl
LgorCQkJCQlSZWZlcmVuY2VCaW5kaW5nIHQgPSAoUmVmZXJlbmNlQmluZGluZykgc3Vic3RGOwor
CQkJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgd2l0aFdpbGRDYXJkcyA9IEluZmVyZW5jZUNv
bnRleHQxOC5wYXJhbWV0ZXJpemVkV2l0aFdpbGRjYXJkKHQpOworCQkJCQlpZiAod2l0aFdpbGRD
YXJkcyAhPSBudWxsKSB7CisJCQkJCQl0ID0gQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmZp
bmRHcm91bmRUYXJnZXRUeXBlKHRoaXMsIHNrb3BlLCBsYW1iZGEsIHdpdGhXaWxkQ2FyZHMpOwor
CQkJCQl9CisJCQkJCU1ldGhvZEJpbmRpbmcgZnVuY3Rpb25UeXBlOworCQkJCQlpZiAodCAhPSBu
dWxsICYmIChmdW5jdGlvblR5cGUgPSB0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHNrb3BlLCB0
cnVlKSkgIT0gbnVsbCAmJiAobGFtYmRhID0gbGFtYmRhLmdldFJlc29sdmVkQ29weUZvckluZmVy
ZW5jZVRhcmdldGluZyh0KSkgIT0gbnVsbCkgeworCQkJCQkJVHlwZUJpbmRpbmcgciA9IGZ1bmN0
aW9uVHlwZS5yZXR1cm5UeXBlOworCQkJCQkJRXhwcmVzc2lvbltdIHJlc3VsdEV4cHJlc3Npb25z
ID0gbGFtYmRhLnJlc3VsdEV4cHJlc3Npb25zKCk7CisJCQkJCQlmb3IgKGludCBpID0gMCwgbGVu
Z3RoID0gcmVzdWx0RXhwcmVzc2lvbnMgPT0gbnVsbCA/IDAgOiByZXN1bHRFeHByZXNzaW9ucy5s
ZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQkJCUV4cHJlc3Npb24gcmVzdWx0RXhwcmVz
c2lvbiA9IHJlc3VsdEV4cHJlc3Npb25zW2ldOworCQkJCQkJCWlmICghYWRkQ29uc3RyYWludHNU
b0NfT25lRXhwcihyZXN1bHRFeHByZXNzaW9uLCBjLCByLm9yaWdpbmFsKCksIHIsIG1ldGhvZCwg
dHJ1ZSkpCisJCQkJCQkJCXJldHVybiBmYWxzZTsKKwkJCQkJCX0KKwkJCQkJfQorCQkJCX0KKwkJ
CX0KIAkJfSBlbHNlIGlmIChleHByaSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgZXhwcmkuaXNQ
b2x5RXhwcmVzc2lvbigpKSB7CiAJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlv
bikgZXhwcmk7Ci0JCQlNZXRob2RCaW5kaW5nIGlubmVyTWV0aG9kID0gaW52b2NhdGlvbi5iaW5k
aW5nKG51bGwsIGZhbHNlLCBudWxsKTsKKwkJCU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBp
bnZvY2F0aW9uLmJpbmRpbmcoc3Vic3RGLCB0aGlzLnNjb3BlKTsKKwkJCWlmIChpbm5lck1ldGhv
ZCA9PSBudWxsKQorCQkJCXJldHVybiB0cnVlOyAJCSAgLy8gLT4gcHJvY2VlZCB3aXRoIG5vIG5l
dyBDIHNldCBlbGVtZW50cy4KKwkJCQorCQkJaWYgKGludGVybGVhdmVkKSB7CisJCQkJTWV0aG9k
QmluZGluZyBzaGFsbG93TWV0aG9kID0gaW5uZXJNZXRob2Quc2hhbGxvd09yaWdpbmFsKCk7CisJ
CQkJU3VzcGVuZGVkSW5mZXJlbmNlUmVjb3JkIHByZXZJbnZvY2F0aW9uID0gZW50ZXJQb2x5SW52
b2NhdGlvbihpbnZvY2F0aW9uLCBpbnZvY2F0aW9uLmFyZ3VtZW50cygpKTsKKwkJCQl0cnkgewor
CQkJCQlFeHByZXNzaW9uW10gYXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKKwkJ
CQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gYXJndW1lbnRzID09IG51bGwgPyBCaW5k
aW5nLk5PX1BBUkFNRVRFUlMgOiBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxlbmd0aF07CisJ
CQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRUeXBlcy5sZW5ndGg7IGkrKykKKwkJCQkJ
CWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOworCQkJCQlpZiAo
aW5uZXJNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IHsKKwkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5m
ZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBpbm5lck1l
dGhvZCk7CisJCQkJCQl0aGlzLmluZmVyZW5jZUtpbmQgPSBpbm5lckN0eC5pbmZlcmVuY2VLaW5k
OworCQkJCQl9CisJCQkJCWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoc2hhbGxvd01ldGhv
ZCwgYXJndW1lbnRUeXBlcywgc2hhbGxvd01ldGhvZC5pc0NvbnN0cnVjdG9yKCkpOworCQkJCQlp
ZiAoIUNvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5pbmZlclBvbHlJbnZvY2F0aW9uVHlwZSh0
aGlzLCBpbnZvY2F0aW9uLCBzdWJzdEYsIHNoYWxsb3dNZXRob2QpKQorCQkJCQkJcmV0dXJuIGZh
bHNlOworCQkJCX0gZmluYWxseSB7CisJCQkJCXJlc3VtZVN1c3BlbmRlZEluZmVyZW5jZShwcmV2
SW52b2NhdGlvbik7CisJCQkJfQorCQkJfQorCQkJaW50IGFwcGxpY2FiaWxpdHlLaW5kID0gQ0hF
Q0tfTE9PU0U7ICAvLyBGSVhNRSwgZm9yIDw+IHJlc29sdmluZyB0byBhIG5vbi1nZW5lcmljIG1l
dGhvZCwgdGhpcyBuZWVkIHRvIGJlIGNvbXB1dGVkLgogCQkJaWYgKGlubmVyTWV0aG9kIGluc3Rh
bmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQkJSW5mZXJlbmNl
Q29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZykgaW5uZXJNZXRob2QpOwotCQkJCWlmIChpbm5lckN0eCAh
PSBudWxsKSB7IC8vIG90aGVyd2lzZSBpbm5lck1ldGhvZCBkb2VzIG5vdCBwYXJ0aWNpcGF0ZSBp
biBpbmZlcmVuY2UKLQkJCQkJcmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DKGludm9jYXRpb24uYXJn
dW1lbnRzKCksIGMsIGlubmVyTWV0aG9kLmdlbmVyaWNNZXRob2QoKSwgaW5uZXJDdHguaW5mZXJl
bmNlS2luZCk7CisJCQkJaWYgKGlubmVyQ3R4ICE9IG51bGwpIHsKKwkJCQkJYXBwbGljYWJpbGl0
eUtpbmQgPSBpbm5lckN0eC5pbmZlcmVuY2VLaW5kOwogCQkJCX0KIAkJCX0KKwkJCXJldHVybiBh
ZGRDb25zdHJhaW50c1RvQyhpbnZvY2F0aW9uLmFyZ3VtZW50cygpLCBjLCBpbm5lck1ldGhvZC5n
ZW5lcmljTWV0aG9kKCksIGFwcGxpY2FiaWxpdHlLaW5kLCBpbnRlcmxlYXZlZCk7CiAJCX0gZWxz
ZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKIAkJCUNvbmRp
dGlvbmFsRXhwcmVzc2lvbiBjZSA9IChDb25kaXRpb25hbEV4cHJlc3Npb24pIGV4cHJpOwotCQkJ
cmV0dXJuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFsdWVJZlRydWUsIGMsIGZzaSwg
c3Vic3RGLCBtZXRob2QpCi0JCQkJICYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoY2UudmFs
dWVJZkZhbHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKTsKKwkJCXJldHVybiBhZGRDb25zdHJh
aW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZUcnVlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBp
bnRlcmxlYXZlZCkKKwkJCQkJJiYgYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlm
RmFsc2UsIGMsIGZzaSwgc3Vic3RGLCBtZXRob2QsIGludGVybGVhdmVkKTsKIAkJfQogCQlyZXR1
cm4gdHJ1ZTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1wbGlmaWVkIEFQSSB0byBwZXJmb3JtIEludm9j
YXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIpCi0JICogYW5kIHBlcmZvcm0gc3Vic2Vx
dWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmluZGluZyBvZiBpbm5lciBwb2x5IGV4cHJlc3Np
b25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgaWYgbmVl
ZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0aGUgaW5mZXJlbmNlIGhhcyBub3Qg
eWV0IGZpbmlzaGVkLgotCSAqIEBwYXJhbSBpbnZvY2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5m
ZXJyZWQKLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyBhcmd1bWVudHMgYmVpbmcgcGFzc2VkIGlu
dG8gdGhlIGludm9jYXRpb24KLQkgKiBAcGFyYW0gbWV0aG9kIGN1cnJlbnQgY2FuZGlkYXRlIG1l
dGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9jYXRpb24KLQkgKiBAcmV0dXJuIGEgdmFsaWQgbWV0
aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1ldGVycywKLQkgKiAJb3IgYSBwcm9i
bGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGluZyBlaXRoZXIgaW5mZXJlbmNlIGZhaWx1cmUgb3Ig
YSBib3VuZCBtaXNtYXRjaC4KLQkgKi8KLQkvKkBOb25OdWxsKi8gTWV0aG9kQmluZGluZyBpbmZl
ckludm9jYXRpb25UeXBlKEludm9jYXRpb24gaW52b2NhdGlvbiwgVHlwZUJpbmRpbmdbXSBhcmd1
bWVudFR5cGVzLCBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0J
CS8vIFRPRE8gb3B0aW1pemU6IGlmIG91dGVyQ29udGV4dCBleGlzdHMgYW5kIGlzIHJlc29sdmVk
LCB3ZSBwcm9iYWJseSBkb24ndCBuZWVkIHRvIGluZmVyIGFnYWluLgotCQlUeXBlQmluZGluZyB0
YXJnZXRUeXBlID0gaW52b2NhdGlvbi5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQlQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZmluYWxNZXRob2QgPSBudWxsOwotCQlQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhvZDsKLQkJCi0J
CWJvb2xlYW4gaGF2ZVByb3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51bGwgJiYgdGFy
Z2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSk7Ci0JCWlmIChoYXZlUHJvcGVyVGFyZ2V0VHlwZSB8
fCAhaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkp
IHsKLQkJCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBtZXRob2Qub3JpZ2luYWxNZXRob2Q7Ci0J
CQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFy
Z2V0VHlwZSk7Ci0JCQlCb3VuZFNldCByZXN1bHQgPSBzb2x1dGlvbiAhPSBudWxsID8gc29sdXRp
b24uYm91bmRzIDogbnVsbDsKLQkJCWlmIChyZXN1bHQgPT0gbnVsbCkgewotCQkJCS8vIHN0YXJ0
IG92ZXIgZnJvbSBhIHByZXZpb3VzIGNhbmRpZGF0ZSBidXQgZGlzY2FyZCBpdHMgdHlwZSB2YXJp
YWJsZSBpbnN0YW50aWF0aW9ucwotCQkJCS8vIFRPRE86IHNob3VsZCB3ZSByZXRhaW4gYW55IGlu
c3RhbnRpYXRpb25zIG9mIHR5cGUgdmFyaWFibGVzIG5vdCBvd25lZCBieSB0aGUgbWV0aG9kPyAK
LQkJCQl0cnkgewotCQkJCQlyZXN1bHQgPSBpbmZlckludm9jYXRpb25UeXBlKHRoaXMuY3VycmVu
dEJvdW5kcywgdGFyZ2V0VHlwZSwgaW52b2NhdGlvbiwgb3JpZ2luYWwpOwotCQkJCX0gY2F0Y2gg
KEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBubyBzb2x1dGlvbiwgYnV0
IGRvIG1vcmUgY2hlY2tzIGJlbG93Ci0JCQkJfQotCQkJfQotCQkJaWYgKHJlc3VsdCAhPSBudWxs
KSB7Ci0JCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBnZXRTb2x1dGlvbnMob3JpZ2luYWwu
dHlwZVZhcmlhYmxlcygpLCBpbnZvY2F0aW9uLCByZXN1bHQpOwotCQkJCWlmIChzb2x1dGlvbnMg
IT0gbnVsbCkgewotCQkJCQlmaW5hbE1ldGhvZCA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWwsIHNvbHV0aW9ucyk7Ci0JCQkJCWlmICh0
aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lz
RW5hYmxlZCkKLQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRp
b25zKGZpbmFsTWV0aG9kLCBpbnZvY2F0aW9uLCB0aGlzLnNjb3BlKTsKLQkJCQkJaW52b2NhdGlv
bi5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQoZmluYWxNZXRob2QsIHRoaXMpOwotCQkJCQl0aGlz
LnNvbHV0aW9uc1BlclRhcmdldFR5cGUucHV0KHRhcmdldFR5cGUsIG5ldyBTb2x1dGlvbihmaW5h
bE1ldGhvZCwgcmVzdWx0KSk7Ci0JCQkJfQotCQkJfQotCQkJaWYgKGZpbmFsTWV0aG9kICE9IG51
bGwpCi0JCQkJbWV0aG9kVG9DaGVjayA9IGZpbmFsTWV0aG9kOwotCQl9IGVsc2UgewotCQkJZmlu
YWxNZXRob2QgPSBtZXRob2Q7Ci0JCX0KLQkJCi0JCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhv
ZCA9IG1ldGhvZFRvQ2hlY2suYm91bmRDaGVjazE4KHRoaXMuc2NvcGUsIGFyZ3VtZW50VHlwZXMp
OwotCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQotCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7
Ci0KLQkJaWYgKCFoYXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9uLmdldEV4cHJlc3Np
b25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkKLQkJCXJldHVybiBtZXRob2Q7IC8vIHN0
aWxsIG5vdCByZWFkeSEKLQotCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkgewotCQkJaWYgKHJl
YmluZElubmVyUG9saWVzKGZpbmFsTWV0aG9kLCBpbnZvY2F0aW9uKSkKLQkJCQlyZXR1cm4gZmlu
YWxNZXRob2Q7Ci0JCX0KLQkJcmV0dXJuIGdldFJldHVyblByb2JsZW1NZXRob2RJZk5lZWRlZCh0
YXJnZXRUeXBlLCBtZXRob2QpOwotCX0KLQotCS8qKgotCSAqIFNpbXBsaWZpZWQgQVBJIHRvIHBl
cmZvcm0gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikKLQkgKiBhbmQgcGVy
Zm9ybSBzdWJzZXF1ZW50IHN0ZXBzOiBib3VuZCBjaGVjaywgcmViaW5kaW5nIG9mIGlubmVyIHBv
bHkgZXhwcmVzc2lvbnMsCi0JICogYW5kIGNyZWF0aW5nIG9mIGEgcHJvYmxlbSBtZXRob2QgYmlu
ZGluZyBpZiBuZWVkZWQuCi0JICogU2hvdWxkIG9ubHkgYmUgY2FsbGVkIGlmIHRoZSBpbmZlcmVu
Y2UgaGFzIG5vdCB5ZXQgZmluaXNoZWQuCi0JICogVmVyc2lvbiB1c2VkIGZvciBpbm5lciBpbnZv
Y2F0aW9ucywgd2hlcmUgYXJndW1lbnQgdHlwZXMgbmVlZCB0byBiZSBleHRyYWN0ZWQKLQkgKiBm
cm9tIGFjdHVhbCBpbnZvY2F0aW9uIGFyZ3VtZW50cy4KLQkgKiBAcGFyYW0gaW52b2NhdGlvbiBp
bnZvY2F0aW9uIGJlaW5nIGluZmVycmVkCi0JICogQHBhcmFtIG1ldGhvZCBjdXJyZW50IGNhbmRp
ZGF0ZSBtZXRob2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogQHJldHVybiBhIHZh
bGlkIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMsCi0JICogCW9y
IGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcgZWl0aGVyIGluZmVyZW5jZSBmYWls
dXJlIG9yIGEgYm91bmQgbWlzbWF0Y2guCi0JICovCi0JcHVibGljIC8qQE5vbk51bGwqLyBNZXRo
b2RCaW5kaW5nIGluZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCVR5cGVCaW5kaW5nW10g
YXJndW1lbnRUeXBlcyA9IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0
aW9uLmFyZ3VtZW50cygpOwotCQlpZiAoYXJndW1lbnRzICE9IG51bGwpIHsKLQkJCWFyZ3VtZW50
VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxlbmd0aF07Ci0JCQlmb3IgKGludCBp
ID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykKLQkJCQlhcmd1bWVudFR5cGVzW2ldID0g
YXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsKLQkJfQotCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9u
VHlwZShpbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzLCBtZXRob2QpOwogCX0KIAogCXB1YmxpYyBi
b29sZWFuIGhhc1Jlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CkBAIC01OTEsNiAr
NTEwLDEwIEBACiAJCQlyZXR1cm4gdGhpcy5zdGVwQ29tcGxldGVkID49IFRZUEVfSU5GRVJSRUQ7
CiAJCWVsc2UKIAkJCXJldHVybiB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5cGUuY29udGFpbnNL
ZXkodGFyZ2V0VHlwZSk7CisJfQorCQorCXB1YmxpYyBTb2x1dGlvbiBnZXRSZXN1bHRGb3IoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCQlyZXR1cm4gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRU
eXBlLmdldCh0YXJnZXRUeXBlKTsKIAl9CiAKIAlwdWJsaWMgYm9vbGVhbiByZWdpc3RlclNvbHV0
aW9uKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcp
IHsKQEAgLTEzNjYsOCArMTI4OSw2IEBACiAJCXRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9IGlu
bmVyQXJndW1lbnRzOwogCQl0aGlzLmN1cnJlbnRJbnZvY2F0aW9uID0gaW52b2NhdGlvbjsKIAkJ
Ci0JCS8vIHNjaGVkdWxlIGZvciByZS1iaW5kaW5nIHRoZSBpbm5lciBhZnRlciBpbmZlcmVuY2Ug
c3VjY2VzczoKLQkJdGhpcy5pbm5lclBvbGllcy5hZGQoaW52b2NhdGlvbik7CiAJCXJldHVybiBy
ZWNvcmQ7CiAJfQogCQpAQCAtMTM5NSwxNDUgKzEzMTYsNiBAQAogCQl0aGlzLmN1cnJlbnRJbnZv
Y2F0aW9uID0gcmVjb3JkLnNpdGU7CiAJCXRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9IHJlY29y
ZC5pbnZvY2F0aW9uQXJndW1lbnRzOwogCQl0aGlzLmluZmVyZW5jZUtpbmQgPSByZWNvcmQuaW5m
ZXJlbmNlS2luZDsKLQl9Ci0KLQlwdWJsaWMgYm9vbGVhbiByZWJpbmRJbm5lclBvbGllcyhNZXRo
b2RCaW5kaW5nIG1ldGhvZCwgSW52b2NhdGlvblNpdGUgc2l0ZSkgewotCQlCb3VuZFNldCBib3Vu
ZHMgPSB0aGlzLmN1cnJlbnRCb3VuZHM7Ci0JCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBzaXRl
Lmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwgfHwgIXRh
cmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKSB7Ci0JCQlpZiAoIXNpdGUuZ2V0RXhwcmVzc2lv
bkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7Ci0JCQkJLy8gaW4gdGhpcyBjYXNlIHdl
IG1heSBub3QgeWV0IGhhdmUgdGhlIHNvbHV0aW9uKD8sIGdldCBvciBjb21wdXRlIGl0IG5vdzoK
LQkJCQlTb2x1dGlvbiBzb2x1dGlvbiA9IHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQo
dGFyZ2V0VHlwZSk7Ci0JCQkJdHJ5IHsKLQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgc29s
dXRpb24uYm91bmRzICE9IG51bGwpCi0JCQkJCQlib3VuZHMgPSBzb2x1dGlvbi5ib3VuZHM7Ci0J
CQkJCWVsc2UKLQkJCQkJCWJvdW5kcyA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50
Qm91bmRzLCBudWxsLCBzaXRlLCBtZXRob2Quc2hhbGxvd09yaWdpbmFsKCkpOwotCQkJCX0gY2F0
Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQlyZXR1cm4gZmFsc2U7Ci0J
CQkJfQotCQkJCWlmIChib3VuZHMgPT0gbnVsbCkKLQkJCQkJcmV0dXJuIGZhbHNlOwotCQkJfQot
CQl9IGVsc2UgewotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdl
dFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgc29sdXRp
b24uYm91bmRzICE9IG51bGwpCi0JCQkJYm91bmRzID0gc29sdXRpb24uYm91bmRzOwotCQl9Ci0J
CXJlYmluZElubmVyUG9saWVzKGJvdW5kcywgbWV0aG9kLnBhcmFtZXRlcnMpOwotCQlyZXR1cm4g
dHJ1ZTsKLQl9Ci0KLQkvKioKLQkgKiBBZnRlciBpbmZlcmVuY2UgaGFzIGZpbmlzaGVkLCBpdGVy
YXRlIGFsbCBpbm5lciBwb2x5IGV4cHJlc3Npb25zIChJbnZvY2F0aW9ucyksIHRoYXQKLQkgKiBo
YXZlIGJlZW4gaW5jbHVkZWQgaW4gdGhlIGluZmVyZW5jZS4gRm9yIGVhY2ggb2YgdGhlc2UgdXBk
YXRlIHNvbWUgdHlwZSBpbmZvcm1hdGlvbgotCSAqIGZyb20gdGhlIGluZmVyZW5jZSByZXN1bHQg
YW5kIHBlcmhhcHMgdHJpZ2dlciBmb2xsb3ctdXAgcmVzb2x2aW5nIGFzIG5lZWRlZC4KLQkgKiBT
aW1pbGFyIGZvciBwb2x5IGV4cHJlc3Npb25zIHRoYXQgZGlkIG5vdCBkaXJlY3RseSBwYXJ0aWNp
cGF0ZSBpbiB0aGUgaW5mZXJlbmNlCi0JICogYnV0IGFyZSBkaXJlY3QgYXJndW1lbnRzIG9mIHRo
ZSBjdXJyZW50IGludm9jYXRpb24gKEZ1bmN0aW9uYWxFeHByZXNzaW9uLCBDb25kaXRpb25hbEV4
cHJlc3Npb24pLgotCSAqLwotCXB1YmxpYyB2b2lkIHJlYmluZElubmVyUG9saWVzKEJvdW5kU2V0
IGJvdW5kcywgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcykgewotCQkvLyBUaGlzIHVwZGF0
ZXMgYWxsIHJlbWFpbmluZyBwb2x5IGV4cHJlc3Npb25zIHRoYXQgYXJlIGRpcmVjdCBhcmd1bWVu
dHMgb2YgdGhlIGN1cnJlbnQgaW52b2NhdGlvbjoKLQkJLy8gKGhhbmRsZXMgRnVuY3Rpb25hbEV4
cHJlc3Npb24gJiBDb25kaXRpb25hbEV4cHJlc3Npb24pCi0JCWlmICh0aGlzLmN1cnJlbnRJbnZv
Y2F0aW9uIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKLQkJCXJldHVybjsgLy8gbm8g
aW5uZXIgZXhwcmVzc2lvbnMKLQkJYm9vbGVhbiBpc1ZhcmFyZ3MgPSB0aGlzLmluZmVyZW5jZUtp
bmQgPT0gQ0hFQ0tfVkFSQVJHOwotCQlhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cyhib3VuZHMs
IHBhcmFtZXRlclR5cGVzLCBpc1ZhcmFyZ3MpOwotCQkvLyBUaGlzIGxvb3BzIG92ZXIgYWxsIHBv
bHkgZXhwcmVzc2lvbnMgZm9yIHdoaWNoIGEgc3ViLWluZmVyZW5jZSB3YXMgdHJpZ2dlcmVkOgot
CQkvLyAoaGFuZGxlcyBnZW5lcmljIGludm9jYXRpb25zKQotCQlpbnQgbGVuID0gdGhpcy5pbm5l
clBvbGllcy5zaXplKCk7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKLQkJCUV4
cHJlc3Npb24gaW5uZXIgPSAoRXhwcmVzc2lvbikgdGhpcy5pbm5lclBvbGllcy5nZXQoaSk7Ci0J
CQlpZiAoaW5uZXIgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7Ci0JCQkJUmVmZXJl
bmNlRXhwcmVzc2lvbiByZWZlcmVuY2VFeHByZXNzaW9uID0gKFJlZmVyZW5jZUV4cHJlc3Npb24p
IGlubmVyOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGlsZVRpbWVEZWNsID0gcmVmZXJlbmNlRXhw
cmVzc2lvbi5wcmVwYXJlRm9ySW5mZXJlbmNlUmVzdWx0KHRoaXMuc2NvcGUpOwotCQkJCWlmCShj
b21waWxlVGltZURlY2wgIT0gbnVsbCkgewotCSAgCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB2
YXJpYWJsZXMgPSBjb21waWxlVGltZURlY2wudHlwZVZhcmlhYmxlczsKLQkJCQkJaWYgKHZhcmlh
YmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7Ci0JCQkJCQlUeXBlQmluZGluZ1td
IGFyZ3VtZW50cyA9IGdldFNvbHV0aW9ucyh2YXJpYWJsZXMsIChJbnZvY2F0aW9uU2l0ZSkgaW5u
ZXIsIGJvdW5kcyk7Ci0JCQkJCQlyZWZlcmVuY2VFeHByZXNzaW9uLmJpbmRpbmcgPSB0aGlzLmVu
dmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNvbXBpbGVUaW1lRGVj
bCwgYXJndW1lbnRzKTsKLQkJCQkJfQotCQkJCX0KLQkJCX0gZWxzZSBpZiAoaW5uZXIgaW5zdGFu
Y2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW52b2NhdGlvbiBpbm5lck1lc3NhZ2UgPSAoSW52b2Nh
dGlvbikgaW5uZXI7Ci0JCQkJVHlwZUJpbmRpbmcgaW5uZXJUYXJnZXRUeXBlID0gaW5uZXIuZXhw
ZWN0ZWRUeXBlKCk7IC8vIG1heSBiZSBzZXQgZnJvbSBhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50
cwotCQkJCWlmIChpbm5lclRhcmdldFR5cGUgIT0gbnVsbCAmJiAhaW5uZXJUYXJnZXRUeXBlLmlz
UHJvcGVyVHlwZSh0cnVlKSkKLQkJCQkJaW5uZXJUYXJnZXRUeXBlID0gbnVsbDsKLQkJCQlNZXRo
b2RCaW5kaW5nIGJpbmRpbmcgPSBpbm5lck1lc3NhZ2UuYmluZGluZyhpbm5lclRhcmdldFR5cGUs
IGlubmVyVGFyZ2V0VHlwZSAhPSBudWxsLCB0aGlzLnNjb3BlKTsKLQkJCQlpZiAoYmluZGluZyA9
PSBudWxsKQotCQkJCQljb250aW51ZTsKLQkJCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gYmlu
ZGluZy5zaGFsbG93T3JpZ2luYWwoKTsKLQotCQkJCS8vIGFwcGx5IGluZmVyZW5jZSByZXN1bHRz
IG9udG8gdGhlIGFsbG9jYXRpb24gdHlwZSBvZiBpbm5lciBkaWFtb25kczoKLQkJCQlpZiAob3Jp
Z2luYWwuaXNDb25zdHJ1Y3RvcigpICYmIGlubmVyLmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJ
CQlSZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzID0gb3JpZ2luYWwuZGVjbGFyaW5nQ2xh
c3M7Ci0JCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gZ2V0U29sdXRpb25zKGRlY2xhcmlu
Z0NsYXNzLnR5cGVWYXJpYWJsZXMoKSwgaW5uZXJNZXNzYWdlLCBib3VuZHMpOwotCQkJCQlkZWNs
YXJpbmdDbGFzcyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZGVj
bGFyaW5nQ2xhc3MsIGFyZ3VtZW50cywgZGVjbGFyaW5nQ2xhc3MuZW5jbG9zaW5nVHlwZSgpKTsK
LQkJCQkJb3JpZ2luYWwgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylkZWNsYXJpbmdDbGFz
cykuY3JlYXRlUGFyYW1ldGVyaXplZE1ldGhvZChvcmlnaW5hbCk7Ci0JCQkJCWlubmVyLmNoZWNr
QWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShpbm5lclRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwkKLQkJ
CQkJaWYgKHRoaXMuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51
bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9y
Q29udHJhZGl0aW9ucyhvcmlnaW5hbCwgaW5uZXJNZXNzYWdlLCB0aGlzLnNjb3BlKTsKLQkJCQl9
Ci0JCQkJCi0JCQkJLy8gYXBwbHkgcmVzdWx0cyBvZiB0aGUgY29tYmluZWQgaW5mZXJlbmNlIG9u
dG8gdGhlIGJpbmRpbmcgb2YgdGhlIGlubmVyIGludm9jYXRpb246Ci0JCQkJVHlwZUJpbmRpbmdb
XSBzb2x1dGlvbnMgPSBnZXRTb2x1dGlvbnMob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpLCBpbm5l
ck1lc3NhZ2UsIGJvdW5kcyk7Ci0JCQkJaWYgKHNvbHV0aW9ucyA9PSBudWxsKSB7Ci0JCQkJCWlm
IChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7
Ci0JCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbm5lck1lc3NhZ2UuZ2V0SW5m
ZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5n
KTsKLQkJCQkJCWlmIChpbm5lckN0eCAhPSBudWxsICYmICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5n
KCkpIHsKLQkJCQkJCQlpbm5lckN0eC5yZXBvcnRJbnZhbGlkSW52b2NhdGlvbihpbm5lck1lc3Nh
Z2UsIGJpbmRpbmcpOwotCQkJCQkJfQotCQkJCQl9Ci0JCQkJCWNvbnRpbnVlOyAvLyBpbm5lciBp
bmZlcmVuY2Ugbm90IHJlcXVlc3RlZCAtPiBub3QgYSBwcm9ibGVtCi0JCQkJfQotCQkJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBpbm5lckJpbmRpbmcgPSB0aGlzLmVudmlyb25t
ZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1dGlvbnMp
OwotCQkJCQotCQkJCWlmIChpbm5lck1lc3NhZ2UudXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5n
LCBpbm5lclRhcmdldFR5cGUpKSB7IC8vIG9ubHkgaWYgd2UgYXJlIGFjdHVhbGx5IGltcHJvdmlu
ZyBhbnl0aGluZwotCQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhp
bm5lck1lc3NhZ2UsIGlubmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJfQotCQkJfQotCQl9
Ci0JCXRoaXMuc3RlcENvbXBsZXRlZCA9IEJJTkRJTkdTX1VQREFURUQ7IC8vIHdlJ3JlIGRvbmUt
ZG9uZQotCX0KLQotCXByaXZhdGUgdm9pZCBhY2NlcHRQZW5kaW5nUG9seUFyZ3VtZW50cyhCb3Vu
ZFNldCBhY2NlcHRlZFJlc3VsdCwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJUeXBlcywgYm9vbGVh
biBpc1ZhckFyZ3MpIHsKLQkJaWYgKGFjY2VwdGVkUmVzdWx0ID09IG51bGwgfHwgdGhpcy5pbnZv
Y2F0aW9uQXJndW1lbnRzID09IG51bGwpIHJldHVybjsKLQkJU3Vic3RpdHV0aW9uIHN1YnN0aXR1
dGlvbiA9IGdldFJlc3VsdFN1YnN0aXR1dGlvbihhY2NlcHRlZFJlc3VsdCk7Ci0JCWZvciAoaW50
IGkgPSAwOyBpIDwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7Ci0JCQlU
eXBlQmluZGluZyB0YXJnZXRUeXBlID0gZ2V0UGFyYW1ldGVyKHBhcmFtZXRlclR5cGVzLCBpLCBp
c1ZhckFyZ3MpOwotCQkJaWYgKCF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkKLQkJCQl0
YXJnZXRUeXBlID0gU2NvcGUuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIHRhcmdldFR5cGUpOwot
CQkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0gdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzW2ldOwot
CQkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQkJSW52b2NhdGlv
biBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGV4cHJlc3Npb247Ci0JCQkJaWYgKCF0aGlzLmlu
bmVyUG9saWVzLmNvbnRhaW5zKGludm9jYXRpb24pKSB7Ci0JCQkJCU1ldGhvZEJpbmRpbmcgbWV0
aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHRhcmdldFR5cGUsIHRydWUsIHRoaXMuc2NvcGUpOwot
CQkJCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB7Ci0JCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcHJldmlvdXNC
aW5kaW5nID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kOwotCQkJ
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VD
b250ZXh0KHByZXZpb3VzQmluZGluZyk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCkgewot
CQkJCQkJCS8vIHdlIGhhdmUgYSBub24tcG9seSBnZW5lcmljIGludm9jYXRpb24sIHdoaWNoIG5l
ZWRzIGluZmVyZW5jZSBidXQgaXMgbm90IGNvbm5lY3RlZCB2aWEgaW5uZXJQb2xpcy4KLQkJCQkJ
CQkvLyBGaW5pc2ggdGhhdCBpbm5lciBpbmZlcmVuY2Ugbm93IChpbmNsLiBiaW5kaW5nIHVwZGF0
ZXMpOgotCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5uZXJDdHguaW5mZXJJ
bnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uLCBwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJCWlmICgh
aW5uZXJCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQkJaW5uZXJDdHgucmVwb3J0
SW52YWxpZEludm9jYXRpb24oaW52b2NhdGlvbiwgaW5uZXJCaW5kaW5nKTsKLQkJCQkJCQl9Ci0J
CQkJCQkJaWYgKGludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nLCB0YXJnZXRU
eXBlKSkgeyAvLyBvbmx5IGlmIHdlIGFyZSBhY3R1YWxseSBpbXByb3ZpbmcgYW55dGhpbmcKLQkJ
CQkJCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwg
aW5uZXJCaW5kaW5nLCB0aGlzLnNjb3BlKTsKLQkJCQkJCQl9Ci0JCQkJCQl9Ci0JCQkJCX0gZWxz
ZSBpZihtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl7Ci0JCQkJ
CQlleHByZXNzaW9uLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlz
LnNjb3BlKTsKLQkJCQkJfQotCQkJCX0gZWxzZSB7Ci0JCQkJCWV4cHJlc3Npb24uc2V0RXhwZWN0
ZWRUeXBlKHRhcmdldFR5cGUpOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJaWYgKHRoaXMuaW5u
ZXJQb2xpZXMuY29udGFpbnMoZXhwcmVzc2lvbikpIC8vIG1heSBnZXQgaGVyZSBmb3IgUmVmZXJl
bmNlRXhwcmVzc2lvbnMgLi4uCi0JCQkJCWV4cHJlc3Npb24uc2V0RXhwZWN0ZWRUeXBlKHRhcmdl
dFR5cGUpOyAvLyAuLi4gcHJlcGFyZSBmb3IgZmluYWwgaW5mZXJlbmNlIHZpYSByZWJpbmRJbm5l
clBvbGllcwotCQkJCWVsc2UKLQkJCQkJZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5hbFRhcmdl
dFR5cGUodGFyZ2V0VHlwZSwgdGhpcy5zY29wZSk7Ci0JCQl9Ci0JCX0KIAl9CiAKIAlwcml2YXRl
IFN1YnN0aXR1dGlvbiBnZXRSZXN1bHRTdWJzdGl0dXRpb24oZmluYWwgQm91bmRTZXQgcmVzdWx0
KSB7CkBAIC0xNTgxLDE5ICsxMzYzLDE0IEBACiAJCQlpZiAobWV0aG9kLnJldHVyblR5cGUuZXJh
c3VyZSgpLmlzQ29tcGF0aWJsZVdpdGgoZXhwZWN0ZWRUeXBlKSkKIAkJCQlyZXR1cm4gbWV0aG9k
OyAvLyBkb24ndCBjb3VudCBhcyBwcm9ibGVtLgogCQl9Ci0JCWlmIChleHBlY3RlZFR5cGUgPT0g
bnVsbCkKLQkJCXJldHVybiBtZXRob2Q7IC8vIGFzc3VtZSBpbmZlcmVuY2UgZmFpbHVyZSBjb25j
ZXJuZWQgYW5vdGhlciBleHByZXNzaW9uCi0JCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1N
ZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3Is
IG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhw
ZWN0ZWRUeXBlUHJvYmxlbSk7CisJCS8qIFdlIHVzZWQgdG8gY2hlY2sgaWYgZXhwZWN0ZWQgdHlw
ZSBpcyBudWxsIGFuZCBpZiBzbyByZXR1cm4gbWV0aG9kLCBidXQgdGhhdCBpcyB3cm9uZyAtIGl0
IGluamVjdHMgYW4gaW5jb21wYXRpYmxlIG1ldGhvZCBpbnRvIG92ZXJsb2FkIHJlc29sdXRpb24u
CisJCSAgIGlmIHdlIGdldCBoZXJlIHdpdGggZXhwZWN0ZWQgdHlwZSBzZXQgdG8gbnVsbCBhdCBh
bGwsIHRoZSB0YXJnZXQgY29udGV4dCBkb2VzIG5vdCBkZWZpbmUgYSB0YXJnZXQgdHlwZSAodmFu
aWxsYSBjb250ZXh0KSwgc28gaW5mZXJlbmNlIGhhcyBkb25lIGl0cworCQkgICBiZXN0IGFuZCBu
b3RoaW5nIG1vcmUgdG8gZG8gdGhhbiB0byBzaWduYWwgZXJyb3IuIAorCQkgKi8KKwkJUHJvYmxl
bU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyht
ZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25z
Lkludm9jYXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZSk7CiAJCXByb2JsZW1NZXRob2QucmV0dXJu
VHlwZSA9IGV4cGVjdGVkVHlwZTsKIAkJcHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VDb250ZXh0ID0g
dGhpczsKIAkJcmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JfQotCi0JcHVibGljIHZvaWQgcmVwb3J0
SW52YWxpZEludm9jYXRpb24oSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIGJp
bmRpbmcpIHsKLQkJaWYgKGludm9jYXRpb24gaW5zdGFuY2VvZiBNZXNzYWdlU2VuZCkKLQkJCXRo
aXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZE1ldGhvZCgoTWVzc2FnZVNlbmQpIGlu
dm9jYXRpb24sIGJpbmRpbmcpOwotCQllbHNlCi0JCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmludmFsaWRDb25zdHJ1Y3RvcigoU3RhdGVtZW50KWludm9jYXRpb24sIGJpbmRpbmcpOwog
CX0KIAogCS8vIGRlYnVnZ2luZzoKQEAgLTE2MzMsMTIgKzE0MTAsNiBAQAogCQlpZiAodGhpcy5j
dXJyZW50Qm91bmRzICE9IG51bGwpCiAJCQlidWYuYXBwZW5kKHRoaXMuY3VycmVudEJvdW5kcy50
b1N0cmluZygpKTsKIAkJcmV0dXJuIGJ1Zi50b1N0cmluZygpOwotCX0KLQotCXB1YmxpYyB2b2lk
IGFkZFByb2JsZW1NZXRob2QoUHJvYmxlbU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCkgewot
CQlpZiAodGhpcy5wcm9ibGVtTWV0aG9kcyA9PSBudWxsKQotCQkJdGhpcy5wcm9ibGVtTWV0aG9k
cyA9IG5ldyBBcnJheUxpc3Q8TWV0aG9kQmluZGluZz4oKTsKLQkJdGhpcy5wcm9ibGVtTWV0aG9k
cy5hZGQocHJvYmxlbU1ldGhvZCk7CiAJfQogCiAJLyoqCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQppbmRleCAyZTk2YTRiLi5m
MzcwM2U1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nLmphdmEKQEAgLTMxLDYgKzMxLDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJkOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJPcHRpb25zOwor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNl
Q29udGV4dDE4LlNvbHV0aW9uOwogCiAvKioKICAqIEJpbmRpbmcgZGVub3RpbmcgYSBnZW5lcmlj
IG1ldGhvZCBhZnRlciB0eXBlIHBhcmFtZXRlciBzdWJzdGl0dXRpb25zIGdvdCBwZXJmb3JtZWQu
CkBAIC00MSw3ICs0Miw3IEBACiBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgaW1wbGVtZW50cyBT
dWJzdGl0dXRpb24gewogCiAgICAgcHVibGljIFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50czsK
LSAgICBwcml2YXRlIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OworICAgIHByb3RlY3Rl
ZCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKICAgICBwdWJsaWMgYm9vbGVhbiBpbmZl
cnJlZFJldHVyblR5cGU7CiAgICAgcHVibGljIGJvb2xlYW4gd2FzSW5mZXJyZWQ7IC8vIG9ubHkg
c2V0IHRvIHRydWUgZm9yIGluc3RhbmNlcyByZXN1bHRpbmcgZnJvbSBtZXRob2QgaW52b2NhdGlv
biBpbmZlcnJlbmNlCiAgICAgcHVibGljIGJvb2xlYW4gaXNSYXc7IC8vIHNldCB0byB0cnVlIGZv
ciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3IGZvciBzdWJzdGl0dXRpb24gcHVycG9zZQpAQCAtNTAs
MzEgKzUxLDExIEBACiAJLyoqCiAJICogUGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRo
b2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9vciBleHBlY3RlZCB0eXBlCiAJICogPHA+Ci0JICogSW4g
MS44KyB0aGUgZm9sbG93aW5nIGRpc2NpcGxpbmUgaGFzIHRvIGJlIG9ic2VydmVkIGJ5IGNhbGxl
cnM6Ci0JICogRWFjaCBpbnZvY2F0aW9uIG11c3QgYmUgc3ViamVjdGVkIHRvIHR3byBsZXZlbHMg
b2YgaW5mZXJlbmNlOgotCSAqIDwvcD4KLQkgKiA8dWw+Ci0JICogPGxpPiB7QGxpbmsgU2NvcGUj
QVBQTElDQUJJTElUWSBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlfSwgd2hpY2gg
bWF5IGJlIGFwcGxpZWQKLQkgKiAgICAgbXVsdGlwbGUgdGltZXMgZm9yIHRoZSBzYW1lIGludm9j
YXRpb248L2xpPgotCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0lOVk9DQVRJT05fVFlQRSBJbnZvY2F0
aW9uIFR5cGUgSW5mZXJlbmNlfSwgd2hpY2ggaXMgZmluYWxseSBwZXJmb3JtZWQKLQkgKiAgICAg
Zm9yIHRoZSBzZWxlY3RlZCBtZXRob2QgYW5kIHdoaWNoIGFkZHMgaW5mb3JtYXRpb24gZnJvbSB0
aGUgInRhcmdldCB0eXBlIi48L2xpPgotCSAqIDwvdWw+Ci0JICogPHA+Ci0JICogQ2xpZW50cyBj
YW4gY29udHJvbCB3aGljaCBwYXJ0cyBvZiB0aGUgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3Jt
ZWQgYnkgcGFzc2luZyB0aGUgYXBwcm9wcmlhdGUKLQkgKiBmbGFncyBpbnRvIGFyZ3VtZW50ICdp
bmZlcmVuY2VMZXZlbCcuIE9uIGVhY2ggY2FsbCBwYXRoIGl0IG11c3QgYmUgZW5zdXJlZCB0aGF0
IG9uZSBvciBtb3JlCi0JICogaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZXMgYXJl
IGFsd2F5cyBmb2xsb3dlZCBieSBleGFjdGx5IG9uZSBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNl
Ci0JICogKHVubGVzcyBlcnJvcnMgaGF2ZSBiZWVuIGRldGVjdGVkKS4KLQkgKiA8L3A+Ci0JICog
PHA+Ci0JICogSW5pdGlhbCBjbGllbnRzIGFyZSB0aGUgZGlyZWN0IGNhbGxlcnMgb2YKLQkgKiB7
QGxpbmsgU2NvcGUjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyxUeXBlQmlu
ZGluZ1tdLEludm9jYXRpb25TaXRlLGludCl9LAotCSAqIHdoaWNoIHNob3VsZCBlaXRoZXIgaW52
b2tlIGJvdGggbGV2ZWxzIG9mIGluZmVyZW5jZSA8ZW0+b3I8L2VtPiBkZWxlZ2F0ZSB0aGUgc2Vj
b25kIHBhcnQgdG8KLQkgKiB7QGxpbmsgU2NvcGUjbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyhN
ZXRob2RCaW5kaW5nW10saW50LFR5cGVCaW5kaW5nW10sSW52b2NhdGlvblNpdGUsUmVmZXJlbmNl
QmluZGluZyl9LAotCSAqIHdoaWNoIGlzIGludGVuZGVkIHRvIGVuc3VyZSBjb21wbGV0aW5nIHRo
ZSBpbmZlcmVuY2Ugb24gYWxsIG5vbi1lcnJvciBleGl0cy4KKwkgKiBJbiAxLjgrIGlmIHRoZSBl
eHBlY3RlZCB0eXBlIGlzIG5vdCB5ZXQgYXZhaWxhYmxlIGR1ZSB0byB0aGlzIGNhbGwgYmVpbmcg
YW4gYXJndW1lbnQgdG8gYW4gb3V0ZXIgY2FsbCB3aGljaCBpcyBub3Qgb3ZlcmxvYWQtcmVzb2x2
ZWQgeWV0LAorCSAqIHRoZSByZXR1cm5lZCBtZXRob2QgYmluZGluZyB3aWxsIGJlIGEgUG9seVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy4KIAkgKiA8L3A+ICAKIAkgKi8KLQlwdWJs
aWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmlu
ZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3Bl
LAotCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkK
KwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0
aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3Bl
IHNjb3BlLAlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSkKIAl7CiAJCVBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFyaWFibGVC
aW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CkBA
IC05NSwxMjYgKzc2LDM2IEBACiAJCQkvLyBpbml0aWFsaXplcyB0aGUgbWFwIG9mIHN1YnN0aXR1
dGVzICh2YXIgLS0+IHR5cGVbXVtdeyBlcXVhbCwgZXh0ZW5kcywgc3VwZXJ9CiAJCQlUeXBlQmlu
ZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJhbWV0ZXJzOwogCi0vLyA9PT09
IDEuODogVGhlIG1haW4gZHJpdmVyIGZvciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9
PT09Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOwogCQkJQ29tcGlsZXJP
cHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCQkJaWYg
KGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
KSB7Ci0JCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FCSUxJVFkpICE9IDAp
Ci0JCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNj
b3BlKTsKLQkJCQllbHNlIGlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24g
JiYgb3JpZ2luYWxNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpCi0JCQkJCWluZkN0eDE4ID0gKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkuZ2V0
SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBvcmln
aW5hbE1ldGhvZCk7Ci0JCQkJaWYgKGluZkN0eDE4ID09IG51bGwpCi0JCQkJCXJldHVybiBvcmln
aW5hbE1ldGhvZDsKLQkJCX0KLQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJdHJ5IHsK
LQkJCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOwotCQkJCQlCb3VuZFNldCBy
ZXN1bHQgPSBudWxsOwotCQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUuQVBQTElDQUJJ
TElUWSkgIT0gMCkgeworCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZDE4KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHNjb3BlLCBpbnZvY2F0aW9uU2l0ZSk7CiAK
LQkJCQkJCS8vIC0tLS0gMTguNS4xIChBcHBsaWNhYmlsaXR5KTogLS0tLQotCQkJCQkJYm9vbGVh
biBpc0RpYW1vbmQgPSBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCkKLQkJCQkJCQkJJiYg
aW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uCi0JCQkJCQkJCSYmICgoRXhwcmVz
c2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhvZCk7Ci0J
CQkJCQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgewotCQkJCQkJ
CWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7
IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZh
cmFyZykgaXMgc3VmZmljaWVudC4KLQkJCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBs
aWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJCQkJ
cHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQkJfQotCQkJCQkJaWYg
KHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNWYXJhcmdzKCkp
IHsKLQkJCQkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUtYXJpdHkgYXBwbGljYWJpbGl0eQotCQkJ
CQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3Bl
KTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVu
Y2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOwotCQkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlv
bkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKLQkJ
CQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7Ci0JCQkJCQl9Ci0JCQkJ
CQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29sdmVkKHBy
b3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJCQkJCWluZkN0eDE4LnN0b3JlZFNvbHV0aW9uID0gcHJv
dmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5j
ZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVEOwotCQkJCQkJCWlmIChpbnZvY2F0aW9u
U2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQkJCQkJCSgoUmVmZXJlbmNl
RXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZl
cmVuY2VLaW5kOwotCQkJCQkJfQotCQkJCQl9IGVsc2UgewotCQkJCQkJcHJvdmlzaW9uYWxSZXN1
bHQgPSBpbmZDdHgxOC5zdG9yZWRTb2x1dGlvbjsKLQkJCQkJfQotCQkJCQlyZXN1bHQgPSBpbmZD
dHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24s
IHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCS8vIDEuNy0gb25seS4KKwkJCWluZmVy
ZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7CisJCQlt
ZXRob2RTdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxN
ZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQlpZiAo
bWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOwogCi0JCQkJCVR5cGVC
aW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBl
KCk7Ci0JCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJCQlib29sZWFu
IGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZl
bCAmIFNjb3BlLklOVk9DQVRJT05fVFlQRSkgIT0gMCAvLyByZXF1ZXN0ZWQ/Ci0JCQkJCQkJJiYg
KGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29u
dGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpKSB7IC8vIHBvc3NpYmxlPwotCi0JCQkJCQkvLyAt
LS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTogLS0tLQotCQkJCQkJcmVzdWx0ID0gaW5mQ3R4
MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNp
dGUsIG9yaWdpbmFsTWV0aG9kKTsKLQkJCQkJCWludm9jYXRpb25UeXBlSW5mZXJyZWQgPSB0cnVl
OwotCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKLQkJCQkJCWlmICho
YXNSZXR1cm5Qcm9ibGVtKQotCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBs
ZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciBy
ZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCi0JCQkJCX0gZWxzZSB7Ci0JCQkJCQkvLyB3ZSdyZSBu
b3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCi0JCQkJCQlyZXN1bHQg
PSBwcm92aXNpb25hbFJlc3VsdDsKLQkJCQkJfQotCi0JCQkJCWlmIChyZXN1bHQgIT0gbnVsbCkg
ewotCQkJCQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoKLQkJCQkJCVR5cGVCaW5kaW5n
W10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9j
YXRpb25TaXRlLCByZXN1bHQpOwotCQkJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7Ci0JCQkJ
CQkJCi0JCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRl
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9ucyk7Ci0J
CQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0
aGUgcHJvdmlzaW9uYWwgcmVzdWx0PwotCQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRo
b2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhwZWN0ZWRUeXBl
LCBtZXRob2RTdWJzdGl0dXRlKTsKLQkJCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2Vv
ZiBQcm9ibGVtTWV0aG9kQmluZGluZykKLQkJCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwot
CQkJCQkJCX0KLQkJCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkgewotCQkJCQkJCQlp
ZiAoY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkK
LQkJCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKG1l
dGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7Ci0JCQkJCQkJCWluZkN0eDE4
LnJlYmluZElubmVyUG9saWVzKHJlc3VsdCwgbWV0aG9kU3Vic3RpdHV0ZS5wYXJhbWV0ZXJzKTsK
LQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5i
b3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50cyk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9k
ICE9IG51bGwpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9IGVsc2Ug
ewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKQotCQkJ
CQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZlcmVuY2VDb250
ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0IHNvIHdlIGNh
biBmaW5pc2ggbGF0ZXIKLQkJCQkJCQl9Ci0JCQkJCQkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7
Ci0JCQkJCQl9Ci0JCQkJCX0KLQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJfSBjYXRjaCAoSW5mZXJl
bmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJCS8vIEZJWE1FIHN0b3AtZ2FwIG1lYXN1cmUK
LQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0
TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7Ci0JCQkJCXJldHVybiBudWxsOworCQkJLy8gc3Vi
c3RpdHV0ZXMgbWF5IGhvbGQgbnVsbCB0byBkZW5vdGUgdW5yZXNvbHZlZCB2YXJzLCBidXQgbnVs
bCBhcmd1bWVudHMgZ290IHJlcGxhY2VkIHdpdGggcmVzcGVjdGl2ZSBvcmlnaW5hbCB2YXJpYWJs
ZSBpbiBwYXJhbSBtZXRob2QKKwkJCS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVk
IHR5cGUgYXJndW1lbnRzCisJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlw
ZUFyZ3VtZW50KCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pc1VuY2hlY2tlZCkgeyAv
LyBvbmx5IHJlbWVtYmVyIHVuY2hlY2tlZCBzdGF0dXMgcG9zdCAxNS4xMi4yLjcKKwkJCQkJaW50
IGxlbmd0aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOworCQkJCQlTeXN0
ZW0uYXJyYXljb3B5KGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFy
Z3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwogCQkJCX0KLQkJ
CX0gZWxzZSB7Ci0vLyA9PT09IDEuOCA9PT09Ci0JCQkJaW5mZXJlbmNlQ29udGV4dCA9IG5ldyBJ
bmZlcmVuY2VDb250ZXh0KG9yaWdpbmFsTWV0aG9kKTsKLQkJCQltZXRob2RTdWJzdGl0dXRlID0g
aW5mZXJGcm9tQXJndW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywg
cGFyYW1ldGVycywgaW5mZXJlbmNlQ29udGV4dCk7CisJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUu
cmV0dXJuVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CisJCQkJCVR5cGVCaW5kaW5nIGV4cGVj
dGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7CisJCQkJCWlm
IChleHBlY3RlZFR5cGUgIT0gbnVsbCkgeworCQkJCQkJLy8gcmVjb3JkIGl0IHdhcyBleHBsaWNp
dCBmcm9tIGNvbnRleHQsIGFzIG9wcG9zZWQgdG8gYXNzdW1lZCBieSBkZWZhdWx0IChzZWUgYmVs
b3cpCisJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1
ZTsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCWV4cGVjdGVkVHlwZSA9IHNjb3BlLmdldEphdmFMYW5n
T2JqZWN0KCk7IC8vIGFzc3VtZSBPYmplY3QgYnkgZGVmYXVsdAorCQkJCQl9CisJCQkJCWluZmVy
ZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBlOworCQkJCX0KKwkJCQltZXRo
b2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUoc2Nv
cGUsIGluZmVyZW5jZUNvbnRleHQpOwogCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlID09IG51bGwp
CiAJCQkJCXJldHVybiBudWxsOwotCQkJCQotCQkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xkIG51
bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFycywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCByZXBs
YWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2luYWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9kCi0J
CQkJLy8gMTUuMTIuMi44IC0gaW5mZXJyaW5nIHVucmVzb2x2ZWQgdHlwZSBhcmd1bWVudHMKLQkJ
CQlpZiAoaW5mZXJlbmNlQ29udGV4dC5oYXNVbnJlc29sdmVkVHlwZUFyZ3VtZW50KCkpIHsKLQkJ
CQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNoZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1
bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43Ci0JCQkJCQlpbnQgbGVuZ3RoID0gaW5mZXJl
bmNlQ29udGV4dC5zdWJzdGl0dXRlcy5sZW5ndGg7Ci0JCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGlu
ZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMsIDAsIHVuY2hlY2tlZEFyZ3VtZW50cyA9IG5ldyBU
eXBlQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgpOwotCQkJCQl9Ci0JCQkJCWlmIChtZXRob2RT
dWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgewotCQkJCQkJVHlwZUJp
bmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUo
KTsKLQkJCQkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCkgewotCQkJCQkJCS8vIHJlY29yZCBp
dCB3YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVm
YXVsdCAoc2VlIGJlbG93KQotCQkJCQkJCWluZmVyZW5jZUNvbnRleHQuaGFzRXhwbGljaXRFeHBl
Y3RlZFR5cGUgPSB0cnVlOwotCQkJCQkJfSBlbHNlIHsKLQkJCQkJCQlleHBlY3RlZFR5cGUgPSBz
Y29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKLQkJ
CQkJCX0KLQkJCQkJCWluZmVyZW5jZUNvbnRleHQuZXhwZWN0ZWRUeXBlID0gZXhwZWN0ZWRUeXBl
OwotCQkJCQl9Ci0JCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRlLmluZmVy
RnJvbUV4cGVjdGVkVHlwZShzY29wZSwgaW5mZXJlbmNlQ29udGV4dCk7Ci0JCQkJCWlmIChtZXRo
b2RTdWJzdGl0dXRlID09IG51bGwpCi0JCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQl9CiAJCQl9CiAJ
CX0KIApAQCAtMjY2LDYgKzE1Nyw5MyBAQAogCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsKIAl9
CiAKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qx
OChNZXRob2RCaW5kaW5nIG9yaWdpbmFsTWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywg
ZmluYWwgU2NvcGUgc2NvcGUsIEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlKSB7CisJCQor
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IG51
bGw7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gb3JpZ2luYWxNZXRo
b2QudHlwZVZhcmlhYmxlczsKKwkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsK
KwkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsK
KwkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUp
OworCQlDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRp
b25zKCk7CisJCWJvb2xlYW4gaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZhbHNlOworCQkKKwkJ
dHJ5IHsKKwkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVzdWx0ID0gbnVsbDsKKwkJCUJvdW5kU2V0
IHJlc3VsdCA9IG51bGw7CisJCQkvLyAtLS0tIDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0K
KwkJCWZpbmFsIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9IGludm9jYXRpb25TaXRlIGluc3Rh
bmNlb2YgRXhwcmVzc2lvbiAmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4
cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOworCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBpc1BvbHlF
eHByZXNzaW9uICYmIG9yaWdpbmFsTWV0aG9kLmlzQ29uc3RydWN0b3IoKTsKKwkJCWlmIChhcmd1
bWVudHMubGVuZ3RoID09IHBhcmFtZXRlcnMubGVuZ3RoKSB7CisJCQkJaW5mQ3R4MTguaW5mZXJl
bmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFsaWRh
dGUgaWYgMiBwaGFzZSBjaGVja2luZyAoc3RyaWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZmaWNp
ZW50LgorCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxN
ZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5zb2x2
ZSgpOworCQkJfQorCQkJaWYgKHJlc3VsdCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlzVmFy
YXJncygpKSB7CisJCQkJLy8gY2hlY2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxpY2FiaWxpdHkK
KwkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29w
ZSk7IC8vIHN0YXJ0IG92ZXIKKwkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNl
Q29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBs
aWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVz
dWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCkKKwkJ
CQlyZXR1cm4gbnVsbDsKKwkJCWlmIChpbmZDdHgxOC5pc1Jlc29sdmVkKHJlc3VsdCkpIHsKKwkJ
CQlpbmZDdHgxOC5zdGVwQ29tcGxldGVkID0gSW5mZXJlbmNlQ29udGV4dDE4LkFQUExJQ0FCSUxJ
VFlfSU5GRVJSRUQ7CisJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgUmVmZXJlbmNl
RXhwcmVzc2lvbikKKwkJCQkJKChSZWZlcmVuY2VFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0ZSku
aW5mZXJlbmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtpbmQ7ICAgLy8gQ0hFQ0sKKwkJCX0g
ZWxzZSB7CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CisJCQkvLyBBcHBsaWNhYmlsaXR5IHN1Y2Nl
ZWRlZCwgcHJvY2VlZCB0byBpbmZlciBpbnZvY2F0aW9uIHR5cGUsIGlmIHBvc3NpYmxlLgorCQkJ
VHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdl
dFR5cGUoKTsKKwkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOworCQkJaWYgKGV4
cGVjdGVkVHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4
dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKKwkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlv
biB0eXBlKTogLS0tLQorCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gcmVzdWx0OworCQkJCXJlc3Vs
dCA9IGluZkN0eDE4LmN1cnJlbnRCb3VuZHMuY29weSgpOyAvLyB0aGUgcmVzdWx0IGFmdGVyIHJl
ZHVjdGlvbiwgd2l0aG91dCBlZmZlY3RzIG9mIHJlc29sdmUoKQorCQkJCXJlc3VsdCA9IGluZkN0
eDE4LmluZmVySW52b2NhdGlvblR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUsIGludm9jYXRpb25T
aXRlLCBvcmlnaW5hbE1ldGhvZCk7CisJCQkJaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IHRydWU7
CisJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVsbDsKKwkJCQlpZiAoaGFzUmV0
dXJuUHJvYmxlbSkKKwkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7IC8vIGxldCdzIHBy
ZWZlciBhIHR5cGUgZXJyb3IgcmVnYXJkaW5nIHRoZSByZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGlu
ZyBubyBtYXRjaCBhdCBhbGwKKwkJCX0KKwkJCWlmIChyZXN1bHQgIT0gbnVsbCkgeworCQkJCS8v
IGFzc2VtYmxlIHRoZSBzb2x1dGlvbiBldGM6CisJCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMg
PSBpbmZDdHgxOC5nZXRTb2x1dGlvbnModHlwZVZhcmlhYmxlcywgaW52b2NhdGlvblNpdGUsIHJl
c3VsdCk7CisJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7CisJCQkJCW1ldGhvZFN1YnN0aXR1
dGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
KG9yaWdpbmFsTWV0aG9kLCBzb2x1dGlvbnMpOworCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkg
eyAvLyBpbGxlZ2FsbHkgd29ya2luZyBmcm9tIHRoZSBwcm92aXNpb25hbCByZXN1bHQ/CisJCQkJ
CQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVt
TWV0aG9kSWZOZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKKwkJCQkJCWlm
IChwcm9ibGVtTWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKKwkJCQkJ
CQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsK
KwkJCQkJCX0KKwkJCQkJfQorCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkgeworCQkJ
CQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJs
ZWQpCisJCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0ZvckNvbnRyYWRpdGlvbnMo
bWV0aG9kU3Vic3RpdHV0ZSwgaW52b2NhdGlvblNpdGUsIHNjb3BlKTsKKwkJCQkJCU1ldGhvZEJp
bmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3Bl
LCBhcmd1bWVudHMpOworCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkgeworCQkJCQkJ
CW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOworCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwor
CQkJCQkJfQorCQkJCQkJaW5mQ3R4MTguc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5wdXQoZXhwZWN0
ZWRUeXBlLCBuZXcgU29sdXRpb24obWV0aG9kU3Vic3RpdHV0ZSwgcmVzdWx0KSk7CisJCQkJCX0g
ZWxzZSB7CisJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbmV3IFBvbHlQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcobWV0aG9kU3Vic3RpdHV0ZSk7CisJCQkJCX0KKwkJCQkJaWYgKGlu
dm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikKKwkJCQkJCSgoSW52b2NhdGlvbikg
aW52b2NhdGlvblNpdGUpLnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChtZXRob2RTdWJzdGl0dXRl
LCBpbmZDdHgxOCk7IC8vIGtlZXAgY29udGV4dCBzbyB3ZSBjYW4gZmluaXNoIGxhdGVyCisJCQkJ
CXJldHVybiBtZXRob2RTdWJzdGl0dXRlOyAKKwkJCQl9CisJCQl9CisJCQlyZXR1cm4gbnVsbDsK
KwkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7CisJCQkvLyBGSVhNRSBz
dG9wLWdhcCBtZWFzdXJlCisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJl
bmNlRXJyb3IoZS5nZXRNZXNzYWdlKCksIGludm9jYXRpb25TaXRlKTsKKwkJCXJldHVybiBudWxs
OworCQl9CisJfQorCQogCU1ldGhvZEJpbmRpbmcgYm91bmRDaGVjazE4KFNjb3BlIHNjb3BlLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewogCQlTdWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0g
dGhpczsKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0aXR1
dGUgPSB0aGlzOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAw
MDAwLi41YWFhZTg5Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTAsMCArMSwxOCBAQAorLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogQ29udHJpYnV0b3JzOgor
ICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgor
ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXA7CisKK3B1YmxpYyBjbGFzcyBQb2x5UGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IHsgLy8gY29uZnVzZWQgY2l0aXplbi4KKworCXB1YmxpYyBQb2x5UGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBhcHBsaWNh
YmxlTWV0aG9kKSB7CisJCXN1cGVyKGFwcGxpY2FibGVNZXRob2Qub3JpZ2luYWxNZXRob2QsIGFw
cGxpY2FibGVNZXRob2QudHlwZUFyZ3VtZW50cywgYXBwbGljYWJsZU1ldGhvZC5lbnZpcm9ubWVu
dCk7CisJfQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5nLmphdmEKaW5kZXggNWM3NWI5MC4uZmRi
ZDJmMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCkBAIC01MSw2ICs1MSwxMSBAQAog
CXB1YmxpYyBib29sZWFuIGlzUG9seVR5cGUoKSB7CiAJCXJldHVybiB0cnVlOwogCX0KKwkKKwlA
T3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgeworCQlyZXR1cm4g
dGhpcy5leHByZXNzaW9uLmlzRnVuY3Rpb25hbFR5cGUoKTsKKwl9CiAKIAlwdWJsaWMgY2hhcltd
IHF1YWxpZmllZFNvdXJjZU5hbWUoKSB7CiAJCXJldHVybiByZWFkYWJsZU5hbWUoKTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UHJvYmxlbVJlYXNvbnMuamF2YQppbmRleCBiM2Q2MDA1Li4yMWQwN2ViIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9i
bGVtUmVhc29ucy5qYXZhCkBAIC00MCwxMCArNDAsMTAgQEAKIAlmaW5hbCBpbnQgTm9uU3RhdGlj
T3JBbGllblR5cGVSZWNlaXZlciA9IDIwOwogCWZpbmFsIGludCBBdHRlbXB0VG9CeXBhc3NEaXJl
Y3RTdXBlciA9IDIxOyAvLyBzdXBlciBhY2Nlc3Mgd2l0aGluIGRlZmF1bHQgbWV0aG9kCiAJZmlu
YWwgaW50IERlZmVjdGl2ZUNvbnRhaW5lckFubm90YXRpb25UeXBlID0gMjI7Ci0JZmluYWwgaW50
IFBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtID0gMjM7CisJZmluYWwgaW50
IEludm9jYXRpb25UeXBlSW5mZXJlbmNlRmFpbHVyZSA9IDIzOwogCWZpbmFsIGludCBBcHBsaWNh
YmxlTWV0aG9kT3ZlcnJpZGRlbkJ5SW5hcHBsaWNhYmxlID0gMjQ7CiAJZmluYWwgaW50IENvbnRy
YWRpY3RvcnlOdWxsQW5ub3RhdGlvbnMgPSAyNTsKIAlmaW5hbCBpbnQgTm9TdWNoTWV0aG9kT25B
cnJheSA9IDI2OwotCWZpbmFsIGludCBJbmZlcnJlZEFwcGxpYWJsZU1ldGhvZEluYXBwbGljYWJs
ZSA9IDI3OyAvLyAxOC41LjEgaWdub3JlcyBhcmd1bWVudHMgbm90IHBlcnRpbmVudCB0byBhcHBs
aWNhYmlsaXR5LiBXaGVuIHRoZXNlIGFyZSB0YWtlbiBpbnRvIGNvbnNpZGVyYXRpb24gbWV0aG9k
IGNvdWxkIGZhaWwgYXBwbGljYWJpbGl0eQorCWZpbmFsIGludCBJbmZlcnJlZEFwcGxpY2FibGVN
ZXRob2RJbmFwcGxpY2FibGUgPSAyNzsgLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBw
ZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25z
aWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkKIAlmaW5hbCBpbnQgTm9Q
cm9wZXJFbmNsb3NpbmdJbnN0YW5jZSA9IDI4OwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9SYXdUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZh
CmluZGV4IGUxNGM3NWYuLjMxNzAwYWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlw
ZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKQEAg
LTIwNSw2ICsyMDUsMTEgQEAKIAkJfQogCQl0aGlzLmFyZ3VtZW50cyA9IHR5cGVBcmd1bWVudHM7
CiAJfQorCQkKKwlAT3ZlcnJpZGUgCisJcHVibGljIFR5cGVCaW5kaW5nIHVuY2FwdHVyZShTY29w
ZSBzY29wZSkgeworCQlyZXR1cm4gdGhpczsKKwl9CiAJCiAJQE92ZXJyaWRlCiAJVHlwZUJpbmRp
bmcgc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKEluZmVyZW5jZVZhcmlhYmxlIHZhciwgVHlw
ZUJpbmRpbmcgc3Vic3RpdHV0ZVR5cGUpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2Nv
cGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBmMGM1NjgxLi5hNTJiNjY1
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9TY29wZS5qYXZhCkBAIC04NywxOSArODcsOSBAQAogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50
IE5PVF9SRUxBVEVEID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNT1JFX0dFTkVSSUMg
PSAxOwogCi0JLyoKLQkgKiBGbGFncyBmb3IgUEdNQi5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgp
IGFuZCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAotCSAqIHdoaWNoIG9mIHR3byBsZXZlbHMgb2Yg
aW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQgKG9yIGJvdGgpLgotCSAqLwotCS8qKiBSZXF1
ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKDE4LjUuMSkuICovCi0JcHVi
bGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJTElUWSA9IDE7Ci0JLyoqIFJlcXVlc3QgSW52
b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4yKS4gKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFs
IGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOwotCS8qKiBSZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBM
SUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FUSU9OX1RZUEV9IGluZmVyZW5jZS4gKi8KLQlw
dWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lORkVSRU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJ
TlZPQ0FUSU9OX1RZUEU7Ci0KIAlwdWJsaWMgaW50IGtpbmQ7CiAJcHVibGljIFNjb3BlIHBhcmVu
dDsKKwkKIAogCXByb3RlY3RlZCBTY29wZShpbnQga2luZCwgU2NvcGUgcGFyZW50KSB7CiAJCXRo
aXMua2luZCA9IGtpbmQ7CkBAIC00MzcsNiArNDI3LDkgQEAKIAkJcmV0dXJuIGRlZmF1bHRTdWJz
dGl0dXRvci5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgb3JpZ2luYWxUeXBlKTsKIAl9CiAKKwlw
dWJsaWMgYm9vbGVhbiBzaG91bGRDb25zdWx0U2hhZG93T3JpZ2luYWwoKSB7CisJCXJldHVybiBm
YWxzZTsgCisJfQogCS8qKgogCSAqIFJldHVybnMgYW4gYXJyYXkgb2YgdHlwZXMsIHdoZXJlIG9y
aWdpbmFsIHR5cGVzIGdvdCBzdWJzdGl0dXRlZCBnaXZlbiBhIHN1YnN0aXR1dGlvbi4KIAkgKiBP
bmx5IGFsbG9jYXRlIGFuIGFycmF5IGlmIGFueXRoaW5nIGlzIGRpZmZlcmVudC4KQEAgLTY5MSwx
MCArNjg0LDEwIEBACiAJICogSW50ZXJuYWwgdXNlIG9ubHkKIAkgKiBHaXZlbiBhIG1ldGhvZCwg
cmV0dXJucyBudWxsIGlmIGFyZ3VtZW50cyBjYW5ub3QgYmUgY29udmVydGVkIHRvIHBhcmFtZXRl
cnMuCiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBtZXRob2QgaW4gY2FzZSB0aGUgbWV0
aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBnb3QgdHJpZ2dlcmVkOwotCSAqIGlu
IGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBh
bnN3ZXIgaXQgYmFjay4KKwkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29t
cGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2suIAogCSAqLwotCXByb3RlY3RlZCBm
aW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlv
blNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgewotCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VMZXZlbCwg
ZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52
b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwkJcmV0dXJuIGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0aW9uU2l0ZSwgZmFsc2UpOwogCX0JCiAJ
LyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTcwMiw4ICs2OTUsNyBAQAogCSAqIFdpbGwg
YW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJp
YyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJlZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRo
b2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2su
CiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLAotCQkJ
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVh
biB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5k
aW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGJvb2xlYW4g
dGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykKIAl7CiAJCVR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5
cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOwogCQlU
eXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2QucGFyYW1ldGVyczsKQEAgLTczOCw5ICs3
MzAsMTUgQEAKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdzOwogCQkJZWxzZSAgLy8gZW5zdXJlIHRo
YXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxvdyBjYW4gdXBkYXRlIGFyZ3VtZW50cyB3
aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86IGFsd2F5cyBjb3B5IGJlZm9yZSB0aGUg
bG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRzLCAwLCBh
cmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF0sIDAsIGFyZ0xlbmd0aCk7Ci0JCQlt
ZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVu
Y2VMZXZlbCk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcu
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRp
b25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkgcmV0dXJuIG51bGw7IC8vIGluY29tcGF0
aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgcmV0dXJuIG1ldGhvZDsgLy8g
Ym91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNlZGVuY2UKKwkJCWlmIChjb21waWxlck9w
dGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiBtZXRob2Qg
aW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgaW52b2NhdGlv
blNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9u
ID0gKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlOworCQkJCUluZmVyZW5jZUNvbnRleHQxOCBp
bmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKKwkJCQlpZiAoaW5mQ3R4ICE9IG51bGwgJiYgaW5m
Q3R4LnN0ZXBDb21wbGV0ZWQgPj0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpCisJ
CQkJCXJldHVybiBtZXRob2Q7IC8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0
byByZWNoZWNrCisJCQl9CiAJCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVs
bCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCkBAIC03NTUsNyArNzUzLDcgQEAKIAkJCWlmIChD
b21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24g
JiYgY29tcGlsZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzcpCiAJCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyA9IGZhbHNlOwogCQl9Ci0JCWlm
ICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJy
ZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRpb25TaXRlKSkgPiBOT1RfQ09NUEFUSUJMRSkg
eworCQlpZiAoKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywg
dGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4gTk9UX0NPTVBBVElCTEUpIHsKIAkJCWlmICgo
bWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkg
IT0gMCkgewogCQkJCS8vIGdlbmVyYXRlIHBvbHltb3JwaGljIG1ldGhvZAogCQkJCXJldHVybiB0
aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBoaWNNZXRob2QobWV0aG9kLCBhcmd1bWVu
dHMpOwpAQCAtNzY3LDE1MCArNzY1LDEwIEBACiAJCS8vIGluIHdoaWNoIGNhc2UgdGhpcyBwcm9i
bGVtIGNhdGVnb3J5IHdpbGwgYmUgYm9ndXMKIAkJaWYgKGdlbmVyaWNUeXBlQXJndW1lbnRzICE9
IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQogCQkJ
cmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2QsIG1ldGhvZC5zZWxlY3Rvciwg
YXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kVHlwZU1pc21hdGNo
KTsKKwkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGlj
YWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0aW9uIG1ldGhvZCBj
b3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywgbGFtYmRhIHNoYXBlL2FyaXR5IG1pc21hdGNo
IC4uLikKKwkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpCisJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwg
bWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuSW5mZXJy
ZWRBcHBsaWNhYmxlTWV0aG9kSW5hcHBsaWNhYmxlKTsKIAkJcmV0dXJuIG51bGw7IC8vIGluY29t
cGF0aWJsZQotCX0KLQotCXByaXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbDE4
KE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0
aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7Ci0JCWpkazE4
Y2hlY2tzOgotCQlpZiAoc2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgY29tcGlsZXJPcHRp
b25zKCkuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJ
CUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBzaXRlOwotCQkJaWYgKG1ldGhv
ZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCUlu
ZmVyZW5jZUNvbnRleHQxOCBpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQo
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgbWV0aG9kKTsKLQkJCQlpZiAoaW5m
Q3R4ICE9IG51bGwpIHsKLQkJCQkJLy8gaW5mZXJlbmNlIGlzIHJlc3BvbnNpYmxlLCBubyBuZWVk
IHRvIHJlY2hlY2sKLQkJCQkJaWYgKGluZkN0eC5pc1ZhckFyZ3MoKSkKLQkJCQkJCXJldHVybiBW
QVJBUkdTX0NPTVBBVElCTEU7Ci0JCQkJCXJldHVybiBDT01QQVRJQkxFOwotCQkJCX0KLQkJCX0K
LQkJCS8vIGNvbGxlY3QgaW5uZXIgaW52b2NhdGlvbnMgd2hlcmUgdGhlIG91dGVyIGRpZCBub3Qg
aW52b2x2ZSBhbnkgaW5mZXJlbmNlOgotCQkJRXhwcmVzc2lvbltdIGludm9jYXRpb25Bcmd1bWVu
dHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJaWYgKGludm9jYXRpb25Bcmd1bWVudHMg
IT0gbnVsbCkgewotCQkJCUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVy
ID0gaW52b2NhdGlvbi5pbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCWludCBhcmdMZW4gPSBp
bnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsKLQkJCQlib29sZWFuIGlzVmFyQXJnc1tdID0gbmV3
IGJvb2xlYW5bMV07IC8vIGVtdWxhdGUgYW4gaW4tb3V0IHBhcmFtZXRlciBmb3IgY29tcGF0aWJp
bGl0eUxldmVsMThGcm9tSW5uZXIoLi4pCi0JCQkJaXNWYXJBcmdzWzBdID0gbWV0aG9kLmlzVmFy
YXJncygpICYmIGFyZ0xlbiAhPSBtZXRob2QucGFyYW1ldGVycy5sZW5ndGg7IC8vIGlmIHNhbWUg
bGVuZ3RocywgaXNWYXJBcmdzIGNhbiBzdGlsbCBiZSB1cGRhdGVkIGJlbG93Ci0JCQkJaW50IGxl
dmVsID0gQ09NUEFUSUJMRTsKLQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7
Ci0JCQkJCVR5cGVCaW5kaW5nIGFyZ3VtZW50VHlwZSA9IGkgPCBhcmd1bWVudHMubGVuZ3RoID8g
YXJndW1lbnRzW2ldIDogbnVsbDsgLy8gbGVuZ3RoIG1pc21hdGNoIG1heSBoYXBwZW4gZnJvbSBD
b2RlU25pcHBldE1lc3NhZ2VTZW5kLnJlc29sdmVUeXBlKCkgaW4gdGhlIGlmIChhcmdIYXNFcnJv
cikgYmxvY2suCi0JCQkJCWludCBuZXh0TGV2ZWwgPSBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21J
bm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBpbnZvY2F0aW9uQXJndW1lbnRzW2ld
LCBhcmd1bWVudFR5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsKLQkJCQkJaWYgKG5leHRMZXZl
bCA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJCXJldHVybiBuZXh0TGV2ZWw7Ci0JCQkJCWlmIChu
ZXh0TGV2ZWwgPT0gLTIpCi0JCQkJCQlicmVhayBqZGsxOGNoZWNrczsKLQkJCQkJbGV2ZWwgPSBN
YXRoLm1heChsZXZlbCwgIG5leHRMZXZlbCk7Ci0JCQkJfQotCQkJCXJldHVybiBsZXZlbDsgLy8g
bmVpdGhlciBOT1RfQ09NUEFUSUJMRSBub3IgdW5rbm93bigtMikgc2VlbgotCQkJfQotCQl9Ci0J
CS8vIGZhbGwgYmFjayB0byBvbGQgbWV0aG9kOgotCQlib29sZWFuIHRvbGVyYXRlSW5mZXJlbmNl
VmFyaWFibGVzID0gKChzaXRlIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikgJiYgKChS
ZWZlcmVuY2VFeHByZXNzaW9uKSBzaXRlKS50cmlhbFJlc29sdXRpb24pOwotCQlyZXR1cm4gcGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyk7Ci0JfQotCi0JcHJpdmF0
ZSBpbnQgY29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIoTWV0aG9kQmluZGluZyBtZXRob2Qs
IElubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyLCBFeHByZXNzaW9uIGlu
dm9jQXJnLCBUeXBlQmluZGluZyBhcmdUeXBlLCBpbnQgYXJnTGVuLCBpbnQgaSwgYm9vbGVhbltd
IGlzVmFyQXJncykKLQl7Ci0JCWludCBjb21wYXRpYmxlID0gaXNWYXJBcmdzWzBdID8gVkFSQVJH
U19DT01QQVRJQkxFIDogQ09NUEFUSUJMRTsKLQkJVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlID0g
aW52b2NBcmcucmVzb2x2ZWRUeXBlOwotCQlUeXBlQmluZGluZyB0YXJnZXRUeXBlID0gSW5mZXJl
bmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2QucGFyYW1ldGVycywgaSwgaXNWYXJBcmdz
WzBdKTsKLQkJaWYgKCFpc1ZhckFyZ3NbMF0gJiYgc2hvdWxkVHJ5VmFyYXJncyhtZXRob2QsIHJl
c29sdmVkVHlwZSwgdGFyZ2V0VHlwZSkpIHsKLQkJCWlzVmFyQXJnc1swXSA9IHRydWU7Ci0JCQl0
YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2QucGFyYW1l
dGVycywgaSwgdHJ1ZSk7Ci0JCX0KLQkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCkKLQkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsgLy8gbWlzbWF0Y2hpbmcgbnVtYmVyIG9mIGFyZ3Mgb3Igb3RoZXIg
c2V2ZXJlIHByb2JsZW0gaW5zaWRlIG1ldGhvZCBiaW5kaW5nCi0JCWludCBsZXZlbCA9IC0yOyAv
LyBkb24ndCBrbm93Ci0JCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgcmVz
b2x2ZWRUeXBlICE9IG51bGwpIHsKLQkJCUludm9jYXRpb24gaW5uZXJQb2x5ID0gKEludm9jYXRp
b24pIGludm9jQXJnOwotCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwocmVz
b2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKLQkJCWlmIChsZXZlbCAhPSBOT1RfQ09NUEFUSUJMRSkg
ewotCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnVHlwZSwgcmVzb2x2ZWRUeXBlKSAm
JiBpbm5lckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQlpbm5lckluZmVyZW5jZUhlbHBl
ci5yZWdpc3RlcklubmVyUmVzdWx0KG1ldGhvZCwgcmVzb2x2ZWRUeXBlLCBhcmdMZW4sIGkpOwot
CQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBsZXZlbCk7Ci0JCQl9IGVsc2UgewotCQkJ
CU1ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gaW5uZXJQb2x5LmJpbmRpbmcobnVsbCwgZmFs
c2UsIG51bGwpOyAvLyAxLiB0cnkgd2l0aG91dCB1cGRhdGUKLQkJCQlpZiAoaW5uZXJCaW5kaW5n
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJCVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBpbm5lclBhcmFtZXRlcml6ZWQgPSAoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBpbm5lckJpbmRpbmc7Ci0JCQkJCUluZmVy
ZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGlubmVyUG9seS5nZXRJbmZlcmVuY2VDb250ZXh0KGlu
bmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCWlmIChpbmZDdHgxOCAhPSBudWxsICYmICFpbmZDdHgx
OC5oYXNSZXN1bHRGb3IodGFyZ2V0VHlwZSkpIHsKLQkJCQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBj
b21wYXRpYmxlLCBiZWNhdXNlIGluZmVyZW5jZSBzdGlsbCBuZWVkcyB0byBjb21wbGV0ZT8KLQkJ
CQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJCQkJCU1ldGhvZEJp
bmRpbmcgc29sdXRpb24gPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKGlubmVyUG9seSwg
aW5uZXJQYXJhbWV0ZXJpemVkKTsKLQkJCQkJCWlmIChzb2x1dGlvbiAhPSBudWxsICYmIHNvbHV0
aW9uLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQlpZiAoaW5uZXJQb2x5LnVwZGF0ZUJpbmRp
bmdzKHNvbHV0aW9uLCB0YXJnZXRUeXBlKSkgewotCQkJCQkJCQlpZiAoaW5uZXJJbmZlcmVuY2VI
ZWxwZXIgIT0gbnVsbCkKLQkJCQkJCQkJCWlubmVySW5mZXJlbmNlSGVscGVyLnJlZ2lzdGVySW5u
ZXJSZXN1bHQobWV0aG9kLCBpbnZvY0FyZy5yZXNvbHZlZFR5cGUsIGFyZ0xlbiwgaSk7Ci0JCQkJ
CQkJfQotCQkJCQkJCWlmIChzb2x1dGlvbi5yZXR1cm5UeXBlICE9IG51bGwpIHsKLQkJCQkJCQkJ
bGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoc29sdXRpb24ucmV0dXJuVHlwZSwg
dGFyZ2V0VHlwZSk7Ci0JCQkJCQkJCWlmIChsZXZlbCAhPSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJ
CQkJCXJldHVybiBNYXRoLm1heChjb21wYXRpYmxlLCBsZXZlbCk7Ci0JCQkJCQkJfQotCQkJCQkJ
fQotCQkJCQkJaW52b2NBcmcuc2V0RXhwZWN0ZWRUeXBlKG51bGwpOwotCQkJCQkJcmV0dXJuIE5P
VF9DT01QQVRJQkxFOwotCQkJCQl9IGVsc2UgaWYgKGlubmVyUG9seSBpbnN0YW5jZW9mIEFsbG9j
YXRpb25FeHByZXNzaW9uKSB7Ci0JCQkJCQkvLyBub3QgZGV0ZWN0ZWQgYXMgY29tcGF0aWJsZSwg
YmVjYXVzZSBpdHMgYSBkaWFtb25kIHdob3NlIHR5cGUgaGFzbid0IHlldCBiZWVuIGluZmVycmVk
PwotCQkJCQkJVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRzID0gcmVzb2x2ZWRUeXBlLnR5cGVB
cmd1bWVudHMoKTsKLQkJCQkJCWlmICh0eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZUFyZ3Vt
ZW50cy5sZW5ndGggPT0gMCkgewotCQkJCQkJCUFsbG9jYXRpb25FeHByZXNzaW9uIGFsbG9jID0g
KEFsbG9jYXRpb25FeHByZXNzaW9uKSBpbm5lclBvbHk7Ci0JCQkJCQkJaWYgKChhbGxvYy50eXBl
LmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMCkgewotCQkJCQkJCQkvLyBub3QteWV0LWlu
ZmVycmVkIGRpYW1vbmQ6IGVyYXN1cmUgY29tcGF0aWJpbGl0eSBzaG91bGQgc3VmZmljZSwgZGV0
YWlsIHdpbGwgYmUgY2hlY2tlZCB1c2luZyBpbmZlcmVuY2UKLQkJCQkJCQkJaWYgKHJlc29sdmVk
VHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUuZXJhc3VyZSgpLCB0aGlzKSkKLQkJCQkJ
CQkJCXJldHVybiBjb21wYXRpYmxlOwotCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0J
CQkJCQkJfQotCQkJCQkJfQotCQkJCQl9Ci0JCQkJfSBlbHNlIGlmIChpbm5lclBvbHkgaW5zdGFu
Y2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRN
ZXRob2QgPSBpbm5lclBvbHkuYmluZGluZyh0YXJnZXRUeXBlLCBmYWxzZSwgbnVsbCk7IC8vIDIu
IHRyeSB3aXRoIHVwZGF0aW5nCi0JCQkJCWlmICh1cGRhdGVkTWV0aG9kICE9IGlubmVyQmluZGlu
ZyAmJiB1cGRhdGVkTWV0aG9kICE9IG51bGwpIHsKLQkJCQkJCWlmICh1cGRhdGVkTWV0aG9kLmlz
VmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCWlmICh1cGRhdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNz
LmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0JCQkJCQkJcmV0dXJuIGNvbXBhdGlibGU7
Ci0JCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJCQl9IGVsc2UgaWYgKHVwZGF0ZWRN
ZXRob2QucHJvYmxlbUlkKCkgPT0gUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKSB7Ci0JCQkJCQkJ
bGV2ZWwgPSAtMjsgLy8gbmVpdGhlciBnb29kIG5vciBiYWQsIGFuc3dlciAidW5rbm93biIKLQkJ
CQkJCX0KLQkJCQkJfQotCQkJCX0KLQkJCX0KLQkJfSBlbHNlIGlmIChpbnZvY0FyZy5pc1BvbHlF
eHByZXNzaW9uKCkpIHsKLQkJCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIENvbmRpdGlvbmFsRXhw
cmVzc2lvbikgewotCQkJCUNvbmRpdGlvbmFsRXhwcmVzc2lvbiBjZSA9IChDb25kaXRpb25hbEV4
cHJlc3Npb24pIGludm9jQXJnOwotCQkJCWludCBsZXZlbDEgPSBjb21wYXRpYmlsaXR5TGV2ZWwx
OEZyb21Jbm5lcihtZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBjZS52YWx1ZUlmVHJ1ZSwg
YXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3MpOwotCQkJCWlmIChsZXZlbDEgPT0gTk9UX0NP
TVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQlpbnQgbGV2ZWwyID0g
Y29tcGF0aWJpbGl0eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBl
ciwgY2UudmFsdWVJZkZhbHNlLCBhcmdUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJ
aWYgKGxldmVsMiA9PSBOT1RfQ09NUEFUSUJMRSkKLQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxF
OwotCQkJCXJldHVybiBNYXRoLm1heChsZXZlbDEsIGxldmVsMik7Ci0JCQl9Ci0JCQkvLyBMRSBv
ciBSRToKLQkJCWlmIChpbnZvY0FyZy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMp
KQotCQkJCXJldHVybiBDT01QQVRJQkxFOwotCQkJaWYgKCFpc1ZhckFyZ3NbMF0gJiYgbWV0aG9k
LmlzVmFyYXJncygpKSB7IC8vIGNhbid0IHVzZSBzaG91bGRUcnlWYXJhcmdzIHdpdGhvdXQgYSBy
ZXNvbHZlZFR5cGUsIHNvIGp1c3QgdHJ5IGl0OgotCQkJCWlzVmFyQXJnc1swXSA9IHRydWU7Ci0J
CQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBh
cmFtZXRlcnMsIGksIHRydWUpOwotCQkJCWlmICh0YXJnZXRUeXBlICE9IG51bGwgJiYgaW52b2NB
cmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkKLQkJCQkJcmV0dXJuIFZBUkFS
R1NfQ09NUEFUSUJMRTsKLQkJCX0KLQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJfSBlbHNl
IGlmIChyZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiByZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmco
KSkgewotCQkJLy8gbmVlZCB0byBoYW5kbGUgIm5vcm1hbCIgZXhwcmVzc2lvbnMgdG9vLCBzaW5j
ZSBtaXhlZCBwb2x5L3N0YW5kYWxvbmUgYXJndW1lbnQgbGlzdHMgbXVzdCBiZSBmdWxseSBhbmFs
eXplZC4KLQkJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwocmVzb2x2ZWRUeXBl
LCB0YXJnZXRUeXBlKTsKLQkJfQotCQlyZXR1cm4gbGV2ZWw7Ci0JfQotCi0JcHJpdmF0ZSBib29s
ZWFuIHNob3VsZFRyeVZhcmFyZ3MoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nIHJl
c29sdmVkVHlwZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQlpZiAoIW1ldGhvZC5pc1Zh
cmFyZ3MoKSkKLQkJCXJldHVybiBmYWxzZTsKLQkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCkKLQkJ
CXJldHVybiB0cnVlOwkvLyBvZmYgcmFuZ2UKLQkJaWYgKHRhcmdldFR5cGUuaXNBcnJheVR5cGUo
KSAmJiByZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiAhcmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdp
dGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8gbm90IGEgZGlyZWN0IG1h
dGNoIGJ1dCBob3BlIHRvIGltcHJvdmUKLQkJcmV0dXJuIGZhbHNlOwogCX0KIAogCS8qKgpAQCAt
MTI2Nyw3ICsxMTI1LDcgQEAKIAkJCW5leHQ6CiAJCQlmb3IgKGludCBpID0gc3RhcnRGb3VuZFNp
emU7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGlu
ZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50QXQoaSk7Ci0JCQkJTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGlu
ZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCU1l
dGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlpZiAoY29t
cGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFs
aWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChjb25jcmV0ZU1hdGNoZXMgIT0gbnVsbCkgewpAQCAt
MTI5Nyw4ICsxMTU1LDYgQEAKIAkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7IC8vIGNhbiBiZSBu
dWxsCiAJCQl9CiAJCQljb25jcmV0ZU1hdGNoID0gY2FuZGlkYXRlc1swXTsKLQkJCS8vIDEuODog
R2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTgu
NS4yKToKLQkJCWNvbmNyZXRlTWF0Y2ggPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25T
aXRlLCBjb25jcmV0ZU1hdGNoLCBhcmd1bWVudFR5cGVzKTsKIAkJCWlmIChjb25jcmV0ZU1hdGNo
ICE9IG51bGwpCiAJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNl
cyhjb25jcmV0ZU1hdGNoLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJcmV0dXJuIGNvbmNyZXRlTWF0
Y2g7CkBAIC0xMzcxLDcgKzEyMjcsNyBAQAogCQkJCS8vIHRhcmdldGluZyBhIGdlbmVyaWMgbWV0
aG9kIGNvdWxkIGZpbmQgYW4gZXhhY3QgbWF0Y2ggd2l0aCB2YXJpYWJsZSByZXR1cm4gdHlwZQog
CQkJCWlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpICE9IG51bGwpIHsK
IAkJCQkJLy8gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoLi4pIHdpbGwgcmV0dXJuIGEgUG9seW1v
cnBoaWNNZXRob2RCaW5kaW5nIGlmIG5lZWRlZAotCQkJCQlleGFjdE1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSwgRlVMTF9JTkZFUkVOQ0UpOworCQkJCQlleGFjdE1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJ
fSBlbHNlIGlmICgoZXhhY3RNZXRob2QudGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvbHlt
b3JwaGljU2lnbmF0dXJlKSAhPSAwKSB7CiAJCQkJCS8vIGdlbmVyYXRlIHBvbHltb3JwaGljIG1l
dGhvZAogCQkJCQlyZXR1cm4gdGhpcy5lbnZpcm9ubWVudCgpLmNyZWF0ZVBvbHltb3JwaGljTWV0
aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKQEAgLTE3NjMsMjIgKzE2MTksMTMgQEAK
IAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZm9yIChpbnQgaSA9
IDA7IGkgPCBmb3VuZFNpemU7IGkrKykgewogCQkJCU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGlu
ZyA9IChNZXRob2RCaW5kaW5nKSBmb3VuZC5lbGVtZW50QXQoaSk7Ci0JCQkJTWV0aG9kQmluZGlu
ZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGlu
ZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCU1l
dGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlpZiAoY29t
cGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFs
aWRCaW5kaW5nKCkpIHsKIAkJCQkJCWlmIChmb3VuZFNpemUgPT0gMSAmJiBjb21wYXRpYmxlTWV0
aG9kLmNhbkJlU2VlbkJ5KHJlY2VpdmVyVHlwZSwgaW52b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJ
CQkJCQkJLy8gcmV0dXJuIHRoZSBzaW5nbGUgdmlzaWJsZSBtYXRjaCBub3cKIAkJCQkJCQlpZiAo
c2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQogCQkJCQkJCQlyZXR1cm4gZmluZERlZmF1
bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBNZXRob2RCaW5k
aW5nIFtdIHtjb21wYXRpYmxlTWV0aG9kfSk7Ci0vLyA9PT09IDEuODogRmluYWxpemUgdHlwZSBp
bmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09Ci0JCQkJCQkJTWV0aG9kQmluZGluZyBp
bXByb3ZlZCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNvbXBhdGlibGVN
ZXRob2QsIGFyZ3VtZW50VHlwZXMpOwotCQkJCQkJCWlmIChpbXByb3ZlZCAhPSBudWxsICYmIGlt
cHJvdmVkLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJCQkJY29tcGF0aWJsZU1ldGhvZCA9IGlt
cHJvdmVkOwotCQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJCXByb2JsZW1NZXRob2QgPSBpbXByb3Zl
ZDsKLQkJCQkJCQkJY29udGludWU7Ci0JCQkJCQkJfQotLy8gPT09PSAxLjggPT09PQogCQkJCQkJ
CXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjb21wYXRpYmxlTWV0aG9kLnRocm93bkV4
Y2VwdGlvbnMpOwogCQkJCQkJCXJldHVybiBjb21wYXRpYmxlTWV0aG9kOwogCQkJCQkJfQpAQCAt
MTg4Nyw4ICsxNzM0LDcgQEAKIAkJCWNhc2UgMSA6CiAJCQkJaWYgKHNlYXJjaEZvckRlZmF1bHRB
YnN0cmFjdE1ldGhvZCkKIAkJCQkJcmV0dXJuIGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVj
ZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNz
SGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0aG9kQmluZGluZyBbXSB7IGNhbmRpZGF0ZXNb
MF0gfSk7Ci0JCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91
dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgotCQkJCWNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlv
blR5cGUoaW52b2NhdGlvblNpdGUsIGNhbmRpZGF0ZXNbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJ
CWNhbmRpZGF0ZSA9IGNhbmRpZGF0ZXNbMF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQog
CQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2Vw
dGlvbnMpOwogCQkJCXJldHVybiBjYW5kaWRhdGU7CkBAIC0yMzgwLDcgKzIyMjYsMTAgQEAKIAkJ
fQogCQlpZiAoZXhhY3RNZXRob2QgPT0gbnVsbCB8fCAhZXhhY3RNZXRob2QuY2FuQmVTZWVuQnko
aW52b2NhdGlvblNpdGUsIHRoaXMpKQogCQkJcmV0dXJuIG51bGw7Ci0JCWlmIChleGFjdE1ldGhv
ZC5pc1ZhcmFyZ3MoKSB8fCBleGFjdE1ldGhvZC50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5O
T19UWVBFX1ZBUklBQkxFUyAmJiBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygp
ID09IG51bGwpCisJCQorCQlmaW5hbCBUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBpbnZv
Y2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOworCQlUeXBlVmFyaWFibGVCaW5kaW5n
W10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0TWV0aG9kLnR5cGVWYXJpYWJsZXMoKTsKKwkJaWYgKGV4
YWN0TWV0aG9kLmlzVmFyYXJncygpIHx8ICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMgJiYgKHR5cGVBcmd1bWVudHMgPT0gbnVsbCB8fCB0eXBlQXJndW1lbnRzLmxl
bmd0aCAhPSB0eXBlVmFyaWFibGVzLmxlbmd0aCkpKQogCQkJcmV0dXJuIG51bGw7CiAJCQogCQlp
ZiAocmVjZWl2ZXJUeXBlLmlzQXJyYXlUeXBlKCkpIHsKQEAgLTIzOTUsNiArMjI0NCwxMCBAQAog
CQl7CiAJCQlyZXR1cm4gZW52aXJvbm1lbnQoKS5jcmVhdGVHZXRDbGFzc01ldGhvZChyZWNlaXZl
clR5cGUsIGV4YWN0TWV0aG9kLCB0aGlzKTsKIAkJfQorCQkKKwkJaWYgKHR5cGVWYXJpYWJsZXMg
IT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgCisJCQlyZXR1cm4gZW52aXJvbm1lbnQoKS5j
cmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChleGFjdE1ldGhvZCwgdHlwZUFyZ3VtZW50
cyk7CisJCiAJCXJldHVybiBleGFjdE1ldGhvZDsKIAl9CiAJCQpAQCAtMjQxNywxOSArMjI3MCwy
NiBAQAogCQlNZXRob2RCaW5kaW5nIGV4YWN0Q29uc3RydWN0b3IgPSBudWxsOwogCQl1bml0U2Nv
cGUucmVjb3JkVHlwZVJlZmVyZW5jZShyZWNlaXZlclR5cGUpOwogCQlNZXRob2RCaW5kaW5nW10g
bWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCk7CisJ
CWZpbmFsIFR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBpbnZvY2F0aW9uU2l0
ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygpOwogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0
aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJTWV0aG9kQmluZGluZyBjb25zdHJ1
Y3RvciA9IG1ldGhvZHNbaV07CiAJCQlpZiAoIWNvbnN0cnVjdG9yLmNhbkJlU2VlbkJ5KGludm9j
YXRpb25TaXRlLCB0aGlzKSkKIAkJCQljb250aW51ZTsKIAkJCWlmIChjb25zdHJ1Y3Rvci5pc1Zh
cmFyZ3MoKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCWlmIChjb25zdHJ1Y3Rvci50eXBlVmFyaWFi
bGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBpbnZvY2F0aW9uU2l0ZS5nZW5l
cmljVHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQlpZiAoY29uc3RydWN0b3IudHlwZVZhcmlh
YmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCWlmIChleGFjdENvbnN0cnVjdG9yID09
IG51bGwpIHsKIAkJCQlleGFjdENvbnN0cnVjdG9yID0gY29uc3RydWN0b3I7CiAJCQl9IGVsc2Ug
ewogCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWZpbmFsIFR5cGVWYXJpYWJsZUJpbmRp
bmdbXSB0eXBlVmFyaWFibGVzID0gZXhhY3RDb25zdHJ1Y3Rvci50eXBlVmFyaWFibGVzKCk7CisJ
CWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKKwkJCWlm
ICh0eXBlVmFyaWFibGVzLmxlbmd0aCAhPSBnZW5lcmljVHlwZUFyZ3VtZW50cy5sZW5ndGgpCisJ
CQkJcmV0dXJuIG51bGw7CisJCQlleGFjdENvbnN0cnVjdG9yID0gZW52aXJvbm1lbnQoKS5jcmVh
dGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChleGFjdENvbnN0cnVjdG9yLCBnZW5lcmljVHlw
ZUFyZ3VtZW50cyk7CiAJCX0KIAkJcmV0dXJuIGV4YWN0Q29uc3RydWN0b3I7CiAJfQpAQCAtMjQ1
OCw3ICsyMzE4LDcgQEAKIAkJCWlmIChtZXRob2RCaW5kaW5nICE9IG51bGwgJiYgbWV0aG9kQmlu
ZGluZy5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCSAgICAvLyB0YXJn
ZXRpbmcgYSBub24gZ2VuZXJpYyBjb25zdHJ1Y3RvciB3aXRoIHR5cGUgYXJndW1lbnRzID8KIAkJ
CSAgICBpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAhPSBudWxsKQot
CQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmlu
ZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJ
CSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRp
bmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlyZXR1cm4gbWV0aG9kQmlu
ZGluZzsKIAkJCX0KIAkJCU1ldGhvZEJpbmRpbmdbXSBtZXRob2RzID0gcmVjZWl2ZXJUeXBlLmdl
dE1ldGhvZHMoVHlwZUNvbnN0YW50cy5JTklULCBhcmd1bWVudFR5cGVzLmxlbmd0aCk7CkBAIC0y
NDcyLDcgKzIzMzIsNyBAQAogCQkJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJCQlNZXRob2RC
aW5kaW5nIHByb2JsZW1NZXRob2QgPSBudWxsOwogCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9
IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNv
bXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQkJTWV0aG9kQmlu
ZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tp
XSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0
aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmco
KSkKIAkJCQkJCWNvbXBhdGlibGVbY29tcGF0aWJsZUluZGV4KytdID0gY29tcGF0aWJsZU1ldGhv
ZDsKQEAgLTI0OTUsOCArMjM1NSw3IEBACiAJCQkJCXZpc2libGVbdmlzaWJsZUluZGV4KytdID0g
bWV0aG9kOwogCQkJfQogCQkJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7Ci0JCQkJLy8gMS44OiBH
aXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41
LjIpOgotCQkJCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNp
YmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJCQlyZXR1cm4gdmlzaWJsZVswXTsKIAkJCX0KIAkJ
CWlmICh2aXNpYmxlSW5kZXggPT0gMCkKIAkJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKApAQCAtMjc2MCw3ICsyNjE5LDcgQEAKIAkJCQkJCQkJaWYgKGZvdW5kUHJvYmxlbSA9PSBu
dWxsKQogCQkJCQkJCQkJZm91bmRQcm9ibGVtID0gcG9zc2libGU7IC8vIGFuc3dlciBhcyBlcnJv
ciBjYXNlIG1hdGNoCiAJCQkJCQkJfSBlbHNlIGlmIChwb3NzaWJsZS5pc1N0YXRpYygpKSB7Ci0J
CQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJ
TElUWSk7CisJCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7
CiAJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJCQkJCWlmIChj
b21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJCQkJCQlpZiAoY29tcGF0
aWJsZU1ldGhvZC5jYW5CZVNlZW5CeSh1bml0U2NvcGUuZlBhY2thZ2UpKSB7CkBAIC0zNTk2LDgg
KzM0NTUsOCBAQAogCQkJZm9yIChpbnQgaSA9IChvbmVQYXJhbXNMZW5ndGggPiB0d29QYXJhbXNM
ZW5ndGggPyB0d29QYXJhbXNMZW5ndGggOiBvbmVQYXJhbXNMZW5ndGgpIC0gMjsgaSA+PSAwOyBp
LS0pCiAJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhvbmVQYXJhbXNbaV0sIHR3b1BhcmFt
c1tpXSkgJiYgIW9uZVBhcmFtc1tpXS5pc0NvbXBhdGlibGVXaXRoKHR3b1BhcmFtc1tpXSkpCiAJ
CQkJCXJldHVybiBmYWxzZTsKLQkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwob25l
LCB0d29QYXJhbXMsIHRydWUsIGZhbHNlKSA9PSBOT1RfQ09NUEFUSUJMRQotCQkJCQkmJiBwYXJh
bWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQYXJhbXMsIHRydWUsIGZhbHNlKSA9PSBW
QVJBUkdTX0NPTVBBVElCTEUpCisJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG9u
ZSwgdHdvUGFyYW1zLCB0cnVlKSA9PSBOT1RfQ09NUEFUSUJMRQorCQkJCQkmJiBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwodHdvLCBvbmVQYXJhbXMsIHRydWUpID09IFZBUkFSR1NfQ09NUEFU
SUJMRSkKIAkJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQlyZXR1cm4gZmFsc2U7CkBAIC00MzcyLDMz
ICs0MjMxLDIyIEBACiAJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgbW9zdFNwZWNpZmlj
TWV0aG9kQmluZGluZyhNZXRob2RCaW5kaW5nW10gdmlzaWJsZSwgaW50IHZpc2libGVTaXplLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb25TaXRlIGludm9jYXRp
b25TaXRlLCBSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewogCiAJCWJvb2xlYW4gaXNK
ZGsxOCA9IGNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzg7Ci0KIAkJLy8gY29tbW9uIHBhcnQgZm9yIGFsbCBjb21wbGlhbmNlIGxldmVsczoK
IAkJaW50W10gY29tcGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbdmlzaWJsZVNpemVdOwogCQlp
bnQgY29tcGF0aWJsZUNvdW50ID0gMDsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6
ZTsgaSsrKSB7Ci0JCQlUeXBlQmluZGluZ1tdIGFyZ1R5cGVzID0gYXJndW1lbnRUeXBlczsKLQkJ
CWlmIChpc0pkazE4ICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewot
CQkJCUlubmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyID0gKChJbnZvY2F0
aW9uKWludm9jYXRpb25TaXRlKS5pbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJCWlmIChpbm5l
ckluZmVyZW5jZUhlbHBlciAhPSBudWxsKQotCQkJCQlhcmdUeXBlcyA9IGlubmVySW5mZXJlbmNl
SGVscGVyLmdldEFyZ3VtZW50VHlwZXNGb3JDYW5kaWRhdGUodmlzaWJsZVtpXSwgYXJndW1lbnRU
eXBlcyk7Ci0JCQl9Ci0JCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJnVHlwZXMpKSAhPSBOT1RfQ09NUEFUSUJM
RSkgeworCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspCisJCQlpZiAoKGNv
bXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJs
ZVtpXSwgYXJndW1lbnRUeXBlcykpICE9IE5PVF9DT01QQVRJQkxFKSB7CiAJCQkJaWYgKGkgIT0g
Y29tcGF0aWJsZUNvdW50KSB7CiAJCQkJCXZpc2libGVbY29tcGF0aWJsZUNvdW50XSA9IHZpc2li
bGVbaV07CiAJCQkJCWNvbXBhdGliaWxpdHlMZXZlbHNbY29tcGF0aWJsZUNvdW50XSA9IGNvbXBh
dGliaWxpdHlMZXZlbHNbaV07CiAJCQkJfQogCQkJCWNvbXBhdGlibGVDb3VudCsrOwogCQkJfQot
CQl9Ci0vLyBUT0RPOiBEaXNhYmxlZCwgYmVjYXVzZSB3ZSBrbm93IGEgc2l0dWF0aW9uIHdoZXJl
IHRoaXMgaXMgZXhwZWN0ZWQsIHNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDI5NDkwCi0v
LwkJaWYgKGNvbXBhdGlibGVDb3VudCAhPSB2aXNpYmxlU2l6ZSkgewotLy8JCQlwcm9ibGVtUmVw
b3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlUHJvYmxlbSgiKFJlY292ZXJlZCkgSW50ZXJuYWwgaW5j
b25zaXN0ZW5jeSB3aGlsZSBjaGVja2luZyBpbnZvY2F0aW9uIGFtYmlndWl0eSIsIGludm9jYXRp
b25TaXRlLCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5nKTsgLy8kTk9OLU5MUy0xJAotLy8JCX0K
KwkJCiAJCWlmIChjb21wYXRpYmxlQ291bnQgPT0gMCkgewogCQkJcmV0dXJuIG5ldyBQcm9ibGVt
TWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVt
UmVhc29ucy5Ob3RGb3VuZCk7CiAJCX0gZWxzZSBpZiAoY29tcGF0aWJsZUNvdW50ID09IDEpIHsK
LQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0
aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQlNZXRob2RCaW5kaW5nIGNh
bmRpZGF0ZSA9IHZpc2libGVbMF07CiAJCQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJY29t
cGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3du
RXhjZXB0aW9ucyk7CiAJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDQwOCw4ICs0MjU2LDggQEAK
IAkJCVN5c3RlbS5hcnJheWNvcHkoY29tcGF0aWJpbGl0eUxldmVscywgMCwgY29tcGF0aWJpbGl0
eUxldmVscyA9IG5ldyBpbnRbY29tcGF0aWJsZUNvdW50XSwgMCwgY29tcGF0aWJsZUNvdW50KTsK
IAkJfQogCQkKKwkJCiAJCU1ldGhvZEJpbmRpbmdbXSBtb3JlU3BlY2lmaWMgPSBuZXcgTWV0aG9k
QmluZGluZ1t2aXNpYmxlU2l6ZV07Ci0KIAkJaWYgKGlzSmRrMTgpIHsKIAkJCS8vIDE1LjEyLjIu
NSBDaG9vc2luZyB0aGUgTW9zdCBTcGVjaWZpYyBNZXRob2QKIAkJCWludCBjb3VudCA9IDA7CkBA
IC00NDY5LDcgKzQzMTcsNyBAQAogCQkJaWYgKGNvdW50ID09IDApIHsKIAkJCQlyZXR1cm4gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0sIHZpc2libGVbMF0uc2VsZWN0b3IsIHZp
c2libGVbMF0ucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKTsKIAkJCX0gZWxz
ZSBpZiAoY291bnQgPT0gMSkgewotCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJ
bnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgbW9yZVNwZWNpZmljWzBdLCBhcmd1bWVudFR5
cGVzKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IG1vcmVTcGVjaWZpY1swXTsKIAkJ
CQlpZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVj
b3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCXJldHVy
biBjYW5kaWRhdGU7CkBAIC00NTIzLDcgKzQzNzEsNyBAQAogCQkJCQkJCX0KIAkJCQkJCX0KIAkJ
CQkJCU1ldGhvZEJpbmRpbmcgYWNjZXB0YWJsZSA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZFRvVGVzdCwgdGllYnJlYWtNZXRob2QucGFyYW1ldGVycywKLQkJCQkJCQkJdGllQnJlYWtJ
bnZvY2F0aW9uU2l0ZSwgSU5WT0NBVElPTl9UWVBFLCBsZXZlbCA9PSBWQVJBUkdTX0NPTVBBVElC
TEUpOworCQkJCQkJCQl0aWVCcmVha0ludm9jYXRpb25TaXRlLCBsZXZlbCA9PSBWQVJBUkdTX0NP
TVBBVElCTEUpOwogCQkJCQkJLyogVGhlcmUgYXJlIDQgY2hvaWNlcyB0byBjb25zaWRlciB3aXRo
IGN1cnJlbnQgJiBuZXh0IDoKIAkJCQkJCSBmb28oQikgJiBmb28oQSkgd2hlcmUgQiBleHRlbmRz
IEEKIAkJCQkJCSAxLiB0aGUgMiBtZXRob2RzIGFyZSBlcXVhbCAoYm90aCBhY2NlcHQgZWFjaCBv
dGhlcnMgcGFyYW1ldGVycykgLT4gd2FudCB0byBjb250aW51ZQpAQCAtNDU0Nyw4ICs0Mzk1LDcg
QEAKIAkJCWlmIChjb3VudCA9PSAxKSB7CiAJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxl
U2l6ZTsgaSsrKSB7CiAJCQkJCWlmIChtb3JlU3BlY2lmaWNbaV0gIT0gbnVsbCkgewotCQkJCQkJ
Ly8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRh
c2tzICgxOC41LjIpOgotCQkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZlckludm9j
YXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJ
CQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gdmlzaWJsZVtpXTsKIAkJCQkJCWlmIChjYW5k
aWRhdGUgIT0gbnVsbCkKIAkJCQkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5cGVS
ZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJCXJldHVybiBjYW5k
aWRhdGU7CkBAIC00NjY5LDggKzQ1MTYsNyBAQAogCQkJCWlmIChtb3N0U3BlY2lmaWNFeGNlcHRp
b25zICE9IG51bGwgJiYgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyAhPSBjdXJyZW50LnRocm93bkV4
Y2VwdGlvbnMpIHsKIAkJCQkJcmV0dXJuIG5ldyBNb3N0U3BlY2lmaWNFeGNlcHRpb25NZXRob2RC
aW5kaW5nKGN1cnJlbnQsIG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMpOwogCQkJCX0KLQkJCQkvLyAx
Ljg6IEJlZm9yZSByZXR1cm5pbmcgZ2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBv
dXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlw
ZShpbnZvY2F0aW9uU2l0ZSwgY3VycmVudCwgYXJndW1lbnRUeXBlcyk7CisJCQkJcmV0dXJuIGN1
cnJlbnQ7CiAJCQl9CiAJCX0KIApAQCAtNDczNSwxNCArNDU4MSwyNSBAQAogCX0KIAogCXB1Ymxp
YyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewotCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UpOworCQlyZXR1cm4gcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSk7CiAJfQkKLQlw
dWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RCaW5kaW5nIG1ldGhv
ZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcywgYm9vbGVhbiB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykgeworCXB1YmxpYyBpbnQg
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJ
CVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwogCQlpbnQgcGFy
YW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKIAkJaW50IGFyZ0xlbmd0aCA9IGFyZ3VtZW50
cy5sZW5ndGg7Ci0KKwkJVHlwZUJpbmRpbmcgW10gamxPID0geyBnZXRKYXZhTGFuZ09iamVjdCgp
IH07CiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBjb21waWxlck9wdGlvbnMo
KTsKKwkJLy8gQWZ0ZXIgYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgYXQgMS44KyB0aGVyZSBpcyBu
byB1c2UgY2hlY2tpbmcgbm9uLWZ1bmN0aW9uYWwgdHlwZSBhcmd1bWVudHMvcGFyYW1ldGVycyBm
b3IgY29tcGF0aWJpbGl0eSBzaW5jZSBpbmZlcmVuY2Ugd291bGQgaGF2ZSBndWFyYW50ZWVkIHRo
YXQuCisJCWJvb2xlYW4gY2hlY2tPbmx5RnVuY3Rpb25hbFR5cGVzID0gZmFsc2U7CisJCVR5cGVC
aW5kaW5nIFtdIHNoYWxsb3dQYXJhbWV0ZXJzID0gcGFyYW1ldGVyczsKKwkJTWV0aG9kQmluZGlu
ZyBzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Q7CisJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQkJaWYgKG1ldGhvZCBpbnN0
YW5jZW9mIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgfHwgc2hvdWxkQ29u
c3VsdFNoYWRvd09yaWdpbmFsKCkpIHsKKwkJCQljaGVja09ubHlGdW5jdGlvbmFsVHlwZXMgPSBt
ZXRob2QgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nOwor
CQkJCXNoYWxsb3dPcmlnaW5hbCA9IG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsKKwkJCQlzaGFs
bG93UGFyYW1ldGVycyA9IHNoYWxsb3dPcmlnaW5hbC5wYXJhbWV0ZXJzOworCQkJfQorCQl9CiAJ
CWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRL
MV81KSB7CiAJCQlpZiAocGFyYW1MZW5ndGggIT0gYXJnTGVuZ3RoKQogCQkJCXJldHVybiBOT1Rf
Q09NUEFUSUJMRTsKQEAgLTQ3NjgsMTYgKzQ2MjUsMjcgQEAKIAkJCWlmIChwYXJhbUxlbmd0aCA9
PSBhcmdMZW5ndGgpIHsgLy8gYWNjZXB0IFggb3IgWFtdIGJ1dCBub3QgWFtdW10KIAkJCQlUeXBl
QmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4XTsgLy8gaXMgYW4gQXJyYXlCaW5k
aW5nIGJ5IGRlZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBhcmcgPSBhcmd1bWVudHNbbGFzdElu
ZGV4XTsKKwkJCQkKIAkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpKSB7
Ci0JCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVu
diwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMp
OworCQkJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBl
bnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NP
TVBBVElCTEUpIHsKIAkJCQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNhbGxlZCB3aXRoIFgKIAkJ
CQkJCXBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJ
CWlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJYXJnID0gKChBcnJheUJp
bmRpbmcpIGFyZykuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAocGFyYW1ldGVy
Q29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9DT01QQVRJQkxFKQotCQkJ
CQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJCWlmICgoKEFycmF5QmluZGluZykgc2hh
bGxvd1BhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCkuaXNQZXJ0aW5lbnRUb0Fw
cGxpY2FiaWxpdHkoYXJnLCBzaGFsbG93T3JpZ2luYWwpKSB7CisJCQkJCQkJaWYgKGNoZWNrT25s
eUZ1bmN0aW9uYWxUeXBlcykgeworCQkJCQkJCQlpZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAm
JiAhcGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpKQorCQkJCQkJCQkJcmV0dXJuIE5P
VF9DT01QQVRJQkxFOworCQkJCQkJCQkvLyBBcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBtYXkgaGF2
ZSBzdWJzdGl0dXRlZCB1bnJlc29sdmVkIHR5cGUgdmFyaWFibGVzIHdpdGggamxPLCBkb24ndCB0
cmlwIG9uIHRoZXNlLgorCQkJCQkJCQlpZiAoIXBhcmFtLm1lbnRpb25zQW55KGpsTywgLTEpICYm
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5n
VmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJCQkJcmV0dXJuIE5PVF9D
T01QQVRJQkxFOworCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCWlmIChwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9
PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJ
CQl9CisJCQkJCQl9CiAJCQkJCQlsZXZlbCA9IFZBUkFSR1NfQ09NUEFUSUJMRTsgLy8gdmFyYXJn
cyBzdXBwb3J0IG5lZWRlZAogCQkJCQl9CiAJCQkJfQpAQCAtNDc4Niw3ICs0NjU0LDE3IEBACiAJ
CQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRlcnNbbGFzdElu
ZGV4XSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5kZXg7IGkgPCBh
cmdMZW5ndGg7IGkrKykgewogCQkJCQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFraW5nVmFy
YXJnc01ldGhvZHMgJiYgKGkgPT0gKGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5QmluZGluZylh
cmd1bWVudHNbaV0pLmVsZW1lbnRzVHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJCQkJaWYgKFR5
cGVCaW5kaW5nLm5vdEVxdWFscyhwYXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0
ZUluZmVyZW5jZVZhcmlhYmxlcykgPT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlpZiAoISgoQXJy
YXlCaW5kaW5nKXNoYWxsb3dQYXJhbWV0ZXJzW2xhc3RJbmRleF0pLmVsZW1lbnRzVHlwZSgpLmlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZywgc2hhbGxvd09yaWdpbmFsKSkKKwkJCQkJCQlj
b250aW51ZTsKKwkJCQkJCWlmIChjaGVja09ubHlGdW5jdGlvbmFsVHlwZXMpIHsKKwkJCQkJCQlp
ZiAoYXJnLmlzRnVuY3Rpb25hbFR5cGUoKSAmJiAhcGFyYW0uaXNGdW5jdGlvbmFsSW50ZXJmYWNl
KHRoaXMpKQorCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCQkJLy8gQXBwbGlj
YWJpbGl0eSBpbmZlcmVuY2UgbWF5IGhhdmUgc3Vic3RpdHV0ZWQgdW5yZXNvbHZlZCB0eXBlIHZh
cmlhYmxlcyB3aXRoIGpsTywgZG9uJ3QgdHJpcCBvbiB0aGVzZS4KKwkJCQkJCQlpZiAocGFyYW0u
bWVudGlvbnNBbnkoamxPLCAtMSkpCisJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJCS8vIEZBTEwg
VEhST1VHSCBhbmQgY2hlY2sgY29tcGF0aWJpbGl0eS4KKwkJCQkJCX0KKwkJCQkJCWlmIChUeXBl
QmluZGluZy5ub3RFcXVhbHMocGFyYW0sIGFyZykgJiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgPT0gTk9UX0NP
TVBBVElCTEUpCiAJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCQl9CiAJCQkJfSAg
ZWxzZSBpZiAobGFzdEluZGV4ICE9IGFyZ0xlbmd0aCkgeyAvLyBjYW4gY2FsbCBmb28oaW50IGks
IFggLi4uIHgpIHdpdGggZm9vKDEpIGJ1dCBOT1QgZm9vKCk7CkBAIC00ODAyLDcgKzQ2ODAsMTgg
QEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVCaW5kaW5n
IGFyZyA9ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChpID09IChhcmdMZW5ndGggLSAx
KSkpID8gKChBcnJheUJpbmRpbmcpYXJndW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFyZ3Vt
ZW50c1tpXTsKIAkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkgewotCQkJ
CWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBl
bnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVz
KTsKKwkJCQkvLyBDYXJlZnVsOiBUIG1heSBoYXZlIGJlZW4gc3Vic3RpdHV0ZWQgd2l0aCBqbE8u
IENvbnN1bHQgdGhlIHNoYWxsb3cgcGFyYW1ldGVyIGZvciBwZXJ0aW5lbmN5IGZpcnN0LgorCQkJ
CWlmICghc2hhbGxvd1BhcmFtZXRlcnNbaV0uaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoYXJn
LCBzaGFsbG93T3JpZ2luYWwpKQorCQkJCQljb250aW51ZTsKKwkJCQlpZiAoY2hlY2tPbmx5RnVu
Y3Rpb25hbFR5cGVzKSB7CisJCQkJCWlmIChhcmcuaXNGdW5jdGlvbmFsVHlwZSgpICYmICFwYXJh
bS5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UodGhpcykpCisJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElC
TEU7CisJCQkJCS8vIEFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIG1heSBoYXZlIHN1YnN0aXR1dGVk
IHVucmVzb2x2ZWQgdHlwZSB2YXJpYWJsZXMgd2l0aCBqbE8sIGRvbid0IHRyaXAgb24gdGhlc2Uu
CisJCQkJCWlmIChwYXJhbS5tZW50aW9uc0FueShqbE8sIC0xKSkKKwkJCQkJCWNvbnRpbnVlOwor
CQkJCQkvLyBGQUxMIFRIUk9VR0ggYW5kIGNoZWNrIGNvbXBhdGliaWxpdHkuCisJCQkJfQorCQkJ
CWludCBuZXdMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBl
bnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpOwogCQkJCWlmIChuZXdMZXZlbCA9PSBOT1Rf
Q09NUEFUSUJMRSkKIAkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCWlmIChuZXdMZXZl
bCA+IGxldmVsKQpAQCAtNDgzMSw3ICs0NzIwLDcgQEAKIAkJcmV0dXJuIE5PVF9DT01QQVRJQkxF
OwogCX0KIAkKLQlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoVHlwZUJp
bmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwgTG9va3VwRW52aXJvbm1lbnQgZW52LCBib29s
ZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGJvb2xlYW4gdG9sZXJhdGVJbmZlcmVuY2VW
YXJpYWJsZXMpIHsKKwlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoVHlw
ZUJpbmRpbmcgYXJnLCBUeXBlQmluZGluZyBwYXJhbSwgTG9va3VwRW52aXJvbm1lbnQgZW52LCBi
b29sZWFuIHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJLy8gb25seSBjYWxsZWQgaWYg
ZW52Lm9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNQogCQlp
ZiAoYXJnID09IG51bGwgfHwgcGFyYW0gPT0gbnVsbCkKIAkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKQEAgLTQ4NTAsMTEgKzQ3MzksNiBAQAogCQkJVHlwZUJpbmRpbmcgY29udmVydGVkVHlwZSA9
IGVudi5jb21wdXRlQm94aW5nVHlwZShhcmcpOwogCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0Vx
dWFscyhjb252ZXJ0ZWRUeXBlLCBwYXJhbSkgfHwgY29udmVydGVkVHlwZS5pc0NvbXBhdGlibGVX
aXRoKHBhcmFtLCB0aGlzKSkKIAkJCQlyZXR1cm4gQVVUT0JPWF9DT01QQVRJQkxFOwotCQl9Ci0J
CWlmICh0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcyAmJiAoIWFyZy5pc1Byb3BlclR5cGUoZmFs
c2UpIHx8ICFwYXJhbS5pc1Byb3BlclR5cGUoZmFsc2UpKSkgewotCQkJLy8gZHVyaW5nIHR5cGUg
aW5mZXJlbmNlIGludm9sdmluZyBhIFJlZmVyZW5jZUV4cHJlc3Npb24gaWdub3JlIGluY29tcGF0
aWJpbGl0eSBkdWUgdG8gYW4gaW5mZXJlbmNlIHZhcmlhYmxlLAotCQkJLy8ga25vd2luZyB0aGF0
IHdlIHdpbGwgcHJvZHVjZSBjb25zdHJhaW50cyB0aGF0IHdpbGwgZW5zdXJlIGNvbXBhdGlibGUg
aW5zdGFudGlhdGlvbiAoaWYgb25lIGV4aXN0cykuCi0JCQlyZXR1cm4gQ09NUEFUSUJMRTsgCiAJ
CX0KIAkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCX0KQEAgLTQ5NDAsNyArNDgyNCw3IEBACiAJ
ICAgdGhhdCBjb3VsZCBpbnN0ZWFkIGJlIGludm9rZWQgd2l0aCBpZGVudGljYWwgcmVzdWx0cy4g
UmV0dXJuIG51bGwgaWYgbm8gY29tcGF0aWJsZSwgdmlzaWJsZSwgbW9zdCBzcGVjaWZpYyBtZXRo
b2QKIAkgICBjb3VsZCBiZSBmb3VuZC4gVGhpcyBtZXRob2QgaXMgbW9kZWxlZCBhZnRlciBTY29w
ZS5nZXRDb25zdHJ1Y3RvciBhbmQgU2NvcGUuZ2V0TWV0aG9kLgogCSAqLwotCXB1YmxpYyBNZXRo
b2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBhbGxv
Y2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmlnaW5hbEVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvbiBhbGxvY2F0aW9uU2l0ZSkg
eworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmlnaW5hbEVuY2xv
c2luZ1R5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgSW52b2NhdGlvblNp
dGUgYWxsb2NhdGlvblNpdGUpIHsKIAkJCiAJCS8vIGFsbG9jYXRpb25UeXBlIGlzIHRoZSBkaWFt
b25kIHR5cGUuIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSBpcyB0aGUgcmVhbCBlbmNsb3NpbmcgdHlw
ZSA9PT4gbWF5IGJlIHBhcmFtZXRlcml6ZWQsIHBhcmFtZXRlcml6ZWQgd2l0aCBvd24gdHlwZSB2
YXJpYWJsZXMsIHJhdywganVzdCBwbGFpbiB0eXBlIG9yIG51bGwuCiAJCWludCBjbGFzc1R5cGVW
YXJpYWJsZXNBcml0eSA9IDA7CkBAIC01MDY3LDcgKzQ5NTEsNyBAQAogCQlNZXRob2RCaW5kaW5n
W10gY29tcGF0aWJsZSA9IG5ldyBNZXRob2RCaW5kaW5nW3NmaV07CiAJCWludCBjb21wYXRpYmxl
SW5kZXggPSAwOwogCQlmb3IgKGludCBpID0gMDsgaSA8IHNmaTsgaSsrKSB7Ci0JCQlNZXRob2RC
aW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNG
YWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZ
KTsKKwkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKHN0YXRpY0ZhY3Rvcmllc1tpXSwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUp
OwogCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCWlmIChjb21wYXRpYmxl
TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCWNvbXBhdGlibGVbY29tcGF0aWJsZUluZGV4
KytdID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTUwNzYsMTAgKzQ5NjAsNiBAQAogCiAJCWlmIChj
b21wYXRpYmxlSW5kZXggPT0gMCkgewogCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQkJaWYgKGNvbXBh
dGlibGVJbmRleCA9PSAxKSB7Ci0JCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRv
IHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQljb21wYXRpYmxlWzBdID0g
aW5mZXJJbnZvY2F0aW9uVHlwZShhbGxvY2F0aW9uU2l0ZSwgY29tcGF0aWJsZVswXSwgYXJndW1l
bnRUeXBlcyk7CiAJCX0KIAkJcmV0dXJuIGNvbXBhdGlibGVJbmRleCA9PSAxID8gY29tcGF0aWJs
ZVswXSA6IG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoY29tcGF0aWJsZSwgY29tcGF0aWJsZUlu
ZGV4LCBhcmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwgYWxsb2NhdGlvblR5cGUpOwogCX0K
QEAgLTUxNTAsMzEgKzUwMzAsNSBAQAogCQkJCWJyZWFrOwogCQkJfQogCQl9Ci0JfQotCi0JLyoq
Ci0JICogR2l2ZW4gYSBzZWxlY3RlZCBhcHBsaWNhYmxlIG1ldGhvZCwgY2hlY2sgaWYgaXQgaGFz
IGFuIHVuZmluaXNoZWQgSW5mZXJlbmNlQ29udGV4dDE4IGFzc29jaWF0ZWQuCi0JICogSWYgc28g
cGVyZm9ybSB0aGUgb3V0c3RhbmRpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSBhbmQgcmV0
dXJuIHRoZSBpbXByb3ZlZCBtZXRob2QsCi0JICogb3RoZXJ3aXNlIHJldHVybiB0aGUgYXBwbGlj
YWJsZSBtZXRob2QgdW5jaGFuZ2VkLgotCSAqLwotCXByb3RlY3RlZCBNZXRob2RCaW5kaW5nIGlu
ZmVySW52b2NhdGlvblR5cGUoSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJp
bmRpbmcgYXBwbGljYWJsZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKSB7Ci0JCWlmIChp
bnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCUludm9jYXRpb24gaW52
b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZTsKLQkJCWlmIChhcHBsaWNhYmxl
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBhcHBsaWNhYmxlOwotCQkJCUluZmVyZW5j
ZUNvbnRleHQxOCBpbmZDdHgxOCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dChwYXJh
bWV0ZXJpemVkTWV0aG9kKTsKLQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiAhaW5mQ3R4MTgu
aGFzUmVzdWx0Rm9yKGludm9jYXRpb24uaW52b2NhdGlvblRhcmdldFR5cGUoKSkpIHsKLQkJCQkJ
cmV0dXJuIGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgYXJndW1lbnRU
eXBlcywgcGFyYW1ldGVyaXplZE1ldGhvZCk7Ci0JCQkJfQotCQkJfSBlbHNlIHsKLQkJCQlBU1RO
b2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbnZvY2F0aW9uLCBhcHBsaWNhYmxl
LCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQkJCX0KLQkJfSBlbHNlIGlmIChpbnZvY2F0aW9uU2l0
ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKLQkJCWlmIChhcHBsaWNhYmxlIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQotCQkJCWFwcGxpY2Fi
bGUgPSBhcHBsaWNhYmxlLnNoYWxsb3dPcmlnaW5hbCgpOwotCQkJaWYgKGFwcGxpY2FibGUudHlw
ZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpCi0JCQkJcmV0dXJuIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChh
cHBsaWNhYmxlLCBhcmd1bWVudFR5cGVzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZF
UkVOQ0UpOwotCQl9Ci0JCXJldHVybiBhcHBsaWNhYmxlOwogCX0KIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQppbmRleCA5Mzg0OWNkLi4x
YzRkNzQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RC
aW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9kQmlu
ZGluZy5qYXZhCkBAIC0xNywzMSArMTcsOCBAQAogICovCiBwdWJsaWMgY2xhc3MgU3ludGhldGlj
RmFjdG9yeU1ldGhvZEJpbmRpbmcgZXh0ZW5kcyBNZXRob2RCaW5kaW5nIHsKIAotCXByaXZhdGUg
TWV0aG9kQmluZGluZyBzdGF0aWNGYWN0b3J5Rm9yOwotCXByaXZhdGUgTG9va3VwRW52aXJvbm1l
bnQgZW52aXJvbm1lbnQ7Ci0JcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGU7
Ci0JCiAJcHVibGljIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCwgUmVmZXJlbmNlQmluZGluZyBl
bmNsb3NpbmdUeXBlKSB7CiAJCXN1cGVyKG1ldGhvZC5tb2RpZmllcnMgfCBDbGFzc0ZpbGVDb25z
dGFudHMuQWNjU3RhdGljLCBUeXBlQ29uc3RhbnRzLlNZTlRIRVRJQ19TVEFUSUNfRkFDVE9SWSwK
IAkJCQludWxsLCBudWxsLCBudWxsLCBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpOwotCQl0aGlzLmVu
dmlyb25tZW50ID0gZW52aXJvbm1lbnQ7Ci0JCXRoaXMuc3RhdGljRmFjdG9yeUZvciA9IG1ldGhv
ZDsKLQkJdGhpcy5lbmNsb3NpbmdUeXBlID0gZW5jbG9zaW5nVHlwZTsKLQl9Ci0JCi0JLyoqIEFw
cGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmluZyBjbGFzcyBvZiB0
aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0aGlzIGZhY3Rvcnkg
bWV0aG9kLiAqLwotCXB1YmxpYyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBhcHBseVR5cGVB
cmd1bWVudHNPbkNvbnN0cnVjdG9yKFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cykgewotCQlS
ZWZlcmVuY2VCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gdGhpcy5lbnZpcm9ubWVudC5jcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZSh0aGlzLmRlY2xhcmluZ0NsYXNzLCB0eXBlQXJndW1lbnRzLAot
CQkJCQkJCQkJCQkJCQkJCQkJCQkJCXRoaXMuZW5jbG9zaW5nVHlwZSk7Ci0JCWZvciAoTWV0aG9k
QmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kIDogcGFyYW1ldGVyaXplZFR5cGUubWV0aG9kcygp
KSB7Ci0JCQlpZiAocGFyYW1ldGVyaXplZE1ldGhvZC5vcmlnaW5hbCgpID09IHRoaXMuc3RhdGlj
RmFjdG9yeUZvcikKLQkJCQlyZXR1cm4gKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBwYXJh
bWV0ZXJpemVkTWV0aG9kOwotCQkJaWYgKHBhcmFtZXRlcml6ZWRNZXRob2QgaW5zdGFuY2VvZiBQ
cm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJCU1ldGhvZEJpbmRpbmcgY2xvc2VzdE1hdGNoID0g
KChQcm9ibGVtTWV0aG9kQmluZGluZylwYXJhbWV0ZXJpemVkTWV0aG9kKS5jbG9zZXN0TWF0Y2g7
Ci0JCQkJaWYgKGNsb3Nlc3RNYXRjaCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW5nICYmIGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpID09IHRoaXMuc3RhdGljRmFjdG9yeUZvcikK
LQkJCQkJcmV0dXJuIChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgY2xvc2VzdE1hdGNoOwot
CQkJfQotCQl9Ci0JCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oIlR5cGUgZG9l
c24ndCBoYXZlIGl0cyBvd24gbWV0aG9kPyIpOyAvLyROT04tTkxTLTEkCiAJfQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBl
QmluZGluZy5qYXZhCmluZGV4IGJlNzUxNWMuLjI3MjJkNGUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmph
dmEKQEAgLTE2MjksNCArMTYyOSw4IEBACiBwdWJsaWMgdm9pZCBleGl0UmVjdXJzaXZlRnVuY3Rp
b24oKSB7CiAJLy8gZW1wdHksIHN1YmNsYXNzZXMgdG8gb3ZlcnJpZGUKIH0KKworcHVibGljIGJv
b2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsKKwlyZXR1cm4gZmFsc2U7Cit9CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IGI1OTFiMDMuLmRkYzk1MDIgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0xNTAsNyArMTUwLDYgQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkNhcHR1cmVCaW5kaW5nOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21waWxlck1v
ZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb29rdXBFbnZpcm9ubWVu
dDsKQEAgLTM2OTIsNyArMzY5MSw4IEBACiAJCQkJc291cmNlU3RhcnQsCiAJCQkJc291cmNlRW5k
KTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9k
RXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJlZEFwcGxp
Y2FibGVNZXRob2RJbmFwcGxpY2FibGU6CQorCQljYXNlIFByb2JsZW1SZWFzb25zLkludm9jYXRp
b25UeXBlSW5mZXJlbmNlRmFpbHVyZToKIAkJCS8vIEZJWE1FKHN0ZXBoYW4pOiBjb25zdHJ1Y3Qg
c3VpdGFibGUgbWVzc2FnZSAoaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQwNDY3NSkKIAkJCXBy
b2JsZW1Db25zdHJ1Y3RvciA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgdGFyZ2V0Q29uc3RydWN0
b3I7CiAJCQlzaG93bkNvbnN0cnVjdG9yID0gcHJvYmxlbUNvbnN0cnVjdG9yLmNsb3Nlc3RNYXRj
aDsKQEAgLTQyMjcsMTYgKzQyMjcsMTMgQEAKIAkJCQkoaW50KSAobWVzc2FnZVNlbmQubmFtZVNv
dXJjZVBvc2l0aW9uID4+PiAzMiksCiAJCQkJKGludCkgbWVzc2FnZVNlbmQubmFtZVNvdXJjZVBv
c2l0aW9uKTsKIAkJCXJldHVybjsKLQkJY2FzZSBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVk
TWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcnJl
ZEFwcGxpY2FibGVNZXRob2RJbmFwcGxpY2FibGU6CisJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52
b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgogCQkJLy8gRklYTUUoc3RlcGhhbik6IGNvbnN0
cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQog
CQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0aG9kOwotCQkJSW5m
ZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQgPSBwcm9ibGVtTWV0aG9kLmluZmVyZW5j
ZUNvbnRleHQ7Ci0JCQlpZiAoaW5mZXJlbmNlQ29udGV4dCAhPSBudWxsICYmIGluZmVyZW5jZUNv
bnRleHQub3V0ZXJDb250ZXh0ICE9IG51bGwpIHsKLQkJCQkvLyBwcm9ibGVtIHJlbGF0ZXMgdG8g
YSBuZXN0ZWQgaW5mZXJlbmNlIGNvbnRleHQsIGxldCB0aGUgb3V0ZXIgaGFuZGxlIGl0OgotCQkJ
CWluZmVyZW5jZUNvbnRleHQub3V0ZXJDb250ZXh0LmFkZFByb2JsZW1NZXRob2QocHJvYmxlbU1l
dGhvZCk7Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJc2hvd25NZXRob2QgPSBwcm9ibGVtTWV0aG9k
LmNsb3Nlc3RNYXRjaDsKKwkJCWlmIChwcm9ibGVtTWV0aG9kLnJldHVyblR5cGUgPT0gc2hvd25N
ZXRob2QucmV0dXJuVHlwZSkgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQKKwkJCQlyZXR1cm47IC8v
IGZ1bm5pbHkgdGhpcyBjYW4gaGFwcGVuIGluIGEgZGVlcGx5IG5lc3RlZCBjYWxsLCBiZWNhdXNl
IHRoZSBpbm5lciBsaWVzIGJ5IHN0ZWFsaW5nIGl0cyBjbG9zZXN0IG1hdGNoIGFuZCB0aGUgb3V0
ZXIgZG9lcyBub3Qga25vdyBzby4gU2VlIEdSVDFfOC50ZXN0QnVnNDMwMjk2CiAJCQl0aGlzLmhh
bmRsZSgKIAkJCQlJUHJvYmxlbS5UeXBlTWlzbWF0Y2gsCiAJCQkJbmV3IFN0cmluZ1tdIHsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZh
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKaW5k
ZXggMmVjODQzZi4uMjBjNWVkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZh
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZh
bC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzk2LDcgKzM5Niw3
IEBACiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkKIAkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0
aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91
bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkgICAgTWV0aG9k
QmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9k
QmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkZVTExfSU5GRVJF
TkNFKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUp
OwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJuIG5ldyBQcm9i
bGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywg
UHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBtZXRob2RCaW5kaW5nID0gY29tcGF0aWJs
ZU1ldGhvZDsKQEAgLTU0Miw3ICs1NDIsNyBAQAogCU1ldGhvZEJpbmRpbmdbXSBjb21wYXRpYmxl
ID0gbmV3IE1ldGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBjb21wYXRpYmxlSW5k
ZXggPSAwOwogCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxl
bmd0aDsgaSsrKSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlLCBTY29wZS5BUFBMSUNBQklMSVRZKTsKKwkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxl
TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKQogCQkJ
Y29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCX0KQEAg
LTU1OCw4ICs1NTgsNyBAQAogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMSkgewotCQkv
LyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFz
a3MgKDE4LjUuMik6Ci0JCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRl
LCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKKwkJcmV0dXJuIHZpc2libGVbMF07CiAJfQog
CWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5k
aW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29tcGF0aWJsZVswXS5wYXJh
bWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248034</attachid>
            <date>2014-10-21 02:20:00 -0400</date>
            <delta_ts>2014-10-25 11:49:49 -0400</delta_ts>
            <desc>Correct merged patch</desc>
            <filename>FANDG.patch</filename>
            <type>text/plain</type>
            <size>228352</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlvbmFsRXhw
cmVzc2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlv
bmFsRXhwcmVzc2lvblRlc3QuamF2YQppbmRleCBjMmEwMTA0Li4yZTE5OWQwIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db25kaXRpb25hbEV4cHJlc3Npb25UZXN0
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uVGVzdC5qYXZhCkBAIC01NjEsNCArNTYxLDI0IEBACiAJCQkiVGhlIG1ldGhvZCBmMigp
IGlzIHVuZGVmaW5lZCBmb3IgdGhlIHR5cGUgWVxuIiArCiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJ
fQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc0
NDQjYzExMywgLSBFcnJvciBidWlsZGluZyBKUkU4CisJcHVibGljIHZvaWQgdGVzdDQzNzQ0NF9j
MTEzKCkgeworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84KQorCQkJcmV0dXJuOworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQluZXcgU3Ry
aW5nW10geworCQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFggZXh0ZW5kcyBZ
IHtcbiIgKworCQkJCQkJIiAgICBwdWJsaWMgWChaW10gbikge1xuIiArCisJCQkJCQkiICAgICAg
ICBzdXBlcigobiA9PSBudWxsKSA/IG51bGwgOiBuLmNsb25lKCkpO1xuIiArCisJCQkJCQkiICAg
IH1cbiIgKworCQkJCQkJIn1cbiIgKworCQkJCQkJImNsYXNzIFkgIHtcbiIgKworCQkJCQkJIiAg
ICBwdWJsaWMgWShaW10gbm90aWZpY2F0aW9ucykge1xuIiArCisJCQkJCQkiICAgIH1cbiIgKwor
CQkJCQkJIn1cbiIgKworCQkJCQkJImludGVyZmFjZSBaIHt9XG4iLAorCQkJCX0sCisJCQkJIiIp
OworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVy
aWNUeXBlVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5
cGVUZXN0LmphdmEKaW5kZXggNGQ2ZDdmNC4uMDIxNTc1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTM5NjIxLDExICsz
OTYyMSwyNCBAQAogCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCX0sCiAJCS8vIGNv
bXBpbGVyIHJlc3VsdHMKKwkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84ID8gCiAJCSItLS0tLS0tLS0tXG4iICsgLyogZXhwZWN0ZWQgY29tcGlsZXIgbG9n
ICovCiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKwogCQkiCXJldHVybiBj
b21wb3VuZChhc0xpc3QoYSwgYikpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXG4iICsKIAkJ
IlRoZSBtZXRob2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBl
ciBUPj4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMg
KExpc3Q8Q29tcGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsKKwkJIi0tLS0tLS0tLS1c
biIKKwkJLy8gMS44KyBBVE0sIHdlIGdlbmVyYXRlIGFuIGV4dHJhIGVycm9yIGR1ZSB0byBpbm5l
ciBwb2x5IGV4cHJlc3Npb24gZXZhbHVhdGlvbi4KKwkJOiItLS0tLS0tLS0tXG4iICsgCisJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29tcG91bmQo
YXNMaXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBt
ZXRob2QgY29tcG91bmQoSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0b3I8PyBzdXBlciBUPj4p
IGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8
Q29tcGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJIglyZXR1cm4gY29t
cG91bmQoYXNMaXN0KGEsIGIpKTtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8Q29t
cGFyYXRvcjw/IGV4dGVuZHMgT2JqZWN0Pj4gdG8gSXRlcmFibGU8PyBleHRlbmRzIENvbXBhcmF0
b3I8PyBzdXBlciBUPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCS8vIGphdmFjIG9wdGlv
bnMKIAkJSmF2YWNUZXN0T3B0aW9ucy5KYXZhY0hhc0FCdWcuSmF2YWNCdWc2NTczNDQ2IC8qIGph
dmFjIHRlc3Qgb3B0aW9ucyAqLyk7CkBAIC00NDI2NSwxMSArNDQyNzgsMjQgQEAKIAkJCQkJIgl9
XG4iICsKIAkJCQkJIn1cbiIsIC8vID09PT09PT09PT09PT09PT09CiAJCQl9LAorCQkJdGhpcy5j
b21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8gCiAJCQkiLS0tLS0t
LS0tLVxuIiArCiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiArCiAJCQki
CXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkpO1xuIiArCiAJCQkiCV5e
XlxuIiArCiAJCQkiVGhlIG1ldGhvZCBwdXQoQ2xhc3M8RT4sIFguVE88PyBzdXBlciBFPikgaW4g
dGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8SW50
ZWdlcj4sIFguT088U3RyaW5nLE9iamVjdD4pXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iCisJCQk6
IC8vIEFUTSwgaW4gMS44KyB3ZSBnZW5lcmF0ZSBhbiBleHRyYSBlcnJvciBkdWUgdG8gaW5uZXIg
cG9seSBleHByZXNzaW9uIHJlc29sdXRpb24gYWZ0ZXIgdGhlIHRhcmdldCB0eXBlIGlzIGtub3du
LgorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
MjQpXG4iICsgCisJCQkiCXB1dChJbnRlZ2VyLmNsYXNzLCBjb21iaW5lKEZVTkMyLCBGVU5DMSkp
O1xuIiArIAorCQkJIgleXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHB1dChDbGFzczxFPiwgWC5U
Tzw/IHN1cGVyIEU+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJn
dW1lbnRzIChDbGFzczxJbnRlZ2VyPiwgWC5PTzxTdHJpbmcsT2JqZWN0PilcbiIgKyAKKwkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI0KVxuIiAr
IAorCQkJIglwdXQoSW50ZWdlci5jbGFzcywgY29tYmluZShGVU5DMiwgRlVOQzEpKTtcbiIgKyAK
KwkJCSIJICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJ
IlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5PTzxTdHJpbmcsT2JqZWN0PiB0
byBYLlRPPD8gc3VwZXIgRT5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIxNjY4NiAtIHZhcmlhdGlv
bgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVy
aWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggOWMzN2Q0Mi4uMDJiMmZmZCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVz
dF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1Jl
Z3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC02MDcsNiArNjA3LDcgQEAKIAkJCSIgICAgfVxuIiAr
IAogCQkJIn1cbiIKIAkJfSwKKwkJLy8gVGhlIGV4dHJhIGVycm9yIHdpdGggPHVua25vd24+IHJl
YWRzIGEgYml0IHdlaXJkLgogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVNldDxZPiByb3N0ZXJTZXQgPSAoU2V0PFk+KSBm
b28obnVsbCwgU2V0OjpuZXcpO1xuIiArIApAQCAtNjIwLDEwICs2MjEsMTUgQEAKIAkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJ
IglTZXQ8WT4gcm9zdGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAK
KwkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiAr
IAorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBDb2xsZWN0aW9uPE9iamVj
dD4gdG8gPHVua25vd24+XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCSIJU2V0PFk+IHJvc3RlclNldCA9IChTZXQ8
WT4pIGZvbyhudWxsLCBTZXQ6Om5ldyk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRo
aXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAK
KwkJIjUuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTZXQ8WT4gcm9z
dGVyU2V0ID0gKFNldDxZPikgZm9vKG51bGwsIFNldDo6bmV3KTtcbiIgKyAKIAkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAogCQkiQ2Fubm90IGluc3Rh
bnRpYXRlIHRoZSB0eXBlIFNldFxuIiArIApAQCAtMTIzMCw3ICsxMjM2LDEyIEBACiAJCSIJXl5e
Xl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgbWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0
ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVzdCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3Vt
ZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2FwdHVyZSMxLW9mID8+LCBjYXB0dXJlIzItb2YgPylcbiIg
KyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFRlc3QuamF2YSAoYXQgbGlu
ZSA1KVxuIiArIAorCQkiMi4gRVJST1IgaW4gVGVzdC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJ
CSIJYWRkQXR0cmlidXRlKGphdmEudXRpbC5PYmplY3RzLnJlcXVpcmVOb25OdWxsKGF0dHJpYnV0
ZSwgXCJcIiksXG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3Qg
Y29udmVydCBmcm9tIFRlc3QuQXR0cmlidXRlPGNhcHR1cmUjMS1vZiA/PiB0byBUZXN0LkF0dHJp
YnV0ZTxUPlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gVGVzdC5q
YXZhIChhdCBsaW5lIDUpXG4iICsgCiAJCSIJYWRkQXR0cmlidXRlKGF0dHJpYnV0ZSwgYXR0cmli
dXRlLmdldERlZmF1bHQoKSk7XG4iICsgCiAJCSIJXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUg
bWV0aG9kIGFkZEF0dHJpYnV0ZShUZXN0LkF0dHJpYnV0ZTxUPiwgVCkgaW4gdGhlIHR5cGUgVGVz
dCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoVGVzdC5BdHRyaWJ1dGU8Y2Fw
dHVyZSMzLW9mID8+LCBjYXB0dXJlIzQtb2YgPylcbiIgKyAKQEAgLTE2NzYsNiArMTY4NywxMSBA
QAogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0
KVxuIiArIAogCQkiCXJldHVybiBuZXcgWDw+KCgpIC0+IG5ldyBBcnJheURlcXVlPD4oZGVxdWVD
YXBhY2l0eSkpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgY29uc3RydWN0b3IgWDxTLERlcXVlPFM+
PigoKSAtPiB7fSkgaXMgdW5kZWZpbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIy
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJcmV0dXJuIG5ldyBYPD4o
KCkgLT4gbmV3IEFycmF5RGVxdWU8PihkZXF1ZUNhcGFjaXR5KSk7XG4iICsgCiAJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJD
YW5ub3QgbWFrZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMgZmllbGQgZGVx
dWVDYXBhY2l0eVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CkBAIC0yMDQ3LDggKzIwNjMsMjEg
QEAKIAkJCSIJfVxuIiArIAogCQkJIn0iCiAJCX0sCisJCS8vIDh1MjAgZW1pdHMganVzdCBvbmUg
bWVzc2FnZSBpbmZlcnJlZCB0eXBlIG5vdCBjb25mb3JtaW5nIHRvIHVwcGVyIGJvdW5kLiBFQ0on
cyBtZXNzYWdlIGlzIGFjdHVhbGx5IGJldHRlci4KKwkJLy8gV2UgdXNlZCB0byBlbWl0IG9ubHkg
MSBlcnJvciBoZXJlLiBIZXJlIHRoZSBsYW1iZGEgaXMgYnJva2VuLCBzbyBpbmZlcmVuY2UgZmFp
bHMgbGVhZGluZyB0byB0d28gbWVzc2FnZXMuCQkJCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJIglzcy5zdHJlYW0oKS5tYXAocyAtPiB7XG4iICsgCisJ
CSIgICAgICAgICAgY2xhc3MgTDEge307XG4iICsgCisJCSIgICAgICAgICAgY2xhc3MgTDIge1xu
IiArIAorCQkiICAgICAgICAgICAgdm9pZCBtbShMMSBsKSB7fVxuIiArIAorCQkiICAgICAgICAg
IH1cbiIgKyAKKwkJIiAgICAgICAgICByZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkpO1xuIiAr
IAorCQkiICAgICAgICB9KS5mb3JFYWNoKGUgLT4gU3lzdGVtLm91dC5wcmludGxuKGUpKTtcbiIg
KyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiAr
IAorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJlYW08T2JqZWN0PiB0
byA8dW5rbm93bj5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMylcbiIgKyAKIAkJIglyZXR1cm4gbmV3IEwyKCkubW0obmV3IEwxKCkp
O1xuIiArIAogCQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJDYW5u
b3QgcmV0dXJuIGEgdm9pZCByZXN1bHRcbiIgKyAKQEAgLTI1MjAsOSArMjU0OSw4IEBACiAgICAg
ICAgICAgICAifVxuIgogICAgICAgICB9KTsKIH0KLXB1YmxpYyB2b2lkIF90ZXN0QnVnNDI4ODEx
KCkgewotCS8vIHBlcmhhcHMgZmFpbCBpcyB0aGUgY29ycmVjdCBhbnN3ZXI/IEZJWE1FOiB2YWxp
ZGF0ZSEKLQlydW5OZWdhdGl2ZVRlc3QoCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI4ODExKCkgewor
CXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIk1vcmVDb2xsZWN0b3JzLmph
dmEiLAogCQkJImltcG9ydCBqYXZhLnV0aWwuQWJzdHJhY3RMaXN0O1xuIiArIApAQCAtMjU2OSwx
OCArMjU5Nyw3IEBACiAJCQkiICAgIH1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0t
LS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBNb3JlQ29sbGVjdG9ycy5qYXZhIChhdCBsaW5lIDE2
KVxuIiArIAotCQkiCXJldHVybiBDb2xsZWN0b3Iub2YoQXJyYXlMaXN0PFQ+OjpuZXcsXG4iICsg
Ci0JCSIJICAgICAgICAgICAgICAgICBeXlxuIiArIAotCQkiVGhlIG1ldGhvZCBvZihBcnJheUxp
c3Q8VD46Om5ldywgTGlzdDxUPjo6YWRkLCAoPG5vIHR5cGU+IGxlZnQsIDxubyB0eXBlPiByaWdo
dCkgLT4ge30iICsgCi0JCSIsIEltbXV0YWJsZUxpc3Q6OmNvcHlPZikgaXMgdW5kZWZpbmVkIGZv
ciB0aGUgdHlwZSBDb2xsZWN0b3JcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdB
Uk5JTkcgaW4gTW9yZUNvbGxlY3RvcnMuamF2YSAoYXQgbGluZSAyMylcbiIgKyAKLQkJIglwdWJs
aWMgc3RhdGljIDxUPiBJbW11dGFibGVMaXN0PFQ+IGNvcHlPZiAoQ29sbGVjdGlvbjxUPiBjKSB7
XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgY29weU9mKENvbGxlY3Rpb248VD4p
IGZyb20gdGhlIHR5cGUgTW9yZUNvbGxlY3RvcnMuSW1tdXRhYmxlTGlzdDxUPiBpcyBuZXZlciB1
c2VkIGxvY2FsbHlcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIpOworCQkiW2EsIGIsIGNdIik7CiB9
CiAvLyBhbGwgZXhjZXB0aW9ucyBjYW4gYmUgaW5mZXJyZWQgdG8gbWF0Y2gKIHB1YmxpYyB2b2lk
IHRlc3RCdWc0Mjk0MzAoKSB7CkBAIC0yODQzLDYgKzI4NjAsNyBAQAogCQkJIglwdWJsaWMgRFRl
c3QoRnVuY3Rpb248VCwgVD4gZnVuYykgeyB9XG4iICsgCiAJCQkiCVxuIiArIAogCQkJIglwdWJs
aWMgRFRlc3QoRFRlc3Q8SW50ZWdlcj4gZHRpKSB7fVxuIiArIAorCQkJIglwdWJsaWMgRFRlc3Qo
KSB7fVxuIiArIAogCQkJIglcbiIgKyAKIAkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykge1xuIiArIAogCQkJIgkJRFRlc3Q8U3RyaW5nPiB0MSA9IG5ldyBEVGVzdDxT
dHJpbmc+KG5ldyBEVGVzdDxJbnRlZ2VyPigpKTtcbiIgKyAKQEAgLTI4NTAsMTYgKzI4NjgsMTEg
QEAKIAkJCSJ9XG4iCiAJCX0sCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBE
VGVzdC5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAorCQkiMS4gRVJST1IgaW4gRFRlc3QuamF2YSAo
YXQgbGluZSAxMSlcbiIgKyAKIAkJIglEVGVzdDxTdHJpbmc+IHQxID0gbmV3IERUZXN0PFN0cmlu
Zz4obmV3IERUZXN0PEludGVnZXI+KCkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5cbiIgKyAKIAkJIlJlZHVuZGFudCBzcGVjaWZpY2F0aW9uIG9mIHR5cGUgYXJndW1l
bnRzIDxTdHJpbmc+XG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBFUlJPUiBpbiBE
VGVzdC5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAotCQkiCURUZXN0PFN0cmluZz4gdDEgPSBuZXcg
RFRlc3Q8U3RyaW5nPihuZXcgRFRlc3Q8SW50ZWdlcj4oKSk7XG4iICsgCi0JCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0J
CSJUaGUgY29uc3RydWN0b3IgRFRlc3Q8SW50ZWdlcj4oKSBpcyB1bmRlZmluZWRcbiIgKwotCQki
LS0tLS0tLS0tLVxuIiwKKwkJIi0tLS0tLS0tLS1cbiIsIAogCQludWxsLCB0cnVlLCBjdXN0b21P
cHRpb25zKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzAyOTYoKSB7CkBAIC0zMDQyLDE0ICsz
MDU1LDkgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIg
KyAKLQkJIjEuIEVSUk9SIGluIENvbGxlY3RvcnNNYXBzLmphdmEgKGF0IGxpbmUgMjApXG4iICsg
Ci0JCSIJcCAtPiBwLmxocy5zdHJlYW0oKS5tYXAocDo6a2VlcGluZ1JocykpLmNvbGxlY3QoXG4i
ICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5c
biIgKyAKLQkJIlRoZSBtZXRob2QgY29sbGVjdChDb2xsZWN0b3I8PyBzdXBlciBPYmplY3QsQSxS
PikgaW4gdGhlIHR5cGUgU3RyZWFtPE9iamVjdD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBh
cmd1bWVudHMgKENvbGxlY3RvcjxDb2xsZWN0b3JzTWFwcy5QYWlyPFN0cmluZyxTdHJpbmc+LGNh
cHR1cmUjMy1vZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0t
LS0tXG4iKTsKKwkJIiIpOwogfQotcHVibGljIHZvaWQgX3Rlc3RCdWc0MzI2MjYoKSB7CitwdWJs
aWMgdm9pZCB0ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5n
W10gewogCQkJIlN0cmVhbUludGVyZmFjZTIuamF2YSIsCkBAIC0zMTEyLDYgKzMxMjAsMjkgQEAK
IAkJCSIJc3RhdGljIDxUPiBBcnJheUxpc3Q8VD4gY29tYmluZWQoQXJyYXlMaXN0PFQ+IGxlZnQs
IEFycmF5TGlzdDxUPiByaWdodCkge1xuIiArIAogCQkJIgkJbGVmdC5hZGRBbGwocmlnaHQpO1xu
IiArIAogCQkJIgkJcmV0dXJuIGxlZnQ7XG4iICsgCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJ
fSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDMyNjI2X3JlZHVjZWQoKSB7CisJcnVuQ29uZm9y
bVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtcbiIgKwor
CQkJImltcG9ydCBqYXZhLnV0aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5j
dGlvbi5GdW5jdGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3Rv
cjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJ
CSJwdWJsaWMgaW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyA8VCwgSz4gTWFwPEssIEFy
cmF5TGlzdDxUPj4gdGVybWluYWxBc01hcFRvTGlzdChGdW5jdGlvbjw/IHN1cGVyIFQsID8gZXh0
ZW5kcyBLPiBjbGFzc2lmaWVyKSAge1xuIiArCisJCQkiCQlyZXR1cm4gdGVybWluYWxBc0NvbGxl
Y3RlZChDb2xsZWN0b3JzLmdyb3VwaW5nQnkoXG4iICsKKwkJCSIJCQkgIGNsYXNzaWZpZXIsXG4i
ICsKKwkJCSIJCQkgICgpIC0+IG5ldyBIYXNoTWFwPD4oKSxcbiIgKworCQkJIgkJCSAgKENvbGxl
Y3RvcjxULEFycmF5TGlzdDxUPixBcnJheUxpc3Q8VD4+KSBudWxsKSk7XG4iICsKKwkJCSIJfVxu
IiArCisJCQkiCXN0YXRpYyA8VCwgTT4gTSB0ZXJtaW5hbEFzQ29sbGVjdGVkKENvbGxlY3RvcjxU
LCA/LCBNPiBjb2xsZWN0b3IpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKIAkJCSIJ
fVxuIiArCiAJCQkifVxuIgogCQl9KTsKQEAgLTMzMjksMTQgKzMzNjAsMTQgQEAKIAkJCSJ9XG4i
CiAJCX0sCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxM
YW1iZGEuamF2YSAoYXQgbGluZSAyMilcbiIgKyAKLQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7
XG4iICsgCi0JCSIJICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVj
dG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5v
dCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmlu
ZyxTdHJpbmc+LGNhcHR1cmUjMS1vZiA/LE1hcDxTdHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsg
CisJCSIxLiBXQVJOSU5HIGluIEV4dHJhY3RMb2NhbExhbWJkYS5qYXZhIChhdCBsaW5lIDUpXG4i
ICsgCisJCSIJaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKKwkJIgkg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IGph
dmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbiBpcyBuZXZlciB1c2VkXG4iICsgCiAJCSItLS0tLS0t
LS0tXG4iKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzU3NjcoKSB7Ci0JcnVuTmVnYXRpdmVU
ZXN0KAorCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIkR1bW15Q2xhc3Mu
amF2YSIsCiAJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCkBAIC0zMzc4LDE3ICszNDA5LDcg
QEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJ
IjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClcbiIgKyAKLQkJIgkuY29s
bGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXkocGF0aCksIHBhdGggLT4g
dGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRob2QgZ2V0S2V5KFN0cmlu
ZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3Vt
ZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMi4gRVJST1IgaW4g
RHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5jb2xsZWN0KENvbGxlY3Rv
cnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAtPiB0aGlzLmdldFZhbHVl
KHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0
aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGlj
YWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7
CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7CiAJcnVuQ29uZm9ybVRl
c3QoCkBAIC00NDA0LDQgKzQ0MjUsMjU5IEBACiAJCQkifVxuIgogCQl9KTsKIH0KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk1OTQgIFsxLjhdW2Nv
bXBpbGVyXSBuZXN0ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5mZXJyZWQgdnMgamF2YWMK
K3B1YmxpYyB2b2lkIHRlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxp
c3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2
YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5j
dGlvbi5QcmVkaWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0
b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0aWMgaW50ZXJmYWNlIElM
aXN0RW50cnkge1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRSZWNvcmRzV2l0aFJlc3Vs
dChGdW5jdGlvbjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiArCisJCQkiCX1cbiIgKwor
CQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJsZVJlY29yZCB7XG4iICsK
KwkJCSIJCXB1YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsgfVxuIiArCisJCQkiCX1c
biIgKworCQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJlY29yZCB7fVxuIiArCisJ
CQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoRWNsaXBzZUFuZEph
dmFjKCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJl
c3VsdCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAt
PiB7XG4iICsKKwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNvcmQ+IHJlc3VsdDEgPSBl
bnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJ
IgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJ
bW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9y
cy50b0xpc3QoKSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQkiCQkJCXJldHVybiByZXN1
bHQxO1xuIiArCisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29sbGVjdCggQ29s
bGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7
CQlcbiIgKworCQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+
IGNvbXBpbGVzV2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKworCQkJIgl7XG4iICsKKwkJ
CSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0gLT4ge1xuIiArCisJCQki
CQkJcmV0dXJuIHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJIgkJCQlyZXR1cm4gZW50
cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJ
CQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1t
dXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMu
dG9MaXN0KCkgKVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExp
c3Q6OnN0cmVhbSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6
Om5ldyApICk7XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVi
bGljIExpc3Q8SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2Uy
KCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3Vs
dCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBl
bnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJ
IgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJ
bW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9y
cy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlzdDo6c3RyZWFtICkuY29s
bGVjdCggQ29sbGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtcbiIgKwor
CQkJIgkJfSk7CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJs
ZVJlY29yZD4gY29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygpIFxuIiArCisJCQkiCXtc
biIgKworCQkJIgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiBzdHJl
YW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+
IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsK
KwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQku
Y29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSlcbiIgKworCQkJ
IgkJCS5mbGF0TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJLmNvbGxlY3QoIENvbGxl
Y3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIgKworCQkJIgkJKTsJCVxu
IiArCisJCQkiCX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJlZGljYXRlPFJlY29yZD4g
c29tZVByZWRpY2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29yZCAtPiB0cnVlO1xuIiAr
CisJCQkiCX0JCVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRFbnRyaWVzV2l0aFJlc3Vs
dChGdW5jdGlvbjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xuIiArCisJCQkiCQlyZXR1
cm4gZnVuYy5hcHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5PigpLnN0cmVhbSgpICk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQorLy9odHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzODUyLCBbMS44XVtjb21waWxlcl0g
SmF2YWMgcmVqZWN0cyB0eXBlIGluZmVyZW5jZSByZXN1bHRzIHRoYXQgRUNKIGFjY2VwdHMKK3B1
YmxpYyB2b2lkIHRlc3Q0MzM4NTIoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5PcHRpb25hbDtc
biIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5TdHJlYW07XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiAr
CisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4odGVzdChTdHJlYW0ub2YoU3RyZWFtLm9mKFwiM1wi
KSkpKTtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QyKFN0cmVhbS5vZihTdHJl
YW0ub2YoXCIxXCIpKS5za2lwKDEpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0
ZXN0MzEoU3RyZWFtLm9mKFN0cmVhbS5vZihcIjJcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJc3RhdGljIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PiB0ZXN0KFN0cmVhbTxT
dHJlYW08U3RyaW5nPj4gczMxKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMzEubWFwKHMyIC0+IHMy
Lm1hcChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJc3RhdGljIE9iamVjdCB0ZXN0MihTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMz
KSB7XG4iICsKKwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIu
cGFyc2VJbnQoczEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JF
bHNlKFxuIiArCisJCQkiCQkgIFguY2xhc3MpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0
aWMgU3RyZWFtPE9iamVjdD4gdGVzdDMxKFN0cmVhbTxTdHJlYW08U3RyaW5nPj4gczMpIHtcbiIg
KworCQkJIgkJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUlu
dChzMSkpKS5maW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkpKTtcbiIgKwor
CQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCisJIglyZXR1cm4gczMxLm1hcChzMiAtPiBz
Mi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55KCk7XG4iICsgCisJIgkg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5cbiIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPcHRp
b25hbDxTdHJlYW08SW50ZWdlcj4+IHRvIE9wdGlvbmFsPFN0cmVhbTxPYmplY3Q+PlxuIiArIAor
CSItLS0tLS0tLS0tXG4iICsgCisJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIg
KyAKKwkiCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmxhdE1hcChGdW5jdGlvbi5pZGVudGl0eSgpKS5maW5kQW55KCkub3JFbHNlKFxuIiAr
IAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAK
KwkiVGhlIG1ldGhvZCBvckVsc2UoSW50ZWdlcikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8SW50ZWdl
cj4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKENsYXNzPFg+KVxuIiArIAor
CSItLS0tLS0tLS0tXG4iICsgCisJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIg
KyAKKwkiCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQo
czEpKSkuZmluZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9iamVjdCgpKSk7XG4iICsgCisJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkiVGhlIG1ldGhvZCBvckVsc2UoU3RyZWFtPEludGVn
ZXI+KSBpbiB0aGUgdHlwZSBPcHRpb25hbDxTdHJlYW08SW50ZWdlcj4+IGlzIG5vdCBhcHBsaWNh
YmxlIGZvciB0aGUgYXJndW1lbnRzIChTdHJlYW08T2JqZWN0PilcbiIgKyAKKwkiLS0tLS0tLS0t
LVxuIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQyOTE2LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBlIEluZmVyZW5jZSBpcyBicm9rZW4gZm9y
IENvbXBsZXRhYmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2
KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZh
IiwKKwkJCSJpbXBvcnQgc3RhdGljIGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0
dXJlLmNvbXBsZXRlZEZ1dHVyZTtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xu
IiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xu
IiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgQ29t
cGxldGFibGVGdXR1cmU8SW50ZWdlcj4gY2YoaW50IHZhbHVlKSB7XG4iICsKKwkJCSIJCXJldHVy
biBjb21wbGV0ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCWNmKDEp
LnRoZW5Db21wb3NlKCh4SW50KSAtPiBjZigyKS50aGVuQXBwbHkoKHpJbnQpIC0+IEFycmF5cy5h
c0xpc3QoeEludCwgekludCkpKVxuIiArCisJCQkiCQkudGhlbkFjY2VwdCgoaW50cykgLT4ge1xu
IiArCisJCQkiCQkJLyogISEhISBpbnRzIGlzIGluY29ycmVjdGx5IGluZmVycmVkIHRvIGJlIGFu
IE9iamVjdCwgYnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4gKi9cbiIgKworCQkJIgkJCVN5c3RlbS5v
dXQucHJpbnRsbihpbnRzLmdldCgwKSArIGludHMuZ2V0KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7
XG4iICsKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIjMi
KTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
NDI3NjksIFsxLjhdW2NvbXBpbGVyXSBJbnZhbGlkIHR5cGUgaW5mZXJlbmNlIHVzaW5nIFN0cmVh
bSAgCitwdWJsaWMgdm9pZCB0ZXN0NDQyNzY5KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5Q
YXRoO1xuIiArCisJCQkiaW1wb3J0IGphdmEubmlvLmZpbGUuUGF0aHM7XG4iICsKKwkJCSJpbXBv
cnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDtc
biIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0
aWwuTWFwO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4iICsKKwkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51
dGlsLnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0u
U3RyZWFtO1xuIiArCisJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJTWFwPE9iamVjdCwgSW50ZWdlcj4gYWxsb2NhdGVkID0g
bmV3IEhhc2hNYXA8PigpO1xuIiArCisJCQkiCQkgICBBcnJheXMuYXNMaXN0KFwiYVwiLCBcImJc
IiwgXCJjXCIsIFwiZFwiLCBcImVcIikgLy8gTGlzdDxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAg
ICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08U3RyaW5nPlxuIiArCisJCQkiCSAgICAgICAgICAubWFw
KFBhdGhzOjpnZXQpIC8vIFN0cmVhbTxQYXRoPlxuIiArCisJCQkiCSAgICAgICAgICAuZmxhdE1h
cChwYXRoIC0+IGFsbG9jYXRlZC5rZXlTZXQoKSAvLyBTZXQ8T2JqZWN0PlxuIiArCisJCQkiCSAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zdHJlYW0oKSAvLyBTdHJlYW08T2Jq
ZWN0PlxuIiArCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAo
Z3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQYWlyPE9iamVjdCxQYXRoPiovKSAvLyBT
dHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICApIC8vIFN0cmVh
bTxPYmplY3Q+IFtGQUlMXVxuIiArCisJCQkiCSAgICAgICAgICAuY29sbGVjdChDb2xsZWN0b3Jz
LnRvTGlzdCgpKSAvLyBMaXN0PE9iamVjdD5cbiIgKworCQkJIgkgICAgICAgICAgLmZvckVhY2go
aXRlbSAtPiBTeXN0ZW0ub3V0LnByaW50bG4oaXRlbS5nZXRLZXkoKSArIFwiOiBcIiArIGl0ZW0u
Z2V0VmFsdWUoKSkpOyAvLyBDb25zdW1lcjw/IHN1cGVyIE9iamVjdD5cbiIgKworCQkJIgkgICAg
Ly8gd2l0aCBleHBsaWNpdCB0eXBlXG4iICsKKwkJCSIJICAgIEFycmF5cy5hc0xpc3QoXCJhXCIs
IFwiYlwiLCBcImNcIiwgXCJkXCIsIFwiZVwiKSAvLyBMaXN0PFN0cmluZz5cbiIgKworCQkJIgkg
ICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVhbTxTdHJpbmc+XG4iICsKKwkJCSIJICAgICAgICAg
IC5tYXAoUGF0aHM6OmdldCkgLy8gU3RyZWFtPFBhdGg+XG4iICsKKwkJCSIJICAgICAgICAgIC5m
bGF0TWFwKHBhdGggLT4gYWxsb2NhdGVkLmtleVNldCgpIC8vIFNldDxPYmplY3Q+XG4iICsKKwkJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnN0cmVhbSgpIC8vIFN0cmVh
bTxPYmplY3Q+XG4iICsKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
LjxQYWlyPE9iamVjdCxQYXRoPj5tYXAoZ3JvdXAgLT4gUGFpci5vZihncm91cCwgcGF0aCkgLypQ
YWlyPE9iamVjdCxQYXRoPiovKSAvLyBTdHJlYW08UGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJ
CQkiCSAgICAgICAgICApIC8vIFN0cmVhbTxQYWlyPE9iamVjdCwgUGF0aD4+XG4iICsKKwkJCSIJ
ICAgICAgICAgIC5jb2xsZWN0KENvbGxlY3RvcnMudG9MaXN0KCkpIC8vIExpc3Q8UGFpcjxPYmpl
Y3QsIFBhdGg+PlxuIiArCisJCQkiCSAgICAgICAgICAuZm9yRWFjaChpdGVtIC0+IFN5c3RlbS5v
dXQucHJpbnRsbihpdGVtLmdldEtleSgpICsgXCI6IFwiICsgaXRlbS5nZXRWYWx1ZSgpKSk7IC8v
IENvbnN1bWVyPD8gc3VwZXIgUGFpcjxPYmplY3QsIFBhdGg+PlxuIiArCisJCQkiCX1cbiIgKwor
CQkJIn1cbiIgKworCQkJImFic3RyYWN0IGNsYXNzIFBhaXI8TCwgUj4gaW1wbGVtZW50cyBNYXAu
RW50cnk8TCwgUj4sIENvbXBhcmFibGU8UGFpcjxMLCBSPj4sIFNlcmlhbGl6YWJsZSB7XG4iICsK
KwkJCSIgICAgcHVibGljIHN0YXRpYyA8TCwgUj4gUGFpcjxMLCBSPiBvZihmaW5hbCBMIGxlZnQs
IGZpbmFsIFIgcmlnaHQpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJ
CSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBmaW5hbCBMIGdldEtleSgpIHtcbiIgKworCQkJ
IiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1Ymxp
YyBSIGdldFZhbHVlKCkge1xuIiArCisJCSIgICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQki
ICAgIH1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIiIpOworfQorLy8gVGVzdCBhbGxvY2F0aW9u
IGV4cHJlc3Npb24gYm94aW5nIGNvbXBhdGliaWxpdHkKK3B1YmxpYyB2b2lkIHRlc3RBbGxvY2F0
aW9uQm94aW5nQ29tcGF0aWJpbGl0eSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFggIHtcbiIgKworCQkJ
IiAgICBzdGF0aWMgPFQ+IGludCBtKFQgbzEsIGJ5dGUgbzIpIHtyZXR1cm4gMTt9ICAgICAgIFxu
IiArCisJCQkiICAgIHN0YXRpYyBib29sZWFuIGNhbGwoKSB7XG4iICsKKwkJCSIgICAgICAgIHJl
dHVybiBtKG5ldyBMb25nKDEybCksIG5ldyBCeXRlKChieXRlKTEpKSA9PSAxO1xuIiArCisJCQki
ICAgIH1cbiIgKworCQkJIlxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZyBhcmd2W10pIHtcbiIgKworCQkJIiAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oY2FsbCgp
KTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4iLAorCQl9LCAidHJ1ZSIpOworfQorLy8g
TlBFIHdoaWxlIGJ1aWxkaW5nIEpSRTg6IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD00Mzc0NDQjYzExMworcHVibGljIHZvaWQgdGVzdDQzNzQ0NF9jMTEzKCkg
eworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIs
CisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkiCWZpbmFsIExpc3Q8U3RyaW5nPltdIGxzID0gVXRpbC5jYXN0KG5ldyBMaXN0PD5b
XSB7IG51bGwgfSk7XG4iICsKKwkJCSIJXG4iICsKKwkJCSJ9XG4iICsKKwkJCSJjbGFzcyBVdGls
IHtcbiIgKworCQkJIglAU3VwcHJlc3NXYXJuaW5ncyhcInVuY2hlY2tlZFwiKVxuIiArCisJCQki
CXB1YmxpYyBzdGF0aWMgPFQ+IFQgY2FzdChPYmplY3QgeCkge1xuIiArCisJCQkiCQlyZXR1cm4g
KFQpIHg7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiwKKwkJfSwgCisJCSItLS0tLS0tLS0t
XG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglmaW5h
bCBMaXN0PFN0cmluZz5bXSBscyA9IFV0aWwuY2FzdChuZXcgTGlzdDw+W10geyBudWxsIH0pO1xu
IiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4i
ICsgCisJCSJJbmNvcnJlY3QgbnVtYmVyIG9mIGFyZ3VtZW50cyBmb3IgdHlwZSBMaXN0PEU+OyBp
dCBjYW5ub3QgYmUgcGFyYW1ldGVyaXplZCB3aXRoIGFyZ3VtZW50cyA8PlxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIik7Cit9CisvLyBFcnJvciB3aGlsZSBidWlsZGluZyBKUkU4OiBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM3NDQ0I2MxMTMKK3B1YmxpYyB2
b2lkIHRlc3Q0Mzc0NDRfYzExM2EoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKwor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglmaW5hbCBMaXN0PFN0cmluZz5bXSBscyA9
IFV0aWwuY2FzdChuZXcgTGlzdDw/PltdIHsgbnVsbCB9KTtcbiIgKworCQkJIglcbiIgKworCQkJ
In1cbiIgKworCQkJImNsYXNzIFV0aWwge1xuIiArCisJCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwi
dW5jaGVja2VkXCIpXG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyA8VD4gVCBjYXN0KE9iamVjdCB4
KSB7XG4iICsKKwkJCSIJCXJldHVybiAoVCkgeDtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4i
LAorCQl9LCAKKwkJIiIpOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBjODc4ZGIzLi4xYjJk
ZDlhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHBy
ZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1i
ZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNDE2Myw3ICs0MTYzLDcgQEAKIAkJIk9LIik7CiB9
CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyNjgy
LCBbMS44XVtjb21waWxlcl0gVHlwZSBtaXNtYXRjaCBlcnJvciB3aXRoIGxhbWJkYSBleHByZXNz
aW9uCi1wdWJsaWMgdm9pZCBfdGVzdDQzMjY4MigpIHRocm93cyBFeGNlcHRpb24geworcHVibGlj
IHZvaWQgdGVzdDQzMjY4MigpIHRocm93cyBFeGNlcHRpb24gewogCXRoaXMucnVuQ29uZm9ybVRl
c3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwKQEAgLTQxODEsNyArNDE4MSw3IEBA
CiAJCQkiCX1cbiIgKwogCQkJIn1cbiIKIAkJfSwKLQkJIk9LIik7CisJCSJ0cnVlIik7CiB9CiAv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyNTIwLCBj
b21waWxlciAiZHVwbGljYXRlIG1ldGhvZCIgYnVnIHdpdGggbGFtZGFzIGFuZCBnZW5lcmljIGlu
dGVyZmFjZXMgCiBwdWJsaWMgdm9pZCB0ZXN0NDMyNTIwKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CkBA
IC00MjkwLDEzICs0MjkwLDE4IEBACiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAyMSlcbiIgKyAKIAkJCSIJcGVyc29ucy5zb3J0KENvbXBhcmF0
b3IuY29tcGFyaW5nKENvbXBhcmF0b3IubnVsbHNMYXN0KFBlcnNvbjo6PFJ1bm5hYmxlPmlzUnVu
bmFibGUpKSk7XG4iICsgCi0JCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIF5eXl5eXl5eXlxuIiArIAotCQkJIlRoZSBtZXRob2QgbnVsbHNMYXN0KENvbXBh
cmF0b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoUGVyc29uOjo8UnVubmFibGU+aXNSdW5uYWJsZSlcbiIgKyAK
KwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIG1l
dGhvZCBjb21wYXJpbmcoRnVuY3Rpb248PyBzdXBlciBULD8gZXh0ZW5kcyBVPikgaW4gdGhlIHR5
cGUgQ29tcGFyYXRvciBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ29tcGFy
YXRvcjxPYmplY3Q+KVxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMjEpXG4iICsgCiAJCQkiCXBlcnNvbnMuc29ydChDb21wYXJhdG9y
LmNvbXBhcmluZyhDb21wYXJhdG9yLm51bGxzTGFzdChQZXJzb246OjxSdW5uYWJsZT5pc1J1bm5h
YmxlKSkpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJ
CSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIENvbXBhcmF0b3I8T2JqZWN0PiB0
byBGdW5jdGlvbjw/IHN1cGVyIFQsPyBleHRlbmRzIFU+XG4iICsgCisJCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMSlcbiIgKyAKKwkJCSIJcGVy
c29ucy5zb3J0KENvbXBhcmF0b3IuY29tcGFyaW5nKENvbXBhcmF0b3IubnVsbHNMYXN0KFBlcnNv
bjo6PFJ1bm5hYmxlPmlzUnVubmFibGUpKSk7XG4iICsgCiAJCQkiCSAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCi0JCQkiVGhlIHR5cGUgWC5QZXJzb24gZG9lcyBub3QgZGVmaW5lIGlz
UnVubmFibGUoVCwgVCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAKKwkJCSJUaGUgdHlw
ZSBYLlBlcnNvbiBkb2VzIG5vdCBkZWZpbmUgaXNSdW5uYWJsZShPYmplY3QsIE9iamVjdCkgdGhh
dCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzExOTAsIFsxLjhd
IFZlcmlmeUVycm9yIHdoZW4gdXNpbmcgYSBtZXRob2QgcmVmZXJlbmNlCkBAIC01MDQ4LDYgKzUw
NTMsODYgQEAKIAkJCX0sCiAJCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyNjA1LCBbMS44XSBJbmNvcnJlY3QgZXJyb3IgIlRoZSB0
eXBlIEFycmF5TGlzdDxUPiBkb2VzIG5vdCBkZWZpbmUgYWRkKEFycmF5TGlzdDxUPiwgT2JqZWN0
KSB0aGF0IGlzIGFwcGxpY2FibGUgaGVyZSIKK3B1YmxpYyB2b2lkIHRlc3Q0MzI2MDUoKSB7CisJ
dGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJ
CSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwu
SGFzaE1hcDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLlN1cHBsaWVyO1xuIiArCisJCQkiaW1w
b3J0IGphdmEudXRpbC5zdHJlYW0uQ29sbGVjdG9yO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRp
bC5zdHJlYW0uQ29sbGVjdG9ycztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0
cmVhbTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJInN0YXRpYyA8VCwgRSBl
eHRlbmRzIEV4Y2VwdGlvbiwgSywgTCwgTT4gTSB0ZXJtaW5hbEFzTWFwVG9MaXN0KFxuIiArCisJ
CQkiICAgIEZ1bmN0aW9uPD8gc3VwZXIgVCwgPyBleHRlbmRzIEs+IGNsYXNzaWZpZXIsXG4iICsK
KwkJCSIgICAgRnVuY3Rpb248SGFzaE1hcDxLLCBMPiwgTT4gaW50b01hcCxcbiIgKworCQkJIiAg
ICBGdW5jdGlvbjxBcnJheUxpc3Q8VD4sIEw+IGludG9MaXN0LFxuIiArCisJCQkiICAgIFN1cHBs
aWVyPFN0cmVhbTxUPj4gc3VwcGxpZXIsXG4iICsKKwkJCSIgICAgQ2xhc3M8RT4gY2xhc3NPZkUp
IHRocm93cyBFIHtcbiIgKworCQkJIiAgCXJldHVybiB0ZXJtaW5hbEFzQ29sbGVjdGVkKFxuIiAr
CisJCQkiICAJICBjbGFzc09mRSxcbiIgKworCQkJIiAgCSAgQ29sbGVjdG9ycy5jb2xsZWN0aW5n
QW5kVGhlbihcbiIgKworCQkJIiAgCSAgICBDb2xsZWN0b3JzLmdyb3VwaW5nQnkoXG4iICsKKwkJ
CSIgIAkgICAgICBjbGFzc2lmaWVyLFxuIiArCisJCQkiICAJICAgICAgSGFzaE1hcDxLLCBMPjo6
bmV3LFxuIiArCisJCQkiICAJICAgICAgQ29sbGVjdG9ycy5jb2xsZWN0aW5nQW5kVGhlbihcbiIg
KworCQkJIiAgCSAgICAgIAkvLyBUaGUgdHlwZSBBcnJheUxpc3Q8VD4gZG9lcyBub3QgZGVmaW5l
IGFkZChBcnJheUxpc3Q8VD4sIE9iamVjdCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhlcmVcbiIgKwor
CQkJIiAgCSAgICAgIAkvLyBmcm9tIEFycmF5TGlzdDxUPjo6YWRkOlxuIiArCisJCQkiICAJICAg
ICAgICBDb2xsZWN0b3Iub2YoQXJyYXlMaXN0PFQ+OjpuZXcsIEFycmF5TGlzdDxUPjo6YWRkLCAo
QXJyYXlMaXN0PFQ+IGxlZnQsIEFycmF5TGlzdDxUPiByaWdodCkgLT4geyBcbiIgKworCQkJIiAg
CQkgICAgICAgIGxlZnQuYWRkQWxsKHJpZ2h0KTtcbiIgKworCQkJIiAgCQkgICAgICAgIHJldHVy
biBsZWZ0O1xuIiArCisJCQkiICAJICAgICAgICB9KSxcbiIgKworCQkJIiAgCSAgICAgICAgaW50
b0xpc3QpKSxcbiIgKworCQkJIiAgCSAgICBpbnRvTWFwKSxcbiIgKworCQkJIiAgCSAgc3VwcGxp
ZXIpO1xuIiArCisJCQkiICB9XG4iICsKKwkJCSIJc3RhdGljIDxFIGV4dGVuZHMgRXhjZXB0aW9u
LCBULCBNPiBNIHRlcm1pbmFsQXNDb2xsZWN0ZWQoXG4iICsKKwkJCSIgICAgQ2xhc3M8RT4gY2xh
c3MxLFxuIiArCisJCQkiICAgIENvbGxlY3RvcjxULCA/LCBNPiBjb2xsZWN0b3IsXG4iICsKKwkJ
CSIgICAgU3VwcGxpZXI8U3RyZWFtPFQ+PiBzdXBwbGllcikgdGhyb3dzIEUge1xuIiArCisJCQki
ICAJdHJ5KFN0cmVhbTxUPiBzID0gc3VwcGxpZXIuZ2V0KCkpIHtcbiIgKworCQkJIiAgCQlyZXR1
cm4gcy5jb2xsZWN0KGNvbGxlY3Rvcik7XG4iICsKKwkJCSIgIAl9IGNhdGNoKFJ1bnRpbWVFeGNl
cHRpb24gZSkge1xuIiArCisJCQkiICAJCXRocm93IHVud3JhcENhdXNlKGNsYXNzMSwgZSk7XG4i
ICsKKwkJCSIgIAl9XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIglzdGF0aWMgPEUgZXh0ZW5kcyBF
eGNlcHRpb24+IEUgdW53cmFwQ2F1c2UoQ2xhc3M8RT4gY2xhc3NPZkUsIFJ1bnRpbWVFeGNlcHRp
b24gZSkgdGhyb3dzIEUge1xuIiArCisJCQkiCQlUaHJvd2FibGUgY2F1c2UgPSBlLmdldENhdXNl
KCk7XG4iICsKKwkJCSIJCWlmKGNsYXNzT2ZFLmlzSW5zdGFuY2UoY2F1c2UpID09IGZhbHNlKSB7
XG4iICsKKwkJCSIJCQl0aHJvdyBlO1xuIiArCisJCQkiCQl9XG4iICsKKwkJCSIJCXRocm93IGNs
YXNzT2ZFLmNhc3QoY2F1c2UpO1xuIiArCisJCQkifVxuIiArCisJCQkifVxuIgorCX0sCisJIiIp
OworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQz
MjYwNSwgWzEuOF0gSW5jb3JyZWN0IGVycm9yICJUaGUgdHlwZSBBcnJheUxpc3Q8VD4gZG9lcyBu
b3QgZGVmaW5lIGFkZChBcnJheUxpc3Q8VD4sIE9iamVjdCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhl
cmUiCitwdWJsaWMgdm9pZCB0ZXN0cmVkdWNlZDQzMjYwNSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1U
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0
aWwuQXJyYXlMaXN0O1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwO1xuIiArCisJ
CQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKworCQkJImltcG9ydCBq
YXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3Ry
ZWFtLkNvbGxlY3RvcnM7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAg
c3RhdGljIDxULCBLLCBMLCBNPiB2b2lkIGZvbygpIHtcbiIgKworCQkJIglDb2xsZWN0b3I8VCwg
PywgTT4gY2F0ID0gXG4iICsKKwkJCSIgICAgICAgICAgICBDb2xsZWN0b3JzLmNvbGxlY3RpbmdB
bmRUaGVuKFxuIiArCisJCQkiCQlDb2xsZWN0b3JzLmdyb3VwaW5nQnkoKEZ1bmN0aW9uPD8gc3Vw
ZXIgVCwgPyBleHRlbmRzIEs+KSBudWxsLCBcbiIgKworCQkJIgkJCQlIYXNoTWFwPEssIEw+Ojpu
ZXcsIFxuIiArCisJCQkiCQkJCShDb2xsZWN0b3I8VCwgQXJyYXlMaXN0PFQ+LCBMPikgbnVsbCks
IFxuIiArCisJCQkiCQkJCShGdW5jdGlvbjxIYXNoTWFwPEssIEw+LCBNPikgbnVsbCk7XG4iICsK
KwkJCSIJfVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQogcHVibGljIHN0YXRpYyBDbGFz
cyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIExhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0K
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGViZDgwNDkuLmVhZDhmNjAgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtOTExOCwxMSArOTExOCwxMiBAQAog
CQkJIgl9CVxuIiArCiAJCQkifVxuIgogCQl9LAorCQkvLyBOb3RlOiBuZXcgbWVzc2FnZSBhbGln
bnMgYmV0dGVyIHdpdGggamF2YWMgOHUyMC4KIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkiCUZ1bmN0aW9uPENMPEludGVnZXI+
LCBTdHJpbmc+IHY1ID0gQ0w6Om1ldGhvZDE7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXlxuIiArIAotCQkiVGhlIHR5cGUgQ0wgZG9lcyBu
b3QgZGVmaW5lIG1ldGhvZDEoQ0w8SW50ZWdlcj4pIHRoYXQgaXMgYXBwbGljYWJsZSBoZXJlXG4i
ICsgCisJCSJDYW5ub3QgbWFrZSBhIHN0YXRpYyByZWZlcmVuY2UgdG8gdGhlIG5vbi1zdGF0aWMg
bWV0aG9kIG1ldGhvZDEoQ0wpIGZyb20gdGhlIHR5cGUgQ0xcbiIgKyAKIAkJIi0tLS0tLS0tLS1c
biIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArIAogCQkiCXY1ID0g
dCAtPiB0Lm1ldGhvZDEoKTsJXG4iICsgCkBAIC05NjQxLDcgKzk2NDIsNyBAQAogCSItLS0tLS0t
LS0tXG4iKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD00NDI0NDYsIFsxLjhdW2NvbXBpbGVyXSBjb21waWxlciB1bmFibGUgdG8gaW5mZXIgbGFt
YmRhJ3MgZ2VuZXJpYyBhcmd1bWVudCB0eXBlcwotcHVibGljIHZvaWQgX3Rlc3Q0NDI0NDYoKSB7
CitwdWJsaWMgdm9pZCB0ZXN0NDQyNDQ2KCkgewogCXRoaXMucnVuTmVnYXRpdmVUZXN0KAogCQlu
ZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsIApAQCAtOTcwNyw2ICs5NzA4LDcyIEBACiAJfSwK
IAkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDM3NDQ0I2MzNiwgIE5QRSBpbiBicm9rZW4gY29kZQorcHVibGljIHZvaWQgdGVzdDQzNzQ0
NCgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmph
dmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKworCQkJImltcG9ydCBq
YXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3Rv
cnM7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2
b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlMaXN0PFBlcnNvbj4gcm9zdGVy
ID0gbmV3IEFycmF5TGlzdDw+KCk7XG4iICsKKwkJCSIgICAgICAgIE1hcDxTdHJpbmcsIFBlcnNv
bj4gbWFwID0gXG4iICsKKwkJCSIgICAgICAgICAgICByb3N0ZXJcbiIgKworCQkJIiAgICAgICAg
ICAgICAgICAuc3RyZWFtKClcbiIgKworCQkJIiAgICAgICAgICAgICAgICAuY29sbGVjdChcbiIg
KworCQkJIiAgICAgICAgICAgICAgICAgICAgQ29sbGVjdG9ycy50b01hcChcbiIgKworCQkJIiAg
ICAgICAgICAgICAgICAgICAgICAgIFBlcnNvbjo6Z2V0TGFzdCxcbiIgKworCQkJIiAgICAgICAg
ICAgICAgICAgICAgICAgIEZ1bmN0aW9uLmlkZW50aXR5KCkgXG4iICsKKwkJCSIgICAgICAgICAg
ICAgICAgICAgICkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIgKworCQkJImNsYXNzIFBl
cnNvbiB7XG4iICsKKwkJCSJ9XG4iIAorCX0sCisJIi0tLS0tLS0tLS1cbiIgKyAKKwkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJIglNYXA8U3RyaW5nLCBQZXJzb24+IG1h
cCA9IFxuIiArIAorCSIJXl5eXG4iICsgCisJIk1hcCBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0
eXBlXG4iICsgCisJIi0tLS0tLS0tLS1cbiIgKyAKKwkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEzKVxuIiArIAorCSIJRnVuY3Rpb24uaWRlbnRpdHkoKSBcbiIgKyAKKwkiCV5eXl5eXl5e
XG4iICsgCisJIkZ1bmN0aW9uIGNhbm5vdCBiZSByZXNvbHZlZFxuIiArIAorCSItLS0tLS0tLS0t
XG4iKTsKK30KKy8vIHRlc3QgZ3JvdW5kIHRhcmdldCB0eXBlIHdpdGggd2lsZGNhcmRzIGxlZnQg
aW4gbm9uIHBhcmFtZXRlciBwb3NpdGlvbnMuCitwdWJsaWMgdm9pZCB0ZXN0R3JvdW5kVGFyZ2V0
VHlwZVdpdGhXaXRoV2lsZGNhcmRzKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiY2xhc3MgQSB7fVxuIiArCisJCQkiY2xhc3Mg
QiB7fVxuIiArCisJCQkiY2xhc3MgQyB7fVxuIiArCisJCQkiY2xhc3MgWSBleHRlbmRzIEMge31c
biIgKworCQkJImludGVyZmFjZSBJPFIsIFMsIFQ+IHtcbiIgKworCQkJIiAgICBUIG0oUiByLCBT
IHMpO1xuIiArCisJCQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFggZXh0ZW5kcyBBIHtcbiIg
KworCQkJIiAgICBPYmplY3QgbShJPD8gZXh0ZW5kcyBBLCA/IGV4dGVuZHMgQiwgPyBleHRlbmRz
IEM+IGkpIHtcbiIgKworCQkJIiAgICAJcmV0dXJuIG0oKFggeDEsIFggeDIpIC0+IHsgcmV0dXJu
IG5ldyBZKCk7IH0pO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIn1cbiIsCisJCX0sIAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEwKVxuIiAr
IAorCQkiCXJldHVybiBtKChYIHgxLCBYIHgyKSAtPiB7IHJldHVybiBuZXcgWSgpOyB9KTtcbiIg
KyAKKwkJIgkgICAgICAgXlxuIiArIAorCQkiVGhlIG1ldGhvZCBtKEk8PyBleHRlbmRzIEEsPyBl
eHRlbmRzIEIsPyBleHRlbmRzIEM+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZv
ciB0aGUgYXJndW1lbnRzICgoWCB4MSwgWCB4MikgLT4ge30pXG4iICsgCisJCSItLS0tLS0tLS0t
XG4iICsgCisJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJcmV0
dXJuIG0oKFggeDEsIFggeDIpIC0+IHsgcmV0dXJuIG5ldyBZKCk7IH0pO1xuIiArIAorCQkiCSAg
ICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBl
IG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIEk8WCxYLD8gZXh0ZW5kcyBDPiB0byBJPD8g
ZXh0ZW5kcyBBLD8gZXh0ZW5kcyBCLD8gZXh0ZW5kcyBDPlxuIiArIAorCQkiLS0tLS0tLS0tLVxu
Iik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTmVnYXRp
dmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKaW5kZXgg
NmIyYmYxMy4uMzYxNDBlMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNjc0MCw2ICs2NzQwLDcg
QEAKIAkJCSJ9XG4iICsKIAkJCSJ9XG4iLAogCQl9LAorCQkvLyBOb3RlOiB3ZSB1c2VkIHRvIGVt
aXQgYSBkdXBsaWNhdGUgbWVzc2FnZSBvZiAyLiBGaXhlZC4KIAkJIi0tLS0tLS0tLS1cbiIgKyAK
IAkJIjEuIEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkpXG4iICsgCiAJCSIJ
ZmlsdGVyMi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQocCksIHAtPmlkZUZp
bGVzLmdldChwKSkpO1xuIiArIApAQCAtNjc0NywxMSArNjc0OCw2IEBACiAJCSJUaGUgY29uc3Ry
dWN0b3IgUGFpcjxQYXRoLE9iamVjdD4oUGF0aCwgKDxubyB0eXBlPiBwKSAtPiB7fSkgaXMgdW5k
ZWZpbmVkXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBCdWlsZElk
ZU1haW4uamF2YSAoYXQgbGluZSA5KVxuIiArIAotCQkiCWZpbHRlcjIubWFwKHAgLT4gbmV3IFBh
aXI8Pih1cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkpKTtcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5e
Xl5eXl5eXl5eXl5eXG4iICsgCi0JCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhpcyBleHByZXNzaW9u
IG11c3QgYmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiAr
IAotCQkiMy4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKIAkJ
IglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRl
RmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAogCQkiVGhlIHRhcmdl
dCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2Vc
biIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
U1ROb2RlLmphdmEKaW5kZXggZTdiNTM0YS4uNzlmZDNiNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BU1ROb2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTYwLDEwICs2
MCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5N
ZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuUGFja2FnZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmc7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkTWV0
aG9kQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU2NvcGU7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Tb3VyY2VUeXBlQmlu
ZGluZzsKQEAgLTY1NSwxMjAgKzY1Miw0MSBAQAogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29r
dXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25z
IGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMg
dG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdl
dCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYgdGhpcyByZXNvbHZp
bmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdh
cmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgotCSAqIGludGVuZGVkIHNpZGUgZWZm
ZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2Nh
dGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFtIGludm9jYXRpb24gdGhlIG91
dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQKLQkgKiBAcGFyYW0gbWV0aG9k
QmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5n
IHR5cGUgaW5mZXJlbmNlKS4KLQkgKiBAcGFyYW0gYXJndW1lbnRUeXBlcyB0aGUgYXJndW1lbnQg
dHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFy
Z3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIG1ldGhvZCBsb29rdXAuCi0JICogQHBh
cmFtIHNjb3BlIHNjb3BlIGZvciBlcnJvciByZXBvcnRpbmcKKwkgKiBAcGFyYW0gbWV0aG9kIHRo
ZSBtZXRob2QgcHJvZHVjZWQgYnkgbG9va3VwIChwb3NzaWJseSBpbnZvbHZpbmcgdHlwZSBpbmZl
cmVuY2UpLgorCSAqIEBwYXJhbSBhcmd1bWVudFR5cGVzIHRoZSBhcmd1bWVudCB0eXBlcyBhcyBj
b2xsZWN0ZWQgZnJvbSBmaXJzdCByZXNvbHZpbmcgdGhlIGludm9jYXRpb24gYXJndW1lbnRzIGFu
ZCBhcyB1c2VkIGZvciB0aGUgbWV0aG9kIGxvb2t1cC4KKwkgKiBAcGFyYW0gc2NvcGUgc2NvcGUg
Zm9yIHJlc29sdXRpb24uCiAJICovCi0JcHVibGljIHN0YXRpYyB2b2lkIHJlc29sdmVQb2x5RXhw
cmVzc2lvbkFyZ3VtZW50cyhJbnZvY2F0aW9uIGludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcgbWV0
aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBTY29wZSBzY29wZSkgewot
CQlpZiAoIWludm9jYXRpb24uaW5uZXJzTmVlZFVwZGF0ZSgpKQorCXB1YmxpYyBzdGF0aWMgdm9p
ZCByZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBN
ZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBCbG9ja1Nj
b3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kID0gbWV0aG9kLmlz
VmFsaWRCaW5kaW5nKCkgPyBtZXRob2QgOiBtZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9k
QmluZGluZyA/ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIG1ldGhvZCkuY2xvc2VzdE1hdGNoIDog
bnVsbDsKKwkJaWYgKGNhbmRpZGF0ZU1ldGhvZCA9PSBudWxsKQogCQkJcmV0dXJuOwotCQlpbnQg
cHJvYmxlbVJlYXNvbiA9IDA7Ci0JCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kOwotCQlp
ZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQljYW5kaWRhdGVNZXRob2Qg
PSBtZXRob2RCaW5kaW5nOwotCQl9IGVsc2UgaWYgKG1ldGhvZEJpbmRpbmcgaW5zdGFuY2VvZiBQ
cm9ibGVtTWV0aG9kQmluZGluZykgewotCQkJcHJvYmxlbVJlYXNvbiA9IG1ldGhvZEJpbmRpbmcu
cHJvYmxlbUlkKCk7Ci0JCQljYW5kaWRhdGVNZXRob2QgPSAoKFByb2JsZW1NZXRob2RCaW5kaW5n
KSBtZXRob2RCaW5kaW5nKS5jbG9zZXN0TWF0Y2g7Ci0JCX0gZWxzZSB7Ci0JCQljYW5kaWRhdGVN
ZXRob2QgPSBudWxsOwotCQl9Ci0JCWlmIChjYW5kaWRhdGVNZXRob2QgIT0gbnVsbCkgewotCQkJ
Ym9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOwotCQkJ
SW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IG51bGw7Ci0JCQlpZiAoY2FuZGlkYXRlTWV0aG9k
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHsKLQkJCQlpbmZDdHggPSBp
bnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5n
KSBjYW5kaWRhdGVNZXRob2QpOwotCQkJCWlmIChpbmZDdHggIT0gbnVsbCkgewotCQkJCQlpZiAo
aW5mQ3R4LnN0ZXBDb21wbGV0ZWQgIT0gSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQp
IHsKLQkJCQkJCS8vIG9ubHkgd29yayBpbiB0aGUgZXhhY3Qgc3RhdGUgb2YgVFlQRV9JTkZFUlJF
RAotCQkJCQkJLy8gLSBiZWxvdyB3ZSdyZSBub3QgeWV0IHJlYWR5Ci0JCQkJCQkvLyAtIGFib3Zl
IHdlJ3JlIGFscmVhZHkgZG9uZS1kb25lCi0JCQkJCQlyZXR1cm47Ci0JCQkJCX0KLQkJCQkJdmFy
aWFibGVBcml0eSAmPSBpbmZDdHguaXNWYXJBcmdzKCk7IC8vIFRPRE86IGlmIG5vIGluZkN0eCBp
cyBhdmFpbGFibGUsIGRvIHdlIGhhdmUgdG8gcmUtY2hlY2sgaWYgdGhpcyBpcyBhIHZhcmFyZ3Mg
aW52b2NhdGlvbj8KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGludm9jYXRpb24gaW5zdGFuY2VvZiBB
bGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCWlmICgoKEFsbG9jYXRpb25FeHByZXNzaW9uKWlu
dm9jYXRpb24pLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBudWxsKQotCQkJCQlyZXR1cm47
IC8vIG5vdCB5ZXQgcmVhZHkKLQkJCX0KLQkJCQotCQkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJh
bWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCQlFeHByZXNzaW9uW10gaW5u
ZXJBcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJRXhwcmVzc2lvbiBbXSBh
cmd1bWVudHMgPSBpbm5lckFyZ3VtZW50czsKLQkJCWlmIChpbmZDdHggPT0gbnVsbCAmJiB2YXJp
YWJsZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3RoID09IGFy
Z3VtZW50cy5sZW5ndGgpIHsgLy8gcmUtY2hlY2sKLQkJCQlUeXBlQmluZGluZyBsYXN0UGFyYW0g
PSBwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdOwotCQkJCUV4cHJlc3Npb24gbGFzdEFy
ZyA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoLTFdOwotCQkJCWlmIChsYXN0QXJnLmlzQ29t
cGF0aWJsZVdpdGgobGFzdFBhcmFtLCBudWxsKSkgewotCQkJCQl2YXJpYWJsZUFyaXR5ID0gZmFs
c2U7Ci0JCQkJfQotCQkJfQotCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cyA9
PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJCUV4
cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07Ci0JCQkJVHlwZUJpbmRpbmcgdXBkYXRl
ZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSA9IElu
ZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIocGFyYW1ldGVycywgaSwgdmFyaWFibGVBcml0
eSk7Ci0JCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCAmJiBwcm9ibGVtUmVhc29uICE9IFBy
b2JsZW1SZWFzb25zLk5vRXJyb3IpCi0JCQkJCWNvbnRpbnVlOyAvLyBub3QgbXVjaCB3ZSBjYW4g
ZG8gd2l0aG91dCBhIHRhcmdldCB0eXBlLCBhc3N1bWUgaXQgb25seSBoYXBwZW5zIGFmdGVyIHNv
bWUgcmVzb2x2ZSBlcnJvcgotCi0JCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhw
cmVzc2lvbiAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNFcnJvcnMoKSkKLQkJ
CQkJY29udGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhhcyBlcnJvcnMKLQot
CQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKLQkJCQkJSW52b2NhdGlv
biBpbm5lckludm9jYXRpb24gPSAoSW52b2NhdGlvbilhcmd1bWVudDsKLQkJCQkJTWV0aG9kQmlu
ZGluZyBiaW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1ldGVyVHlwZSwgdHJ1
ZSwgc2NvcGUpOwotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSBiaW5kaW5nOwotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ29udGV4dCA9IGlu
bmVySW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRNZXRob2QpOwot
CQkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYgKCFpbm5lckNvbnRl
eHQuaGFzUmVzdWx0Rm9yKHBhcmFtZXRlclR5cGUpKSB7Ci0JCQkJCQkJCWFyZ3VtZW50LnNldEV4
cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCQkJCQkJTWV0aG9kQmluZGluZyBpbXByb3Zl
ZEJpbmRpbmcgPSBpbm5lckNvbnRleHQuaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5lckludm9jYXRp
b24sIHBhcmFtZXRlcml6ZWRNZXRob2QpOwotCQkJCQkJCQlpZiAoIWltcHJvdmVkQmluZGluZy5p
c1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCQlpbm5lckNvbnRleHQucmVwb3J0SW52YWxpZElu
dm9jYXRpb24oaW5uZXJJbnZvY2F0aW9uLCBpbXByb3ZlZEJpbmRpbmcpOwotCQkJCQkJCQl9Ci0J
CQkJCQkJCWlmIChpbm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1wcm92ZWRCaW5kaW5n
LCBwYXJhbWV0ZXJUeXBlKSkgewotCQkJCQkJCQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1l
bnRzKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nLCBzY29wZSk7Ci0JCQkJCQkJCX0K
LQkJCQkJCQl9IGVsc2UgaWYgKGlubmVyQ29udGV4dC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNl
Q29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpIHsKLQkJCQkJCQkJaW5uZXJDb250ZXh0LnJlYmlu
ZElubmVyUG9saWVzKHBhcmFtZXRlcml6ZWRNZXRob2QsIGlubmVySW52b2NhdGlvbik7Ci0JCQkJ
CQkJfQotCQkJCQkJfQotCQkJCQkJY29udGludWU7IC8vIG90aGVyd2lzZSB0aGVzZSBoYXZlIGJl
ZW4gZGVhbHQgd2l0aCBkdXJpbmcgaW5uZXIgbWV0aG9kIGxvb2t1cAotCQkJCQl9Ci0JCQkJfQot
Ci0JCQkJaWYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSkgewotCQkJCQkvLyBwb2x5IGV4
cHJlc3Npb25zIGluIGFuIGludm9jYXRpb24gY29udGV4dCBtYXkgbmVlZCB0byBiZSByZXNvbHZl
ZCBub3c6Ci0JCQkJCWlmIChpbmZDdHggIT0gbnVsbCAmJiBpbmZDdHguc3RlcENvbXBsZXRlZCA9
PSBJbmZlcmVuY2VDb250ZXh0MTguQklORElOR1NfVVBEQVRFRCkKLQkJCQkJCXVwZGF0ZWRBcmd1
bWVudFR5cGUgPSBhcmd1bWVudC5yZXNvbHZlZFR5cGU7IC8vIGluIHRoaXMgY2FzZSBhcmd1bWVu
dCB3YXMgYWxyZWFkeSByZXNvbHZlZCB2aWEgSW5mZXJlbmNlQ29udGV4dDE4LmFjY2VwdFBlbmRp
bmdQb2x5QXJndW1lbnRzKCkKLQkJCQkJZWxzZQotCQkJCQkJdXBkYXRlZEFyZ3VtZW50VHlwZSA9
IGFyZ3VtZW50LmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShwYXJhbWV0ZXJUeXBlLCBzY29w
ZSk7Ci0KLQkJCQkJaWYgKHByb2JsZW1SZWFzb24gPT0gUHJvYmxlbVJlYXNvbnMuTm9FcnJvciAv
LyBwcmVzZXJ2ZSBlcnJvcnMKLQkJCQkJCQkmJiB1cGRhdGVkQXJndW1lbnRUeXBlICE9IG51bGwJ
CQkJCS8vIGRvIHdlIGhhdmUgYSByZWxldmFudCB1cGRhdGU/IC4uLgotCQkJCQkJCSYmICEodXBk
YXRlZEFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykpCi0JCQkJCXsKLQkJ
CQkJCS8vIHVwZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9zZWQgdG8gYmUgb3du
ZWQgYnkgdGhlIGNhbGxpbmcgbWV0aG9kKQotCQkJCQkJLy8gaW4gb3JkZXIgdG8gZ2l2ZSBiZXR0
ZXIgaW5mb3JtYXRpb24gZm9yIHN1YnNlcXVlbnQgY2hlY2tzCi0JCQkJCQlhcmd1bWVudFR5cGVz
W2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJfQotCQkJCX0KKwkJYm9vbGVhbiB2YXJp
YWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJncygpOworCQlmaW5hbCBUeXBlQmlu
ZGluZ1tdIHBhcmFtZXRlcnMgPSBjYW5kaWRhdGVNZXRob2QucGFyYW1ldGVyczsKKwkJRXhwcmVz
c2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1lbnRzKCk7CisJCWlmICh2YXJpYWJs
ZUFyaXR5ICYmIGFyZ3VtZW50cyAhPSBudWxsICYmIHBhcmFtZXRlcnMubGVuZ3RoID09IGFyZ3Vt
ZW50cy5sZW5ndGgpIHsKKwkJCWlmIChhcmd1bWVudHNbYXJndW1lbnRzLmxlbmd0aC0xXS5pc0Nv
bXBhdGlibGVXaXRoKHBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0sIHNjb3BlKSkgewor
CQkJCXZhcmlhYmxlQXJpdHkgPSBmYWxzZTsKIAkJCX0KIAkJfQotCQlpbnZvY2F0aW9uLmlubmVy
VXBkYXRlRG9uZSgpOwotCX0KLQotCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJl
c3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBNZXRob2RCaW5kaW5nIG1ldGhv
ZEJpbmRpbmcsIFNjb3BlIHNjb3BlKSB7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9
IG51bGw7Ci0JCUV4cHJlc3Npb25bXSBpbm5lckFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1l
bnRzKCk7Ci0JCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlhcmd1bWVudFR5cGVz
ID0gbmV3IFR5cGVCaW5kaW5nW2lubmVyQXJndW1lbnRzLmxlbmd0aF07Ci0JCQlmb3IgKGludCBp
ID0gMDsgaSA8IGlubmVyQXJndW1lbnRzLmxlbmd0aDsgaSsrKQotCQkJCWFyZ3VtZW50VHlwZXNb
aV0gPSBpbm5lckFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCWZvciAoaW50IGkgPSAwLCBs
ZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVu
Z3RoOyBpKyspIHsKKwkJCUV4cHJlc3Npb24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07CisJCQlU
eXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRl
cihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsKKwkJCWlmIChwYXJhbWV0ZXJUeXBlID09
IG51bGwpCisJCQkJY29udGludWU7IC8vIG5vdCBtdWNoIHdlIGNhbiBkbyB3aXRob3V0IGEgdGFy
Z2V0IHR5cGUsIGFzc3VtZSBpdCBvbmx5IGhhcHBlbnMgYWZ0ZXIgc29tZSByZXNvbHZlIGVycm9y
CisJCQlpZiAoYXJndW1lbnRUeXBlc1tpXS5pc1BvbHlUeXBlKCkpIHsKKwkJCQlhcmd1bWVudC5z
ZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJVHlwZUJpbmRpbmcgdXBkYXRlZEFy
Z3VtZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsgCisJCQkJaWYgKGFyZ3Vt
ZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkvLyBMRS5yZXNvbHZlVHlw
ZSBtYXkgcmV0dXJuIGEgdmFsaWQgYmluZGluZyBiZWNhdXNlIHJlc29sdmUgZG9lcyBub3QgZGV0
ZWN0IHN0cnVjdHVyYWwgZXJyb3JzIGF0IHRoaXMgcG9pbnQuCisJCQkJCUxhbWJkYUV4cHJlc3Np
b24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50OworCQkJCQlpZiAoIWxhbWJk
YS5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlclR5cGUsIHNjb3BlKSB8fCBsYW1iZGEuaGFzRXJy
b3JzKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQl9CisJCQkJaWYgKHVwZGF0ZWRBcmd1bWVudFR5
cGUgIT0gbnVsbCAmJiB1cGRhdGVkQXJndW1lbnRUeXBlLmtpbmQoKSAhPSBCaW5kaW5nLlBPTFlf
VFlQRSkKKwkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5cGU7CisJCQl9
CiAJCX0KLQkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGludm9jYXRpb24sIG1ldGhv
ZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAl9CiAKIAlwdWJsaWMgc3RhdGljIHZv
aWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90YXRpb25bXSBzb3Vy
Y2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJl
c3Npb24uamF2YQppbmRleCAwMGE0NzEyLi5mMmRhNTEwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhw
cmVzc2lvbi5qYXZhCkBAIC03NywzMCArNzcsMTAgQEAKIAogCSAvLyBob2xkIG9uIHRvIHRoaXMg
Y29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52
b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgogCXByaXZhdGUg
U2ltcGxlTG9va3VwVGFibGUvKjxQTUIsSUMxOD4qLyBpbmZlcmVuY2VDb250ZXh0czsKLQlwcm90
ZWN0ZWQgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXI7CisJcHJpdmF0
ZSBib29sZWFuIGFyZ3NDb250YWluQ2FzdDsKIAlwdWJsaWMgVHlwZUJpbmRpbmdbXSBhcmd1bWVu
dFR5cGVzID0gQmluZGluZy5OT19QQVJBTUVURVJTOwotCXB1YmxpYyBib29sZWFuIGFyZ3VtZW50
c0hhdmVFcnJvcnM7Ci0KLQkvKiogUmVjb3JkIHRvIGtlZXAgc3RhdGUgYmV0d2VlbiBkaWZmZXJl
bnQgcGFydHMgb2YgcmVzb2x1dGlvbi4gKi8KLQlSZXNvbHV0aW9uU3RhdGUgc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlOwotCWNsYXNzIFJlc29sdXRpb25TdGF0ZSB7Ci0JCUJsb2NrU2NvcGUgc2Nv
cGU7Ci0JCWJvb2xlYW4gaXNEaWFtb25kOwotCQlib29sZWFuIGRpYW1vbmROZWVkc0RlZmVycmlu
ZzsKLQkJYm9vbGVhbiBhcmdzQ29udGFpbkNhc3Q7Ci0JCWJvb2xlYW4gY2Fubm90SW5mZXJEaWFt
b25kOyAvLyByZXF1ZXN0IHRoZSBhbiBlcnJvciBiZSByZXBvcnRlZCBpbiBkdWUgdGltZQotCQli
b29sZWFuIGhhc1JlcG9ydGVkRXJyb3I7Ci0KLQkJUmVzb2x1dGlvblN0YXRlKEJsb2NrU2NvcGUg
c2NvcGUsIGJvb2xlYW4gaXNEaWFtb25kLCBib29sZWFuIGRpYW1vbk5lZWRzRGVmZXJyaW5nLAot
CQkJCWJvb2xlYW4gYXJnc0NvbnRhaW5DYXN0LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMp
Ci0JCXsKLQkJCXRoaXMuc2NvcGUgPSBzY29wZTsKLQkJCXRoaXMuaXNEaWFtb25kID0gaXNEaWFt
b25kOwotCQkJdGhpcy5kaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBkaWFtb25OZWVkc0RlZmVycmlu
ZzsKLQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gYXJnc0NvbnRhaW5DYXN0OwotCQl9Ci0JfQot
CisJcHVibGljIGJvb2xlYW4gYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOworCQogcHVibGlj
IEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4
dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAkvLyBjaGVjayBjYXB0dXJlZCB2
YXJpYWJsZXMgYXJlIGluaXRpYWxpemVkIGluIGN1cnJlbnQgY29udGV4dCAoMjYxMzQpCiAJY2hl
Y2tDYXB0dXJlZExvY2FsSW5pdGlhbGl6YXRpb25JZk5lY2Vzc2FyeSgoUmVmZXJlbmNlQmluZGlu
Zyl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuZXJhc3VyZSgpLCBjdXJyZW50U2NvcGUsIGZs
b3dJbmZvKTsKQEAgLTM0MSw3ICszMjEsNiBAQAogCS8vIFByb3BhZ2F0ZSB0aGUgdHlwZSBjaGVj
a2luZyB0byB0aGUgYXJndW1lbnRzLCBhbmQgY2hlY2sgaWYgdGhlIGNvbnN0cnVjdG9yIGlzIGRl
ZmluZWQuCiAJZmluYWwgYm9vbGVhbiBpc0RpYW1vbmQgPSB0aGlzLnR5cGUgIT0gbnVsbCAmJiAo
dGhpcy50eXBlLmJpdHMgJiBBU1ROb2RlLklzRGlhbW9uZCkgIT0gMDsKIAlmaW5hbCBDb21waWxl
ck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7Ci0JYm9v
bGVhbiBkaWFtb25kTmVlZHNEZWZlcnJpbmcgPSBmYWxzZTsKIAlsb25nIHNvdXJjZUxldmVsID0g
Y29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsOwogCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0
YW50Lk5vdEFDb25zdGFudCkgewogCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0
YW50OwpAQCAtMzUwLDE3OCArMzI5LDE1NSBAQAogCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBzY29w
ZS5lbmNsb3NpbmdSZWNlaXZlclR5cGUoKTsKIAkJfSBlbHNlIHsKIAkJCXRoaXMucmVzb2x2ZWRU
eXBlID0gdGhpcy50eXBlLnJlc29sdmVUeXBlKHNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyov
KTsKLQkJCWlmIChpc0RpYW1vbmQgJiYgdGhpcy50eXBlRXhwZWN0ZWQgPT0gbnVsbCAmJiB0aGlz
LmV4cHJlc3Npb25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCAmJiBzb3VyY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCQkJaWYgKHRoaXMucmVzb2x2ZWRUeXBl
ICE9IG51bGwgJiYgdGhpcy5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCQkJZGlh
bW9uZE5lZWRzRGVmZXJyaW5nID0gdHJ1ZTsKLQkJCX0KIAkJfQotCX0gZWxzZSB7Ci0JCXRoaXMu
cmVzb2x2ZWRUeXBlID0gdGhpcy50eXBlLnJlc29sdmVkVHlwZTsKLQl9Ci0KLQlpZiAodGhpcy50
eXBlICE9IG51bGwpIHsKLQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90YXRpb24oc2NvcGUsIHRoaXMu
cmVzb2x2ZWRUeXBlKTsKLQkJY2hlY2tQYXJhbWV0ZXJpemVkQWxsb2NhdGlvbjogewotCQkJaWYg
KHRoaXMudHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNl
KSB7IC8vIGRpc2FsbG93IG5ldyBYPFN0cmluZz4uWTxJbnRlZ2VyPigpCi0JCQkJUmVmZXJlbmNl
QmluZGluZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKXRoaXMucmVzb2x2ZWRUeXBl
OwotCQkJCWlmIChjdXJyZW50VHlwZSA9PSBudWxsKSByZXR1cm4gY3VycmVudFR5cGU7Ci0JCQkJ
ZG8gewotCQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dlcmluZyB0cnVlIGZvciB0b3BsZXZlbCB0
eXBlcwotCQkJCQlpZiAoKGN1cnJlbnRUeXBlLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50
cy5BY2NTdGF0aWMpICE9IDApIGJyZWFrIGNoZWNrUGFyYW1ldGVyaXplZEFsbG9jYXRpb247Ci0J
CQkJCWlmIChjdXJyZW50VHlwZS5pc1Jhd1R5cGUoKSkgYnJlYWsgY2hlY2tQYXJhbWV0ZXJpemVk
QWxsb2NhdGlvbjsKLQkJCQl9IHdoaWxlICgoY3VycmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNs
b3NpbmdUeXBlKCkpIT0gbnVsbCk7Ci0JCQkJUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZl
cmVuY2UgcVJlZiA9IChQYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZSkgdGhpcy50
eXBlOwotCQkJCWZvciAoaW50IGkgPSBxUmVmLnR5cGVBcmd1bWVudHMubGVuZ3RoIC0gMjsgaSA+
PSAwOyBpLS0pIHsKLQkJCQkJaWYgKHFSZWYudHlwZUFyZ3VtZW50c1tpXSAhPSBudWxsKSB7Ci0J
CQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUXVhbGlmaWVkUGFyYW1ldGVyaXpl
ZFR5cGVBbGxvY2F0aW9uKHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwotCQkJCQkJYnJl
YWs7CisJCWlmICh0aGlzLnR5cGUgIT0gbnVsbCkgeworCQkJY2hlY2tJbGxlZ2FsTnVsbEFubm90
YXRpb24oc2NvcGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCWNoZWNrUGFyYW1ldGVyaXplZEFs
bG9jYXRpb246IHsKKwkJCQlpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFF1
YWxpZmllZFR5cGVSZWZlcmVuY2UpIHsgLy8gZGlzYWxsb3cgbmV3IFg8U3RyaW5nPi5ZPEludGVn
ZXI+KCkKKwkJCQkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IChSZWZlcmVuY2VCaW5k
aW5nKXRoaXMucmVzb2x2ZWRUeXBlOworCQkJCQlpZiAoY3VycmVudFR5cGUgPT0gbnVsbCkgcmV0
dXJuIGN1cnJlbnRUeXBlOworCQkJCQlkbyB7CisJCQkJCQkvLyBpc1N0YXRpYygpIGlzIGFuc3dl
cmluZyB0cnVlIGZvciB0b3BsZXZlbCB0eXBlcworCQkJCQkJaWYgKChjdXJyZW50VHlwZS5tb2Rp
ZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljKSAhPSAwKSBicmVhayBjaGVja1Bh
cmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQkJaWYgKGN1cnJlbnRUeXBlLmlzUmF3VHlwZSgp
KSBicmVhayBjaGVja1BhcmFtZXRlcml6ZWRBbGxvY2F0aW9uOworCQkJCQl9IHdoaWxlICgoY3Vy
cmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdUeXBlKCkpIT0gbnVsbCk7CisJCQkJCVBh
cmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlIHFSZWYgPSAoUGFyYW1ldGVyaXplZFF1
YWxpZmllZFR5cGVSZWZlcmVuY2UpIHRoaXMudHlwZTsKKwkJCQkJZm9yIChpbnQgaSA9IHFSZWYu
dHlwZUFyZ3VtZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSkgeworCQkJCQkJaWYgKHFSZWYu
dHlwZUFyZ3VtZW50c1tpXSAhPSBudWxsKSB7CisJCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuaWxsZWdhbFF1YWxpZmllZFBhcmFtZXRlcml6ZWRUeXBlQWxsb2NhdGlvbih0aGlzLnR5cGUs
IHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJCQkJCQlicmVhazsKKwkJCQkJCX0KIAkJCQkJfQogCQkJ
CX0KIAkJCX0KIAkJfQotCX0KLQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3MgYXJl
IHJlc29sdmVkCisJCS8vIHdpbGwgY2hlY2sgZm9yIG51bGwgYWZ0ZXIgYXJncyBhcmUgcmVzb2x2
ZWQKIAotCS8vIHJlc29sdmUgdHlwZSBhcmd1bWVudHMgKGZvciBnZW5lcmljIGNvbnN0cnVjdG9y
IGNhbGwpCi0JaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCWludCBsZW5ndGgg
PSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMg
PSBzb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7Ci0JCXRoaXMuZ2VuZXJp
Y1R5cGVBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChpbnQgaSA9
IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZVJlZmVyZW5jZSB0eXBlUmVmZXJlbmNlID0g
dGhpcy50eXBlQXJndW1lbnRzW2ldOwotCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRz
W2ldID0gdHlwZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3Vu
ZHMqLykpID09IG51bGwpIHsKLQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOwot
CQkJfQotCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJlbmNlIGlu
c3RhbmNlb2YgV2lsZGNhcmQpIHsKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2Fs
VXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOwotCQkJfQotCQl9Ci0JCWlmIChpc0RpYW1v
bmQpIHsKLQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmRpYW1vbmROb3RXaXRoRXhwbGljaXRU
eXBlQXJndW1lbnRzKHRoaXMudHlwZUFyZ3VtZW50cyk7Ci0JCQlyZXR1cm4gbnVsbDsKLQkJfQot
CQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzKSB7Ci0JCQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCkgeyAvLyBzdGlsbCBhdHRlbXB0IHRvIHJlc29sdmUgYXJndW1lbnRzCi0JCQkJZm9y
IChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7
Ci0JCQkJCXRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJLy8gcmVzb2x2
ZSB0eXBlIGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkKKwkJaWYgKHRo
aXMudHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQlpbnQgbGVuZ3RoID0gdGhpcy50eXBlQXJn
dW1lbnRzLmxlbmd0aDsKKwkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHNvdXJjZUxldmVs
IDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKKwkJCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVu
Z3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2UgPSB0aGlzLnR5cGVB
cmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlw
ZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09
IG51bGwpIHsKKwkJCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKKwkJCQl9CisJ
CQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNl
b2YgV2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdl
T2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKIAkJCQl9CiAJCQl9Ci0JCQlyZXR1cm4gbnVsbDsK
KwkJCWlmIChpc0RpYW1vbmQpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kaWFtb25k
Tm90V2l0aEV4cGxpY2l0VHlwZUFyZ3VtZW50cyh0aGlzLnR5cGVBcmd1bWVudHMpOworCQkJCXJl
dHVybiBudWxsOworCQkJfQorCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgeworCQkJ
CWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIHN0aWxsIGF0dGVtcHQgdG8gcmVzb2x2
ZSBhcmd1bWVudHMKKwkJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYXJndW1lbnRzLmxl
bmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlw
ZShzY29wZSk7CisJCQkJCX0KKwkJCQl9CisJCQkJcmV0dXJuIG51bGw7CisJCQl9CiAJCX0KLQl9
CiAKLQkvLyBidWZmZXJpbmcgdGhlIGFyZ3VtZW50cycgdHlwZXMKLQlib29sZWFuIGFyZ3NDb250
YWluQ2FzdCA9IGZhbHNlOwotCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCXRoaXMu
YXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOwotCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVu
dHMubGVuZ3RoOwotCQl0aGlzLmFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3Ro
XTsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJRXhwcmVzc2lvbiBh
cmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2Yg
Q2FzdEV4cHJlc3Npb24pIHsKLQkJCQlhcmd1bWVudC5iaXRzIHw9IERpc2FibGVVbm5lY2Vzc2Fy
eUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRlciBvbgotCQkJCWFyZ3NDb250YWluQ2FzdCA9
IHRydWU7CisJCS8vIGJ1ZmZlcmluZyB0aGUgYXJndW1lbnRzJyB0eXBlcworCQlpZiAodGhpcy5h
cmd1bWVudHMgIT0gbnVsbCkgeworCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gZmFsc2U7
CisJCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1bWVu
dFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8
IGxlbmd0aDsgaSsrKSB7CisJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRz
W2ldOworCQkJCWlmIChhcmd1bWVudCBpbnN0YW5jZW9mIENhc3RFeHByZXNzaW9uKSB7CisJCQkJ
CWFyZ3VtZW50LmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNo
ZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9CisJ
CQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKKwkJ
CQlpZiAodGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlICE9IG51bGwpIAorCQkJCQlzY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFyZ3VtZW50IHdhcyB1
bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAorCQkJCWlm
ICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpKSA9
PSBudWxsKSB7CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7CisJCQkJfQog
CQkJfQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhU
KTsKLQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgCi0JCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3
YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKLQkJ
CWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUp
KSA9PSBudWxsKSB7Ci0JCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKLQkJCX0K
LQkJCWlmIChzb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIChhcmd1
bWVudC5pc1BvbHlFeHByZXNzaW9uKCkgfHwgKChhcmd1bWVudCBpbnN0YW5jZW9mIEludm9jYXRp
b24pICYmICgoSW52b2NhdGlvbikgYXJndW1lbnQpLnVzZXNJbmZlcmVuY2UoKSkpKSB7Ci0JCQkJ
aWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJdGhpcy5pbm5lcklu
ZmVyZW5jZUhlbHBlciA9IG5ldyBJbm5lckluZmVyZW5jZUhlbHBlcigpOwotCQkJfQotCQl9Ci0J
CWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJCS8qIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDUzNTksIGlmIGFyZ3VtZW50cyBoYXZlIGVy
cm9ycywgY29tcGxldGVseSBiYWlsIG91dCBpbiB0aGUgPD4gY2FzZS4KKwkJCWlmICh0aGlzLmFy
Z3VtZW50c0hhdmVFcnJvcnMpIHsKKwkJCQkvKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1MzU5LCBpZiBhcmd1bWVudHMgaGF2ZSBlcnJvcnMsIGNvbXBs
ZXRlbHkgYmFpbCBvdXQgaW4gdGhlIDw+IGNhc2UuCiAJCQkgICBObyBtZWFuaW5nZnVsIHR5cGUg
cmVzb2x1dGlvbiBpcyBwb3NzaWJsZSBzaW5jZSBpbmZlcmVuY2Ugb2YgdGhlIGVsaWRlZCB0eXBl
cyBpcyBmdWxseSB0aWVkIHRvIGFyZ3VtZW50IHR5cGVzLiBEbwogCQkJICAgbm90IHJldHVybiB0
aGUgcGFydGlhbGx5IHJlc29sdmVkIHR5cGUuCi0JCQkgKi8KLQkJCWlmIChpc0RpYW1vbmQpIHsK
LQkJCQlyZXR1cm4gbnVsbDsgLy8gbm90IHRoZSBwYXJ0aWFsbHkgY29va2VkIHRoaXMucmVzb2x2
ZWRUeXBlCi0JCQl9Ci0JCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVu
Y2VCaW5kaW5nKSB7Ci0JCQkJLy8gcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hv
IG5lZWQgaGludCBhYm91dCBwb3NzaWJsZSBjb25zdHJ1Y3RvciBtYXRjaAotCQkJCVR5cGVCaW5k
aW5nW10gcHNldWRvQXJncyA9IG5ldyBUeXBlQmluZGluZ1tsZW5ndGhdOwotCQkJCWZvciAoaW50
IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewotCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1
bWVudFR5cGVzW2ldID09IG51bGwgPyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5
cGVzW2ldOyAvLyByZXBsYWNlIGFyZ3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKKwkJCQkg
Ki8KKwkJCQlpZiAoaXNEaWFtb25kKSB7CisJCQkJCXJldHVybiBudWxsOyAvLyBub3QgdGhlIHBh
cnRpYWxseSBjb29rZWQgdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQl9Ci0JCQkJdGhpcy5iaW5kaW5n
ID0gc2NvcGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUs
IFR5cGVDb25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0
aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsK
LQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5n
KXRoaXMuYmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3Qg
bWF0Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxl
IG1ldGhvZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlm
IChjbG9zZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0
dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0
IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZp
cm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5v
cmlnaW5hbCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJp
bmRpbmcgPSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9y
aWdpbmFsID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNo
T3JpZ2luYWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJ
bk1ldGhvZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMg
d2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJl
Y3QgcmVjdXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0g
RXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQlpZiAodGhpcy5yZXNv
bHZlZFR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCS8vIHJlY29yZCBh
IGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQgcG9zc2libGUgY29u
c3RydWN0b3IgbWF0Y2gKKwkJCQkJVHlwZUJpbmRpbmdbXSBwc2V1ZG9BcmdzID0gbmV3IFR5cGVC
aW5kaW5nW2xlbmd0aF07CisJCQkJCWZvciAoaW50IGkgPSBsZW5ndGg7IC0taSA+PSAwOykgewor
CQkJCQkJcHNldWRvQXJnc1tpXSA9IHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9PSBudWxsID8gVHlw
ZUJpbmRpbmcuTlVMTCA6IHRoaXMuYXJndW1lbnRUeXBlc1tpXTsgLy8gcmVwbGFjZSBhcmdzIHdp
dGggZXJyb3JzIHdpdGggbnVsbCB0eXBlCisJCQkJCX0KKwkJCQkJdGhpcy5iaW5kaW5nID0gc2Nv
cGUuZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUsIFR5cGVD
b25zdGFudHMuSU5JVCwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOworCQkJCQlpZiAodGhpcy5i
aW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJ
CQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhp
cy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0
Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1l
dGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJaWYg
KGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0
dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0
IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52
aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0aGlz
LmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0
Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9zZXN0
TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVm
aW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25vcmUg
Y2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5n
LiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZp
ZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJfQog
CQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKIAkJ
CX0KKwkJfQorCQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAhdGhpcy5yZXNvbHZl
ZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKworCQkvLyBu
dWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0gY29uc3RhbnQgaW5pdHMK
KwkJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmICF0aGlzLnJlc29sdmVkVHlwZS5jYW5CZUluc3Rh
bnRpYXRlZCgpKSB7CisJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbnN0YW50aWF0
ZSh0aGlzLnR5cGUsIHRoaXMucmVzb2x2ZWRUeXBlKTsKIAkJCXJldHVybiB0aGlzLnJlc29sdmVk
VHlwZTsKIAkJfQotCX0KLQlpZiAodGhpcy5yZXNvbHZlZFR5cGUgPT0gbnVsbCB8fCAhdGhpcy5y
ZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlyZXR1cm4gbnVsbDsKLQl9Ci0KLQkv
LyBudWxsIHR5cGUgZGVub3RlcyBmYWtlIGFsbG9jYXRpb24gZm9yIGVudW0gY29uc3RhbnQgaW5p
dHMKLQlpZiAodGhpcy50eXBlICE9IG51bGwgJiYgIXRoaXMucmVzb2x2ZWRUeXBlLmNhbkJlSW5z
dGFudGlhdGVkKCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW5zdGFudGlh
dGUodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7Ci0JCXJldHVybiB0aGlzLnJlc29sdmVk
VHlwZTsKLQl9Ci0JUmVzb2x1dGlvblN0YXRlIHN0YXRlID0gbmV3IFJlc29sdXRpb25TdGF0ZShz
Y29wZSwgaXNEaWFtb25kLCBkaWFtb25kTmVlZHNEZWZlcnJpbmcsIGFyZ3NDb250YWluQ2FzdCwg
dGhpcy5hcmd1bWVudFR5cGVzKTsKLQlpZiAoZGlhbW9uZE5lZWRzRGVmZXJyaW5nKSB7Ci0JCXRo
aXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlID0gc3RhdGU7IC8vIHJlc29sdmluZyB0byBiZSBj
b250aW51ZWQgbGF0ZXIgKHZpYSBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpKS4KLQkJ
cmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7Ci0JfQotCi0JaWYgKCFyZXNvbHZlUGFy
dDIoc3RhdGUpKQotCQlyZXR1cm4gbnVsbDsKLQlyZXR1cm4gcmVzb2x2ZVBhcnQzKHN0YXRlKTsK
LX0KLQotLyoqIFNlY29uZCBwYXJ0IG9mIHJlc29sdmluZyB0aGF0IG1heSBoYXBwZW4gbXVsdGlw
bGUgdGltZXMgZHVyaW5nIG92ZXJsb2FkIHJlc29sdXRpb24uICovCi1ib29sZWFuIHJlc29sdmVQ
YXJ0MihSZXNvbHV0aW9uU3RhdGUgc3RhdGUpIHsKLQkvLyBUT0RPOiBhbGwgaW5mb3JtYXRpb24g
cGVyc2lzdGVkIGR1cmluZyB0aGlzIG1ldGhvZCBtYXkgbmVlZCB0byBiZSBzdG9yZWQgcGVyIHRh
cmdldFR5cGU/Ci0JaWYgKHN0YXRlLmlzRGlhbW9uZCkgewotCQlSZWZlcmVuY2VCaW5kaW5nIGdl
bmVyaWNUeXBlID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBl
KS5nZW5lcmljVHlwZSgpOwotCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJF
bGlkZWRUeXBlcygoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSwg
dGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHN0
YXRlLnNjb3BlKTsKLQkJaWYgKGluZmVycmVkVHlwZXMgPT0gbnVsbCkgewotCQkJaWYgKCFzdGF0
ZS5kaWFtb25kTmVlZHNEZWZlcnJpbmcpIHsKLQkJCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQkJCXN0YXRlLmhhc1JlcG9ydGVk
RXJyb3IgPSB0cnVlOwotCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKLQkJCX0gZWxzZSB7
Ci0JCQkJc3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gdHJ1ZTsgLy8gZGVmZXIgcmVwb3J0aW5n
CisJCWlmIChpc0RpYW1vbmQpIHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAo
KFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBl
KCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29w
ZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5l
cmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJ
CQlpZiAodGhpcy50eXBlRXhwZWN0ZWQgPT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiB0aGlzLmV4cHJlc3Npb25Db250
ZXh0LmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKKwkJCQl0aGlzLmJpbmRpbmcgPSBpbmZlckNvbnN0
cnVjdG9yT2ZFbGlkZWRQYXJhbWV0ZXJpemVkVHlwZShwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5y
ZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsK
KwkJCQlpZiAodGhpcy5iaW5kaW5nID09IG51bGwpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKKwkJCQkJcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlID0gbnVsbDsKKwkJCQl9CisJCQkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmco
dGhpcyk7CiAJCQl9Ci0JCQlyZXR1cm4gZmFsc2U7CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJl
ZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5yZXNvbHZl
ZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlm
IChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5j
YW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlw
ZSA9IG51bGw7CisJCQl9CisJCQlSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25UeXBlID0gc2Nv
cGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgaW5m
ZXJyZWRUeXBlcywgKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBl
KS5lbmNsb3NpbmdUeXBlKCkpOworCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSB0aGlzLnR5cGUucmVz
b2x2ZWRUeXBlID0gYWxsb2NhdGlvblR5cGU7IAogCQl9Ci0JCXRoaXMucmVzb2x2ZWRUeXBlID0g
dGhpcy50eXBlLnJlc29sdmVkVHlwZSA9IHN0YXRlLnNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRl
UGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGluZmVycmVkVHlwZXMsICgoUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZSkuZW5jbG9zaW5nVHlwZSgpKTsKLQkJ
c3RhdGUuY2Fubm90SW5mZXJEaWFtb25kID0gZmFsc2U7Ci0gCX0KLQlSZWZlcmVuY2VCaW5kaW5n
IHJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlwZTsKLQl0
aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHN0YXRlLnNjb3BlLCB0aGlzLCBy
ZWNlaXZlclR5cGUsIHRoaXMuYXJndW1lbnRUeXBlcyk7Ci0JcmV0dXJuIHRydWU7Ci19Ci0KLS8q
KiBGaW5hbCBwYXJ0IG9mIHJlc29sdmluZyAob25jZSk6IGNoZWNrIGFuZCByZXBvcnQgdmFyaW91
cyBlcnJvciBjb25kaXRpb25zLiAqLwotVHlwZUJpbmRpbmcgcmVzb2x2ZVBhcnQzKFJlc29sdXRp
b25TdGF0ZSBzdGF0ZSkgewotCWlmICh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSAhPSBu
dWxsICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpCi0J
CXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKLQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0
ZSA9IG51bGw7Ci0JaWYgKHN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkgewotCQlzdGF0ZS5zY29w
ZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOwotCQlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOworCX0gZWxzZSB7CisJCWlmIChpc0RpYW1vbmQp
IHsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUgPSAoKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNUeXBlKCk7CisJCQlQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNy
ZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBnZW5lcmljVHlwZS50eXBlVmFyaWFi
bGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQlUeXBlQmluZGluZyBbXSBp
bmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJhbWV0ZXJpemVkVHlwZSwgdGhpcy5y
ZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsK
KwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpIHsKKwkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jYW5ub3RJbmZlckVsaWRlZFR5cGVzKHRoaXMpOworCQkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZSA9IG51bGw7CisJCQl9CisJCQl0aGlzLnJlc29sdmVkVHlwZSA9IHRoaXMudHlwZS5y
ZXNvbHZlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBl
KGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykg
dGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7CisJCX0KIAl9CisJCiAJUmVmZXJl
bmNlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLnJlc29s
dmVkVHlwZTsKKwl0aGlzLmJpbmRpbmcgPSBmaW5kQ29uc3RydWN0b3JCaW5kaW5nKHNjb3BlLCB0
aGlzLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKKwkJCiAJaWYgKCF0aGlz
LmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmlu
Z0NsYXNzID09IG51bGwpIHsKIAkJCXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9IGFsbG9j
YXRpb25UeXBlOwpAQCAtNTI5LDMwICs0ODUsMjkgQEAKIAkJaWYgKHRoaXMudHlwZSAhPSBudWxs
ICYmICF0aGlzLnR5cGUucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCXJldHVy
biBudWxsOwogCQl9Ci0JCXN0YXRlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25z
dHJ1Y3Rvcih0aGlzLCB0aGlzLmJpbmRpbmcpOworCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5p
bnZhbGlkQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKIAkJcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlOwogCX0KIAlpZiAoKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5IYXNN
aXNzaW5nVHlwZSkgIT0gMCkgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNz
aW5nVHlwZUluQ29uc3RydWN0b3IodGhpcywgdGhpcy5iaW5kaW5nKTsKKwkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJbkNvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGluZyk7
CiAJfQotCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhpcy5iaW5kaW5nLCBzdGF0ZS5zY29w
ZSwgdHJ1ZSkpIHsKLQkJc3RhdGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVwcmVjYXRlZE1l
dGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOworCWlmIChpc01ldGhvZFVzZURlcHJlY2F0ZWQodGhp
cy5iaW5kaW5nLCBzY29wZSwgdHJ1ZSkpIHsKKwkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZGVw
cmVjYXRlZE1ldGhvZCh0aGlzLmJpbmRpbmcsIHRoaXMpOwogCX0KLQlpZiAoY2hlY2tJbnZvY2F0
aW9uQXJndW1lbnRzKHN0YXRlLnNjb3BlLCBudWxsLCBhbGxvY2F0aW9uVHlwZSwgdGhpcy5iaW5k
aW5nLCB0aGlzLmFyZ3VtZW50cywgdGhpcy5hcmd1bWVudFR5cGVzLCBzdGF0ZS5hcmdzQ29udGFp
bkNhc3QsIHRoaXMpKSB7CisJaWYgKGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cyhzY29wZSwgbnVs
bCwgYWxsb2NhdGlvblR5cGUsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudHMsIHRoaXMuYXJn
dW1lbnRUeXBlcywgdGhpcy5hcmdzQ29udGFpbkNhc3QsIHRoaXMpKSB7CiAJCXRoaXMuYml0cyB8
PSBBU1ROb2RlLlVuY2hlY2tlZDsKIAl9CiAJaWYgKHRoaXMudHlwZUFyZ3VtZW50cyAhPSBudWxs
ICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgPT0gQmluZGluZy5OT19U
WVBFX1ZBUklBQkxFUykgewotCQlzdGF0ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS51bm5lY2Vz
c2FyeVR5cGVBcmd1bWVudHNGb3JNZXRob2RJbnZvY2F0aW9uKHRoaXMuYmluZGluZywgdGhpcy5n
ZW5lcmljVHlwZUFyZ3VtZW50cywgdGhpcy50eXBlQXJndW1lbnRzKTsKKwkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudW5uZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0
aGlzLmJpbmRpbmcsIHRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50
cyk7CiAJfQotCWlmICghc3RhdGUuaXNEaWFtb25kICYmIHRoaXMucmVzb2x2ZWRUeXBlLmlzUGFy
YW1ldGVyaXplZFR5cGVXaXRoQWN0dWFsQXJndW1lbnRzKCkpIHsKLSAJCWNoZWNrVHlwZUFyZ3Vt
ZW50UmVkdW5kYW5jeSgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSB0aGlzLnJlc29sdmVkVHlw
ZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHN0YXRlLnNjb3BlKTsKKwlpZiAoIWlzRGlhbW9uZCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1Bh
cmFtZXRlcml6ZWRUeXBlV2l0aEFjdHVhbEFyZ3VtZW50cygpKSB7CisgCQljaGVja1R5cGVBcmd1
bWVudFJlZHVuZGFuY3koKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5
cGUsIHRoaXMucmVzb2x2ZWRUeXBlLmVuY2xvc2luZ1R5cGUoKSwgdGhpcy5hcmd1bWVudFR5cGVz
LCBzY29wZSk7CiAgCX0KLQlDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc3RhdGUu
c2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgJiYgKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFn
Qml0cy5Jc051bGxuZXNzS25vd24pID09IDApIHsKLQkJbmV3IEltcGxpY2l0TnVsbEFubm90YXRp
b25WZXJpZmllcihzdGF0ZS5zY29wZS5lbnZpcm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMuaW5o
ZXJpdE51bGxBbm5vdGF0aW9ucykKLQkJCQkuY2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9ucyh0
aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhvZCovLCBmYWxzZSwgc3RhdGUuc2NvcGUpOworCQlu
ZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHNjb3BlLmVudmlyb25tZW50KCksIGNv
bXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQorCQkJCS5jaGVja0ltcGxpY2l0
TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8sIGZhbHNlLCBz
Y29wZSk7CiAJfQotCXJlY29yZEV4Y2VwdGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc3RhdGUuc2Nv
cGUsIHRoaXMuYmluZGluZy50aHJvd25FeGNlcHRpb25zKTsKKwlyZWNvcmRFeGNlcHRpb25zRm9y
RW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9ucyk7CiAJ
cmV0dXJuIGFsbG9jYXRpb25UeXBlOwogfQogCkBAIC01NzEsNyArNTI2LDQzIEBACiAJfQogfQog
Ci1wdWJsaWMgVHlwZUJpbmRpbmdbXSBpbmZlckVsaWRlZFR5cGVzKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZyBhbGxvY2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwcywgZmluYWwgQmxvY2tTY29wZSBzY29wZSkgeworLy8g
Rm9yIGFsbG9jYXRpb24gZXhwcmVzc2lvbnMsIGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUg
YXMgdmFuaWxsYSBjb21wYXRpYmlsaXR5LCBzaW5jZSBqYXZhLmxhbmcncyB3cmFwcGVyIHR5cGVz
IGFyZSBub3QgZ2VuZXJpYy4KK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgo
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlyZXR1cm4gaXNQb2x5RXhw
cmVzc2lvbigpID8gZmFsc2UgOiBpc0NvbXBhdGlibGVXaXRoKHNjb3BlLmJveGluZyh0YXJnZXRU
eXBlKSwgc2NvcGUpOworfQorCitwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCAhdGhpcy5iaW5kaW5nLmlz
VmFsaWRCaW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8IHNjb3BlID09IG51bGwpCisJ
CXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBhbGxvY2F0aW9uVHlwZSA9IHRoaXMucmVzb2x2
ZWRUeXBlOworCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsKKwkJVHlwZUJpbmRpbmcgb3JpZ2lu
YWxFeHBlY3RlZFR5cGUgPSB0aGlzLnR5cGVFeHBlY3RlZDsKKwkJdHJ5IHsKKwkJCXRoaXMudHlw
ZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKKwkJCVJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUg
PSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmdlbmVyaWNU
eXBlKCk7CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5cGUgPSBz
Y29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBn
ZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCksIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7
CisJCQlUeXBlQmluZGluZyBbXSBpbmZlcnJlZFR5cGVzID0gaW5mZXJFbGlkZWRUeXBlcyhwYXJh
bWV0ZXJpemVkVHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUuZW5jbG9zaW5nVHlwZSgpLCB0aGlzLmFy
Z3VtZW50VHlwZXMsIHNjb3BlKTsKKwkJCWlmIChpbmZlcnJlZFR5cGVzID09IG51bGwpCisJCQkJ
cmV0dXJuIGZhbHNlOworCQkJYWxsb2NhdGlvblR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNy
ZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCBpbmZlcnJlZFR5cGVzLCAoKFBhcmFt
ZXRlcml6ZWRUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGUpLmVuY2xvc2luZ1R5cGUoKSk7
CisJCX0gZmluYWxseSB7CisJCQl0aGlzLnR5cGVFeHBlY3RlZCA9IG9yaWdpbmFsRXhwZWN0ZWRU
eXBlOworCQl9CisJfQorCXJldHVybiBhbGxvY2F0aW9uVHlwZSAhPSBudWxsICYmIGFsbG9jYXRp
b25UeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworfQorCitwdWJsaWMg
TWV0aG9kQmluZGluZyBpbmZlckNvbnN0cnVjdG9yT2ZFbGlkZWRQYXJhbWV0ZXJpemVkVHlwZShQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcg
ZW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cHMsIGZpbmFsIFNjb3BlIHNj
b3BlKSB7CisJLy8gR2l2ZW4gdGhlIGFsbG9jYXRpb24gdHlwZSBhbmQgdGhlIGFyZ3VtZW50cyB0
byB0aGUgY29uc3RydWN0b3IsIHNlZSBpZiB3ZSBjYW4gaW5mZXIgdGhlIGNvbnN0cnVjdG9yIG9m
IHRoZSBlbGlkZWQgcGFyYW1ldGVyaXplZCB0eXBlLgorCU1ldGhvZEJpbmRpbmcgZmFjdG9yeSA9
IHNjb3BlLmdldFN0YXRpY0ZhY3RvcnkoYWxsb2NhdGlvblR5cGUsIGVuY2xvc2luZ1R5cGUsIGFy
Z3VtZW50VHlwcywgdGhpcyk7CisJaWYgKGZhY3RvcnkgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgZmFjdG9yeS5pc1ZhbGlkQmluZGluZygpKSB7CisJCVN5
bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gKFN5bnRoZXRpY0ZhY3RvcnlN
ZXRob2RCaW5kaW5nKSBmYWN0b3J5Lm9yaWdpbmFsKCk7CisJCXJldHVybiBvcmlnaW5hbC5hcHBs
eVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKCgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZh
Y3RvcnkucmV0dXJuVHlwZSkuYXJndW1lbnRzKTsKKwl9CisJcmV0dXJuIG51bGw7Cit9CisKK3B1
YmxpYyBUeXBlQmluZGluZ1tdIGluZmVyRWxpZGVkVHlwZXMoUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBzLCBmaW5hbCBTY29wZSBzY29wZSkgewogCS8qIEdpdmVuIHRo
ZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBz
ZWUgaWYgd2UgY2FuIHN5bnRoZXNpemUgYSBnZW5lcmljIHN0YXRpYyBmYWN0b3J5CiAJICAgbWV0
aG9kIHRoYXQgd291bGQsIGdpdmVuIHRoZSBhcmd1bWVudCB0eXBlcyBhbmQgdGhlIGludm9jYXRp
b24gc2l0ZSwgbWFudWZhY3R1cmUgYSBwYXJhbWV0ZXJpemVkIG9iamVjdCBvZiB0eXBlIGFsbG9j
YXRpb25UeXBlLgogCSAgIElmIHdlIGFyZSBzdWNjZXNzZnVsIHRoZW4gYnkgZGVzaWduIGFuZCBj
b25zdHJ1Y3Rpb24sIHRoZSBwYXJhbWV0ZXJpemF0aW9uIG9mIHRoZSByZXR1cm4gdHlwZSBvZiB0
aGUgZmFjdG9yeSBtZXRob2QgaXMgaWRlbnRpY2FsCkBAIC01ODEsMTcgKzU3Miw2IEBACiAJaWYg
KGZhY3RvcnkgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYg
ZmFjdG9yeS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZyBnZW5lcmljRmFjdG9yeSA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIGZhY3Rvcnk7CiAJCXRoaXMuaW5mZXJyZWRSZXR1cm5UeXBlID0gZ2VuZXJpY0ZhY3Rvcnku
aW5mZXJyZWRSZXR1cm5UeXBlOwotCQkvLyB0aGlzIGlzIG91ciBsYXN0IGNoYW5jZSB0byBpbnNw
ZWN0IHRoZSByZXN1bHQgb2YgdGhlIGluZmVyZW5jZSB0aGF0IGlzIGNvbm5lY3RlZCB0byB0aGUg
dGhyb3ctYXdheSBmYWN0b3J5IGJpbmRpbmcKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4
ID0gZ2V0SW5mZXJlbmNlQ29udGV4dChnZW5lcmljRmFjdG9yeSk7Ci0JCWlmIChpbmZDdHgxOCAh
PSBudWxsICYmIGluZkN0eDE4LnN0ZXBDb21wbGV0ZWQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkJJ
TkRJTkdTX1VQREFURUQpIHsKLQkJCS8vIHJlZnJlc2ggYXJndW1lbnRUeXBlcyBmcm9tIHVwZGF0
ZWQgYmluZGluZ3MgaW4gYXJndW1lbnRzOgotCQkJLy8gKHRoaXMgc2hvdWxkbid0IGJlIHN0cmlj
dGx5IG5lY2Vzc2FyeSwgYXMgRnVuY3Rpb25FeHByZXNzaW9uLmlzQ29tcGF0aWJsZVdpdGgoKSBz
aG91bGQgZ2l2ZSB0aGUgc2FtZSByZXN1bHQsCi0JCQkvLyAgYnV0IGl0J3MgcHJvYmFibHkgYmUg
YSBnb29kIGlkZWEgdG8gYXZvaWQgdGhlIG5lY2Vzc2l0eSB0byBjYWxsIGlzQ29tcGF0aWJsZVdp
dGgoKSBpbiB0aGUgZmlyc3QgcGxhY2UpLiAKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1l
bnRUeXBzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJaWYgKGFyZ3VtZW50VHlwc1tpXSBpbnN0YW5jZW9m
IFBvbHlUeXBlQmluZGluZykKLQkJCQkJYXJndW1lbnRUeXBzW2ldID0gdGhpcy5hcmd1bWVudHNb
aV0ucmVzb2x2ZWRUeXBlOwotCQkJfQotCQl9CiAJCXJldHVybiAoKFBhcmFtZXRlcml6ZWRUeXBl
QmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50czsKIAl9CiAJcmV0dXJuIG51bGw7
CkBAIC02OTksMTAyICs2NzksMjMgQEAKIH0KIAogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvbjog
LS0KLXB1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
Ym9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuc3VzcGVuZGVk
UmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgdGFyZ2V0VHlwZSAhPSBudWxsKSB7Ci0JCXNldEV4
cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJaWYgKCFyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUpKSB7Ci0JCQlpZiAocmVwb3J0RXJyb3JzICYmICF0aGlzLnN1c3Bl
bmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yKSB7Ci0JCQkJaWYgKHRoaXMuc3Vz
cGVuZGVkUmVzb2x1dGlvblN0YXRlLmNhbm5vdEluZmVyRGlhbW9uZCkKLQkJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuY2Fubm90SW5mZXJFbGlkZWRUeXBlcyh0aGlzKTsKLQkJCQllbHNlCi0J
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VFcnJvcigiY29uc3Ry
dWN0b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAot
CQkJCXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVl
OwotCQkJfQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQl9Ci0JaWYgKHJlcG9ydEVycm9ycyAmJiB0
aGlzLmJpbmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsK
LQkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBudWxsKQotCQkJdGhpcy5iaW5k
aW5nLmRlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBl
OwotCQlpZiAodGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewotCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuaW52YWxpZENvbnN0cnVjdG9yKHRoaXMsIHRoaXMuYmluZGlu
Zyk7Ci0JCQl0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZS5oYXNSZXBvcnRlZEVycm9yID0g
dHJ1ZTsKLQkJfQotCX0KK3B1YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJpbmRpbmcg
dGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKIAlyZXR1cm4gdGhpcy5iaW5kaW5nOwotfQotcHVi
bGljIFR5cGVCaW5kaW5nIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0
YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlw
ZTsKLQlib29sZWFuIG5lZWRzVXBkYXRlID0gdGhpcy5iaW5kaW5nID09IG51bGwgfHwgCQkJCQkJ
CQkJCQkJCQkJCS8vIG5vdCB5ZXQgcmVzb2x2ZWQKLQkJCSh0aGlzLnJlc29sdmVkVHlwZSAhPSBu
dWxsICYmIHRhcmdldFR5cGUgIT0gbnVsbCAmJiAhdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRp
YmxlV2l0aCh0YXJnZXRUeXBlKSk7CS8vIHByZXZpb3VzIGF0dGVtcHQgd2FzIHdyb25nCi0JaWYg
KG5lZWRzVXBkYXRlICYmIHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYg
IXRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKLQkJLy8g
QXR0ZW1wdCB0byByZXNvbHZlIGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAotCQlyZXNvbHZlUGFydDIo
dGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUpOwotCX0KLQkvLyBjb25mZXIgTWVzc2FnZVNl
bmQuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKCwsKToKLQlpZiAodGhpcy5iaW5kaW5nIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCUluZmVyZW5j
ZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluZykgdGhpcy5iaW5kaW5nKTsKLQkJaWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29t
cGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4LlRZUEVfSU5GRVJSRUQpIHsKLQkJCXRoaXMudHlw
ZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKLQkJCU1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcg
PSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLCAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwotCQkJaWYgKHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRC
aW5kaW5nLCB0YXJnZXRUeXBlKSkgewotCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9u
QXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5kaW5nLCBzY29wZSk7Ci0JCQl9Ci0JCX0KLQl9Ci0J
aWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwpIHsKLQkJcmV0dXJuIHJl
c29sdmVQYXJ0Myh0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7Ci0JfQotCXJldHVybiB0
aGlzLnJlc29sdmVkVHlwZTsKIH0KIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewog
CXJldHVybiB0aGlzLmFyZ3VtZW50czsKIH0KIAotcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGlu
Z3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkg
ewotCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwot
CWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLm9yaWdp
bmFsKCkgPT0gdXBkYXRlZEJpbmRpbmcub3JpZ2luYWwoKSkgewotCQlJbmZlcmVuY2VDb250ZXh0
MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldCh0
aGlzLmJpbmRpbmcpOwotCQlpZiAoY3R4ICE9IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKLQkJCXRoaXMuaW5mZXJl
bmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5kaW5nLCBjdHgpOwotCQkJLy8gc29sdXRpb24gbWF5
IGhhdmUgY29tZSBmcm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChp
bm5lcikgaXMgZG9uZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQloYXNVcGRhdGUgfD0gY3R4
LnJlZ2lzdGVyU29sdXRpb24odGFyZ2V0VHlwZSwgdXBkYXRlZEJpbmRpbmcpOwotCQl9Ci0JfQot
CXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwotCXRoaXMucmVzb2x2ZWRUeXBlID0gdXBk
YXRlZEJpbmRpbmcuZGVjbGFyaW5nQ2xhc3M7Ci0JcmV0dXJuIGhhc1VwZGF0ZTsKLX0KIHB1Ymxp
YyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKIAlpZiAodGhp
cy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0g
bmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CiAJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0
aG9kLCBpbmZDdHgxOCk7Ci0JTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmlnaW5h
bCgpOwotCWlmIChvcmlnaW5hbCBpbnN0YW5jZW9mIFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5k
aW5nKSB7Ci0JCVN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nIHN5bnRoT3JpZ2luYWwgPSAo
U3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcpb3JpZ2luYWw7Ci0JCVBhcmFtZXRlcml6ZWRN
ZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRDdG9yID0gc3ludGhPcmlnaW5hbC5hcHBseVR5cGVB
cmd1bWVudHNPbkNvbnN0cnVjdG9yKG1ldGhvZC50eXBlQXJndW1lbnRzKTsKLQkJdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5wdXQocGFyYW1ldGVyaXplZEN0b3IsIGluZkN0eDE4KTsKLQl9Ci19Ci1w
dWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCXJldHVybiAodGhpcy5iaW5kaW5nIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSAKLQkJCSYmIGdldElu
ZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5i
aW5kaW5nKSAhPSBudWxsOwogfQogcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVu
Y2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCWlmICh0aGlz
LmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5m
ZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQot
cHVibGljIGJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpIHsKLQlyZXR1cm4gdGhpcy5pbm5lcklu
ZmVyZW5jZUhlbHBlciAhPSBudWxsOwotfQotcHVibGljIHZvaWQgaW5uZXJVcGRhdGVEb25lKCkg
ewotCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBudWxsOwotfQotcHVibGljIElubmVySW5m
ZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCkgewotCXJldHVybiB0aGlzLmlubmVy
SW5mZXJlbmNlSGVscGVyOwotfQotCiAvLy0tIGludGVyZmFjZSBJbnZvY2F0aW9uU2l0ZTogLS0K
IHB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIAlyZXR1
cm4gdGhpcy5leHByZXNzaW9uQ29udGV4dDsKQEAgLTgwMiw0ICs3MDMsNCBAQAogcHVibGljIElu
ZmVyZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKIAly
ZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29wZSwgdGhpcy5hcmd1bWVudHMsIHRoaXMp
OwogfQotfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhCmluZGV4IGVlMzEwODYuLjdmMGNjYmYgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRp
b25hbEV4cHJlc3Npb24uamF2YQpAQCAtNTcsNyArNTcsNiBAQAogCXByaXZhdGUgYm9vbGVhbiBp
c1BvbHlFeHByZXNzaW9uID0gZmFsc2U7CiAJcHJpdmF0ZSBUeXBlQmluZGluZyBvcmlnaW5hbFZh
bHVlSWZUcnVlVHlwZTsKIAlwcml2YXRlIFR5cGVCaW5kaW5nIG9yaWdpbmFsVmFsdWVJZkZhbHNl
VHlwZTsKLQlwcml2YXRlIEJsb2NrU2NvcGUgcG9seUV4cHJlc3Npb25TY29wZTsKIAlwcml2YXRl
IGJvb2xlYW4gdXNlMThzcGVjaWZpY3M7CiAJcHVibGljIENvbmRpdGlvbmFsRXhwcmVzc2lvbigK
IAkJRXhwcmVzc2lvbiBjb25kaXRpb24sCkBAIC00NjQsMzEgKzQ2MywyNSBAQAogCQkJaWYgKHRo
aXMudmFsdWVJZkZhbHNlIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHRoaXMudmFsdWVJZkZh
bHNlLmJpdHMgfD0gRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNoZWNrIGxh
dGVyIG9uCiAJCQl0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSA9IHRoaXMudmFsdWVJZkZh
bHNlLnJlc29sdmVUeXBlKHNjb3BlKTsKIAotCQkJaWYgKGlzUG9seUV4cHJlc3Npb24oKSkgewot
CQkJCWlmICh0aGlzLmV4cGVjdGVkVHlwZSA9PSBudWxsKSB7Ci0JCQkJCXRoaXMucG9seUV4cHJl
c3Npb25TY29wZSA9IHNjb3BlOyAvLyBwcmVzZXJ2ZSBmb3IgZXZlbnR1YWwgcmVzb2x1dGlvbi9l
cnJvciByZXBvcnRpbmcuCi0JCQkJfQotCQkJfQotCiAJCQlpZiAoY29uZGl0aW9uVHlwZSA9PSBu
dWxsIHx8IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPT0gbnVsbCB8fCB0aGlzLm9yaWdp
bmFsVmFsdWVJZkZhbHNlVHlwZSA9PSBudWxsKQogCQkJCXJldHVybiBudWxsOwogCQl9IGVsc2Ug
ewotCQkJLyogTm90IHJlYWNoZWQgYXMgb2Ygbm93IGFzIHdlIGRvbid0IGV2YWx1YXRlIGNvbmRp
dGlvbmFsIGV4cHJlc3Npb25zIG11bHRpcGxlIHRpbWVzLCBsZWZ0IGluIGZvciBub3cuCi0JCQkg
ICBJZiBpbiBmdXR1cmUsIHdlIGNoYW5nZSB0aGluZ3Mgc28gY29udHJvbCByZWFjaGVzIGhlcmUs
IGEgcHJlY29uZGl0aW9uIGlzIHRoYXQgdGhpcy5leHBlY3RlZFR5cGUgaXMKLQkJCSAgIHRoZSBm
aW5hbCB0YXJnZXQgdHlwZS4KLQkJCSovCisKIAkJCWlmICh0aGlzLm9yaWdpbmFsVmFsdWVJZlRy
dWVUeXBlLmtpbmQoKSA9PSBCaW5kaW5nLlBPTFlfVFlQRSkKIAkJCQl0aGlzLm9yaWdpbmFsVmFs
dWVJZlRydWVUeXBlID0gdGhpcy52YWx1ZUlmVHJ1ZS5yZXNvbHZlVHlwZShzY29wZSk7CiAJCQlp
ZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUua2luZCgpID09IEJpbmRpbmcuUE9MWV9U
WVBFKQogCQkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFs
c2UucmVzb2x2ZVR5cGUoc2NvcGUpOworCQkJCisJCQlpZiAodGhpcy5vcmlnaW5hbFZhbHVlSWZU
cnVlVHlwZSA9PSBudWxsIHx8ICF0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlzVmFsaWRC
aW5kaW5nKCkpCisJCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKKwkJCWlmICh0
aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSA9PSBudWxsIHx8ICF0aGlzLm9yaWdpbmFsVmFs
dWVJZkZhbHNlVHlwZS5pc1ZhbGlkQmluZGluZygpKQorCQkJCXJldHVybiB0aGlzLnJlc29sdmVk
VHlwZSA9IG51bGw7CiAJCX0KIAkJaWYgKGlzUG9seUV4cHJlc3Npb24oKSkgewogCQkJaWYgKHRo
aXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHsKLQkJCQl0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUg
PSBzY29wZTsgLy8gcHJlc2VydmUgZm9yIGV2ZW50dWFsIHJlc29sdXRpb24vZXJyb3IgcmVwb3J0
aW5nLgogCQkJCXJldHVybiBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwogCQkJfQotCQkJY29t
cHV0ZUNvbnZlcnNpb25zKHNjb3BlLCB0aGlzLmV4cGVjdGVkVHlwZSk7Ci0JCQlyZXR1cm4gdGhp
cy5yZXNvbHZlZFR5cGUgPSB0aGlzLmV4cGVjdGVkVHlwZTsKKwkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZSA9IGNvbXB1dGVDb252ZXJzaW9ucyhzY29wZSwgdGhpcy5leHBlY3RlZFR5cGUpID8g
dGhpcy5leHBlY3RlZFR5cGUgOiBudWxsOwogCQl9CiAJCVR5cGVCaW5kaW5nIHZhbHVlSWZUcnVl
VHlwZSA9IHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGU7CiAJCVR5cGVCaW5kaW5nIHZhbHVl
SWZGYWxzZVR5cGUgPSB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZTsKQEAgLTY2MSw3ICs2
NTQsOCBAQAogCQlyZXR1cm4gbnVsbDsKIAl9CiAKLQlwcm90ZWN0ZWQgdm9pZCBjb21wdXRlQ29u
dmVyc2lvbnMoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCXBy
b3RlY3RlZCBib29sZWFuIGNvbXB1dGVDb252ZXJzaW9ucyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBl
QmluZGluZyB0YXJnZXRUeXBlKSB7CisJCWJvb2xlYW4gb2sgPSB0cnVlOwogCQlpZiAodGhpcy5v
cmlnaW5hbFZhbHVlSWZUcnVlVHlwZSAhPSBudWxsICYmIHRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1
ZVR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJaWYgKHRoaXMudmFsdWVJZlRydWUuaXNDb25z
dGFudFZhbHVlT2ZUeXBlQXNzaWduYWJsZVRvVHlwZSh0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVU
eXBlLCB0YXJnZXRUeXBlKQogCQkJCQl8fCB0aGlzLm9yaWdpbmFsVmFsdWVJZlRydWVUeXBlLmlz
Q29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpIHsKQEAgLTY4Miw2ICs2NzYsNyBAQAogCQkJCX0K
IAkJCX0gZWxzZSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudHlwZU1pc21hdGNoRXJy
b3IodGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSwgdGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlm
VHJ1ZSwgbnVsbCk7CisJCQkJb2sgPSBmYWxzZTsKIAkJCX0KIAkJfQogCQlpZiAodGhpcy5vcmln
aW5hbFZhbHVlSWZGYWxzZVR5cGUgIT0gbnVsbCAmJiB0aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNl
VHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CkBAIC03MDQsOCArNjk5LDEwIEBACiAJCQkJfQogCQkJ
fSBlbHNlIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS50eXBlTWlzbWF0Y2hFcnJvcih0
aGlzLm9yaWdpbmFsVmFsdWVJZkZhbHNlVHlwZSwgdGFyZ2V0VHlwZSwgdGhpcy52YWx1ZUlmRmFs
c2UsIG51bGwpOworCQkJCW9rID0gZmFsc2U7CiAJCQl9CiAJCX0KKwkJcmV0dXJuIG9rOwogCX0K
IAogCXB1YmxpYyB2b2lkIHNldEV4cGVjdGVkVHlwZShUeXBlQmluZGluZyBleHBlY3RlZFR5cGUp
IHsKQEAgLTcyMCwxNiArNzE3LDkgQEAKIAkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7
CiAJfQogCQotCXB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUo
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJLy8gaW4gMS44IGlmIHRy
ZWF0ZWQgYXMgYSBwb2x5IGV4cHJlc3Npb246Ci0JCWlmIChpc1BvbHlFeHByZXNzaW9uKCkpIHsK
LQkJCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLnBvbHlFeHByZXNzaW9u
U2NvcGUpOwotCQkJdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSA9IHRoaXMudmFsdWVJZlRy
dWUuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKLQkJCXRo
aXMub3JpZ2luYWxWYWx1ZUlmRmFsc2VUeXBlID0gdGhpcy52YWx1ZUlmRmFsc2UuY2hlY2tBZ2Fp
bnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKLQkJCWNvbXB1dGVDb252ZXJz
aW9ucyh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUsIHRhcmdldFR5cGUpOwotCQkJdGhpcy5yZXNv
bHZlZFR5cGUgPSB0YXJnZXRUeXBlOwotCQl9Ci0JCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsK
KwlwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlVmFyaWFibGVC
aW5kaW5nIHR5cGVWYXJpYWJsZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwkJcmV0dXJuIHRo
aXMudmFsdWVJZlRydWUuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodHlwZVZhcmlhYmxlLCBt
ZXRob2QpIAorCQkJCSYmIHRoaXMudmFsdWVJZkZhbHNlLmlzUGVydGluZW50VG9BcHBsaWNhYmls
aXR5KHR5cGVWYXJpYWJsZSwgbWV0aG9kKTsgLy8gbm90IHBlcmZlY3QuCiAJfQogCQogCXB1Ymxp
YyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CkBAIC03MzcsNiArNzI3LDExIEBACiAJCQkJJiYg
dGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodGFyZ2V0VHlwZSwg
bWV0aG9kKTsKIAl9CiAJCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFs
VHlwZSgpIHsKKwkJcmV0dXJuIHRoaXMudmFsdWVJZlRydWUuaXNGdW5jdGlvbmFsVHlwZSgpIHx8
IHRoaXMudmFsdWVJZkZhbHNlLmlzRnVuY3Rpb25hbFR5cGUoKTsKKwl9CisJCiAJcHVibGljIGJv
b2xlYW4gaXNQb2x5RXhwcmVzc2lvbigpIHRocm93cyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2Vw
dGlvbiB7CiAJCQogCQlpZiAoIXRoaXMudXNlMThzcGVjaWZpY3MpCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0
Q29uc3RydWN0b3JDYWxsLmphdmEKaW5kZXggMjQzNDkxNS4uYTE2MTMyYSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQpAQCAtNTYsNyArNTYsNiBAQAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUNvbnN0YW50czsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVJZHM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5WYXJpYWJsZUJp
bmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2lt
cGxlTG9va3VwVGFibGU7CiAKIHB1YmxpYyBjbGFzcyBFeHBsaWNpdENvbnN0cnVjdG9yQ2FsbCBl
eHRlbmRzIFN0YXRlbWVudCBpbXBsZW1lbnRzIEludm9jYXRpb24gewogCkBAIC03NiwxMCArNzUs
NiBAQAogCiAJLy8gVE9ETyBSZW1vdmUgb25jZSBET01QYXJzZXIgaXMgYWN0aXZhdGVkCiAJcHVi
bGljIGludCB0eXBlQXJndW1lbnRzU291cmNlU3RhcnQ7Ci0KLQkgLy8gaG9sZCBvbiB0byB0aGlz
IGNvbnRleHQgZnJvbSBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGlu
dm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKLQlwcml2YXRl
IFNpbXBsZUxvb2t1cFRhYmxlLyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNl
Q29udGV4dHM7Ci0JcHJpdmF0ZSBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhl
bHBlcjsKIAogCXB1YmxpYyBFeHBsaWNpdENvbnN0cnVjdG9yQ2FsbChpbnQgYWNjZXNzTW9kZSkg
ewogCQl0aGlzLmFjY2Vzc01vZGUgPSBhY2Nlc3NNb2RlOwpAQCAtMzk0LDEwICszODksNiBAQAog
CQkJCQlpZiAoKGFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudC5yZXNvbHZlVHlwZShzY29wZSkp
ID09IG51bGwpIHsKIAkJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsKIAkJCQkJfQotCQkJCQlpZiAo
c291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiAoYXJndW1lbnQuaXNQ
b2x5RXhwcmVzc2lvbigpIHx8ICgoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAmJiAo
KEludm9jYXRpb24pIGFyZ3VtZW50KS51c2VzSW5mZXJlbmNlKCkpKSkgewotCQkJCQkJaWYgKHRo
aXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVsbCkKLQkJCQkJCQl0aGlzLmlubmVySW5mZXJl
bmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCQkJCX0KIAkJCQl9CiAJ
CQkJaWYgKGFyZ0hhc0Vycm9yKSB7CiAJCQkJCWlmIChyZWNlaXZlclR5cGUgPT0gbnVsbCkgewpA
QCAtNDk4LDU2ICs0ODksMjIgQEAKIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiAJ
fQogCi0JLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb246IC0tCi0JcHVibGljIE1ldGhvZEJpbmRp
bmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBib29sZWFuIHJlcG9ydEVycm9ycywg
U2NvcGUgc2NvcGUpIHsKLQkJaWYgKHJlcG9ydEVycm9ycykgewotCQkJaWYgKHRoaXMuYmluZGlu
ZyA9PSBudWxsKQotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VF
cnJvcigiY29uc3RydWN0b3IgaXMgdW5leHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8k
Tk9OLU5MUy0xJAotCQkJZWxzZSBpZiAoIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKQot
CQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRDb25zdHJ1Y3Rvcih0aGlzLCB0aGlz
LmJpbmRpbmcpOwotCQl9CisJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb24KKwlwdWJsaWMgTWV0
aG9kQmluZGluZyBiaW5kaW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7
CiAJCXJldHVybiB0aGlzLmJpbmRpbmc7CiAJfQorCisJcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZl
cmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIElu
ZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgeworCQkvLyBOb3RoaW5nIHRvIGRvLgorCX0KKwkK
KwlwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGdldEluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVy
aXplZE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCXJldHVybiBudWxsOworCX0KKwkKIAlwdWJs
aWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAkJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwog
CX0KLQlwdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRC
aW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCWJvb2xlYW4gaGFzVXBkYXRlID0g
dGhpcy5iaW5kaW5nICE9IHVwZGF0ZWRCaW5kaW5nOwotCQlpZiAodGhpcy5pbmZlcmVuY2VDb250
ZXh0cyAhPSBudWxsKSB7Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNv
bnRleHQxOCl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRpbmcpOwot
CQkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5w
dXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7Ci0JCQkJLy8gc29sdXRpb24gbWF5IGhhdmUgY29tZSBm
cm9tIGFuIG91dGVyIGluZmVyZW5jZSwgbWFyayBub3cgdGhhdCB0aGlzIChpbm5lcikgaXMgZG9u
ZSAoYnV0IG5vdCBkZWVwIGlubmVycyk6Ci0JCQkJaGFzVXBkYXRlIHw9IGN0eC5yZWdpc3RlclNv
bHV0aW9uKHRhcmdldFR5cGUsIHVwZGF0ZWRCaW5kaW5nKTsKLQkJCX0KLQkJfQotCQl0aGlzLmJp
bmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQkJcmV0dXJuIGhhc1VwZGF0ZTsKLQl9Ci0JcHVibGlj
IHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkgewotCQlpZiAodGhp
cy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9
IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOwotCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCht
ZXRob2QsIGluZkN0eDE4KTsKLQl9Ci0JcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZl
cmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQlpZiAo
dGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQotCQkJcmV0dXJuIG51bGw7Ci0JCXJldHVy
biAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVyZW5jZUNvbnRleHRzLmdldChtZXRob2Qp
OwotCX0KLQlwdWJsaWMgYm9vbGVhbiB1c2VzSW5mZXJlbmNlKCkgewotCQlyZXR1cm4gKHRoaXMu
YmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgCi0J
CQkJJiYgZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nKSB0aGlzLmJpbmRpbmcpICE9IG51bGw7Ci0JfQotCXB1YmxpYyBib29sZWFuIGlubmVyc05l
ZWRVcGRhdGUoKSB7Ci0JCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7
Ci0JfQotCXB1YmxpYyB2b2lkIGlubmVyVXBkYXRlRG9uZSgpIHsKLQkJdGhpcy5pbm5lckluZmVy
ZW5jZUhlbHBlciA9IG51bGw7Ci0JfQotCXB1YmxpYyBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5l
ckluZmVyZW5jZUhlbHBlcigpIHsKLQkJcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7
Ci0JfQotCiAJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogCXB1YmxpYyBJbmZl
cmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7CiAJCXJl
dHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhw
cmVzc2lvbi5qYXZhCmluZGV4IDkxOGIxYjQuLjQwNjhhZTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhCkBAIC05
NTksNiArOTU5LDEwIEBACiAJcmV0dXJuIHRoaXMuY29uc3RhbnQ7CiB9CiAKK3B1YmxpYyBib29s
ZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZh
cmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCXJldHVybiB0cnVlOworfQorCiBwdWJs
aWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRU
eXBlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCXJldHVybiB0cnVlOwogfQpAQCAtMTA2Mywx
NiArMTA2Nyw2IEBACiB9CiAKIC8qKgotICogT25jZSBvdXRlciBjb250ZXh0cyBoYXZlIGZpbmFs
aXplZCB0aGUgdGFyZ2V0IHR5cGUgZm9yIHRoaXMgZXhwcmVzc2lvbiwKLSAqIHBlcmZvcm0gYW55
IGNoZWNrcyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiBkZWxheWVkIHByZXZpb3VzbHkuCi0gKiBAcGFy
YW0gdGFyZ2V0VHlwZSB0aGUgZmluYWwgdGFyZ2V0IHR5cGUgKGFrYSBleHBlY3RlZFR5cGUpIGZv
ciB0aGlzIGV4cHJlc3Npb24uCi0gKiBAcGFyYW0gc2NvcGUgc2NvcGUgZm9yIGVycm9yIHJlcG9y
dGluZwotICovCi1wdWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBl
KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JcmV0dXJuIHRoaXMucmVz
b2x2ZWRUeXBlOyAvLyBzdWJjbGFzc2VzIG1heSBjaG9vc2UgdG8gZG8gcmVhbCBzdHVmZiBoZXJl
Ci19Ci0KLS8qKgogICogUmV0dXJucyB0cnVlIGlmIHRoZSByZWNlaXZlciBpcyBmb3JjZWQgdG8g
YmUgb2YgcmF3IHR5cGUgZWl0aGVyIHRvIHNhdGlzZnkgdGhlIGNvbnRyYWN0IGltcG9zZWQKICAq
IGJ5IGEgc3VwZXIgdHlwZSBvciBiZWNhdXNlIGl0ICppcyogcmF3IGFuZCB0aGUgY3VycmVudCB0
eXBlIGhhcyBubyBjb250cm9sIG92ZXIgaXQgKGkuZSB0aGUgcmF3bmVzcwogICogb3JpZ2luYXRl
cyBmcm9tIHNvbWUgb3RoZXIgZmlsZS4pCkBAIC0xMTY0LDcgKzExNTgsNyBAQAogfQogCiBwdWJs
aWMgYm9vbGVhbiBpc0JveGluZ0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIGxlZnQsIFNjb3Bl
IHNjb3BlKSB7Ci0JcmV0dXJuIGlzQm94aW5nQ29tcGF0aWJsZSh0aGlzLnJlc29sdmVkVHlwZSwg
bGVmdCwgdGhpcywgc2NvcGUpOworCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYm
IGlzQm94aW5nQ29tcGF0aWJsZSh0aGlzLnJlc29sdmVkVHlwZSwgbGVmdCwgdGhpcywgc2NvcGUp
OwogfQogCiBwdWJsaWMgYm9vbGVhbiBzSXNNb3JlU3BlY2lmaWMoVHlwZUJpbmRpbmcgcywgVHlw
ZUJpbmRpbmcgdCwgU2NvcGUgc2NvcGUpIHsKQEAgLTEyNTAsNCArMTI0NCw4IEBACiBwdWJsaWMg
VmFyaWFibGVCaW5kaW5nIG51bGxBbm5vdGF0ZWRWYXJpYWJsZUJpbmRpbmcoYm9vbGVhbiBzdXBw
b3J0VHlwZUFubm90YXRpb25zKSB7CiAJcmV0dXJuIG51bGw7CiB9CisKK3B1YmxpYyBib29sZWFu
IGlzRnVuY3Rpb25hbFR5cGUoKSB7CisJcmV0dXJuIGZhbHNlOwogfQorfQpcIE5vIG5ld2xpbmUg
YXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Np
b24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1YWMx
NGYyLi41MmYzYWIyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9u
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC03NCw5
ICs3NCw4IEBACiAJCXN1cGVyKCk7CiAJfQogCQotCS8vIGZvciBsYW1iZGEncyBhbmQgcmVmZXJl
bmNlIGV4cHJlc3Npb25zIGJveGluZyBjb21wYXRpYmlsaXR5IGlzIHNhbWUgYXMgdmFuaWxsYSBj
b21wYXRpYmlsaXR5LgogCXB1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJcmV0dXJuIGlzQ29tcGF0aWJs
ZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCQlyZXR1cm4gZmFsc2U7CiAJfQogCQogCXB1Ymxp
YyB2b2lkIHNldENvbXBpbGF0aW9uUmVzdWx0KENvbXBpbGF0aW9uUmVzdWx0IGNvbXBpbGF0aW9u
UmVzdWx0KSB7CkBAIC0xMDcsMTkgKzEwNiwyNyBAQAogCQlyZXR1cm4gdHJ1ZTsgLy8gYWx3YXlz
IGFzIHBlciBpbnRyb2R1Y3Rpb24gb2YgcGFydCBELCBKU1IgMzM1CiAJfQogCi0JcHVibGljIGJv
b2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
TWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJaWYgKHRhcmdldFR5cGUgaW5zdGFuY2VvZiBUeXBl
VmFyaWFibGVCaW5kaW5nKSB7Ci0JCQlpZiAobWV0aG9kICE9IG51bGwpIHsgLy8gd2hlbiBjYWxs
ZWQgZnJvbSB0eXBlIGluZmVyZW5jZQotCQkJCWlmICgoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGFy
Z2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QpCi0JCQkJCXJldHVybiBmYWxzZTsK
LQkJCQlpZiAobWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcp
dGFyZ2V0VHlwZSkuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QuZGVjbGFyaW5nQ2xhc3MpCi0J
CQkJCXJldHVybiBmYWxzZTsKLQkJCX0gZWxzZSB7IC8vIGZvciBpbnRlcm5hbCBjYWxscwotCQkJ
CVR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcp
IHRhcmdldFR5cGU7Ci0JCQkJaWYgKHR5cGVWYXJpYWJsZS5kZWNsYXJpbmdFbGVtZW50IGluc3Rh
bmNlb2YgTWV0aG9kQmluZGluZykKLQkJCQkJcmV0dXJuIGZhbHNlOwotCQkJfQorCUBPdmVycmlk
ZQorCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbFR5cGUoKSB7CisJCXJldHVybiB0cnVlOwor
CX0KKwkKKwlwdWJsaWMgYm9vbGVhbiBpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlVmFy
aWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwkJaWYg
KG1ldGhvZCAhPSBudWxsKSB7IC8vIHdoZW4gY2FsbGVkIGZyb20gdHlwZSBpbmZlcmVuY2UKKwkJ
CWlmICh0eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCA9PSBtZXRob2QpCisJCQkJcmV0dXJu
IGZhbHNlOworCQkJaWYgKG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgJiYgdHlwZVZhcmlhYmxlLmRl
Y2xhcmluZ0VsZW1lbnQgPT0gbWV0aG9kLmRlY2xhcmluZ0NsYXNzKQorCQkJCXJldHVybiBmYWxz
ZTsKKwkJfSBlbHNlIHsgLy8gZm9yIGludGVybmFsIGNhbGxzCisJCQlpZiAodHlwZVZhcmlhYmxl
LmRlY2xhcmluZ0VsZW1lbnQgaW5zdGFuY2VvZiBNZXRob2RCaW5kaW5nKQorCQkJCXJldHVybiBm
YWxzZTsKIAkJfQorCQlyZXR1cm4gdHJ1ZTsKKwl9CisJCisJcHVibGljIGJvb2xlYW4gaXNQZXJ0
aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGlu
ZyBtZXRob2QpIHsKKwkJaWYgKHRhcmdldFR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5k
aW5nKQorCQkJcmV0dXJuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KChUeXBlVmFyaWFibGVC
aW5kaW5nKSB0YXJnZXRUeXBlLCBtZXRob2QpOwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKQEAgLTIw
MywxMSArMjEwLDYgQEAKIAkJCQlicmVhazsKIAkJfQogCQlyZXR1cm4gbnVsbDsKLQl9Ci0KLQlw
dWJsaWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVu
Y2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJcmV0dXJuIHJlc29sdmVUeXBlRXhwZWN0
aW5nKHRoaXMuZW5jbG9zaW5nU2NvcGUsIHRhcmdldFR5cGUpOwogCX0KIAogCWNsYXNzIFZpc2li
aWxpdHlJbnNwZWN0b3IgZXh0ZW5kcyBUeXBlQmluZGluZ1Zpc2l0b3IgewpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Jbm5lckluZmVyZW5jZUhlbHBlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Jbm5lcklu
ZmVyZW5jZUhlbHBlci5qYXZhCmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NAppbmRleCA4MzgxYjVj
Li4wMDAwMDAwCi0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW5uZXJJbmZlcmVuY2VIZWxwZXIuamF2YQorKysg
L2Rldi9udWxsCkBAIC0xLDQyICswLDAgQEAKLS8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBD
b3B5cmlnaHQgKGMpIDIwMTQgR0sgU29mdHdhcmUgQUcuCi0gKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCi0gKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKLSAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0Ci0gKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAot
ICoKLSAqIENvbnRyaWJ1dG9yczoKLSAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uCi0gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KLXBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKLQotaW1wb3J0IGphdmEudXRp
bC5IYXNoTWFwOwotaW1wb3J0IGphdmEudXRpbC5NYXA7Ci0KLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKLQotcHVibGlj
IGNsYXNzIElubmVySW5mZXJlbmNlSGVscGVyIHsKLQotCS8qKiBGb3IgZWFjaCBjYW5kaWRhdGUg
bWV0aG9kIHN0b3JlIGhlcmUgdGhlIGFycmF5IG9mIGFyZ3VtZW50IHR5cGVzIGlmIGlubmVyIGlu
ZmVyZW5jZSBoYXMgaW1wcm92ZWQgYW55IGR1cmluZyBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNl
LiAqLwotCXByaXZhdGUgTWFwPE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXT4gYXJnVHlwZXNQ
ZXJDYW5kaWRhdGUgPSBuZXcgSGFzaE1hcDxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10+KCk7
Ci0KLQlwdWJsaWMgdm9pZCByZWdpc3RlcklubmVyUmVzdWx0KE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBUeXBlQmluZGluZyByZXNvbHZlZFR5cGUsIGludCBhcmdDb3VudCwgaW50IGFyZ0lkeCkgewot
CQlUeXBlQmluZGluZ1tdIGFyZ1R5cGVzID0gdGhpcy5hcmdUeXBlc1BlckNhbmRpZGF0ZS5nZXQo
bWV0aG9kKTsKLQkJaWYgKGFyZ1R5cGVzID09IG51bGwpCi0JCQl0aGlzLmFyZ1R5cGVzUGVyQ2Fu
ZGlkYXRlLnB1dChtZXRob2QsIGFyZ1R5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ0NvdW50XSk7
Ci0JCWFyZ1R5cGVzW2FyZ0lkeF0gPSByZXNvbHZlZFR5cGU7Ci0JfQotCQotCXB1YmxpYyBUeXBl
QmluZGluZ1tdIGdldEFyZ3VtZW50VHlwZXNGb3JDYW5kaWRhdGUoTWV0aG9kQmluZGluZyBjYW5k
aWRhdGUsIFR5cGVCaW5kaW5nW10gcGxhaW5BcmdUeXBlcykgewotCQlUeXBlQmluZGluZ1tdIGFy
Z1R5cGVzID0gdGhpcy5hcmdUeXBlc1BlckNhbmRpZGF0ZS5nZXQoY2FuZGlkYXRlKTsKLQkJaWYg
KGFyZ1R5cGVzID09IG51bGwpCi0JCQlyZXR1cm4gcGxhaW5BcmdUeXBlczsKLQkJLy8gZmlsbCBp
biBhbnkgYmxhbmtzIG5vdzoKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdUeXBlcy5sZW5ndGg7
IGkrKykgewotCQkJaWYgKGFyZ1R5cGVzW2ldID09IG51bGwpCi0JCQkJYXJnVHlwZXNbaV0gPSBw
bGFpbkFyZ1R5cGVzW2ldOwotCQl9Ci0JCXJldHVybiBhcmdUeXBlczsKLQl9Ci19CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5q
YXZhCmluZGV4IGFjNTQ0N2YuLjM4ZGM5ZGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2Nh
dGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCkBAIC0xOSwxMiArMTks
OCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlw
ZUJpbmRpbmc7CiAKIC8qKgotICogQWJzdHJhY3Rpb24gZm9yIGludm9jYXRpb24gQVNUIG5vZGVz
IHRoYXQgY2FuIHRyaWdnZXIgCi0gKiA8dWw+Ci0gKiA8bGk+SW52b2NhdGlvbiBBcHBsaWNhYmls
aXR5IEluZmVyZW5jZXMgKDE4LjUuMSksIGFuZDwvbGk+IAotICogPGxpPkludm9jYXRpb24gVHlw
ZSBJbmZlcmVuY2UgKDE4LjUuMikuPC9saT4KLSAqIDwvdWw+Ci0gKi8KKyAqIEFic3RyYWN0aW9u
IGZvciBpbnZvY2F0aW9uIEFTVCBub2RlcyB0aGF0IGNhbiB0cmlnZ2VyIG92ZXJsb2FkIHJlc29s
dXRpb24gcG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlCisqLwogcHVibGljIGludGVy
ZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgewogCiAJRXhwcmVzc2lvbltd
IGFyZ3VtZW50cygpOwpAQCAtMzMsNTcgKzI5LDI0IEBACiAJICogQW5zd2VyIHRoZSByZXNvbHZl
ZCBtZXRob2QgYmluZGluZyBvZiB0aGlzIGludm9jYXRpb24uCiAJICogSWYgYSB0YXJnZXQgdHlw
ZSBpcyBnaXZlbiwgdGhlIGludm9jYXRpb24gZ2V0cyBhIGNoYW5jZSB0byBkbyByZXBlYXRlZCBt
ZXRob2QgbG9va3VwLgogCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRoZSB0YXJnZXQgdHlwZSBvZiB0
aGlzIGludm9jYXRpb24gb3IgbnVsbCBpZiBub3QgeWV0IGtub3duCi0JICogQHBhcmFtIHJlcG9y
dEVycm9ycyBpZiB0cnVlIHRoZW4gdGhpcyBpcyB0aGUgbGFzdCBjYWxsLCBpZiBubyB2YWxpZCBi
aW5kaW5nIGNhbiBiZSBhbnN3ZXJlZCB3ZSBzaG91bGQgcmVwb3J0IGFuIGVycm9yCi0JICogQHBh
cmFtIHNjb3BlIGlmIHJlcG9ydEVycm9ycyBpcyB0cnVlIHRoZW4gdGhpcyBzY29wZSBjYW4gYmUg
dXNlZCBmb3IgZXJyb3IgcmVwb3J0aW5nCisJICogQHBhcmFtIHNjb3BlIHRoZSBzY29wZSB0byB1
c2UgZm9yIGxvb2t1cC4KIAkgKiAKIAkgKi8KLQlNZXRob2RCaW5kaW5nIGJpbmRpbmcoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiByZXBvcnRFcnJvcnMsIFNjb3BlIHNjb3BlKTsKLQor
CU1ldGhvZEJpbmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29w
ZSk7CisJCiAJLyoqCiAJICogUmVnaXN0ZXIgdGhlIGdpdmVuIGluZmVyZW5jZSBjb250ZXh0LCB3
aGljaCBwcm9kdWNlZCB0aGUgZ2l2ZW4gbWV0aG9kIGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVzdWx0
LgogCSAqIExhdGVyIHdoZW4gdGhlIHNhbWUgbWV0aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBtb3N0
IHNwZWNpZmljIG1ldGhvZCwgdGhlIGluZmVyZW5jZSBjb250ZXh0Ci0JICogZm9yIHRoaXMgcGFp
ciAoSW52b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcpIGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0Bs
aW5rICNnZXRFeHByZXNzaW9uQ29udGV4dCgpfQorCSAqIGZvciB0aGlzIHBhaXIgKEludm9jYXRp
b24geCBNZXRob2RCaW5kaW5nKSBjYW4gYmUgbG9va2VkIHVwIHVzaW5nIHtAbGluayAjZ2V0SW5m
ZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyl9CiAJICogdG8gY29udGlu
dWUgdGhlIHR5cGUgaW5mZXJlbmNlLgogCSAqLwogCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250
ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNv
bnRleHQxOCBpbmZDdHgxOCk7Ci0JCisKIAkvKioKLQkgKiBSZXRyaWV2ZSBhbiBpbmZlcmVuY2Ug
Y29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZCB3aGljaCBtdXN0IGhhdmUgYmVlbiByZWdpc3Rl
cmVkCi0JICogdXNpbmcge0BsaW5rICNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpfS4KKwkgKiBSZXRy
aWV2ZSBhbiBpbmZlcmVuY2UgY29udGV4dCBmb3IgdGhlIGdpdmVuIG1ldGhvZC4KIAkgKiBAcGFy
YW0gbWV0aG9kIGFuIGludGVybWVkaWF0ZSByZXNvbHZlZCBjYW5kaWRhdGUgZm9yIHRoaXMgaW52
b2NhdGlvbgotCSAqIHJldHVybiBhIHN1c3BlbmRlZCBpbmZlcmVuY2UgY29udGV4dCBvciBudWxs
IGlmIG5vbmUgd2FzIHJlZ2lzdGVyZWQgZm9yIHRoaXMgbWV0aG9kLgorCSAqIHJldHVybiB0aGUg
YXNzb2NpYXRlZCBpbmZlcmVuY2UgY29udGV4dC4KIAkgKi8KIAlJbmZlcmVuY2VDb250ZXh0MTgg
Z2V0SW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBtZXRob2QpOwog
Ci0JLyoqCi0JICogQW5zd2VyIHRydWUgaWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBkZXRlcm1pbmVk
IGl0cyBiaW5kaW5nIHVzaW5nIGluZmVyZW5jZS4KLQkgKi8KLQlib29sZWFuIHVzZXNJbmZlcmVu
Y2UoKTsKLQkKLQkvKioKLQkgKiBXaGVyZSB0aGUgQVNUIG5vZGUgbWF5IGhvbGQgcmVmZXJlbmNl
cyB0byB0aGUgcmVzdWx0cyBvZiBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlLAot
CSAqIHRoaXMgbWV0aG9kIGFsbG93cyB0byB1cGRhdGUgdGhvc2UgcmVmZXJlbmNlcyB0byB0aGUg
cmVzdWx0IG9mIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UuCi0JICogTm90ZSB0aGF0IHBvdGVu
dGlhbGx5IG1vcmUgdGhhbiBqdXN0IHRoZSBtZXRob2QgYmluZGluZyBpcyB1cGRhdGVkLgotCSAq
IEBwYXJhbSB1cGRhdGVkQmluZGluZyB0aGUgZmluYWwgbWV0aG9kIGJpbmRpbmcgYWZ0ZXIgZnVs
bCBpbmZlcmVuY2UKLQkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgdGFyZ2V0IHR5cGUgdXNlZCBk
dXJpbmcgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZQotCSAqIEByZXR1cm4gdHJ1ZSBpZiBhbiB1
cGRhdGUgaGFzIGhhcHBlbmVkCi0JICovCi0JYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RC
aW5kaW5nIHVwZGF0ZWRCaW5kaW5nLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKTsKLQkKLQkvKioK
LQkgKiBBbnN3ZXIgd2hldGhlciB0aGUgY3VycmVudCBpbnZvY2F0aW9uIGhhcyBpbm5lciBleHBy
ZXNzaW9ucyB0aGF0IHN0aWxsIG5lZWQgdXBkYXRpbmcgYWZ0ZXIgaW5mZXJlbmNlLgotCSAqLwot
CWJvb2xlYW4gaW5uZXJzTmVlZFVwZGF0ZSgpOwotCi0JLyoqCi0JICogTWFyayB0aGF0IHVwZGF0
aW5nICh0aGUgbmVlZCBmb3Igd2hpY2ggaXMgc2lnbmFsZWQgdmlhIHtAbGluayAjaW5uZXJzTmVl
ZFVwZGF0ZSgpfSkgaGFzIGJlZW4gZG9uZS4KLQkgKi8KLQl2b2lkIGlubmVyVXBkYXRlRG9uZSgp
OwotCi0JLyoqCi0JICogSWYgdGhpcyBpbnZvY2F0aW9uIGhhcyBhbnkgcG9seSBleHByZXNzaW9u
cyBhcyBhcmd1bWVudHMsIHRoaXMgbWV0aG9kIGFuc3dlcnMgYW4gaW5mZXJlbmNlIGhlbHBlciAK
LQkgKiB0aGF0IG1lZGlhdGVzIGR1cmluZyBvdmVybG9hZCByZXNvbHV0aW9uLCBldmVuIGlmIG5v
IGFjdHVhbCBpbmZlcmVuY2UgaGFwcGVucyBmb3IgdGhpcyBpbnZvY2F0aW9uLgotCSAqLwotCUlu
bmVySW5mZXJlbmNlSGVscGVyIGlubmVySW5mZXJlbmNlSGVscGVyKCk7Ci0JCiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhCmluZGV4IGNjMjA4NzcuLjRkMmFhZjkgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVz
c2lvbi5qYXZhCkBAIC00MSw2ICs0MSw3IEBACiBpbXBvcnQgc3RhdGljIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbkNvbnRleHQuSU5WT0NBVElPTl9DT05U
RVhUOwogCiBpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb25zOworaW1wb3J0IGphdmEudXRpbC5I
YXNoTWFwOwogaW1wb3J0IGphdmEudXRpbC5IYXNoU2V0OwogaW1wb3J0IGphdmEudXRpbC5MaW5r
ZWRIYXNoU2V0OwogaW1wb3J0IGphdmEudXRpbC5TZXQ7CkBAIC0yNDQsNiArMjQ1LDcgQEAKIAkJ
CQl0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPSB0aGlzLmFyZ3VtZW50c1tpXS50eXBlLnJlc29sdmVU
eXBlKGJsb2NrU2NvcGUsIHRydWUgLyogY2hlY2sgYm91bmRzKi8pOwogCQl9CiAJCWlmICh0aGlz
LmV4cGVjdGVkVHlwZSA9PSBudWxsICYmIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgPT0gSU5WT0NB
VElPTl9DT05URVhUKSB7CisJCQl0aGlzLnJlc29sdmVkQ29waWVzID0gbmV3IEhhc2hNYXA8VHlw
ZUJpbmRpbmcsIExhbWJkYUV4cHJlc3Npb24+KCk7CiAJCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmlu
ZGluZyh0aGlzKTsKIAkJfSAKIAkJCkBAIC0zMjEsMTEgKzMyMywxOCBAQAogCQkJCWV4cGVjdGVk
U0FNVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmV4cGVjdGVkVHlwZTsKIAkJCWlmIChl
eHBlY3RlZFNBTVR5cGUgIT0gbnVsbCkKIAkJCQlncm91bmRUeXBlID0gZmluZEdyb3VuZFRhcmdl
dFR5cGUoYmxvY2tTY29wZSwgZXhwZWN0ZWRTQU1UeXBlLCBhcmd1bWVudHNUeXBlRWxpZGVkKTsK
KwkJCQogCQkJaWYgKGdyb3VuZFR5cGUgIT0gbnVsbCkgewogCQkJCXRoaXMuZGVzY3JpcHRvciA9
IGdyb3VuZFR5cGUuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoYmxvY2tTY29wZSwgdHJ1ZSk7CiAJ
CQkJaWYgKCF0aGlzLmRlc2NyaXB0b3IuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQlyZXBvcnRT
YW1Qcm9ibGVtKGJsb2NrU2NvcGUsIHRoaXMuZGVzY3JpcHRvcik7CiAJCQkJfSBlbHNlIHsKKwkJ
CQkJaWYgKGdyb3VuZFR5cGUgIT0gZXhwZWN0ZWRTQU1UeXBlKSB7IC8vJElERU5USVRZLUNPTVBB
UklTT04kCisJCQkJCQlpZiAoIWdyb3VuZFR5cGUuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFNB
TVR5cGUsIHRoaXMuc2NvcGUpKSB7IC8vIHRoZSBncm91bmQgaGFzIHNoaWZ0ZWQsIGFyZSB3ZSBz
dGlsbCBvbiBmaXJtIGdyb3VuZHMgPyAKKwkJCQkJCQlibG9ja1Njb3BlLnByb2JsZW1SZXBvcnRl
cigpLnR5cGVNaXNtYXRjaEVycm9yKGdyb3VuZFR5cGUsIHRoaXMuZXhwZWN0ZWRUeXBlLCB0aGlz
LCBudWxsKTsgLy8gcmVwb3J0IGRlbGliZXJhdGVseSBhZ2FpbnN0IGJsb2NrIHNjb3BlIHNvIGFz
IG5vdCB0byBibGFtZSB0aGUgbGFtYmRhLgorCQkJCQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlw
ZSA9IG51bGw7CisJCQkJCQl9CisJCQkJCX0KIAkJCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBncm91
bmRUeXBlOwogCQkJCX0KIAkJCQkvLyBUT0RPOiBpbiB3aGljaCBjYXNlcyBkbyB3ZSBoYXZlIHRv
IGFzc2lnbiB0aGlzLnJlc29sdmVkVHlwZSAmIHRoaXMuZGVzY3JpcHRvciAod2l0aCBwcm9ibGVt
IGJpbmRpbmdzKSB0byBwcmV2ZW50IE5QRSBkb3duc3RyZWFtPz8KQEAgLTQxNCw2ICs0MjMsNyBA
QAogCQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewogCQkJRXhwcmVzc2lv
biBleHByZXNzaW9uID0gKEV4cHJlc3Npb24pIHRoaXMuYm9keTsKIAkJCW5ldyBSZXR1cm5TdGF0
ZW1lbnQoZXhwcmVzc2lvbiwgZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwgZXhwcmVzc2lvbi5zb3Vy
Y2VFbmQsIHRydWUpLnJlc29sdmUodGhpcy5zY29wZSk7IC8vIDotKSA7LSkKKwkJCXRoaXMudm9p
ZENvbXBhdGlibGUgPSB0aGlzLm9yaWdpbmFsLnZvaWRDb21wYXRpYmxlID0gZXhwcmVzc2lvbi5z
dGF0ZW1lbnRFeHByZXNzaW9uKCk7CiAJCX0gZWxzZSB7CiAJCQl0aGlzLmJvZHkucmVzb2x2ZSh0
aGlzLnNjb3BlKTsKIAkJfQpAQCAtNzMwLDcgKzc0MCw2IEBACiAJCWlmICghKGxlZnQgaW5zdGFu
Y2VvZiBSZWZlcmVuY2VCaW5kaW5nKSkKIAkJCXJldHVybiBmYWxzZTsKIAotCQlsZWZ0ID0gbGVm
dC51bmNhcHR1cmUodGhpcy5lbmNsb3NpbmdTY29wZSk7CiAJCXNoYXBlQW5hbHlzaXM6IGlmICgh
dGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUpIHsKIAkJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9s
ZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJy
b3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKIAkJCWZpbmFsIENv
bXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBp
bGVyT3B0aW9ucygpOwpAQCAtODMzLDYgKzg0Miw4IEBACiAJCXJldHVybiB0cnVlOwogCX0KIAor
CXByaXZhdGUgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4gcmVzb2x2ZWRD
b3BpZXM7CisJCiAJLyoqCiAJICogR2V0IGEgcmVzb2x2ZWQgY29weSBvZiB0aGlzIGxhbWJkYSBm
b3IgdXNlIGJ5IHR5cGUgaW5mZXJlbmNlLCBhcyB0byBhdm9pZCBzcGlsbGluZyBhbnkgcHJlbWF0
dXJlCiAJICogdHlwZSByZXN1bHRzIGludG8gdGhlIG9yaWdpbmFsIGxhbWJkYS4KQEAgLTg0MSwx
MiArODUyLDIxIEBACiAJICogQHJldHVybiBhIHJlc29sdmVkIGNvcHkgb2YgJ3RoaXMnIG9yIG51
bGwgaWYgc2lnbmlmaWNhbnQgZXJyb3JzIHdoZXJlIGVuY291bnRlcmVkCiAJICovCiAJcHVibGlj
IExhbWJkYUV4cHJlc3Npb24gZ2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSB0aGlz
LnJlc29sdmVkQ29waWVzLmdldCh0YXJnZXRUeXBlKTsKKwkJaWYgKGxhbWJkYSA9PSBudWxsKSB7
CisJCQlsYW1iZGEgPSBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdl
dFR5cGUpOworCQkJaWYgKGxhbWJkYSAhPSBudWxsKSB7CisJCQkJdGhpcy5yZXNvbHZlZENvcGll
cy5wdXQodGFyZ2V0VHlwZSwgbGFtYmRhKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGFtYmRhOwor
CX0KKwkKKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVu
Y2VUYXJnZXRpbmcwKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKIAkJLy8gbm90ZTogdGhpcyBp
cyBlc3NlbnRpYWxseSBhIHNpbXBsaWZpZWQgZXh0cmFjdCBmcm9tIGlzQ29tcGF0aWJsZVdpdGgo
VHlwZUJpbmRpbmcsU2NvcGUpLgogCQlpZiAodGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgJiYg
dGhpcy5iaW5kaW5nICE9IG51bGwpCiAJCQlyZXR1cm4gdGhpczsKIAkJCi0JCXRhcmdldFR5cGUg
PSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJLy8gVE9ETzog
Y2FjaGluZwogCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xvc2lu
Z1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2lsZW50
RXJyb3JIYW5kbGluZ1BvbGljeSk7CiAJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCQlib29sZWFu
IGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlz
aXNFbmFibGVkOwpAQCAtOTY4LDYgKzk4OCw3IEBACiAKIAkJaWYgKGNvcHkgIT0gbnVsbCkgeyAv
LyA9PT4gc3ludGF4IGVycm9ycyA9PSBudWxsCiAJCQljb3B5Lm9yaWdpbmFsID0gdGhpczsKKwkJ
CWNvcHkuZW5jbG9zaW5nU2NvcGUgPSB0aGlzLmVuY2xvc2luZ1Njb3BlOwogCQl9CiAJCXJldHVy
biBjb3B5OwogCX0KQEAgLTk3Niw3ICs5OTcsNyBAQAogCQlpZiAodGhpcy5vcmlnaW5hbCA9PSB0
aGlzKSAvLyBub3QgaW4gb3ZlcmxvYWQgcmVzb2x1dGlvbiBjb250ZXh0LgogCQkJcmV0dXJuOwog
CQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJdGhpcy5vcmlnaW5h
bC52YWx1ZUNvbXBhdGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCAh
PSBUeXBlSWRzLlRfdm9pZDsKKwkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVz
dWx0VHlwZSAhPSBudWxsICYmIHJlc3VsdFR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQgPyBmYWxz
ZSA6IHRydWU7CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zID0gbmV3IEV4cHJl
c3Npb25bMV07CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zWzBdID0gZXhwcmVz
c2lvbjsKIAkJCXJldHVybjsgLy8gdm9pZCBjb21wYXRpYmlsaXR5IGRldGVybWluZWQgdmlhIHN0
YXRlbWVudEV4cHJlc3Npb24oKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDRjNGVlYTIuLjcyOTUyZjgg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKQEAgLTgwLDYgKzgwLDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1pc3NpbmdUeXBlQmluZGluZzsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlBvbHlUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlBvbHltb3JwaGljTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlByb2JsZW1NZXRob2RCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNv
bnM7CkBAIC0xMTUsMTEgKzExNywxMCBAQAogCiAJIC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0
IGZyb20gaW52b2NhdGlvbiBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9u
IHR5cGUgaW5mZXJlbmNlIChwZXIgbWV0aG9kIGNhbmRpZGF0ZSk6CiAJcHJpdmF0ZSBTaW1wbGVM
b29rdXBUYWJsZS8qPFBHTUIsSW5mZXJlbmNlQ29udGV4dDE4PiovIGluZmVyZW5jZUNvbnRleHRz
OwotCXByb3RlY3RlZCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlcjsK
IAlwcml2YXRlIGJvb2xlYW4gcmVjZWl2ZXJJc1R5cGU7CiAJcHJvdGVjdGVkIGJvb2xlYW4gYXJn
c0NvbnRhaW5DYXN0OwogCXB1YmxpYyBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBCaW5k
aW5nLk5PX1BBUkFNRVRFUlM7Ci0JcHVibGljIGJvb2xlYW4gYXJndW1lbnRzSGF2ZUVycm9yczsK
KwlwdWJsaWMgYm9vbGVhbiBhcmd1bWVudHNIYXZlRXJyb3JzID0gZmFsc2U7CiAJCiAKIHB1Ymxp
YyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRl
eHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CkBAIC01OTMsMTE0ICs1OTQsMTEx
IEBACiB9CiAKIHB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVHlwZShCbG9ja1Njb3BlIHNjb3Bl
KSB7Ci0JLy8gQW5zd2VyIHRoZSBzaWduYXR1cmUgcmV0dXJuIHR5cGUKKwkvLyBBbnN3ZXIgdGhl
IHNpZ25hdHVyZSByZXR1cm4gdHlwZSwgYW5zd2VycyBQb2x5VHlwZUJpbmRpbmcgaWYgdGhlcmUg
aXMgYXQgbGVhc3Qgb25lIGdlbmVyaWMgb3ZlcmxvYWRlZCBjYW5kaWRhdGUgdGhhdCBlbmNvZGVk
IHR5cGUgdmFyaWFibGVzIGluIHJldHVybiB0eXBlIGFuZCB0aGVyZSBpcyBubyB0YXJnZXQgdHlw
ZSAgCiAJLy8gQmFzZSB0eXBlIHByb21vdGlvbgorCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0
YW50Lk5vdEFDb25zdGFudCkgeworCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0
YW50OworCQlsb25nIHNvdXJjZUxldmVsID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNl
TGV2ZWw7CisJCWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0gZmFsc2U7CisJCWlmICh0aGlzLnJlY2Vp
dmVyIGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKKwkJCXRoaXMucmVjZWl2ZXIuYml0cyB8
PSBBU1ROb2RlLkRpc2FibGVVbm5lY2Vzc2FyeUNhc3RDaGVjazsgLy8gd2lsbCBjaGVjayBsYXRl
ciBvbgorCQkJcmVjZWl2ZXJDYXN0ID0gdHJ1ZTsKKwkJfQorCQl0aGlzLmFjdHVhbFJlY2VpdmVy
VHlwZSA9IHRoaXMucmVjZWl2ZXIucmVzb2x2ZVR5cGUoc2NvcGUpOworCQl0aGlzLnJlY2VpdmVy
SXNUeXBlID0gdGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFt
ZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcikuYml0cyAmIEJpbmRpbmcuVFlQRSkgIT0gMDsKKwkJ
aWYgKHJlY2VpdmVyQ2FzdCAmJiB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSAhPSBudWxsKSB7CisJ
CQkvLyBkdWUgdG8gY2hhbmdlIG9mIGRlY2xhcmluZyBjbGFzcyB3aXRoIHJlY2VpdmVyIHR5cGUs
IG9ubHkgaWRlbnRpdHkgY2FzdCBzaG91bGQgYmUgbm90aWZpZWQKKwkJCWlmIChUeXBlQmluZGlu
Zy5lcXVhbHNFcXVhbHMoKChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKS5leHByZXNzaW9u
LnJlc29sdmVkVHlwZSwgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUpKSB7CisJCQkJc2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkudW5uZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2Vp
dmVyKTsKKwkJCX0KKwkJfQorCQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJp
YyBjb25zdHJ1Y3RvciBjYWxsKQorCQlpZiAodGhpcy50eXBlQXJndW1lbnRzICE9IG51bGwpIHsK
KwkJCWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzID0gc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81
OyAvLyB0eXBlQ2hlY2tzIGFsbCBhcmd1bWVudHMKKwkJCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVu
Z3RoOyBpKyspIHsKKwkJCQlUeXBlUmVmZXJlbmNlIHR5cGVSZWZlcmVuY2UgPSB0aGlzLnR5cGVB
cmd1bWVudHNbaV07CisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlw
ZVJlZmVyZW5jZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09
IG51bGwpIHsKKwkJCQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gdHJ1ZTsKKwkJCQl9CisJ
CQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyAmJiB0eXBlUmVmZXJlbmNlIGluc3RhbmNl
b2YgV2lsZGNhcmQpIHsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdl
T2ZXaWxkY2FyZCh0eXBlUmVmZXJlbmNlKTsKKwkJCQl9CisJCQl9CisJCQlpZiAodGhpcy5hcmd1
bWVudHNIYXZlRXJyb3JzKSB7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsgLy8g
c3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50cworCQkJCQlmb3IgKGludCBpID0gMCwg
bWF4ID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQkJCXRoaXMu
YXJndW1lbnRzW2ldLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJCQkJfQorCQkJCX0KKwkJCQlyZXR1
cm4gbnVsbDsKKwkJCX0KKwkJfQorCQkvLyB3aWxsIGNoZWNrIGZvciBudWxsIGFmdGVyIGFyZ3Mg
YXJlIHJlc29sdmVkCisJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQl0aGlzLmFy
Z3VtZW50c0hhdmVFcnJvcnMgPSBmYWxzZTsgLy8gdHlwZUNoZWNrcyBhbGwgYXJndW1lbnRzCisJ
CQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOworCQkJdGhpcy5hcmd1bWVudFR5
cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxl
bmd0aDsgaSsrKXsKKwkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07
CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxsKSAKKwkJCQkJ
c2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJBcmd1bWVudCB3
YXMgdW5leHBlY3RlZGx5IGZvdW5kIHJlc29sdmVkIiwgdGhpcyk7IC8vJE5PTi1OTFMtMSQKKwkJ
CQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgeworCQkJCQlhcmd1bWVu
dC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3aWxsIGNo
ZWNrIGxhdGVyIG9uCisJCQkJCXRoaXMuYXJnc0NvbnRhaW5DYXN0ID0gdHJ1ZTsKKwkJCQl9CisJ
CQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKKwkJ
CQlpZiAoKHRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3Bl
KSkgPT0gbnVsbCl7CisJCQkJCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IHRydWU7CisJCQkJ
fQorCQkJfQorCQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgeworCQkJCWlmICh0aGlz
LmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsKKwkJCQkJ
Ly8gIHJlY29yZCBhIGJlc3QgZ3Vlc3MsIGZvciBjbGllbnRzIHdobyBuZWVkIGhpbnQgYWJvdXQg
cG9zc2libGUgbWV0aG9kIG1hdGNoCisJCQkJCVR5cGVCaW5kaW5nW10gcHNldWRvQXJncyA9IG5l
dyBUeXBlQmluZGluZ1tsZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAtLWkgPj0g
MDspCisJCQkJCQlwc2V1ZG9BcmdzW2ldID0gdGhpcy5hcmd1bWVudFR5cGVzW2ldID09IG51bGwg
PyBUeXBlQmluZGluZy5OVUxMIDogdGhpcy5hcmd1bWVudFR5cGVzW2ldOyAvLyByZXBsYWNlIGFy
Z3Mgd2l0aCBlcnJvcnMgd2l0aCBudWxsIHR5cGUKIAotCXRoaXMuY29uc3RhbnQgPSBDb25zdGFu
dC5Ob3RBQ29uc3RhbnQ7Ci0JbG9uZyBzb3VyY2VMZXZlbCA9IHNjb3BlLmNvbXBpbGVyT3B0aW9u
cygpLnNvdXJjZUxldmVsOwotCWJvb2xlYW4gcmVjZWl2ZXJDYXN0ID0gZmFsc2U7Ci0JaWYgKHRo
aXMucmVjZWl2ZXIgaW5zdGFuY2VvZiBDYXN0RXhwcmVzc2lvbikgewotCQl0aGlzLnJlY2VpdmVy
LmJpdHMgfD0gQVNUTm9kZS5EaXNhYmxlVW5uZWNlc3NhcnlDYXN0Q2hlY2s7IC8vIHdpbGwgY2hl
Y2sgbGF0ZXIgb24KLQkJcmVjZWl2ZXJDYXN0ID0gdHJ1ZTsKLQl9Ci0JaWYgKHRoaXMucmVjZWl2
ZXIucmVzb2x2ZWRUeXBlICE9IG51bGwpCi0JCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVy
aWNJbmZlcmVuY2VFcnJvcigiUmVjZWl2ZXIgd2FzIHVuZXhwZWN0ZWRseSBmb3VuZCByZXNvbHZl
ZCIsIHRoaXMpOyAvLyROT04tTkxTLTEkCi0JdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUgPSB0aGlz
LnJlY2VpdmVyLnJlc29sdmVUeXBlKHNjb3BlKTsKLQl0aGlzLnJlY2VpdmVySXNUeXBlID0gdGhp
cy5yZWNlaXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UgJiYgKCgoTmFtZVJlZmVyZW5jZSkg
dGhpcy5yZWNlaXZlcikuYml0cyAmIEJpbmRpbmcuVFlQRSkgIT0gMDsKLQlpZiAocmVjZWl2ZXJD
YXN0ICYmIHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlICE9IG51bGwpIHsKLQkJIC8vIGR1ZSB0byBj
aGFuZ2Ugb2YgZGVjbGFyaW5nIGNsYXNzIHdpdGggcmVjZWl2ZXIgdHlwZSwgb25seSBpZGVudGl0
eSBjYXN0IHNob3VsZCBiZSBub3RpZmllZAotCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxz
KCgoQ2FzdEV4cHJlc3Npb24pdGhpcy5yZWNlaXZlcikuZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUs
IHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKSkgewotCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
dW5uZWNlc3NhcnlDYXN0KChDYXN0RXhwcmVzc2lvbil0aGlzLnJlY2VpdmVyKTsKLQkJfQotCX0K
LQkvLyByZXNvbHZlIHR5cGUgYXJndW1lbnRzIChmb3IgZ2VuZXJpYyBjb25zdHJ1Y3RvciBjYWxs
KQotCWlmICh0aGlzLnR5cGVBcmd1bWVudHMgIT0gbnVsbCkgewotCQlpbnQgbGVuZ3RoID0gdGhp
cy50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJdGhpcy5hcmd1bWVudHNIYXZlRXJyb3JzID0gc291
cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81OyAvLyB0eXBlQ2hlY2tzIGFsbCBh
cmd1bWVudHMKLQkJdGhpcy5nZW5lcmljVHlwZUFyZ3VtZW50cyA9IG5ldyBUeXBlQmluZGluZ1ts
ZW5ndGhdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlUeXBlUmVm
ZXJlbmNlIHR5cGVSZWZlcmVuY2UgPSB0aGlzLnR5cGVBcmd1bWVudHNbaV07Ci0JCQlpZiAoKHRo
aXMuZ2VuZXJpY1R5cGVBcmd1bWVudHNbaV0gPSB0eXBlUmVmZXJlbmNlLnJlc29sdmVUeXBlKHNj
b3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKSkgPT0gbnVsbCkgewotCQkJCXRoaXMuYXJndW1l
bnRzSGF2ZUVycm9ycyA9IHRydWU7Ci0JCQl9Ci0JCQlpZiAodGhpcy5hcmd1bWVudHNIYXZlRXJy
b3JzICYmIHR5cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBXaWxkY2FyZCkgewotCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mV2lsZGNhcmQodHlwZVJlZmVyZW5jZSk7Ci0J
CQl9Ci0JCX0KLQkJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycykgewotCQkJaWYgKHRoaXMu
YXJndW1lbnRzICE9IG51bGwpIHsgLy8gc3RpbGwgYXR0ZW1wdCB0byByZXNvbHZlIGFyZ3VtZW50
cwotCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBt
YXg7IGkrKykgewotCQkJCQl0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlVHlwZShzY29wZSk7Ci0J
CQkJfQotCQkJfQotCQkJcmV0dXJuIG51bGw7Ci0JCX0KLQl9Ci0JLy8gd2lsbCBjaGVjayBmb3Ig
bnVsbCBhZnRlciBhcmdzIGFyZSByZXNvbHZlZAotCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxs
KSB7Ci0JCXRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyA9IGZhbHNlOyAvLyB0eXBlQ2hlY2tzIGFs
bCBhcmd1bWVudHMKLQkJaW50IGxlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJdGhp
cy5hcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkg
PSAwOyBpIDwgbGVuZ3RoOyBpKyspewotCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IHRoaXMuYXJn
dW1lbnRzW2ldOwotCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZSAhPSBudWxs
KSAKLQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5nZW5lcmljSW5mZXJlbmNlRXJyb3IoIkFy
Z3VtZW50IHdhcyB1bmV4cGVjdGVkbHkgZm91bmQgcmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5M
Uy0xJAotCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgQ2FzdEV4cHJlc3Npb24pIHsKLQkJCQlh
cmd1bWVudC5iaXRzIHw9IEFTVE5vZGUuRGlzYWJsZVVubmVjZXNzYXJ5Q2FzdENoZWNrOyAvLyB3
aWxsIGNoZWNrIGxhdGVyIG9uCi0JCQkJdGhpcy5hcmdzQ29udGFpbkNhc3QgPSB0cnVlOwotCQkJ
fQotCQkJYXJndW1lbnQuc2V0RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsK
LQkJCWlmICgodGhpcy5hcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2Nv
cGUpKSA9PSBudWxsKXsKLQkJCQl0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgPSB0cnVlOwotCQkJ
fQotCQkJaWYgKHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKLQkJ
CQlpZiAoYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpCi0JCQkJCXx8IChhcmd1bWVudCBpbnN0
YW5jZW9mIEludm9jYXRpb24gJiYgKChJbnZvY2F0aW9uKWFyZ3VtZW50KS51c2VzSW5mZXJlbmNl
KCkpKSB7Ci0JCQkJCWlmICh0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID09IG51bGwpCi0JCQkJ
CQl0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyID0gbmV3IElubmVySW5mZXJlbmNlSGVscGVyKCk7
Ci0JCQkJfQotCQkJfQotCQl9Ci0JCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMpIHsKLQkJ
CWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcp
IHsKLQkJCQkvLyAgcmVjb3JkIGEgYmVzdCBndWVzcywgZm9yIGNsaWVudHMgd2hvIG5lZWQgaGlu
dCBhYm91dCBwb3NzaWJsZSBtZXRob2QgbWF0Y2gKLQkJCQlUeXBlQmluZGluZ1tdIHBzZXVkb0Fy
Z3MgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJCQlmb3IgKGludCBpID0gbGVuZ3RoOyAt
LWkgPj0gMDspCi0JCQkJCXBzZXVkb0FyZ3NbaV0gPSB0aGlzLmFyZ3VtZW50VHlwZXNbaV0gPT0g
bnVsbCA/IFR5cGVCaW5kaW5nLk5VTEwgOiB0aGlzLmFyZ3VtZW50VHlwZXNbaV07IC8vIHJlcGxh
Y2UgYXJncyB3aXRoIGVycm9ycyB3aXRoIG51bGwgdHlwZQotCQkJCXRoaXMuYmluZGluZyA9Ci0J
CQkJCXRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJCQkJPyBzY29wZS5nZXRJbXBs
aWNpdE1ldGhvZCh0aGlzLnNlbGVjdG9yLCBwc2V1ZG9BcmdzLCB0aGlzKQotCQkJCQkJOiBzY29w
ZS5maW5kTWV0aG9kKChSZWZlcmVuY2VCaW5kaW5nKSB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwg
dGhpcy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcywgZmFsc2UpOwotCQkJCWlmICh0aGlzLmJp
bmRpbmcgIT0gbnVsbCAmJiAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKLQkJCQkJ
TWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXRoaXMu
YmluZGluZykuY2xvc2VzdE1hdGNoOwotCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0Y2gs
IGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1ldGhv
ZCBtYXRjaAotCQkJCQlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwpIHsKLQkJCQkJCWlmIChjbG9z
ZXN0TWF0Y2gub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJ
QUJMRVMpIHsgLy8gZ2VuZXJpYyBtZXRob2QKLQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0dXJuIGdl
bmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0IHRvIHJh
dyBtZXRob2QgKDE3NTQwOSkKLQkJCQkJCQljbG9zZXN0TWF0Y2ggPSBzY29wZS5lbnZpcm9ubWVu
dCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGNsb3Nlc3RNYXRjaC5vcmlnaW5h
bCgpLCAoUmF3VHlwZUJpbmRpbmcpbnVsbCk7Ci0JCQkJCQl9Ci0JCQkJCQl0aGlzLmJpbmRpbmcg
PSBjbG9zZXN0TWF0Y2g7Ci0JCQkJCQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaE9yaWdpbmFs
ID0gY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCk7Ci0JCQkJCQlpZiAoY2xvc2VzdE1hdGNoT3JpZ2lu
YWwuaXNPckVuY2xvc2VkQnlQcml2YXRlVHlwZSgpICYmICFzY29wZS5pc0RlZmluZWRJbk1ldGhv
ZChjbG9zZXN0TWF0Y2hPcmlnaW5hbCkpIHsKLQkJCQkJCQkvLyBpZ25vcmUgY2FzZXMgd2hlcmUg
bWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5nLiBkaXJlY3QgcmVj
dXJzaW9ucykKLQkJCQkJCQljbG9zZXN0TWF0Y2hPcmlnaW5hbC5tb2RpZmllcnMgfD0gRXh0cmFD
b21waWxlck1vZGlmaWVycy5BY2NMb2NhbGx5VXNlZDsKKwkJCQkJdGhpcy5iaW5kaW5nID0gdGhp
cy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpID8KKwkJCQkJCQkJc2NvcGUuZ2V0SW1wbGljaXRN
ZXRob2QodGhpcy5zZWxlY3RvciwgcHNldWRvQXJncywgdGhpcykgOgorCQkJCQkJCQkJc2NvcGUu
ZmluZE1ldGhvZCgoUmVmZXJlbmNlQmluZGluZykgdGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRo
aXMuc2VsZWN0b3IsIHBzZXVkb0FyZ3MsIHRoaXMsIGZhbHNlKTsKKworCQkJCQlpZiAodGhpcy5i
aW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJ
CQlNZXRob2RCaW5kaW5nIGNsb3Nlc3RNYXRjaCA9ICgoUHJvYmxlbU1ldGhvZEJpbmRpbmcpdGhp
cy5iaW5kaW5nKS5jbG9zZXN0TWF0Y2g7CisJCQkJCQkvLyByZWNvcmQgdGhlIGNsb3Nlc3QgbWF0
Y2gsIGZvciBjbGllbnRzIHdobyBtYXkgc3RpbGwgbmVlZCBoaW50IGFib3V0IHBvc3NpYmxlIG1l
dGhvZCBtYXRjaAorCQkJCQkJaWYgKGNsb3Nlc3RNYXRjaCAhPSBudWxsKSB7CisJCQkJCQkJaWYg
KGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUykgeyAvLyBnZW5lcmljIG1ldGhvZAorCQkJCQkJCQkvLyBzaG91bGRuJ3QgcmV0
dXJuIGdlbmVyaWMgbWV0aG9kIG91dHNpZGUgaXRzIGNvbnRleHQsIHJhdGhlciBjb252ZXJ0IGl0
IHRvIHJhdyBtZXRob2QgKDE3NTQwOSkKKwkJCQkJCQkJY2xvc2VzdE1hdGNoID0gc2NvcGUuZW52
aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjbG9zZXN0TWF0Y2gu
b3JpZ2luYWwoKSwgKFJhd1R5cGVCaW5kaW5nKW51bGwpOworCQkJCQkJCX0KKwkJCQkJCQl0aGlz
LmJpbmRpbmcgPSBjbG9zZXN0TWF0Y2g7CisJCQkJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0
Y2hPcmlnaW5hbCA9IGNsb3Nlc3RNYXRjaC5vcmlnaW5hbCgpOworCQkJCQkJCWlmIChjbG9zZXN0
TWF0Y2hPcmlnaW5hbC5pc09yRW5jbG9zZWRCeVByaXZhdGVUeXBlKCkgJiYgIXNjb3BlLmlzRGVm
aW5lZEluTWV0aG9kKGNsb3Nlc3RNYXRjaE9yaWdpbmFsKSkgeworCQkJCQkJCQkvLyBpZ25vcmUg
Y2FzZXMgd2hlcmUgbWV0aG9kIGlzIHVzZWQgZnJvbSB3aXRoaW4gaW5zaWRlIGl0c2VsZiAoZS5n
LiBkaXJlY3QgcmVjdXJzaW9ucykKKwkJCQkJCQkJY2xvc2VzdE1hdGNoT3JpZ2luYWwubW9kaWZp
ZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjTG9jYWxseVVzZWQ7CisJCQkJCQkJfQog
CQkJCQkJfQogCQkJCQl9CiAJCQkJfQorCQkJCXJldHVybiBudWxsOwogCQkJfQorCQl9CisJCWlm
ICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJ
fQorCQkvLyBiYXNlIHR5cGUgY2Fubm90IHJlY2VpdmUgYW55IG1lc3NhZ2UKKwkJaWYgKHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlLmlzQmFzZVR5cGUoKSkgeworCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhp
cy5hcmd1bWVudFR5cGVzKTsKIAkJCXJldHVybiBudWxsOwogCQl9CiAJfQotCWlmICh0aGlzLmFj
dHVhbFJlY2VpdmVyVHlwZSA9PSBudWxsKSB7Ci0JCXJldHVybiBudWxsOworCQorCVR5cGVCaW5k
aW5nIG1ldGhvZFR5cGUgPSBmaW5kTWV0aG9kQmluZGluZyhzY29wZSk7CisJaWYgKG1ldGhvZFR5
cGUgIT0gbnVsbCAmJiBtZXRob2RUeXBlLmlzUG9seVR5cGUoKSkgeworCQl0aGlzLnJlc29sdmVk
VHlwZSA9IHRoaXMuYmluZGluZy5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNl
RW5kKTsKKwkJcmV0dXJuIG1ldGhvZFR5cGU7CiAJfQotCS8vIGJhc2UgdHlwZSBjYW5ub3QgcmVj
ZWl2ZSBhbnkgbWVzc2FnZQotCWlmICh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZS5pc0Jhc2VUeXBl
KCkpIHsKLQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZXJyb3JOb01ldGhvZEZvcih0aGlzLCB0
aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5hcmd1bWVudFR5cGVzKTsKLQkJcmV0dXJuIG51
bGw7Ci0JfQotCi0JZmluZE1ldGhvZEJpbmRpbmcoc2NvcGUpOwogCiAJaWYgKCF0aGlzLmJpbmRp
bmcuaXNWYWxpZEJpbmRpbmcoKSkgewogCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNz
ID09IG51bGwpIHsKQEAgLTcyMyw2ICs3MjEsMTIgQEAKIAkJc3dpdGNoICh0aGlzLmJpbmRpbmcu
cHJvYmxlbUlkKCkpIHsKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzIDoKIAkJCQli
cmVhazsgLy8gbm8gcmVzaWxpZW5jZSBvbiBhbWJpZ3VvdXMKKwkJCWNhc2UgUHJvYmxlbVJlYXNv
bnMuSW5mZXJyZWRBcHBsaWNhYmxlTWV0aG9kSW5hcHBsaWNhYmxlOgorCQkJY2FzZSBQcm9ibGVt
UmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmU6CisJCQkJLy8gR3JhYmJpbmcg
dGhlIGNsb3Nlc3QgbWF0Y2ggaW1wcm92ZXMgZXJyb3IgcmVwb3J0aW5nIGluIG5lc3RlZCBpbnZv
Y2F0aW9uIGNvbnRleHRzCisJCQkJaWYgKHRoaXMuZXhwcmVzc2lvbkNvbnRleHQgIT0gSU5WT0NB
VElPTl9DT05URVhUKQorCQkJCQlicmVhazsKKwkJCQkvLyRGQUxMLVRIUk9VR0gkCiAJCQljYXNl
IFByb2JsZW1SZWFzb25zLk5vdFZpc2libGUgOgogCQkJY2FzZSBQcm9ibGVtUmVhc29ucy5Ob25T
dGF0aWNSZWZlcmVuY2VJbkNvbnN0cnVjdG9ySW52b2NhdGlvbiA6CiAJCQljYXNlIFByb2JsZW1S
ZWFzb25zLk5vblN0YXRpY1JlZmVyZW5jZUluU3RhdGljQ29udGV4dCA6CkBAIC04NjAsMTYgKzg2
NCwyMCBAQAogCQkJCT8gdGhpcy5yZXNvbHZlZFR5cGUKIAkJCQk6IG51bGw7CiB9Ci0vKioKLSAq
IEZpbmQgdGhlIG1ldGhvZCBiaW5kaW5nOyAKLSAqIGlmIHRoaXMuaW5uZXJzTmVlZFVwZGF0ZSBh
bGxvdyBmb3IgdHdvIGF0dGVtcHRzIHdoZXJlIHRoZSBmaXJzdCByb3VuZCBtYXkgc3RvcAotICog
YWZ0ZXIgYXBwbGljYWJpbGl0eSBjaGVja2luZyAoMTguNS4xKSB0byBpbmNsdWRlIG1vcmUgaW5m
b3JtYXRpb24gaW50byB0aGUgZmluYWwKLSAqIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKDE4
LjUuMikuCi0gKi8KLXByb3RlY3RlZCB2b2lkIGZpbmRNZXRob2RCaW5kaW5nKEJsb2NrU2NvcGUg
c2NvcGUpIHsKLQl0aGlzLmJpbmRpbmcgPSB0aGlzLnJlY2VpdmVyLmlzSW1wbGljaXRUaGlzKCkK
LQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3RvciwgdGhpcy5hcmd1bWVu
dFR5cGVzLCB0aGlzKQorCitwcm90ZWN0ZWQgVHlwZUJpbmRpbmcgZmluZE1ldGhvZEJpbmRpbmco
QmxvY2tTY29wZSBzY29wZSkgeworCQorCQorCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIu
aXNJbXBsaWNpdFRoaXMoKSA/IAorCQkJc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxl
Y3RvciwgdGhpcy5hcmd1bWVudFR5cGVzLCB0aGlzKSAKIAkJCTogc2NvcGUuZ2V0TWV0aG9kKHRo
aXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCB0aGlzLmFyZ3VtZW50VHlwZXMs
IHRoaXMpOworCisJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKSAvLyBjYW4ndCBoYXBwZW4gPyBJ
IHRoaW5rIHdlIGFsd2F5cyBnZXQgYSBwcm9ibGVtIGJpbmRpbmcsIGFueXdheXMuCisJCXJldHVy
biBudWxsOworCQorCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQb2x5UGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKQorCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0aGlz
KTsKKwkKIAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5n
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAkKIAkvKiBUaGVyZSBhcmUgZW1iZWRkZWQg
YXNzdW1wdGlvbnMgaW4gdGhlIEpMUzggdHlwZSBpbmZlcmVuY2Ugc2NoZW1lIHRoYXQgYSBzdWNj
ZXNzZnVsIHNvbHV0aW9uIG9mIHRoZSB0eXBlIGVxdWF0aW9ucyByZXN1bHRzIGluIGFuCkBAIC04
ODQsMTEgKzg5Miw4IEBACiAJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9
IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2
ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiB0aGlzLmJpbmRpbmcgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgdGhpcy5iaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsKIAkJaWYgKCFjb21waWxlck9wdGlvbnMucG9zdFJlc29sdXRpb25SYXdU
eXBlQ29tcGF0aWJpbGl0eUNoZWNrKQotCQkJcmV0dXJuOworCQkJcmV0dXJuIHRoaXMuYmluZGlu
Zy5yZXR1cm5UeXBlOwogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGdtYiA9
IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZzsKLQkJSW5m
ZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQocGdtYik7Ci0JCWlmIChj
dHggPT0gbnVsbCB8fCBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5CSU5E
SU5HU19VUERBVEVEKQotCQkJcmV0dXJuOwogCQlpbnQgbGVuZ3RoID0gcGdtYi50eXBlQXJndW1l
bnRzID09IG51bGwgPyAwIDogcGdtYi50eXBlQXJndW1lbnRzLmxlbmd0aDsKIAkJYm9vbGVhbiBz
YXdSYXdUeXBlID0gZmFsc2U7CiAJCWZvciAoaW50IGkgPSAwOyAgaSA8IGxlbmd0aDsgaSsrKSB7
CkBAIC04OTcsNDAgKzkwMiwyNiBAQAogCQkJICAgZG9lcyBub3QgYXBwZWFyIGZ1bGx5IGhvb2tl
ZCB1cCBpbnRvIGlzQ29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZhbGVudCB0byBldmVyeXdoZXJl
LiBBdCB0aGUgbW9tZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2FwdHVyZS4KIAkJCSovICAgCiAJ
CQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgpKQotCQkJCXJldHVybjsKKwkJ
CQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiAJCQlpZiAocGdtYi50eXBlQXJndW1l
bnRzW2ldLmlzUmF3VHlwZSgpKQogCQkJCXNhd1Jhd1R5cGUgPSB0cnVlOwogCQl9CiAJCWlmICgh
c2F3UmF3VHlwZSkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlw
ZTsKIAkJbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFyZ3VtZW50
cy5sZW5ndGg7CiAJCWlmIChsZW5ndGggPT0gMCkKLQkJCXJldHVybjsKKwkJCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKIAkJVHlwZUJpbmRpbmcgW10gZmluYWxBcmd1bWVudFR5cGVz
ID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3Ro
OyBpKyspIHsKIAkJCVR5cGVCaW5kaW5nIGZpbmFsQXJndW1lbnRUeXBlID0gdGhpcy5hcmd1bWVu
dHNbaV0ucmVzb2x2ZWRUeXBlOwogCQkJaWYgKGZpbmFsQXJndW1lbnRUeXBlID09IG51bGwgfHwg
IWZpbmFsQXJndW1lbnRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpICAvLyBhbHJlYWR5IHNpZGVkIHdp
dGggdGhlIGRldmlsLgotCQkJCXJldHVybjsKKwkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVy
blR5cGU7CiAJCQlmaW5hbEFyZ3VtZW50VHlwZXNbaV0gPSBmaW5hbEFyZ3VtZW50VHlwZTsgCiAJ
CX0KLQkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcs
IGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJM
RSkKKwkJaWYgKHNjb3BlLnBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh0aGlzLmJpbmRpbmcs
IGZpbmFsQXJndW1lbnRUeXBlcywgZmFsc2UpID09IFNjb3BlLk5PVF9DT01QQVRJQkxFKQogCQkJ
dGhpcy5iaW5kaW5nID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHRoaXMuYmluZGluZy5vcmln
aW5hbCgpLCB0aGlzLmJpbmRpbmcuc2VsZWN0b3IsIGZpbmFsQXJndW1lbnRUeXBlcywgUHJvYmxl
bVJlYXNvbnMuTm90Rm91bmQpOwogCX0KLX0KLQotQE92ZXJyaWRlCi1wdWJsaWMgVHlwZUJpbmRp
bmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNj
b3BlIHNjb3BlKSB7Ci0JaWYgKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgewotCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gZ2V0SW5m
ZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZyk7
Ci0JCWlmIChjdHggIT0gbnVsbCAmJiBjdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRl
eHQxOC5UWVBFX0lORkVSUkVEKSB7Ci0JCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRhcmdldFR5cGU7
Ci0JCQlNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nID0gY3R4LmluZmVySW52b2NhdGlvblR5
cGUodGhpcywgKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5n
KTsKLQkJCWlmICh1cGRhdGVCaW5kaW5ncyh1cGRhdGVkQmluZGluZywgdGFyZ2V0VHlwZSkpIHsK
LQkJCQlBU1ROb2RlLnJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCB1cGRhdGVk
QmluZGluZywgc2NvcGUpOwotCQkJfQotCQl9Ci0JfQotCXJldHVybiB0aGlzLnJlc29sdmVkVHlw
ZTsKKwlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7CiB9CiAKIHB1YmxpYyB2b2lkIHNl
dEFjdHVhbFJlY2VpdmVyVHlwZShSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewpAQCAt
OTY2LDYgKzk1Nyw0NCBAQAogCSAqLwogCXJldHVybiBpc1BvbHlFeHByZXNzaW9uKHRoaXMuYmlu
ZGluZyk7CiB9CisKK3B1YmxpYyBib29sZWFuIGlzQm94aW5nQ29tcGF0aWJsZVdpdGgoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5hcmd1bWVudHNIYXZl
RXJyb3JzIHx8IHRoaXMuYmluZGluZyA9PSBudWxsIHx8ICF0aGlzLmJpbmRpbmcuaXNWYWxpZEJp
bmRpbmcoKSB8fCB0YXJnZXRUeXBlID09IG51bGwgfHwgc2NvcGUgPT0gbnVsbCkKKwkJcmV0dXJu
IGZhbHNlOworCWlmIChpc1BvbHlFeHByZXNzaW9uKCkgJiYgIXRhcmdldFR5cGUuaXNQcmltaXRp
dmVPckJveGVkUHJpbWl0aXZlVHlwZSgpKSAvLyBpLmUgaXQgaXMgZHVtYiB0byB0cmlnZ2VyIGlu
ZmVyZW5jZSwgY2hlY2tpbmcgYm94aW5nIGNvbXBhdGliaWxpdHkgYWdhaW5zdCBzYXkgQ29sbGVj
dG9yPD8gc3VwZXIgVCwgQSwgUj4uCisJCXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmln
aW5hbEV4cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhw
ZWN0ZWRUeXBlID0gdGFyZ2V0VHlwZTsKKwkJLy8gTm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBv
dmVybG9hZCByZXNvbHV0aW9uLiB0aGlzLmJpbmRpbmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJp
bmRpbmcgbWV0aG9kID0gaXNQb2x5RXhwcmVzc2lvbigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxs
b3dPcmlnaW5hbCgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmlu
ZGluZzsKKwkJaWYgKG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8
fCBtZXRob2QucmV0dXJuVHlwZSA9PSBudWxsIHx8ICFtZXRob2QucmV0dXJuVHlwZS5pc1ZhbGlk
QmluZGluZygpKQorCQkJcmV0dXJuIGZhbHNlOworCQlyZXR1cm4gc3VwZXIuaXNCb3hpbmdDb21w
YXRpYmxlKG1ldGhvZC5yZXR1cm5UeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKSwg
dGFyZ2V0VHlwZSwgdGhpcywgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhwZWN0ZWRU
eXBlID0gb3JpZ2luYWxFeHBlY3RlZFR5cGU7CisJfQorfQorCitwdWJsaWMgYm9vbGVhbiBpc0Nv
bXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGZpbmFsIFNjb3BlIHNjb3BlKSB7
CisJaWYgKHRoaXMuYXJndW1lbnRzSGF2ZUVycm9ycyB8fCB0aGlzLmJpbmRpbmcgPT0gbnVsbCB8
fCAhdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkgfHwgdGFyZ2V0VHlwZSA9PSBudWxsIHx8
IHNjb3BlID09IG51bGwpCisJCXJldHVybiBmYWxzZTsKKwlUeXBlQmluZGluZyBvcmlnaW5hbEV4
cGVjdGVkVHlwZSA9IHRoaXMuZXhwZWN0ZWRUeXBlOworCXRyeSB7CisJCXRoaXMuZXhwZWN0ZWRU
eXBlID0gdGFyZ2V0VHlwZTsKKwkJLy8gTm8gbmVlZCB0byB0dW5uZWwgdGhyb3VnaCBvdmVybG9h
ZCByZXNvbHV0aW9uLiB0aGlzLmJpbmRpbmcgaXMgdGhlIE1TTUIuCisJCU1ldGhvZEJpbmRpbmcg
bWV0aG9kID0gaXNQb2x5RXhwcmVzc2lvbigpID8gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgodGhpcy5iaW5kaW5nLnNoYWxsb3dPcmln
aW5hbCgpLCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlLCB0aGlzKSA6IHRoaXMuYmluZGluZzsK
KwkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZTsKKwkJaWYgKG1ldGhvZCA9PSBudWxsIHx8ICFtZXRo
b2QuaXNWYWxpZEJpbmRpbmcoKSB8fCAocmV0dXJuVHlwZSA9IG1ldGhvZC5yZXR1cm5UeXBlKSA9
PSBudWxsIHx8ICFyZXR1cm5UeXBlLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4gZmFsc2U7
CisJCWlmIChtZXRob2QgPT0gc2NvcGUuZW52aXJvbm1lbnQoKS5hcnJheUNsb25lKQorCQkJcmV0
dXJuVHlwZSA9IHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlOworCQlyZXR1cm4gcmV0dXJuVHlwZSAh
PSBudWxsICYmIHJldHVyblR5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3VyY2VFbmQpLmlzQ29t
cGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgc2NvcGUpOworCX0gZmluYWxseSB7CisJCXRoaXMuZXhw
ZWN0ZWRUeXBlID0gb3JpZ2luYWxFeHBlY3RlZFR5cGU7CisJfQorfQorCiAvKiogVmFyaWFudCBv
ZiBpc1BvbHlFeHByZXNzaW9uKCkgdG8gYmUgdXNlZCBkdXJpbmcgdHlwZSBpbmZlcmVuY2UsIHdo
ZW4gYSByZXNvbHV0aW9uIGNhbmRpZGF0ZSBleGlzdHMuICovCiBwdWJsaWMgYm9vbGVhbiBpc1Bv
bHlFeHByZXNzaW9uKE1ldGhvZEJpbmRpbmcgcmVzb2x1dGlvbkNhbmRpZGF0ZSkgewogCWlmICh0
aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IEFTU0lHTk1FTlRfQ09OVEVYVCAmJiB0aGlzLmV4cHJl
c3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKQEAgLTEwMjksMjEgKzEwNTgsMTAg
QEAKIAlyZXR1cm4gdGhpcy5yZWNlaXZlci5pc0ltcGxpY2l0VGhpcygpOwogfQogLy8gLS0gaW50
ZXJmYWNlIEludm9jYXRpb246IC0tCi1wdWJsaWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gcmVwb3J0RXJyb3JzLCBTY29wZSBzY29wZSkgewot
CWlmIChyZXBvcnRFcnJvcnMpIHsKLQkJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsKQotCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJtZXRob2QgaXMgdW5l
eHBlY3RlZGx5IHVucmVzb2x2ZWQiLCB0aGlzKTsgLy8kTk9OLU5MUy0xJAotCQllbHNlIGlmICgh
dGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCi0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIo
KS5pbnZhbGlkTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0JfQorcHVibGljIE1ldGhvZEJp
bmRpbmcgYmluZGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewogCXJl
dHVybiB0aGlzLmJpbmRpbmc7CiB9Ci1wdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsK
LQlyZXR1cm4gdGhpcy5hcmd1bWVudHM7Ci19Ci1wdWJsaWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0
RXhwcmVzc2lvbkNvbnRleHQoKSB7Ci0JcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7Ci19
CisKIHB1YmxpYyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsK
IAlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQogCQl0aGlzLmluZmVyZW5jZUNv
bnRleHRzID0gbmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CkBAIC0xMDU0LDMyICsxMDcyLDExIEBA
CiAJCXJldHVybiBudWxsOwogCXJldHVybiAoSW5mZXJlbmNlQ29udGV4dDE4KSB0aGlzLmluZmVy
ZW5jZUNvbnRleHRzLmdldChtZXRob2QpOwogfQotcHVibGljIGJvb2xlYW4gdXNlc0luZmVyZW5j
ZSgpIHsKLQlyZXR1cm4gKHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykgCi0JCQkmJiBnZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHRoaXMuYmluZGluZykgIT0gbnVsbDsKK3B1YmxpYyBF
eHByZXNzaW9uW10gYXJndW1lbnRzKCkgeworCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIH0KLXB1
YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcs
IFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQlib29sZWFuIGhhc1VwZGF0ZSA9IHRoaXMuYmlu
ZGluZyAhPSB1cGRhdGVkQmluZGluZzsKLQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyAhPSBu
dWxsKSB7Ci0JCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSAoSW5mZXJlbmNlQ29udGV4dDE4KXRo
aXMuaW5mZXJlbmNlQ29udGV4dHMucmVtb3ZlS2V5KHRoaXMuYmluZGluZyk7Ci0JCWlmIChjdHgg
IT0gbnVsbCAmJiB1cGRhdGVkQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewotCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJp
bmRpbmcsIGN0eCk7Ci0JCQkvLyBzb2x1dGlvbiBtYXkgaGF2ZSBjb21lIGZyb20gYW4gb3V0ZXIg
aW5mZXJlbmNlLCBtYXJrIG5vdyB0aGF0IHRoaXMgKGlubmVyKSBpcyBkb25lIChidXQgbm90IGRl
ZXAgaW5uZXJzKToKLQkJCWhhc1VwZGF0ZSB8PSBjdHgucmVnaXN0ZXJTb2x1dGlvbih0YXJnZXRU
eXBlLCB1cGRhdGVkQmluZGluZyk7Ci0JCX0KLQl9Ci0JdGhpcy5iaW5kaW5nID0gdXBkYXRlZEJp
bmRpbmc7Ci0JdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5yZXR1cm5UeXBlOwot
CXJldHVybiBoYXNVcGRhdGU7Ci19Ci1wdWJsaWMgYm9vbGVhbiBpbm5lcnNOZWVkVXBkYXRlKCkg
ewotCXJldHVybiB0aGlzLmlubmVySW5mZXJlbmNlSGVscGVyICE9IG51bGw7Ci19Ci1wdWJsaWMg
dm9pZCBpbm5lclVwZGF0ZURvbmUoKSB7Ci0JdGhpcy5pbm5lckluZmVyZW5jZUhlbHBlciA9IG51
bGw7Ci19Ci1wdWJsaWMgSW5uZXJJbmZlcmVuY2VIZWxwZXIgaW5uZXJJbmZlcmVuY2VIZWxwZXIo
KSB7Ci0JcmV0dXJuIHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXI7CitwdWJsaWMgRXhwcmVzc2lv
bkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CisJcmV0dXJuIHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQ7CiB9CiAvLyAtLSBJbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiBwdWJsaWMg
SW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDU5
ZmZiMjAuLmIyZmJkM2IgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHBy
ZXNzaW9uLmphdmEKQEAgLTQxMCwxMCArNDEwLDYgQEAKIAkJCQlpZiAoKHRoaXMuYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKSkgPT0gbnVsbCl7CiAJCQkJCWhh
c0Vycm9yID0gdHJ1ZTsKIAkJCQl9Ci0JCQkJaWYgKHNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzggJiYgKGFyZ3VtZW50LmlzUG9seUV4cHJlc3Npb24oKSB8fCAoYXJndW1l
bnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmICgoSW52b2NhdGlvbilhcmd1bWVudCkudXNlc0lu
ZmVyZW5jZSgpKSkpIHsKLQkJCQkJaWYgKHRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPT0gbnVs
bCkKLQkJCQkJCXRoaXMuaW5uZXJJbmZlcmVuY2VIZWxwZXIgPSBuZXcgSW5uZXJJbmZlcmVuY2VI
ZWxwZXIoKTsKLQkJCQl9CiAJCQl9CiAJCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZl
cmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQppbmRleCBlOTQ2NWYzLi4xZGIyNjY4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5j
ZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQpAQCAtNzI3LDE4ICs3MjcsNiBAQAogCQl9CiAJfQogCi0JcHVibGljIE1ldGhvZEJpbmRpbmcg
cHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdChTY29wZSBzY29wZSkgewotCQl0cnkgewotCQkJc2V0
RXhwcmVzc2lvbkNvbnRleHQoSU5WT0NBVElPTl9DT05URVhUKTsKLQkJCXRoaXMuYmluZGluZyA9
IG51bGw7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IHRydWU7Ci0JCQlyZXNvbHZlVHlwZSh0
aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJCXJldHVybiB0aGlzLmJpbmRpbmc7Ci0JCX0gZmluYWxs
eSB7Ci0JCQl0aGlzLnRyaWFsUmVzb2x1dGlvbiA9IGZhbHNlOwotCQl9Ci0JfQotCiAJcHVibGlj
IGJvb2xlYW4gaXNDb25zdHJ1Y3RvclJlZmVyZW5jZSgpIHsKIAkJcmV0dXJuIENoYXJPcGVyYXRp
b24uZXF1YWxzKHRoaXMuc2VsZWN0b3IsICBDb25zdGFudFBvb2wuSW5pdCk7CiAJfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2Nr
U2NvcGUuamF2YQppbmRleCBkNjE4NTYzLi4xZmM3OGYxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0Jsb2NrU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2NvcGUuamF2YQpA
QCAtMTAzNCwxMSArMTAzNCw3IEBACiBwcml2YXRlIExpc3QgdHJhY2tpbmdWYXJpYWJsZXM7IC8v
IGNhbiBiZSBudWxsIGlmIG5vIHJlc291cmNlcyBhcmUgdHJhY2tlZAogLyoqIFVzZWQgb25seSBk
dXJpbmcgYW5hbHlzZUNvZGUgYW5kIG9ubHkgZm9yIGNoZWNraW5nIGlmIGEgcmVzb3VyY2Ugd2Fz
IGNsb3NlZCBpbiBhIGZpbmFsbHlCbG9jay4gKi8KIHB1YmxpYyBGbG93SW5mbyBmaW5hbGx5SW5m
bzsKLXB1YmxpYyBib29sZWFuIHNob3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbDsKIAotcHVibGlj
IGJvb2xlYW4gc2hvdWxkQ29uc3VsdFNoYWRvd09yaWdpbmFsKCkgewotCXJldHVybiB0aGlzLnNo
b3VsZENvbnN1bHRTaGFkb3dPcmlnaW5hbDsKLX0KIC8qKgogICogUmVnaXN0ZXIgYSB0cmFja2lu
ZyB2YXJpYWJsZSBhbmQgY29tcHV0ZSBpdHMgaWQuCiAgKi8KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCBh
MTMyYzkyLi5jMWNhOWM2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBAIC0xMDQsNyArMTA0LDcgQEAKIAkJ
CQl9CiAJCQl9CiAJCQlpZiAoaSA9PSAwKQotCQkJCXJldHVybiBCaW5kaW5nLk5PX1RZUEVTOwor
CQkJCXJldHVybiBzaW1wbGVVcHBlciAhPSBudWxsID8gbmV3IFR5cGVCaW5kaW5nW10geyBzaW1w
bGVVcHBlciB9IDogQmluZGluZy5OT19UWVBFUzsKIAkJCWlmIChpID09IDEgJiYgc2ltcGxlVXBw
ZXIgIT0gbnVsbCkKIAkJCQlyZXR1cm4gbmV3IFR5cGVCaW5kaW5nW10geyBzaW1wbGVVcHBlciB9
OyAvLyBubyBudWxsSGludHMgc2luY2Ugbm90IGEgcmVmZXJlbmNlIHR5cGUKIAkJCWlmIChpIDwg
cmlnaHRzLmxlbmd0aCkKQEAgLTQ1Niw4ICs0NTYsNiBAQAogCQkJaWYgKCFpbmNvcnBvcmF0ZShj
b250ZXh0LCBmcmVzaEJvdW5kcywgZnJlc2hCb3VuZHMpKQogCQkJCXJldHVybiBmYWxzZTsKIAot
CQkJdGhpcy5jYXB0dXJlcy5jbGVhcigpOwotCQkJCiAJCQkvLyBNZXJnZSB0aGUgYm91bmRzIGlu
dG8gb25lIGluY29ycG9yYXRlZCBnZW5lcmF0aW9uLgogCQkJZmluYWwgaW50IGluY29ycG9yYXRl
ZExlbmd0aCA9IHRoaXMuaW5jb3Jwb3JhdGVkQm91bmRzLmxlbmd0aDsKIAkJCWZpbmFsIGludCB1
bmluY29ycG9yYXRlZExlbmd0aCA9IGZyZXNoQm91bmRzLmxlbmd0aDsKQEAgLTU4Myw3ICs1ODEs
OSBAQAogCQl3aGlsZSAoY2FwdEl0ZXIuaGFzTmV4dCgpKSB7CiAJCQlFbnRyeTxQYXJhbWV0ZXJp
emVkVHlwZUJpbmRpbmcsIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZz4gY2FwdCA9IGNhcHRJdGVy
Lm5leHQoKTsKIAkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBnQWxwaGEgPSBjYXB0LmdldEtl
eSgpOwotCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gY2FwdC5nZXRWYWx1ZSgpOwor
CQkJLy8gV2UgY29tZSBpbiB3aXRoIGNhcHR1cmUoZ0EpLCB3ZSBuZWVkIHRvIHdvcmsgd2l0aCBn
QSBiZWxvdy4gSXQgd2FzIG5lY2Vzc2FyeSB0byBlc3RhYmxpc2ggY2FwdHVyZSBhdCB0aGUgY2Fs
bCBzaXRlLgorCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGNnQSA9IGNhcHQuZ2V0VmFsdWUo
KTsKKwkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBnQSA9IChQYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcpIGNnQS51bmNhcHR1cmUoY29udGV4dC5zY29wZSk7CiAJCQlSZWZlcmVuY2VCaW5kaW5n
IGcgPSAoUmVmZXJlbmNlQmluZGluZykgZ0Eub3JpZ2luYWwoKTsKIAkJCWZpbmFsIFR5cGVWYXJp
YWJsZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gZy50eXBlVmFyaWFibGVzKCk7CiAJCQkvLyBjb25z
dHJ1Y3QgdGhldGEgPSBbUDE6PWFscGhhMSwuLi5dCkBAIC02MDIsNiArNjAyLDcgQEAKIAkJCQlh
ZGRCb3VuZHMocGkuZ2V0VHlwZUJvdW5kcyhhbHBoYSwgdGhldGEpLCBjb250ZXh0LmVudmlyb25t
ZW50KTsKIAogCQkJCVR5cGVCaW5kaW5nIGFpID0gZ0EuYXJndW1lbnRzW2ldOworCQkJCVR5cGVC
aW5kaW5nIGNhaSA9IGNnQS5hcmd1bWVudHNbaV07CiAJCQkJaWYgKGFpIGluc3RhbmNlb2YgV2ls
ZGNhcmRCaW5kaW5nKSB7CiAJCQkJCVdpbGRjYXJkQmluZGluZyB3aWxkY2FyZEJpbmRpbmcgPSAo
V2lsZGNhcmRCaW5kaW5nKWFpOwogCQkJCQlUeXBlQmluZGluZyB0ID0gd2lsZGNhcmRCaW5kaW5n
LmJvdW5kOwpAQCAtNjEzLDcgKzYxNCwxNCBAQAogCQkJCQkJCWl0ID0gdGhyZWUuc2FtZUJvdW5k
cy5pdGVyYXRvcigpOwogCQkJCQkJCXdoaWxlIChpdC5oYXNOZXh0KCkpIHsKIAkJCQkJCQkJVHlw
ZUJvdW5kIGJvdW5kID0gaXQubmV4dCgpOwotCQkJCQkJCQlpZiAoIShib3VuZC5yaWdodCBpbnN0
YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSkKKwkJCQkJCQkJLyogV2l0aCB0aGUgZXhwZWN0ZWQg
dHlwZSdzIGRlY2xhcmVkIHR5cGUgYmVpbmcgQ29sbGVjdG9yPD8gc3VwZXIgVCwgQSwgUj4gYW5k
IGdBbHBoYSBiZWluZyBDb2xsZWN0b3I8VCMwLD8jMSxMaXN0PFQjMD4jMj4gYW5kIGNnQSBiZWlu
ZworCQkJCQkJCQkgICBDb2xsZWN0b3I8VCMwLGNhcHR1cmUjMS1vZiA/LExpc3Q8VCMwPj4sIHdp
dGhvdXQgdGhlIGNvbnN0cmFpbnQgcmVkdWN0aW9uIGJlbG93IC0gd2Ugd2lsbCBuZXZlciBkaXNj
b3ZlciBBIHRvIGJlIGNhcHR1cmUjMS1vZiA/IGFuZAorCQkJCQkJCQkgICBjbGFpbSBBIGlzIGps
Ty4gU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc0
NDQjYzI0IC0gIzI3CisJCQkJCQkJCSovCisJCQkJCQkJCWlmICghcmVkdWNlT25lQ29uc3RyYWlu
dChjb250ZXh0LCBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJvdW5kLnJpZ2h0LCBjYWks
IFJlZHVjdGlvblJlc3VsdC5TQU1FKSkpCisJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJCQkJ
CS8vIE91ciA9IHJlZHVjdGlvbiB0cmFuc2l0aXZlbHkgYWRkcyBhIG5ldyBib3VuZCB0aGF0IG5l
Y2Vzc2l0YXRlcyB0aGUgY2hlY2sgYmVsb3cgZm9yIGNhcHR1cmUuIAorCQkJCQkJCQlpZiAoIShi
b3VuZC5yaWdodCBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSAmJiAhYm91bmQucmlnaHQu
aXNDYXB0dXJlKCkpCiAJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CiAJCQkJCQkJfQogCQkJCQkJfQpA
QCAtNjY4LDYgKzY3Niw3IEBACiAJCQkJfQogCQkJfQogCQl9CisJCXRoaXMuY2FwdHVyZXMuY2xl
YXIoKTsKIAkJcmV0dXJuIHRydWU7CiAJfQogCkBAIC05NTcsNiArOTY2LDIwIEBACiAJCXJldHVy
biB0aHJlZS5maW5kU2luZ2xlV3JhcHBlclR5cGUoKTsKIAl9CiAKKwlwcml2YXRlIFR5cGVCaW5k
aW5nIGFwcGx5SW5zdGFudGlhdGlvbnMoVHlwZUJpbmRpbmcgdHlwZSkgeworCQlpZiAodHlwZS5p
c1Byb3BlclR5cGUodHJ1ZSkpCisJCQlyZXR1cm4gdHlwZTsKKwkKKwkJSXRlcmF0b3I8SW5mZXJl
bmNlVmFyaWFibGU+IHZhcmlhYmxlSXQgPSB0aGlzLmJvdW5kc1BlclZhcmlhYmxlLmtleVNldCgp
Lml0ZXJhdG9yKCk7CisJCXdoaWxlICh2YXJpYWJsZUl0Lmhhc05leHQoKSkgeworCQkJSW5mZXJl
bmNlVmFyaWFibGUgaW5mZXJlbmNlVmFyaWFibGUgPSB2YXJpYWJsZUl0Lm5leHQoKTsKKwkJCVR5
cGVCaW5kaW5nIGluc3RhbnRpYXRpb24gPSBnZXRJbnN0YW50aWF0aW9uKGluZmVyZW5jZVZhcmlh
YmxlLCBudWxsKTsKKwkJCWlmIChpbnN0YW50aWF0aW9uICE9IG51bGwpCisJCQkJdHlwZSA9IHR5
cGUuc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKGluZmVyZW5jZVZhcmlhYmxlLCBpbnN0YW50
aWF0aW9uKTsKKwkJfQorCQlyZXR1cm4gdHlwZTsKKwl9CisJCiAJLy8gdGhpcyBjb25kaXRpb24g
aXMganVzdCB3YXkgdG9vIGNvbXBsZXggdG8gY2hlY2sgaXQgaW4tbGluZToKIAlwdWJsaWMgYm9v
bGVhbiBjb25kaXRpb24xOF81XzJfYnVsbGV0XzNfM18xKEluZmVyZW5jZVZhcmlhYmxlIGFscGhh
LCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CiAJCS8vIFQgaXMgYSByZWZlcmVuY2UgdHlwZSwg
YnV0IGlzIG5vdCBhIHdpbGRjYXJkLXBhcmFtZXRlcml6ZWQgdHlwZSwgYW5kIGVpdGhlciAKQEAg
LTk5Miw4ICsxMDE1LDE2IEBACiAJCQkJZm9yIChpbnQgaj1pKzE7IGo8bGVuOyBqKyspIHsKIAkJ
CQkJVHlwZUJpbmRpbmcgczIgPSBzdXBlckJvdW5kcy5nZXQoaikucmlnaHQ7CiAJCQkJCVR5cGVC
aW5kaW5nW10gc3VwZXJzID0gc3VwZXJUeXBlc1dpdGhDb21tb25HZW5lcmljVHlwZShzMSwgczIp
OwotCQkJCQlpZiAoc3VwZXJzICE9IG51bGwgJiYgIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhz
dXBlcnNbMF0sIHN1cGVyc1sxXSkpCi0JCQkJCQlyZXR1cm4gdHJ1ZTsKKwkJCQkJaWYgKHN1cGVy
cyAhPSBudWxsKSB7CisJCQkJCQkvKiBIYXNoTWFwPEsjOCxWIzk+IGFuZCBIYXNoTWFwPEsjOCxB
cnJheUxpc3Q8VD4+IHdpdGggYW4gaW5zdGFudGlhdGlvbiBmb3IgVjkgPSBBcnJheUxpc3Q8VD4g
YWxyZWFkeSBpbiB0aGUgCisJCQkJCQkgICBib3VuZCBzZXQgc2hvdWxkIG5vdCBiZSBzZWVuIGFz
IHR3byBkaWZmZXJlbnQgcGFyYW1ldGVyaXphdGlvbnMgb2YgdGhlIHNhbWUgZ2VuZXJpYyBjbGFz
cyBvciBpbnRlcmZhY2UuCisJCQkJCQkgICBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzMjYyNiBmb3IgYSB0ZXN0IHRoYXQgdHJpZ2dlcnMgdGhpcyBj
b25kaXRpb24uCisJCQkJCQkqLworCQkJCQkJc3VwZXJzWzBdID0gYXBwbHlJbnN0YW50aWF0aW9u
cyhzdXBlcnNbMF0pOworCQkJCQkJc3VwZXJzWzFdID0gYXBwbHlJbnN0YW50aWF0aW9ucyhzdXBl
cnNbMV0pOworCQkJCQkJaWYgKCFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoc3VwZXJzWzBdLCBz
dXBlcnNbMV0pKQorCQkJCQkJCXJldHVybiB0cnVlOworCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRl
eCA2MjBmNDY2Li4yODIwNjM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRF
eHByZXNzaW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhLmphdmEKQEAgLTE3LDE4ICsxNywxMyBAQAogaW1wb3J0IGphdmEudXRpbC5M
aXN0OwogaW1wb3J0IGphdmEudXRpbC5TZXQ7CiAKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuQVNUVmlzaXRvcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkFsbG9jYXRpb25FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbkNvbnRleHQ7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5GdW5jdGlvbmFs
RXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
Lkludm9jYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5MYW1iZGFFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuUmVmZXJlbmNlRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LlJldHVyblN0YXRlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlN0YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxOC5TdXNwZW5kZWRJ
bmZlcmVuY2VSZWNvcmQ7CiAKIC8qKgpAQCAtNTYsNDEgKzUxLDggQEAKIAogCXB1YmxpYyBPYmpl
Y3QgcmVkdWNlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KSB0aHJvd3MgSW5m
ZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCS8vIEpMUyAxOC4yLjEKLQkJcHJvcGVyOgogCQlp
ZiAodGhpcy5yaWdodC5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCVR5cGVCaW5kaW5nIGV4cHJU
eXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKLQkJCWlmIChleHByVHlwZSA9PSBudWxsKSB7
Ci0JCQkJLy8gaWYgd2UgZ2V0IGhlcmUgZm9yIHNvbWUga2luZHMgb2YgcG9seSBleHByZXNzaW9u
cyAoaW5jbC4gQ29uZGl0aW9uYWxFeHByZXNzaW9uKSwKLQkJCQkvLyB0aGVuIG90aGVyIHdheXMg
Zm9yIGNoZWNraW5nIGNvbXBhdGliaWxpdHkgYXJlIG5lZWRlZDoKLSAgICAgICAgICAgICAgICBp
ZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKLSAgICAgICAg
ICAgICAgICAgICAgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsK
LSAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNmLiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25U
ZXN0LnRlc3Q0MTI0NTMoKQotICAgICAgICAgICAgICAgICAgICAgICAgTGFtYmRhRXhwcmVzc2lv
biBjb3B5ID0gKChMYW1iZGFFeHByZXNzaW9uKSB0aGlzLmxlZnQpLmdldFJlc29sdmVkQ29weUZv
ckluZmVyZW5jZVRhcmdldGluZyh0aGlzLnJpZ2h0KTsKLSAgICAgICAgICAgICAgICAgICAgICAg
IHJldHVybiAoY29weSAhPSBudWxsICYmIGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgY29w
eS5yZXNvbHZlZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAg
ICAgICAgICAgICAgIH0KLSAgICAgICAgICAgICAgICB9Ci0gICAgICAgICAgICAgICAgcmV0dXJu
IHRoaXMubGVmdC5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQu
c2NvcGUpID8gVFJVRSA6IEZBTFNFOwotCQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNWYWxpZEJp
bmRpbmcoKSkgewotCQkJCXJldHVybiBGQUxTRTsKLQkJCX0KLQkJCWlmIChpc0NvbXBhdGlibGVX
aXRoSW5Mb29zZUludm9jYXRpb25Db250ZXh0KGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBpbmZlcmVu
Y2VDb250ZXh0KSkgewotCQkJCXJldHVybiBUUlVFOwotCQkJfSBlbHNlIGlmICh0aGlzLmxlZnQg
aW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbiAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVz
c2lvbigpKSB7Ci0JCQkJLy8gaGFsZi1yZXNvbHZlZCBkaWFtb25kIGhhcyBhIHJlc29sdmVkVHlw
ZSwgYnV0IHRoYXQgbWF5IG5vdCBiZSB0aGUgZmluYWwgd29yZCwgdHJ5IG9uZSBtb3JlIHN0ZXAg
b2YgcmVzb2x1dGlvbjoKLSAgICAgICAgICAgIAlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoKEFs
bG9jYXRpb25FeHByZXNzaW9uKSB0aGlzLmxlZnQpLmJpbmRpbmcodGhpcy5yaWdodCwgZmFsc2Us
IG51bGwpOwotICAgICAgICAgICAgCXJldHVybiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcu
ZGVjbGFyaW5nQ2xhc3MuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250
ZXh0LnNjb3BlKSkgPyBUUlVFIDogRkFMU0U7Ci0gICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMu
bGVmdCBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJlc3Npb24o
KSkgewotICAgICAgICAgICAgCUludm9jYXRpb24gaW52b2MgPSAoSW52b2NhdGlvbikgdGhpcy5s
ZWZ0OwotICAgICAgICAgICAgCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jLmJpbmRpbmco
dGhpcy5yaWdodCwgZmFsc2UsIG51bGwpOwotICAgICAgICAgICAgCWlmIChiaW5kaW5nIGluc3Rh
bmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0gICAgICAgICAgICAJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QgPSAoUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBiaW5kaW5nOwotCQkJCQlJbmZlcmVuY2VDb250ZXh0MTgg
bGVmdEN0eCA9IGludm9jLmdldEluZmVyZW5jZUNvbnRleHQobWV0aG9kKTsKLSAgICAgICAgICAg
IAkJaWYgKGxlZnRDdHguc3RlcENvbXBsZXRlZCA8IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lO
RkVSUkVEKSB7Ci0gICAgICAgICAgICAJCQlicmVhayBwcm9wZXI7IC8vIGZhbGwgdGhyb3VnaCBp
bnRvIG5lc3RlZCBpbmZlcmVuY2UgYmVsb3cgKG5vdCBleHBsaWNpdCBpbiB0aGUgc3BlYyEpCi0g
ICAgICAgICAgICAJCX0KLSAgICAgICAgICAgIAl9Ci0gICAgICAgICAgICB9Ci0JCQlyZXR1cm4g
RkFMU0U7CisJCQlyZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdodCwg
aW5mZXJlbmNlQ29udGV4dC5zY29wZSkgfHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0aWJsZVdp
dGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7CiAJ
CX0KIAkJaWYgKCFjYW5CZVBvbHlFeHByZXNzaW9uKHRoaXMubGVmdCkpIHsKIAkJCVR5cGVCaW5k
aW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKQEAgLTEwMiw3ICs2NCw3IEBA
CiAJCQkvLyAtIHBhcmVudGhlc2l6ZWQgZXhwcmVzc2lvbiA6IHRoZXNlIGFyZSB0cmFuc3BhcmVu
dCBpbiBvdXIgQVNUCiAJCQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgSW52b2NhdGlvbikgewog
CQkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSB0aGlzLmxlZnQ7Ci0JCQkJ
TWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0aGlzLnJp
Z2h0LCBmYWxzZSwgbnVsbCk7CisJCQkJTWV0aG9kQmluZGluZyBwcmV2aW91c01ldGhvZCA9IGlu
dm9jYXRpb24uYmluZGluZyh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKIAkJ
CQlpZiAocHJldmlvdXNNZXRob2QgPT0gbnVsbCkgIAkvLyBjYW4gaGFwcGVuLCBlLmcuLCBpZiBp
bnNpZGUgYSBjb3BpZWQgbGFtYmRhIHdpdGggaWdub3JlZCBlcnJvcnMKIAkJCQkJcmV0dXJuIG51
bGw7IAkJCQkvLyAtPiBwcm9jZWVkIHdpdGggbm8gbmV3IGNvbnN0cmFpbnRzCiAJCQkJTWV0aG9k
QmluZGluZyBtZXRob2QgPSBwcmV2aW91c01ldGhvZDsKQEAgLTEyNyw4ICs4OSwxMSBAQAogCQkJ
CQkJCQlyZXR1cm4gRkFMU0U7CiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5j
cmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJ
CQkJCX0KKwkJCQkJCWlmIChpbm5lckN0eC5zdGVwQ29tcGxldGVkID49IEluZmVyZW5jZUNvbnRl
eHQxOC5UWVBFX0lORkVSUkVEKSB7CisJCQkJCQkJLy8gVGhlIGNvbnN0cmFpbnRzIGFuZCBpbml0
aWFsIGJvdW5kcyB0aGF0IHdvdWxkIGVmZmVjdGl2ZWx5IHJlZHVjZSB0byBiMyBhcmUgYWxyZWFk
eSB0cmFuc2ZlcnJlZCB0byBjdXJyZW50IGNvbnRleHQgZHVyaW5nIEMgU2V0IGNvbnN0cnVjdGlv
bi4KKwkJCQkJCQlyZXR1cm4gVFJVRTsKKwkJCQkJCX0KIAkJCQkJCWluZmVyZW5jZUNvbnRleHQu
aW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0JCQkJCQlpbm5lckN0eC5v
dXRlckNvbnRleHQgPSBpbmZlcmVuY2VDb250ZXh0OwogCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNE
aWFtb25kID0gbWV0aG9kLmlzQ29uc3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVz
c2lvbihtZXRob2QpOwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5j
ZUNvbnRleHQsIG1ldGhvZCwgYXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBpbmZlcmVuY2VDb250
ZXh0LmluZmVyZW5jZUtpbmQpOwpAQCAtMTg4LDEzICsxNTMsOCBAQAogCQkJCX0KIAkJCQlpZiAo
ZnVuY3Rpb25UeXBlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgewogCQkJCQlUeXBl
QmluZGluZyByID0gZnVuY3Rpb25UeXBlLnJldHVyblR5cGU7Ci0JCQkJCUV4cHJlc3Npb25bXSBl
eHByczsKLQkJCQkJaWYgKGxhbWJkYS5ib2R5KCkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0J
CQkJCQlleHBycyA9IG5ldyBFeHByZXNzaW9uW10geyhFeHByZXNzaW9uKWxhbWJkYS5ib2R5KCl9
OwotCQkJCQl9IGVsc2UgewotCQkJCQkJZXhwcnMgPSBsYW1iZGEucmVzdWx0RXhwcmVzc2lvbnMo
KTsKLQkJCQkJfQotCQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGV4cHJzLmxlbmd0aDsgaSsrKSB7
CisJCQkJCUV4cHJlc3Npb25bXSBleHBycyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOwor
CQkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gZXhwcnMgPT0gbnVsbCA/IDAgOiBleHBycy5s
ZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCQkJRXhwcmVzc2lvbiBleHByID0gZXhwcnNb
aV07CiAJCQkJCQlpZiAoci5pc1Byb3BlclR5cGUodHJ1ZSkgJiYgZXhwci5yZXNvbHZlZFR5cGUg
IT0gbnVsbCkgewogCQkJCQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gZXhwci5yZXNvbHZlZFR5
cGU7CkBAIC0yMTcsNyArMTc3LDcgQEAKIAkJcmV0dXJuIEZBTFNFOwogCX0KIAotCXB1YmxpYyBS
ZWZlcmVuY2VCaW5kaW5nIGZpbmRHcm91bmRUYXJnZXRUeXBlKEluZmVyZW5jZUNvbnRleHQxOCBp
bmZlcmVuY2VDb250ZXh0LCBCbG9ja1Njb3BlIHNjb3BlLAorCXB1YmxpYyBzdGF0aWMgUmVmZXJl
bmNlQmluZGluZyBmaW5kR3JvdW5kVGFyZ2V0VHlwZShJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJl
bmNlQ29udGV4dCwgQmxvY2tTY29wZSBzY29wZSwKIAkJCQkJCQkJCQkJCQlMYW1iZGFFeHByZXNz
aW9uIGxhbWJkYSwgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHRhcmdldFR5cGVXaXRoV2lsZENh
cmRzKQogCXsKIAkJaWYgKGxhbWJkYS5hcmd1bWVudHNUeXBlRWxpZGVkKCkpIHsKQEAgLTI1NCwx
MSArMjE0LDkgQEAKIAkJTWV0aG9kQmluZGluZyBmdW5jdGlvblR5cGUgPSB0LmdldFNpbmdsZUFi
c3RyYWN0TWV0aG9kKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIHRydWUpOwogCQlpZiAoZnVuY3Rp
b25UeXBlID09IG51bGwpCiAJCQlyZXR1cm4gRkFMU0U7Ci0JCS8vIHBvdGVudGlhbGx5LWFwcGxp
Y2FibGUgbWV0aG9kIGZvciB0aGUgbWV0aG9kIHJlZmVyZW5jZSB3aGVuIHRhcmdldGluZyBUICgx
NS4xMy4xKSwKLQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVu
Y2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUpOwotCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCi0JCQlyZXR1cm4gRkFM
U0U7CisKIAkJaWYgKHJlZmVyZW5jZS5pc0V4YWN0TWV0aG9kUmVmZXJlbmNlKCkpIHsKKwkJCU1l
dGhvZEJpbmRpbmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmdldEV4YWN0TWV0
aG9kKCk7IAogCQkJTGlzdDxDb25zdHJhaW50Rm9ybXVsYT4gbmV3Q29uc3RyYWludHMgPSBuZXcg
QXJyYXlMaXN0PENvbnN0cmFpbnRGb3JtdWxhPigpOwogCQkJVHlwZUJpbmRpbmdbXSBwID0gZnVu
Y3Rpb25UeXBlLnBhcmFtZXRlcnM7CiAJCQlpbnQgbiA9IHAubGVuZ3RoOwpAQCAtMjY4LDYgKzIy
Niw4IEBACiAJCQlpZiAobiA9PSBrKzEpIHsKIAkJCQluZXdDb25zdHJhaW50cy5hZGQoQ29uc3Ry
YWludFR5cGVGb3JtdWxhLmNyZWF0ZShwWzBdLCByZWZlcmVuY2UubGhzLnJlc29sdmVkVHlwZSwg
Q09NUEFUSUJMRSkpOwogCQkJCW9mZnNldCA9IDE7CisJCQl9IGVsc2UgaWYgKG4gIT0gaykgewor
CQkJCXJldHVybiBGQUxTRTsKIAkJCX0KIAkJCWZvciAoaW50IGkgPSBvZmZzZXQ7IGkgPCBuOyBp
KyspCiAJCQkJbmV3Q29uc3RyYWludHMuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUo
cFtpXSwgcFByaW1lW2ktb2Zmc2V0XSwgQ09NUEFUSUJMRSkpOwpAQCAtMjc2LDExICsyMzYsMTUg
QEAKIAkJCQlUeXBlQmluZGluZyByQXBwbCA9IHBvdGVudGlhbGx5QXBwbGljYWJsZS5pc0NvbnN0
cnVjdG9yKCkgJiYgIXJlZmVyZW5jZS5pc0FycmF5Q29uc3RydWN0b3JSZWZlcmVuY2UoKSA/IHBv
dGVudGlhbGx5QXBwbGljYWJsZS5kZWNsYXJpbmdDbGFzcyA6IHBvdGVudGlhbGx5QXBwbGljYWJs
ZS5yZXR1cm5UeXBlOwogCQkJCWlmIChyQXBwbCA9PSBUeXBlQmluZGluZy5WT0lEKQogCQkJCQly
ZXR1cm4gRkFMU0U7Ci0JCQkJVHlwZUJpbmRpbmcgclByaW1lID0gckFwcGwuY2FwdHVyZShpbmZl
cmVuY2VDb250ZXh0LnNjb3BlLCAxNCk7IC8vIEZJWE1FIGNhcHR1cmUgcG9zaXRpb24/PworCQkJ
CVR5cGVCaW5kaW5nIHJQcmltZSA9IHJBcHBsLmNhcHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29w
ZSwgcmVmZXJlbmNlLnNvdXJjZUVuZCk7CiAJCQkJbmV3Q29uc3RyYWludHMuYWRkKENvbnN0cmFp
bnRUeXBlRm9ybXVsYS5jcmVhdGUoclByaW1lLCByLCBDT01QQVRJQkxFKSk7CiAJCQl9CiAJCQly
ZXR1cm4gbmV3Q29uc3RyYWludHMudG9BcnJheShuZXcgQ29uc3RyYWludEZvcm11bGFbbmV3Q29u
c3RyYWludHMuc2l6ZSgpXSk7CiAJCX0gZWxzZSB7IC8vIGluZXhhY3QKKwkJCU1ldGhvZEJpbmRp
bmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxlVGltZU1ldGhv
ZFRhcmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsgLy8gLy8gcG90ZW50aWFsbHkt
YXBwbGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5n
IFQgKDE1LjEzLjEpLAorCQkJaWYgKHBvdGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQorCQkJ
CXJldHVybiBGQUxTRTsKKwkJCQogCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVycy5s
ZW5ndGg7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykKIAkJCQlpZiAoIWZ1bmN0aW9u
VHlwZS5wYXJhbWV0ZXJzW2ldLmlzUHJvcGVyVHlwZSh0cnVlKSkKQEAgLTI5OSw3ICsyNjMsNyBA
QAogCQkJVHlwZUJpbmRpbmcgY29tcGlsZVR5cGVSZXR1cm4gPSBvcmlnaW5hbC5pc0NvbnN0cnVj
dG9yKCkgPyBvcmlnaW5hbC5kZWNsYXJpbmdDbGFzcyA6IG9yaWdpbmFsLnJldHVyblR5cGU7CiAJ
CQlpZiAocmVmZXJlbmNlLnR5cGVBcmd1bWVudHMgPT0gbnVsbAogCQkJCQkmJiAoKG9yaWdpbmFs
LnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGNvbXBpbGVU
eXBlUmV0dXJuLm1lbnRpb25zQW55KG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgLTEpKQotCQkJ
CQkJfHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBvcmlnaW5hbC5kZWNsYXJpbmdDbGFz
cy50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykpKQorCQkJCQkJ
fHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBjb21waWxlVGltZURlY2wuZGVjbGFyaW5n
Q2xhc3MuaXNSYXdUeXBlKCkpKSkKIAkJCQkJCQkvLyBub3QgY2hlY2tpbmcgci5tZW50aW9uc0Fu
eSBmb3IgY29uc3RydWN0b3JzLCBiZWNhdXNlIEE6Om5ldyByZXNvbHZlcyB0byB0aGUgcmF3IHR5
cGUKIAkJCQkJCQkvLyB3aGVyZWFzIGluIGZhY3QgdGhlIHR5cGUgb2YgYWxsIGV4cHJlc3Npb25z
IG9mIHRoaXMgc2hhcGUgZGVwZW5kcyBvbiB0aGVpciB0eXBlIHZhcmlhYmxlIChpZiBhbnkpCiAJ
CQl7CkBAIC0zMjEsNyArMjg1LDcgQEAKIAkJCQkJaW5mZXJlbmNlQ29udGV4dC5yZXN1bWVTdXNw
ZW5kZWRJbmZlcmVuY2UocHJldkludm9jYXRpb24pOwogCQkJCX0KIAkJCX0KLQkJCVR5cGVCaW5k
aW5nIHJQcmltZSA9IGNvbXBpbGVUaW1lRGVjbC5pc0NvbnN0cnVjdG9yKCkgPyBjb21waWxlVGlt
ZURlY2wuZGVjbGFyaW5nQ2xhc3MgOiBjb21waWxlVGltZURlY2wucmV0dXJuVHlwZTsKKwkJCVR5
cGVCaW5kaW5nIHJQcmltZSA9IGNvbXBpbGVUaW1lRGVjbC5pc0NvbnN0cnVjdG9yKCkgPyBjb21w
aWxlVGltZURlY2wuZGVjbGFyaW5nQ2xhc3MgOiBjb21waWxlVGltZURlY2wucmV0dXJuVHlwZS5j
YXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIHJlZmVyZW5jZS5zb3VyY2VFbmQoKSk7CiAJ
CQlpZiAoclByaW1lLmlkID09IFR5cGVJZHMuVF92b2lkKQogCQkJCXJldHVybiBGQUxTRTsKIAkJ
CXJldHVybiBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHJQcmltZSwgciwgQ09NUEFUSUJM
RSwgdGhpcy5pc1NvZnQpOwpAQCAtMzg0LDcgKzM0OCw3IEBACiAJCQkJSW5mZXJlbmNlVmFyaWFi
bGVbXSBiZXRhcyA9IGluZmVyZW5jZUNvbnRleHQuYWRkVHlwZVZhcmlhYmxlU3Vic3RpdHV0aW9u
cyhhcmd1bWVudHMpOwogCQkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBnYmV0YSA9IGluZmVy
ZW5jZUNvbnRleHQuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoCiAJCQkJCQlw
YXJhbWV0ZXJpemVkVHlwZS5nZW5lcmljVHlwZSgpLCBiZXRhcywgcGFyYW1ldGVyaXplZFR5cGUu
ZW5jbG9zaW5nVHlwZSgpLCBwYXJhbWV0ZXJpemVkVHlwZS5nZXRUeXBlQW5ub3RhdGlvbnMoKSk7
Ci0JCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmNhcHR1cmVzLnB1dChnYmV0YSwg
cGFyYW1ldGVyaXplZFR5cGUpOyAvLyBlc3RhYmxpc2hlZDogYm90aCB0eXBlcyBoYXZlIG5vbm51
bGwgYXJndW1lbnRzCisJCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmNhcHR1cmVz
LnB1dChnYmV0YSwgcGFyYW1ldGVyaXplZFR5cGUuY2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNj
b3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQoKSkpOyAvLyBlc3RhYmxpc2hlZDogYm90aCB0
eXBlcyBoYXZlIG5vbm51bGwgYXJndW1lbnRzCiAJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5l
d0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGdiZXRhLCB0YXJnZXRU
eXBlLCBDT01QQVRJQkxFKTsKIAkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJ
bmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCX0KQEAgLTQwNCw3ICszNjgsNyBAQAogCQkJ
CQlCb3VuZFNldCBzb2x1dGlvbiA9IGluZmVyZW5jZUNvbnRleHQuc29sdmUobmV3IEluZmVyZW5j
ZVZhcmlhYmxlW117YWxwaGF9KTsKIAkJCQkJaWYgKHNvbHV0aW9uID09IG51bGwpCiAJCQkJCQly
ZXR1cm4gZmFsc2U7Ci0JCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlvbi5nZXRJbnN0YW50aWF0
aW9uKGFscGhhLCBudWxsKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIGludm9jYXRp
b25TaXRlLnNvdXJjZVN0YXJ0KCkpOyAvLyBUT0RPIG1ha2UgcG9zaXRpb24gdW5pcXVlPworCQkJ
CQlUeXBlQmluZGluZyB1ID0gc29sdXRpb24uZ2V0SW5zdGFudGlhdGlvbihhbHBoYSwgbnVsbCku
Y2FwdHVyZShpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQo
KSk7CiAJCQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmNyZWF0ZSh1LCB0YXJnZXRUeXBlLCBDT01QQVRJQkxFKTsKIAkJCQkJcmV0
dXJuIGluZmVyZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7
CiAJCQkJfQpAQCAtNDM3LDE3ICs0MDEsOSBAQAogCQkJCQkvLyBpaSkKIAkJCQkJZmluYWwgVHlw
ZUJpbmRpbmcgciA9IHNhbS5yZXR1cm5UeXBlOwogCQkJCQlMYW1iZGFFeHByZXNzaW9uIHJlc29s
dmVkID0gbGFtYmRhLmdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyh0aGlzLnJp
Z2h0KTsKLQkJCQkJU3RhdGVtZW50IGJvZHkgPSByZXNvbHZlZCAhPSBudWxsID8gcmVzb2x2ZWQu
Ym9keSgpIDogbGFtYmRhLmJvZHkoKTsKLQkJCQkJaWYgKGJvZHkgaW5zdGFuY2VvZiBFeHByZXNz
aW9uKSB7Ci0JCQkJCQl2YXJpYWJsZXMuYWRkQWxsKG5ldyBDb25zdHJhaW50RXhwcmVzc2lvbkZv
cm11bGEoKEV4cHJlc3Npb24pIGJvZHksIHIsIENPTVBBVElCTEUpLmlucHV0VmFyaWFibGVzKGNv
bnRleHQpKTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCS8vIFRPRE86IHNob3VsZCBJIHVzZSBMYW1i
ZGFFeHByZXNzaW9uLnJlc3VsdEV4cHJlc3Npb25zPyAoaXMgY3VycmVudGx5IHByaXZhdGUpLgot
CQkJCQkJYm9keS50cmF2ZXJzZShuZXcgQVNUVmlzaXRvcigpIHsKLQkJCQkJCQlwdWJsaWMgYm9v
bGVhbiB2aXNpdChSZXR1cm5TdGF0ZW1lbnQgcmV0dXJuU3RhdGVtZW50LCBCbG9ja1Njb3BlIHNj
b3BlKSB7Ci0JCQkJCQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYShyZXR1cm5TdGF0ZW1lbnQuZXhwcmVzc2lvbiwgciwgQ09NUEFUSUJMRSkuaW5wdXRW
YXJpYWJsZXMoY29udGV4dCkpOwotCQkJCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJCQkJfQotCQkJ
CQkJfSwgKEJsb2NrU2NvcGUpbnVsbCk7CisJCQkJCUV4cHJlc3Npb25bXSByZXN1bHRFeHByZXNz
aW9ucyA9IHJlc29sdmVkICE9IG51bGwgPyByZXNvbHZlZC5yZXN1bHRFeHByZXNzaW9ucygpIDog
bnVsbDsKKwkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJlc3Npb25zID09
IG51bGwgPyAwIDogcmVzdWx0RXhwcmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsK
KwkJCQkJCXZhcmlhYmxlcy5hZGRBbGwobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShy
ZXN1bHRFeHByZXNzaW9uc1tpXSwgciwgQ09NUEFUSUJMRSkuaW5wdXRWYXJpYWJsZXMoY29udGV4
dCkpOwogCQkJCQl9CiAJCQkJfQogCQkJCXJldHVybiB2YXJpYWJsZXM7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50VHlwZUZvcm11bGEuamF2YQppbmRleCBjYTNjYzBmLi4yMGJhOTVlIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKIGlt
cG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwogCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7CiAKIC8q
KgpAQCAtMzExLDYgKzMxMiwxMyBAQAogCQkJCQlyZXN1bHRbaV0gPSBDb25zdHJhaW50VHlwZUZv
cm11bGEuY3JlYXRlKHN1YkNhbmRpZGF0ZSwgaW50ZXJzZWN0aW5nVHlwZXNbaV0sIFNVQlRZUEUs
IHRoaXMuaXNTb2Z0KTsKIAkJCQl9CiAJCQkJcmV0dXJuIHJlc3VsdDsKKwkJCWNhc2UgQmluZGlu
Zy5QT0xZX1RZUEU6CisJCQkJUG9seVR5cGVCaW5kaW5nIHBvbHkgPSAoUG9seVR5cGVCaW5kaW5n
KSBzdXBlckNhbmRpZGF0ZTsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlv
bikgcG9seS5leHByZXNzaW9uOworCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IGludm9jYXRp
b24uYmluZGluZyhzdWJDYW5kaWRhdGUsIHNjb3BlKTsKKwkJCQlpZiAoYmluZGluZyA9PSBudWxs
IHx8ICFiaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCXJldHVybiBGQUxTRTsKKwkJCQly
ZXR1cm4gcmVkdWNlU3ViVHlwZShzY29wZSwgc3ViQ2FuZGlkYXRlLCBiaW5kaW5nLnJldHVyblR5
cGUuY2FwdHVyZShzY29wZSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSkpOwogCQl9CiAJCXRocm93
IG5ldyBJbGxlZ2FsU3RhdGVFeGNlcHRpb24oIlVuZXhwZWN0ZWQgUkhTICIrc3VwZXJDYW5kaWRh
dGUpOyAvLyROT04tTkxTLTEkCiAJfQpAQCAtMzQ3LDI3ICszNTUsMTMgQEAKIAkJCXJldHVybiB0
cnVlOwogCQlpZiAoIShjYiBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykpIHsK
IAkJCS8vIGlmIEMgaXMgcGFyYW1ldGVyaXplZCB3aXRoIGl0cyBvd24gdHlwZSB2YXJpYWJsZXMs
IHRoZXJlJ3JlIG5vIG1vcmUgY29uc3RyYWludHMgdG8gYmUgY3JlYXRlZCBoZXJlLCBvdGhlcndp
c2UgbGV0J3MgZmFpbAotCQkJcmV0dXJuIGlzSW5zaWduaWZpY2FudFBhcmFtZXRlcml6ZWQoY2Ep
OworCQkJcmV0dXJuIGNhLmlzUGFyYW1ldGVyaXplZFdpdGhPd25WYXJpYWJsZXMoKTsKIAkJfQog
CQlUeXBlQmluZGluZ1tdIGJpID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIGNiKS5hcmd1
bWVudHM7CiAJCWlmIChjYi5pc1Jhd1R5cGUoKSB8fCBiaSA9PSBudWxsIHx8IGJpLmxlbmd0aCA9
PSAwKQogCQkJcmV0dXJuICh0aGlzLmlzU29mdCAmJiBJbmZlcmVuY2VDb250ZXh0MTguU0lNVUxB
VEVfQlVHX0pES184MDI2NTI3KSA/IHRydWUgOiBmYWxzZTsgLy8gRkFMU0Ugd291bGQgY29uZm9y
bSB0byB0aGUgc3BlYyAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBhaS5sZW5ndGg7IGkrKykKIAkJ
CWNvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGJpW2ldLCBhaVtp
XSwgVFlQRV9BUkdVTUVOVF9DT05UQUlORUQsIHRoaXMuaXNTb2Z0KSk7Ci0JCXJldHVybiB0cnVl
OwotCX0KLQotCXByaXZhdGUgYm9vbGVhbiBpc0luc2lnbmlmaWNhbnRQYXJhbWV0ZXJpemVkKFBh
cmFtZXRlcml6ZWRUeXBlQmluZGluZyBjYSkgewotCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlw
ZVZhcmlhYmxlcyA9IGNhLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlcygpOwotCQlUeXBlQmluZGlu
Z1tdIHR5cGVBcmd1bWVudHMgPSBjYS5hcmd1bWVudHM7Ci0JCWlmICh0eXBlVmFyaWFibGVzID09
IG51bGwgfHwgdHlwZUFyZ3VtZW50cyA9PSBudWxsKQotCQkJcmV0dXJuIHR5cGVWYXJpYWJsZXMg
PT0gdHlwZUFyZ3VtZW50czsKLQkJaWYgKHR5cGVWYXJpYWJsZXMubGVuZ3RoICE9IHR5cGVBcmd1
bWVudHMubGVuZ3RoKQotCQkJcmV0dXJuIGZhbHNlOwotCQlmb3IgKGludCBpID0gMDsgaSA8IHR5
cGVBcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMo
dHlwZVZhcmlhYmxlc1tpXSwgdHlwZUFyZ3VtZW50c1tpXSkpCi0JCQkJcmV0dXJuIGZhbHNlOwot
CQl9CiAJCXJldHVybiB0cnVlOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZl
cmVuY2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4Lmph
dmEKaW5kZXggNjFmYmNjMC4uZDQwMTVlZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZl
cmVuY2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQx
OC5qYXZhCkBAIC0yMywxNiArMjMsMTIgQEAKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKLWltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25h
bEV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5JbnZvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuTGFtYmRhRXhwcmVzc2lvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0Lk1lc3NhZ2VTZW5kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuTnVsbEFubm90YXRpb25NYXRjaGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlJlZmVyZW5jZUV4cHJlc3Npb247Ci1pbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogCkBAIC05NSw0MSAr
OTEsOSBAQAogICogPGR0PjE4LjUuNCBNb3JlIFNwZWNpZmljIE1ldGhvZCBJbmZlcmVuY2U8L2R0
PgogICogPGRkPjxlbT5Ob3QgWWV0IEltcGxlbWVudGVkPC9lbT48L2RkPgogICogPC9kbD4KLSAq
IEZvciAxOC41LjEgYW5kIDE4LjUuMiBzb21lIGhpZ2gtbGV2ZWwgY29udHJvbCBpcyBpbXBsZW1l
bnRlZCBpbgotICogIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcjY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwgU2NvcGUs
IEludm9jYXRpb25TaXRlLCBpbnQpfS4KKyAqIEZvciAxOC41LjEgYW5kIDE4LjUuMiBoaWdoLWxl
dmVsIGNvbnRyb2wgaXMgaW1wbGVtZW50ZWQgaW4KKyAqICB7QGxpbmsgUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcs
IFR5cGVCaW5kaW5nW10sIFNjb3BlLCBJbnZvY2F0aW9uU2l0ZSl9LgogICogPGgyPkluZmVyZW5j
ZSBMaWZlY3ljbGU8L2gyPgotICogVGhlIHNlcGFyYXRpb24gaW50byAxOC41LjEgYW5kIDE4LjUu
MiBjYXVzZXMgc29tZSBjb21wbGV4aXR5OgotICogPHVsPgotICogPGxpPkNhbGxpbmcgYm90aCBw
YXJ0cyBvZiBpbmZlcmVuY2UgaXMgZGlyZWN0bHkgaW50ZXJ3b3ZlbiB3aXRoIG92ZXJsb2FkIHJl
c29sdXRpb24uIFNlZSAKLSAqIHtAbGluayBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcjY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZywgVHlwZUJpbmRpbmdbXSwg
U2NvcGUsIEludm9jYXRpb25TaXRlLCBpbnQpCi0gKiAJCVBHTUIjY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoKX0gZm9yIHRoZSBiYXNpYyA8Yj5wcm90b2NvbDwvYj4uPC9saT4KLSAqIDxsaT5JbnRl
cm1lZGlhdGUgPGI+c3RhdGU8L2I+IHJlZ2FyZGluZyBpbmZlcmVuY2UgbXVzdCBiZSBzdG9yZWQg
YmV0d2VlbiBib3RoIHBoYXNlcy4gSW5mZXJlbmNlIGlzIHBlcmZvcm1lZCB3aXRoIGRpZmZlcmVu
dAotICogICBpbnB1dHMgZm9yIGVhY2ggcGFpciBvZiB7QGxpbmsgSW52b2NhdGlvbn0geCB7QGxp
bmsgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nfSwKLSAqICAgIHNlZSB7QGxpbmsg
SW52b2NhdGlvbiNyZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nLCBJbmZlcmVuY2VDb250ZXh0MTgpIEludm9jYXRpb24ucmVnaXN0ZXJJbmZl
cmVuY2VDb250ZXh0KCl9IGFuZAotICogICAge0BsaW5rIEludm9jYXRpb24jZ2V0SW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgZ2V0SW5mZXJlbmNlQ29udGV4dCgp
fS48YnIvPgotICogICAgQXMgcGFydCBvZiB0aGUgbGlmZWN5Y2xlIHN0YXRlLCBlYWNoIGluc3Rh
bmNlIG9mIEluZmVyZW5jZUNvbnRleHQxOCByZW1lbWJlcnMgdGhlIGN1cnJlbnQge0BsaW5rICNp
bmZlcmVuY2VLaW5kfQotICogICAgYW5kIHtAbGluayAjc3RlcENvbXBsZXRlZH0uPC9saT4KLSAq
IDxsaT48Yj5OZXN0ZWQgaW5mZXJlbmNlL3Jlc29sdmluZzwvYj46IElmIGFuIGludm9jYXRpb24g
YXJndW1lbnQgaXMgYSBwb2x5IGV4cHJlc3Npb24gaXRzZWxmLCBmaW5hbCByZXNvbHZpbmcgb2Yg
dGhlIGFyZ3VtZW50IGNhbiBvbmx5IGhhcHBlbmVkCi0gKiAgICBhZnRlciBJbnZvY2F0aW9uIFR5
cGUgSW5mZXJlbmNlIHJlZ2FyZGluZyB0aGUgb3V0ZXIgaW52b2NhdGlvbi4gT3V0ZXIgaW5mZXJl
bmNlIG11c3QgcHJvZHVjZSB0aGUgPGI+dGFyZ2V0IHR5cGU8L2I+IHRoYXQgZHJpdmVzCi0gKiAg
ICB0aGUgaW5uZXIgaW5mZXJlbmNlIC8gcmVzb2x2aW5nLiBUd28gZGlmZmVyZW50IHByb3RvY29s
cyBhcmUgYXBwbGllZDoKLSAqICAgIDx1bD4KLSAqICAgIDxsaT5JZiB0aGUgaW5uZXIgcG9seSBl
eHByZXNzaW9uIGlzIGFuIGludm9jYXRpb24sIGlubmVyIGluZmVyZW5jZSBpcyBkaXJlY3RseSBp
bmNvcnBvcmF0ZWQgaW50bwotICogICAgICB0aGUge0BsaW5rICNjdXJyZW50Qm91bmRzfSwgc2Vl
IGJsb2NrIGluc2lkZSB7QGxpbmsgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhI3JlZHVjZShJ
bmZlcmVuY2VDb250ZXh0MTgpfS48YnIvPgotICogICAgICBJbiB0aGlzIGNhc2UgdGhlIHJlc3Vs
dHMgb2YgdGhlIGNvbWJpbmVkIGluZmVyZW5jZSBuZWVkIHRvIGJlIGFwcGxpZWQgdG8gYWxsIGNv
bnRhaW5lZCBpbm5lciBpbnZvY2F0aW9ucywKLSAqICAgICAgd2hpY2ggaGFwcGVucyBpbiB7QGxp
bmsgI3JlYmluZElubmVyUG9saWVzKEJvdW5kU2V0LCBUeXBlQmluZGluZ1tdKX0sIHdoaWNoIG11
c3QgYmUgY2FsbGVkIHdoZW5ldmVyCi0gKiAgICAgIDE4LjUuMiBmaW5pc2hlcy48L2xpPgotICog
ICAgPGxpPklmIHRoZSBpbm5lciBwb2x5IGV4cHJlc3Npb24gaXMgYSBmdW5jdGlvbmFsIGV4cHJl
c3Npb24gb3IgYSBjb25kaXRpb25hbCBleHByZXNzaW9uIG5vIGluZmVyZW5jZSB2YXJpYWJsZXMK
LSAqICAgICAgZXhpc3QgcmVwcmVzZW50aW5nIHRoZSBpbm5lci4gSW4gdGhpcyBjYXNlIHRoZSBm
aW5hbCB0YXJnZXQgdHlwZSBpcyBwdXNoZWQgaW50byB0aGUgaW5uZXIgdXNpbmcKLSAqICAgICAg
e0BsaW5rIEV4cHJlc3Npb24jY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5n
LCBTY29wZSl9LCB3aGljaCwgdG9vLCBpcyBjYWxsZWQgZnJvbSAKLSAqICAgICAge0BsaW5rICNy
ZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0gKiAgICA8
bGk+Rm9yIHJlY3Vyc2l2ZWx5IHB1c2hpbmcgdGFyZ2V0IHR5cGVzIGludG8gYXJndW1lbnRzIG9m
IGFuIGludm9jYXRpb24KLSAqICAgIAltZXRob2Qge0BsaW5rIEFTVE5vZGUjcmVzb2x2ZVBvbHlF
eHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24sIE1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5n
W10sIFNjb3BlKX0gZXhpc3RzLAotICogICAgCXdoaWNoIGlzIGNhbGxlZCBpbiB0d28gc2l0dWF0
aW9uczogKDEpIGZvciBub24tZ2VuZXJpYyBvdXRlciBpbnZvY2F0aW9ucyBmcm9tIE1lc3NhZ2VT
ZW5kI2ZpbmRNZXRob2RCaW5kaW5nKCkgYW5kCi0gKiAgICAJU3RhdGVtZW50I2ZpbmRDb25zdHJ1
Y3RvckJpbmRpbmcoKTsgKDIpIGZvciBnZW5lcmljIG91dGVyIGludm9jYXRpb25zIGZyb20ge0Bs
aW5rICNyZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9LjwvbGk+Ci0g
KiAgICA8bGk+SW4gc29tZSBzaXR1YXRpb25zIGludm9jYXRpb24gYXJndW1lbnRzIHRoYXQgYXJl
IHBvbHkgaW52b2NhdGlvbnMgbmVlZCB0byBiZSByZXNvbHZlZCBpbiB0aGUgbWlkZGxlIG9mIG92
ZXJsb2FkIHJlc29sdXRpb24KLSAqICAgIAl0byBhbnN3ZXIge0BsaW5rIFNjb3BlI3BhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbDE4fSAod2hlcmUgdGhlIG91dGVyIGludm9jYXRpb24gZGlkIG5v
dCBpbnZvbHZlIGFueSBpbmZlcmVuY2UpLjxici8+Ci0gKiAgICA8L3VsPgotICogICAgUHVzaGlu
ZyBpbmZlcmVuY2UgcmVzdWx0cyBpbnRvIGFuIGlubmVyIGludm9jYXRpb24gaGFwcGVucyB1c2lu
ZyB7QGxpbmsgSW52b2NhdGlvbiN1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nLFR5cGVCaW5k
aW5nKX0uPC9saT4KICAqIDxsaT5EZWNpc2lvbiB3aGV0aGVyIG9yIG5vdCBhbiBpbnZvY2F0aW9u
IGlzIGEgPGI+dmFyaWFibGUtYXJpdHk8L2I+IGludm9jYXRpb24gaXMgbWFkZSBieSBmaXJzdCBh
dHRlbXB0aW5nCiAgKiAJCXRvIHNvbHZlIDE4LjUuMSBpbiBtb2RlIHtAbGluayAjQ0hFQ0tfTE9P
U0V9LiBPbmx5IGlmIHRoYXQgZmFpbHMsIGFub3RoZXIgYXR0ZW1wdCBpcyBtYWRlIGluIG1vZGUg
e0BsaW5rICNDSEVDS19WQVJBUkd9LgogICogCQlXaGljaCBvZiB0aGVzZSB0d28gYXR0ZW1wdHMg
d2FzIHN1Y2Nlc3NmdWwgaXMgc3RvcmVkIGluIHtAbGluayAjaW5mZXJlbmNlS2luZH0uCkBAIC0x
NjUsOSArMTI5LDYgQEAKIAkvKiogVGhlIGFjY3VtdWxhdGVkIHR5cGUgYm91bmRzIGV0Yy4gKi8K
IAlCb3VuZFNldCBjdXJyZW50Qm91bmRzOwogCi0JLyoqIHNvbHV0aW9uIG9mIGFwcGxpY2FiaWxp
dHkgaW5mZXJlbmNlLCBzdG9yZWQgZm9yIHVzZSBhcyBmYWxsYmFjaywgaWYgaW52b2NhdGlvbiB0
eXBlIGluZmVyZW5jZSBmYWlscy4gKi8KLQlCb3VuZFNldCBzdG9yZWRTb2x1dGlvbjsKLQogCS8q
KiBGb3IgZWFjaCBjYW5kaWRhdGUgdGFyZ2V0IHR5cGUgaW1wb3NlZCBmcm9tIHRoZSBvdXRzaWRl
IHN0b3JlIHRoZSBzb2x1dGlvbiBvZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlLiAqLwogCU1h
cDxUeXBlQmluZGluZyxTb2x1dGlvbj4gc29sdXRpb25zUGVyVGFyZ2V0VHlwZSA9IG5ldyBIYXNo
TWFwPFR5cGVCaW5kaW5nLCBTb2x1dGlvbj4oKTsKIApAQCAtMTg2LDE0ICsxNDcsNiBAQAogCQog
CS8qKiBTaWduYWxzIHdoZXRoZXIgYW55IHR5cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2Yg
dW5jaGVja2VkIGNvbnZlcnNpb24uICovCiAJcHVibGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+
IGNvbnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZlcnNpb247Ci0KLQkvLyAtLS0KLQotCS8qKiBJ
bm5lciBwb2x5IGludm9jYXRpb25zIHdoaWNoIGhhdmUgYmVlbiBpbmNsdWRlZCBpbiB0aGlzIGlu
ZmVyZW5jZS4gKi8KLQlMaXN0PEludm9jYXRpb25TaXRlPiBpbm5lclBvbGllcyA9IG5ldyBBcnJh
eUxpc3Q8SW52b2NhdGlvblNpdGU+KCk7Ci0JLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJlbmNl
IGNvbnRleHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwotCXB1YmxpYyBJ
bmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwotCXByaXZhdGUgQXJyYXlMaXN0PE1ldGhv
ZEJpbmRpbmc+IHByb2JsZW1NZXRob2RzOwogCiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJv
bm1lbnQgZW52aXJvbm1lbnQ7CkBAIC0zNzIsNyArMzI1LDYgQEAKIAl9CiAKIAkvKiogSkxTIDE4
LjUuMiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIAotCSAqIDxwPkNhbGxlcnMgYXJlIHJlc3Bv
bnNpYmxlIGZvciBhbnkgcG9zdC1wcm9jZXNzaW5nIChzZWUge0BsaW5rICNyZWJpbmRJbm5lclBv
bGllcyhCb3VuZFNldCwgVHlwZUJpbmRpbmdbXSl9KS48L3A+CiAJICogQHBhcmFtIGIxICJ0aGUg
Ym91bmQgc2V0IHByb2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0
aGF0IG0gaXMgYXBwbGljYWJsZSBpbiAxOC41LjEiCiAJICovCiAJcHVibGljIEJvdW5kU2V0IGlu
ZmVySW52b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwg
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQpAQCAt
Mzk4LDkgKzM1MCw5IEBACiAJCQl9CiAJCQkvLyA0LiBidWxsZXQ6IGFzc2VtYmxlIEM6CiAJCQlT
ZXQ8Q29uc3RyYWludEZvcm11bGE+IGMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50Rm9ybXVsYT4o
KTsKLQkJCWlmICghYWRkQ29uc3RyYWludHNUb0ModGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLCBj
LCBtZXRob2QsIHRoaXMuaW5mZXJlbmNlS2luZCkpCisJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9D
KHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cywgYywgbWV0aG9kLCB0aGlzLmluZmVyZW5jZUtpbmQs
IGZhbHNlKSkKIAkJCQlyZXR1cm4gbnVsbDsKLQkJCS8vIDUuIGJ1bGxldDogZGV0ZXJtaW5lIEIz
IGZyb20gQworCQkJLy8gNS4gYnVsbGV0OiBkZXRlcm1pbmUgQjQgZnJvbSBDCiAJCQl3aGlsZSAo
IWMuaXNFbXB0eSgpKSB7CiAJCQkJLy8gKgogCQkJCVNldDxDb25zdHJhaW50Rm9ybXVsYT4gYm90
dG9tU2V0ID0gZmluZEJvdHRvbVNldChjLCBhbGxPdXRwdXRWYXJpYWJsZXMoYykpOwpAQCAtNDUw
LDcgKzQwMiw3IEBACiAJCX0KIAl9CiAKLQlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNU
b0MoRXhwcmVzc2lvbltdIGV4cHJzLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIE1ldGhvZEJp
bmRpbmcgbWV0aG9kLCBpbnQgaW5mZXJlbmNlS2luZEZvck1ldGhvZCkgeworCXByaXZhdGUgYm9v
bGVhbiBhZGRDb25zdHJhaW50c1RvQyhFeHByZXNzaW9uW10gZXhwcnMsIFNldDxDb25zdHJhaW50
Rm9ybXVsYT4gYywgTWV0aG9kQmluZGluZyBtZXRob2QsIGludCBpbmZlcmVuY2VLaW5kRm9yTWV0
aG9kLCBib29sZWFuIGludGVybGVhdmVkKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlv
biB7CiAJCVR5cGVCaW5kaW5nW10gZnM7CiAJCWlmIChleHBycyAhPSBudWxsKSB7CiAJCQlpbnQg
ayA9IGV4cHJzLmxlbmd0aDsKQEAgLTQ3MSwxMTkgKzQyMyw4NiBAQAogCQkJZm9yIChpbnQgaSA9
IDA7IGkgPCBrOyBpKyspIHsKIAkJCQlUeXBlQmluZGluZyBmc2kgPSBmc1tNYXRoLm1pbihpLCBw
LTEpXTsKIAkJCQlUeXBlQmluZGluZyBzdWJzdEYgPSBzdWJzdGl0dXRlKGZzaSk7Ci0JCQkJaWYg
KCFhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGV4cHJzW2ldLCBjLCBmc2ksIHN1YnN0RiwgbWV0
aG9kKSkKKwkJCQlpZiAoIWFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoZXhwcnNbaV0sIGMsIGZz
aSwgc3Vic3RGLCBtZXRob2QsIGludGVybGVhdmVkKSkKIAkJCQkJcmV0dXJuIGZhbHNlOwogCSAg
ICAgICAgfQogCQl9CiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZhdGUgYm9vbGVhbiBhZGRD
b25zdHJhaW50c1RvQ19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9y
bXVsYT4gYywgVHlwZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRp
bmcgbWV0aG9kKSB7CisJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIo
RXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBm
c2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBtZXRob2QsIGJvb2xlYW4gaW50
ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKKwkJCisJCS8vIFNl
ZSBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIzMjUgZm9yIGV4
Y2x1c2lvbiBvZiBwb2x5IGV4cHJlc3Npb25zIHRhcmdldGluZyBwcm9wZXIgdHlwZXMuIENFRi5y
ZWR1Y2UgdmFsaWRhdGVzIAorCQkvLyB0aGF0IHRoZXkgYXJlIGNvbXBhdGlibGUgaW4gYSBsb29z
ZSBpbnZvY2F0aW9uIGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0IHR5cGUuIFRoZXkgY29udHJp
YnV0ZSBub3RoaW5nIGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9ybXVsYXMuCisJCWlmIChzdWJz
dEYuaXNQcm9wZXJUeXBlKHRydWUpKQorCQkJcmV0dXJuIHRydWU7CisJCQogCQkvLyBGb3IgYWxs
IGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxp
dHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+pLgogCQlpZiAoIWV4cHJpLmlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkgewogCQkJYy5hZGQobmV3IENv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RGLCBSZWR1Y3Rpb25SZXN1bHQu
Q09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NPRlQpKTsKIAkJfQogCQlpZiAo
ZXhwcmkgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgewogCQkJYy5hZGQobmV3IENv
bnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhKChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmksIHN1
YnN0RikpOworCQkJaWYgKGV4cHJpIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJ
CUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIGV4cHJpOworCQkJ
CUJsb2NrU2NvcGUgc2tvcGUgPSBsYW1iZGEuZW5jbG9zaW5nU2NvcGU7CisJCQkJaWYgKHN1YnN0
Ri5pc0Z1bmN0aW9uYWxJbnRlcmZhY2Uoc2tvcGUpKSB7IC8vIGNvdWxkIGJlIGFuIGluZmVyZW5j
ZSB2YXJpYWJsZS4KKwkJCQkJUmVmZXJlbmNlQmluZGluZyB0ID0gKFJlZmVyZW5jZUJpbmRpbmcp
IHN1YnN0RjsKKwkJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHdpdGhXaWxkQ2FyZHMgPSBJ
bmZlcmVuY2VDb250ZXh0MTgucGFyYW1ldGVyaXplZFdpdGhXaWxkY2FyZCh0KTsKKwkJCQkJaWYg
KHdpdGhXaWxkQ2FyZHMgIT0gbnVsbCkgeworCQkJCQkJdCA9IENvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5maW5kR3JvdW5kVGFyZ2V0VHlwZSh0aGlzLCBza29wZSwgbGFtYmRhLCB3aXRoV2ls
ZENhcmRzKTsKKwkJCQkJfQorCQkJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZTsKKwkJCQkJ
aWYgKHQgIT0gbnVsbCAmJiAoZnVuY3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhv
ZChza29wZSwgdHJ1ZSkpICE9IG51bGwgJiYgKGxhbWJkYSA9IGxhbWJkYS5nZXRSZXNvbHZlZENv
cHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodCkpICE9IG51bGwpIHsKKwkJCQkJCVR5cGVCaW5kaW5n
IHIgPSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsKKwkJCQkJCUV4cHJlc3Npb25bXSByZXN1bHRF
eHByZXNzaW9ucyA9IGxhbWJkYS5yZXN1bHRFeHByZXNzaW9ucygpOworCQkJCQkJZm9yIChpbnQg
aSA9IDAsIGxlbmd0aCA9IHJlc3VsdEV4cHJlc3Npb25zID09IG51bGwgPyAwIDogcmVzdWx0RXhw
cmVzc2lvbnMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCQlFeHByZXNzaW9uIHJl
c3VsdEV4cHJlc3Npb24gPSByZXN1bHRFeHByZXNzaW9uc1tpXTsKKwkJCQkJCQlpZiAoIWFkZENv
bnN0cmFpbnRzVG9DX09uZUV4cHIocmVzdWx0RXhwcmVzc2lvbiwgYywgci5vcmlnaW5hbCgpLCBy
LCBtZXRob2QsIHRydWUpKQorCQkJCQkJCQlyZXR1cm4gZmFsc2U7CisJCQkJCQl9CisJCQkJCX0K
KwkJCQl9CisJCQl9CiAJCX0gZWxzZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYm
IGV4cHJpLmlzUG9seUV4cHJlc3Npb24oKSkgewogCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0g
KEludm9jYXRpb24pIGV4cHJpOwotCQkJTWV0aG9kQmluZGluZyBpbm5lck1ldGhvZCA9IGludm9j
YXRpb24uYmluZGluZyhudWxsLCBmYWxzZSwgbnVsbCk7CisJCQlNZXRob2RCaW5kaW5nIGlubmVy
TWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHN1YnN0RiwgdGhpcy5zY29wZSk7CisJCQlpZiAo
aW5uZXJNZXRob2QgPT0gbnVsbCkKKwkJCQlyZXR1cm4gdHJ1ZTsgCQkgIC8vIC0+IHByb2NlZWQg
d2l0aCBubyBuZXcgQyBzZXQgZWxlbWVudHMuCisJCQkKKwkJCWlmIChpbnRlcmxlYXZlZCkgewor
CQkJCU1ldGhvZEJpbmRpbmcgc2hhbGxvd01ldGhvZCA9IGlubmVyTWV0aG9kLnNoYWxsb3dPcmln
aW5hbCgpOworCQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGVu
dGVyUG9seUludm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7CisJ
CQkJdHJ5IHsKKwkJCQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50cyA9IGludm9jYXRpb24uYXJndW1l
bnRzKCk7CisJCQkJCVR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcyA9IGFyZ3VtZW50cyA9PSBu
dWxsID8gQmluZGluZy5OT19QQVJBTUVURVJTIDogbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5s
ZW5ndGhdOworCQkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwZXMubGVuZ3RoOyBp
KyspCisJCQkJCQlhcmd1bWVudFR5cGVzW2ldID0gYXJndW1lbnRzW2ldLnJlc29sdmVkVHlwZTsK
KwkJCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSB7CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0
aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgaW5uZXJNZXRob2QpOworCQkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gaW5uZXJDdHguaW5m
ZXJlbmNlS2luZDsKKwkJCQkJfQorCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHNo
YWxsb3dNZXRob2QsIGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3Rvcigp
KTsKKwkJCQkJaWYgKCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52b2Nh
dGlvblR5cGUodGhpcywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKKwkJCQkJ
CXJldHVybiBmYWxzZTsKKwkJCQl9IGZpbmFsbHkgeworCQkJCQlyZXN1bWVTdXNwZW5kZWRJbmZl
cmVuY2UocHJldkludm9jYXRpb24pOworCQkJCX0KKwkJCX0KKwkJCWludCBhcHBsaWNhYmlsaXR5
S2luZCA9IENIRUNLX0xPT1NFOyAgLy8gRklYTUUsIGZvciA8PiByZXNvbHZpbmcgdG8gYSBub24t
Z2VuZXJpYyBtZXRob2QsIHRoaXMgbmVlZCB0byBiZSBjb21wdXRlZC4KIAkJCWlmIChpbm5lck1l
dGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJ
CUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29u
dGV4dCgoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9kKTsKLQkJCQlpZiAo
aW5uZXJDdHggIT0gbnVsbCkgeyAvLyBvdGhlcndpc2UgaW5uZXJNZXRob2QgZG9lcyBub3QgcGFy
dGljaXBhdGUgaW4gaW5mZXJlbmNlCi0JCQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQyhpbnZv
Y2F0aW9uLmFyZ3VtZW50cygpLCBjLCBpbm5lck1ldGhvZC5nZW5lcmljTWV0aG9kKCksIGlubmVy
Q3R4LmluZmVyZW5jZUtpbmQpOworCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7CisJCQkJCWFw
cGxpY2FiaWxpdHlLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKIAkJCQl9CiAJCQl9CisJ
CQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywgaW5u
ZXJNZXRob2QuZ2VuZXJpY01ldGhvZCgpLCBhcHBsaWNhYmlsaXR5S2luZCwgaW50ZXJsZWF2ZWQp
OwogCQl9IGVsc2UgaWYgKGV4cHJpIGluc3RhbmNlb2YgQ29uZGl0aW9uYWxFeHByZXNzaW9uKSB7
CiAJCQlDb25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBl
eHByaTsKLQkJCXJldHVybiBhZGRDb25zdHJhaW50c1RvQ19PbmVFeHByKGNlLnZhbHVlSWZUcnVl
LCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kKQotCQkJCSAmJiBhZGRDb25zdHJhaW50c1RvQ19PbmVF
eHByKGNlLnZhbHVlSWZGYWxzZSwgYywgZnNpLCBzdWJzdEYsIG1ldGhvZCk7CisJCQlyZXR1cm4g
YWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihjZS52YWx1ZUlmVHJ1ZSwgYywgZnNpLCBzdWJzdEYs
IG1ldGhvZCwgaW50ZXJsZWF2ZWQpCisJCQkJCSYmIGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIo
Y2UudmFsdWVJZkZhbHNlLCBjLCBmc2ksIHN1YnN0RiwgbWV0aG9kLCBpbnRlcmxlYXZlZCk7CiAJ
CX0KIAkJcmV0dXJuIHRydWU7Ci0JfQotCi0JLyoqCi0JICogU2ltcGxpZmllZCBBUEkgdG8gcGVy
Zm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlIChKTFMgMTguNS4yKQotCSAqIGFuZCBwZXJm
b3JtIHN1YnNlcXVlbnQgc3RlcHM6IGJvdW5kIGNoZWNrLCByZWJpbmRpbmcgb2YgaW5uZXIgcG9s
eSBleHByZXNzaW9ucywKLQkgKiBhbmQgY3JlYXRpbmcgb2YgYSBwcm9ibGVtIG1ldGhvZCBiaW5k
aW5nIGlmIG5lZWRlZC4KLQkgKiBTaG91bGQgb25seSBiZSBjYWxsZWQgaWYgdGhlIGluZmVyZW5j
ZSBoYXMgbm90IHlldCBmaW5pc2hlZC4KLQkgKiBAcGFyYW0gaW52b2NhdGlvbiBpbnZvY2F0aW9u
IGJlaW5nIGluZmVycmVkCi0JICogQHBhcmFtIGFyZ3VtZW50VHlwZXMgYXJndW1lbnRzIGJlaW5n
IHBhc3NlZCBpbnRvIHRoZSBpbnZvY2F0aW9uCi0JICogQHBhcmFtIG1ldGhvZCBjdXJyZW50IGNh
bmRpZGF0ZSBtZXRob2QgYmluZGluZyBmb3IgdGhpcyBpbnZvY2F0aW9uCi0JICogQHJldHVybiBh
IHZhbGlkIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMsCi0JICog
CW9yIGEgcHJvYmxlbSBtZXRob2QgYmluZGluZyBzaWduYWxpbmcgZWl0aGVyIGluZmVyZW5jZSBm
YWlsdXJlIG9yIGEgYm91bmQgbWlzbWF0Y2guCi0JICovCi0JLypATm9uTnVsbCovIE1ldGhvZEJp
bmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZvY2F0aW9uIGludm9jYXRpb24sIFR5cGVCaW5k
aW5nW10gYXJndW1lbnRUeXBlcywgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1l
dGhvZCkgewotCQkvLyBUT0RPIG9wdGltaXplOiBpZiBvdXRlckNvbnRleHQgZXhpc3RzIGFuZCBp
cyByZXNvbHZlZCwgd2UgcHJvYmFibHkgZG9uJ3QgbmVlZCB0byBpbmZlciBhZ2Fpbi4KLQkJVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGludm9jYXRpb24uaW52b2NhdGlvblRhcmdldFR5cGUoKTsK
LQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGZpbmFsTWV0aG9kID0gbnVsbDsK
LQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFRvQ2hlY2sgPSBtZXRo
b2Q7Ci0JCQotCQlib29sZWFuIGhhdmVQcm9wZXJUYXJnZXRUeXBlID0gdGFyZ2V0VHlwZSAhPSBu
dWxsICYmIHRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpOwotCQlpZiAoaGF2ZVByb3BlclRh
cmdldFR5cGUgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFy
Z2V0VHlwZSgpKSB7Ci0JCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9kLm9yaWdpbmFs
TWV0aG9kOwotCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdldFR5
cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJQm91bmRTZXQgcmVzdWx0ID0gc29sdXRpb24gIT0gbnVs
bCA/IHNvbHV0aW9uLmJvdW5kcyA6IG51bGw7Ci0JCQlpZiAocmVzdWx0ID09IG51bGwpIHsKLQkJ
CQkvLyBzdGFydCBvdmVyIGZyb20gYSBwcmV2aW91cyBjYW5kaWRhdGUgYnV0IGRpc2NhcmQgaXRz
IHR5cGUgdmFyaWFibGUgaW5zdGFudGlhdGlvbnMKLQkJCQkvLyBUT0RPOiBzaG91bGQgd2UgcmV0
YWluIGFueSBpbnN0YW50aWF0aW9ucyBvZiB0eXBlIHZhcmlhYmxlcyBub3Qgb3duZWQgYnkgdGhl
IG1ldGhvZD8gCi0JCQkJdHJ5IHsKLQkJCQkJcmVzdWx0ID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0
aGlzLmN1cnJlbnRCb3VuZHMsIHRhcmdldFR5cGUsIGludm9jYXRpb24sIG9yaWdpbmFsKTsKLQkJ
CQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJLy8gbm8gc29s
dXRpb24sIGJ1dCBkbyBtb3JlIGNoZWNrcyBiZWxvdwotCQkJCX0KLQkJCX0KLQkJCWlmIChyZXN1
bHQgIT0gbnVsbCkgewotCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRpb25z
KG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlvbiwgcmVzdWx0KTsKLQkJCQlpZiAo
c29sdXRpb25zICE9IG51bGwpIHsKLQkJCQkJZmluYWxNZXRob2QgPSB0aGlzLmVudmlyb25tZW50
LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsLCBzb2x1dGlvbnMpOwot
CQkJCQlpZiAodGhpcy5zY29wZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25CYXNlZE51
bGxBbmFseXNpc0VuYWJsZWQpCi0JCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9y
Q29udHJhZGl0aW9ucyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbiwgdGhpcy5zY29wZSk7Ci0JCQkJ
CWludm9jYXRpb24ucmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KGZpbmFsTWV0aG9kLCB0aGlzKTsK
LQkJCQkJdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1dCh0YXJnZXRUeXBlLCBuZXcgU29s
dXRpb24oZmluYWxNZXRob2QsIHJlc3VsdCkpOwotCQkJCX0KLQkJCX0KLQkJCWlmIChmaW5hbE1l
dGhvZCAhPSBudWxsKQotCQkJCW1ldGhvZFRvQ2hlY2sgPSBmaW5hbE1ldGhvZDsKLQkJfSBlbHNl
IHsKLQkJCWZpbmFsTWV0aG9kID0gbWV0aG9kOwotCQl9Ci0JCQotCQlNZXRob2RCaW5kaW5nIHBy
b2JsZW1NZXRob2QgPSBtZXRob2RUb0NoZWNrLmJvdW5kQ2hlY2sxOCh0aGlzLnNjb3BlLCBhcmd1
bWVudFR5cGVzKTsKLQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKLQkJCXJldHVybiBwcm9i
bGVtTWV0aG9kOwotCi0JCWlmICghaGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlvbi5n
ZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpCi0JCQlyZXR1cm4gbWV0
aG9kOyAvLyBzdGlsbCBub3QgcmVhZHkhCi0KLQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwpIHsK
LQkJCWlmIChyZWJpbmRJbm5lclBvbGllcyhmaW5hbE1ldGhvZCwgaW52b2NhdGlvbikpCi0JCQkJ
cmV0dXJuIGZpbmFsTWV0aG9kOwotCQl9Ci0JCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVtTWV0aG9k
SWZOZWVkZWQodGFyZ2V0VHlwZSwgbWV0aG9kKTsKLQl9Ci0KLQkvKioKLQkgKiBTaW1wbGlmaWVk
IEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIpCi0J
ICogYW5kIHBlcmZvcm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmluZGluZyBv
ZiBpbm5lciBwb2x5IGV4cHJlc3Npb25zLAotCSAqIGFuZCBjcmVhdGluZyBvZiBhIHByb2JsZW0g
bWV0aG9kIGJpbmRpbmcgaWYgbmVlZGVkLgotCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxlZCBpZiB0
aGUgaW5mZXJlbmNlIGhhcyBub3QgeWV0IGZpbmlzaGVkLgotCSAqIFZlcnNpb24gdXNlZCBmb3Ig
aW5uZXIgaW52b2NhdGlvbnMsIHdoZXJlIGFyZ3VtZW50IHR5cGVzIG5lZWQgdG8gYmUgZXh0cmFj
dGVkCi0JICogZnJvbSBhY3R1YWwgaW52b2NhdGlvbiBhcmd1bWVudHMuCi0JICogQHBhcmFtIGlu
dm9jYXRpb24gaW52b2NhdGlvbiBiZWluZyBpbmZlcnJlZAotCSAqIEBwYXJhbSBtZXRob2QgY3Vy
cmVudCBjYW5kaWRhdGUgbWV0aG9kIGJpbmRpbmcgZm9yIHRoaXMgaW52b2NhdGlvbgotCSAqIEBy
ZXR1cm4gYSB2YWxpZCBtZXRob2QgYmluZGluZyB3aXRoIHVwZGF0ZWQgdHlwZSBwYXJhbWV0ZXJz
LAotCSAqIAlvciBhIHByb2JsZW0gbWV0aG9kIGJpbmRpbmcgc2lnbmFsaW5nIGVpdGhlciBpbmZl
cmVuY2UgZmFpbHVyZSBvciBhIGJvdW5kIG1pc21hdGNoLgotCSAqLwotCXB1YmxpYyAvKkBOb25O
dWxsKi8gTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb24gaW52b2Nh
dGlvbiwgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQlUeXBl
QmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBudWxsOwotCQlFeHByZXNzaW9uW10gYXJndW1lbnRz
ID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7Ci0J
CQlhcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhdOwotCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJYXJndW1lbnRU
eXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCX0KLQkJcmV0dXJuIGluZmVy
SW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgbWV0aG9kKTsKIAl9CiAK
IAlwdWJsaWMgYm9vbGVhbiBoYXNSZXN1bHRGb3IoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewpA
QCAtNTkxLDYgKzUxMCwxMCBAQAogCQkJcmV0dXJuIHRoaXMuc3RlcENvbXBsZXRlZCA+PSBUWVBF
X0lORkVSUkVEOwogCQllbHNlCiAJCQlyZXR1cm4gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBl
LmNvbnRhaW5zS2V5KHRhcmdldFR5cGUpOworCX0KKwkKKwlwdWJsaWMgU29sdXRpb24gZ2V0UmVz
dWx0Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJcmV0dXJuIHRoaXMuc29sdXRpb25z
UGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlwZSk7CiAJfQogCiAJcHVibGljIGJvb2xlYW4gcmVn
aXN0ZXJTb2x1dGlvbihUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIHVwZGF0
ZWRCaW5kaW5nKSB7CkBAIC0xMzY2LDggKzEyODksNiBAQAogCQl0aGlzLmludm9jYXRpb25Bcmd1
bWVudHMgPSBpbm5lckFyZ3VtZW50czsKIAkJdGhpcy5jdXJyZW50SW52b2NhdGlvbiA9IGludm9j
YXRpb247CiAJCQotCQkvLyBzY2hlZHVsZSBmb3IgcmUtYmluZGluZyB0aGUgaW5uZXIgYWZ0ZXIg
aW5mZXJlbmNlIHN1Y2Nlc3M6Ci0JCXRoaXMuaW5uZXJQb2xpZXMuYWRkKGludm9jYXRpb24pOwog
CQlyZXR1cm4gcmVjb3JkOwogCX0KIAkKQEAgLTEzOTUsMTQ1ICsxMzE2LDYgQEAKIAkJdGhpcy5j
dXJyZW50SW52b2NhdGlvbiA9IHJlY29yZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1bWVu
dHMgPSByZWNvcmQuaW52b2NhdGlvbkFyZ3VtZW50czsKIAkJdGhpcy5pbmZlcmVuY2VLaW5kID0g
cmVjb3JkLmluZmVyZW5jZUtpbmQ7Ci0JfQotCi0JcHVibGljIGJvb2xlYW4gcmViaW5kSW5uZXJQ
b2xpZXMoTWV0aG9kQmluZGluZyBtZXRob2QsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKLQkJQm91
bmRTZXQgYm91bmRzID0gdGhpcy5jdXJyZW50Qm91bmRzOwotCQlUeXBlQmluZGluZyB0YXJnZXRU
eXBlID0gc2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQlpZiAodGFyZ2V0VHlwZSA9PSBu
dWxsIHx8ICF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJaWYgKCFzaXRlLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewotCQkJCS8vIGluIHRo
aXMgY2FzZSB3ZSBtYXkgbm90IHlldCBoYXZlIHRoZSBzb2x1dGlvbig/LCBnZXQgb3IgY29tcHV0
ZSBpdCBub3c6Ci0JCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1BlclRhcmdl
dFR5cGUuZ2V0KHRhcmdldFR5cGUpOwotCQkJCXRyeSB7Ci0JCQkJCWlmIChzb2x1dGlvbiAhPSBu
dWxsICYmIHNvbHV0aW9uLmJvdW5kcyAhPSBudWxsKQotCQkJCQkJYm91bmRzID0gc29sdXRpb24u
Ym91bmRzOwotCQkJCQllbHNlCi0JCQkJCQlib3VuZHMgPSBpbmZlckludm9jYXRpb25UeXBlKHRo
aXMuY3VycmVudEJvdW5kcywgbnVsbCwgc2l0ZSwgbWV0aG9kLnNoYWxsb3dPcmlnaW5hbCgpKTsK
LQkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKLQkJCQkJcmV0dXJu
IGZhbHNlOwotCQkJCX0KLQkJCQlpZiAoYm91bmRzID09IG51bGwpCi0JCQkJCXJldHVybiBmYWxz
ZTsKLQkJCX0KLQkJfSBlbHNlIHsKLQkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlv
bnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKLQkJCWlmIChzb2x1dGlvbiAhPSBudWxs
ICYmIHNvbHV0aW9uLmJvdW5kcyAhPSBudWxsKQotCQkJCWJvdW5kcyA9IHNvbHV0aW9uLmJvdW5k
czsKLQkJfQotCQlyZWJpbmRJbm5lclBvbGllcyhib3VuZHMsIG1ldGhvZC5wYXJhbWV0ZXJzKTsK
LQkJcmV0dXJuIHRydWU7Ci0JfQotCi0JLyoqCi0JICogQWZ0ZXIgaW5mZXJlbmNlIGhhcyBmaW5p
c2hlZCwgaXRlcmF0ZSBhbGwgaW5uZXIgcG9seSBleHByZXNzaW9ucyAoSW52b2NhdGlvbnMpLCB0
aGF0Ci0JICogaGF2ZSBiZWVuIGluY2x1ZGVkIGluIHRoZSBpbmZlcmVuY2UuIEZvciBlYWNoIG9m
IHRoZXNlIHVwZGF0ZSBzb21lIHR5cGUgaW5mb3JtYXRpb24KLQkgKiBmcm9tIHRoZSBpbmZlcmVu
Y2UgcmVzdWx0IGFuZCBwZXJoYXBzIHRyaWdnZXIgZm9sbG93LXVwIHJlc29sdmluZyBhcyBuZWVk
ZWQuCi0JICogU2ltaWxhciBmb3IgcG9seSBleHByZXNzaW9ucyB0aGF0IGRpZCBub3QgZGlyZWN0
bHkgcGFydGljaXBhdGUgaW4gdGhlIGluZmVyZW5jZQotCSAqIGJ1dCBhcmUgZGlyZWN0IGFyZ3Vt
ZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uIChGdW5jdGlvbmFsRXhwcmVzc2lvbiwgQ29u
ZGl0aW9uYWxFeHByZXNzaW9uKS4KLQkgKi8KLQlwdWJsaWMgdm9pZCByZWJpbmRJbm5lclBvbGll
cyhCb3VuZFNldCBib3VuZHMsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMpIHsKLQkJLy8g
VGhpcyB1cGRhdGVzIGFsbCByZW1haW5pbmcgcG9seSBleHByZXNzaW9ucyB0aGF0IGFyZSBkaXJl
Y3QgYXJndW1lbnRzIG9mIHRoZSBjdXJyZW50IGludm9jYXRpb246Ci0JCS8vIChoYW5kbGVzIEZ1
bmN0aW9uYWxFeHByZXNzaW9uICYgQ29uZGl0aW9uYWxFeHByZXNzaW9uKQotCQlpZiAodGhpcy5j
dXJyZW50SW52b2NhdGlvbiBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pCi0JCQlyZXR1
cm47IC8vIG5vIGlubmVyIGV4cHJlc3Npb25zCi0JCWJvb2xlYW4gaXNWYXJhcmdzID0gdGhpcy5p
bmZlcmVuY2VLaW5kID09IENIRUNLX1ZBUkFSRzsKLQkJYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVu
dHMoYm91bmRzLCBwYXJhbWV0ZXJUeXBlcywgaXNWYXJhcmdzKTsKLQkJLy8gVGhpcyBsb29wcyBv
dmVyIGFsbCBwb2x5IGV4cHJlc3Npb25zIGZvciB3aGljaCBhIHN1Yi1pbmZlcmVuY2Ugd2FzIHRy
aWdnZXJlZDoKLQkJLy8gKGhhbmRsZXMgZ2VuZXJpYyBpbnZvY2F0aW9ucykKLQkJaW50IGxlbiA9
IHRoaXMuaW5uZXJQb2xpZXMuc2l6ZSgpOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsgaSsr
KSB7Ci0JCQlFeHByZXNzaW9uIGlubmVyID0gKEV4cHJlc3Npb24pIHRoaXMuaW5uZXJQb2xpZXMu
Z2V0KGkpOwotCQkJaWYgKGlubmVyIGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikgewot
CQkJCVJlZmVyZW5jZUV4cHJlc3Npb24gcmVmZXJlbmNlRXhwcmVzc2lvbiA9IChSZWZlcmVuY2VF
eHByZXNzaW9uKSBpbm5lcjsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBpbGVUaW1lRGVjbCA9IHJl
ZmVyZW5jZUV4cHJlc3Npb24ucHJlcGFyZUZvckluZmVyZW5jZVJlc3VsdCh0aGlzLnNjb3BlKTsK
LQkJCQlpZgkoY29tcGlsZVRpbWVEZWNsICE9IG51bGwpIHsKLQkgIAkJCQlUeXBlVmFyaWFibGVC
aW5kaW5nW10gdmFyaWFibGVzID0gY29tcGlsZVRpbWVEZWNsLnR5cGVWYXJpYWJsZXM7Ci0JCQkJ
CWlmICh2YXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykgewotCQkJCQkJVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBnZXRTb2x1dGlvbnModmFyaWFibGVzLCAoSW52b2NhdGlv
blNpdGUpIGlubmVyLCBib3VuZHMpOwotCQkJCQkJcmVmZXJlbmNlRXhwcmVzc2lvbi5iaW5kaW5n
ID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjb21w
aWxlVGltZURlY2wsIGFyZ3VtZW50cyk7Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9IGVsc2UgaWYgKGlu
bmVyIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJCUludm9jYXRpb24gaW5uZXJNZXNzYWdl
ID0gKEludm9jYXRpb24pIGlubmVyOwotCQkJCVR5cGVCaW5kaW5nIGlubmVyVGFyZ2V0VHlwZSA9
IGlubmVyLmV4cGVjdGVkVHlwZSgpOyAvLyBtYXkgYmUgc2V0IGZyb20gYWNjZXB0UGVuZGluZ1Bv
bHlBcmd1bWVudHMKLQkJCQlpZiAoaW5uZXJUYXJnZXRUeXBlICE9IG51bGwgJiYgIWlubmVyVGFy
Z2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQkJCWlubmVyVGFyZ2V0VHlwZSA9IG51bGw7
Ci0JCQkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gaW5uZXJNZXNzYWdlLmJpbmRpbmcoaW5uZXJU
YXJnZXRUeXBlLCBpbm5lclRhcmdldFR5cGUgIT0gbnVsbCwgdGhpcy5zY29wZSk7Ci0JCQkJaWYg
KGJpbmRpbmcgPT0gbnVsbCkKLQkJCQkJY29udGludWU7Ci0JCQkJTWV0aG9kQmluZGluZyBvcmln
aW5hbCA9IGJpbmRpbmcuc2hhbGxvd09yaWdpbmFsKCk7Ci0KLQkJCQkvLyBhcHBseSBpbmZlcmVu
Y2UgcmVzdWx0cyBvbnRvIHRoZSBhbGxvY2F0aW9uIHR5cGUgb2YgaW5uZXIgZGlhbW9uZHM6Ci0J
CQkJaWYgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBpbm5lci5pc1BvbHlFeHByZXNzaW9u
KCkpIHsKLQkJCQkJUmVmZXJlbmNlQmluZGluZyBkZWNsYXJpbmdDbGFzcyA9IG9yaWdpbmFsLmRl
Y2xhcmluZ0NsYXNzOwotCQkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50cyA9IGdldFNvbHV0aW9u
cyhkZWNsYXJpbmdDbGFzcy50eXBlVmFyaWFibGVzKCksIGlubmVyTWVzc2FnZSwgYm91bmRzKTsK
LQkJCQkJZGVjbGFyaW5nQ2xhc3MgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6
ZWRUeXBlKGRlY2xhcmluZ0NsYXNzLCBhcmd1bWVudHMsIGRlY2xhcmluZ0NsYXNzLmVuY2xvc2lu
Z1R5cGUoKSk7Ci0JCQkJCW9yaWdpbmFsID0gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpZGVj
bGFyaW5nQ2xhc3MpLmNyZWF0ZVBhcmFtZXRlcml6ZWRNZXRob2Qob3JpZ2luYWwpOwotCQkJCQlp
bm5lci5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoaW5uZXJUYXJnZXRUeXBlLCB0aGlzLnNj
b3BlKTsJCi0JCQkJCWlmICh0aGlzLmVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQotCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGlu
Zy5jaGVja0ZvckNvbnRyYWRpdGlvbnMob3JpZ2luYWwsIGlubmVyTWVzc2FnZSwgdGhpcy5zY29w
ZSk7Ci0JCQkJfQotCQkJCQotCQkJCS8vIGFwcGx5IHJlc3VsdHMgb2YgdGhlIGNvbWJpbmVkIGlu
ZmVyZW5jZSBvbnRvIHRoZSBiaW5kaW5nIG9mIHRoZSBpbm5lciBpbnZvY2F0aW9uOgotCQkJCVR5
cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRpb25zKG9yaWdpbmFsLnR5cGVWYXJpYWJs
ZXMoKSwgaW5uZXJNZXNzYWdlLCBib3VuZHMpOwotCQkJCWlmIChzb2x1dGlvbnMgPT0gbnVsbCkg
ewotCQkJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZykgewotCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW5uZXJNZXNz
YWdlLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgYmluZGluZyk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggIT0gbnVsbCAmJiAhYmluZGluZy5pc1Zh
bGlkQmluZGluZygpKSB7Ci0JCQkJCQkJaW5uZXJDdHgucmVwb3J0SW52YWxpZEludm9jYXRpb24o
aW5uZXJNZXNzYWdlLCBiaW5kaW5nKTsKLQkJCQkJCX0KLQkJCQkJfQotCQkJCQljb250aW51ZTsg
Ly8gaW5uZXIgaW5mZXJlbmNlIG5vdCByZXF1ZXN0ZWQgLT4gbm90IGEgcHJvYmxlbQotCQkJCX0K
LQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gdGhp
cy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwg
c29sdXRpb25zKTsKLQkJCQkKLQkJCQlpZiAoaW5uZXJNZXNzYWdlLnVwZGF0ZUJpbmRpbmdzKGlu
bmVyQmluZGluZywgaW5uZXJUYXJnZXRUeXBlKSkgeyAvLyBvbmx5IGlmIHdlIGFyZSBhY3R1YWxs
eSBpbXByb3ZpbmcgYW55dGhpbmcKLQkJCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4cHJlc3Npb25B
cmd1bWVudHMoaW5uZXJNZXNzYWdlLCBpbm5lckJpbmRpbmcsIHRoaXMuc2NvcGUpOwotCQkJCX0K
LQkJCX0KLQkJfQotCQl0aGlzLnN0ZXBDb21wbGV0ZWQgPSBCSU5ESU5HU19VUERBVEVEOyAvLyB3
ZSdyZSBkb25lLWRvbmUKLQl9Ci0KLQlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ1BvbHlBcmd1
bWVudHMoQm91bmRTZXQgYWNjZXB0ZWRSZXN1bHQsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlw
ZXMsIGJvb2xlYW4gaXNWYXJBcmdzKSB7Ci0JCWlmIChhY2NlcHRlZFJlc3VsdCA9PSBudWxsIHx8
IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9PSBudWxsKSByZXR1cm47Ci0JCVN1YnN0aXR1dGlv
biBzdWJzdGl0dXRpb24gPSBnZXRSZXN1bHRTdWJzdGl0dXRpb24oYWNjZXB0ZWRSZXN1bHQpOwot
CQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7IGkr
KykgewotCQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGdldFBhcmFtZXRlcihwYXJhbWV0ZXJU
eXBlcywgaSwgaXNWYXJBcmdzKTsKLQkJCWlmICghdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1
ZSkpCi0JCQkJdGFyZ2V0VHlwZSA9IFNjb3BlLnN1YnN0aXR1dGUoc3Vic3RpdHV0aW9uLCB0YXJn
ZXRUeXBlKTsKLQkJCUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IHRoaXMuaW52b2NhdGlvbkFyZ3Vt
ZW50c1tpXTsKLQkJCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJ
CUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBleHByZXNzaW9uOwotCQkJCWlm
ICghdGhpcy5pbm5lclBvbGllcy5jb250YWlucyhpbnZvY2F0aW9uKSkgewotCQkJCQlNZXRob2RC
aW5kaW5nIG1ldGhvZCA9IGludm9jYXRpb24uYmluZGluZyh0YXJnZXRUeXBlLCB0cnVlLCB0aGlz
LnNjb3BlKTsKLQkJCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgewotCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
IHByZXZpb3VzQmluZGluZyA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1l
dGhvZDsKLQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5lckN0eCA9IGludm9jYXRpb24uZ2V0
SW5mZXJlbmNlQ29udGV4dChwcmV2aW91c0JpbmRpbmcpOwotCQkJCQkJaWYgKGlubmVyQ3R4ICE9
IG51bGwpIHsKLQkJCQkJCQkvLyB3ZSBoYXZlIGEgbm9uLXBvbHkgZ2VuZXJpYyBpbnZvY2F0aW9u
LCB3aGljaCBuZWVkcyBpbmZlcmVuY2UgYnV0IGlzIG5vdCBjb25uZWN0ZWQgdmlhIGlubmVyUG9s
aXMuCi0JCQkJCQkJLy8gRmluaXNoIHRoYXQgaW5uZXIgaW5mZXJlbmNlIG5vdyAoaW5jbC4gYmlu
ZGluZyB1cGRhdGVzKToKLQkJCQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlubmVy
Q3R4LmluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgcHJldmlvdXNCaW5kaW5nKTsKLQkJ
CQkJCQlpZiAoIWlubmVyQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCWlubmVy
Q3R4LnJlcG9ydEludmFsaWRJbnZvY2F0aW9uKGludm9jYXRpb24sIGlubmVyQmluZGluZyk7Ci0J
CQkJCQkJfQotCQkJCQkJCWlmIChpbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmluZGlu
ZywgdGFyZ2V0VHlwZSkpIHsgLy8gb25seSBpZiB3ZSBhcmUgYWN0dWFsbHkgaW1wcm92aW5nIGFu
eXRoaW5nCi0JCQkJCQkJCUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKGlu
dm9jYXRpb24sIGlubmVyQmluZGluZywgdGhpcy5zY29wZSk7Ci0JCQkJCQkJfQotCQkJCQkJfQot
CQkJCQl9IGVsc2UgaWYobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRp
bmcpewotCQkJCQkJZXhwcmVzc2lvbi5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUodGFyZ2V0
VHlwZSwgdGhpcy5zY29wZSk7Ci0JCQkJCX0KLQkJCQl9IGVsc2UgewotCQkJCQlleHByZXNzaW9u
LnNldEV4cGVjdGVkVHlwZSh0YXJnZXRUeXBlKTsKLQkJCQl9Ci0JCQl9IGVsc2UgewotCQkJCWlm
ICh0aGlzLmlubmVyUG9saWVzLmNvbnRhaW5zKGV4cHJlc3Npb24pKSAvLyBtYXkgZ2V0IGhlcmUg
Zm9yIFJlZmVyZW5jZUV4cHJlc3Npb25zIC4uLgotCQkJCQlleHByZXNzaW9uLnNldEV4cGVjdGVk
VHlwZSh0YXJnZXRUeXBlKTsgLy8gLi4uIHByZXBhcmUgZm9yIGZpbmFsIGluZmVyZW5jZSB2aWEg
cmViaW5kSW5uZXJQb2xpZXMKLQkJCQllbHNlCi0JCQkJCWV4cHJlc3Npb24uY2hlY2tBZ2FpbnN0
RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHRoaXMuc2NvcGUpOwotCQkJfQotCQl9CiAJfQog
CiAJcHJpdmF0ZSBTdWJzdGl0dXRpb24gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGZpbmFsIEJvdW5k
U2V0IHJlc3VsdCkgewpAQCAtMTU4MSwxOSArMTM2MywxNCBAQAogCQkJaWYgKG1ldGhvZC5yZXR1
cm5UeXBlLmVyYXN1cmUoKS5pc0NvbXBhdGlibGVXaXRoKGV4cGVjdGVkVHlwZSkpCiAJCQkJcmV0
dXJuIG1ldGhvZDsgLy8gZG9uJ3QgY291bnQgYXMgcHJvYmxlbS4KIAkJfQotCQlpZiAoZXhwZWN0
ZWRUeXBlID09IG51bGwpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBhc3N1bWUgaW5mZXJlbmNlIGZh
aWx1cmUgY29uY2VybmVkIGFub3RoZXIgZXhwcmVzc2lvbgotCQlQcm9ibGVtTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZCwgbWV0aG9k
LnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuUGFyYW1ldGVyaXpl
ZE1ldGhvZEV4cGVjdGVkVHlwZVByb2JsZW0pOworCQkvKiBXZSB1c2VkIHRvIGNoZWNrIGlmIGV4
cGVjdGVkIHR5cGUgaXMgbnVsbCBhbmQgaWYgc28gcmV0dXJuIG1ldGhvZCwgYnV0IHRoYXQgaXMg
d3JvbmcgLSBpdCBpbmplY3RzIGFuIGluY29tcGF0aWJsZSBtZXRob2QgaW50byBvdmVybG9hZCBy
ZXNvbHV0aW9uLgorCQkgICBpZiB3ZSBnZXQgaGVyZSB3aXRoIGV4cGVjdGVkIHR5cGUgc2V0IHRv
IG51bGwgYXQgYWxsLCB0aGUgdGFyZ2V0IGNvbnRleHQgZG9lcyBub3QgZGVmaW5lIGEgdGFyZ2V0
IHR5cGUgKHZhbmlsbGEgY29udGV4dCksIHNvIGluZmVyZW5jZSBoYXMgZG9uZSBpdHMKKwkJICAg
YmVzdCBhbmQgbm90aGluZyBtb3JlIHRvIGRvIHRoYW4gdG8gc2lnbmFsIGVycm9yLiAKKwkJICov
CisJCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhv
ZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9i
bGVtUmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUpOwogCQlwcm9ibGVtTWV0
aG9kLnJldHVyblR5cGUgPSBleHBlY3RlZFR5cGU7CiAJCXByb2JsZW1NZXRob2QuaW5mZXJlbmNl
Q29udGV4dCA9IHRoaXM7CiAJCXJldHVybiBwcm9ibGVtTWV0aG9kOwotCX0KLQotCXB1YmxpYyB2
b2lkIHJlcG9ydEludmFsaWRJbnZvY2F0aW9uKEludm9jYXRpb24gaW52b2NhdGlvbiwgTWV0aG9k
QmluZGluZyBiaW5kaW5nKSB7Ci0JCWlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgTWVzc2FnZVNl
bmQpCi0JCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmludmFsaWRNZXRob2QoKE1lc3Nh
Z2VTZW5kKSBpbnZvY2F0aW9uLCBiaW5kaW5nKTsKLQkJZWxzZQotCQkJdGhpcy5zY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5pbnZhbGlkQ29uc3RydWN0b3IoKFN0YXRlbWVudClpbnZvY2F0aW9uLCBi
aW5kaW5nKTsKIAl9CiAKIAkvLyBkZWJ1Z2dpbmc6CkBAIC0xNjMzLDEyICsxNDEwLDYgQEAKIAkJ
aWYgKHRoaXMuY3VycmVudEJvdW5kcyAhPSBudWxsKQogCQkJYnVmLmFwcGVuZCh0aGlzLmN1cnJl
bnRCb3VuZHMudG9TdHJpbmcoKSk7CiAJCXJldHVybiBidWYudG9TdHJpbmcoKTsKLQl9Ci0KLQlw
dWJsaWMgdm9pZCBhZGRQcm9ibGVtTWV0aG9kKFByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1N
ZXRob2QpIHsKLQkJaWYgKHRoaXMucHJvYmxlbU1ldGhvZHMgPT0gbnVsbCkKLQkJCXRoaXMucHJv
YmxlbU1ldGhvZHMgPSBuZXcgQXJyYXlMaXN0PE1ldGhvZEJpbmRpbmc+KCk7Ci0JCXRoaXMucHJv
YmxlbU1ldGhvZHMuYWRkKHByb2JsZW1NZXRob2QpOwogCX0KIAogCS8qKgpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKaW5kZXgg
MmU5NmE0Yi4uZjM3MDNlNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0zMSw2ICszMSw3IEBACiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRz
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVy
T3B0aW9uczsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkluZmVyZW5jZUNvbnRleHQxOC5Tb2x1dGlvbjsKIAogLyoqCiAgKiBCaW5kaW5nIGRlbm90aW5n
IGEgZ2VuZXJpYyBtZXRob2QgYWZ0ZXIgdHlwZSBwYXJhbWV0ZXIgc3Vic3RpdHV0aW9ucyBnb3Qg
cGVyZm9ybWVkLgpAQCAtNDEsNyArNDIsNyBAQAogcHVibGljIGNsYXNzIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIGlt
cGxlbWVudHMgU3Vic3RpdHV0aW9uIHsKIAogICAgIHB1YmxpYyBUeXBlQmluZGluZ1tdIHR5cGVB
cmd1bWVudHM7Ci0gICAgcHJpdmF0ZSBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKKyAg
ICBwcm90ZWN0ZWQgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7CiAgICAgcHVibGljIGJv
b2xlYW4gaW5mZXJyZWRSZXR1cm5UeXBlOwogICAgIHB1YmxpYyBib29sZWFuIHdhc0luZmVycmVk
OyAvLyBvbmx5IHNldCB0byB0cnVlIGZvciBpbnN0YW5jZXMgcmVzdWx0aW5nIGZyb20gbWV0aG9k
IGludm9jYXRpb24gaW5mZXJyZW5jZQogICAgIHB1YmxpYyBib29sZWFuIGlzUmF3OyAvLyBzZXQg
dG8gdHJ1ZSBmb3IgbWV0aG9kIGJlaGF2aW5nIGFzIHJhdyBmb3Igc3Vic3RpdHV0aW9uIHB1cnBv
c2UKQEAgLTUwLDMxICs1MSwxMSBAQAogCS8qKgogCSAqIFBlcmZvcm0gaW5mZXJlbmNlIG9mIGdl
bmVyaWMgbWV0aG9kIHR5cGUgcGFyYW1ldGVycyBhbmQvb3IgZXhwZWN0ZWQgdHlwZQogCSAqIDxw
PgotCSAqIEluIDEuOCsgdGhlIGZvbGxvd2luZyBkaXNjaXBsaW5lIGhhcyB0byBiZSBvYnNlcnZl
ZCBieSBjYWxsZXJzOgotCSAqIEVhY2ggaW52b2NhdGlvbiBtdXN0IGJlIHN1YmplY3RlZCB0byB0
d28gbGV2ZWxzIG9mIGluZmVyZW5jZToKLQkgKiA8L3A+Ci0JICogPHVsPgotCSAqIDxsaT4ge0Bs
aW5rIFNjb3BlI0FQUExJQ0FCSUxJVFkgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5j
ZX0sIHdoaWNoIG1heSBiZSBhcHBsaWVkCi0JICogICAgIG11bHRpcGxlIHRpbWVzIGZvciB0aGUg
c2FtZSBpbnZvY2F0aW9uPC9saT4KLQkgKiA8bGk+IHtAbGluayBTY29wZSNJTlZPQ0FUSU9OX1RZ
UEUgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZX0sIHdoaWNoIGlzIGZpbmFsbHkgcGVyZm9ybWVk
Ci0JICogICAgIGZvciB0aGUgc2VsZWN0ZWQgbWV0aG9kIGFuZCB3aGljaCBhZGRzIGluZm9ybWF0
aW9uIGZyb20gdGhlICJ0YXJnZXQgdHlwZSIuPC9saT4KLQkgKiA8L3VsPgotCSAqIDxwPgotCSAq
IENsaWVudHMgY2FuIGNvbnRyb2wgd2hpY2ggcGFydHMgb2YgdGhlIGluZmVyZW5jZSBzaG91bGQg
YmUgcGVyZm9ybWVkIGJ5IHBhc3NpbmcgdGhlIGFwcHJvcHJpYXRlCi0JICogZmxhZ3MgaW50byBh
cmd1bWVudCAnaW5mZXJlbmNlTGV2ZWwnLiBPbiBlYWNoIGNhbGwgcGF0aCBpdCBtdXN0IGJlIGVu
c3VyZWQgdGhhdCBvbmUgb3IgbW9yZQotCSAqIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZl
cmVuY2VzIGFyZSBhbHdheXMgZm9sbG93ZWQgYnkgZXhhY3RseSBvbmUgaW52b2NhdGlvbiB0eXBl
IGluZmVyZW5jZQotCSAqICh1bmxlc3MgZXJyb3JzIGhhdmUgYmVlbiBkZXRlY3RlZCkuCi0JICog
PC9wPgotCSAqIDxwPgotCSAqIEluaXRpYWwgY2xpZW50cyBhcmUgdGhlIGRpcmVjdCBjYWxsZXJz
IG9mCi0JICoge0BsaW5rIFNjb3BlI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRp
bmcsVHlwZUJpbmRpbmdbXSxJbnZvY2F0aW9uU2l0ZSxpbnQpfSwKLQkgKiB3aGljaCBzaG91bGQg
ZWl0aGVyIGludm9rZSBib3RoIGxldmVscyBvZiBpbmZlcmVuY2UgPGVtPm9yPC9lbT4gZGVsZWdh
dGUgdGhlIHNlY29uZCBwYXJ0IHRvCi0JICoge0BsaW5rIFNjb3BlI21vc3RTcGVjaWZpY01ldGhv
ZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdLGludCxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRl
LFJlZmVyZW5jZUJpbmRpbmcpfSwKLQkgKiB3aGljaCBpcyBpbnRlbmRlZCB0byBlbnN1cmUgY29t
cGxldGluZyB0aGUgaW5mZXJlbmNlIG9uIGFsbCBub24tZXJyb3IgZXhpdHMuCisJICogSW4gMS44
KyBpZiB0aGUgZXhwZWN0ZWQgdHlwZSBpcyBub3QgeWV0IGF2YWlsYWJsZSBkdWUgdG8gdGhpcyBj
YWxsIGJlaW5nIGFuIGFyZ3VtZW50IHRvIGFuIG91dGVyIGNhbGwgd2hpY2ggaXMgbm90IG92ZXJs
b2FkLXJlc29sdmVkIHlldCwKKwkgKiB0aGUgcmV0dXJuZWQgbWV0aG9kIGJpbmRpbmcgd2lsbCBi
ZSBhIFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuCiAJICogPC9wPiAgCiAJ
ICovCi0JcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBT
Y29wZSBzY29wZSwKLQkJCUludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBpbnQgaW5mZXJl
bmNlTGV2ZWwpCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRzLCBTY29wZSBzY29wZSwJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpCiAJewogCQlQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZTsKIAkJVHlw
ZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFy
aWFibGVzOwpAQCAtOTUsMTI2ICs3NiwzNiBAQAogCQkJLy8gaW5pdGlhbGl6ZXMgdGhlIG1hcCBv
ZiBzdWJzdGl0dXRlcyAodmFyIC0tPiB0eXBlW11bXXsgZXF1YWwsIGV4dGVuZHMsIHN1cGVyfQog
CQkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsK
IAotLy8gPT09PSAxLjg6IFRoZSBtYWluIGRyaXZlciBmb3IgaW5mZXJlbmNlIG9mIGdlbmVyaWMg
bWV0aG9kczogPT09PQotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKIAkJ
CUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMo
KTsKLQkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfOCkgewotCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBTY29wZS5BUFBMSUNBQklM
SVRZKSAhPSAwKQotCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNl
Q29udGV4dChzY29wZSk7Ci0JCQkJZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJ
bnZvY2F0aW9uICYmIG9yaWdpbmFsTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKQotCQkJCQlpbmZDdHgxOCA9ICgoSW52b2NhdGlvbikgaW52b2NhdGlv
blNpdGUpLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgb3JpZ2luYWxNZXRob2QpOwotCQkJCWlmIChpbmZDdHgxOCA9PSBudWxsKQotCQkJCQly
ZXR1cm4gb3JpZ2luYWxNZXRob2Q7Ci0JCQl9Ci0JCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCkgewot
CQkJCXRyeSB7Ci0JCQkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVzdWx0ID0gbnVsbDsKLQkJCQkJ
Qm91bmRTZXQgcmVzdWx0ID0gbnVsbDsKLQkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3Bl
LkFQUExJQ0FCSUxJVFkpICE9IDApIHsKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2
ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCQlyZXR1cm4gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QxOChvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBzY29wZSwgaW52b2NhdGlv
blNpdGUpOwogCi0JCQkJCQkvLyAtLS0tIDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0KLQkJ
CQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCi0J
CQkJCQkJCSYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgRXhwcmVzc2lvbgotCQkJCQkJCQkm
JiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2luYWxN
ZXRob2QpOwotCQkJCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gcGFyYW1ldGVycy5sZW5ndGgp
IHsKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNI
RUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJpY3Qv
bG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCi0JCQkJCQkJaW5mQ3R4MTguaW5mZXJJbnZv
Y2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQp
OwotCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKLQkJCQkJCX0K
LQkJCQkJCWlmIChwcm92aXNpb25hbFJlc3VsdCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlz
VmFyYXJncygpKSB7Ci0JCQkJCQkJLy8gY2hlY2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxpY2Fi
aWxpdHkKLQkJCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29u
dGV4dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIKLQkJCQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5k
ID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKLQkJCQkJCQlpbmZDdHgxOC5pbmZl
ckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlh
bW9uZCk7Ci0JCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJ
CQkJfQotCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ICE9IG51bGwgJiYgaW5mQ3R4MTguaXNS
ZXNvbHZlZChwcm92aXNpb25hbFJlc3VsdCkpIHsKLQkJCQkJCQlpbmZDdHgxOC5zdG9yZWRTb2x1
dGlvbiA9IHByb3Zpc2lvbmFsUmVzdWx0OwotCQkJCQkJCWluZkN0eDE4LnN0ZXBDb21wbGV0ZWQg
PSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRDsKLQkJCQkJCQlpZiAo
aW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKQotCQkJCQkJCQko
KFJlZmVyZW5jZUV4cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kID0gaW5m
Q3R4MTguaW5mZXJlbmNlS2luZDsKLQkJCQkJCX0KLQkJCQkJfSBlbHNlIHsKLQkJCQkJCXByb3Zp
c2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc3RvcmVkU29sdXRpb247Ci0JCQkJCX0KLQkJCQkJcmVz
dWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0ZXIg
cmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkvLyAxLjctIG9ubHku
CisJCQlpbmZlcmVuY2VDb250ZXh0ID0gbmV3IEluZmVyZW5jZUNvbnRleHQob3JpZ2luYWxNZXRo
b2QpOworCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUs
IG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQp
OworCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUgPT0gbnVsbCkKKwkJCQlyZXR1cm4gbnVsbDsKIAot
CQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9u
VGFyZ2V0VHlwZSgpOwotCQkJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKLQkJ
CQkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7Ci0JCQkJCWlmICgoaW5m
ZXJlbmNlTGV2ZWwgJiBTY29wZS5JTlZPQ0FUSU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVkPwot
CQkJCQkJCSYmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSkgeyAvLyBwb3NzaWJsZT8KLQot
CQkJCQkJLy8gLS0tLSAxOC41LjIgKEludm9jYXRpb24gdHlwZSk6IC0tLS0KLQkJCQkJCXJlc3Vs
dCA9IGluZkN0eDE4LmluZmVySW52b2NhdGlvblR5cGUocmVzdWx0LCBleHBlY3RlZFR5cGUsIGlu
dm9jYXRpb25TaXRlLCBvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJCQlpbnZvY2F0aW9uVHlwZUluZmVy
cmVkID0gdHJ1ZTsKLQkJCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7Ci0J
CQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkKLQkJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJl
c3VsdDsgLy8gbGV0J3MgcHJlZmVyIGEgdHlwZSBlcnJvciByZWdhcmRpbmcgdGhlIHJldHVybiB0
eXBlIG92ZXIgcmVwb3J0aW5nIG5vIG1hdGNoIGF0IGFsbAotCQkJCQl9IGVsc2UgewotCQkJCQkJ
Ly8gd2UncmUgbm90IHlldCByZWFkeSBmb3IgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQotCQkJ
CQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7Ci0JCQkJCX0KLQotCQkJCQlpZiAocmVzdWx0
ICE9IG51bGwpIHsKLQkJCQkJCS8vIGFzc2VtYmxlIHRoZSBzb2x1dGlvbiBldGM6Ci0JCQkJCQlU
eXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGluZkN0eDE4LmdldFNvbHV0aW9ucyh0eXBlVmFyaWFi
bGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVzdWx0KTsKLQkJCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVs
bCkgewotCQkJCQkJCQotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBzY29wZS5lbnZpcm9ubWVu
dCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsTWV0aG9kLCBzb2x1
dGlvbnMpOwotCQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3b3Jr
aW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJlc3VsdD8KLQkJCQkJCQkJTWV0aG9kQmluZGluZyBw
cm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4
cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7Ci0JCQkJCQkJCWlmIChwcm9ibGVtTWV0aG9k
IGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpCi0JCQkJCQkJCQlyZXR1cm4gcHJvYmxl
bU1ldGhvZDsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJyZWQpIHsK
LQkJCQkJCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNp
c0VuYWJsZWQpCi0JCQkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJh
ZGl0aW9ucyhtZXRob2RTdWJzdGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOwotCQkJCQkJ
CQlpbmZDdHgxOC5yZWJpbmRJbm5lclBvbGllcyhyZXN1bHQsIG1ldGhvZFN1YnN0aXR1dGUucGFy
YW1ldGVycyk7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1
YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOwotCQkJCQkJCQlpZiAocHJv
YmxlbU1ldGhvZCAhPSBudWxsKQotCQkJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7Ci0JCQkJ
CQkJfSBlbHNlIHsKLQkJCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2Nh
dGlvbikKLQkJCQkJCQkJCSgoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLnJlZ2lzdGVySW5m
ZXJlbmNlQ29udGV4dChtZXRob2RTdWJzdGl0dXRlLCBpbmZDdHgxOCk7IC8vIGtlZXAgY29udGV4
dCBzbyB3ZSBjYW4gZmluaXNoIGxhdGVyCi0JCQkJCQkJfQotCQkJCQkJCXJldHVybiBtZXRob2RT
dWJzdGl0dXRlOwotCQkJCQkJfQotCQkJCQl9Ci0JCQkJCXJldHVybiBudWxsOwotCQkJCX0gY2F0
Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBGSVhNRSBzdG9wLWdh
cCBtZWFzdXJlCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVuY2VF
cnJvcihlLmdldE1lc3NhZ2UoKSwgaW52b2NhdGlvblNpdGUpOwotCQkJCQlyZXR1cm4gbnVsbDsK
KwkJCS8vIHN1YnN0aXR1dGVzIG1heSBob2xkIG51bGwgdG8gZGVub3RlIHVucmVzb2x2ZWQgdmFy
cywgYnV0IG51bGwgYXJndW1lbnRzIGdvdCByZXBsYWNlZCB3aXRoIHJlc3BlY3RpdmUgb3JpZ2lu
YWwgdmFyaWFibGUgaW4gcGFyYW0gbWV0aG9kCisJCQkvLyAxNS4xMi4yLjggLSBpbmZlcnJpbmcg
dW5yZXNvbHZlZCB0eXBlIGFyZ3VtZW50cworCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5y
ZXNvbHZlZFR5cGVBcmd1bWVudCgpKSB7CisJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaXNVbmNo
ZWNrZWQpIHsgLy8gb25seSByZW1lbWJlciB1bmNoZWNrZWQgc3RhdHVzIHBvc3QgMTUuMTIuMi43
CisJCQkJCWludCBsZW5ndGggPSBpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLmxlbmd0aDsK
KwkJCQkJU3lzdGVtLmFycmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1
bmNoZWNrZWRBcmd1bWVudHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsK
IAkJCQl9Ci0JCQl9IGVsc2UgewotLy8gPT09PSAxLjggPT09PQotCQkJCWluZmVyZW5jZUNvbnRl
eHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dChvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IGluZmVyRnJvbUFyZ3VtZW50VHlwZXMoc2NvcGUsIG9yaWdpbmFsTWV0aG9kLCBh
cmd1bWVudHMsIHBhcmFtZXRlcnMsIGluZmVyZW5jZUNvbnRleHQpOworCQkJCWlmIChtZXRob2RT
dWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRCkgeworCQkJCQlUeXBlQmlu
ZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgp
OworCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKKwkJCQkJCS8vIHJlY29yZCBpdCB3
YXMgZXhwbGljaXQgZnJvbSBjb250ZXh0LCBhcyBvcHBvc2VkIHRvIGFzc3VtZWQgYnkgZGVmYXVs
dCAoc2VlIGJlbG93KQorCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5oYXNFeHBsaWNpdEV4cGVjdGVk
VHlwZSA9IHRydWU7CisJCQkJCX0gZWxzZSB7CisJCQkJCQlleHBlY3RlZFR5cGUgPSBzY29wZS5n
ZXRKYXZhTGFuZ09iamVjdCgpOyAvLyBhc3N1bWUgT2JqZWN0IGJ5IGRlZmF1bHQKKwkJCQkJfQor
CQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJCQl9
CisJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG1ldGhvZFN1YnN0aXR1dGUuaW5mZXJGcm9tRXhwZWN0
ZWRUeXBlKHNjb3BlLCBpbmZlcmVuY2VDb250ZXh0KTsKIAkJCQlpZiAobWV0aG9kU3Vic3RpdHV0
ZSA9PSBudWxsKQogCQkJCQlyZXR1cm4gbnVsbDsKLQkJCQkKLQkJCQkvLyBzdWJzdGl0dXRlcyBt
YXkgaG9sZCBudWxsIHRvIGRlbm90ZSB1bnJlc29sdmVkIHZhcnMsIGJ1dCBudWxsIGFyZ3VtZW50
cyBnb3QgcmVwbGFjZWQgd2l0aCByZXNwZWN0aXZlIG9yaWdpbmFsIHZhcmlhYmxlIGluIHBhcmFt
IG1ldGhvZAotCQkJCS8vIDE1LjEyLjIuOCAtIGluZmVycmluZyB1bnJlc29sdmVkIHR5cGUgYXJn
dW1lbnRzCi0JCQkJaWYgKGluZmVyZW5jZUNvbnRleHQuaGFzVW5yZXNvbHZlZFR5cGVBcmd1bWVu
dCgpKSB7Ci0JCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0LmlzVW5jaGVja2VkKSB7IC8vIG9ubHkg
cmVtZW1iZXIgdW5jaGVja2VkIHN0YXR1cyBwb3N0IDE1LjEyLjIuNwotCQkJCQkJaW50IGxlbmd0
aCA9IGluZmVyZW5jZUNvbnRleHQuc3Vic3RpdHV0ZXMubGVuZ3RoOwotCQkJCQkJU3lzdGVtLmFy
cmF5Y29weShpbmZlcmVuY2VDb250ZXh0LnN1YnN0aXR1dGVzLCAwLCB1bmNoZWNrZWRBcmd1bWVu
dHMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKLQkJCQkJfQotCQkJCQlp
ZiAobWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQpIHsKLQkJ
CQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25U
YXJnZXRUeXBlKCk7Ci0JCQkJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwpIHsKLQkJCQkJCQkv
LyByZWNvcmQgaXQgd2FzIGV4cGxpY2l0IGZyb20gY29udGV4dCwgYXMgb3Bwb3NlZCB0byBhc3N1
bWVkIGJ5IGRlZmF1bHQgKHNlZSBiZWxvdykKLQkJCQkJCQlpbmZlcmVuY2VDb250ZXh0Lmhhc0V4
cGxpY2l0RXhwZWN0ZWRUeXBlID0gdHJ1ZTsKLQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJZXhwZWN0
ZWRUeXBlID0gc2NvcGUuZ2V0SmF2YUxhbmdPYmplY3QoKTsgLy8gYXNzdW1lIE9iamVjdCBieSBk
ZWZhdWx0Ci0JCQkJCQl9Ci0JCQkJCQlpbmZlcmVuY2VDb250ZXh0LmV4cGVjdGVkVHlwZSA9IGV4
cGVjdGVkVHlwZTsKLQkJCQkJfQotCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbWV0aG9kU3Vic3Rp
dHV0ZS5pbmZlckZyb21FeHBlY3RlZFR5cGUoc2NvcGUsIGluZmVyZW5jZUNvbnRleHQpOwotCQkJ
CQlpZiAobWV0aG9kU3Vic3RpdHV0ZSA9PSBudWxsKQotCQkJCQkJcmV0dXJuIG51bGw7Ci0JCQkJ
fQogCQkJfQogCQl9CiAKQEAgLTI2Niw2ICsxNTcsOTMgQEAKIAkJcmV0dXJuIG1ldGhvZFN1YnN0
aXR1dGU7CiAJfQogCisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kMTgoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBh
cmd1bWVudHMsIGZpbmFsIFNjb3BlIHNjb3BlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0
ZSkgeworCQkKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFN1YnN0
aXR1dGUgPSBudWxsOworCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9y
aWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgx
OCA9IG51bGw7CisJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9kLnBh
cmFtZXRlcnM7CisJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250
ZXh0KHNjb3BlKTsKKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNv
bXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxz
ZTsKKwkJCisJCXRyeSB7CisJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7CisJ
CQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2FiaWxp
dHkpOiAtLS0tCisJCQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0aW9u
U2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRl
KS5pc1BvbHlFeHByZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKKwkJCWJvb2xlYW4gaXNEaWFtb25k
ID0gaXNQb2x5RXhwcmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7CisJ
CQlpZiAoYXJndW1lbnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgeworCQkJCWluZkN0
eDE4LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRP
RE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykg
aXMgc3VmZmljaWVudC4KKwkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5
KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CisJCQkJcmVzdWx0ID0gaW5m
Q3R4MTguc29sdmUoKTsKKwkJCX0KKwkJCWlmIChyZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1l
dGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBhcHBs
aWNhYmlsaXR5CisJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNv
bnRleHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9
IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJaW5mQ3R4MTguaW5mZXJJbnZv
Y2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQp
OworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQl9CisJCQlpZiAocmVzdWx0ID09
IG51bGwpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChyZXN1
bHQpKSB7CisJCQkJaW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5B
UFBMSUNBQklMSVRZX0lORkVSUkVEOworCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9m
IFJlZmVyZW5jZUV4cHJlc3Npb24pCisJCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2Nh
dGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8vIENI
RUNLCisJCQl9IGVsc2UgeworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJLy8gQXBwbGljYWJp
bGl0eSBzdWNjZWVkZWQsIHByb2NlZWQgdG8gaW5mZXIgaW52b2NhdGlvbiB0eXBlLCBpZiBwb3Nz
aWJsZS4KKwkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9j
YXRpb25UYXJnZXRUeXBlKCk7CisJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsK
KwkJCWlmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCAhaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVz
c2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CisJCQkJLy8gLS0tLSAxOC41LjIg
KEludm9jYXRpb24gdHlwZSk6IC0tLS0KKwkJCQlwcm92aXNpb25hbFJlc3VsdCA9IHJlc3VsdDsK
KwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3Vs
dCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKwkJCQlyZXN1
bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBlLCBp
bnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QpOworCQkJCWludm9jYXRpb25UeXBlSW5mZXJy
ZWQgPSB0cnVlOworCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09IG51bGw7CisJCQkJ
aWYgKGhhc1JldHVyblByb2JsZW0pCisJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAv
LyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0dXJuIHR5cGUgb3Zl
ciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQl9CisJCQlpZiAocmVzdWx0ICE9IG51bGwp
IHsKKwkJCQkvLyBhc3NlbWJsZSB0aGUgc29sdXRpb24gZXRjOgorCQkJCVR5cGVCaW5kaW5nW10g
c29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRp
b25TaXRlLCByZXN1bHQpOworCQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCQltZXRo
b2RTdWJzdGl0dXRlID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZChvcmlnaW5hbE1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQkJaWYgKGhhc1JldHVy
blByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVz
dWx0PworCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0
dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7
CisJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5n
KSB7CisJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CisJCQkJCQkJcmV0dXJuIHByb2Js
ZW1NZXRob2Q7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJy
ZWQpIHsKKwkJCQkJCWlmIChjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5h
bHlzaXNFbmFibGVkKQorCQkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250
cmFkaXRpb25zKG1ldGhvZFN1YnN0aXR1dGUsIGludm9jYXRpb25TaXRlLCBzY29wZSk7CisJCQkJ
CQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBtZXRob2RTdWJzdGl0dXRlLmJvdW5kQ2hl
Y2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwp
IHsKKwkJCQkJCQltZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKKwkJCQkJCQlyZXR1cm4gcHJvYmxl
bU1ldGhvZDsKKwkJCQkJCX0KKwkJCQkJCWluZkN0eDE4LnNvbHV0aW9uc1BlclRhcmdldFR5cGUu
cHV0KGV4cGVjdGVkVHlwZSwgbmV3IFNvbHV0aW9uKG1ldGhvZFN1YnN0aXR1dGUsIHJlc3VsdCkp
OworCQkJCQl9IGVsc2UgeworCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG5ldyBQb2x5UGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKG1ldGhvZFN1YnN0aXR1dGUpOworCQkJCQl9CisJ
CQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pCisJCQkJCQkoKElu
dm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQobWV0aG9k
U3Vic3RpdHV0ZSwgaW5mQ3R4MTgpOyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlzaCBs
YXRlcgorCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsgCisJCQkJfQorCQkJfQorCQkJcmV0
dXJuIG51bGw7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgeworCQkJ
Ly8gRklYTUUgc3RvcC1nYXAgbWVhc3VyZQorCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2Vu
ZXJpY0luZmVyZW5jZUVycm9yKGUuZ2V0TWVzc2FnZSgpLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQly
ZXR1cm4gbnVsbDsKKwkJfQorCX0KKwkKIAlNZXRob2RCaW5kaW5nIGJvdW5kQ2hlY2sxOChTY29w
ZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJU3Vic3RpdHV0aW9uIHN1YnN0
aXR1dGlvbiA9IHRoaXM7CiAJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRo
b2RTdWJzdGl0dXRlID0gdGhpczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5UGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMC4uNWFhYWU4OQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UG9seVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBAIC0wLDAgKzEsMTgg
QEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTQgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Cisg
KiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENvbnRy
aWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVt
ZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCitwdWJsaWMgY2xhc3MgUG9seVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyB7IC8vIGNvbmZ1c2VkIGNpdGl6ZW4uCisKKwlwdWJsaWMgUG9seVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyhQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcgYXBwbGljYWJsZU1ldGhvZCkgeworCQlzdXBlcihhcHBsaWNhYmxlTWV0aG9kLm9yaWdpbmFs
TWV0aG9kLCBhcHBsaWNhYmxlTWV0aG9kLnR5cGVBcmd1bWVudHMsIGFwcGxpY2FibGVNZXRob2Qu
ZW52aXJvbm1lbnQpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVC
aW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlUeXBlQmluZGluZy5qYXZhCmluZGV4IDVj
NzViOTAuLmZkYmQyZjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVR5cGVCaW5kaW5n
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5VHlwZUJpbmRpbmcuamF2YQpAQCAtNTEsNiAr
NTEsMTEgQEAKIAlwdWJsaWMgYm9vbGVhbiBpc1BvbHlUeXBlKCkgewogCQlyZXR1cm4gdHJ1ZTsK
IAl9CisJCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNGdW5jdGlvbmFsVHlwZSgpIHsK
KwkJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbi5pc0Z1bmN0aW9uYWxUeXBlKCk7CisJfQogCiAJcHVi
bGljIGNoYXJbXSBxdWFsaWZpZWRTb3VyY2VOYW1lKCkgewogCQlyZXR1cm4gcmVhZGFibGVOYW1l
KCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKaW5kZXggYjNkNjAwNS4uMjFkMDdlYiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQpAQCAtNDAsMTAgKzQwLDEwIEBACiAJZmluYWwgaW50
IE5vblN0YXRpY09yQWxpZW5UeXBlUmVjZWl2ZXIgPSAyMDsKIAlmaW5hbCBpbnQgQXR0ZW1wdFRv
QnlwYXNzRGlyZWN0U3VwZXIgPSAyMTsgLy8gc3VwZXIgYWNjZXNzIHdpdGhpbiBkZWZhdWx0IG1l
dGhvZAogCWZpbmFsIGludCBEZWZlY3RpdmVDb250YWluZXJBbm5vdGF0aW9uVHlwZSA9IDIyOwot
CWZpbmFsIGludCBQYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSA9IDIzOwor
CWZpbmFsIGludCBJbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1cmUgPSAyMzsKIAlmaW5hbCBp
bnQgQXBwbGljYWJsZU1ldGhvZE92ZXJyaWRkZW5CeUluYXBwbGljYWJsZSA9IDI0OwogCWZpbmFs
IGludCBDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zID0gMjU7CiAJZmluYWwgaW50IE5vU3Vj
aE1ldGhvZE9uQXJyYXkgPSAyNjsKLQlmaW5hbCBpbnQgSW5mZXJyZWRBcHBsaWFibGVNZXRob2RJ
bmFwcGxpY2FibGUgPSAyNzsgLy8gMTguNS4xIGlnbm9yZXMgYXJndW1lbnRzIG5vdCBwZXJ0aW5l
bnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4gaW50byBjb25zaWRlcmF0
aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkKKwlmaW5hbCBpbnQgSW5mZXJyZWRB
cHBsaWNhYmxlTWV0aG9kSW5hcHBsaWNhYmxlID0gMjc7IC8vIDE4LjUuMSBpZ25vcmVzIGFyZ3Vt
ZW50cyBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHkuIFdoZW4gdGhlc2UgYXJlIHRha2Vu
IGludG8gY29uc2lkZXJhdGlvbiBtZXRob2QgY291bGQgZmFpbCBhcHBsaWNhYmlsaXR5CiAJZmlu
YWwgaW50IE5vUHJvcGVyRW5jbG9zaW5nSW5zdGFuY2UgPSAyODsKIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJp
bmRpbmcuamF2YQppbmRleCBlMTRjNzVmLi4zMTcwMGFmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGlu
Zy5qYXZhCkBAIC0yMDUsNiArMjA1LDExIEBACiAJCX0KIAkJdGhpcy5hcmd1bWVudHMgPSB0eXBl
QXJndW1lbnRzOwogCX0KKwkJCisJQE92ZXJyaWRlIAorCXB1YmxpYyBUeXBlQmluZGluZyB1bmNh
cHR1cmUoU2NvcGUgc2NvcGUpIHsKKwkJcmV0dXJuIHRoaXM7CisJfQogCQogCUBPdmVycmlkZQog
CVR5cGVCaW5kaW5nIHN1YnN0aXR1dGVJbmZlcmVuY2VWYXJpYWJsZShJbmZlcmVuY2VWYXJpYWJs
ZSB2YXIsIFR5cGVCaW5kaW5nIHN1YnN0aXR1dGVUeXBlKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggZjBjNTY4
MS4uM2Y5MWM0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtODcsMTkgKzg3LDkgQEAKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBOT1RfUkVMQVRFRCA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgTU9S
RV9HRU5FUklDID0gMTsKIAotCS8qCi0JICogRmxhZ3MgZm9yIFBHTUIuY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QoKSBhbmQgaXRzIGNhbGxlcnMsIHRvIHJlcXVlc3QKLQkgKiB3aGljaCBvZiB0d28g
bGV2ZWxzIG9mIGluZmVyZW5jZSBzaG91bGQgYmUgcGVyZm9ybWVkIChvciBib3RoKS4KLQkgKi8K
LQkvKiogUmVxdWVzdCBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlICgxOC41LjEp
LiAqLwotCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IEFQUExJQ0FCSUxJVFkgPSAxOwotCS8qKiBS
ZXF1ZXN0IEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKDE4LjUuMikuICovCi0JcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgSU5WT0NBVElPTl9UWVBFID0gMjsKLQkvKiogUmVxdWVzdCBib3RoIHtA
bGluayAjQVBQTElDQUJJTElUWX0gYW5kIHtAbGluayAjSU5WT0NBVElPTl9UWVBFfSBpbmZlcmVu
Y2UuICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRlVMTF9JTkZFUkVOQ0UgPSBBUFBMSUNB
QklMSVRZIHwgSU5WT0NBVElPTl9UWVBFOwotCiAJcHVibGljIGludCBraW5kOwogCXB1YmxpYyBT
Y29wZSBwYXJlbnQ7CisJCiAKIAlwcm90ZWN0ZWQgU2NvcGUoaW50IGtpbmQsIFNjb3BlIHBhcmVu
dCkgewogCQl0aGlzLmtpbmQgPSBraW5kOwpAQCAtNjkxLDEwICs2ODEsMTAgQEAKIAkgKiBJbnRl
cm5hbCB1c2Ugb25seQogCSAqIEdpdmVuIGEgbWV0aG9kLCByZXR1cm5zIG51bGwgaWYgYXJndW1l
bnRzIGNhbm5vdCBiZSBjb252ZXJ0ZWQgdG8gcGFyYW1ldGVycy4KIAkgKiBXaWxsIGFuc3dlciBh
IHN1YnN0aXR1dGVkIG1ldGhvZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIGdlbmVyaWMgYW5kIHR5
cGUgaW5mZXJlbmNlIGdvdCB0cmlnZ2VyZWQ7Ci0JICogaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBv
cmlnaW5hbGx5IGNvbXBhdGlibGUsIHRoZW4gc2ltcGx5IGFuc3dlciBpdCBiYWNrLgorCSAqIGlu
IGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21wYXRpYmxlLCB0aGVuIHNpbXBseSBh
bnN3ZXIgaXQgYmFjay4gCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10g
YXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxl
dmVsKSB7Ci0JCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50
cywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsLCBmYWxzZSk7CisJcHJvdGVjdGVkIGZp
bmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBt
ZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9u
U2l0ZSkgeworCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVu
dHMsIGludm9jYXRpb25TaXRlLCBmYWxzZSk7CiAJfQkKIAkvKioKIAkgKiBJbnRlcm5hbCB1c2Ug
b25seQpAQCAtNzAyLDggKzY5Miw3IEBACiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBt
ZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBn
b3QgdHJpZ2dlcmVkOwogCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21w
YXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KIAkgKi8KLQlwcm90ZWN0ZWQgZmlu
YWwgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1l
dGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsCi0JCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0
aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMpCisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZv
Y2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRo
b2RzKQogCXsKIAkJVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRp
b25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVy
cyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwpAQCAtNzM4LDkgKzcyNywxNSBAQAogCQkJCWFyZ3VtZW50
cyA9IG5ld0FyZ3M7CiAJCQllbHNlICAvLyBlbnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1l
dGhvZCgpIGJlbG93IGNhbiB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2Fs
bGVyOiAoVE9ETzogYWx3YXlzIGNvcHkgYmVmb3JlIHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCiAJ
CQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVudHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRp
bmdbYXJnTGVuZ3RoXSwgMCwgYXJnTGVuZ3RoKTsKLQkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3Vt
ZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsKTsKKwkJCW1ldGhvZCA9
IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhv
ZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUpOwogCQkJaWYgKG1ldGhv
ZCA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJCQlpZiAoIW1ldGhvZC5p
c1ZhbGlkQmluZGluZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBjaGVjayBpc3N1ZSBpcyB0
YWtpbmcgcHJlY2VkZW5jZQorCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9j
YXRpb24pIHsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2Nh
dGlvblNpdGU7CisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9IGludm9jYXRpb24uZ2V0
SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRo
b2QpOworCQkJCWlmIChpbmZDdHggIT0gbnVsbCkKKwkJCQkJcmV0dXJuIG1ldGhvZDsgLy8gaW5m
ZXJlbmNlIGlzIHJlc3BvbnNpYmxlLCBubyBuZWVkIHRvIHJlY2hlY2ssIGFjdHVhbGx5IHdlIGNv
dWxkIGNoZWNrIGZ1bmN0aW9uYWwgYXJndW1lbnRzLCBzZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzQ0NCNjMTI1CisJCQl9CiAJCX0gZWxzZSBpZiAo
Z2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0
YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCkBA
IC03NTUsNyArNzUwLDcgQEAKIAkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2Fs
QW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24gJiYgY29tcGlsZXJPcHRpb25zLmNvbXBsaWFuY2VM
ZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCQkJdGllYnJlYWtpbmdWYXJhcmdz
TWV0aG9kcyA9IGZhbHNlOwogCQl9Ci0JCWlmICgocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
MTgobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRp
b25TaXRlKSkgPiBOT1RfQ09NUEFUSUJMRSkgeworCQlpZiAoKHBhcmFtZXRlckNvbXBhdGliaWxp
dHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4g
Tk9UX0NPTVBBVElCTEUpIHsKIAkJCWlmICgobWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90
YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCS8vIGdlbmVyYXRlIHBvbHlt
b3JwaGljIG1ldGhvZAogCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1v
cnBoaWNNZXRob2QobWV0aG9kLCBhcmd1bWVudHMpOwpAQCAtNzY3LDE1MCArNzYyLDEwIEBACiAJ
CS8vIGluIHdoaWNoIGNhc2UgdGhpcyBwcm9ibGVtIGNhdGVnb3J5IHdpbGwgYmUgYm9ndXMKIAkJ
aWYgKGdlbmVyaWNUeXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlcyAhPSBCaW5k
aW5nLk5PX1RZUEVfVkFSSUFCTEVTKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGlu
ZyhtZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgYXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJh
bWV0ZXJpemVkTWV0aG9kVHlwZU1pc21hdGNoKTsKKwkJLy8gMTguNS4xIGlnbm9yZXMgYXJndW1l
bnRzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gV2hlbiB0aGVzZSBhcmUgdGFrZW4g
aW50byBjb25zaWRlcmF0aW9uIG1ldGhvZCBjb3VsZCBmYWlsIGFwcGxpY2FiaWxpdHkgKGUuZywg
bGFtYmRhIHNoYXBlL2FyaXR5IG1pc21hdGNoIC4uLikKKwkJaWYgKG1ldGhvZCBpbnN0YW5jZW9m
IFBvbHlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIC8vIE5vdCByZWFjaGVkLCBi
dXQgbGVmdCBpbiBmb3Igbm93LgorCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyht
ZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25z
LkluZmVycmVkQXBwbGljYWJsZU1ldGhvZEluYXBwbGljYWJsZSk7CiAJCXJldHVybiBudWxsOyAv
LyBpbmNvbXBhdGlibGUKLQl9Ci0KLQlwcml2YXRlIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwxOChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJv
b2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgSW52b2NhdGlvblNpdGUgc2l0ZSkgewot
CQlqZGsxOGNoZWNrczoKLQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGNvbXBp
bGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
KSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgc2l0ZTsKLQkJCWlm
IChtZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsK
LQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VD
b250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCk7Ci0JCQkJ
aWYgKGluZkN0eCAhPSBudWxsKSB7Ci0JCQkJCS8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwg
bm8gbmVlZCB0byByZWNoZWNrCi0JCQkJCWlmIChpbmZDdHguaXNWYXJBcmdzKCkpCi0JCQkJCQly
ZXR1cm4gVkFSQVJHU19DT01QQVRJQkxFOwotCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCQl9
Ci0JCQl9Ci0JCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRpb25zIHdoZXJlIHRoZSBvdXRlciBk
aWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZToKLQkJCUV4cHJlc3Npb25bXSBpbnZvY2F0aW9u
QXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKLQkJCWlmIChpbnZvY2F0aW9uQXJn
dW1lbnRzICE9IG51bGwpIHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5j
ZUhlbHBlciA9IGludm9jYXRpb24uaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlpbnQgYXJn
TGVuID0gaW52b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7Ci0JCQkJYm9vbGVhbiBpc1ZhckFyZ3Nb
XSA9IG5ldyBib29sZWFuWzFdOyAvLyBlbXVsYXRlIGFuIGluLW91dCBwYXJhbWV0ZXIgZm9yIGNv
bXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKC4uKQotCQkJCWlzVmFyQXJnc1swXSA9IG1ldGhv
ZC5pc1ZhcmFyZ3MoKSAmJiBhcmdMZW4gIT0gbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoOyAvLyBp
ZiBzYW1lIGxlbmd0aHMsIGlzVmFyQXJncyBjYW4gc3RpbGwgYmUgdXBkYXRlZCBiZWxvdwotCQkJ
CWludCBsZXZlbCA9IENPTVBBVElCTEU7Ci0JCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW47
IGkrKykgewotCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudFR5cGUgPSBpIDwgYXJndW1lbnRzLmxl
bmd0aCA/IGFyZ3VtZW50c1tpXSA6IG51bGw7IC8vIGxlbmd0aCBtaXNtYXRjaCBtYXkgaGFwcGVu
IGZyb20gQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5yZXNvbHZlVHlwZSgpIGluIHRoZSBpZiAoYXJn
SGFzRXJyb3IpIGJsb2NrLgotCQkJCQlpbnQgbmV4dExldmVsID0gY29tcGF0aWJpbGl0eUxldmVs
MThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgaW52b2NhdGlvbkFyZ3Vt
ZW50c1tpXSwgYXJndW1lbnRUeXBlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJCWlmIChu
ZXh0TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCQlyZXR1cm4gbmV4dExldmVsOwotCQkJ
CQlpZiAobmV4dExldmVsID09IC0yKQotCQkJCQkJYnJlYWsgamRrMThjaGVja3M7Ci0JCQkJCWxl
dmVsID0gTWF0aC5tYXgobGV2ZWwsICBuZXh0TGV2ZWwpOwotCQkJCX0KLQkJCQlyZXR1cm4gbGV2
ZWw7IC8vIG5laXRoZXIgTk9UX0NPTVBBVElCTEUgbm9yIHVua25vd24oLTIpIHNlZW4KLQkJCX0K
LQkJfQotCQkvLyBmYWxsIGJhY2sgdG8gb2xkIG1ldGhvZDoKLQkJYm9vbGVhbiB0b2xlcmF0ZUlu
ZmVyZW5jZVZhcmlhYmxlcyA9ICgoc2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24p
ICYmICgoUmVmZXJlbmNlRXhwcmVzc2lvbikgc2l0ZSkudHJpYWxSZXNvbHV0aW9uKTsKLQkJcmV0
dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJl
YWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOwotCX0KLQot
CXByaXZhdGUgaW50IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciwgRXhwcmVz
c2lvbiBpbnZvY0FyZywgVHlwZUJpbmRpbmcgYXJnVHlwZSwgaW50IGFyZ0xlbiwgaW50IGksIGJv
b2xlYW5bXSBpc1ZhckFyZ3MpCi0JewotCQlpbnQgY29tcGF0aWJsZSA9IGlzVmFyQXJnc1swXSA/
IFZBUkFSR1NfQ09NUEFUSUJMRSA6IENPTVBBVElCTEU7Ci0JCVR5cGVCaW5kaW5nIHJlc29sdmVk
VHlwZSA9IGludm9jQXJnLnJlc29sdmVkVHlwZTsKLQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9
IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIGlz
VmFyQXJnc1swXSk7Ci0JCWlmICghaXNWYXJBcmdzWzBdICYmIHNob3VsZFRyeVZhcmFyZ3MobWV0
aG9kLCByZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpKSB7Ci0JCQlpc1ZhckFyZ3NbMF0gPSB0cnVl
OwotCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9k
LnBhcmFtZXRlcnMsIGksIHRydWUpOwotCQl9Ci0JCWlmICh0YXJnZXRUeXBlID09IG51bGwpCi0J
CQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7IC8vIG1pc21hdGNoaW5nIG51bWJlciBvZiBhcmdzIG9y
IG90aGVyIHNldmVyZSBwcm9ibGVtIGluc2lkZSBtZXRob2QgYmluZGluZwotCQlpbnQgbGV2ZWwg
PSAtMjsgLy8gZG9uJ3Qga25vdwotCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBJbnZvY2F0aW9u
ICYmIHJlc29sdmVkVHlwZSAhPSBudWxsKSB7Ci0JCQlJbnZvY2F0aW9uIGlubmVyUG9seSA9IChJ
bnZvY2F0aW9uKSBpbnZvY0FyZzsKLQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBB
VElCTEUpIHsKLQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKGFyZ1R5cGUsIHJlc29sdmVk
VHlwZSkgJiYgaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJaW5uZXJJbmZlcmVu
Y2VIZWxwZXIucmVnaXN0ZXJJbm5lclJlc3VsdChtZXRob2QsIHJlc29sdmVkVHlwZSwgYXJnTGVu
LCBpKTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJfSBlbHNl
IHsKLQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlubmVyUG9seS5iaW5kaW5nKG51
bGwsIGZhbHNlLCBudWxsKTsgLy8gMS4gdHJ5IHdpdGhvdXQgdXBkYXRlCi0JCQkJaWYgKGlubmVy
QmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewot
CQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJQYXJhbWV0ZXJpemVk
ID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgaW5uZXJCaW5kaW5nOwotCQkJ
CQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5lclBvbHkuZ2V0SW5mZXJlbmNlQ29u
dGV4dChpbm5lclBhcmFtZXRlcml6ZWQpOwotCQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCAmJiAh
aW5mQ3R4MTguaGFzUmVzdWx0Rm9yKHRhcmdldFR5cGUpKSB7Ci0JCQkJCQkvLyBub3QgZGV0ZWN0
ZWQgYXMgY29tcGF0aWJsZSwgYmVjYXVzZSBpbmZlcmVuY2Ugc3RpbGwgbmVlZHMgdG8gY29tcGxl
dGU/Ci0JCQkJCQlpbnZvY0FyZy5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQkJCQlN
ZXRob2RCaW5kaW5nIHNvbHV0aW9uID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShpbm5l
clBvbHksIGlubmVyUGFyYW1ldGVyaXplZCk7Ci0JCQkJCQlpZiAoc29sdXRpb24gIT0gbnVsbCAm
JiBzb2x1dGlvbi5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJaWYgKGlubmVyUG9seS51cGRh
dGVCaW5kaW5ncyhzb2x1dGlvbiwgdGFyZ2V0VHlwZSkpIHsKLQkJCQkJCQkJaWYgKGlubmVySW5m
ZXJlbmNlSGVscGVyICE9IG51bGwpCi0JCQkJCQkJCQlpbm5lckluZmVyZW5jZUhlbHBlci5yZWdp
c3RlcklubmVyUmVzdWx0KG1ldGhvZCwgaW52b2NBcmcucmVzb2x2ZWRUeXBlLCBhcmdMZW4sIGkp
OwotCQkJCQkJCX0KLQkJCQkJCQlpZiAoc29sdXRpb24ucmV0dXJuVHlwZSAhPSBudWxsKSB7Ci0J
CQkJCQkJCWxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHNvbHV0aW9uLnJldHVy
blR5cGUsIHRhcmdldFR5cGUpOwotCQkJCQkJCQlpZiAobGV2ZWwgIT0gTk9UX0NPTVBBVElCTEUp
Ci0JCQkJCQkJCQlyZXR1cm4gTWF0aC5tYXgoY29tcGF0aWJsZSwgbGV2ZWwpOwotCQkJCQkJCX0K
LQkJCQkJCX0KLQkJCQkJCWludm9jQXJnLnNldEV4cGVjdGVkVHlwZShudWxsKTsKLQkJCQkJCXJl
dHVybiBOT1RfQ09NUEFUSUJMRTsKLQkJCQkJfSBlbHNlIGlmIChpbm5lclBvbHkgaW5zdGFuY2Vv
ZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewotCQkJCQkJLy8gbm90IGRldGVjdGVkIGFzIGNvbXBh
dGlibGUsIGJlY2F1c2UgaXRzIGEgZGlhbW9uZCB3aG9zZSB0eXBlIGhhc24ndCB5ZXQgYmVlbiBp
bmZlcnJlZD8KLQkJCQkJCVR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cyA9IHJlc29sdmVkVHlw
ZS50eXBlQXJndW1lbnRzKCk7Ci0JCQkJCQlpZiAodHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIHR5
cGVBcmd1bWVudHMubGVuZ3RoID09IDApIHsKLQkJCQkJCQlBbGxvY2F0aW9uRXhwcmVzc2lvbiBh
bGxvYyA9IChBbGxvY2F0aW9uRXhwcmVzc2lvbikgaW5uZXJQb2x5OwotCQkJCQkJCWlmICgoYWxs
b2MudHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDApIHsKLQkJCQkJCQkJLy8gbm90
LXlldC1pbmZlcnJlZCBkaWFtb25kOiBlcmFzdXJlIGNvbXBhdGliaWxpdHkgc2hvdWxkIHN1ZmZp
Y2UsIGRldGFpbCB3aWxsIGJlIGNoZWNrZWQgdXNpbmcgaW5mZXJlbmNlCi0JCQkJCQkJCWlmIChy
ZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLmVyYXN1cmUoKSwgdGhpcykp
Ci0JCQkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZTsKLQkJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJ
QkxFOwotCQkJCQkJCX0KLQkJCQkJCX0KLQkJCQkJfQotCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5
IGluc3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKLQkJCQkJTWV0aG9kQmluZGluZyB1
cGRhdGVkTWV0aG9kID0gaW5uZXJQb2x5LmJpbmRpbmcodGFyZ2V0VHlwZSwgZmFsc2UsIG51bGwp
OyAvLyAyLiB0cnkgd2l0aCB1cGRhdGluZwotCQkJCQlpZiAodXBkYXRlZE1ldGhvZCAhPSBpbm5l
ckJpbmRpbmcgJiYgdXBkYXRlZE1ldGhvZCAhPSBudWxsKSB7Ci0JCQkJCQlpZiAodXBkYXRlZE1l
dGhvZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5kZWNsYXJp
bmdDbGFzcy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUpKQotCQkJCQkJCXJldHVybiBjb21w
YXRpYmxlOwotCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCQkJfSBlbHNlIGlmICh1
cGRhdGVkTWV0aG9kLnByb2JsZW1JZCgpID09IFByb2JsZW1SZWFzb25zLkFtYmlndW91cykgewot
CQkJCQkJCWxldmVsID0gLTI7IC8vIG5laXRoZXIgZ29vZCBub3IgYmFkLCBhbnN3ZXIgInVua25v
d24iCi0JCQkJCQl9Ci0JCQkJCX0KLQkJCQl9Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52b2NBcmcu
aXNQb2x5RXhwcmVzc2lvbigpKSB7Ci0JCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBDb25kaXRp
b25hbEV4cHJlc3Npb24pIHsKLQkJCQlDb25kaXRpb25hbEV4cHJlc3Npb24gY2UgPSAoQ29uZGl0
aW9uYWxFeHByZXNzaW9uKSBpbnZvY0FyZzsKLQkJCQlpbnQgbGV2ZWwxID0gY29tcGF0aWJpbGl0
eUxldmVsMThGcm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgY2UudmFsdWVJ
ZlRydWUsIGFyZ1R5cGUsIGFyZ0xlbiwgaSwgaXNWYXJBcmdzKTsKLQkJCQlpZiAobGV2ZWwxID09
IE5PVF9DT01QQVRJQkxFKQotCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCQkJaW50IGxl
dmVsMiA9IGNvbXBhdGliaWxpdHlMZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVu
Y2VIZWxwZXIsIGNlLnZhbHVlSWZGYWxzZSwgYXJnVHlwZSwgYXJnTGVuLCBpLCBpc1ZhckFyZ3Mp
OwotCQkJCWlmIChsZXZlbDIgPT0gTk9UX0NPTVBBVElCTEUpCi0JCQkJCXJldHVybiBOT1RfQ09N
UEFUSUJMRTsKLQkJCQlyZXR1cm4gTWF0aC5tYXgobGV2ZWwxLCBsZXZlbDIpOwotCQkJfQotCQkJ
Ly8gTEUgb3IgUkU6Ci0JCQlpZiAoaW52b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBl
LCB0aGlzKSkKLQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJCWlmICghaXNWYXJBcmdzWzBdICYm
IG1ldGhvZC5pc1ZhcmFyZ3MoKSkgeyAvLyBjYW4ndCB1c2Ugc2hvdWxkVHJ5VmFyYXJncyB3aXRo
b3V0IGEgcmVzb2x2ZWRUeXBlLCBzbyBqdXN0IHRyeSBpdDoKLQkJCQlpc1ZhckFyZ3NbMF0gPSB0
cnVlOwotCQkJCXRhcmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1l
dGhvZC5wYXJhbWV0ZXJzLCBpLCB0cnVlKTsKLQkJCQlpZiAodGFyZ2V0VHlwZSAhPSBudWxsICYm
IGludm9jQXJnLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhpcykpCi0JCQkJCXJldHVy
biBWQVJBUkdTX0NPTVBBVElCTEU7Ci0JCQl9Ci0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0J
CX0gZWxzZSBpZiAocmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgcmVzb2x2ZWRUeXBlLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCS8vIG5lZWQgdG8gaGFuZGxlICJub3JtYWwiIGV4cHJlc3Npb25zIHRv
bywgc2luY2UgbWl4ZWQgcG9seS9zdGFuZGFsb25lIGFyZ3VtZW50IGxpc3RzIG11c3QgYmUgZnVs
bHkgYW5hbHl6ZWQuCi0JCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHJlc29s
dmVkVHlwZSwgdGFyZ2V0VHlwZSk7Ci0JCX0KLQkJcmV0dXJuIGxldmVsOwotCX0KLQotCXByaXZh
dGUgYm9vbGVhbiBzaG91bGRUcnlWYXJhcmdzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmlu
ZGluZyByZXNvbHZlZFR5cGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJaWYgKCFtZXRo
b2QuaXNWYXJhcmdzKCkpCi0JCQlyZXR1cm4gZmFsc2U7Ci0JCWlmICh0YXJnZXRUeXBlID09IG51
bGwpCi0JCQlyZXR1cm4gdHJ1ZTsJLy8gb2ZmIHJhbmdlCi0JCWlmICh0YXJnZXRUeXBlLmlzQXJy
YXlUeXBlKCkgJiYgcmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgIXJlc29sdmVkVHlwZS5pc0NvbXBh
dGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQotCQkJcmV0dXJuIHRydWU7CS8vIG5vdCBhIGRp
cmVjdCBtYXRjaCBidXQgaG9wZSB0byBpbXByb3ZlCi0JCXJldHVybiBmYWxzZTsKIAl9CiAKIAkv
KioKQEAgLTEyNjcsNyArMTEyMiw3IEBACiAJCQluZXh0OgogCQkJZm9yIChpbnQgaSA9IHN0YXJ0
Rm91bmRTaXplOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhv
ZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhv
ZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhv
ZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsK
KwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1l
dGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJ
aWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoY29uY3JldGVNYXRjaGVzICE9IG51bGwp
IHsKQEAgLTEyOTcsOCArMTE1Miw2IEBACiAJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOyAvLyBj
YW4gYmUgbnVsbAogCQkJfQogCQkJY29uY3JldGVNYXRjaCA9IGNhbmRpZGF0ZXNbMF07Ci0JCQkv
LyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFz
a3MgKDE4LjUuMik6Ci0JCQljb25jcmV0ZU1hdGNoID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZv
Y2F0aW9uU2l0ZSwgY29uY3JldGVNYXRjaCwgYXJndW1lbnRUeXBlcyk7CiAJCQlpZiAoY29uY3Jl
dGVNYXRjaCAhPSBudWxsKQogCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJl
ZmVyZW5jZXMoY29uY3JldGVNYXRjaC50aHJvd25FeGNlcHRpb25zKTsKIAkJCXJldHVybiBjb25j
cmV0ZU1hdGNoOwpAQCAtMTM3MSw3ICsxMjI0LDcgQEAKIAkJCQkvLyB0YXJnZXRpbmcgYSBnZW5l
cmljIG1ldGhvZCBjb3VsZCBmaW5kIGFuIGV4YWN0IG1hdGNoIHdpdGggdmFyaWFibGUgcmV0dXJu
IHR5cGUKIAkJCQlpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAhPSBu
dWxsKSB7CiAJCQkJCS8vIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKC4uKSB3aWxsIHJldHVybiBh
IFBvbHltb3JwaGljTWV0aG9kQmluZGluZyBpZiBuZWVkZWQKLQkJCQkJZXhhY3RNZXRob2QgPSBj
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2Nh
dGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKKwkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUp
OwogCQkJCX0gZWxzZSBpZiAoKGV4YWN0TWV0aG9kLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRp
b25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJCQkvLyBnZW5lcmF0ZSBwb2x5bW9y
cGhpYyBtZXRob2QKIAkJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9y
cGhpY01ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcyk7CkBAIC0xNzYzLDIyICsxNjE2
LDEzIEBACiAJCQkvLyBhcmd1bWVudCB0eXBlIGNvbXBhdGliaWxpdHkgY2hlY2sKIAkJCWZvciAo
aW50IGkgPSAwOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhv
ZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhv
ZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhv
ZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsK
KwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1l
dGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJ
aWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoZm91bmRTaXplID09IDEgJiYgY29tcGF0
aWJsZU1ldGhvZC5jYW5CZVNlZW5CeShyZWNlaXZlclR5cGUsIGludm9jYXRpb25TaXRlLCB0aGlz
KSkgewogCQkJCQkJCS8vIHJldHVybiB0aGUgc2luZ2xlIHZpc2libGUgbWF0Y2ggbm93CiAJCQkJ
CQkJaWYgKHNlYXJjaEZvckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkKIAkJCQkJCQkJcmV0dXJuIGZp
bmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRU
eXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBuZXcgTWV0
aG9kQmluZGluZyBbXSB7Y29tcGF0aWJsZU1ldGhvZH0pOwotLy8gPT09PSAxLjg6IEZpbmFsaXpl
IHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09PQotCQkJCQkJCU1ldGhvZEJp
bmRpbmcgaW1wcm92ZWQgPSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjb21w
YXRpYmxlTWV0aG9kLCBhcmd1bWVudFR5cGVzKTsKLQkJCQkJCQlpZiAoaW1wcm92ZWQgIT0gbnVs
bCAmJiBpbXByb3ZlZC5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCQkJCQkJCWNvbXBhdGlibGVNZXRo
b2QgPSBpbXByb3ZlZDsKLQkJCQkJCQl9IGVsc2UgewotCQkJCQkJCQlwcm9ibGVtTWV0aG9kID0g
aW1wcm92ZWQ7Ci0JCQkJCQkJCWNvbnRpbnVlOwotCQkJCQkJCX0KLS8vID09PT0gMS44ID09PT0K
IAkJCQkJCQl1bml0U2NvcGUucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29tcGF0aWJsZU1ldGhvZC50
aHJvd25FeGNlcHRpb25zKTsKIAkJCQkJCQlyZXR1cm4gY29tcGF0aWJsZU1ldGhvZDsKIAkJCQkJ
CX0KQEAgLTE4ODcsOCArMTczMSw3IEBACiAJCQljYXNlIDEgOgogCQkJCWlmIChzZWFyY2hGb3JE
ZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0
aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRl
LCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJpbmRpbmcgW10geyBjYW5k
aWRhdGVzWzBdIH0pOwotCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVy
Zm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQljYW5kaWRhdGUgPSBpbmZlcklu
dm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRhdGVzWzBdLCBhcmd1bWVudFR5cGVz
KTsKKwkJCQljYW5kaWRhdGUgPSBjYW5kaWRhdGVzWzBdOwogCQkJCWlmIChjYW5kaWRhdGUgIT0g
bnVsbCkKIAkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJv
d25FeGNlcHRpb25zKTsKIAkJCQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtMjM4MCw3ICsyMjIzLDEw
IEBACiAJCX0KIAkJaWYgKGV4YWN0TWV0aG9kID09IG51bGwgfHwgIWV4YWN0TWV0aG9kLmNhbkJl
U2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCXJldHVybiBudWxsOwotCQlpZiAoZXhh
Y3RNZXRob2QuaXNWYXJhcmdzKCkgfHwgZXhhY3RNZXRob2QudHlwZVZhcmlhYmxlcygpICE9IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1
bWVudHMoKSA9PSBudWxsKQorCQkKKwkJZmluYWwgVHlwZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRz
ID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKKwkJVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBleGFjdE1ldGhvZC50eXBlVmFyaWFibGVzKCk7CisJ
CWlmIChleGFjdE1ldGhvZC5pc1ZhcmFyZ3MoKSB8fCAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTICYmICh0eXBlQXJndW1lbnRzID09IG51bGwgfHwgdHlwZUFyZ3Vt
ZW50cy5sZW5ndGggIT0gdHlwZVZhcmlhYmxlcy5sZW5ndGgpKSkKIAkJCXJldHVybiBudWxsOwog
CQkKIAkJaWYgKHJlY2VpdmVyVHlwZS5pc0FycmF5VHlwZSgpKSB7CkBAIC0yMzk1LDYgKzIyNDEs
MTAgQEAKIAkJewogCQkJcmV0dXJuIGVudmlyb25tZW50KCkuY3JlYXRlR2V0Q2xhc3NNZXRob2Qo
cmVjZWl2ZXJUeXBlLCBleGFjdE1ldGhvZCwgdGhpcyk7CiAJCX0KKwkJCisJCWlmICh0eXBlVmFy
aWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIAorCQkJcmV0dXJuIGVudmlyb25t
ZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoZXhhY3RNZXRob2QsIHR5cGVB
cmd1bWVudHMpOworCQogCQlyZXR1cm4gZXhhY3RNZXRob2Q7CiAJfQogCQkKQEAgLTI0MTcsMTkg
KzIyNjcsMjYgQEAKIAkJTWV0aG9kQmluZGluZyBleGFjdENvbnN0cnVjdG9yID0gbnVsbDsKIAkJ
dW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2UocmVjZWl2ZXJUeXBlKTsKIAkJTWV0aG9kQmlu
ZGluZ1tdIG1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklO
SVQpOworCQlmaW5hbCBUeXBlQmluZGluZ1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzID0gaW52b2Nh
dGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKIAkJZm9yIChpbnQgaSA9IDAsIGxlbmd0
aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCU1ldGhvZEJpbmRpbmcg
Y29uc3RydWN0b3IgPSBtZXRob2RzW2ldOwogCQkJaWYgKCFjb25zdHJ1Y3Rvci5jYW5CZVNlZW5C
eShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQkJY29udGludWU7CiAJCQlpZiAoY29uc3RydWN0
b3IuaXNWYXJhcmdzKCkpCiAJCQkJcmV0dXJuIG51bGw7Ci0JCQlpZiAoY29uc3RydWN0b3IudHlw
ZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgaW52b2NhdGlvblNp
dGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkJaWYgKGNvbnN0cnVjdG9yLnR5
cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGdlbmVyaWNUeXBl
QXJndW1lbnRzID09IG51bGwpCiAJCQkJcmV0dXJuIG51bGw7CiAJCQlpZiAoZXhhY3RDb25zdHJ1
Y3RvciA9PSBudWxsKSB7CiAJCQkJZXhhY3RDb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yOwogCQkJ
fSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJfQorCQlmaW5hbCBUeXBlVmFyaWFi
bGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IGV4YWN0Q29uc3RydWN0b3IudHlwZVZhcmlhYmxl
cygpOworCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7
CisJCQlpZiAodHlwZVZhcmlhYmxlcy5sZW5ndGggIT0gZ2VuZXJpY1R5cGVBcmd1bWVudHMubGVu
Z3RoKQorCQkJCXJldHVybiBudWxsOworCQkJZXhhY3RDb25zdHJ1Y3RvciA9IGVudmlyb25tZW50
KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2QoZXhhY3RDb25zdHJ1Y3RvciwgZ2Vu
ZXJpY1R5cGVBcmd1bWVudHMpOwogCQl9CiAJCXJldHVybiBleGFjdENvbnN0cnVjdG9yOwogCX0K
QEAgLTI0NTgsNyArMjMxNSw3IEBACiAJCQlpZiAobWV0aG9kQmluZGluZyAhPSBudWxsICYmIG1l
dGhvZEJpbmRpbmcuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJCQkgICAg
Ly8gdGFyZ2V0aW5nIGEgbm9uIGdlbmVyaWMgY29uc3RydWN0b3Igd2l0aCB0eXBlIGFyZ3VtZW50
cyA/CiAJCQkgICAgaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0g
bnVsbCkKLQkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5D
RSk7CisJCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRo
b2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQkJcmV0dXJuIG1l
dGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVy
VHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgp
OwpAQCAtMjQ3Miw3ICsyMzI5LDcgQEAKIAkJCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQkJ
TWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbnVsbDsKIAkJCWZvciAoaW50IGkgPSAwLCBs
ZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkJTWV0aG9kQmlu
ZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tp
XSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOworCQkJCU1l
dGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKIAkJCQlpZiAoY29tcGF0
aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRC
aW5kaW5nKCkpCiAJCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGli
bGVNZXRob2Q7CkBAIC0yNDk1LDggKzIzNTIsNyBAQAogCQkJCQl2aXNpYmxlW3Zpc2libGVJbmRl
eCsrXSA9IG1ldGhvZDsKIAkJCX0KIAkJCWlmICh2aXNpYmxlSW5kZXggPT0gMSkgewotCQkJCS8v
IDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNr
cyAoMTguNS4yKToKLQkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0
ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQkJcmV0dXJuIHZpc2libGVbMF07CiAJ
CQl9CiAJCQlpZiAodmlzaWJsZUluZGV4ID09IDApCiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0
aG9kQmluZGluZygKQEAgLTI3NjAsNyArMjYxNiw3IEBACiAJCQkJCQkJCWlmIChmb3VuZFByb2Js
ZW0gPT0gbnVsbCkKIAkJCQkJCQkJCWZvdW5kUHJvYmxlbSA9IHBvc3NpYmxlOyAvLyBhbnN3ZXIg
YXMgZXJyb3IgY2FzZSBtYXRjaAogCQkJCQkJCX0gZWxzZSBpZiAocG9zc2libGUuaXNTdGF0aWMo
KSkgewotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQ
UExJQ0FCSUxJVFkpOworCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBj
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlv
blNpdGUpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCQkJ
CQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQkJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkodW5pdFNjb3BlLmZQYWNrYWdlKSkgewpAQCAt
MzU5Niw4ICszNDUyLDggQEAKIAkJCWZvciAoaW50IGkgPSAob25lUGFyYW1zTGVuZ3RoID4gdHdv
UGFyYW1zTGVuZ3RoID8gdHdvUGFyYW1zTGVuZ3RoIDogb25lUGFyYW1zTGVuZ3RoKSAtIDI7IGkg
Pj0gMDsgaS0tKQogCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMob25lUGFyYW1zW2ldLCB0
d29QYXJhbXNbaV0pICYmICFvbmVQYXJhbXNbaV0uaXNDb21wYXRpYmxlV2l0aCh0d29QYXJhbXNb
aV0pKQogCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKG9uZSwgdHdvUGFyYW1zLCB0cnVlLCBmYWxzZSkgPT0gTk9UX0NPTVBBVElCTEUKLQkJCQkJ
JiYgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFyYW1zLCB0cnVlLCBmYWxz
ZSkgPT0gVkFSQVJHU19DT01QQVRJQkxFKQorCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChvbmUsIHR3b1BhcmFtcywgdHJ1ZSkgPT0gTk9UX0NPTVBBVElCTEUKKwkJCQkJJiYgcGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHR3bywgb25lUGFyYW1zLCB0cnVlKSA9PSBWQVJBUkdT
X0NPTVBBVElCTEUpCiAJCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJcmV0dXJuIGZhbHNlOwpAQCAt
NDM3MiwzMyArNDIyOCwyMiBAQAogCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIG1vc3RT
cGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmluZGluZ1tdIHZpc2libGUsIGludCB2aXNpYmxl
U2l6ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBp
bnZvY2F0aW9uU2l0ZSwgUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUpIHsKIAogCQlib29s
ZWFuIGlzSmRrMTggPSBjb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84OwotCiAJCS8vIGNvbW1vbiBwYXJ0IGZvciBhbGwgY29tcGxpYW5jZSBs
ZXZlbHM6CiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W3Zpc2libGVTaXpl
XTsKIAkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgdmlz
aWJsZVNpemU7IGkrKykgewotCQkJVHlwZUJpbmRpbmdbXSBhcmdUeXBlcyA9IGFyZ3VtZW50VHlw
ZXM7Ci0JCQlpZiAoaXNKZGsxOCAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRp
b24pIHsKLQkJCQlJbm5lckluZmVyZW5jZUhlbHBlciBpbm5lckluZmVyZW5jZUhlbHBlciA9ICgo
SW52b2NhdGlvbilpbnZvY2F0aW9uU2l0ZSkuaW5uZXJJbmZlcmVuY2VIZWxwZXIoKTsKLQkJCQlp
ZiAoaW5uZXJJbmZlcmVuY2VIZWxwZXIgIT0gbnVsbCkKLQkJCQkJYXJnVHlwZXMgPSBpbm5lcklu
ZmVyZW5jZUhlbHBlci5nZXRBcmd1bWVudFR5cGVzRm9yQ2FuZGlkYXRlKHZpc2libGVbaV0sIGFy
Z3VtZW50VHlwZXMpOwotCQkJfQotCQkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHZpc2libGVbaV0sIGFyZ1R5cGVzKSkgIT0gTk9UX0NP
TVBBVElCTEUpIHsKKwkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKQorCQkJ
aWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpKSAhPSBOT1RfQ09NUEFUSUJMRSkgewogCQkJCWlm
IChpICE9IGNvbXBhdGlibGVDb3VudCkgewogCQkJCQl2aXNpYmxlW2NvbXBhdGlibGVDb3VudF0g
PSB2aXNpYmxlW2ldOwogCQkJCQljb21wYXRpYmlsaXR5TGV2ZWxzW2NvbXBhdGlibGVDb3VudF0g
PSBjb21wYXRpYmlsaXR5TGV2ZWxzW2ldOwogCQkJCX0KIAkJCQljb21wYXRpYmxlQ291bnQrKzsK
IAkJCX0KLQkJfQotLy8gVE9ETzogRGlzYWJsZWQsIGJlY2F1c2Ugd2Uga25vdyBhIHNpdHVhdGlv
biB3aGVyZSB0aGlzIGlzIGV4cGVjdGVkLCBzZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzQy
OTQ5MAotLy8JCWlmIChjb21wYXRpYmxlQ291bnQgIT0gdmlzaWJsZVNpemUpIHsKLS8vCQkJcHJv
YmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZVByb2JsZW0oIihSZWNvdmVyZWQpIEludGVy
bmFsIGluY29uc2lzdGVuY3kgd2hpbGUgY2hlY2tpbmcgaW52b2NhdGlvbiBhbWJpZ3VpdHkiLCBp
bnZvY2F0aW9uU2l0ZSwgUHJvYmxlbVNldmVyaXRpZXMuV2FybmluZyk7IC8vJE5PTi1OTFMtMSQK
LS8vCQl9CisJCQogCQlpZiAoY29tcGF0aWJsZUNvdW50ID09IDApIHsKIAkJCXJldHVybiBuZXcg
UHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXS5zZWxlY3RvciwgYXJndW1lbnRUeXBlcywg
UHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCQl9IGVsc2UgaWYgKGNvbXBhdGlibGVDb3VudCA9
PSAxKSB7Ci0JCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUo
aW52b2NhdGlvblNpdGUsIHZpc2libGVbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJTWV0aG9kQmlu
ZGluZyBjYW5kaWRhdGUgPSB2aXNpYmxlWzBdOwogCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQog
CQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRl
LnRocm93bkV4Y2VwdGlvbnMpOwogCQkJcmV0dXJuIGNhbmRpZGF0ZTsKQEAgLTQ0MDgsOCArNDI1
Myw4IEBACiAJCQlTeXN0ZW0uYXJyYXljb3B5KGNvbXBhdGliaWxpdHlMZXZlbHMsIDAsIGNvbXBh
dGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W2NvbXBhdGlibGVDb3VudF0sIDAsIGNvbXBhdGlibGVD
b3VudCk7CiAJCX0KIAkJCisJCQogCQlNZXRob2RCaW5kaW5nW10gbW9yZVNwZWNpZmljID0gbmV3
IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemVdOwotCiAJCWlmIChpc0pkazE4KSB7CiAJCQkvLyAx
NS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1vc3QgU3BlY2lmaWMgTWV0aG9kCiAJCQlpbnQgY291bnQg
PSAwOwpAQCAtNDQ2OSw3ICs0MzE0LDcgQEAKIAkJCWlmIChjb3VudCA9PSAwKSB7CiAJCQkJcmV0
dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh2aXNpYmxlWzBdLCB2aXNpYmxlWzBdLnNlbGVj
dG9yLCB2aXNpYmxlWzBdLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLkFtYmlndW91cyk7CiAJ
CQl9IGVsc2UgaWYgKGNvdW50ID09IDEpIHsKLQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9
IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIG1vcmVTcGVjaWZpY1swXSwgYXJn
dW1lbnRUeXBlcyk7CisJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBtb3JlU3BlY2lmaWNb
MF07CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQogCQkJCQljb21waWxhdGlvblVuaXRTY29w
ZSgpLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKIAkJ
CQlyZXR1cm4gY2FuZGlkYXRlOwpAQCAtNDUyMyw3ICs0MzY4LDcgQEAKIAkJCQkJCQl9CiAJCQkJ
CQl9CiAJCQkJCQlNZXRob2RCaW5kaW5nIGFjY2VwdGFibGUgPSBjb21wdXRlQ29tcGF0aWJsZU1l
dGhvZChtZXRob2RUb1Rlc3QsIHRpZWJyZWFrTWV0aG9kLnBhcmFtZXRlcnMsCi0JCQkJCQkJCXRp
ZUJyZWFrSW52b2NhdGlvblNpdGUsIElOVk9DQVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19D
T01QQVRJQkxFKTsKKwkJCQkJCQkJdGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFS
QVJHU19DT01QQVRJQkxFKTsKIAkJCQkJCS8qIFRoZXJlIGFyZSA0IGNob2ljZXMgdG8gY29uc2lk
ZXIgd2l0aCBjdXJyZW50ICYgbmV4dCA6CiAJCQkJCQkgZm9vKEIpICYgZm9vKEEpIHdoZXJlIEIg
ZXh0ZW5kcyBBCiAJCQkJCQkgMS4gdGhlIDIgbWV0aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0
IGVhY2ggb3RoZXJzIHBhcmFtZXRlcnMpIC0+IHdhbnQgdG8gY29udGludWUKQEAgLTQ1NDcsOCAr
NDM5Miw3IEBACiAJCQlpZiAoY291bnQgPT0gMSkgewogCQkJCWZvciAoaW50IGkgPSAwOyBpIDwg
dmlzaWJsZVNpemU7IGkrKykgewogCQkJCQlpZiAobW9yZVNwZWNpZmljW2ldICE9IG51bGwpIHsK
LQkJCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFu
ZGluZyB0YXNrcyAoMTguNS4yKToKLQkJCQkJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5m
ZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVtpXSwgYXJndW1lbnRUeXBl
cyk7CisJCQkJCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZSA9IHZpc2libGVbaV07CiAJCQkJCQlp
ZiAoY2FuZGlkYXRlICE9IG51bGwpCiAJCQkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNv
cmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CiAJCQkJCQlyZXR1
cm4gY2FuZGlkYXRlOwpAQCAtNDY2OSw4ICs0NTEzLDcgQEAKIAkJCQlpZiAobW9zdFNwZWNpZmlj
RXhjZXB0aW9ucyAhPSBudWxsICYmIG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgIT0gY3VycmVudC50
aHJvd25FeGNlcHRpb25zKSB7CiAJCQkJCXJldHVybiBuZXcgTW9zdFNwZWNpZmljRXhjZXB0aW9u
TWV0aG9kQmluZGluZyhjdXJyZW50LCBtb3N0U3BlY2lmaWNFeGNlcHRpb25zKTsKIAkJCQl9Ci0J
CQkJLy8gMS44OiBCZWZvcmUgcmV0dXJuaW5nIGdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBl
cmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6Ci0JCQkJcmV0dXJuIGluZmVySW52b2Nh
dGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGN1cnJlbnQsIGFyZ3VtZW50VHlwZXMpOworCQkJCXJl
dHVybiBjdXJyZW50OwogCQkJfQogCQl9CiAKQEAgLTQ3MzUsOSArNDU3OCw5IEBACiAJfQogCiAJ
cHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRo
b2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlLCBmYWxzZSk7CisJCXJldHVybiBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKIAl9
CQotCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcg
bWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHVibGlj
IGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMp
IHsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCWlu
dCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJn
dW1lbnRzLmxlbmd0aDsKQEAgLTQ3NjksMTQgKzQ2MTIsMTQgQEAKIAkJCQlUeXBlQmluZGluZyBw
YXJhbSA9IHBhcmFtZXRlcnNbbGFzdEluZGV4XTsgLy8gaXMgYW4gQXJyYXlCaW5kaW5nIGJ5IGRl
ZmluaXRpb24KIAkJCQlUeXBlQmluZGluZyBhcmcgPSBhcmd1bWVudHNbbGFzdEluZGV4XTsKIAkJ
CQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpKSB7Ci0JCQkJCWxldmVsID0g
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdW
YXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCQlsZXZlbCA9
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5n
VmFyYXJnc01ldGhvZHMpOwogCQkJCQlpZiAobGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpIHsKIAkJ
CQkJCS8vIGV4cGVjdCBYW10sIGlzIGl0IGNhbGxlZCB3aXRoIFgKIAkJCQkJCXBhcmFtID0gKChB
cnJheUJpbmRpbmcpIHBhcmFtKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJCWlmICh0aWVicmVha2lu
Z1ZhcmFyZ3NNZXRob2RzKSB7CiAJCQkJCQkJYXJnID0gKChBcnJheUJpbmRpbmcpIGFyZykuZWxl
bWVudHNUeXBlKCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAocGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxl
dmVsKGFyZywgcGFyYW0sIGVudiwgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgdG9sZXJhdGVJ
bmZlcmVuY2VWYXJpYWJsZXMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKHBhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsK
IAkJCQkJCWxldmVsID0gVkFSQVJHU19DT01QQVRJQkxFOyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVl
ZGVkCiAJCQkJCX0KQEAgLTQ3ODYsNyArNDYyOSw3IEBACiAJCQkJCVR5cGVCaW5kaW5nIHBhcmFt
ID0gKChBcnJheUJpbmRpbmcpIHBhcmFtZXRlcnNbbGFzdEluZGV4XSkuZWxlbWVudHNUeXBlKCk7
CiAJCQkJCWZvciAoaW50IGkgPSBsYXN0SW5kZXg7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJ
CQkJVHlwZUJpbmRpbmcgYXJnID0gKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKGkgPT0g
KGFyZ0xlbmd0aCAtIDEpKSkgPyAoKEFycmF5QmluZGluZylhcmd1bWVudHNbaV0pLmVsZW1lbnRz
VHlwZSgpIDogYXJndW1lbnRzW2ldOwotCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhw
YXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52
LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCB0b2xlcmF0ZUluZmVyZW5jZVZhcmlhYmxlcykg
PT0gTk9UX0NPTVBBVElCTEUpCisJCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFt
LCBhcmcpICYmIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRp
ZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJfQogCQkJCX0gIGVsc2UgaWYgKGxhc3RJbmRleCAhPSBh
cmdMZW5ndGgpIHsgLy8gY2FuIGNhbGwgZm9vKGludCBpLCBYIC4uLiB4KSB3aXRoIGZvbygxKSBi
dXQgTk9UIGZvbygpOwpAQCAtNDgwMiw3ICs0NjQ1LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFt
ID0gcGFyYW1ldGVyc1tpXTsKIAkJCVR5cGVCaW5kaW5nIGFyZyA9ICh0aWVicmVha2luZ1ZhcmFy
Z3NNZXRob2RzICYmIChpID09IChhcmdMZW5ndGggLSAxKSkpID8gKChBcnJheUJpbmRpbmcpYXJn
dW1lbnRzW2ldKS5lbGVtZW50c1R5cGUoKSA6IGFyZ3VtZW50c1tpXTsKIAkJCWlmIChUeXBlQmlu
ZGluZy5ub3RFcXVhbHMoYXJnLHBhcmFtKSkgewotCQkJCWludCBuZXdMZXZlbCA9IHBhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMsIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJCQlpbnQgbmV3TGV2ZWwgPSBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1Zh
cmFyZ3NNZXRob2RzKTsKIAkJCQlpZiAobmV3TGV2ZWwgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJ
CXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQlpZiAobmV3TGV2ZWwgPiBsZXZlbCkKQEAgLTQ4
MzEsNyArNDY3NCw3IEBACiAJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAl9CiAJCi0JcHJpdmF0
ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlwZUJp
bmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2luZ1Zh
cmFyZ3NNZXRob2RzLCBib29sZWFuIHRvbGVyYXRlSW5mZXJlbmNlVmFyaWFibGVzKSB7CisJcHJp
dmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKFR5cGVCaW5kaW5nIGFyZywgVHlw
ZUJpbmRpbmcgcGFyYW0sIExvb2t1cEVudmlyb25tZW50IGVudiwgYm9vbGVhbiB0aWVCcmVha2lu
Z1ZhcmFyZ3NNZXRob2RzKSB7CiAJCS8vIG9ubHkgY2FsbGVkIGlmIGVudi5vcHRpb25zLnNvdXJj
ZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUKIAkJaWYgKGFyZyA9PSBudWxsIHx8
IHBhcmFtID09IG51bGwpCiAJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CkBAIC00ODUwLDExICs0
NjkzLDYgQEAKIAkJCVR5cGVCaW5kaW5nIGNvbnZlcnRlZFR5cGUgPSBlbnYuY29tcHV0ZUJveGlu
Z1R5cGUoYXJnKTsKIAkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoY29udmVydGVkVHlw
ZSwgcGFyYW0pIHx8IGNvbnZlcnRlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykp
CiAJCQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFUSUJMRTsKLQkJfQotCQlpZiAodG9sZXJhdGVJbmZl
cmVuY2VWYXJpYWJsZXMgJiYgKCFhcmcuaXNQcm9wZXJUeXBlKGZhbHNlKSB8fCAhcGFyYW0uaXNQ
cm9wZXJUeXBlKGZhbHNlKSkpIHsKLQkJCS8vIGR1cmluZyB0eXBlIGluZmVyZW5jZSBpbnZvbHZp
bmcgYSBSZWZlcmVuY2VFeHByZXNzaW9uIGlnbm9yZSBpbmNvbXBhdGliaWxpdHkgZHVlIHRvIGFu
IGluZmVyZW5jZSB2YXJpYWJsZSwKLQkJCS8vIGtub3dpbmcgdGhhdCB3ZSB3aWxsIHByb2R1Y2Ug
Y29uc3RyYWludHMgdGhhdCB3aWxsIGVuc3VyZSBjb21wYXRpYmxlIGluc3RhbnRpYXRpb24gKGlm
IG9uZSBleGlzdHMpLgotCQkJcmV0dXJuIENPTVBBVElCTEU7IAogCQl9CiAJCXJldHVybiBOT1Rf
Q09NUEFUSUJMRTsKIAl9CkBAIC00OTQwLDcgKzQ3NzgsNyBAQAogCSAgIHRoYXQgY291bGQgaW5z
dGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5v
IGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUg
Zm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3Ig
YW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0
aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVy
ZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
VHlwZXMsIGZpbmFsIEludm9jYXRpb24gYWxsb2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgTWV0aG9k
QmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2Nh
dGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3NpbmdUeXBlLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb25TaXRlIGFsbG9jYXRpb25TaXRl
KSB7CiAJCQogCQkvLyBhbGxvY2F0aW9uVHlwZSBpcyB0aGUgZGlhbW9uZCB0eXBlLiBvcmlnaW5h
bEVuY2xvc2luZ1R5cGUgaXMgdGhlIHJlYWwgZW5jbG9zaW5nIHR5cGUgPT0+IG1heSBiZSBwYXJh
bWV0ZXJpemVkLCBwYXJhbWV0ZXJpemVkIHdpdGggb3duIHR5cGUgdmFyaWFibGVzLCByYXcsIGp1
c3QgcGxhaW4gdHlwZSBvciBudWxsLgogCQlpbnQgY2xhc3NUeXBlVmFyaWFibGVzQXJpdHkgPSAw
OwpAQCAtNTA2Nyw3ICs0OTA1LDcgQEAKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBu
ZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9y
IChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxl
TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1
bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CisJCQlNZXRob2RCaW5k
aW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0
b3JpZXNbaV0sIGFyZ3VtZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlKTsKIAkJCWlmIChjb21wYXRp
YmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKQogCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVN
ZXRob2Q7CkBAIC01MDc2LDEwICs0OTE0LDYgQEAKIAogCQlpZiAoY29tcGF0aWJsZUluZGV4ID09
IDApIHsKIAkJCXJldHVybiBudWxsOwotCQl9Ci0JCWlmIChjb21wYXRpYmxlSW5kZXggPT0gMSkg
ewotCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5k
aW5nIHRhc2tzICgxOC41LjIpOgotCQkJY29tcGF0aWJsZVswXSA9IGluZmVySW52b2NhdGlvblR5
cGUoYWxsb2NhdGlvblNpdGUsIGNvbXBhdGlibGVbMF0sIGFyZ3VtZW50VHlwZXMpOwogCQl9CiAJ
CXJldHVybiBjb21wYXRpYmxlSW5kZXggPT0gMSA/IGNvbXBhdGlibGVbMF0gOiBtb3N0U3BlY2lm
aWNNZXRob2RCaW5kaW5nKGNvbXBhdGlibGUsIGNvbXBhdGlibGVJbmRleCwgYXJndW1lbnRUeXBl
cywgYWxsb2NhdGlvblNpdGUsIGFsbG9jYXRpb25UeXBlKTsKIAl9CkBAIC01MTUwLDMxICs0OTg0
LDUgQEAKIAkJCQlicmVhazsKIAkJCX0KIAkJfQotCX0KLQotCS8qKgotCSAqIEdpdmVuIGEgc2Vs
ZWN0ZWQgYXBwbGljYWJsZSBtZXRob2QsIGNoZWNrIGlmIGl0IGhhcyBhbiB1bmZpbmlzaGVkIElu
ZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVkLgotCSAqIElmIHNvIHBlcmZvcm0gdGhlIG91dHN0
YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgYW5kIHJldHVybiB0aGUgaW1wcm92ZWQg
bWV0aG9kLAotCSAqIG90aGVyd2lzZSByZXR1cm4gdGhlIGFwcGxpY2FibGUgbWV0aG9kIHVuY2hh
bmdlZC4KLQkgKi8KLQlwcm90ZWN0ZWQgTWV0aG9kQmluZGluZyBpbmZlckludm9jYXRpb25UeXBl
KEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBNZXRob2RCaW5kaW5nIGFwcGxpY2FibGUs
IFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewotCQlpZiAoaW52b2NhdGlvblNpdGUgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2Nh
dGlvbikgaW52b2NhdGlvblNpdGU7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewotCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4
MTggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocGFyYW1ldGVyaXplZE1ldGhvZCk7
Ci0JCQkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgIWluZkN0eDE4Lmhhc1Jlc3VsdEZvcihpbnZv
Y2F0aW9uLmludm9jYXRpb25UYXJnZXRUeXBlKCkpKSB7Ci0JCQkJCXJldHVybiBpbmZDdHgxOC5p
bmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6
ZWRNZXRob2QpOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJQVNUTm9kZS5yZXNvbHZlUG9seUV4
cHJlc3Npb25Bcmd1bWVudHMoaW52b2NhdGlvbiwgYXBwbGljYWJsZSwgYXJndW1lbnRUeXBlcywg
dGhpcyk7Ci0JCQl9Ci0JCX0gZWxzZSBpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBSZWZl
cmVuY2VFeHByZXNzaW9uKSB7Ci0JCQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykKLQkJCQlhcHBsaWNhYmxlID0gYXBwbGljYWJsZS5z
aGFsbG93T3JpZ2luYWwoKTsKLQkJCWlmIChhcHBsaWNhYmxlLnR5cGVWYXJpYWJsZXMoKSAhPSBC
aW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQotCQkJCXJldHVybiBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoYXBwbGljYWJsZSwgYXJndW1l
bnRUeXBlcywgdGhpcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKLQkJfQotCQly
ZXR1cm4gYXBwbGljYWJsZTsKIAl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVC
aW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKaW5kZXggYmU3NTE1
Yy4uMjcyMmQ0ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQpAQCAtMTYyOSw0ICsxNjI5LDggQEAK
IHB1YmxpYyB2b2lkIGV4aXRSZWN1cnNpdmVGdW5jdGlvbigpIHsKIAkvLyBlbXB0eSwgc3ViY2xh
c3NlcyB0byBvdmVycmlkZQogfQorCitwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkg
eworCXJldHVybiBmYWxzZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2Js
ZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5k
ZXggYjU5MWIwMy4uZGRjOTUwMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJl
cG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAg
LTE1MCw3ICsxNTAsNiBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuQ2FwdHVyZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5FeHRyYUNvbXBpbGVyTW9kaWZpZXJzOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRmllbGRCaW5kaW5nOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW5mZXJlbmNlQ29udGV4dDE4
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuSW52b2Nh
dGlvblNpdGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5Mb2NhbFZhcmlhYmxlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkxvb2t1cEVudmlyb25tZW50OwpAQCAtMzY5Miw3ICszNjkxLDggQEAK
IAkJCQlzb3VyY2VTdGFydCwKIAkJCQlzb3VyY2VFbmQpOwogCQkJcmV0dXJuOwotCQljYXNlIFBy
b2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtOgorCQlj
YXNlIFByb2JsZW1SZWFzb25zLkluZmVycmVkQXBwbGljYWJsZU1ldGhvZEluYXBwbGljYWJsZToJ
CisJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW52b2NhdGlvblR5cGVJbmZlcmVuY2VGYWlsdXJlOgog
CQkJLy8gRklYTUUoc3RlcGhhbik6IGNvbnN0cnVjdCBzdWl0YWJsZSBtZXNzYWdlIChodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvNDA0Njc1KQogCQkJcHJvYmxlbUNvbnN0cnVjdG9yID0gKFByb2Js
ZW1NZXRob2RCaW5kaW5nKSB0YXJnZXRDb25zdHJ1Y3RvcjsKIAkJCXNob3duQ29uc3RydWN0b3Ig
PSBwcm9ibGVtQ29uc3RydWN0b3IuY2xvc2VzdE1hdGNoOwpAQCAtNDIyNywxNiArNDIyNywxMyBA
QAogCQkJCShpbnQpIChtZXNzYWdlU2VuZC5uYW1lU291cmNlUG9zaXRpb24gPj4+IDMyKSwKIAkJ
CQkoaW50KSBtZXNzYWdlU2VuZC5uYW1lU291cmNlUG9zaXRpb24pOwogCQkJcmV0dXJuOwotCQlj
YXNlIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVt
OgorCQljYXNlIFByb2JsZW1SZWFzb25zLkluZmVycmVkQXBwbGljYWJsZU1ldGhvZEluYXBwbGlj
YWJsZToKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbnZvY2F0aW9uVHlwZUluZmVyZW5jZUZhaWx1
cmU6CiAJCQkvLyBGSVhNRShzdGVwaGFuKTogY29uc3RydWN0IHN1aXRhYmxlIG1lc3NhZ2UgKGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy80MDQ2NzUpCiAJCQlwcm9ibGVtTWV0aG9kID0gKFByb2Js
ZW1NZXRob2RCaW5kaW5nKSBtZXRob2Q7Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNl
Q29udGV4dCA9IHByb2JsZW1NZXRob2QuaW5mZXJlbmNlQ29udGV4dDsKLQkJCWlmIChpbmZlcmVu
Y2VDb250ZXh0ICE9IG51bGwgJiYgaW5mZXJlbmNlQ29udGV4dC5vdXRlckNvbnRleHQgIT0gbnVs
bCkgewotCQkJCS8vIHByb2JsZW0gcmVsYXRlcyB0byBhIG5lc3RlZCBpbmZlcmVuY2UgY29udGV4
dCwgbGV0IHRoZSBvdXRlciBoYW5kbGUgaXQ6Ci0JCQkJaW5mZXJlbmNlQ29udGV4dC5vdXRlckNv
bnRleHQuYWRkUHJvYmxlbU1ldGhvZChwcm9ibGVtTWV0aG9kKTsKLQkJCQlyZXR1cm47Ci0JCQl9
CiAJCQlzaG93bk1ldGhvZCA9IHByb2JsZW1NZXRob2QuY2xvc2VzdE1hdGNoOworCQkJaWYgKHBy
b2JsZW1NZXRob2QucmV0dXJuVHlwZSA9PSBzaG93bk1ldGhvZC5yZXR1cm5UeXBlKSAvLyRJREVO
VElUWS1DT01QQVJJU09OJAorCQkJCXJldHVybjsgLy8gZnVubmlseSB0aGlzIGNhbiBoYXBwZW4g
aW4gYSBkZWVwbHkgbmVzdGVkIGNhbGwsIGJlY2F1c2UgdGhlIGlubmVyIGxpZXMgYnkgc3RlYWxp
bmcgaXRzIGNsb3Nlc3QgbWF0Y2ggYW5kIHRoZSBvdXRlciBkb2VzIG5vdCBrbm93IHNvLiBTZWUg
R1JUMV84LnRlc3RCdWc0MzAyOTYKIAkJCXRoaXMuaGFuZGxlKAogCQkJCUlQcm9ibGVtLlR5cGVN
aXNtYXRjaCwKIAkJCQluZXcgU3RyaW5nW10gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3Bl
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQppbmRleCAyZWM4NDNmLi4yMGM1ZWQ5IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9l
dmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CkBAIC0zOTYsNyArMzk2LDcgQEAKIAlpZiAobWV0aG9kQmluZGluZyA9
PSBudWxsKQogCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHNlbGVjdG9yLCBhcmd1
bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJaWYgKG1ldGhvZEJpbmRpbmcu
aXNWYWxpZEJpbmRpbmcoKSkgewotCSAgICBNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSwgU2NvcGUuRlVMTF9JTkZFUkVOQ0UpOworCSAgICBNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5n
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJICAgIGlmIChjb21wYXRpYmxlTWV0
aG9kID09IG51bGwpCiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZEJp
bmRpbmcsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7
CiAJICAgIG1ldGhvZEJpbmRpbmcgPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAtNTQyLDcgKzU0Miw3
IEBACiAJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGluZ1ttZXRo
b2RzLmxlbmd0aF07CiAJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkgICAgTWV0aG9k
QmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9k
c1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkFQUExJQ0FCSUxJVFkp
OworCSAgICBNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJs
ZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCWlm
IChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpCiAJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRl
eCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CiAJfQpAQCAtNTU4LDggKzU1OCw3IEBACiAJCX0KIAl9
CiAJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7Ci0JCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBj
aGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKLQkJcmV0dXJuIGlu
ZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbMF0sIGFyZ3VtZW50VHlw
ZXMpOworCQlyZXR1cm4gdmlzaWJsZVswXTsKIAl9CiAJaWYgKHZpc2libGVJbmRleCA9PSAwKSB7
CiAJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcoY29tcGF0aWJsZVswXSwgVHlwZUNv
bnN0YW50cy5JTklULCBjb21wYXRpYmxlWzBdLnBhcmFtZXRlcnMsIFByb2JsZW1SZWFzb25zLk5v
dFZpc2libGUpOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248173</attachid>
            <date>2014-10-24 23:08:00 -0400</date>
            <delta_ts>2014-10-25 11:50:06 -0400</delta_ts>
            <desc>Addendum for capture bound change under compile time constant</desc>
            <filename>capturebound.patch</filename>
            <type>text/plain</type>
            <size>6215</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Qm91bmRTZXQuamF2YQppbmRleCAzMGM5OWQxLi44NGYyZjkxIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBA
IC01ODcsOSArNTg3LDcgQEAKIAkJd2hpbGUgKGNhcHRJdGVyLmhhc05leHQoKSkgewogCQkJRW50
cnk8UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLCBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmc+IGNh
cHQgPSBjYXB0SXRlci5uZXh0KCk7CiAJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0FscGhh
ID0gY2FwdC5nZXRLZXkoKTsKLQkJCS8vIFdlIGNvbWUgaW4gd2l0aCBjYXB0dXJlKGdBKSwgd2Ug
bmVlZCB0byB3b3JrIHdpdGggZ0EgYmVsb3cuIEl0IHdhcyBuZWNlc3NhcnkgdG8gZXN0YWJsaXNo
IGNhcHR1cmUgYXQgdGhlIGNhbGwgc2l0ZS4KLQkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBj
Z0EgPSBjYXB0LmdldFZhbHVlKCk7Ci0JCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZ0EgPSAo
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSBjZ0EudW5jYXB0dXJlKGNvbnRleHQuc2NvcGUpOwor
CQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGdBID0gY2FwdC5nZXRWYWx1ZSgpOwogCQkJUmVm
ZXJlbmNlQmluZGluZyBnID0gKFJlZmVyZW5jZUJpbmRpbmcpIGdBLm9yaWdpbmFsKCk7CiAJCQlm
aW5hbCBUeXBlVmFyaWFibGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IGcudHlwZVZhcmlhYmxlcygp
OwogCQkJLy8gY29uc3RydWN0IHRoZXRhID0gW1AxOj1hbHBoYTEsLi4uXQpAQCAtNjA4LDcgKzYw
Niw2IEBACiAJCQkJYWRkQm91bmRzKHBpLmdldFR5cGVCb3VuZHMoYWxwaGEsIHRoZXRhKSwgY29u
dGV4dC5lbnZpcm9ubWVudCk7CiAKIAkJCQlUeXBlQmluZGluZyBhaSA9IGdBLmFyZ3VtZW50c1tp
XTsKLQkJCQlUeXBlQmluZGluZyBjYWkgPSBjZ0EuYXJndW1lbnRzW2ldOwogCQkJCWlmIChhaSBp
bnN0YW5jZW9mIFdpbGRjYXJkQmluZGluZykgewogCQkJCQlXaWxkY2FyZEJpbmRpbmcgd2lsZGNh
cmRCaW5kaW5nID0gKFdpbGRjYXJkQmluZGluZylhaTsKIAkJCQkJVHlwZUJpbmRpbmcgdCA9IHdp
bGRjYXJkQmluZGluZy5ib3VuZDsKQEAgLTYyMCwxNCArNjE3LDExIEBACiAJCQkJCQkJaXQgPSB0
aHJlZS5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CiAJCQkJCQkJd2hpbGUgKGl0Lmhhc05leHQoKSkg
ewogCQkJCQkJCQlUeXBlQm91bmQgYm91bmQgPSBpdC5uZXh0KCk7Ci0JCQkJCQkJCS8qIFdpdGgg
dGhlIGV4cGVjdGVkIHR5cGUncyBkZWNsYXJlZCB0eXBlIGJlaW5nIENvbGxlY3Rvcjw/IHN1cGVy
IFQsIEEsIFI+IGFuZCBnQWxwaGEgYmVpbmcgQ29sbGVjdG9yPFQjMCw/IzEsTGlzdDxUIzA+IzI+
IGFuZCBjZ0EgYmVpbmcKLQkJCQkJCQkJICAgQ29sbGVjdG9yPFQjMCxjYXB0dXJlIzEtb2YgPyxM
aXN0PFQjMD4+LCB3aXRob3V0IHRoZSBjb25zdHJhaW50IHJlZHVjdGlvbiBiZWxvdyAtIHdlIHdp
bGwgbmV2ZXIgZGlzY292ZXIgQSB0byBiZSBjYXB0dXJlIzEtb2YgPyBhbmQKLQkJCQkJCQkJICAg
Y2xhaW0gQSBpcyBqbE8uIFNlZSBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDM3NDQ0I2MyNCAtICMyNwotCQkJCQkJCQkqLwotCQkJCQkJCQlpZiAoIXJlZHVj
ZU9uZUNvbnN0cmFpbnQoY29udGV4dCwgQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShib3Vu
ZC5yaWdodCwgY2FpLCBSZWR1Y3Rpb25SZXN1bHQuU0FNRSkpKQotCQkJCQkJCQkJcmV0dXJuIGZh
bHNlOwotCQkJCQkJCQkvLyBPdXIgPSByZWR1Y3Rpb24gdHJhbnNpdGl2ZWx5IGFkZHMgYSBuZXcg
Ym91bmQgdGhhdCBuZWNlc3NpdGF0ZXMgdGhlIGNoZWNrIGJlbG93IGZvciBjYXB0dXJlLiAKLQkJ
CQkJCQkJaWYgKCEoYm91bmQucmlnaHQgaW5zdGFuY2VvZiBJbmZlcmVuY2VWYXJpYWJsZSkgJiYg
IWJvdW5kLnJpZ2h0LmlzQ2FwdHVyZSgpKQorCQkJCQkJCQlpZiAoSW5mZXJlbmNlQ29udGV4dDE4
LlNIT1VMRF9XT1JLQVJPVU5EX0JVR19KREtfODA1NDcyMSkgeworCQkJCQkJCQkJaWYgKGJvdW5k
LnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcpCisJCQkJCQkJCQkJY29udGludWU7CisJ
CQkJCQkJCX0KKwkJCQkJCQkJaWYgKCEoYm91bmQucmlnaHQgaW5zdGFuY2VvZiBJbmZlcmVuY2VW
YXJpYWJsZSkpCiAJCQkJCQkJCQlyZXR1cm4gZmFsc2U7CiAJCQkJCQkJfQogCQkJCQkJfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggYmNl
ODRiMi4uNmUzZDU0YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCkBAIC0xNyw2ICsxNyw3IEBACiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiBp
bXBvcnQgamF2YS51dGlsLlNldDsKIAoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkFyZ3VtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuQ29uZGl0aW9uYWxFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsKQEAgLTM2MCw3ICszNjEsMjEgQEAKIAkJ
CQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFzID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFy
aWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50cyk7CiAJCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGdiZXRhID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJp
emVkVHlwZSgKIAkJCQkJCXBhcmFtZXRlcml6ZWRUeXBlLmdlbmVyaWNUeXBlKCksIGJldGFzLCBw
YXJhbWV0ZXJpemVkVHlwZS5lbmNsb3NpbmdUeXBlKCksIHBhcmFtZXRlcml6ZWRUeXBlLmdldFR5
cGVBbm5vdGF0aW9ucygpKTsKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY2Fw
dHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZS5jYXB0dXJlKGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUsIGludm9jYXRpb25TaXRlLnNvdXJjZUVuZCgpKSk7IC8vIGVzdGFibGlzaGVkOiBi
b3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpbmZlcmVuY2VDb250ZXh0LmN1
cnJlbnRCb3VuZHMuY2FwdHVyZXMucHV0KGdiZXRhLCBwYXJhbWV0ZXJpemVkVHlwZSk7IC8vIGVz
dGFibGlzaGVkOiBib3RoIHR5cGVzIGhhdmUgbm9ubnVsbCBhcmd1bWVudHMKKwkJCQlpZiAoSW5m
ZXJlbmNlQ29udGV4dDE4LlNIT1VMRF9XT1JLQVJPVU5EX0JVR19KREtfODA1NDcyMSkgeworCQkJ
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDtp
KyspIHsKKwkJCQkJCWlmIChhcmd1bWVudHNbaV0uaXNXaWxkY2FyZCgpICYmIGFyZ3VtZW50c1tp
XS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKKwkJCQkJCQlXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQg
PSAoV2lsZGNhcmRCaW5kaW5nKSBhcmd1bWVudHNbaV07CisJCQkJCQkJU291cmNlVHlwZUJpbmRp
bmcgY29udGV4dFR5cGUgPSBpbmZlcmVuY2VDb250ZXh0LnNjb3BlLmVuY2xvc2luZ1NvdXJjZVR5
cGUoKTsKKwkJCQkJCQlpbnQgcG9zaXRpb24gPSBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQoKTsK
KwkJCQkJCQlDb21waWxhdGlvblVuaXRTY29wZSBjb21waWxhdGlvblVuaXRTY29wZSA9IGluZmVy
ZW5jZUNvbnRleHQuc2NvcGUuY29tcGlsYXRpb25Vbml0U2NvcGUoKTsKKwkJCQkJCQlBU1ROb2Rl
IGN1ZCA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CisJCQkJCQkJZmlu
YWwgaW50IGNhcHR1cmVJRCA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlLm5leHRDYXB0dXJlSUQoKTsK
KwkJCQkJCQlDYXB0dXJlQmluZGluZyBjYXB0dXJlID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9u
bWVudC5jcmVhdGVDYXB0dXJlZFdpbGRjYXJkKHdpbGRjYXJkLCBjb250ZXh0VHlwZSwgcG9zaXRp
b24sIGN1ZCwgY2FwdHVyZUlEKTsKKwkJCQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3Vu
ZHMuYWRkQm91bmQobmV3IFR5cGVCb3VuZChiZXRhc1tpXSwgY2FwdHVyZSwgU0FNRSksIGluZmVy
ZW5jZUNvbnRleHQuZW52aXJvbm1lbnQpOworCQkJCQkJfQorCQkJCQl9CisJCQkJfQogCQkJCUNv
bnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxh
LmNyZWF0ZShnYmV0YSwgdGFyZ2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJcmV0dXJuIGluZmVy
ZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CiAJCQl9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCBiN2Y4YmJhLi5kMjg2MzkyIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTEwMyw2ICsxMDMsMTIgQEAK
IAogCS8qKiB0byBjb25mb3JtIHdpdGggamF2YWMgcmVnYXJkaW5nIGh0dHBzOi8vYnVncy5vcGVu
amRrLmphdmEubmV0L2Jyb3dzZS9KREstODAyNjUyNyAqLwogCXN0YXRpYyBmaW5hbCBib29sZWFu
IFNJTVVMQVRFX0JVR19KREtfODAyNjUyNyA9IHRydWU7CisJCisJLyoqIFRlbXBvcmFyeSB3b3Jr
YXJvdW5kIHVudGlsIHdlIGtub3cgZnVsbHkgd2hhdCB0byBkbyB3aXRoIGh0dHBzOi8vYnVncy5v
cGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1NDcyMSAKKwkgKiAgSXQgbG9va3MgbGlrZWx5
IHRoYXQgd2UgaGF2ZSBhIGJ1ZyBpbmRlcGVuZGVudCBvZiB0aGlzIEpMUyBidWcgaW4gdGhhdCB3
ZSBjbGVhciB0aGUgY2FwdHVyZSBib3VuZHMgZWFnZXJseS4KKwkqLworCXN0YXRpYyBmaW5hbCBi
b29sZWFuIFNIT1VMRF9XT1JLQVJPVU5EX0JVR19KREtfODA1NDcyMSA9IHRydWU7IC8vIFNlZSBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM3NDQ0I2MyNCBv
bndhcmRzCisJCiAJLyoqCiAJICogRGV0YWlsIGZsYWcgdG8gY29udHJvbCB0aGUgZXh0ZW50IG9m
IHtAbGluayAjU0lNVUxBVEVfQlVHX0pES184MDI2NTI3fS4KIAkgKiBBIHNldHRpbmcgb2YgJ2Zh
bHNlJyBpbXBsZW1lbnRzIHRoZSBhZHZpY2UgZnJvbSBodHRwOi8vbWFpbC5vcGVuamRrLmphdmEu
bmV0L3BpcGVybWFpbC9sYW1iZGEtc3BlYy1leHBlcnRzLzIwMTMtRGVjZW1iZXIvMDAwNDQ3Lmh0
bWw=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248174</attachid>
            <date>2014-10-25 02:51:00 -0400</date>
            <delta_ts>2014-10-25 11:52:11 -0400</delta_ts>
            <desc>Addendum to incorporate review comments</desc>
            <filename>reviewcomments.patch</filename>
            <type>text/plain</type>
            <size>14384</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggNzlmZDNiNy4uZWFmYzRlNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTY1Miw2ICs2NTIsOCBA
QAogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5k
aW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50
cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9m
IHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBh
cmFtZXRlcnMuCisJICogSWYgdGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZv
ciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFj
ZSBhcyBhbgorCSAqIGludGVuZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0
eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMu
IAogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJl
aW5nIHJlc29sdmVkCiAJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxv
b2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBAcGFyYW0gYXJn
dW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVz
b2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhlIG1ldGhv
ZCBsb29rdXAuCkBAIC02NzQsNyArNjc2LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5
cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZhcmlh
YmxlQXJpdHkpOwogCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCkKIAkJCQljb250aW51ZTsg
Ly8gbm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9u
bHkgaGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQkJCWlmIChhcmd1bWVudFR5cGVz
W2ldLmlzUG9seVR5cGUoKSkgeworCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0gIT0gbnVsbCAmJiBh
cmd1bWVudFR5cGVzW2ldLmlzUG9seVR5cGUoKSkgewogCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVk
VHlwZShwYXJhbWV0ZXJUeXBlKTsKIAkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBl
ID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpOyAKIAkJCQlpZiAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlv
bmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2
YQppbmRleCA3ZjBjY2JmLi43Y2FhMmZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlv
bmFsRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9u
LmphdmEKQEAgLTcxOSw3ICs3MTksNyBAQAogCQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50
VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlLCBNZXRob2RC
aW5kaW5nIG1ldGhvZCkgewogCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc1BlcnRpbmVudFRv
QXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCkgCi0JCQkJJiYgdGhpcy52YWx1ZUlm
RmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodHlwZVZhcmlhYmxlLCBtZXRob2QpOyAv
LyBub3QgcGVyZmVjdC4KKwkJCQkmJiB0aGlzLnZhbHVlSWZGYWxzZS5pc1BlcnRpbmVudFRvQXBw
bGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCk7CiAJfQogCQogCXB1YmxpYyBib29sZWFu
IGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhv
ZEJpbmRpbmcgbWV0aG9kKSB7CkBAIC03MjksNyArNzI5LDcgQEAKIAkKIAlAT3ZlcnJpZGUKIAlw
dWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgewotCQlyZXR1cm4gdGhpcy52YWx1ZUlm
VHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlmRmFsc2UuaXNGdW5jdGlvbmFs
VHlwZSgpOworCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwg
dGhpcy52YWx1ZUlmRmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOyAvLyBFdmVuIGlmIG9ubHkgb25l
IGFybSBpcyBmdW5jdGlvbmFsIHR5cGUsIHRoaXMgd2lsbCByZXF1aXJlIGEgZnVuY3Rpb25hbCBp
bnRlcmZhY2UgdGFyZ2V0CiAJfQogCQogCXB1YmxpYyBib29sZWFuIGlzUG9seUV4cHJlc3Npb24o
KSB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YQppbmRleCAxZGIyNjY4Li42MGE4Y2RhIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YQpAQCAtNjk0LDYgKzY5NCwxNCBAQAogCiAJLyoqIER1cmluZyBpbmZlcmVu
Y2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9kIGJpbmRpbmcgd2l0aG91dCBjYXVz
aW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVibGljIE1ldGhvZEJpbmRpbmcgZmlu
ZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3Bl
IHNjb3BlKSB7CisJCWlmICh0aGlzLmV4YWN0TWV0aG9kQmluZGluZyAhPSBudWxsKSB7CisJCQlN
ZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHRhcmdldFR5cGUuZ2V0U2luZ2xlQWJzdHJhY3RN
ZXRob2Qoc2NvcGUsIHRydWUpOworCQkJaWYgKGZ1bmN0aW9uVHlwZSA9PSBudWxsKQorCQkJCXJl
dHVybiBudWxsOworCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVycy5sZW5ndGg7CisJ
CQlpbnQgayA9IHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3RoOworCQkJ
cmV0dXJuIChuID09IGsgfHwgbiA9PSBrICsgMSkgPyB0aGlzLmV4YWN0TWV0aG9kQmluZGluZyA6
IG51bGw7CisJCX0KIAkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSBpbnRlcm5hbFJlc29s
dmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CiAJCWlmICh0YXJnZXRNZXRob2QgPT0g
bnVsbCB8fCAhdGFyZ2V0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQlyZXR1cm4gbnVsbDsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Qm91bmRTZXQuamF2YQppbmRleCA4NGYyZjkxLi5iNDViZDEyIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBA
IC02MTgsNyArNjE4LDcgQEAKIAkJCQkJCQl3aGlsZSAoaXQuaGFzTmV4dCgpKSB7CiAJCQkJCQkJ
CVR5cGVCb3VuZCBib3VuZCA9IGl0Lm5leHQoKTsKIAkJCQkJCQkJaWYgKEluZmVyZW5jZUNvbnRl
eHQxOC5TSE9VTERfV09SS0FST1VORF9CVUdfSkRLXzgwNTQ3MjEpIHsKLQkJCQkJCQkJCWlmIChi
b3VuZC5yaWdodCBpbnN0YW5jZW9mIENhcHR1cmVCaW5kaW5nKQorCQkJCQkJCQkJaWYgKGJvdW5k
LnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcgJiYgYm91bmQucmlnaHQuaXNQcm9wZXJU
eXBlKHRydWUpKQogCQkJCQkJCQkJCWNvbnRpbnVlOwogCQkJCQkJCQl9CiAJCQkJCQkJCWlmICgh
KGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpKQpAQCAtOTY1LDIxICs5
NjUsNiBAQAogCQlpZiAodGhyZWUgPT0gbnVsbCkgcmV0dXJuIG51bGw7CiAJCXJldHVybiB0aHJl
ZS5maW5kU2luZ2xlV3JhcHBlclR5cGUoKTsKIAl9Ci0KLQlwcml2YXRlIFR5cGVCaW5kaW5nIGFw
cGx5SW5zdGFudGlhdGlvbnMoVHlwZUJpbmRpbmcgdHlwZSkgewotCQlpZiAodHlwZS5pc1Byb3Bl
clR5cGUodHJ1ZSkpCi0JCQlyZXR1cm4gdHlwZTsKLQkKLQkJSXRlcmF0b3I8SW5mZXJlbmNlVmFy
aWFibGU+IHZhcmlhYmxlSXQgPSB0aGlzLmJvdW5kc1BlclZhcmlhYmxlLmtleVNldCgpLml0ZXJh
dG9yKCk7Ci0JCXdoaWxlICh2YXJpYWJsZUl0Lmhhc05leHQoKSkgewotCQkJSW5mZXJlbmNlVmFy
aWFibGUgaW5mZXJlbmNlVmFyaWFibGUgPSB2YXJpYWJsZUl0Lm5leHQoKTsKLQkJCVR5cGVCaW5k
aW5nIGluc3RhbnRpYXRpb24gPSBnZXRJbnN0YW50aWF0aW9uKGluZmVyZW5jZVZhcmlhYmxlLCBu
dWxsKTsKLQkJCWlmIChpbnN0YW50aWF0aW9uICE9IG51bGwpCi0JCQkJdHlwZSA9IHR5cGUuc3Vi
c3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKGluZmVyZW5jZVZhcmlhYmxlLCBpbnN0YW50aWF0aW9u
KTsKLQkJfQotCQlyZXR1cm4gdHlwZTsKLQl9Ci0JCiAJLy8gdGhpcyBjb25kaXRpb24gaXMganVz
dCB3YXkgdG9vIGNvbXBsZXggdG8gY2hlY2sgaXQgaW4tbGluZToKIAlwdWJsaWMgYm9vbGVhbiBj
b25kaXRpb24xOF81XzJfYnVsbGV0XzNfM18xKEluZmVyZW5jZVZhcmlhYmxlIGFscGhhLCBUeXBl
QmluZGluZyB0YXJnZXRUeXBlKSB7CiAJCS8vIFQgaXMgYSByZWZlcmVuY2UgdHlwZSwgYnV0IGlz
IG5vdCBhIHdpbGRjYXJkLXBhcmFtZXRlcml6ZWQgdHlwZSwgYW5kIGVpdGhlciAKQEAgLTEwMTks
MTAgKzEwMDQsOSBAQAogCQkJCQkJLyogSGFzaE1hcDxLIzgsViM5PiBhbmQgSGFzaE1hcDxLIzgs
QXJyYXlMaXN0PFQ+PiB3aXRoIGFuIGluc3RhbnRpYXRpb24gZm9yIFY5ID0gQXJyYXlMaXN0PFQ+
IGFscmVhZHkgaW4gdGhlIAogCQkJCQkJICAgYm91bmQgc2V0IHNob3VsZCBub3QgYmUgc2VlbiBh
cyB0d28gZGlmZmVyZW50IHBhcmFtZXRlcml6YXRpb25zIG9mIHRoZSBzYW1lIGdlbmVyaWMgY2xh
c3Mgb3IgaW50ZXJmYWNlLgogCQkJCQkJICAgU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MjYgZm9yIGEgdGVzdCB0aGF0IHRyaWdnZXJzIHRoaXMg
Y29uZGl0aW9uLgorCQkJCQkJICAgU2VlIGh0dHBzOi8vYnVncy5vcGVuamRrLmphdmEubmV0L2Jy
b3dzZS9KREstODA1NjA5MjogcmVjb21tZW5kYXRpb24gaXMgdG8gY2hlY2sgZm9yIHByb3BlciB0
eXBlcy4KIAkJCQkJCSovCi0JCQkJCQlzdXBlcnNbMF0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1
cGVyc1swXSk7Ci0JCQkJCQlzdXBlcnNbMV0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sx
XSk7Ci0JCQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1cGVy
c1sxXSkpCisJCQkJCQlpZiAoc3VwZXJzWzBdLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBzdXBlcnNb
MV0uaXNQcm9wZXJUeXBlKHRydWUpICYmICFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoc3VwZXJz
WzBdLCBzdXBlcnNbMV0pKQogCQkJCQkJCXJldHVybiB0cnVlOwogCQkJCQl9CiAJCQkJfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggNmUz
ZDU0Yy4uZDQ2OTc0OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCkBAIC05OSw2ICs5OSw3IEBACiAJCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5j
dXJyZW50Qm91bmRzLmFkZEJvdW5kcyhpbm5lckN0eC5iMiwgaW5mZXJlbmNlQ29udGV4dC5lbnZp
cm9ubWVudCk7CiAJCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VWYXJpYWJsZXMgPSBp
bm5lckN0eC5pbmZlcmVuY2VWYXJpYWJsZXM7CiAJCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZl
cmVuY2VLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKKwkJCQkJCQlpbm5lckN0eC5vdXRl
ckNvbnRleHQgPSBpbmZlcmVuY2VDb250ZXh0OwogCQkJCQkJCWluZmVyZW5jZUNvbnRleHQudXNl
c1VuY2hlY2tlZENvbnZlcnNpb24gPSBpbm5lckN0eC51c2VzVW5jaGVja2VkQ29udmVyc2lvbjsK
IAkJCQkJCX0gZWxzZSB7CiAJCQkJCQkJcmV0dXJuIEZBTFNFOyAvLyBzaG91bGQgbm90IHJlYWNo
IGhlcmUuCkBAIC0yMjcsOSArMjI4LDExIEBACiAJCU1ldGhvZEJpbmRpbmcgZnVuY3Rpb25UeXBl
ID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChpbmZlcmVuY2VDb250ZXh0LnNjb3BlLCB0cnVl
KTsKIAkJaWYgKGZ1bmN0aW9uVHlwZSA9PSBudWxsKQogCQkJcmV0dXJuIEZBTFNFOwotCisJCS8v
IHBvdGVudGlhbGx5LWFwcGxpY2FibGUgbWV0aG9kIGZvciB0aGUgbWV0aG9kIHJlZmVyZW5jZSB3
aGVuIHRhcmdldGluZyBUICgxNS4xMy4xKSwKKwkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFw
cGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGlu
ZmVyZW5jZUNvbnRleHQuc2NvcGUpOworCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51
bGwpCisJCQlyZXR1cm4gRkFMU0U7CiAJCWlmIChyZWZlcmVuY2UuaXNFeGFjdE1ldGhvZFJlZmVy
ZW5jZSgpKSB7Ci0JCQlNZXRob2RCaW5kaW5nIHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVy
ZW5jZS5nZXRFeGFjdE1ldGhvZCgpOyAKIAkJCUxpc3Q8Q29uc3RyYWludEZvcm11bGE+IG5ld0Nv
bnN0cmFpbnRzID0gbmV3IEFycmF5TGlzdDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKIAkJCVR5cGVC
aW5kaW5nW10gcCA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzOwogCQkJaW50IG4gPSBwLmxlbmd0
aDsKQEAgLTIzOSw4ICsyNDIsNiBAQAogCQkJaWYgKG4gPT0gaysxKSB7CiAJCQkJbmV3Q29uc3Ry
YWludHMuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUocFswXSwgcmVmZXJlbmNlLmxo
cy5yZXNvbHZlZFR5cGUsIENPTVBBVElCTEUpKTsKIAkJCQlvZmZzZXQgPSAxOwotCQkJfSBlbHNl
IGlmIChuICE9IGspIHsKLQkJCQlyZXR1cm4gRkFMU0U7CiAJCQl9CiAJCQlmb3IgKGludCBpID0g
b2Zmc2V0OyBpIDwgbjsgaSsrKQogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlw
ZUZvcm11bGEuY3JlYXRlKHBbaV0sIHBQcmltZVtpLW9mZnNldF0sIENPTVBBVElCTEUpKTsKQEAg
LTI1NCwxMCArMjU1LDYgQEAKIAkJCX0KIAkJCXJldHVybiBuZXdDb25zdHJhaW50cy50b0FycmF5
KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJhaW50cy5zaXplKCldKTsKIAkJfSBlbHNl
IHsgLy8gaW5leGFjdAotCQkJTWV0aG9kQmluZGluZyBwb3RlbnRpYWxseUFwcGxpY2FibGUgPSBy
ZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHQsIGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1l
dGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCi0JCQlpZiAocG90ZW50
aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCi0JCQkJcmV0dXJuIEZBTFNFOwotCQkJCiAJCQlpbnQg
biA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJCWZvciAoaW50IGkgPSAwOyBp
IDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJU
eXBlKHRydWUpKQpAQCAtMzc5LDcgKzM3Niw3IEBACiAJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxh
IG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGdiZXRhLCB0YXJn
ZXRUeXBlLCBDT01QQVRJQkxFKTsKIAkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VB
bmRJbmNvcnBvcmF0ZShuZXdDb25zdHJhaW50KTsKIAkJCX0KLQkJCWlmIChyVGhldGEubGVhZkNv
bXBvbmVudFR5cGUoKSBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7CisJCQlpZiAoclRo
ZXRhLmxlYWZDb21wb25lbnRUeXBlKCkgaW5zdGFuY2VvZiBJbmZlcmVuY2VWYXJpYWJsZSkgeyAv
LyBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNjIwODIKIAkJCQlJ
bmZlcmVuY2VWYXJpYWJsZSBhbHBoYSA9IChJbmZlcmVuY2VWYXJpYWJsZSkgclRoZXRhLmxlYWZD
b21wb25lbnRUeXBlKCk7CiAJCQkJVHlwZUJpbmRpbmcgdGFyZ2V0TGVhZlR5cGUgPSB0YXJnZXRU
eXBlLmxlYWZDb21wb25lbnRUeXBlKCk7CiAJCQkJYm9vbGVhbiB0b1Jlc29sdmUgPSBmYWxzZTsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4IGQyODYzOTIuLjlhZmYxYzIg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpAQCAtMTUxLDcgKzE1MSw3IEBA
CiAJCiAJLyoqIFNpZ25hbHMgd2hldGhlciBhbnkgdHlwZSBjb21wYXRpYmlsaXR5IG1ha2VzIHVz
ZSBvZiB1bmNoZWNrZWQgY29udmVyc2lvbi4gKi8KIAlwdWJsaWMgYm9vbGVhbiB1c2VzVW5jaGVj
a2VkQ29udmVyc2lvbjsKLQorCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0
OwogCVNjb3BlIHNjb3BlOwogCUxvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50OwogCVJlZmVy
ZW5jZUJpbmRpbmcgb2JqZWN0OyAvLyBqYXZhLmxhbmcuT2JqZWN0CkBAIC00MzQsMTEgKzQzNCw2
IEBACiAKIAlwcml2YXRlIGJvb2xlYW4gYWRkQ29uc3RyYWludHNUb0NfT25lRXhwcihFeHByZXNz
aW9uIGV4cHJpLCBTZXQ8Q29uc3RyYWludEZvcm11bGE+IGMsIFR5cGVCaW5kaW5nIGZzaSwgVHlw
ZUJpbmRpbmcgc3Vic3RGLCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgYm9vbGVhbiBpbnRlcmxlYXZl
ZCkgdGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gewogCQkKLQkJLy8gU2VlIGh0dHBz
Oi8vYnVncy5vcGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1MjMyNSBmb3IgZXhjbHVzaW9u
IG9mIHBvbHkgZXhwcmVzc2lvbnMgdGFyZ2V0aW5nIHByb3BlciB0eXBlcy4gQ0VGLnJlZHVjZSB2
YWxpZGF0ZXMgCi0JCS8vIHRoYXQgdGhleSBhcmUgY29tcGF0aWJsZSBpbiBhIGxvb3NlIGludm9j
YXRpb24gY29udGV4dCBhZ2FpbnN0IHRoZSB0YXJnZXQgdHlwZS4gVGhleSBjb250cmlidXRlIG5v
dGhpbmcgZnVydGhlciB0byBzb2x2aW5nIHRoZSBmb3JtdWxhcy4KLQkJaWYgKHN1YnN0Ri5pc1By
b3BlclR5cGUodHJ1ZSkpCi0JCQlyZXR1cm4gdHJ1ZTsKLQkJCiAJCS8vIEZvciBhbGwgaSAoMSDi
iaQgaSDiiaQgayksIGlmIGVpIGlzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eSwgdGhl
IHNldCBjb250YWlucyDin6hlaSDihpIgzrggRmnin6kuCiAJCWlmICghZXhwcmkuaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkoZnNpLCBtZXRob2QpKSB7CiAJCQljLmFkZChuZXcgQ29uc3RyYWlu
dEV4cHJlc3Npb25Gb3JtdWxhKGV4cHJpLCBzdWJzdEYsIFJlZHVjdGlvblJlc3VsdC5DT01QQVRJ
QkxFLCBBUkdVTUVOVF9DT05TVFJBSU5UU19BUkVfU09GVCkpOwpAQCAtNDY3LDYgKzQ2MiwxMCBA
QAogCQkJCX0KIAkJCX0KIAkJfSBlbHNlIGlmIChleHByaSBpbnN0YW5jZW9mIEludm9jYXRpb24g
JiYgZXhwcmkuaXNQb2x5RXhwcmVzc2lvbigpKSB7CisJCQkKKwkJCWlmIChzdWJzdEYuaXNQcm9w
ZXJUeXBlKHRydWUpKSAvLyBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRL
LTgwNTIzMjUgCisJCQkJcmV0dXJuIHRydWU7CisJCQkKIAkJCUludm9jYXRpb24gaW52b2NhdGlv
biA9IChJbnZvY2F0aW9uKSBleHByaTsKIAkJCU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBp
bnZvY2F0aW9uLmJpbmRpbmcoc3Vic3RGLCB0aGlzLnNjb3BlKTsKIAkJCWlmIChpbm5lck1ldGhv
ZCA9PSBudWxsKQpAQCAtNDg3LDYgKzQ4Niw4IEBACiAJCQkJU3VzcGVuZGVkSW5mZXJlbmNlUmVj
b3JkIHByZXZJbnZvY2F0aW9uID0gZW50ZXJQb2x5SW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbnZv
Y2F0aW9uLmFyZ3VtZW50cygpKTsKIAkJCQl0cnkgewogCQkJCQl0aGlzLmluZmVyZW5jZUtpbmQg
PSBhcHBsaWNhYmlsaXR5S2luZDsKKwkJCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKQorCQkJ
CQkJaW5uZXJDb250ZXh0Lm91dGVyQ29udGV4dCA9IHRoaXM7CiAJCQkJCWluZmVySW52b2NhdGlv
bkFwcGxpY2FiaWxpdHkoc2hhbGxvd01ldGhvZCwgYXJndW1lbnRUeXBlcywgc2hhbGxvd01ldGhv
ZC5pc0NvbnN0cnVjdG9yKCkpOwogCQkJCQlpZiAoIUNvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVs
YS5pbmZlclBvbHlJbnZvY2F0aW9uVHlwZSh0aGlzLCBpbnZvY2F0aW9uLCBzdWJzdEYsIHNoYWxs
b3dNZXRob2QpKQogCQkJCQkJcmV0dXJuIGZhbHNlOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggMzgzMTc0My4uZGI2
YzkwYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy5qYXZhCkBAIC0xOTAsNyArMTkwLDcgQEAKIAkJCWlmIChpbmZDdHgxOC5pc1Jl
c29sdmVkKHJlc3VsdCkpIHsKIAkJCQlpbmZDdHgxOC5zdGVwQ29tcGxldGVkID0gSW5mZXJlbmNl
Q29udGV4dDE4LkFQUExJQ0FCSUxJVFlfSU5GRVJSRUQ7CiAJCQkJaWYgKGludm9jYXRpb25TaXRl
IGluc3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKLQkJCQkJKChSZWZlcmVuY2VFeHByZXNz
aW9uKSBpbnZvY2F0aW9uU2l0ZSkuaW5mZXJlbmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtp
bmQ7ICAgLy8gQ0hFQ0sKKwkJCQkJKChSZWZlcmVuY2VFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0
ZSkuaW5mZXJlbmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtpbmQ7CiAJCQl9IGVsc2Ugewog
CQkJCXJldHVybiBudWxsOwogCQkJfQpAQCAtMjE0LDcgKzIxNCw2IEBACiAJCQkJCWlmIChoYXNS
ZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFs
IHJlc3VsdD8KIAkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IGluZkN0eDE4Lmdl
dFJldHVyblByb2JsZW1NZXRob2RJZk5lZWRlZChleHBlY3RlZFR5cGUsIG1ldGhvZFN1YnN0aXR1
dGUpOwogCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmlu
ZGluZykgewotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOwogCQkJCQkJCXJldHVybiBw
cm9ibGVtTWV0aG9kOwogCQkJCQkJfQogCQkJCQl9CkBAIC0yMjMsNyArMjIyLDYgQEAKIAkJCQkJ
CQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhtZXRob2RTdWJz
dGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2NvcGUpOwogCQkJCQkJTWV0aG9kQmluZGluZyBwcm9i
bGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50
cyk7CiAJCQkJCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKSB7Ci0JCQkJCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IG51bGw7CiAJCQkJCQkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CiAJCQkJCQl9CiAJ
CQkJCQlpbmZDdHgxOC5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLnB1dChleHBlY3RlZFR5cGUsIG5l
dyBTb2x1dGlvbihtZXRob2RTdWJzdGl0dXRlLCByZXN1bHQpKTsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRp
bmcuamF2YQppbmRleCAzMTcwMGFmLi42NmVlYTZiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Jhd1R5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5q
YXZhCkBAIC0yMDYsNiArMjA2LDExIEBACiAJCXRoaXMuYXJndW1lbnRzID0gdHlwZUFyZ3VtZW50
czsKIAl9CiAJCQorCUBPdmVycmlkZQorCXB1YmxpYyBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcg
Y2FwdHVyZShTY29wZSBzY29wZSwgaW50IHBvc2l0aW9uKSB7CisJCXJldHVybiB0aGlzOworCX0K
KwkKIAlAT3ZlcnJpZGUgCiAJcHVibGljIFR5cGVCaW5kaW5nIHVuY2FwdHVyZShTY29wZSBzY29w
ZSkgewogCQlyZXR1cm4gdGhpczs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248182</attachid>
            <date>2014-10-25 16:41:00 -0400</date>
            <delta_ts>2014-10-27 09:01:21 -0400</delta_ts>
            <desc>Addendum to incorporate review comments</desc>
            <filename>reviewcomments.patch</filename>
            <type>text/plain</type>
            <size>20257</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggNzlmZDNiNy4uZWFmYzRlNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTY1Miw2ICs2NTIsOCBA
QAogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5k
aW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50
cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9m
IHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBh
cmFtZXRlcnMuCisJICogSWYgdGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZv
ciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFj
ZSBhcyBhbgorCSAqIGludGVuZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0
eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMu
IAogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJl
aW5nIHJlc29sdmVkCiAJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxv
b2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBAcGFyYW0gYXJn
dW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVz
b2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhlIG1ldGhv
ZCBsb29rdXAuCkBAIC02NzQsNyArNjc2LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5
cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZhcmlh
YmxlQXJpdHkpOwogCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCkKIAkJCQljb250aW51ZTsg
Ly8gbm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9u
bHkgaGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQkJCWlmIChhcmd1bWVudFR5cGVz
W2ldLmlzUG9seVR5cGUoKSkgeworCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0gIT0gbnVsbCAmJiBh
cmd1bWVudFR5cGVzW2ldLmlzUG9seVR5cGUoKSkgewogCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVk
VHlwZShwYXJhbWV0ZXJUeXBlKTsKIAkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBl
ID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpOyAKIAkJCQlpZiAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEK
aW5kZXggZjJkYTUxMC4uMzVjYmVmOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9u
RXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQpAQCAtNTU2LDggKzU1NiwxOCBAQAogCS8vIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5k
IHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIGluZmVyIHRo
ZSBjb25zdHJ1Y3RvciBvZiB0aGUgZWxpZGVkIHBhcmFtZXRlcml6ZWQgdHlwZS4KIAlNZXRob2RC
aW5kaW5nIGZhY3RvcnkgPSBzY29wZS5nZXRTdGF0aWNGYWN0b3J5KGFsbG9jYXRpb25UeXBlLCBl
bmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHRoaXMpOwogCWlmIChmYWN0b3J5IGluc3RhbmNl
b2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJp
bmRpbmcoKSkgewotCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IChT
eW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgZmFjdG9yeS5vcmlnaW5hbCgpOwotCQlyZXR1
cm4gb3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcigoKFBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50cyk7CisJCVN5bnRoZXRp
Y0ZhY3RvcnlNZXRob2RCaW5kaW5nIHNmbWIgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRp
bmcpIGZhY3Rvcnkub3JpZ2luYWwoKTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNvbnN0cnVj
dG9yVHlwZVZhcmlhYmxlcyA9IHNmbWIuZ2V0Q29uc3RydWN0b3IoKS50eXBlVmFyaWFibGVzKCk7
CisJCVR5cGVCaW5kaW5nIFtdIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cyA9IGNvbnN0cnVjdG9y
VHlwZVZhcmlhYmxlcyAhPSBudWxsID8gbmV3IFR5cGVCaW5kaW5nW2NvbnN0cnVjdG9yVHlwZVZh
cmlhYmxlcy5sZW5ndGhdIDogQmluZGluZy5OT19UWVBFUzsKKwkJaWYgKGNvbnN0cnVjdG9yVHlw
ZUFyZ3VtZW50cy5sZW5ndGggPiAwKQorCQkJU3lzdGVtLmFycmF5Y29weSgoKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZylmYWN0b3J5KS50eXBlQXJndW1lbnRzLCBzZm1iLnR5cGVW
YXJpYWJsZXMoKS5sZW5ndGggLSBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMubGVuZ3RoICwgCisJ
CQkJCQkJCQkJCQljb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMsIDAsIGNvbnN0cnVjdG9yVHlwZUFy
Z3VtZW50cy5sZW5ndGgpOworCQlNZXRob2RCaW5kaW5nIGNvbnN0cnVjdG9yID0gc2ZtYi5hcHBs
eVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKCgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZh
Y3RvcnkucmV0dXJuVHlwZSkuYXJndW1lbnRzLCBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMpOwor
CQlpZiAoY29uc3RydWN0b3IgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgJiYgc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCkgeworCQkJLy8gZm9yY2UgYW4gaW5mZXJlbmNlIGNvbnRleHQgdG8g
YmUgZXN0YWJsaXNoZWQsIGJ1dCBhdm9pZCB0dW5uZWxpbmcgdGhyb3VnaCBvdmVybG9hZCByZXNv
bHV0aW9uLiBXZSBrbm93IHRoaXMgaXMgdGhlIE1TTUIuCisJCQlyZXR1cm4gUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgoY29uc3RydWN0
b3Iuc2hhbGxvd09yaWdpbmFsKCksIGFyZ3VtZW50VHlwcywgc2NvcGUsIHRoaXMpOworCQl9CisJ
CXJldHVybiBjb25zdHJ1Y3RvcjsKIAl9CiAJcmV0dXJuIG51bGw7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRp
b25hbEV4cHJlc3Npb24uamF2YQppbmRleCA3ZjBjY2JmLi43Y2FhMmZmIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
ZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTcxOSw3ICs3MTksNyBAQAogCQogCXB1YmxpYyBi
b29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlw
ZVZhcmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCQlyZXR1cm4gdGhpcy52YWx1ZUlm
VHJ1ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCkgCi0J
CQkJJiYgdGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodHlwZVZh
cmlhYmxlLCBtZXRob2QpOyAvLyBub3QgcGVyZmVjdC4KKwkJCQkmJiB0aGlzLnZhbHVlSWZGYWxz
ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCk7CiAJfQog
CQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CkBAIC03MjksNyArNzI5LDcgQEAK
IAkKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgewotCQly
ZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlm
RmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOworCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1
bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlmRmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOyAv
LyBFdmVuIGlmIG9ubHkgb25lIGFybSBpcyBmdW5jdGlvbmFsIHR5cGUsIHRoaXMgd2lsbCByZXF1
aXJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UgdGFyZ2V0CiAJfQogCQogCXB1YmxpYyBib29sZWFu
IGlzUG9seUV4cHJlc3Npb24oKSB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24g
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQppbmRleCAxZGIyNjY4Li42MGE4Y2RhIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQpAQCAtNjk0LDYgKzY5NCwxNCBAQAogCiAJ
LyoqIER1cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9kIGJp
bmRpbmcgd2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVibGlj
IE1ldGhvZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJCWlmICh0aGlzLmV4YWN0TWV0aG9kQmluZGlu
ZyAhPSBudWxsKSB7CisJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHRhcmdldFR5cGUu
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qoc2NvcGUsIHRydWUpOworCQkJaWYgKGZ1bmN0aW9uVHlw
ZSA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOworCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFy
YW1ldGVycy5sZW5ndGg7CisJCQlpbnQgayA9IHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nLnBhcmFt
ZXRlcnMubGVuZ3RoOworCQkJcmV0dXJuIChuID09IGsgfHwgbiA9PSBrICsgMSkgPyB0aGlzLmV4
YWN0TWV0aG9kQmluZGluZyA6IG51bGw7CisJCX0KIAkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRo
b2QgPSBpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CiAJCWlm
ICh0YXJnZXRNZXRob2QgPT0gbnVsbCB8fCAhdGFyZ2V0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkp
CiAJCQlyZXR1cm4gbnVsbDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCAwNGExNGIyLi5kMDVjMGRiIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Cb3VuZFNldC5qYXZhCkBAIC02MzEsNyArNjMxLDcgQEAKIAkJCQkJCQl3aGlsZSAoaXQuaGFz
TmV4dCgpKSB7CiAJCQkJCQkJCVR5cGVCb3VuZCBib3VuZCA9IGl0Lm5leHQoKTsKIAkJCQkJCQkJ
aWYgKEluZmVyZW5jZUNvbnRleHQxOC5TSE9VTERfV09SS0FST1VORF9CVUdfSkRLXzgwNTQ3MjEp
IHsKLQkJCQkJCQkJCWlmIChib3VuZC5yaWdodCBpbnN0YW5jZW9mIENhcHR1cmVCaW5kaW5nKQor
CQkJCQkJCQkJaWYgKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcgJiYgYm91
bmQucmlnaHQuaXNQcm9wZXJUeXBlKHRydWUpKQogCQkJCQkJCQkJCWNvbnRpbnVlOwogCQkJCQkJ
CQl9CiAJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFi
bGUpKQpAQCAtOTc4LDIxICs5NzgsNiBAQAogCQlpZiAodGhyZWUgPT0gbnVsbCkgcmV0dXJuIG51
bGw7CiAJCXJldHVybiB0aHJlZS5maW5kU2luZ2xlV3JhcHBlclR5cGUoKTsKIAl9Ci0KLQlwcml2
YXRlIFR5cGVCaW5kaW5nIGFwcGx5SW5zdGFudGlhdGlvbnMoVHlwZUJpbmRpbmcgdHlwZSkgewot
CQlpZiAodHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQlyZXR1cm4gdHlwZTsKLQkKLQkJSXRl
cmF0b3I8SW5mZXJlbmNlVmFyaWFibGU+IHZhcmlhYmxlSXQgPSB0aGlzLmJvdW5kc1BlclZhcmlh
YmxlLmtleVNldCgpLml0ZXJhdG9yKCk7Ci0JCXdoaWxlICh2YXJpYWJsZUl0Lmhhc05leHQoKSkg
ewotCQkJSW5mZXJlbmNlVmFyaWFibGUgaW5mZXJlbmNlVmFyaWFibGUgPSB2YXJpYWJsZUl0Lm5l
eHQoKTsKLQkJCVR5cGVCaW5kaW5nIGluc3RhbnRpYXRpb24gPSBnZXRJbnN0YW50aWF0aW9uKGlu
ZmVyZW5jZVZhcmlhYmxlLCBudWxsKTsKLQkJCWlmIChpbnN0YW50aWF0aW9uICE9IG51bGwpCi0J
CQkJdHlwZSA9IHR5cGUuc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKGluZmVyZW5jZVZhcmlh
YmxlLCBpbnN0YW50aWF0aW9uKTsKLQkJfQotCQlyZXR1cm4gdHlwZTsKLQl9Ci0JCiAJLy8gdGhp
cyBjb25kaXRpb24gaXMganVzdCB3YXkgdG9vIGNvbXBsZXggdG8gY2hlY2sgaXQgaW4tbGluZToK
IAlwdWJsaWMgYm9vbGVhbiBjb25kaXRpb24xOF81XzJfYnVsbGV0XzNfM18xKEluZmVyZW5jZVZh
cmlhYmxlIGFscGhhLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CiAJCS8vIFQgaXMgYSByZWZl
cmVuY2UgdHlwZSwgYnV0IGlzIG5vdCBhIHdpbGRjYXJkLXBhcmFtZXRlcml6ZWQgdHlwZSwgYW5k
IGVpdGhlciAKQEAgLTEwMzIsMTAgKzEwMTcsOSBAQAogCQkJCQkJLyogSGFzaE1hcDxLIzgsViM5
PiBhbmQgSGFzaE1hcDxLIzgsQXJyYXlMaXN0PFQ+PiB3aXRoIGFuIGluc3RhbnRpYXRpb24gZm9y
IFY5ID0gQXJyYXlMaXN0PFQ+IGFscmVhZHkgaW4gdGhlIAogCQkJCQkJICAgYm91bmQgc2V0IHNo
b3VsZCBub3QgYmUgc2VlbiBhcyB0d28gZGlmZmVyZW50IHBhcmFtZXRlcml6YXRpb25zIG9mIHRo
ZSBzYW1lIGdlbmVyaWMgY2xhc3Mgb3IgaW50ZXJmYWNlLgogCQkJCQkJICAgU2VlIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MjYgZm9yIGEgdGVzdCB0
aGF0IHRyaWdnZXJzIHRoaXMgY29uZGl0aW9uLgorCQkJCQkJICAgU2VlIGh0dHBzOi8vYnVncy5v
cGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1NjA5MjogcmVjb21tZW5kYXRpb24gaXMgdG8g
Y2hlY2sgZm9yIHByb3BlciB0eXBlcy4KIAkJCQkJCSovCi0JCQkJCQlzdXBlcnNbMF0gPSBhcHBs
eUluc3RhbnRpYXRpb25zKHN1cGVyc1swXSk7Ci0JCQkJCQlzdXBlcnNbMV0gPSBhcHBseUluc3Rh
bnRpYXRpb25zKHN1cGVyc1sxXSk7Ci0JCQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFs
cyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkpCisJCQkJCQlpZiAoc3VwZXJzWzBdLmlzUHJvcGVyVHlw
ZSh0cnVlKSAmJiBzdXBlcnNbMV0uaXNQcm9wZXJUeXBlKHRydWUpICYmICFUeXBlQmluZGluZy5l
cXVhbHNFcXVhbHMoc3VwZXJzWzBdLCBzdXBlcnNbMV0pKQogCQkJCQkJCXJldHVybiB0cnVlOwog
CQkJCQl9CiAJCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEKaW5kZXggNmUzZDU0Yy4uMDVlYjc3NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCkBAIC04NCwyMSArODQsMjEgQEAKIAkJCQkJ
aWYgKHByZXZpb3VzTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nKSB7CiAJCQkJCQkvLyBmaW5kIHRoZSBwcmV2aW91cyBpbm5lciBpbmZlcmVuY2UgY29u
dGV4dCB0byBzZWUgd2hhdCBpbmZlcmVuY2Uga2luZCB0aGlzIGludm9jYXRpb24gbmVlZHM6CiAJ
CQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgcHJldmlvdXNNZXRo
b2QpOwotCQkJCQkJaWYgKGlubmVyQ3R4ID09IG51bGwpIHsgLy8gbm8gaW5mZXJlbmNlIC0+IGFz
c3VtZSBpdCB3YXNuJ3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsCisJCQkJCQlpZiAoaW5uZXJDdHgg
PT0gbnVsbCB8fCBpbm5lckN0eC5zdGVwQ29tcGxldGVkID49IEluZmVyZW5jZUNvbnRleHQxOC5U
WVBFX0lORkVSUkVEKSB7IAorCQkJCQkJCS8qIE5vIGluZmVyZW5jZSBjb250ZXh0IC0+IHRoZSBt
ZXRob2Qgd2FzIGxpa2VseSBtYW51ZmFjdHVyZWQgYnkgU2NvcGUuZmluZEV4YWN0TWV0aG9kIC0+
IGFzc3VtZSBpdCB3YXNuJ3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsLgorCQkJCQkJCSAgIE90aGVy
d2lzZSwgZWl0aGVyIHRoZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3Vs
ZCBlZmZlY3RpdmVseSByZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3Vy
cmVudCBjb250ZXh0IAorCQkJCQkJCSAgIGR1cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uIE90aGVy
d2lzZSBhbGwgdGhhdCBpcyByZWxldmFudCBpcyB0byByZWxhdGUgdGhlIHJldHVybiB0eXBlIHdp
dGggZXhwZWN0ZWQgdHlwZS4KKwkJCQkJCQkqLwogCQkJCQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBl
ID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKIAkJCQkJCQlpZiAoZXhwclR5cGUgPT0gbnVsbCB8
fCAhZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCQkJcmV0dXJuIEZBTFNFOwogCQkJ
CQkJCXJldHVybiBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGV4cHJUeXBlLCB0aGlzLnJp
Z2h0LCBDT01QQVRJQkxFLCB0aGlzLmlzU29mdCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAoaW5uZXJD
dHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewot
CQkJCQkJCS8vIFRoZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3VsZCBl
ZmZlY3RpdmVseSByZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3VycmVu
dCBjb250ZXh0IGR1cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uCi0JCQkJCQkJLy8gVGhpcyBzaG91
bGQgcmVhbGx5IGJlIGRvbmUgb25seSBmb3IgcG9seSBpbnZvY2F0aW9ucyBpbnRlcmxlYXZlZCBi
eSBhIGxhbWJkYSB0aGF0IGlzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gRklYTUUu
Ci0JCQkJCQkJcmV0dXJuIFRSVUU7Ci0JCQkJCQl9CiAJCQkJCQlpZiAoaW5uZXJDdHguc3RlcENv
bXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRCkgewog
CQkJCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5hZGRCb3VuZHMoaW5uZXJDdHgu
YjIsIGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQpOwogCQkJCQkJCWluZmVyZW5jZUNvbnRl
eHQuaW5mZXJlbmNlVmFyaWFibGVzID0gaW5uZXJDdHguaW5mZXJlbmNlVmFyaWFibGVzOwogCQkJ
CQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtp
bmQ7CisJCQkJCQkJaW5uZXJDdHgub3V0ZXJDb250ZXh0ID0gaW5mZXJlbmNlQ29udGV4dDsKIAkJ
CQkJCQlpbmZlcmVuY2VDb250ZXh0LnVzZXNVbmNoZWNrZWRDb252ZXJzaW9uID0gaW5uZXJDdHgu
dXNlc1VuY2hlY2tlZENvbnZlcnNpb247CiAJCQkJCQl9IGVsc2UgewogCQkJCQkJCXJldHVybiBG
QUxTRTsgLy8gc2hvdWxkIG5vdCByZWFjaCBoZXJlLgpAQCAtMjI3LDkgKzIyNywxMSBAQAogCQlN
ZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0gbnVsbCkK
IAkJCXJldHVybiBGQUxTRTsKLQorCQkvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBm
b3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJCU1l
dGhvZEJpbmRpbmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxl
VGltZU1ldGhvZFRhcmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKKwkJaWYgKHBv
dGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQorCQkJcmV0dXJuIEZBTFNFOwogCQlpZiAocmVm
ZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgewotCQkJTWV0aG9kQmluZGluZyBwb3Rl
bnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0
PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3Ry
YWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUucGFyYW1l
dGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yMzksOCArMjQxLDYgQEAKIAkJCWlmIChu
ID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEu
Y3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJ
CQkJb2Zmc2V0ID0gMTsKLQkJCX0gZWxzZSBpZiAobiAhPSBrKSB7Ci0JCQkJcmV0dXJuIEZBTFNF
OwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25z
dHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1v
ZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNTQsMTAgKzI1NCw2IEBACiAJCQl9CiAJCQlyZXR1
cm4gbmV3Q29uc3RyYWludHMudG9BcnJheShuZXcgQ29uc3RyYWludEZvcm11bGFbbmV3Q29uc3Ry
YWludHMuc2l6ZSgpXSk7CiAJCX0gZWxzZSB7IC8vIGluZXhhY3QKLQkJCU1ldGhvZEJpbmRpbmcg
cG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxlVGltZU1ldGhvZFRh
cmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsgLy8gLy8gcG90ZW50aWFsbHktYXBw
bGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQg
KDE1LjEzLjEpLAotCQkJaWYgKHBvdGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQotCQkJCXJl
dHVybiBGQUxTRTsKLQkJCQogCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVycy5sZW5n
dGg7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykKIAkJCQlpZiAoIWZ1bmN0aW9uVHlw
ZS5wYXJhbWV0ZXJzW2ldLmlzUHJvcGVyVHlwZSh0cnVlKSkKQEAgLTM3OSw3ICszNzUsNyBAQAog
CQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVG
b3JtdWxhLmNyZWF0ZShnYmV0YSwgdGFyZ2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJcmV0dXJu
IGluZmVyZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CiAJ
CQl9Ci0JCQlpZiAoclRoZXRhLmxlYWZDb21wb25lbnRUeXBlKCkgaW5zdGFuY2VvZiBJbmZlcmVu
Y2VWYXJpYWJsZSkgeworCQkJaWYgKHJUaGV0YS5sZWFmQ29tcG9uZW50VHlwZSgpIGluc3RhbmNl
b2YgSW5mZXJlbmNlVmFyaWFibGUpIHsgLy8gaHR0cHM6Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQv
YnJvd3NlL0pESy04MDYyMDgyCiAJCQkJSW5mZXJlbmNlVmFyaWFibGUgYWxwaGEgPSAoSW5mZXJl
bmNlVmFyaWFibGUpIHJUaGV0YS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJCVR5cGVCaW5kaW5n
IHRhcmdldExlYWZUeXBlID0gdGFyZ2V0VHlwZS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJCWJv
b2xlYW4gdG9SZXNvbHZlID0gZmFsc2U7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQppbmRleCBkMjg2MzkyLi45YWZmMWMyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKQEAgLTE1MSw3ICsxNTEsNyBAQAogCQogCS8qKiBTaWduYWxzIHdoZXRoZXIgYW55IHR5
cGUgY29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVja2VkIGNvbnZlcnNpb24uICovCiAJ
cHVibGljIGJvb2xlYW4gdXNlc1VuY2hlY2tlZENvbnZlcnNpb247Ci0KKwlwdWJsaWMgSW5mZXJl
bmNlQ29udGV4dDE4IG91dGVyQ29udGV4dDsKIAlTY29wZSBzY29wZTsKIAlMb29rdXBFbnZpcm9u
bWVudCBlbnZpcm9ubWVudDsKIAlSZWZlcmVuY2VCaW5kaW5nIG9iamVjdDsgLy8gamF2YS5sYW5n
Lk9iamVjdApAQCAtNDM0LDExICs0MzQsNiBAQAogCiAJcHJpdmF0ZSBib29sZWFuIGFkZENvbnN0
cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFpbnRGb3JtdWxh
PiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9kQmluZGluZyBt
ZXRob2QsIGJvb2xlYW4gaW50ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0
aW9uIHsKIAkJCi0JCS8vIFNlZSBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2Uv
SkRLLTgwNTIzMjUgZm9yIGV4Y2x1c2lvbiBvZiBwb2x5IGV4cHJlc3Npb25zIHRhcmdldGluZyBw
cm9wZXIgdHlwZXMuIENFRi5yZWR1Y2UgdmFsaWRhdGVzIAotCQkvLyB0aGF0IHRoZXkgYXJlIGNv
bXBhdGlibGUgaW4gYSBsb29zZSBpbnZvY2F0aW9uIGNvbnRleHQgYWdhaW5zdCB0aGUgdGFyZ2V0
IHR5cGUuIFRoZXkgY29udHJpYnV0ZSBub3RoaW5nIGZ1cnRoZXIgdG8gc29sdmluZyB0aGUgZm9y
bXVsYXMuCi0JCWlmIChzdWJzdEYuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJcmV0dXJuIHRydWU7
Ci0JCQogCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBub3QgcGVydGlu
ZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaSIM64IEZp4p+p
LgogCQlpZiAoIWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwgbWV0aG9kKSkg
ewogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByaSwgc3Vic3RG
LCBSZWR1Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlOVFNfQVJFX1NP
RlQpKTsKQEAgLTQ2Nyw2ICs0NjIsMTAgQEAKIAkJCQl9CiAJCQl9CiAJCX0gZWxzZSBpZiAoZXhw
cmkgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGV4cHJpLmlzUG9seUV4cHJlc3Npb24oKSkgewor
CQkJCisJCQlpZiAoc3Vic3RGLmlzUHJvcGVyVHlwZSh0cnVlKSkgLy8gaHR0cHM6Ly9idWdzLm9w
ZW5qZGsuamF2YS5uZXQvYnJvd3NlL0pESy04MDUyMzI1IAorCQkJCXJldHVybiB0cnVlOworCQkJ
CiAJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmk7CiAJCQlNZXRo
b2RCaW5kaW5nIGlubmVyTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHN1YnN0RiwgdGhpcy5z
Y29wZSk7CiAJCQlpZiAoaW5uZXJNZXRob2QgPT0gbnVsbCkKQEAgLTQ4Nyw2ICs0ODYsOCBAQAog
CQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGVudGVyUG9seUlu
dm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7CiAJCQkJdHJ5IHsK
IAkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gYXBwbGljYWJpbGl0eUtpbmQ7CisJCQkJCWlmIChp
bm5lckNvbnRleHQgIT0gbnVsbCkKKwkJCQkJCWlubmVyQ29udGV4dC5vdXRlckNvbnRleHQgPSB0
aGlzOwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHNoYWxsb3dNZXRob2QsIGFy
Z3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3RvcigpKTsKIAkJCQkJaWYgKCFD
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52b2NhdGlvblR5cGUodGhpcywg
aW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKIAkJCQkJCXJldHVybiBmYWxzZTsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
Zy5qYXZhCmluZGV4IDM4MzE3NDMuLmRiNmM5MGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTkwLDcgKzE5MCw3
IEBACiAJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChyZXN1bHQpKSB7CiAJCQkJaW5mQ3R4MTgu
c3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZX0lORkVSUkVE
OwogCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24p
Ci0JCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtp
bmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8vIENIRUNLCisJCQkJCSgoUmVmZXJlbmNl
RXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZl
cmVuY2VLaW5kOwogCQkJfSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KQEAgLTIxNCw3
ICsyMTQsNiBAQAogCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkgeyAvLyBpbGxlZ2FsbHkgd29y
a2luZyBmcm9tIHRoZSBwcm92aXNpb25hbCByZXN1bHQ/CiAJCQkJCQlNZXRob2RCaW5kaW5nIHBy
b2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhw
ZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKIAkJCQkJCWlmIChwcm9ibGVtTWV0aG9kIGlu
c3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCQltZXRob2RTdWJzdGl0dXRl
ID0gbnVsbDsKIAkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKIAkJCQkJCX0KIAkJCQkJfQpA
QCAtMjIzLDcgKzIyMiw2IEBACiAJCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0Zv
ckNvbnRyYWRpdGlvbnMobWV0aG9kU3Vic3RpdHV0ZSwgaW52b2NhdGlvblNpdGUsIHNjb3BlKTsK
IAkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0aXR1dGUuYm91
bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOwogCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgIT0g
bnVsbCkgewotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOwogCQkJCQkJCXJldHVybiBw
cm9ibGVtTWV0aG9kOwogCQkJCQkJfQogCQkJCQkJaW5mQ3R4MTguc29sdXRpb25zUGVyVGFyZ2V0
VHlwZS5wdXQoZXhwZWN0ZWRUeXBlLCBuZXcgU29sdXRpb24obWV0aG9kU3Vic3RpdHV0ZSwgcmVz
dWx0KSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKaW5kZXggMzE3MDBhZi4uNjZlZWE2YiAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YQpAQCAtMjA2LDYgKzIwNiwxMSBAQAogCQl0aGlz
LmFyZ3VtZW50cyA9IHR5cGVBcmd1bWVudHM7CiAJfQogCQkKKwlAT3ZlcnJpZGUKKwlwdWJsaWMg
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGNhcHR1cmUoU2NvcGUgc2NvcGUsIGludCBwb3NpdGlv
bikgeworCQlyZXR1cm4gdGhpczsKKwl9CisJCiAJQE92ZXJyaWRlIAogCXB1YmxpYyBUeXBlQmlu
ZGluZyB1bmNhcHR1cmUoU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXM7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggOTM4NDlj
ZC4uMzhlZTViZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0
aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhv
ZEJpbmRpbmcuamF2YQpAQCAtMjksMTMgKzI5LDIwIEBACiAJCXRoaXMuZW5jbG9zaW5nVHlwZSA9
IGVuY2xvc2luZ1R5cGU7CiAJfQogCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlwZSBhcmd1bWVu
dHMgb24gdGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3RydWN0b3IgYmVp
bmcgcmVwcmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJsaWMgUGFyYW1l
dGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBl
QmluZGluZ1tdIHR5cGVBcmd1bWVudHMpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRDb25z
dHJ1Y3RvcigpIHsKKwkJcmV0dXJuIHRoaXMuc3RhdGljRmFjdG9yeUZvcjsKKwl9CisJCisJLyoq
IEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmluZyBjbGFzcyBv
ZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0aGlzIGZhY3Rv
cnkgbWV0aG9kIGFuZAorCSAgICBpZiBtZXRob2QgdHlwZSBhcmd1bWVudHMgaXMgbm90IGVtcHR5
IG1hdGVyaWFsaXplIHRoZSBwYXJhbWV0ZXJpemVkIGdlbmVyaWMgY29uc3RydWN0b3IgCisJKi8K
KwlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25D
b25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMsIFR5cGVCaW5kaW5nW10gY29u
c3RydWN0b3JUeXBlQXJndW1lbnRzKSB7CiAJCVJlZmVyZW5jZUJpbmRpbmcgcGFyYW1ldGVyaXpl
ZFR5cGUgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKHRoaXMuZGVj
bGFyaW5nQ2xhc3MsIHR5cGVBcmd1bWVudHMsCiAJCQkJCQkJCQkJCQkJCQkJCQkJCQkJdGhpcy5l
bmNsb3NpbmdUeXBlKTsKIAkJZm9yIChNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2Qg
OiBwYXJhbWV0ZXJpemVkVHlwZS5tZXRob2RzKCkpIHsKIAkJCWlmIChwYXJhbWV0ZXJpemVkTWV0
aG9kLm9yaWdpbmFsKCkgPT0gdGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQotCQkJCXJldHVybiAoUGFy
YW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7CisJCQkJcmV0dXJu
IGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwID8gdGhpcy5lbnZpcm9ubWVudC5j
cmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChwYXJhbWV0ZXJpemVkTWV0aG9kLCBjb25z
dHJ1Y3RvclR5cGVBcmd1bWVudHMpIDoKKwkJCQkJCQkJCQkJCQkgICAgICAgICAoUGFyYW1ldGVy
aXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7CiAJCQlpZiAocGFyYW1ldGVy
aXplZE1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7CiAJCQkJTWV0aG9k
QmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXBhcmFtZXRlcml6
ZWRNZXRob2QpLmNsb3Nlc3RNYXRjaDsKIAkJCQlpZiAoY2xvc2VzdE1hdGNoIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgJiYgY2xvc2VzdE1hdGNoLm9yaWdpbmFsKCkgPT0g
dGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248194</attachid>
            <date>2014-10-27 01:16:00 -0400</date>
            <delta_ts>2014-10-27 09:01:21 -0400</delta_ts>
            <desc>CombinedPatch(Comment 177)</desc>
            <filename>CombinedPatch.patch</filename>
            <type>text/plain</type>
            <size>61604</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBiMjRlODFlLi5jZGIxMjJlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC00NTcxLDYwICs0NTcxLDYyIEBAIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzA5ODcoKSB7
CiAJCQkiICB9XG4iICsgCiAJCQkiXG4iICsgCiAJCQkifVxuIjsKLQlpZiAodGhpcy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7Ci0JCXJ1bkNvbmZvcm1UZXN0
KAotCQkJbmV3IFN0cmluZ1tdIHsKLQkJCQkiWC5qYXZhIiwKLQkJCQlzb3VyY2UKLQkJCX0pOwot
CX0gZWxzZSB7CiAJCXJ1bk5lZ2F0aXZlVGVzdCgKIAkJCW5ldyBTdHJpbmdbXSB7CiAJCQkJIlgu
amF2YSIsCiAJCQkJc291cmNlCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJCSIxLiBXQVJOSU5HIGluIFguamF2
YSAoYXQgbGluZSA4KVxuIiArIAogCQkJIglkb1NvbWV0aGluZ1dpdGhGb28oIGFueSggRm9vLmNs
YXNzICksIGFueSggRm9vLmNsYXNzICkgKTtcbiIgKyAKLQkJCSIJXl5eXl5eXl5eXl5eXl5eXl5e
XG4iICsgCi0JCQkiVGhlIG1ldGhvZCBkb1NvbWV0aGluZ1dpdGhGb28oWC5Gb288VD4sIFguRm9v
PFQ+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChY
LkZvbywgWC5Gb28pXG4iICsgCisJCQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tl
ZCBpbnZvY2F0aW9uIGRvU29tZXRoaW5nV2l0aEZvbyhYLkZvbywgWC5Gb28pIG9mIHRoZSBnZW5l
cmljIG1ldGhvZCBkb1NvbWV0aGluZ1dpdGhGb28oWC5Gb288VD4sIFguRm9vPFQ+KSBvZiB0eXBl
IFhcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMi4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCQkiMi4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgOClc
biIgKyAKKwkJCSIJZG9Tb21ldGhpbmdXaXRoRm9vKCBhbnkoIEZvby5jbGFzcyApLCBhbnkoIEZv
by5jbGFzcyApICk7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5e
Xl5eXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFguRm9v
IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gWC5Gb288T2JqZWN0Plxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIzLiBXQVJOSU5HIGluIFguamF2YSAoYXQg
bGluZSA4KVxuIiArIAorCQkJIglkb1NvbWV0aGluZ1dpdGhGb28oIGFueSggRm9vLmNsYXNzICks
IGFueSggRm9vLmNsYXNzICkgKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFRo
ZSBleHByZXNzaW9uIG9mIHR5cGUgWC5Gb28gbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8g
Y29uZm9ybSB0byBYLkZvbzxPYmplY3Q+XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJ
IjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkJIglGb28gZm9vID0g
YW55KCBGb28uY2xhc3MgKTtcbiIgKyAKIAkJCSIJXl5eXG4iICsgCiAJCQkiWC5Gb28gaXMgYSBy
YXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgWC5Gb288VD4gc2hvdWxkIGJlIHBh
cmFtZXRlcml6ZWRcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMy4gV0FSTklORyBp
biBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCQkiNS4gV0FSTklORyBpbiBYLmphdmEgKGF0
IGxpbmUgMTMpXG4iICsgCiAJCQkiCWRvU29tZXRoaW5nV2l0aEZvbyggZm9vLCBmb28gKTtcbiIg
KyAKIAkJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCQkiVHlwZSBz
YWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0aW9uIGRvU29tZXRoaW5nV2l0aEZvbyhYLkZvbywgWC5G
b28pIG9mIHRoZSBnZW5lcmljIG1ldGhvZCBkb1NvbWV0aGluZ1dpdGhGb28oWC5Gb288VD4sIFgu
Rm9vPFQ+KSBvZiB0eXBlIFhcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiNC4gV0FS
TklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCQkiNi4gV0FSTklORyBpbiBYLmph
dmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCQkiCWRvU29tZXRoaW5nV2l0aEZvbyggZm9vLCBmb28g
KTtcbiIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKIAkJCSJUeXBlIHNh
ZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBYLkZvbyBuZWVkcyB1bmNoZWNrZWQgY29udmVy
c2lvbiB0byBjb25mb3JtIHRvIFguRm9vPE9iamVjdD5cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4i
ICsgCi0JCQkiNS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCQkiNy4g
V0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCQkiCWRvU29tZXRoaW5nV2l0
aEZvbyggZm9vLCBmb28gKTtcbiIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgIF5e
XlxuIiArIAogCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFguRm9vIG5l
ZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gWC5Gb288T2JqZWN0PlxuIiAr
IAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSI2LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGlu
ZSAxNylcbiIgKyAKKwkJCSI4LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAK
IAkJCSIJdGhpcy48T2JqZWN0PmRvU29tZXRoaW5nV2l0aEZvbyggYW55KCBGb28uY2xhc3MgKSwg
YW55KCBGb28uY2xhc3MgKSApO1xuIiArIAogCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJCSJU
eXBlIHNhZmV0eTogVW5jaGVja2VkIGludm9jYXRpb24gZG9Tb21ldGhpbmdXaXRoRm9vKFguRm9v
LCBYLkZvbykgb2YgdGhlIGdlbmVyaWMgbWV0aG9kIGRvU29tZXRoaW5nV2l0aEZvbyhYLkZvbzxU
PiwgWC5Gb288VD4pIG9mIHR5cGUgWFxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSI3
LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKKwkJCSI5LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKIAkJCSIJdGhpcy48T2JqZWN0PmRvU29tZXRoaW5n
V2l0aEZvbyggYW55KCBGb28uY2xhc3MgKSwgYW55KCBGb28uY2xhc3MgKSApO1xuIiArIAogCQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsg
CiAJCQkiVHlwZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgWC5Gb28gbmVlZHMgdW5j
aGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBYLkZvbzxPYmplY3Q+XG4iICsgCiAJCQki
LS0tLS0tLS0tLVxuIiArIAotCQkJIjguIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxu
IiArIAorCQkJIjEwLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKIAkJCSIJ
dGhpcy48T2JqZWN0PmRvU29tZXRoaW5nV2l0aEZvbyggYW55KCBGb28uY2xhc3MgKSwgYW55KCBG
b28uY2xhc3MgKSApO1xuIiArIAogCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsgCiAJCQkiVHlwZSBzYWZl
dHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgWC5Gb28gbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNp
b24gdG8gY29uZm9ybSB0byBYLkZvbzxPYmplY3Q+XG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7
Ci0JfQogfQogcHVibGljIHZvaWQgX3Rlc3RCdWc0MzA2ODYoKSB7CiAJcnVuQ29uZm9ybVRlc3Qo
CkBAIC01NDc5LDkgKzU0ODEsOCBAQCBwdWJsaWMgdm9pZCB0ZXN0NDQwMDE5KCkgewogCQkgICAi
Iik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDQzNTk2LCBbMS44XVtjb21waWxlcl0gRmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBp
biBjYXNlIG9mIEdlbmVyaWNzIGFuZCBWYXJhZ3MgCi1wdWJsaWMgdm9pZCBfdGVzdDQ0MzU5Nigp
IHsKLQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
NykKLQkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCitwdWJsaWMgdm9pZCB0ZXN0NDQzNTk2KCkgewor
CXRoaXMucnVuTmVnYXRpdmVUZXN0KAogCQkgICBuZXcgU3RyaW5nW10gewogCQkJICAgIlguamF2
YSIsCiAJCQkgICAicHVibGljIGZpbmFsIGNsYXNzIFgge1xuIiArCkBAIC01NDk1LDYgKzU0OTYs
OCBAQCBwdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsKIAkJCSAgICIgICAgfVxuIiArCiAJCQkg
ICAifVxuIiwKIAkJICAgfSwKKwkJICAgdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV83ID8KKwkJICAgIiIgOiAJICAgCiAJCSAgICItLS0tLS0tLS0tXG4iICsg
CiAJCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKIAkJCSIJcHVibGlj
IHN0YXRpYyA8VD4gUHJlZGljYXRlPFQ+IGFuZChQcmVkaWNhdGU8PyBzdXBlciBUPi4uLiBhcmcp
IHsgcmV0dXJuIG51bGw7IH1cbiIgKyAKQEAgLTU1NzQsNSArNTU3NywxNjkgQEAgcHVibGljIHZv
aWQgdGVzdDQ0NjIyMygpIHsKIAkJCSJUaGUgdHlwZSBwYXJhbWV0ZXIgWCBpcyBoaWRpbmcgdGhl
IHR5cGUgWFxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0NDMzNCwgIFsxLjhdW2NvbXBpbGVyXSBD
b21waWxlciBnZW5lcmF0ZXMgZXJyb3IgaW5zdGVhZCBvZiB3YXJuaW5nIG9uIHVuY2hlY2tlZCBj
b252ZXJzaW9uIAorcHVibGljIHZvaWQgdGVzdDQ0NDMzNCgpIHsKKwkJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkgICAiWC5qYXZhIiwKKwkJCSAgICJpbXBv
cnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKworCQkJICAgImltcG9ydCBqYXZhLnV0aWwuTGlz
dDtcbiIgKworCQkJICAgInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJICAgIiAgICBwdWJsaWMg
c3RhdGljIHZvaWQgTWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIgICAgICAgIGRv
U29tZXRoaW5nKHJldHVybkNsYXNzVHlwZShDbGFzcy5jbGFzcykpO1xuIiArCisJCQkgICAiICAg
ICAgICBkb1NvbWV0aGluZyhyZXR1cm5MaXN0VHlwZShuZXcgQXJyYXlMaXN0PExpc3Q+KCkpKTtc
biIgKworCQkJICAgIiAgICB9XG4iICsKKwkJCSAgICIgICAgcHVibGljIHN0YXRpYyA8VD4gdm9p
ZCBkb1NvbWV0aGluZyhDbGFzczxUPiBjbGF6eikge1xuIiArCisJCQkgICAiICAgICAgICBTeXN0
ZW0ub3V0LnByaW50bG4oY2xhenouZ2V0U2ltcGxlTmFtZSgpKTtcbiIgKworCQkJICAgIiAgICB9
XG4iICsKKwkJCSAgICIgICAgcHVibGljIHN0YXRpYyA8VD4gVCByZXR1cm5DbGFzc1R5cGUoQ2xh
c3M8VD4gY2xhenopIHtcbiIgKworCQkJICAgIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJ
CSAgICIgICAgfVxuIiArCisJCQkgICAiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgZG9Tb21l
dGhpbmcoTGlzdDxUPiBsaXN0KSB7XG4iICsKKwkJCSAgICIgICAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbihsaXN0LmdldENsYXNzKCkuZ2V0U2ltcGxlTmFtZSgpKTtcbiIgKworCQkJICAgIiAgICB9
XG4iICsKKwkJCSAgICIgICAgcHVibGljIHN0YXRpYyA8VD4gVCByZXR1cm5MaXN0VHlwZShMaXN0
PFQ+IGxpc3QpIHtcbiIgKworCQkJICAgIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSAg
ICIgICAgfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwKKwkJICAgIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJIglkb1Nv
bWV0aGluZyhyZXR1cm5DbGFzc1R5cGUoQ2xhc3MuY2xhc3MpKTtcbiIgKyAKKwkJCSIJXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0
eTogVW5jaGVja2VkIGludm9jYXRpb24gZG9Tb21ldGhpbmcoQ2xhc3MpIG9mIHRoZSBnZW5lcmlj
IG1ldGhvZCBkb1NvbWV0aGluZyhDbGFzczxUPikgb2YgdHlwZSBYXG4iICsgCisJCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkJIjIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJ
CQkiCWRvU29tZXRoaW5nKHJldHVybkNsYXNzVHlwZShDbGFzcy5jbGFzcykpO1xuIiArIAorCQkJ
IgkgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlw
ZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgQ2xhc3MgbmVlZHMgdW5jaGVja2VkIGNv
bnZlcnNpb24gdG8gY29uZm9ybSB0byBDbGFzczxPYmplY3Q+XG4iICsgCisJCQkiLS0tLS0tLS0t
LVxuIiArIAorCQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQki
CWRvU29tZXRoaW5nKHJldHVybkxpc3RUeXBlKG5ldyBBcnJheUxpc3Q8TGlzdD4oKSkpO1xuIiAr
IAorCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBVbmNoZWNrZWQgaW52b2NhdGlvbiBkb1NvbWV0aGlu
ZyhMaXN0KSBvZiB0aGUgZ2VuZXJpYyBtZXRob2QgZG9Tb21ldGhpbmcoTGlzdDxUPikgb2YgdHlw
ZSBYXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZh
IChhdCBsaW5lIDYpXG4iICsgCisJCQkiCWRvU29tZXRoaW5nKHJldHVybkxpc3RUeXBlKG5ldyBB
cnJheUxpc3Q8TGlzdD4oKSkpO1xuIiArIAorCQkJIgkgICAgICAgICAgICBeXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFRoZSBleHBy
ZXNzaW9uIG9mIHR5cGUgTGlzdCBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3Jt
IHRvIExpc3Q8T2JqZWN0PlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI1LiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIglkb1NvbWV0aGluZyhyZXR1cm5M
aXN0VHlwZShuZXcgQXJyYXlMaXN0PExpc3Q+KCkpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4iICsgCisJCQkiTGlzdCBpcyBhIHJh
dyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+IHNob3VsZCBiZSBwYXJh
bWV0ZXJpemVkXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM4MjQ2LCBbMS44XVtjb21waWxlcl0g
SmF2YSA4IHN0YXRpYyBtZXRob2RzIGNvbXBpbGF0aW9uIGVycm9yICAKK3B1YmxpYyB2b2lkIHRl
c3Q0MzgyNDYoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzcpCisJCQlyZXR1cm47CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkgICBu
ZXcgU3RyaW5nW10geworCQkJICAgIkZvby5qYXZhIiwKKwkJCSAgICJpbXBvcnQgamF2YS51dGls
Lkxpc3Q7XG4iICsKKwkJCSAgICJwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRm9vPEM+XG4iICsKKwkJ
CSAgICJ7XG4iICsKKwkJCSAgICIgIEBTdXBwcmVzc1dhcm5pbmdzKFwidW5jaGVja2VkXCIpXG4i
ICsKKwkJCSAgICIgIHB1YmxpYyBzdGF0aWMgPEM+IHZvaWQgZG9pdCggTGlzdDxGb288Qz4+IHdv
cmtlcnMgKVxuIiArCisJCQkgICAiICB7XG4iICsKKwkJCSAgICIgICAgZG9pdCggIHdvcmtlcnMu
dG9BcnJheSggbmV3IEZvb1t3b3JrZXJzLnNpemUoKV0gKSApO1xuIiArCisJCQkgICAiICB9XG4i
ICsKKwkJCSAgICIgIHB1YmxpYyBzdGF0aWMgPEM+IHZvaWQgZG9pdCggRm9vPEM+Li4uIHdvcmtl
cnMgKVxuIiArCisJCQkgICAiICB7XG4iICsKKwkJCSAgICIgIH1cbiIgKworCQkJICAgIn1cbiIs
CisJCSAgIH0sCisJCSAgICItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gV0FSTklORyBpbiBGb28u
amF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIglwdWJsaWMgc3RhdGljIDxDPiB2b2lkIGRvaXQo
IEZvbzxDPi4uLiB3b3JrZXJzIClcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBQb3RlbnRpYWwg
aGVhcCBwb2xsdXRpb24gdmlhIHZhcmFyZ3MgcGFyYW1ldGVyIHdvcmtlcnNcbiIgKyAKKwkJCSIt
LS0tLS0tLS0tXG4iKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2NvbXBpbGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2Ny
aW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQgbG9vc2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRl
c3Q0NDg3OTUoKSB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkgICBuZXcgU3RyaW5nW10g
eworCQkJICAgIlguamF2YSIsCisJCQkgICAicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkg
ICAiCXN0YXRpYyA8VD4gVCBlbGVtZW50KFQgW10gdGEpIHtcbiIgKworCQkJICAgIgkJcmV0dXJu
IHRhWzBdO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIJCWludCB4ID0gZWxlbWVudChuZXcg
aW50IFtdIHsgMTIzNCB9KTtcbiIgKyAgLy8gY2hlY2sgdGhhdCBhdXRvYm94aW5nIGRvZXMgbm90
IGtpY2sgaW4gZm9yIGFycmF5cywgaS5lIGVuZ2luZSBzaG91bGQgbm90IHNsaXAgaW50byBsb29z
ZSBtb2RlLgorCQkJICAgIgl9XG4iICsKKwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAiLS0t
LS0tLS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAor
CQkJIglpbnQgeCA9IGVsZW1lbnQobmV3IGludCBbXSB7IDEyMzQgfSk7XG4iICsgCisJCQkiCSAg
ICAgICAgXl5eXl5eXlxuIiArIAorCQkJIlRoZSBtZXRob2QgZWxlbWVudChUW10pIGluIHRoZSB0
eXBlIFg8VD4gaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKGludFtdKVxuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBzaG91
bGQgZGlzY3JpbWluYXRlIGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBtb2RlcyAgIAorcHVibGlj
IHZvaWQgdGVzdDQ0ODc5NWEoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCSAgIG5ldyBT
dHJpbmdbXSB7CisJCQkgICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMgY2xhc3MgWDxUPiB7XG4i
ICsKKwkJCSAgICIJc3RhdGljIDxUPiBUIGVsZW1lbnQoaW50IHgsIFQgdCkge1xuIiArCisJCQkg
ICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJTdHJpY3RcIik7XG4iICsKKwkJCSAgICIJCXJldHVy
biB0O1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChU
IHQxLCBUIHQyKSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkxvb3NlXCIp
O1xuIiArCisJCQkgICAiCQlyZXR1cm4gdDI7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAi
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAgIgkJ
aW50IHggPSBlbGVtZW50KDEwLCBuZXcgSW50ZWdlcigyMCkpO1xuIiArCisJCQkgICAiCX1cbiIg
KworCQkJICAgIn1cbiIsCisJCSAgIH0sCisJCSAgICJTdHJpY3QiKTsKK30KKy8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2NvbXBp
bGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQgbG9v
c2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDg3OTViKCkgeworCQl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQkgICBuZXcgU3RyaW5nW10geworCQkJICAgIlguamF2YSIsCisJCQkgICAicHVi
bGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkgICAiCXN0YXRpYyBpbnQgZWxlbWVudChpbnQgeCwg
SW50ZWdlciB0KSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIm5vbi1nZW5l
cmljXCIpO1xuIiArCisJCQkgICAiCQlyZXR1cm4gdDtcbiIgKworCQkJICAgIgl9XG4iICsKKwkJ
CSAgICIJc3RhdGljIDxUPiBUIGVsZW1lbnQoaW50IHQxLCBUIHQyKSB7XG4iICsKKwkJCSAgICIJ
CVN5c3RlbS5vdXQucHJpbnRsbihcImdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0
MjtcbiIgKworCQkJICAgIgl9XG4iICsKKwkJCSAgICIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4o
U3RyaW5nW10gYXJncykge1xuIiArCisJCQkgICAiCQlpbnQgeCA9IGVsZW1lbnQoMTAsIG5ldyBJ
bnRlZ2VyKDIwKSk7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwK
KwkJICAgIm5vbi1nZW5lcmljIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9NDQ4Nzk1LCBbMS44XVtjb21waWxlcl0gSW5mZXJlbmNlIHNob3Vs
ZCBkaXNjcmltaW5hdGUgYmV0d2VlbiBzdHJpY3QgYW5kIGxvb3NlIG1vZGVzICAgCitwdWJsaWMg
dm9pZCB0ZXN0NDQ4Nzk1YygpIHsKKwkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJICAgbmV3IFN0
cmluZ1tdIHsKKwkJCSAgICJYLmphdmEiLAorCQkJICAgInB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIg
KworCQkJICAgIglzdGF0aWMgaW50IGVsZW1lbnQoSW50ZWdlciB4LCBJbnRlZ2VyIHQpIHtcbiIg
KworCQkJICAgIgkJU3lzdGVtLm91dC5wcmludGxuKFwibm9uLWdlbmVyaWNcIik7XG4iICsKKwkJ
CSAgICIJCXJldHVybiB0O1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+
IFQgZWxlbWVudChpbnQgdDEsIFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVtLm91dC5wcmlu
dGxuKFwiZ2VuZXJpY1wiKTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQyO1xuIiArCisJCQkgICAi
CX1cbiIgKworCQkJICAgIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCSAgICIJCWludCB4ID0gZWxlbWVudCgxMCwgbmV3IEludGVnZXIoMjApKTtcbiIg
KworCQkJICAgIgl9XG4iICsKKwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAiZ2VuZXJpYyIp
OworfQogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5l
cmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQppbmRleCBmNTU0MmZmLi44NmE5Zjkw
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jl
c3Npb25UZXN0XzFfOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dl
bmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKQEAgLTQ3NjcsNCArNDc2NywyOSBAQCBwdWJs
aWMgdm9pZCB0ZXN0NDQ1NzI1KCkgewogCQl9LCAKIAkJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0Nzc2NywgWzEuOF1bY29tcGlsZXJd
IFNwdXJpb3VzIG1ldGhvZCBub3QgYXBwbGljYWJsZSBlcnJvciBkdWUgdG8gaW50ZXJhY3Rpb24g
YmV0d2VlbiBvdmVybG9hZCByZXNvbHV0aW9uIGFuZCB0eXBlIGluZmVyZW5jZQorcHVibGljIHZv
aWQgdGVzdDQ0Nzc2NygpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkiCXZvaWQgYmFyKFN0
cmluZyB0KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKwor
CQkJIglYKFN0cmluZyB4KSB7fVxuIiArCisJCQkiCVgoVCB4KSB7IFxuIiArCisJCQkiCQlTeXN0
ZW0ub3V0LnByaW50bG4oXCJIZXJlXCIpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglYKFQgeCwg
U3RyaW5nIC4uLnN0cmluZ3MpIHt9XG4iICsKKwkJCSIJcHVibGljIHZvaWQgb25lKFg8ST4gYyl7
fVxuIiArCisJCQkiCXB1YmxpYyB2b2lkIHR3bygpIHtcbiIgKworCQkJIgkJb25lKG5ldyBYPD4o
KFN0cmluZyBzKSAtPiB7IH0pKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQluZXcgWChcIlwiKS50d28o
KTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iLAorCQl9LCAKKwkJIkhlcmUiKTsKK30KIH0K
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggNzlmZDNiNy4uZWFmYzRlNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTY1Miw2ICs2NTIsOCBA
QCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgQVNUTm9kZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMs
IFR5cGVJZHMgewogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdt
ZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFz
IGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVy
IHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBt
ZXRob2RzIHBhcmFtZXRlcnMuCisJICogSWYgdGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVy
IHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJh
eSBpbi1wbGFjZSBhcyBhbgorCSAqIGludGVuZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVk
IGJldHRlciB0eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFu
ZCBvdGhlcnMuIAogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdo
aWNoIGlzIGJlaW5nIHJlc29sdmVkCiAJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1
Y2VkIGJ5IGxvb2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBA
cGFyYW0gYXJndW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20g
Zmlyc3QgcmVzb2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3Ig
dGhlIG1ldGhvZCBsb29rdXAuCkBAIC02NzQsNyArNjc2LDcgQEAgcHVibGljIGFic3RyYWN0IGNs
YXNzIEFTVE5vZGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJCVR5cGVC
aW5kaW5nIHBhcmFtZXRlclR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBh
cmFtZXRlcnMsIGksIHZhcmlhYmxlQXJpdHkpOwogCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVs
bCkKIAkJCQljb250aW51ZTsgLy8gbm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQg
dHlwZSwgYXNzdW1lIGl0IG9ubHkgaGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQkJ
CWlmIChhcmd1bWVudFR5cGVzW2ldLmlzUG9seVR5cGUoKSkgeworCQkJaWYgKGFyZ3VtZW50VHlw
ZXNbaV0gIT0gbnVsbCAmJiBhcmd1bWVudFR5cGVzW2ldLmlzUG9seVR5cGUoKSkgewogCQkJCWFy
Z3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKIAkJCQlUeXBlQmluZGluZyB1
cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpOyAKIAkJCQlp
ZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEKaW5kZXggZjJkYTUxMC4uMzVjYmVmOCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YQpAQCAtNTU2LDggKzU1NiwxOCBAQCBwdWJsaWMgTWV0aG9kQmlu
ZGluZyBpbmZlckNvbnN0cnVjdG9yT2ZFbGlkZWRQYXJhbWV0ZXJpemVkVHlwZShQYXJhbWV0ZXJp
emVkVHlwZQogCS8vIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5kIHRoZSBhcmd1bWVudHMg
dG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIGluZmVyIHRoZSBjb25zdHJ1Y3RvciBv
ZiB0aGUgZWxpZGVkIHBhcmFtZXRlcml6ZWQgdHlwZS4KIAlNZXRob2RCaW5kaW5nIGZhY3Rvcnkg
PSBzY29wZS5nZXRTdGF0aWNGYWN0b3J5KGFsbG9jYXRpb25UeXBlLCBlbmNsb3NpbmdUeXBlLCBh
cmd1bWVudFR5cHMsIHRoaXMpOwogCWlmIChmYWN0b3J5IGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlT
eW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IChTeW50aGV0aWNGYWN0b3J5
TWV0aG9kQmluZGluZykgZmFjdG9yeS5vcmlnaW5hbCgpOwotCQlyZXR1cm4gb3JpZ2luYWwuYXBw
bHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcigoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZylm
YWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50cyk7CisJCVN5bnRoZXRpY0ZhY3RvcnlNZXRob2RC
aW5kaW5nIHNmbWIgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcpIGZhY3Rvcnkub3Jp
Z2luYWwoKTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNvbnN0cnVjdG9yVHlwZVZhcmlhYmxl
cyA9IHNmbWIuZ2V0Q29uc3RydWN0b3IoKS50eXBlVmFyaWFibGVzKCk7CisJCVR5cGVCaW5kaW5n
IFtdIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cyA9IGNvbnN0cnVjdG9yVHlwZVZhcmlhYmxlcyAh
PSBudWxsID8gbmV3IFR5cGVCaW5kaW5nW2NvbnN0cnVjdG9yVHlwZVZhcmlhYmxlcy5sZW5ndGhd
IDogQmluZGluZy5OT19UWVBFUzsKKwkJaWYgKGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cy5sZW5n
dGggPiAwKQorCQkJU3lzdGVtLmFycmF5Y29weSgoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
QmluZGluZylmYWN0b3J5KS50eXBlQXJndW1lbnRzLCBzZm1iLnR5cGVWYXJpYWJsZXMoKS5sZW5n
dGggLSBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMubGVuZ3RoICwgCisJCQkJCQkJCQkJCQljb25z
dHJ1Y3RvclR5cGVBcmd1bWVudHMsIDAsIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cy5sZW5ndGgp
OworCQlNZXRob2RCaW5kaW5nIGNvbnN0cnVjdG9yID0gc2ZtYi5hcHBseVR5cGVBcmd1bWVudHNP
bkNvbnN0cnVjdG9yKCgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZhY3RvcnkucmV0dXJuVHlw
ZSkuYXJndW1lbnRzLCBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMpOworCQlpZiAoY29uc3RydWN0
b3IgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYgc2NvcGUu
Y29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkgeworCQkJLy8gZm9yY2UgYW4gaW5mZXJlbmNlIGNvbnRleHQgdG8gYmUgZXN0YWJsaXNoZWQs
IGJ1dCBhdm9pZCB0dW5uZWxpbmcgdGhyb3VnaCBvdmVybG9hZCByZXNvbHV0aW9uLiBXZSBrbm93
IHRoaXMgaXMgdGhlIE1TTUIuCisJCQlyZXR1cm4gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgoY29uc3RydWN0b3Iuc2hhbGxvd09yaWdp
bmFsKCksIGFyZ3VtZW50VHlwcywgc2NvcGUsIHRoaXMpOworCQl9CisJCXJldHVybiBjb25zdHJ1
Y3RvcjsKIAl9CiAJcmV0dXJuIG51bGw7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRp
dGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24u
amF2YQppbmRleCA3ZjBjY2JmLi43Y2FhMmZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRp
dGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNz
aW9uLmphdmEKQEAgLTcxOSw3ICs3MTksNyBAQCBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUo
QmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LAogCQogCXB1
YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRp
bmcgdHlwZVZhcmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCQlyZXR1cm4gdGhpcy52
YWx1ZUlmVHJ1ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhv
ZCkgCi0JCQkJJiYgdGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHko
dHlwZVZhcmlhYmxlLCBtZXRob2QpOyAvLyBub3QgcGVyZmVjdC4KKwkJCQkmJiB0aGlzLnZhbHVl
SWZGYWxzZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCk7
CiAJfQogCQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVC
aW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CkBAIC03MjksNyArNzI5
LDcgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3Bl
LCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwKIAkKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgYm9vbGVh
biBpc0Z1bmN0aW9uYWxUeXBlKCkgewotCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0
aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlmRmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOworCQly
ZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlm
RmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOyAvLyBFdmVuIGlmIG9ubHkgb25lIGFybSBpcyBmdW5j
dGlvbmFsIHR5cGUsIHRoaXMgd2lsbCByZXF1aXJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UgdGFy
Z2V0CiAJfQogCQogCXB1YmxpYyBib29sZWFuIGlzUG9seUV4cHJlc3Npb24oKSB0aHJvd3MgVW5z
dXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZl
cmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQppbmRleCAxZGIyNjY4Li42MGE4Y2RhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5j
ZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQpAQCAtNjk0LDYgKzY5NCwxNCBAQCBwdWJsaWMgY2xhc3MgUmVmZXJlbmNlRXhwcmVzc2lvbiBl
eHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdAogCiAJLyoqIER1
cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9kIGJpbmRpbmcg
d2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVibGljIE1ldGhv
ZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJCWlmICh0aGlzLmV4YWN0TWV0aG9kQmluZGluZyAhPSBu
dWxsKSB7CisJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHRhcmdldFR5cGUuZ2V0U2lu
Z2xlQWJzdHJhY3RNZXRob2Qoc2NvcGUsIHRydWUpOworCQkJaWYgKGZ1bmN0aW9uVHlwZSA9PSBu
dWxsKQorCQkJCXJldHVybiBudWxsOworCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVy
cy5sZW5ndGg7CisJCQlpbnQgayA9IHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nLnBhcmFtZXRlcnMu
bGVuZ3RoOworCQkJcmV0dXJuIChuID09IGsgfHwgbiA9PSBrICsgMSkgPyB0aGlzLmV4YWN0TWV0
aG9kQmluZGluZyA6IG51bGw7CisJCX0KIAkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSBp
bnRlcm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CiAJCWlmICh0YXJn
ZXRNZXRob2QgPT0gbnVsbCB8fCAhdGFyZ2V0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQly
ZXR1cm4gbnVsbDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCA5YjA5ODlmLi5kMDVjMGRiIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3Vu
ZFNldC5qYXZhCkBAIC00MjIsNyArNDIyLDEzIEBAIGNsYXNzIEJvdW5kU2V0IHsKIAkJfQogCQly
ZXR1cm4gaGFzUHJvcGVyQm91bmQ7CiAJfQotCisJCisJcHVibGljIHZvaWQgYWRkQm91bmRzKEJv
dW5kU2V0IHRoYXQsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CisJCWlmICh0aGF0
ID09IG51bGwgfHwgZW52aXJvbm1lbnQgPT0gbnVsbCkKKwkJCXJldHVybjsKKwkJYWRkQm91bmRz
KHRoYXQuZmxhdHRlbigpLCBlbnZpcm9ubWVudCk7CisJfQorCQogCXB1YmxpYyBib29sZWFuIGlz
SW5zdGFudGlhdGVkKEluZmVyZW5jZVZhcmlhYmxlIGluZmVyZW5jZVZhcmlhYmxlKSB7CiAJCVRo
cmVlU2V0cyB0aHJlZSA9IHRoaXMuYm91bmRzUGVyVmFyaWFibGUuZ2V0KGluZmVyZW5jZVZhcmlh
YmxlLnByb3RvdHlwZSgpKTsKIAkJaWYgKHRocmVlICE9IG51bGwpCkBAIC02MjUsNyArNjMxLDcg
QEAgY2xhc3MgQm91bmRTZXQgewogCQkJCQkJCXdoaWxlIChpdC5oYXNOZXh0KCkpIHsKIAkJCQkJ
CQkJVHlwZUJvdW5kIGJvdW5kID0gaXQubmV4dCgpOwogCQkJCQkJCQlpZiAoSW5mZXJlbmNlQ29u
dGV4dDE4LlNIT1VMRF9XT1JLQVJPVU5EX0JVR19KREtfODA1NDcyMSkgewotCQkJCQkJCQkJaWYg
KGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcpCisJCQkJCQkJCQlpZiAoYm91
bmQucmlnaHQgaW5zdGFuY2VvZiBDYXB0dXJlQmluZGluZyAmJiBib3VuZC5yaWdodC5pc1Byb3Bl
clR5cGUodHJ1ZSkpCiAJCQkJCQkJCQkJY29udGludWU7CiAJCQkJCQkJCX0KIAkJCQkJCQkJaWYg
KCEoYm91bmQucmlnaHQgaW5zdGFuY2VvZiBJbmZlcmVuY2VWYXJpYWJsZSkpCkBAIC05NzIsMjEg
Kzk3OCw2IEBAIGNsYXNzIEJvdW5kU2V0IHsKIAkJaWYgKHRocmVlID09IG51bGwpIHJldHVybiBu
dWxsOwogCQlyZXR1cm4gdGhyZWUuZmluZFNpbmdsZVdyYXBwZXJUeXBlKCk7CiAJfQotCi0JcHJp
dmF0ZSBUeXBlQmluZGluZyBhcHBseUluc3RhbnRpYXRpb25zKFR5cGVCaW5kaW5nIHR5cGUpIHsK
LQkJaWYgKHR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJcmV0dXJuIHR5cGU7Ci0JCi0JCUl0
ZXJhdG9yPEluZmVyZW5jZVZhcmlhYmxlPiB2YXJpYWJsZUl0ID0gdGhpcy5ib3VuZHNQZXJWYXJp
YWJsZS5rZXlTZXQoKS5pdGVyYXRvcigpOwotCQl3aGlsZSAodmFyaWFibGVJdC5oYXNOZXh0KCkp
IHsKLQkJCUluZmVyZW5jZVZhcmlhYmxlIGluZmVyZW5jZVZhcmlhYmxlID0gdmFyaWFibGVJdC5u
ZXh0KCk7Ci0JCQlUeXBlQmluZGluZyBpbnN0YW50aWF0aW9uID0gZ2V0SW5zdGFudGlhdGlvbihp
bmZlcmVuY2VWYXJpYWJsZSwgbnVsbCk7Ci0JCQlpZiAoaW5zdGFudGlhdGlvbiAhPSBudWxsKQot
CQkJCXR5cGUgPSB0eXBlLnN1YnN0aXR1dGVJbmZlcmVuY2VWYXJpYWJsZShpbmZlcmVuY2VWYXJp
YWJsZSwgaW5zdGFudGlhdGlvbik7Ci0JCX0KLQkJcmV0dXJuIHR5cGU7Ci0JfQotCQogCS8vIHRo
aXMgY29uZGl0aW9uIGlzIGp1c3Qgd2F5IHRvbyBjb21wbGV4IHRvIGNoZWNrIGl0IGluLWxpbmU6
CiAJcHVibGljIGJvb2xlYW4gY29uZGl0aW9uMThfNV8yX2J1bGxldF8zXzNfMShJbmZlcmVuY2VW
YXJpYWJsZSBhbHBoYSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewogCQkvLyBUIGlzIGEgcmVm
ZXJlbmNlIHR5cGUsIGJ1dCBpcyBub3QgYSB3aWxkY2FyZC1wYXJhbWV0ZXJpemVkIHR5cGUsIGFu
ZCBlaXRoZXIgCkBAIC0xMDI2LDEwICsxMDE3LDkgQEAgY2xhc3MgQm91bmRTZXQgewogCQkJCQkJ
LyogSGFzaE1hcDxLIzgsViM5PiBhbmQgSGFzaE1hcDxLIzgsQXJyYXlMaXN0PFQ+PiB3aXRoIGFu
IGluc3RhbnRpYXRpb24gZm9yIFY5ID0gQXJyYXlMaXN0PFQ+IGFscmVhZHkgaW4gdGhlIAogCQkJ
CQkJICAgYm91bmQgc2V0IHNob3VsZCBub3QgYmUgc2VlbiBhcyB0d28gZGlmZmVyZW50IHBhcmFt
ZXRlcml6YXRpb25zIG9mIHRoZSBzYW1lIGdlbmVyaWMgY2xhc3Mgb3IgaW50ZXJmYWNlLgogCQkJ
CQkJICAgU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzI2MjYgZm9yIGEgdGVzdCB0aGF0IHRyaWdnZXJzIHRoaXMgY29uZGl0aW9uLgorCQkJCQkJICAg
U2VlIGh0dHBzOi8vYnVncy5vcGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1NjA5MjogcmVj
b21tZW5kYXRpb24gaXMgdG8gY2hlY2sgZm9yIHByb3BlciB0eXBlcy4KIAkJCQkJCSovCi0JCQkJ
CQlzdXBlcnNbMF0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1swXSk7Ci0JCQkJCQlzdXBl
cnNbMV0gPSBhcHBseUluc3RhbnRpYXRpb25zKHN1cGVyc1sxXSk7Ci0JCQkJCQlpZiAoIVR5cGVC
aW5kaW5nLmVxdWFsc0VxdWFscyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkpCisJCQkJCQlpZiAoc3Vw
ZXJzWzBdLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBzdXBlcnNbMV0uaXNQcm9wZXJUeXBlKHRydWUp
ICYmICFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoc3VwZXJzWzBdLCBzdXBlcnNbMV0pKQogCQkJ
CQkJCXJldHVybiB0cnVlOwogCQkJCQl9CiAJCQkJfQpAQCAtMTA2OSw3ICsxMDU5LDggQEAgY2xh
c3MgQm91bmRTZXQgewogCXByaXZhdGUgYm9vbGVhbiBzdXBlck9ubHlSYXcoVHlwZUJpbmRpbmcg
ZywgVHlwZUJpbmRpbmcgcywgTG9va3VwRW52aXJvbm1lbnQgZW52KSB7CiAJCWlmIChzIGluc3Rh
bmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpCiAJCQlyZXR1cm4gZmFsc2U7IC8vIGluZmVyZW5jZSBo
YXMgbm8gc3VwZXIgdHlwZXMKLQkJaWYgKHMuZmluZFN1cGVyVHlwZU9yaWdpbmF0aW5nRnJvbShn
KSA9PSBudWxsKQorCQlmaW5hbCBUeXBlQmluZGluZyBzdXBlclR5cGUgPSBzLmZpbmRTdXBlclR5
cGVPcmlnaW5hdGluZ0Zyb20oZyk7CisJCWlmIChzdXBlclR5cGUgIT0gbnVsbCAmJiAhc3VwZXJU
eXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSkKIAkJCXJldHVybiBzLmlzQ29tcGF0aWJsZVdpdGgo
ZW52LmNvbnZlcnRUb1Jhd1R5cGUoZywgZmFsc2UpKTsKIAkJcmV0dXJuIGZhbHNlOwogCX0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDU0
Y2VhN2MuLjA1ZWI3NzcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lv
bkZvcm11bGEuamF2YQpAQCAtODQsMjIgKzg0LDMyIEBAIGNsYXNzIENvbnN0cmFpbnRFeHByZXNz
aW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJCQkJaWYgKHByZXZpb3Vz
TWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJ
CQkJCQkvLyBmaW5kIHRoZSBwcmV2aW91cyBpbm5lciBpbmZlcmVuY2UgY29udGV4dCB0byBzZWUg
d2hhdCBpbmZlcmVuY2Uga2luZCB0aGlzIGludm9jYXRpb24gbmVlZHM6CiAJCQkJCQlJbmZlcmVu
Y2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgcHJldmlvdXNNZXRob2QpOwotCQkJCQkJ
aWYgKGlubmVyQ3R4ID09IG51bGwpIHsgLy8gbm8gaW5mZXJlbmNlIC0+IGFzc3VtZSBpdCB3YXNu
J3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsCisJCQkJCQlpZiAoaW5uZXJDdHggPT0gbnVsbCB8fCBp
bm5lckN0eC5zdGVwQ29tcGxldGVkID49IEluZmVyZW5jZUNvbnRleHQxOC5UWVBFX0lORkVSUkVE
KSB7IAorCQkJCQkJCS8qIE5vIGluZmVyZW5jZSBjb250ZXh0IC0+IHRoZSBtZXRob2Qgd2FzIGxp
a2VseSBtYW51ZmFjdHVyZWQgYnkgU2NvcGUuZmluZEV4YWN0TWV0aG9kIC0+IGFzc3VtZSBpdCB3
YXNuJ3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsLgorCQkJCQkJCSAgIE90aGVyd2lzZSwgZWl0aGVy
IHRoZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3VsZCBlZmZlY3RpdmVs
eSByZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3VycmVudCBjb250ZXh0
IAorCQkJCQkJCSAgIGR1cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uIE90aGVyd2lzZSBhbGwgdGhh
dCBpcyByZWxldmFudCBpcyB0byByZWxhdGUgdGhlIHJldHVybiB0eXBlIHdpdGggZXhwZWN0ZWQg
dHlwZS4KKwkJCQkJCQkqLwogCQkJCQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0
LnJlc29sdmVkVHlwZTsKIAkJCQkJCQlpZiAoZXhwclR5cGUgPT0gbnVsbCB8fCAhZXhwclR5cGUu
aXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCQkJcmV0dXJuIEZBTFNFOwogCQkJCQkJCXJldHVybiBD
b25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBDT01QQVRJ
QkxFLCB0aGlzLmlzU29mdCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAoaW5uZXJDdHguc3RlcENvbXBs
ZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewotCQkJCQkJCS8vIFRo
ZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3VsZCBlZmZlY3RpdmVseSBy
ZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3VycmVudCBjb250ZXh0IGR1
cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uCi0JCQkJCQkJcmV0dXJuIFRSVUU7CisJCQkJCQlpZiAo
aW5uZXJDdHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElU
WV9JTkZFUlJFRCkgeworCQkJCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5hZGRC
b3VuZHMoaW5uZXJDdHguYjIsIGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQpOworCQkJCQkJ
CWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlVmFyaWFibGVzID0gaW5uZXJDdHguaW5mZXJlbmNl
VmFyaWFibGVzOworCQkJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVy
Q3R4LmluZmVyZW5jZUtpbmQ7CisJCQkJCQkJaW5uZXJDdHgub3V0ZXJDb250ZXh0ID0gaW5mZXJl
bmNlQ29udGV4dDsKKwkJCQkJCQlpbmZlcmVuY2VDb250ZXh0LnVzZXNVbmNoZWNrZWRDb252ZXJz
aW9uID0gaW5uZXJDdHgudXNlc1VuY2hlY2tlZENvbnZlcnNpb247CisJCQkJCQl9IGVsc2Ugewor
CQkJCQkJCXJldHVybiBGQUxTRTsgLy8gc2hvdWxkIG5vdCByZWFjaCBoZXJlLgogCQkJCQkJfQot
CQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNl
S2luZDsKKwkJCQkJCS8vIGIyIGhhcyBiZWVuIGxpZnRlZCwgaW5mZXJyaW5nIHBvbHkgaW52b2Nh
dGlvbiB0eXBlIGFtb3VudHMgdG8gbGlmdGluZyBiMy4KIAkJCQkJfSBlbHNlIHsKIAkJCQkJCWlu
ZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGluZmVyZW5jZUNvbnRleHQuZ2V0SW5mZXJl
bmNlS2luZChwcmV2aW91c01ldGhvZCwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQlib29sZWFuIGlz
RGlhbW9uZCA9IG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkgJiYgdGhpcy5sZWZ0LmlzUG9seUV4cHJl
c3Npb24obWV0aG9kKTsKKwkJCQkJCWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJl
bmNlQ29udGV4dCwgbWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpc0RpYW1vbmQsIGluZmVyZW5jZUNv
bnRleHQuaW5mZXJlbmNlS2luZCk7CisJCQkJCQkvLyBiMiBoYXMgYmVlbiBsaWZ0ZWQsIGluZmVy
cmluZyBwb2x5IGludm9jYXRpb24gdHlwZSBhbW91bnRzIHRvIGxpZnRpbmcgYjMuCiAJCQkJCX0K
LQkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHRoaXMu
bGVmdC5pc1BvbHlFeHByZXNzaW9uKG1ldGhvZCk7Ci0JCQkJCWluZmVySW52b2NhdGlvbkFwcGxp
Y2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwgbWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpc0RpYW1v
bmQsIGluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCk7CiAJCQkJCWlmICghaW5mZXJQb2x5
SW52b2NhdGlvblR5cGUoaW5mZXJlbmNlQ29udGV4dCwgaW52b2NhdGlvbiwgdGhpcy5yaWdodCwg
bWV0aG9kKSkKIAkJCQkJCXJldHVybiBGQUxTRTsKIAkJCQkJcmV0dXJuIG51bGw7IC8vIGFscmVh
ZHkgaW5jb3Jwb3JhdGVkCkBAIC0yMTcsOSArMjI3LDExIEBAIGNsYXNzIENvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJTWV0aG9kQmluZGlu
ZyBmdW5jdGlvblR5cGUgPSB0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUsIHRydWUpOwogCQlpZiAoZnVuY3Rpb25UeXBlID09IG51bGwpCiAJCQlyZXR1cm4g
RkFMU0U7Ci0KKwkJLy8gcG90ZW50aWFsbHktYXBwbGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRo
b2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQgKDE1LjEzLjEpLAorCQlNZXRob2RCaW5kaW5n
IHBvdGVudGlhbGx5QXBwbGljYWJsZSA9IHJlZmVyZW5jZS5maW5kQ29tcGlsZVRpbWVNZXRob2RU
YXJnZXRpbmcodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSk7CisJCWlmIChwb3RlbnRpYWxseUFw
cGxpY2FibGUgPT0gbnVsbCkKKwkJCXJldHVybiBGQUxTRTsKIAkJaWYgKHJlZmVyZW5jZS5pc0V4
YWN0TWV0aG9kUmVmZXJlbmNlKCkpIHsKLQkJCU1ldGhvZEJpbmRpbmcgcG90ZW50aWFsbHlBcHBs
aWNhYmxlID0gcmVmZXJlbmNlLmdldEV4YWN0TWV0aG9kKCk7IAogCQkJTGlzdDxDb25zdHJhaW50
Rm9ybXVsYT4gbmV3Q29uc3RyYWludHMgPSBuZXcgQXJyYXlMaXN0PENvbnN0cmFpbnRGb3JtdWxh
PigpOwogCQkJVHlwZUJpbmRpbmdbXSBwID0gZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnM7CiAJCQlp
bnQgbiA9IHAubGVuZ3RoOwpAQCAtMjI5LDggKzI0MSw2IEBAIGNsYXNzIENvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJCWlmIChuID09IGsr
MSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRl
KHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJCQkJb2Zm
c2V0ID0gMTsKLQkJCX0gZWxzZSBpZiAobiAhPSBrKSB7Ci0JCQkJcmV0dXJuIEZBTFNFOwogCQkJ
fQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25zdHJhaW50
cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1vZmZzZXRd
LCBDT01QQVRJQkxFKSk7CkBAIC0yNDQsMTAgKzI1NCw2IEBAIGNsYXNzIENvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJCX0KIAkJCXJldHVy
biBuZXdDb25zdHJhaW50cy50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtuZXdDb25zdHJh
aW50cy5zaXplKCldKTsKIAkJfSBlbHNlIHsgLy8gaW5leGFjdAotCQkJTWV0aG9kQmluZGluZyBw
b3RlbnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZmluZENvbXBpbGVUaW1lTWV0aG9kVGFy
Z2V0aW5nKHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpOyAvLyAvLyBwb3RlbnRpYWxseS1hcHBs
aWNhYmxlIG1ldGhvZCBmb3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAo
MTUuMTMuMSksCi0JCQlpZiAocG90ZW50aWFsbHlBcHBsaWNhYmxlID09IG51bGwpCi0JCQkJcmV0
dXJuIEZBTFNFOwotCQkJCiAJCQlpbnQgbiA9IGZ1bmN0aW9uVHlwZS5wYXJhbWV0ZXJzLmxlbmd0
aDsKIAkJCWZvciAoaW50IGkgPSAwOyBpIDwgbjsgaSsrKQogCQkJCWlmICghZnVuY3Rpb25UeXBl
LnBhcmFtZXRlcnNbaV0uaXNQcm9wZXJUeXBlKHRydWUpKQpAQCAtMzM0LDcgKzM0MCw3IEBAIGNs
YXNzIENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxh
IHsKIAkJCWlmIChyZXR1cm5UeXBlID09IFR5cGVCaW5kaW5nLlZPSUQpCiAJCQkJdGhyb3cgbmV3
IEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24oImV4cHJlc3Npb24gaGFzIG5vIHZhbHVlIik7IC8v
JE5PTi1OTFMtMSQKIAotCQkJaWYgKGluZmVyZW5jZUNvbnRleHQudXNlc1VuY2hlY2tlZENvbnZl
cnNpb24oKSkgeworCQkJaWYgKGluZmVyZW5jZUNvbnRleHQudXNlc1VuY2hlY2tlZENvbnZlcnNp
b24pIHsKIAkJCQkvLyBzcGVjIHNheXMgZXJhc3VyZSwgYnV0IHdlIGRvbid0IHJlYWxseSBoYXZl
IGNvbXBhdGliaWxpdHkgcnVsZXMgZm9yIGVyYXN1cmUsIHVzZSByYXcgdHlwZSBpbnN0ZWFkOgog
CQkJCVR5cGVCaW5kaW5nIGVyYXN1cmUgPSBpbmZlcmVuY2VDb250ZXh0LmVudmlyb25tZW50LmNv
bnZlcnRUb1Jhd1R5cGUocmV0dXJuVHlwZSwgZmFsc2UpOwogCQkJCUNvbnN0cmFpbnRUeXBlRm9y
bXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShlcmFzdXJl
LCB0YXJnZXRUeXBlLCBDT01QQVRJQkxFKTsKQEAgLTM2OSwxNCArMzc1LDE1IEBAIGNsYXNzIENv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJ
CQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBlRm9y
bXVsYS5jcmVhdGUoZ2JldGEsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwogCQkJCXJldHVybiBp
bmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwogCQkJ
fQotCQkJaWYgKHJUaGV0YSBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxlKSB7Ci0JCQkJSW5m
ZXJlbmNlVmFyaWFibGUgYWxwaGEgPSAoSW5mZXJlbmNlVmFyaWFibGUpIHJUaGV0YTsKKwkJCWlm
IChyVGhldGEubGVhZkNvbXBvbmVudFR5cGUoKSBpbnN0YW5jZW9mIEluZmVyZW5jZVZhcmlhYmxl
KSB7IC8vIGh0dHBzOi8vYnVncy5vcGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA2MjA4Mgor
CQkJCUluZmVyZW5jZVZhcmlhYmxlIGFscGhhID0gKEluZmVyZW5jZVZhcmlhYmxlKSByVGhldGEu
bGVhZkNvbXBvbmVudFR5cGUoKTsKKwkJCQlUeXBlQmluZGluZyB0YXJnZXRMZWFmVHlwZSA9IHRh
cmdldFR5cGUubGVhZkNvbXBvbmVudFR5cGUoKTsKIAkJCQlib29sZWFuIHRvUmVzb2x2ZSA9IGZh
bHNlOwotCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY29uZGl0aW9uMThf
NV8yX2J1bGxldF8zXzNfMShhbHBoYSwgdGFyZ2V0VHlwZSkpIHsKKwkJCQlpZiAoaW5mZXJlbmNl
Q29udGV4dC5jdXJyZW50Qm91bmRzLmNvbmRpdGlvbjE4XzVfMl9idWxsZXRfM18zXzEoYWxwaGEs
IHRhcmdldExlYWZUeXBlKSkgewogCQkJCQl0b1Jlc29sdmUgPSB0cnVlOwotCQkJCX0gZWxzZSBp
ZiAoaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmNvbmRpdGlvbjE4XzVfMl9idWxsZXRf
M18zXzIoYWxwaGEsIHRhcmdldFR5cGUsIGluZmVyZW5jZUNvbnRleHQpKSB7CisJCQkJfSBlbHNl
IGlmIChpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuY29uZGl0aW9uMThfNV8yX2J1bGxl
dF8zXzNfMihhbHBoYSwgdGFyZ2V0TGVhZlR5cGUsIGluZmVyZW5jZUNvbnRleHQpKSB7CiAJCQkJ
CXRvUmVzb2x2ZSA9IHRydWU7Ci0JCQkJfSBlbHNlIGlmICh0YXJnZXRUeXBlLmlzUHJpbWl0aXZl
VHlwZSgpKSB7CisJCQkJfSBlbHNlIGlmICh0YXJnZXRMZWFmVHlwZS5pc1ByaW1pdGl2ZVR5cGUo
KSkgewogCQkJCQlUeXBlQmluZGluZyB3cmFwcGVyID0gaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50
Qm91bmRzLmZpbmRXcmFwcGVyVHlwZUJvdW5kKGFscGhhKTsKIAkJCQkJaWYgKHdyYXBwZXIgIT0g
bnVsbCkKIAkJCQkJCXRvUmVzb2x2ZSA9IHRydWU7CkBAIC0zODYsNiArMzkzLDkgQEAgY2xhc3Mg
Q29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11bGEgewog
CQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKIAkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJVHlw
ZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNhcHR1
cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlRW5kKCkpOwor
CQkJCQlpZiAoclRoZXRhLmRpbWVuc2lvbnMoKSAhPSAwKSB7CisJCQkJCQl1ID0gaW5mZXJlbmNl
Q29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVBcnJheVR5cGUodSwgclRoZXRhLmRpbWVuc2lvbnMo
KSk7CisJCQkJCX0KIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBD
b25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwog
CQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShuZXdDb25z
dHJhaW50KTsKIAkJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQpp
bmRleCBmZDk4ODQzLi41ZmM4MGViIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFp
bnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3Jt
dWxhLmphdmEKQEAgLTY0LDEwICs2NCwxNCBAQCBjbGFzcyBDb25zdHJhaW50VHlwZUZvcm11bGEg
ZXh0ZW5kcyBDb25zdHJhaW50Rm9ybXVsYSB7CiAJCQkJcmV0dXJuIHRoaXMubGVmdC5pc0NvbXBh
dGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpIHx8IHRoaXMubGVm
dC5pc0JveGluZ0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUpID8gVFJVRSA6IEZBTFNFOwogCQkJfQogCQkJaWYgKHRoaXMubGVmdC5pc1ByaW1pdGl2ZVR5
cGUoKSkgeworCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPT0gSW5mZXJl
bmNlQ29udGV4dDE4LkNIRUNLX1NUUklDVCkKKwkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVu
Y2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOwogCQkJCVR5cGVCaW5kaW5n
IHNQcmltZSA9IGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQuY29tcHV0ZUJveGluZ1R5cGUo
dGhpcy5sZWZ0KTsKIAkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShzUHJp
bWUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCX0KIAkJCWlmICh0
aGlzLnJpZ2h0LmlzUHJpbWl0aXZlVHlwZSgpKSB7CisJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQu
aW5mZXJlbmNlS2luZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfU1RSSUNUKQorCQkJCQlp
bmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
TE9PU0U7CiAJCQkJVHlwZUJpbmRpbmcgdFByaW1lID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9u
bWVudC5jb21wdXRlQm94aW5nVHlwZSh0aGlzLnJpZ2h0KTsKIAkJCQlyZXR1cm4gQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmNyZWF0ZSh0aGlzLmxlZnQsIHRQcmltZSwgU0FNRSwgdGhpcy5pc1NvZnQp
OwogCQkJfQpAQCAtODEsNyArODUsNyBAQCBjbGFzcyBDb25zdHJhaW50VHlwZUZvcm11bGEgZXh0
ZW5kcyBDb25zdHJhaW50Rm9ybXVsYSB7CiAJCQkJCS8vCQkJCQkJCQkJCQkJCQkJICB0aGlzLnJp
Z2h0ID0gRzxUMSxUMiwuLi4+IG9yIEc8VDEsVDIsLi4uPltdawogCQkJCQlUeXBlQmluZGluZyBn
cyA9IHRoaXMubGVmdC5maW5kU3VwZXJUeXBlT3JpZ2luYXRpbmdGcm9tKHRoaXMucmlnaHQpOwkv
LyBHPFMxLFMyLC4uLj4gb3IgRzxTMSxTMiwuLi4+W11rCiAJCQkJCWlmIChncyAhPSBudWxsICYm
IGdzLmxlYWZDb21wb25lbnRUeXBlKCkuaXNSYXdUeXBlKCkpIHsKLQkJCQkJCWluZmVyZW5jZUNv
bnRleHQucmVjb3JkVW5jaGVja2VkQ29udmVyc2lvbih0aGlzKTsKKwkJCQkJCWluZmVyZW5jZUNv
bnRleHQudXNlc1VuY2hlY2tlZENvbnZlcnNpb24gPSB0cnVlOwogCQkJCQkJcmV0dXJuIFRSVUU7
CiAJCQkJCX0KIAkJCQkJYnJlYWs7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5j
ZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpp
bmRleCBkNjEwZjg0Li4yMDI0NmQ4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5j
ZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4Lmph
dmEKQEAgLTExLDE0ICsxMSwxMiBAQAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CiAKLWltcG9ydCBqYXZh
LnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5BcnJheXM7CiBpbXBvcnQgamF2YS51
dGlsLkNvbGxlY3Rpb247CiBpbXBvcnQgamF2YS51dGlsLkNvbXBhcmF0b3I7CiBpbXBvcnQgamF2
YS51dGlsLkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51
dGlsLkl0ZXJhdG9yOwotaW1wb3J0IGphdmEudXRpbC5MaXN0OwogaW1wb3J0IGphdmEudXRpbC5N
YXA7CiBpbXBvcnQgamF2YS51dGlsLlNldDsKIApAQCAtNzgsMTEgKzc2LDExIEBAIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5Tb3J0aW5nOwogICogPGR0PjE4
LjUuMSBJbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlPC9kdD4KICAqIDxkZD57QGxp
bmsgI2luZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoTWV0aG9kQmluZGluZywgVHlwZUJpbmRp
bmdbXSwgYm9vbGVhbil9LiBQcmVwYXJlIHRoZSBpbml0aWFsIHN0YXRlIGZvcgogICogCWluZmVy
ZW5jZSBvZiBhIGdlbmVyaWMgaW52b2NhdGlvbiAtIG5vIHRhcmdldCB0eXBlIHVzZWQgYXQgdGhp
cyBwb2ludC4KLSAqICBOZWVkIHRvIGNhbGwge0BsaW5rICNzb2x2ZSgpfSBhZnRlcndhcmRzIHRv
IHByb2R1Y2UgdGhlIGludGVybWVkaWF0ZSByZXN1bHQuPGJyLz4KKyAqICBOZWVkIHRvIGNhbGwg
e0BsaW5rICNzb2x2ZShib29sZWFuKX0gd2l0aCB0cnVlIGFmdGVyd2FyZHMgdG8gcHJvZHVjZSB0
aGUgaW50ZXJtZWRpYXRlIHJlc3VsdC48YnIvPgogICogIENhbGxlZCBpbmRpcmVjdGx5IGZyb20g
e0BsaW5rIFNjb3BlI2ZpbmRNZXRob2QoUmVmZXJlbmNlQmluZGluZywgY2hhcltdLCBUeXBlQmlu
ZGluZ1tdLCBJbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbil9IGV0IGFsCiAgKiAgdG8gc2VsZWN0IGFw
cGxpY2FibGUgbWV0aG9kcyBpbnRvIG92ZXJsb2FkIHJlc29sdXRpb24uPC9kZD4KICAqIDxkdD4x
OC41LjIgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZTwvZHQ+Ci0gKiA8ZGQ+e0BsaW5rIEluZmVy
ZW5jZUNvbnRleHQxOCNpbmZlckludm9jYXRpb25UeXBlKEJvdW5kU2V0LCBUeXBlQmluZGluZywg
SW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcpfS4gQWZ0ZXIgYQorICogPGRkPntAbGluayBJ
bmZlcmVuY2VDb250ZXh0MTgjaW5mZXJJbnZvY2F0aW9uVHlwZShUeXBlQmluZGluZywgSW52b2Nh
dGlvblNpdGUsIE1ldGhvZEJpbmRpbmcpfS4gQWZ0ZXIgYQogICogCW1vc3Qgc3BlY2lmaWMgbWV0
aG9kIGhhcyBiZWVuIHBpY2tlZCwgYW5kIGdpdmVuIGEgdGFyZ2V0IHR5cGUgZGV0ZXJtaW5lIHRo
ZSBmaW5hbCBnZW5lcmljIGluc3RhbnRpYXRpb24uCiAgKiAgQXMgbG9uZyBhcyBhIHRhcmdldCB0
eXBlIGlzIHN0aWxsIHVuYXZhaWxhYmxlIHRoaXMgcGhhc2Uga2VlcHMgZ2V0dGluZyBkZWZlcnJl
ZC48L2JyPgogICogIERpZmZlcmVudCB3cmFwcGVycyBleGlzdCBmb3IgdGhlIGNvbnZlbmllbmNl
IG9mIGRpZmZlcmVudCBjYWxsZXJzLjwvZGQ+CkBAIC0xNTIsMTIgKzE1MCwxNCBAQCBwdWJsaWMg
Y2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBCSU5E
SU5HU19VUERBVEVEID0gMzsKIAkKIAkvKiogU2lnbmFscyB3aGV0aGVyIGFueSB0eXBlIGNvbXBh
dGliaWxpdHkgbWFrZXMgdXNlIG9mIHVuY2hlY2tlZCBjb252ZXJzaW9uLiAqLwotCXB1YmxpYyBM
aXN0PENvbnN0cmFpbnRGb3JtdWxhPiBjb25zdHJhaW50c1dpdGhVbmNoZWNrZWRDb252ZXJzaW9u
OwotCisJcHVibGljIGJvb2xlYW4gdXNlc1VuY2hlY2tlZENvbnZlcnNpb247CisJcHVibGljIElu
ZmVyZW5jZUNvbnRleHQxOCBvdXRlckNvbnRleHQ7CiAJU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52
aXJvbm1lbnQgZW52aXJvbm1lbnQ7CiAJUmVmZXJlbmNlQmluZGluZyBvYmplY3Q7IC8vIGphdmEu
bGFuZy5PYmplY3QKKwlwdWJsaWMgQm91bmRTZXQgYjI7CiAJCisJcHVibGljIHN0YXRpYyBmaW5h
bCBpbnQgQ0hFQ0tfVU5LTk9XTiA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tf
U1RSSUNUID0gMTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19MT09TRSA9IDI7CiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfVkFSQVJHID0gMzsKQEAgLTE2NywxMSArMTY3
LDEzIEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQlFeHByZXNzaW9uW10g
aW52b2NhdGlvbkFyZ3VtZW50czsKIAkJSW5mZXJlbmNlVmFyaWFibGVbXSBpbmZlcmVuY2VWYXJp
YWJsZXM7CiAJCWludCBpbmZlcmVuY2VLaW5kOwotCQlTdXNwZW5kZWRJbmZlcmVuY2VSZWNvcmQo
SW52b2NhdGlvblNpdGUgc2l0ZSwgRXhwcmVzc2lvbltdIGludm9jYXRpb25Bcmd1bWVudHMsIElu
ZmVyZW5jZVZhcmlhYmxlW10gaW5mZXJlbmNlVmFyaWFibGVzLCBpbnQgaW5mZXJlbmNlS2luZCkg
eworCQlib29sZWFuIHVzZXNVbmNoZWNrZWRDb252ZXJzaW9uOworCQlTdXNwZW5kZWRJbmZlcmVu
Y2VSZWNvcmQoSW52b2NhdGlvblNpdGUgc2l0ZSwgRXhwcmVzc2lvbltdIGludm9jYXRpb25Bcmd1
bWVudHMsIEluZmVyZW5jZVZhcmlhYmxlW10gaW5mZXJlbmNlVmFyaWFibGVzLCBpbnQgaW5mZXJl
bmNlS2luZCwgYm9vbGVhbiB1c2VzVW5jaGVja2VkQ29udmVyc2lvbikgewogCQkJdGhpcy5zaXRl
ID0gc2l0ZTsKIAkJCXRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9IGludm9jYXRpb25Bcmd1bWVu
dHM7CiAJCQl0aGlzLmluZmVyZW5jZVZhcmlhYmxlcyA9IGluZmVyZW5jZVZhcmlhYmxlczsKIAkJ
CXRoaXMuaW5mZXJlbmNlS2luZCA9IGluZmVyZW5jZUtpbmQ7CisJCQl0aGlzLnVzZXNVbmNoZWNr
ZWRDb252ZXJzaW9uID0gdXNlc1VuY2hlY2tlZENvbnZlcnNpb247CiAJCX0KIAl9CiAJCkBAIC0y
MjksNyArMjMxLDYgQEAgcHVibGljIGNsYXNzIEluZmVyZW5jZUNvbnRleHQxOCB7CiAKIAkvKiog
SkxTIDE4LjUuMTogY29tcHV0ZSBib3VuZHMgZnJvbSBmb3JtYWwgYW5kIGFjdHVhbCBwYXJhbWV0
ZXJzLiAqLwogCXB1YmxpYyB2b2lkIGNyZWF0ZUluaXRpYWxDb25zdHJhaW50c0ZvclBhcmFtZXRl
cnMoVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzLCBib29sZWFuIGNoZWNrVmFyYXJnLCBUeXBlQmlu
ZGluZyB2YXJBcmdzVHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBkaXNj
cmltaW5hdGUgc3RyaWN0IHZzLiBsb29zZSBpbnZvY2F0aW9ucwogCQlpZiAodGhpcy5pbnZvY2F0
aW9uQXJndW1lbnRzID09IG51bGwpCiAJCQlyZXR1cm47CiAJCWludCBsZW4gPSBjaGVja1ZhcmFy
ZyA/IHBhcmFtZXRlcnMubGVuZ3RoIC0gMSA6IE1hdGgubWluKHBhcmFtZXRlcnMubGVuZ3RoLCB0
aGlzLmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoKTsKQEAgLTMzMSwxNyArMzMyLDE0IEBAIHB1
YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCX0KIAogCS8qKiBKTFMgMTguNS4yIElu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgCi0JICogQHBhcmFtIGIxICJ0aGUgYm91bmQgc2V0IHBy
b2R1Y2VkIGJ5IHJlZHVjdGlvbiBpbiBvcmRlciB0byBkZW1vbnN0cmF0ZSB0aGF0IG0gaXMgYXBw
bGljYWJsZSBpbiAxOC41LjEiCiAJICovCi0JcHVibGljIEJvdW5kU2V0IGluZmVySW52b2NhdGlv
blR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52b2NhdGlvblNp
dGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQotCQkJdGhyb3dzIEluZmVy
ZW5jZUZhaWx1cmVFeGNlcHRpb24gCisJcHVibGljIEJvdW5kU2V0IGluZmVySW52b2NhdGlvblR5
cGUoVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0
ZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9u
IAogCXsKIAkJLy8gbm90IEpMUzogc2ltcGx5IGVuc3VyZSB0aGF0IG51bGwgaGludHMgZnJvbSB0
aGUgcmV0dXJuIHR5cGUgaGF2ZSBiZWVuIHNlZW4gZXZlbiBpbiBzdGFuZGFsb25lIGNvbnRleHRz
OgogCQlpZiAoZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgbWV0aG9kLnJldHVyblR5cGUgIT0gbnVs
bCkKIAkJCXN1YnN0aXR1dGUobWV0aG9kLnJldHVyblR5cGUpOyAvLyByZXN1bHQgaXMgaWdub3Jl
LCB0aGUgb25seSBlZmZlY3QgaXMgb24gSW5mZXJlbmNlVmFyaWFibGUubnVsbEhpbnRzCi0JCS8v
Ci0JCUJvdW5kU2V0IHByZXZpb3VzID0gdGhpcy5jdXJyZW50Qm91bmRzLmNvcHkoKTsKLQkJdGhp
cy5jdXJyZW50Qm91bmRzID0gYjE7CisJCQorCQl0aGlzLmN1cnJlbnRCb3VuZHMgPSB0aGlzLmIy
LmNvcHkoKTsKIAkJdHJ5IHsKIAkJCS8vIGJ1bGxldHMgMSYyOiBkZWZpbml0aW9ucyBvbmx5Lgog
CQkJaWYgKGV4cGVjdGVkVHlwZSAhPSBudWxsCkBAIC0zOTcsMTEgKzM5NSw5IEBAIHB1YmxpYyBj
bGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQkJLy8gNi4gYnVsbGV0OiBzb2x2ZQogCQkJQm91
bmRTZXQgc29sdXRpb24gPSBzb2x2ZSgpOwogCQkJaWYgKHNvbHV0aW9uID09IG51bGwgfHwgIWlz
UmVzb2x2ZWQoc29sdXRpb24pKSB7Ci0JCQkJdGhpcy5jdXJyZW50Qm91bmRzID0gcHJldmlvdXM7
IC8vIGRvbid0IGxldCBib3VuZHMgZnJvbSB1bnN1Y2Nlc3NmdWwgYXR0ZW1wdCBsZWFrIGludG8g
c3Vic2VxdWVudCBhdHRlbXB0cworCQkJCXRoaXMuY3VycmVudEJvdW5kcyA9IHRoaXMuYjI7IC8v
IGRvbid0IGxldCBib3VuZHMgZnJvbSB1bnN1Y2Nlc3NmdWwgYXR0ZW1wdCBsZWFrIGludG8gc3Vi
c2VxdWVudCBhdHRlbXB0cwogCQkJCXJldHVybiBudWxsOwogCQkJfQotCQkJLy8gd2UncmUgZG9u
ZSwgc3RhcnQgcmVwb3J0aW5nOgotCQkJcmVwb3J0VW5jaGVja2VkQ29udmVyc2lvbnMoc29sdXRp
b24pOwogCQkJcmV0dXJuIHRoaXMuY3VycmVudEJvdW5kcyA9IHNvbHV0aW9uOyAvLyB0aGlzIGlz
IGZpbmFsLCBrZWVwIHRoZSByZXN1bHQ6CiAJCX0gZmluYWxseSB7CiAJCQl0aGlzLnN0ZXBDb21w
bGV0ZWQgPSBUWVBFX0lORkVSUkVEOwpAQCAtNDM4LDExICs0MzQsNiBAQCBwdWJsaWMgY2xhc3Mg
SW5mZXJlbmNlQ29udGV4dDE4IHsKIAogCXByaXZhdGUgYm9vbGVhbiBhZGRDb25zdHJhaW50c1Rv
Q19PbmVFeHByKEV4cHJlc3Npb24gZXhwcmksIFNldDxDb25zdHJhaW50Rm9ybXVsYT4gYywgVHlw
ZUJpbmRpbmcgZnNpLCBUeXBlQmluZGluZyBzdWJzdEYsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBi
b29sZWFuIGludGVybGVhdmVkKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJ
CQotCQkvLyBTZWUgaHR0cHM6Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQvYnJvd3NlL0pESy04MDUy
MzI1IGZvciBleGNsdXNpb24gb2YgcG9seSBleHByZXNzaW9ucyB0YXJnZXRpbmcgcHJvcGVyIHR5
cGVzLiBDRUYucmVkdWNlIHZhbGlkYXRlcyAKLQkJLy8gdGhhdCB0aGV5IGFyZSBjb21wYXRpYmxl
IGluIGEgbG9vc2UgaW52b2NhdGlvbiBjb250ZXh0IGFnYWluc3QgdGhlIHRhcmdldCB0eXBlLiBU
aGV5IGNvbnRyaWJ1dGUgbm90aGluZyBmdXJ0aGVyIHRvIHNvbHZpbmcgdGhlIGZvcm11bGFzLgot
CQlpZiAoc3Vic3RGLmlzUHJvcGVyVHlwZSh0cnVlKSkKLQkJCXJldHVybiB0cnVlOwotCQkKIAkJ
Ly8gRm9yIGFsbCBpICgxIOKJpCBpIOKJpCBrKSwgaWYgZWkgaXMgbm90IHBlcnRpbmVudCB0byBh
cHBsaWNhYmlsaXR5LCB0aGUgc2V0IGNvbnRhaW5zIOKfqGVpIOKGkiDOuCBGaeKfqS4KIAkJaWYg
KCFleHByaS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShmc2ksIG1ldGhvZCkpIHsKIAkJCWMu
YWRkKG5ldyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEoZXhwcmksIHN1YnN0RiwgUmVkdWN0
aW9uUmVzdWx0LkNPTVBBVElCTEUsIEFSR1VNRU5UX0NPTlNUUkFJTlRTX0FSRV9TT0ZUKSk7CkBA
IC00NzEsNiArNDYyLDEwIEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQkJ
CX0KIAkJCX0KIAkJfSBlbHNlIGlmIChleHByaSBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgZXhw
cmkuaXNQb2x5RXhwcmVzc2lvbigpKSB7CisJCQkKKwkJCWlmIChzdWJzdEYuaXNQcm9wZXJUeXBl
KHRydWUpKSAvLyBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93c2UvSkRLLTgwNTIz
MjUgCisJCQkJcmV0dXJuIHRydWU7CisJCQkKIAkJCUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJ
bnZvY2F0aW9uKSBleHByaTsKIAkJCU1ldGhvZEJpbmRpbmcgaW5uZXJNZXRob2QgPSBpbnZvY2F0
aW9uLmJpbmRpbmcoc3Vic3RGLCB0aGlzLnNjb3BlKTsKIAkJCWlmIChpbm5lck1ldGhvZCA9PSBu
dWxsKQpAQCAtNDkxLDYgKzQ4Niw4IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTgg
ewogCQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGVudGVyUG9s
eUludm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7CiAJCQkJdHJ5
IHsKIAkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gYXBwbGljYWJpbGl0eUtpbmQ7CisJCQkJCWlm
IChpbm5lckNvbnRleHQgIT0gbnVsbCkKKwkJCQkJCWlubmVyQ29udGV4dC5vdXRlckNvbnRleHQg
PSB0aGlzOwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHNoYWxsb3dNZXRob2Qs
IGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3RvcigpKTsKIAkJCQkJaWYg
KCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52b2NhdGlvblR5cGUodGhp
cywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKIAkJCQkJCXJldHVybiBmYWxz
ZTsKQEAgLTc4MiwxNSArNzc5LDIxIEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTgg
ewogCSAqIEByZXR1cm4gYSBib3VuZCBzZXQgcmVwcmVzZW50aW5nIHRoZSBzb2x1dGlvbiwgb3Ig
bnVsbCBpZiBpbmZlcmVuY2UgZmFpbGVkCiAJICogQHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhj
ZXB0aW9uIGEgY29tcGlsZSBlcnJvciBoYXMgYmVlbiBkZXRlY3RlZCBkdXJpbmcgaW5mZXJlbmNl
CiAJICovCi0JcHVibGljIC8qQE51bGxhYmxlKi8gQm91bmRTZXQgc29sdmUoKSB0aHJvd3MgSW5m
ZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CisJcHVibGljIC8qQE51bGxhYmxlKi8gQm91bmRTZXQg
c29sdmUoYm9vbGVhbiBpbmZlcnJpbmdBcHBsaWNhYmlsaXR5KSB0aHJvd3MgSW5mZXJlbmNlRmFp
bHVyZUV4Y2VwdGlvbiB7CiAJCWlmICghcmVkdWNlKCkpCiAJCQlyZXR1cm4gbnVsbDsKIAkJaWYg
KCF0aGlzLmN1cnJlbnRCb3VuZHMuaW5jb3Jwb3JhdGUodGhpcykpCiAJCQlyZXR1cm4gbnVsbDsK
KwkJaWYgKGluZmVycmluZ0FwcGxpY2FiaWxpdHkpCisJCQl0aGlzLmIyID0gdGhpcy5jdXJyZW50
Qm91bmRzLmNvcHkoKTsgLy8gUHJlc2VydmUgdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdp
dGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkgZm9yIGxhdGVyIHVzZSBpbiBpbnZvY2F0aW9uIHR5
cGUgaW5mZXJlbmNlLgogCiAJCXJldHVybiByZXNvbHZlKHRoaXMuaW5mZXJlbmNlVmFyaWFibGVz
KTsKIAl9CiAJCisJcHVibGljIC8qQE51bGxhYmxlKi8gQm91bmRTZXQgc29sdmUoKSB0aHJvd3Mg
SW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CisJCXJldHVybiBzb2x2ZShmYWxzZSk7CisJfQor
CQogCXB1YmxpYyAvKkBOdWxsYWJsZSovIEJvdW5kU2V0IHNvbHZlKEluZmVyZW5jZVZhcmlhYmxl
W10gdG9SZXNvbHZlKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCWlmICgh
cmVkdWNlKCkpCiAJCQlyZXR1cm4gbnVsbDsKQEAgLTgwNSwxMSArODA4LDE0IEBAIHB1YmxpYyBj
bGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCSAqIEB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4
Y2VwdGlvbiAKIAkgKi8KIAlwcml2YXRlIGJvb2xlYW4gcmVkdWNlKCkgdGhyb3dzIEluZmVyZW5j
ZUZhaWx1cmVFeGNlcHRpb24gewotCQlpZiAodGhpcy5pbml0aWFsQ29uc3RyYWludHMgIT0gbnVs
bCkgewotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCB0aGlzLmluaXRpYWxDb25zdHJhaW50cy5sZW5n
dGg7IGkrKykgewotCQkJCWlmICghdGhpcy5jdXJyZW50Qm91bmRzLnJlZHVjZU9uZUNvbnN0cmFp
bnQodGhpcywgdGhpcy5pbml0aWFsQ29uc3RyYWludHNbaV0pKQotCQkJCQlyZXR1cm4gZmFsc2U7
Ci0JCQl9CisJCS8vIENhdXRpb246IFRoaXMgY2FuIGJlIHJlZW50ZXJlZCByZWN1cnNpdmVseSBl
dmVuIGFzIGFuIGVhcmxpZXIgY2FsbCBpcyBtdW5jaGluZyB0aHJvdWdoIHRoZSBjb25zdHJhaW50
cyAhCisJCWZvciAoaW50IGkgPSAwOyB0aGlzLmluaXRpYWxDb25zdHJhaW50cyAhPSBudWxsICYm
IGkgPCB0aGlzLmluaXRpYWxDb25zdHJhaW50cy5sZW5ndGg7IGkrKykgeworCQkJZmluYWwgQ29u
c3RyYWludEZvcm11bGEgY3VycmVudENvbnN0cmFpbnQgPSB0aGlzLmluaXRpYWxDb25zdHJhaW50
c1tpXTsKKwkJCWlmIChjdXJyZW50Q29uc3RyYWludCA9PSBudWxsKQorCQkJCWNvbnRpbnVlOwor
CQkJdGhpcy5pbml0aWFsQ29uc3RyYWludHNbaV0gPSBudWxsOworCQkJaWYgKCF0aGlzLmN1cnJl
bnRCb3VuZHMucmVkdWNlT25lQ29uc3RyYWludCh0aGlzLCBjdXJyZW50Q29uc3RyYWludCkpCisJ
CQkJcmV0dXJuIGZhbHNlOwogCQl9CiAJCXRoaXMuaW5pdGlhbENvbnN0cmFpbnRzID0gbnVsbDsK
IAkJcmV0dXJuIHRydWU7CkBAIC0xMzA4LDE5ICsxMzE0LDIwIEBAIHB1YmxpYyBjbGFzcyBJbmZl
cmVuY2VDb250ZXh0MTggewogCX0KIAkKIAlwdWJsaWMgU3VzcGVuZGVkSW5mZXJlbmNlUmVjb3Jk
IGVudGVyUG9seUludm9jYXRpb24oSW52b2NhdGlvblNpdGUgaW52b2NhdGlvbiwgRXhwcmVzc2lv
bltdIGlubmVyQXJndW1lbnRzKSB7Ci0JCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCByZWNvcmQg
PSBuZXcgU3VzcGVuZGVkSW5mZXJlbmNlUmVjb3JkKHRoaXMuY3VycmVudEludm9jYXRpb24sIHRo
aXMuaW52b2NhdGlvbkFyZ3VtZW50cywgdGhpcy5pbmZlcmVuY2VWYXJpYWJsZXMsIHRoaXMuaW5m
ZXJlbmNlS2luZCk7CisJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCByZWNvcmQgPSBuZXcgU3Vz
cGVuZGVkSW5mZXJlbmNlUmVjb3JkKHRoaXMuY3VycmVudEludm9jYXRpb24sIHRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cywgdGhpcy5pbmZlcmVuY2VWYXJpYWJsZXMsIHRoaXMuaW5mZXJlbmNlS2lu
ZCwgdGhpcy51c2VzVW5jaGVja2VkQ29udmVyc2lvbik7CiAJCXRoaXMuaW5mZXJlbmNlVmFyaWFi
bGVzID0gbnVsbDsKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7
CiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSBpbnZvY2F0aW9uOwotCQkKKwkJdGhpcy51c2Vz
VW5jaGVja2VkQ29udmVyc2lvbiA9IGZhbHNlOwogCQlyZXR1cm4gcmVjb3JkOwogCX0KIAkKIAlw
dWJsaWMgU3VzcGVuZGVkSW5mZXJlbmNlUmVjb3JkIGVudGVyTGFtYmRhKExhbWJkYUV4cHJlc3Np
b24gbGFtYmRhKSB7Ci0JCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCByZWNvcmQgPSBuZXcgU3Vz
cGVuZGVkSW5mZXJlbmNlUmVjb3JkKHRoaXMuY3VycmVudEludm9jYXRpb24sIHRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cywgdGhpcy5pbmZlcmVuY2VWYXJpYWJsZXMsIHRoaXMuaW5mZXJlbmNlS2lu
ZCk7CisJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCByZWNvcmQgPSBuZXcgU3VzcGVuZGVkSW5m
ZXJlbmNlUmVjb3JkKHRoaXMuY3VycmVudEludm9jYXRpb24sIHRoaXMuaW52b2NhdGlvbkFyZ3Vt
ZW50cywgdGhpcy5pbmZlcmVuY2VWYXJpYWJsZXMsIHRoaXMuaW5mZXJlbmNlS2luZCwgdGhpcy51
c2VzVW5jaGVja2VkQ29udmVyc2lvbik7CiAJCXRoaXMuaW5mZXJlbmNlVmFyaWFibGVzID0gbnVs
bDsKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzID0gbnVsbDsKIAkJdGhpcy5jdXJyZW50SW52
b2NhdGlvbiA9IG51bGw7CisJCXRoaXMudXNlc1VuY2hlY2tlZENvbnZlcnNpb24gPSBmYWxzZTsK
IAkJcmV0dXJuIHJlY29yZDsKIAl9CiAKQEAgLTEzNDAsMjMgKzEzNDcsNyBAQCBwdWJsaWMgY2xh
c3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAkJdGhpcy5jdXJyZW50SW52b2NhdGlvbiA9IHJlY29y
ZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPSByZWNvcmQuaW52b2NhdGlvbkFy
Z3VtZW50czsKIAkJdGhpcy5pbmZlcmVuY2VLaW5kID0gcmVjb3JkLmluZmVyZW5jZUtpbmQ7Ci0J
fQotCi0JcHJpdmF0ZSBTdWJzdGl0dXRpb24gZ2V0UmVzdWx0U3Vic3RpdHV0aW9uKGZpbmFsIEJv
dW5kU2V0IHJlc3VsdCkgewotCQlyZXR1cm4gbmV3IFN1YnN0aXR1dGlvbigpIHsKLQkJCXB1Ymxp
YyBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCgpIHsgCi0JCQkJcmV0dXJuIEluZmVyZW5j
ZUNvbnRleHQxOC50aGlzLmVudmlyb25tZW50OwotCQkJfQotCQkJcHVibGljIGJvb2xlYW4gaXNS
YXdTdWJzdGl0dXRpb24oKSB7Ci0JCQkJcmV0dXJuIGZhbHNlOwotCQkJfQotCQkJcHVibGljIFR5
cGVCaW5kaW5nIHN1YnN0aXR1dGUoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUpIHsK
LQkJCQlpZiAodHlwZVZhcmlhYmxlIGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpIHsKLQkJ
CQkJcmV0dXJuIHJlc3VsdC5nZXRJbnN0YW50aWF0aW9uKChJbmZlcmVuY2VWYXJpYWJsZSkgdHlw
ZVZhcmlhYmxlLCBJbmZlcmVuY2VDb250ZXh0MTgudGhpcy5lbnZpcm9ubWVudCk7Ci0JCQkJfQot
CQkJCXJldHVybiB0eXBlVmFyaWFibGU7Ci0JCQl9Ci0JCX07CisJCXRoaXMudXNlc1VuY2hlY2tl
ZENvbnZlcnNpb24gPSByZWNvcmQudXNlc1VuY2hlY2tlZENvbnZlcnNpb247CiAJfQogCiAJcHVi
bGljIGJvb2xlYW4gaXNWYXJBcmdzKCkgewpAQCAtMTQ2Nyw0MiArMTQ1OCw2IEBAIHB1YmxpYyBj
bGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQlyZXR1cm4gYXByaW1lOwogCX0KIAotCS8qKiBS
ZWNvcmQgdGhlIGZhY3QgdGhhdCB0aGUgZ2l2ZW4gY29uc3RyYWludCByZXF1aXJlcyB1bmNoZWNr
ZWQgY29udmVyc2lvbi4gKi8KLQlwdWJsaWMgdm9pZCByZWNvcmRVbmNoZWNrZWRDb252ZXJzaW9u
KENvbnN0cmFpbnRUeXBlRm9ybXVsYSBjb25zdHJhaW50KSB7Ci0JCWlmICh0aGlzLmNvbnN0cmFp
bnRzV2l0aFVuY2hlY2tlZENvbnZlcnNpb24gPT0gbnVsbCkKLQkJCXRoaXMuY29uc3RyYWludHNX
aXRoVW5jaGVja2VkQ29udmVyc2lvbiA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+
KCk7Ci0JCXRoaXMuY29uc3RyYWludHNXaXRoVW5jaGVja2VkQ29udmVyc2lvbi5hZGQoY29uc3Ry
YWludCk7Ci0JfQotCQotCXZvaWQgcmVwb3J0VW5jaGVja2VkQ29udmVyc2lvbnMoQm91bmRTZXQg
c29sdXRpb24pIHsKLQkJaWYgKHRoaXMuY29uc3RyYWludHNXaXRoVW5jaGVja2VkQ29udmVyc2lv
biAhPSBudWxsKSB7Ci0JCQlpbnQgbGVuID0gdGhpcy5jb25zdHJhaW50c1dpdGhVbmNoZWNrZWRD
b252ZXJzaW9uLnNpemUoKTsKLQkJCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRpb24gPSBnZXRSZXN1
bHRTdWJzdGl0dXRpb24oc29sdXRpb24pOwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkr
KykgewotCQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBjb25zdHJhaW50ID0gKENvbnN0cmFpbnRU
eXBlRm9ybXVsYSkgdGhpcy5jb25zdHJhaW50c1dpdGhVbmNoZWNrZWRDb252ZXJzaW9uLmdldChp
KTsKLQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBjb25zdHJhaW50LnJpZ2h0OwotCQkJ
CVR5cGVCaW5kaW5nIHByb3ZpZGVkVHlwZSA9IGNvbnN0cmFpbnQubGVmdDsKLQkJCQlpZiAoIWV4
cGVjdGVkVHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCQkJZXhwZWN0ZWRUeXBlID0gU2Nv
cGUuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIGV4cGVjdGVkVHlwZSk7Ci0JCQkJfQotCQkJCWlm
ICghcHJvdmlkZWRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkgewotCQkJCQlwcm92aWRlZFR5cGUg
PSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgcHJvdmlkZWRUeXBlKTsKLQkJCQl9Ci0v
KiBGSVhNRShzdGVwaGFuKTogZW5hYmxlIG9uY2Ugd2Ugc29sdmVkOgotICAgICAgICAgICAgICAg
ICAgICAoYSkgYXZvaWQgZHVwbGljYXRpb24gd2l0aCB0cmFkaXRpb25hbCByZXBvcnRpbmcKLSAg
ICAgICAgICAgICAgICAgICAgKGIpIGltcHJvdmUgbG9jYXRpb24gdG8gcmVwb3J0IGFnYWluc3QK
LQkJCQlpZiAodGhpcy5jdXJyZW50SW52b2NhdGlvbiBpbnN0YW5jZW9mIEV4cHJlc3Npb24pCi0J
CQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5zYWZlVHlwZUNvbnZlcnNpb24oKEV4
cHJlc3Npb24pIHRoaXMuY3VycmVudEludm9jYXRpb24sIHByb3ZpZGVkVHlwZSwgZXhwZWN0ZWRU
eXBlKTsKLSAqLwotCQkJfQotCQl9Ci0JfQotCQotCS8qKiBGb3IgdXNlIGJ5IDE1LjEyLjIuNiBN
ZXRob2QgSW52b2NhdGlvbiBUeXBlICovCi0JcHVibGljIGJvb2xlYW4gdXNlc1VuY2hlY2tlZENv
bnZlcnNpb24oKSB7Ci0JCXJldHVybiB0aGlzLmNvbnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZl
cnNpb24gIT0gbnVsbDsKLQl9Ci0KIAkvLyBJTlRFUklNOiBpbmZyYXN0cnVjdHVyZSBmb3IgZGV0
ZWN0aW5nIGZhaWx1cmVzIGNhdXNlZCBieSBzcGVjaWZpYyBrbm93biBpbmNvbXBsZXRlbmVzczoK
IAlwdWJsaWMgc3RhdGljIHZvaWQgbWlzc2luZ0ltcGxlbWVudGF0aW9uKFN0cmluZyBtc2cpIHsK
IAkJdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uKG1zZyk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpp
bmRleCBmMzcwM2U1Li5hMzNjN2ZkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTE2MSwxMSArMTYxLDI1IEBAIHB1
YmxpYyBjbGFzcyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluCiAJCQogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CiAJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0
eXBlVmFyaWFibGVzID0gb3JpZ2luYWxNZXRob2QudHlwZVZhcmlhYmxlczsKLQkJSW5mZXJlbmNl
Q29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKKwkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4
ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKIAkJVHlwZUJp
bmRpbmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2QucGFyYW1ldGVyczsKLQkJaW5mQ3R4
MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOwogCQlDb21w
aWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJ
CWJvb2xlYW4gaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZhbHNlOworCQlib29sZWFuIHJlcXVp
cmVCb3hpbmcgPSBmYWxzZTsKKwkJCisJCS8vIFNlZSBpZiB3ZSBzaG91bGQgc3RhcnQgaW4gbG9v
c2UgaW5mZXJlbmNlIG1vZGUuCisJCVR5cGVCaW5kaW5nIFtdIGFyZ3VtZW50c0NvcHkgPSBuZXcg
VHlwZUJpbmRpbmdbYXJndW1lbnRzLmxlbmd0aF07CisJCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbWV0ZXJzTGVuZ3RoID0gcGFyYW1ldGVycy5sZW5ndGgg
OyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlciA9IGkgPCBwYXJh
bWV0ZXJzTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFtZXRlcnNbcGFyYW1ldGVyc0xlbmd0
aCAtIDFdOworCQkJZmluYWwgVHlwZUJpbmRpbmcgYXJndW1lbnQgPSBhcmd1bWVudHNbaV07CisJ
CQlpZiAoYXJndW1lbnQuaXNQcmltaXRpdmVUeXBlKCkgIT0gcGFyYW1ldGVyLmlzUHJpbWl0aXZl
VHlwZSgpKSB7IC8vIFNjb3BlLmNDTSBpbmNvcnJlY3RseSBidXQgaGFybWxlc3NseSB1c2VzIGlz
QmFzZVR5cGUgd2hpY2ggYW5zd2VycyB0cnVlIGZvciBudWxsLgorCQkJCWFyZ3VtZW50c0NvcHlb
aV0gPSBzY29wZS5lbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdUeXBlKGFyZ3VtZW50KTsKKwkJ
CQlyZXF1aXJlQm94aW5nID0gdHJ1ZTsgLy8gY2FuJ3QgYmUgc3RyaWN0IG1vZGUsIG5lZWRzIGF0
IGxlYXN0IGxvb3NlLgorCQkJfSBlbHNlIHsKKwkJCQlhcmd1bWVudHNDb3B5W2ldID0gYXJndW1l
bnQ7CisJCQl9CisJCX0KKwkJYXJndW1lbnRzID0gYXJndW1lbnRzQ29weTsgLy8gZWl0aGVyIHdh
eSwgdGhpcyBhbGxvd3MgdGhlIGVuZ2luZSB0byB1cGRhdGUgYXJndW1lbnRzIHdpdGhvdXQgaGFy
bWluZyB0aGUgY2FsbGVycy4gCiAJCQogCQl0cnkgewogCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxS
ZXN1bHQgPSBudWxsOwpAQCAtMTc0LDIzICsxODgsMjMgQEAgcHVibGljIGNsYXNzIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW4KIAkJCWZpbmFsIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9IGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgRXhwcmVzc2lvbiAmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9s
eUV4cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOwogCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBpc1Bv
bHlFeHByZXNzaW9uICYmIG9yaWdpbmFsTWV0aG9kLmlzQ29uc3RydWN0b3IoKTsKIAkJCWlmIChh
cmd1bWVudHMubGVuZ3RoID09IHBhcmFtZXRlcnMubGVuZ3RoKSB7Ci0JCQkJaW5mQ3R4MTguaW5m
ZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFs
aWRhdGUgaWYgMiBwaGFzZSBjaGVja2luZyAoc3RyaWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZm
aWNpZW50LgorCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSByZXF1aXJlQm94aW5nID8gSW5m
ZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFIDogSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1NU
UklDVDsgLy8gZW5naW5lIG1heSBzdGlsbCBzbGlwIGludG8gbG9vc2UgbW9kZSBhbmQgYWRqdXN0
IGxldmVsLgogCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2lu
YWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKLQkJCQlyZXN1bHQgPSBpbmZDdHgxOC5z
b2x2ZSgpOworCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKHRydWUpOwogCQkJfQogCQkJaWYg
KHJlc3VsdCA9PSBudWxsICYmIG9yaWdpbmFsTWV0aG9kLmlzVmFyYXJncygpKSB7CiAJCQkJLy8g
Y2hlY2sgZm9yIHZhcmlhYmxlLWFyaXR5IGFwcGxpY2FiaWxpdHkKIAkJCQlpbmZDdHgxOCA9IGlu
dm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIK
IAkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZB
UkFSRzsKIAkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFs
TWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7Ci0JCQkJcmVzdWx0ID0gaW5mQ3R4MTguc29s
dmUoKTsKKwkJCQlyZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSh0cnVlKTsKIAkJCX0KIAkJCWlmIChy
ZXN1bHQgPT0gbnVsbCkKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCWlmIChpbmZDdHgxOC5pc1Jlc29s
dmVkKHJlc3VsdCkpIHsKIAkJCQlpbmZDdHgxOC5zdGVwQ29tcGxldGVkID0gSW5mZXJlbmNlQ29u
dGV4dDE4LkFQUExJQ0FCSUxJVFlfSU5GRVJSRUQ7CiAJCQkJaWYgKGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikKLQkJCQkJKChSZWZlcmVuY2VFeHByZXNzaW9u
KSBpbnZvY2F0aW9uU2l0ZSkuaW5mZXJlbmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtpbmQ7
ICAgLy8gQ0hFQ0sKKwkJCQkJKChSZWZlcmVuY2VFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0ZSku
aW5mZXJlbmNlS2luZCA9IGluZkN0eDE4LmluZmVyZW5jZUtpbmQ7CiAJCQl9IGVsc2UgewogCQkJ
CXJldHVybiBudWxsOwogCQkJfQpAQCAtMjAwLDggKzIxNCw3IEBAIHB1YmxpYyBjbGFzcyBQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluCiAJCQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwgfHwgIWludm9jYXRpb25TaXRlLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewogCQkJCS8vIC0tLS0g
MTguNS4yIChJbnZvY2F0aW9uIHR5cGUpOiAtLS0tCiAJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBy
ZXN1bHQ7Ci0JCQkJcmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRo
ZSByZXN1bHQgYWZ0ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCi0J
CQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVk
VHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKKwkJCQlyZXN1bHQgPSBpbmZD
dHgxOC5pbmZlckludm9jYXRpb25UeXBlKGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNpdGUsIG9y
aWdpbmFsTWV0aG9kKTsKIAkJCQlpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gdHJ1ZTsKIAkJCQlo
YXNSZXR1cm5Qcm9ibGVtIHw9IHJlc3VsdCA9PSBudWxsOwogCQkJCWlmIChoYXNSZXR1cm5Qcm9i
bGVtKQpAQCAtMjE1LDcgKzIyOCw2IEBAIHB1YmxpYyBjbGFzcyBQYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluCiAJCQkJCWlm
IChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxseSB3b3JraW5nIGZyb20gdGhlIHByb3Zp
c2lvbmFsIHJlc3VsdD8KIAkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IGluZkN0
eDE4LmdldFJldHVyblByb2JsZW1NZXRob2RJZk5lZWRlZChleHBlY3RlZFR5cGUsIG1ldGhvZFN1
YnN0aXR1dGUpOwogCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0
aG9kQmluZGluZykgewotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOwogCQkJCQkJCXJl
dHVybiBwcm9ibGVtTWV0aG9kOwogCQkJCQkJfQogCQkJCQl9CkBAIC0yMjQsNyArMjM2LDYgQEAg
cHVibGljIGNsYXNzIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBh
cmFtZXRlcml6ZWRNZXRob2RCaW5kaW4KIAkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNo
ZWNrRm9yQ29udHJhZGl0aW9ucyhtZXRob2RTdWJzdGl0dXRlLCBpbnZvY2F0aW9uU2l0ZSwgc2Nv
cGUpOwogCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0aG9kU3Vic3RpdHV0
ZS5ib3VuZENoZWNrMTgoc2NvcGUsIGFyZ3VtZW50cyk7CiAJCQkJCQlpZiAocHJvYmxlbU1ldGhv
ZCAhPSBudWxsKSB7Ci0JCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CiAJCQkJCQkJcmV0
dXJuIHByb2JsZW1NZXRob2Q7CiAJCQkJCQl9CiAJCQkJCQlpbmZDdHgxOC5zb2x1dGlvbnNQZXJU
YXJnZXRUeXBlLnB1dChleHBlY3RlZFR5cGUsIG5ldyBTb2x1dGlvbihtZXRob2RTdWJzdGl0dXRl
LCByZXN1bHQpKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YQppbmRleCAzMTcwMGFmLi42NmVl
YTZiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCkBAIC0yMDYsNiArMjA2LDExIEBAIHB1
YmxpYyBjbGFzcyBSYXdUeXBlQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZyB7CiAJCXRoaXMuYXJndW1lbnRzID0gdHlwZUFyZ3VtZW50czsKIAl9CiAJCQorCUBPdmVycmlk
ZQorCXB1YmxpYyBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgY2FwdHVyZShTY29wZSBzY29wZSwg
aW50IHBvc2l0aW9uKSB7CisJCXJldHVybiB0aGlzOworCX0KKwkKIAlAT3ZlcnJpZGUgCiAJcHVi
bGljIFR5cGVCaW5kaW5nIHVuY2FwdHVyZShTY29wZSBzY29wZSkgewogCQlyZXR1cm4gdGhpczsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2Nv
cGUuamF2YQppbmRleCAzZjkxYzQ4Li45NzFhZDg2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC03MTMsMjAgKzcx
MywyMCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzMwNDM1LCBpbmZlcmVuY2Ugc2hvdWxk
IGtpY2sgaW4gb25seSBhdCBzb3VyY2UgMS41KwogCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5k
aW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7IC8vIGdlbmVyaWMgbWV0aG9kCiAJCQlUeXBlQmlu
ZGluZ1tdIG5ld0FyZ3MgPSBudWxsOwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7
IGkrKykgewotCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gaSA8IHBhcmFtTGVuZ3RoID8gcGFyYW1l
dGVyc1tpXSA6IHBhcmFtZXRlcnNbcGFyYW1MZW5ndGggLSAxXTsKLQkJCQlpZiAoYXJndW1lbnRz
W2ldLmlzQmFzZVR5cGUoKSAhPSBwYXJhbS5pc0Jhc2VUeXBlKCkpIHsKLQkJCQkJaWYgKG5ld0Fy
Z3MgPT0gbnVsbCkgewotCQkJCQkJbmV3QXJncyA9IG5ldyBUeXBlQmluZGluZ1thcmdMZW5ndGhd
OwotCQkJCQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVudHMsIDAsIG5ld0FyZ3MsIDAsIGFyZ0xl
bmd0aCk7CisJCQlpZiAoY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfOCB8fCBnZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIGZvciAx
LjgrIGluZmVycmVkIGNhbGxzLCB3ZSBkbyB0aGlzIGluc2lkZSBQR01CLmNDTTE4LgorCQkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgYXJnTGVuZ3RoOyBpKyspIHsKKwkJCQkJVHlwZUJpbmRpbmcgcGFy
YW0gPSBpIDwgcGFyYW1MZW5ndGggPyBwYXJhbWV0ZXJzW2ldIDogcGFyYW1ldGVyc1twYXJhbUxl
bmd0aCAtIDFdOworCQkJCQlpZiAoYXJndW1lbnRzW2ldLmlzQmFzZVR5cGUoKSAhPSBwYXJhbS5p
c0Jhc2VUeXBlKCkpIHsKKwkJCQkJCWlmIChuZXdBcmdzID09IG51bGwpIHsKKwkJCQkJCQluZXdB
cmdzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF07CisJCQkJCQkJU3lzdGVtLmFycmF5Y29w
eShhcmd1bWVudHMsIDAsIG5ld0FyZ3MsIDAsIGFyZ0xlbmd0aCk7CisJCQkJCQl9CisJCQkJCQlu
ZXdBcmdzW2ldID0gZW52aXJvbm1lbnQoKS5jb21wdXRlQm94aW5nVHlwZShhcmd1bWVudHNbaV0p
OwogCQkJCQl9Ci0JCQkJCW5ld0FyZ3NbaV0gPSBlbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdU
eXBlKGFyZ3VtZW50c1tpXSk7CiAJCQkJfQogCQkJfQogCQkJaWYgKG5ld0FyZ3MgIT0gbnVsbCkK
IAkJCQlhcmd1bWVudHMgPSBuZXdBcmdzOwotCQkJZWxzZSAgLy8gZW5zdXJlIHRoYXQgY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxvdyBjYW4gdXBkYXRlIGFyZ3VtZW50cyB3aXRob3V0IGhh
cm1pbmcgb3VyIGNhbGxlcjogKFRPRE86IGFsd2F5cyBjb3B5IGJlZm9yZSB0aGUgbG9vcD8gb25s
eSBpbiAxLjg/KQotCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRzLCAwLCBhcmd1bWVudHM9
bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF0sIDAsIGFyZ0xlbmd0aCk7CiAJCQltZXRob2QgPSBQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
bWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2Qg
PT0gbnVsbCkgcmV0dXJuIG51bGw7IC8vIGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNW
YWxpZEJpbmRpbmcoKSkgcmV0dXJuIG1ldGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFr
aW5nIHByZWNlZGVuY2UKQEAgLTQyMzIsNyArNDIzMiw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFz
cyBTY29wZSB7CiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W3Zpc2libGVT
aXplXTsKIAkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwg
dmlzaWJsZVNpemU7IGkrKykKLQkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKSkgIT0gTk9U
X0NPTVBBVElCTEUpIHsKKwkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBhcmFtZXRl
ckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9u
U2l0ZSkpICE9IE5PVF9DT01QQVRJQkxFKSB7CiAJCQkJaWYgKGkgIT0gY29tcGF0aWJsZUNvdW50
KSB7CiAJCQkJCXZpc2libGVbY29tcGF0aWJsZUNvdW50XSA9IHZpc2libGVbaV07CiAJCQkJCWNv
bXBhdGliaWxpdHlMZXZlbHNbY29tcGF0aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlMZXZlbHNb
aV07CkBAIC00MjY1LDcgKzQyNjUsNiBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewog
CQkJCWludCBsZXZlbGogPSBjb21wYXRpYmlsaXR5TGV2ZWxzW2pdOwogCQkJCW5leHRLOiBmb3Ig
KGludCBrID0gMDsgayA8IHZpc2libGVTaXplOyBrKyspIHsKIAkJCQkJaWYgKGogPT0gaykgY29u
dGludWU7Ci0JCQkJCS8vIFRPRE8gZG8gd2Ugd2FudCB0byBjaGVjayBleGlzdGluZyBpbmZlcmVu
Y2UgY29udGV4dHMgd2hldGhlciB0aGV5IGNhbiB0ZWxsIHVzIGJldHRlciBhYm91dCB0aGUgdXNl
ZCBpbmZlcmVuY2VLaW5kPwogCQkJCQlpbnQgbGV2ZWxrID0gY29tcGF0aWJpbGl0eUxldmVsc1tr
XTsKIAkJCQkJaWYgKGxldmVsaiA+IC0xICYmIGxldmVsayA+IC0xICYmIGxldmVsaiAhPSBsZXZl
bGspIHsKIAkJCQkJCWlmIChsZXZlbGogPCBsZXZlbGspCkBAIC00NTc2LDYgKzQ1NzUsNTEgQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJfSB3aGlsZSAoc2NvcGUgIT0gbnVsbCk7
CiAJCXJldHVybiBsYXN0TWV0aG9kU2NvcGU7IC8vIG1heSBhbnN3ZXIgbnVsbCBpZiBubyBtZXRo
b2QgYXJvdW5kCiAJfQorCQorCS8vIFZlcnNpb24gdGhhdCBqdXN0IGFuc3dlcnMgYmFzZWQgb24g
aW5mZXJlbmNlIGtpbmQgKGF0IDEuOCspIHdoZW4gYXZhaWxhYmxlLgorCXB1YmxpYyBpbnQgcGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgc2l0ZSkgeworCQlpZiAoY29tcGlsZXJPcHRp
b25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiBtZXRob2Qg
aW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKKwkJCWludCBp
bmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1VOS05PV047CisJCQlJbmZl
cmVuY2VDb250ZXh0MTggY29udGV4dCA9IG51bGw7CisJCQlpZiAoc2l0ZSBpbnN0YW5jZW9mIElu
dm9jYXRpb24pIHsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgc2l0
ZTsKKwkJCQljb250ZXh0ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCk7CisJCQkJaWYgKGNvbnRleHQgIT0g
bnVsbCkKKwkJCQkJaW5mZXJlbmNlS2luZCA9IGNvbnRleHQuaW5mZXJlbmNlS2luZDsKKwkJCX0g
ZWxzZSBpZiAoc2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKKwkJCQlpbmZl
cmVuY2VLaW5kID0gKChSZWZlcmVuY2VFeHByZXNzaW9uKSBzaXRlKS5pbmZlcmVuY2VLaW5kOwor
CQkJfQorCQkJLyogMS44KyBQb3N0IGluZmVyZW5jZSBjb21wYXRpYmlsaXR5IGNoZWNrIHBvbGlj
eTogRm9yIG5vbi1mdW5jdGlvbmFsLXR5cGUgYXJndW1lbnRzLCB0cnVzdCBpbmZlcmVuY2UuIEZv
ciBmdW5jdGlvbmFsIHR5cGUgYXJndW1lbnRzIGFwcGx5IGNvbXBhdGliaWxpdHkgY2hlY2tzIGFz
IGluZmVyZW5jZQorCQkJICAgZW5naW5lIG1heSBub3QgaGF2ZSBjaGVja2VkIGFyZ3VtZW50cyB0
aGF0IGFyZSBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHkuIE9uZSBjb21wbGljYXRpb24g
dG8gZGVhbCB3aXRoIGlzIHdoZW4gdGhlIGdlbmVyaWMgbWV0aG9kJ3MgcGFyYW1ldGVyIGlzIGl0
cyBvd24gdHlwZSB2YXJpYWJsZSAKKwkJCSAgIGFuZCBvbmx5IGFwcGxpY2FiaWxpdHkgd2FzIGlu
ZmVycmVkIGFuZCBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBpbnN0YW50aWF0ZWQgaXQgd2l0aCBq
bE8gZHVlIHRvIGxhY2sgb2YgdXBwZXIgYm91bmRzIGluIHRoZSBib3VuZCBzZXQuCisJCQkqLwor
CQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGNvbnRleHQgIT0gbnVsbCkgeyAv
LyB0aGlzIGJsb2NrIGNhbiBiZSByZWFkaWx5IHNlZW4gdG8gYmUgbm90IHJlbGV2YW50IGZvciBy
ZWZlcmVuY2UgZXhwcmVzc2lvbnMKKwkJCQlNZXRob2RCaW5kaW5nIHNoYWxsb3dPcmlnaW5hbCA9
IG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsKKwkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0g
YXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJCVR5cGVCaW5kaW5nIGFy
Z3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJCQlpZiAoIWFyZ3VtZW50LmlzRnVuY3Rpb25hbFR5
cGUoKSkKKwkJCQkJCWNvbnRpbnVlOworCQkJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXIgPSBJbmZl
cmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCBjb250ZXh0
LmlzVmFyQXJncygpKTsKKwkJCQkJaWYgKGFyZ3VtZW50LmlzQ29tcGF0aWJsZVdpdGgocGFyYW1l
dGVyLCB0aGlzKSkKKwkJCQkJCWNvbnRpbnVlOworCQkJCQlUeXBlQmluZGluZyBzaGFsbG93UGFy
YW1ldGVyID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihzaGFsbG93T3JpZ2luYWwu
cGFyYW1ldGVycywgaSwgY29udGV4dC5pc1ZhckFyZ3MoKSk7CisJCQkJCWlmIChzaGFsbG93UGFy
YW1ldGVyLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZ3VtZW50LCBzaGFsbG93T3JpZ2lu
YWwpKQorCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCX0KKwkJCX0KKwkJCXN3aXRj
aCAoaW5mZXJlbmNlS2luZCkgeworCQkJCWNhc2UgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1NU
UklDVDoKKwkJCQkJcmV0dXJuIENPTVBBVElCTEU7CisJCQkJY2FzZSBJbmZlcmVuY2VDb250ZXh0
MTguQ0hFQ0tfTE9PU0U6CisJCQkJCXJldHVybiBBVVRPQk9YX0NPTVBBVElCTEU7CisJCQkJY2Fz
ZSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOgorCQkJCQlyZXR1cm4gVkFSQVJHU19D
T01QQVRJQkxFOworCQkJCWRlZmF1bHQ6CisJCQkJCWJyZWFrOworCQkJCX0KKwkJfQorCQlyZXR1
cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSk7
CisJfQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmlu
ZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7CiAJCXJldHVybiBwYXJhbWV0
ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQppbmRleCA5Mzg0
OWNkLi4zOGVlNWJlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlN
ZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0
aG9kQmluZGluZy5qYXZhCkBAIC0yOSwxMyArMjksMjAgQEAgcHVibGljIGNsYXNzIFN5bnRoZXRp
Y0ZhY3RvcnlNZXRob2RCaW5kaW5nIGV4dGVuZHMgTWV0aG9kQmluZGluZyB7CiAJCXRoaXMuZW5j
bG9zaW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7CiAJfQogCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4g
dHlwZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29u
c3RydWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlw
dWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25z
dHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMpIHsKKwlwdWJsaWMgTWV0aG9kQmlu
ZGluZyBnZXRDb25zdHJ1Y3RvcigpIHsKKwkJcmV0dXJuIHRoaXMuc3RhdGljRmFjdG9yeUZvcjsK
Kwl9CisJCisJLyoqIEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xh
cmluZyBjbGFzcyBvZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBi
eSB0aGlzIGZhY3RvcnkgbWV0aG9kIGFuZAorCSAgICBpZiBtZXRob2QgdHlwZSBhcmd1bWVudHMg
aXMgbm90IGVtcHR5IG1hdGVyaWFsaXplIHRoZSBwYXJhbWV0ZXJpemVkIGdlbmVyaWMgY29uc3Ry
dWN0b3IgCisJKi8KKwlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBl
QXJndW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMsIFR5cGVC
aW5kaW5nW10gY29uc3RydWN0b3JUeXBlQXJndW1lbnRzKSB7CiAJCVJlZmVyZW5jZUJpbmRpbmcg
cGFyYW1ldGVyaXplZFR5cGUgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRU
eXBlKHRoaXMuZGVjbGFyaW5nQ2xhc3MsIHR5cGVBcmd1bWVudHMsCiAJCQkJCQkJCQkJCQkJCQkJ
CQkJCQkJdGhpcy5lbmNsb3NpbmdUeXBlKTsKIAkJZm9yIChNZXRob2RCaW5kaW5nIHBhcmFtZXRl
cml6ZWRNZXRob2QgOiBwYXJhbWV0ZXJpemVkVHlwZS5tZXRob2RzKCkpIHsKIAkJCWlmIChwYXJh
bWV0ZXJpemVkTWV0aG9kLm9yaWdpbmFsKCkgPT0gdGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQotCQkJ
CXJldHVybiAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7
CisJCQkJcmV0dXJuIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwID8gdGhpcy5l
bnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChwYXJhbWV0ZXJpemVk
TWV0aG9kLCBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMpIDoKKwkJCQkJCQkJCQkJCQkgICAgICAg
ICAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7CiAJCQlp
ZiAocGFyYW1ldGVyaXplZE1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7
CiAJCQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5n
KXBhcmFtZXRlcml6ZWRNZXRob2QpLmNsb3Nlc3RNYXRjaDsKIAkJCQlpZiAoY2xvc2VzdE1hdGNo
IGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgJiYgY2xvc2VzdE1hdGNoLm9y
aWdpbmFsKCkgPT0gdGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9UeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCmlu
ZGV4IDBiYjBkYjYuLjQ2YjQyMGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRp
bmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKQEAgLTQ0MSw2ICs0
NDEsMTYgQEAgcHVibGljIFR5cGVCaW5kaW5nIGZpbmRTdXBlclR5cGVPcmlnaW5hdGluZ0Zyb20o
VHlwZUJpbmRpbmcgb3RoZXJUeXBlKSB7CiAJCQkJCX0KIAkJCQl9CiAJCQl9CisJCQlicmVhazsK
KwkJY2FzZSBCaW5kaW5nLklOVEVSU0VDVElPTl9DQVNUX1RZUEU6CisJCQlJbnRlcnNlY3Rpb25D
YXN0VHlwZUJpbmRpbmcgaWN0YiA9IChJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcpIHRoaXM7
CisJCQlSZWZlcmVuY2VCaW5kaW5nW10gaW50ZXJzZWN0aW5nVHlwZXMgPSBpY3RiLmdldEludGVy
c2VjdGluZ1R5cGVzKCk7CisJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gaW50ZXJzZWN0aW5n
VHlwZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlQmluZGluZyBzdXBlclR5
cGUgPSBpbnRlcnNlY3RpbmdUeXBlc1tpXS5maW5kU3VwZXJUeXBlT3JpZ2luYXRpbmdGcm9tKG90
aGVyVHlwZSk7CisJCQkJaWYgKHN1cGVyVHlwZSAhPSBudWxsKQorCQkJCQlyZXR1cm4gc3VwZXJU
eXBlOworCQkJfQorCQkJYnJlYWs7CiAJfQogCXJldHVybiBudWxsOwogfQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248206</attachid>
            <date>2014-10-27 09:01:00 -0400</date>
            <delta_ts>2014-10-27 09:01:21 -0400</delta_ts>
            <desc>Revised patch incorporating review comments</desc>
            <filename>reviewcomments.patch</filename>
            <type>text/plain</type>
            <size>20323</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggNzlmZDNiNy4uZWFmYzRlNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTY1Miw2ICs2NTIsOCBA
QAogCS8qKgogCSAqIEFmdGVyIG1ldGhvZCBsb29rdXAgaGFzIHByb2R1Y2VkICdtZXRob2RCaW5k
aW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUgYmVlbiBzZWVuIGFzIGFyZ3VtZW50
cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMgdG8gdHJpZ2dlciBhbm90aGVyIHJvdW5kIG9m
IHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdldCB0eXBlcyBmcm9tIHRoZSBtZXRob2RzIHBh
cmFtZXRlcnMuCisJICogSWYgdGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZv
ciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFj
ZSBhcyBhbgorCSAqIGludGVuZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0
eXBlIGluZm9ybWF0aW9uIGluIGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMu
IAogCSAqIEBwYXJhbSBpbnZvY2F0aW9uIHRoZSBvdXRlciBpbnZvY2F0aW9uIHdoaWNoIGlzIGJl
aW5nIHJlc29sdmVkCiAJICogQHBhcmFtIG1ldGhvZCB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxv
b2t1cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBAcGFyYW0gYXJn
dW1lbnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVz
b2x2aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IgdGhlIG1ldGhv
ZCBsb29rdXAuCkBAIC02NzQsNyArNjc2LDcgQEAKIAkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5
cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHBhcmFtZXRlcnMsIGksIHZhcmlh
YmxlQXJpdHkpOwogCQkJaWYgKHBhcmFtZXRlclR5cGUgPT0gbnVsbCkKIAkJCQljb250aW51ZTsg
Ly8gbm90IG11Y2ggd2UgY2FuIGRvIHdpdGhvdXQgYSB0YXJnZXQgdHlwZSwgYXNzdW1lIGl0IG9u
bHkgaGFwcGVucyBhZnRlciBzb21lIHJlc29sdmUgZXJyb3IKLQkJCWlmIChhcmd1bWVudFR5cGVz
W2ldLmlzUG9seVR5cGUoKSkgeworCQkJaWYgKGFyZ3VtZW50VHlwZXNbaV0gIT0gbnVsbCAmJiBh
cmd1bWVudFR5cGVzW2ldLmlzUG9seVR5cGUoKSkgewogCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVk
VHlwZShwYXJhbWV0ZXJUeXBlKTsKIAkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBl
ID0gYXJndW1lbnQucmVzb2x2ZVR5cGUoc2NvcGUpOyAKIAkJCQlpZiAoYXJndW1lbnQgaW5zdGFu
Y2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRp
b25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEK
aW5kZXggZjJkYTUxMC4uMzVjYmVmOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9u
RXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQpAQCAtNTU2LDggKzU1NiwxOCBAQAogCS8vIEdpdmVuIHRoZSBhbGxvY2F0aW9uIHR5cGUgYW5k
IHRoZSBhcmd1bWVudHMgdG8gdGhlIGNvbnN0cnVjdG9yLCBzZWUgaWYgd2UgY2FuIGluZmVyIHRo
ZSBjb25zdHJ1Y3RvciBvZiB0aGUgZWxpZGVkIHBhcmFtZXRlcml6ZWQgdHlwZS4KIAlNZXRob2RC
aW5kaW5nIGZhY3RvcnkgPSBzY29wZS5nZXRTdGF0aWNGYWN0b3J5KGFsbG9jYXRpb25UeXBlLCBl
bmNsb3NpbmdUeXBlLCBhcmd1bWVudFR5cHMsIHRoaXMpOwogCWlmIChmYWN0b3J5IGluc3RhbmNl
b2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGZhY3RvcnkuaXNWYWxpZEJp
bmRpbmcoKSkgewotCQlTeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IChT
eW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZykgZmFjdG9yeS5vcmlnaW5hbCgpOwotCQlyZXR1
cm4gb3JpZ2luYWwuYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1Y3RvcigoKFBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZylmYWN0b3J5LnJldHVyblR5cGUpLmFyZ3VtZW50cyk7CisJCVN5bnRoZXRp
Y0ZhY3RvcnlNZXRob2RCaW5kaW5nIHNmbWIgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRp
bmcpIGZhY3Rvcnkub3JpZ2luYWwoKTsKKwkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNvbnN0cnVj
dG9yVHlwZVZhcmlhYmxlcyA9IHNmbWIuZ2V0Q29uc3RydWN0b3IoKS50eXBlVmFyaWFibGVzKCk7
CisJCVR5cGVCaW5kaW5nIFtdIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cyA9IGNvbnN0cnVjdG9y
VHlwZVZhcmlhYmxlcyAhPSBudWxsID8gbmV3IFR5cGVCaW5kaW5nW2NvbnN0cnVjdG9yVHlwZVZh
cmlhYmxlcy5sZW5ndGhdIDogQmluZGluZy5OT19UWVBFUzsKKwkJaWYgKGNvbnN0cnVjdG9yVHlw
ZUFyZ3VtZW50cy5sZW5ndGggPiAwKQorCQkJU3lzdGVtLmFycmF5Y29weSgoKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZylmYWN0b3J5KS50eXBlQXJndW1lbnRzLCBzZm1iLnR5cGVW
YXJpYWJsZXMoKS5sZW5ndGggLSBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMubGVuZ3RoICwgCisJ
CQkJCQkJCQkJCQljb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMsIDAsIGNvbnN0cnVjdG9yVHlwZUFy
Z3VtZW50cy5sZW5ndGgpOworCQlNZXRob2RCaW5kaW5nIGNvbnN0cnVjdG9yID0gc2ZtYi5hcHBs
eVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKCgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKWZh
Y3RvcnkucmV0dXJuVHlwZSkuYXJndW1lbnRzLCBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMpOwor
CQlpZiAoY29uc3RydWN0b3IgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgJiYgc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCkgeworCQkJLy8gZm9yY2UgYW4gaW5mZXJlbmNlIGNvbnRleHQgdG8g
YmUgZXN0YWJsaXNoZWQsIGJ1dCBhdm9pZCB0dW5uZWxpbmcgdGhyb3VnaCBvdmVybG9hZCByZXNv
bHV0aW9uLiBXZSBrbm93IHRoaXMgaXMgdGhlIE1TTUIuCisJCQlyZXR1cm4gUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kMTgoY29uc3RydWN0
b3Iuc2hhbGxvd09yaWdpbmFsKCksIGFyZ3VtZW50VHlwcywgc2NvcGUsIHRoaXMpOworCQl9CisJ
CXJldHVybiBjb25zdHJ1Y3RvcjsKIAl9CiAJcmV0dXJuIG51bGw7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRp
b25hbEV4cHJlc3Npb24uamF2YQppbmRleCA3ZjBjY2JmLi43Y2FhMmZmIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29u
ZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTcxOSw3ICs3MTksNyBAQAogCQogCXB1YmxpYyBi
b29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlw
ZVZhcmlhYmxlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCQlyZXR1cm4gdGhpcy52YWx1ZUlm
VHJ1ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCkgCi0J
CQkJJiYgdGhpcy52YWx1ZUlmRmFsc2UuaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkodHlwZVZh
cmlhYmxlLCBtZXRob2QpOyAvLyBub3QgcGVyZmVjdC4KKwkJCQkmJiB0aGlzLnZhbHVlSWZGYWxz
ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0eXBlVmFyaWFibGUsIG1ldGhvZCk7CiAJfQog
CQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CkBAIC03MjksNyArNzI5LDcgQEAK
IAkKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxUeXBlKCkgewotCQly
ZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlm
RmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOworCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc0Z1
bmN0aW9uYWxUeXBlKCkgfHwgdGhpcy52YWx1ZUlmRmFsc2UuaXNGdW5jdGlvbmFsVHlwZSgpOyAv
LyBFdmVuIGlmIG9ubHkgb25lIGFybSBpcyBmdW5jdGlvbmFsIHR5cGUsIHRoaXMgd2lsbCByZXF1
aXJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UgdGFyZ2V0CiAJfQogCQogCXB1YmxpYyBib29sZWFu
IGlzUG9seUV4cHJlc3Npb24oKSB0aHJvd3MgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24g
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQppbmRleCAxZGIyNjY4Li42MGE4Y2RhIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQpAQCAtNjk0LDYgKzY5NCwxNCBAQAogCiAJ
LyoqIER1cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9kIGJp
bmRpbmcgd2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVibGlj
IE1ldGhvZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJCWlmICh0aGlzLmV4YWN0TWV0aG9kQmluZGlu
ZyAhPSBudWxsKSB7CisJCQlNZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHRhcmdldFR5cGUu
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qoc2NvcGUsIHRydWUpOworCQkJaWYgKGZ1bmN0aW9uVHlw
ZSA9PSBudWxsKQorCQkJCXJldHVybiBudWxsOworCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFy
YW1ldGVycy5sZW5ndGg7CisJCQlpbnQgayA9IHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nLnBhcmFt
ZXRlcnMubGVuZ3RoOworCQkJcmV0dXJuIChuID09IGsgfHwgbiA9PSBrICsgMSkgPyB0aGlzLmV4
YWN0TWV0aG9kQmluZGluZyA6IG51bGw7CisJCX0KIAkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRo
b2QgPSBpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CiAJCWlm
ICh0YXJnZXRNZXRob2QgPT0gbnVsbCB8fCAhdGFyZ2V0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkp
CiAJCQlyZXR1cm4gbnVsbDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCAwNGExNGIyLi5kMDVjMGRiIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Cb3VuZFNldC5qYXZhCkBAIC02MzEsNyArNjMxLDcgQEAKIAkJCQkJCQl3aGlsZSAoaXQuaGFz
TmV4dCgpKSB7CiAJCQkJCQkJCVR5cGVCb3VuZCBib3VuZCA9IGl0Lm5leHQoKTsKIAkJCQkJCQkJ
aWYgKEluZmVyZW5jZUNvbnRleHQxOC5TSE9VTERfV09SS0FST1VORF9CVUdfSkRLXzgwNTQ3MjEp
IHsKLQkJCQkJCQkJCWlmIChib3VuZC5yaWdodCBpbnN0YW5jZW9mIENhcHR1cmVCaW5kaW5nKQor
CQkJCQkJCQkJaWYgKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcgJiYgYm91
bmQucmlnaHQuaXNQcm9wZXJUeXBlKHRydWUpKQogCQkJCQkJCQkJCWNvbnRpbnVlOwogCQkJCQkJ
CQl9CiAJCQkJCQkJCWlmICghKGJvdW5kLnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFi
bGUpKQpAQCAtOTc4LDIxICs5NzgsNiBAQAogCQlpZiAodGhyZWUgPT0gbnVsbCkgcmV0dXJuIG51
bGw7CiAJCXJldHVybiB0aHJlZS5maW5kU2luZ2xlV3JhcHBlclR5cGUoKTsKIAl9Ci0KLQlwcml2
YXRlIFR5cGVCaW5kaW5nIGFwcGx5SW5zdGFudGlhdGlvbnMoVHlwZUJpbmRpbmcgdHlwZSkgewot
CQlpZiAodHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQlyZXR1cm4gdHlwZTsKLQkKLQkJSXRl
cmF0b3I8SW5mZXJlbmNlVmFyaWFibGU+IHZhcmlhYmxlSXQgPSB0aGlzLmJvdW5kc1BlclZhcmlh
YmxlLmtleVNldCgpLml0ZXJhdG9yKCk7Ci0JCXdoaWxlICh2YXJpYWJsZUl0Lmhhc05leHQoKSkg
ewotCQkJSW5mZXJlbmNlVmFyaWFibGUgaW5mZXJlbmNlVmFyaWFibGUgPSB2YXJpYWJsZUl0Lm5l
eHQoKTsKLQkJCVR5cGVCaW5kaW5nIGluc3RhbnRpYXRpb24gPSBnZXRJbnN0YW50aWF0aW9uKGlu
ZmVyZW5jZVZhcmlhYmxlLCBudWxsKTsKLQkJCWlmIChpbnN0YW50aWF0aW9uICE9IG51bGwpCi0J
CQkJdHlwZSA9IHR5cGUuc3Vic3RpdHV0ZUluZmVyZW5jZVZhcmlhYmxlKGluZmVyZW5jZVZhcmlh
YmxlLCBpbnN0YW50aWF0aW9uKTsKLQkJfQotCQlyZXR1cm4gdHlwZTsKLQl9Ci0JCiAJLy8gdGhp
cyBjb25kaXRpb24gaXMganVzdCB3YXkgdG9vIGNvbXBsZXggdG8gY2hlY2sgaXQgaW4tbGluZToK
IAlwdWJsaWMgYm9vbGVhbiBjb25kaXRpb24xOF81XzJfYnVsbGV0XzNfM18xKEluZmVyZW5jZVZh
cmlhYmxlIGFscGhhLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CiAJCS8vIFQgaXMgYSByZWZl
cmVuY2UgdHlwZSwgYnV0IGlzIG5vdCBhIHdpbGRjYXJkLXBhcmFtZXRlcml6ZWQgdHlwZSwgYW5k
IGVpdGhlciAKQEAgLTEwMzIsMTAgKzEwMTcsOSBAQAogCQkJCQkJLyogSGFzaE1hcDxLIzgsViM5
PiBhbmQgSGFzaE1hcDxLIzgsQXJyYXlMaXN0PFQ+PiB3aXRoIGFuIGluc3RhbnRpYXRpb24gZm9y
IFY5ID0gQXJyYXlMaXN0PFQ+IGFscmVhZHkgaW4gdGhlIAogCQkJCQkJICAgYm91bmQgc2V0IHNo
b3VsZCBub3QgYmUgc2VlbiBhcyB0d28gZGlmZmVyZW50IHBhcmFtZXRlcml6YXRpb25zIG9mIHRo
ZSBzYW1lIGdlbmVyaWMgY2xhc3Mgb3IgaW50ZXJmYWNlLgogCQkJCQkJICAgU2VlIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2MjYgZm9yIGEgdGVzdCB0
aGF0IHRyaWdnZXJzIHRoaXMgY29uZGl0aW9uLgorCQkJCQkJICAgU2VlIGh0dHBzOi8vYnVncy5v
cGVuamRrLmphdmEubmV0L2Jyb3dzZS9KREstODA1NjA5MjogcmVjb21tZW5kYXRpb24gaXMgdG8g
Y2hlY2sgZm9yIHByb3BlciB0eXBlcy4KIAkJCQkJCSovCi0JCQkJCQlzdXBlcnNbMF0gPSBhcHBs
eUluc3RhbnRpYXRpb25zKHN1cGVyc1swXSk7Ci0JCQkJCQlzdXBlcnNbMV0gPSBhcHBseUluc3Rh
bnRpYXRpb25zKHN1cGVyc1sxXSk7Ci0JCQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFs
cyhzdXBlcnNbMF0sIHN1cGVyc1sxXSkpCisJCQkJCQlpZiAoc3VwZXJzWzBdLmlzUHJvcGVyVHlw
ZSh0cnVlKSAmJiBzdXBlcnNbMV0uaXNQcm9wZXJUeXBlKHRydWUpICYmICFUeXBlQmluZGluZy5l
cXVhbHNFcXVhbHMoc3VwZXJzWzBdLCBzdXBlcnNbMV0pKQogCQkJCQkJCXJldHVybiB0cnVlOwog
CQkJCQl9CiAJCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEKaW5kZXggNmUzZDU0Yy4uMDVlYjc3NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCkBAIC04NCwyMSArODQsMjEgQEAKIAkJCQkJ
aWYgKHByZXZpb3VzTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nKSB7CiAJCQkJCQkvLyBmaW5kIHRoZSBwcmV2aW91cyBpbm5lciBpbmZlcmVuY2UgY29u
dGV4dCB0byBzZWUgd2hhdCBpbmZlcmVuY2Uga2luZCB0aGlzIGludm9jYXRpb24gbmVlZHM6CiAJ
CQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5j
ZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgcHJldmlvdXNNZXRo
b2QpOwotCQkJCQkJaWYgKGlubmVyQ3R4ID09IG51bGwpIHsgLy8gbm8gaW5mZXJlbmNlIC0+IGFz
c3VtZSBpdCB3YXNuJ3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsCisJCQkJCQlpZiAoaW5uZXJDdHgg
PT0gbnVsbCB8fCBpbm5lckN0eC5zdGVwQ29tcGxldGVkID49IEluZmVyZW5jZUNvbnRleHQxOC5U
WVBFX0lORkVSUkVEKSB7IAorCQkJCQkJCS8qIE5vIGluZmVyZW5jZSBjb250ZXh0IC0+IHRoZSBt
ZXRob2Qgd2FzIGxpa2VseSBtYW51ZmFjdHVyZWQgYnkgU2NvcGUuZmluZEV4YWN0TWV0aG9kIC0+
IGFzc3VtZSBpdCB3YXNuJ3QgcmVhbGx5IHBvbHkgYWZ0ZXIgYWxsLgorCQkJCQkJCSAgIE90aGVy
d2lzZSwgZWl0aGVyIHRoZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3Vs
ZCBlZmZlY3RpdmVseSByZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3Vy
cmVudCBjb250ZXh0IAorCQkJCQkJCSAgIGR1cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uIE90aGVy
d2lzZSBhbGwgdGhhdCBpcyByZWxldmFudCBpcyB0byByZWxhdGUgdGhlIHJldHVybiB0eXBlIHdp
dGggZXhwZWN0ZWQgdHlwZS4KKwkJCQkJCQkqLwogCQkJCQkJCVR5cGVCaW5kaW5nIGV4cHJUeXBl
ID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKIAkJCQkJCQlpZiAoZXhwclR5cGUgPT0gbnVsbCB8
fCAhZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCQkJcmV0dXJuIEZBTFNFOwogCQkJ
CQkJCXJldHVybiBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGV4cHJUeXBlLCB0aGlzLnJp
Z2h0LCBDT01QQVRJQkxFLCB0aGlzLmlzU29mdCk7CiAJCQkJCQl9Ci0JCQkJCQlpZiAoaW5uZXJD
dHguc3RlcENvbXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguVFlQRV9JTkZFUlJFRCkgewot
CQkJCQkJCS8vIFRoZSBjb25zdHJhaW50cyBhbmQgaW5pdGlhbCBib3VuZHMgdGhhdCB3b3VsZCBl
ZmZlY3RpdmVseSByZWR1Y2UgdG8gYjMgYXJlIGFscmVhZHkgdHJhbnNmZXJyZWQgdG8gY3VycmVu
dCBjb250ZXh0IGR1cmluZyBDIFNldCBjb25zdHJ1Y3Rpb24uCi0JCQkJCQkJLy8gVGhpcyBzaG91
bGQgcmVhbGx5IGJlIGRvbmUgb25seSBmb3IgcG9seSBpbnZvY2F0aW9ucyBpbnRlcmxlYXZlZCBi
eSBhIGxhbWJkYSB0aGF0IGlzIG5vdCBwZXJ0aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gRklYTUUu
Ci0JCQkJCQkJcmV0dXJuIFRSVUU7Ci0JCQkJCQl9CiAJCQkJCQlpZiAoaW5uZXJDdHguc3RlcENv
bXBsZXRlZCA+PSBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWV9JTkZFUlJFRCkgewog
CQkJCQkJCWluZmVyZW5jZUNvbnRleHQuY3VycmVudEJvdW5kcy5hZGRCb3VuZHMoaW5uZXJDdHgu
YjIsIGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQpOwogCQkJCQkJCWluZmVyZW5jZUNvbnRl
eHQuaW5mZXJlbmNlVmFyaWFibGVzID0gaW5uZXJDdHguaW5mZXJlbmNlVmFyaWFibGVzOwogCQkJ
CQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtp
bmQ7CisJCQkJCQkJaW5uZXJDdHgub3V0ZXJDb250ZXh0ID0gaW5mZXJlbmNlQ29udGV4dDsKIAkJ
CQkJCQlpbmZlcmVuY2VDb250ZXh0LnVzZXNVbmNoZWNrZWRDb252ZXJzaW9uID0gaW5uZXJDdHgu
dXNlc1VuY2hlY2tlZENvbnZlcnNpb247CiAJCQkJCQl9IGVsc2UgewogCQkJCQkJCXJldHVybiBG
QUxTRTsgLy8gc2hvdWxkIG5vdCByZWFjaCBoZXJlLgpAQCAtMjI3LDkgKzIyNywxMSBAQAogCQlN
ZXRob2RCaW5kaW5nIGZ1bmN0aW9uVHlwZSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoaW5m
ZXJlbmNlQ29udGV4dC5zY29wZSwgdHJ1ZSk7CiAJCWlmIChmdW5jdGlvblR5cGUgPT0gbnVsbCkK
IAkJCXJldHVybiBGQUxTRTsKLQorCQkvLyBwb3RlbnRpYWxseS1hcHBsaWNhYmxlIG1ldGhvZCBm
b3IgdGhlIG1ldGhvZCByZWZlcmVuY2Ugd2hlbiB0YXJnZXRpbmcgVCAoMTUuMTMuMSksCisJCU1l
dGhvZEJpbmRpbmcgcG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxl
VGltZU1ldGhvZFRhcmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsKKwkJaWYgKHBv
dGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQorCQkJcmV0dXJuIEZBTFNFOwogCQlpZiAocmVm
ZXJlbmNlLmlzRXhhY3RNZXRob2RSZWZlcmVuY2UoKSkgewotCQkJTWV0aG9kQmluZGluZyBwb3Rl
bnRpYWxseUFwcGxpY2FibGUgPSByZWZlcmVuY2UuZ2V0RXhhY3RNZXRob2QoKTsgCiAJCQlMaXN0
PENvbnN0cmFpbnRGb3JtdWxhPiBuZXdDb25zdHJhaW50cyA9IG5ldyBBcnJheUxpc3Q8Q29uc3Ry
YWludEZvcm11bGE+KCk7CiAJCQlUeXBlQmluZGluZ1tdIHAgPSBmdW5jdGlvblR5cGUucGFyYW1l
dGVyczsKIAkJCWludCBuID0gcC5sZW5ndGg7CkBAIC0yMzksOCArMjQxLDYgQEAKIAkJCWlmIChu
ID09IGsrMSkgewogCQkJCW5ld0NvbnN0cmFpbnRzLmFkZChDb25zdHJhaW50VHlwZUZvcm11bGEu
Y3JlYXRlKHBbMF0sIHJlZmVyZW5jZS5saHMucmVzb2x2ZWRUeXBlLCBDT01QQVRJQkxFKSk7CiAJ
CQkJb2Zmc2V0ID0gMTsKLQkJCX0gZWxzZSBpZiAobiAhPSBrKSB7Ci0JCQkJcmV0dXJuIEZBTFNF
OwogCQkJfQogCQkJZm9yIChpbnQgaSA9IG9mZnNldDsgaSA8IG47IGkrKykKIAkJCQluZXdDb25z
dHJhaW50cy5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShwW2ldLCBwUHJpbWVbaS1v
ZmZzZXRdLCBDT01QQVRJQkxFKSk7CkBAIC0yNTQsMTAgKzI1NCw2IEBACiAJCQl9CiAJCQlyZXR1
cm4gbmV3Q29uc3RyYWludHMudG9BcnJheShuZXcgQ29uc3RyYWludEZvcm11bGFbbmV3Q29uc3Ry
YWludHMuc2l6ZSgpXSk7CiAJCX0gZWxzZSB7IC8vIGluZXhhY3QKLQkJCU1ldGhvZEJpbmRpbmcg
cG90ZW50aWFsbHlBcHBsaWNhYmxlID0gcmVmZXJlbmNlLmZpbmRDb21waWxlVGltZU1ldGhvZFRh
cmdldGluZyh0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKTsgLy8gLy8gcG90ZW50aWFsbHktYXBw
bGljYWJsZSBtZXRob2QgZm9yIHRoZSBtZXRob2QgcmVmZXJlbmNlIHdoZW4gdGFyZ2V0aW5nIFQg
KDE1LjEzLjEpLAotCQkJaWYgKHBvdGVudGlhbGx5QXBwbGljYWJsZSA9PSBudWxsKQotCQkJCXJl
dHVybiBGQUxTRTsKLQkJCQogCQkJaW50IG4gPSBmdW5jdGlvblR5cGUucGFyYW1ldGVycy5sZW5n
dGg7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IG47IGkrKykKIAkJCQlpZiAoIWZ1bmN0aW9uVHlw
ZS5wYXJhbWV0ZXJzW2ldLmlzUHJvcGVyVHlwZSh0cnVlKSkKQEAgLTM3OSw3ICszNzUsNyBAQAog
CQkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVG
b3JtdWxhLmNyZWF0ZShnYmV0YSwgdGFyZ2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJcmV0dXJu
IGluZmVyZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CiAJ
CQl9Ci0JCQlpZiAoclRoZXRhLmxlYWZDb21wb25lbnRUeXBlKCkgaW5zdGFuY2VvZiBJbmZlcmVu
Y2VWYXJpYWJsZSkgeworCQkJaWYgKHJUaGV0YS5sZWFmQ29tcG9uZW50VHlwZSgpIGluc3RhbmNl
b2YgSW5mZXJlbmNlVmFyaWFibGUpIHsgLy8gaHR0cHM6Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQv
YnJvd3NlL0pESy04MDYyMDgyCiAJCQkJSW5mZXJlbmNlVmFyaWFibGUgYWxwaGEgPSAoSW5mZXJl
bmNlVmFyaWFibGUpIHJUaGV0YS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJCVR5cGVCaW5kaW5n
IHRhcmdldExlYWZUeXBlID0gdGFyZ2V0VHlwZS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJCWJv
b2xlYW4gdG9SZXNvbHZlID0gZmFsc2U7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQppbmRleCBmMGE2NzU0Li4zNzdiZDUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKQEAgLTE1NCw3ICsxNTQsNyBAQAogCS8qKiBTaWduYWxzIHdoZXRoZXIgYW55IHR5cGUg
Y29tcGF0aWJpbGl0eSBtYWtlcyB1c2Ugb2YgdW5jaGVja2VkIGNvbnZlcnNpb24uICovCiAJcHVi
bGljIExpc3Q8Q29uc3RyYWludEZvcm11bGE+IGNvbnN0cmFpbnRzV2l0aFVuY2hlY2tlZENvbnZl
cnNpb247CiAJcHVibGljIGJvb2xlYW4gdXNlc1VuY2hlY2tlZENvbnZlcnNpb247Ci0KKwlwdWJs
aWMgSW5mZXJlbmNlQ29udGV4dDE4IG91dGVyQ29udGV4dDsKIAlTY29wZSBzY29wZTsKIAlMb29r
dXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudDsKIAlSZWZlcmVuY2VCaW5kaW5nIG9iamVjdDsgLy8g
amF2YS5sYW5nLk9iamVjdApAQCAtNDM5LDExICs0MzksNiBAQAogCiAJcHJpdmF0ZSBib29sZWFu
IGFkZENvbnN0cmFpbnRzVG9DX09uZUV4cHIoRXhwcmVzc2lvbiBleHByaSwgU2V0PENvbnN0cmFp
bnRGb3JtdWxhPiBjLCBUeXBlQmluZGluZyBmc2ksIFR5cGVCaW5kaW5nIHN1YnN0RiwgTWV0aG9k
QmluZGluZyBtZXRob2QsIGJvb2xlYW4gaW50ZXJsZWF2ZWQpIHRocm93cyBJbmZlcmVuY2VGYWls
dXJlRXhjZXB0aW9uIHsKIAkJCi0JCS8vIFNlZSBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5l
dC9icm93c2UvSkRLLTgwNTIzMjUgZm9yIGV4Y2x1c2lvbiBvZiBwb2x5IGV4cHJlc3Npb25zIHRh
cmdldGluZyBwcm9wZXIgdHlwZXMuIENFRi5yZWR1Y2UgdmFsaWRhdGVzIAotCQkvLyB0aGF0IHRo
ZXkgYXJlIGNvbXBhdGlibGUgaW4gYSBsb29zZSBpbnZvY2F0aW9uIGNvbnRleHQgYWdhaW5zdCB0
aGUgdGFyZ2V0IHR5cGUuIFRoZXkgY29udHJpYnV0ZSBub3RoaW5nIGZ1cnRoZXIgdG8gc29sdmlu
ZyB0aGUgZm9ybXVsYXMuCi0JCWlmIChzdWJzdEYuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJcmV0
dXJuIHRydWU7Ci0JCQogCQkvLyBGb3IgYWxsIGkgKDEg4omkIGkg4omkIGspLCBpZiBlaSBpcyBu
b3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHksIHRoZSBzZXQgY29udGFpbnMg4p+oZWkg4oaS
IM64IEZp4p+pLgogCQlpZiAoIWV4cHJpLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGZzaSwg
bWV0aG9kKSkgewogCQkJYy5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHBy
aSwgc3Vic3RGLCBSZWR1Y3Rpb25SZXN1bHQuQ09NUEFUSUJMRSwgQVJHVU1FTlRfQ09OU1RSQUlO
VFNfQVJFX1NPRlQpKTsKQEAgLTQ3Miw2ICs0NjcsMTAgQEAKIAkJCQl9CiAJCQl9CiAJCX0gZWxz
ZSBpZiAoZXhwcmkgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGV4cHJpLmlzUG9seUV4cHJlc3Np
b24oKSkgeworCQkJCisJCQlpZiAoc3Vic3RGLmlzUHJvcGVyVHlwZSh0cnVlKSkgLy8gaHR0cHM6
Ly9idWdzLm9wZW5qZGsuamF2YS5uZXQvYnJvd3NlL0pESy04MDUyMzI1IAorCQkJCXJldHVybiB0
cnVlOworCQkJCiAJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgZXhwcmk7
CiAJCQlNZXRob2RCaW5kaW5nIGlubmVyTWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKHN1YnN0
RiwgdGhpcy5zY29wZSk7CiAJCQlpZiAoaW5uZXJNZXRob2QgPT0gbnVsbCkKQEAgLTQ5Miw2ICs0
OTEsOCBAQAogCQkJCVN1c3BlbmRlZEluZmVyZW5jZVJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGVu
dGVyUG9seUludm9jYXRpb24oaW52b2NhdGlvbiwgaW52b2NhdGlvbi5hcmd1bWVudHMoKSk7CiAJ
CQkJdHJ5IHsKIAkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gYXBwbGljYWJpbGl0eUtpbmQ7CisJ
CQkJCWlmIChpbm5lckNvbnRleHQgIT0gbnVsbCkKKwkJCQkJCWlubmVyQ29udGV4dC5vdXRlckNv
bnRleHQgPSB0aGlzOwogCQkJCQlpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHNoYWxsb3dN
ZXRob2QsIGFyZ3VtZW50VHlwZXMsIHNoYWxsb3dNZXRob2QuaXNDb25zdHJ1Y3RvcigpKTsKIAkJ
CQkJaWYgKCFDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuaW5mZXJQb2x5SW52b2NhdGlvblR5
cGUodGhpcywgaW52b2NhdGlvbiwgc3Vic3RGLCBzaGFsbG93TWV0aG9kKSkKIAkJCQkJCXJldHVy
biBmYWxzZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZy5qYXZhCmluZGV4IDM4MzE3NDMuLmRiNmM5MGMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTkw
LDcgKzE5MCw3IEBACiAJCQlpZiAoaW5mQ3R4MTguaXNSZXNvbHZlZChyZXN1bHQpKSB7CiAJCQkJ
aW5mQ3R4MTguc3RlcENvbXBsZXRlZCA9IEluZmVyZW5jZUNvbnRleHQxOC5BUFBMSUNBQklMSVRZ
X0lORkVSUkVEOwogCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4
cHJlc3Npb24pCi0JCQkJCSgoUmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmlu
ZmVyZW5jZUtpbmQgPSBpbmZDdHgxOC5pbmZlcmVuY2VLaW5kOyAgIC8vIENIRUNLCisJCQkJCSgo
UmVmZXJlbmNlRXhwcmVzc2lvbikgaW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQgPSBpbmZD
dHgxOC5pbmZlcmVuY2VLaW5kOwogCQkJfSBlbHNlIHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0K
QEAgLTIxNCw3ICsyMTQsNiBAQAogCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkgeyAvLyBpbGxl
Z2FsbHkgd29ya2luZyBmcm9tIHRoZSBwcm92aXNpb25hbCByZXN1bHQ/CiAJCQkJCQlNZXRob2RC
aW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZO
ZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKIAkJCQkJCWlmIChwcm9ibGVt
TWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHsKLQkJCQkJCQltZXRob2RT
dWJzdGl0dXRlID0gbnVsbDsKIAkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKIAkJCQkJCX0K
IAkJCQkJfQpAQCAtMjIzLDcgKzIyMiw2IEBACiAJCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGlu
Zy5jaGVja0ZvckNvbnRyYWRpdGlvbnMobWV0aG9kU3Vic3RpdHV0ZSwgaW52b2NhdGlvblNpdGUs
IHNjb3BlKTsKIAkJCQkJCU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG1ldGhvZFN1YnN0
aXR1dGUuYm91bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOwogCQkJCQkJaWYgKHByb2JsZW1N
ZXRob2QgIT0gbnVsbCkgewotCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOwogCQkJCQkJ
CXJldHVybiBwcm9ibGVtTWV0aG9kOwogCQkJCQkJfQogCQkJCQkJaW5mQ3R4MTguc29sdXRpb25z
UGVyVGFyZ2V0VHlwZS5wdXQoZXhwZWN0ZWRUeXBlLCBuZXcgU29sdXRpb24obWV0aG9kU3Vic3Rp
dHV0ZSwgcmVzdWx0KSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5n
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEKaW5kZXggMzE3MDBhZi4u
NjZlZWE2YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJpbmRpbmcuamF2YQpAQCAtMjA2LDYgKzIwNiwxMSBA
QAogCQl0aGlzLmFyZ3VtZW50cyA9IHR5cGVBcmd1bWVudHM7CiAJfQogCQkKKwlAT3ZlcnJpZGUK
KwlwdWJsaWMgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIGNhcHR1cmUoU2NvcGUgc2NvcGUsIGlu
dCBwb3NpdGlvbikgeworCQlyZXR1cm4gdGhpczsKKwl9CisJCiAJQE92ZXJyaWRlIAogCXB1Ymxp
YyBUeXBlQmluZGluZyB1bmNhcHR1cmUoU2NvcGUgc2NvcGUpIHsKIAkJcmV0dXJuIHRoaXM7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEKaW5k
ZXggOTM4NDljZC4uMzhlZTViZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNG
YWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljRmFj
dG9yeU1ldGhvZEJpbmRpbmcuamF2YQpAQCAtMjksMTMgKzI5LDIwIEBACiAJCXRoaXMuZW5jbG9z
aW5nVHlwZSA9IGVuY2xvc2luZ1R5cGU7CiAJfQogCQotCS8qKiBBcHBseSB0aGUgZ2l2ZW4gdHlw
ZSBhcmd1bWVudHMgb24gdGhlIChkZWNsYXJpbmcgY2xhc3Mgb2YgdGhlKSBhY3R1YWwgY29uc3Ry
dWN0b3IgYmVpbmcgcmVwcmVzZW50ZWQgYnkgdGhpcyBmYWN0b3J5IG1ldGhvZC4gKi8KLQlwdWJs
aWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJndW1lbnRzT25Db25zdHJ1
Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGlu
ZyBnZXRDb25zdHJ1Y3RvcigpIHsKKwkJcmV0dXJuIHRoaXMuc3RhdGljRmFjdG9yeUZvcjsKKwl9
CisJCisJLyoqIEFwcGx5IHRoZSBnaXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmlu
ZyBjbGFzcyBvZiB0aGUpIGFjdHVhbCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0
aGlzIGZhY3RvcnkgbWV0aG9kIGFuZAorCSAgICBpZiBtZXRob2QgdHlwZSBhcmd1bWVudHMgaXMg
bm90IGVtcHR5IG1hdGVyaWFsaXplIHRoZSBwYXJhbWV0ZXJpemVkIGdlbmVyaWMgY29uc3RydWN0
b3IgCisJKi8KKwlwdWJsaWMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgYXBwbHlUeXBlQXJn
dW1lbnRzT25Db25zdHJ1Y3RvcihUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMsIFR5cGVCaW5k
aW5nW10gY29uc3RydWN0b3JUeXBlQXJndW1lbnRzKSB7CiAJCVJlZmVyZW5jZUJpbmRpbmcgcGFy
YW1ldGVyaXplZFR5cGUgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBl
KHRoaXMuZGVjbGFyaW5nQ2xhc3MsIHR5cGVBcmd1bWVudHMsCiAJCQkJCQkJCQkJCQkJCQkJCQkJ
CQkJdGhpcy5lbmNsb3NpbmdUeXBlKTsKIAkJZm9yIChNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6
ZWRNZXRob2QgOiBwYXJhbWV0ZXJpemVkVHlwZS5tZXRob2RzKCkpIHsKIAkJCWlmIChwYXJhbWV0
ZXJpemVkTWV0aG9kLm9yaWdpbmFsKCkgPT0gdGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQotCQkJCXJl
dHVybiAoUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7CisJ
CQkJcmV0dXJuIGNvbnN0cnVjdG9yVHlwZUFyZ3VtZW50cy5sZW5ndGggPiAwID8gdGhpcy5lbnZp
cm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChwYXJhbWV0ZXJpemVkTWV0
aG9kLCBjb25zdHJ1Y3RvclR5cGVBcmd1bWVudHMpIDoKKwkJCQkJCQkJCQkJCQkgICAgICAgICAo
UGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcpIHBhcmFtZXRlcml6ZWRNZXRob2Q7CiAJCQlpZiAo
cGFyYW1ldGVyaXplZE1ldGhvZCBpbnN0YW5jZW9mIFByb2JsZW1NZXRob2RCaW5kaW5nKSB7CiAJ
CQkJTWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2ggPSAoKFByb2JsZW1NZXRob2RCaW5kaW5nKXBh
cmFtZXRlcml6ZWRNZXRob2QpLmNsb3Nlc3RNYXRjaDsKIAkJCQlpZiAoY2xvc2VzdE1hdGNoIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgJiYgY2xvc2VzdE1hdGNoLm9yaWdp
bmFsKCkgPT0gdGhpcy5zdGF0aWNGYWN0b3J5Rm9yKQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>