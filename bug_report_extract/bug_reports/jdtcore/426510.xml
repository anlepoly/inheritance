<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426510</bug_id>
          
          <creation_ts>2014-01-23 15:08:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] New API: ImportRewrite#addAnnotation(..)</short_desc>
          <delta_ts>2014-12-08 11:05:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=417937</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61468"
          type_id="1"
          status="+"
          setter="markus_keller"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353820</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-23 15:08:20 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #21)
&gt; If you took this new code that create new annotations from the UI code, it
&gt; may not be a bad idea to move that code to Core so both Core and UI could
&gt; use that.

Yes, we should not duplicate nontrivial code. We should remove the old org.eclipse.jdt.internal.corext.dom.ASTNodeFactory#newAnnotation(..) and turn ImportRewrite#newAnnotation(..) into an API like this:

/**
 * Adds the necessary imports for the given annotation binding to the rewriter&apos;s record
 * and returns an {@link Annotation} that can be used in the code.
 * &lt;p&gt;
 * No imports are added for types that are already known. If an import for a type is recorded to be removed, this record is discarded instead.
 * &lt;/p&gt;
 * &lt;p&gt;
 * The content of the compilation unit itself is actually not modified
 * in any way by this method; rather, the rewriter just records newly added imports.
 * &lt;/p&gt;
 * @param binding the annotation to be added
 * @param ast the AST to create the returned annotation for
 * @param context an optional context that knows about types visible in the current scope or &lt;code&gt;null&lt;/code&gt;
 * to use the default context (only using the available imports)
 * @return an annotation node. The returned annotation contains unqualified type names where
 * an import could be added or was already known. Type names are fully qualified if an import conflict prevented an import.
 * 
 * @since 3.9 BETA_JAVA8
 */
public Annotation addAnnotation(IAnnotationBinding annotation, AST ast, ImportRewriteContext context)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356369</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-30 00:50:05 -0500</bug_when>
    <thetext>To take care of the following issues as well:

package pack1;
public class X {
	public void foo004(@pack2.ClashMarker Object o2, A arg) {}
}

package pack1;
import java.lang.annotation.*;

public class A {}

	@Target (ElementType.TYPE_USE)
	@interface ClashMarker{
		int value();
		boolean value2() default false; 
	}

package pack2;
import java.lang.annotation.*;
@Target (ElementType.TYPE_USE)
public @interface ClashMarker {}


Move foo004 to A -&gt; clash of ClashMarker with the type defined in A.java is not taken care and import happens causing a compilation error</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356391</commentid>
    <comment_count>2</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-30 02:10:46 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #1)
Same issue as in 420579 - issue existing from an old build - will be handled separately.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356569</commentid>
    <comment_count>3</comment_count>
      <attachid>239468</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-01-30 08:09:18 -0500</bug_when>
    <thetext>Created attachment 239468
Proposed Patch

new api is a wrapper over the existing code as mentioned in the description. Patch contains the wrapper and the test cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357320</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-31 13:04:06 -0500</bug_when>
    <thetext>The &quot;context == null ? ...&quot; is not necessary, i.e. passing &apos;context&apos; is enough. That makes the delegating method unnecessary.

Hint: The Change Method Signature refactoring makes it trivial to rename both newAnnotation...() methods to addAnnotation...() and to reorder the parameters.

Verified that the new API is a perfect replacement for the old ASTNodeFactory method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357764</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-03 03:45:16 -0500</bug_when>
    <thetext>Thanks for the comments Markus. Fix committed via:http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=78310b6881d29e4104dd5ac0bf79c342409c9931

Raised bug 427232 against ui for replacing existing internal functions by this api (ref comment 0).</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239468</attachid>
            <date>2014-01-30 08:09:00 -0500</date>
            <delta_ts>2014-01-30 08:09:18 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-426510--18dom-ast-New-API-ImportRewritea.patch</filename>
            <type>text/plain</type>
            <size>8032</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvSW1wb3J0UmV3cml0ZTE4VGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0Lmph
dmEKaW5kZXggMWJmNmZkZC4uZWFkYTEyNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVz
Y3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVz
Y3JpYmluZy9JbXBvcnRSZXdyaXRlMThUZXN0LmphdmEKQEAgLTI4LDEwICsyOCwxNSBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmRvbS5BU1Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVFBhcnNl
cjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQW5ub3RhdGlvbjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQ29tcGlsYXRpb25Vbml0OwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5JVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuZG9tLklWYXJpYWJsZUJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
Lk1hcmtlckFubm90YXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhv
ZERlY2xhcmF0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5Ob3JtYWxBbm5v
dGF0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TaW5nbGVNZW1iZXJBbm5v
dGF0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5TaW5nbGVWYXJpYWJsZURl
Y2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVjbGFyYXRpb247CkBAIC02NTYsNiArNjYxLDEw
OSBAQAogCQlidWc0MjYwOTRfcnVuaV9zaW5jZV84KDEwKTsKIAl9CiAKKwlwdWJsaWMgdm9pZCB0
ZXN0QnVnNDI2NTEwYSgpIHRocm93cyBFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMgPSAi
cGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSIJcHVi
bGljIHZvaWQgZm9vMDAxKEBwYWNrMi5NYXJrZXIgT2JqZWN0IG8yLCBBIGFyZykge31cbiIgKwor
CQkJCSIJcHVibGljIHZvaWQgZm9vMDAyKEBwYWNrMi5Bbm5vdDIoezEsMn0pIE9iamVjdCBvMiwg
QSBhcmcpIHt9XG4iICsKKwkJCQkiCXB1YmxpYyB2b2lkIGZvbzAwMyhAcGFjazIuQW5ub3QxKHZh
bHVlID0gdHJ1ZSwgdmFsdWUyID0gMSkgT2JqZWN0IG8yLCBBIGFyZykge31cbiIgKworCQkJCSJ9
XG4iOworCQljcmVhdGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxIik7CisJCWNy
ZWF0ZUZpbGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL1guamF2YSIsIGNvbnRlbnRzKTsK
KwkJY29udGVudHMgPSAicGFja2FnZSBwYWNrMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgQXt9
XG4iOworCQljcmVhdGVGaWxlKCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiLCBj
b250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazI7XG4iICsKKwkJCQkiaW1wb3J0
IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkiQFRhcmdldChFbGVtZW50VHlwZS5U
WVBFX1VTRSlcbiIgKworCQkJCSJwdWJsaWMgQGludGVyZmFjZSBNYXJrZXIge30iOworCQljcmVh
dGVGb2xkZXIoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syIik7CisJCWNyZWF0ZUZpbGUoIi8i
ICsgUFJPSkVDVCArICIvc3JjL3BhY2syL01hcmtlci5qYXZhIiwgY29udGVudHMpOworCQljb250
ZW50cyA9ICJwYWNrYWdlIHBhY2syO1xuIiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcuYW5ub3Rh
dGlvbi4qO1xuIiArCisJCQkJIkBUYXJnZXQoRWxlbWVudFR5cGUuVFlQRV9VU0UpXG4iICsKKwkJ
CQkicHVibGljIEBpbnRlcmZhY2UgQW5ub3QxIHtcbiIgKworCQkJCSIJYm9vbGVhbiB2YWx1ZSgp
IGRlZmF1bHQgZmFsc2U7XG4iICsKKwkJCQkiCWludCB2YWx1ZTIoKTtcbiIgKworCQkJCSJ9IjsK
KwkJY3JlYXRlRmlsZSgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazIvQW5ub3QxLmphdmEiLCBj
b250ZW50cyk7CisJCWNvbnRlbnRzID0gInBhY2thZ2UgcGFjazI7XG4iICsKKwkJCQkiaW1wb3J0
IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkiQFRhcmdldChFbGVtZW50VHlwZS5U
WVBFX1VTRSlcbiIgKworCQkJCSJwdWJsaWMgQGludGVyZmFjZSBBbm5vdDIge1xuIiArCisJCQkJ
IglpbnRbXSB2YWx1ZSgpIGRlZmF1bHQgezEsMn07XG4iICsKKwkJCQkifSI7CisJCWNyZWF0ZUZp
bGUoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2syL0Fubm90Mi5qYXZhIiwgY29udGVudHMpOwor
CisJCUFTVFBhcnNlciBwYXJzZXIgPSBBU1RQYXJzZXIubmV3UGFyc2VyKEFTVC5KTFM4KTsKKwkJ
SUNvbXBpbGF0aW9uVW5pdCBjdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9KRUNUICsg
Ii9zcmMvcGFjazEvWC5qYXZhIik7CisJCXBhcnNlci5zZXRTb3VyY2UoY3UpOworCQlwYXJzZXIu
c2V0UmVzb2x2ZUJpbmRpbmdzKHRydWUpOworCQlwYXJzZXIuc2V0U3RhdGVtZW50c1JlY292ZXJ5
KHRydWUpOworCQlDb21waWxhdGlvblVuaXQgYXN0Um9vdCA9IChDb21waWxhdGlvblVuaXQpIHBh
cnNlci5jcmVhdGVBU1QobnVsbCk7CisJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24g
PSAoVHlwZURlY2xhcmF0aW9uKSBhc3RSb290LnR5cGVzKCkuZ2V0KDApOworCQlNZXRob2REZWNs
YXJhdGlvbiBbXSBtZXRob2RzID0gIHR5cGVEZWNsYXJhdGlvbi5nZXRNZXRob2RzKCk7CisJCWlu
dCBtZXRob2RDb3VudCA9IDA7CisKKwkJeworCQkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kID0g
bWV0aG9kc1ttZXRob2RDb3VudCsrXTsKKwkJCWN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiAr
IFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9BLmphdmEiKTsKKwkJCUltcG9ydFJld3JpdGUgcmV3cml0
ZSA9IG5ld0ltcG9ydHNSZXdyaXRlKGN1LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUpOwor
CQkJU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbiB2YXJpYWJsZSA9IChTaW5nbGVWYXJpYWJsZURl
Y2xhcmF0aW9uKSBtZXRob2QucGFyYW1ldGVycygpLmdldCgwKTsKKwkJCU1hcmtlckFubm90YXRp
b24gbWFya2VyQW5ub3RhdGlvbiA9IChNYXJrZXJBbm5vdGF0aW9uKSB2YXJpYWJsZS5tb2RpZmll
cnMoKS5nZXQoMCk7CisJCQlBbm5vdGF0aW9uIGFubm90YXRpb24gPSByZXdyaXRlLmFkZEFubm90
YXRpb24obWFya2VyQW5ub3RhdGlvbi5yZXNvbHZlQW5ub3RhdGlvbkJpbmRpbmcoKSwgYXN0Um9v
dC5nZXRBU1QoKSwgbnVsbCk7CisJCQlhc3NlcnRUcnVlKGFubm90YXRpb24uaXNNYXJrZXJBbm5v
dGF0aW9uKCkpOworCQkJYXNzZXJ0RXF1YWxzKCJATWFya2VyIiwgYW5ub3RhdGlvbi50b1N0cmlu
ZygpKTsKKworCQkJYXBwbHkocmV3cml0ZSk7CisJCQljb250ZW50cyA9ICJwYWNrYWdlIHBhY2sx
O1xuIiArCisJCQkJCSJcbiIgKworCQkJCQkiaW1wb3J0IHBhY2syLk1hcmtlcjtcbiIgKworCQkJ
CQkiXG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBe31cbiI7CisJCQljdSA9IGdldENvbXBpbGF0
aW9uVW5pdCgiLyIgKyBQUk9KRUNUICsgIi9zcmMvcGFjazEvQS5qYXZhIik7CisJCQlhc3NlcnRF
cXVhbFN0cmluZ0lnbm9yZURlbGltKGN1LmdldFNvdXJjZSgpLCBjb250ZW50cyk7CisJCX0KKwkJ
eworCQkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kID0gbWV0aG9kc1ttZXRob2RDb3VudCsrXTsK
KwkJCWN1ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvIiArIFBST0pFQ1QgKyAiL3NyYy9wYWNrMS9B
LmphdmEiKTsKKwkJCUltcG9ydFJld3JpdGUgcmV3cml0ZSA9IG5ld0ltcG9ydHNSZXdyaXRlKGN1
LCBuZXcgU3RyaW5nWzBdLCA5OSwgOTksIHRydWUpOworCQkJU2luZ2xlVmFyaWFibGVEZWNsYXJh
dGlvbiB2YXJpYWJsZSA9IChTaW5nbGVWYXJpYWJsZURlY2xhcmF0aW9uKSBtZXRob2QucGFyYW1l
dGVycygpLmdldCgwKTsKKwkJCVNpbmdsZU1lbWJlckFubm90YXRpb24gc2luZ2xlTWVtYmVyQW5u
b3RhdGlvbiA9IChTaW5nbGVNZW1iZXJBbm5vdGF0aW9uKSB2YXJpYWJsZS5tb2RpZmllcnMoKS5n
ZXQoMCk7CisJCQlBbm5vdGF0aW9uIGFubm90YXRpb24gPSByZXdyaXRlLmFkZEFubm90YXRpb24o
c2luZ2xlTWVtYmVyQW5ub3RhdGlvbi5yZXNvbHZlQW5ub3RhdGlvbkJpbmRpbmcoKSwgYXN0Um9v
dC5nZXRBU1QoKSwgbnVsbCk7CisJCQlhc3NlcnRUcnVlKGFubm90YXRpb24uaXNTaW5nbGVNZW1i
ZXJBbm5vdGF0aW9uKCkpOworCQkJYXNzZXJ0RXF1YWxzKCJAQW5ub3QyKHsxLDJ9KSIsIGFubm90
YXRpb24udG9TdHJpbmcoKSk7CisKKwkJCWFwcGx5KHJld3JpdGUpOworCQkJY29udGVudHMgPSAi
cGFja2FnZSBwYWNrMTtcbiIgKworCQkJCQkiXG4iICsKKwkJCQkJImltcG9ydCBwYWNrMi5Bbm5v
dDI7XG4iICsKKwkJCQkJIlxuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQkJY3Ug
PSBnZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIp
OworCQkJYXNzZXJ0RXF1YWxTdHJpbmdJZ25vcmVEZWxpbShjdS5nZXRTb3VyY2UoKSwgY29udGVu
dHMpOworCQl9CisJCXsKKwkJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZCA9IG1ldGhvZHNbbWV0
aG9kQ291bnQrK107CisJCQljdSA9IGdldENvbXBpbGF0aW9uVW5pdCgiLyIgKyBQUk9KRUNUICsg
Ii9zcmMvcGFjazEvQS5qYXZhIik7CisJCQlJbXBvcnRSZXdyaXRlIHJld3JpdGUgPSBuZXdJbXBv
cnRzUmV3cml0ZShjdSwgbmV3IFN0cmluZ1swXSwgOTksIDk5LCB0cnVlKTsKKwkJCVNpbmdsZVZh
cmlhYmxlRGVjbGFyYXRpb24gdmFyaWFibGUgPSAoU2luZ2xlVmFyaWFibGVEZWNsYXJhdGlvbikg
bWV0aG9kLnBhcmFtZXRlcnMoKS5nZXQoMCk7CisJCQlOb3JtYWxBbm5vdGF0aW9uIG5vcm1hbEFu
bm90YXRpb24gPSAoTm9ybWFsQW5ub3RhdGlvbikgdmFyaWFibGUubW9kaWZpZXJzKCkuZ2V0KDAp
OworCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gcmV3cml0ZS5hZGRBbm5vdGF0aW9uKG5vcm1h
bEFubm90YXRpb24ucmVzb2x2ZUFubm90YXRpb25CaW5kaW5nKCksIGFzdFJvb3QuZ2V0QVNUKCks
IG51bGwpOworCQkJYXNzZXJ0VHJ1ZShhbm5vdGF0aW9uLmlzTm9ybWFsQW5ub3RhdGlvbigpKTsK
KwkJCWFzc2VydEVxdWFscygiQEFubm90MSh2YWx1ZT10cnVlLHZhbHVlMj0xKSIsIGFubm90YXRp
b24udG9TdHJpbmcoKSk7CisKKwkJCWFwcGx5KHJld3JpdGUpOworCQkJY29udGVudHMgPSAicGFj
a2FnZSBwYWNrMTtcbiIgKworCQkJCQkiXG4iICsKKwkJCQkJImltcG9ydCBwYWNrMi5Bbm5vdDE7
XG4iICsKKwkJCQkJIlxuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iOworCQkJY3UgPSBn
ZXRDb21waWxhdGlvblVuaXQoIi8iICsgUFJPSkVDVCArICIvc3JjL3BhY2sxL0EuamF2YSIpOwor
CQkJYXNzZXJ0RXF1YWxTdHJpbmdJZ25vcmVEZWxpbShjdS5nZXRTb3VyY2UoKSwgY29udGVudHMp
OworCQl9CisJfQorCiAJcHJpdmF0ZSB2b2lkIGFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0o
U3RyaW5nIGFjdHVhbCwgU3RyaW5nIGV4cGVjdGVkKSB0aHJvd3MgSU9FeGNlcHRpb24gewogCQlT
dHJpbmdBc3NlcnRzLmFzc2VydEVxdWFsU3RyaW5nSWdub3JlRGVsaW0oYWN0dWFsLCBleHBlY3Rl
ZCk7CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9yZXdyaXRlL0ltcG9ydFJld3JpdGUuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vcmV3cml0ZS9JbXBvcnRSZXdyaXRl
LmphdmEKaW5kZXggNGFkNDg2Mi4uZmE0NjllOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9yZXdyaXRlL0ltcG9ydFJld3JpdGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUv
ZG9tL3Jld3JpdGUvSW1wb3J0UmV3cml0ZS5qYXZhCkBAIC00MTIsNiArNDEyLDMwIEBACiAJCX0K
IAkJcmV0dXJuIEltcG9ydFJld3JpdGVDb250ZXh0LlJFU19OQU1FX1VOS05PV047CiAJfQorCisJ
LyoqCisJICogQWRkcyB0aGUgbmVjZXNzYXJ5IGltcG9ydHMgZm9yIHRoZSBnaXZlbiBhbm5vdGF0
aW9uIGJpbmRpbmcgdG8gdGhlIHJld3JpdGVyJ3MgcmVjb3JkCisJICogYW5kIHJldHVybnMgYW4g
e0BsaW5rIEFubm90YXRpb259IHRoYXQgY2FuIGJlIHVzZWQgaW4gdGhlIGNvZGUuCisJICogPHA+
CisJICogTm8gaW1wb3J0cyBhcmUgYWRkZWQgZm9yIHR5cGVzIHRoYXQgYXJlIGFscmVhZHkga25v
d24uIElmIGFuIGltcG9ydCBmb3IgYSB0eXBlIGlzIHJlY29yZGVkIHRvIGJlIHJlbW92ZWQsIHRo
aXMgcmVjb3JkIGlzIGRpc2NhcmRlZCBpbnN0ZWFkLgorCSAqIDwvcD4KKwkgKiA8cD4KKwkgKiBU
aGUgY29udGVudCBvZiB0aGUgY29tcGlsYXRpb24gdW5pdCBpdHNlbGYgaXMgYWN0dWFsbHkgbm90
IG1vZGlmaWVkCisJICogaW4gYW55IHdheSBieSB0aGlzIG1ldGhvZDsgcmF0aGVyLCB0aGUgcmV3
cml0ZXIganVzdCByZWNvcmRzIG5ld2x5IGFkZGVkIGltcG9ydHMuCisJICogPC9wPgorCSAqIEBw
YXJhbSBhbm5vdGF0aW9uIHRoZSBhbm5vdGF0aW9uIHRvIGJlIGFkZGVkCisJICogQHBhcmFtIGFz
dCB0aGUgQVNUIHRvIGNyZWF0ZSB0aGUgcmV0dXJuZWQgYW5ub3RhdGlvbiBmb3IKKwkgKiBAcGFy
YW0gY29udGV4dCBhbiBvcHRpb25hbCBjb250ZXh0IHRoYXQga25vd3MgYWJvdXQgdHlwZXMgdmlz
aWJsZSBpbiB0aGUgY3VycmVudCBzY29wZSBvciA8Y29kZT5udWxsPC9jb2RlPgorCSAqIHRvIHVz
ZSB0aGUgZGVmYXVsdCBjb250ZXh0IChvbmx5IHVzaW5nIHRoZSBhdmFpbGFibGUgaW1wb3J0cykK
KwkgKiBAcmV0dXJuIGFuIGFubm90YXRpb24gbm9kZS4gVGhlIHJldHVybmVkIGFubm90YXRpb24g
Y29udGFpbnMgdW5xdWFsaWZpZWQgdHlwZSBuYW1lcyB3aGVyZQorCSAqIGFuIGltcG9ydCBjb3Vs
ZCBiZSBhZGRlZCBvciB3YXMgYWxyZWFkeSBrbm93bi4gVHlwZSBuYW1lcyBhcmUgZnVsbHkgcXVh
bGlmaWVkIGlmIGFuIGltcG9ydCBjb25mbGljdCBwcmV2ZW50ZWQgYW4gaW1wb3J0LgorCSAqIAor
CSAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAorCSAqLworCXB1YmxpYyBBbm5vdGF0aW9uIGFkZEFu
bm90YXRpb24oSUFubm90YXRpb25CaW5kaW5nIGFubm90YXRpb24sIEFTVCBhc3QsIEltcG9ydFJl
d3JpdGVDb250ZXh0IGNvbnRleHQpIHsKKwkJcmV0dXJuIG5ld0Fubm90YXRpb24oYXN0LCBhbm5v
dGF0aW9uLCBjb250ZXh0ID09IG51bGwgPyB0aGlzLmRlZmF1bHRDb250ZXh0IDogY29udGV4dCk7
CisJfQorCiAJLyoqCiAJICogQWRkcyBhIG5ldyBpbXBvcnQgdG8gdGhlIHJld3JpdGVyJ3MgcmVj
b3JkIGFuZCByZXR1cm5zIGEge0BsaW5rIFR5cGV9IG5vZGUgdGhhdCBjYW4gYmUgdXNlZAogCSAq
IGluIHRoZSBjb2RlIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSB0eXBlLiBUaGUgdHlwZSBiaW5kaW5n
IGNhbiBiZSBhbiBhcnJheSBiaW5kaW5nLCB0eXBlIHZhcmlhYmxlIG9yIHdpbGRjYXJkLg==
</data>

          </attachment>
      

    </bug>

</bugzilla>