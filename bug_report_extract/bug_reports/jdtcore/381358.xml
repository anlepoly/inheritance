<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>381358</bug_id>
          
          <creation_ts>2012-06-01 08:19:00 -0400</creation_ts>
          <short_desc>[1.8] Compiler should gracefully reject JSR 335 constructs at source levels 1.7-</short_desc>
          <delta_ts>2012-07-17 20:27:01 -0400</delta_ts>
          <reporter_accessible>0</reporter_accessible>
          <cclist_accessible>0</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380188</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2117557</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-01 08:19:24 -0400</bug_when>
    <thetext>BETA_JAVA8 top of branch.

(1) The following program does not elicit an error message at the
moment, when compiled as a 1.7- project. It should be rejected with
a message that reads &quot;Default methods are available only at source 
level 1.8 or above&quot;

// -----
interface I {
  public void foo() default { System.out.println(&quot;Place holder&quot;); }
}
// -----

(2) The following program while compiled as a 1.7- project triggers
three error messages:

// ---
class X {
  X x = () -&gt; 10;
}
// ----

    - Syntax error on token &quot;)&quot;, invalid TypeElidedFormalParameter
    - Syntax error, insert &quot;ElidedSemicolonAndRightBrace&quot; to complete 
      LambdaBody
    - Syntax error, insert &quot;)&quot; to complete Expression.

It should emit a single error message saying &quot;Lambda expressions are
available only at source level 1.8 or above&quot;

(3) The following program should be rejected at 1.7-, but is not at 
the moment:
// ---
class X {
  X x = System::exit;
}
// ----

(4) The following program generates the message &quot;Syntax error on token
 COLON_COLON, delete this token&quot;, it should instead complain that
&quot;Reference expressions are available only at source level 1.8 or above&quot;

(2) &amp; (4) are a bit tricky in that, at source levels 1.7-, for performance
reasons we don&apos;t look ahead in the token stream to disambiguate between 
the different uses of the tokens &apos;(&apos; and &apos;&lt;&apos;. That means that we don&apos;t build
a parse subtree for these constructs at 1.7- levels. So the parser will
see a badly mangled program and that could result in a slew of errors as
in case (2) above.

One strategy is to recognize the operators &apos;::&apos; and &apos;-&gt;&apos; which are
returned as tokens at any source level and issue the &quot;available at
source level 1.8+&quot; messages upon encountering these tokens. In order
to make sure that this message is not drowned in a flurry of others,
we may want to experiment with tossing out all other problem markers
if any of these tokens are seen and complained against.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130124</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-28 01:47:54 -0400</bug_when>
    <thetext> bug 383714 has been raised for the correctness issues i.e for (1) and (3)
from comment#0, while the current bug is retained only for the quality of
diagnostics: i.e (2) and (4) from comment#0.

(In reply to comment #0)

&gt; (4) The following program generates the message &quot;Syntax error on token
&gt;  COLON_COLON, delete this token&quot;, it should instead complain that
&gt; &quot;Reference expressions are available only at source level 1.8 or above&quot;

Here is the program that was supposed to follow:


interface I {
  void foo(int p);
}
public class X&lt;T&gt; {
  I i = X&lt;String&gt;::foo;

  public static void foo(int p) {
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134409</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-09 06:59:07 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; One strategy is to recognize the operators &apos;::&apos; and &apos;-&gt;&apos; which are
&gt; returned as tokens at any source level and issue the &quot;available at
&gt; source level 1.8+&quot; messages upon encountering these tokens. In order
&gt; to make sure that this message is not drowned in a flurry of others,
&gt; we may want to experiment with tossing out all other problem markers
&gt; if any of these tokens are seen and complained against.

IIRC this is also the strategy we followed for java 7 constructs like diamond.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134634</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-09 14:09:13 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #0)
&gt; &gt; One strategy is to recognize the operators &apos;::&apos; and &apos;-&gt;&apos; which are
&gt; &gt; returned as tokens at any source level and issue the &quot;available at
&gt; &gt; source level 1.8+&quot; messages upon encountering these tokens. In order
&gt; &gt; to make sure that this message is not drowned in a flurry of others,
&gt; &gt; we may want to experiment with tossing out all other problem markers
&gt; &gt; if any of these tokens are seen and complained against.
&gt; 
&gt; IIRC this is also the strategy we followed for java 7 constructs like diamond.

I can&apos;t exactly see this for diamond (which isn&apos;t a single token).

Did you perhaps mean handling of number syntax where we see things like this
in Scanner.scanNumber()?

  if (this.sourceLevel &lt; ClassFileConstants.JDK1_7) {
	throw new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);
  }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134736</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-09 17:22:24 -0400</bug_when>
    <thetext>(In reply to comment #3)

&gt; Did you perhaps mean handling of number syntax where we see things like this
&gt; in Scanner.scanNumber()?
&gt; 
&gt;   if (this.sourceLevel &lt; ClassFileConstants.JDK1_7) {
&gt;     throw new InvalidInputException(BINARY_LITERAL_NOT_BELOW_17);
&gt;   }

Likely. Except that in this case, the remaining syntax errors from the
same file are not discarded.

Is there consensus on the value of discarding the other syntax errors ?
Or should we just stick to issuing a NotBelow18 message and let the user
pick that and apply a quick fix ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134855</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-10 00:55:34 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Or should we just stick to issuing a NotBelow18 message and let the user
&gt; pick that and apply a quick fix ?
This is better, since sometimes I want to let errors in a far away line remain while i focus on the immediate work i&apos;m doing in the editor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134856</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-10 00:59:58 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; (In reply to comment #4)
&gt; &gt; Or should we just stick to issuing a NotBelow18 message and let the user
&gt; &gt; pick that and apply a quick fix ?
&gt; This is better, since sometimes I want to let errors in a far away line remain
&gt; while i focus on the immediate work i&apos;m doing in the editor.

That is even when closer to home we have a flurry of messages of dubious value ?
e.g case (2) in comment#0 ? Basically program structure is FUBAR when a lambda
is not recognized as a lambda.

Also note that early experiments are pointing to near zero degradation in
running the scanner in a always-look-ahead mode - much to my surprise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2135283</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-07-10 15:38:19 -0400</bug_when>
    <thetext>It all depends on the recovery and the scope in which errors are discarded. If the compiler can still recover top-level types and body declarations, then I wouldn&apos;t want it to hide problems in other methods just because I wrote &apos;-&gt;&apos; in one place.

But if a method body has a syntax error and it looks like a 1.8 construct, then I&apos;m OK with dropping other errors in that method. Multi-page monster methods are not something we should consider specially.

If you can confirm the near zero degradation in always-look-ahead mode, then that would be the best. IMO, the BETA_JAVA8 compiler should optimize performance for 1.8 code. I would accept a slight regression for older versions if this improves error reporting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2137315</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-16 11:09:49 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; It all depends on the recovery and the scope in which errors are discarded. If
&gt; the compiler can still recover top-level types and body declarations, then I
&gt; wouldn&apos;t want it to hide problems in other methods just because I wrote &apos;-&gt;&apos; in
&gt; one place.
&gt; 
&gt; But if a method body has a syntax error and it looks like a 1.8 construct, then
&gt; I&apos;m OK with dropping other errors in that method. Multi-page monster methods
&gt; are not something we should consider specially.

Good points. BTW, I am not aware if there is a way to arrange so that problems
of certain types bubble up to the top of the view automatically - is this 
possible ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2137336</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-07-16 11:24:27 -0400</bug_when>
    <thetext>&gt; ...a way to arrange so that problems of certain types bubble up to the top...

Not directly. The Problems view has two mechanisms to arrange problems, see the view menu:
- &quot;Group By &gt; Java Problem Type&quot; shows Fatal Errors on top, so it does boost all syntax errors.
- &quot;Sort By &gt; Description&quot; first sorts by severity, then by description.

However, errors initially only show up in the editor and only appear in the Problems view after a save/rebuild operation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138275</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-17 20:27:01 -0400</bug_when>
    <thetext>This is fixed automatically by the new look ahead policy implemented
via the fix for bug 383378.

Test released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4e141be8003d1ef09b5a958dd38e851de76be5f5</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>