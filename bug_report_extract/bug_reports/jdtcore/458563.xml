<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>458563</bug_id>
          
          <creation_ts>2015-01-27 12:53:00 -0500</creation_ts>
          <short_desc>invalid ambiguous method error on Java 8 that isn&apos;t seen on Java 7 (or with javac)</short_desc>
          <delta_ts>2015-04-23 18:48:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andrew Clement">aclement</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>ct</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          <qa_contact name="Stephan Herrmann">stephan.herrmann</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2510895</commentid>
    <comment_count>0</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2015-01-27 12:53:24 -0500</bug_when>
    <thetext>I paste this into a source file X.java in eclipse:
===
interface IStoredNode&lt;T&gt; extends INodeHandle&lt;DocumentImpl&gt;, NodeHandle { }

interface NodeHandle extends INodeHandle&lt;DocumentImpl&gt; { }

class DocumentImpl implements INodeHandle&lt;DocumentImpl&gt; {
	public Object getNodeId() {return null;}
}

interface INodeHandle&lt;D&gt; {
    public Object getNodeId();
}
	 
public class X {
	public void foo(IStoredNode bar) {
		bar.getNodeId();
	}	
}
===
It builds with compliance 1.7, fails with compliance 1.8 (on the call getNodeId I get &quot;The method getNodeId() is ambiguous for the type IStoredNode&quot;). It compiles fine with javac with -source 1.8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2519637</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-02-17 02:05:09 -0500</bug_when>
    <thetext>MSMB computation in 1.7 mode has the following check

in Scope.mostSpecificMethodBinding line 4377
if (original == next.original()) {
			// parameterized superclasses &amp; interfaces may be walked twice from different paths so skip next from now on
			compatibilityLevels[j] = -1;
			continue;
}
which is probably required in 1.8 mode as well. Patch under test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2522773</commentid>
    <comment_count>2</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-02-24 01:10:48 -0500</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/42494</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2522790</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-02-24 02:52:35 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; New Gerrit change created: https://git.eclipse.org/r/42494
@Stephan,  Please review the change above. I&apos;ve added the check mentioned in comment 1 for 1.8 as well and it works fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544221</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-09 09:07:31 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #3)
&gt; (In reply to comment #2)
&gt; &gt; New Gerrit change created: https://git.eclipse.org/r/42494
&gt; @Stephan,  Please review the change above. I&apos;ve added the check mentioned in
&gt; comment 1 for 1.8 as well and it works fine.

Sorry for the long wait, I finally had a look at problem &amp; patch.

Yes, the patch is well in line with prior art. Still it feels a bit like carrying forward a workaround from the 1.5 days, which could perhaps be obsoleted in 1.8.
We have a few situations indeed, where mSMB is called with methods which according to JLS should never be seen here. So we do additional filtering at the latest possible point. My general goal is to move such filtering closer to the location where it should happen according to JLS.

In particular: Please have a look at bug 434044 comment 37 (which holds the record of 5 formal reviews :) ).


In particular:
(In reply to Stephan Herrmann from bug 434044 comment #37)
&gt; 3. A bonus question:
&gt; 
&gt; Could this skipping of duplicate types obsolete the skipping of duplicate
&gt; methods a little further down (see comment &quot;// its possible to walk the same
&gt; superinterface from different classes in the hierarchy&quot;)?
&gt; 
&gt; Maybe after Luna :)

The solution from that bug is applied only by one out of two callers of Scope.findMethodInSuperInterfaces(). I made a quick experiment passing a non-null list visitedTypes also on the second call path, which seems to solve the issue at hand just like the patch proposed here.

Can you please compare both solutions also in terms of: how confident can we be that filtering does *not* drop s.t. relevant, perhaps two different parameterizations of the same thing could be relevant (but then we&apos;d probably already have an error in the inheritance hierarchy)? Your patch only compares originals, in bug 434044 we check for &quot;equivalence&quot; of declaring types ...


I&apos;d also like to note that the root cause of the problem is usage of the RAW type IStoredNode.

Obviously the first advice to users (@Andrew are you reading this? :) ) is: AVOID RAW TYPES (I think I said this before ...):

	public void foo(IStoredNode&lt;?&gt; bar) {
		bar.getNodeId();
	}

Already compiles just fine...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544233</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-09 09:23:17 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; I&apos;d also like to note that the root cause of the problem is usage of the RAW
&gt; type IStoredNode.
&gt; 
&gt; Obviously the first advice to users (@Andrew are you reading this? :) ) is:
&gt; AVOID RAW TYPES (I think I said this before ...):
&gt; 
&gt; 	public void foo(IStoredNode&lt;?&gt; bar) {
&gt; 		bar.getNodeId();
&gt; 	}
&gt; 
&gt; Already compiles just fine...

I meant to suggest adding another regression test for this already-working version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2546094</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-04-14 05:22:25 -0400</bug_when>
    <thetext>Thanks Stephan. 

I have tried to create a test with different parameterizations of the same interface but we always report an error in the hierarchy. 

Modified the patch to use the fix mentioned in comment 4, added the additional test, and released via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=4b38559968afdd37976840873e08c95193b469ad</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550628</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-04-23 07:26:03 -0400</bug_when>
    <thetext>Verified for 4.5M7 using I20150421-0800 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550973</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-23 16:27:35 -0400</bug_when>
    <thetext>*** Bug 465339 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550978</commentid>
    <comment_count>9</comment_count>
    <who name="Chris Tomlinson">ct</who>
    <bug_when>2015-04-23 16:49:31 -0400</bug_when>
    <thetext>Will there be a backport to 4.4.x?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551003</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-23 18:48:53 -0400</bug_when>
    <thetext>4.4.2 has sailed in February, which was the last official release in the 4.4.x stream.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>