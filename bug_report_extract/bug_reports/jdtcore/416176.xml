<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>416176</bug_id>
          
          <creation_ts>2013-08-29 14:27:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][null] null type annotations cause grief on type variables</short_desc>
          <delta_ts>2014-06-28 13:31:57 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2300852</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-29 14:27:57 -0400</bug_when>
    <thetext>// --
import org.eclipse.jdt.annotation.NonNull;

public class X&lt;@NonNull T&gt; {
	T foo(T t) {
		return t;
	}
} 

// ---

produces a stack overflow error. Probably due to a missing unannotated()
implementation in TVB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300853</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-29 14:28:20 -0400</bug_when>
    <thetext>Thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301483</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-31 06:27:55 -0400</bug_when>
    <thetext>This bug indicates several issues where type variables need to be better integrated
with null type annotations.

Issues to be covered:

(A)
Original issue: if a type binding has a null annotation already from its declaration
(see &apos;X&lt;@NonNull T&gt;&apos;, T only exists in the annotated version), unannotated() is the 
identity function, even after hasNullTypeAnnotations() answered true.
The recursion that caused the stack overflow should only be entered when
  this != this.unannotated()
This will also be relevant in the context of bug 415918.

(B)
Need to detect contradictory (+redundant?) annotations:
    public class X&lt;@NonNull T&gt; {
	T foo(@Nullable T t) {
		return t;
	}
    } 

(C)
Need to check against annotation from the type variable&apos;s declaration:
    public class X&lt;@NonNull T&gt; {
	T foo(T t) {
		return null;
	}
    } 

(D)
Only mildly related, but will be covered in the same patch: need to give the proper
error for duplicate methods like:
    public class X&lt;T&gt; {
	T foo(@Nullable T t) {
		return t;
	}
	T foo(@NonNull T t) {
		return t;
	}
    } 
Saying &quot;has the same erasure as another method ...&quot; is not good enough, should 
really say: &quot;duplicate methods&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301496</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-31 07:41:31 -0400</bug_when>
    <thetext>Implementation notes:

(A): solution is already outlined in comment 2.
Rationale: previously I assumed hasNullTypeAnnotations() implies that unannotated()
must be used. For elements, however, where the null annotation is already applied
at the declaration site, looking for an unannotated version makes no sense:
&apos;@NonNull T&apos; does not exist without a null annotation.
Entering the recursion for unannotated() only when this is different from &apos;this&apos;
seems to be the most obvious solution to avoid stack overflow, and to expresses:
&quot;strip off all type annotations *that can be stripped off*&quot;.
I.e., if annotations stick to the element don&apos;t look further.

(B): Detecting contradictions was already implemented. The test case, however,
revealed that annotations on type parameters were resolved too late:
Originally this was done from TypeDeclaration.resolve() (via TypeParameter.resolve()).
This is after methods have resolved their types (STB#resolveTypesFor()), so the chain
Argument.createBinding() -..-&gt; Annotation.resolveType(..) had no chance to see the
incompatibility, because T was still seen as unannotated.
A much better place for resolving type parameters is at the end of
Scope#connectTypeVariables(): early enough to provide required information to
Argument.createBinding() and late enough to already find bounds resolved and
report conflicts between annotations on different parts of the type parameter.
Also the name &apos;connectTypeVariables&apos; seems to suggest that afterwards the type
variables are fully initialized :)

Also ConstructorDeclaration / MethodDeclaration had to be updated to remove now
duplicate calls to typeParameter.resolve().

(C) is also covered by the solution for (B)

(D) MethodBinding#areParametersEqual() needs to compare unannotated() variants.

Released via commit 7935d7046a5948ba0caaa49b731ab944081ed079</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421845</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-28 13:31:57 -0400</bug_when>
    <thetext>For posterity: some of what was done in this bug is superseded by bug 417113 (deep encoding of type annotations). Additionally, bug 438458 will change some of this again.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>