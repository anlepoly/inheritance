<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429969</bug_id>
          
          <creation_ts>2014-03-09 20:16:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Possible RuntimeException in Lambda tangles ECJ</short_desc>
          <delta_ts>2014-03-12 12:37:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Dietrich">daniel.dietrich</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>snorthov</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61855"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="61856"
          type_id="1"
          status="-"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2373562</commentid>
    <comment_count>0</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-09 20:16:01 -0400</bug_when>
    <thetext>[Eclipse 4.3.2, Jdk 1.8 build 132, BETA_JAVA8 1.0.0.v20140309-1413]

ECJ does not compile the following class. I had to open it explicitly, otherwise the Eclipse GUI did not complain. Jdk8 (b132) does compile and run it.


import java.util.Arrays;
import java.util.Optional;


public class Test {
	
    public static void main(String[] args) {
        final String s = Arrays.asList(&quot;test&quot;).stream().reduce(null, (s1,s2) -&gt; {
                // THE FOLLOWING LINE CAUSES THE PROBLEM
                require(s1 != null || s2 != null, &quot;both strings are null&quot;);
                    return (s1 != null) ? s1 : s2;
            }, (s1,s2) -&gt; (s1 != null) ? s1 : s2);
	
        System.out.println(s);

    }

    static void require(boolean condition, String msg) throws RuntimeException {
        if (!condition) {
            throw new RuntimeException(msg);
        }
    }

}


ERROR MESSAGE: Type mismatch: cannot convert from Object to String</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373564</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-09 20:18:07 -0400</bug_when>
    <thetext>Thanks, will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373568</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-09 20:54:58 -0400</bug_when>
    <thetext>(In reply to Daniel Dietrich from comment #0)
&gt; I had to open it explicitly,
&gt; otherwise the Eclipse GUI did not complain . 

Daniel, what do you mean by that ? If I copy + paste the code from comment#0
I do see an error in the IDE.

I believe this a recent regression caused by the partial fix released on
behalf of https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430. I&apos;ll follow
up, Thanks for the report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373591</commentid>
    <comment_count>3</comment_count>
      <attachid>240703</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 02:56:32 -0400</bug_when>
    <thetext>Created attachment 240703
Proposed patch

Fix under consideration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373592</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 02:56:59 -0400</bug_when>
    <thetext>Stephan &amp; Jay, please review. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373637</commentid>
    <comment_count>5</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-10 05:05:51 -0400</bug_when>
    <thetext>Thank you Srikanth,

&gt; Daniel, what do you mean by that ?
&gt; If I copy + paste the code from comment#0 I do see an error in the IDE.

I opened a project that worked previously (with older versions of the plugin) and (not 100% sure about this) made eventually a clean project.
No editor was open and in the Project Explorer all source files had no error marker/icon.
When I opened the java file containing similar code to comment #0, the errors where displayed in the editor (as you described) *and* additionally the file was marked with an error icon in the project explorer.

Perhaps it is my fault. I will take an eye on it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373722</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 07:35:41 -0400</bug_when>
    <thetext>+1. Patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373723</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 07:38:42 -0400</bug_when>
    <thetext>Thanks Jay, Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=bec584357dd9f5416d76c043f6bc97254c43e356

Daniel, please verify when the next build available. Thanks for the report
and thanks for continued testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373725</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 07:39:22 -0400</bug_when>
    <thetext>Stephan, please also review, there are changes in type inference implementation.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373765</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 09:04:59 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; Stephan, please also review, there are changes in type inference
&gt; implementation.

I&apos;ll take a look later today. Meanwhile: can you share a word on what problem those changes are solving? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373854</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 10:52:00 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; (In reply to Srikanth Sankaran from comment #8)
&gt; &gt; Stephan, please also review, there are changes in type inference
&gt; &gt; implementation.
&gt; 
&gt; I&apos;ll take a look later today. Meanwhile: can you share a word on what
&gt; problem those changes are solving? Thanks.

Basically, in ConstraintExceptionFormula, I see some code that asserts
that every exception thrown must be on the throw specification - which
does not apply to unchecked exceptions. The fix also includes some changes
to avoid creating constraints if the throw section does not mention any
type variables. There is a related fix to RE also.

Feel free to amend if you see something amiss. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373964</commentid>
    <comment_count>11</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-10 13:26:42 -0400</bug_when>
    <thetext>I spend a significant amount of time in Eclipse, so I&apos;m really interested in making it better :-)
I will check for updates to re-test this item.


(In reply to Srikanth Sankaran from comment #7)
&gt; Thanks Jay, Fix and tests released here:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=bec584357dd9f5416d76c043f6bc97254c43e356
&gt; 
&gt; Daniel, please verify when the next build available. Thanks for the report
&gt; and thanks for continued testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374081</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 18:10:03 -0400</bug_when>
    <thetext>*** Bug 430040 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374083</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 18:10:54 -0400</bug_when>
    <thetext>*** Bug 430043 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374089</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 18:43:39 -0400</bug_when>
    <thetext>Thanks for catching this - seems very relevant, given we already have two duplicates.


Here&apos;s the key sentence from the spec (18.2.5):

&quot;Then let E&apos;1, ..., E&apos;m be the checked exceptions that the lambda body can throw (11.2)....&quot;

Somehow I assumed that &apos;thrownExceptions&apos; are always only the check ones.
My bad.
So the part about filtering unchecked exceptions is good, although I&apos;d probably move it into Statement.recordExceptionsForEnclosingLambda() (no need / confusing to record irrelevant information).


However, I cannot easily agree to deleting the implementation of this part from 18.2.5:

&quot;If n = 0 (the function type&apos;s throws clause consists only of proper types), then if there exists some i (1  i  m) such that E&apos;i is not a subtype of any proper type in the throws clause, the constraint reduces to false; otherwise, the constraint reduces to true.&quot;

This rule changes the outcome from
    ERROR: Unhandled exception type IOException
to
    ERROR: Type mismatch: cannot convert from Object to String

The latter is just our bland way of saying: inference failed.

Note that the spec only mentions that exceptions should not influence *overload resolution*, which I believe is established (all happens during invocation type inference). It does NOT state that constraints on exceptions cannot cause the inference to fail (by saying &quot;reduces to false&quot; the spec is explicit that exception constraints can fail the inference in many ways).

Thus I&apos;d rather vote for reverting that part of the patch.


Seeing that the error message is unfortunate, to say the least, should we do a point fix to error reporting, like answering:

Inference for this invocation failed due to unhandled exception IOException

?

We could easily do this for all causes where indeed an exception constraint is the reason to fail.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374100</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 19:41:37 -0400</bug_when>
    <thetext>I do have a patch in hand, that looks &quot;more correct&quot;, but we seem to be blocked by the incompleteness in bug 429430: strict failing by the book would cause regression in GRT_1_8.testBug420525 (and possible more).

So, re-evaluating what we have here under the given constraints (sic) from bug 429430:

My current thinking for GA is, we should indeed suppress that particular inference failure, but only for lambdas, for RE the inference should already be complete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374102</commentid>
    <comment_count>16</comment_count>
      <attachid>240735</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 20:07:54 -0400</bug_when>
    <thetext>Created attachment 240735
alternative proposal (draft)

This is what I have in mind (not fully tested though).

It may be easier to see the essence by comparing ConstraintExceptionFormula &amp; Statement to the state before this bug (just two small added chunk).

Effectively:
- filter unchecked exceptions before recording
- specifically filter the one &quot;return FALSE&quot; for lambdas (to be reverted via bug 429430).

The patch shows a funny change in LET.test430015(): somehow the lambda method slipped away from the expected slot ... I added another print to make sure we really catch the lambda :) - I hope this isn&apos;t indication of some other unkosher change.


Given that we know we have more work to do here post GA, I won&apos;t insist in this particular way of fixing ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374242</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 06:23:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)
&gt; Created attachment 240735 [details]
&gt; alternative proposal (draft)

Stephan, I&apos;ll study this closely, but at a first glance it looks wrong
that the filtering of unchecked exceptions would be removed from
CEF. What happens if RE&apos;s binding&apos;s thrownExceptions contains one or
more unchecked exceptions ? I&apos;ll construct a test case later today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374247</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 06:26:49 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)

&gt; However, I cannot easily agree to deleting the implementation of this part
&gt; from 18.2.5:
&gt; 
&gt; &quot;If n = 0 (the function type&apos;s throws clause consists only of proper types),
&gt; then if there exists some i (1  i  m) such that E&apos;i is not a subtype of
&gt; any proper type in the throws clause, the constraint reduces to false;
&gt; otherwise, the constraint reduces to true.&quot;

That looks odd to me at least at first glance.

&gt; This rule changes the outcome from
&gt;     ERROR: Unhandled exception type IOException
&gt; to
&gt;     ERROR: Type mismatch: cannot convert from Object to String
&gt; 
&gt; The latter is just our bland way of saying: inference failed.

FWIW, javac message is not about inference failure, but about unhandled
exception. Allowing inference to finish normally and have the error reported
subsequently results in cleaner diagnostics.

Neither javac doing it one way nor cleaner messages is reason to not to
do what the spec says - 

OK, more later after I have spent a bit more time with your alternate proposal.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374272</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 07:16:31 -0400</bug_when>
    <thetext>We discussed this and the plan is to leave things as they are at the moment - 
there is a defect already (https://bugs.eclipse.org/bugs/show_bug.cgi?id=429430) 
where follow up corrections will be applied - 

As we have no open user complaints at this point - resolving. If in the
days leading up to GA, we hear of fresh reports, will evaluate them on their
own merit to decide course of action.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374413</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-11 10:48:12 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; FWIW, javac message is not about inference failure, but about unhandled
&gt; exception. Allowing inference to finish normally and have the error reported
&gt; subsequently results in cleaner diagnostics.

This can and should be handle via bug 404675 :)
 
&gt; Neither javac doing it one way nor cleaner messages is reason to not to
&gt; do what the spec says - 
&gt; 
&gt; OK, more later after I have spent a bit more time with your alternate
&gt; proposal.

attachment 240734 from bug 429430 comment 25 already contains first micro steps towards what I have in mind for bug 404675.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375034</commentid>
    <comment_count>21</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-12 12:36:12 -0400</bug_when>
    <thetext>&gt; Daniel, please verify when the next build available. Thanks for the report
&gt; and thanks for continued testing.

Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375038</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 12:37:51 -0400</bug_when>
    <thetext>Verified by reporter in comment#21. Thanks.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240703</attachid>
            <date>2014-03-10 02:56:00 -0400</date>
            <delta_ts>2014-03-10 02:56:32 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>throws.patch</filename>
            <type>text/plain</type>
            <size>8429</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggNjUwZTMyYi4uYjU0MzgyZSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTM2OTAsNiArMzY5MCwzMiBAQAogCQkJfSwKIAkJCSJkb25lIik7CiB9CisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI5OTY5LCBbMS44XVtjb21w
aWxlcl0gUG9zc2libGUgUnVudGltZUV4Y2VwdGlvbiBpbiBMYW1iZGEgdGFuZ2xlcyBFQ0oKK3B1
YmxpYyB2b2lkIHRlc3Q0Mjk5NjkoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xu
IiArCisJCQkJImltcG9ydCBqYXZhLnV0aWwuT3B0aW9uYWw7XG4iICsKKwkJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCQkiICAgICAgICBmaW5hbCBTdHJpbmcgcyA9IEFycmF5cy5hc0xpc3Qo
XCJkb25lXCIpLnN0cmVhbSgpLnJlZHVjZShudWxsLCAoczEsczIpIC0+IHtcbiIgKworCQkJCSIg
ICAgICAgICAgICAgICAgLy8gVEhFIEZPTExPV0lORyBMSU5FIENBVVNFUyBUSEUgUFJPQkxFTVxu
IiArCisJCQkJIiAgICAgICAgICAgICAgICByZXF1aXJlKHMxICE9IG51bGwgfHwgczIgIT0gbnVs
bCwgXCJib3RoIHN0cmluZ3MgYXJlIG51bGxcIik7XG4iICsKKwkJCQkiICAgICAgICAgICAgICAg
ICAgICByZXR1cm4gKHMxICE9IG51bGwpID8gczEgOiBzMjtcbiIgKworCQkJCSIgICAgICAgICAg
ICB9LCAoczEsczIpIC0+IChzMSAhPSBudWxsKSA/IHMxIDogczIpO1xuIiArCisJCQkJIglcbiIg
KworCQkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihzKTtcbiIgKworCQkJCSIgICAgfVxu
IiArCisJCQkJIiAgICBzdGF0aWMgdm9pZCByZXF1aXJlKGJvb2xlYW4gY29uZGl0aW9uLCBTdHJp
bmcgbXNnKSB0aHJvd3MgUnVudGltZUV4Y2VwdGlvbiB7XG4iICsKKwkJCQkiICAgICAgICBpZiAo
IWNvbmRpdGlvbikge1xuIiArCisJCQkJIiAgICAgICAgICAgIHRocm93IG5ldyBSdW50aW1lRXhj
ZXB0aW9uKG1zZyk7XG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkiICAgIH1cbiIgKwor
CQkJCSJ9XG4iCisJCQl9LAorCQkJImRvbmUiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVz
dENsYXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJl
c3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVM
YW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBmOWMyNjJkLi43ZTcwZTQyIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZl
TGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTg5MDMsNiArODkwMyw2NiBAQAogCQkiTGFt
YmRhIGV4cHJlc3Npb25zIGNhbm5vdCBkZWNsYXJlIGEgdGhpcyBwYXJhbWV0ZXJcbiIgKyAKIAkJ
Ii0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQyOTk2OSwgWzEuOF1bY29tcGlsZXJdIFBvc3NpYmxlIFJ1bnRpbWVFeGNl
cHRpb24gaW4gTGFtYmRhIHRhbmdsZXMgRUNKCitwdWJsaWMgdm9pZCB0ZXN0NDI5OTY5KCkgewor
CXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwK
KwkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEudXRp
bC5PcHRpb25hbDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICAgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAg
IGZpbmFsIFN0cmluZyBzID0gQXJyYXlzLmFzTGlzdChcImRvbmVcIikuc3RyZWFtKCkucmVkdWNl
KG51bGwsIChzMSxzMikgLT4ge1xuIiArCisJCQkJIiAgICAgICAgICAgICAgICAvLyBUSEUgRk9M
TE9XSU5HIExJTkUgQ0FVU0VTIFRIRSBQUk9CTEVNXG4iICsKKwkJCQkiICAgICAgICAgICAgICAg
IHJlcXVpcmUoczEgIT0gbnVsbCB8fCBzMiAhPSBudWxsLCBcImJvdGggc3RyaW5ncyBhcmUgbnVs
bFwiKTtcbiIgKworCQkJCSIgICAgICAgICAgICAgICAgICAgIHJldHVybiAoczEgIT0gbnVsbCkg
PyBzMSA6IHMyO1xuIiArCisJCQkJIiAgICAgICAgICAgIH0sIChzMSxzMikgLT4gKHMxICE9IG51
bGwpID8gczEgOiBzMik7XG4iICsKKwkJCQkiCVxuIiArCisJCQkJIiAgICAgICAgU3lzdGVtLm91
dC5wcmludGxuKHMpO1xuIiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkiICAgIHN0YXRpYyB2b2lk
IHJlcXVpcmUoYm9vbGVhbiBjb25kaXRpb24sIFN0cmluZyBtc2cpIHRocm93cyBqYXZhLmlvLklP
RXhjZXB0aW9uIHtcbiIgKworCQkJCSIgICAgICAgIGlmICghY29uZGl0aW9uKSB7XG4iICsKKwkJ
CQkiICAgICAgICAgICAgdGhyb3cgbmV3IGphdmEuaW8uSU9FeGNlcHRpb24obXNnKTtcbiIgKwor
CQkJCSIgICAgICAgIH1cbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJ
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIp
XG4iICsgCisJCQkiCWltcG9ydCBqYXZhLnV0aWwuT3B0aW9uYWw7XG4iICsgCisJCQkiCSAgICAg
ICBeXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJUaGUgaW1wb3J0IGphdmEudXRpbC5PcHRp
b25hbCBpcyBuZXZlciB1c2VkXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkJIglyZXF1aXJlKHMxICE9IG51bGwg
fHwgczIgIT0gbnVsbCwgXCJib3RoIHN0cmluZ3MgYXJlIG51bGxcIik7XG4iICsgCisJCQkiCV5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkJCSJVbmhhbmRsZWQgZXhjZXB0aW9uIHR5cGUgSU9FeGNlcHRpb25cbiIgKyAKKwkJ
CSItLS0tLS0tLS0tXG4iKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD00Mjk5NjksIFsxLjhdW2NvbXBpbGVyXSBQb3NzaWJsZSBSdW50aW1lRXhj
ZXB0aW9uIGluIExhbWJkYSB0YW5nbGVzIEVDSgorcHVibGljIHZvaWQgdGVzdDQyOTk2OWEoKSB7
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEi
LAorCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkiICAgIHZvaWQgZm9vKCkgdGhyb3dzIFJ1
bnRpbWVFeGNlcHRpb247XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKworCQkJCSIJc3RhdGljIHZvaWQgZ29vKCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsKKwkJ
CQkiCQl0aHJvdyBuZXcgRXhjZXB0aW9uKCk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVi
bGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJIgkJSSBpID0g
WDo6Z29vO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIgorCQkJfSwKKwkJCSItLS0tLS0t
LS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQki
CUkgaSA9IFg6OmdvbztcbiIgKyAKKwkJCSIJICAgICAgXl5eXl5eXG4iICsgCisJCQkiVW5oYW5k
bGVkIGV4Y2VwdGlvbiB0eXBlIEV4Y2VwdGlvblxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOwor
fQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFt
YmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZl
cmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQppbmRleCAxZWVjZjE3Li41MzI2NWE2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5j
ZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2
YQpAQCAtNTY5LDcgKzU2OSw3IEBACiAgICAgICAgIFR5cGVCaW5kaW5nIFtdIG1ldGhvZEV4Y2Vw
dGlvbnMgPSB0aGlzLmJpbmRpbmcudGhyb3duRXhjZXB0aW9uczsKICAgICAgICAgVHlwZUJpbmRp
bmcgW10ga29zaGVyRXhjZXB0aW9ucyA9IHRoaXMuZGVzY3JpcHRvci50aHJvd25FeGNlcHRpb25z
OwogICAgICAgICBuZXh0OiBmb3IgKGludCBpID0gMCwgaU1heCA9IG1ldGhvZEV4Y2VwdGlvbnMu
bGVuZ3RoOyBpIDwgaU1heDsgaSsrKSB7Ci0gICAgICAgIAlpZiAobWV0aG9kRXhjZXB0aW9uc1tp
XS5pc1VuY2hlY2tlZEV4Y2VwdGlvbih0cnVlKSkgeworICAgICAgICAJaWYgKG1ldGhvZEV4Y2Vw
dGlvbnNbaV0uaXNVbmNoZWNrZWRFeGNlcHRpb24oZmFsc2UpKSB7CiAgICAgICAgIAkJY29udGlu
dWUgbmV4dDsKICAgICAJCX0KICAgICAgICAgCWZvciAoaW50IGogPSAwLCBqTWF4ID0ga29zaGVy
RXhjZXB0aW9ucy5sZW5ndGg7IGogPCBqTWF4OyBqKyspIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQ29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29u
c3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2YQppbmRleCBmZmIxNWU1Li5mYzJjZmUyIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYS5qYXZhCkBAIC03NCw2
ICs3NCwxMyBAQAogCQlmb3IgKGludCBpID0gMDsgaSA8IHRocm93bi5sZW5ndGg7IGkrKykKIAkJ
CWlmICghdGhyb3duW2ldLmlzUHJvcGVyVHlwZSh0cnVlKSkKIAkJCQllW24rK10gPSAoSW5mZXJl
bmNlVmFyaWFibGUpIHRocm93bltpXTsgLy8gdGhyb3duW2ldIGlzIG5vdCBhIHByb3BlciB0eXBl
LCBzaW5jZSBpdCdzIGFuIGV4Y2VwdGlvbiBpdCBtdXN0IGJlIGFuIGluZmVyZW5jZVZhcmlhYmxl
LCByaWdodD8KKwkJCisJCS8qIElmIHRocm93IHNwZWNpZmljYXRpb24gZG9lcyBub3QgZW5jb2Rl
IGFueSB0eXBlIHBhcmFtZXRlcnMsIHRoZXJlIGFyZSBubyBjb25zdHJhaW50cyB0byBiZSBnbGVh
bmVkL2dhdGhlcmVkIGZyb20gdGhlIHRocm93IHNpdGVzLgorCQkgICBTZWUgYWxzbyB0aGF0IHRo
cm93biBleGNlcHRpb25zIGFyZSBub3QgYWxsb3dlZCB0byBpbmZsdWVuY2UgY29tcGF0aWJpbGl0
eSBhbmQgb3ZlcmxvYWQgcmVzb2x1dGlvbi4KKwkJKi8KKwkJaWYgKG4gPT0gMCkKKwkJCXJldHVy
biBUUlVFOworCQkKIAkJVHlwZUJpbmRpbmdbXSBlUHJpbWUgPSBudWxsOwogCQlpZiAodGhpcy5s
ZWZ0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewogCQkJTGFtYmRhRXhwcmVzc2lvbiBs
YW1iZGEgPSAoKExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdCkuZ2V0UmVzb2x2ZWRDb3B5Rm9y
SW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOwpAQCAtODgsMjkgKzk1LDIxIEBACiAJCQkJ
ZVByaW1lID0gbWV0aG9kLnRocm93bkV4Y2VwdGlvbnM7CiAJCX0KIAkJaWYgKGVQcmltZSA9PSBu
dWxsKQotCQkJcmV0dXJuIFRSVUU7IC8vIFRPRE8gaXMgaXQgYSBidWcgaWYgd2UgYWN0dWFsbHkg
Z2V0IGhlcmU/Ci0JCWludCBtID0gZVByaW1lLmxlbmd0aDsKLQkJaWYgKG4gPT0gMCkgewotCQkJ
YWN0dWFsOiBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgewotCQkJCWZvciAoaW50IGogPSAw
OyBqIDwgdGhyb3duLmxlbmd0aDsgaisrKQotCQkJCQlpZiAoZVByaW1lW2ldLmlzQ29tcGF0aWJs
ZVdpdGgodGhyb3duW2pdKSkKLQkJCQkJCWNvbnRpbnVlIGFjdHVhbDsKLQkJCQlyZXR1cm4gRkFM
U0U7Ci0JCQl9CiAJCQlyZXR1cm4gVFJVRTsKLQkJfSBlbHNlIHsKLQkJCUxpc3Q8Q29uc3RyYWlu
dEZvcm11bGE+IHJlc3VsdCA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7Ci0J
CQlhY3R1YWw6IGZvciAoaW50IGkgPSAwOyBpIDwgbTsgaSsrKSB7Ci0JCQkJZm9yIChpbnQgaiA9
IDA7IGogPCB0aHJvd24ubGVuZ3RoOyBqKyspCi0JCQkJCWlmICh0aHJvd25bal0uaXNQcm9wZXJU
eXBlKHRydWUpICYmIGVQcmltZVtpXS5pc0NvbXBhdGlibGVXaXRoKHRocm93bltqXSkpCi0JCQkJ
CQljb250aW51ZSBhY3R1YWw7Ci0JCQkJZm9yIChpbnQgaiA9IDA7IGogPCBuOyBqKyspCi0JCQkJ
CXJlc3VsdC5hZGQoQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShlUHJpbWVbaV0sIGVbal0s
IFNVQlRZUEUpKTsKLQkJCX0JCQkJCisJCWludCBtID0gZVByaW1lLmxlbmd0aDsKKwkJTGlzdDxD
b25zdHJhaW50Rm9ybXVsYT4gcmVzdWx0ID0gbmV3IEFycmF5TGlzdDxDb25zdHJhaW50Rm9ybXVs
YT4oKTsKKwkJYWN0dWFsOiBmb3IgKGludCBpID0gMDsgaSA8IG07IGkrKykgeworCQkJaWYgKGVQ
cmltZVtpXS5pc1VuY2hlY2tlZEV4Y2VwdGlvbihmYWxzZSkpCisJCQkJY29udGludWU7CisJCQlm
b3IgKGludCBqID0gMDsgaiA8IHRocm93bi5sZW5ndGg7IGorKykKKwkJCQlpZiAodGhyb3duW2pd
LmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBlUHJpbWVbaV0uaXNDb21wYXRpYmxlV2l0aCh0aHJvd25b
al0pKQorCQkJCQljb250aW51ZSBhY3R1YWw7CiAJCQlmb3IgKGludCBqID0gMDsgaiA8IG47IGor
KykKLQkJCQlpbmZlcmVuY2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuaW5UaHJvd3MuYWRkKGVbal0p
OwotCQkJcmV0dXJuIHJlc3VsdC50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtyZXN1bHQu
c2l6ZSgpXSk7Ci0JCX0KKwkJCQlyZXN1bHQuYWRkKENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVh
dGUoZVByaW1lW2ldLCBlW2pdLCBTVUJUWVBFKSk7CisJCX0JCQkJCisJCWZvciAoaW50IGogPSAw
OyBqIDwgbjsgaisrKQorCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmluVGhyb3dz
LmFkZChlW2pdKTsKKwkJcmV0dXJuIHJlc3VsdC50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVs
YVtyZXN1bHQuc2l6ZSgpXSk7CiAJfQogCiAJQ29sbGVjdGlvbjxJbmZlcmVuY2VWYXJpYWJsZT4g
aW5wdXRWYXJpYWJsZXMoZmluYWwgSW5mZXJlbmNlQ29udGV4dDE4IGNvbnRleHQpIHs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240735</attachid>
            <date>2014-03-10 20:07:00 -0400</date>
            <delta_ts>2014-03-10 20:07:54 -0400</delta_ts>
            <desc>alternative proposal (draft)</desc>
            <filename>Bug-429969--18compiler-Possible-RuntimeException-in-.patch</filename>
            <type>text/plain</type>
            <size>4876</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggMThmYmRhZi4uYTc3NTBlMyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTM3MzEsMTIgKzM3MzEsMTMgQEAKIAkJCQkiICAgIH1cbiIgKwogCQkJCSIgICAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCiAJCQkJIiAgICAgICAgTWV0
aG9kW10gbWV0aG9kcyA9IFguY2xhc3MuZ2V0RGVjbGFyZWRNZXRob2RzKCk7XG4iICsKLQkJCQki
ICAgICAgICBQYXJhbWV0ZXJbXSBwYXJhbWV0ZXJzID0gbWV0aG9kc1syXS5nZXRQYXJhbWV0ZXJz
KCk7XG4iICsKKwkJCQkiICAgICAgICBQYXJhbWV0ZXJbXSBwYXJhbWV0ZXJzID0gbWV0aG9kc1sx
XS5nZXRQYXJhbWV0ZXJzKCk7XG4iICsKKwkJCQkiCQkgU3lzdGVtLm91dC5wcmludChtZXRob2Rz
WzFdLmdldE5hbWUoKSk7XG4iICsKIAkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oQXJy
YXlzLmFzTGlzdChwYXJhbWV0ZXJzKSk7XG4iICsKIAkJCQkiICAgIH1cbiIgKwogCQkJCSJ9XG4i
CiAJCQl9LAotCQkJIltpbnQgYXJnMF0iKTsKKwkJCSJsYW1iZGEkMFtpbnQgYXJnMF0iKTsKIH0K
IHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuY2xhc3M7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQppbmRleCA5ZjNhMmRhLi4zNjQxNjQ4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50
LmphdmEKQEAgLTM3Niw3ICszNzYsOCBAQAogCWlmIChtZXRob2RTY29wZSAhPSBudWxsICYmIG1l
dGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRleHQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7
CiAJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIG1ldGhvZFNj
b3BlLnJlZmVyZW5jZUNvbnRleHQ7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhyb3duRXhjZXB0
aW9ucy5sZW5ndGg7IGkrKykKLQkJCWxhbWJkYS50aHJvd3NFeGNlcHRpb24odGhyb3duRXhjZXB0
aW9uc1tpXSk7CisJCQlpZiAoIXRocm93bkV4Y2VwdGlvbnNbaV0uaXNVbmNoZWNrZWRFeGNlcHRp
b24oZmFsc2UpKQorCQkJCWxhbWJkYS50aHJvd3NFeGNlcHRpb24odGhyb3duRXhjZXB0aW9uc1tp
XSk7CiAJfQogfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhjZXB0
aW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVs
YS5qYXZhCmluZGV4IGZjMmNmZTIuLjk4NTUwYTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0
cmFpbnRFeGNlcHRpb25Gb3JtdWxhLmphdmEKQEAgLTc0LDEzICs3NCw2IEBACiAJCWZvciAoaW50
IGkgPSAwOyBpIDwgdGhyb3duLmxlbmd0aDsgaSsrKQogCQkJaWYgKCF0aHJvd25baV0uaXNQcm9w
ZXJUeXBlKHRydWUpKQogCQkJCWVbbisrXSA9IChJbmZlcmVuY2VWYXJpYWJsZSkgdGhyb3duW2ld
OyAvLyB0aHJvd25baV0gaXMgbm90IGEgcHJvcGVyIHR5cGUsIHNpbmNlIGl0J3MgYW4gZXhjZXB0
aW9uIGl0IG11c3QgYmUgYW4gaW5mZXJlbmNlVmFyaWFibGUsIHJpZ2h0PwotCQkKLQkJLyogSWYg
dGhyb3cgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBlbmNvZGUgYW55IHR5cGUgcGFyYW1ldGVycywg
dGhlcmUgYXJlIG5vIGNvbnN0cmFpbnRzIHRvIGJlIGdsZWFuZWQvZ2F0aGVyZWQgZnJvbSB0aGUg
dGhyb3cgc2l0ZXMuCi0JCSAgIFNlZSBhbHNvIHRoYXQgdGhyb3duIGV4Y2VwdGlvbnMgYXJlIG5v
dCBhbGxvd2VkIHRvIGluZmx1ZW5jZSBjb21wYXRpYmlsaXR5IGFuZCBvdmVybG9hZCByZXNvbHV0
aW9uLgotCQkqLwotCQlpZiAobiA9PSAwKQotCQkJcmV0dXJuIFRSVUU7Ci0JCQogCQlUeXBlQmlu
ZGluZ1tdIGVQcmltZSA9IG51bGw7CiAJCWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBMYW1iZGFF
eHByZXNzaW9uKSB7CiAJCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9ICgoTGFtYmRhRXhwcmVz
c2lvbikgdGhpcy5sZWZ0KS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodGhp
cy5yaWdodCk7CkBAIC05NSwyMSArODgsMzMgQEAKIAkJCQllUHJpbWUgPSBtZXRob2QudGhyb3du
RXhjZXB0aW9uczsKIAkJfQogCQlpZiAoZVByaW1lID09IG51bGwpCi0JCQlyZXR1cm4gVFJVRTsK
KwkJCXJldHVybiBUUlVFOyAvLyBUT0RPIGlzIGl0IGEgYnVnIGlmIHdlIGFjdHVhbGx5IGdldCBo
ZXJlPwogCQlpbnQgbSA9IGVQcmltZS5sZW5ndGg7Ci0JCUxpc3Q8Q29uc3RyYWludEZvcm11bGE+
IHJlc3VsdCA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7Ci0JCWFjdHVhbDog
Zm9yIChpbnQgaSA9IDA7IGkgPCBtOyBpKyspIHsKLQkJCWlmIChlUHJpbWVbaV0uaXNVbmNoZWNr
ZWRFeGNlcHRpb24oZmFsc2UpKQotCQkJCWNvbnRpbnVlOwotCQkJZm9yIChpbnQgaiA9IDA7IGog
PCB0aHJvd24ubGVuZ3RoOyBqKyspCi0JCQkJaWYgKHRocm93bltqXS5pc1Byb3BlclR5cGUodHJ1
ZSkgJiYgZVByaW1lW2ldLmlzQ29tcGF0aWJsZVdpdGgodGhyb3duW2pdKSkKLQkJCQkJY29udGlu
dWUgYWN0dWFsOworCQlpZiAobiA9PSAwKSB7CisJCQlhY3R1YWw6IGZvciAoaW50IGkgPSAwOyBp
IDwgbTsgaSsrKSB7CisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCB0aHJvd24ubGVuZ3RoOyBqKysp
CisJCQkJCWlmIChlUHJpbWVbaV0uaXNDb21wYXRpYmxlV2l0aCh0aHJvd25bal0pKQorCQkJCQkJ
Y29udGludWUgYWN0dWFsOworCQkJCS8vIEZJWE1FOiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQsIGJ1
dCBwcmV2ZW50cyBib2d1cyBpbmZlcmVuY2UgZmFpbHVyZSBkdWUgdG8gbGFja2luZyBmbG93IGFu
YWx5c2lzCisJCQkJaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pCisJ
CQkJCXJldHVybiBUUlVFOworCQkJCS8vIC0tLQorCQkJCXJldHVybiBGQUxTRTsKKwkJCX0KKwkJ
CXJldHVybiBUUlVFOworCQl9IGVsc2UgeworCQkJTGlzdDxDb25zdHJhaW50Rm9ybXVsYT4gcmVz
dWx0ID0gbmV3IEFycmF5TGlzdDxDb25zdHJhaW50Rm9ybXVsYT4oKTsKKwkJCWFjdHVhbDogZm9y
IChpbnQgaSA9IDA7IGkgPCBtOyBpKyspIHsKKwkJCQlmb3IgKGludCBqID0gMDsgaiA8IHRocm93
bi5sZW5ndGg7IGorKykKKwkJCQkJaWYgKHRocm93bltqXS5pc1Byb3BlclR5cGUodHJ1ZSkgJiYg
ZVByaW1lW2ldLmlzQ29tcGF0aWJsZVdpdGgodGhyb3duW2pdKSkKKwkJCQkJCWNvbnRpbnVlIGFj
dHVhbDsKKwkJCQlmb3IgKGludCBqID0gMDsgaiA8IG47IGorKykKKwkJCQkJcmVzdWx0LmFkZChD
b25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGVQcmltZVtpXSwgZVtqXSwgU1VCVFlQRSkpOwor
CQkJfQkJCQkKIAkJCWZvciAoaW50IGogPSAwOyBqIDwgbjsgaisrKQotCQkJCXJlc3VsdC5hZGQo
Q29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShlUHJpbWVbaV0sIGVbal0sIFNVQlRZUEUpKTsK
LQkJfQkJCQkKLQkJZm9yIChpbnQgaiA9IDA7IGogPCBuOyBqKyspCi0JCQlpbmZlcmVuY2VDb250
ZXh0LmN1cnJlbnRCb3VuZHMuaW5UaHJvd3MuYWRkKGVbal0pOwotCQlyZXR1cm4gcmVzdWx0LnRv
QXJyYXkobmV3IENvbnN0cmFpbnRGb3JtdWxhW3Jlc3VsdC5zaXplKCldKTsKKwkJCQlpbmZlcmVu
Y2VDb250ZXh0LmN1cnJlbnRCb3VuZHMuaW5UaHJvd3MuYWRkKGVbal0pOworCQkJcmV0dXJuIHJl
c3VsdC50b0FycmF5KG5ldyBDb25zdHJhaW50Rm9ybXVsYVtyZXN1bHQuc2l6ZSgpXSk7CisJCX0K
IAl9CiAKIAlDb2xsZWN0aW9uPEluZmVyZW5jZVZhcmlhYmxlPiBpbnB1dFZhcmlhYmxlcyhmaW5h
bCBJbmZlcmVuY2VDb250ZXh0MTggY29udGV4dCkgew==
</data>

          </attachment>
      

    </bug>

</bugzilla>