<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>375394</bug_id>
          
          <creation_ts>2012-03-27 05:54:00 -0400</creation_ts>
          <short_desc>Incorrect type checking for parameterized types</short_desc>
          <delta_ts>2012-04-30 13:44:08 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Eric Bodden">eric</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="49966"
          type_id="1"
          status="+"
          setter="satyam.kandula"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2086115</commentid>
    <comment_count>0</comment_count>
    <who name="Eric Bodden">eric</who>
    <bug_when>2012-03-27 05:54:26 -0400</bug_when>
    <thetext>In the following code, javac rightfully reports a typechecking error:


import java.util.Collection;

public class EclipseBug {

	static &lt;C1,C2 extends Collection&lt;Object&gt;&gt; boolean foo(C1 c, C2 c2) {
		return foo(c2,c); 
	}
	
}


EclipseBug.java:9: &lt;C1,C2&gt;foo(C1,C2) in EclipseBug cannot be applied to (C2,C1)
		return foo(c2,c); 
		       ^


Eclipse does not report this error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2086117</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-27 06:01:59 -0400</bug_when>
    <thetext>3.6.2 and 3.7 reject the code - looks like a regression since
then, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2089334</commentid>
    <comment_count>2</comment_count>
      <attachid>213545</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-04-04 03:14:43 -0400</bug_when>
    <thetext>Created attachment 213545
Patch under consideration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2089403</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-04-04 05:43:12 -0400</bug_when>
    <thetext>All tests pass. Released fix and test via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d93134db10799af61489a9927044406c2353d246.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090064</commentid>
    <comment_count>4</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-05 05:45:17 -0400</bug_when>
    <thetext>I didn&apos;t completely understand the code around, but the fix makes sense and looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091314</commentid>
    <comment_count>5</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-10 02:49:44 -0400</bug_when>
    <thetext>This fix breaks this particular test case
###
public class A {
    B&lt;C, ? extends C&lt;C&gt;, ? extends C&lt;C&gt;&gt; b = new B&lt;&gt;();
}
class B &lt;T, U extends C&lt;T&gt;, V extends U&gt;{}
class C&lt;T&gt; {}
###
Hence reopening</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091315</commentid>
    <comment_count>6</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-10 02:52:58 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; This fix breaks this particular test case
&gt; ###
&gt; public class A {
&gt;     B&lt;C, ? extends C&lt;C&gt;, ? extends C&lt;C&gt;&gt; b = new B&lt;&gt;();
&gt; }
&gt; class B &lt;T, U extends C&lt;T&gt;, V extends U&gt;{}
&gt; class C&lt;T&gt; {}
&gt; ###
&gt; Hence reopening
I haven&apos;t reverted the fix as of now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091918</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-11 06:55:21 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; I haven&apos;t reverted the fix as of now.
I reverted the fix via commit c9393df013a58676e5f14d40d6c8db0b129e07c0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2093914</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-04-16 09:39:46 -0400</bug_when>
    <thetext>The commit from comment#3 had an optimization step which was stricly
not necessary and this step is backfiring due to a lapse somewhere
else:

We were avoiding the step of eliminating any lingering (circular)
type variable reeferences after substitution, only if an type
expression was seen to have embed a type variable reference. i.e

if (substitute.tagBits &amp; TagBits.HasTypeVariable) == 0)) {
    // no type variable is expected in the substitute.
}

However, as the test Satyam as attached shows, there are instances
where this bit is clear even when the type has a type variable in
it - This seems to come about because when Scope.substitute produces
some (new) types via substitution, it does faithfully encode the
HasTypeVariable bit.

My plan is to (a) eliminate this optimization step (b) raise a follow
up defect to take care of the fidelity of HasTypeVariable setting
since it is integral to current problem at hand, predates it and
is also not a strightforward matter and needs close scrutiny.

Patch will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2093924</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-04-16 09:45:06 -0400</bug_when>
    <thetext>(In reply to comment #8)

&gt; However, as the test Satyam as attached shows, there are instances
&gt; where this bit is clear even when the type has a type variable in
&gt; it - This seems to come about because when Scope.substitute produces
&gt; some (new) types via substitution, it does faithfully encode the
&gt; HasTypeVariable bit.

Sorry, I obviously meant to say, ... it does NOT faithfully encode the
HasTypeVariable bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2093979</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-04-16 11:17:50 -0400</bug_when>
    <thetext>Fix and additional tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e42bb70e533d0ad5cda9877f87d88624ffbb7f33</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2100670</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-30 13:44:08 -0400</bug_when>
    <thetext>Verified for 3.8M7 using build I20120429-1800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>213545</attachid>
            <date>2012-04-04 03:14:00 -0400</date>
            <delta_ts>2012-04-04 03:14:43 -0400</delta_ts>
            <desc>Patch under consideration</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>3839</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBmMjk2OGU0Li5lZTdkODFlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC0yNTQ5LDQgKzI1NDksMjMgQEAKIAkJIkNvbXBhcmFibGUgaXMgYSByYXcgdHlwZS4g
UmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgQ29tcGFyYWJsZTxUPiBzaG91bGQgYmUgcGFyYW1l
dGVyaXplZFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzc1Mzk0CitwdWJsaWMgdm9pZCB0ZXN0Mzc1
Mzk0KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlgu
amF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uO1xuIiArCisJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkiICAgIHN0YXRpYyA8QzEsQzIgZXh0ZW5kcyBDb2xsZWN0aW9u
PE9iamVjdD4+IGJvb2xlYW4gZm9vKEMxIGMsIEMyIGMyKSB7XG4iICsKKwkJCSIgICAgICAgIHJl
dHVybiBmb28oYzIsYyk7IFxuIiArCisJCQkiICAgIH1cbiIgKworCQkJIn1cbiIsCisJCX0sCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIg
KyAKKwkJIglyZXR1cm4gZm9vKGMyLGMpOyBcbiIgKyAKKwkJIgkgICAgICAgXl5eXG4iICsgCisJ
CSJCb3VuZCBtaXNtYXRjaDogVGhlIGdlbmVyaWMgbWV0aG9kIGZvbyhDMSwgQzIpIG9mIHR5cGUg
WCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQzIsIEMxKS4gVGhlIGluZmVy
cmVkIHR5cGUgQzEgaXMgbm90IGEgdmFsaWQgc3Vic3RpdHV0ZSBmb3IgdGhlIGJvdW5kZWQgcGFy
YW1ldGVyIDxDMiBleHRlbmRzIENvbGxlY3Rpb248T2JqZWN0Pj5cbiIgKyAKKwkJIi0tLS0tLS0t
LS1cbiIpOworfQogfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4IDMx
NzEwYzQuLjg0NTk1YjQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05NSw3ICs5NSwx
OCBAQAogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdHlwZVZhcmlhYmxlcy5sZW5ndGg7IGkg
PCBsZW5ndGg7IGkrKykgewogCQkgICAgVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUg
PSB0eXBlVmFyaWFibGVzW2ldOwogCQkgICAgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZSA9IG1ldGhv
ZFN1YnN0aXR1dGUudHlwZUFyZ3VtZW50c1tpXTsgLy8gcmV0YWluIGZvciBkaWFnbm9zdGljcwot
CQkgICAgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZUZvckNoZWNrcyA9IFNjb3BlLnN1YnN0aXR1dGUo
bmV3IExpbmdlcmluZ1R5cGVWYXJpYWJsZUVsaW1pbmF0b3IodHlwZVZhcmlhYmxlcywgbnVsbCwg
c2NvcGUpLCBzdWJzdGl0dXRlKTsgLy8gd2hpbGUgdXNpbmcgdGhpcyBmb3IgYm91bmRzIGNoZWNr
CisJCSAgICAvKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
Mzc1Mzk0LCBUbyBhdm9pZCBzcHVyaW91cyBib3VuZHMgY2hlY2sgZmFpbHVyZXMgZHVlIHRvIGNp
cmN1bGFyaXR5IGluIGZvcm1hbCBib3VuZHMsIAorCQkgICAgICAgd2Ugc2hvdWxkIGVsaW1pbmF0
ZSBvbmx5IHRoZSBsaW5nZXJpbmcgZW1iZWRkZWQgdHlwZSB2YXJpYWJsZSByZWZlcmVuY2VzIGFm
dGVyIHN1YnN0aXR1dGlvbiwgbm90IGFsaWVuIHR5cGUgdmFyaWFibGUgcmVmZXJlbmNlcworCQkg
ICAgICAgdGhhdCBjb25zdGl0dXRlIHRoZSBpbmZlcmVuY2UgcGVyIHNlLiBBbHNvIHNob3J0IGNp
cmN1aXQgdGhpcyBzdGVwLCBpZiB0aGUgc3Vic3RpdHV0aW9uIGhhcyBubyB0eXBlIHZhcmlhYmxl
cyBpbiB0aGUgZmlyc3QgcGxhY2UgCisJCSAgICAgICAoYXMgaXQgaXMgZWZmZWN0aXZlbHkgYSBu
b3AuKQorCQkgICAgICovIAorCQkgICAgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZUZvckNoZWNrczsK
KwkJICAgIGlmIChzdWJzdGl0dXRlIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmluZGluZyB8fCAo
KHN1YnN0aXR1dGUudGFnQml0cyAmIFRhZ0JpdHMuSGFzVHlwZVZhcmlhYmxlKSA9PSAwKSkgewor
CQkgICAgCXN1YnN0aXR1dGVGb3JDaGVja3MgPSBzdWJzdGl0dXRlOworCQkgICAgfSBlbHNlIHsK
KwkJICAgIAlzdWJzdGl0dXRlRm9yQ2hlY2tzID0gU2NvcGUuc3Vic3RpdHV0ZShuZXcgTGluZ2Vy
aW5nVHlwZVZhcmlhYmxlRWxpbWluYXRvcih0eXBlVmFyaWFibGVzLCBudWxsLCBzY29wZSksIHN1
YnN0aXR1dGUpOyAvLyB3aGlsZSB1c2luZyB0aGlzIGZvciBib3VuZHMgY2hlY2sKKwkJICAgIH0K
KwkJICAgIAogCQkgICAgaWYgKHVuY2hlY2tlZEFyZ3VtZW50cyAhPSBudWxsICYmIHVuY2hlY2tl
ZEFyZ3VtZW50c1tpXSA9PSBudWxsKSBjb250aW51ZTsgLy8gb25seSBib3VuZCBjaGVjayBpZiBp
bmZlcnJlZCB0aHJvdWdoIDE1LjEyLjIuNgogCQkJc3dpdGNoICh0eXBlVmFyaWFibGUuYm91bmRD
aGVjayhzdWJzdGl0dXRpb24sIHN1YnN0aXR1dGVGb3JDaGVja3MpKSB7CiAJCQkJY2FzZSBUeXBl
Q29uc3RhbnRzLk1JU01BVENIIDo=
</data>

          </attachment>
      

    </bug>

</bugzilla>