<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>335118</bug_id>
          
          <creation_ts>2011-01-23 11:03:00 -0500</creation_ts>
          <short_desc>[null] avoid code pattern that unnecessarily signal potential null in JDT/Core code</short_desc>
          <delta_ts>2012-01-22 09:11:16 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1871298</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-01-23 11:03:47 -0500</bug_when>
    <thetext>The JDT/Core code is currently compiled with
  org.eclipse.jdt.core.compiler.problem.potentialNullReference=ignore

I would like to see us eating our own dog food, here.
However, currently this would bring us as many as 362 additional warnings.

Browsing some of the problems I see a clear majority resulting from the
following coding pattern:

  void foo (Type[] array) {
    int length = array == null ? 0 : array.length;
    for (int i = 0; i &lt; length; i++)
      process(array[i]);
  }

I suggest to make the connection between null checking and shortcutting
the loop explicit as in 

  void foo (Type[] array) {
    if (array != null) {
      int length = array.length;
      for (int i = 0; i &lt; length; i++)
        process(array[i]);
    }
  }

I don&apos;t see sufficient advantage in the former pattern, and by using the
second the compiler will understand our reasoning and not flag potential null.
Of course it would be cool if the analysis would understand the original
pattern, too, but this requires correlation analysis, which we currently
don&apos;t do (and even: correlation involving an int!).

Once this pattern is changed it will be much easier to browse the remaining
warnings for real problems. Perhaps this will unveil further patterns to
either avoid or improve analysis for.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1871487</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-01-24 06:15:40 -0500</bug_when>
    <thetext>See bug 127575 for another reason that makes it hard to enable the preference (speaking for JDT UI here).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1890558</commentid>
    <comment_count>2</comment_count>
      <attachid>189975</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-02-28 12:56:12 -0500</bug_when>
    <thetext>Created attachment 189975
two samples

Here are two samples of what I&apos;m talking about:

Inside ConstructorDeclaration it&apos;s the pure form of the pattern.

In class Main a little more hand-crafting is needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054105</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-22 08:44:12 -0500</bug_when>
    <thetext>The same can be said for fields as well. Turning on the option to include fields will show up similar warnings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054108</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-22 09:11:16 -0500</bug_when>
    <thetext>I see two action items:

1. clean up our code so it can be understood by our null analysis (this bug)

2. make tutorials of some kind disseminating to users what we learned from (1)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>189975</attachid>
            <date>2011-02-28 12:56:00 -0500</date>
            <delta_ts>2011-02-28 12:56:12 -0500</delta_ts>
            <desc>two samples</desc>
            <filename>Bug_335118_0.patch</filename>
            <type>text/plain</type>
            <size>5529</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpJ
bmRleDogYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4u
amF2YQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWlu
LmphdmEsdgpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMzYwCmRpZmYgLXUgLXIxLjM2MCBNYWluLmph
dmEKLS0tIGJhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWlu
LmphdmEJMTYgSmFuIDIwMTEgMjI6NDM6MjEgLTAwMDAJMS4zNjAKKysrIGJhdGNoL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEJMjggRmViIDIwMTEgMTc6
NTE6MDggLTAwMDAKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMjc0LDEwICsyNzQsMTEgQEAKIAkJCQkJ
fQogCQkJCX0KIAkJCX0KLQkJCWludCBsZW5ndGggPSB1bml0U291cmNlID09IG51bGwgPyAwIDog
dW5pdFNvdXJjZS5sZW5ndGg7CisJCQlpbnQgbGVuZ3RoOwogCQkJaWYgKChzdGFydFBvc2l0aW9u
ID4gZW5kUG9zaXRpb24pCiAJCQkJfHwgKChzdGFydFBvc2l0aW9uIDwgMCkgJiYgKGVuZFBvc2l0
aW9uIDwgMCkpCi0JCQkJfHwgbGVuZ3RoID09IDApCisJCQkJfHwgKHVuaXRTb3VyY2UgPT0gbnVs
bCkKKwkJCQl8fCAobGVuZ3RoID0gdW5pdFNvdXJjZS5sZW5ndGgpID09IDApCiAJCQkJcmV0dXJu
IE1lc3NhZ2VzLnByb2JsZW1fbm9Tb3VyY2VJbmZvcm1hdGlvbjsKIAogCQkJU3RyaW5nQnVmZmVy
IGVycm9yQnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigpOwpAQCAtMzM3LDEwICszMzgsMTEgQEAK
IAkJCQkJfQogCQkJCX0KIAkJCX0KLQkJCWludCBsZW5ndGggPSB1bml0U291cmNlPT0gbnVsbCA/
IDAgOiB1bml0U291cmNlLmxlbmd0aDsKKwkJCWludCBsZW5ndGg7CiAJCQlpZiAoKHN0YXJ0UG9z
aXRpb24gPiBlbmRQb3NpdGlvbikKIAkJCQkJfHwgKChzdGFydFBvc2l0aW9uIDwgMCkgJiYgKGVu
ZFBvc2l0aW9uIDwgMCkpCi0JCQkJCXx8IChsZW5ndGggPD0gMCkKKwkJCQkJfHwgKHVuaXRTb3Vy
Y2UgPT0gbnVsbCkKKwkJCQkJfHwgKChsZW5ndGggPSB1bml0U291cmNlLmxlbmd0aCkgPD0gMCkK
IAkJCQkJfHwgKGVuZFBvc2l0aW9uID4gbGVuZ3RoKSkgewogCQkJCXRoaXMucGFyYW1ldGVycy5w
dXQoTG9nZ2VyLlZBTFVFLCBNZXNzYWdlcy5wcm9ibGVtX25vU291cmNlSW5mb3JtYXRpb24pOwog
CQkJCXRoaXMucGFyYW1ldGVycy5wdXQoTG9nZ2VyLlNPVVJDRV9TVEFSVCwgIi0xIik7IC8vJE5P
Ti1OTFMtMSQKQEAgLTI5NDcsOCArMjk0OSwxMCBAQAogICogRXh0ZXJuYWwgQVBJCiAgKi8KIHBy
b3RlY3RlZCBBcnJheUxpc3QgaGFuZGxlQm9vdGNsYXNzcGF0aChBcnJheUxpc3QgYm9vdGNsYXNz
cGF0aHMsIFN0cmluZyBjdXN0b21FbmNvZGluZykgewotIAlmaW5hbCBpbnQgYm9vdGNsYXNzcGF0
aHNTaXplID0gYm9vdGNsYXNzcGF0aHMgPT0gbnVsbCA/IDAgOiBib290Y2xhc3NwYXRocy5zaXpl
KCk7Ci0JaWYgKGJvb3RjbGFzc3BhdGhzU2l6ZSAhPSAwKSB7CisgCWZpbmFsIGludCBib290Y2xh
c3NwYXRoc1NpemU7CisJaWYgKChib290Y2xhc3NwYXRocyAhPSBudWxsKQorCQkmJiAoKGJvb3Rj
bGFzc3BhdGhzU2l6ZSA9IGJvb3RjbGFzc3BhdGhzLnNpemUoKSkgIT0gMCkpCisJewogCQlTdHJp
bmdbXSBwYXRocyA9IG5ldyBTdHJpbmdbYm9vdGNsYXNzcGF0aHNTaXplXTsKIAkJYm9vdGNsYXNz
cGF0aHMudG9BcnJheShwYXRocyk7CiAJCWJvb3RjbGFzc3BhdGhzLmNsZWFyKCk7CkBAIC0yOTcz
LDggKzI5NzcsMTAgQEAKICAqIEV4dGVybmFsIEFQSQogICovCiBwcm90ZWN0ZWQgQXJyYXlMaXN0
IGhhbmRsZUNsYXNzcGF0aChBcnJheUxpc3QgY2xhc3NwYXRocywgU3RyaW5nIGN1c3RvbUVuY29k
aW5nKSB7Ci0JZmluYWwgaW50IGNsYXNzcGF0aHNTaXplID0gY2xhc3NwYXRocyA9PSBudWxsID8g
MCA6IGNsYXNzcGF0aHMuc2l6ZSgpOwotCWlmIChjbGFzc3BhdGhzU2l6ZSAhPSAwKSB7CisJZmlu
YWwgaW50IGNsYXNzcGF0aHNTaXplOworCWlmICgoY2xhc3NwYXRocyAhPSBudWxsKQorCQkmJiAo
KGNsYXNzcGF0aHNTaXplID0gY2xhc3NwYXRocy5zaXplKCkpICE9IDApKQorCXsKIAkJU3RyaW5n
W10gcGF0aHMgPSBuZXcgU3RyaW5nW2NsYXNzcGF0aHNTaXplXTsKIAkJY2xhc3NwYXRocy50b0Fy
cmF5KHBhdGhzKTsKIAkJY2xhc3NwYXRocy5jbGVhcigpOwpJbmRleDogY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRlY2xhcmF0aW9uLmph
dmEKPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbnN0
cnVjdG9yRGVjbGFyYXRpb24uamF2YSx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4xMTIKZGlmZiAt
dSAtcjEuMTEyIENvbnN0cnVjdG9yRGVjbGFyYXRpb24uamF2YQotLS0gY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRlY2xhcmF0aW9uLmph
dmEJOSBOb3YgMjAxMCAxOTo1OToxOSAtMDAwMAkxLjExMgorKysgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRlY2xhcmF0aW9uLmphdmEJ
MjggRmViIDIwMTEgMTc6NTE6MDkgLTAwMDAKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBh
bmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMjU1LDIxICsy
NTUsMjUgQEAKIAlOZXN0ZWRUeXBlQmluZGluZyBuZXN0ZWRUeXBlID0gKE5lc3RlZFR5cGVCaW5k
aW5nKSBkZWNsYXJpbmdDbGFzczsKIAogCVN5bnRoZXRpY0FyZ3VtZW50QmluZGluZ1tdIHN5bnRo
ZXRpY0FyZ3MgPSBuZXN0ZWRUeXBlLnN5bnRoZXRpY0VuY2xvc2luZ0luc3RhbmNlcygpOwotCWZv
ciAoaW50IGkgPSAwLCBtYXggPSBzeW50aGV0aWNBcmdzID09IG51bGwgPyAwIDogc3ludGhldGlj
QXJncy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgewotCQlTeW50aGV0aWNBcmd1bWVudEJpbmRpbmcg
c3ludGhldGljQXJnOwotCQlpZiAoKHN5bnRoZXRpY0FyZyA9IHN5bnRoZXRpY0FyZ3NbaV0pLm1h
dGNoaW5nRmllbGQgIT0gbnVsbCkgewotCQkJY29kZVN0cmVhbS5hbG9hZF8wKCk7Ci0JCQljb2Rl
U3RyZWFtLmxvYWQoc3ludGhldGljQXJnKTsKLQkJCWNvZGVTdHJlYW0uZmllbGRBY2Nlc3MoT3Bj
b2Rlcy5PUENfcHV0ZmllbGQsIHN5bnRoZXRpY0FyZy5tYXRjaGluZ0ZpZWxkLCBudWxsIC8qIGRl
ZmF1bHQgZGVjbGFyaW5nQ2xhc3MgKi8pOworCWlmIChzeW50aGV0aWNBcmdzICE9IG51bGwpIHsK
KwkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHN5bnRoZXRpY0FyZ3MubGVuZ3RoOyBpIDwgbWF4OyBp
KyspIHsKKwkJCVN5bnRoZXRpY0FyZ3VtZW50QmluZGluZyBzeW50aGV0aWNBcmc7CisJCQlpZiAo
KHN5bnRoZXRpY0FyZyA9IHN5bnRoZXRpY0FyZ3NbaV0pLm1hdGNoaW5nRmllbGQgIT0gbnVsbCkg
eworCQkJCWNvZGVTdHJlYW0uYWxvYWRfMCgpOworCQkJCWNvZGVTdHJlYW0ubG9hZChzeW50aGV0
aWNBcmcpOworCQkJCWNvZGVTdHJlYW0uZmllbGRBY2Nlc3MoT3Bjb2Rlcy5PUENfcHV0ZmllbGQs
IHN5bnRoZXRpY0FyZy5tYXRjaGluZ0ZpZWxkLCBudWxsIC8qIGRlZmF1bHQgZGVjbGFyaW5nQ2xh
c3MgKi8pOworCQkJfQogCQl9CiAJfQogCXN5bnRoZXRpY0FyZ3MgPSBuZXN0ZWRUeXBlLnN5bnRo
ZXRpY091dGVyTG9jYWxWYXJpYWJsZXMoKTsKLQlmb3IgKGludCBpID0gMCwgbWF4ID0gc3ludGhl
dGljQXJncyA9PSBudWxsID8gMCA6IHN5bnRoZXRpY0FyZ3MubGVuZ3RoOyBpIDwgbWF4OyBpKysp
IHsKLQkJU3ludGhldGljQXJndW1lbnRCaW5kaW5nIHN5bnRoZXRpY0FyZzsKLQkJaWYgKChzeW50
aGV0aWNBcmcgPSBzeW50aGV0aWNBcmdzW2ldKS5tYXRjaGluZ0ZpZWxkICE9IG51bGwpIHsKLQkJ
CWNvZGVTdHJlYW0uYWxvYWRfMCgpOwotCQkJY29kZVN0cmVhbS5sb2FkKHN5bnRoZXRpY0FyZyk7
Ci0JCQljb2RlU3RyZWFtLmZpZWxkQWNjZXNzKE9wY29kZXMuT1BDX3B1dGZpZWxkLCBzeW50aGV0
aWNBcmcubWF0Y2hpbmdGaWVsZCwgbnVsbCAvKiBkZWZhdWx0IGRlY2xhcmluZ0NsYXNzICovKTsK
KwlpZiAoc3ludGhldGljQXJncyAhPSBudWxsKSB7CisJCWZvciAoaW50IGkgPSAwLCBtYXggPSBz
eW50aGV0aWNBcmdzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQlTeW50aGV0aWNBcmd1bWVu
dEJpbmRpbmcgc3ludGhldGljQXJnOworCQkJaWYgKChzeW50aGV0aWNBcmcgPSBzeW50aGV0aWNB
cmdzW2ldKS5tYXRjaGluZ0ZpZWxkICE9IG51bGwpIHsKKwkJCQljb2RlU3RyZWFtLmFsb2FkXzAo
KTsKKwkJCQljb2RlU3RyZWFtLmxvYWQoc3ludGhldGljQXJnKTsKKwkJCQljb2RlU3RyZWFtLmZp
ZWxkQWNjZXNzKE9wY29kZXMuT1BDX3B1dGZpZWxkLCBzeW50aGV0aWNBcmcubWF0Y2hpbmdGaWVs
ZCwgbnVsbCAvKiBkZWZhdWx0IGRlY2xhcmluZ0NsYXNzICovKTsKKwkJCX0KIAkJfQogCX0KIH0K
</data>

          </attachment>
      

    </bug>

</bugzilla>