<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>362331</bug_id>
          
          <creation_ts>2011-10-28 11:50:00 -0400</creation_ts>
          <short_desc>Resource leak not detected when closeable not assigned to variable</short_desc>
          <delta_ts>2012-01-24 09:53:44 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Arthorne">john_arthorne</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>deepakazad</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2018383</commentid>
    <comment_count>0</comment_count>
    <who name="John Arthorne">john_arthorne</who>
    <bug_when>2011-10-28 11:50:08 -0400</bug_when>
    <thetext>4.2 M3

If I have this code:

  new FileOutputStream(new File(&quot;C:\temp\foo.txt&quot;)).write(1);

JDT does not report a resource leak. However if I simply add a local variable as follows:

  FileOutputStream out = new FileOutputStream(new File(&quot;C:\temp\foo.txt&quot;));
  out.write(1);

Now I get the resource leak reported. This is inconsistent, as the same leak exists in both cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2018406</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-28 12:14:34 -0400</bug_when>
    <thetext>I don&apos;t see an easy answer from the top of my head, but I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2019115</commentid>
    <comment_count>2</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2011-10-31 11:15:58 -0400</bug_when>
    <thetext>Stephan, I suppose this bug and bug 362332 means that we need to focus on the resource creation rather than resource variables.

John, did you see this problem in &apos;real&apos; code? If yes, how many instances of such a code pattern did you find? My guess would be that this code pattern does not occur too often in practice, but I could be wrong :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2019120</commentid>
    <comment_count>3</comment_count>
    <who name="John Arthorne">john_arthorne</who>
    <bug_when>2011-10-31 11:22:13 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; John, did you see this problem in &apos;real&apos; code? If yes, how many instances of
&gt; such a code pattern did you find? My guess would be that this code pattern does
&gt; not occur too often in practice, but I could be wrong :)

Since the pattern is not currently detected, I have no idea how common it is! In my case I didn&apos;t see it in &apos;real&apos; code. I was in the process of creating a simplified sample case for bug 362332 when I noticed it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2019154</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-31 12:01:14 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Stephan, I suppose this bug and bug 362332 means that we need to focus on the
&gt; resource creation rather than resource variables.

&quot;in addition to&quot; not &quot;rather than&quot;.
All the flow analysis is based on local variables.

If we want to analyze chained resources (see bug 360908) we need to 
investigate constructor invocations anyway. In that context I might be
able to also address this issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047423</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-07 07:41:53 -0500</bug_when>
    <thetext>Will be covered by the next patch in bug 358903.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047465</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-07 19:57:47 -0500</bug_when>
    <thetext>The latest patch from bug 358903 comment 30 includes a solution for this bug.

We will probably need a new set of error messages, because messages like
887 = Resource leak: &apos;&apos;{0}&apos;&apos; is never closed
are meant to insert a variable name. However, the point in this bug is to 
report about values that are never assigned to any variable. I currently
massaged this into the existing messages by saying:

Resource leak: &apos;&lt;unassigned Closeable value&gt;&apos; is never closed	

Suggestions for better wording are welcomed :)


Technical details:

(In reply to comment #4)
&gt; (In reply to comment #2)
&gt; &gt; Stephan, I suppose this bug and bug 362332 means that we need to focus on the
&gt; &gt; resource creation rather than resource variables.
&gt; 
&gt; &quot;in addition to&quot; not &quot;rather than&quot;.

The main analysis is still normal flow analysis for local variables.

In addition, every AllocationExpression of an AutoCloseable type
is investigated for:
- is it a wrapper / resource-free?
- are allocation arguments chained resources?
These items are necessary for bug 358903.
Normally, the results are then collected when analyzing the surrounding
assignment (or local variable declaration), which then associates the 
allocated value to a local variable and we&apos;re back on our normal tracks.

Specifically for this bug, an AllocationExpression can now also hold
a FakedTrackingVariable so that applications of this value can detect
that it is a closeable and at the end of the scope we can detect that
such a value has never seen a close() call.
While previously each FakedTrackingVariable was associated to a real
variable (originalBinding), we now have tracking variables with no
relation to any real variable (not a problem, just requires extra care).

In the mentioned patch, tests for this bug can be found in the
test062x group of tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050599</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-15 10:06:17 -0500</bug_when>
    <thetext>Bug 358903 has resolved the better part of this issue, still when checking
the outcome of ResourceLeakTests#test062c() I noticed that the analysis
was too shy when a unassigned resource is passed as an argument to another
method.

This final issue has been resolved in commit
e113fe138f1e4be2f22f54aa73cae2174e2d64a6

I&apos;m marking this issue as closed. Still if anybody has a suggestion 
regarding the message (see comment 6) feel free to re-open.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055096</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-24 09:28:48 -0500</bug_when>
    <thetext>If I use this 
class MyFile extends FileOutputStream {
	public MyFile(File file) throws FileNotFoundException {
		super(file);
		// TODO Auto-generated constructor stub
	}
	public MyFile write(int b, int a) throws IOException {
		// TODO Auto-generated method stub
		return this;
	}
         void foo() { new MyFile(new File(&quot;&quot;)).write(1, 1).close();}	
}

I still see the resource leak warning even though close() has been called. I don&apos;t know if its easy to implement a check for this though. I leave it upto you to see if you want to look at it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055100</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-24 09:30:14 -0500</bug_when>
    <thetext>Verified for 3.8M5 using build I20120122-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055126</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-24 09:53:44 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; If I use this 
&gt; class MyFile extends FileOutputStream {
&gt;     public MyFile(File file) throws FileNotFoundException {
&gt;         super(file);
&gt;         // TODO Auto-generated constructor stub
&gt;     }
&gt;     public MyFile write(int b, int a) throws IOException {
&gt;         // TODO Auto-generated method stub
&gt;         return this;
&gt;     }
&gt;          void foo() { new MyFile(new File(&quot;&quot;)).write(1, 1).close();}    
&gt; }
&gt; 
&gt; I still see the resource leak warning even though close() has been called. I
&gt; don&apos;t know if its easy to implement a check for this though. I leave it upto
&gt; you to see if you want to look at it.

I humbly decline. The fix for this bug is based on the support to associate a FakedTrackingVariable to an AllocationExpression in order to investigate the directly enclosing syntactic context. However this expression:
   new MyFile(new File(&quot;&quot;)).write(1, 1)
is beyond the field of vision of the analysis. How would we know that this expression represents the same instance as the AllocationExpression? I do not intend to implement a complete theorem prover :)</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>