<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>398538</bug_id>
          
          <creation_ts>2013-01-18 15:03:00 -0500</creation_ts>
          <short_desc>improve extensibility of TaskEditorSummaryPart</short_desc>
          <delta_ts>2013-01-22 12:48:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Tasks</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>contributed</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.9</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Miles Parker">milesparker</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>sam.davis</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2204964</commentid>
    <comment_count>0</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-18 15:03:48 -0500</bug_when>
    <thetext>In order to reuse/modify task editor summary part, it would be nice to have access to the addAttribute calls. I think that there are also opportunities to simplify the implementation a bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2204983</commentid>
    <comment_count>1</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-18 15:29:37 -0500</bug_when>
    <thetext>https://git.eclipse.org/r/9769</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205034</commentid>
    <comment_count>2</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-18 17:27:01 -0500</bug_when>
    <thetext>The task editor summary part is internal and not intended to be extended. Can you elaborate on your use case please?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205037</commentid>
    <comment_count>3</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-18 17:53:19 -0500</bug_when>
    <thetext>Yes. I&apos;d like to easily implement a Summary Page that has support for additional fields. That seems impossible with the current design. Same rationale as with bug 385235.

The only alternative right now is to reimplement or copy a lot of this code into a new class. It would be nice to have a simple capability for quickly building these in a semi-declarative way.

Actually, after looking at the very similar changes that Sam proposes there, perhaps what is needed is adding these features to AbstractTaskEditorPart or a new GenericTaskEditorPart and have these parts extend it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205057</commentid>
    <comment_count>4</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-18 19:05:18 -0500</bug_when>
    <thetext>What kind of fields? The reason I&apos;m asking is because it&apos;s an important UI paradigm that we keep the design of task editors as consistent as possible. Just curious if we are missing anything in the default design.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205062</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-18 19:23:38 -0500</bug_when>
    <thetext>Well, in this case I&apos;m thinking of Due Date (for R4E), but could also be other such key things as say Review Kind (Basic, Informal, Formal), etc.. I&apos;m not saying that these all actually *belong* here, but that it should be a little easier to customize. I actually like the idea of pushing some of this down better, because it seems more important for other sections.

Only tangentially related, I&apos;ve found that a major UX issues that I have with the current editors is precisely that key information is buried within a common attributes section. I&apos;d like to be able to see things like Product, Component, and priority displayed where I can easily see them. But I do see the value in uniformity as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205135</commentid>
    <comment_count>6</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-19 09:17:11 -0500</bug_when>
    <thetext>One of the key values of task editors is that they provide a consistent look and feel across connectors. We have been very careful with customizations of this kind. If there is potential to improve information density or a lack of information visible we should discuss that and consider improving this on a framework level so all connectors can benefit. Particularly with due dates we have to be careful since there is a split between private and shared due dates which are displayed in separate areas of the editor.

In any case I would prefer to do this through API on a model level and not by extending internal UI classes. I&apos;m a bit surprised that you mention product and component since these are already always visible in the section header of the task editor for the exact reason you outlined.

Miles, we usually keep tasks assigned to the inbox until there is consensus to pursue a change or feature request.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205200</commentid>
    <comment_count>7</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-19 20:42:29 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Particularly with due dates we
&gt; have to be careful since there is a split between private and shared due dates
&gt; which are displayed in separate areas of the editor.

Seperate issue, since this is for usage, but it seems natural to have creaed, modified and due dates appear in one place. Since this information isn&apos;t shared in Bugzilla and some other common connectors it seemed reasonable to add it.

&gt; In any case I would prefer to do this through API on a model level and not by
&gt; extending internal UI classes. I&apos;m a bit surprised that you mention product and
&gt; component since these are already always visible in the section header of the
&gt; task editor for the exact reason you outlined.

I&apos;ve never noticed that until you just mentioned, which means that either I&apos;m completely oblivious or that it&apos;s not an effective place for it. I would just never think of looking on a section header for editor specific information.

&gt; Miles, we usually keep tasks assigned to the inbox until there is consensus to
&gt; pursue a change or feature request.

Okay, I assigned it to myself so since I&apos;ve offered a candidate proposal.

In general, since this is marked as internal anyway, I can&apos;t see much harm in making the code cleaner and more extensible. It&apos;s an interesting question whether UI policy should trump generic class design. Again, in general I&apos;m really more interested in having all of these sections be more flexible for consumers who may want to implement them as there seem to be shared concerns across a number of them. But have a look and see if the improvements seem worthwhile.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205703</commentid>
    <comment_count>8</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-21 17:07:40 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; Seperate issue, since this is for usage, but it seems natural to have creaed,
&gt; modified and due dates appear in one place. 

Seems okay as long as it&apos;s a shared due date. It could really make sense to generalize that and show it for all connectors.

&gt; Since this information isn&apos;t shared
&gt; in Bugzilla and some other common connectors it seemed reasonable to add it.

In Bugzilla it depends on the configuration of the repository whether it&apos;s shared or not.

&gt; In general, since this is marked as internal anyway, I can&apos;t see much harm in
&gt; making the code cleaner and more extensible. 

The potential harm is if clients extend it and customize the header and it makes it more expensive to change the internal class later since it breaks clients. 

&gt; It&apos;s an interesting question
&gt; whether UI policy should trump generic class design. 

I&apos;m convinced we should always make an effort to find consistent and generic solutions rather than implementing custom UI for each connector. It also enables improvements in the framework to benefit connectors across the board.

&gt; Again, in general I&apos;m
&gt; really more interested in having all of these sections be more flexible for
&gt; consumers who may want to implement them as there seem to be shared concerns
&gt; across a number of them. 

I disagree when it comes to making the concrete UI implementations extensible. There are certainly editors such as review editors that need to display information that&apos;s not covered by the current framework and that type of extensibility is already supported through API. Other bits of the presentation can be controlled through the meta-data in attributes which is something that we can extend. I realize that this is limited in terms of functionality and I&apos;d be happy to consider a proposal for a more extensive presentation model but I wouldn&apos;t want to encourage more custom UI code.

&gt; But have a look and see if the improvements seem worthwhile.

Seems reasonable. Please be aware that there is no guarantee for backwards compatibility of internals when the minor release version changes. We only make a best effort to maintain compatibility when only the service revision changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205744</commentid>
    <comment_count>9</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-21 19:34:27 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; (In reply to comment #6)
&gt; &gt; Seperate issue, since this is for usage, but it seems natural to have creaed,
&gt; &gt; modified and due dates appear in one place.
&gt; 
&gt; Seems okay as long as it&apos;s a shared due date. It could really make sense to
&gt; generalize that and show it for all connectors.

Yeah, it is shared, but some other issues became apparent and I&apos;m actually not sure now how we&apos;re going to handle it. :)

&gt; &gt; Since this information isn&apos;t shared
&gt; &gt; in Bugzilla and some other common connectors it seemed reasonable to add it.
&gt; 
&gt; In Bugzilla it depends on the configuration of the repository whether it&apos;s
&gt; shared or not.

Thanks, clears up some confusion I had about that.

&gt; &gt; It&apos;s an interesting question
&gt; &gt; whether UI policy should trump generic class design.
&gt; 
&gt; I&apos;m convinced we should always make an effort to find consistent and generic
&gt; solutions rather than implementing custom UI for each connector. It also enables
&gt; improvements in the framework to benefit connectors across the board.

+1, that&apos;s exactly what I was getting at.

&gt; I disagree when it comes to making the concrete UI implementations extensible.
&gt; There are certainly editors such as review editors that need to display
&gt; information that&apos;s not covered by the current framework and that type of
&gt; extensibility is already supported through API. Other bits of the presentation
&gt; can be controlled through the meta-data in attributes which is something that we
&gt; can extend. I realize that this is limited in terms of functionality and I&apos;d be
&gt; happy to consider a proposal for a more extensive presentation model but I
&gt; wouldn&apos;t want to encourage more custom UI code.

Yes, I would really love to see more and more of this driven to meta-data. For example, perhaps an attribute could indicate what it&apos;s preferred section is.
There is so much custom SWT code in Mylyn that is really very declarative -- and there is no reason that we shouldn&apos;t be able to assemble most of this without any coding.

But paradoxically, I do find that going through the excercise of generifying the code makes it much more obvious where those opportunities to make these things configurable are. Also, if you can make the API generic and extensible enough then I think it can actually encourage users to use the meta-data approach as they can extend it when they have to for those edge cases.

One approach I&apos;d really like to see is to build out the attribute editor factories approach so that editor assembly strategies could be made really pluggable. To some extent there is already stuff like this in EEF and other Model tools and it might be worth looking into whether we could put together a similar approach that wouldn&apos;t have any model dependencies. That would be similar to the way GEF works where the API supports more modeled/meta-data driven approaches but you still have a relatively spare clean API.

&gt; &gt; But have a look and see if the improvements seem worthwhile.
&gt; 
&gt; Seems reasonable. Please be aware that there is no guarantee for backwards
&gt; compatibility of internals when the minor release version changes. We only make
&gt; a best effort to maintain compatibility when only the service revision changes.

Right.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2205981</commentid>
    <comment_count>10</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-22 09:53:50 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; Yes, I would really love to see more and more of this driven to meta-data. For
&gt; example, perhaps an attribute could indicate what it&apos;s preferred section is.

That&apos;s already supported through setting the kind attribute.

I merged the change. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2206133</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-22 12:48:06 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; Yes, I would really love to see more and more of this driven to meta-data. For
&gt; &gt; example, perhaps an attribute could indicate what it&apos;s preferred section is.
&gt; 
&gt; That&apos;s already supported through setting the kind attribute.

Ah, that&apos;s what that was for! :)

thanks</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>