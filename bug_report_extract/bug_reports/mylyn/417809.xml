<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>417809</bug_id>
          
          <creation_ts>2013-09-23 07:34:00 -0400</creation_ts>
          <short_desc>Gerrit connector fails on custom approval categories</short_desc>
          <delta_ts>2014-06-23 10:03:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Reviews</product>
          <component>Gerrit Connector</component>
          <version>2.0</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>2.0.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Axel Ruder">axel.ruder</reporter>
          <assigned_to name="Tomasz Zarna">tomasz.zarna</assigned_to>
          <cc>axel.ruder</cc>
    
    <cc>christian.georgi</cc>
    
    <cc>milesparker</cc>
    
    <cc>selsemore</cc>
    
    <cc>steffen.pingel</cc>
    
    <cc>tomasz.zarna</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2309753</commentid>
    <comment_count>0</comment_count>
    <who name="Axel Ruder">axel.ruder</who>
    <bug_when>2013-09-23 07:34:10 -0400</bug_when>
    <thetext>The sync freezes with the following error when trying to sync tasks with an additional gerrit label (Non-Author-Code-Review). The additional label was set up as described in the Gerrit Prolog Cookbook (Example 8: Make change submittable only if Code-Review+2 is given by a non author).
We use Gerrit version 2.5.2. 

The sync works perfectly good with Eclipse Juno 3.8.2.


org.eclipse.swt.SWTException: Failed to execute runnable (java.lang.RuntimeException: Internal Error, no approval type found for: Non-Author-Code-Review)
	at org.eclipse.swt.SWT.error(SWT.java:4397)
	at org.eclipse.swt.SWT.error(SWT.java:4312)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:138)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4145)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3762)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1113)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:997)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:138)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:610)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:567)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:150)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:354)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:181)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1426)
Caused by: java.lang.RuntimeException: Internal Error, no approval type found for: Non-Author-Code-Review
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.updateRequirements(GerritReviewRemoteFactory.java:374)
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.updateApprovalsAndRequirements(GerritReviewRemoteFactory.java:291)
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.updateModel(GerritReviewRemoteFactory.java:217)
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.updateModel(GerritReviewRemoteFactory.java:1)
	at org.eclipse.mylyn.reviews.core.spi.remote.emf.RemoteEmfConsumer.applyModel(RemoteEmfConsumer.java:183)
	at org.eclipse.mylyn.reviews.core.spi.remote.JobRemoteService$2$1.run(JobRemoteService.java:77)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:35)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:135)
	... 24 more</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310146</commentid>
    <comment_count>1</comment_count>
    <who name="Axel Ruder">axel.ruder</who>
    <bug_when>2013-09-24 05:54:19 -0400</bug_when>
    <thetext>We get the same error using Gerrit 2.6.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2311865</commentid>
    <comment_count>2</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-09-27 17:13:28 -0400</bug_when>
    <thetext>Thanks Axel, the background is helpful. We should be ignoring this at worst rather than throwing a RTE. (Eww..) Looks like the assumption was that we wouldn&apos;t have this case legitimately, but that was a bad assumption.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2312837</commentid>
    <comment_count>3</comment_count>
    <who name="Axel Ruder">axel.ruder</who>
    <bug_when>2013-10-01 03:12:31 -0400</bug_when>
    <thetext>Hi Miles,
thanks, actually ignoring the label would work perfectly for my use case, since the label can&apos;t be set by the user anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313088</commentid>
    <comment_count>4</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-01 12:51:32 -0400</bug_when>
    <thetext>https://git.eclipse.org/r/16938  This review simply ignores the case where we don&apos;t have an approval type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318211</commentid>
    <comment_count>5</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-15 06:33:27 -0400</bug_when>
    <thetext>*** Bug 419422 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318477</commentid>
    <comment_count>6</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-15 14:32:10 -0400</bug_when>
    <thetext>From Christian Georgi bug 419422

With the latest weekly snapshot, the review editor only opens partially for changes with custom approval categories (not Verified, Code Review, nor IP Clean). This renders it basically unusable. See the exception below.

While full support for custom categories is probably more effort, I vote for a hot fix for this issue. I have experimented with a fix that creates an ApprovalCatgeory instance on the fly. Shall I submit it, or is this issue already being worked on?

java.lang.NullPointerException
	at org.eclipse.mylyn.internal.gerrit.core.client.rest.ChangeInfo.convertToApprovalTypes(ChangeInfo.java:190)
	at org.eclipse.mylyn.internal.gerrit.core.client.GerritClient.getChangeDetail(GerritClient.java:294)
	at org.eclipse.mylyn.internal.gerrit.core.client.GerritClient.getChange(GerritClient.java:483)
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.pull(GerritReviewRemoteFactory.java:92)
	at org.eclipse.mylyn.internal.gerrit.core.remote.GerritReviewRemoteFactory.pull(GerritReviewRemoteFactory.java:1)
	at org.eclipse.mylyn.reviews.core.spi.remote.emf.RemoteEmfConsumer.pull(RemoteEmfConsumer.java:127)
	at org.eclipse.mylyn.reviews.core.spi.remote.JobRemoteService$1.run(JobRemoteService.java:61)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318484</commentid>
    <comment_count>7</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-15 14:40:07 -0400</bug_when>
    <thetext>The quick fix I have only takes care of the RTE, it won&apos;t fix the issue that Christian just reported on the gerrit api handling itself.

It looks like in order to really properly test for this we *will* have to set up the test server with custom categories. I&apos;ll take a look at how we can do that tho&apos; I&apos;m not super familiar w/ the Gerrit server harness.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318511</commentid>
    <comment_count>8</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-15 15:30:25 -0400</bug_when>
    <thetext>Steffen, when I attempt to edit the rules.pl as vagrant user (see https://gerrit-review.googlesource.com/Documentation/prolog-cookbook.html#_the_rules_pl_file), it looks like there is a permissions issue.

error: cannot open FETCH_HEAD: Permission denied

I&apos;m not sure if I need to login as &quot;tools&quot; and how we handle credentials for the gerrit administrator. Any guidance would be appreciated..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319018</commentid>
    <comment_count>9</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-16 11:53:23 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; It looks like in order to really properly test for this we *will* have to set up
&gt; the test server with custom categories.

Can we use mock here and/or inject the part of JSON with custom categories into an existing response (on the fly)? Maybe that would less hassle?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319061</commentid>
    <comment_count>10</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-16 13:23:29 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; (In reply to comment #7)
&gt; &gt; It looks like in order to really properly test for this we *will* have to set
&gt; up
&gt; &gt; the test server with custom categories.
&gt; 
&gt; Can we use mock here and/or inject the part of JSON with custom categories into
&gt; an existing response (on the fly)? Maybe that would less hassle?

The problem there is that I don&apos;t trust the Gerrit API to return what we think it might return. I think it would be much more robust to do this on the server side, but I must admit that the idea of building up these .pl rules and then running the git commits as part of the test script is a bit daunting.

While we&apos;re at this, I&apos;d like to get the fix in for the RTE asap. Can we merge https://git.eclipse.org/r/16938 while keeping this open and understanding that we need better testing and a fix to support custom attributes in general? Steffen?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319062</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-16 13:25:51 -0400</bug_when>
    <thetext>(In reply to comment #10) 
&gt; The problem there is that I don&apos;t trust the Gerrit API to return what we think
&gt; it might return.

That sounded a bit catty and I didn&apos;t mean it to be. :D What I mean is that I don&apos;t trust *my interpretation* of what the Gerrit API should actually be returning..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319075</commentid>
    <comment_count>12</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-16 13:49:24 -0400</bug_when>
    <thetext>I&apos;m -1 on merging the change unless there is a unit test included that reproduces the bug. I don&apos;t understand the concern with the Gerrit JSON output. We can simply grab the output from an actual server. If we don&apos;t have capacity to automate provisioning of a test repository at the moment we&apos;ll need to setup a repository manually but I don&apos;t see any way around configuring *some* repository to reproduce the scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319091</commentid>
    <comment_count>13</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-16 14:01:30 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; I&apos;m -1 on merging the change unless there is a unit test included that
&gt; reproduces the bug. I don&apos;t understand the concern with the Gerrit JSON output.
&gt; We can simply grab the output from an actual server. If we don&apos;t have capacity
&gt; to automate provisioning of a test repository at the moment we&apos;ll need to setup
&gt; a repository manually but I don&apos;t see any way around configuring *some*
&gt; repository to reproduce the scenario.

I thought you were -1 on using a manually configured server and/or existing server for testing, so I didn&apos;t propose that. Note that the remote API tests rely on having an actual connection to a live server to communicate with.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319095</commentid>
    <comment_count>14</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-16 14:10:19 -0400</bug_when>
    <thetext>The test needs to be *automated*. For cases of this sort I prefer a test against a live server since that makes it much easier to test multiple versions and detect possible regressions in new versions of Gerrit. If you extract JSON from an actual server that will at least guard against regressions in the client code for that particular version of Gerrit which I would find acceptable in this case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319451</commentid>
    <comment_count>15</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-17 08:07:03 -0400</bug_when>
    <thetext>fwiw, while looking at bug 417083 I set up the connector to fetch reviews for the Chromium project [1]. They use a custom category called &quot;Commit Queue&quot; and reviews render fine in the editor.

[1] https://gerrit.chromium.org/gerrit (2.5.4)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319467</commentid>
    <comment_count>16</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-17 08:31:15 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; reviews render fine in the editor.

Same for http://gerrit.rockbox.org/r/ with &quot;Tested&quot; and https://review.openstack.org with &quot;Approved&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319638</commentid>
    <comment_count>17</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-17 10:51:51 -0400</bug_when>
    <thetext>This issue only applies to Gerrit 2.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319644</commentid>
    <comment_count>18</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-17 10:55:12 -0400</bug_when>
    <thetext>Maybe something has changed in the meantime, but this is not what comment 0 (2.5.2) and comment 1 (2.6.1) are saying.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319724</commentid>
    <comment_count>19</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-17 12:26:27 -0400</bug_when>
    <thetext>(In reply to Tomasz Zarna from comment #18)
&gt; Maybe something has changed in the meantime, but this is not what comment 0
&gt; (2.5.2) and comment 1 (2.6.1) are saying.

Yeah, this is weird.. Perhaps the code as designed gives you the approvals that are available globally but not at a project level? Or perhaps there is something about how the available approval types are read.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319863</commentid>
    <comment_count>20</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-17 16:43:28 -0400</bug_when>
    <thetext>Reassigning to default. I can continue to refine existing solution but won&apos;t have time to make much progress on test harness complexities. Sorry..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2321744</commentid>
    <comment_count>21</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-22 11:15:31 -0400</bug_when>
    <thetext>Axel, is the troublesome Gerrit repo publicly available? I would like to see what kind of responses are sent from the server. I double checked the repos I mentioned in comment 15 and comment 16 and I see no issues with them, so I wonder what&apos;s so special about your setup.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322132</commentid>
    <comment_count>22</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-23 09:17:14 -0400</bug_when>
    <thetext>(In reply to comment #21)
&gt; Axel, is the troublesome Gerrit repo publicly available?

nm, I was able to reproduce it by configuring a 2.5.6 Gerrit instance and adding a label. Investigating...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322266</commentid>
    <comment_count>23</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-23 13:22:38 -0400</bug_when>
    <thetext>Custom Gerrit labels can be added at a project level [1], so they are not returned as part of the global config [2]. Creating them on the fly [3] doesn&apos;t seem to be feasible as votes/comments don&apos;t have all the data required to create an approval (no code/key only label, no possible values only currently set). I will keep looking for a way to get that info from the server...

[1] by creating a rules.pl file and pushing it to refs/meta/config of that project
[2] read in GerritClient.refreshConfig(IProgressMonitor)
[3] while updating approvals and requirement in the model -- GerritReviewRemoteFactory.updateRequirements(IRepository, IReview, ChangeDetailX, Map&lt;String, IApprovalType&gt;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322624</commentid>
    <comment_count>24</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-24 09:50:24 -0400</bug_when>
    <thetext>Review for the issue in Gerrit 2.6.x and later (bug 419422): https://git.eclipse.org/r/#/c/17730/. Still trying to find a way to recover in 2.5.x...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322746</commentid>
    <comment_count>25</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-24 11:41:58 -0400</bug_when>
    <thetext>Review for the Gerrit 2.5 case: https://git.eclipse.org/r/#/c/17736/

This only proves that ApprovalUtil class is evil and we should get rid of all hard-coded approvals/labels/categories.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322769</commentid>
    <comment_count>26</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-24 12:06:47 -0400</bug_when>
    <thetext>Thanks for the reviews. I&apos;ll take a look.

(In reply to comment #25)
&gt; This only proves that ApprovalUtil class is evil and we should get rid of all
&gt; hard-coded approvals/labels/categories.

+1 Can we do that now?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322805</commentid>
    <comment_count>27</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-24 13:18:55 -0400</bug_when>
    <thetext>(In reply to comment #26)
&gt; +1 Can we do that now?

It&apos;s been like that for a while, it just has been extracted into a single util class. This should make it easier to remove, but still I&apos;d prefer to do it in a separate review/bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322830</commentid>
    <comment_count>28</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-24 14:04:51 -0400</bug_when>
    <thetext>(In reply to comment #27)
&gt; (In reply to comment #26)
&gt; &gt; +1 Can we do that now?
&gt; 
&gt; It&apos;s been like that for a while, it just has been extracted into a single util
&gt; class. This should make it easier to remove, but still I&apos;d prefer to do it in a
&gt; separate review/bug.

That makes perfect sense. I think it&apos;d be good to create a task for 3.11 to do that. It&apos;s difficult to follow right now where approval types are actually managed in the code.

I think we should ensure that they get added to the review model in one place either based on the config (2.5 and earler) or data in the review (2.6 and later) and never rely on hard coded categories.

I published a WIP to provision custom approval categories in our test instances: https://git.eclipse.org/r/#/c/17740/.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322847</commentid>
    <comment_count>29</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-24 14:56:03 -0400</bug_when>
    <thetext>I merged these 2 changes and will backport them to 3.9.2 and 3.10:

https://git.eclipse.org/r/#/c/17730/
https://git.eclipse.org/r/#/c/17736/

Tomek, can you make sure we have a bug on for 3.11 to change ApprovalUtil? Thanks very much for the fixes!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322848</commentid>
    <comment_count>30</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-10-24 14:56:54 -0400</bug_when>
    <thetext>(In reply to Steffen Pingel from comment #28)
&gt; (In reply to comment #27)
&gt; &gt; (In reply to comment #26)
&gt; &gt; &gt; +1 Can we do that now?
&gt; &gt; 
&gt; &gt; It&apos;s been like that for a while, it just has been extracted into a single util
&gt; &gt; class. This should make it easier to remove, but still I&apos;d prefer to do it in a
&gt; &gt; separate review/bug.
&gt; 
&gt; That makes perfect sense. I think it&apos;d be good to create a task for 3.11 to
&gt; do that. It&apos;s difficult to follow right now where approval types are
&gt; actually managed in the code.

+1.

&gt; I think we should ensure that they get added to the review model in one
&gt; place either based on the config (2.5 and earler) or data in the review (2.6
&gt; and later) and never rely on hard coded categories.

Also +1. I looked at putting in a generalized category model during the last iteration, but the last thing I thought we could do then was fit in more model changes.

Note that we would need to extend the model for Gerrit or figure out how to generalize it enough that it could apply to generic reviews. I think we may have discussed this somewhere..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322891</commentid>
    <comment_count>31</comment_count>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2013-10-24 15:50:48 -0400</bug_when>
    <thetext>(In reply to Steffen Pingel from comment #29)
&gt; I merged these 2 changes and will backport them to 3.9.2 and 3.10:

Awesome, please resolve the bug when done.
 
&gt; Tomek, can you make sure we have a bug on for 3.11 to change ApprovalUtil?

It&apos;s bug 420325.

&gt; Thanks very much for the fixes!

My pleasure ;)

(In reply to Miles Parker from comment #30)
&gt; I think we may have discussed this somewhere..

bug 420325 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2322898</commentid>
    <comment_count>32</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-10-24 15:58:55 -0400</bug_when>
    <thetext>Done. A build is running here: https://hudson.eclipse.org/hudson/view/Mylyn/job/mylyn-3.10.x-release/2/.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2418869</commentid>
    <comment_count>33</comment_count>
    <who name="Steve Elsemore">selsemore</who>
    <bug_when>2014-06-20 14:50:59 -0400</bug_when>
    <thetext>I find that this fix does not work if a custom label has spaces in the name.  When putting approval types to the typeForName hash map, GerritReviewRemoteFactory converts spaces to dashes to produce the key.  However, when looking them up, it uses the actual label with the spaces as the key.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2419327</commentid>
    <comment_count>34</comment_count>
    <who name="Steve Elsemore">selsemore</who>
    <bug_when>2014-06-23 10:03:53 -0400</bug_when>
    <thetext>(In reply to Steve Elsemore from comment #33)
&gt; I find that this fix does not work if a custom label has spaces in the name.
&gt; When putting approval types to the typeForName hash map,
&gt; GerritReviewRemoteFactory converts spaces to dashes to produce the key. 
&gt; However, when looking them up, it uses the actual label with the spaces as
&gt; the key.

I&apos;ve filed bug 437845 and contributed a change.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>