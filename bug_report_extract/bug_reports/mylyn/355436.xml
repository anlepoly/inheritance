<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>355436</bug_id>
          
          <creation_ts>2011-08-22 16:19:00 -0400</creation_ts>
          <short_desc>enhance BuildPlan and Build class to hold additional data</short_desc>
          <delta_ts>2011-09-18 16:28:57 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Builds</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.9</target_milestone>
          
          <blocked>354625</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Ken Mising name">plcnkl</reporter>
          <assigned_to name="Steffen Pingel">steffen.pingel</assigned_to>
          <cc>steffen.pingel</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1982651</commentid>
    <comment_count>0</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-22 16:19:31 -0400</bug_when>
    <thetext>Build Identifier: 

When implementing the koji connector, I must determine whether the build is a scratch build or a normal build.  For a scratch build, which will not be included in the upcoming fedora release, a koji task will not be kept by koji.  In this way, I must map the build ID to the Build object&apos;s ID and hence a resubmission of the task for rebuilding is not possible.  For a normal build, on the other hand, due to the presence of the task, I can map the task ID to the Build&apos;s ID and resubmit the task easily.  So I think it will be much easier for a connector developer to have access to an extra generic data structure to the Build class (such as a HashMap).  Then he can fit his server&apos;s data model into Mylyn Builds without losing important information (my plan is to use that hash map to store the task ID if it exists, so checking the size of the map should allow me to determine whether a task resubmission is possible).

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982711</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-22 19:07:17 -0400</bug_when>
    <thetext>That makes sense to me. I would propose that we add a simple key/value map. It&apos;s not a perfect solution since we loose the benefit of having a schema for all data that stored in the map but making the builds model extensible would require a significant effort.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982712</commentid>
    <comment_count>2</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-22 19:09:04 -0400</bug_when>
    <thetext>One think that I was wondering about: If bug 354624 was resolved would it be possible to represent the build/sub-build (build/task/sub-task) relation ship in the core model without the need for additional attributes?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982723</commentid>
    <comment_count>3</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-22 21:31:42 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; One think that I was wondering about: If bug 354624 was resolved would it be
&gt; possible to represent the build/sub-build (build/task/sub-task) relation ship
&gt; in the core model without the need for additional attributes?

Hi Mr. Pingel:

In fact, I really am not sure whether that will fix the issue of Koji...

The problem with koji is that scratch builds will break the connection between task and packages as the build data is not created/persisted in the database.  (In fact, I am having a hard time how to query the package with just a task ID and vice versa, which is necessary for the BuildEditor&apos;s getConsole method call.)

But I believe that solving bug 354624 will certainly ease the mapping of other data models as build plan hierarchies are unavoidable.

I should&apos;ve paid more attention to the emf framework, but unfortunately, without a wsdl, I spent tremendous amount of time learning how to interact with the koji web service and handle its returns.  I really hate myself that I cannot help with how to make the current model extensible.... (especially I find this project increasingly interesting to work with....)

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982933</commentid>
    <comment_count>4</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-23 08:11:32 -0400</bug_when>
    <thetext>Hi Mr. Pingel,

I noticed that I made a mistake with the bug report, instead of adding the hash map to Build class, I actually meant the BuildPlan class.  My apologizes.

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1983736</commentid>
    <comment_count>5</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-24 09:31:26 -0400</bug_when>
    <thetext>Hi Mr. Pingel:

I forgot to mention, considering that we need to use getWorkingCopy(), I believe that we should force the data structure to store Cloneable type so users can use their own way of object deep copying (if we are going for a generic structure for now).

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985395</commentid>
    <comment_count>6</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-28 15:09:42 -0400</bug_when>
    <thetext>I have pushed a change that pulls the attributes map up to IBuildElement. That allows storing of key-values pairs in builds, build plans and artifacts. Can you take a look and let me know if that addresses your request? The code review is here: http://review.mylyn.org/#change,5

You will need to convert the data you want to store into strings. The persistence mechanism that the builds framework will not support serializing of objects. Can you explain in more detail why you want to store objects?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985673</commentid>
    <comment_count>7</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-29 09:45:07 -0400</bug_when>
    <thetext>(In reply to comment #6)

&gt; You will need to convert the data you want to store into strings. The
&gt; persistence mechanism that the builds framework will not support serializing of
&gt; objects. Can you explain in more detail why you want to store objects?

Hi Mr. Pingel:

I since I am prepared to make everything serializable, I think that will be great to have a &lt;String, String&gt; map that I can serialize/deserialize my objects into.

The reason for a general purpose data storage is that, in case of koji, there are build/task records that are imported from other koji instances (like database backups/restores), so I often find that the data are broken and and some of the Mylyn Builds operations becomes impossible to perform (such as getConsole() and build()).  So I need a way to figure out what is the situation and handle them properly.

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985915</commentid>
    <comment_count>8</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-29 14:52:23 -0400</bug_when>
    <thetext>Hi Mr. Pingel:

I am sorry that I was wrong, instead of using &lt;String, String&gt; can we use &lt;string, byte[]&gt; instead?  I wrote a class trying to serialize and deserialize the objects and it turns out that the java string encoding decoding will introduce steam corruption (a bit of online forum reading shows that its caused by UTF8).

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985926</commentid>
    <comment_count>9</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-29 15:14:03 -0400</bug_when>
    <thetext>That would make the API more difficult to use since strings are much more common for managing properties than byte arrays. Have you looked at the GSon? It might be alternative persistence mechanism that is also more robust than Java serialization.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985928</commentid>
    <comment_count>10</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-29 15:14:42 -0400</bug_when>
    <thetext>Otherwise you can also consider using an encoding such as Base64 to convert the byte array to a string.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985931</commentid>
    <comment_count>11</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-29 15:19:09 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; Otherwise you can also consider using an encoding such as Base64 to convert the
&gt; byte array to a string.

Mr. Pingel:

Thanks for reminding me about base64, I forgot to try other encoding.

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986373</commentid>
    <comment_count>12</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-30 09:40:18 -0400</bug_when>
    <thetext>Hi Mr. Pingel:

Sorry that I have to ask such a stupid question, I looked at the patch and I saw the new EMap field of the BuildElement class.  I can also find the getter of the attributes field, but I suppose that simply changing the map returned by getAttribute() will not change the content of the &apos;real&apos; EMap, am I correct?  Should I be calling eSet() and pass a new HashMap in?  Or modifying the result of the getter will actually change the content of attributes?

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986470</commentid>
    <comment_count>13</comment_count>
    <who name="Ken Mising name">plcnkl</who>
    <bug_when>2011-08-30 11:33:56 -0400</bug_when>
    <thetext>Mr. Pingel:

Finally I figured that out, so the Map() actually returns an inner class of the Emap, so I guess simply calling getAttributes().put/remove will do, thank you very much!

Ken Leung</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1995413</commentid>
    <comment_count>14</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-09-18 16:28:57 -0400</bug_when>
    <thetext>Pushed changes and tests to master.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>