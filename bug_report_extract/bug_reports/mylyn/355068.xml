<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>355068</bug_id>
          
          <creation_ts>2011-08-18 08:30:00 -0400</creation_ts>
          <short_desc>[modeling] discuss pre-requisites of modeling bridge</short_desc>
          <delta_ts>2011-12-06 12:11:29 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Context MFT</product>
          <component>EMF Connector</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>0.9</target_milestone>
          
          <blocked>352032</blocked>
    
    <blocked>355025</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Steffen Pingel">steffen.pingel</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>mauersberger</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1980870</commentid>
    <comment_count>0</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 08:30:12 -0400</bug_when>
    <thetext>In order to integrate the modeling bridge with the existing build we need to determine the dependencies of the bridge.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1980877</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 08:33:01 -0400</bug_when>
    <thetext>Miles, can you list dependencies of the modeling bridge that are not already required by other components. I am looking for Orbit bundles, Eclipse packages etc. and their minimum versions that we would need to include in the build targets.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981137</commentid>
    <comment_count>2</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 14:14:44 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Miles, can you list dependencies of the modeling bridge that are not already
&gt; required by other components. I am looking for Orbit bundles, Eclipse packages
&gt; etc. and their minimum versions that we would need to include in the build
&gt; targets.

Will do. I&apos;m going to go through the dependencies today and I&apos;ll package things into features so that we can minimize and understand these dependencies. My guess is that ecore tools and papyrus support will all have to be recent, but I think the really core stuff shouldn&apos;t need any thing greater than Eclipse 3.6 or EMF 2.5.0.

Question, is there any procedure for actually testing backward compatibility, short of doing an install of all of the earlier components? :O</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981167</commentid>
    <comment_count>3</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 14:39:37 -0400</bug_when>
    <thetext>Thanks! Can you post the list of proposed features/components before creating them? How much work would it be to support Eclipse 3.5?

Besides manual testing we run unit tests against supported targets: https://hudson.eclipse.org/hudson/user/spingel/my-views/view/Mylyn%20Integration/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981184</commentid>
    <comment_count>4</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 15:01:30 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; Thanks! Can you post the list of proposed features/components before creating
&gt; them? 

Yes, good idea! They&apos;ll need to be pretty fine grained, almost matching plugin structure. I&apos;m thinking:


o.e.m.modeling.emf
  contains:
    o.e.m.modeling.core
    o.e.m.modeling.ui

At this point there really would be nothing of value without support for emf but at some point we might do support for just gef/draw2d.

o.e.m.modeling.gmf  (same plugin)
o.e.m.modeling.ecoretools  (same plugin)
o.e.m.modeling.papyrus  (same plugin)

emf &lt;- gmf &lt;- (papyrus || ecoretools)

&gt; How much work would it be to support Eclipse 3.5?

Wow, I always forget how many people are using legacy stuff. The thing is I really doubt that would be useful, simply because most if not all of the technologies that this will be used for weren&apos;t at all mature then. (As it is Papyrus is only a 0.8.1, but even the Ecore Diagram tools have changed quite a bit.)

Also, I just realized that GMF itself will probably be the big issue for all but core.

&gt; Besides manual testing we run unit tests against supported targets:
&gt; https://hudson.eclipse.org/hudson/user/spingel/my-views/view/Mylyn%20Integration/

OK, that&apos;s impressive. :) I&apos;m really afraid to even contemplate the build stuff right now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981194</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 15:18:11 -0400</bug_when>
    <thetext>One change. I&apos;m going to add a separate emf project as well. It seems like this
is all pretty much dependency management, because it will only have one class!
But that will take out the emf requirement for the core plugin. Again, you
can&apos;t do much with it, so this will all be in the same feature unless someone
request differently.

Jan, it is likely that you will only need o.e.m.modeling.emf for the tree work
if that&apos;s what you decide to do. I&apos;m almost sure that that can be 3.5 / EMF
2.3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981197</commentid>
    <comment_count>6</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 15:20:31 -0400</bug_when>
    <thetext>For Eclipse 3.5 what version of Mylyn does that imply? 3.4? Or I could leave the Mylyn version reqs. off entirely?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981255</commentid>
    <comment_count>7</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 16:09:18 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; For Eclipse 3.5 what version of Mylyn does that imply? 3.4? Or I could leave the
&gt; Mylyn version reqs. off entirely?

Mylyn 3.6 (the current version) is compatible with Eclipse 3.5. You can leave out all version constraints on the bundle level. We&apos;ll manage that at the feature level. It&apos;s too much overhead to maintain it in both places.

Thanks for the component listing.  In terms of consumers, would o.e.m.modeling.emf be targeted at integrators building specific bridges for their tools or is the feature relevant to users as well?

Are the other components usable as tools targeted at users providing focusing for GMF, Papyrus and Ecoretools editors when installed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981259</commentid>
    <comment_count>8</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 16:17:40 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; For Eclipse 3.5 what version of Mylyn does that imply? 3.4? Or I could leave the
&gt; &gt; Mylyn version reqs. off entirely?
&gt; 
&gt; Mylyn 3.6 (the current version) is compatible with Eclipse 3.5. You can leave
&gt; out all version constraints on the bundle level. We&apos;ll manage that at the
&gt; feature level. It&apos;s too much overhead to maintain it in both places.

Great.

&gt; 
&gt; Thanks for the component listing.  In terms of consumers, would
&gt; o.e.m.modeling.emf be targeted at integrators building specific bridges for
&gt; their tools or is the feature relevant to users as well?

EMF would target integrators; I can&apos;t see any use for it standing alone now. That could change if we support EMF tree editors. Then we&apos;d have an ..emf.edit and possible ..emf.editor as well.

&gt; Are the other components usable as tools targeted at users providing focusing
&gt; for GMF, Papyrus and Ecoretools editors when installed?

Yes, exactly. And actually, GMF wouldn&apos;t be installed on it&apos;s own either, *unless as with EMF it was provided as part of another tool implementation. You need an actual (quite light-weight) domain implementation as well shick is what papyrus and ecoretools provide.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981260</commentid>
    <comment_count>9</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 16:18:28 -0400</bug_when>
    <thetext>&quot;shick&quot; = &quot;which&quot; :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981263</commentid>
    <comment_count>10</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 16:22:04 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Mylyn 3.6 (the current version) is compatible with Eclipse 3.5. You can leave
&gt; out all version constraints on the bundle level. We&apos;ll manage that at the
&gt; feature level. It&apos;s too much overhead to maintain it in both places.

I had noticed that this isn&apos;t the case for Mylyn project maintained plugins, i.e. most of the plugins define those as:

;bundle-version=&quot;[3.0.0,4.0.0)&quot;

And also assuming that we use version constraints for intra-mylyn.modeling depend.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981271</commentid>
    <comment_count>11</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 16:36:10 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; I had noticed that this isn&apos;t the case for Mylyn project maintained plugins,
&gt; i.e. most of the plugins define those as:
&gt; 
&gt; ;bundle-version=&quot;[3.0.0,4.0.0)&quot;

Yes, that constraint is not particularly useful even though it&apos;s used everywhere in Mylyn. If you already have it in place it&apos;s fine to leave it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981277</commentid>
    <comment_count>12</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 16:41:32 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; (In reply to comment #10)
&gt; &gt; I had noticed that this isn&apos;t the case for Mylyn project maintained plugins,
&gt; &gt; i.e. most of the plugins define those as:
&gt; &gt; 
&gt; &gt; ;bundle-version=&quot;[3.0.0,4.0.0)&quot;
&gt; 
&gt; Yes, that constraint is not particularly useful even though it&apos;s used
&gt; everywhere in Mylyn. If you already have it in place it&apos;s fine to leave it.

One packaging related question -- and thanks, btw -- it seems that we should *not* mark interface implementations with @Override, correct?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981288</commentid>
    <comment_count>13</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 16:56:38 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; One packaging related question -- and thanks, btw -- it seems that we should
&gt; *not* mark interface implementations with @Override, correct?

The standard compiler and formatting settings should enforce the proper conventions. If in doubt, copy the .settings folder from an existing bundle and use Source &gt; Format.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981297</commentid>
    <comment_count>14</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 17:05:57 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to comment #12)
&gt; &gt; One packaging related question -- and thanks, btw -- it seems that we should
&gt; &gt; *not* mark interface implementations with @Override, correct?
&gt; 
&gt; The standard compiler and formatting settings should enforce the proper
&gt; conventions. If in doubt, copy the .settings folder from an existing bundle and
&gt; use Source &gt; Format.

Yeah, that&apos;s just what I did, and just after that I got a bunch of failures for the overrides. But it looks to be something else causing the issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981301</commentid>
    <comment_count>15</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 17:11:36 -0400</bug_when>
    <thetext>&gt; Yeah, that&apos;s just what I did, and just after that I got a bunch of failures for
&gt; the overrides. But it looks to be something else causing the issue.

The errors are correct. I believe you need to actually remove the overrides.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981304</commentid>
    <comment_count>16</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 17:13:29 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; &gt; Yeah, that&apos;s just what I did, and just after that I got a bunch of failures for
&gt; &gt; the overrides. But it looks to be something else causing the issue.
&gt; 
&gt; The errors are correct. I believe you need to actually remove the overrides.

Right, that&apos;s what I was thinking. Because of the issue with @Overides on interfaces breaking 1.5 complies and even runtime. Unfortunately, JDT is fighting with itself over this :) so I have to look at what settings are causing the conflict. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981320</commentid>
    <comment_count>17</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 17:23:18 -0400</bug_when>
    <thetext>Looking at the other features, it looks like you must add all of the IP stuff (about.html, ad. infinitum) in some kind of build step so I don&apos;t have to worry about that. If so, nice!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981332</commentid>
    <comment_count>18</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-18 17:44:44 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; Looking at the other features, it looks like you must add all of the IP stuff
&gt; (about.html, ad. infinitum) in some kind of build step so I don&apos;t have to worry
&gt; about that. If so, nice!

We don&apos;t do anything special as part of our build. The about and license files etc. should be included in each feature. Please let me know if this is not the case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981337</commentid>
    <comment_count>19</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 17:52:10 -0400</bug_when>
    <thetext>(In reply to comment #18)
&gt; We don&apos;t do anything special as part of our build. The about and license files
&gt; etc. should be included in each feature. Please let me know if this is not the
&gt; case.

Oh, gack! Forgot I had .html filtered from my view, but didn&apos;t realize that because when I had Mylyn focussed when my .html files were showing but not when I was looking at other projects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981347</commentid>
    <comment_count>20</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-18 18:28:49 -0400</bug_when>
    <thetext>OK, the changes are up. Jan, could you let me know if this addresses your issue with build dependencies?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981580</commentid>
    <comment_count>21</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-19 09:17:58 -0400</bug_when>
    <thetext>Miles, can you please provide a list of build time dependencies (feature ids) for each of the modeling features?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981868</commentid>
    <comment_count>22</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-19 16:20:28 -0400</bug_when>
    <thetext>emf:

      &lt;import plugin=&quot;org.eclipse.core.runtime&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.core.resources&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.core&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.common&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.ecore&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.workbench.texteditor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.forms&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.jface.text&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.ide&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.editors&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.search&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.java.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.ide.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.commons.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.resources.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.edit&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.edit.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gef&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.ecoretools.diagram&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;

 gmf:
 
       &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.core.runtime&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.ide&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui.providers&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui.resources.editor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.core&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.ui&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.emf&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      
 ecoretools:
 
       &lt;import plugin=&quot;org.eclipse.core.runtime&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.editors&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.ide&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.forms&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.views&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.navigator&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.navigator.resources&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.jface.text&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.common.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui.resources.editor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.notation.edit&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.emf.ecoretools.diagram&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.commons.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.commons.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.ide.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.core&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.emf&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.ui&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.gmf&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      
papyrus:

      &lt;import plugin=&quot;org.eclipse.core.runtime&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.editors&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.ide&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.forms&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.views&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.navigator&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.ui.navigator.resources&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.jface.text&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.common.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.diagram.ui.resources.editor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.gmf.runtime.notation.edit&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.context.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.commons.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.commons.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.core&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.monitor.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.ide.ui&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.uml2&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.papyrus.diagram.clazz&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.papyrus.editor&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.papyrus.diagram.common&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.core&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.ui&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.emf&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import plugin=&quot;org.eclipse.mylyn.modeling.gmf&quot; version=&quot;0.9.0&quot; match=&quot;greaterOrEqual&quot;/&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981912</commentid>
    <comment_count>23</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-19 18:07:57 -0400</bug_when>
    <thetext>I am looking for feature dependencies, not plug-in dependencies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981933</commentid>
    <comment_count>24</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-19 19:56:10 -0400</bug_when>
    <thetext>OK, fundamentally it&apos;s: mylyn common and context, eclipse.ui, emf, emf.ecore, gef and then, depending on feature: org.eclipse.gmf.runtime (that&apos;s important as we don&apos;t want any of the tooling), ecoretools, uml2.core &amp; papyrus.uml.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981935</commentid>
    <comment_count>25</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-19 19:58:44 -0400</bug_when>
    <thetext>Do you want an rmap or something? I could whip that up, but it would be a lot easier once it is in the actual build since in my experience there is always something that you&apos;vre left out anyway, and I&apos;d hate to have to walk the feature dependency chain by hand.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981936</commentid>
    <comment_count>26</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-19 20:13:41 -0400</bug_when>
    <thetext>Thanks for the listing. We&apos;ll eventually need to add these to the target files for the build. For now it&apos;s sufficient if we add the required features to the feature.xml files, e.g.:

   &lt;requires&gt;
      &lt;import feature=&quot;org.eclipse.mylyn.context_feature&quot; version=&quot;3.7.0&quot; match=&quot;equivalent&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.jdt&quot; version=&quot;3.4.0&quot; match=&quot;compatible&quot;/&gt;
   &lt;/requires&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981937</commentid>
    <comment_count>27</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-19 20:19:12 -0400</bug_when>
    <thetext>OK, my next question is whether you wanted to hae me calculate and include the requirements in the features themselves and I gather the answer to that is &quot;yes&quot;. And so I&apos;ll just take my best guess at lowest supportable version.

One additional note. I think that Mylyn is +3 on release train? GMF -- presuming they make it back on-board which seems likely for SR1 -- is at +2, but Papyrus and EcoreTools are both also at +3. I just bring this up now because it all adds a bunch of build dependencies -- many of them not super stable -- (papyrus is only at 0.8.1 and GMF wasn&apos;t able to get a build into Indigo at all) and that might color decision about whether to have this as part of the main context build or not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981939</commentid>
    <comment_count>28</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-19 20:28:49 -0400</bug_when>
    <thetext>(In reply to comment #27)
&gt; OK, my next question is whether you wanted to hae me calculate and include the
&gt; requirements in the features themselves and I gather the answer to that is
&gt; &quot;yes&quot;. And so I&apos;ll just take my best guess at lowest supportable version.

Yes, I just want hand-crafted feature dependencies (not the plug-in dependencies that are calculated by PDE). The reason is to ensure that if I install one of the modeling bridge features that I end with a set of tools or frameworks that make sense.
 
&gt; One additional note. I think that Mylyn is +3 on release train? GMF -- presuming
&gt; they make it back on-board which seems likely for SR1 -- is at +2, but Papyrus
&gt; and EcoreTools are both also at +3. I just bring this up now because it all adds
&gt; a bunch of build dependencies -- many of them not super stable -- (papyrus is
&gt; only at 0.8.1 and GMF wasn&apos;t able to get a build into Indigo at all) and that
&gt; might color decision about whether to have this as part of the main context
&gt; build or not.

Yes, I had the same thought. We&apos;ll have to discuss that before making that call.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982207</commentid>
    <comment_count>29</comment_count>
    <who name="Jan Mauersberger">mauersberger</who>
    <bug_when>2011-08-22 04:40:39 -0400</bug_when>
    <thetext>Well, you started a hell of a discussion pace... sorry for joining late. 

(In reply to comment #5)
&gt; Jan, it is likely that you will only need o.e.m.modeling.emf for the tree work
&gt; if that&apos;s what you decide to do. I&apos;m almost sure that that can be 3.5 / EMF
&gt; 2.3.

Yes, I doubt that there is any need beyond that.

(In reply to comment #21)
&gt; OK, the changes are up. Jan, could you let me know if this addresses your issue with build dependencies?

The selfish answer is: yes, as long as it&apos;s compatible with e3.6 and EMF 2.6 I&apos;m fine :-) 
Are the changes available in GIT already?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1982230</commentid>
    <comment_count>30</comment_count>
    <who name="Jan Mauersberger">mauersberger</who>
    <bug_when>2011-08-22 05:48:15 -0400</bug_when>
    <thetext>(In reply to comment #29)
&gt; [...]
&gt; Are the changes available in GIT already?

Forget that one, I pulled the changes, everything seems to be fine on first sight. Other questions I do have or will have are not related to this ticket.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1983635</commentid>
    <comment_count>31</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-24 06:35:29 -0400</bug_when>
    <thetext>I had to add the following features to the target to resolve all dependencies:

&lt;unit id=&quot;org.eclipse.emf.ecoretools.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
&lt;unit id=&quot;org.eclipse.emf.transaction.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
&lt;unit id=&quot;org.eclipse.gef.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
&lt;unit id=&quot;org.eclipse.gmf.runtime.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
&lt;unit id=&quot;org.eclipse.papyrus.sdk.feature.group&quot; version=&quot;0.0.0&quot;/&gt;
&lt;unit id=&quot;org.eclipse.uml2.sdk.feature.group&quot; version=&quot;0.0&quot;/&gt;

Miles, does that list look reasonable?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985854</commentid>
    <comment_count>32</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 12:58:44 -0400</bug_when>
    <thetext>Hmmm... It really doesn&apos;t seem like you should need all of those sdks. Ideally, dependencies should be runtime only. Of course people have different ideas about what &quot;SDK&quot; means. I do like that GMF has a &quot;runtime.sdk&quot;. :) (They have separate &quot;tooling&quot; and &quot;runtime&quot; sub-projects but really should have a different name for &quot;runtime&quot;.)

I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985902</commentid>
    <comment_count>33</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 14:29:29 -0400</bug_when>
    <thetext>OK, the following should do it, or at least be enough for build-time dependencies. Using these dependencies along with the eclipse.sdk for a feature based build I can get my complete testing workspace to function as expected. I&apos;m not so sure about Papyrus dependencies -- it seems to want to pull in all kinds of stuff that we really want to avoid having build time dependencies on like Xtext. Hopefully those won&apos;t be needed for build based on below.

      &lt;import feature=&quot;org.eclipse.mylyn.commons&quot; version=&quot;3.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.mylyn.context_feature&quot; version=&quot;3.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;

      &lt;import feature=&quot;org.eclipse.emf.common&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.emf.common.ui&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.emf.edit&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.emf.edit.ui&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.emf.ecore&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.emf.ecore.edit&quot; version=&quot;2.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      
      &lt;import feature=&quot;org.eclipse.gmf&quot; version=&quot;1.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.gmf.runtime.notation&quot; version=&quot;1.5.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      
	&lt;import feature=&quot;org.eclipse.emf.ecoretools&quot; version=&quot;1.0.0&quot; match=&quot;greaterOrEqual&quot;/&gt;
      
      &lt;import feature=&quot;org.eclipse.papyrus&quot; version=&quot;0.8.1&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.papyrus.diagram.clazz&quot; version=&quot;0.8.1&quot; match=&quot;greaterOrEqual&quot;/&gt;
      &lt;import feature=&quot;org.eclipse.papyrus.uml&quot; version=&quot;0.8.1&quot; match=&quot;greaterOrEqual&quot;/&gt;
            &lt;import feature=&quot;org.eclipse.uml2&quot; version=&quot;3.2.0&quot; match=&quot;greaterOrEqual&quot;/&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986039</commentid>
    <comment_count>34</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 18:45:19 -0400</bug_when>
    <thetext>Moving discussion from bug 355793, comment 7.

(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; Those don&apos;t really fit well here. emf includes non ui components and
&gt; ecoretools
&gt; &gt; gmf and papyrus aren&apos;t ui plugins per se except in the sense that all modeling
&gt; &gt; tools are ui. They all include nominally core stuff, but it would be silly to
&gt; &gt; pull that out as the projects are already really granular as it is.
&gt; 
&gt; Don&apos;t all of these have ui dependencies (concerning emf see below)? If so, the
&gt; standard convention is to call them .ui.
&gt; 
&gt; We generally use a separate namespace per component and plug-ins always have one
&gt; qualifying segment (org.eclipse.mylyn being the only exception). That way we can
&gt; consistently split out core or doc bundles later if we decide to modularize
&gt; further.

That makes perfect sense, but in this case just feels somehow unnatural to me. Yes, by definition all of the diagram stuff implicates ui, but that actually implies that most of the modeling diagram stuff doesn&apos;t explicitly include &quot;ui&quot;. Diagram and visualization typically aren&apos;t in a &quot;ui&quot; namespace, and instead the actual tools that are used for working with those diagrams are. So for example, in emf, we have emf.edit and emf.editor that support the ui for created models. It all gets so overloaded and it is a subtle and perhaps irrelevant distinction here.

&gt; 
&gt; &gt; &gt; I&apos;m unsure about org.eclipse.mylyn.modeling.core/ui. Where do these fit in
&gt; &gt; &gt; component wise? If they are logically part of the EMF component they should
&gt; be
&gt; &gt; &gt; in that namespace:
&gt; &gt; &gt;
&gt; &gt; &gt; org.eclipse.mylyn.modeling.emf.core/bridge/ui
&gt; &gt;
&gt; &gt; I&apos;m not sure I understand the question..but the idea of core is that it really
&gt; &gt; is exclusive of any ui dependencies. It basically supports semantics for
&gt; mapping
&gt; &gt; from domain models to the (implicit) mylyn model.
&gt; 
&gt; Okay, can we then rename org.eclipse.mylyn.modeling.core to
&gt; org.eclipse.mylyn.modeling.emf.core and merge it with
&gt; org.eclipse.mylyn.modeling.emf? Even though core does not have an EMF dependency
&gt; all components depend on the EMF component so this dependency exists anyways. I
&gt; don&apos;t see any need to provide bundles for non-EMF modeling bundles or did that
&gt; come up already?

Maybe buried somewhere, but it&apos;s a question worth exploring further. Ideally, we&apos;d like to support generic graphical tools that are based on GEF and Graphiti, but not necessarily GMF or even EMF. There has been interest expressed in that and it could be cool. Just as an off the cuff example, imagine a Java hierarchy diagram built on top of Zest, or turing the existing PDE zest tool into a Mylyn savvy one.

So what I&apos;ve been working on -- taking the dependency on emf (and the bogus ecoretools one) out of ui, and am changing that to o.e..mylyn.modeling.gef. (or gef.ui :)) This would still be part of core feature.

And *that* has caused me to revisit the rest of the UI and Structure bridge dependencies to see if I can tease things out more. But that has as I feared created issues with extension loading -- avoiding these kinds of issues was part of the reason for the initial design with the delegated structure and ui bits. So I&apos;m probably going to be beating my head against that wall for a while.

&gt; Likewise, org.eclipse.mylyn.modeling.ui would become
&gt; org.eclipse.mylyn.modeling.emf.ui since it&apos;s part of the EMF component. There is
&gt; one dependency requirement on org.eclipse.emf.ecoretools.diagram in
&gt; org.eclipse.mylyn.modeling.emf.ui though that does not look quite in the right
&gt; place?

See above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986055</commentid>
    <comment_count>35</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-08-29 19:36:31 -0400</bug_when>
    <thetext>(In reply to comment #34)
&gt; That makes perfect sense, but in this case just feels somehow unnatural to me.
&gt; Yes, by definition all of the diagram stuff implicates ui, but that actually
&gt; implies that most of the modeling diagram stuff doesn&apos;t explicitly include &quot;ui&quot;.

Yes, I agree. It&apos;s equally weird for the Java and Resource bridges which are called o.e.mylyn.java.ui and o.e.mylyn.resources.ui. I&apos;m not saying there aren&apos;t more intuitive (e.g. .bridge) but it&apos;s the convention that we have been using for all context bridges in the project. 

Arguably, the existing structure bridges are missing the core/ui split. We can change that for modeling if it makes sense, e.g. for the EMF bridge but to keep things simple I am also okay with putting all bridge stuff in .ui bundles.

&gt; Diagram and visualization typically aren&apos;t in a &quot;ui&quot; namespace, and instead the
&gt; actual tools that are used for working with those diagrams are. So for example,
&gt; in emf, we have emf.edit and emf.editor that support the ui for created models.
&gt; It all gets so overloaded and it is a subtle and perhaps irrelevant distinction
&gt; here.

We could end up with .edit or other bundles for specific parts of EMF but at the current stage I think one .ui plug-in per bridge should suffice.

&gt; I
&gt; &gt; don&apos;t see any need to provide bundles for non-EMF modeling bundles or did that
&gt; &gt; come up already?
&gt; 
&gt; Maybe buried somewhere, but it&apos;s a question worth exploring further. Ideally,
&gt; we&apos;d like to support generic graphical tools that are based on GEF and Graphiti,
&gt; but not necessarily GMF or even EMF. There has been interest expressed in that
&gt; and it could be cool. Just as an off the cuff example, imagine a Java hierarchy
&gt; diagram built on top of Zest, or turing the existing PDE zest tool into a Mylyn
&gt; savvy one.

Fair enough. Looking closer at DomainDelegatedStructureBridge it looks a good place to put it would be org.eclipse.mylyn.context.core? For now I suggest that we keep it in the EMF plug-in and if the need arises move it further up the chain.
 
&gt; So what I&apos;ve been working on -- taking the dependency on emf (and the bogus
&gt; ecoretools one) out of ui, and am changing that to o.e..mylyn.modeling.gef. (or
&gt; gef.ui :)) This would still be part of core feature.

Okay, that split makes sense. Will the o.e.m.modeling.gef.ui bundle have a dependency on EMF? I am wondering if it makes sense to introduce another component here to avoid forcing a GEF depenency on consumers only interested in the EMF bridge.

&gt; And *that* has caused me to revisit the rest of the UI and Structure bridge
&gt; dependencies to see if I can tease things out more. But that has as I feared
&gt; created issues with extension loading -- avoiding these kinds of issues was part
&gt; of the reason for the initial design with the delegated structure and ui bits.
&gt; So I&apos;m probably going to be beating my head against that wall for a while.

What kind of issues? Can you point me at a corresponding bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986071</commentid>
    <comment_count>36</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 19:51:17 -0400</bug_when>
    <thetext>(In reply to comment #35)

&gt; Arguably, the existing structure bridges are missing the core/ui split. We can
&gt; change that for modeling if it makes sense, e.g. for the EMF bridge but to keep
&gt; things simple I am also okay with putting all bridge stuff in .ui bundles.

Yeah, I&apos;m always looking for ways to separate model from view, but let&apos;s see how it plays.

&gt; We could end up with .edit or other bundles for specific parts of EMF but at the
&gt; current stage I think one .ui plug-in per bridge should suffice.

Totally.

&gt; Fair enough. Looking closer at DomainDelegatedStructureBridge it looks a good
&gt; place to put it would be org.eclipse.mylyn.context.core? For now I suggest that
&gt; we keep it in the EMF plug-in and if the need arises move it further up the
&gt; chain.

Exactly. It&apos;s the only thing *in* core now. :)

&gt; &gt; So what I&apos;ve been working on -- taking the dependency on emf (and the bogus
&gt; &gt; ecoretools one) out of ui, and am changing that to o.e..mylyn.modeling.gef.
&gt; (or
&gt; &gt; gef.ui :)) This would still be part of core feature.
&gt; 
&gt; Okay, that split makes sense. Will the o.e.m.modeling.gef.ui bundle have a
&gt; dependency on EMF? I am wondering if it makes sense to introduce another
&gt; component here to avoid forcing a GEF depenency on consumers only interested in
&gt; the EMF bridge.

Exactly. GEF then has no EMF dependencies -&gt; reseparating the merged ui and structure bits (there were good reasons to do that at some point..)

&gt; &gt; of the reason for the initial design with the delegated structure and ui bits.
&gt; &gt; So I&apos;m probably going to be beating my head against that wall for a while.
&gt; 
&gt; What kind of issues? Can you point me at a corresponding bug?

I&apos;m not sure yet, but right now my working guess is that it is back to the same common issue of getting different extensions to play nicely with each other when you don&apos;t have control over either&apos;s life-cycle. I guess this task covers the bug, since it is a re-factoring to support splitting up the dependencies in different ways -- but it impacts everything that has come up from internal/spi to interfaces vs. abstract classes, context activation, etc.. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986075</commentid>
    <comment_count>37</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 19:53:56 -0400</bug_when>
    <thetext>(In reply to comment #36)

&gt; &gt; Fair enough. Looking closer at DomainDelegatedStructureBridge it looks a good
&gt; &gt; place to put it would be org.eclipse.mylyn.context.core? For now I suggest
&gt; that
&gt; &gt; we keep it in the EMF plug-in and if the need arises move it further up the
&gt; &gt; chain.
&gt; 
&gt; Exactly. It&apos;s the only thing *in* core now. :)

To clarify...this is the only thing that has potential use by both emf only and gef only right now, but it isn&apos;t actually being used by any gef-only implementation. Still, I&apos;d like to keep it seperated out in case people want to play with that usage.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986103</commentid>
    <comment_count>38</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 20:57:49 -0400</bug_when>
    <thetext>OK, see: https://github.com/MilesParker/mylyn.incubator/commit/400d8524612dd73f53955620a6a8f81a3dac0475

It isn&apos;t perfect :) but I wanted to get it up here as Jan may be relying on package structure.

I&apos;m not sure what to do about the modeling.ui now. It has a gef dependency and I can&apos;t think of any reason for any modeling tool not to want that, and it has a class with no such dependencies but it would be totally silly to break out a gef *and* ui. That leaves poor little .modeling.core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986105</commentid>
    <comment_count>39</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-29 21:09:35 -0400</bug_when>
    <thetext>(In reply to comment #38)
&gt; I&apos;m not sure what to do about the modeling.ui now. It has a gef dependency and I
&gt; can&apos;t think of any reason for any modeling tool not to want that, and it has a

Correction &quot;any diagram modeling tool&quot;. The EMF tree editor wouldn&apos;t want that, but it would want the ecore domain stuff which I&apos;ll move *back* to emf now. https://github.com/MilesParker/mylyn.incubator/commit/bcd734e3d4c15648fa8aa7e8a3e08b5a0ba32818 bug 353242 is looking like it would be a nice thing to have.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986213</commentid>
    <comment_count>40</comment_count>
    <who name="Jan Mauersberger">mauersberger</who>
    <bug_when>2011-08-30 04:07:30 -0400</bug_when>
    <thetext>(In reply to comment #38)
&gt; [...]
&gt; 
&gt; It isn&apos;t perfect :) but I wanted to get it up here as Jan may be relying on
&gt; package structure.

I&apos;m fine with the current dependencies, thanks a lot. Perfection comes over time...

&gt; I&apos;m not sure what to do about the modeling.ui now. It has a gef dependency and
&gt; I can&apos;t think of any reason for any modeling tool not to want that, and it has
&gt; a class with no such dependencies but it would be totally silly to break out a
&gt; gef *and* ui. That leaves poor little .modeling.core.

Hmm, I&apos;m not sure about that one either. A modeling UI bridge might be also required by products having no GEF; AFAIK it is also used for example to open elements when double clicking in the context of a task and other things. So what to do in case there isn&apos;t any GEF based editor but just some tree based editor shall be opened or the element shall selected in a view. That&apos;s UI stuff but no GEF. However, it&apos;s just theoretical.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1987242</commentid>
    <comment_count>41</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-31 12:14:23 -0400</bug_when>
    <thetext>(In reply to comment #40)

&gt; Hmm, I&apos;m not sure about that one either. A modeling UI bridge might be also
&gt; required by products having no GEF; AFAIK it is also used for example to open
&gt; elements when double clicking in the context of a task and other things. So what
&gt; to do in case there isn&apos;t any GEF based editor but just some tree based editor
&gt; shall be opened or the element shall selected in a view. That&apos;s UI stuff but no
&gt; GEF. However, it&apos;s just theoretical.

Right. See comment 39. For stuff like bug  352173 and bug 343200 you&apos;ll only want o.e.mylyn.modeling.emf and ..core.

btw, any thoughts about what -- if anything -- you might want to work on? I think you mentioned tree editor which would be a super cool feaature to have.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1987267</commentid>
    <comment_count>42</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-31 13:07:20 -0400</bug_when>
    <thetext>I&apos;d like to close this one down but of course please reopen if you think I&apos;ve missed something.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1987449</commentid>
    <comment_count>43</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-08-31 17:53:50 -0400</bug_when>
    <thetext>I&apos;ve made the one gef dependendency in modeling.ui generic, so now emf-feature should have no gef dependencies either.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>