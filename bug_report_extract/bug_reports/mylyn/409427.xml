<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>409427</bug_id>
          
          <creation_ts>2013-05-29 16:02:00 -0400</creation_ts>
          <short_desc>[model] replace xml persitence with binary</short_desc>
          <delta_ts>2013-06-19 14:08:30 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Reviews</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0.1</target_milestone>
          
          <blocked>410520</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Miles Parker">milesparker</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>Ed.Merks</cc>
    
    <cc>sam.davis</cc>
    
    <cc>steffen.pingel</cc>
    
    <cc>tomasz.zarna</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2265186</commentid>
    <comment_count>0</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-05-29 16:02:51 -0400</bug_when>
    <thetext>For release, we should rpelace the existing xml format with the much denser and faster loading EMF BinaryResource implementation. This is a pretty straightforward swap, but we&apos;ll have to manage replacement of existing artifacts.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2266963</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-06-03 09:16:12 -0400</bug_when>
    <thetext>Do we have indication that using XML has a noticeable performance impact? If not I would suggest to postpone this change since there is some risk with using a different format particularly concerning handling of existing data and we are getting close to RC3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2267178</commentid>
    <comment_count>2</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-03 12:50:22 -0400</bug_when>
    <thetext>Yes, from my own experience, I&apos;ve seen vast improvements in load time performance (1) which is critical here, as well as file size, which is also important as there many files that we&apos;ll be storing in user config and in worst case those files can be multiple MBs each. The real problem w/ xml load size is that it is actually super-linear.

1. http://milesparker.blogspot.ca/2011/01/supporting-multiple-resource-types-with.html
2. http://www.slideshare.net/kenn.hussey/performance-and-extensibility-with-emf  slide 34

But yes, it does introduce additional risk as well. I&apos;m not wanting to touch this until we get bug 409343 resolved and by then it may be too late to make a significant change like this for 2.0. OTOH, you could argue that it is better to get a risky change like this out of the way rather than leave users with a lot of files that need to be deleted after release. The real risk seems to come in when we&apos;re messing around with the configuration state on people&apos;s machines, so there is some argument for getting it out of the way now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2270854</commentid>
    <comment_count>3</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-10 20:11:56 -0400</bug_when>
    <thetext>Reschedule for service release. I think this is a key change, but it doesn&apos;t make any sense to introduce such a large change right before RC4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272165</commentid>
    <comment_count>4</comment_count>
    <who name="Sam Davis">sam.davis</who>
    <bug_when>2013-06-12 17:12:57 -0400</bug_when>
    <thetext>Wouldn&apos;t it make sense to store the patch sets in the local git repo instead?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272180</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-12 17:56:16 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Wouldn&apos;t it make sense to store the patch sets in the local git repo instead?

This isn&apos;t really germane to this bug as we&apos;d make this change either way, but..

Yes, something like that was under discussion with R4E team. In fact, we&apos;ve already changed the model to support access to org.eclipse.team.core.history.IFileRevision for just this reason as well as for better integration with IDE. But note that storing it this might not be a good general solution and would require a good deal of additional engineering, while the immediate benefits of doing that aren&apos;t really clear. (Note we can&apos;t assume that all backing repos -- in contrast to a git repos specifically for this purpose -- will be git, as Reviews is intended to be Review system agnostic.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272194</commentid>
    <comment_count>6</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-12 19:18:20 -0400</bug_when>
    <thetext>https://git.eclipse.org/r/13782

I did some quick memory and performance benchmarks. (Ed, cc&apos;ing you bcause I thought you might be interested in these..)

For a repos with only one set of Synced patch sets, the results aren&apos;t that impressive. 15.7MB binary v. 20.6 MB xml. This is because the initial files don&apos;t have patch sets and both have overhead for the files themselves.

For very large Reviews, the advantage is more clear.  5.6 MB binary vs. 19.9 MB xml. More important for users are load times for a large review: 334ms vs. 934ms.

The Binary serialization should also be more robust to encoding issues, corruption, etc..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272244</commentid>
    <comment_count>7</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-13 00:08:21 -0400</bug_when>
    <thetext>Miles, depending on the type of content, you might get further improvements from BinaryResourceImpl.OPTION_STYLE_DATA_CONVERTER.  I.e., this allows you to define binary data converters in your model&apos;s factory for values of data type that can be more compactly stored than via their string representation.  If if you don&apos;t have your own data converters, you will likely still benefit from this option because even strings themselves will be decomposed at delimiters and will be tabulated so repeated substrings will be serialized just once.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272529</commentid>
    <comment_count>8</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-13 13:35:27 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Miles, depending on the type of content, you might get further improvements from
&gt; BinaryResourceImpl.OPTION_STYLE_DATA_CONVERTER.  I.e., this allows you to define
&gt; binary data converters in your model&apos;s factory for values of data type that can
&gt; be more compactly stored than via their string representation.  If if you don&apos;t
&gt; have your own data converters, you will likely still benefit from this option
&gt; because even strings themselves will be decomposed at delimiters and will be
&gt; tabulated so repeated substrings will be serialized just once.

Thanks, Ed, that&apos;s cool! Unfortunately, we&apos;re not on 2.9 yet, so we can&apos;t do that, but downstream I could see doing that with the code.

What I&apos;m not clear on is why strings themselves aren&apos;t stored in a more compact binary format. It looks like from API that this option could handle some kind of compression algorithm pretty cleanly, but maybe you wanted to avoid that overhead OOTB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272531</commentid>
    <comment_count>9</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-13 13:40:48 -0400</bug_when>
    <thetext>Tomek wonders about the XML data that is left when we switch to binary. I&apos;d thought about deleting this, but I&apos;m always a little leery of using File.delete and a raw OS path on someone else&apos;s computer in the same statement. Just paranoid, I guess. ;) Plus we have the issue of needing to check this at startup for at least SR1. OTOH, we will be leaving 10-100MB of dross per workspace around, so it&apos;s probably worth doing..?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272547</commentid>
    <comment_count>10</comment_count>
    <who name="Sam Davis">sam.davis</who>
    <bug_when>2013-06-13 14:07:58 -0400</bug_when>
    <thetext>I don&apos;t think users should be storing their own data in that location and expecting it not to be deleted, so I think we should clean it up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272549</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-13 14:13:04 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; I don&apos;t think users should be storing their own data in that location and
&gt; expecting it not to be deleted, so I think we should clean it up.

Right, I was just justifying my laziness by making a very weak claim to risk-aversion. ;) I&apos;ll add that to review; I&apos;m not sure where to put the check though. Perhaps when we get a client for a particular repository? That would mean that we&apos;d still leave the data around for inactive repositories, but see also bug 408475.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272602</commentid>
    <comment_count>12</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-06-13 16:48:51 -0400</bug_when>
    <thetext>Cleaning up makes sense particularly if it&apos;s just cached data. Miles, please also note the old locations on bug 308733: implement clean up to remove legacy files and settings. I remember that we already migrated away from a &quot;model/reviews&quot; directory I believe.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272611</commentid>
    <comment_count>13</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-13 17:01:59 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Cleaning up makes sense particularly if it&apos;s just cached data. Miles, please
&gt; also note the old locations on bug 308733: implement clean up to remove legacy
&gt; files and settings. I remember that we already migrated away from a
&gt; &quot;model/reviews&quot; directory I believe.

Yep, that&apos;s already part of the change I&apos;ll be committing RSN.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272674</commentid>
    <comment_count>14</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-14 02:57:10 -0400</bug_when>
    <thetext>Given that EMF 2.9 can be installed in Eclipse 3.5, and is part of the 4.3 Eclipse platform, and given that it makes significant footprint and performance improvements to the URI implementation as well as to the binary resource implementation, there don&apos;t appear to be compelling reasons not to use it.

Note that instead of using the literal for the new option, you could use your own copy of the string, and in that case the option will be recognized if the user is using EMF 2.9 and ignored otherwise. Of course the serializations based on that option can&apos;t be read with an older version of EMF...

Strings are already stored in a form that typically takes one byte per character so they are relatively compact, the best way to save space is to not store so many of the same strings (or substrings).  Of course one could try to compress the strings themselves using a zip-like algorithm, but even a UTF encoding is relatively time consuming (and isn&apos;t typically more compact than what we do now). Also, a binary resource implementation isn&apos;t just designed to be more compact, but also to load and save faster, so the complexity of the algorithm for processing the bytes has a significant impact on that performance.

In terms of cleaning up, you should be able to use the URI converter&apos;s delete if you know exactly the URI of the old resource.  I agree that it really ought to be cleaned up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2272956</commentid>
    <comment_count>15</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-14 13:52:28 -0400</bug_when>
    <thetext>Please see https://git.eclipse.org/r/#/c/13782/4 for binary file cleanup. (That&apos;s quite simple as we just need to delete the entire directory, but I took the opportunity to clean up some of the tests as well, so it looks like a much bigger change then it really is.)

(In reply to comment #14)
&gt; Given that EMF 2.9 can be installed in Eclipse 3.5, and is part of the 4.3
&gt; Eclipse platform, and given that it makes significant footprint and performance
&gt; improvements to the URI implementation as well as to the binary resource
&gt; implementation, there don&apos;t appear to be compelling reasons not to use it.

There &quot;shouldn&apos;t&quot; be but Steffen had some concerns about build chain that are frankly a bit above my head. :) See bug 407104 comment 3. So it is good to have one more data point for updating to 2.9 across the board. It does seem like we should be able to just move everything to 2.9, but there may be an issue I&apos;m missing there.

&gt; Note that instead of using the literal for the new option, you could use your
&gt; own copy of the string, and in that case the option will be recognized if the
&gt; user is using EMF 2.9 and ignored otherwise. Of course the serializations based
&gt; on that option can&apos;t be read with an older version of EMF...
&gt; 
&gt; Strings are already stored in a form that typically takes one byte per character
&gt; so they are relatively compact, the best way to save space is to not store so
&gt; many of the same strings (or substrings).  Of course one could try to compress

Most of our data is large text blocks, which aren&apos;t likely to be identical. Since this is code, and the way to really save space is with diffs, we will probably end up putting it in a locally managed git repos anyway, but that&apos;s a long-term job.

&gt; the strings themselves using a zip-like algorithm, but even a UTF encoding is
&gt; relatively time consuming (and isn&apos;t typically more compact than what we do
&gt; now). Also, a binary resource implementation isn&apos;t just designed to be more
&gt; compact, but also to load and save faster, so the complexity of the algorithm
&gt; for processing the bytes has a significant impact on that performance.

Got it. Yeah I wouldn&apos;t think it made sense to do the compression OOTB -- w/ memory so cheap it rarely makes sense to compress just for a constant improvement in size. I was niavly thinking there might be a simple way to compress all of the text w/ some kind of Lempel-Ziv variant. I think that&apos;s basically what you&apos;re doing but at field level granulatiry. Perhpas it&apos;s worth considering an option for more aggressive compression so people are able to explicitly decide where they want to be on the size/performance tradeoff.

&gt; In terms of cleaning up, you should be able to use the URI converter&apos;s delete if
&gt; you know exactly the URI of the old resource.  I agree that it really ought to
&gt; be cleaned up.

Yeah, see above, we don&apos;t even have to go that far. When I said I was being lazy, I really meant I was being lazy :# -- it&apos;s in essence 8 lines of code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273082</commentid>
    <comment_count>16</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-15 06:03:24 -0400</bug_when>
    <thetext>Note that the new option will break a large string into substrings at delimiters, i.e., at non-letter/non-digit characters.  The string table is prepopulated with the single character delimiter strings (and with single digit strings because strings like &quot;0&quot; and &quot;1&quot; are so common, so that such strings can be written as a single byte (a compressed int ID), i.e., no bigger than their one-byte character representation within a longer string.  The string table is then further populated with all such substrings, and those have a much higher chance of being duplicates (i.e., many uses of the same identifier/word in any language-based text) and hence a much higher chance of being compressed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273599</commentid>
    <comment_count>17</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-17 15:34:43 -0400</bug_when>
    <thetext>Tired an experiment with the new option. Didn&apos;t see an appreciable difference for most reviews. The only exception is *very* large reviews, with many patch sets. 17.5 MB v. 13 MB --  probably wasn&apos;t enough to justify using on it&apos;s own.

It would be nice to see these eventually support sequences across objects, as we have a *lot* of boilerplate e.g &quot;Build Unstable&quot;..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273635</commentid>
    <comment_count>18</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-17 16:36:37 -0400</bug_when>
    <thetext>I&apos;m ready to merge https://git.eclipse.org/r/#/c/13782/5 but it&apos;s a big enough change that I&apos;d like to see a sanity check/verification from someone else..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273662</commentid>
    <comment_count>19</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-17 19:13:04 -0400</bug_when>
    <thetext>Merged  https://git.eclipse.org/r/#/c/13782</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273671</commentid>
    <comment_count>20</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-17 20:32:46 -0400</bug_when>
    <thetext>This change may have caused an integration test failure.  See https://hudson.eclipse.org/hudson/job/mylyn-reviews-nightly/2279/...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273701</commentid>
    <comment_count>21</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-18 01:59:34 -0400</bug_when>
    <thetext>I&apos;m not sure what you mean by the https://bugs.eclipse.org/bugs/show_bug.cgi?id=409427#c17 comment? 

I wonder if you were you testing the new option in combination with using the ZIP option?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274001</commentid>
    <comment_count>22</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-18 12:11:42 -0400</bug_when>
    <thetext>(In reply to comment #21)
&gt; I&apos;m not sure what you mean by the
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=409427#c17 comment?

Well, in looking at the binary files, there was a lot of repeated text -- when the text was part of different object instances. That seems to miss a significant opportunity for compression. For instance, in our data a lot of the comments on reviews are machine generated boiler-plate.

&gt; I wonder if you were you testing the new option in combination with using the
&gt; ZIP option?

Wait, what zip option? I don&apos;t see anything like that in BinaryResourceImpl. :)

(By the way, Mylyn does compress offline task data with zip.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274200</commentid>
    <comment_count>23</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-18 19:38:01 -0400</bug_when>
    <thetext>If you set a breakpoint after the guards in this method, do you really see it write the same string more than once (and do you see it writing long strings, rather parts of longer strings)?

    public void writeString(String value) throws IOException
    {
      if (value == null)
      {
        writeCompressedInt(-1);
      }
      else
      {
        if (segmentToIDMap != null)
        {
          Integer id = segmentToIDMap.get(value);
          if (id != null)
          {
            writeCompressedInt(id);
            return;
          }
          else
          {
            int idValue = segmentToIDMap.size();
            segmentToIDMap.put(value, idValue);
            writeCompressedInt(idValue);
          }
        }

        int length = value.length();

There&apos;s a zip option for Resource itself and it&apos;s possible to use a URI that writes into a zip file, but I don&apos;t imagine this should save significant space.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274310</commentid>
    <comment_count>24</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2013-06-19 06:51:32 -0400</bug_when>
    <thetext>Another question that strikes me is what you mean by &quot;across objects&quot;.  The tabulated values are mapped for the lifetime of the resource save, so that should be sufficient.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274543</commentid>
    <comment_count>25</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-19 14:07:46 -0400</bug_when>
    <thetext>Now, this is more like it! After tracing through the code, I realized that there was nothing happening because I&apos;d neglected to set BinaryResourceImpl version to BinaryResourceImpl.BinaryIO.Version.VERSION_1_1. With that change in place I saw an improvement much more in line w/ what I&apos;d seen before (e.g. w/ my Butterflyzer project).

For a bunch of reviews w/o patch sets (smaller, less opportunity for packing):

Binary		w/Option
16.4MB		2.7MB

For a single very large review:

Binary		w/Option
15.1MB		1.5MB

That&apos;s not a misplaced decimal. :D

So this is another strong data point for considering updating our EMF dependencies to 2.9 for Luna. (My guess is that that would be too disruptive to even consider for one of the Kepler SRs, but Steffen can speak to that if he wishes.)

I&apos;ve updated https://git.eclipse.org/r/#/c/13856/ so we can track this possibility. (Re) Closing the actual bug because integration test failures appear to be unrelated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274544</commentid>
    <comment_count>26</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-06-19 14:08:30 -0400</bug_when>
    <thetext>(Note that the build obviously fails on the change because we don&apos;t have the 2.9 dependencies.)</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>