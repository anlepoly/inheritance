<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>358554</bug_id>
          
          <creation_ts>2011-09-22 05:44:00 -0400</creation_ts>
          <short_desc>[api] provide an extensible store for task-related information</short_desc>
          <delta_ts>2014-02-20 10:47:35 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Tasks</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>plan</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>---</target_milestone>
          <dependson>371984</dependson>
          <blocked>286294</blocked>
    
    <blocked>309578</blocked>
    
    <blocked>345661</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Steffen Pingel">steffen.pingel</reporter>
          <assigned_to name="Project Inbox">mylyn-triaged</assigned_to>
          <cc>benjamin.muskalla</cc>
    
    <cc>cvgaviao</cc>
    
    <cc>david.green</cc>
    
    <cc>manuel.doninger</cc>
    
    <cc>mik.kersten</cc>
    
    <cc>milesparker</cc>
    
    <cc>sam.davis</cc>
    
    <cc>sebastian.schmidt2</cc>
    
    <cc>shawn.minto</cc>
          
          <votes>3</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1997975</commentid>
    <comment_count>0</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-09-22 05:44:27 -0400</bug_when>
    <thetext>We have seen a need to store task-related information across various components in the frameworks. Currently this information is stored in preferences, the task list, files and often kept in memory even though it is only needed in certain scenarios. Some examples for task-related data:

* Private notes
* Activity
* Interaction history
* Editor mementos
* Version information (e.g. branches)

I propose that we create a new directory structure with one directory per task to aggregate all information for a task that is not stored in the task list or task data cache.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1997977</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-09-22 05:46:26 -0400</bug_when>
    <thetext>Here is a suggestion for the directory structure (from bug 355031):

pre. 
 .mylyn/data/bugs.eclipse.org/1234/
   attachments/
     unsubmitted-patch.txt
   activity.xml
   changesets.xml
   context.xml
   notes.txt
   task-edits.xml
   version.psf
   workspace-state.xml

The cached data could be separated in another directory to make it easier to manually free disk space for instance.

pre. 
 .mylyn/cache/bugs.eclipse.org/1234/
   attachments/
     screenshot.png
   task-data.xml   
   task-lastread.xml</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1998091</commentid>
    <comment_count>2</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-09-22 09:01:41 -0400</bug_when>
    <thetext>Additionally, there is per-repository information that could also be persisted in this store:

* Repository configuration
* Saved queries</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1999205</commentid>
    <comment_count>3</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2011-09-23 19:45:46 -0400</bug_when>
    <thetext>So I thought I&apos;d follow up on the discussion on the Mylyn call &quot;There ought to be a model for this&quot;. The discussion is actually far more general than this, but at the risk of going way off topic, I thought this would be a good place to peg it now. As I was wrapping my head around this particular task, I was asking myself &quot;what kind of information do we want to keep related to a given task?&quot;. And it seemed that the answer is &quot;a pretty complete cross-section of the now internal data structures that Mylyn uses&quot;. So any discussion of how to persist task information naturally leads into the question of what the overall approach to dealing with all of the user data within Mylyn, and what could that approach ideally be. And, yep, much of it is begging for a model.

I&apos;m still pretty unfamiliar with the Mylyn internals, but what I am seeing is a lot of different places where there is highly structured data that it would be nice to be able to get at in many different ways but with well defined rules to preserve integrity and so on. Taken a pretty simple example, I looked at context store. Here it would not be difficult at all to create an EMF model that could gracefully replace the existing nicely abstracted one. Ideally, the objects such as IInteractionContext would be modeled objects themselves, but we could also preserve the existing API. What are the benefits of that? Without getting into everything that an EMF model provides, I&apos;ll randomly throw some ideas out:

1. Easy distribution and introspection so for example a user could identify all Interactions of a certain type within a given period and just grab those elements for a new context.
2. Much more fine-grained ability to slice and dice contexts.
3. Notification, so for example a view could listen for just interactions of a particular type rather than the current approach of having all bridge implementations need to manage all interactions that come their way..
4. Edit command support and validation so that consumers can&apos;t accidently put inconsistent information into the context store
5. Transparency of contexts to users so that they could actually see what they&apos;ve been doing, analyse it, etc..
6. Transform contexts between workspaces as appropriate.
7. Arbitrary persistence mechanisms, so that contexts could be stored in an XML file as currently is happening, on an enterprise DB for access from any workstation, or *in an efficient binary format* so that you don&apos;t have to deal with performance and maintenance overhead of dealing with zip files.
..

And then adding other EMF technologies:

1. CDO: keep distributed enterprise wide contexts updated in real-time across workspaces.
2. EMF Compare: Users can see the deltas between different contexts to understand the overlap between various task types, say.
... I&apos;ll stop there.

Now imagine the same thing for tasks, activities, etc..

So that&apos;s hopefully motivating the overall picture. Sorry, got a bit carried away. But for the case of persisting task related data, here&apos;s how that might work:

Create a model of all of the potential parts just as Steffen has done here, but without a particular persistence mechanism, i.e. file structure. Then we can map that to other resources in an extensible way. Some of those might be appropriate for a model -- e.g. contexts, task meta-data, activity (?).. -- and some not -- i.e. attachments, changesets and other artifacts that have external representations that we can&apos;t or don&apos;t want to change. All of these can be represented within the model. Then we can map that to a local store persistence mechanism that would place them in the directory location or whatever. Since at that point we&apos;re interested in the model and not the particular data store implementation, it will be much easier to change that or make it configurable, so again if people want to keep task meta-data in a separate repository they could.

Again, I&apos;m not familiar enough with the current mechanisms and project history if some of this is already happening or if I&apos;ve got pieces of this confused or if I&apos;m just generally clueless about what&apos;s helpful functionality wise, but to me there looks like a potential for a big functionality and maintainability win here with a significant but I think still pretty constrained effort. I also think that it&apos;s possible to do at least some of this gradually, without disrupting the current API or at least providing a smooth transition path.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047270</commentid>
    <comment_count>4</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-01-06 13:47:15 -0500</bug_when>
    <thetext>Thanks Miles. That&apos;s very valuable input. It&apos;d be great to formalize the models that compose the task context but it&apos;s beyond the scope of this bug and we won&apos;t be able to take that on short term. As we improve the context persistence story we should keep your suggestions in mind and we can start working on towards defining those models.

As discussed on the call, the first step here is to provide a simple API that support storing content on disk on a per task basis. It could make sense to simply create task directories under .metadata/.mylyn/tasks/bugzilla-http.../data/. We could either extend TaskDataManager or create a separate store to handle that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048071</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-01-09 18:21:30 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; Thanks Miles. That&apos;s very valuable input. It&apos;d be great to formalize the models
&gt; that compose the task context but it&apos;s beyond the scope of this bug and we
&gt; won&apos;t be able to take that on short term. As we improve the context persistence
&gt; story we should keep your suggestions in mind and we can start working on
&gt; towards defining those models.

Sounds good. I&apos;ve created bug 368203 to track that possibility.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2066710</commentid>
    <comment_count>6</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-02-16 08:32:55 -0500</bug_when>
    <thetext>Manuel, I might take a first pass at this at the end of this week. Have you already started working on the code?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2066821</commentid>
    <comment_count>7</comment_count>
    <who name="Manuel Doninger">manuel.doninger</who>
    <bug_when>2012-02-16 10:26:38 -0500</bug_when>
    <thetext>Nothing relevant. Just looked around and tried to understand the code. Please go ahead. Since i have vacation next week, i think i can join your work then.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2067955</commentid>
    <comment_count>8</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-02-18 17:36:17 -0500</bug_when>
    <thetext>I have pushed a review here: http://review.mylyn.org/308. The proposed API in AbstractTaskContextStore is commented out but it should give you an idea where I&apos;m going with this.

Files are created under the tasks directory, e.g. for locat task with the ID 2: .mylyn/tasks/local-local/data/2/. The data directory is on the same level as the offline directory that stores cached task data.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068813</commentid>
    <comment_count>9</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-02-21 13:13:01 -0500</bug_when>
    <thetext>I&apos;ll take this for now since we are past the contribution dead line for 3.7. We can always open new bugs any defer any changes or enhancements to 3.8 if you want to work on this further, Manuel.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2105610</commentid>
    <comment_count>10</comment_count>
    <who name="Sam Davis">sam.davis</who>
    <bug_when>2012-05-09 19:30:16 -0400</bug_when>
    <thetext>It would be nice for the framework to support storing information on a task which is automatically persisted only when the task is saved, similar to the key/value pairs you can store on ITask.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>