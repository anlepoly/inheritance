<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402792</bug_id>
          
          <creation_ts>2013-03-08 17:06:00 -0500</creation_ts>
          <short_desc>[model] Enhance model to support more Gerrit functionality</short_desc>
          <delta_ts>2013-04-18 19:00:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Reviews</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          
          <blocked>400168</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Miles Parker">milesparker</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>sebastien.dubois</cc>
    
    <cc>steffen.pingel</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2228352</commentid>
    <comment_count>0</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-03-08 17:06:13 -0500</bug_when>
    <thetext>Add some features to the existing Reviews model to cover currently unsupported Gerrit functionality. These changes should still be relatively Review tool neutral, that is, generic enough to be useful for a typical review methodology/system.

See https://git.eclipse.org/r/#/c/10909/

#Made references between ReviewItem review and Review items opposites. This is neccesary to support properly accessing these values, but might cause issues for R4E. Sebastien, let&apos;s test and discuss.
#Added Committed By and Reference attributes to ReviewItem

Note that we&apos;ll need to regenerate R4E code to support. See https://git.eclipse.org/r/#/c/10547/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238618</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-04-02 09:24:32 -0400</bug_when>
    <thetext>Miles, are you planning to make further changes to the model?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238886</commentid>
    <comment_count>2</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-02 16:13:22 -0400</bug_when>
    <thetext>Yep, there will be some for the current experimental review that I&apos;m about to break up. I&apos;d like to hold this one open until we finish the next round.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2239384</commentid>
    <comment_count>3</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-03 17:51:36 -0400</bug_when>
    <thetext>In fact, there are some more extensive changes that we need to make a judgment on soon. There are a number of approvals related constructs that need to be covered for http://git.eclipse.org/c/mylyn/org.eclipse.mylyn.reviews.git/tree/org.eclipse.mylyn.gerrit.ui/src/org/eclipse/mylyn/internal/gerrit/ui/editor/ReviewSection.java

The question is whether to:

 a) try to come up with reasonable generalizations for the current Reviews model, at the risk of pushing Gerrit semantics into reviews.
 b) create a gerrit specific model implementation, at minor dev effort, but significant maintenance commitment, or 
 c) keep the existing implementation, which would mean that we wouldn&apos;t have good support for remote users, let alone offline updates.

Thoughts?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2239388</commentid>
    <comment_count>4</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-04-03 18:08:03 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; a) try to come up with reasonable generalizations for the current Reviews
&gt; model, at the risk of pushing Gerrit semantics into reviews.

Can you provide a list of concepts that are Gerrit specific and don&apos;t fit into the current model?

&gt; b) create a gerrit specific model implementation, at minor dev effort, but
&gt; significant maintenance commitment, or

-1 we should aim to avoid that. I&apos;d rather create a model that has some flexibility built in and optional parts than maintaining a separate model for Gerrit.

&gt; c) keep the existing implementation, which would mean that we wouldn&apos;t have
&gt; good support for remote users, let alone offline updates.

Not sure what the implications of this are. I consider offline functionality of the Gerrit connector broken at the moment so the status quo is not a viable option in my opinion. We would then have to discuss rolling back the remote API changes which I don&apos;t think anybody wants.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2239401</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-03 19:18:12 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; &gt; b) create a gerrit specific model implementation, at minor dev effort, but
&gt; &gt; significant maintenance commitment, or
&gt; 
&gt; -1 we should aim to avoid that. I&apos;d rather create a model that has some
&gt; flexibility built in and optional parts than maintaining a separate model for
&gt; Gerrit.

I agree that the last thing I want to do is implement that now. OTOH, we will have to support additional review flavors/types for R4E and presumably others, so it wouldn&apos;t be an unreasonable option if we had plenty of time, which we don&apos;t. :) I think it is likely we&apos;ll want to return to revisit this later though. 

&gt; &gt; c) keep the existing implementation, which would mean that we wouldn&apos;t have
&gt; &gt; good support for remote users, let alone offline updates.
&gt; 
&gt; Not sure what the implications of this are. I consider offline functionality of
&gt; the Gerrit connector broken at the moment so the status quo is not a viable
&gt; option in my opinion. We would then have to discuss rolling back the remote API
&gt; changes which I don&apos;t think anybody wants.

Agreed. c) isn&apos;t a real option, but I included it for thoroughness. One thing that I didn&apos;t appreciate at the beginning of this exercise was the neat trick the Gerrit remote connector uses to persist offline and the implications of that for our attempt to change the airplane engine while we&apos;re in the air. The connector gathers everything into the Gerrit object using the Gerrit APIs, and then freeze-dries it via JSON to task data. So basically the connector can treat many of the Gerrit constructs as if they are live. However, there actually *never were* model analogs for much of the key Gerrit functionality. So we&apos;re not really re-implementing or refactoring this functionality, we&apos;re implementing it for the first time. But as I said earlier, there is *no half way done here* -- we&apos;re committed to putting these into the model or we won&apos;t have any way to persist them.

Since we need to deal w/ this asap, that implies a) : making the changes in the reviews model, perhaps with a view toward generalizing them further or off-loading them later.

What we need is basically what builds up the Review Peoples matrix, requirements*, and the dependencies. I don&apos;t think we need to surface a lot of the stuff that&apos;s in the Gerrit model, so probably something like the below:

___People___

UserApproval
	User user
	ApprovalItem* approvals

ApprovalItem
	ApprovalType type
	Integer value
	
ApprovalType
	String id;  (e.g. &quot;Verified&quot;, &quot;Code Review&quot;, 

Reviews
	UserApproval approvals

ReviewGroup
	ApprovalType* approvalsTypes

(I&apos;m not actually happy w/ &quot;Approval&quot; as a name, but I can&apos;t think of a better one offhand.)

___Requirments___

I&apos;m actually not sure how the requirements is supposed to function; I can&apos;t find a review that actually has that section, e.g. that has items for &quot;missing approvals&quot;. Does anyone have an example of this?

___Dependencies___

Change (New)
	id
	subject
	message
	state

Review -&gt; Change...
	Change* parents
	Change* children</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2239411</commentid>
    <comment_count>6</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2013-04-03 21:52:32 -0400</bug_when>
    <thetext>From our point of view, a) is by far the preferred solution.  It does not matter much to us if some the the constructs are a little gerrit-specific, as R4E will be aligned more and more with Gerrit anyways.  In any case we will extend the base model and can just not use some of the constructs if we do not need them.  Of course optionality is a must for those.

b is not really acceptable, nor is c, as one of the main new features we want to introduce is the ability to review code locally (offline).  Also the remotes API is of particular interest for us, since we will implement our own remote persistence mechanism with it, as well as using it to persist the data on a gerrit server as an option to our users.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2239733</commentid>
    <comment_count>7</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-04-04 14:35:18 -0400</bug_when>
    <thetext>Thanks fore the detailed list! Sounds like we are all in agreement that a) is the way to go.

From my point of view it looks like we can represent the missing Gerrit concepts in the model. In terms of extensibility I was thinking that some objects could have key/value maps or a similar mechanism that support storing additional data. With JSon it&apos;s very simple to store complex types as well if there are internal Gerrit IDs or the like need to be persisted but don&apos;t have meaning in the reviews model otherwise. If we don&apos;t need it great but it&apos;s something to explore before we extend the model.

(In reply to comment #5)
&gt; ___People___
&gt; 
&gt; UserApproval
&gt; User user
&gt; ApprovalItem* approvals
&gt; 
&gt; ApprovalItem
&gt; ApprovalType type
&gt; Integer value
&gt; 
&gt; ApprovalType
&gt; String id;  (e.g. &quot;Verified&quot;, &quot;Code Review&quot;,
&gt; 
&gt; Reviews
&gt; UserApproval approvals
&gt; 
&gt; ReviewGroup
&gt; ApprovalType* approvalsTypes

This all sounds reasonably generic and we can come up with different terminology if the names don&apos;t fit well. 

&gt; ___Requirments___
&gt; 
&gt; I&apos;m actually not sure how the requirements is supposed to function; I can&apos;t find
&gt; a review that actually has that section, e.g. that has items for &quot;missing
&gt; approvals&quot;. Does anyone have an example of this?

These are the categories that are missing votes. I don&apos;t see them in the review editor so it looks like this broke. In the web UI they are listed under the reviewers table, e.g. on https://git.eclipse.org/r/#/c/2609/:

* Need Code-Review
* Need IP-Clean

I&apos;ll file a separate bug for the missing requirements. In terms of the model it seems reasonable to represent requirements.

&gt; ___Dependencies___
&gt; 
&gt; Change (New)
&gt; id
&gt; subject
&gt; message
&gt; state
&gt; 
&gt; Review -&gt; Change...
&gt; Change* parents
&gt; Change* children

This sounds very generic as well and would make sense to represent in the model.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241117</commentid>
    <comment_count>8</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-08 14:07:01 -0400</bug_when>
    <thetext>Important note: In Gerrit, approvals are actually based on patch sets, not the review as a whole. Change Detail does allow retrieval of approvals for change detail, and that appears to be what the current editor is using for the Reviews detail section. So to be clear, we will not be supporting these at the patch set / ReviewItemSet level, just for the review as a whole.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241121</commentid>
    <comment_count>9</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-08 14:18:06 -0400</bug_when>
    <thetext>___Dependencies___

Another issue -- one that we don&apos;t need to resolve right away -- is what to do in the case where a change matches some other review change, or when multiple reviews have dependencies on the same change. Currently, I&apos;m just planning to have a simple containment on Reviews and allow these to be duplicated, but at some point it might make sense to unify these into a common graph so that we would be able to trace all change dependencies across reviews.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241156</commentid>
    <comment_count>10</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-08 16:33:10 -0400</bug_when>
    <thetext>Sebastien, I&apos;d like to get rid of ReviewGroup#ReviewGroupTask. Do you have a problem with that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241167</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-08 16:51:36 -0400</bug_when>
    <thetext>Sebastien, also note that I&apos;m creating:

Repository &lt;- ReviewGroup
	-approvalTypes
	-reviewStates
	
Now, I&apos;d like to change the type/name of Review#group to Review#repository, but I&apos;m not sure that that will work for R4E. Is this really a seperate concept? If so, can we accomodate it seperatly somehow?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241232</commentid>
    <comment_count>12</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2013-04-09 00:10:04 -0400</bug_when>
    <thetext>Miles,

For the ReviewGroup#ReviewGroupTask, you can get rid of it, as we do not use it in R4E.

The new elements should be okay, as long as they are optional.

For changing Review#group to Review#repository, yes that would break the R4E persistency.  However if needed we can use our upgrade engine to correct the serialized data when upgrading to the new version, but this is not the preferred solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241743</commentid>
    <comment_count>13</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-09 16:47:12 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; For changing Review#group to Review#repository, yes that would break the R4E
&gt; persistency.  However if needed we can use our upgrade engine to correct the
&gt; serialized data when upgrading to the new version, but this is not the preferred
&gt; solution.

I think we can keep it as a group reference. That also allows us more flexibility in allowing reviews to be organized. We&apos;ll either cast it to repository where neccessary, or I may add a derived convenience method.

Sebastien, re: ReviewComponent is also something I&apos;d like to get rid of, since now it only has this enabled flag. We don&apos;t have to do this now, but I can&apos;t remember if this was neccessary and might be replaced by some other capability in R4E? Like, you might not need to do the enabled stuff if you aren&apos;t worried about file contention issues with remote API.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241765</commentid>
    <comment_count>14</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-09 18:12:10 -0400</bug_when>
    <thetext>Sebastien, one other issue. I&apos;ve removed Review#items and replaced it with Review#sets, as at least to my understanding,  reviews should never contain items directly -- they should always be part of a review set.  But I&apos;m thinking that R4E may be making a different assumption. See RModelFactoryExtImpl L 612. Seems to be expecting an arbitrary item?

1) Does this change make sense to you, and 2) If so, will this change cause other difficulties? It would require a model transformation, but I&apos;m beginning to think that&apos;s inevitable to have a really clean Review model, and we should avoid having the R4E tail wagging the Reviews dog, as it were. ;D</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242262</commentid>
    <comment_count>15</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2013-04-10 20:54:21 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to comment #12)
&gt; &gt; For changing Review#group to Review#repository, yes that would break the R4E
&gt; &gt; persistency.  However if needed we can use our upgrade engine to correct the
&gt; &gt; serialized data when upgrading to the new version, but this is not the preferred
&gt; &gt; solution.
&gt; 
&gt; I think we can keep it as a group reference. That also allows us more
&gt; flexibility in allowing reviews to be organized. We&apos;ll either cast it to
&gt; repository where neccessary, or I may add a derived convenience method.
&gt; 
&gt; Sebastien, re: ReviewComponent is also something I&apos;d like to get rid of,
&gt; since now it only has this enabled flag. We don&apos;t have to do this now, but I
&gt; can&apos;t remember if this was neccessary and might be replaced by some other
&gt; capability in R4E? Like, you might not need to do the enabled stuff if you
&gt; aren&apos;t worried about file contention issues with remote API.

The Review Component enabled flag is used in R4E to restrict visibility i.e. when the derived element is obsoleted/deleted by the user then we really set its enabled state to false and we filter it out.  I could actually see this being useful in the common base e.g. to filter out abandoned gerrit reviews etc.  I is just an abstraction of any model element and could stay there fow now I think.  Otherwise we would have to alter the derived R4E model</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242266</commentid>
    <comment_count>16</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2013-04-10 21:20:47 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; (In reply to comment #13)
&gt; &gt; (In reply to comment #12)
&gt; &gt; &gt; For changing Review#group to Review#repository, yes that would break the R4E
&gt; &gt; &gt; persistency.  However if needed we can use our upgrade engine to correct the
&gt; &gt; &gt; serialized data when upgrading to the new version, but this is not the preferred
&gt; &gt; &gt; solution.
&gt; &gt; 
&gt; &gt; I think we can keep it as a group reference. That also allows us more
&gt; &gt; flexibility in allowing reviews to be organized. We&apos;ll either cast it to
&gt; &gt; repository where neccessary, or I may add a derived convenience method.
&gt; &gt; 
&gt; &gt; Sebastien, re: ReviewComponent is also something I&apos;d like to get rid of,
&gt; &gt; since now it only has this enabled flag. We don&apos;t have to do this now, but I
&gt; &gt; can&apos;t remember if this was neccessary and might be replaced by some other
&gt; &gt; capability in R4E? Like, you might not need to do the enabled stuff if you
&gt; &gt; aren&apos;t worried about file contention issues with remote API.
&gt; 
&gt; The Review Component enabled flag is used in R4E to restrict visibility i.e.
&gt; when the derived element is obsoleted/deleted by the user then we really set
&gt; its enabled state to false and we filter it out.  I could actually see this
&gt; being useful in the common base e.g. to filter out abandoned gerrit reviews
&gt; etc.  I is just an abstraction of any model element and could stay there fow
&gt; now I think.  Otherwise we would have to alter the derived R4E model

(In reply to comment #14)
&gt; Sebastien, one other issue. I&apos;ve removed Review#items and replaced it with
&gt; Review#sets, as at least to my understanding,  reviews should never contain
&gt; items directly -- they should always be part of a review set.  But I&apos;m
&gt; thinking that R4E may be making a different assumption. See
&gt; RModelFactoryExtImpl L 612. Seems to be expecting an arbitrary item?
&gt; 
&gt; 1) Does this change make sense to you, and 2) If so, will this change cause
&gt; other difficulties? It would require a model transformation, but I&apos;m
&gt; beginning to think that&apos;s inevitable to have a really clean Review model,
&gt; and we should avoid having the R4E tail wagging the Reviews dog, as it were.
&gt; ;D

Yeah there we arrive at the main difference between the original common model and the version Steffen forked at the time.  In the original vision, the item element was supposed to mean an item of the review i.e. a patch set.  However in steffen&apos;s version he uses Review Item for a completely different purpose.  So yes having this change will cause backward compatibility problems in R4E and we will need to have some kind of transformation.  OTOH the Kepler version is already shaping to be a big change anyways, so we might as well cram every model change we want and maybe we&apos;ll just say that the R4E version based on it is not backward compatible.

By the same token I think your effort is the best time to change to model with the changes in bug 371428 comment 6 and bug 403393 i.e. changing Mylyn Reviews IFileRevision to IFileVersion and introduce a reference to the team API repository at the review level and a reference to the team API IFileRevision in the Mylyn IFileVersion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242691</commentid>
    <comment_count>17</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-11 13:49:06 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; The Review Component enabled flag is used in R4E to restrict visibility i.e.
&gt; when the derived element is obsoleted/deleted by the user then we really set its
&gt; enabled state to false and we filter it out.  I could actually see this being
&gt; useful in the common base e.g. to filter out abandoned gerrit reviews etc.  I is
&gt; just an abstraction of any model element and could stay there fow now I think.
&gt; Otherwise we would have to alter the derived R4E model

It isn&apos;t really harming anything though it does make things a bit more complex then they&apos;d otherwise need to be. My chief issue is actually that it&apos;s really a UI concern and I think user specific. When we revisit, this we should consider having a separate UI/configuration model that the API could query to discover stuff like this. This could be part of a model that supports say setting local priority levels, time spent, etc.. -- stuff that is applicable to lot&apos;s of model objects and is currently stored in task data.

(In reply to comment #16)
&gt; Yeah there we arrive at the main difference between the original common model
&gt; and the version Steffen forked at the time.  In the original vision, the item
&gt; element was supposed to mean an item of the review i.e. a patch set.  However in
&gt; steffen&apos;s version he uses Review Item for a completely different purpose.  So
&gt; yes having this change will cause backward compatibility problems in R4E and we
&gt; will need to have some kind of transformation.  OTOH the Kepler version is
&gt; already shaping to be a big change anyways, so we might as well cram every model
&gt; change we want and maybe we&apos;ll just say that the R4E version based on it is not
&gt; backward compatible.

I agree. And we do have the regexp search and replace mechanism I built last year to hopefully take care of stuff like this. But I&apos;m not sure if you&apos;re saying that this will also cause difficulties for you because it doesn&apos;t match up w/ the actual R4E design (vs. strcuture)?

&gt; By the same token I think your effort is the best time to change to model with
&gt; the changes in bug 371428 comment 6 and bug 403393 i.e. changing Mylyn Reviews
&gt; IFileRevision to IFileVersion and introduce a reference to the team API
&gt; repository at the review level and a reference to the team API IFileRevision in
&gt; the Mylyn IFileVersion.

Yeah, I wondered about doing that now too, it seemed like a seperate concern, but I agree that we should just go ageand and do that now. I&apos;ll update the review with this change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242804</commentid>
    <comment_count>18</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-11 17:02:14 -0400</bug_when>
    <thetext>Please review: https://git.eclipse.org/r/#/c/11795/

(In reply to comment #17)
&gt; &gt; the changes in bug 371428 comment 6 and bug 403393 i.e. changing Mylyn Reviews
&gt; &gt; IFileRevision to IFileVersion and introduce a reference to the team API
&gt; &gt; repository at the review level and a reference to the team API IFileRevision
&gt; in
&gt; &gt; the Mylyn IFileVersion.
&gt; 
&gt; Yeah, I wondered about doing that now too, it seemed like a seperate concern,
&gt; but I agree that we should just go ageand and do that now. I&apos;ll update the
&gt; review with this change.

Changed my mind. :) I think since we have a seperate bug already and this one is already very crowded, we should handle this as a seperate review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242805</commentid>
    <comment_count>19</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-11 17:03:15 -0400</bug_when>
    <thetext>Copying Review description here:

Gerrit Related:
    Added Review parents, children, reviewerApprovals
    supported by RequirementEntry, RequirementStatus,
      ReviewRequirementsMap and RequirementReviewState entities
    New Change class pushes id, key, subject, message, owner and state
      down from Review
Persistence Support:
    Added containment for TopicContainer#directTopics
    Removed derived from ReviewGroup#reviews, Review#review
    Created containment reference for
     ReviewGroup#reviews, ReviewGroup#users, ReviewItem#items,
Topic#comments and opposites
Other:
    Removed obsolete #reviewTask from Review
    Set ReviewComponent#enabled id property to false
    Added descriptor to ReviewState to support generic naming and
SimpleReviewState for extension
    Changed Review#items -&gt; Review#sets and type from ReviewItem -&gt;
ReviewItemSet</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242808</commentid>
    <comment_count>20</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-11 17:10:55 -0400</bug_when>
    <thetext>For R4E, please review https://git.eclipse.org/r/#/c/11834/

*Note that this is now broken!* See my comments. That&apos;s because of the change from Review#items to Review#sets. Note that it is not a matter of simply renaming, it is a type issue. I need to know whether it is safe to check for IReviewItemSet here and then cast to it, or if it is indeed possible to have a non-IReviewItemSet IReviewItem here. If the latter, we need to revisit https://git.eclipse.org/r/#/c/11795/.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2245722</commentid>
    <comment_count>21</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-18 17:45:51 -0400</bug_when>
    <thetext>Merged: https://git.eclipse.org/r/#/c/11795/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2245752</commentid>
    <comment_count>22</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-04-18 19:00:29 -0400</bug_when>
    <thetext>Resolving. Further model changes will happen under new bugs.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>