<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>394925</bug_id>
          
          <creation_ts>2012-11-22 13:20:00 -0500</creation_ts>
          <short_desc>[navigator] extend model to support common navigator</short_desc>
          <delta_ts>2013-01-31 14:50:17 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Reviews</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>contributed</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          
          <blocked>334967</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Miles Parker">milesparker</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>alvsan09</cc>
    
    <cc>robert.munteanu</cc>
    
    <cc>sebastien.dubois</cc>
    
    <cc>steffen.pingel</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2186761</commentid>
    <comment_count>0</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-11-22 13:20:33 -0500</bug_when>
    <thetext>We&apos;ll be adding some features to core model mostly to support some common navigator and presentation features but that could also be more generally useful.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193486</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-12 05:19:51 -0500</bug_when>
    <thetext>Copying comment from Miles from https://bugs.eclipse.org/bugs/show_bug.cgi?id=334967#c10:

See review https://git.eclipse.org/r/#/c/9175/

I&apos;ve proposed the following changes to the model to support the UI changes:

Create TopicContainer to encapsulate all items that (yes) can contain topics, that is Reviews and ReviewItems.
Created a derived &quot;allComments&quot; reference for TopicContainers. This represents all comments contained (reachable) from the container, e.g. Reviews contain all PatchSets comments, which contain all Artifact comments.
Move createTopicComment operation to TopicContainer, so Review instances provide this behavior. 
The topics reference is no longer derived. This may break R4E functionality, but is a change we&apos;ll need to make at some point in any case.
Created an opposite reference from Comment &quot;parentTopic&quot; to Topic &quot;comments&quot;.
Created an &quot;owner&quot; entry for Reviews.
Added a reference to FileItem (file) from File Revision.
Added rangeMin and rangeMax derived values for line locations.
Created an Orderable interface to allow items to place themselves in an arbitrary ordered space. (e.g. linenumber for comments)
Created a Dateable interface to support all classes that have creation and update dates.
Created a Dateable derived value &quot;lastChangeDate&quot; to return the last date the object was modified. (For case where updateDate is null, but creationDate is not.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193488</commentid>
    <comment_count>2</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-12 05:30:38 -0500</bug_when>
    <thetext>I&apos;m slightly confused regarding the design of IComment and ITopic (which is an IComment itself). Are the following assumptions correct?

* An ITopic is contained in a review.
* Several review items (file revisions) can reference the same topics (not supported in Gerrit but in the model/R4E).
* The ITopic instance is the first comment of a thread.
* Referenced IComment instances are replies to the topic or replies to replies.

The &quot;replies&quot; and &quot;comments&quot; fields of ITopic seem to overlap in a confusing way. 

I&apos;m also confused by the fact that an ITopic can have several locations but one IReviewItem. Miles, with the change to allowing multiple locations per topic would it make more sense to tie the item to the location? I believe I avoided this complication in the framework model originally since there wasn&apos;t a use-case in the Gerrit connector.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193718</commentid>
    <comment_count>3</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2012-12-12 12:28:46 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; I&apos;m slightly confused regarding the design of IComment and ITopic (which is
&gt; an IComment itself). Are the following assumptions correct?
&gt; 
&gt; * An ITopic is contained in a review.
&gt; * Several review items (file revisions) can reference the same topics (not
&gt; supported in Gerrit but in the model/R4E).
&gt; * The ITopic instance is the first comment of a thread.
&gt; * Referenced IComment instances are replies to the topic or replies to
&gt; replies.
&gt; 
&gt; The &quot;replies&quot; and &quot;comments&quot; fields of ITopic seem to overlap in a confusing
&gt; way. 
&gt; 
&gt; I&apos;m also confused by the fact that an ITopic can have several locations but
&gt; one IReviewItem. Miles, with the change to allowing multiple locations per
&gt; topic would it make more sense to tie the item to the location? I believe I
&gt; avoided this complication in the framework model originally since there
&gt; wasn&apos;t a use-case in the Gerrit connector.

Some clarifications, from an R4E perspective:

* ITopics are indeed contained in a Review

* The ITopic instance is indeed the first comment of a thread.  In R4E we extend ITopic with R4EAnomaly.

* In R4E, the Topics (R4EAnomalies) are not directly linked to the Review Items themselves.  What happens is that there is a mapping done to link Topics with File Versions, but only in the UI.  The way this is done is at the opening of the review (when UI model data structures are populated) by comparing the File Version the Topic (Anomaly) is written on, and compare it with each file version under all the Review items.  If a match is detected, then the Topic (Anomaly) is added under this File version in the UI model only.  In the core model, Topics are treated independently and only refer to their parent review.  

  So the bottom line if we do use the Review Item references to Topics (at least as of now).  The Review element is the sole &quot;Topic Container&quot;

* IComments are child comments of an ITopic i.e. replies to it.  In R4E, we extend the IComment with R4E.  We also allow only 1 level of replies to an ITopic (for now anyways), but in Gerrit the are no limits on replies to other replies.


I agree that the &quot;comments&quot; field in Topic seems superfluous, as Topic is a Comment, which already has the &quot;replies&quot; filed for the same purpose.

For ITopic having several locations, we had put that in the model at the beginning to support having the same comment at various locations.  However, the do not use it right now, since this would mean that the anomalies at all the various locations will really be the same one and cannot be tracked independently.  Right now, we clone the Topic (R4EAnomaly) every time, so we only use 1 location per Topic. I&apos;m actually not sure if we should keep the multiple locations per topic, or only support one?

Regarding Comment positioning, I think the actual approach of relying on line locations is a little bit too restrictive.  For instance, in R4E we can define comments down to the character position (e.g. put a comment on part of a line).  It would be good to support this kind of granularity in the model.  Also, later on when e.g. supporting model reviews, the location will not necessarily be kept in terms of line numbers.  So having a generic Location is perfectly OK, but maybe the extension of the this generic location i.e. LineRange should maybe have startPosition and length members,  on top of the current start and end member it has (See R4ETextPosition on how this is done in R4E).

Also in R4E, since anomalies only belong to parent Reviews, we extended the Location so that the Anomaly (Topic) has a direct reference to the specific File Version (file) it is written on.  This is also needed to map anomalies to the correct files (as I explained above).


Now regarding Miles changes, some comments:

The new TopicContainer element change is OK, It won&apos;t really affect R4E for now, as we only use the Review element as Topic container anyways.

However, removing the derived attribute from the Topic will indeed badly break R4E right now.  The reason the Topic is derived now in R4E has to do with the fact that the Comments are actually serialized per user, and not in the Review resource file itself.  This was done to minimize the risk of collisions/merge occurrences when serializing the information to file.  As we move towards supporting offline reviews, we are planning to remove this user division (which will then be obsolete, and then it will be OK to remove the derived.  We would prefer this is not touched now if it can be avoided.  Otherwise we will have to manually hack the code in the R4E Model to manually emulate the derived behavior for topics, which is not pretty.

All other changes are OK, but see my comments above on line locations and position tracking in general.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193725</commentid>
    <comment_count>4</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 12:46:57 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; I&apos;m slightly confused regarding the design of IComment and ITopic (which is an
&gt; IComment itself).

Darn, I was sort of assuming that you knew waht was going on here, because I&apos;m confused about the distinction as well.

&gt; * An ITopic is contained in a review.

Yes, for *global* comments, where the relationship is 1:*. No for comments on file revisions.

We need to be careful about  what we mean by &quot;containment&quot;, because we haven&apos;t actually specified containment relationships yet, as doing so would cause issues with current R4E persistence mechanism. But yes, TopicContainer topics would be a containment relationship if we could define it that way now.) 

&gt; * Several review items (file revisions) can reference the same topics (not
&gt; supported in Gerrit but in the model/R4E).

No, I think that topics should be referenced by one and only one review item. This should be a containment reference, but can&apos;t be until we 

&gt; * The ITopic instance is the first comment of a thread.

That&apos;s what I had thought. And this is why I added in support for &quot;all comments&quot;.

&gt; * Referenced IComment instances are replies to the topic or replies to replies.

Yes. (This came up when discussing this review https://git.eclipse.org/r/#/c/7688/)

&gt; The &quot;replies&quot; and &quot;comments&quot; fields of ITopic seem to overlap in a confusing
&gt; way.

Totally! What I found really odd in the existing code was that a user created comment actually creates two comments; a parent &quot;topic&quot; and a child &quot;comment&quot;, both with the same creation date, author, message, etc.. Can you think of any reason why this would have made sense? To my eye, topics serve as a sort of anchor for, well a topic of conversation, and that could support multiple locations in code (as R4E does), generic subject threads, etc.. My take is that a Topic shouldn&apos;t be a Comment in the first place. So for example when a user creates a comment for

I think this is all complicated by the fact that none of this has actually been supported in the UI (you couldn&apos;t reply to comments anyway!) so this hasn&apos;t really been exercised fully. But I just saw Sebatien&apos;s response and that clarifies things.

&gt; I&apos;m also confused by the fact that an ITopic can have several locations but one
&gt; IReviewItem. Miles, with the change to allowing multiple locations per topic
&gt; would it make more sense to tie the item to the location? I believe I avoided
&gt; this complication in the framework model originally since there wasn&apos;t a
&gt; use-case in the Gerrit connector.

From Sebastien&apos;s response it looks like rather than make locations * cardinality, we should have changed it to single cardinality for R4E. If we &quot;assume&quot; one and only one location per topic, then it still makes sense to tie this to item, but otherwise it is sort of a mess. 

If you wanted to support this properly, I think you would actually want a &quot;TopicLocation&quot; class, holding a reference to a topic, file item, and whatever arbitrary coordinate (e.g. line number, offset, model item) that an implementation provides. But I&apos;m loath to make a large change like that at this point. I think we could legislate for now that the locations are meant to refer to locations within the one and only one file referenced from the topic. Personally, I see a lot of advantage in the idea of allowing topics to refer to multiple locations and even file revisions, but that will be a lot easier to manage when we have Edit support and other mechanisms to ensure internal consistency. Otherwise the whole thing is kind of scary.

To summarize, here are the options as I see them:

1. Consider modifying Topics so that they no longer extend Comments. (But I&apos;d like to avoid this change for now, if we can.)
2. a) Consider creating a TopicLocation class as described above.
	b) Return Topic location cardinality to 1:1.
	c) Leave Topic as it is for now, even though we recognize that having one file item reference and multiple locations doesn&apos;t actually make much sense.

My feeling is is that we should probably leave things as they are for the time being, but plan to come back to this as part of a new iteration of model improvements once we have a better handle on what features model consumers actually need.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193735</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 13:01:07 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; &gt; * Several review items (file revisions) can reference the same topics (not
&gt; &gt; supported in Gerrit but in the model/R4E).
&gt; 
&gt; No, I think that topics should be referenced by one and only one review item.
&gt; This should be a containment reference, but can&apos;t be until we

Whoops, petered out there..

The point here is that review items aren&apos;t simply FileItems. They can also be ReviewItemSet (e.g. Gerrit Patchsets). Therefore, a topic could be contained at any of these levels. This is what really needs to be worked out eventually, because there are actually two issues here:

1. Where a topic is *contained*. That is, who really &quot;owns&quot; the topic? I might create a topic that refers to just a single file, or one that refers to files within a patchset, or one that refers to files across patchsets. (Or even across reviews, but let&apos;s not even go there!)
2. What artifacts a topic *refers* to.

Right now in Gerrit at least, those two concerns are elided. But that is a limiting assumption.

In any case for now we should probably simply focus on ensuring that we support the Gerrit and R4E use cases properly as they are. The current model doesn&apos;t make perfect sense, but I think it at least works.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193740</commentid>
    <comment_count>6</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2012-12-12 13:04:46 -0500</bug_when>
    <thetext>
&gt; &gt; * An ITopic is contained in a review.
&gt; 
&gt; Yes, for *global* comments, where the relationship is 1:*. No for comments
&gt; on file revisions.

For R4E all comments (global and linked to file revisions) are currently linked to reviews only.  In my previous comments, I explain how in R4E we manage to map the comments to their respective file versions.  But there is no explicit relationship between Topic and Review Items / File Items that is used in R4E. This is done to minimize merges as I state above

&gt; 
&gt; To summarize, here are the options as I see them:
&gt; 
&gt; 1. Consider modifying Topics so that they no longer extend Comments. (But
&gt; I&apos;d like to avoid this change for now, if we can.)

Please no :-)

&gt; 2. a) Consider creating a TopicLocation class as described above.
&gt; 	b) Return Topic location cardinality to 1:1.
&gt; 	c) Leave Topic as it is for now, even though we recognize that having one
&gt; file item reference and multiple locations doesn&apos;t actually make much sense.
&gt; 
&gt; My feeling is is that we should probably leave things as they are for the
&gt; time being, but plan to come back to this as part of a new iteration of
&gt; model improvements once we have a better handle on what features model
&gt; consumers actually need.

My vote is for option 2c) only, although 2b) could be added too.

Options 1 would be problematic so I prefer not and 2a) would in theory be OK, but I&apos;m afraid is could break the R4E serialization.

As for the change of the topic being derived in Reviews etc.  we need to discuss this offline, as this has major implications for the current R4E.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193752</commentid>
    <comment_count>7</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 13:19:37 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; &gt; 1. Consider modifying Topics so that they no longer extend Comments. (But
&gt; &gt; I&apos;d like to avoid this change for now, if we can.)
&gt; 
&gt; Please no :-)

Do you mean &quot;please no, that&apos;s a terrible idea&quot;, or &quot;please no, let&apos;s not complicate things further right now&quot;? Because I don&apos;t think that Topics should be Comments ultimately.

&gt; My vote is for option 2c) only, although 2b) could be added too.

Agreed.

&gt; As for the change of the topic being derived in Reviews etc.  we need to discuss
&gt; this offline, as this has major implications for the current R4E.

Yep, one of the options we&apos;ve been considering is to create some kind of non-derived clientTopics reference. Then we could implement the derived value for Gerrit as simply returning the clientTopics. Ugly as hell, but we&apos;d replace it with simply topics when we do away with the serialization mechanisms currently in R4E. This might make things ugly for other consumers, but I think we have to recognize that there are going to be a number of changes over the next little while...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193773</commentid>
    <comment_count>8</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2012-12-12 13:50:07 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; &gt; 1. Consider modifying Topics so that they no longer extend Comments. (But
&gt; &gt; &gt; I&apos;d like to avoid this change for now, if we can.)
&gt; &gt; 
&gt; &gt; Please no :-)
&gt; 
&gt; Do you mean &quot;please no, that&apos;s a terrible idea&quot;, or &quot;please no, let&apos;s not
&gt; complicate things further right now&quot;? Because I don&apos;t think that Topics
&gt; should be Comments ultimately.
&gt; 

In R4E topics are extended as anomalies, with state tracking etc..  so we would like to keep the structure as it is now for the time being.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193877</commentid>
    <comment_count>9</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-12 16:56:39 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; (In reply to comment #6)
&gt; &gt; &gt; &gt; 1. Consider modifying Topics so that they no longer extend Comments. (But
&gt; &gt; &gt; &gt; I&apos;d like to avoid this change for now, if we can.)
&gt; &gt; &gt;
&gt; &gt; &gt; Please no :-)
&gt; &gt;
&gt; &gt; Do you mean &quot;please no, that&apos;s a terrible idea&quot;, or &quot;please no, let&apos;s not
&gt; &gt; complicate things further right now&quot;? Because I don&apos;t think that Topics
&gt; &gt; should be Comments ultimately.
&gt; &gt;
&gt; 
&gt; In R4E topics are extended as anomalies, with state tracking etc..  so we would
&gt; like to keep the structure as it is now for the time being.

I can&apos;t remember why we ended up adding a comment in Gerrit instead of specifying attributes on the topic. It looks to me that we are using the model in a different way then intended so this should be fixed in the framework / Gerrit. Having topic and comment separated could make the model easier to understand but I&apos;m okay keeping the current structure where topic is also a comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193886</commentid>
    <comment_count>10</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 17:10:01 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; I can&apos;t remember why we ended up adding a comment in Gerrit instead of
&gt; specifying attributes on the topic. It looks to me that we are using the model
&gt; in a different way then intended so this should be fixed in the framework /
&gt; Gerrit. Having topic and comment separated could make the model easier to
&gt; understand but I&apos;m okay keeping the current structure where topic is also a
&gt; comment.

I think there are clear topic concerns that are relevant to all comments and that conversely topics aren&apos;t really comments at all. By analogy, this closest to the distinction between a thread and a post on an internet forum. I&apos;d really like to revisit this if we have an opportunity down the line.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193889</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 17:11:10 -0500</bug_when>
    <thetext>&quot;clear topic concerns that are relevant to all comments &quot; -&gt; &quot;clear topic concerns that are *not* relevant to all comments&quot;  e.g. location, task reference, title...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193890</commentid>
    <comment_count>12</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-12 17:18:09 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; (In reply to comment #4)
&gt; &gt; &gt; * Several review items (file revisions) can reference the same topics (not
&gt; &gt; &gt; supported in Gerrit but in the model/R4E).
&gt; &gt;
&gt; &gt; No, I think that topics should be referenced by one and only one review item.
&gt; &gt; This should be a containment reference, but can&apos;t be until we

Okay, 

&gt; 
&gt; Whoops, petered out there..
&gt; 
&gt; The point here is that review items aren&apos;t simply FileItems. They can also be
&gt; ReviewItemSet (e.g. Gerrit Patchsets). Therefore, a topic could be contained at
&gt; any of these levels. This is what really needs to be worked out eventually,
&gt; because there are actually two issues here:
&gt; 
&gt; 1. Where a topic is *contained*. That is, who really &quot;owns&quot; the topic? I might
&gt; create a topic that refers to just a single file, or one that refers to files
&gt; within a patchset, or one that refers to files across patchsets. (Or even across
&gt; reviews, but let&apos;s not even go there!)

Let&apos;s discuss that separately. For Gerrit it&apos;s only semi relevant at the moment (see https://git.eclipse.org/r/#/c/7688/2/org.eclipse.mylyn.reviews.core/model/reviews.ecore).

&gt; In any case for now we should probably simply focus on ensuring that we support
&gt; the Gerrit and R4E use cases properly as they are. The current model doesn&apos;t
&gt; make perfect sense, but I think it at least works.

We changed the cardinality of topic - locations to 1:* under the assumption this was blocking converging on a common model that could be consumed by R4E. Since that doesn&apos;t appear to be the case and the change complicates the model and the code handling topics I&apos;m in favor of reverting that change and going back to a 1:1 relation. The later we make that change the more expensive it&apos;s going to be. At the moment it might be as simple as reverting a few commits.

Miles, if you could make a good use case to allowing multiple locations for a topic we could also go down that route but we would need to add the notion of a TopicLocation or extend location to reference the review item because the current structure doesn&apos;t make sense, i.e. supporting multiple locations within the same review item.

In summary I&apos;m suggesting the following changes:

* Remove comments attribute in ITopic (and use replies where appropriate). I think this might have been added originally to enable topics to contain their child comments but that there are likely beter solutions to that problem.
* Change framework to use the topic to store the data for the first comment.
* Revert change that added support for multiple locations per topic.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193898</commentid>
    <comment_count>13</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 17:49:14 -0500</bug_when>
    <thetext>(In reply to comment #12)

&gt; We changed the cardinality of topic - locations to 1:* under the assumption this
&gt; was blocking converging on a common model that could be consumed by R4E. Since
&gt; that doesn&apos;t appear to be the case and the change complicates the model and the
&gt; code handling topics I&apos;m in favor of reverting that change and going back to a
&gt; 1:1 relation. The later we make that change the more expensive it&apos;s going to be.
&gt; At the moment it might be as simple as reverting a few commits.

Yeah, and eating a bit of crow on my part. ;) https://git.eclipse.org/r/#/c/7908/   http://dev.eclipse.org/mhonarc/lists/mylyn-reviews-dev/msg00636.html Sorry, Robert. ;)

But actually, R4E team have a lot of code that makes the assumption that there are multiple locations. Guys, are you up to making the changes neccesary on your end? Note that the merge won&apos;t be straightforward given the other changes.

&gt; current structure doesn&apos;t make sense, i.e. supporting multiple locations within
&gt; the same review item.

Clearly the way it&apos;s set up doesn&apos;t make much sense.

&gt; In summary I&apos;m suggesting the following changes:
&gt; 
&gt; * Remove comments attribute in ITopic (and use replies where appropriate). I
&gt; think this might have been added originally to enable topics to contain their
&gt; child comments but that there are likely beter solutions to that problem.

Note that those comments will have to be contained somewhere. I actually think that topics is a good place to keep them.

&gt; * Change framework to use the topic to store the data for the first comment.

To be clear, we want to replace the current approach of creating an essentially duplicate comment with one where we have a head comment. Should be straightforward since some of the code has already been isolated, but I&apos;m concerned that there might be some hidden assumptions that will be overlooked.

But my inclination especially given the issue of Topics vs. Comments above is to wait on this change until we revisit all of this functionality. Is there anything that would drive making that change now?

&gt; * Revert change that added support for multiple locations per topic.

R4E team, +1 on that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193920</commentid>
    <comment_count>14</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 19:42:23 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to comment #12)
&gt; &gt; * Remove comments attribute in ITopic (and use replies where appropriate). I
&gt; &gt; think this might have been added originally to enable topics to contain their
&gt; &gt; child comments but that there are likely beter solutions to that problem.

I&apos;m pretty convinced that we don&apos;t want to remove the comments entry. It&apos;s used in a number of places in both the Gerrit and R4E code. I also think it could be the most appropriate place for the containment relationship. Again, referencing  https://git.eclipse.org/r/#/c/7688/2/org.eclipse.mylyn.reviews.core/model/reviews.ecore replies is a complex tree structure, and I think that using Reviews or ReviewItemSet would be too high level. If you consider a threaded conversation, you often want to be able to access all of the items in that list as if they were flat. That&apos;s exactly what we do in the content provider, where it wouldn&apos;t be appropriate to have replies listed as children. Of course, one could make this a derived rollup but I don&apos;t think that is right either.

One thing to be clear on: is there one and only one root comment that all other comments reply on, or should it be possible to have multiple root level comments?  If the former and if we also make Topics no longer extend comments, the question is where to put the first comment? We need something to build the tree off of. My proposal is to have a cardinality 1 &quot;primaryComment&quot;/&quot;initialComment&quot; or similar for that role.


I think we could consider have a cardinality 1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193927</commentid>
    <comment_count>15</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2012-12-12 21:04:21 -0500</bug_when>
    <thetext>To answer the questions directed toR4E:

&gt;But actually, R4E team have a lot of code that makes the assumption that there
&gt;are multiple locations. Guys, are you up to making the changes neccesary on your 
&gt;end? Note that the merge won&apos;t be straightforward given the other changes.

I checked today.  It&apos;s actually not that bad in R4E.  A few small bits of code to modify.  We just have to synchronize so that our changes are committed soon after the common model changes are.


For the Topics vs. Comments I agree let&apos;s wait for that, as it has bigger impacts for R4E.  

In R4E the &quot;root&quot; comment is a special one (we call it an Anomaly).  It has all the information a normal comment has, but with more info on top of it, so the current structure is actually pretty well aligned with that.  Currently, R4E only allows 1 level of subsequent comments, as I stated above.  So the current R4E structure is

Anomaly (Topic)
    Comment 1
    Comment 2
    Comment 3 etc.

So it is a pretty flat structure.  However, we can easily change that for a multi-level structure i.e. replies to replies to comments etc. to align with Gerrit.  This should basically be viewed as an email thread or forum post thread.  And yes it would be good to have the ability to display it in an hierarchical way, as well as in a flat list.  However let&apos;s hold off for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2194015</commentid>
    <comment_count>16</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-13 05:09:18 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; &gt; * Remove comments attribute in ITopic (and use replies where appropriate). I
&gt; &gt; think this might have been added originally to enable topics to contain their
&gt; &gt; child comments but that there are likely better solutions to that problem.
&gt; 
&gt; Note that those comments will have to be contained somewhere. I actually think
&gt; that topics is a good place to keep them.

Okay, then let&apos;s keep it if it&apos;s not terrible from a modeling point of view.
 
&gt; &gt; * Change framework to use the topic to store the data for the first comment.
&gt; 
&gt; To be clear, we want to replace the current approach of creating an essentially
&gt; duplicate comment with one where we have a head comment. 

Yes.

&gt; Should be
&gt; straightforward since some of the code has already been isolated, but I&apos;m
&gt; concerned that there might be some hidden assumptions that will be overlooked.

True, but the overall code handling comments should still be reasonably limited.

&gt; But my inclination especially given the issue of Topics vs. Comments above is to
&gt; wait on this change until we revisit all of this functionality. Is there
&gt; anything that would drive making that change now?

My main concern is that the Gerrit behavior is inconsistent with R4E which would make it difficult to share UI parts. I&apos;m fine with delaying that change until the common navigator is merged but it&apos;s something that I would like to converge on. 

(In reply to comment #14)
&gt; One thing to be clear on: is there one and only one root comment that all other
&gt; comments reply on, or should it be possible to have multiple root level
&gt; comments?

Gerrit has one root comment and one level of replies.

&gt;  If the former and if we also make Topics no longer extend comments,
&gt; the question is where to put the first comment? We need something to build the
&gt; tree off of. My proposal is to have a cardinality 1
&gt; &quot;primaryComment&quot;/&quot;initialComment&quot; or similar for that role.

That works for me. I&apos;ll let you hash that out since to implement what makes the most sense in the light of R4E consuming the framework model.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2194202</commentid>
    <comment_count>17</comment_count>
    <who name="Sebastien Dubois">sebastien.dubois</who>
    <bug_when>2012-12-13 11:49:10 -0500</bug_when>
    <thetext>
I just had a talk with Alvaro here about the cardinality of locations within Topic and there is actually a good reason for having multiple locations per topic.  This has to do with having the code ready to support model reviews, as in models a Comment (Topic) can refer to a group of elements together i.e. multiple locations.

So, please let&apos;s forget about changing the cardinality of locations in topic and let&apos;s keep it to 1..* as it is now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2194239</commentid>
    <comment_count>18</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-13 13:30:12 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; As for the change of the topic being derived in Reviews etc.  we need to
&gt; discuss
&gt; &gt; this offline, as this has major implications for the current R4E.
&gt; 
&gt; Yep, one of the options we&apos;ve been considering is to create some kind of
&gt; non-derived clientTopics reference. Then we could implement the derived value
&gt; for Gerrit as simply returning the clientTopics. Ugly as hell, but we&apos;d replace
&gt; it with simply topics when we do away with the serialization mechanisms
&gt; currently in R4E. This might make things ugly for other consumers, but I think
&gt; we have to recognize that there are going to be a number of changes over the
&gt; next little while...

Okay, I&apos;ve discussed this with Sebastien, and there seems to be no good way around this. So we&apos;re going to create a directTopics non-derived reference from TopicContainer now and revisit it when serialization gets replaced in R4E.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2194350</commentid>
    <comment_count>19</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-13 16:50:46 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; So, please let&apos;s forget about changing the cardinality of locations in topic and
&gt; let&apos;s keep it to 1..* as it is now.

Okay, we can leave this in the model for now. If it turns out that there is no use or consumer of this functionality within the release cycle I may reopen the discussion to remove the functionality.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210727</commentid>
    <comment_count>20</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-31 14:49:16 -0500</bug_when>
    <thetext>https://git.eclipse.org/r/9175</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210729</commentid>
    <comment_count>21</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-31 14:50:17 -0500</bug_when>
    <thetext>The model changes were reviewed on https://git.eclipse.org/r/#/c/9175/ and merged as b26108c7b04aa412183a64b29bc0111d8697d0f1. Thanks for driving this, Miles!</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>