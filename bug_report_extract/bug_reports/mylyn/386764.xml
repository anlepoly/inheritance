<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>386764</bug_id>
          
          <creation_ts>2012-08-07 12:44:00 -0400</creation_ts>
          <short_desc>[api] TaskMapping should be able to handle custom attributes</short_desc>
          <delta_ts>2013-07-12 09:01:30 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Tasks</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>contributed, noteworthy, plan</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.10</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Benjamin Muskalla">benjamin.muskalla</reporter>
          <assigned_to name="Benjamin Muskalla">benjamin.muskalla</assigned_to>
          <cc>eclipse</cc>
    
    <cc>lucas.panjer</cc>
    
    <cc>ryan.golbeck</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2145686</commentid>
    <comment_count>0</comment_count>
    <who name="Benjamin Muskalla">benjamin.muskalla</who>
    <bug_when>2012-08-07 12:44:32 -0400</bug_when>
    <thetext>Right now, the set of attributes supported by @TaskMapping@ / @ITaskMapping@ is limited to a few. Many connectors need other attributes to initialize their TaskDatas and thus extend TaskMapping to introduce new setters/getters (eg. getProjectArea). While this is ok from the connector POV, it makes it really hard for API consumers to use these connectors. As consumer I need to
a) know which class the connector uses as it&apos;s specific @TaskMapping@
b) instantiate the class with the right values

This means that Mylyn API consumers need to access internal classes of the connector as most connectors check and cast the ITaskMapping to their own class in order to access the additional details.

@ITaskMapping@ should rather have a generic setAttribute/getAttribute concept (baked by an @AttributeMap@) to let connectors handle this in a lightweight and streamlined way. With this approach, API consumers don&apos;t need to know about the internals of the connector and just need to provide the right set of key/value pairs of the connector. Dynamically exploring which properties are needed is tracked on task 367372.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145798</commentid>
    <comment_count>1</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-08-07 17:57:56 -0400</bug_when>
    <thetext>Sounds reasonable to me to provide a default implementation that is generic enough to capture the data model required for task creation. I believe most connectors simply pass String fields around and don&apos;t have a need for implementing custom behavior in the mapping so the proposed solution should work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145926</commentid>
    <comment_count>2</comment_count>
    <who name="Benjamin Muskalla">benjamin.muskalla</who>
    <bug_when>2012-08-08 05:27:39 -0400</bug_when>
    <thetext>Yeah, all connectors I&apos;ve seen so far would be fine with Strings. Before starting on this one: Given we pass ITaskmapping and TaskMapping around in APIs, I think it would make sense to enhance those too with the methods and not just provide a generic implementation as subclass, I think this should be part of the interface contract. Given ITaskMapping is @noimplement, we would not even break API (at least no one who&apos;s playing nice). If we don&apos;t do this, it&apos;s up to the connectors to properly check and cast onto a GenericTaskMapping</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146891</commentid>
    <comment_count>3</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-08-10 11:09:39 -0400</bug_when>
    <thetext>ITaskMapping doesn&apos;t have any setters so what would be adding to the interface? public String getAttribute(String key) ? I&apos;m not sure I like that since it&apos;s not obvious what implementors would need to return, e.g. if TaskAttribute.PRIORITY is passed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146893</commentid>
    <comment_count>4</comment_count>
    <who name="Benjamin Muskalla">benjamin.muskalla</who>
    <bug_when>2012-08-10 11:12:01 -0400</bug_when>
    <thetext>We&apos;d need to add setAttribute and getAttribute. I think it should depend on the implementation if they handle this separately from all the other getters or if they map the attribute to one of the getters (eg. setAttribute(TaskAttribute.TASK_KIND -&gt; getTaskKind).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146897</commentid>
    <comment_count>5</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-08-10 11:19:20 -0400</bug_when>
    <thetext>I&apos;m -1 on adding the setter to the interface, it would completely change the contract.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146913</commentid>
    <comment_count>6</comment_count>
    <who name="Benjamin Muskalla">benjamin.muskalla</who>
    <bug_when>2012-08-10 12:09:09 -0400</bug_when>
    <thetext>Yeah maybe because ITaskMapping is used in two different scenarios. From a contract-sense, I think it&apos;s the right approach for the initializeTaskData case.

If we don&apos;t have it in the interface, this means that connectors are forced to cast it down to TaskMapping (or even a subclass of that if we don&apos;t put it into TaskMapping) which then has to be made API.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2163487</commentid>
    <comment_count>7</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-09-23 18:51:17 -0400</bug_when>
    <thetext>I see your point and the reuse of ITaskMapping for that task initialization isn&apos;t particularly intuitive. I don&apos;t see a good way to extend the existing API without making it more complicated though. 

To still be able to provide a common API for task initialization we discussed the following idea: 

* Provide a new API class named TaskInitializationData that implements ITaskMapping and provides an interface for a key value map of strings. The class should be marked as @noextend.
* The class should implement the getters that return Strings and throw UnsupportedOperationException for all other methods.
* Connectors are expected to use that class to manage initialization data. This should be explicit in the JavaDoc.

Benny, feel free to bounce to me if you don&apos;t have bandwidth to implement this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2184451</commentid>
    <comment_count>8</comment_count>
    <who name="Benjamin Muskalla">benjamin.muskalla</who>
    <bug_when>2012-11-16 06:53:47 -0500</bug_when>
    <thetext>Posted a first draft at https://git.eclipse.org/r/8735</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246530</commentid>
    <comment_count>9</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-04-21 19:52:35 -0400</bug_when>
    <thetext>Benny, looks like this is almost done. Do you have time to take another pass at the change and rebase it against the latest?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280885</commentid>
    <comment_count>10</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-07-04 17:33:01 -0400</bug_when>
    <thetext>The change was merged. Thanks, Benny!

Connectors are now encouraged to use TaskInitializationData implementations to specify the initialization for creating tasks, e.g. in in NewTaskWizard.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281197</commentid>
    <comment_count>11</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-07-05 13:03:18 -0400</bug_when>
    <thetext>This has caused a regression in tests: 

java.lang.UnsupportedOperationException
	at org.eclipse.mylyn.tasks.core.TaskInitializationData.getTaskData(TaskInitializationData.java:158)
	at org.eclipse.mylyn.tasks.core.data.TaskMapper.merge(TaskMapper.java:145)
	at org.eclipse.mylyn.bugzilla.tests.BugzillaTaskDataHandlerTest.testCloneTaskData(BugzillaTaskDataHandlerTest.java:59)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281204</commentid>
    <comment_count>12</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-07-05 13:07:51 -0400</bug_when>
    <thetext>It looks like Bugzilla repository tests did not run as part of the suite: https://hudson.eclipse.org/sandbox/job/mylyn-tasks-gerrit/678/. Frank, do you have any ideas why that would be the case?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281218</commentid>
    <comment_count>13</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-07-05 13:25:48 -0400</bug_when>
    <thetext>I pushed 2 reviews to fix the test case and fail if no fixtures are discovered which appears to be the case for Bugzilla:

https://git.eclipse.org/r/#/c/14325/
https://git.eclipse.org/r/#/c/14324/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281346</commentid>
    <comment_count>14</comment_count>
    <who name="Frank Becker">eclipse</who>
    <bug_when>2013-07-06 14:03:38 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; I pushed 2 reviews to fix the test case and fail if no fixtures are
&gt; discovered which appears to be the case for Bugzilla:
&gt; 
&gt; https://git.eclipse.org/r/#/c/14325/
&gt; https://git.eclipse.org/r/#/c/14324/

We get no fixtures if we use Hudson. Maybe this is because of the http proxy.

mylyn-tasks-gerrit job #599 (713 tests) we have since job #603 (541 tests)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283883</commentid>
    <comment_count>15</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-07-12 09:01:30 -0400</bug_when>
    <thetext>Frank, I submitted your fix and added proxy initialization code to fix the test fixture discovery. I opened bug 412743 to discuss improving that though. Thanks very much for your help!</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>