<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>334967</bug_id>
          
          <creation_ts>2011-01-20 20:01:00 -0500</creation_ts>
          <short_desc>[navigator] create common navigator for review content</short_desc>
          <delta_ts>2013-01-31 20:07:04 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>14</classification_id>
          <classification>Mylyn</classification>
          <product>Mylyn Reviews</product>
          <component>Framework</component>
          <version>unspecified</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>contributed, noteworthy</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>2.0</target_milestone>
          <dependson>394925</dependson>
    
    <dependson>394926</dependson>
          <blocked>395770</blocked>
    
    <blocked>390367</blocked>
    
    <blocked>390369</blocked>
    
    <blocked>390371</blocked>
    
    <blocked>390375</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Steffen Pingel">steffen.pingel</reporter>
          <assigned_to name="Miles Parker">milesparker</assigned_to>
          <cc>alvsan09</cc>
    
    <cc>kilian.matt</cc>
    
    <cc>milesparker</cc>
    
    <cc>sam.davis</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1870489</commentid>
    <comment_count>0</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-01-20 20:01:15 -0500</bug_when>
    <thetext>Create a common navigator to browse the contents of the active code review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1870665</commentid>
    <comment_count>1</comment_count>
    <who name="Kilian Matt">kilian.matt</who>
    <bug_when>2011-01-21 06:52:15 -0500</bug_when>
    <thetext>Since I assume, that the navigator operates on a common review model I assume we have to extend that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1870923</commentid>
    <comment_count>2</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-01-21 13:58:25 -0500</bug_when>
    <thetext>I think there would be a content provider for the common model (if we decide to provide that). The common navigator framework allows very extensible and flexible structuring of content though so the navigator wouldn&apos;t be limited to supporting that model.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1878863</commentid>
    <comment_count>3</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2011-02-05 21:17:58 -0500</bug_when>
    <thetext>Let me if we have a driver to do this for 0.7. I don&apos;t think the Gerrit connector will require this until later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164318</commentid>
    <comment_count>4</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-09-25 13:36:15 -0400</bug_when>
    <thetext>*** Bug 390366 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164319</commentid>
    <comment_count>5</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-09-25 13:36:55 -0400</bug_when>
    <thetext>Scheduled for next round of ui improvements.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164339</commentid>
    <comment_count>6</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-09-25 14:08:54 -0400</bug_when>
    <thetext>Scope is expanded to include generic participants support as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2184322</commentid>
    <comment_count>7</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-11-15 21:10:14 -0500</bug_when>
    <thetext>Please see Gerrit:

https://git.eclipse.org/r/#/c/8732/

I&apos;d like to focus on basic implementation issues at this point, while I think there are a few niceties in there, there are many additional cool things we can do, but for now I&apos;d like to get a working implementation in. Let&apos;s open up subtasks for UI ideas/nits, etc..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2189797</commentid>
    <comment_count>8</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-02 18:04:13 -0500</bug_when>
    <thetext>That sounds good to me and the current iteration already looks promising. 

Can you describe the minimal feature set that we are aiming for? From my point of view it would be nice to be able to:
* See files and comments of the active patch set
* Open the compare editor for a file.

Multiple presentations and fancy label providers are nice to have but it might be easier to leave that for a later review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2190007</commentid>
    <comment_count>9</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-03 11:59:52 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; That sounds good to me and the current iteration already looks promising. 
&gt; 
&gt; Can you describe the minimal feature set that we are aiming for? From my
&gt; point of view it would be nice to be able to:
&gt; * See files and comments of the active patch set
&gt; * Open the compare editor for a file.

Those are completed. We might want some way to highlight or filter for items in the last patch set.

&gt; Multiple presentations and fancy label providers are nice to have but it
&gt; might be easier to leave that for a later review.

Those are all feature complete at this point in any case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193380</commentid>
    <comment_count>10</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-11 20:53:41 -0500</bug_when>
    <thetext>See review https://git.eclipse.org/r/#/c/9175/

I&apos;ve proposed the following changes to the model to support the UI changes:

Create TopicContainer to encapsulate all items that (yes) can contain topics, that is Reviews and ReviewItems.
Created a derived &quot;allComments&quot; reference for TopicContainers. This represents all comments contained (reachable) from the container, e.g. Reviews contain all PatchSets comments, which contain all Artifact comments.
Move createTopicComment operation to TopicContainer, so Review instances provide this behavior. 
The topics reference is no longer derived. This may break R4E functionality, but is a change we&apos;ll need to make at some point in any case.
Created an opposite reference from Comment &quot;parentTopic&quot; to Topic &quot;comments&quot;.
Created an &quot;owner&quot; entry for Reviews.
Added a reference to FileItem (file) from File Revision.
Added rangeMin and rangeMax derived values for line locations.
Created an Orderable interface to allow items to place themselves in an arbitrary ordered space. (e.g. linenumber for comments)
Created a Dateable interface to support all classes that have creation and update dates.
Created a Dateable derived value &quot;lastChangeDate&quot; to return the last date the object was modified. (For case where updateDate is null, but creationDate is not.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193381</commentid>
    <comment_count>11</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-11 20:58:58 -0500</bug_when>
    <thetext>I forgot that that review will break, because the existing UI can&apos;t compile against it. So we&apos;ll have to keep these on the same review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193444</commentid>
    <comment_count>12</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-12 03:40:45 -0500</bug_when>
    <thetext>Why does the change break the UI? Can we make an incremental change that doesn&apos;t or update the relevant parts of the UI? It&apos;s important that reviews are broken down into consumable chunks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193703</commentid>
    <comment_count>13</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-12 12:03:55 -0500</bug_when>
    <thetext>We renamed a usage. But yes, I guess we could include just that fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196408</commentid>
    <comment_count>14</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-19 19:43:53 -0500</bug_when>
    <thetext>High level comments from looking at the first portion of the review:

* I&apos;m not convinced that the &quot;Review Comments&quot; content extension is needed. I would strongly prefer if we removed it to simplify the UI and discuss alternatives to using a content extension to satisfy the underlying use case (whichever that is).
* I found the use of the server icon confusing. It makes sense to have a separate icon for generated comments but the server doesn&apos;t seem right since it&apos;s used for an entirely different purpose in other contexts.

There are a number of classes that are not used such as ReviewsSorterDateable. I don&apos;t know what purpose they serve but unless there is a concrete use of these classes they should be removed from the review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196412</commentid>
    <comment_count>15</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-19 19:57:14 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; High level comments from looking at the first portion of the review:
&gt; 
&gt; * I&apos;m not convinced that the &quot;Review Comments&quot; content extension is needed. I
&gt; would strongly prefer if we removed it to simplify the UI and discuss
&gt; alternatives to using a content extension to satisfy the underlying use case
&gt; (whichever that is).

I feel strongly that this feature is helpful. In fact, in real world usage I&apos;ve found it much more helpful and useful than the tree view. The thing that I find most broken about the current UIs is the inability to see inline comments and general comments in a common presentation, or even to be able to scan comments at all. Without this feature, we&apos;re still forcing users to drill down into each artifact to see comments, even if all they wanted to do was get an overview of what issues had been addressed and what hadn&apos;t.

Also, when the view is not able to be presented flat, there are sorting options that can&apos;t be supportedsensibly.

Note that this feature is not at all unusual. For example, imagine how ponderous the Search view would be without the ability to show search results as a flat list.

I agree that we could improve the underlying code and perhaps not expose this as a content extension, but I don&apos;t think it would be worth losing what I think is pretty cool functionality just for that reason.

&gt; * I found the use of the server icon confusing. It makes sense to have a
&gt; separate icon for generated comments but the server doesn&apos;t seem right since
&gt; it&apos;s used for an entirely different purpose in other contexts.

Makes sense. Other ideas.

&gt; There are a number of classes that are not used such as ReviewsSorterDateable. I
&gt; don&apos;t know what purpose they serve but unless there is a concrete use of these
&gt; classes they should be removed from the review.

These are there for future extensibility. I&apos;ve been working with them as we develop the functionality, and I&apos;d like to maintain them especially given differing potential approaches to e.g. bug 396921.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196431</commentid>
    <comment_count>16</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-19 21:30:40 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; I agree that we could improve the underlying code and perhaps not expose this as
&gt; a content extension, but I don&apos;t think it would be worth losing what I think is
&gt; pretty cool functionality just for that reason.

Okay you convinced me that it makes sense to go with that.

Part of what threw me off were the different column layouts in the presentation which made it look like it&apos;s separate widgets. I agree that columns are sensible for the navigator but usability wise it&apos;s already difficult to manage one set of columns. Having different columns in the various presentations isn&apos;t manageable.

It would seem most obvious to merge the File and Location column. Have you tried that?
 
&gt; &gt; * I found the use of the server icon confusing. It makes sense to have a
&gt; &gt; separate icon for generated comments but the server doesn&apos;t seem right since
&gt; &gt; it&apos;s used for an entirely different purpose in other contexts.
&gt; 
&gt; Makes sense. Other ideas.

Let&apos;s just not differentiate them from other comments for now. We don&apos;t have a good way to detect that anyways other than hard coding comment patterns which isn&apos;t right.
 
&gt; &gt; There are a number of classes that are not used such as ReviewsSorterDateable.
&gt; I
&gt; &gt; don&apos;t know what purpose they serve but unless there is a concrete use of these
&gt; &gt; classes they should be removed from the review.
&gt; 
&gt; These are there for future extensibility. I&apos;ve been working with them as we
&gt; develop the functionality, and I&apos;d like to maintain them especially given
&gt; differing potential approaches to e.g. bug 396921.

Okay, that&apos;s fine to do that but they shouldn&apos;t be part of the review as I don&apos;t want to merge as long as they are work in progress. Sorry, if that&apos;s a bit more overhead to maintain in terms of other pending changes but it will speed up merging changes and we don&apos;t end up with dead code in master.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196440</commentid>
    <comment_count>17</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-19 22:12:53 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; It would seem most obvious to merge the File and Location column. Have you tried
&gt; that?

Here&apos;s the problem there:

We want to display location right aligned. If we put it immediatly after the file name, it won&apos;t be aligned. If we put it before the file name, we need to determine how much left padding to put it in. (Fixed value? Max line count across all files. :O) And it looks weird because there is a gap there. (I tried a bunch of permutations in the non-table version of all of this. 

BTW, I just noticed is hard to differentiate smack up against Last Change which also displays a number. Note that we can&apos;t use Styled Text for the location as I initially did, since you need to do a lot of hacks to make StyledText right aligned.

Basically it comes down to whether you think it&apos;s more important to have these in a single column or to be able to easily compare file line numbers. Unless I&apos;ve missed another way to do this.

Also, I considered keeping file in the same column for both views, that is sharing the column in the flat view as it is shared in the tree view, but that would require adding a separate row for each file, and it wouldn&apos;t really be that much different from a resource tree structure then.

One other possiblity for cleaning things up a bit would be to move the Author column in the flat presentation so that it is immediately before &quot;Last Change&quot;. (That would solve the line number issue above.) I&apos;d put Author where it was because it seemed much more natural to have author appear closest to the comment itself. But perhaps it would be a better tradeoff to move it?

&gt; Let&apos;s just not differentiate them from other comments for now. We don&apos;t have a
&gt; good way to detect that anyways other than hard coding comment patterns which
&gt; isn&apos;t right.

Okay, I&apos;ve removed the implementation (commented out though) from current patch.

&gt; Okay, that&apos;s fine to do that but they shouldn&apos;t be part of the review as I don&apos;t
&gt; want to merge as long as they are work in progress. Sorry, if that&apos;s a bit more
&gt; overhead to maintain in terms of other pending changes but it will speed up
&gt; merging changes and we don&apos;t end up with dead code in master.

Removed dead code in current review. Let me nkow if I seeme to have missed anything.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196441</commentid>
    <comment_count>18</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-19 22:21:44 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; One other possiblity for cleaning things up a bit would be to move the Author
&gt; column in the flat presentation so that it is immediately before &quot;Last Change&quot;.
&gt; (That would solve the line number issue above.) I&apos;d put Author where it was
&gt; because it seemed much more natural to have author appear closest to the comment
&gt; itself. But perhaps it would be a better tradeoff to move it?

Okay, I just tired that and remember now why I didn&apos;t like it. It&apos;s subtle so bear with me here.. Even though I&apos;d really like to, we can&apos;t make comments span multiple columns, without significant SWT / StyledString hackery. That means that we get comment text cut off at the end of each column. That looks fine when there is always text in the next column, but it looks like crap when there isn&apos;t. There is always an author, but for global comments there isn&apos;t always a file. So by having the author column where it is we improve the look considerably.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196535</commentid>
    <comment_count>19</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-20 06:47:08 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #16)
&gt; &gt; It would seem most obvious to merge the File and Location column. Have you
&gt; tried
&gt; &gt; that?
&gt; 
&gt; Here&apos;s the problem there:
&gt; 
&gt; We want to display location right aligned. If we put it immediatly after the
&gt; file name, it won&apos;t be aligned. If we put it before the file name, we need to
&gt; determine how much left padding to put it in. (Fixed value? Max line count
&gt; across all files. :O) And it looks weird because there is a gap there. (I tried
&gt; a bunch of permutations in the non-table version of all of this.

Having the line number right aligned has a benefit but I doubt that it&apos;s particularly important. If you look at the Markers view it doesn&apos;t have that either. Personally, I never look at the line number anyways since it doesn&apos;t mean anything, the logical element or artifact that a comment or marker is referring to is relevant to me, not the location within a file. 

&gt; Basically it comes down to whether you think it&apos;s more important to have these
&gt; in a single column or to be able to easily compare file line numbers. Unless
&gt; I&apos;ve missed another way to do this.

It&apos;s much more import to me to have a single column layout and fewer columns are better.

&gt; Also, I considered keeping file in the same column for both views, that is
&gt; sharing the column in the flat view as it is shared in the tree view, but that
&gt; would require adding a separate row for each file, and it wouldn&apos;t really be
&gt; that much different from a resource tree structure then.

Why? You could show the file as part of the location. I think *very* important that we share the columns otherwise switching presentations is like opening a whole different view.

&gt; One other possiblity for cleaning things up a bit would be to move the Author
&gt; column in the flat presentation so that it is immediately before &quot;Last Change&quot;.
&gt; (That would solve the line number issue above.) I&apos;d put Author where it was
&gt; because it seemed much more natural to have author appear closest to the comment
&gt; itself. But perhaps it would be a better tradeoff to move it?

I like the current position.

&gt; Okay, I just tired that and remember now why I didn&apos;t like it. It&apos;s subtle so
&gt; bear with me here.. Even though I&apos;d really like to, we can&apos;t make comments span
&gt; multiple columns, without significant SWT / StyledString hackery. That means
&gt; that we get comment text cut off at the end of each column. That looks fine when
&gt; there is always text in the next column, but it looks like crap when there
&gt; isn&apos;t. There is always an author, but for global comments there isn&apos;t always a
&gt; file. So by having the author column where it is we improve the look
&gt; considerably.

That assumption isn&apos;t correct, there can be comments that have no author:

java.lang.NullPointerException
	at org.eclipse.mylyn.internal.reviews.ui.providers.ReviewsLabelProvider.getImage(ReviewsLabelProvider.java:115)
	at org.eclipse.mylyn.internal.reviews.ui.providers.TableStyledLabelProvider.getColumnImage(TableStyledLabelProvider.java:57)
	at org.eclipse.mylyn.internal.reviews.ui.providers.ReviewsFlatLabelProvider.getColumnImage(ReviewsFlatLabelProvider.java:41)
	at org.eclipse.mylyn.internal.reviews.ui.providers.TableStyledLabelProvider$1.getImage(TableStyledLabelProvider.java:86)
	
Anyways, let&apos;s try a simple approach before we add several column layouts. We can iterate over the column order later. The current ordering seems fine to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196582</commentid>
    <comment_count>20</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2012-12-20 09:14:07 -0500</bug_when>
    <thetext>In the interest of avoiding two much back and forth on the presentation design I would like to make the following suggestion:

* We go with a simple single column layout and combine the existing label provider implementations and aim to merge the change before the holidays.
* We postpone the decision to change the code, do a UI review with a larger audience on the next Mylyn call in the second week of January and decide how to proceed then.

Any preferences?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196752</commentid>
    <comment_count>21</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-20 14:23:08 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; Having the line number right aligned has a benefit but I doubt that it&apos;s
&gt; particularly important. If you look at the Markers view it doesn&apos;t have that
&gt; either. Personally, I never look at the line number anyways since it doesn&apos;t
&gt; mean anything, the logical element or artifact that a comment or marker is
&gt; referring to is relevant to me, not the location within a file.

Yeah, you make a good case; Sam was saying the same thing. But where I think it does matter is ordering, since we generally work through the items one at a time. But that&apos;s implicit in the layour anyway. Honestly, for me it was more a matter of it looking messy, but OTOH, it allows the use of styled text for the line number.


&gt; It&apos;s much more import to me to have a single column layout and fewer columns are
&gt; better.

I&apos;m not convinced that it matters -- once you have columns, why limit the number? If you look at a view like the Git History or Problems, they have multiple items and I don&apos;t think it is an issue.

&gt; &gt; Also, I considered keeping file in the same column for both views, that is
&gt; &gt; sharing the column in the flat view as it is shared in the tree view, but that
&gt; &gt; would require adding a separate row for each file, and it wouldn&apos;t really be
&gt; &gt; that much different from a resource tree structure then.
&gt; 
&gt; Why? You could show the file as part of the location. I think *very* important
&gt; that we share the columns otherwise switching presentations is like opening a
&gt; whole different view.

Yeah, I can see your point that it can be confusing. In a way, I&apos;m trying to have our cake and eat it to, because it seemed pretty clear that we did not want to have multiple views for this, which was my original preference. Let me see what I can come up with.

&gt; I like the current position.

+1
&gt; &gt; there is always text in the next column, but it looks like crap when there
&gt; &gt; isn&apos;t. There is always an author, but for global comments there isn&apos;t always a
&gt; &gt; file. So by having the author column where it is we improve the look
&gt; &gt; considerably.
&gt; 
&gt; That assumption isn&apos;t correct, there can be comments that have no author:

Whoops. What review did you see that on?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196753</commentid>
    <comment_count>22</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-20 14:26:40 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; In the interest of avoiding two much back and forth on the presentation design I
&gt; would like to make the following suggestion:
&gt; 
&gt; * We go with a simple single column layout and combine the existing label
&gt; provider implementations and aim to merge the change before the holidays.
&gt; * We postpone the decision to change the code, do a UI review with a larger
&gt; audience on the next Mylyn call in the second week of January and decide how to
&gt; proceed then.

I&apos;d like to get in what we have, or very near to it. FWIW, I built a single column layout to begin with, so that&apos;s still there to play around with. Here&apos;s my POV:

I&apos;d *really* like to get this in before the holidays so that people can take a crack at it in the real world. There is definitely some fine-tuning to do or even perhaps whole sale changes, but the point is that now we have the infrastructure in place to easily move things around. So I&apos;d love to have a UI review, but I also want to see this committed as soon as we have the remaing code issues in place. In the meantime, I&apos;ll try to work in some changes along the lines of what you and others have suggested. Does that seem reasonable?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2197132</commentid>
    <comment_count>23</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2012-12-21 20:21:13 -0500</bug_when>
    <thetext>I&apos;ve just committed a number of changes that I hope will address at least some of the issues. I&apos;ve consolidated the columns, made them size to max, and made a number of minor improvements. Most importantly, I&apos;ve gone ahead an abstracted and simplified a number of the implementation details. It should now be quite easy to change things around/experiement with different layouts. The one thing that I have retained is splitting the columns for items into separate comment and artifact columns for the flat view. I hope when you see the latest iteration that it will make sense to you. I really thing combining the columns is not optimal, but in any case I&apos;d like to put that discussion off for a a more comprehensive UI review in January. My hope is that we can merge this as it is now % any new code issues that might surface.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2200883</commentid>
    <comment_count>24</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-09 16:03:39 -0500</bug_when>
    <thetext>Thanks for making your efforts, Miles. Based on today&apos;s UI review these are the items I would prefer to have changed before submitting:

* Revert label provider presentation for review editor to use full path name for files to make it easier to see the related items based on the path hierarchy.
* Make artifact column the first column in the flat presentation and use something like &quot;Global&quot; if the artifact name is empty.

It feels like there was something else but I don&apos;t remember now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2200902</commentid>
    <comment_count>25</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-09 16:37:58 -0500</bug_when>
    <thetext>Okay, I&apos;ve made those changes. w/ the &quot;global&quot; node it looks much better. (I tried using the actual change name in place of &quot;Global&quot; but it just created more text w/o any real benefit.) I can&apos;t rmemeber the other thing either. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210733</commentid>
    <comment_count>26</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-31 14:54:12 -0500</bug_when>
    <thetext>Thanks for hanging in there, Miles! I have merged the review into master.

There are still a few open tasks that need to be addressed and should be tracked on separate bugs:

* The Gerrit editor now creates all controls eagerly to download all patch set content. This can have noticeable performance impact when opening the review editor depending on the size of the review and needs to be improved.
* The Gerrit editor spawns a job per patch set which can slow down the UI for a reviews with many (&gt; 20) patch sets. It would be better if data was cached more lazily and if there was a single job per review to do that.
* The Gerrit UI plug-in is directly coupled to the navigator. That should not be the case. All navigator concerns should be handled by the framework.

Miles, it would be great if you could open tasks for these.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210776</commentid>
    <comment_count>27</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-31 16:21:25 -0500</bug_when>
    <thetext>
(In reply to comment #26)
&gt; There are still a few open tasks that need to be addressed and should be tracked
&gt; on separate bugs:

Okay, before I do that let me clarify these a bit more..

&gt; * The Gerrit editor now creates all controls eagerly to download all patch set
&gt; content. This can have noticeable performance impact when opening the review
&gt; editor depending on the size of the review and needs to be improved.

1. So the concern here is the controls, not the patch set loading itself -- which is a separate issue (treated below)?

&gt; * The Gerrit editor spawns a job per patch set which can slow down the UI for a
&gt; reviews with many (&gt; 20) patch sets. It would be better if data was cached more
&gt; lazily and if there was a single job per review to do that.

2. So what we&apos;re talking about here is sort of batching these up then, right?

&gt; * The Gerrit UI plug-in is directly coupled to the navigator. That should not be
&gt; the case. All navigator concerns should be handled by the framework.

3. Right, I think this was unavoidable for the most part in the the current implementation because of the coupling between the Gerrit UI and the the Gerrit API. I think we can untangle all of that.

In fact, my thinking in all of this is that these concerns will be addressed as a part of the EMF Edit and Remote API work. (Don&apos;t have detailed bugs to refer to yet because we&apos;re in the midst of more detailed planning.) The current implementation is far from ideal, but should make a lot more sense when we&apos;re able to support a truly unified model, with for example updating of the patch set contents not happening simply because the user opened the editor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210859</commentid>
    <comment_count>28</comment_count>
    <who name="Sam Davis">sam.davis</who>
    <bug_when>2013-01-31 18:37:44 -0500</bug_when>
    <thetext>I&apos;m finding the caching of all patch sets as soon as the review is opened to be a major problem even with just 3 large patch sets. I have to go to the web UI if I want to actually see the inline comments. It seems like the most recent should be fetched first rather than fetching them all in parallel.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210861</commentid>
    <comment_count>29</comment_count>
    <who name="Steffen Pingel">steffen.pingel</who>
    <bug_when>2013-01-31 18:40:34 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; &gt; * The Gerrit editor now creates all controls eagerly to download all patch set
&gt; &gt; content. This can have noticeable performance impact when opening the review
&gt; &gt; editor depending on the size of the review and needs to be improved.
&gt; 
&gt; 1. So the concern here is the controls, not the patch set loading itself --
&gt; which is a separate issue (treated below)?

Yes, particularly on Gtk just creating controls is slow (at least much slower than on Windows, nor sure about Mac).

&gt; &gt; * The Gerrit editor spawns a job per patch set which can slow down the UI for
&gt; a
&gt; &gt; reviews with many (&gt; 20) patch sets. It would be better if data was cached
&gt; more
&gt; &gt; lazily and if there was a single job per review to do that.
&gt; 
&gt; 2. So what we&apos;re talking about here is sort of batching these up then, right?

Yes, just doing things more sequentially rather than hitting the server with x parallel requests.

&gt; &gt; * The Gerrit UI plug-in is directly coupled to the navigator. That should not
&gt; be
&gt; &gt; the case. All navigator concerns should be handled by the framework.
&gt; 
&gt; 3. Right, I think this was unavoidable for the most part in the the current
&gt; implementation because of the coupling between the Gerrit UI and the the Gerrit
&gt; API. I think we can untangle all of that.

The review behavior class should already provide sufficient abstraction. It would simply need to be created through the connector rather than directly in the command handler.

The other thing that is missing are proper event handlers for the model that update the Navigator view instead of relying on explicit refreshes from the Gerrit editor page.

I don&apos;t think any of this requires larger framework changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210881</commentid>
    <comment_count>30</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-31 19:27:59 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; Yes, particularly on Gtk just creating controls is slow (at least much slower
&gt; than on Windows, nor sure about Mac).

Good to know. There is 0 effect on Mac -- e.g. opening the editor for the common navigator review with 32 patch sets doesn&apos;t take any longer that opening a bugzilla review. I&apos;ll keep that in mind w/ future changes.

&gt; The review behavior class should already provide sufficient abstraction. It
&gt; would simply need to be created through the connector rather than directly in
&gt; the command handler.
&gt; 
&gt; The other thing that is missing are proper event handlers for the model that
&gt; update the Navigator view instead of relying on explicit refreshes from the
&gt; Gerrit editor page.

Right, that was the point of my comment below:

&gt;...The current
&gt; implementation is far from ideal, but should make a lot more sense when we&apos;re
&gt; able to support a truly unified model, with for example updating of the patch
&gt; set contents not happening simply because the user opened the editor.

&gt; I don&apos;t think any of this requires larger framework changes.

It doesn&apos;t *require* them, my point is that the framework changes will ideally render them moot. I&apos;ll create the bugs so that we make sure that we&apos;re addressing those concerns.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210889</commentid>
    <comment_count>31</comment_count>
    <who name="Miles Parker">milesparker</who>
    <bug_when>2013-01-31 20:07:04 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; * The Gerrit editor now creates all controls eagerly to download all patch set
&gt; content. This can have noticeable performance impact when opening the review
&gt; editor depending on the size of the review and needs to be improved.

bug 399697

&gt; * The Gerrit editor spawns a job per patch set which can slow down the UI for a
&gt; reviews with many (&gt; 20) patch sets. It would be better if data was cached more
&gt; lazily and if there was a single job per review to do that.

bug 399699

&gt; * The Gerrit UI plug-in is directly coupled to the navigator. That should not be
&gt; the case. All navigator concerns should be handled by the framework.

bug 399700</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>